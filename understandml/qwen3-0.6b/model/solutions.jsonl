{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Args:\n        data: An ndarray where the last column is the target y and all preceding columns are features x.\n        alpha: Regularisation strength (>= 0)\n    \n    Returns:\n        A list of floats representing the weight vector after applying Ridge regression.\n        Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \n    Raises:\n        ValueError: If the input data is not a valid numpy array.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input must be a numpy array')\n    X = np.column_stack((data[:-1], np.ones(data.shape[1])))\n    n_features = X.shape[1]\n    X_T_X = np.dot(X.T, X)\n    matrix = X_T_X + alpha * np.eye(n_features)\n    det_matrix = np.linalg.det(matrix)\n    if det_matrix == 0:\n        return [-1.0]\n    inverse_matrix = np.linalg.inv(matrix)\n    weights = np.dot(inverse_matrix, X_T_X.T)\n    rounded_weights = [round(w, 4) for w in weights]\n    return rounded_weights"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    alpha = np.zeros_like(y_train)\n    b = 0.0\n    for i in range(n_iter):\n        current_activation = 0.0\n        current_activation = np.dot(alpha, X_train[i]) + b\n        margin = current_activation + b\n        if margin <= 0:\n            alpha[i] += eta * y_train[i]\n            b += eta * y_train[i]\n            alpha = np.zeros_like(y_train)\n            b = 0.0\n        elif not any((gradient > 0 for gradient in alpha)):\n            break\n    w = np.round(alpha, 4)\n    b_rounded = np.round(b, 4)\n    return (w, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n    scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': lambda mu: mu, 'log': lambda mu: np.log(mu), 'logit': lambda mu: np.log(1 / (1 + np.exp(-mu)))}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    tree = {}\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return indices\n        feature_index = np.random.choice(np.arange(len(indices)))\n        down = min(data[indices, feature_index])\n        up = max(data[indices, feature_index])\n        v = np.random.uniform(down, up)\n        left_child = build_tree(indices[indices < v])\n        right_child = build_tree(indices[indices > v])\n        path = [feature_index] + [left_child, right_child]\n        tree[indices] = path\n    build_tree(data.shape[0])\n    depths = []\n    for index in data[:, 0]:\n        path = tree[index]\n        depth = len(path) - 1\n        depths.append(depth)\n    return depths"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"\n    Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0 or X.shape[1] == 0:\n        return []\n    D = np.zeros((X.shape[0], X.shape[0]))\n    for i in range(X.shape[0]):\n        for j in range(i + 1, X.shape[0]):\n            D[i][j] = np.sum((X[i, :] - X[j, :]) ** 2)\n    result = np.round(D, 4).tolist()\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"\n    Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    aggregated_scores = []\n    for prediction in predictions:\n        scores = [learning_rate * np.sum(prediction[i]) for i in range(len(prediction))]\n        aggregated_scores.append(scores)\n    soft_max = np.exp(aggregated_scores) / np.max(np.abs(np.exp(aggregated_scores)))\n    predicted_labels = [np.argmax(soft_max, axis=0)[i] for i in range(len(soft_max[0]))]\n    return predicted_labels"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"\n    Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    item_counts = [Counter(transaction) for transaction in transactions]\n    itemsets = []\n    for i in range(len(item_counts)):\n        for j in range(i + 1):\n            if i == j:\n                support = sum((1 for cnt in item_counts[i] if cnt >= minsup * N))\n                itemsets.append((tuple(transactions[i][j]), support))\n            else:\n                support = sum((1 for cnt in item_counts[i] if cnt >= minsup * N))\n                itemsets.append((tuple(transactions[i][j]), support))\n    itemsets.sort(key=lambda x: tuple(x))\n    result = {item: value for (item, value) in itemsets if value >= math.ceil(minsup * N)}\n    return result"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test: Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations: Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.zeros((n, 1))\n    b = 0\n\n    def compute_cost(X, y, w, b):\n        z = np.dot(X, w) + b\n        sigma = 1 / (1 + np.exp(-z))\n        return np.sum(y * sigma) / m\n\n    def compute_mean_squared_error(X, y, w, b):\n        return compute_cost(X, y, w, b)\n    for _ in range(n_iterations):\n        dw = np.dot(X_train[:, 1:], y_train[1:]) - np.dot(X_train[:, 1:], w)\n        db = np.mean(y_train[1:]) - b\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    predicted_labels = []\n    for x in X_test:\n        z = np.dot(x, w) + b\n        sigma = 1 / (1 + np.exp(-z))\n        predicted_labels.append(int(round(sigma)))\n    return predicted_labels"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\\\(\tilde{X}_{t-1}\\\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\\\(X_t\\\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\\\(\\x0barepsilon\\\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    prev_array = np.array(prev)\n    cur_array = np.array(cur)\n    weight_array = np.array(weight)\n    if prev_array.ndim == 0 and cur_array.ndim == 0 and (weight_array.ndim == 0):\n        result = np.dot(prev_array, weight_array) + np.dot(cur_array, 1 - weight_array)\n        return round(result, 4)\n    else:\n        if isinstance(weight, float):\n            result = np.dot(prev_array, weight_array) + np.dot(cur_array, 1 - weight_array)\n        elif isinstance(weight, list):\n            result = np.dot(prev_array, weight_array) + np.dot(cur_array, 1 - weight_array)\n        else:\n            raise ValueError(\"Input 'weight' must be a scalar or array of the same length.\")\n        return round(result, 4)"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centers = data[:k]\n    for _ in range(max_iter):\n        distances = np.sqrt((data - centers).dot(data - centers))\n        labels = np.argmin(distances, axis=0)\n        new_centers = np.mean(centers[labels], axis=0)\n        change = np.max(np.abs(new_centers - centers), axis=0)\n        if change < epsilon:\n            break\n        centers = round(new_centers, 4)\n    if max_iter > 0:\n        if change > epsilon:\n            return ([round(center, 4) for center in centers], labels)\n        else:\n            return ([round(center, 4) for center in centers], labels)\n    else:\n        return ([round(center, 4) for center in centers], labels)"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool=False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    power_spectra = []\n    for row in frames:\n        n_samples = len(row)\n        if n_samples == 0:\n            continue\n        fft_result = np.fft.rfft(row)\n        num_bins = n_samples // 2 + 1\n        power_spectrum_row = np.round(fft_result / num_bins, 4).tolist()\n        power_spectra.append(power_spectrum_row)\n    return power_spectra"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_user, n_item) = data.shape\n    r = data[user_ind, :]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(n_item):\n            if i == j:\n                continue\n            rated_users = set()\n            for row in data:\n                if row[i] > 0 and row[j] > 0:\n                    rated_users.add(row.index)\n            if not rated_users:\n                S[i, j] = S[j, i] = 0.0\n            elif criterion == 'cosine':\n                v1 = r[rated_users].copy()\n                v2 = data[rated_users, j].copy()\n                mean_v1 = np.mean(v1)\n                std_v1 = np.std(v1)\n                if std_v1 > 0.001:\n                    v1 = (v1 - mean_v1) / std_v1\n                else:\n                    v1 = v1\n                mean_v2 = np.mean(v2)\n                std_v2 = np.std(v2)\n                if std_v2 > 0.001:\n                    v2 = (v2 - mean_v2) / std_v2\n                else:\n                    v2 = v2\n                score = np.dot(v1, v2) / np.sqrt(np.sum(v1 ** 2) * np.sum(v2 ** 2))\n                S[i, j] = score\n            else:\n                v1 = r[rated_users].copy()\n                v2 = data[rated_users, j].copy()\n                corr_coeff = np.corrcoef(v1, v2)[0][1]\n                S[i, j] = corr_coeff\n    unrated_items = [item for item in range(n_item) if data[user_ind, item] == 0]\n    scores = []\n    for t in unrated_items:\n        total = 0.0\n        for i in range(n_item):\n            if i in rated_users:\n                total += data[user_ind, i] * S[t, i]\n        if total == 0:\n            score = 0.0\n        else:\n            denominator = np.sqrt(np.sum((S[t, i] ** 2 for i in rated_users)))\n            score = total / denominator\n        scores.append(score)\n    sorted_scores = sorted(scores, reverse=True)\n    result = []\n    for (idx, score) in enumerate(sorted_scores[:k]):\n        result.append(unrated_items[idx])\n    return result"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"\n    Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    p = np.sigmoid(y_pred)\n    if np.any(p < 0):\n        p[p < 0] = np.log(1.0 + np.abs(p))\n    loss = -np.sum(np.log(p) * y + np.log(1 - p) * (1 - y), axis=0) / len(y)\n    gradient = []\n    for i in range(len(y)):\n        grad_p = p * (1 - p) - y * (p - y)\n        grad = grad_p\n        hess = p * (1 - p) * (1 - p) + p * (1 - p) * (1 - p)\n        gradient.append(round(grad[0], 4))\n        hessian.append(round(hess[0], 4))\n    return (round(loss, 4), gradient, hessian)"}
{"task_id": 16, "completion_id": 0, "solution": "from typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"\n    Generate all contiguous N-grams from a given sequence.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: The length of each n-gram. Must be an integer \u2265 1.\n\n    Returns:\n        A list of tuples, each containing exactly N consecutive elements.\n        If N is larger than the sequence length, returns an empty list.\n    \"\"\"\n    if N > len(sequence):\n        return []\n    result = []\n    for i in range(len(sequence) - N + 1):\n        result.append(tuple(sequence[i:i + N]))\n    return result"}
{"task_id": 17, "completion_id": 0, "solution": "def build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    if not items or not parents:\n        return {}\n    n = len(parents)\n    root_index = -1\n    for (i, p) in enumerate(parents):\n        if p == -1:\n            root_index = i\n            break\n    children = []\n    for i in range(n):\n        if parents[i] != -1:\n            children.append({'item': items[i], 'count': counts[i]})\n    children.append({'item': items[root_index], 'count': counts[root_index]})\n    return {'item': items[root_index], 'count': counts[root_index], 'children': children}"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    if isinstance(shape, int):\n        return np.zeros(shape, **kwargs)\n    else:\n        return np.zeros(shape, **kwargs)"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair `(feature_index, threshold)` describing the optimal split, or\n        `None` if no valid split yields a positive gain.\n    \"\"\"\n    n_features = X.shape[1]\n    n_instances = X.shape[0]\n    thresholds = []\n    for i in range(n_features):\n        for val in np.unique(X[:, i]):\n            thresholds.append(val)\n    max_gain = -np.inf\n    best_split = None\n    for idx in range(len(thresholds)):\n        threshold = thresholds[idx]\n        loss = -(1 / 2) * sum(g) ** 2 / (sum(h) + lam) + gamma\n        left_child = X[X[:, i] < threshold]\n        right_child = X[X[:, i] >= threshold]\n        gain_left = loss - calculate_loss(left_child, g, h, gamma, lam)\n        gain_right = loss - calculate_loss(right_child, g, h, gamma, lam)\n        if gain_left > max_gain or (gain_left == max_gain and (left_child.shape[0] >= 2 and right_child.shape[0] >= 2)):\n            max_gain = gain_left\n            best_split = (idx, threshold)\n        elif gain_right > max_gain or (gain_right == max_gain and (left_child.shape[0] >= 2 and right_child.shape[0] >= 2)):\n            max_gain = gain_right\n            best_split = (idx, threshold)\n    return best_split if max_gain != -np.inf else None\ndef calculate_loss(node, g, h, gamma, lam):\n    \"\"\"Calculate the regularized loss for a leaf node.\"\"\"\n    sum_g = sum(g[node])\n    sum_h = sum(h[node])\n    loss = -(1 / 2) * sum_g ** 2 / (sum_h + lam) + gamma\n    return loss"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"\n    Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x_list = x.tolist()\n        sigmoid_x = [np.sigmoid(val) for val in x_list]\n        gradient_x = [np.diff(x_list, axis=0) / (1.0 - np.sum(x_list, axis=0)) for _ in range(len(x_list))]\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))\n    elif isinstance(x, list):\n        x_array = np.array(x)\n        sigmoid_x = [np.sigmoid(val) for val in x_array]\n        gradient_x = [np.diff(x_array, axis=0) / (1.0 - np.sum(x_array, axis=0)) for _ in range(len(x_array))]\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))\n    else:\n        sigmoid_x = np.sigmoid(x)\n        gradient_x = np.diff([x], axis=0) / (1.0 - np.sum([x], axis=0))\n        return tuple(map(lambda y: round(y, 4), (sigmoid_x, gradient_x)))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    weights = np.ones(len(x_train)) / len(x_train)\n\n    def get_stump_indices(sorted_x, threshold):\n        if not sorted_x:\n            return []\n        indices = []\n        for i in range(len(sorted_x)):\n            if sorted_x[i] <= threshold:\n                indices.append(i)\n        return indices\n\n    def compute_error(stump, x, y):\n        sum_terms = 0\n        for (i, val) in enumerate(x):\n            prediction = sign(stump[0] * val + stump[1])\n            if prediction == y:\n                sum_terms += 1\n        return abs(sum_terms) / len(x)\n\n    def compute_alpha(error):\n        return 0.5 * math.log((1 - error) / error)\n    while True:\n        sorted_x = np.sort(x_train)\n        selected_stumps = []\n        for threshold in get_stump_indices(sorted_x, x_train):\n            (d, theta) = (sorted_x[threshold], sorted_x[threshold + 1])\n            if d == 0:\n                stump = [0, 1]\n            else:\n                stump = [1, 1]\n            selected_stumps.append((stump, threshold))\n        best_stump = None\n        best_error = float('inf')\n        for (stump, threshold) in selected_stumps:\n            current_error = compute_error(stump, x_train, y_train)\n            if current_error < best_error:\n                best_error = current_error\n                best_stump = stump\n        alpha = compute_alpha(best_error)\n        new_weights = np.copy(weights)\n        new_weights *= alpha\n        normalized_weights = new_weights / np.sum(new_weights)\n        weights = normalized_weights\n        training_error = compute_error(best_stump, x_train, y_train)\n        if training_error <= epsilon:\n            break\n        print(f'Training stopped with error {training_error}')\n    final_classifier = []\n    for (i, val) in enumerate(x_test):\n        prediction = sign(\u03b1 * np.dot(final_classifier, val))\n        final_classifier.append(prediction)\n    return final_classifier"}
{"task_id": 22, "completion_id": 0, "solution": "import numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive range [\u2212300, 299] plus a real number drawn uniformly from the half-open interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    if not isinstance(shape, tuple):\n        raise TypeError('shape must be a tuple')\n    if len(shape) == 1:\n        return np.random.rand(1)\n    offset = np.random.randint(-300, 300 + 1, size=len(shape))\n    u = np.random.uniform(0.0, 1.0, size=len(shape))\n    tensor = np.array([offset + u * np.ones_like(u) for u in zip(*u)]).reshape(shape)\n    if standardize:\n        std = np.std(tensor, axis=0)\n        for i in range(len(std)):\n            if std[i] > 1e-10:\n                tensor += np.finfo(float).eps\n                tensor /= np.sqrt(std[i]) + np.finfo(float).eps\n    return tensor"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"\n    Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python lists rounded to 4 decimal places.\n    \"\"\"\n    if not velocity:\n        velocity = [0.0] * len(w)\n    tilde_w = w - momentum * velocity\n    g = grad_func(tilde_w)\n    v_prime = momentum * velocity + learning_rate * g\n    new_weights = w - v_prime\n    new_weights_rounded = round(new_weights, 4)\n    new_velocity_rounded = round(v_prime, 4)\n    return (new_weights_rounded.tolist(), new_velocity_rounded.tolist())"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    result = []\n    for x_test in X_test:\n        score = 0\n        for i in range(len(alpha)):\n            term = alpha[i] * y_train[i] * math.exp(-gamma * np.linalg.norm(x_test - X_train[i], axis=1) ** 2)\n            score += term\n        result.append(1 if score > 0 else -1)\n    return result"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists that preserve the original shape.\n    \"\"\"\n    x_array = np.array(x)\n    activation = np.where(x_array >= 0, x_array, 0)\n    gradient_mask = np.where(x_array > 0, 1, 0)\n    return (activation.tolist(), gradient_mask.tolist())"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"\n    Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(X[0], list):\n        raise ValueError('Input must be a list of lists')\n    if len(X) == 0:\n        return (-1, 0)\n    (m, n) = (len(X), len(X[0]))\n    if k < 1 or k > min(m, n):\n        return (-1, -1)\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    truncated_svd = U[:k] @ Vt\n    X_hat = truncated_svd\n    X_hat_rounded = np.round(X_hat, 4)\n    mse = np.mean((X - X_hat) ** 2)\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded.tolist(), mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_values = np.array(x_train)\n    n_samples = len(x_values)\n    split_points = []\n    for i in range(n_samples - 1):\n        mid = (x_values[i] + x_values[i + 1]) / 2\n        split_points.append(mid)\n    ensemble = []\n    while True:\n        current_residuals = []\n        for s in split_points:\n            left_mean = np.mean(y_train[x_values <= s])\n            right_mean = np.mean(y_train[x_values > s])\n            c1 = left_mean if x_values <= s else None\n            c2 = right_mean if x_values > s else None\n            new_residuals = [(left_mean, right_mean, c1, c2)]\n            new_residuals = [residual for (_, _, _, residual) in new_residuals]\n            min_stump = min(new_residuals, key=lambda x: x[0] ** 2 + x[1] ** 2)\n        ensemble.append(min_stump)\n        total_residuals_squared = np.sum([a ** 2 for (a, b, c, d) in ensemble])\n        if total_residuals_squared < epsilon:\n            break\n    prediction = 0.0\n    for stump in ensemble:\n        if x_query <= stump[2]:\n            prediction += stump[1]\n        else:\n            prediction += stump[3]\n    return round(prediction, 4)"}
{"task_id": 32, "completion_id": 0, "solution": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        pass\n    return (a, b)\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    return a + b"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a binary tensor with 0.0 and 1.0 values.\n    \n    Args:\n        shape: The desired shape of the output tensor.\n        sparsity: The probability of generating a 1.0 value (must be in [0,1]).\n        seed: Optional seed to ensure reproducible results (None for default).\n    \n    Returns:\n        A NumPy array containing only 0.0 and 1.0 values.\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) != len(shape[0]):\n        raise ValueError('Shape must be a tuple of integers.')\n    if not 0 <= sparsity <= 1:\n        return np.array([-1], dtype=np.float64)\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape) * sparsity\n    threshold = 1 - sparsity\n    tensor[tensor >= threshold] = 1.0\n    return tensor.astype(np.float64)"}
{"task_id": 35, "completion_id": 0, "solution": "from typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"\n    Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be classified.\n    \"\"\"\n    current_node = root\n    while True:\n        if not current_node:\n            return -1\n        if current_node.fea == -1:\n            return current_node.res\n        feature_index = sample[current_node.fea]\n        if feature_index not in current_node.child:\n            return -1\n        current_node = current_node.child[feature_index]\n        if current_node is None:\n            return -1"}
{"task_id": 36, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node: rule = (feature_index, threshold)\n    Leaf node: rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"\n    Predicts class labels for a list of samples using a binary decision tree.\n\n    Args:\n        root: The root node of the decision tree.\n        X: A list of lists, where each sublist represents a sample and contains feature values.\n\n    Returns:\n        A list of predicted class labels in the same order as the input samples.\n    \"\"\"\n    if not root:\n        return []\n    predictions = []\n    current_node = root\n    for sample in X:\n        current_node = self._visit_node(current_node, sample)\n        predictions.append(current_node.threshold)\n    return predictions\ndef _visit_node(node: Node, sample: List[float]) -> Optional[Node]:\n    \"\"\"\n    Recursively visits the tree and returns the corresponding node or None for leaves.\n    \n    Args:\n        node: Current node to visit.\n        sample: Feature values for the current sample.\n        \n    Returns:\n        The next node after visiting the current node based on the decision rule.\n        - None if the node is a leaf.\n        - The node's attribute with the value from the sample.\n    \"\"\"\n    if node.feature == None:\n        return node\n    if sample[node.feature] <= node.threshold:\n        return node.left\n    else:\n        return node.right"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.shape[0] == 0:\n        return None\n    features = data[:, :data.shape[1] - 1]\n    label = data[:, -1]\n    if features.shape[1] == 0:\n        return None\n    dim_index = cycle(range(len(features.columns)))\n    current_dim = next(dim_index)\n    left_subset = []\n    right_subset = []\n    for row in data:\n        if row[current_dim] < features.median():\n            left_subset.append(row)\n        else:\n            right_subset.append(row)\n    left_tree = build_kd_tree(left_subset)\n    right_tree = build_kd_tree(right_subset)\n    node = {'point': features, 'label': label, 'left': left_tree, 'right': right_tree}\n    return node"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    D = len(A[0])\n    n_arms = len(A)\n    p_a = np.dot(context[:, :], A)\n    score = p_a + alpha * np.sqrt(np.dot(A, A) @ np.dot(b, b))\n    return np.argmax(score)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    median_value = data[d].median()\n    pivot_index = np.argpartition(data[d], median_value)\n    left_indices = pivot_index[:pivot_index.index(median_value)]\n    right_indices = pivot_index[pivot_index.index(median_value):]\n    return (pivot_index[0], left_indices, right_indices)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise TypeError('Input must be a NumPy array')\n    if stride < 1:\n        raise ValueError('Stride must be at least 1')\n    if len(x) < frame_width:\n        raise ValueError('Frame width cannot exceed the length of the signal')\n    n_frames = (len(x) - frame_width) // stride + 1\n    arr = as_strided(x, (n_frames, frame_width), (stride, frame_width))\n    if writeable:\n        arr.flags.writeable = True\n    return arr"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"\n    Predict labels for the query samples using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    X_train = np.array(X_data)\n    y_train = np.array(y_data)\n    distances = np.linalg.norm(X_train - X, axis=1)\n    indices = np.argsort(distances[:k])\n    predicted_labels = [y_train[i] for i in indices]\n    label_counts = Counter(predicted_labels)\n    if not label_counts:\n        return []\n    max_label = max(label_counts)\n    selected_labels = [label for (label, count) in label_counts.items() if count == max_label]\n    return [selected_labels[0]] if len(selected_labels) > 0 else []"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if not all((isinstance(x, float) for x in actual)) or not all((isinstance(x, float) for x in predicted)):\n        return -1.0\n    if len(actual) != len(predicted):\n        return -1.0\n    if any((x < 0 or x == 0 for x in actual)) or any((x < 0 or x == 0 for x in predicted)):\n        return -1.0\n    rmsle_error = 0.0\n    for i in range(len(actual)):\n        pred_ln = np.log10(predicted[i] + 1)\n        act_ln = np.log10(actual[i] + 1)\n        rmsle_error += (pred_ln - act_ln) ** 2\n    rmsle_error /= len(actual)\n    return round(rmsle_error, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    if derivative:\n        result = 2 * (np.exp(-2 * x) - 1) / (1 + np.exp(-2 * x))\n    else:\n        result = (2 * np.exp(-2 * x) - 1) / (1 + np.exp(-2 * x))\n    return np.round(result, 4).tolist()"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    if not x:\n        return []\n    N = len(x)\n    result = [0] * N\n    for k in range(N):\n        sum_val = 0\n        for n in range(N - k):\n            sum_val += x[n + k] * x[n]\n        result[k] = sum_val\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)):\n        return False\n    if len(X) == 0 or len(X[0]) == 0:\n        return False\n    for row in X:\n        if any((x < 0 or x > 1 for x in row)):\n            return False\n    for row in X:\n        if not np.allclose(np.sum(row), 1.0, atol=1e-08):\n            return False\n    return True"}
{"task_id": 49, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"\n    Return the k smallest elements contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    if k <= 0 or k > len(nums):\n        return [-1]\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            while len(heap) > 0 and num < heap[0]:\n                new_root = heap.pop()\n                heapq.heappush(heap, num)\n                if len(heap) > 0:\n                    new_root = heap.pop()\n                    heapq.heappush(heap, new_root)\n    sorted_heap = sorted(heap)\n    return sorted_heap"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"\n    Implement Newton's method for solving a two-variable linear least-squares problem.\n    \n    Args:\n        X: A 2D array of shape n\u00d72 (n samples, each with 2 features)\n        y: A 1D array of shape n\u00d71 (target values)\n        epsilon: The stopping criterion for the gradient norm (default: 1e-6)\n        max_iter: Maximum number of iterations (default: 1000)\n        \n    Returns:\n        A list of lists: The final weight vector w rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[1] != 2 or y.shape[1] != 1:\n        raise ValueError('Input data must have 2 columns and 1 row respectively.')\n    w = np.array([1.0, 1.0])\n    for _ in range(max_iter):\n        gradient = 2 / np.sum(X.T @ X @ w - y) * X.T @ (X @ w - y)\n        hessian = 2 / np.sum(X.T @ X) * X.T @ X\n        w = w - hessian @ gradient\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    final_w = np.round(w, 4).tolist()\n    return final_w"}
{"task_id": 54, "completion_id": 0, "solution": "import string\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"\n    Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and stop-word removal.\n    \n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n    \n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    tokens = []\n    if lowercase:\n        line = line.lower()\n    if filter_punctuation:\n        line = line.translate(str.maketrans('', '', string.punctuation))\n    stop_words = set(string.ascii_lowercase + string.ascii_uppercase + string.digits)\n    stop_words.update(string.punctuation)\n    current_token = ''\n    i = 0\n    while i < len(line):\n        char = line[i]\n        if char in stop_words:\n            tokens.append(current_token)\n            i += 1\n            continue\n        current_token += char\n        if i + 1 >= len(line) or line[i + 1] == ' ':\n            tokens.append(current_token)\n            i += 1\n            if not current_token:\n                current_token = ''\n        else:\n            i += 1\n    return tokens"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n    batch_size : int, optional\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of rows')\n    w = np.zeros_like(X)\n    g = np.dot(X.T, X * w - y).flatten()\n    s = np.zeros_like(g)\n    s[:] += g ** 2\n    best_gradient_sq = 10000000000.0\n    for iteration in range(max_iter):\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        s = rho * s + (1 - rho) * g ** 2\n        current_gradient_sq = np.linalg.norm(g) ** 2\n        if current_gradient_sq < epsilon:\n            break\n        if iteration >= max_iter:\n            break\n        best_gradient_sq = min(best_gradient_sq, current_gradient_sq)\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Implement the SoftPlus activation function with gradient support.\n    \n    Parameters:\n    x (np.ndarray or list): The input array containing real values.\n    deriv (bool): If True, returns the element-wise sigmoid of `x`. Otherwise, returns the SoftPlus value.\n    \n    Returns:\n        np.ndarray: The result as a NumPy array. If `deriv` is True, returns the sigmoid; if scalar, returns float rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    if not isinstance(x, np.ndarray):\n        x = np.array([x])\n    if deriv:\n        return np.sigmoid(x) * np.log(1 + np.exp(x))\n    else:\n        return np.log(1 + np.exp(x)) if np.isfinite(x) else x\n    rounded_values = [round(val * 10000 / 10000.0, 4) for val in x]\n    return rounded_values"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Args:\n        corpus: A list of word tokens.\n        sequence: A list of word tokens.\n        N: The order of the N-gram model (\u22651).\n\n    Returns:\n        float: The total log-probability of the sequence under the resulting unsmoothed language model, rounded to 4 decimal places.\n        If any required count is zero, return float('-inf').\n\n    Raises:\n        ValueError: If N < 1 or N > len(sequence).\n    \"\"\"\n    if N < 1 or N > len(sequence):\n        raise ValueError(f'Sequence length must be between 1 and {len(sequence)}')\n    n_gram_counts = Counter()\n    for i in range(len(corpus)):\n        current_window = corpus[i:i + N]\n        n_gram_counts.update(current_window)\n    for i in range(len(sequence) - N + 1):\n        start = i\n        end = i + N\n        window = sequence[start:end]\n        num = 0\n        denom = 0\n        if len(window) == 1:\n            if not n_gram_counts.get(window[0], 0):\n                return float('-inf')\n            num = n_gram_counts[window[0]]\n            denom = len(corpus)\n        else:\n            for j in range(N):\n                if not n_gram_counts.get(window[j], 0):\n                    return float('-inf')\n        if num == 0 or denom == 0:\n            return float('-inf')\n    log_probabilities = []\n    for i in range(len(sequence) - N + 1):\n        window = sequence[i:i + N]\n        prob = 1.0 / (num / denom) if denom != 0 else 0.0\n        log_prob = np.log(prob)\n        log_probabilities.append(log_prob)\n    total_log_prob = sum(log_probabilities)\n    rounded_total = round(total_log_prob, 4)\n    return rounded_total"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(y, np.ndarray) or len(y) == 0:\n        return 0.0\n    if criterion not in ['entropy', 'gini', 'mse']:\n        raise ValueError(f'Unknown criterion: {criterion}')\n    if criterion == 'entropy':\n        return 1.0 - np.sum(y) / len(y)\n    elif criterion == 'gini':\n        return 1.0 - np.mean(y) ** 2\n    elif criterion == 'mse':\n        return np.mean(y) ** 2\n    return round(compute_impurity(y, criterion), 4)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal places,\n        or -1 if the input shapes are incompatible.\n    \"\"\"\n    if not isinstance(X, np.ndarray) and (not isinstance(X, list)):\n        raise ValueError('X must be a list or NumPy array')\n    if not isinstance(y, np.ndarray) and (not isinstance(y, list)):\n        raise ValueError('y must be a list or NumPy array')\n    if not isinstance(W, np.ndarray) and (not isinstance(W, list)):\n        raise ValueError('W must be a list or NumPy array')\n    if len(X) != len(y) or len(X) != len(W):\n        return -1\n    if len(X) == 0:\n        return []\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(y, list):\n        y = np.array(y)\n    if isinstance(W, list):\n        W = np.array(W)\n    if X.ndim != 2 or y.ndim != 1 or W.ndim != 1:\n        return -1\n    numerator = X.T @ (X @ W - y)\n    gradient = numerator / np.float64(len(X))\n    rounded_gradient = np.round(gradient, 4).tolist()\n    return rounded_gradient"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n    \n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n    \n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to four decimal places.\n    \"\"\"\n    X_poly = np.column_stack([np.ones((X.shape[0], 1)), X ** degree])\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w[0] = np.mean(y - X_poly[:, 0] * w[0])\n        for j in range(1, degree + 1):\n            loss = y - X_poly[:, j] * w[j]\n            predicted = X_poly[:, j] * w[j]\n            residual = loss - predicted\n            rho = np.dot(w, X_poly[:, j]) + np.dot(residual, X_poly[:, j])\n            w[j] = np.clip(np.sign(rho) * max(abs(rho) - reg_factor, 0), -1e-08, 100000000.0)\n            weights_change = np.abs(w[j] - w[j - 1])\n            if weights_change < tol:\n                break\n    coefficients = np.round(w[1:], 4)\n    return coefficients.tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Returns the backward probability vector for the given HMM at time t.\"\"\"\n    if not isinstance(obs, list) or len(obs) != len(A) or len(obs) != len(B):\n        raise ValueError('obs must be a list of length equal to A and B')\n    N = A.shape[1]\n    M = B.shape[1]\n    beta = [0.0] * N\n    if t == T - 1:\n        beta[t] = 1.0\n    for i in range(N):\n        current_a = A[i][t]\n        current_b = B[i][obs[t]]\n        beta[t] *= current_a * current_b\n    return round(beta, 4)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"\n    Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency terms\n            (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    c = np.zeros((N, N))\n    for k in range(N):\n        for n in range(N):\n            c[k, n] = frame[n] * np.exp(-2 * np.pi * np.imag(k) * n / N)\n    c_rounded = [round(x.real, 4), round(x.imag, 4)] if positive_only else c\n    return c_rounded"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    beta = [1.0 for _ in range(N)]\n    for t in range(T - 1, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(B[i][obs[t + 1]] * A[obs[t]][i] * beta[t + 1][i])\n    total = pi[0] * beta[0][0]\n    total = round(total, 6)\n    return total"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import accumulate\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]]:\n    \"\"\"\n    Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers.\n        - 'states' is a list of integers representing the hidden states over the sample.\n        - 'observations' is a list of integers representing the observed symbols.\n    \"\"\"\n    if not isinstance(S, list):\n        raise ValueError('S must be a list of floats')\n    if len(S) != len(A) or len(S) != len(B):\n        raise ValueError(f'Inputs S, A, and B have inconsistent lengths: {len(S)}, {len(A)}, {len(B)}')\n    if not all((x == 0.0 for x in S)):\n        raise ValueError('All elements in S must sum to 1')\n    if not all((x == 0.0 for x in A)):\n        raise ValueError('All elements in A must sum to 1')\n    if not all((x == 0.0 for x in B)):\n        raise ValueError('All elements in B must sum to 1')\n    for row in A:\n        if sum(row) > 1:\n            raise ValueError('Each element in A must sum to 1')\n    for row in B:\n        if sum(row) > 1:\n            raise ValueError('Each element in B must sum to 1')\n    for row in A:\n        if any((x < 0 for x in row)):\n            raise ValueError('Probability probabilities must be non-negative')\n    if not all((0 <= x <= 1 for x in S)):\n        raise ValueError('All elements in S must be between 0 and 1')\n    if not all((0 <= x <= 1 for x in A)):\n        raise ValueError('All elements in A must be between 0 and 1')\n    if not all((0 <= x <= 1 for x in B)):\n        raise ValueError('All elements in B must be between 0 and 1')\n    for row in A:\n        if sum(row) != 1:\n            raise ValueError('Each row in A must sum to 1')\n    for row in B:\n        if sum(row) != 1:\n            raise ValueError('Each row in B must sum to 1')\n    if seed is not None:\n        np.random.seed(seed)\n    states = []\n    observations = []\n    first_state = np.random.choice(np.arange(len(S)), size=1, p=S)\n    states.append(first_state[0])\n    observations.append(0)\n    for _ in range(n_sample - 1):\n        current_state = first_state[0]\n        next_state = np.random.choice(np.arange(len(A[current_state])), size=1, p=A[current_state])\n        observations.append(next_state[0])\n        states.append(next_state)\n    return (tuple(states), tuple(observations))"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n    \n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple `(updated_w, new_update)` where each element is converted to\n        a Python `list` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    u_t = momentum * prev_update + (1 - momentum) * grad\n    updated_w = w - learning_rate * u_t\n    updated_w_rounded = np.round(updated_w, 4).tolist()\n    new_update_rounded = np.round(u_t, 4).tolist()\n    return (updated_w_rounded, new_update_rounded)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimal places, or \u22121 on invalid input.\n    \"\"\"\n    if len(observations) == 0:\n        return -1.0\n    m = len(B)\n    n = len(A[0])\n    if len(S) != n or len(observations) != m:\n        return -1.0\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1.0\n    forward = np.zeros(len(observations))\n    for i in range(len(observations)):\n        current_prob = 1.0\n        for j in range(n):\n            current_prob *= B[j][observations[i]]\n        forward[i] = current_prob\n    normalized_forward = forward / np.max(forward)\n    return round(normalized_forward, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"\n    Discover every frequent item-set in transactions with FP-Growth.\n\n    A transaction is represented by a list of items (strings). min_support is the minimum number of transactions an item-set has to appear in.\n    The result must be deterministic:\n        - Items inside each item-set are sorted lexicographically.\n        - The outer list is sorted by (len(itemset), itemset).\n    \"\"\"\n    item_counts = Counter()\n    for trans in transactions:\n        for item in trans:\n            item_counts[item] += 1\n\n    def build_tree(items):\n        if not items:\n            return {}\n        root = {'name': '', 'support': 0}\n        for item in items:\n            if item not in root['items']:\n                root['items'][item] = {'name': item, 'count': 1}\n        for child in build_tree(items[:-1]):\n            root['children'].append(child)\n        return root\n\n    def mine_tree(root, min_support):\n        if min_support <= 0:\n            return []\n        current_count = root['support']\n        if current_count >= min_support:\n            return [root['name']]\n        children = root['children']\n        results = []\n        for child in children:\n            results.extend(mine_tree(child, min_support))\n        return results\n    item_sets = []\n    for item in item_counts:\n        if item_counts[item] >= min_support:\n            item_set = sorted([item])\n            item_sets.append(item_set)\n    item_sets.sort(key=lambda x: (len(x), x))\n    return item_sets"}
{"task_id": 71, "completion_id": 0, "solution": "def label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    if not data:\n        return {}\n    result = {}\n    for sample in data:\n        label = sample[-1]\n        if label in result:\n            result[label] += 1\n        else:\n            result[label] = 1\n    return result"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Calculate the variance reduction for a regression tree split.\n    \n    Args:\n        y: The target vector for the parent node (a 1D array).\n        y_left: The target vectors of the left child (a 1D array).\n        y_right: The target vectors of the right child (a 1D array).\n        \n    Returns:\n        The variance reduction obtained by the split, rounded to the nearest 4th decimal.\n    \"\"\"\n    n = y.shape[0]\n    var_y = np.var(y)\n    columns = y.shape[1]\n    var_y_col = np.var(y[:, 0])\n    var_y_col2 = np.var(y[:, 1])\n    total_var = var_y_col + var_y_col2\n    vr = total_var - y_left.shape[0] / n * var_y_col - y_right.shape[0] / n * var_y_col2\n    return round(vr, 4)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"\n    Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    if len(frames.shape) == 2:\n        frames = np.array(frames)\n    n_frames = frames.shape[0]\n    n_samples = frames.shape[1]\n    spectra = []\n    for frame in frames:\n        if n_samples < 2:\n            padded = np.zeros(n_samples)\n            frame = padded + frame\n        else:\n            padded = np.zeros(n_samples)\n            frame = padded + frame\n        fft_result = np.fft.rfft(frame, n=n_samples)\n        positive_spectra = fft_result[:n_samples // 2]\n        result = [round(x, 4) for x in positive_spectra]\n        spectra.append(result)\n    return spectra"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"\n    Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > len(X_train):\n        return [-1]\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    distances = np.linalg.norm(X_train_np - X_test_np, axis=1)\n    predicted_labels = []\n    for i in range(len(X_test)):\n        closest_indices = np.argsort(distances[:k])\n        closest_labels = [y_train[np.argmin(closest_indices[i])]]\n        predicted_labels.append(closest_labels[0])\n    sorted_votes = np.unique(predicted_labels, False)\n    sorted_votes.sort()\n    result = [int(v) for v in sorted_votes]\n    return result"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true class labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    if not y.shape == y_pred.shape:\n        raise ValueError('Shapes of y and y_pred must match.')\n    if len(y) == 0 or any((row < 0 for row in y)) or any((row > 1 for row in y)):\n        return 0.0\n    for row in y:\n        if any((1 - x >= 0 for x in row)):\n            continue\n        else:\n            raise ValueError('All probabilities must be positive')\n    for row in y:\n        if not np.any(row.astype(int)):\n            raise ValueError('All probabilities must be integers')\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    total_loss = 0.0\n    (n_samples, n_classes) = (y.shape[0], y.shape[1])\n    for i in range(n_samples):\n        for j in range(n_classes):\n            current_y = y[i][j]\n            current_\u0177 = y_pred[i][j]\n            log_term = np.log(current_\u0177 + np.finfo(float).eps)\n            total_loss += current_y * log_term\n    return round(total_loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a regular Python list.\n    \"\"\"\n    caches = []\n    (W1, b1) = (parameters['W1'], parameters['b1'])\n    (W2, b2) = (parameters['W2'], parameters['b2'])\n    ...\n    Z1 = np.dot(W1, X) + b1\n    A1 = np.tanh(Z1)\n    caches.append((W1, b1, X))\n    Z2 = np.dot(W2, A1) + b2\n    A2 = np.sigmoid(Z2)\n    caches.append((W2, b2, A1))\n    for i in range(2, len(parameters)):\n        (W, b) = (parameters[f'W{i}'], parameters[f'b{i}'])\n        Z = np.dot(W, A[i - 1]) + b\n        A = np.tanh(Z)\n        caches.append((W, b, A))\n    AL = A.tolist()\n    return AL"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    new_m = beta1 * m + (1 - beta1) * grads\n    if u[-1] < epsilon:\n        new_u = max(epsilon, abs(grads))\n    else:\n        new_u = max(beta2 * u[-1], abs(grads))\n    step = learning_rate / (1 - beta1 ** t) * new_m / new_u\n    params -= step\n    updated_params = np.round(params, 6)\n    updated_m = np.round(new_m, 6)\n    updated_u = np.round(new_u, 6)\n    updated_t = t + 1\n    return (updated_params, updated_m, updated_u, updated_t)"}
{"task_id": 80, "completion_id": 0, "solution": "import numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    if not isinstance(w, np.ndarray):\n        w = np.array(w)\n    if not isinstance(grad_w, np.ndarray):\n        grad_w = np.array(grad_w)\n    e_grad = np.zeros_like(w)\n    e_delta = np.zeros_like(w)\n    for i in range(len(w)):\n        g = grad_w[i]\n        e_grad[i] = rho * e_grad[i] + (1 - rho) * g ** 2\n        rms_grad = np.sqrt(e_grad[i] + eps)\n        rms_delta = np.sqrt(e_delta[i] + eps)\n        adaptive_lr = rms_delta / rms_grad\n        delta_w = adaptive_lr * g\n        e_delta[i] = rho * e_delta[i] + (1 - rho) * delta_w ** 2\n        w[i] = w[i] - delta_w\n    return np.round(w, 4)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost between A2 and Y.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,)\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2_clipped = np.clip(A2, 1e-15, 1.0 - 1e-15)\n    m = A2_clipped.shape[1]\n    J = np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(J, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    if n == 0:\n        return []\n    a_star_index = -1\n    max_q = -float('inf')\n    for (i, q) in enumerate(Q):\n        if q > max_q or (q == max_q and i < a_star_index):\n            a_star_index = i\n            max_q = q\n    base = (1 - epsilon) / n\n    p_greedy = base\n    p_other = epsilon / n\n    probabilities = [p_greedy, p_other] * n\n    rounded_probabilities = np.round(probabilities, 4)\n    return rounded_probabilities"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"\n    Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    if np.all(h_pred == np.zeros_like(h_pred)):\n        return 1.0\n    numerator = np.sum((y - y_pred) * h_pred)\n    denominator = np.sum(h_pred ** 2)\n    gamma = numerator / denominator\n    gamma_rounded = round(gamma, 4)\n    return gamma_rounded"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"\n    One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    Z = np.dot(X, W)\n    \u0176 = np.exp(Z) / np.sum(Z, axis=1)\n    grad = np.dot(X.T, \u0176 - Y) / X.shape[0]\n    W -= lr * grad\n    return np.round(W, 4).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not all((isinstance(p, (int, float)) for p in predictions)):\n        return []\n    num_samples = len(predictions[0])\n    num_columns = len(predictions[0][0]) if predictions else 0\n    result = []\n    for i in range(num_samples):\n        current_result = []\n        vote_counts = Counter()\n        for j in range(num_columns):\n            class_label = predictions[i][j]\n            vote_counts[class_label] += 1\n        max_vote = max(vote_counts.values())\n        tie_breakers = [label for (label, count) in vote_counts.items() if count == max_vote]\n        selected_class = min(tie_breakers)\n        current_result.append(selected_class)\n        result.append(current_result)\n    return result"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, list):\n        return np.array(list(map(lambda x: np.logaddexp(0.0, x), z))).tolist()\n    elif isinstance(z, np.ndarray):\n        return np.array(list(map(lambda x: np.logaddexp(0.0, x), z))).tolist()\n    else:\n        return round(np.logaddexp(0.0, z), 4)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"\n    Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == 'relu':\n        A = np.max(0, Z)\n    elif activation == 'sigmoid':\n        A = np.exp(Z) / (1 + np.exp(Z))\n    else:\n        A = np.zeros_like(A_prev)\n    A_rounded = np.round(A, 4).tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = (Z,)\n    return (A_rounded, (linear_cache, activation_cache))"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy or not isinstance(policy, dict):\n        return np.nan\n    arm_indices = sorted(policy.keys())\n    squared_errors = [(policy[arm] - bandit['arm_evs'][arm]) ** 2 for arm in arm_indices]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 91, "completion_id": 0, "solution": "import numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    dA_np = np.array(dA)\n    activation_cache_np = np.array(activation_cache)\n    if dA_np.shape != activation_cache_np.shape:\n        return np.array([-1]).tolist()\n    dZ = dA_np * (activation_cache_np > 0).astype(np.float32)\n    return dZ.tolist()"}
{"task_id": 92, "completion_id": 0, "solution": "import numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    if isinstance(Z, list):\n        Z = np.array(Z)\n    else:\n        Z = np.array([Z])\n    A = np.maximum(Z, 0)\n    A = np.tolist(A)\n    return (A, Z.tolist())"}
{"task_id": 94, "completion_id": 0, "solution": "from collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    label_counts = Counter(neighbors_targets)\n    max_label = max(label_counts, key=lambda x: label_counts[x])\n    return max_label"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    vocab_size = len(corpus)\n    vocab = set()\n    for s in corpus:\n        words = s.split()\n        for word in words:\n            vocab.add(word)\n    log_prob = 0.0\n    if len(sequence) < N:\n        return 0.0\n    n_grams = []\n    current_word = ''\n    for word in sequence.split():\n        current_word += word\n        n_grams.append(current_word)\n    for i in range(len(n_grams)):\n        context = ' '.join(n_grams[i - N + 1:i])\n        count = Counter(context)\n        if K == 0:\n            prob = 0.0\n        else:\n            num = sum(count.values()) + K\n            denom = sum(count.values()) + K * len(vocab)\n            prob = num / denom * math.log(K)\n        log_prob += prob\n    return round(log_prob, 4)"}
{"task_id": 97, "completion_id": 0, "solution": "import numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return 1.0 if Z > 0 else 0.0\n    elif isinstance(Z, list):\n        return np.array([1.0 if x > 0 else 0.0 for x in Z])\n    elif isinstance(Z, np.ndarray):\n        return np.array([1.0 if x > 0 else 0.0 for x in Z.tolist()])\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array.')"}
{"task_id": 99, "completion_id": 0, "solution": "import numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return np.clip(Z, 0, float('inf'))\n    elif isinstance(Z, list):\n        return np.array([np.maximum(0, x) for x in Z])\n    elif isinstance(Z, np.ndarray):\n        return Z.copy()\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array')"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        return -1\n    mismatches = np.sum(np.abs(actual - predicted))\n    total_samples = len(actual)\n    error_rate = mismatches / total_samples\n    return round(error_rate, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    x = np.exp(x - np.max(x, axis=axis, keepdims=True))\n    sum_values = np.sum(x, axis=axis, keepdims=True)\n    normalized = x / sum_values\n    normalized_rounded = np.round(normalized, 4)\n    return normalized_rounded.tolist()"}
{"task_id": 102, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"\n    Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('The training data must have the same length for both x and y.')\n    if degree < 0 or len(x) < degree + 1:\n        return [-1]\n    n_samples = len(x)\n    X = np.zeros((n_samples, degree + 1))\n    for i in range(n_samples):\n        for j in range(degree + 1):\n            X[i][j] = x[i] ** j\n    A = X.T @ X\n    A_inv = np.linalg.inv(A)\n    weights = A_inv @ X.T\n    predictions = weights @ x_pred\n    predictions_rounded = [round(p, 4) for p in predictions]\n    return predictions_rounded"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    entropy = -np.sum(np.bincount(y) * np.log2(np.bincount(y)))\n    entropy_subsets = []\n    for split in splits:\n        counts = np.bincount(split)\n        entropy_subset = -np.sum(counts * np.log2(counts))\n        entropy_subsets.append(entropy_subset)\n    info_gain = entropy - len(splits) / len(y) * sum(entropy_subsets)\n    info_gain_rounded = round(info_gain, 4)\n    return info_gain_rounded"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"\n    Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return [-1]\n    if not x:\n        return []\n    if not isinstance(sigma, (int, float)):\n        return [-1]\n    if not isinstance(x, (list, tuple, np.ndarray)):\n        raise ValueError('Input must be a list, tuple, or NumPy array.')\n    if not x:\n        return []\n    pdf_values = []\n    for value in x:\n        numerator = 1 / (np.sqrt(2 * np.pi) * sigma)\n        exponent = -(value - mean) ** 2 / (2 * sigma ** 2)\n        pdf_value = numerator * np.exp(exponent)\n        pdf_values.append(round(pdf_value, 5))\n    return pdf_values"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"\n    Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    theta_new = theta - alpha * m_hat_t / (np.sqrt(v_hat_t) + epsilon)\n    return [np.round(theta_new, 6).tolist(), np.round(m_hat_t, 6).tolist(), np.round(v_hat_t, 6).tolist(), t + 1]"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n\n    def loss(W, H):\n        return np.linalg.norm(X - W * H, ord=2) ** 2 + alpha * (np.linalg.norm(W, ord=2) ** 2 + np.linalg.norm(H, ord=2) ** 2)\n    for _ in range(max_iter):\n        H_new = np.dot(X, W.T).round(4)\n        W_new = np.dot(W, H_new.T).round(4)\n        current_loss = loss(W_new, H_new)\n        if abs(current_loss) < tol:\n            break\n        else:\n            W = W_new\n            H = H_new\n    X_hat = np.dot(H, W.T).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to four decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n    centroids = []\n    indices = np.random.permutation(len(X))\n    for i in range(K):\n        centroids.append(X[indices[i]])\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X - centroids, axis=1))\n        new_centroids = []\n        for i in range(len(X)):\n            idx = labels[i]\n            new_centroids.append(X[i, idx])\n        centroids = new_centroids\n    centroids = [round(c, 4) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x[1]))\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\n    \n    Args:\n        text: The input string to encode.\n        time_steps: The number of time steps in the output sequence.\n        vocabulary: A dictionary mapping characters to their indices.\n        \n    Returns:\n        A list of integers representing the encoded tokens.\n    \"\"\"\n    result = []\n    for char in text:\n        if char in vocabulary:\n            result.append(vocabulary[char])\n        else:\n            result.append(0)\n    return result[:time_steps] if len(result) <= time_steps else result[:time_steps] + [0]\ndef int_to_string(indices: np.ndarray, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer IDs back to a human-readable string.\n    \n    Args:\n        indices: A 1D array of integer IDs.\n        inverse_vocab: A dictionary mapping IDs to their corresponding characters.\n        \n    Returns:\n        A string formed from the decoded tokens.\n    \"\"\"\n    decoded = []\n    for id in indices:\n        if id != 0:\n            decoded.append(inverse_vocab[id])\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs the example function for character-level sequence encoding and decoding.\n    \n    Args:\n        model: The neural model that processes the input.\n        input_vocabulary: Dictionary mapping characters to their indices.\n        inv_output_vocabulary: Dictionary mapping IDs to their characters.\n        text: The input text string to process.\n        \n    Returns:\n        The predicted string after decoding from the model's output.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(encoded.reshape(1, -1))\n    predicted_ids = prediction.argmax(-1)\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 112, "completion_id": 0, "solution": "import re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    words = re.findall('[A-Za-z]+', text.lower())\n    if not words:\n        return []\n    freq = Counter(words)\n    tokens = [Token(word) for word in freq]\n    tokens.sort(key=lambda t: (-t.count, t.word))\n    return tokens"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    predictions = []\n    if examples is None:\n        examples = 'EXAMPLES'\n    for example in examples:\n        predictions.append(model(example))\n    return predictions"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    x_list = list(x)\n    if derivative:\n        alpha = 1.6732632423543772\n        lambda_ = 1.0507009873554805\n        for i in range(len(x_list)):\n            x_list[i] = lambda_ * max(alpha * (np.exp(x_list[i]) - 1), x_list[i])\n        return np.tolist(x_list)\n    else:\n        alpha = 1.6732632423543772\n        lambda_ = 1.0507009873554805\n        for i in range(len(x_list)):\n            if x_list[i] >= 0:\n                x_list[i] = lambda_ * max(alpha * (np.exp(x_list[i]) - 1), x_list[i])\n            else:\n                x_list[i] = alpha * (np.exp(x_list[i]) - 1)\n        return np.tolist(x_list)"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    m = X.shape[0]\n    p = np.sigmoid(np.dot(X, w))\n    p = np.clip(p, 1e-20, 1)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    grad = np.dot(X.T, p - y).flatten()\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    return (loss_rounded, grad_rounded)"}
{"task_id": 116, "completion_id": 0, "solution": "import numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    mean_y = np.mean(y)\n    parent_mse = np.sum((y - mean_y) ** 2) / len(y)\n    child_mses = []\n    for child in splits:\n        mean_child = np.mean(child)\n        child_mse = np.sum((child - mean_child) ** 2) / len(child)\n        child_mses.append(child_mse)\n    weighted_child_mse = sum(child_mses) / len(splits)\n    delta_mse = parent_mse - weighted_child_mse\n    return round(delta_mse, 4)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones(n_clf)\n    for _ in range(n_clf):\n        alpha_t = 0.5 * np.log((1 - np.sign(y_train)) / np.sign(y_train))\n        current_sum = np.sum(weights * X_train)\n        if current_sum == 0:\n            current_sum = 1\n        label = current_sum * np.sign(y_train)\n        weights *= label\n    predictions = X_test * weights\n    return predictions.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding gradients and must return the updated parameters after applying the SGD rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    if not params or not grads:\n        return []\n    if len(params) != len(grads):\n        return []\n    updated_params = []\n    for i in range(len(params)):\n        param = params[i]\n        grad = grads[i]\n        updated_param = param - alpha * grad\n        updated_param = np.round(updated_param, 4)\n        updated_params.append(updated_param)\n    return updated_params"}
{"task_id": 120, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"\n    Perform batch gradient descent to minimize the mean-squared error in linear regression.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to four decimal places.\n        If the input dimensions are incompatible, return -1.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    X = np.array(X)\n    y = np.array(y)\n    X_augmented = np.column_stack((X, [1.0] * len(X)))\n    if X_augmented.shape[1] != len(X_augmented[0]) + 1:\n        return -1\n    m = X_augmented.shape[0]\n    w = np.random.uniform(-math.sqrt(m / 1000), math.sqrt(m / 1000), size=len(X_augmented[0]) + 1)\n    for _ in range(n_iterations):\n        grad_w = X_augmented.T @ (X_augmented @ w - y)\n        w = w - learning_rate * (grad_w / m)\n    rounded_weights = round(w, 4)\n    result = [rounded_weights[i] for i in range(len(w))]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_augmented = np.column_stack([np.ones((X_np.shape[0], 1)) for _ in range(X_np.shape[1])] + X_np)\n    w_pseudo_inverse = np.linalg.pinv(X_augmented @ X_augmented.T)\n    w = w_pseudo_inverse @ y_np\n    rounded_weights = [round(w, 4) for w in w]\n    return rounded_weights"}
{"task_id": 123, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    unique_categories = np.unique(y)\n    unique_categories_sorted = np.sort(unique_categories)\n    one_hot = np.zeros((len(unique_categories_sorted), len(y)), dtype=int)\n    for (i, cat) in enumerate(unique_categories_sorted):\n        one_hot[i][y.index(cat)] = 1\n    return one_hot.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"\n    Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.array(X)\n    Y = np.array(Y)\n    K = np.zeros((X.shape[0], Y.shape[0]))\n    for i in range(X.shape[0]):\n        for j in range(Y.shape[0]):\n            x = X[i]\n            y = Y[j]\n            if gamma is None:\n                gamma_val = 1 / X.shape[1]\n            else:\n                gamma_val = gamma\n            k = (gamma_val * np.dot(x, y) + c0) ** d\n            K[i, j] = k\n    return np.tolist(K).round(4)"}
{"task_id": 127, "completion_id": 0, "solution": "def confusion_matrix(y_true: list, y_pred: list) -> list:\n    if len(y_true) != len(y_pred):\n        return [-1]\n    true_classes = sorted(set(y_true))\n    pred_classes = sorted(set(y_pred))\n    if len(true_classes) != len(pred_classes):\n        return [-1]\n    C = len(true_classes)\n    matrix = [[0] * C for _ in range(C)]\n    for i in range(C):\n        for j in range(C):\n            matrix[i][j] = 0\n    for (true_label, predicted_label) in zip(true_classes, pred_classes):\n        matrix[true_label - 1][predicted_label - 1] += 1\n    return matrix"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"\n    Perform Multi-Class Linear Discriminant Analysis (LDA) and project the data.\n\n    Parameters:\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and n_features).\n\n    Returns:\n    list[list[float]]\n        The data projected onto the first n_components LDA directions. Each inner list corresponds to one sample.\n        All values are rounded to four decimal places.\n    \"\"\"\n    (n_samples, d) = X.shape\n    mu = np.mean(X[y == 0, :], axis=0)\n    mu_1 = np.mean(X[y == 1, :], axis=0)\n    mu_2 = np.mean(X[y == 2, :], axis=0)\n    mu_3 = np.mean(X[y == 3, :], axis=0)\n    mu_4 = np.mean(X[y == 4, :], axis=0)\n    S_W = np.zeros((d, d))\n    for c in range(n_samples):\n        x = X[c, :]\n        mu_c = mu[c]\n        mu_c_mean = np.mean(x)\n        S_W += (x - mu_c) ** 2\n    total_samples = n_samples\n    mu_global = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in range(total_samples):\n        x = X[c, :]\n        mu_c = mu_global\n        mu_c_mean = np.mean(x)\n        S_B += (mu_c - mu_c_mean) ** 2\n    A = np.linalg.inv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    det_sign = np.prod(eigenvalues > 0)\n    flipped_eigenvectors = []\n    for (i, (val, vec)) in enumerate(zip(eigenvalues, eigenvectors)):\n        if val > 0:\n            flipped_eigenvectors.append((-vec).tolist())\n        else:\n            flipped_eigenvectors.append(vec.tolist())\n    eigenvalues_sorted = sorted(eigenvalues, reverse=True)\n    selected_eigenvectors = [eigenvecs[i] for i in range(min(len(eigenvalues_sorted), n_components))]\n    projected_X = np.dot(selected_eigenvectors, X)\n    projected_X_rounded = np.round(projected_X, 4)\n    return np.round(projected_X_rounded, 4)"}
{"task_id": 129, "completion_id": 0, "solution": "from itertools import islice, cycle\ndef cycle_sequence(sequence: list | tuple, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    cycle_iter = cycle(sequence)\n    return islice(cycle_iter, samples)"}
{"task_id": 130, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"\n    Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    count = Counter()\n    for transition in transitions:\n        if transition[0] == state and transition[1] == action:\n            count[transition[0], transition[1]] += 1\n    if count.get((state, action), 0) == 0:\n        return []\n    probs = []\n    for (_, next_state) in count.items():\n        prob = next_state / count[state, action]\n        probs.append([next_state, round(prob, 4)])\n    probs.sort()\n    return probs"}
{"task_id": 131, "completion_id": 0, "solution": "def get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so that several parts of a program can work on different sequences at the same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    if not isinstance(uid, int) or not isinstance(i, int):\n        return None\n    seq = _SHARED_SEQUENCES[uid]\n    if not seq or i < 0 or i >= len(seq):\n        return None\n    return seq[i]"}
{"task_id": 132, "completion_id": 0, "solution": "import numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return z.copy()\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    else:\n        return z"}
{"task_id": 133, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"\n    Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    for seq in X_train:\n        if any((token < 0 or token >= vocab_length for token in seq)):\n            return [-1]\n    y = []\n    for seq in X_train:\n        one_hot_seq = np.array([np.eye(vocab_length)[i] for i in seq]).tolist()\n        y.append(one_hot_seq)\n    return y"}
{"task_id": 134, "completion_id": 0, "solution": "import numpy as np\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    if not payoff_probs:\n        return (-1.0, -1)\n    max_reward = -1.0\n    best_index = -1\n    for (index, prob) in enumerate(payoff_probs):\n        if 0 <= prob <= 1 and prob > max_reward:\n            max_reward = prob\n            best_index = index\n    return (max_reward, best_index)"}
{"task_id": 135, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Implements Ordinary Least Squares (OLS) linear regression from scratch using the normal equation.\n    \n    Args:\n        X_train: A list of lists containing training data, where each sublist is a row.\n        y_train: A list of integers containing the target values for training.\n        X_test: A list of lists containing test data, same structure as X_train.\n        \n    Returns:\n        A list of floats with rounded values to 4 decimal places. Returns -1 if the matrix $X^{\top}X$ is singular.\n    \"\"\"\n    X = np.column_stack((np.ones(len(X_train), dtype=int), X_train))\n    X_transposed = np.transpose(X)\n    X_times_X = np.dot(X_transposed, X)\n    if np.linalg.matrix_rank(X_times_X) == len(X_times_X):\n        return [-1]\n    coefficients = np.linalg.inv(X_times_X).dot(X_transposed)\n    predictions = np.dot(coefficients, X_test)\n    predictions_rounded = np.round(predictions, 4)\n    return predictions_rounded.tolist()"}
{"task_id": 136, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    max_val = np.max(z)\n    shifted_z = np.exp(z - max_val)\n    normalized = shifted_z / np.sum(shifted_z)\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()"}
{"task_id": 138, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"\n    Compute classification accuracy between two lists of labels.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimal places, or -1 for invalid inputs.\n    \"\"\"\n    if not y_true or not y_pred:\n        return -1\n    if len(y_true) != len(y_pred):\n        return -1\n    accuracy = 0.0\n    for i in range(len(y_true)):\n        if y_true[i] == y_pred[i]:\n            accuracy += 1.0\n    accuracy = round(accuracy / len(y_true), 4)\n    return accuracy"}
{"task_id": 139, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    if not isinstance(z, (list, np.ndarray)):\n        return []\n    result = []\n    for value in z:\n        if value < -1.0 or value > 1.0:\n            result.append(0.0)\n        else:\n            numerator = np.exp(value) - np.exp(-value)\n            denominator = np.exp(value) + np.exp(-value)\n            result.append(round(numerator / denominator, 4))\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"\n    Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n    wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n    cell marked with 'F' and spreads to the four neighboring cells every\n    minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fires = []\n    for (i, row) in enumerate(grid):\n        for (j, cell) in enumerate(row):\n            if cell == 'F':\n                fires.append((i, j))\n    (rows, cols) = (n, n)\n    start = (0, 0)\n    goal = (rows - 1, cols - 1)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    queue = deque()\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue.append((start[0], start[1], 0))\n    visited[start[0]][start[1]] = True\n    while queue:\n        (x, y, time) = queue.popleft()\n        if (x, y) == (goal[0], goal[1]):\n            return time\n        if (x, y) in fires:\n            continue\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if not visited[nx][ny]:\n                    if grid[nx][ny] != '#' and (not (nx, ny) in fires):\n                        visited[nx][ny] = True\n                        queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implement the k-Nearest Neighbors (k-NN) classifier.\n    \n    Parameters:\n    - X_train: Training data with labels in y_train\n    - y_train: Labels for training data\n    - X_test: Test data to predict\n    - k: Number of neighbors to consider\n    - metric: The distance metric to use ('euclidean', 'manhattan', or 'cosine')\n    \n    Returns:\n    - A 1-D NumPy array containing the predicted labels.\n    \"\"\"\n    if metric == 'euclidean':\n\n        def compute_distance(samples, label):\n            return np.linalg.norm(samples - label)\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = compute_distance(test_sample, train_label)\n                distances[i, j] = distance\n    elif metric == 'manhattan':\n\n        def compute_distance(samples, label):\n            return np.sum(samples - label)\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = compute_distance(test_sample, train_label)\n                distances[i, j] = distance\n    elif metric == 'cosine':\n\n        def compute_distance(samples, label):\n            cos_sim = np.dot(samples - label, samples - label) / (np.linalg.norm(samples - label) * np.linalg.norm(samples - label))\n            return 1 - cos_sim\n    else:\n        distances = np.zeros((len(X_test), len(X_train)))\n        for (i, test_sample) in enumerate(X_test):\n            for (j, train_label) in enumerate(y_train):\n                distance = np.linalg.norm(test_sample - train_label)\n                distances[i, j] = distance\n    predictions = []\n    for (test_sample_index, test_sample) in enumerate(X_test):\n        distances_for_neighbors = distances[test_sample_index, :]\n        distances_for_neighbors.sort()\n        selected_neighbors = distances_for_neighbors[:k]\n        label = None\n        for neighbor in selected_neighbors:\n            label = y_train[neighbors.index(neighbor)]\n        predictions.append(label)\n    return np.array(predictions)"}
{"task_id": 143, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"\n    Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.asarray(x)\n    x = x.astype(np.float32)\n    result = np.zeros_like(x)\n    if derivative:\n        result = np.clip(x, 0, alpha * x)\n    else:\n        result = x\n    return result"}
{"task_id": 144, "completion_id": 0, "solution": "import numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"\n    Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    if not np.array(actual).shape == np.array(predicted).shape:\n        return -1.0\n    differences = np.abs(np.array(actual) - np.array(predicted))\n    ma_e = np.mean(differences)\n    rounded_ma_e = round(ma_e, 4)\n    return rounded_ma_e"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    X_train = X.copy()\n    X_test = X_test.copy()\n    if X.ndim == 1:\n        X = X.reshape((X.shape[0], X.shape[1]))\n    if X_test.ndim == 1:\n        X_test = X_test.reshape((X_test.shape[0], X_test.shape[1]))\n    if X_test.shape[0] < k:\n        X_test = X_test[:X_test.shape[0]]\n    n_samples = X_train.shape[0]\n    m_samples = X_test.shape[0]\n    distances = []\n\n    def compute_euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def compute_manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def compute_cosine_distance(x, y):\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        return 1 - dot_product / (norm_x * norm_y)\n    if metric == 'euclidean':\n        dist = compute_euclidean_distance\n    elif metric == 'manhattan':\n        dist = compute_manhattan_distance\n    elif metric == 'cosine':\n        dist = compute_cosine_distance\n    else:\n        raise ValueError('Unknown metric')\n    for i in range(m_samples):\n        test_sample = X_test[i]\n        closest_labels = []\n        for j in range(n_samples):\n            train_sample = X_train[j]\n            distance = dist(train_sample, test_sample)\n            if k > len(closest_labels):\n                closest_labels.append(j)\n        majority_vote = [y[i] for i in closest_labels]\n        if len(set(majority_vote)) == 1:\n            predicted_label = majority_vote[0]\n        else:\n            predicted_label = min(majority_vote)\n        distances.append(predicted_label)\n    return np.array(distances).tolist()"}
{"task_id": 147, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    w = np.zeros((X_train.shape[1],))\n    b = 0\n    for _ in range(epochs):\n        y_pred = sigmoid(X_train @ w + b)\n        loss = -y_train * y_pred\n        dw = loss / len(X_train) * (X_train.T @ (1 - y_pred)).T\n        db = loss / len(X_train) * -1\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    y_pred_test = sigmoid(X_test @ w + b)\n    return y_pred_test.tolist()\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1.0 / (1.0 + np.exp(-x))\nX_train = np.array([-2, -1], [-3, -2], [-1, -2], [-2, -3], [2, 1], [3, 2], [1, 2], [2, 3])\ny_train = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nX_test = np.array([-2, -2], [2, 2])"}
{"task_id": 148, "completion_id": 0, "solution": "from typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n    invalid input.\n    \"\"\"\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    n = len(data)\n    result = []\n    if n == 0:\n        return result\n    result.append(data[0])\n    for k in range(1, n):\n        new_value = (1 - alpha) * result[-1] + alpha * data[k]\n        result.append(round(new_value, 4))\n    return result"}
{"task_id": 150, "completion_id": 0, "solution": "from heapq import heappush, heappop\nfrom typing import List, Tuple, Union\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"\n    Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    (m, n) = (len(grid), len(grid[0]))\n    start = (0, 0)\n    goal = (m - 1, n - 1)\n    heap = [(0, start[0], start[1])]\n    visited = set()\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while heap:\n        (cost, row, col) = heappop(heap)\n        if (row, col) == goal:\n            return [start] + [tuple(p) for p in path]\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n        for (dr, dc) in directions:\n            (nr, nc) = (row + dr, col + dc)\n            if 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] == 0):\n                new_cost = cost + 1\n                new_path = [start] + [tuple(p) for p in path]\n                heappush(heap, (new_cost, nr, nc))\n    return -1"}
{"task_id": 151, "completion_id": 0, "solution": "import numpy as np\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Apply an activation function and compute its local gradient.\n    \n    Parameters:\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as X).\n    \n    Returns:\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local derivative of the activation.\n    \"\"\"\n    if activation == 'sigmoid':\n        A = np.sigmoid(X)\n        grad = np.exp(-X) / (1 + np.sum(np.exp(X)))\n    elif activation == 'tanh':\n        A = np.tanh(X)\n        grad = np.exp(-X) * (1 - X ** 2) / (1 + X ** 2)\n    elif activation == 'relu':\n        A = np.maximum(X, 0)\n        grad = np.heaviside(X, 0, 1)\n    elif activation == 'softmax':\n        A = np.exp(X) / np.sum(np.exp(X))\n        grad = np.ones_like(A) * (1 / A)\n    A = np.round(A, 4)\n    grad = np.round(grad, 4)\n    return (A, grad)"}
{"task_id": 152, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    if not isinstance(y_true, (list, np.ndarray)) or not isinstance(y_pred, (list, np.ndarray)):\n        return -1\n    if len(y_true) != len(y_pred):\n        return -1\n    y_true_array = np.array(y_true)\n    y_pred_array = np.array(y_pred)\n    correct = np.sum(y_true_array == y_pred_array)\n    accuracy = round(correct / len(y_true), 4)\n    return accuracy"}
{"task_id": 154, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"\n    Compute the radial basis function (RBF) kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six decimal places.\n    \"\"\"\n    X = X.reshape(-1, len(X))\n    Y = Y.reshape(-1, len(Y))\n    dist_matrix = np.sqrt(np.sum((X - Y) ** 2, axis=1))\n    kernel_matrix = np.exp(-gamma * dist_matrix ** 2)\n    return np.round(kernel_matrix, 6).tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"\n    Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    if not isinstance(state, np.ndarray):\n        raise ValueError('Input must be a numpy array.')\n    if not isinstance(weights, dict):\n        raise ValueError('Weights must be a dictionary.')\n    W1 = weights['W1']\n    b1 = weights['b1']\n    W2 = weights['W2']\n    b2 = weights['b2']\n    W3 = weights['W3']\n    b3 = weights['b3']\n    action = np.zeros(len(state))\n    x = np.dot(state, W1)\n    x += b1\n    x = np.maximum(0, x)\n    x = np.dot(x, W2)\n    x += b2\n    x = np.maximum(0, x)\n    x = np.dot(x, W3)\n    x += b3\n    x = np.tanh(x)\n    action = round(x, 4)\n    return action.tolist()"}
{"task_id": 157, "completion_id": 0, "solution": "def accuracy_score(y_true, y_pred):\n    \"\"\"\n    Return the classification accuracy between y_true and y_pred.\n\n    The function must:\n    - return -1 if the two containers have different lengths.\n    - return 0 when both containers are empty.\n    - otherwise return the proportion of matching elements rounded to 4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or -1 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if not y_true and (not y_pred):\n        return 0.0\n    correct_matches = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    total_samples = len(y_true)\n    return round(correct_matches / total_samples * 10000, 4)"}
{"task_id": 158, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimal places. When\n        *fit_intercept* is True, the first element is the intercept.\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(y, list):\n        raise ValueError('X and y must be lists')\n    if len(X) == 0:\n        return []\n    X_np = np.array(X)\n    y_np = np.array(y)\n    if fit_intercept:\n        X_np = np.insert(X_np, 0, [1.0], axis=1)\n    X_transposed = X_np.T\n    X_transposed = X_transposed.T\n    A = np.eye(len(X), dtype=float) * alpha\n    if fit_intercept:\n        A[0] = 0.0\n    inv_matrix = np.linalg.inv(X_transposed @ X_np + A)\n    beta_hat = inv_matrix @ X_transposed @ y_np\n    beta_hat_rounded = round(beta_hat, 4)\n    return beta_hat_rounded.tolist()"}
{"task_id": 159, "completion_id": 0, "solution": "import numpy as np\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    det_sigma = np.linalg.slogdet(sigma)\n    inv_sigma = np.linalg.inv(sigma)\n    inner_product = np.dot(inv_sigma, x_i - mu)\n    log_density = -0.5 * (len(x_i) * np.log(2 * np.pi) + det_sigma[0] + np.sum(inner_product))\n    return round(log_density, 4)"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    X = np.insert(X, 0, values=np.zeros((X.shape[0], 1)), axis=1)\n    weights = np.zeros_like(X.shape[1])\n    bias = 0.0\n    if fit_intercept:\n        bias = (np.mean(y) - np.sum(X[:, 0] * y) / X.shape[0]) / X.shape[0]\n    for _ in range(max_iters):\n        for j in range(1, X.shape[1]):\n            w_j = np.zeros_like(weights[j])\n            w_j[j] = 0.0\n            r_j = y - X[:, j] * weights[j]\n            a = np.dot(X[:, j], r_j)\n            tau = lambda_param * max_iters\n            weights[j] = np.sign(a) * np.max(np.abs(a) - tau, 0)\n            if j == 0:\n                bias = (np.mean(y) - np.sum(X[:, 0] * y) / X.shape[0]) / X.shape[0]\n    weights_list = np.round(weights, 4)\n    bias_float = round(bias, 4)\n    return (weights_list, bias_float)"}
{"task_id": 161, "completion_id": 0, "solution": "import numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predicts binary class labels using the second-order Factorization Machine (FM) model.\n    \n    Parameters:\n    X - 2D NumPy array of shape (m, n): feature vector for each sample\n    w0 - scalar global bias\n    w - 1D NumPy array of length n: linear weights\n    V - 2D NumPy array of shape (n, k): latent factors\n    \n    Returns:\n    list of integers: binary class labels (1 or -1)\n    \"\"\"\n    score = w0 + np.dot(w, X) + 0.5 * np.dot(V, V).sum()\n    return [1 if score >= 0 else -1 for _ in range(len(X))]"}
{"task_id": 162, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"\n    Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log. Default is 1e-20.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested Python list), both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, 'Shape mismatch: Y_hat has shape {} vs Y has shape {}'.format(Y_hat.shape, Y.shape)\n    assert Y_hat.shape[1] == Y.shape[1], 'Y_hat should have shape (batch_size, num_classes) and Y should have shape (batch_size, num_classes)'\n    assert Y_hat.shape[1] == Y.shape[1], 'Y should have shape (batch_size, num_classes)'\n    assert Y_hat.shape[1] == Y.shape[1], 'Y_hat and Y must have the same number of classes'\n    Y_tensor = Y.reshape(-1, Y_hat.shape[1])\n    loss = -np.mean(np.log(Y_tensor) * Y)\n    loss += epsilon\n    grad = (Y_hat - Y_tensor) / Y_hat.size\n    loss_rounded = round(loss, 4)\n    grad_rounded = [round(x, 4) for x in grad]\n    return (loss_rounded, grad_rounded)"}
{"task_id": 163, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"\n    Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    if len(X) != len(y):\n        raise ValueError('Input lists must have the same length.')\n    X_np = np.array(X)\n    y_np = np.array(y)\n    features = []\n    for i in range(degree + 1):\n        row = np.zeros((n_iterations, degree + 1))\n        for j in range(n_iterations):\n            row[j] = X_np[i][j]\n        features.append(row)\n    n_samples = len(features[0])\n    beta = np.zeros(n_samples)\n\n    def cost(beta, X, y, reg_factor, l1_ratio):\n        loss = np.sum((y - X @ beta) ** 2) / n_samples + reg_factor * np.linalg.norm(beta, ord=1) + reg_factor * np.linalg.norm(beta, ord=2)\n        return loss\n    if l1_ratio == 0:\n        A = np.dot(X_np.T, X_np)\n        try:\n            inv_A = np.linalg.inv(A)\n        except np.linalg.LinAlgError:\n            beta = np.zeros_like(beta)\n            return beta\n    else:\n        grad_beta = np.zeros_like(beta)\n        for _ in range(n_iterations):\n            current_cost = cost(beta, X_np, y_np, reg_factor, l1_ratio)\n            beta -= learning_rate * grad_beta\n            sub_grad_l1 = beta.copy()\n            for j in range(len(beta)):\n                if beta[j] > 0:\n                    sub_grad_l1[j] += learning_rate * (beta[j] - beta[j] * l1_ratio)\n            beta = beta + learning_rate * sub_grad_l1\n    predictions = round(X_np @ beta, 4)\n    return predictions.tolist()"}
{"task_id": 164, "completion_id": 0, "solution": "import numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Computes the binary classification log-loss (also called cross-entropy loss).\n\n    Args:\n        actual: A list of integers (0 or 1) representing the true labels.\n        predicted: A list of real numbers in [0, 1] representing the predicted probabilities.\n\n    Returns:\n        The average log-loss, rounded to six decimal places.\n    \"\"\"\n    N = len(actual)\n    epsilon = 1e-15\n    clipped_predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    log_loss = -np.sum((actual * np.log(clipped_predicted) + (1 - actual) * np.log(1 - clipped_predicted)) / N)\n    return round(log_loss, 6)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        raise ValueError('Inputs must be either a list or a NumPy array')\n    if not len(x) == len(y):\n        return -1\n    d = sum((1 for i in range(len(x)) if x[i] != y[i]))\n    return round(d / len(x), 4)"}
{"task_id": 166, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"\n    Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    w = np.zeros_like(y_train)\n    b = 0\n    converged = False\n    errors = 0\n    for _ in range(max_iter):\n        updated_w = w.copy()\n        updated_b = b.copy()\n        for i in range(len(X_train)):\n            (x_i, y_i) = (X_train[i], y_train[i])\n            m = y_i * (updated_w @ x_i + updated_b)\n            if m <= 0:\n                updated_w += y_i * x_i\n                updated_b += y_i\n                errors += 1\n            if updated_w == w and updated_b == b and (errors == 0):\n                converged = True\n                break\n        if converged:\n            break\n    predictions = []\n    for x in X_test:\n        score = w @ x + b\n        predictions.append(np.sign(score))\n    return predictions"}
{"task_id": 167, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"\n    Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    y_hat = np.clip(y_hat, epsilon, 1 - epsilon)\n    m = y_hat.shape[0]\n    loss = -1.0 / m * np.sum(np.log(y_hat) * y + np.log(1 - y_hat) * (1 - y))\n    grad = np.zeros_like(y_hat)\n    for i in range(m):\n        grad[i] = (y_hat[i] - y[i]) / m\n    rounded_loss = round(loss * 10000) / 10000.0\n    rounded_gradient = [round(grad[i] * 10000) / 10000.0 for i in range(m)]\n    return (rounded_loss, rounded_gradient)"}
{"task_id": 168, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"\n    Implement a Gaussian Naive Bayes classifier from scratch.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    class_counts = {}\n    class_means = {}\n    class_variances = {}\n    for class_label in set(y_train):\n        class_means[class_label] = np.zeros_like(X_train[0])\n        class_variances[class_label] = np.zeros_like(X_train[0])\n    for (i, (x, y)) in enumerate(zip(X_train, y_train)):\n        if y not in class_means:\n            class_means[y] = np.zeros(len(x))\n            class_variances[y] = np.zeros(len(x))\n        mean_val = np.mean(x)\n        variance_val = x.var()\n        class_means[y][i] = mean_val\n        class_variances[y][i] = variance_val + 1e-06\n    predictions = []\n    for (x, y) in zip(X_test, y_train):\n        max_class_index = -1\n        max_log_prob = -np.inf\n        for class_label in set(y_train):\n            current_log_prob = np.log(class_means[class_label]) + np.sum(np.log(class_variances[class_label])) + np.log(class_mean[class_label])\n            if current_log_prob > max_log_prob:\n                max_class_index = class_label\n                max_log_prob = current_log_prob\n        predictions.append(max_class_index)\n    return predictions"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"\n    Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not window in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window name')\n    if N <= 0:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * i / (N - 1)) + a2 * np.cos(4 * np.pi * i / (N - 1)) - a3 * np.cos(6 * np.pi * i / (N - 1)), 4) for i in range(N)]\n    elif window == 'generalized_cosine':\n        if not coefficients:\n            raise ValueError('Generalized cosine requires coefficients')\n        a_coefficients = coefficients\n        return [round((a * np.cos(2 * np.pi * i / (N - 1)) for (i, a) in enumerate(a_coefficients))) for a in a_coefficients]\n    if N == 1:\n        return [1.0] * N\n    return [round(0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'hamming' else [round(0.5 - 0.5 * np.cos(2 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'hann' else [round(a0 - a1 * np.cos(2 * np.pi * i / (N - 1)) + a2 * np.cos(4 * np.pi * i / (N - 1)) - a3 * np.cos(6 * np.pi * i / (N - 1)), 4) for i in range(N)] if window == 'blackman_harris' else [round((a * np.cos(2 * np.pi * i / (N - 1)) for (i, a) in enumerate(coefficients))) for a in coefficients]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression classifier using mini-batch Gradient Descent and return predictions for the test set.\n    \n    Parameters:\n    X_train : list[list[float]] - Training feature matrix\n    y_train : list[int] - Training labels (exactly two distinct values)\n    X_test : list[list[float]] - Test feature matrix\n    epochs : int, default 5000 - Number of passes over training data\n    learning_rate : float, default 0.1 - Step size in Gradient Descent updates\n    batch_size : int, default 32 - Number of samples per mini-batch\n    \n    Returns:\n    list[int] - Predicted labels for each sample in X_test\n    \"\"\"\n    X_train = np.insert(X_train, 0, [1.0], axis=1)\n    X_test = np.insert(X_test, 0, [1.0], axis=1)\n    W = np.zeros((len(y_train), len(X_train[0])))\n\n    def predict_prob(X):\n        for _ in range(epochs):\n            idx = np.arange(len(X))\n            batch_idx = np.random.permutation(idx)\n            for i in range(batch_size):\n                x_batch = X[batch_idx[i]]\n                y_batch = y_train[batch_idx[i]]\n                loss = -np.dot(W.T, x_batch) + np.log(1 / (1 + np.exp(-np.dot(W, x_batch))))\n                loss = np.sum(loss) / batch_size\n                W += learning_rate * (loss / batch_size)\n        return W.T @ X > 0.5\n    predicted_labels = predict_prob(X_test)\n    return predicted_labels"}
{"task_id": 172, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.array([np.round(np.tanh(x) ** 2 - 1, 4) for x in z.tolist()])\n    elif isinstance(z, np.number):\n        return round(z, 4)\n    else:\n        return np.array([round(float(x), 4) for x in z])"}
{"task_id": 173, "completion_id": 0, "solution": "def alphabetical_distance(candidate: str, target: str) -> int:\n    if len(candidate) != len(target):\n        return -1\n    distance = 0\n    for i in range(len(candidate)):\n        char1 = candidate[i]\n        char2 = target[i]\n        distance += abs(ord(char1) - ord(char2))\n    return distance"}
{"task_id": 174, "completion_id": 0, "solution": "import numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    num_samples = predictions.shape[0]\n    loss = -np.mean(np.sum((predictions - np.einsum('b,b->b', labels, predictions)) ** 2) / num_samples)\n    accuracy = np.sum(labels == np.argmax(predictions, axis=1)) / num_samples\n    loss_rounded = round(loss, 4)\n    accuracy_rounded = round(accuracy, 4)\n    return (loss_rounded, accuracy_rounded)"}
{"task_id": 175, "completion_id": 0, "solution": "import numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    if not weights:\n        return 0.0\n    weights_array = np.array(weights)\n    squared_weights = weights_array ** 2\n    penalty = C * np.sum(squared_weights)\n    return round(penalty, 4)"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    w = [1.0] * n_estimators\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    m = len(X_train_np)\n    predictions = []\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        for i in range(m):\n            h_t = X_train_np[i, :]\n            if np.abs(y_train_np[i]) == 1:\n                break\n            error_t = np.sum(w * (y_train_np[i] != h_t[0])) / m\n            current_stump = {'feature_index': i, 'threshold': h_t[1], 'polarity': 1 if h_t[1] < 0 else -1}\n            if error_t < min_error or (error_t == min_error and current_stump['feature_index'] < best_stump.get('feature_index', -1) and (current_stump['threshold'] < best_stump.get('threshold', 0)) and (current_stump['polarity'] < best_stump.get('polarity', 1))):\n                best_stump = current_stump\n        alpha_t = 0.5 * np.log((1 - error_t) / (error_t + 1e-10))\n        new_weights = w * np.exp(-alpha_t * y_train_np[i] * h_t[1])\n        total_weight = np.sum(new_weights)\n        new_weights /= total_weight\n        w = new_weights\n    aggregated_votes = []\n    for i in range(len(X_test_np)):\n        vote = 0\n        for j in range(n_estimators):\n            feature_index = X_test_np[i, :][j]\n            threshold = X_test_np[i, 1]\n            polarity = 1 if threshold < 0 else -1\n            prediction = X_train_np[i, :][j]\n            vote += prediction * w[j]\n        predictions.append(1 if vote > 0 else 0)\n    return predictions"}
{"task_id": 177, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        result = np.tanh(np.asarray(z))\n        return result.tolist()\n    elif isinstance(z, list):\n        return [round(x, 4) for x in z]\n    elif isinstance(z, int) or isinstance(z, float):\n        return round(z, 4)\n    else:\n        raise ValueError('Input must be a scalar, list, or numpy array.')"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (n_dims > 0 and num_particles > 0 and (num_iterations > 0)):\n        return -1\n    rng = np.random.default_rng(seed)\n    x = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    v = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    global_best = None\n    personal_best = None\n    for _ in range(num_iterations):\n        w = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        r1 = rng.uniform(0, 1)\n        r2 = rng.uniform(0, 1)\n        v_new = w * v + c1 * r1 * (personal_best[0] - x[0]) + c2 * r2 * (global_best[0] - x[0])\n        x_new = np.clip(x + v_new, -1, 1)\n        if np.min(x_new) == personal_best[0]:\n            personal_best = x_new\n        if np.min(x_new) == global_best[0]:\n            global_best = x_new\n    min_value = np.min(global_best)\n    return round(min_value, 4)"}
{"task_id": 179, "completion_id": 0, "solution": "import re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    line = line.lower() if lowercase else line\n    line = ''.join([char for char in line if char not in string.punctuation])\n    line = re.sub(' +', ' ', line)\n    line = line.rstrip()\n    if not line or not isinstance(line, str):\n        return []\n    return line"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    Pure-function implementation of the k-Nearest Neighbours algorithm.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k <= 0 or len(X_train) == 0:\n        return []\n    if k < 1 or k > len(X_train):\n        return []\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    distances = np.sqrt(np.sum((X_train_np - X_test_np) ** 2, axis=1))\n    nearest_indices = np.argsort(distances[:k])\n    if task == 'classification':\n        label_counts = Counter(y_train[nearest_indices[:k]])\n        return [label_counts[i] for i in sorted(label_counts.keys())]\n    else:\n        mean_values = np.mean(y_train[nearest_indices[:k]], rounding_mode='rounding')\n        rounded_mean = round(mean_values, 4)\n        return [rounded_mean] + [mean_values for _ in X_test_np]"}
{"task_id": 181, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"\n    Predict targets of X_test using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to X_train.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type. Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in X_test.\n    \"\"\"\n    if not problem == 'classify':\n        return [np.mean(x) for x in X_test]\n    predictions = []\n    unique_labels = np.unique(y_train)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    distances = np.linalg.norm(X_train - X_test, axis=1)\n    selected_neighbors = np.argsort(distances[:k])\n    selected_labels = y_train[selected_neighbors]\n    if len(selected_labels) >= k:\n        majority_vote = Counter(selected_labels).most_common(1)[0][1]\n    else:\n        majority_vote = None\n    if majority_vote is not None:\n        predictions.append(majority_vote)\n    else:\n        predictions.append(unique_labels[0])\n    return predictions"}
{"task_id": 182, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Compute the polynomial kernel matrix using the given X and Y matrices.\n    \n    Args:\n        X: A 2D list (or NumPy array) representing the input data.\n        Y: A 2D list (or NumPy array) representing the target data.\n        degree: The polynomial kernel degree (default is 2).\n        \n    Returns:\n        A Python list of lists representing the computed kernel matrix with rounded entries to four decimal places.\n    \"\"\"\n    if not isinstance(X, list) or not isinstance(Y, list):\n        return -1\n    if len(X) == 0 or len(Y) == 0:\n        return -1\n    if len(X[0]) != len(Y[0]):\n        return -1\n    if degree < 1:\n        return -1\n    K = np.power(X @ Y.T, degree)\n    K_rounded = np.round(K, 4)\n    result = K_rounded.tolist()\n    return result"}
{"task_id": 183, "completion_id": 0, "solution": "import numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        pass\n    limit = np.sqrt(6 / fan_in)\n    return np.random.uniform(-limit, limit, size=weight_shape)"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nimport math\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"\n    Build a binary decision tree from scratch using Gini impurity and recursive binary splitting.\n    \n    Parameters:\n    X_train (np.ndarray): Training feature matrix of shape (n_samples, n_features).\n    y_train (np.ndarray): Integer class labels for the training data, shape (n_samples,).\n    X_test (np.ndarray): Test feature matrix to classify, shape (m_samples, n_features).\n    max_depth (int | None): Maximum allowed depth. If None, no depth limit.\n\n    Returns:\n    list[int]: Predicted class label for each row in X_test.\n    \"\"\"\n    if max_depth is None:\n        max_depth = float('inf')\n\n    def predict_leaf(X):\n        return [y_train[i] for i in range(len(X))]\n\n    def build_tree(node, left, right, current_depth, current_gini):\n        if current_depth > max_depth:\n            return predict_leaf(X_test)\n        if not left or not right:\n            if y_train[left] == y_train[right]:\n                return [y_train[left]]\n            else:\n                return [y_train[left], y_train[right]]\n        feature_values = np.unique(X_train[left], axis=0)\n        mid_points = np.sort(feature_values)\n        gain = 0\n        best_split = (feature_values, mid_points[1])\n        for (feature, mid) in zip(mid_points, mid_points[1]):\n            threshold = mid\n            left_subset = X_train[left][feature_values < threshold]\n            right_subset = X_train[right][feature_values >= threshold]\n            gini_left = calculate_gini(left_subset, y_train[left], 0)\n            gini_right = calculate_gini(right_subset, y_train[right], 0)\n            gain = max(gain, gini_left + gini_right)\n            best_split = (feature, threshold)\n        if gain <= 0:\n            return [y_train[left], y_train[right]]\n        left_child = build_tree(best_split, left, right, current_depth + 1, current_gini)\n        right_child = build_tree(best_split, left, right, current_depth + 1, current_gini)\n        if len(left_child) == 0 or len(right_child) == 0:\n            return [y_train[left], y_train[right]]\n        else:\n            return [left_child[-1], right_child[-1]]\n    root = build_tree(0, 0, 0, 0, 0)\n    return [predict_leaf(X_test[i]) for i in range(len(X_test))]\ndef calculate_gini(subset, y_labels, class_label):\n    \"\"\"Calculate Gini impurity for a subset.\"\"\"\n    n = len(y_labels)\n    unique_y = np.unique(y_labels)\n    counts = np.bincount(y_labels, weights=1 / n, label='class')\n    return -counts * (1 - np.sum(counts, axis=0) / n)"}
{"task_id": 185, "completion_id": 0, "solution": "import numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if X.size == 0:\n        raise ValueError('Got an empty matrix.')\n    n_samples = 1\n    n_features = len(X)\n    if X.ndim == 1:\n        n_samples = 1\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    return (n_samples, n_features)"}
{"task_id": 186, "completion_id": 0, "solution": "import numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    mean = np.mean(y_train)\n    predictions = [round(mean, 4)] * len(X_test)\n    return predictions"}
{"task_id": 188, "completion_id": 0, "solution": "import math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"\n    Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    if not (0 <= min_epsilon < max_epsilon and decay_rate > 0 and (step >= 0)):\n        return -1\n    if step == 0:\n        epsilon = max_epsilon\n    else:\n        exponent = math.exp(-decay_rate * step)\n        epsilon = min_epsilon + (max_epsilon - min_epsilon) * exponent\n    epsilon = max(epsilon, min_epsilon)\n    rounded_value = round(epsilon, 4)\n    return rounded_value"}
{"task_id": 189, "completion_id": 0, "solution": "import numpy as np\ndef batch_resample(X, new_dim, mode='bilinear'):\n    \"\"\"\n    Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    n_ex = X.shape[0]\n    (out_rows, out_cols) = new_dim\n    X_resampled = np.zeros((n_ex, out_rows, out_cols, X.shape[-1]), dtype=X.dtype)\n    if mode == 'bilinear':\n        X_resampled = np.interlaced_multidimensional_interpolation(X, out_rows, out_cols, X.shape[-1], X.shape[-2], X.shape[-3], interpolation='bilinear')\n    elif mode == 'neighbor':\n        X_resampled = np.interlaced_multidimensional_interpolation(X, out_rows, out_cols, X.shape[-1], X.shape[-2], X.shape[-3], interpolation='nearestneighbor')\n    X_resampled = np.round(X_resampled, 4)\n    return X_resampled"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimizes the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(feature_index, threshold, gini)` where\n        `gini` is rounded to 4 decimal places.  If no valid split exists,\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    if not X or not y:\n        return (-1, None, round(np.sum(y), 4))\n    n_samples = len(X)\n    n_features = len(X[0]) if isinstance(X, list) else len(X)\n    if n_samples == 0:\n        return (-1, None, round(0, 4))\n    total_samples = n_samples\n    total_classes = len(set(y))\n    g_total = 0\n    for class_label in set(y):\n        p = (y == class_label) / total_samples\n        g_total += 1 - np.sum(p * p)\n    g_total = round(g_total, 4)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = g_total\n    for feature_idx in range(n_features):\n        feature_values = [x[feature_idx] for x in X]\n        unique_vals = np.unique(feature_values)\n        unique_vals_sorted = np.sort(unique_vals)\n        if len(unique_vals_sorted) == 0:\n            continue\n        for v in unique_vals_sorted:\n            left_count = sum((1 for x in X if x[feature_idx] <= v))\n            right_count = n_samples - left_count\n            if left_count == 0 or right_count == 0:\n                continue\n            node_left = left_count / total_samples\n            node_right = right_count / total_samples\n            g_left = 1 - node_left ** 2\n            g_right = 1 - node_right ** 2\n            weight = 1.0 / (left_count + right_count)\n            current_gini = (node_left * g_left + node_right * g_right) * weight\n            if current_gini < best_gini:\n                best_gini = current_gini\n                best_feature_index = feature_idx\n                best_threshold_value = v\n            elif current_gini == best_gini:\n                if feature_idx < best_feature_index:\n                    best_feature_index = feature_idx\n                    best_threshold_value = v\n                elif feature_idx == best_feature_index:\n                    if v < best_threshold_value:\n                        best_threshold_value = v\n            else:\n                pass\n    if best_feature_index == -1:\n        return (-1, None, g_total)\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"\n    Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        return -1\n\n    def d(x, y):\n        if not isinstance(x, list) and (not isinstance(y, list)):\n            return -1\n        if not all((isinstance(v, list) for v in x)):\n            return -1\n        if not all((len(v) == len(x) for v in x)):\n            return -1\n        if not x or not y:\n            return -1\n        if name == 'cosine':\n            if np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n                return -1\n        if name == 'euclidean':\n            return round(np.sqrt(sum(((xi - yi) ** 2 for (xi, yi) in zip(x, y)))), 4)\n        elif name == 'manhattan':\n            return round(sum((abs(xi - yi) for (xi, yi) in zip(x, y))), 4)\n        elif name == 'chebyshev':\n            return round(max((abs(xi - yi) for (xi, yi) in zip(x, y))), 4)\n        else:\n            dot_product = np.dot(x, y)\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            return round(1 - dot_product / (norm_x * norm_y), 4)\n    return d"}
{"task_id": 193, "completion_id": 0, "solution": "import numpy as np\ndef softsign(z):\n    \"\"\"\n    Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.round(np.divide(z, 1 + np.abs(z)), 4).tolist()\n    elif isinstance(z, list):\n        return [np.round(num / (1 + abs(num)), 4) for num in z]\n    else:\n        return round(z / (1 + abs(z)), 4)"}
{"task_id": 194, "completion_id": 0, "solution": "import numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n    \n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n        \n    Returns:\n        A tuple (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    if G is None:\n        G = [np.sum(gradients ** 2), learning_rate]\n    else:\n        squared_gradient = np.sum(gradients ** 2)\n        G[0] += squared_gradient\n        new_weight = weights[0] - learning_rate * gradients[0] / np.sqrt(G[0] + eps)\n    new_weights = np.round(weights, 6)\n    new_G = np.round(G, 6)\n    return (new_weights, new_G)"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if not env.action_space.n:\n        return ([], [], 0)\n    n_actions_per_dim = []\n    if cont_action:\n        for i in range(len(env.action_space.shape)):\n            n_actions_per_dim.append(np.inf)\n        return ([], [], len(env.action_space.shape))\n    action_ids = []\n    action_dim = len(env.action_space.shape)\n    for dim_idx in range(action_dim):\n        if not isinstance(env.action_space.shape[dim_idx], tuple):\n            continue\n        sub_shape = env.action_space.shape[dim_idx]\n        if cont_action:\n            n_actions_per_dim[dim_idx] = np.inf\n        else:\n            values = [val for val in range(sub_shape[0])]\n            for vals in product(*[range(val) for val in sub_shape]):\n                action_ids.append(tuple(vals))\n    if all((1 for _ in range(action_dim))) and (not cont_action):\n        action_ids = list(product(*[env.action_space.shape[i] for i in range(action_dim)]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    beta = np.zeros((V, len(phi[0])))\n    for (d_idx, doc) in enumerate(corpus):\n        N_d = len(doc)\n        T_topics = phi[d_idx].shape[1]\n        for (t_idx, topic_prob) in enumerate(phi[d_idx]):\n            total = np.sum(topic_prob)\n            if total != 0:\n                beta[t_idx, d_idx] = topic_prob / total\n    normalized_beta = beta / beta.sum(axis=1)\n    rounded_beta = np.round(normalized_beta, 4)\n    return rounded_beta"}
{"task_id": 199, "completion_id": 0, "solution": "import numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    left = []\n    right = []\n    for (label, feature) in zip(y, X):\n        if feature < value:\n            left.append(label)\n        else:\n            right.append(label)\n    return (left, right)"}
{"task_id": 200, "completion_id": 0, "solution": "import numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    if not weights:\n        return 0.0\n    sum_abs = np.sum(np.abs(weights))\n    return round(sum_abs * C, 4)"}
{"task_id": 201, "completion_id": 0, "solution": "import numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to four decimal places.\n    \"\"\"\n    if axis == 0:\n        return np.round(p.tolist(), 4).tolist()\n    else:\n        slices = []\n        for i in range(p.shape[axis]):\n            slice_p = p[:, i]\n            norm_slice = slice_p.norm(2)\n            min_clipped = m / (norm_slice + 1e-12)\n            clipped = slice_p * min_clipped\n            slices.append(clipped)\n        result_tensor = np.array(slices)\n        return np.round(result_tensor.tolist(), 4).tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Partitioning Around Medoids (PAM) clustering algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    while True:\n        distances = []\n        for i in range(len(X)):\n            if i < len(medoids):\n                distances.append(np.linalg.norm(X[i] - medoids[i]))\n        best_swap = None\n        best_reduction = float('inf')\n        for m_idx in range(k):\n            for non_med_idx in range(len(X)):\n                if m_idx != non_med_idx:\n                    new_medoids = medoids.copy()\n                    (new_medoids[m_idx], new_medoids[non_med_idx]) = (new_medoids[non_med_idx], new_medoids[m_idx])\n                    new_distances = []\n                    for i in range(len(X)):\n                        if i < len(new_medoids):\n                            new_distances.append(np.linalg.norm(X[i] - new_medoids[i]))\n                    original_cost = sum(distances)\n                    new_cost = sum(new_distances)\n                    if new_cost < best_reduction:\n                        best_reduction = new_cost\n                        best_swap = (m_idx, non_med_idx)\n                        if new_cost < best_reduction:\n                            best_reduction = new_cost\n                            best_swap = (m_idx, non_med_idx)\n        if not best_swap:\n            break\n        medoids = new_medoids\n        distances = []\n        for i in range(len(X)):\n            if i < len(medoids):\n                distances.append(np.linalg.norm(X[i] - medoids[i]))\n        labels = [0] * len(X)\n        for i in range(len(X)):\n            min_dist = float('inf')\n            idx = -1\n            for j in range(len(medoids)):\n                dist = np.linalg.norm(X[i] - medoids[j])\n                if dist < min_dist or (dist == min_dist and j < idx):\n                    idx = j\n                    min_dist = dist\n            labels[i] = idx\n    return labels"}
{"task_id": 203, "completion_id": 0, "solution": "import numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    if not isinstance(probs, (list, np.ndarray)) or len(probs) <= 0:\n        return -1\n    probs = np.array(probs)\n    if probs.ndim != 1 or probs.shape[0] < 1:\n        return -1\n    if any((p < 0 for p in probs)) or probs.sum() < 1.0:\n        return -1\n    if all((p == 0 for p in probs)):\n        return ([0.0, 0.0, 0.0], [0, 0, 0])\n    scaled_probs = probs * probs.shape[0]\n    small = []\n    large = []\n    for (i, val) in enumerate(scaled_probs):\n        if val < 1.0:\n            small.append(i)\n        else:\n            large.append(i)\n    alias_table = []\n    prob_table = []\n    while small and large:\n        l = small[-1]\n        g = large[-1]\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1\n        if scaled_probs[g] < 1.0:\n            large.append(g)\n        else:\n            small.append(g)\n    for idx in large:\n        prob_table[idx] = 1.0\n    rounded_prob_table = [round(p * 10000, 4) / 10000 for p in prob_table]\n    rounded_alias_table = [int(alias_table[i]) for i in alias_table]\n    return tuple([rounded_prob_table, rounded_alias_table])"}
{"task_id": 204, "completion_id": 0, "solution": "import numpy as np\ndef num_missing(data):\n    \"\"\"\n    Count missing values in a 1-D iterable.\n\n    An element is considered missing if it is None or NaN (Not-a-Number).\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for item in data:\n        if item is None or np.isnan(item):\n            count += 1\n    return count"}
{"task_id": 205, "completion_id": 0, "solution": "def get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    result = []\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            result.append(item['id'])\n    return result"}
{"task_id": 206, "completion_id": 0, "solution": "import numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"\n    Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    if not (isinstance(actual, list) or isinstance(actual, tuple) or isinstance(actual, np.ndarray)):\n        return -1\n    if not (isinstance(predicted, list) or isinstance(predicted, tuple) or isinstance(predicted, np.ndarray)):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    absolute_diff = np.abs(actual - predicted)\n    ma_e = np.mean(absolute_diff)\n    rounded_ma_e = round(ma_e, 4)\n    return rounded_ma_e"}
{"task_id": 207, "completion_id": 0, "solution": "def convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    if not isinstance(img_height, int) or not isinstance(img_width, int):\n        return -1\n    if not isinstance(filter_shape, tuple) or not isinstance(stride, tuple):\n        return -1\n    if not isinstance(padding, tuple) or not isinstance(padding[0], int) or (not isinstance(padding[1], int)):\n        return -1\n    oh = (img_height + 2 * padding[0] - filter_shape[0]) // stride[0]\n    ow = (img_width + 2 * padding[1] - filter_shape[1]) // stride[1]\n    if oh < 1 or ow < 1:\n        return -1\n    return (oh, ow)"}
{"task_id": 208, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is not None:\n        categories = list(set(categories))\n        first_occurrence_order = [i for (i, label) in enumerate(labels)]\n        first_occurrence_order.sort()\n        categories = categories[first_occurrence_order]\n    output = []\n    if not labels:\n        return output\n    result_array = np.ones((len(labels), len(categories)), dtype=int)\n    for label in labels:\n        idx = categories.index(label)\n        result_array[:, idx] = 1\n    output = result_array.tolist()\n    return output"}
{"task_id": 209, "completion_id": 0, "solution": "import numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"\n    Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    if len(payoffs) != len(payoff_probs):\n        return [-1, -1, -1]\n    if not all(len(payoff_probs[i]) == len(payoffs)):\n        return [-1, -1, -1]\n    total_prob = np.sum(payoff_probs)\n    if np.abs(total_prob - 1) > 1e-08:\n        return [-1, -1, -1]\n    for i in range(len(payoffs)):\n        if len(payoffs[i]) != len(payoff_probs[i]):\n            return [-1, -1, -1]\n    expected_values = []\n    best_arm = 0\n    best_ev = 0.0\n    for k in range(len(payoffs)):\n        if len(payoffs[k]) != len(payoff_probs[k]):\n            continue\n        arm_payoff = payoffs[k]\n        prob = payoff_probs[k]\n        expected = sum((arm_payoff * prob for i in range(len(arm_payoff))))\n        expected_values.append(round(expected, 4))\n        if expected > best_ev:\n            best_arm = k\n            best_ev = expected\n        elif expected == best_ev:\n            if k < best_arm:\n                best_arm = k\n            best_ev = expected\n    return (expected_values, best_arm, best_ev)"}
{"task_id": 210, "completion_id": 0, "solution": "import functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n\n    @functools.wraps(decorator_func)\n    def wrapper(*args, **kwargs):\n        if not args:\n            return decorator_func(*args, **kwargs)\n        else:\n            return decorator_func(*args, **kwargs)\n    return wrapper"}
{"task_id": 211, "completion_id": 0, "solution": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    if not actual or not predicted:\n        return -1.0\n    if len(actual) != len(predicted):\n        return -1.0\n    mismatches = sum((1 for (a, p) in zip(actual, predicted) if a != p))\n    total_samples = len(actual)\n    classification_error = mismatches / total_samples\n    return 1.0 - classification_error"}
{"task_id": 212, "completion_id": 0, "solution": "from collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"\n    Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    if 'input' not in graph or 'output_realtime' not in graph:\n        return []\n    input_layer = graph['input']\n    output_layer = graph['output_realtime']\n    queue = deque([input_layer])\n    visited = set()\n    while queue:\n        current = queue.popleft()\n        if current == output_layer:\n            break\n        for neighbor in graph[current]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n    if output_layer in visited:\n        return [input_layer] + visited[output_layer:]\n    else:\n        return []"}
{"task_id": 213, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    if not shape:\n        return []\n    if len(shape) == 1:\n        fan_in = shape[0]\n        fan_out = shape[0]\n        return [np.zeros(shape, dtype=np.float32).tolist()]\n    (in_channels, out_channels) = (shape[0], shape[1])\n    receptive_field_size = 1\n    for dim in shape[2:]:\n        receptive_field_size *= dim\n    fan_in = in_channels * receptive_field_size\n    fan_out = out_channels * receptive_field_size\n    weights = np.random.normal(loc=0.0, scale=np.sqrt(2 / fan_in), size=(fan_out, fan_in))\n    return weights.tolist()"}
{"task_id": 214, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the same length. Otherwise, it should return the MSE rounded to 4 decimal places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    mse = np.sum((actual - predicted) ** 2) / len(actual)\n    return np.round(mse, 4)"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor: float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio: float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations: int, default 3000\n        Number of gradient descent iterations.\n    learning_rate: float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the inputs are invalid (different feature counts, or non-positive `n_iterations`).\n    \"\"\"\n    if not isinstance(x_train, list) or not isinstance(x_train[0], list):\n        raise ValueError('x_train must be a list of lists')\n    if not isinstance(y_train, list) or not isinstance(y_train[0], float):\n        raise ValueError('y_train must be a list of floats')\n    if not isinstance(x_test, list) or not isinstance(x_test[0], list):\n        raise ValueError('x_test must be a list of lists')\n    if len(x_train) != len(x_test):\n        raise ValueError('Number of rows in x_train and x_test must be equal.')\n    if not np.array_equal(x_train[0], x_test[0]):\n        raise ValueError('x_train and x_test must have the same shape.')\n    X = np.column_stack((np.ones(len(x_train)), x_train))\n    if not (len(X.shape) == 2 and len(X[0].shape) == 1):\n        raise ValueError('Feature matrix should have shape (n_samples, n_features + 1)')\n    X_train = np.array(x_train)\n    X_test = np.array(x_test)\n    if len(X_train) < 1:\n        raise ValueError('x_train must contain at least one feature')\n    if len(X_test) < 1:\n        raise ValueError('x_test must contain at least one feature')\n    if n_iterations <= 0:\n        return -1\n    if len(X_train) != len(X_test):\n        return -1\n    X_train = np.array(x_train)\n    X_test = np.array(x_test)\n    if X_train.shape != X_test.shape:\n        return -1\n    if len(y_train) != X_train.shape[1]:\n        return -1\n    for i in range(X_train.shape[1] - 1):\n        X_train[:, i] = X_train[:, i] / np.std(X_train[:, i])\n    if len(X_train) != len(X_test):\n        return -1\n    w = np.zeros(X_train.shape[1] + 1)\n    loss = []\n    for _ in range(n_iterations):\n        dw = np.dot(X_train.T, y_train - w) * learning_rate\n        w += learning_rate * dw\n        loss.append(np.mean((y_train - w) ** 2))\n        if abs(loss[-1]) < reg_factor:\n            break\n    predictions = np.dot(X_test, w)\n    predictions = np.round(predictions, 4).tolist()\n    return predictions"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    grad = []\n    for (a, p) in zip(actual, predicted):\n        z = -a * p\n        grad_i = a * np.exp(-z) * (1 - np.exp(-z))\n        grad.append(round(grad_i, 6))\n    hess = []\n    for p in predicted:\n        prob = np.sigmoid(p)\n        hess_i = prob * (1 - prob)\n        hess.append(round(hess_i, 6))\n    prob = []\n    for p in predicted:\n        prob_i = np.sigmoid(p)\n        prob.append(round(prob_i, 6))\n    return (np.array(grad), np.array(hess), np.array(prob))"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    player_value = sum(player)\n    dealer_value = sum(dealer)\n    if len(player) == 2 and 1 in player and (10 in player):\n        if player_value == 11:\n            reward = 1.5\n        else:\n            reward = 1.0\n    else:\n        player_bust = player_value > 21\n        dealer_bust = dealer_value > 21\n        if player_bust:\n            reward = -1.0\n        elif dealer_bust:\n            reward = +1.0\n        elif player_value > dealer_value:\n            reward = +1.0\n        elif player_value < dealer_value:\n            reward = -1.0\n        else:\n            reward = 0.0\n    return reward"}
{"task_id": 220, "completion_id": 0, "solution": "import numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"\n    Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    if not np.any(C_wt.shape[0] > 0) or not np.any(C_dt.shape[1] > 0):\n        return ([], [])\n    (V, T) = C_wt.shape\n    (D, _) = C_dt.shape\n    phi = np.zeros((V, T))\n    theta = np.zeros((D, T))\n    for v in range(V):\n        for t in range(T):\n            total_count = np.sum(C_wt[v, t])\n            phi[v, t] = (C_wt[v, t] + beta) / (total_count + V * beta)\n    for d in range(D):\n        for t in range(T):\n            total_count = np.sum(C_dt[d, t])\n            theta[d, t] = (C_dt[d, t] + alpha) / (total_count + T * alpha)\n    phi_rounded = np.round(phi, 4)\n    theta_rounded = np.round(theta, 4)\n    return (phi_rounded, theta_rounded)"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Helper function to compute the squared logarithmic errors.\n    \n    Parameters:\n    actual (list or tuple): True values\n    predicted (list or tuple): Predicted values\n    \n    Returns:\n    numpy.ndarray: Element-wise squared log errors\n    \"\"\"\n    if not all((isinstance(x, (int, float)) for x in actual)) or not all((isinstance(x, (int, float)) for x in predicted)):\n        return np.zeros_like(actual)\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return np.zeros_like(actual)\n    return (np.log10(1 + actual) - np.log10(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate Mean Squared Logarithmic Error (MSLE).\n    \n    Parameters:\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be same length as `actual` and contain only non-negative numbers.\n    \n    Returns:\n    float\n        The MSLE rounded to 4 decimals. Returns -1 if input validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((isinstance(x, (int, float)) for x in actual)) or not all((isinstance(x, (int, float)) for x in predicted)):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    return np.mean(squared_errors) * 100"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z_array = np.array(z)\n    if np.ndim(z_array) == 1:\n        result = np.where(z_array > 0, 1 / (1 + np.exp(-z_array)), 1 - 1 / (1 + np.exp(-z_array)))\n    else:\n        result = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), 1 - 1 / (1 + np.exp(-z_array)))\n    rounded_result = round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.array(list(np.tolist(z))).tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(x, a) for x in z]\n    else:\n        return list(leaky_relu(z))"}
{"task_id": 225, "completion_id": 0, "solution": "import numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    if formula == 'htk':\n        mel = 2595 * np.log10(1 + hz / 700)\n    elif formula == 'slaney':\n        mel = 1127 * np.log(1 + hz / 700)\n    return np.round(mel, 4).tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test: 2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n\n    def stump_classifier(X, y):\n        threshold = X[:, feature_index]\n        polarity = 1 if y < threshold else -1\n        return (feature_index, threshold, polarity)\n    sample_weights = [1.0] * n_clf\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        for i in range(len(X_train.columns)):\n            feature_index = i\n            threshold = X_train[feature_index].mean()\n            polarity = 1 if y_train[i] < threshold else -1"}
{"task_id": 227, "completion_id": 0, "solution": "import numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]] | list[float], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"\n    Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]] | list[float]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    if not isinstance(W1, list):\n        return -1\n    if len(W1) != len(state):\n        return -1\n    if len(W1[0]) != len(state):\n        return -1\n    if not all((len(w) == len(W1[i][j]) for i in range(len(W1)) for j in range(len(W1[i])))):\n        return -1\n    if isinstance(W3, list):\n        if len(W3) == 1 and len(W3[0]) == 1:\n            return -1\n    elif len(W3) == 1:\n        return -1\n    h1 = np.tanh(np.dot(state, W1))\n    h2 = np.tanh(np.dot(h1, W2))\n    v = np.dot(h2, W3)\n    rounded_value = round(v, 4)\n    return rounded_value"}
{"task_id": 228, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        raise ValueError('X and Y must have the same number of columns')\n    squared_diffs = np.sum((X - Y) ** 2, axis=1)\n    distances = np.sqrt(squared_diffs)\n    distances_rounded = np.round(distances, 4)\n    result = distances_rounded.tolist()\n    return result"}
{"task_id": 230, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Implement the Gaussian Naive Bayes algorithm from scratch for a binary classification problem.\n    \n    Args:\n        X_train: Training data (n_samples x n_features)\n        y_train: Labels (n_samples,)\n        X_test: Test data (m_samples x n_features)\n        \n    Returns:\n        A list of predicted labels (0 or 1) for each test sample.\n    \"\"\"\n    P_y_0 = np.sum(y_train == 0) / len(y_train)\n    P_y_1 = 1 - P_y_0\n    (n_samples, n_features) = X_train.shape\n    mu_cj = np.zeros((2, n_features))\n    sigma_cj_sq = np.zeros((2, n_features))\n    for c in [0, 1]:\n        for j in range(n_features):\n            mean = np.mean(X_train[:, j] if y_train[:, j] == c else X_train[:, j].mean(), axis=0)\n            variance = np.var(X_train[:, j] if y_train[:, j] == c else X_train[:, j], ddof=1)\n            mu_cj[c][j] = mean\n            sigma_cj_sq[c][j] = variance + 1e-09\n    log_posterior = []\n    for i in range(len(X_test)):\n        label = 0\n        for j in range(n_features):\n            mu_cj[label][j]\n            sigma_cj_sq[label][j]\n            log_posterior.append(np.log(mu_cj[label][j]) + np.log(np.exp(sigma_cj_sq[label][j])))\n        label = 1 if log_posterior[i] > log_posterior[0] else 0\n    return [label for label in log_posterior]"}
{"task_id": 231, "completion_id": 0, "solution": "def is_natural(hand: list[int]) -> bool:\n    \"\"\"Detects if the hand contains exactly two cards, one being an Ace (1) and another a ten-valued card (10).\"\"\"\n    return len(hand) == 2 and hand[0] == 1 and (hand[1] == 10)"}
{"task_id": 232, "completion_id": 0, "solution": "import numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if not x.ndim == 2:\n        return False\n    for row in x:\n        if not all((cell == 0 or cell == 1 for cell in row)):\n            return False\n    for row in x:\n        if sum(row) != 1:\n            return False\n    return True"}
{"task_id": 234, "completion_id": 0, "solution": "import numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"\n    Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    if not isinstance(successes, list) or not isinstance(failures, list):\n        return -1\n    if len(successes) != len(failures):\n        return -1\n    if not successes or not failures:\n        return -1\n    if len(successes) != len(failures):\n        return -1\n    theta_i_posterior = np.zeros(len(successes))\n    for i in range(len(successes)):\n        theta_i_posterior[i] = np.random.beta(prior_alpha + successes[i], prior_beta + failures[i])\n    max_theta = np.max(theta_i_posterior)\n    best_arm = np.argmax(theta_i_posterior)\n    return best_arm"}
{"task_id": 235, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"\n    Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the number of labels and C is the number of classes.  Each row is a one-hot vector corresponding to the associated label.\n    \"\"\"\n    if not isinstance(labels, np.ndarray):\n        raise ValueError('Input must be a NumPy array')\n    if not np.ndim(labels) == 1:\n        raise ValueError('Input must be a 1-D array')\n    if n_classes is None:\n        n_classes = np.max(labels) + 1\n    if n_classes < np.max(labels) + 1:\n        raise ValueError('n_classes must be at least max(labels)+1')\n    one_hot = np.zeros((len(labels), n_classes), dtype=np.float64)\n    for (i, label) in enumerate(labels):\n        one_hot[i, label] = 1.0\n    return one_hot"}
{"task_id": 236, "completion_id": 0, "solution": "import numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    if shuffle:\n        np.random.shuffle(X)\n    indices = list(range(X.shape[0]))\n    mb_generator = iter((indices[i:i + batchsize] for i in range(0, len(indices), batchsize)))\n    n_batches = len(indices) // batchsize\n    if len(indices) % batchsize != 0:\n        n_batches += 1\n    return (mb_generator, n_batches)"}
{"task_id": 237, "completion_id": 0, "solution": "from typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    values = []\n    for card in hand:\n        if card in ['2', '3', '4', '5', '6', '7', '8', '9']:\n            values.append(int(card))\n        elif card in ['J', 'Q', 'K']:\n            values.append(10)\n        elif len(values) == 0:\n            values.append(11)\n        else:\n            values[-1] = max(values[-1], 11)\n    total = sum(values)\n    if total > 21:\n        return 0\n    else:\n        return total"}
{"task_id": 239, "completion_id": 0, "solution": "import math\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str='same') -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    pad_top = math.floor((filter_shape[0] - 1) / 2)\n    pad_bottom = math.ceil((filter_shape[0] - 1) / 2)\n    pad_left = math.floor((filter_shape[1] - 1) / 2)\n    pad_right = math.ceil((filter_shape[1] - 1) / 2)\n    return ((pad_top, pad_bottom), (pad_left, pad_right))"}
{"task_id": 240, "completion_id": 0, "solution": "import numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"\n    Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n              'act2num', and 'num2act'.\n    \"\"\"\n    if not obs_ids or not action_ids:\n        obs2num = {id: i for (i, id) in enumerate(obs_ids)}\n        num2obs = {obs_id: idx for (idx, obs_id) in enumerate(obs_ids)}\n        act2num = {id: i for (i, id) in enumerate(action_ids)}\n        num2act = {obs_id: id for (idx, id) in enumerate(obs_ids)}\n    elif not obs_encoder and (not act_encoder):\n        obs2num = {id: i for (i, id) in enumerate(obs_ids)}\n        num2obs = {obs_id: idx for (idx, obs_id) in enumerate(obs_ids)}\n        act2num = {id: i for (i, id) in enumerate(action_ids)}\n        num2act = {obs_id: id for (idx, id) in enumerate(obs_ids)}\n    elif obs_encoder:\n        obs2num = {}\n        for (id, num) in obs_encoder.items():\n            obs2num[num] = id\n        num2obs = {}\n        for (num, obs) in obs2num.items():\n            num2obs[obs] = num\n        act2num = {}\n        for (id, num) in act_encoder.items():\n            act2num[num] = id\n        num2act = {}\n        for (num, act) in act2num.items():\n            num2act[act] = num\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return [-1]\n    if len(shape) == 2:\n        (d0, d1) = shape\n        k = min(d0, d1)\n        A = np.random.normal(loc=0, scale=1.0, size=(d0, d1))\n        (U, singular_values, V_t) = svd(A, full_matrices=False)\n        Q = U if U.shape == (d0, d1) else V_t\n        Q = Q.reshape((d0, d1))\n        scaled_Q = Q * scale\n        flat = scaled_Q.tolist()\n        if len(flat) <= len(shape[0]):\n            flat = flat[:len(shape[0])]\n        flat = flat.reshape(shape[0], -1)\n        for i in range(len(flat)):\n            for j in range(i + 1):\n                if abs(flat[i] @ flat[j]) < 1e-06 * scale:\n                    print('Orthogonality check failed')\n                    return -1\n        return flat\n    else:\n        (d0, d1) = shape\n        k = min(d0, d1)\n        A = np.random.normal(loc=0, scale=1.0, size=(d0, d1))\n        (U, singular_values, V_t) = svd(A, full_matrices=False)\n        Q = U if U.shape == (d0, k) else V_t\n        Q = Q.reshape((d0, k))\n        scaled_Q = Q * scale\n        flat = scaled_Q.tolist()\n        if len(flat) <= len(shape[0]):\n            flat = flat[:len(shape[0])]\n        flat = flat.reshape(shape[0], -1)\n        for i in range(len(flat)):\n            for j in range(i + 1):\n                if abs(flat[i] @ flat[j]) < 1e-06 * scale:\n                    print('Orthogonality check failed')\n                    return -1\n        return flat"}
{"task_id": 242, "completion_id": 0, "solution": "import math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    for i in range(len(pull_counts)):\n        if pull_counts[i] == 0:\n            return i\n    scores = []\n    for i in range(len(ev_estimates)):\n        score = ev_estimates[i] + C * math.sqrt(2 * math.log(current_step + 1) / pull_counts[i])\n        scores.append(score)\n    max_score_index = 0\n    for i in range(len(scores)):\n        if scores[i] > scores[max_score_index]:\n            max_score_index = i\n    return max_score_index"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    z1 = np.dot(state, np.array([1.0, 1.0, 1.0, 1.0]))\n    z2 = np.dot(z1, np.array([1.0, 1.0, 1.0, 1.0])) * 4.0\n    z3 = np.dot(z2, np.array([1.0, 1.0, 1.0, 1.0])) * 16.0\n    logits = z3 * 64.0\n    action_probs = np.softmax(logits)\n    state_value = z3\n    action_probs_rounded = np.round(action_probs, 4)\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 244, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple):\n        return -1\n    if len(shape) == 0:\n        return -1\n    if not all((isinstance(x, int) for x in shape)):\n        return -1\n    if not isinstance(sparsity, float):\n        return -1\n    if not 0 <= sparsity <= 1:\n        return -1\n    tensor = np.random.rand(*shape)\n    result = np.tolist(tensor)\n    return result"}
{"task_id": 247, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"\n    Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    if len(payoff_dists) != len(payoff_probs):\n        return -1\n    valid = True\n    for k in range(len(payoff_dists)):\n        (mu, sigma) = payoff_dists[k]\n        prob = payoff_probs[k]\n        if not (mu == 0 or sigma > 0) and (not (prob < 0 or prob > 1)):\n            valid = False\n    if not valid:\n        return -1\n    expected_rewards = np.array([p * mu for (p, mu) in zip(payoff_probs, payoff_dists)])\n    max_reward = expected_rewards.max()\n    best_arm_index = expected_rewards.argmax()\n    best_ev = round(max_reward, 4)\n    best_arm = best_arm_index\n    return (best_ev, best_arm)"}
{"task_id": 248, "completion_id": 0, "solution": "import numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    p = y_train.sum() / len(y_train) * 100\n    probabilities = np.array([p / 100.0] * len(X_test))\n    rounded_probabilities = np.round(probabilities, 4)\n    return rounded_probabilities.tolist()"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"\n    Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is:\n    state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU\n    \u2514\u2500 actor head (Dense \u2192 soft-max) \u2192 action probabilities\n    \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    (W1, b1) = (params['W1'], params['b1'])\n    (W2, b2) = (params['W2'], params['b2'])\n    (W3, b3) = (params['W3'], params['b3'])\n    (Wa, ba) = (params['Wa'], params['ba'])\n    (Wc, bc) = (params['Wc'], params['bc'])\n    hidden_state = np.dot(state, W1) + b1\n    hidden_state = np.relu(hidden_state)\n    raw_scores = np.dot(hidden_state, Wa) + ba\n    probabilities = np.exp(raw_scores) / np.sum(raw_scores)\n    rounded_probabilities = np.round(probabilities, 4)\n    rounded_value = round(np.dot(hidden_state, Wc) + bc, 4)\n    if np.isclose(rounded_probabilities[-1], 0.0, atol=0.0001):\n        rounded_probabilities[-1] = 1.0\n    if np.isclose(rounded_value, 0.0, atol=0.0001):\n        rounded_value = 0.0\n    return (rounded_probabilities, rounded_value)"}
{"task_id": 251, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent function.\"\"\"\n    return (np.sinh(x) - np.cosh(x)) / (np.cosh(x) + 1)\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit function.\"\"\"\n    return x * (x > 0)\ndef leaky_relu(x, alpha=0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope alpha for negative inputs.\"\"\"\n    return x * (x < 0) + alpha * (x <= 0)\ndef softmax(x):\n    \"\"\"Numerically stable Softmax function.\"\"\"\n    exps = np.exp(x)\n    return exps / np.sum(exps)\ndef get_activation(name):\n    \"\"\"Return the activation function by name.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    if name == 'sigmoid':\n        return sigmoid\n    elif name == 'tanh':\n        return tanh\n    elif name == 'relu':\n        return relu\n    elif name == 'leaky_relu':\n        return leaky_relu\n    elif name == 'softmax':\n        return softmax\n    else:\n        raise ValueError('Invalid activation function.')"}
{"task_id": 252, "completion_id": 0, "solution": "import numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    grad = []\n    hess = [1.0] * len(actual)\n    for i in range(len(actual)):\n        grad.append(actual[i] - predicted[i])\n    return (grad, hess)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    if not gradient:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=2) + (1 - l1_ratio) * np.sum(w ** 2))\n        return round(penalty, 4)\n    grad = alpha * (np.sign(w) * l1_ratio + (1 - l1_ratio) * w)\n    return round(grad.tolist(), 4)"}
{"task_id": 255, "completion_id": 0, "solution": "def usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    if 1 not in hand:\n        return False\n    ace_count = hand.count(1)\n    for i in range(ace_count):\n        new_total = 11 + sum(hand[:i] + hand[i + 1:])\n        if new_total <= 21:\n            return True\n    return False"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name, n_t, X, epsilon):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    lower_case = param_name.lower()\n    param = model.parameters[param_name]\n    temp_param = deepcopy(param)\n    predictions = model.forward(X)\n    grads = np.zeros((n_t, len(temp_param)))\n    for t in range(n_t):\n        for delta in [epsilon, -epsilon]:\n            new_param = temp_param + delta * np.eye(len(temp_param))\n            pred = model.forward(X)\n            loss = loss_func(pred)\n            partial_derivative = loss - loss_func(np.array([new_param])) / (2 * epsilon)\n            grads[t, lower_case] = partial_derivative\n    return grads.T.astype(np.float64)"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones_like(y_train)\n\n    def stump_error(x, y):\n        return sum((1 for (x_val, y_val) in zip(x, y) if x_val != y_val))\n\n    def stump_weight(x, y):\n        return 1 / (2 * np.log((1 - stump_error(x, y)) / stump_error(x, y)))\n    clf = []\n    for _ in range(n_clf):\n        stump = {}\n        stump['alpha'] = stump_weight(X_train[0], y_train[0])\n        stump['error'] = stump_error(X_train[0], y_train[0])\n        stump['votes'] = [1] * len(X_train[0])\n        clf.append(stump)\n        weights *= stump['alpha']\n        new_weights = np.array([w / np.sum(weights) for w in weights])\n        for i in range(len(X_train)):\n            X_i = X_train[i]\n            y_i = y_train[i]\n            error = stump_error(X_i, y_i)\n            vote_count = np.sum([1 if v > 0 else -1 for v in stump['votes']])\n            if error < 0:\n                stump['votes'][i] = 1\n            elif error > 0:\n                stump['votes'][i] = -1\n            weights[i] = new_weights[i] * (1 / np.sum(new_weights))\n    predictions = []\n    for x in X_test:\n        total_vote = 0\n        for stump in clf:\n            total_vote += stump['votes'] * x\n        predictions.append(-1 if total_vote < 0 else 1)\n    return predictions"}
{"task_id": 258, "completion_id": 0, "solution": "import numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"\n    Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the two inputs have different lengths.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    loss = np.maximum(0.0, 1.0 - np.dot(actual, predicted))\n    mean_loss = np.mean(loss) * 100\n    return round(mean_loss, 4)"}
{"task_id": 259, "completion_id": 0, "solution": "import random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"\n    Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size <= 0:\n        return []\n    if len(memory) < batch_size:\n        return [-1]\n    random.seed(42)\n    selected_transitions = [memory[i] for i in range(batch_size)]\n    return selected_transitions"}
{"task_id": 260, "completion_id": 0, "solution": "from itertools import zip_longest\nfrom math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"\n    Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    quantized_floats = [floor(f * numtilings) for f in floats]\n    coords = []\n    for tiling in range(numtilings):\n        coords.append([tiling])\n        b = tiling\n        for q in quantized_floats:\n            if wrapwidths[tiling] is not None and wrapwidths[tiling] > 0:\n                c = (q + b % numtilings) // numtilings\n                coords[-1].append(c % wrapwidths[tiling])\n            else:\n                coords[-1].append(q)\n        if ints is not None:\n            coords.extend(ints)\n    index = 0\n    for coord in coords:\n        index = (index * 31 + coord) % ihtORsize\n    return [index] * numtilings"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    receptive_field_size = 1\n    for dim in shape[1:]:\n        receptive_field_size *= dim\n    fan_in = shape[0] * receptive_field_size\n    fan_out = shape[1] * receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, shape)"}
{"task_id": 263, "completion_id": 0, "solution": "import numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    activations_input = x.copy()\n    if len(weights) == 1:\n        return round(activations_input[0], 4)\n    for layer_index in range(len(weights)):\n        activation = np.append(activations_input, [1.0], axis=1)\n        z = weights[layer_index] @ activation\n        activation = np.where(z > 0, z, 0)\n        activations_input = activation\n    return round(activations_input, 4)"}
{"task_id": 265, "completion_id": 0, "solution": "def king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        return round(-0.25 * x + 82.50372665317208, 4)\n    elif 250 < x <= 600:\n        return round(20.00372665317208, 4)\n    elif 600 < x <= 700:\n        return round(-0.2 * x + 140.00372665317207, 4)\n    else:\n        return round(0.003726653172066108, 4)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"\n    Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        G[V.index(u)].append(v)\n        G[V.index(v)].append(u)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump for a binary classification task.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    best_feature_index = -1\n    best_threshold = -np.inf\n    best_polarity = -1\n    best_weighted_error = 0.0\n    for feature_idx in range(n_features):\n        for val in np.unique(X[:, feature_idx]):\n            p = 1.0\n            if val < X[:, feature_idx]:\n                p = 1.0\n            else:\n                p = -1.0\n            error = sum((sample_weights * (p != y[i]) for i in range(n_samples)))\n            if error < best_weighted_error or (error == best_weighted_error and feature_idx < best_feature_index):\n                best_weighted_error = error\n                best_threshold = val\n                best_polarity = p\n                best_feature_index = feature_idx\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_weighted_error, 4)}"}
{"task_id": 268, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations, permutations\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"\n    Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool): Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    A = [[0 for _ in range(n_vertices)] for _ in range(n_vertices)]\n    for i in range(n_vertices):\n        for j in range(i + 1, n_vertices):\n            if np.random.rand() <= edge_prob:\n                if not directed:\n                    A[i][j] = 1\n                    A[j][i] = 1\n    return A"}
{"task_id": 269, "completion_id": 0, "solution": "def count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    num_weights = state_dimensions * action_dimensions\n    num_biases = action_dimensions\n    trainable_weights = num_weights\n    trainable_biases = num_biases\n    num_weights = action_dimensions * action_dimensions\n    num_biases = action_dimensions\n    trainable_weights += num_weights\n    trainable_biases += num_biases\n    return trainable_weights + trainable_biases"}
{"task_id": 270, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    rewards = np.dot(context, thetas)\n    max_reward = rewards.max()\n    best_arm_index = rewards.argmax()\n    rounded_reward = round(max_reward, 4)\n    return (rounded_reward, best_arm_index)"}
{"task_id": 271, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"\n    Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    G_L = sum(left_pred)\n    H_L = len(left_pred)\n    G_R = sum(right_pred)\n    H_R = len(right_pred)\n    G_P = sum(left_pred + right_pred)\n    H_P = len(left_pred + right_pred)\n    gain = 0.5 * (G_L ** 2 / H_L + G_R ** 2 / H_R - G_P ** 2 / H_P)\n    return round(gain, 4)"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(feature, np.ndarray):\n        feature = np.array(feature)\n    if not isinstance(target, np.ndarray):\n        target = np.array(target)\n    n = len(feature)\n    n_classes = len(np.unique(target))\n    if n == 0:\n        return (None, 0.0)\n    if n == 1:\n        return (feature[0], 0.0)\n\n    def entropy(class_label_counts):\n        if not class_label_counts:\n            return 0.0\n        counts = Counter(class_label_counts)\n        entropy = -sum((count * math.log(count, 2) for count in counts.values()))\n        return entropy\n    best_threshold = None\n    best_gain = 0.0\n    for t in get_all_possible_splits(feature, target):\n        left = [x for x in feature if x < t]\n        right = [x for x in feature if x >= t]\n        parent_entropy = entropy(Counter(target))\n        left_entropy = entropy(Counter(target[left]))\n        right_entropy = entropy(Counter(target[right]))\n        left_count = len(left)\n        right_count = len(right)\n        left_gain = parent_entropy - left_count / n * left_entropy\n        right_gain = parent_entropy - right_count / n * right_entropy\n        current_gain = left_gain + right_gain\n        if current_gain > best_gain or (current_gain == best_gain and t < best_threshold):\n            best_threshold = t\n            best_gain = current_gain\n    threshold_rounded = round(best_threshold, 4)\n    info_rounded = round(best_gain, 4)\n    return (threshold_rounded, info_rounded)"}
{"task_id": 274, "completion_id": 0, "solution": "import numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    if isinstance(values, np.ndarray):\n        return np.clip(values, -5.0, 5.0)\n    else:\n        return [x for x in values]"}
{"task_id": 276, "completion_id": 0, "solution": "import math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    tokens = []\n    for sentence in corpus:\n        tokenized = [word.lower().strip(string.punctuation).replace('<', '').replace('>', '') for word in sentence.split()]\n        padded_tokens = ['<bol>'] + tokenized + ['<eol>']\n        tokens.extend(padded_tokens)\n    vocab_size = len(tokens) + (len(tokens) - 1)\n    if unk:\n        vocab_size += 1\n    count = Counter()\n    for i in range(len(tokens)):\n        h = i\n        w = i + N - 1 if i + N <= len(tokens) else len(tokens) - 1\n        if unk:\n            h_token = '<unk>'\n            w_token = '<unk>'\n        else:\n            h_token = tokens[h]\n            w_token = tokens[w]\n        count[h_token, w_token] += 1\n    total_tokens = len(count)\n    log_probabilities = []\n    for ((h, w), prob) in count.items():\n        if N == 1:\n            denom = total_tokens + k * len(count)\n            log_prob = math.log10(prob / denom)\n        elif unk:\n            h_count = count[h, w]\n            w_count = count.get((h, w), 0)\n            denom = total_tokens + k * len(count)\n            log_prob = math.log10((h_count + k) / denom)\n        else:\n            h_count = count[h, w]\n            w_count = count.get((h, w), 0)\n            denom = total_tokens + k * len(count)\n            log_prob = math.log10((h_count + k) / denom)\n        log_probabilities.append(log_prob)\n    total_log = sum(log_probabilities)\n    return round(total_log, 4)"}
{"task_id": 277, "completion_id": 0, "solution": "def is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env['action_space'], tuple) or isinstance(env['action_space'], dict)\n    tuple_obs = isinstance(env['observation_space'], tuple) or isinstance(env['observation_space'], dict)\n    return (tuple_action, tuple_obs)"}
{"task_id": 278, "completion_id": 0, "solution": "def evaluate_decision_tree(tree: dict, sample: list[float]) -> float:\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    current_node = tree\n    while True:\n        if current_node is None:\n            break\n        feature_i = current_node['feature_i']\n        threshold = current_node['threshold']\n        if sample[feature_i] <= threshold:\n            current_node = current_node['true_branch']\n        else:\n            current_node = current_node['false_branch']\n    return current_node['value']"}
{"task_id": 279, "completion_id": 0, "solution": "import numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    N = len(y_true)\n    mse_value = np.mean((y_pred - y_true) ** 2)\n    gradient = []\n    for i in range(N):\n        gradient.append(2 / N * (y_pred[i] - y_true[i]))\n    accuracy = np.sum((y_pred >= 0.5) + (y_pred < 0.5)) / N\n    mse_value_rounded = round(mse_value, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    accuracy_rounded = round(accuracy, 4)\n    return (mse_value_rounded, gradient_rounded, accuracy_rounded)"}
{"task_id": 280, "completion_id": 0, "solution": "import numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"\n    Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if return_grad:\n        gradient = alpha * w\n        return gradient\n    else:\n        regularization_value = 0.5 * alpha * np.sum(w ** 2)\n        regularization_value = round(regularization_value, 4)\n        return regularization_value"}
{"task_id": 281, "completion_id": 0, "solution": "import numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"\n    Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n\n    def __call__(self, w):\n        return alpha * np.abs(w)\n\n    def grad(self, w):\n        return alpha * np.sign(w)\n    return lambda w: (alpha * np.abs(w), np.array([np.sign(w[i]) for i in range(len(w))], dtype=np.float64))"}
{"task_id": 282, "completion_id": 0, "solution": "import math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    if not data:\n        return (0.0, 0.0, 0.0)\n    n = len(data)\n    mean = 0.0\n    sum_sq_diffs = 0.0\n    for x in data:\n        n += 1\n        delta = x - mean\n        mean += delta / n\n        sum_sq_diffs += delta * (x - mean)\n        mean_rounded = round(mean, 4)\n        variance_rounded = round(sum_sq_diffs / (n - 1), 4)\n        std_rounded = round(math.sqrt(variance_rounded), 4)\n    return (mean_rounded, variance_rounded, std_rounded)"}
{"task_id": 283, "completion_id": 0, "solution": "import numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"\n    Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    n_samples = len(actual)\n    g = np.zeros(n_samples)\n    h = np.zeros(n_samples)\n    for i in range(n_samples):\n        y_i = actual[i]\n        p_i = predicted[i]\n        g[i] = p_i - y_i\n        h[i] = p_i * (1 - p_i)\n    leaf_value = np.sum(g) / (np.sum(h) + regularization)\n    gain = 0.5 * np.sum(g) ** 2 / (np.sum(h) + regularization)\n    leaf_value_rounded = round(leaf_value, 4)\n    gain_rounded = round(gain, 4)\n    return [leaf_value_rounded, gain_rounded]"}
{"task_id": 284, "completion_id": 0, "solution": "def iht_get_index(obj: object, size: int, table: dict, overfull_count: list[int], readonly: bool=False) -> int | None:\n    if obj in table:\n        return table[obj]\n    if not readonly and len(table) < size:\n        index = table.size()\n        table[index] = obj\n        overfull_count[0] += 1\n    elif readonly:\n        return None\n    elif len(table) >= size:\n        return hash(obj) % size\n    else:\n        return hash(obj) % size"}
{"task_id": 285, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    if x.ndim != y.ndim:\n        return -1\n    if x.ndim == 1:\n        x = x.reshape((len(x), 1))\n    if y.ndim == 1:\n        y = y.reshape((len(y), 1))\n    if x.shape[1] != y.shape[1]:\n        return -1\n    result = x @ y.T\n    return result.tolist()"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    try:\n        func = globals()[name]\n        if isinstance(func, Callable):\n            return func\n        else:\n            raise ValueError('Invalid initialization function.')\n    except KeyError:\n        raise ValueError('Invalid initialization function.') from None"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n\n    Args:\n        X: Input 4-D NumPy array with shape (N, C, H, W)\n        pool_shape: Pooling window size (p_h, p_w)\n        stride: Stride for sliding the window\n        accum_grad: Gradient of loss with respect to every pooled value\n\n    Returns:\n        A tuple containing the computed pooled output and gradient input.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    new_H = (H - pool_shape[0] + 2 * stride[0]) // stride[0]\n    new_W = (W - pool_shape[1] + 2 * stride[1]) // stride[1]\n    pooled_output = np.zeros((N, C, new_H, new_W))\n    for batch in range(N):\n        for ch in range(C):\n            for h in range(new_H):\n                for w in range(new_W):\n                    mean = np.mean(X[batch, ch, h * pool_shape[0] + 1:h * pool_shape[0] + pool_shape[0] + 1, w * pool_shape[1] + 1:w * pool_shape[1] + pool_shape[1] + 1])\n                    pooled_output[batch, ch, h, w] = mean\n    grad_input = np.zeros_like(X)\n    for batch in range(N):\n        for ch in range(C):\n            for h in range(new_H):\n                for w in range(new_W):\n                    num_elements = (h * pool_shape[0] + w * pool_shape[1] + 1) // (stride[0] + stride[1])\n                    delta = accum_grad[batch, ch, h, w] / num_elements\n                    grad_input[batch, ch, h, w] += delta\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 288, "completion_id": 0, "solution": "import numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to the nearest 4th decimal place.\n    \"\"\"\n    if not isinstance(actual, (int, float)) and (not isinstance(predicted, (int, float))):\n        raise ValueError('Both inputs must be numbers')\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    if len(actual_array) == 0 or len(predicted_array) == 0:\n        return -1\n    if len(actual_array) != len(predicted_array):\n        return -1\n    squared_diffs = np.square(actual_array - predicted_array)\n    mean_squared_error = np.mean(squared_diffs)\n    rounded_value = round(mean_squared_error, 4)\n    return rounded_value"}
{"task_id": 289, "completion_id": 0, "solution": "def format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    result = []\n    for (field, value) in entries:\n        result.append(f'{field}: {value}')\n    return '\\n'.join(result)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\ndef compare_trees(tree_a, tree_b):\n    if tree_a is None and tree_b is None:\n        return True\n    if tree_a is None or tree_b is None:\n        return False\n    if tree_a.left is not tree_b.left or tree_a.right is not tree_b.right:\n        return False\n    if tree_a.feature != tree_b.feature:\n        return False\n    threshold_a = tree_a.threshold\n    threshold_b = tree_b.threshold\n    if abs(threshold_a - threshold_b) > 1e-08:\n        return False\n    leaves_a = [leaf.value for leaf in tree_a.left]\n    leaves_b = [leaf.value for leaf in tree_b.left]\n    if np.allclose(leaves_a, leaves_b, atol=1e-08):\n        return True\n    return False"}
{"task_id": 291, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    if not 1 <= n_components <= len(X[0]) or n_components < 1:\n        return [-1]\n    cov_matrix = np.cov(X, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    eigenvalues_sorted = np.sort(eigenvalues, reverse=True)\n    eigenvectors_sorted = eigenvectors\n    X_projected = X @ eigenvectors_sorted[:n_components]\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n    return X_projected_rounded"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"\n    Perform a single-point column crossover on two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent matrices do not have the same shape, return -1.\n    \"\"\"\n    if len(parent1) != len(parent2):\n        return -1\n    if cutoff < 0 or cutoff >= len(parent1[0]):\n        return -1\n    child1 = []\n    child2 = []\n    for col in range(len(parent1[0])):\n        if col < cutoff:\n            child1.append(parent1[col])\n        else:\n            child2.append(parent2[col])\n    child1 = np.array(child1).tolist()\n    child2 = np.array(child2).tolist()\n    return (child1, child2)"}
{"task_id": 293, "completion_id": 0, "solution": "def map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    cleaned_name = agent_name.strip().lower()\n    mappings = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    if cleaned_name in mappings:\n        return mappings[cleaned_name]\n    else:\n        return (-1, None)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"\n    Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters:\n    G : dict\n        A graph represented as a dictionary with the keys:\n          - 'is_directed' (bool)\n          - '_V2I'        (dict mapping vertex label -> index)\n          - '_G'          (list of adjacency lists, each edge is a tuple (source_label, target_label, weight))\n    \n    Returns:\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples. For undirected graphs every edge appears once in each direction and the neighbour lists are sorted alphabetically.\n    \"\"\"\n    if not G:\n        return {}\n    vertex_to_index = {key: idx for (idx, key) in G['_V2I'].items()}\n    adj = {}\n    for (i, edge) in enumerate(G['_G']):\n        (source_label, target_label, weight) = edge\n        if G['is_directed']:\n            adj[vertex_to_index[source_label]].append((target_label, weight))\n        else:\n            adj[target_label].append((source_label, weight))\n            adj[source_label].append((target_label, weight))\n    for label in sorted(adj.keys()):\n        adj[label] = sorted(adj[label])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x_float = np.array(x)\n    return np.all(x_float == [0.0, 1.0])"}
{"task_id": 297, "completion_id": 0, "solution": "import numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    (a, b) = feature_range\n    if a >= b:\n        return [-1]\n    data = [row for row in data]\n    if len(set([len(row) for row in data])) != 1:\n        raise ValueError('All columns must be of the same length')\n    scaled_data = []\n    for col_index in range(len(data[0])):\n        column = data[col_index]\n        if np.allclose(column, column.min()):\n            scaled_column = [a] * len(column)\n        else:\n            scaled_column = [(x - a) / (b - a) * (b - a) + a for x in column]\n        scaled_data.append(scaled_column)\n    scaled_data = [np.round(x, 4).tolist() for x in scaled_data]\n    return scaled_data"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"\n    Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    padded_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = [f'<bol>'] + tokens + ['<eol>']\n        padded_corpus.append(' '.join(padded_tokens))\n    token_counts = Counter()\n    for i in range(len(padded_corpus)):\n        if N == 1:\n            count = token_counts[padded_corpus[i]]\n            token_counts[padded_corpus[i]] = count\n        else:\n            prefix = padded_corpus[i - N + 1] if i >= N - 1 else ''\n            suffix = padded_corpus[i]\n            current_count = token_counts.get(prefix + suffix, 0)\n            token_counts[prefix + suffix] += current_count\n    log_probabilities = []\n    for i in range(len(padded_corpus)):\n        if N == 1:\n            if padded_corpus[i] not in token_counts:\n                log_prob = float('-inf')\n            else:\n                prob = token_counts[padded_corpus[i]] / len(token_counts)\n                log_prob = math.log(prob)\n        elif i < N - 1:\n            if padded_corpus[i - N + 1] not in token_counts:\n                log_prob = float('-inf')\n            else:\n                prefix = padded_corpus[i - N + 1]\n                suffix = padded_corpus[i]\n                prob = token_counts[prefix + suffix] / token_counts[prefix]\n                log_prob = math.log(prob)\n        elif padded_corpus[i] not in token_counts:\n            log_prob = float('-inf')\n        else:\n            prob = token_counts[padded_corpus[i]] / len(token_counts)\n            log_prob = math.log(prob)\n        log_probabilities.append(log_prob)\n    total_log_prob = sum(log_probabilities)\n    if total_log_prob < 0:\n        return float('-inf')\n    else:\n        return round(total_log_prob, 4)"}
{"task_id": 299, "completion_id": 0, "solution": "import numpy as np\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"\n    K-Means clustering algorithm from scratch.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    centroids = X[:k]\n    centroids = centroids.reshape(-1, 1)\n    result = [i for i in range(len(X))]\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(X - centroids, axis=1)\n        assigned_indices = np.argmin(distances, axis=0)\n        new_centroids = centroids[np.where(assigned_indices == i)]\n        (centroids, result) = (new_centroids, assigned_indices)\n    return result"}
{"task_id": 300, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Union\ndef top_k_elements(sequence: List[Number], k: int, order: str='largest') -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    if not sequence or k <= 0:\n        return []\n    heap = []\n    for num in sequence:\n        heapq.heappush(heap, num)\n    if k > len(heap):\n        return sorted(heap, reverse=True) if order == 'largest' else sorted(heap)\n    result = []\n    i = 0\n    while i < k:\n        result.append(heapq.heappop(heap))\n        i += 1\n    if order == 'largest':\n        return sorted(result, reverse=True)\n    else:\n        return sorted(result)"}
{"task_id": 301, "completion_id": 0, "solution": "def inorder_keys(pairs):\n    if not pairs:\n        return []\n    root = Node(pairs[0][0], pairs[0][1])\n    for i in range(1, len(pairs)):\n        (key, value) = pairs[i]\n        current_node = root\n        while current_node and (value < current_node.val or value == current_node.val):\n            if value < current_node.val:\n                current_node = current_node.left\n            else:\n                current_node = current_node.right\n        if current_node is None:\n            root = Node(key, value)\n    result = []\n    current = root\n    while current:\n        result.append(current.key)\n        current = current.left or current.right\n    return result"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    d = X.shape[1]\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i == j:\n                W[i, j] = 1.0\n            else:\n                norm_sq = np.sum((X[i] - X[j]) ** 2)\n                W[i, j] = 1.0 / (1 + norm_sq ** 0.5)\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    E = np.linalg.eig(L)[1][:, :k]\n    centroids = E[:k].copy()\n    n_clusters = k\n    iterations = 0\n    best_centroids = centroids.copy()\n    while True:\n        new_centroids = []\n        for i in range(n_samples):\n            distance = np.sqrt(np.sum((centroids[i] - X[i]) ** 2))\n            min_distance = np.min(distance)\n            new_centroids.append(i)\n        centroids = new_centroids\n        empty_clusters = [i for i in range(n_samples) if centroids[i] < 0]\n        if len(empty_clusters) == 0:\n            break\n        if np.array_equal(centroids, best_centroids):\n            break\n        iterations += 1\n        if iterations > 100:\n            break\n    labels = np.cluster_centers_to_labels(centroids, X)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": ""}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP estimate of *b* does not depend on \u03c3\u00b2.\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to 4 decimal places.\n    \"\"\"\n    if fit_intercept and X.shape[1] == 1:\n        X = np.insert(X, 0, [mu], axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, list):\n        V = np.diag(V)\n    elif isinstance(V, tuple):\n        V = np.diag(V)\n    else:\n        V = np.array([V])\n    posterior_cov = np.linalg.inv(V + X @ X.T)\n    mu_b = posterior_cov @ (V @ mu + X @ y)\n    result = np.round(mu_b, 4)\n    return result.tolist()"}
{"task_id": 305, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    x_array = np.array(x)\n    result = np.where(x_array >= 0, 1 / (1 + np.exp(-x_array)), np.exp(x_array) / (1 + np.exp(x_array)))\n    return round(result, 4).tolist()"}
{"task_id": 307, "completion_id": 0, "solution": "import numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    np.random.seed(42)\n    idxs = np.random.randint(len(X), size=len(X))\n    X_sample = X[idxs]\n    y_sample = y[idxs]\n    return (X_sample, y_sample)"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"\n    Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns. Each row is a triangular filter defined on the Mel scale.\n    \n    Args:\n        N: Discrete Fourier transform length\n        n_filters: Number of filters to create (default is 20)\n        fs: Sampling frequency (default is 44,000 Hz)\n        min_freq: Lower limit for Mel frequencies (default is 0)\n        max_freq: Upper limit for Mel frequencies (optional; default is Nyquist frequency)\n        normalize: Normalize each filter's weight by its area in Mel space\n\n    Returns:\n        A list of lists of floats: each sublist corresponds to a triangular filter on the Mel scale.\n    \"\"\"\n\n    def f_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_f(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    if max_freq is None:\n        max_freq = fs // 2\n    else:\n        max_freq = max_freq\n    freqs = np.linspace(min_freq, max_freq, num=n_filters + 2)\n    mel_values = f_to_mel(freqs)\n    f_vals = mel_to_f(mel_values)\n    filterbank = np.zeros((n_filters, N // 2 + 1), dtype=np.float64)\n    for k in range(N // 2 + 1):\n        for i in range(n_filters):\n            center_freq = k * fs / N\n            f_i = f_vals[i]\n            f_i_plus_2 = f_vals[i + 1]\n            slope_left = (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            slope_right = (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            w_i = 2.0 * (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            w_i /= f_i_plus_2 - f_i\n            if normalize:\n                w_i *= (f_i_plus_2 - f_i) / (f_i_plus_2 - f_i)\n            filterbank[i][k] = np.clip(w_i, 0, 1)\n    filtered_result = np.round(filterbank, 4)\n    return filtered_result.tolist()"}
{"task_id": 309, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"\n    Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    predictions = []\n    for x in X:\n        linear_term = np.dot(w, x)\n        squared_terms = 0.5 * (np.sum((x @ v[:, :-1]) ** 2 - (x @ v[:, :] ** 2).flatten()) / len(v))\n        prediction = w0 + linear_term + squared_terms\n        predictions.append(round(prediction, 4))\n    return predictions"}
{"task_id": 310, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"\n    Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns -1 if the two inputs do not have the same non-zero length.\n    \n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or -1 on invalid input.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    n = len(actual)\n    sum_squared_diff = 0.0\n    for i in range(n):\n        y_i = actual[i]\n        hat_y_i = predicted[i]\n        squared_diff = (y_i - hat_y_i) ** 2\n        sum_squared_diff += squared_diff\n    rmse = np.sqrt(sum_squared_diff / n)\n    rounded_rmse = round(rmse, 4)\n    return rounded_rmse"}
{"task_id": 311, "completion_id": 0, "solution": "import numpy as np\ndef clip_non_negative(arr):\n    \"\"\"\n    Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    if isinstance(arr, np.ndarray):\n        return np.clip(arr.tolist(), 0, float('inf'))\n    else:\n        return [x for x in arr if x >= 0]"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    N = window_len - 1\n    if not symmetric:\n        window = [a0] * window_len\n        for i in range(1, window_len):\n            window[i] = a0 - a1 * np.cos(2 * np.pi * i / N)\n    else:\n        window = [a0] * window_len\n        for i in range(1, window_len):\n            window[i] = a0 - a1 * np.cos(2 * np.pi * i / N)\n        window[window_len - 1] = window[0]\n    rounded_window = [round(x, 4) for x in window]\n    return rounded_window"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if t < 0 or t >= len(gamma[d]) or d < 0 or (d >= len(gamma)):\n        return 0.0\n    g = gamma[d][t]\n    sum_g = sum(gamma[d])\n\n    def digamma(x):\n        if x <= 1e-06:\n            x = max(6, x)\n            return digamma(x)\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    result = digamma(g) - digamma(sum_g)\n    result_rounded = round(result, 4)\n    return result_rounded"}
{"task_id": 315, "completion_id": 0, "solution": "import numpy as np\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    normalized_name = name.lower().replace('_', '')\n    if normalized_name == 'mae':\n\n        def maeanalytic(y_true, y_pred):\n            return round(np.abs(y_true - y_pred).mean(), 4)\n        return maeanalytic\n    elif normalized_name == 'mse':\n\n        def mean_squared_error(y_true, y_pred):\n            return round(np.sum((y_true - y_pred) ** 2) / len(y_true), 4)\n        return mean_squared_error\n    elif normalized_name == 'cross_entropy':\n\n        def log_loss(y_true, y_pred):\n            y_pred = np.clip(y_pred, 1e-15, 1)\n            log_p = np.log(y_pred)\n            log_1_minus_p = np.log(1 - y_pred)\n            return round(-np.mean(y_pred * log_p + (1 - y_pred) * log_1_minus_p), 4)\n        return log_loss\n    else:\n        raise ValueError('Invalid loss function.')"}
{"task_id": 316, "completion_id": 0, "solution": "import numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    if not isinstance(x, (list, tuple)) and (not isinstance(x, np.ndarray)):\n        raise ValueError('Input must be a list, tuple, or NumPy array')\n    if not isinstance(y, (list, tuple)) and (not isinstance(y, np.ndarray)):\n        raise ValueError('Input must be a list, tuple, or NumPy array')\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1\n    squared_diffs = (x_array - y_array).dot(x_array)\n    distance = np.sqrt(squared_diffs)\n    return round(distance, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header_line = '------------------------- DEBUG ------------------\\n'\n    prev_index = max(ix - 1, 0)\n    prev_label = params[prev_index][1]\n    prev_prediction = params[prev_index][0]\n    curr_index = ix\n    curr_label = params[curr_index][1]\n    curr_gold = golds.get(curr_label)\n    curr_prediction = params[curr_index][0]\n    debug_report = f'------------------------- DEBUG ------------------\\nMine ({prev}) [{prev_label}]:\\n{prev_prediction}\\nTheirs ({prev}) [{prev_label}]:\\n{curr_gold}{warn_str} <warn_str>\\nMine ({curr_label}):\\n{curr_prediction}\\nTheirs ({curr_label}):\\n{curr_gold}{warn_str} <warn_str>\\n----------------------- END DEBUG ------------------\\n'\n    return debug_report"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    alpha = 1 / n_estimators\n    predictions = []\n\n    def stump(x, feature, threshold, polarity):\n        return polarity * np.sign(x[feature] - threshold)\n    for _ in range(n_estimators):\n        current_prediction = []\n        for i in range(len(y_train)):\n            if y_train[i] == -1:\n                current_prediction.append(-1)\n            else:\n                current_prediction.append(1)\n        errors = [1 - stump(x, y_train[i], 0, 1) for x in X_train]\n        error_sum = sum(errors)\n        epsilon = error_sum / len(X_train)\n        alpha_m = (1 - math.log(epsilon)) / math.log(epsilon)\n        alpha_m = max(alpha_m, 0)\n        predictions.append(stump(X_test, y_train, 0, 1))\n        predictions.append(alpha_m * stump(X_test, y_train, 0, 1))\n    return predictions"}
{"task_id": 319, "completion_id": 0, "solution": "import numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"\n    Implements Stochastic Gradient Descent for linear regression.\n\n    Args:\n        X: Feature matrix (m\u00d7n), can be a NumPy array or Python list of lists.\n        y: Target vector (m,), can be a NumPy array or Python list.\n        learning_rate: Learning rate for gradient descent.\n        epochs: Number of epochs to perform SGD.\n\n    Returns:\n        A Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, ..., \u03b8_n], rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X = np.insert(X, 0, 1, axis=1)\n    theta = np.zeros((X.shape[1] + 1,))\n    for _ in range(epochs):\n        for (x, y_) in zip(X[:, 1:], y):\n            prediction = theta @ x\n            error = prediction - y_\n            theta -= learning_rate * error * x\n    return round(theta, 4)"}
{"task_id": 321, "completion_id": 0, "solution": "import numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    np.random.seed(42)\n    population = [f\"{chr(ord('a') + i)}\" for i in range(population_size)] if len(target) == 0 else [target]\n    best_individual = None\n    for _ in range(iterations):\n        new_population = []\n        fitness_scores = []\n        for individual in population:\n            p_i = sum((1 for c in individual if c in string.ascii_lowercase))\n            t_i = individual.index(target[0])\n            total = p_i + 10 ** (-6)\n            fitness = 1 / (total - 1e-06)\n            fitness_scores.append(fitness)\n        selected_parents = []\n        weights = [fitness_score / max(fitness_scores) for fitness_score in fitness_scores]\n        parent_indices = np.random.permutation(len(population))\n        selected_parents = [population[i] for i in parent_indices[:int(population_size * mutation_rate)]]\n        children = []\n        for i in range(len(parent_indices)):\n            parent = selected_parents[i]\n            child = parent[:parent_indices[i]] + parent[parent_indices[i]:]\n            children.append(child)\n        mutated_children = []\n        for i in range(len(children)):\n            child = children[i]\n            for j in range(len(child)):\n                if np.random.rand() < mutation_rate:\n                    child[j] = chr(ord('a') + ord(child[j]) - ord('a'))\n            mutated_children.append(child)\n        population = mutated_children\n        if best_individual is None or fitness_scores[0] > best_individual:\n            best_individual = individual\n    return best_individual"}
{"task_id": 322, "completion_id": 0, "solution": "import numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    predicted = np.clip(predicted, EPS, 1 - EPS)\n    loss = -np.mean((np.log(p) * (1 - p) + np.log(1 - p) * p for p in predicted if p > EPS and p < 1 - EPS))\n    return round(loss, 4)"}
{"task_id": 324, "completion_id": 0, "solution": "import numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"\n    Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n    lists `x` and `y` differ in length the function must return an empty list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n    (rows, cols, channels) = X.shape\n    x_clipped = np.clip(x, 0, rows - 1)\n    y_clipped = np.clip(y, 0, cols - 1)\n    interpolated = np.zeros((len(x), channels))\n    for i in range(len(x)):\n        row_idx = x_clipped[i]\n        col_idx = y_clipped[i]\n        if col_idx >= 0 and col_idx < cols and (row_idx >= 0) and (row_idx < rows):\n            interpolated[i] = X[row_idx, col_idx]\n        else:\n            pass\n    interpolated = np.round(interpolated, 4).tolist()\n    return interpolated"}
{"task_id": 326, "completion_id": 0, "solution": "import numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"\n    Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    if not X:\n        return []\n    n_features = len(X[0])\n    m = len(support_vectors)\n    result = []\n    for x in X:\n        total = 0\n        for i in range(m):\n            y = support_vector_labels[i]\n            alpha = lagr_multipliers[i]\n            xi = x[i]\n            vi = support_vectors[i][i]\n            if kernel == 'linear':\n                val = alpha * y * (xi @ vi)\n            elif kernel == 'polynomial':\n                gamma_val = gamma if gamma is not None else 1 / n_features\n                coefficient = coef\n                power = power\n                term = alpha * y * (gamma_val * (xi @ vi) + coefficient) ** power\n                total += term\n            elif kernel == 'rbf':\n                gamma_val = gamma if gamma is not None else 1 / n_features\n                term = alpha * y * np.exp(-(gamma_val * np.linalg.norm(xi - vi) ** 2))\n                total += term\n            total += intercept\n        if total > 0:\n            result.append(1)\n        elif total < 0:\n            result.append(-1)\n        else:\n            result.append(1)\n    return result"}
{"task_id": 328, "completion_id": 0, "solution": "from typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word[0].isupper():\n            return [word]\n    return []"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"\n    Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    num_bins = N\n    if num_bins % 2 == 1:\n        num_bins += 1\n    delta_f = fs / num_bins\n    freq_list = []\n    for i in range(num_bins):\n        if positive_only and i < num_bins // 2:\n            freq_list.append(i * delta_f)\n        else:\n            freq_list.append((i + 1) * delta_f)\n    freq_list = [round(freq, 4) for freq in freq_list]\n    return list(map(float, freq_list))"}
{"task_id": 330, "completion_id": 0, "solution": "def update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    new_parameters = {}\n    new_hyperparameters = {}\n    for (key, value) in summary_dict.items():\n        if key == 'parameters':\n            new_parameters.update(value)\n        elif key == 'hyperparameters':\n            new_hyperparameters.update(value)\n        else:\n            pass\n    for (key, value) in new_parameters.items():\n        if key in parameters:\n            if parameters[key] != value:\n                parameters[key] = value\n        else:\n            parameters[key] = value\n    for (key, value) in new_hyperparameters.items():\n        if key in hyperparameters:\n            if hyperparameters[key] != value:\n                hyperparameters[key] = value\n        else:\n            hyperparameters[key] = value\n    return (parameters, hyperparameters)"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    oob_mask = np.array(oob_mask)\n    num_samples_with_OOB = np.sum(np.any(predictions, axis=1) * oob_mask, axis=0)\n    if num_samples_with_OOB == 0:\n        return -1.0\n    avg_predictions = np.mean(predictions[oob_mask], axis=0)\n    oob_mse_value = np.mean((avg_predictions - y_true) ** 2)\n    rounded_value = round(oob_mse_value, 4)\n    return rounded_value"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    items = set()\n    for t in transactions:\n        items.update(t)\n    item_counts = Counter(items)\n    filtered_items = [item for (item, count) in item_counts.items() if count >= min_support]\n    sorted_items = sorted(filtered_items, key=lambda x: (-item_counts[x], x))\n    root = {'support': 0, 'children': {}}\n    for item in sorted_items:\n        current_item_count = 0\n        temp_transactions = []\n        for t in transactions:\n            temp_transactions.extend(set(t))\n        path = []\n        for t in temp_transactions:\n            if t == item:\n                path.append(item)\n                current_item_count += 1\n        for node in path:\n            node['support'] += current_item_count\n        if len(path) > 1:\n            last_node = path[-1]\n            new_child = {'support': 0, 'children': {}}\n            new_child['children'][node] = current_item_count\n            for child in path[1:]:\n                new_child['children'][child] = current_item_count\n            last_node['children'][item] = new_child\n    return root"}
{"task_id": 333, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"\n    Train a logistic regression classifier on the provided dataset and return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    X_std = np.std(X, axis=0)\n    X_normalized = (X - np.mean(X, axis=0)) / X_std\n    X_bias = np.ones((X.shape[0], X.shape[1]))\n    X_combined = np.column_stack((X_std, X_bias))\n    theta = np.zeros(X_combined.shape[1])\n    for _ in range(num_iter):\n        h_theta = sigmoid(np.dot(theta, X_combined))\n        grad = np.dot(theta.T, h_theta - y)\n        theta -= alpha * grad / X_combined.shape[0]\n    predictions = sigmoid(np.dot(theta, X_combined))\n    probabilities = np.where(probabilities > 0.5, 1, 0)\n    return probabilities.tolist()"}
{"task_id": 334, "completion_id": 0, "solution": "import math\ndef noam_learning_rate(step: int, model_dim: int=512, scale_factor: float=1.0, warmup_steps: int=4000) -> float:\n    \"\"\"\n    Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step <= 1:\n        return 0.0\n    lr = scale_factor * model_dim ** (-0.5) * min(step ** (-0.5), step ** (-1.5))\n    return round(lr, 9)"}
{"task_id": 335, "completion_id": 0, "solution": "import numpy as np\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    if name.lower() == 'zeros':\n        return lambda shape, scale: np.zeros(shape, dtype=np.float32)\n    elif name.lower() == 'ones':\n        return lambda shape, scale: np.ones(shape, dtype=np.float32)\n    elif name.lower() == 'normal':\n\n        def normal_initializer(shape, scale):\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n        return normal_initializer\n    elif name.lower() == 'glorot_uniform':\n\n        def glorot_uniform_initializer(shape, scale):\n            fan_in = shape[0]\n            fan_out = shape[1]\n            limit = scale * np.sqrt(6 / (fan_in + fan_out))\n            return np.random.uniform(-limit, limit, shape)\n        return glorot_uniform_initializer\n    else:\n        raise ValueError(f'Unsupported initialiser name: {name}')"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n    incompatible shapes (different number of columns).\n    \"\"\"\n    if not isinstance(X, list) and (not isinstance(Y, list)):\n        return -1\n    if not all((isinstance(x, list) for x in [X, Y])):\n        return -1\n    if not (isinstance(X, list) and isinstance(Y, list)):\n        return -1\n    (N, C) = (len(X), len(X[0]))\n    (M, D) = (len(Y), len(Y[0]) if Y else C)\n    if N == 0 or M == 0:\n        return []\n    if C != D:\n        return -1\n    X_np = np.array(X)\n    Y_np = np.array(Y) if Y else X_np\n    K = np.dot(X_np, Y_np.T) + c0\n    K_rounded = round(K, 4)\n    result = []\n    for row in K_rounded:\n        result.append(list(map(lambda x: round(x, 4), row)))\n    return result"}
{"task_id": 337, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"\n    Nearest-Neighbor interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    rounded_x = np.around(x)\n    rounded_y = np.around(y)\n    (in_cols, in_rows) = (X.shape[1], X.shape[0])\n    clipped_x = np.clip(rounded_x, 0, in_cols - 1)\n    clipped_y = np.clip(rounded_y, 0, in_rows - 1)\n    result = np.take(X, [clipped_x, clipped_y], axis=2).tolist()\n    return result"}
{"task_id": 338, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"Implement closed-form solution for Ridge Regression.\n    \n    Args:\n        X: Feature matrix (n x d)\n        y: Target vector (n)\n        reg_factor: Regularization factor > 0\n    \n    Returns:\n        w: Weight vector (d + 1 coefficients), rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[1] == 0:\n        return [0.0] * (reg_factor + 1)\n    X_with_bias = np.ones((X.shape[0], X.shape[1] + 1)) * X\n    X_with_bias = X_with_bias[:X.shape[0]]\n    inv_matrix = np.linalg.inv(X_with_bias.T @ X_with_bias + reg_factor * np.eye(X_with_bias.shape[1] + 1))\n    w = inv_matrix @ X_with_bias.T @ y\n    w_rounded = round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 339, "completion_id": 0, "solution": "from collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    freq = Counter(y)\n    max_freq = max(freq.values())\n    candidates = [label for (label, count) in freq.items() if count == max_freq]\n    candidates.sort(key=lambda x: y.index(x))\n    return candidates[0]"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"\n    Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad: Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as**\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    alpha = lr * 1e-06\n    updated_param = param - alpha * m_hat_t / np.sqrt(v_hat_t + eps)\n    m = m_hat_t\n    v = v_hat_t\n    return [updated_param.tolist(), m.tolist(), v.tolist()]"}
{"task_id": 342, "completion_id": 0, "solution": "import numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"\n    Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to the nearest 4th decimal as a float. If the vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    distance = 0.0\n    for i in range(len(x)):\n        distance += abs(x[i] - y[i])\n    return round(distance * 10000 / 10000, 4)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list[float], list[float]]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    if isinstance(rewards, list):\n        rewards = rewards[0]\n    num_samples = len(rewards)\n    num_samples_to_keep = int(num_samples * retain_prcnt)\n    selected_theta_samples = theta_samples[:num_samples_to_keep]\n    mean = np.mean(selected_theta_samples, axis=0)\n    variances = np.var(selected_theta_samples, axis=0)\n    mean_rounded = round(mean, 4)\n    variances_rounded = round(variances, 4)\n    return (mean_rounded, variances_rounded)"}
{"task_id": 344, "completion_id": 0, "solution": "import heapq\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping every unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n\n    Args:\n        tokens: List of strings representing tokens.\n\n    Returns:\n        A dictionary mapping each unique token to its corresponding binary code.\n    \"\"\"\n    if not tokens:\n        return {}\n    heap = []\n    for token in tokens:\n        heapq.heappush(heap, (len(token), token))\n    while len(heap) > 1:\n        (freq, token) = heapq.heappop(heap)\n        freq += 1\n        parent_freq = freq\n        heapq.heappush(heap, (parent_freq, ''))\n        heapq.heappush(heap, (freq, token))\n        heapq.heappush(heap, (parent_freq, ''))\n    code_map = {}\n    current_node = None\n    total_nodes = len(heap)\n    for _ in range(total_nodes):\n        current_node = heapq.heappop(heap)\n        while current_node[1] != '':\n            code_map[current_node[1]] = '0' if current_node[0] == 0 else '1'\n            current_node = current_node[0]\n    return code_map"}
{"task_id": 345, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"\n    Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for every sample in X_test rounded to four decimals.\n    \n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    X = np.hstack((X_train, np.ones((X_train.shape[0], X_train.shape[1]))))\n    X_test = np.hstack((X_test, np.ones((X_test.shape[0], X_train.shape[1]))))\n    X_TX = np.dot(X.T, X)\n    X_Ty = np.dot(X.T, y_train)\n    inverse_matrix = np.linalg.inv(X_TX + omega0)\n    mu_n = np.dot(inverse_matrix, X_Ty + omega0 * mu0)\n    predictions = [round(val, 4) for val in mu_n]\n    return predictions"}
{"task_id": 346, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(y, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array.')\n    counts = np.bincount(y)\n    entropy_value = -np.sum(counts * np.log2(counts))\n    return round(entropy_value, 4)"}
{"task_id": 347, "completion_id": 0, "solution": "import numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"\n    Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == 'C':\n        if not Y_real and (not gradInterp):\n            raise ValueError('At least one input is required for the critic loss.')\n        elif not Y_real:\n            Y_real = Y_fake\n        elif not gradInterp:\n            gradInterp = gradInterp\n        if Y_real is not None:\n            E_D_real = np.mean(Y_real)\n            E_D_interp = np.mean(gradInterp)\n            gradient_penalty_term = lambda_ * (E_D_interp - 1) ** 2\n            loss_critic = E_D_real - E_D_interp + gradient_penalty_term\n            return round(loss_critic, 4)\n    else:\n        loss_generator = 0.0\n        return round(loss_generator, 4)"}
{"task_id": 348, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"\n    Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    if X.shape[0] != X.shape[1]:\n        return False\n    symmetric = np.allclose(X, X.T, rtol=1e-08)\n    eigenvalues = np.linalg.eigvalsh(X)\n    all_positive = np.all(eigenvalues > 1e-08)\n    return symmetric and all_positive"}
{"task_id": 350, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_ridge_regression(X: list[float | int], y: list[float | int], degree: int, reg_factor: float) -> list[float]:\n    \"\"\"\n    Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    if len(X) != len(y):\n        raise ValueError('X and y must have the same length')\n    if degree == 0:\n        return [0.0] * (degree + 1)\n    n_samples = len(X)\n    design_matrix = np.zeros((n_samples, degree + 1))\n    for i in range(n_samples):\n        for j in range(degree + 1):\n            design_matrix[i, j] = X[i] ** j\n    X_T_X = np.dot(design_matrix.T, design_matrix)\n    X_T_y = np.dot(design_matrix.T, y)\n    I = np.eye(d + 1)\n    X_T_X += reg_factor * I\n    w = np.linalg.inv(X_T_X) @ X_T_y\n    coefficients = np.round(w, 4)\n    return coefficients.tolist()"}
{"task_id": 351, "completion_id": 0, "solution": "import numpy as np\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"\n    Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    out_h = (X.shape[2] - pool_shape[0]) // stride + 1\n    out_w = (X.shape[3] - pool_shape[1]) // stride + 1\n    result = []\n    for batch in range(X.shape[0]):\n        current_batch = X[batch]\n        max_values = []\n        for ch in range(current_batch.shape[1]):\n            row_max = np.max(current_batch[:, ch])\n            for y in range(out_h):\n                for x in range(out_w):\n                    max_values.append(row_max)\n        result.append(max_values)\n    return np.tolist(result)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    if all((count == 1 for count in counts.values())):\n        return 0.0\n    entropy_value = -sum((p * math.log2(p) for p in counts.values()))\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad: str, dilation: int=0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape `(n_ex, in_rows, in_cols, in_ch)`.\n        W: NumPy array of shape `(kernel_rows, kernel_cols, in_ch, out_ch)`.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string `'same'`.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through `numpy.ndarray.tolist()`.\n    \"\"\"\n    if not isinstance(pad, str):\n        pad = pad\n    else:\n        pad = pad.strip()\n    if pad == 'same':\n        pad = (0, 0)\n    elif isinstance(pad, tuple):\n        (pr, pc) = pad\n        pad = (pr, pc)\n    elif isinstance(pad, (int, float)):\n        pad = (pad, pad)\n    else:\n        raise ValueError('Invalid padding specification')\n    if not (isinstance(pad, int) and pad >= 0) or (isinstance(pad, tuple) and all((isinstance(p, int) for p in pad))) or (isinstance(pad, str) and pad in ['same', 'none']):\n        raise ValueError('Invalid padding specification')\n    X_shape = X.shape\n    X = np.reshape(X, (X_shape[0], X_shape[1], X_shape[2], X_shape[3]))\n    W_shape = W.shape\n    W = np.reshape(W, (W_shape[0], W_shape[1], W_shape[2], W_shape[3]))\n    out_rows = X_shape[1] // stride + pad[0]\n    out_cols = X_shape[2] // stride + pad[1]\n    out_channels = W_shape[3]\n    X_col = np.transpose(X, (3, 0, 1, 2))\n    result = np.zeros((X_shape[0], out_rows, out_cols, out_channels), dtype=np.float64)\n    for i in range(X_shape[0]):\n        current_row = X_col[i, :].reshape(-1, out_cols)\n        for j in range(out_channels):\n            result[i, j] += np.dot(current_row, W[:, :, j, :].reshape(-1, out_rows))\n    return result.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_centralized = np.mean(data, axis=0)\n    standardized_data = data - mean_centralized\n    if solver == 'svd':\n        (eigenvectors, eigenvalues) = np.linalg.svd(standardized_data, full_matrices=False)\n    else:\n        cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n        (eigenvectors, eigenvalues) = np.linalg.eigh(cov_matrix)\n    sorted_eigenvectors = eigenvectors[::-1]\n    sorted_eigenvalues = eigenvalues[::-1]\n    scores = []\n    for i in range(n_components):\n        current_eigenvector = sorted_eigenvectors[i]\n        current_variance = sorted_eigenvalues[i]\n        if current_variance > 0:\n            score = current_eigenvector * (-1 if current_eigenvector[0] < 0 else 1)\n            scores.append([score])\n    projected_data = np.dot(standardized_data, scores)\n    scores_rounded = [round(x, 4) for x in scores]\n    explained_variance_ratio_rounded = [round(e, 4) for e in sorted_eigenvalues]\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"\n    Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if isinstance(leaf.value, list) and len(leaf.value) == 1:\n        return int(leaf.value[0])\n    elif classifier:\n        return int(leaf.value[0])\n    else:\n        return float(leaf.value)"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K]\n    for _ in range(max_iters):\n        new_centroids = []\n        for i in range(len(data)):\n            distance = np.sqrt(np.sum((data[i] - centroids[0]) ** 2))\n            min_distance = min(distance, default=1000000000.0)\n            closest_centroid = centroids[np.argmin(distance)]\n            new_centroids.append(closest_centroid)\n        centroids = np.mean(data[new_centroids], axis=0)\n        if np.allclose(centroids, centroids[-1], atol=1e-06):\n            break\n    sorted_centroids = sorted(centroids.round(4))\n    return sorted_centroids"}
{"task_id": 358, "completion_id": 0, "solution": "import numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    correct = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    return round(correct / len(y_true), 4)"}
{"task_id": 359, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"\n    Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    if derivative:\n        assert len(y.shape) == 2 and len(y_pred.shape) == 2, 'Shapes must be 2D'\n        grad_matrix = np.zeros((len(y), len(y_pred[0])))\n        for i in range(len(y)):\n            for j in range(len(y[0])):\n                grad_matrix[i][j] = y_pred[i, j] - y[i, j]\n        rounded_grad = np.round(grad_matrix, 4)\n        return rounded_grad\n    loss = -np.sum(np.log(y_pred + np.finfo(float).eps) * y, axis=1)\n    rounded_loss = np.round(loss, 4)\n    return rounded_loss"}
{"task_id": 360, "completion_id": 0, "solution": "import numpy as np\ndef dct(frame: np.ndarray | list[float], orthonormal: bool=True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    if not isinstance(frame, np.ndarray):\n        frame = np.array(frame)\n    N = len(frame)\n    if N == 0:\n        return []\n    result = [0.0] * N\n    for k in range(N):\n        angle = np.pi * k * (2 * n + 1) / (2 * N)\n        coefficient = 2 * np.cos(angle)\n        result[k] = coefficient * frame[n]\n    if orthonormal:\n        scaling_factor = 2 * np.sqrt(1 / (4 * N))\n        for k in range(N):\n            if k == 0:\n                scaling_factor *= 1.0\n            else:\n                scaling_factor *= 1.0\n            result[k] *= scaling_factor\n    rounded_result = np.round(result, 4).tolist()\n    return rounded_result"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    if not isinstance(data, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array')\n    if isinstance(data, np.ndarray):\n        data = np.array(data).astype(float)\n    else:\n        data = np.array(data)\n    for row in data:\n        if sum(row) == 0:\n            return -1\n    row_sums = [sum(row) for row in data]\n    normalized_data = [[x / row_sum for (x, row_sum) in zip(row, row_sums)] for row in data]\n    normalized_data = [round(row, 4) for row in normalized_data]\n    return normalized_data"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: Tuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    cont_action = False\n    cont_obs = False\n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            for sub_space in env.action_space.spaces:\n                if not isinstance(sub_space, Box):\n                    cont_action = True\n                    break\n        elif isinstance(env.action_space, Dict):\n            for (key, sub_space) in env.action_space.items():\n                if not isinstance(sub_space, Box):\n                    cont_action = True\n                    break\n        elif isinstance(env.action_space, Box):\n            cont_action = True\n    elif isinstance(env.action_space, Box):\n        cont_action = True\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            for sub_space in env.observation_space.spaces:\n                if not isinstance(sub_space, Box):\n                    cont_obs = True\n                    break\n        elif isinstance(env.observation_space, Dict):\n            for (key, sub_space) in env.observation_space.items():\n                if not isinstance(sub_space, Box):\n                    cont_obs = True\n                    break\n        elif isinstance(env.observation_space, Box):\n            cont_obs = True\n    elif isinstance(env.observation_space, Box):\n        cont_obs = True\n    return (cont_action, cont_obs)"}
{"task_id": 364, "completion_id": 0, "solution": "def sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x > 0:\n        return 1\n    else:\n        return -1"}
{"task_id": 366, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"\n    Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at position (i, j) equals the squared \u2113\u2082 distance between samples i and j. The diagonal must be zeros.\n    \"\"\"\n    if X.ndim != 2 or X.shape[1] != X.shape[0]:\n        raise ValueError('Input must be a 2D array')\n    X = np.array(X)\n    D = np.zeros((X.shape[0], X.shape[0]))\n    for i in range(X.shape[0]):\n        for j in range(i + 1, X.shape[0]):\n            d = np.sum((X[i, :] - X[j, :]) ** 2)\n            D[i, j] = d\n    return D.tolist()"}
{"task_id": 367, "completion_id": 0, "solution": "import re\nfrom typing import Any, Dict, Optional\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get('hyperparameters', {})\n        self.params.update({k: v for (k, v) in hp.items() if k != 'id'})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {'hyperparameters': {'id': self.__class__.__name__, **self.params}}\nclass LinearKernel(KernelBase):\n\n    def __init__(self):\n        super().__init__()\nclass PolynomialKernel(KernelBase):\n\n    def __init__(self, degree: int=3, coef0: float=1.0):\n        super().__init__(degree=degree, coef0=coef0)\nclass RBFKernel(KernelBase):\n\n    def __init__(self, gamma: float=1.0):\n        super().__init__(gamma=gamma)\ndef initialize_kernel(param: Optional[Any]=None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    if isinstance(param, KernelBase):\n        return param\n    if isinstance(param, str):\n        if re.match('^linear$', param):\n            return LinearKernel()\n        elif re.match('^RBF(\\\\s+.*?)(\\\\s+.*?)$', param):\n            return RBFKernel()\n        elif re.match('^Polynomial(\\\\s+.*?)(\\\\s+.*?)$', param):\n            return PolynomialKernel()\n        raise ValueError('Unknown kernel format: {}'.format(param))\n    if isinstance(param, dict):\n        if not 'hyperparameters' in param:\n            raise ValueError(\"Dictionary must contain 'hyperparameters'\")\n        hyperparameters = param['hyperparameters']\n        if not 'id' in hyperparameters:\n            raise ValueError(\"Dictionary must include 'id'\")\n        kernel_type = hyperparameters['id']\n        if kernel_type not in ['LinearKernel', 'PolynomialKernel', 'RBFKernel']:\n            raise ValueError('Unknown kernel type: {}'.format(kernel_type))\n        if kernel_type == 'LinearKernel':\n            return LinearKernel()\n        elif kernel_type == 'PolynomialKernel':\n            return PolynomialKernel(degree=hyperparameters['degree'], coef0=hyperparameters['coef0'])\n        else:\n            return RBFKernel(gamma=hyperparameters['gamma'])\n    raise NotImplementedError('Unsupported parameter type: {}'.format(param))"}
{"task_id": 368, "completion_id": 0, "solution": "import numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to the nearest 4th decimal place, or -1 when input validation fails.\n    \"\"\"\n    if not isinstance(x, (np.ndarray, list)) or not isinstance(y, (np.ndarray, list)):\n        return -1\n    if not isinstance(p, float) or p <= 0:\n        return -1\n    if len(x) != len(y):\n        return -1\n    result = 0.0\n    for i in range(len(x)):\n        diff = abs(x[i] - y[i])\n        result += diff ** p\n    rounded_result = round(result, 4)\n    return rounded_result"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"\n    Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for all samples. For regression, the array shape is (n_samples,)\n        for classification, it's (n_samples, n_classes).\n    learning_rate : float\n        The learning-rate hyper-parameter used during training. Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set True for regression problems and False for multi-class classification\n        problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted class labels.\n    \"\"\"\n    running_pred = np.zeros(len(updates[0]))\n    for u in updates:\n        running_pred -= learning_rate * u\n        if regression:\n            return running_pred.round(4)\n        else:\n            prob = np.exp(running_pred).reshape(-1, len(u))\n            prob = prob / np.max(prob)\n            return prob.argmax(axis=1).astype(int).round(4)"}
{"task_id": 370, "completion_id": 0, "solution": "import numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"Calculate the multivariate normal probability density for each sample in X.\"\"\"\n    if X.ndim != 2:\n        raise ValueError('X must be a 2D array')\n    m = X.shape[0]\n    n = X.shape[1]\n    x_mean = mu\n    if cov.ndim != 2 or cov.shape[0] != n or cov.shape[1] != n:\n        raise ValueError('covariance matrix must be n x n')\n    pdfs = []\n    for x in X:\n        dist_sq = np.sum((x - mu) ** 2, axis=1)\n        inv_cov = np.linalg.inv(cov)\n        exp_term = np.exp(-0.5 * dist_sq / np.sqrt(np.dot(inv_cov, (x - mu).T)))\n        pdfs.append(exp_term)\n    return [round(pdf, 4) for pdf in pdfs]"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: str='same', dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between X and W.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad: 'int', 2-tuple, or \"same\" specifying the amount of zero padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape (n_examples, output_length, out_channels).\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise ValueError('X must be a numpy array')\n    if not isinstance(W, np.ndarray):\n        raise ValueError('W must be a numpy array')\n    if not isinstance(pad, str) and (not isinstance(pad, tuple)):\n        raise ValueError(f\"pad should be an integer, 2-tuple, or 'same'\")\n    if not isinstance(dilation, int):\n        raise ValueError('dilation must be a non-negative integer')\n    (n_examples, signal_length, in_channels) = X.shape\n    if len(W.shape) != 3:\n        raise ValueError('W must have shape (kernel_width, in_channels, out_channels)')\n    (kernel_width, out_channels) = W.shape\n    if X.ndim == 3:\n        X = X.reshape((n_examples, signal_length, in_channels))\n    if X.ndim == 4:\n        X = X[0]\n    output_length = ceil(signal_length / stride)\n    total_pad = max(0, (output_length - 1) * stride + kernel_width - signal_length)\n    if pad == 'same':\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        (p_left, p_right) = pad\n    output_shape = (n_examples, output_length, out_channels)\n    result = []\n    for example in range(n_examples):\n        example_array = np.zeros_like(X[example])\n        for i in range(kernel_width):\n            example_array[i] += X[example][i] * W[i]\n        padded_example = np.pad(example_array, ((p_left, p_right), (0, 0)))\n        padded_example = padded_example[dilation:dilation + kernel_width]\n        result.append(padded_example.tolist())\n    return result"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    C = len(y)\n    N = len(y)\n    p = y / N\n    return 1 - np.sum(p ** 2)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X: The feature matrix (m x n), where m is the number of samples and n is the number of features.\n        y: The target vector (m elements).\n        learning_rate: Learning rate for gradient descent (default: 0.01).\n        n_iterations: Number of iterations for gradient descent (default: 10000).\n\n    Returns:\n        A tuple containing the trained parameters (weights_list, bias) rounded to four decimal places.\n        If the input data are inconsistent (different number of samples in X and y), return (-1, -1).\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return (-1, -1)\n    weights_list = [0.0] * X.shape[1]\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights_list) + bias\n        dw = 2 / X.shape[0] * np.dot(X.T, y_pred - y)\n        db = 2 / X.shape[0] * (y_pred - y)\n        weights_list = weights_list - learning_rate * dw\n        bias = bias - learning_rate * db\n    weights_list_rounded = np.round(weights_list, 4)\n    bias_rounded = np.round(bias, 4)\n    return (weights_list_rounded, bias_rounded)"}
{"task_id": 375, "completion_id": 0, "solution": "import numpy as np\ndef calc_pad_dims_2D(X_shape: tuple, out_dim: tuple, kernel_shape: tuple, stride: int, dilation: int=0) -> tuple:\n    \"\"\"\n    Compute the zero-padding dimensions required for a 2D convolution.\n    \n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor (n_ex, in_rows, in_cols, in_ch)\n    out_dim : tuple\n        Desired output height and width (out_rows, out_cols)\n    kernel_shape : tuple\n        Convolution kernel size (fr, fc)\n    stride : int\n        Stride used by the convolution\n    dilation : int, optional (default=0)\n        Dilation factor between kernel elements\n        \n    Returns\n    -------\n    tuple\n        A 4-tuple with (top, bottom, left, right) indicating how many padding added to each side\n    \"\"\"\n    if not isinstance(X_shape, tuple):\n        raise ValueError('X_shape must be a tuple')\n    if not isinstance(out_dim, tuple):\n        raise ValueError('out_dim must be a tuple')\n    if not isinstance(kernel_shape, tuple):\n        raise ValueError('kernel_shape must be a tuple')\n    if not isinstance(stride, int):\n        raise ValueError('stride must be an integer')\n    if len(X_shape) != 4:\n        raise ValueError('Input X_shape must have four elements')\n    if len(out_dim) != 2:\n        raise ValueError('Output dimensions must be two elements')\n    if len(kernel_shape) != 2:\n        raise ValueError('Kernel shape must have two elements')\n    fr = kernel_shape[0] * (dilation + 1) - dilation\n    fc = kernel_shape[1] * (dilation + 1) - dilation\n    if fr <= 0 or fc <= 0:\n        raise ValueError('Effective filter size must be positive')\n    if out_dim[0] < 1 or out_dim[1] < 1:\n        raise ValueError('Output dimensions must be at least 1')\n    up_pad = (out_dim[0] - 1 - fr) // stride\n    down_pad = (out_dim[1] - 1 - fc) // stride\n    if (up_pad + down_pad + 1) % 2 == 1:\n        if down_pad > 0:\n            down_pad += 1\n        elif up_pad > 0:\n            up_pad += 1\n    return (up_pad, down_pad, left_pad, right_pad)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    if n != len(X[0]):\n        return False\n    arr = np.array(X)\n    return np.allclose(arr.T, arr)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss when optimizing a binary classification model.\n    \n    This function uses the rule y' = 2y - 1 to convert true labels to {-1, 1} values. It then computes the negative gradient of the logistic loss with respect to the prediction scores.\n    \n    Args:\n        y: List of binary class labels (0 or 1)\n        f: List of current prediction scores\n    \n    Returns:\n        A list of floats representing the negative gradient for each sample.\n    \"\"\"\n    if not all((0 <= val <= 1 for val in y)):\n        return [-1] * len(f)\n    y_prime = [2 * val - 1 for val in y]\n    result = []\n    for i in range(len(f)):\n        numerator = y_prime[i]\n        denominator = 1.0 + np.exp(numerator * f[i])\n        result.append(round(numerator / denominator, 4))\n    return result"}
{"task_id": 378, "completion_id": 0, "solution": "def indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0"}
{"task_id": 379, "completion_id": 0, "solution": "def sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    sorted_nodes = sorted(nodes, key=lambda x: (-x['priority'], x['entry_id']))\n    return [node['key'] for node in sorted_nodes]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"\n    Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(x, (float, list, np.ndarray)):\n        raise TypeError('Input must be a float, list, or NumPy array.')\n    x_array = np.array(x)\n    if order == 0:\n        return np.clip(x_array * np.exp(x_array) - 1.0, 0, 1.0507009873554805)\n    elif order == 1:\n        return np.clip(x_array * np.exp(x_array) - 1.0, 0, 1.0507009873554805)\n    else:\n        alpha = 1.6732632423543772\n        scale = 1.0507009873554805\n        return np.clip(x_array * scale * (np.exp(x_array) - 1.0), 0, 1.0507009873554805)"}
{"task_id": 382, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_naive_bayes_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list:\n    \"\"\"\n    Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    n_classes = np.unique(y_train).size\n    means = []\n    variances = []\n    for (i, label) in enumerate(y_train):\n        counts = np.bincount(y_train[y_train == label])\n        if len(counts) > 1:\n            means.append(np.mean(X_train[X_train[:, i] == label]))\n            variances.append(np.var(X_train[X_train[:, i] == label]))\n        else:\n            means.append(0)\n            variances.append(0)\n    epsilon = 0.0001\n    posteriors = np.zeros(n_classes)\n    for (i, label) in enumerate(y_train):\n        for j in range(len(X_train)):\n            if X_train[j, i] == label:\n                val = X_train[j, i]\n                numerator = 1.0 / (np.sqrt(2 * np.pi * variances[label]) + epsilon)\n                exp_term = -(val - means[label]) ** 2 / (2 * variances[label] + epsilon)\n                numerator *= np.exp(exp_term)\n                posteriors[label] += numerator\n    predictions = []\n    for sample in X_test:\n        max_label = np.argmax(posteriors)\n        predictions.append(max_label)\n    return predictions"}
{"task_id": 383, "completion_id": 0, "solution": "def find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    L_rounded = round(L, 4)\n    H_rounded = round(H, 4)\n    return [L_rounded, H_rounded]"}
{"task_id": 384, "completion_id": 0, "solution": "import numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int) -> list[list[float]]:\n    \"\"\"\n    Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal places.\n        Returns -1 if *k* is invalid.\n    \"\"\"\n    if k <= 0 or k > len(L):\n        return -1\n    A = np.array(L)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A)\n    smallest_k_eigenvalues = eigenvalues[::-1]\n    selected_eigenvectors = eigenvectors[:k]\n    normalized_eigenvectors = selected_eigenvectors / np.linalg.norm(selected_eigenvectors)\n    flipped_eigenvectors = normalized_eigenvectors.copy()\n    for i in range(k):\n        if flipped_eigenvectors[i][0] < 0:\n            flipped_eigenvectors[i][0] *= -1\n    result = np.round(flipped_eigenvectors, 4).tolist()\n    return result"}
{"task_id": 385, "completion_id": 0, "solution": "import numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Implement Linear Discriminant Analysis (LDA) for dimensionality reduction.\"\"\"\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    S_w = np.cov(X, rowvar=False)\n    class_means = np.mean(X[:, :] / n_samples, axis=0)\n    cov_w = np.cov(X, rowvar=False)\n    cov_b = cov_w - (class_means ** 2).dot(class_means) / n_samples\n    (eigenvectors, eigenvalues) = np.linalg.eigh(cov_b)\n    eigenvectors = eigenvectors[:, :k]\n    eigenvalues = eigenvalues[:k]\n    eigenvectors /= np.sqrt(np.sum(eigenvectors ** 2, axis=1))\n    for i in range(k):\n        eigenvectors[i] = np.clip(eigenvectors[i], 0, 1)\n    projected_data = np.dot(X, eigenvectors)\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n    return projected_data_rounded"}
{"task_id": 386, "completion_id": 0, "solution": "import numpy as np\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, 1e-15, 1.0 - 1e-15)\n    loss = -np.sum(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred)) / len(y_true)\n    return round(loss, 4)"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"\n    Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    \u0177 = np.mean(y)\n    residuals = y - \u0177\n    for _ in range(n_estimators):\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_y = y[sorted_indices]\n        split_points = []\n        for i in range(1, len(sorted_x)):\n            left = sorted_x[i - 1]\n            right = sorted_x[i]\n            mid = (left + right) / 2\n            r_left = residuals[sorted_indices[:i]]\n            r_right = residuals[sorted_indices[i + 1:]]\n            split_sum = np.sum(r_left ** 2) + np.sum(r_right ** 2)\n            best_split = None\n            min_error = float('inf')\n            for t in range(i):\n                mid_t = (left + sorted_x[t]) / 2\n                r_left_t = residuals[sorted_indices[:t]]\n                r_right_t = residuals[sorted_indices[t + 1:i]]\n                error_t = np.sum(r_left_t ** 2) + np.sum(r_right_t ** 2)\n                if error_t < min_error:\n                    min_error = error_t\n                    best_split = t\n        selected_split = best_split\n        \u0177 += learning_rate * residuals[selected_split]\n    predictions = round(\u0177, 4)\n    return predictions.tolist()"}
{"task_id": 389, "completion_id": 0, "solution": "import numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    if len(W) != len(W[0]):\n        return -1\n    D = np.diag(np.sum(W, axis=0))\n    L = D - W\n    L_rounded = np.round(L, 4)\n    result = L_rounded.tolist()\n    return result"}
{"task_id": 391, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"\n    Perform nearest-neighbor interpolation on a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples. The outer list length equals len(t), each inner list has length in_channels.\n    \"\"\"\n    rounded_t = np.round(t).astype(int)\n    (_, in_length) = X.shape\n    clipped_t = np.clip(rounded_t, 0, in_length - 1)\n    return np.take(X, clipped_t, axis=1).tolist()"}
{"task_id": 392, "completion_id": 0, "solution": "import numpy as np\ndef preemphasis(x: 'list[float] | np.ndarray', alpha: float) -> list[float]:\n    \"\"\"\n    Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval [0, 1).\n\n    Returns:\n        The filtered signal as a Python list with every element rounded to four decimal places.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array')\n    if len(x) == 0:\n        return []\n    flat_x = np.array(x).flatten()\n    result = []\n    if len(flat_x) > 1:\n        result.append(flat_x[0])\n        for i in range(1, len(flat_x)):\n            result.append(flat_x[i] - alpha * flat_x[i - 1])\n    for value in result:\n        rounded_value = round(value, 4)\n        result.append(rounded_value)\n    return result"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n    \n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple `(w_next, Eg_next)` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    else:\n        pass\n    if Eg is not None:\n        E_g_new = rho * Eg + (1 - rho) * grad ** 2\n    else:\n        E_g_new = (1 - rho) * grad ** 2\n    w_next = w - learning_rate * E_g_new ** 0.5 * (1 / np.sqrt(Eg_new))\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(E_g_new, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)"}
{"task_id": 395, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 396, "completion_id": 0, "solution": "import numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    x_array = np.array(x)\n    tanh_array = np.tanh(x_array)\n    first_derivative = (1 - tanh_array) / 1.0\n    second_derivative = -2 * tanh_array * (1 - tanh_array)\n    return [round(tanh_array, 6), round(first_derivative, 6), round(second_derivative, 6)]"}
{"task_id": 397, "completion_id": 0, "solution": "import numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.zeros((0, n_classes))\n    data = np.random.rand(n_examples, n_classes)\n    for i in range(n_examples):\n        data[i] = np.where(data[i] > 0, 1, 0)\n    return data"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"\n    Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        raise ValueError('Input must be a list or NumPy array.')\n    result = []\n    if derivative:\n        result = np.array([np.e ** x - 1 + alpha * alpha for x in x])\n        return result.tolist()\n    for val in x:\n        if val >= 0:\n            result.append(val)\n        else:\n            result.append(alpha * (np.exp(val) - 1))\n    rounded_result = [round(num, 4) for num in result]\n    return rounded_result"}
{"task_id": 399, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"\n    Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of lists, or -1 if the inputs are invalid.\n    \"\"\"\n    if X.ndim != 2 or Y.ndim != 2 or X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] != Y.shape[0]:\n        return -1\n    X = X.astype(float)\n    Y = Y.astype(float)\n    D = np.sqrt(np.sum((X - Y) ** 2, axis=1))\n    D = round(D, 4)\n    result = []\n    for i in range(X.shape[0]):\n        row = []\n        for j in range(Y.shape[0]):\n            row.append(round(D[i][j], 4))\n        result.append(row)\n    return result"}
{"task_id": 400, "completion_id": 0, "solution": "import math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance == 0:\n        return round(1.0 if x > mean else 0.5, 6)\n    z = (x - mean) / math.sqrt(2 * variance)\n    result = 0.5 * (1 + math.erf(z))\n    return round(result, 6)"}
{"task_id": 401, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(y: np.ndarray, num_classes: int | None=None) -> np.ndarray:\n    \"\"\"\n    Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is already one-hot encoded (shape (N, C) with rows summing to 1), the function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    if y.ndim == 1 and y.shape[0] > 0:\n        if np.sum(y) == len(y):\n            return y.copy()\n        else:\n            return np.column_stack((y, np.ones(y.shape[0])))\n    if num_classes is not None:\n        num_classes = num_classes\n    else:\n        num_classes = max(y) + 1\n    y_encoded = np.zeros((y.shape[0], num_classes))\n    for i in range(len(y)):\n        y_encoded[i, y[i]] = 1.0\n    return y_encoded"}
{"task_id": 402, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float=1e-06) -> np.ndarray:\n    \"\"\"\n    Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    class_prior = np.bincount(y_train) / len(y_train)\n    means = []\n    variances = []\n    N_total = len(y_train)\n    for i in range(N_total):\n        class_label = y_train[i]\n        mean_val = np.mean(X_train[:, i], weights=class_prior[class_label])\n        variance_val = np.std(X_train[:, i], weights=class_prior[class_label], ddof=1) + eps\n        means.append(mean_val)\n        variances.append(variance_val)\n    log_posterior = np.log(class_prior) + np.sum((np.log(np.exp(2 * (X_test[:, :] - means) ** 2 / variances)) for j in range(len(X_test))))\n    return np.argmax(log_posterior, axis=0)"}
{"task_id": 405, "completion_id": 0, "solution": "import numpy as np\nimport re\ndef apply_activation(x, param=None):\n    \"\"\"\n    Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n    param = param or 'identity'\n    valid_params = {'identity': 1, 'relu': 2, 'tanh': 3, 'sigmoid': 4, 'leaky_relu(alpha=0.01)': 5, 'affine(slope=slope, intercept=intercept)': 6}\n    if param not in valid_params:\n        raise ValueError(f'Unknown activation: {param}')\n    x_array = np.array(x)\n    result = []\n    for i in range(len(x_array)):\n        value = x_array[i]\n        if param == 'identity':\n            result.append(value)\n        elif param == 'relu':\n            result.append(np.maximum(0.0, value))\n        elif param == 'tanh':\n            result.append(np.tanh(value))\n        elif param == 'sigmoid':\n            result.append(1.0 / (1.0 + np.exp(-value)))\n        elif param == 'leaky_relu(alpha=0.01)' and 'alpha' in param:\n            alpha_str = re.search('\\\\((\\\\d+\\\\.\\\\d+)\\\\)', param).group(1)\n            alpha = float(alpha_str) if alpha_str else 0.01\n            result.append(np.maximum(0.0, value) * alpha if value > 0 else alpha * value)\n        elif param == 'affine(slope=slope, intercept=intercept)' and 'slope' in param:\n            slope_str = re.search('\\\\s*(\\\\d+\\\\.\\\\d+)', param).group(1)\n            slope = float(slope_str) if slope_str else 0.0\n            intercept_str = re.search('\\\\s*intercept=\\\\s*(\\\\d+\\\\.\\\\d+)', param).group(1)\n            intercept = float(intercept_str) if intercept_str else 0.0\n            result.append(slope * value + intercept)\n    result = np.round(result, 6).tolist()\n    return result"}
{"task_id": 406, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: 'np.ndarray', y_train: 'np.ndarray', X_test: 'np.ndarray', k: int=5) -> list[int]:\n    \"\"\"\n    Predict class labels for test samples using k-Nearest Neighbors (k-NN) with majority voting.\n\n    Parameters:\n    - X_train: 2D array of training samples with shape (n_train, n_features)\n    - y_train: 1D array of class labels for training samples\n    - X_test: 2D array of test samples to predict labels\n    - k: Number of nearest neighbors to use (default: 5)\n\n    Returns:\n    - A list of predicted labels for each test sample in the original order.\n    \"\"\"\n    distances = np.linalg.norm(X_train[:, :k] - X_train[:, :k], axis=1)\n    closest_indices = np.argsort(distances[:k])\n    nearest_labels = y_train[closest_indices]\n    label_counts = np.bincount(nearest_labels)\n    predicted_labels = label_counts.argmax()\n    result = []\n    for test_sample in X_test:\n        result.append(predicted_labels)\n    return result"}
{"task_id": 410, "completion_id": 0, "solution": "import re\ndef parse_activation(act_str: str) -> dict:\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    pattern_re = re.compile('^(?i)(?:\\\\w+)(?:(?:\\\\s+(\\\\d+))|(\\\\s+\\\\d+))?(\\\\s*\\\\.?\\\\d+)?$')\n    matches = pattern_re.findall(act_str)\n    if not matches:\n        return -1\n    match_type = matches[0][0]\n    if match_type in ['ReLU', 'Sigmoid', 'Tanh']:\n        parameters = {}\n        if len(matches[0]) > 1:\n            param_str = matches[0][1:]\n            parts = param_str.split()\n            if 'slope' in parts:\n                slope = float(parts[0])\n                parameters['slope'] = slope\n            if 'intercept' in parts:\n                intercept = float(parts[1])\n                parameters['intercept'] = intercept\n        return {'type': match_type, **parameters}\n    elif match_type == 'Affine':\n        parameters = {}\n        param_str = matches[0][1:]\n        parts = param_str.split()\n        if len(parts) >= 2:\n            if 'slope' in parts:\n                slope = float(parts[0])\n                parameters['slope'] = slope\n            if 'intercept' in parts:\n                intercept = float(parts[1])\n                parameters['intercept'] = intercept\n        return {'type': 'Affine', 'slope': slope if slope else None, 'intercept': intercept if intercept else None}\n    elif match_type == 'Leaky ReLU':\n        parameters = {}\n        param_str = matches[0][1:]\n        parts = param_str.split()\n        if len(parts) >= 2:\n            alpha = float(parts[0])\n            parameters['alpha'] = alpha\n        return {'type': 'Leaky ReLU', 'alpha': alpha if alpha else None}\n    else:\n        return -1"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    if len(actions) != len(observations):\n        raise ValueError('The number of elements in actions and observations must be equal.')\n    tuples_actions = tuple((tuple(action) for action in actions))\n    tuples_observations = tuple((tuple(observation) for observation in observations))\n    tuple_has_iterable = tuples_actions.count(iterable) > 0 or tuples_observations.count(iterable) > 0\n\n    def check_multidimensional(value):\n        return len(value.shape) > 1\n    multidim_actions = all((check_multidimensional(action) for action in actions))\n    multidim_observations = all((check_multidimensional(observation) for observation in observations))\n\n    def check_continuous(value):\n        return not np.is_integer(value)\n    continuous_actions = any((not check_continuous(action) for action in actions))\n    continuous_observations = any((not check_continuous(observation) for observation in observations))\n    n_actions_per_dim = []\n    n_obs_per_dim = []\n    action_set = set()\n    for action in actions:\n        if isinstance(action, tuple):\n            action_set.update(action)\n        elif isinstance(action, list):\n            action_set.update(action)\n    n_actions_per_dim.append(len(action_set))\n    obs_set = set()\n    for obs in observations:\n        if isinstance(obs, tuple):\n            obs_set.update(obs)\n        elif isinstance(obs, list):\n            obs_set.update(obs)\n    n_obs_per_dim.append(len(obs_set))\n    action_ids = sorted((set(action) for action in actions))\n    obs_ids = sorted((set(obs) for obs in observations))\n    result = {'tuple_actions': tuple_has_iterable, 'tuple_observations': tuple_has_iterable, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': len(action_ids), 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': len(obs_ids), 'action_ids': action_ids, 'obs_ids': obs_ids}\n    return result"}
{"task_id": 412, "completion_id": 0, "solution": "def get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    if name == 'accuracy':\n\n        def accuracy(y_true, y_pred):\n            tp = sum(y_pred == y_true)\n            tn = sum(y_pred == 0)\n            fn = sum(y_pred == 1)\n            fp = sum(y_pred == 0)\n            return round(tp + tn + fn + fp, 4) / (tp + tn + fn + fp)\n        return accuracy\n    elif name == 'precision':\n\n        def precision(y_true, y_pred):\n            tp = sum(y_pred == y_true)\n            fp = sum(y_pred == 0)\n            return round(tp / (tp + fp), 4)\n    elif name == 'recall':\n\n        def recall(y_true, y_pred):\n            tp = sum(y_pred == y_true)\n            fn = sum(y_pred == 1)\n            return round(tp / (tp + fn), 4)\n    elif name == 'f1':\n\n        def f1(y_true, y_pred):\n            tp = sum(y_pred == y_true)\n            fp = sum(y_pred == 0)\n            fn = sum(y_pred == 1)\n            return round((2 * tp + fp + fn) / (tp + fp + fn), 4)\n    else:\n        return -1"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.mean(y_train)\n    for _ in range(n_estimators):\n        residuals = np.square(predictions - y_train) / 2\n        tree = np.zeros_like(residuals)\n        for i in range(max_depth):\n            current_node = tree[i]\n            left = np.where(current_node < 0.5, True, False)\n            right = np.where(current_node > 0.5, True, False)\n            if left:\n                tree[i] += learning_rate * tree[i - 1]\n            elif right:\n                tree[i] -= learning_rate * tree[i + 1]\n        predictions += learning_rate * tree\n    predictions_rounded = np.round(predictions, 4).tolist()\n    return predictions_rounded"}
{"task_id": 414, "completion_id": 0, "solution": "import numpy as np\ndef exponential_scheduler(step: int, initial_lr: float=0.01, stage_length: int=500, staircase: bool=False, decay: float=0.1) -> float:\n    \"\"\"\n    Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as:\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length* (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal places, or -1 if an invalid argument is supplied.\n    \"\"\"\n    if step < 0 or not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if staircase and step > stage_length:\n        return -1\n    if not isinstance(decay, float) or decay <= 0:\n        return -1\n    if staircase:\n        curr_stage = int(step // stage_length)\n    else:\n        curr_stage = step / stage_length\n    lr = initial_lr * decay ** curr_stage\n    lr_rounded = round(lr, 6)\n    return lr_rounded"}
{"task_id": 415, "completion_id": 0, "solution": "import numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Implement the un-normalised 1-D DCT-II transform.\n    \n    Args:\n        frame: A list of real numbers (int or float)\n        \n    Returns:\n        A list of the same length as the input containing the DCT-II coefficients,\n        rounded to four decimal places.\n        \n    Raises:\n        ValueError: If the input is empty.\n    \"\"\"\n    if not frame:\n        return []\n    N = len(frame)\n    output = np.zeros(N, dtype=float)\n    for k in range(N):\n        for n in range(N):\n            term = frame[n] * np.cos(np.pi / N * (n + 0.5) * k)\n            output[k] += term\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Args:\n        X: A NumPy array with shape (n_samples, n_features)\n        mean: The mean vector of the distribution (length n_features)\n        cov: The covariance matrix (positive-definite and invertible)\n        \n    Returns:\n        A list of floats, each rounded to four decimal places, representing the PDF values for each data point.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape((X.shape[0], 1))\n    d = X.shape[1]\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    pdf = 1 / np.sqrt(2 * np.pi ** d * det_cov) * np.exp(-0.5 * np.dot(X - mean, inv_cov * (X - mean)))\n    result = np.round(pdf, 4)\n    return result.tolist()"}
{"task_id": 417, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    centered_data = np.mean(data, axis=0)\n    centered_data = data - centered_data\n    cov_matrix = np.cov(centered_data, rowvar=False)\n    (eigenvectors, eigenvalues) = np.linalg.eig(cov_matrix)\n    sorted_eigenvectors = eigenvectors[:k]\n    sorted_eigenvalues = eigenvalues[:k]\n    flipped_eigenvectors = np.sign(sorted_eigenvectors) * sorted_eigenvectors\n    low_dim_data = np.dot(flipped_eigenvectors, centered_data)\n    reconstructed_data = np.dot(low_dim_data, np.transpose(flipped_eigenvectors))\n    rounded_low_dim = round(low_dim_data, 4)\n    rounded_reconstructed = round(reconstructed_data, 4)\n    return [rounded_low_dim.tolist(), rounded_reconstructed.tolist()]"}
{"task_id": 418, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    n = X.shape[0]\n    if n < 2:\n        return [[0.0 for _ in range(X.shape[1])] for _ in range(X.shape[1])]\n    mu_x = np.mean(X[:, :n - 1])\n    mu_y = np.mean(X[:, n - 1])\n    cov_matrix = np.zeros((X.shape[1], X.shape[1]))\n    for i in range(n):\n        for j in range(n):\n            cov_matrix[i][j] = (X[i, j] - mu_x) * (X[j, j] - mu_y) / (n - 1)\n    rounded_cov = np.round(cov_matrix, 4).tolist()\n    return rounded_cov"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.insert(X, 0, np.ones((X.shape[0], 1)), axis=1)\n    if V is None:\n        V = np.eye(len(X.shape[1]))\n    X_T_X = np.dot(X.T, X)\n    inverse_V = np.linalg.inv(V)\n    mu_p = (inverse_V @ mu + X_T_X @ y) / (np.linalg.inv(X_T_X) + inverse_V)\n    result = np.dot(X_new, mu_p)\n    result_rounded = [round(value, 4) for value in result]\n    return result_rounded"}
{"task_id": 420, "completion_id": 0, "solution": "import numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    if column < 0 or column >= X.shape[1] - 1:\n        left_mask = []\n        right_mask = []\n        return (left_mask, right_mask)\n    left_mask = np.logical_and(X[:, column] < value, np.isfinite(X[:, column]))\n    right_mask = np.logical_not(left_mask)\n    left_mask = left_mask.tolist()\n    right_mask = right_mask.tolist()\n    return (left_mask, right_mask)"}
{"task_id": 421, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Implements DBSCAN from scratch.\n    \n    Args:\n        data: A NumPy array of shape (n_samples, n_features) containing the data points.\n        eps: The maximum distance two points can be apart to be considered neighbors.\n        min_samples: The minimum number of points required to form a dense region (core point).\n    \n    Returns:\n        A list of integers where each integer represents the cluster label for the corresponding sample.\n    \"\"\"\n    labels = []\n    if not isinstance(data, np.ndarray):\n        data = data.reshape(-1, len(data[0]))\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    labels = [-1] * n_samples\n    data_copy = data.copy()\n    for i in range(n_samples):\n        if len(labels[i]) >= min_samples:\n            continue\n        window_size = int(eps + 1)\n        for j in range(i, n_samples - window_size + 1):\n            if j - i < window_size:\n                continue\n            distance_sq = np.sum((data_copy[j] - data_copy[i]) ** 2)\n            if distance_sq <= eps * eps:\n                labels[i] = labels[j]\n                for k in range(j + 1, n_samples - window_size + 1):\n                    if labels[k] == labels[j]:\n                        break\n                    else:\n                        labels[k] = labels[j]\n        labels[i] = -1\n    return labels"}
{"task_id": 422, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    if not isinstance(x, (list, tuple, np.ndarray)):\n        x = np.array(x)\n    if order == 0:\n        result = np.log(1 + np.exp(x))\n        return round(result, 4).tolist()\n    elif order == 1:\n        result = np.exp(x) / (1 + np.exp(x))\n        return round(result, 4).tolist()\n    elif order == 2:\n        result = np.exp(x) / (1 + np.exp(x)) ** 2\n        return round(result, 4).tolist()\n    else:\n        return -1"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    rmsle = np.sqrt(1 / len(actual) * np.sum(((np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(len(actual)))))\n    return round(rmsle, 4)"}
{"task_id": 424, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    freq = np.unique(y).astype(int)\n    p = freq / np.sum(freq)\n    entropy_value = -np.sum(p * np.log2(p))\n    return round(entropy_value, 4)"}
{"task_id": 425, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"Calculate the natural logarithm of Shannon entropy for a one-dimensional discrete probability distribution.\n\n    Args:\n        p: A list or NumPy array of non-negative integers representing the probabilities of each unique symbol.\n\n    Returns:\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    if len(p) == 0:\n        return 0.0\n    if not isinstance(p, list):\n        p = [x / sum(p) for x in p]\n    entropy = -sum((p * math.log(p) for p in p))\n    rounded_entropy = round(entropy, 4)\n    return rounded_entropy"}
{"task_id": 426, "completion_id": 0, "solution": "def classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n\n    Raises:\n        ValueError if inputs are invalid.\n    \"\"\"\n    if not y_true or not y_pred:\n        raise ValueError('Inputs cannot be empty.')\n    if len(y_true) != len(y_pred):\n        return -1\n    correct = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 427, "completion_id": 0, "solution": "import numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    z_array = np.array(z)\n    activation = z_array.copy()\n    derivative = np.ones_like(z_array)\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    return (activation_list, derivative_list)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an instance of the general cosine-sum windows where the first and last samples smoothly reach zero. When `symmetric` is ``True`` a classical symmetric window is generated; when ``False`` the function instead builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window, ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal places. Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    hann_window = np.hanning(window_len, symmetric=not symmetric)\n    rounded_hann_window = [round(x * 10000, 4) / 10000 for x in hann_window]\n    return rounded_hann_window"}
{"task_id": 429, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"\n    Returns the optimal expected reward and the corresponding arm in the current context.\n\n    Parameters:\n    - context_probs: A 2-D array of shape (D, K), representing the probability distribution for each arm under each context.\n    - context: A one-hot encoded vector of length D indicating the current context.\n\n    Returns:\n    - tuple: (optimal_rwd, optimal_arm)\n    - If invalid context, returns (-1, -1)\n    \"\"\"\n    if not isinstance(context, np.ndarray):\n        return (-1, -1)\n    if not context.ndim == 1 or context.shape[0] != context_probs.shape[0]:\n        return (-1, -1)\n    valid = True\n    for row in context:\n        if not np.any(row) or not np.allclose(row, [1.0, 0.0]):\n            valid = False\n            break\n    if not valid:\n        return (-1, -1)\n    optimal_rwd = np.max(context_probs[np.argmax(context)])\n    optimal_arm = np.argmax(context_probs[np.argmax(context)])\n    return (round(optimal_rwd, 4), optimal_arm)"}
{"task_id": 430, "completion_id": 0, "solution": "from typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: List[str], edges: List[Tuple[str, str]]) -> List[str] | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    adj = {vertex: [] for vertex in vertices}\n    for (u, v) in edges:\n        adj[u].append(v)\n    in_degree = {vertex: 0 for vertex in vertices}\n    for (u, v) in edges:\n        in_degree[v] += 1\n    visited = set()\n    result = []\n\n    def dfs(vertex):\n        if vertex in visited:\n            return False\n        visited.add(vertex)\n        result.append(vertex)\n        for neighbor in adj[vertex]:\n            if in_degree[neighbor] == 0:\n                continue\n            if not dfs(neighbor):\n                return False\n        return True\n    if dfs(vertices[0]):\n        return result\n    else:\n        return None"}
{"task_id": 431, "completion_id": 0, "solution": "import numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    if isinstance(x1, np.ndarray) and isinstance(x2, np.ndarray):\n        n = len(x1)\n        m = len(x2)\n        if n != m:\n            return -1\n        else:\n            squared_diffs = np.sum((x1 - x2) ** 2)\n            distance = np.sqrt(squared_diffs)\n            return round(distance, 4)\n    elif isinstance(x1, list) or isinstance(x2, list):\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n        if not isinstance(x1, np.ndarray) or not isinstance(x2, np.ndarray):\n            if isinstance(x1, list) and isinstance(x2, list):\n                if len(x1) != len(x2):\n                    return -1\n                else:\n                    squared_diffs = np.sum((x1 - x2) ** 2)\n                    distance = np.sqrt(squared_diffs)\n                    return round(distance, 4)\n            else:\n                pass\n    else:\n        pass\n    return -1"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    if len(shape) == 4:\n        out_channels = shape[0]\n        in_channels = shape[1]\n        kernel_height = shape[2]\n        kernel_width = shape[3]\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (fan_in, fan_out)"}
{"task_id": 434, "completion_id": 0, "solution": "import numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"\n    Compute a row-wise numerically stable softmax.\n    \n    Args:\n        logits: A NumPy array of shape (m, n), or a 1-D array of shape (n,)\n    \n    Returns:\n        A list of lists of floats. Each element is the numerically stable softmax probability.\n    \"\"\"\n    if not isinstance(logits, np.ndarray):\n        logits = np.array(logits)\n    if logits.ndim == 1:\n        logits = logits.reshape((logits.shape[0], logits.shape[1]))\n    max_val = np.max(logits)\n    normalized_logits = np.exp(logits - max_val) / np.sum(np.exp(logits - max_val))\n    rounded = np.round(normalized_logits, 6)\n    return [row.tolist() for row in rounded]"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n    \n    The model uses linear regression weak learners and squared-error loss. The algorithm proceeds exactly as described in the task description. Every returned value must be rounded to 4 decimal places and packed into a plain Python list.\n    \n    Args:\n        X: A list of lists, where each sublist contains d features (d rows).\n        y: A list of m values (m samples).\n        n_estimators: Number of trees in the ensemble (default 10).\n        learning_rate: Learning rate for each tree (default 0.1).\n    \n    Returns:\n        A list of floats, representing the final prediction vector rounded to 4 decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    current_prediction = np.mean(y_np)\n    result = [current_prediction]\n    for _ in range(n_estimators):\n        residuals = y_np - current_prediction\n        coefficients = np.linalg.lstsq(X_np, residuals, rcond=None)[0]\n        predicted = coefficients @ X_np + current_prediction\n        current_prediction = predicted\n        current_prediction = round(current_prediction, 4)\n        result.append(round(current_prediction, 4))\n    return result"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"\n    Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(x, (float, int, list, np.ndarray)):\n        raise TypeError('Input must be a scalar, list, or NumPy array.')\n    if x == 0:\n        return 0.0\n    if order not in (0, 1, 2):\n        return -1.0\n    if order == 0:\n        return 1 / (1 + np.exp(-x))\n    elif order == 1:\n        return (1 - np.exp(-x)) / (1 + np.exp(-x)) * (1 - np.exp(-x))\n    elif order == 2:\n        return (1 - np.exp(-x)) / (1 + np.exp(-x)) * (1 - np.exp(-x)) * (1 - 2 * (1 - np.exp(-x)))\n    result = round(np.float64(result), 4)\n    return result"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    for i in range(len(y)):\n        one_hot[i, y[i]] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_set = set(itertools.chain.from_iterable((transaction for transaction in transactions)))\n    total_transactions = len(transactions)\n    result = []\n    for subset in itertools.chain.from_iterable((itertools.combinations(item_set, k) for k in range(1, len(item_set) + 1))):\n        count = sum((1 for t in transactions if t.issubset(subset)))\n        if count / total_transactions >= min_sup:\n            result.append(tuple(subset))\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    averaged_probabilities = []\n    for i in range(len(predictions[0])):\n        current_avg = np.mean(predictions[i], axis=0)\n        rounded_avg = np.round(current_avg, 4)\n        averaged_probabilities.append(rounded_avg)\n    final_labels = []\n    for avg in averaged_probabilities:\n        label_index = np.argmax(avg)\n        final_labels.append(label_index)\n    return (averaged_probabilities, final_labels)"}
{"task_id": 441, "completion_id": 0, "solution": "import numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hamming window.\n\n    The function should return window_len samples of a Hamming window.\n    When symmetric is False, return the periodic variant (last sample of the symmetric window removed).\n    \n    Each value must be rounded to 4 decimal places and the result converted to a regular Python list.\n    \"\"\"\n    if window_len < 1:\n        return []\n    if symmetric:\n        w = [0.54 - 0.46 * np.cos(2 * np.pi * n / (window_len - 1)) for n in range(window_len)]\n    else:\n        N = window_len + 1\n        w = np.zeros(N)\n        for i in range(N):\n            w[i] = 0.54 - 0.46 * np.cos(2 * np.pi * i / (N - 1))\n        w = w[:-1]\n    rounded_w = [round(x, 4) for x in w]\n    return rounded_w"}
{"task_id": 442, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n\n    def build_kdtree(points):\n        if len(points) <= 1:\n            return points[0]\n        axis = None\n        min_val = float('inf')\n        max_val = -float('inf')\n        for i in range(len(points[0])):\n            current_min = np.min(points[:, i])\n            current_max = np.max(points[:, i])\n            if current_min < min_val or (current_min == min_val and i != axis):\n                min_val = current_min\n                max_val = current_max\n                axis = i\n        left = []\n        right = []\n        for point in points:\n            if np.greater_equal(point[axis], min_val):\n                left.append(point)\n            else:\n                right.append(point)\n        left_subtree = build_kdtree(left)\n        right_subtree = build_kdtree(right)\n        return Node(root_node, left_subtree, right_subtree)\n\n    class Node:\n\n        def __init__(self, parent=None, left=None, right=None):\n            self.parent = parent\n            self.left = left\n            self.right = right\n    root = build_kdtree(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = np.linalg.norm(test_point - root.points, axis=1)\n        nearest_neighbors = get_k_nearest_neighbors(root, distances, k)\n        predictions.append(np.argmax(nearest_neighbors))\n    predicted_labels = [np.argmax(np.bincount(y)) for label in predictions]\n    return predicted_labels"}
{"task_id": 443, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    if Y is None:\n        X_shape = X.shape[0]\n        Y_shape = X_shape\n    else:\n        (X_shape, Y_shape) = (X.shape, Y.shape)\n    if X_shape[1] != Y_shape[1]:\n        return [-1]\n    if sigma is None:\n        sigma = np.sqrt(X_shape[1] / 2.0)\n    elif not isinstance(sigma, list):\n        return -1\n    if len(sigma) != X_shape[1]:\n        return -1\n    if sigma <= 0:\n        return -1\n    N = X_shape[0]\n    M = Y_shape[0]\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            x = X[i]\n            y = Y[j]\n            dist_sq = sum(((x[k] - y[k]) ** 2 for k in range(X_shape[1])))\n            exp_term = np.exp(-dist_sq / (2 * sigma ** 2))\n            kernel_matrix[i, j] = round(exp_term, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    if np.array_equal(y, y[-1]):\n        return (-1, None, y[0], y[0])\n\n    def get_entropy(labels):\n        p = np.bincount(labels, 1.0, len(labels))\n        entropy = -p * np.log2(p) + (1 - p) * np.log2(1 - p)\n        return entropy\n    current_entropy = get_entropy(y)\n    n_samples = len(y)\n    n_features = len(X[0])\n    best_split = (-1, None, y[0], y[0])\n    for j in range(n_features):\n        for t in np.unique(X[:, j])[::2]:\n            left_labels = [x[j] <= t for x in X]\n            right_labels = [x[j] > t for x in X]\n            p_left = len(left_labels) / n_samples\n            p_right = (n_samples - len(left_labels)) / n_samples\n            left_entropy = get_entropy(np.where(left_labels == 1).flatten())\n            right_entropy = get_entropy(np.where(right_labels == 1).flatten())\n            gain = current_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > gain:\n                best_split = (j, t, y[0], y[0])\n            elif gain == gain:\n                if j < best_split[0]:\n                    best_split = (j, t, y[0], y[0])\n                elif t < best_split[1]:\n                    best_split = (j, t, y[0], y[0])\n    best_threshold = round(best_split[1], 4)\n    return (best_split[0], best_threshold, y[np.where(X[:, best_split[0]] <= best_split[1])[0][0]], y[np.where(X[:, best_split[0]] > best_split[1])[0][0]])"}
{"task_id": 447, "completion_id": 0, "solution": "import numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    if isinstance(shape, int):\n        shape = [shape]\n    elif isinstance(shape, list):\n        pass\n    elif isinstance(shape, tuple):\n        pass\n    return np.ones(shape, **kwargs).tolist()"}
{"task_id": 448, "completion_id": 0, "solution": "import numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"\n    Implement a simple baseline regressor that always predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in X_test rounded to 4 decimal places. \n        If y_train is empty, return an empty list.\n    \"\"\"\n    if not y_train:\n        return []\n    mean = np.mean(y_train)\n    predictions = np.array([mean] * len(X_test))\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 449, "completion_id": 0, "solution": "import numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Train a Gaussian Discriminant Analysis (GDA) model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    (X0, X1) = (X_train[y_train == 0], X_train[y_train == 1])\n    (Mu0, Mu1) = (np.mean(X0), np.mean(X1))\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = len(X0)\n    normal_vec = (Mu1 - Mu0) / np.sqrt(np.sum(normal_vec ** 2))\n    w = normal_vec\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n    sign = np.sign(np.dot(w, X_test) + b)\n    prediction_rule = (np.dot(X_test, w) + b > 0).astype(int) * sign\n    return prediction_rule.tolist()"}
{"task_id": 450, "completion_id": 0, "solution": "import numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"\n    Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    counts = np.bincount(preds.flatten())\n    max_count = np.max(counts)\n    return np.argwhere(counts == max_count).flatten()"}
{"task_id": 451, "completion_id": 0, "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of nearest neighbours that will vote for the class.\n\n    Returns\n    -------\n    list[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    if not X_train.shape[0] or k <= 0:\n        return []\n    tree = build_kd_tree(X_train, y_train)\n    predictions = []\n    for x in X_test:\n        distances = calculate_distances(x, tree)\n        neighbors = get_k_neighbours(distances, k)\n        labels = [y_class for (y_class, _) in neighbors]\n        predictions.append(Counter(labels).most_common(1)[0][0])\n    return predictions\ndef build_kd_tree(X, y):\n    \"\"\"\n    Builds a KD-Tree from the training set.\n    \"\"\"\n    if not X.shape[0]:\n        return {}\n    root = {}\n    features = X.shape[1]\n    for i in range(features):\n        left_subtree = X[:, i]\n        right_subtree = X[:, i]\n        sorted_points_left = np.sort(left_subtree)\n        sorted_points_right = np.sort(right_subtree)\n        root[i] = {'left': build_kd_tree(sorted_points_left, y), 'right': build_kd_tree(sorted_points_right, y)}\n    return root\ndef calculate_distances(point, tree):\n    \"\"\"\n    Calculates the Euclidean distance between the query point and each node in the KD-Tree.\n    \"\"\"\n    distances = []\n    for (key, subtree) in tree.items():\n        distance = np.sqrt(np.sum((point - subtree['root']) ** 2))\n        distances.append(distance)\n    return distances\ndef get_k_neighbours(distances, k):\n    \"\"\"\n    Gets the k nearest neighbours by sorting distances and selecting the top k.\n    \"\"\"\n    distances_sorted = np.sort(distances)\n    return distances_sorted[:k]"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim == 2:\n        X = X[:, feature_i]\n    if isinstance(threshold, int) or isinstance(threshold, float):\n        threshold_value = threshold\n    else:\n        threshold_value = threshold\n    result = []\n    first_subset = X[X >= threshold_value]\n    second_subset = X[X == threshold_value]\n    first_subset_list = first_subset.tolist()\n    second_subset_list = second_subset.tolist()\n    return [first_subset_list, second_subset_list]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next: np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions: list[int]\n        Action index taken in each state.\n    rewards: list[float]\n        Reward received after each action.\n    dones: list[bool]\n        Whether the next state is terminal for each sample.\n    gamma: float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not isinstance(Q, np.ndarray):\n        return -1\n    if not isinstance(Q_next, np.ndarray):\n        return -1\n    if not isinstance(actions, list):\n        return -1\n    if not isinstance(rewards, list):\n        return -1\n    if not isinstance(dones, list):\n        return -1\n    if not all((isinstance(x, bool) for x in dones)):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    y = []\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y.append([target if j == actions[i] else Q[i][j] for j in range(len(Q))])\n    rounded_y = []\n    for row in y:\n        rounded_row = [round(num, 4) for num in row]\n        rounded_y.append(rounded_row)\n    return rounded_y"}
{"task_id": 454, "completion_id": 0, "solution": "import numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"\n    Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description. All three results have to be\n    converted to Python lists via `tolist()`.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    valid_half = np.array([[1, 0] for _ in range(batch_size // 2)], dtype=np.int32).tolist()\n    fake_half = np.array([[0, 1] for _ in range(batch_size // 2)], dtype=np.int32).tolist()\n    valid_full = np.array([[1, 0] for _ in range(batch_size)], dtype=np.int32).tolist()\n    return (valid_half, fake_half, valid_full)"}
{"task_id": 455, "completion_id": 0, "solution": ""}
{"task_id": 456, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for invalid input.\n    \"\"\"\n    if X.shape[0] < 2:\n        return [-1]\n    if Y is not None and X.shape != Y.shape:\n        return [-1]\n    X_mean = np.mean(X, axis=0)\n    cov_matrix = np.cov(X, rowvar=False) if Y is None else np.cov(X, rowvar=False, bias=True)\n    rounded_cov_matrix = round(cov_matrix, 4)\n    result = rounded_cov_matrix.tolist()\n    return result"}
{"task_id": 457, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"\n    Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n\n    Raises:\n        ValueError: If alpha is not in [0, 1].\n    \"\"\"\n    if not isinstance(alpha, float) or not 0 <= alpha <= 1:\n        return -1.0\n    w = np.array(weights)\n    penalty = alpha / 2 * np.sum(w ** 2) + (1 - alpha) * np.sum(np.abs(w))\n    penalty_rounded = round(penalty, 4)\n    return penalty_rounded"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not isinstance(labels, list):\n        raise TypeError('Input must be a list of integers.')\n    for label in labels:\n        if label < 0:\n            return [-1]\n    num_classes = num_classes if num_classes is not None else max(labels) + 1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    for (i, label) in enumerate(labels):\n        one_hot[i, label] = 1\n    return one_hot.tolist()"}
{"task_id": 459, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_validate_heap(X_train: 'np.ndarray', Y_train: 'np.ndarray', X_val: 'np.ndarray', Y_val: 'np.ndarray', k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n    \n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    n_train = X_train.shape[0]\n    n_val = X_val.shape[0]\n    n_features = X_train.shape[1]\n    predicted_labels = []\n    accuracy = 0.0\n    for i in range(n_val):\n        distances = np.sqrt(np.sum((X_train - X_val[i]) ** 2, axis=1))\n        heap = []\n        for j in range(n_train):\n            if len(heap) > k:\n                heapq.heappop(heap)\n            current_distance = distances[j]\n            label = Y_train[j]\n            heapq.heappush(heap, (-current_distance, j, label))\n        selected_indices = []\n        for _ in range(k):\n            (dist, idx, label) = heapq.heappop(heap)\n            selected_indices.append(label)\n        majority_vote = np.bincount(selected_indices).argmax()\n        predicted_labels.append(majority_vote)\n        accuracy += (majority_vote == Y_val[i]) / n_val\n    accuracy_rounded = round(accuracy * 10000) / 10000\n    return (accuracy_rounded, predicted_labels)"}
{"task_id": 460, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list | int:\n    \"\"\"\n    Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard deviation in any column leads to an undefined correlation; the function must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    if Y is None:\n        (n_rows, n_cols) = X.shape\n        corr_matrix = np.zeros((n_rows, n_rows))\n        for i in range(n_cols):\n            for j in range(n_cols):\n                if i == j:\n                    cov_xy = np.sum((X[:, i] - X.mean(axis=0))[i]) ** 2 / (n_rows - 1)\n                    std_x = np.sqrt(cov_xy)\n                    corr_matrix[i][j] = cov_xy / (std_x * std_x)\n                else:\n                    mean_x = X.mean(axis=0)[i]\n                    mean_y = Y.mean(axis=0)[j]\n                    cov_xy = np.sum((X[:, i] - mean_x) * (Y[:, j] - mean_y)) ** 2 / (n_rows - 1)\n                    std_x = np.sqrt(cov_xy)\n                    std_y = np.sqrt(cov_xy)\n                    corr_matrix[i][j] = cov_xy / (std_x * std_y)\n        return corr_matrix.round(4)\n    (n_rows, n_cols) = X.shape\n    if Y.shape[1] != n_cols:\n        raise ValueError('Y should have the same number of columns as X')\n    for col in range(n_cols):\n        mean_x = X.mean(axis=0)[col]\n        mean_y = Y.mean(axis=0)[col]\n        var_x = np.sum((X[col] - mean_x) ** 2) / (n_rows - 1)\n        var_y = np.sum((Y[col] - mean_y) ** 2) / (n_rows - 1)\n        if var_x == 0 or var_y == 0:\n            return -1\n    corr_matrix = np.zeros((n_rows, n_cols))\n    for i in range(n_cols):\n        for j in range(n_cols):\n            if i == j:\n                mean_x = X.mean(axis=0)[i]\n                mean_y = Y.mean(axis=0)[j]\n                cov_xy = np.sum((X[:, i] - mean_x) * (Y[:, j] - mean_y)) ** 2 / (n_rows - 1)\n                std_x = np.sqrt(cov_xy)\n                std_y = np.sqrt(cov_xy)\n                corr_matrix[i][j] = cov_xy / (std_x * std_y)\n            else:\n                mean_x = X.mean(axis=0)[i]\n                mean_y = Y.mean(axis=0)[j]\n                cov_xy = np.sum((X[:, i] - mean_x) * (Y[:, j] - mean_y)) ** 2 / (n_rows - 1)\n                std_x = np.sqrt(cov_xy)\n                std_y = np.sqrt(cov_xy)\n                corr_matrix[i][j] = cov_xy / (std_x * std_y)\n    return corr_matrix.round(4)"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"\n    Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if len(set(x)) != len(x):\n        mean_residual = np.mean(y)\n        return [mean_residual] * len(x)\n    current_prediction = np.mean(y)\n    residuals = y - current_prediction\n    learning_rate_multiplier = learning_rate\n    for _ in range(n_estimators):\n        best_split = None\n        min_sse = float('inf')\n        unique_x = np.unique(x)\n        for t in unique_x:\n            left_size = 1\n            right_size = len(unique_x) - 1\n            left_subset = x <= t\n            right_subset = x > t\n            left_mean_residual = np.mean(residuals[left_subset])\n            right_mean_residual = np.mean(residuals[right_subset])\n            split_sse_left = left_mean_residual ** 2 * (1 / left_size)\n            split_sse_right = right_mean_residual ** 2 * (1 / right_size)\n            if split_sse_left < min_sse or (split_sse_left == min_sse and t < best_split):\n                best_split = t\n                min_sse = split_sse_left\n        current_prediction += learning_rate_multiplier * (np.heaviside(0, 1) * np.array([best_split]))\n        residuals = residuals - current_prediction\n        if np.allclose(residuals, 0.0, atol=1e-06):\n            break\n    final_predictions = np.round(current_prediction, 4).tolist()\n    return final_predictions"}
{"task_id": 462, "completion_id": 0, "solution": "import numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"\n    Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter. A value of 0 (or 1) should return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the liftered coefficients.\n    \"\"\"\n    if D == 0 or D == 1:\n        return mfccs\n    lifter = np.zeros_like(mfccs)\n    for n in range(C):\n        lifter[n] = 1 + D / 2 * np.sin(np.pi * n / D)\n    result = mfccs * lifter\n    return result"}
{"task_id": 463, "completion_id": 0, "solution": "import math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"\n    Compute the radius of a Ball-tree node. The radius is defined as the largest Euclidean distance between its centroid and any data point stored in the node.\n    \n    Args:\n        centroid: A one-dimensional list of floats/ints representing the centroid of the node.\n        X: A two-dimensional list where every sub-list is a point in the same space as the centroid.\n        \n    Returns:\n        The node radius rounded to the nearest 4th decimal place.\n    \"\"\"\n    if not X or not X[0]:\n        return 0.0\n    max_distance = 0.0\n    for x in X:\n        current_distance = sum(((a - centroid[0]) ** 2 for a in x))\n        max_distance = max(max_distance, current_distance)\n    return round(max_distance * 10000) / 10000.0"}
{"task_id": 464, "completion_id": 0, "solution": "import numpy as np\ndef knn_validate(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    X_train = X_train.reshape(-1, len(X_train[0]))\n    X_val = X_val.reshape(-1, len(X_val[0]))\n    features_train = X_train[:, :len(X_val[0]) - 1]\n    labels_train = Y_train\n    features_val = X_val[:, :len(X_val[0]) - 1]\n    labels_val = Y_val\n    distances = np.sqrt(np.sum((X_train - X_val) ** 2, axis=1))\n    nearest_neighbors = []\n    for i in range(len(features_val)):\n        closest = np.argmin(distances)\n        nearest_neighbors.append(closest)\n    predictions = [labels_train[nearest_neighbors[i]] for i in range(len(features_val))]\n    correct_samples = np.sum(np.array(labels_val) == np.array(predictions))\n    accuracy = correct_samples / len(Y_val) * 100\n    rounded_accuracy = round(accuracy, 4)\n    return (rounded_accuracy, predictions)"}
{"task_id": 465, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"\n    Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n\n    def f(x1, x2):\n        norm_sq = np.linalg.norm(x1 - x2)\n        exponent = -gamma * norm_sq\n        result = np.exp(exponent)\n        rounded_result = round(result, 4)\n        return rounded_result\n    return f"}
{"task_id": 466, "completion_id": 0, "solution": "import string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove every punctuation character from a given string. Punctuation characters are defined by the constant ``string.punctuation`` (i.e. ``!\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~``). After removing the punctuation, the function must also strip any leading and trailing whitespace from the resulting string.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing whitespace.\n    \"\"\"\n    return ''.join([c for c in line if c not in string.punctuation])\n    return line.strip()"}
{"task_id": 467, "completion_id": 0, "solution": "import numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]]:\n    \"\"\"\n    Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if not isinstance(norm, str) or norm not in ('l1', 'l2'):\n        return -1\n    if norm == 'l1':\n        penalty = C * np.sum(np.abs(weights))\n        gradient = [C * np.sign(w) for w in weights]\n        penalty_rounded = round(penalty, 4)\n        gradient_rounded = [round(g, 4) for g in gradient]\n        return (penalty_rounded, gradient_rounded)\n    elif norm == 'l2':\n        penalty = C * (np.sum(weights ** 2) / len(weights))\n        gradient = [C * w for w in weights]\n        penalty_rounded = round(penalty, 4)\n        gradient_rounded = [round(g, 4) for g in gradient]\n        return (penalty_rounded, gradient_rounded)\n    else:\n        return -1"}
{"task_id": 468, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, num_iters: int=10000) -> list[int]:\n    \"\"\"\n    Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    if len(y_train.shape) == 2:\n        y_train = y_train[:, 0]\n    X_train_with_bias = np.hstack((X_train, np.ones((X_train.shape[0], 1))))\n    W = np.zeros_like(X_train_with_bias.T)\n    b = 0\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for _ in range(num_iters):\n        h = sigmoid(np.dot(X_train_with_bias, W) + b)\n        loss = -np.dot(h, y_train) + np.dot(y_train, np.dot(1 - h, W))\n        loss = np.sum(loss) / len(X_train)\n        dW = np.dot(X_train_with_bias.T, h - y_train) / len(X_train)\n        W -= learning_rate * dW\n        b -= learning_rate * dW\n        if np.abs(b) < 1e-06:\n            break\n    predictions = []\n    for x in X_test:\n        prob = sigmoid(np.dot(x, W) + b)\n        if prob >= 0.5:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 469, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n\n    def f(x1, x2):\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n        if x1.shape[0] != x2.shape[0]:\n            return -1.0\n        return np.dot(x1, x2)\n    return f"}
{"task_id": 470, "completion_id": 0, "solution": "import os\ndef get_scriptdir(file_path: str) -> str:\n    resolved_path = os.path.realpath(file_path)\n    normalized_path = os.path.normpath(resolved_path)\n    if normalized_path.endswith('/'):\n        return normalized_path[:-1]\n    else:\n        return normalized_path"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n    \n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward: float\n        Immediate reward received after executing the action.\n    next_state: int | None\n        The successor state *s'.  Use None if the transition ended the episode.\n    epsilon: float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr: float\n        Learning-rate \u03b7.\n    gamma: float\n        Discount factor \u03b3.\n    \n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        target = 0.0\n    else:\n        if next_state == state:\n            expected_future_value = 0.0\n        else:\n            actions = [a for a in range(len(q_table[next_state]))]\n            greedy_action = max(actions)\n            pi = 1 - epsilon + epsilon / len(q_table[next_state])\n            if pi > 0:\n                expected_future_value = sum((q_table[next_state][a] * pi for a in actions)) / len(actions)\n            else:\n                expected_future_value = sum((q_table[next_state][a] / len(q_table[next_state]) for a in actions))\n        new_q = reward + gamma * expected_future_value\n        q_table[state][action] = new_q\n    rounded_q = [[round(q, 4) for q in row] for row in q_table]\n    return rounded_q"}
{"task_id": 472, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    x_np = np.array(x)\n    max_val = np.max(x_np, axis=-1)\n    x_np -= max_val\n    exp_values = np.exp(x_np)\n    probabilities = exp_values / np.sum(exp_values)\n    grad = probabilities * (1 - probabilities)\n    probabilities_rounded = round(probabilities, 4)\n    grad_rounded = round(grad, 4)\n    return (probabilities_rounded.tolist(), grad_rounded.tolist())"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    cluster_indices = np.arange(m)\n    x_coords = []\n    y_coords = []\n    for i in range(m):\n        class_idx = i\n        x_start = (int(cluster_indices / 2) + 0.1) * 10\n        x_end = (int(cluster_indices / 2) + 0.9) * 10\n        x_vals = np.linspace(x_start, x_end, n_train)\n        y_start = (i % 2 * interval + 0.1) * 10\n        y_end = (i % 2 * interval + 0.9) * 10\n        y_vals = np.linspace(y_start, y_end, n_train)\n        x_coords.extend(x_vals)\n        y_coords.extend(y_vals)\n        label = (class_idx - 0.5) * 2\n        X_class = np.array([x_vals, y_vals]).reshape(n_train, 2)\n        Y_class = np.array([label]).reshape(n_train, 1)\n        X_train = np.vstack((X_train, X_class))\n        X_val = np.vstack((X_val, X_class))\n        Y_train = np.vstack((Y_train, Y_class))\n        Y_val = np.vstack((Y_val, Y_class))\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.round(Y_train, 4)\n    Y_val = np.round(Y_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size \u03b1.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        (w_new, m_new, v_new) where:\n        * w_new \u2013 updated parameters (same shape as ``w``)\n        * m_new \u2013 updated first moment\n        * v_new \u2013 updated second moment\n    \"\"\"\n    if m_prev is None or v_prev is None:\n        m_prev = np.zeros_like(grad)\n        v_prev = np.zeros_like(grad)\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    alpha = learning_rate / np.sqrt(v_hat_t + eps)\n    w_new = w - alpha * m_hat_t / (np.sqrt(v_hat_t + eps) + eps)\n    return (w_new, m_hat_t, v_hat_t)"}
{"task_id": 477, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"\n    A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest: (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    s = (start[0], start[1])\n    d = (dest[0], dest[1])\n    heap = []\n    heapq.heappush(heap, (0, s))\n    visited = set()\n    while heap:\n        (f, cell) = heapq.heappop(heap)\n        if cell == d:\n            return f\n        if cell in visited:\n            continue\n        visited.add(cell)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for (dx, dy) in directions:\n            neighbor = (cell[0] + dx, cell[1] + dy)\n            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]):\n                if grid[neighbor[0]][neighbor[1]] == 0:\n                    new_cost = f + 1\n                    heapq.heappush(heap, (new_cost, neighbor))\n    return -1"}
{"task_id": 478, "completion_id": 0, "solution": "import numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n\n    Raises:\n        ValueError: If input is not a list or not a NumPy array.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)):\n        raise ValueError('Input must be a list or NumPy array')\n    X = np.array(X)\n    if X.shape[0] == 0:\n        return []\n    result = []\n    for col_idx in range(X.shape[1]):\n        mean = X[col_idx].mean()\n        var = np.sum((X[col_idx] - mean) ** 2) / X.shape[0]\n        std_dev = np.sqrt(var)\n        std_dev_rounded = round(std_dev, 4)\n        result.append(std_dev_rounded)\n    return result"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n    \n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n    \n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(rewards, list):\n        raise TypeError('rewards must be a list of lists')\n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    estimates = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    if seed is not None:\n        np.random.seed(seed)\n    for t in range(num_steps):\n        selected_arm = np.random.choice(num_arms, p=[epsilon / num_arms] * num_arms)\n        if selected_arm == 0:\n            selected_arm = np.argmax(estimates)\n        r = rewards[t][selected_arm]\n        C = counts[selected_arm] + 1\n        estimates[selected_arm] += (r - estimates[selected_arm]) / C\n        estimates[selected_arm] = round(estimates[selected_arm], 4)\n    return estimates"}
{"task_id": 480, "completion_id": 0, "solution": "import numpy as np\ndef mel_spectrogram(x: 'np.ndarray', window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    if center:\n        x = np.pad(x, (frame_width // 2, frame_width // 2), mode='symmetric')\n    frame_width = round(window_duration * fs)\n    stride = round(stride_duration * fs)\n    N = frame_width\n    if window == 'hamming':\n        w = np.hamming(N)\n    elif window == 'hann':\n        w = np.hann(N)\n    elif window == 'blackman_harris':\n        w = np.blackman_harris(N)\n    else:\n        w = np.zeros(N)\n    frame_fft = np.fft.rfft(w)\n    P = np.abs(frame_fft) ** 2 / N\n    freqs = np.linspace(0, fs / 2, N)\n    fbank = np.fft.ifft(np.fft.fft(freqs))\n    corner_freqs = np.arange(n_filters + 2)\n    freqs_bank = np.fft.ifft(fbank)\n    freqs_bank = np.fft.fft(freqs_bank)\n    fbank_T = np.zeros(n_filters + 2)\n    for i in range(n_filters):\n        fbank_T[i] = freqs_bank[corner_freqs[i]]\n    filter_energies = np.dot(P, fbank_T.T)\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=1)\n    filtered_energy_per_frame = np.round(filter_energies, 4).tolist()\n    return (filtered_energy_per_frame, filtered_energy_per_frame)"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Implement DBSCAN from scratch.\n    \n    Parameters:\n    data: 2D NumPy array of shape (n_samples, n_features)\n    eps: Maximum radius for neighbor proximity\n    min_samples: Minimum number of points required to form a cluster\n    \n    Returns:\n    list[int]: Cluster labels for each sample (0-indexed)\n    \"\"\"\n    if not data.shape or len(data.shape) != 2:\n        return []\n    if not data.any():\n        return []\n    clusters = []\n    visited = set()\n    data_copy = data.copy()\n    for i in range(len(data)):\n        if i in visited:\n            continue\n        neighbors = []\n        queue = [i]\n        visited.add(i)\n        while queue:\n            current = queue.pop(0)\n            if len(neighbors) >= min_samples:\n                clusters.append(current)\n            for j in range(len(data_copy[current])):\n                if data_copy[current][j] <= eps and data_copy[current][j] > 0:\n                    neighbors.append(j)\n                    queue.append(j)\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                clusters.append(neighbor)\n    return clusters"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if not isinstance(y, np.ndarray) and (not isinstance(y, list)) and (not isinstance(y, tuple)):\n        raise ValueError('Input must be a numpy array, list, or tuple.')\n    if num_classes is None:\n        num_classes = max(np.unique(y)) + 1\n    elif num_classes < 0:\n        raise ValueError('num_classes must be a non-negative integer.')\n    y = np.array(y)\n    y_encoded = np.zeros((y.shape[0], num_classes), dtype=int)\n    for i in range(y.shape[0]):\n        y_encoded[i] = np.eye(num_classes)[y[i]]\n    return y_encoded"}
{"task_id": 483, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    if num_classes is None:\n        num_classes = len(set(labels)) + 1\n    ones = np.ones((len(labels), num_classes))\n    ones[range(len(labels)), labels] = 1\n    return ones.tolist()"}
{"task_id": 484, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], degree: int, reg_factor: float=0.1, n_iterations: int=1000) -> list[float]:\n    \"\"\"\n    Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test: Inputs on which the trained model is evaluated.\n        degree: Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the nearest 4th decimal place.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    y_train_np = np.array(y_train)\n    X_poly = np.polyval([np.arange(0, degree + 1)], X_train_np)\n    w = np.zeros(len(X_poly))\n    for _ in range(n_iterations):\n        z = np.sum((X_poly * w) ** 2)\n        if len(w) == 1:\n            w[0] = np.sum((y_train_np - X_poly @ w) ** 2) / z / reg_factor\n        else:\n            rho = np.sum((X_poly @ w - y_train_np) ** 2)\n            w = np.sign(rho) * np.max(np.abs(rho) - reg_factor, 0) / z\n    predictions = []\n    for x in X_test_np:\n        prediction = np.dot(x, w)\n        predictions.append(round(prediction, 4))\n    return predictions"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) < 2:\n        return []\n    mean_y_left = np.mean(y_train[:len(X_train) // 2])\n    mean_y_right = np.mean(y_train[len(X_train) // 2:])\n    if mean_y_left < mean_y_right:\n        (X_train, y_train) = (X_train[::2], y_train[::2])\n    else:\n        (X_train, y_train) = (X_train[1:], y_train[1:])\n    return regression_tree_predict(X_train, y_train, X_test, max_depth - 1)"}
{"task_id": 486, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Compute the Mean Squared Error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same non-zero length.\n    Otherwise, it returns the MSE rounded to 4 decimal places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimal places representing the MSE, or -1 on error.\n    \"\"\"\n    if not isinstance(y_true, (list, tuple)) and (not isinstance(y_pred, (list, tuple))):\n        return -1\n    if len(y_true) != len(y_pred):\n        return -1\n    if not y_true or not y_pred:\n        return -1\n    n = len(y_true)\n    mse = sum(((y_true[i] - y_pred[i]) ** 2 for i in range(n))) / n\n    return round(mse, 4)"}
{"task_id": 487, "completion_id": 0, "solution": "import numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int=300, tol: float=0.0001) -> list[int]:\n    \"\"\"\n    Cluster the data contained in X into k groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample in the original order of X.\n    \"\"\"\n    centroids = X[:k]\n    labels = [0] * len(X)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(X - centroids, axis=1)\n        labels = np.argmin(distances, axis=0)\n        new_centroids = []\n        for i in range(len(X)):\n            new_centroids.append(np.mean(X[labels[i]], axis=0))\n        if np.linalg.norm(new_centroids - centroids) < tol:\n            break\n        for i in range(len(centroids)):\n            if np.sum(labels == i) == 0:\n                centroids[i] = centroids[i].copy()\n        centroids = new_centroids\n    return labels"}
{"task_id": 488, "completion_id": 0, "solution": "import numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four decimals. Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    if not X or len(X) < 1:\n        return -1\n    if not isinstance(X[0], list):\n        return -1\n    for row in X:\n        if not isinstance(row, list):\n            return -1\n    result = []\n    for col_index in range(len(X[0])):\n        mean = np.mean(X[col_index])\n        variance = np.sum((X[col_index] - mean) ** 2) / len(X[col_index]) * 100\n        result.append(round(variance, 4))\n    return result"}
{"task_id": 489, "completion_id": 0, "solution": "import numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the integer \u20101.\n    \"\"\"\n    result = []\n    for row in one_hot:\n        if not 1 in row or (1 in row and row.count(1) != 1):\n            return -1\n    for (i, row) in enumerate(one_hot):\n        result.append(row.index(1))\n    return result"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    arr = np.array(x)\n    if isinstance(arr, np.ndarray):\n        return np.tolist(arr)\n    else:\n        return np.array(x).tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"\n    Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by tuple length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    freq = Counter()\n    for t in transactions:\n        for item in t:\n            freq[item] += 1\n    filtered_items = [item for item in freq if freq[item] >= min_sup]\n    filtered_items.sort(key=lambda x: -freq[x])\n    tree = {}\n    for item in filtered_items:\n        pass\n    result = []\n    for item in filtered_items:\n        result.append((item,))\n    for subset in itertools.chain.from_iterable((itertools.combinations(filtered_items, r) for r in range(1, len(filtered_items)))):\n        result.append(tuple(subset))\n    return sorted(result)"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return [-1]\n    (n_samples, n_features) = (len(X), len(X[0]))\n    result = []\n    for i in range(n_samples):\n        row = [1.0] * n_features\n        for k in combinations_with_replacement(range(n_features + 1), degree + 1):\n            product = 1.0\n            for j in range(len(k)):\n                product *= X[i][k[j]]\n            row[k] = product\n    return row.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    mean_y = np.mean(y)\n    squared_distances = (y - mean_y) ** 2\n    mse_value = np.mean(squared_distances)\n    return round(mse_value, 4)"}
{"task_id": 494, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"\n    Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model and\n        each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(preds, np.ndarray):\n        preds = np.array(preds)\n    X = preds\n    if len(X.shape) != 2:\n        raise ValueError('preds must be a 2D array')\n    n_samples = X.shape[1]\n    if classifier:\n        final_labels = []\n        for i in range(n_samples):\n            label_counts = np.bincount(X[i])\n            if np.any(label_counts == np.inf):\n                final_labels.append(np.argmin(label_counts))\n            else:\n                final_labels.append(np.argmax(label_counts))\n        return [int(final_labels[i]) for i in range(n_samples)]\n    else:\n        final_predictions = []\n        for i in range(n_samples):\n            avg = np.mean(X[i])\n            final_predictions.append(round(avg, 4))\n        return final_predictions"}
{"task_id": 495, "completion_id": 0, "solution": "import numpy as np\nfrom functools import reduce"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    if len(x) == 1:\n        x = [x]\n    y = [slope * xi + intercept for xi in x]\n    grad = [slope] * len(x)\n    grad2 = [0.0] * len(x)\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    return (np.array(y_rounded), np.array(grad_rounded), np.array(grad2_rounded))"}
{"task_id": 497, "completion_id": 0, "solution": "import numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"\n    Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        raise ValueError('Input must be a list or a numpy array.')\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    if order == 0:\n        return np.exp(x).tolist()\n    elif order == 1:\n        return np.exp(x).tolist()\n    elif order == 2:\n        return np.exp(x).tolist()\n    else:\n        return -1"}
{"task_id": 498, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"\n    Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n    result = []\n    if order == 0:\n        for val in x:\n            result.append(val)\n    elif order == 1:\n        for val in x:\n            if val > 0:\n                result.append(val)\n            else:\n                result.append(alpha * val)\n    elif order == 2:\n        for val in x:\n            result.append(0.0)\n    return list(result)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the valid range, return \u22121.\n    \"\"\"\n    if k == 0:\n        return []\n    if k > len(data[0]) or k < 1:\n        return [-1]\n    if k < 1 or k > len(data[0]):\n        return [-1]\n    mean = np.mean(data[:, 0:k])\n    std = np.std(data[:, 0:k], ddof=1)\n    if std == 0:\n        return [-1]\n    standardized_data = (data - mean) / std\n    n_samples = len(standardized_data)\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvectors, eigenvalues) = np.linalg.eig(cov_matrix)\n    (eigenvalues_sorted, eigenvectors_sorted) = (eigenvectors[::-1], eigenvectors[::-1])\n    eigenvectors_sorted = eigenvectors_sorted.copy()\n    for i in range(k):\n        eigenvectors_sorted[i] *= -1\n    projection = np.dot(standardized_data, eigenvectors_sorted[:k])\n    projected_data = round(projection, 4).tolist()\n    return projected_data"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the binary targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n    \n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n    \n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    c = np.mean(y_train)\n    M = n_estimators\n    eta = learning_rate\n    predictions = []\n    for _ in range(M):\n        F = c + eta * np.sum(y_train - np.array([x for x in X_train if x <= 0])) / len(X_train)\n        prediction = F > 0.5\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 501, "completion_id": 0, "solution": "def constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr"}
{"task_id": 502, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef hard_sigmoid(z: np.ndarray, order: int=0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return []\n    z_list = list(z)\n    if order == 0:\n        result = []\n        for val in z_list:\n            if val < -2.5:\n                result.append(0.0)\n            elif val <= 2.5:\n                result.append(0.2 * val + 0.5)\n            else:\n                result.append(1.0)\n        return list(map(lambda x: round(x, 4), result))\n    elif order == 1:\n        result = []\n        for val in z_list:\n            if val < -2.5:\n                result.append(0.2)\n            elif val >= -2.5 and val <= 2.5:\n                result.append(0.2)\n            else:\n                result.append(0.0)\n        return list(map(lambda x: round(x, 4), result))\n    else:\n        result = np.zeros_like(z)\n        for i in range(len(z)):\n            result[i] = 0.0\n        return list(map(lambda x: round(x, 4), result))"}
{"task_id": 503, "completion_id": 0, "solution": "from copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"\n    Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    hparams_copy = deepcopy(hparams)\n    if updates is not None:\n        for (key, value) in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = value\n    return hparams_copy"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted to a regular Python list of lists.\n    \"\"\"\n    h0_prob = np.dot(W, np.transpose(X)) + vbias\n    for _ in range(k):\n        pos_grad = np.dot(X.T, h0_prob)\n        neg_grad = np.dot(vbias.T, h0_prob)\n        W_new = W + learning_rate * (pos_grad - neg_grad) / len(X)\n        W = round(W_new, 4).tolist()\n    return W"}
{"task_id": 508, "completion_id": 0, "solution": "from typing import Any, Dict, List\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    result = []\n    for (key, value) in params.items():\n        if name in key:\n            result.append(value)\n    return result"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the Chebyshev (also called $L_\\\\infty$ or maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical length.\n    If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the vector lengths differ.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        return -1\n    if not np.array_equal(x, y):\n        return -1\n    differences = np.abs(np.array(x) - np.array(y))\n    max_diff = np.max(differences)\n    result = round(max_diff, 4)\n    return result"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"\n    Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n    \n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n    \n    Returns:\n        float: Average VAE loss rounded to exactly 6 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    reconstruction_loss = -np.sum((y & y_pred) * np.log2(y_pred + 1e-15)) / y.shape[0]\n    kl_divergence = -0.5 * (1 + t_log_var - t_mean ** 2 - t_log_var) / y.shape[0]\n    total_loss = reconstruction_loss + kl_divergence\n    rounded_total_loss = round(total_loss, 6)\n    return rounded_total_loss"}
{"task_id": 511, "completion_id": 0, "solution": "import numpy as np\ndef random_bernoulli_mab(n_arms: int=10) -> list[float]:\n    \"\"\"Random Bernoulli Multi-Armed Bandit Generator\n    \n    Args:\n        n_arms (int): Number of arms in the MAB environment\n        \n    Returns:\n        list[float]: A list of success probabilities for each arm, rounded to 4 decimal places.\n        \n    Raises:\n        ValueError: If n_arms < 1 or if the sum of probabilities exceeds 1.0\n        \n    Notes:\n        - Each probability is drawn from a continuous uniform distribution on [0, 1).\n        - The probabilities are normalized by dividing by the sum of the samples.\n        - All probabilities are rounded to four decimal places.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    samples = np.random.uniform(0, 1, size=n_arms)\n    total_sum = samples.sum()\n    normalized_samples = samples / total_sum\n    rounded_probabilities = [round(p * 10000, 4) / 10000 for p in normalized_samples]\n    return rounded_probabilities"}
{"task_id": 512, "completion_id": 0, "solution": "def pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"\n    Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple `(k_h, k_w)` pooling window size.\n        image_shape: Tuple `(n, c, h, w)` original tensor shape.\n        stride: Tuple `(s_h, s_w)` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer `-1`\n        when the configuration is impossible.\n    \"\"\"\n    (n, c, h, w) = image_shape\n    (k_h, k_w) = pool_shape\n    if not (k_h <= h and k_w <= w):\n        return -1\n    try:\n        out_h = (h - k_h) // stride[0] + 1\n        out_w = (w - k_w) // stride[1] + 1\n    except ZeroDivisionError:\n        return -1\n    return (out_h, out_w)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    if len(X) == 0 or len(V) == 0:\n        return []\n    (n_samples, n_features) = (len(X), len(X[0]))\n    k = len(V[0])\n    X_array = np.array(X)\n    result = np.dot(w, X_array) + w0\n    for f in range(k):\n        term1 = np.dot(np.sum(X_array[:, f] * V[f]), X_array[:, f])\n        term2 = np.sum(X_array[:, f] ** 2)\n        quadratic_term = (term1 ** 2 - term2) / 2\n        result += quadratic_term\n    result_rounded = np.round(result, 4)\n    return list(map(lambda x: round(x, 4), result_rounded))"}
{"task_id": 514, "completion_id": 0, "solution": "def switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, None\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    if not set_train and (not set_test):\n        return 'training' if current_phase == 'testing' else 'testing'\n    if not set_train and set_test is not None:\n        return 'training' if set_test else 'testing'\n    if set_train is not None and set_test is not None:\n        return 'training' if set_train else 'testing'\n    if current_phase not in ['training', 'testing']:\n        return '-1'\n    if set_train is not None and set_test is not None:\n        return 'training' if set_train else 'testing'\n    if set_train is not None and set_test is not None:\n        return '-1'\n    if set_train is not None:\n        return 'training' if set_train else 'testing'\n    if set_test is not None:\n        return 'testing' if set_test else 'training'\n    return '-1'"}
{"task_id": 515, "completion_id": 0, "solution": "from typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    result = {}\n\n    def _flatten(key, value):\n        if isinstance(value, dict):\n            for (sub_key, sub_value) in value.items():\n                if key == '':\n                    result[sub_key] = sub_value\n                else:\n                    result[key + '.' + sub_key] = _flatten(sub_key, sub_value)\n        elif isinstance(value, (list, tuple, str, int, bool)):\n            result[key] = value\n        else:\n            result[key] = value\n    _flatten('', params)\n    return result"}
{"task_id": 516, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    if isinstance(a, list) and isinstance(b, list):\n        a = np.array(a)\n        b = np.array(b)\n    elif isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        pass\n    if len(a) != len(b):\n        return -1\n    squared_distance = sum(((x - y) ** 2 for (x, y) in zip(a, b)))\n    distance = math.sqrt(squared_distance)\n    return round(distance, 4)"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()`'', where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.sinh(z).tolist()\n    elif isinstance(z, (int, float)):\n        return round(np.sigmoid(z), 4)\n    else:\n        return np.array(list(z)).tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        actual_shape = np.shape(args[0])\n        predicted_shape = np.shape(args[1])\n        if actual_shape[1] > 1:\n            actual = np.argmax(actual, axis=1)\n        if predicted_shape[1] > 1:\n            predicted = np.argmax(predicted, axis=1)\n        return function(*args, **kwargs)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(z, (list, np.ndarray)):\n        return np.array([np.round(x, 4) for x in z])\n    result = np.multiply(z, 1 - z)\n    return np.round(result, 4)"}
{"task_id": 521, "completion_id": 0, "solution": "import numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero. Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return int(z > 0)\n    elif isinstance(z, np.ndarray):\n        return z.copy().astype(int).tolist()\n    elif isinstance(z, list):\n        return [int(x > 0) for x in z].tolist()\n    else:\n        raise ValueError('Input must be a scalar, list, or NumPy array.')"}
{"task_id": 522, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    np.random.seed(42)\n    weight_array = np.array([np.random.normal(loc=0, scale=1, size=weight_shape) for _ in range(10)])\n    rounded_weights = [round(x, 4) for x in weight_array]\n    return rounded_weights.tolist()"}
{"task_id": 523, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 1:\n        return [[np.random.normal(loc=0, scale=np.sqrt(2 / weight_shape[0]), size=weight_shape[0]) for _ in range(weight_shape[0])] for _ in range(weight_shape[0])]\n    elif len(weight_shape) == 3:\n        n_in = weight_shape[0] * weight_shape[1]\n        n_out = weight_shape[2] * weight_shape[3]\n        return [[np.random.normal(loc=0, scale=np.sqrt(2 / n_in), size=n_in) for _ in range(n_out)] for _ in range(n_in)]\n    else:\n        n_in = weight_shape[0]\n        return [[np.random.normal(loc=0, scale=np.sqrt(2 / n_in), size=n_in) for _ in range(n_in)] for _ in range(n_in)]"}
{"task_id": 525, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: np.ndarray, y: np.ndarray, lambda_: float=0.0) -> tuple[list[float], float]:\n    \"\"\"\n    Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n    \n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n    \n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    X_mean = np.mean(X, axis=0)\n    X_centered = X - X_mean\n    A = X_centered.T @ X_centered + lambda_ * np.eye(len(X[0]))\n    if np.linalg.matrix_rank(A) == len(X[0]):\n        w_pseudo = np.linalg.pinv(A)\n    else:\n        w = np.linalg.inv(A)\n    weights = w.T @ y\n    b = np.mean(y) - np.dot(X_mean, weights)\n    weights_rounded = [round(w, 4) for w in weights]\n    bias_rounded = round(b, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 527, "completion_id": 0, "solution": "import os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"\n    Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    file_ext = os.path.splitext(file_path)[1].lower()\n    allowed_formats = {'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'], 'zip': ['.zip']}\n    if archive_format is None:\n        return True\n    elif isinstance(archive_format, list):\n        for format in archive_format:\n            if format in allowed_formats:\n                return True\n    elif isinstance(archive_format, str):\n        if format in allowed_formats:\n            return True\n    else:\n        return False"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    min_x = min((x[0] for x in X))\n    max_x = max((x[0] for x in X))\n    min_y = min((x[1] for x in X))\n    max_y = max((x[1] for x in X))\n    x1_plot = np.linspace(min_x, max_x, grid_n)\n    x2_plot = np.linspace(min_y, max_y, grid_n)\n    labels = []\n    for x1 in x1_plot:\n        for x2 in x2_plot:\n            val = W[0] * x1 + W[1] * x2 + b\n            if val >= 0:\n                labels.append(1)\n            else:\n                labels.append(-1)\n    return labels"}
{"task_id": 529, "completion_id": 0, "solution": "import math\ndef generate_progress_bar(current: int, target: int | None, width: int=30) -> str:\n    \"\"\"\n    Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is not None:\n        d = len(str(target))\n    else:\n        d = 7\n    prog_width = int(width * current / target)\n    result = f'{current}/{target}[' + ('#' if prog_width > 0 else '=') + ']'\n    if target != None:\n        if current < target:\n            result += '>'\n        else:\n            result += '='\n    result += '.' * (width - prog_width) + ']'\n    return result"}
{"task_id": 530, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.clip(y_pred, 1e-07, 1 - 1e-07)\n    log_p = np.log2(y_pred)\n    log_1p = np.log2(1 - y_pred)\n    loss_per_sample = -np.sum((y_true * log_p + (1 - y_true) * log_1p) / 2)\n    return loss_per_sample / len(y_true)"}
{"task_id": 531, "completion_id": 0, "solution": "import numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if not symmetric:\n        if window_len < 2:\n            raise ValueError('Window length must be at least 2')\n        theta = np.pi / window_len\n        result = np.cos(theta * np.arange(window_len))\n    else:\n        theta = np.pi / window_len\n        result = np.sum(coefs * np.cos(theta * np.arange(window_len)))\n    rounded_result = round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 532, "completion_id": 0, "solution": "def count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total = 0\n    for i in range(len(layers) - 1):\n        (n_in, n_out) = (layers[i], layers[i + 1])\n        total += n_in * n_out\n        total += n_out\n    return total"}
{"task_id": 533, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"\n    Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        x = [x]\n    if len(x) == 1:\n        return round(np.exp(-(x - mean) ** 2 / (2 * sigma ** 2)) / (sigma * np.sqrt(2 * np.pi)), 4)\n    return np.array([round(np.exp(-(point - mean) ** 2 / (2 * sigma ** 2)) / (sigma * np.sqrt(2 * np.pi)), 4) for point in x]).tolist()"}
{"task_id": 534, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return round(Z * 0.5 * np.exp(np.log(1 + Z)), 4)\n    elif isinstance(Z, list):\n        return np.array(list(map(lambda x: round(x * 0.5 * np.exp(np.log(1 + x)), 4), Z))).tolist()\n    else:\n        return np.array(list(map(lambda x: round(x * 0.5 * np.exp(np.log(1 + x)), 4), Z))).tolist()"}
{"task_id": 536, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression(X_train, y_train, X_test, method='normal', alpha=0.01, num_iter=1000):\n    \"\"\"\n    Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    X = np.hstack((X_train, np.ones((X_train.shape[0], 1))))\n    if method == 'normal':\n        X_t_x = X.T @ X\n        X_t_y = X.T @ y_train\n        theta = np.linalg.inv(X_t_x) @ X_t_y\n    else:\n        theta = np.zeros_like(X_train)\n        for _ in range(num_iter):\n            current_theta = theta.copy()\n            gradient = X.T @ (X @ theta - y_train)\n            theta -= alpha / len(X) * gradient\n    predictions = X_test @ theta\n    predictions_rounded = np.round(predictions, 4)\n    return predictions_rounded.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Implements a Gaussian Naive Bayes classifier from scratch.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels (0 or 1).\n        X_test: 2-D NumPy array of shape (m_samples, n_features) containing the data to classify.\n\n    Returns:\n        A Python list of integers where each element is the predicted class label (0 or 1).\n    \"\"\"\n    class_prior = np.bincount(y_train)\n    (n_samples, n_features) = X_train.shape\n    mean_vals = np.zeros((2, n_features))\n    std_vals = np.zeros((2, n_features))\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        if y == 0:\n            class_prior[1] += 1\n        else:\n            class_prior[0] += 1\n        mean_vals[y][i] = np.mean(x)\n        std_vals[y][i] = np.std(x)\n    std_vals[:, :] += 1e-09\n    m_samples = X_test.shape[0]\n    result = []\n    for i in range(m_samples):\n        x = X_test[i]\n        y = y_train[i]\n        log_likelihood_0 = -std_vals[0][i] * (np.log(mean_vals[0][i]) - np.log(1.0 + std_vals[0][i]))\n        log_likelihood_1 = -std_vals[1][i] * (np.log(mean_vals[1][i]) - np.log(1.0 + std_vals[1][i]))\n        total_log_prob = log_likelihood_0 + log_likelihood_1\n        if total_log_prob > 0:\n            result.append(0)\n        else:\n            result.append(1)\n    return result"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for a neural network.\n    \n    Args:\n        AL: Array of shape (m, 1), representing model probabilities.\n        Y: Array of shape (m, 1), representing true labels (0 or 1).\n        \n    Returns:\n        float: The computed cost, rounded to four decimal places.\n    \"\"\"\n    m = len(AL)\n    num_samples = len(Y)\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    log_loss = -np.sum(np.log(AL) + (1 - Y) * np.log(1 - AL)) / m\n    return round(log_loss, 4)"}
{"task_id": 540, "completion_id": 0, "solution": "import numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    \u03c3 = 1 / (1 + np.exp(-Z))\n    derivative = \u03c3 * (1 - \u03c3)\n    return derivative.tolist()"}
{"task_id": 541, "completion_id": 0, "solution": "import numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"\n    Compute the gradient of Binary Cross-Entropy loss with respect to the network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    if y.shape != y_hat.shape:\n        raise ValueError('Input arrays must have the same shape')\n    grad = y_hat - y\n    grad_rounded = np.round(grad, 4)\n    return grad_rounded.tolist()"}
{"task_id": 542, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"\n    Implement a single optimization step of the RMSProp algorithm.\n\n    Args:\n        params: A list of NumPy arrays (parameters)\n        grads: A list of NumPy arrays (gradients)\n        s: Optional list of NumPy arrays (running averages). If not provided, created internally.\n        alpha: Learning rate coefficient\n        beta: Weight decay coefficient\n        epsilon: Regularization term to avoid division by zero\n\n    Returns:\n        tuple of lists: new_params and new_s\n        - new_params: Updated parameters rounded to 6 decimal places\n        - new_s: Updated running averages\n    \"\"\"\n    if s is None or len(s) == 0:\n        s = [np.zeros((p.shape[0], p.shape[1])) for p in params]\n    running_s = []\n    for (i, param) in enumerate(params):\n        if i < len(s):\n            current_s = s[i].copy()\n        else:\n            current_s = np.zeros_like(param)\n        running_s.append(current_s)\n    new_params = []\n    new_s = []\n    for (i, (param, grad)) in enumerate(zip(params, grads)):\n        if i < len(running_s):\n            current_s = running_s[i]\n        else:\n            current_s = np.zeros_like(param)\n        new_s_i = beta * current_s + (1 - beta) * grad ** 2\n        new_param = param - alpha * new_s_i / (np.sqrt(new_s_i) + epsilon)\n        new_param = np.round(new_param, 6)\n        new_params.append(new_param)\n        new_s.append(new_s_i)\n    return (new_params, new_s)"}
{"task_id": 543, "completion_id": 0, "solution": "from collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    counts = Counter(data)\n    gini = 1 - sum((p * p for p in counts.values()))\n    gini_rounded = round(gini, 4)\n    return gini_rounded"}
{"task_id": 544, "completion_id": 0, "solution": "def split_tree(data: list, fea: int, value: float):\n    \"\"\"\n    Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    if not data:\n        return ([], [])\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)"}
{"task_id": 545, "completion_id": 0, "solution": "def tree_stats(root: 'node | None') -> tuple[int, int]:\n    if not root:\n        return (0, 0)\n\n    def _tree_stats(node):\n        if node is None:\n            return (0, 0)\n        fea = node.fea\n        value = node.value\n        results = node.results\n        left_child = node.left\n        right_child = node.right\n        (left_count, left_depth) = _tree_stats(left_child)\n        (right_count, right_depth) = _tree_stats(right_child)\n        if results is not None:\n            return (left_count + right_count + 1, max(left_depth, right_depth))\n        else:\n            return (left_count + right_count, max(left_depth, right_depth))\n    return _tree_stats(root)"}
{"task_id": 546, "completion_id": 0, "solution": ""}
{"task_id": 547, "completion_id": 0, "solution": "import numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    if len(obs) < 1 or t < 0 or len(S) != len(obs):\n        return -1\n    if len(A) != len(B[0]):\n        return -1\n    if len(S) != len(B[0]):\n        return -1\n    alpha = np.dot(S, B[obs[0]])\n    for i in range(1, t + 1):\n        current_alpha = np.dot(alpha, A[i - 1])\n        alpha = np.dot(current_alpha, B[obs[i]])\n    alpha_rounded = round(alpha, 4)\n    return alpha_rounded.tolist()"}
{"task_id": 548, "completion_id": 0, "solution": "import numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"\n    Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    if not isinstance(obs, list) or len(obs) <= 0 or t < 0 or (t >= len(obs)):\n        return np.array([-1.0] * len(pi))\n    if not all((isinstance(x, float) for x in pi)) or not all((isinstance(x, float) for x in A)) or (not all((isinstance(x, float) for x in B))):\n        raise ValueError('All parameters must be floats')\n    (M, N) = (len(B), len(pi))\n    if len(obs) != N:\n        raise ValueError('Observation length does not match the number of states')\n    if t < 0 or t >= len(obs):\n        return np.array([-1.0] * len(pi))\n    \u03b1 = np.zeros((N, len(obs)))\n    \u03b1[0] = np.dot(pi, B[:, obs[0]])\n    for i in range(1, len(obs)):\n        \u03b1[i] = np.dot(\u03b1[i - 1], A[i]) * B[obs[i], obs[i + 1]]\n    \u03b2 = np.zeros((len(obs), N))\n    \u03b2[-1, :] = np.ones(N) * 1.0\n    for i in range(len(obs) - 2, -1, -1):\n        \u03b2[i] = np.dot(B[obs[i + 1], :], \u03b2[i + 1])\n    xi = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            xi[i][j] = alpha[i] * np.dot(A[i][j], beta[j]) / np.sum(beta)\n    xi = np.round(xi, 4)\n    return xi"}
{"task_id": 549, "completion_id": 0, "solution": "import numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1.0\n    x_array = np.array(x)\n    y_array = np.array(y)\n    squared_distance = np.sum((x_array - y_array) ** 2)\n    rounded_distance = rounded_squares(squared_distance)\n    return rounded_distance\ndef rounded_squares(value):\n    \"\"\"Round a number to four decimal places.\"\"\"\n    return round(value, 4)"}
{"task_id": 551, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    \"\"\"\n    Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature values.  \n        The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n    n_samples = X.shape[0]\n    if n_samples == 0:\n        return (-1, None, 0.0)\n    best_feature_index = -1\n    best_split_value = None\n    best_gini = 0.0\n    for feature_index in range(X.shape[1]):\n        for split_value in set(X[:, feature_index].unique()):\n            left = X[:, feature_index] == split_value\n            left_size = np.sum(left)\n            right_size = n_samples - left_size\n            left_count = len(y[left])\n            right_count = len(y[~left])\n            gini_left = 1 - (left_count / n_samples) ** 2\n            gini_right = 1 - (right_count / n_samples) ** 2\n            weight = left_size / n_samples\n            current_gini = weight * gini_left + (1 - weight) * gini_right\n            if abs(current_gini - best_gini) < epsilon:\n                best_gini = current_gini\n                best_feature_index = feature_index\n                best_split_value = split_value\n                best_gini = current_gini\n    if best_gini <= epsilon and best_split_value is not None:\n        return (best_feature_index, best_split_value, best_gini)\n    return (-1, None, 0.0)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    if t < 0 or t >= len(observations):\n        return []\n    alpha = [0] * len(observations)\n    alpha[observations.index(t)] = 1.0\n    for i in range(len(observations)):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        forward_prob = current_state * B[i] * np.exp(-np.log(next_state))\n        alpha[i] = forward_prob\n    beta = [0] * len(observations)\n    beta[observations.index(t)] = 1.0\n    for i in range(len(observations) - 1, -1, -1):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        beta[i] = beta[i + 1] * current_state * B[i] * np.exp(-np.log(next_state))\n    gamma = []\n    for i in range(len(observations)):\n        if i == observations.index(t):\n            continue\n        current_state = A[i]\n        next_state = A[i + 1]\n        prob = alpha[i] * beta[i]\n        gamma.append(round(prob, 4))\n    return gamma"}
{"task_id": 553, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test: Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    X_train = np.column_stack((X_train, np.ones(X_train.shape[1])))\n    X_test = np.column_stack((X_test, np.zeros(X_test.shape[1])))\n    w = np.zeros_like(X_train, dtype=np.float64)\n    for _ in range(max_iter):\n        loss_derivative = X_train.T * (y_train - np.exp(-np.dot(w, X_train))) / np.sum(X_train, axis=0)\n        w += alpha * loss_derivative\n    predictions = [int(w[i] > 0.5) for i in range(len(X_test))]\n    return predictions"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN) algorithm from scratch.\n\n    Parameters:\n    data: np.ndarray with shape (n_samples, n_features)\n    eps: Radius for the neighborhood\n    min_samples: Minimum number of points required to form a core point\n\n    Returns:\n    list[int]: Cluster labels for each sample. Noise points receive -1.\n    \"\"\"\n    if len(data.shape) != 2:\n        raise ValueError('Data must be a 2D array')\n    X = data.tolist()\n    (n_samples, n_features) = X.shape\n    cluster_labels = [-1] * n_samples\n    distances = np.linalg.norm(X[:, :n_features - 1], axis=1)\n    neighbors = []\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.linalg.norm(X[i, :n_features - 1] - X[j, :n_features - 1])\n            neighbors.append((i, j, distance))\n    core_points = []\n    for i in range(n_samples):\n        count = 0\n        for j in range(i + 1, n_samples):\n            if distances[j] < eps:\n                count += 1\n        if count >= min_samples:\n            core_points.append(i)\n    queue = deque()\n    visited = [False] * n_samples\n    for i in core_points:\n        queue.append(i)\n        visited[i] = True\n        cluster_labels[i] = 1\n    while queue:\n        current = queue.popleft()\n        for (neighbor, _, _) in neighbors:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                cluster_labels[neighbor] = cluster_labels[current]\n                queue.append(neighbor)\n    return cluster_labels"}
{"task_id": 559, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int]=None, right: 'Optional[Node]'=None, left: 'Optional[Node]'=None):\n        self.val = val\n        self.right = right\n        self.left = left\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"\n    Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or None (empty tree).\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf. If the tree is empty, the list is empty as well.\n    \"\"\"\n    if not root:\n        return []\n    result = []\n\n    def dfs(node):\n        nonlocal result\n        if not node:\n            return\n        if not node.left and (not node.right):\n            result.append(node.val)\n        dfs(node.left)\n        dfs(node.right)\n    dfs(root)\n    return result"}
{"task_id": 560, "completion_id": 0, "solution": "import math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n\n    def get_closest_point(node, query):\n        if not node:\n            return None\n        distance_sq = sum(((x - query[i]) ** 2 for i in range(len(query))))\n        best_index = None\n        min_distance_sq = float('inf')\n        if node['index'] is not None:\n            current_distance_sq = distance_sq\n            if current_distance_sq < min_distance_sq:\n                min_distance_sq = current_distance_sq\n                best_index = node['index']\n        left = node['left']\n        right = node['right']\n        left_result = get_closest_point(left, query)\n        right_result = get_closest_point(right, query)\n        if left_result is not None:\n            combined_distance_sq = left_result['distance_sq'] + distance_sq\n            if combined_distance_sq < min_distance_sq:\n                min_distance_sq = combined_distance_sq\n                best_index = left_result['index']\n        if right_result is not None:\n            combined_distance_sq = distance_sq + right_result['distance_sq']\n            if combined_distance_sq < min_distance_sq:\n                min_distance_sq = combined_distance_sq\n                best_index = right_result['index']\n        return best_index if best_index is not None else None\n    root = build_kd_tree(points)\n    result = []\n    indices = get_closest_point(root, query)\n    if k <= len(indices):\n        result.extend(indices[:k])\n    else:\n        result.extend(indices)\n    return sorted(result)\ndef build_kd_tree(points):\n    if not points:\n        return {}\n    axis = next(iter(points[0]))\n    mid_index = len(points) // 2\n    node = {'index': mid_index, 'axis': axis, 'left': None, 'right': None}\n    left_points = [point for point in points[:mid_index]]\n    right_points = [point for point in points[mid_index + 1:]]\n    node['left'] = build_kd_tree(left_points)\n    node['right'] = build_kd_tree(right_points)\n    return node"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n    \n    Args:\n        data: A 2-D NumPy array containing N samples with D features.\n        k: The number of Gaussian components.\n        max_iter: Maximum number of iterations.\n        epsilon: Tolerance for convergence (change in mixture weights).\n        \n    Returns:\n        A list of integers of length N, where each integer represents the cluster label for the corresponding sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if n_samples == 0:\n        return []\n    mu = np.random.normal(0, 1 / k, size=(n_samples, n_features))\n    sigma = np.random.uniform(0.001, 10, size=(n_samples, n_features))\n    weights = np.ones(k) / k\n    for _ in range(max_iter):\n        log_likelihood = np.log(np.sum(weights * np.exp(-np.dot(mu[:, :], data)) / sigma ** 2))\n        current_labels = [i for i in range(k) if np.argmax(log_likelihood) == i]\n        mu_new = np.mean(data, axis=0) * weights\n        sigma_new = np.std(data, axis=0) * weights\n        weights = np.array([w * (data - mu_new) ** 2 / sigma_new ** 2 for (w, mu, sigma) in zip(weights, mu, sigma)])\n        if np.max(abs(weights)) < epsilon:\n            break\n    sorted_components = sorted(zip(mu, sigma, weights), key=lambda x: x[0])\n    labels = [int(i) for i in sorted_components]\n    return labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    (N, D) = data.shape\n    dist_matrix = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i + 1, N):\n            dist_matrix[i, j] = np.sum(data[i, :] ** 2) - 2 * np.dot(data[i, :], data[j, :]) ** 2\n    w = np.exp(-gamma * dist_matrix)\n    D = np.diag(np.sum(w, axis=0))\n    if method == 'unnormalized':\n        L = D - w\n    else:\n        L = np.diag(1 / D) * np.sqrt(D) * w\n    eigenvectors = np.linalg.eig(L)[1][:n_cluster]\n    initial_centroids = data[:n_cluster, :]\n    labels = np.cluster_centers_init(initial_centroids, n_cluster)\n    labels = np.where(labels < n_cluster, 0, 1)\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    alpha = np.zeros_like(y_data)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated_alpha = alpha.copy()\n        updated_b = b.copy()\n        for i in range(len(y_data)):\n            g = np.sum(alpha * G[i, :])\n            current_value = g + b\n            if current_value <= 0:\n                updated_alpha[i] += eta\n                updated_b += eta * y_data[i]\n        alpha = updated_alpha\n        b = updated_b\n    w = np.dot(alpha, X_data)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        while root is not None:\n            if root.y is not None:\n                return root.y\n            label = root.label\n            feature_value = features[0]\n            for child in root.child:\n                if child.x == feature_value:\n                    break\n            else:\n                child = root.child[1]\n            root = child\n    elif task_type == 'regression':\n        while root is not None:\n            if root.y is not None:\n                return root.y\n            label = root.label\n            feature_value = features[0]\n            if feature_value <= root.s:\n                child = root.child[0]\n            else:\n                child = root.child[1]\n            root = child\n    return root.y"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    H_y = -np.sum(y * (1.0 / len(y)) * np.log2(1.0 / len(y)))\n    max_information_gain = -math.inf\n    for i in range(len(X.columns)):\n        group1 = X.iloc[:, i].copy()\n        group2 = X.iloc[:, i].copy()\n        y_split = y.copy()\n        y_split[y == group1.values] = 0\n        H_y_split = -np.sum(y_split * (1.0 / len(y_split)) * np.log2(1.0 / len(y_split)))\n        info_gain = H_y - H_y_split\n        if info_gain > max_information_gain:\n            max_information_gain = info_gain\n    return (i + 1, round(max_information_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation for anomaly detection.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input data must be a NumPy array')\n    if len(data.shape) != 2 or len(data.shape[1]) < 2:\n        raise ValueError('Data must have two columns')\n    X = data.reshape(-1, 1)\n    if sample_size > len(X):\n        sample_size = len(X)\n    height_limit = int(math.log2(sample_size))\n    trees = []\n    for _ in range(n_trees):\n        subsample = np.random.choice(len(X), size=sample_size, replace=False)\n        path_lengths = []\n        current_subsample = X[subsample]\n        depth = 0\n        while True:\n            if depth >= height_limit:\n                break\n            new_subsample = []\n            random_feature = np.random.randint(0, len(current_subsample))\n            min_val = current_subsample.min()\n            max_val = current_subsample.max()\n            split_point = np.random.uniform(min_val, max_val)\n            max_leaf_count = 0\n            leaf_index = -1\n            for (i, val) in enumerate(current_subsample):\n                if val == split_point:\n                    leaf_index = i\n                    count = current_subsample[i]\n                    if count > max_leaf_count:\n                        max_leaf_count = count\n                        leaf_index = i\n            if leaf_index == -1:\n                break\n            trees.append({'subsample': current_subsample, 'leaf_index': leaf_index, 'path_length': path_lengths, 'depth': depth + 1})\n            depth += 1\n        scores = []\n        for (idx, x) in enumerate(X):\n            score = 2 ** (-sum((tree['path_length'][idx] for tree in trees)))\n            scores.append(score)\n        avg_h = sum((tree['path_length'][idx] for tree in trees)) / len(trees)\n        phi = 2 * math.log(len(trees) - 1) - 2 * (len(trees) - 1) / len(trees)\n        s_score = 2 ** (-avg_h / phi)\n        outliers_indices = []\n        for (idx, score) in enumerate(scores):\n            if score >= s_score * epsilon:\n                outliers_indices.append(idx)\n        return sorted(outliers_indices)"}
{"task_id": 567, "completion_id": 0, "solution": "import numpy as np\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"\n    Perform ensemble majority voting on the predictions of multiple decision trees.\n    \n    Parameters:\n    predictions: A 2-D list where each row contains the predictions made by one tree\n    and each column groups the votes for a single sample.\n    \n    Returns:\n    list[int]: The final class label for every sample after majority voting. In a tie,\n               the smallest label must be chosen.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    num_samples = predictions_array.shape[1]\n    result = []\n    for i in range(num_samples):\n        counts = np.unique(predictions_array[:, i], return_counts=True)\n        (label, _) = counts\n        if len(label) == 1:\n            result.append(label[0])\n        else:\n            sorted_labels = np.sort(label)\n            result.append(sorted_labels[0])\n    return result"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Implement a Maximum Entropy (MaxEnt) classifier using Generalized Iterative Scaling (GIS).\n    \n    Parameters:\n    - X_train: Training samples (numpy array)\n    - y_train: Training labels (numpy array)\n    - X_test: Test samples to classify (numpy array)\n    - epsilon: Convergence threshold for weight updates (float, default 1e-3)\n    - n_iter: Number of iterations to perform (int, default 100)\n    \n    Returns: A list of predicted labels for each test sample.\n    \"\"\"\n    feature_values = defaultdict(list)\n    for (x, y) in zip(X_train, y_train):\n        feature_values[x].append(y)\n    weights = np.zeros(len(feature_values))\n    for _ in range(n_iter):\n        new_weights = weights.copy()\n        for i in range(len(feature_values)):\n            current_value = feature_values[i][0]\n            label = feature_values[i][-1]\n            f = np.array([1 if i == feature_index and feature_value == value else 0 for (feature_index, feature_value, y) in zip(range(len(X_train)), X_train, y_train)])\n            log_likelihood = np.sum(weights * f)\n            new_weights[i] = weights[i] + log_likelihood / n_iter * (current_value - label)\n        max_update = max(np.abs(new_weights - weights), key=np.abs)\n        if abs(max_update) < epsilon:\n            break\n        weights = new_weights\n    predicted_labels = []\n    for (x, y) in zip(X_test, y_train):\n        prob = np.exp(np.sum(weights * (x - y)))\n        predicted_label = label_to_int(prob)\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    counts = {}\n    total_documents = len(data)\n    for (label, words) in data:\n        count = Counter(words)\n        for (word, freq) in count.items():\n            counts[word] = freq\n    word_freqs = []\n    for (word, freq) in counts.items():\n        ratio = freq / total_documents\n        word_freqs.append((word, round(ratio, 4)))\n    sorted_words = sorted(word_freqs, key=lambda x: -x[1])\n    if cut_off is None:\n        return (sorted_words, set(sorted_words))\n    elif len(sorted_words) < cut_off:\n        return (sorted_words, set(sorted_words))\n    else:\n        return (sorted_words[:cut_off], set(sorted_words[:cut_off]))"}
{"task_id": 570, "completion_id": 0, "solution": "from collections import defaultdict\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]], keywords: set[str], test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n    \n    The classifier treats every word in *keywords* as a binary feature that is either present or absent in a document.  Words outside *keywords* are ignored.  Training follows the standard Bernoulli model *without* any form of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of (label, tokens) pairs forming the training set.\n        keywords: Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in test_samples (same order as input).\n    \"\"\"\n    class_counts = defaultdict(lambda : defaultdict(int))\n    for (label, tokens) in train_data:\n        for w in tokens:\n            if w in keywords:\n                class_counts[label][w] += 1\n    log_probabilities = {}\n    for label in class_counts:\n        for keyword in class_counts[label]:\n            if class_counts[label][keyword] > 0:\n                log_prob = class_counts[label][keyword] * log(1.0 / (1 + class_counts[label][keyword]))\n                log_probabilities[label, keyword] = log_prob\n    predictions = []\n    for tokens in test_samples:\n        current_log_likelihood = 1.0\n        for keyword in keywords:\n            if keyword in tokens:\n                current_log_likelihood *= log_probabilities[tokens[0], keyword]\n        for keyword in keywords:\n            if keyword not in tokens:\n                current_log_likelihood *= 1.0 - log_probabilities[tokens[0], keyword]\n        predictions.append(label)\n    return predictions"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"\n    Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D Numarray of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X, alpha)\n    b = np.mean(y) - np.dot(alpha, np.array([X[0] if y[0] == -1 else 1 for _ in range(len(X))]))\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implements the Local Outlier Factor (LOF) algorithm from scratch.\n    \n    Args:\n        data: A 2D NumPy array of shape (n_samples, n_features).\n        k: Integer, the number of nearest neighbors to consider.\n        epsilon: A float, the threshold for considering a sample as an outlier.\n    \n    Returns:\n        tuple: A tuple containing two lists:\n            - The list of LOF scores rounded to four decimal places.\n            - The list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n    \"\"\"\n    n_samples = len(data)\n    n_features = data.shape[1]\n    distances_matrix = np.sqrt(np.sum((data - np.mean(data, axis=0)) ** 2, axis=1))\n    N_k = []\n    for i in range(n_samples):\n        idx = np.argsort(distances_matrix[i])\n        N_k.append(idx[:k])\n        reach_dist = np.max(distances_matrix[i][idx[:k]], distances_matrix[i][idx[k:]])\n        LRD_k = k / np.sum(reach_dist[idx[:k]])\n        LOF_k = sum(LRD_k * reach_dist[idx[:k]] / distances_matrix[i][idx[:k]]) / distances_matrix[i][idx[:k]] / LRD_k\n    scores = np.round(LOF_k, 4)\n    outlier_indices = [i for (i, score) in enumerate(scores) if score > epsilon]\n    return (scores.tolist(), outlier_indices)"}
{"task_id": 573, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"\n    Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    w = np.zeros((X_train.shape[1],))\n    b = 0.0\n    error_count_history = []\n    for _ in range(n_iter):\n        error_count = 0\n        for (x, y) in zip(X_train, y_train):\n            prediction = np.dot(w, x) + b\n            if y * prediction <= 0:\n                w += eta * y * x\n                b += eta * y\n                error_count += 1\n        error_count_history.append(error_count)\n        if error_count == 0:\n            break\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    return (w_rounded.tolist(), b_rounded, error_count_history)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    base = 10 * (m // 2) + 5\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    for c in range(m):\n        base_c = 10 * (c // 2) + 5\n        x_min = base_c + 1\n        x_max = base_c + 9\n        y_min = base_c + 1\n        y_max = base_c + 9\n        x = np.random.uniform(x_min, x_max, size=(n_train, 1))\n        y = np.random.uniform(y_min, y_max, size=(n_train, 1))\n        X_train[:, 0] = x\n        X_train[:, 1] = y\n        x = np.random.uniform(x_min, x_max, size=(n_val, 1))\n        y = np.random.uniform(y_min, y_max, size=(n_val, 1))\n        X_val[:, 0] = x\n        X_val[:, 1] = y\n    y_train = np.zeros((m * n_train,))\n    y_val = np.zeros((m * n_val,))\n    for i in range(m * n_train):\n        y_train[i] = np.random.randint(0, m)\n    for i in range(m * n_val):\n        y_val[i] = np.random.randint(0, m)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 577, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function must create two NumPy arrays with coordinates and two with labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((n_train * m, 2))\n    X_val = np.zeros((n_val * m, 2))\n    y_train = np.zeros(n_train, dtype=int)\n    y_val = np.zeros(n_val, dtype=int)\n    for i in range(m):\n        class_x_start = (i // 2 + 0.1) * 10\n        class_x_end = (i // 2 + 0.9) * 10\n        for j in range(n_train):\n            x = round(random.uniform(class_x_start, class_x_end), 4)\n            X_train[j * m + i, 0] = x\n        for k in range(n_val):\n            x = round(random.uniform(i % 2 * 0.5 + 0.1, i % 2 * 0.5 + 0.9), 4)\n            X_val[k * m + i, 0] = x\n    y = [(i - 0.5) * 2 for i in range(m)]\n    y_train = [round(y[i], 4) for i in range(n_train)]\n    y_val = [round(y[i], 4) for i in range(n_val)]\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 578, "completion_id": 0, "solution": "from typing import List, Tuple\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    result = []\n    for i in range(len(corpus) - 1):\n        result.append((corpus[i], corpus[i + 1]))\n    return result"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in X into k groups using the K-Means algorithm.\n\n    The first k points serve as the initial cluster centers.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    initial_centers = X[:k]\n    initial_centers = np.round(initial_centers, 4)\n    for _ in range(max_iters):\n        new_labels = []\n        for i in range(len(X)):\n            distances = np.linalg.norm(X[i] - initial_centers)\n            min_index = np.argmin(distances)\n            new_labels.append(min_index)\n        updated_centers = []\n        for center_index in range(k):\n            sum_points = np.sum(X[np.where(new_labels == center_index)], axis=0)\n            mean_center = sum_points / len(X)\n            updated_centers.append(np.round(mean_center, 4))\n        changed = False\n        for i in range(len(X)):\n            if new_labels[i] != old_labels[i]:\n                changed = True\n                break\n        if not changed:\n            break\n    old_labels = new_labels.copy()\n    return (old_labels, updated_centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"\n    Fits a linear model with Elastic-Net regularisation using batch gradient descent.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a float. Every number must be rounded to four decimal places.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not X.shape[0] == X.shape[1]:\n        raise ValueError('X must be a 2D numpy array')\n    if not isinstance(y, np.ndarray) or not y.ndim == 1 or len(y) <= 0:\n        raise ValueError('y must be a 1-D numpy array')\n    if not isinstance(iterations, int) or iterations <= 0:\n        return ([0.0] * len(X), 0.0)\n    if not isinstance(l1_penalty, float) or l1_penalty <= 0:\n        return ([0.0] * len(X), 0.0)\n    if not isinstance(l2_penalty, float) or l2_penalty <= 0:\n        return ([0.0] * len(X), 0.0)\n    weights = [0.0] * len(X)\n    bias = 0.0\n    if any((w == 0 for w in weights)) or any((b == 0 for b in [bias])):\n        return ([0.0] * len(X), 0.0)\n    for _ in range(iterations):\n        predictions = np.dot(X, weights)\n        residuals = y - predictions\n        grad_weights = []\n        grad_bias = []\n        for j in range(len(weights)):\n            sign = 1.0 if weights[j] != 0 else -1.0\n            if weights[j] == 0:\n                term1 = 0.0\n                term2 = 0.0\n            else:\n                term1 = -2 * np.dot(X[:, j], residuals)\n                term2 = lambda1 * np.sign(weights[j]) + 2 * lambda2 * weights[j]\n            grad_weights.append((term1 + term2) / len(X))\n        mean_grad = np.mean(grad_weights)\n        for j in range(len(weights)):\n            weights[j] -= learning_rate * mean_grad / len(X)\n        bias -= learning_rate * mean_grad\n        weights_rounded = [round(w, 4) for w in weights]\n        bias_rounded = round(bias, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 582, "completion_id": 0, "solution": "def nearest_neighbor_graph(X):\n    \"\"\"\n    Build the undirected k-nearest-neighbor adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    n_samples = len(X)\n    if n_samples == 0:\n        return [[0]]\n    d = np.linalg.norm(X[:, :] - X[:, :], axis=1)\n    k = min(int(np.floor(np.sqrt(n_samples))), 10)\n    neighbors = []\n    for i in range(n_samples):\n        indices = np.argsort(d[i])\n        neighbors.append(indices[:k])\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                if i in neighbors[i] or j in neighbors[j]:\n                    W[i][j] = 1\n    return W.tolist()"}
{"task_id": 584, "completion_id": 0, "solution": "import numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    arr = np.array(state)\n    stacked_state = np.tile(arr, (4, 1, 1))\n    return stacked_state.tolist()"}
{"task_id": 585, "completion_id": 0, "solution": "def cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a == b:\n        return 0\n    elif a > b:\n        return 1\n    else:\n        return -1"}
{"task_id": 586, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised \u0177 at the normalised x_query, convert it back to the original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    x_normalized = (x - np.min(x)) / (np.max(x) - np.min(x))\n    y_normalized = (y - np.min(y)) / (np.max(y) - np.min(y))\n    x_neighbors = []\n    distances = []\n    for i in range(len(x)):\n        if x[i] < x_query or i + window > len(x):\n            break\n        distance = abs((x[i] - x_query) * x_normalized)\n        distances.append(distance)\n        x_neighbors.append(i)\n    d_max = max(distances)\n    weights = []\n    for d in distances:\n        if d <= d_max:\n            weight = (1 - (d / d_max) ** 3) ** 3\n        else:\n            weight = 0\n        weights.append(weight)\n    if len(weights) == 0:\n        return np.mean(y_normalized[x_neighbors])\n    else:\n        a = np.sum(y_normalized[x_neighbors] * weights) / np.sum(weights)\n        b = np.sum((y_normalized[x_neighbors] - a) * weights) / np.sum(weights)\n        return (a + b * x_query) * x_normalized\n    return round(lowess_predict(x_normalized, y_normalized, x_query, window), 4)"}
{"task_id": 587, "completion_id": 0, "solution": "import random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"\n    Perform operations on an in-memory replay buffer and return the outputs.\n    \n    Args:\n        operations: A list of tuples describing the commands to execute.\n    \n    Returns:\n        A list containing the outputs of all commands that generate a result.\n    \"\"\"\n    buffer = []\n    random.seed(0)\n    results = []\n    for (command, *args) in operations:\n        if command == 'append':\n            buffer.append(args[0])\n            results.append(args[0])\n        elif command == 'pop':\n            if not buffer:\n                results.append(None)\n            else:\n                last_element = buffer.pop()\n                results.append(last_element)\n        elif command == 'sample':\n            if len(buffer) < args[1]:\n                results.append([])\n            else:\n                selected = random.sample(buffer, args[1])\n                results.append(selected)\n        elif command == 'size':\n            results.append(len(buffer))\n    return results"}
{"task_id": 588, "completion_id": 0, "solution": "from typing import Optional\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self, data=None, split_variable=None, split_variable_value=None, left: Optional['Node']=None, right: Optional['Node']=None, depth: int=0, criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\ndef tree_max_depth(root: Optional[Node]) -> int:\n    if root is None:\n        return -1\n    max_depth = 0\n    current_depth = 0\n\n    def _compute_depth(node):\n        nonlocal max_depth, current_depth\n        if node is None:\n            return -1\n        current_depth += 1\n        left_depth = _compute_depth(node.left)\n        right_depth = _compute_depth(node.right)\n        max_depth = max(max_depth, current_depth)\n        max_depth = max(max_depth, left_depth, right_depth)\n        return max_depth\n    _compute_depth(root)\n    return max_depth"}
{"task_id": 590, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"\n    Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (``ground``) and the already placed flags (``flags``). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    g = np.array(ground)\n    f = np.array(flags)\n    clicks = []\n    new_flags = []\n    for r in range(g.shape[0]):\n        for c in range(g.shape[1]):\n            if g[r][c] != np.nan:\n                if f[r][c]:\n                    continue\n                neighbors = get_neighbors(r, c, g, f)\n                for (nr, nc) in neighbors:\n                    if g[nr][nc] == np.nan:\n                        if not f[nr][nc]:\n                            bombs = count_flagged_neighbors(nr, nc, g, f)\n                            if bombs == g[nr][nc]:\n                                clicks.append((nr, nc))\n                            elif bombs < g[nr][nc]:\n                                new_flags.append((nr, nc))\n                    else:\n                        pass\n    return (sorted(clicks), sorted(new_flags))\ndef get_neighbors(r, c, grid, flag_matrix):\n    \"\"\"Get all 8-connected neighbors.\"\"\"\n    result = []\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < grid.shape[0] and 0 <= nc < grid.shape[1]:\n                if flag_matrix[nr, nc] and grid[nr][nc] != np.nan:\n                    result.append((nr, nc))\n    return result\ndef count_flagged_neighbors(nr, nc, grid, flag_matrix):\n    \"\"\"Count the number of flagged neighbors.\"\"\"\n    total = 0\n    for dr in [-1, 0, 1]:\n        for dc in [-1, 0, 1]:\n            if dr == 0 and dc == 0:\n                continue\n            (nr2, nc2) = (nr + dr, nc + dc)\n            if 0 <= nr2 < grid.shape[0] and 0 <= nc2 < grid.shape[1]:\n                if flag_matrix[nr2, nc2]:\n                    total += 1\n    return total"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x)\n    current_input += 1\n    for layer_idx in range(1, len(weights)):\n        weights_layer = weights[layer_idx]\n        for neuron_idx in range(len(weights_layer[0])):\n            dot_product = np.dot(current_input[neuron_idx], weights_layer[neuron_idx])\n            current_input[neuron_idx] = np.maximum(dot_product, 0)\n    output = current_input[0]\n    output_rounded = round(output, 4)\n    return output_rounded if len(weights) == 1 else [output_rounded]"}
{"task_id": 592, "completion_id": 0, "solution": "import numpy as np\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"\n    Analyzes the neighboring cells of a given position and returns:\n    1. A sorted list of unopened (not clicked) neighboring cells.\n    2. The number of flagged mine cells in those neighboring positions.\n    \n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is marked as a mine.\n        row:     Row index of the cell to analyze.\n        col:     Column index of the cell to analyze.\n\n    Returns:\n        tuple[list[tuple[int, int]], int]:\n        * unopened_neighbours: List of tuples (row, col) of neighboring cells that are not clicked.\n        * flagged_count: Number of flagged mine cells in neighboring positions.\n    \"\"\"\n    if clicked.shape != flags.shape or clicked.shape[0] != flags.shape[0] or clicked.shape[1] != flags.shape[1]:\n        raise ValueError('clicked and flags must have the same shape')\n    neighbors = []\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    for (dr, dc) in directions:\n        neighbor_row = row + dr\n        neighbor_col = col + dc\n        if 0 <= neighbor_row < clicked.shape[0] and 0 <= neighbor_col < clicked.shape[1]:\n            if not clicked[neighbor_row, neighbor_col]:\n                neighbors.append((neighbor_row, neighbor_col))\n    flagged_count = 0\n    for (dr, dc) in directions:\n        neighbor_row = row + dr\n        neighbor_col = col + dc\n        if 0 <= neighbor_row < clicked.shape[0] and 0 <= neighbor_col < clicked.shape[1]:\n            if flags[neighbor_row, neighbor_col]:\n                flagged_count += 1\n    return (sorted(neighbors), flagged_count)"}
{"task_id": 593, "completion_id": 0, "solution": "from copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    for (variables, value) in constraints:\n        if value == 0:\n            for var in variables:\n                if not is_mine(var):\n                    safe_vars.append(var)\n        elif value == len(variables):\n            for var in variables:\n                mines_vars.append(var)\n    for (variables, value) in constraints:\n        if is_mine(variables[0]):\n            for var in variables:\n                if not is_mine(var):\n                    safe_vars.remove(var)\n        elif is_safe(variables[0]):\n            for var in variables:\n                if not is_mine(var):\n                    mines_vars.remove(var)\n    new_constraints = []\n    for constraint in constraints:\n        (variables, value) = constraint\n        if len(set(variables)) == len(set(variables)):\n            continue\n        new_constraint = (set(variables), value - len(set(variables)))\n        new_constraints.append(new_constraint)\n    unique_constraints = set(new_constraints)\n    deduced_constraints = [tuple(c) for c in unique_constraints]\n    while deduced_constraints:\n        new_deduced = []\n        for c in deduced_constraints:\n            (variables, value) = c\n            if is_mine(variables[0]):\n                new_deduced.append((set(variables), value - 1))\n            else:\n                new_deduced.append((set(variables), value))\n        deduced_constraints = new_deduced\n    return (sorted(safe_vars), sorted(mines_vars))"}
{"task_id": 594, "completion_id": 0, "solution": "def maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    result = {}\n    open_cells = []\n    for row in range(len(maze)):\n        for col in range(len(maze[row])):\n            if maze[row][col] == 0:\n                open_cells.append((row, col))\n    for cell in open_cells:\n        (row, col) = cell\n        neighbors = []\n        for (dr, dc) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (nr, nc) = (row + dr, col + dc)\n            if 0 <= nr < len(maze) and 0 <= nc < len(maze[nr]) and (maze[nr][nc] == 0):\n                neighbors.append((nr, nc))\n        neighbors.sort()\n        result[cell] = neighbors\n    return result"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm from scratch.\n    \n    Parameters:\n    X - 2D NumPy array of shape (n_samples \u00d7 n_features)\n    k - Number of clusters\n    max_iters - Maximum number of iterations to perform\n    \n    Returns:\n    list of lists: sorted centroids rounded to 4 decimal places\n    \"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.sqrt(np.sum((X - centroids) ** 2, axis=1))\n        assignments = np.argmin(distances, axis=0)\n        new_centroids = []\n        for i in range(k):\n            new_centroids.append(centroids[assignments[i]])\n        converged = True\n        for i in range(k):\n            if not np.isclose(new_centroids[i], centroids[i], atol=0.0001):\n                converged = False\n                break\n        if converged:\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: x)\n    rounded_centroids = [round(c, 4) for c in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 596, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"\n    Convert a binary maze to an adjacency-list representation.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    free_cells = [(row, col) for row in range(maze.shape[0]) for col in range(maze.shape[1]) if maze[row, col] == 1]\n    graph = {}\n    for cell in free_cells:\n        (row, col) = cell\n        adj = []\n        for (dr, dc) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (new_row, new_col) = (row + dr, col + dc)\n            if 0 <= new_row < maze.shape[0] and 0 <= new_col < maze.shape[1] and (maze[new_row, new_col] == 1):\n                adj.append((new_row, new_col))\n        adj.sort()\n        graph[cell] = adj\n    return graph"}
{"task_id": 597, "completion_id": 0, "solution": "import numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"\n    Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population variance)\n    of the two resulting groups. Only thresholds that coincide with an existing\n    feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to the nearest 4th decimal.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    if not isinstance(X, list):\n        X = [X]\n    if not isinstance(y, list):\n        y = [y]\n    if len(X) == 0 or len(y) == 0:\n        raise ValueError('Data set must have at least one feature and target')\n    num_features = len(X[0])\n    best_index = 0\n    best_threshold = None\n    best_mse = float('inf')\n    for feature_index in range(num_features):\n        feature_values = X[feature_index]\n        feature_set = []\n        thresholds = np.unique(feature_values)\n        for t in thresholds:\n            left_size = sum((1 for x in X if x <= t))\n            right_size = len(X) - left_size\n            left_mean = np.mean([y[i] for i in X if x <= t])\n            right_mean = np.mean([y[i] for i in X if x > t])\n            var_left = np.var([y[i] for i in X if x <= t])\n            var_right = np.var([y[i] for i in X if x > t])\n            mse = left_size / len(X) * var_left + right_size / len(X) * var_right\n            if mse < best_mse or (mse == best_mse and feature_index < best_index):\n                best_index = feature_index\n                best_threshold = t\n                best_mse = mse\n    rounded_mse = round(best_mse, 4)\n    return [best_index, best_threshold, rounded_mse]"}
{"task_id": 598, "completion_id": 0, "solution": "import numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    arr = np.array(data)\n    if arr.ndim != 2 or arr.shape[1] == 0:\n        return []\n    for col_idx in range(arr.shape[1]):\n        current_col = arr[:, col_idx]\n        (mu, sigma) = (np.mean(current_col), np.std(current_col, ddof=0))\n        if sigma == 0:\n            current_col[:] = [0.0 for _ in current_col]\n        else:\n            current_col[:] = [np.nan if x == np.inf or x == -np.inf else (x - mu) / sigma for x in current_col]\n        current_col = np.round(current_col, 4)\n        data[col_idx] = current_col\n    return data"}
