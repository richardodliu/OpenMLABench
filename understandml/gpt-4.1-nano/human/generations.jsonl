{"task_id": 1, "completion_id": 0, "completion": "```python\ndef matrix_dot_vector(a: list[list[int|float]], b: list[int|float]) -> list[int|float]:\n    # Check if the matrix is empty\n    if not a:\n        return -1\n    # Number of columns in the matrix (assuming all rows have the same length)\n    num_cols = len(a[0])\n    # Check if all rows have the same number of columns\n    for row in a:\n        if len(row) != num_cols:\n            return -1\n    # Check dimension compatibility\n    if num_cols != len(b):\n        return -1\n    # Compute the dot product for each row\n    result = []\n    for row in a:\n        dot_product = sum(x * y for x, y in zip(row, b))\n        result.append(dot_product)\n    return result\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\ndef transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    # Check if the matrix is empty\n    if not a:\n        return []\n\n    # Number of rows and columns in the original matrix\n    num_rows = len(a)\n    num_cols = len(a[0])\n\n    # Transpose the matrix by swapping rows and columns\n    transposed = []\n\n    for col_idx in range(num_cols):\n        # Create a new row for the transposed matrix\n        new_row = []\n        for row_idx in range(num_rows):\n            new_row.append(a[row_idx][col_idx])\n        transposed.append(new_row)\n\n    return transposed\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef reshape_matrix(a: list[list[int|float]], new_shape: tuple[int, int]) -> list[list[int|float]]:\n    try:\n        # Convert the input list to a numpy array\n        arr = np.array(a)\n        # Check if total elements match\n        if arr.size != new_shape[0] * new_shape[1]:\n            return []\n        # Reshape the array\n        reshaped_arr = arr.reshape(new_shape)\n        # Convert back to list of lists\n        return reshaped_arr.tolist()\n    except:\n        # In case of any error, return empty list\n        return []\n```"}
{"task_id": 4, "completion_id": 0, "completion": "```python\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if not matrix:\n        return []\n\n    # Check for valid mode\n    if mode not in ('row', 'column'):\n        raise ValueError(\"Mode should be either 'row' or 'column'.\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Ensure all rows have the same number of columns\n    for row in matrix:\n        if len(row) != num_cols:\n            raise ValueError(\"All rows must have the same number of columns.\")\n\n    if mode == 'row':\n        # Calculate mean for each row\n        return [sum(row) / len(row) for row in matrix]\n    else:\n        # Calculate mean for each column\n        means = []\n        for col_idx in range(num_cols):\n            col_sum = 0\n            for row_idx in range(num_rows):\n                col_sum += matrix[row_idx][col_idx]\n            means.append(col_sum / num_rows)\n        return means\n```"}
{"task_id": 5, "completion_id": 0, "completion": "```python\ndef scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Multiply each element in the row by the scalar\n        new_row = [element * scalar for element in row]\n        # Append the new row to the result matrix\n        result.append(new_row)\n\n    return result\n```"}
{"task_id": 6, "completion_id": 0, "completion": "```python\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    # Extract matrix elements\n    a, b = matrix[0]\n    c, d = matrix[1]\n    \n    # Calculate the trace and determinant\n    trace = a + d\n    determinant = a * d - b * c\n    \n    # Calculate the discriminant of the characteristic polynomial\n    discriminant = trace ** 2 - 4 * determinant\n    \n    # Handle potential floating point issues\n    if discriminant < 0:\n        # Eigenvalues are complex; for this task, we assume real eigenvalues\n        # or handle complex eigenvalues if needed\n        # Here, we'll return the real parts only\n        sqrt_discriminant = 0\n    else:\n        sqrt_discriminant = discriminant ** 0.5\n    \n    # Calculate eigenvalues\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    \n    # Return sorted eigenvalues from highest to lowest\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef transform_matrix(A: list[list[int|float]], T: list[list[int|float]], S: list[list[int|float]]) -> list[list[int|float]]:\n    # Convert input lists to numpy arrays\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    \n    # Check if T and S are square matrices\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    \n    # Check invertibility of T and S\n    if np.linalg.matrix_rank(T_np) < T_np.shape[0]:\n        return -1\n    if np.linalg.matrix_rank(S_np) < S_np.shape[0]:\n        return -1\n    \n    try:\n        # Compute the inverse of T and S\n        T_inv = np.linalg.inv(T_np)\n        S_inv = np.linalg.inv(S_np)\n    except np.linalg.LinAlgError:\n        # If inversion fails, return -1\n        return -1\n    \n    # Perform the transformation: T^{-1} * A * S\n    result = T_inv @ A_np @ S_np\n    \n    # Round to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Convert back to list of lists\n    return result_rounded.tolist()\n```"}
{"task_id": 8, "completion_id": 0, "completion": "```python\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    # Check if the input is a 2x2 matrix\n    if len(matrix) != 2 or any(len(row) != 2 for row in matrix):\n        return None\n\n    a, b = matrix[0]\n    c, d = matrix[1]\n\n    # Calculate the determinant\n    det = a * d - b * c\n\n    # If determinant is zero, matrix is not invertible\n    if det == 0:\n        return None\n\n    # Calculate the inverse\n    inverse_matrix = [\n        [ d / det, -b / det],\n        [-c / det,  a / det]\n    ]\n\n    return inverse_matrix\n```"}
{"task_id": 9, "completion_id": 0, "completion": "```python\ndef matrixmul(a: list[list[int | float]],\n              b: list[list[int | float]]) -> list[list[int | float]]:\n    # Check if matrices can be multiplied\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n\n    # Dimensions\n    rows_a = len(a)\n    cols_a = len(a[0])\n    cols_b = len(b[0])\n\n    # Initialize result matrix with zeros\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n\n    # Perform matrix multiplication\n    for i in range(rows_a):\n        for j in range(cols_b):\n            sum_value = 0\n            for k in range(cols_a):\n                sum_value += a[i][k] * b[k][j]\n            result[i][j] = sum_value\n\n    return result\n```"}
{"task_id": 10, "completion_id": 0, "completion": "```python\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    # Number of features (variables)\n    num_features = len(vectors)\n    # Number of observations (samples)\n    num_observations = len(vectors[0]) if vectors else 0\n\n    # Check for empty input or inconsistent lengths\n    if any(len(feature) != num_observations for feature in vectors):\n        raise ValueError(\"All feature lists must have the same number of observations.\")\n\n    # Compute the mean of each feature\n    means = [sum(feature) / num_observations for feature in vectors]\n\n    # Center the data by subtracting the mean\n    centered = [\n        [value - mean for value in feature]\n        for feature, mean in zip(vectors, means)\n    ]\n\n    # Initialize covariance matrix\n    cov_matrix = [[0.0 for _ in range(num_features)] for _ in range(num_features)]\n\n    # Calculate covariance for each pair of features\n    for i in range(num_features):\n        for j in range(i, num_features):\n            cov = sum(\n                centered[i][k] * centered[j][k] for k in range(num_observations)\n            ) / (num_observations - 1)  # Sample covariance\n            cov_matrix[i][j] = cov\n            cov_matrix[j][i] = cov  # Symmetric matrix\n\n    return cov_matrix\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    # Example 1: Simple 2D data\n    vectors1 = [\n        [2.1, 2.5, 3.6, 4.0],  # Feature 1\n        [8.0, 10.0, 12.0, 14.0]  # Feature 2\n    ]\n    print(\"Covariance matrix for vectors1:\")\n    for row in calculate_covariance_matrix(vectors1):\n        print(row)\n\n    # Example 2: 3 features with more observations\n    vectors2 = [\n        [1, 2, 3, 4, 5],        # Feature 1\n        [2, 4, 6, 8, 10],       # Feature 2\n        [5, 7, 9, 11, 13]       # Feature 3\n    ]\n    print(\"\\nCovariance matrix for vectors2:\")\n    for row in calculate_covariance_matrix(vectors2):\n        print(row)\n\n    # Example 3: Identical features (zero covariance)\n    vectors3 = [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4]\n    ]\n    print(\"\\nCovariance matrix for vectors3 (identical features):\")\n    for row in calculate_covariance_matrix(vectors3):\n        print(row)\n\n    # Edge case: Empty input\n    try:\n        print(\"\\nEmpty input test:\")\n        print(calculate_covariance_matrix([]))\n    except Exception as e:\n        print(\"Error:\", e)\n\n    # Edge case: Inconsistent lengths\n    try:\n        print(\"\\nInconsistent lengths test:\")\n        vectors4 = [\n            [1, 2, 3],\n            [4, 5]\n        ]\n        print(calculate_covariance_matrix(vectors4))\n    except Exception as e:\n        print(\"Error:\", e)\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    # Initialize the solution vector with zeros\n    x = np.zeros_like(b, dtype=float)\n    \n    # Extract the diagonal elements of A\n    D = np.diag(A)\n    \n    # Compute the matrix R = A - D\n    R = A - np.diagflat(D)\n    \n    for _ in range(n):\n        # Compute the next approximation\n        x_new = (b - np.dot(R, x)) / D\n        # Round to 4 decimal places\n        x_new = np.round(x_new, 4)\n        # Update x for next iteration\n        x = x_new\n    \n    # Return as list\n    return x.tolist()\n```"}
{"task_id": 12, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the SVD of a 2x2 matrix A using the Jacobian method.\n    Returns U, S, V^T matrices with singular values rounded to 4 decimal places.\n    \"\"\"\n    # Ensure A is 2x2\n    assert A.shape == (2, 2), \"Input matrix must be 2x2.\"\n    \n    # Step 1: Compute A^T A\n    ATA = A.T @ A\n    \n    # Step 2: Find eigenvalues of A^T A (which are sigma^2)\n    # For 2x2, eigenvalues can be found analytically\n    trace = np.trace(ATA)\n    det = np.linalg.det(ATA)\n    # Eigenvalues: (trace \u00b1 sqrt(trace^2 - 4*det)) / 2\n    delta = np.sqrt(max(trace**2 - 4*det, 0))\n    lambda1 = (trace + delta) / 2\n    lambda2 = (trace - delta) / 2\n    \n    # Singular values are sqrt of eigenvalues\n    sigma1 = np.sqrt(max(lambda1, 0))\n    sigma2 = np.sqrt(max(lambda2, 0))\n    \n    # Sort singular values in descending order\n    singular_values = sorted([sigma1, sigma2], reverse=True)\n    s1, s2 = singular_values\n    \n    # Step 3: Compute V (right singular vectors)\n    # For each eigenvalue, find the eigenvector\n    def compute_eigenvector(matrix, eigenvalue):\n        # Solve (matrix - eigenvalue*I) v = 0\n        eig_vec = None\n        # For 2x2, handle special cases\n        if matrix[0,0] - eigenvalue != 0:\n            eig_vec = np.array([matrix[0,1], eigenvalue - matrix[0,0]])\n        elif matrix[1,0] != 0:\n            eig_vec = np.array([eigenvalue - matrix[1,1], matrix[1,0]])\n        else:\n            # If diagonal elements are equal, pick standard basis\n            eig_vec = np.array([1, 0])\n        # Normalize\n        return eig_vec / np.linalg.norm(eig_vec)\n    \n    v1 = compute_eigenvector(ATA, lambda1)\n    v2 = compute_eigenvector(ATA, lambda2)\n    V = np.column_stack((v1, v2))\n    \n    # Step 4: Compute U (left singular vectors)\n    # U = A * v / sigma\n    def compute_u(A, v, sigma):\n        if sigma > 1e-10:\n            u = A @ v / sigma\n            return u / np.linalg.norm(u)\n        else:\n            # If sigma is zero, pick arbitrary orthogonal vector\n            # For 2x2, pick orthogonal vector to v\n            orthogonal = np.array([-v[1], v[0]])\n            return orthogonal / np.linalg.norm(orthogonal)\n    \n    u1 = compute_u(A, v1, s1)\n    u2 = compute_u(A, v2, s2)\n    U = np.column_stack((u1, u2))\n    \n    # Step 5: Construct S matrix\n    S = np.diag([s1, s2])\n    \n    # Round all matrices to 4 decimal places\n    U = np.round(U, 4)\n    V = np.round(V, 4)\n    S = np.round(S, 4)\n    \n    # Return U, S, V^T\n    return U, S, V.T\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's expansion.\n\n    Args:\n        matrix (list[list[int|float]]): A 4x4 matrix represented as a list of lists.\n\n    Returns:\n        float: The determinant of the matrix.\n    \"\"\"\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        \"\"\"\n        Calculate the determinant of a 3x3 matrix.\n\n        Args:\n            mat (list[list[int|float]]): A 3x3 matrix.\n\n        Returns:\n            float: The determinant of the 3x3 matrix.\n        \"\"\"\n        return (\n            mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) -\n            mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) +\n            mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n        )\n\n    # Check if the matrix is 4x4\n    if len(matrix) != 4 or any(len(row) != 4 for row in matrix):\n        raise ValueError(\"Input must be a 4x4 matrix.\")\n\n    det = 0.0\n    for col in range(4):\n        # Build the 3x3 minor matrix by excluding row 0 and current column\n        minor = [\n            [matrix[r][c] for c in range(4) if c != col]\n            for r in range(1, 4)\n        ]\n        # Sign alternates based on column index\n        sign = (-1) ** col\n        # Recursive call to compute determinant of minor\n        minor_det = determinant_3x3(minor)\n        det += sign * matrix[0][col] * minor_det\n\n    return det\n```"}
{"task_id": 14, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    # Convert input lists to numpy arrays\n    X_np = np.array(X)\n    y_np = np.array(y)\n    \n    # Add intercept term (column of ones) to X\n    ones = np.ones((X_np.shape[0], 1))\n    X_b = np.hstack((ones, X_np))\n    \n    # Compute the normal equation: theta = (X^T X)^(-1) X^T y\n    XTX = X_b.T @ X_b\n    XTy = X_b.T @ y_np\n    \n    # Solve for theta\n    theta = np.linalg.inv(XTX) @ XTy\n    \n    # Round each coefficient to 4 decimal places\n    rounded_theta = np.round(theta, 4)\n    \n    # Convert to list and return\n    return rounded_theta.tolist()\n```"}
{"task_id": 15, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    # Initialize coefficients (theta) with zeros\n    theta = np.zeros(X.shape[1])\n    \n    for _ in range(iterations):\n        # Calculate predictions\n        predictions = X @ theta\n        # Compute error\n        errors = predictions - y\n        # Compute gradient\n        gradient = (X.T @ errors) / len(y)\n        # Update coefficients\n        theta -= alpha * gradient\n    \n    # Round each coefficient to 4 decimal places\n    theta_rounded = np.round(theta, 4)\n    # Convert to list\n    return theta_rounded.tolist()\n```"}
{"task_id": 16, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    # Standardization: (X - mean) / std\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    # To avoid division by zero in case of zero std\n    std_replaced = np.where(std == 0, 1, std)\n    standardized = (data - mean) / std_replaced\n\n    # Min-Max Normalization: (X - min) / (max - min)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    range_vals = max_vals - min_vals\n    # To avoid division by zero in case of zero range\n    range_replaced = np.where(range_vals == 0, 1, range_vals)\n    normalized = (data - min_vals) / range_replaced\n\n    # Round to 4 decimal places\n    standardized_rounded = np.round(standardized, 4)\n    normalized_rounded = np.round(normalized, 4)\n\n    # Convert to list of lists\n    standardized_list = standardized_rounded.tolist()\n    normalized_list = normalized_rounded.tolist()\n\n    return standardized_list, normalized_list\n```"}
{"task_id": 17, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    # Convert points and initial centroids to numpy arrays for easier computation\n    points_np = np.array(points)\n    centroids = np.array(initial_centroids)\n    \n    for _ in range(max_iterations):\n        # Step 1: Assign each point to the nearest centroid\n        # Compute distances from each point to each centroid\n        distances = np.linalg.norm(points_np[:, np.newaxis] - centroids, axis=2)\n        # Assign points to the closest centroid\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2: Recompute centroids as the mean of assigned points\n        new_centroids = []\n        for i in range(k):\n            assigned_points = points_np[labels == i]\n            if len(assigned_points) == 0:\n                # If a cluster gets no points, keep the previous centroid\n                new_centroids.append(centroids[i])\n            else:\n                new_centroid = np.mean(assigned_points, axis=0)\n                new_centroids.append(new_centroid)\n        new_centroids = np.array(new_centroids)\n        \n        # Check for convergence (if centroids do not change)\n        if np.allclose(centroids, new_centroids, rtol=1e-4, atol=1e-4):\n            break\n        centroids = new_centroids\n    \n    # Round final centroids to 4 decimal places\n    final_centroids = [tuple(np.round(c, 4)) for c in centroids]\n    return final_centroids\n```"}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test indices for K-Fold Cross-Validation.\n\n    Parameters:\n    - X: np.ndarray, feature data\n    - y: np.ndarray, target labels\n    - k: int, number of folds\n    - shuffle: bool, whether to shuffle data before splitting\n    - random_seed: int or None, seed for reproducibility\n\n    Returns:\n    - List of tuples: [(train_indices, test_indices), ...] for each fold\n    \"\"\"\n    n_samples = len(X)\n    indices = np.arange(n_samples)\n\n    if shuffle:\n        rng = np.random.RandomState(seed=random_seed)\n        rng.shuffle(indices)\n\n    # Determine the size of each fold\n    fold_sizes = np.full(k, n_samples // k, dtype=int)\n    # Distribute the remainder among the first few folds\n    remainder = n_samples % k\n    fold_sizes[:remainder] += 1\n\n    # Generate the start and end indices for each fold\n    current = 0\n    folds = []\n    for fold_size in fold_sizes:\n        start, stop = current, current + fold_size\n        folds.append(indices[start:stop])\n        current = stop\n\n    # Generate train-test splits\n    splits = []\n    for i in range(k):\n        test_idx = folds[i]\n        train_idx = np.hstack([folds[j] for j in range(k) if j != i])\n        splits.append((train_idx, test_idx))\n\n    return splits\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    # Step 1: Standardize the data (mean=0, std=1)\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    standardized_data = (data - means) / stds\n\n    # Step 2: Compute the covariance matrix\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n\n    # Step 3: Compute eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    top_indices = sorted_indices[:k]\n    top_eigenvectors = eigenvectors[:, top_indices]\n\n    # Step 5: Round the eigenvectors to 4 decimal places\n    principal_components = np.round(top_eigenvectors.T, 4).tolist()\n\n    return principal_components\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"Calculate the entropy of the given examples for the target attribute.\"\"\"\n    total = len(examples)\n    if total == 0:\n        return 0.0\n    # Count the frequency of each class label\n    label_counts = Counter(example[target_attr] for example in examples)\n    ent = 0.0\n    for count in label_counts.values():\n        p = count / total\n        ent -= p * math.log2(p)\n    return ent\n\ndef information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"Calculate the information gain of splitting on the given attribute.\"\"\"\n    total_entropy = entropy(examples, target_attr)\n    total = len(examples)\n    # Get the unique values of the attribute\n    values = set(example[attribute] for example in examples)\n    # Calculate the weighted entropy after the split\n    weighted_entropy = 0.0\n    for value in values:\n        subset = [example for example in examples if example[attribute] == value]\n        weight = len(subset) / total\n        subset_entropy = entropy(subset, target_attr)\n        weighted_entropy += weight * subset_entropy\n    return total_entropy - weighted_entropy\n\ndef majority_class(examples: list[dict], target_attr: str):\n    \"\"\"Return the most common class label among examples.\"\"\"\n    label_counts = Counter(example[target_attr] for example in examples)\n    return label_counts.most_common(1)[0][0]\n\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Recursively builds a decision tree based on entropy and information gain.\n    Returns a nested dictionary representing the decision tree.\n    \"\"\"\n    # If all examples have the same class label, return that label\n    class_labels = [example[target_attr] for example in examples]\n    if len(set(class_labels)) == 1:\n        return class_labels[0]\n    \n    # If no attributes left to split on, return the majority class\n    if not attributes:\n        return majority_class(examples, target_attr)\n    \n    # Select the attribute with the highest information gain\n    gains = []\n    for attribute in attributes:\n        gain = information_gain(examples, attribute, target_attr)\n        gains.append((gain, attribute))\n    # Choose attribute with maximum gain\n    max_gain, best_attribute = max(gains, key=lambda x: x[0])\n    \n    # If the best gain is zero, no further splitting improves the classification\n    if max_gain == 0:\n        return majority_class(examples, target_attr)\n    \n    # Build the tree node\n    tree = {best_attribute: {}}\n    # Get the unique values of the best attribute\n    values = set(example[best_attribute] for example in examples)\n    # For each value, create a subtree\n    for value in values:\n        subset = [example for example in examples if example[best_attribute] == value]\n        # Remove the used attribute for the subtree\n        remaining_attributes = [attr for attr in attributes if attr != best_attribute]\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attribute][value] = subtree\n    \n    return tree\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic Pegasos kernel SVM training algorithm.\n    \n    Parameters:\n        data (np.ndarray): 2D array of shape (n_samples, n_features)\n        labels (np.ndarray): 1D array of shape (n_samples,)\n        kernel (str): 'linear' or 'rbf'\n        lambda_val (float): regularization parameter\n        iterations (int): number of iterations\n        sigma (float): parameter for RBF kernel\n        \n    Returns:\n        alpha_list (list): list of alpha coefficients (as list), shape (n_samples,)\n        bias (float): bias term\n    \"\"\"\n    n_samples = data.shape[0]\n    \n    # Initialize alpha coefficients and bias\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    \n    # Define kernel function\n    def kernel_func(x1, x2):\n        if kernel == 'linear':\n            return np.dot(x1, x2)\n        elif kernel == 'rbf':\n            diff = x1 - x2\n            return np.exp(-np.dot(diff, diff) / (2 * sigma ** 2))\n        else:\n            raise ValueError(\"Unsupported kernel. Choose 'linear' or 'rbf'.\")\n    \n    # Precompute the kernel matrix for efficiency\n    # Note: For large datasets, this might be memory intensive.\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            K[i, j] = kernel_func(data[i], data[j])\n    \n    # Main training loop\n    for t in range(1, iterations + 1):\n        # Compute the margin for all samples\n        # margin_i = y_i * (sum_j alpha_j * K_j_i + bias)\n        decision = np.dot(alpha * labels, K) + bias  # shape: (n_samples,)\n        margins = labels * decision\n        \n        # Compute the step size\n        eta = 1.0 / (lambda_val * t)\n        \n        # Update alpha and bias for all samples\n        # For samples where margin < 1, perform update\n        for i in range(n_samples):\n            if margins[i] < 1:\n                # Update alpha for sample i\n                alpha[i] = (1 - eta * lambda_val) * alpha[i] + eta\n                # Update bias\n                bias = (1 - eta * lambda_val) * bias + eta * labels[i]\n            else:\n                # Decay alpha and bias\n                alpha[i] = (1 - eta * lambda_val) * alpha[i]\n                bias = (1 - eta * lambda_val) * bias\n    \n    # Round results to 4 decimal places\n    alpha_rounded = np.round(alpha, 4)\n    bias_rounded = np.round(bias, 4)\n    \n    # Convert alpha to list\n    alpha_list = alpha_rounded.tolist()\n    \n    return alpha_list, float(bias_rounded)\n```"}
{"task_id": 22, "completion_id": 0, "completion": "```python\nimport math\n\ndef sigmoid(z: float) -> float:\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)\n```"}
{"task_id": 23, "completion_id": 0, "completion": "```python\nimport math\n\ndef softmax(scores: list[float]) -> list[float]:\n    # To improve numerical stability, subtract the max score from each score\n    max_score = max(scores)\n    exp_scores = [math.exp(score - max_score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp, 4) for exp_score in exp_scores]\n    return softmax_values\n```"}
{"task_id": 24, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    # Convert features to numpy array for easier computation\n    X = np.array(features)\n    y_true = np.array(labels)\n    w = np.array(weights)\n    \n    # Compute the linear combination: z = Xw + bias\n    z = np.dot(X, w) + bias\n    \n    # Apply sigmoid activation function\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    \n    predicted_probs = [sigmoid(val) for val in z]\n    \n    # Calculate Mean Squared Error\n    mse = np.mean((np.array(predicted_probs) - y_true) ** 2)\n    \n    # Round results to 4 decimal places\n    predicted_probs_rounded = [round(prob, 4) for prob in predicted_probs]\n    mse_rounded = round(mse, 4)\n    \n    # Return as list (using tolist() for consistency)\n    return predicted_probs_rounded, mse_rounded\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    # Initialize weights and bias\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    for epoch in range(epochs):\n        # Forward pass: compute linear combination\n        z = np.dot(features, weights) + bias\n        # Sigmoid activation\n        predictions = 1 / (1 + np.exp(-z))\n        # Compute error\n        errors = predictions - labels\n        # Compute MSE loss\n        mse = np.mean(errors ** 2)\n        mse_history.append(round(mse, 4))\n        # Compute gradient of loss w.r.t predictions\n        dL_dpred = 2 * errors / len(labels)\n        # Derivative of sigmoid\n        sigmoid_derivative = predictions * (1 - predictions)\n        # Gradient of loss w.r.t z\n        dL_dz = dL_dpred * sigmoid_derivative\n        # Gradient w.r.t weights and bias\n        dL_dweights = np.dot(features.T, dL_dz)\n        dL_dbias = np.sum(dL_dz)\n        # Update weights and bias\n        weights -= learning_rate * dL_dweights\n        bias -= learning_rate * dL_dbias\n\n    return weights.round(4).tolist(), round(bias, 4), mse_history\n```"}
{"task_id": 26, "completion_id": 0, "completion": "```python\nclass Value:\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda: None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        # Topological order of nodes\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n\n        build_topo(self)\n\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n```"}
{"task_id": 27, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    # Convert input lists to numpy arrays\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    \n    # Compute the inverse of B\n    B_inv = np.linalg.inv(B_matrix)\n    \n    # Compute the transformation matrix P from B to C\n    P = C_matrix @ B_inv\n    \n    # Round to 4 decimal places\n    P_rounded = np.round(P, 4)\n    \n    # Convert to list of lists\n    return P_rounded.tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svd_2x2(A: np.ndarray) -> tuple:\n    # Ensure A is a 2x2 matrix\n    assert A.shape == (2, 2), \"Input matrix must be 2x2.\"\n    \n    # Step 1: Compute A^T A\n    ATA = A.T @ A\n    \n    # Step 2: Compute eigenvalues and eigenvectors of A^T A\n    eigvals, eigvecs = np.linalg.eigh(ATA)\n    \n    # Eigenvalues are non-negative; sort in descending order\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    V = eigvecs[:, idx]\n    \n    # Step 3: Compute singular values (square roots of eigenvalues)\n    singular_values = np.sqrt(np.maximum(eigvals, 0))\n    \n    # Construct S matrix\n    S = np.zeros((2, 2))\n    S[0, 0] = singular_values[0]\n    S[1, 1] = singular_values[1]\n    \n    # Step 4: Compute U\n    # For each singular value, compute corresponding left singular vector\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            u = (A @ V[:, i]) / singular_values[i]\n        else:\n            # Handle the case when singular value is zero\n            # Find a vector orthogonal to previous columns\n            u = np.zeros(2)\n            # For the first vector, pick an arbitrary orthogonal vector\n            if i == 0:\n                u = np.array([1, 0])\n            else:\n                u = np.array([0, 1])\n        # Normalize u\n        u = u / np.linalg.norm(u)\n        U[:, i] = u\n    \n    # Step 5: Ensure U and V are proper rotation matrices (determinant = 1)\n    if np.linalg.det(U) < 0:\n        U[:, 0] *= -1\n    if np.linalg.det(V) < 0:\n        V[:, 1] *= -1\n    \n    # Round all matrices to 4 decimal places\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    \n    # Convert to list of lists\n    U_list = U.tolist()\n    S_list = S.tolist()\n    V_list = V.tolist()\n    \n    return U_list, S_list, V_list\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef shuffle_data(X, y, seed=None):\n    # Ensure reproducibility if seed is provided\n    rng = np.random.default_rng(seed)\n    \n    # Check that X and y have the same number of samples\n    if len(X) != len(y):\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    # Generate a permutation of indices\n    indices = np.arange(len(X))\n    rng.shuffle(indices)\n    \n    # Shuffle X and y using the permutation\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    \n    # Convert to list of lists\n    return X_shuffled.tolist(), y_shuffled.tolist()\n```"}
{"task_id": 30, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n    n_samples = X.shape[0]\n    # Generate indices for shuffling\n    indices = np.arange(n_samples)\n    np.random.shuffle(indices)\n    \n    # Iterate over the dataset in steps of batch_size\n    for start_idx in range(0, n_samples, batch_size):\n        end_idx = min(start_idx + batch_size, n_samples)\n        batch_indices = indices[start_idx:end_idx]\n        X_batch = X[batch_indices]\n        if y is not None:\n            y_batch = y[batch_indices]\n            # Return as list of lists\n            return (X_batch.tolist(), y_batch.tolist())\n        else:\n            return X_batch.tolist()\n```"}
{"task_id": 31, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X, feature_i, threshold):\n    # Convert input to numpy array if it's not already\n    X = np.array(X)\n    \n    # Create boolean mask for samples where feature value >= threshold\n    mask = X[:, feature_i] >= threshold\n    \n    # Subset with samples meeting the condition\n    X_meet = X[mask]\n    # Subset with samples not meeting the condition\n    X_not_meet = X[~mask]\n    \n    # Return as lists\n    return X_meet.tolist(), X_not_meet.tolist()\n```"}
{"task_id": 32, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X, degree):\n    # Ensure X is a numpy array\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    \n    # Generate all combinations of feature indices with replacement\n    combs = []\n    for deg in range(1, degree + 1):\n        combs.extend(combinations_with_replacement(range(n_features), deg))\n    \n    # Initialize list to hold new features\n    features = []\n    \n    # For each combination, compute the product of the corresponding features\n    for comb in combs:\n        # Start with an array of ones for all samples\n        feature_vals = np.ones(n_samples)\n        for index in comb:\n            feature_vals *= X[:, index]\n        features.append(feature_vals)\n    \n    # Stack all features horizontally\n    poly_features = np.column_stack(features)\n    \n    # Convert to list of lists\n    return poly_features.tolist()\n```"}
{"task_id": 33, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of the dataset.\n\n    Parameters:\n    - X: 2D numpy array of features\n    - y: 1D numpy array of labels\n    - n_subsets: Number of subsets to generate\n    - replacements: Boolean, whether sampling is with replacement\n    - seed: Random seed for reproducibility\n\n    Returns:\n    - List of tuples (X_subset, y_subset), each as lists\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n\n    for _ in range(n_subsets):\n        # Sample indices\n        indices = np.random.choice(n_samples, size=n_samples, replace=replacements)\n        # Create subsets\n        X_subset = X[indices]\n        y_subset = y[indices]\n        # Convert to list of lists\n        X_list = X_subset.tolist()\n        y_list = y_subset.tolist()\n        subsets.append((X_list, y_list))\n    \n    return subsets\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(x, n_col=None):\n    # Convert input to numpy array if not already\n    x = np.array(x)\n    \n    # Determine number of columns if not provided\n    if n_col is None:\n        n_col = np.max(x) + 1\n    \n    # Initialize the one-hot encoded array with zeros\n    one_hot = np.zeros((x.shape[0], n_col), dtype=int)\n    \n    # Set the appropriate elements to 1\n    one_hot[np.arange(x.shape[0]), x] = 1\n    \n    # Return as list of lists\n    return one_hot.tolist()\n```"}
{"task_id": 35, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x):\n    # Create a diagonal matrix from the 1D array x\n    diag_matrix = np.diag(x)\n    # Convert the numpy array to a list of lists\n    return diag_matrix.tolist()\n```"}
{"task_id": 36, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    # Ensure inputs are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check if the shapes match\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"Shape of y_true and y_pred must be the same.\")\n    \n    # Calculate the number of correct predictions\n    correct_predictions = np.sum(y_true == y_pred)\n    \n    # Calculate accuracy as the ratio of correct predictions to total predictions\n    accuracy = correct_predictions / len(y_true)\n    \n    return accuracy\n```"}
{"task_id": 37, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X, Y=None):\n    # Convert inputs to numpy arrays if they aren't already\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    \n    # If Y is not provided, set it to X\n    if Y is None:\n        Y = X\n    \n    # Center the data by subtracting the mean\n    X_mean = np.mean(X, axis=0)\n    Y_mean = np.mean(Y, axis=0)\n    X_centered = X - X_mean\n    Y_centered = Y - Y_mean\n    \n    # Compute the numerator: covariance\n    numerator = np.dot(X_centered.T, Y_centered)\n    \n    # Compute the denominator: product of standard deviations\n    X_std = np.sqrt(np.sum(X_centered ** 2, axis=0))\n    Y_std = np.sqrt(np.sum(Y_centered ** 2, axis=0))\n    \n    # To avoid division by zero, replace zeros with ones temporarily\n    X_std_safe = np.where(X_std == 0, 1, X_std)\n    Y_std_safe = np.where(Y_std == 0, 1, Y_std)\n    \n    # Calculate the correlation matrix\n    corr_matrix = numerator / np.outer(X_std_safe, Y_std_safe)\n    \n    # Round to 4 decimal places\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n    \n    # Convert to list of lists\n    return corr_matrix_rounded.tolist()\n```"}
{"task_id": 38, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Implements the fit method for AdaBoost classifier.\n    \n    Parameters:\n    - X: numpy.ndarray of shape (n_samples, n_features)\n    - y: numpy.ndarray of shape (n_samples,)\n    - n_clf: int, number of classifiers to train\n    \n    Returns:\n    - classifiers: list of dicts, each containing parameters of the weak classifier\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    # Initialize sample weights uniformly\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    \n    classifiers = []\n    \n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature_idx = None\n        best_threshold = None\n        best_polarity = 1  # Direction of inequality\n        \n        # For each feature, find the best threshold\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            # Get sorted unique values for potential thresholds\n            thresholds = np.unique(feature_values)\n            \n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions based on threshold and polarity\n                    predictions = np.ones(n_samples)\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n                    \n                    # Calculate weighted error\n                    misclassified = predictions != y\n                    error = np.sum(sample_weights * misclassified)\n                    \n                    # Check if this is the best so far\n                    if error < min_error:\n                        min_error = error\n                        best_feature_idx = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # Avoid division by zero\n        min_error = max(min_error, 1e-10)\n        \n        # Compute classifier weight (alpha)\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        alpha = round(alpha, 4)\n        \n        # Make predictions with the best classifier\n        feature_values = X[:, best_feature_idx]\n        predictions = np.ones(n_samples)\n        predictions[best_polarity * feature_values < best_polarity * best_threshold] = -1\n        \n        # Update sample weights\n        # weight_new = weight_old * exp(-alpha * y * prediction)\n        weights = sample_weights * np.exp(-alpha * y * predictions)\n        # Normalize weights\n        weights /= np.sum(weights)\n        sample_weights = np.round(weights, 4)\n        \n        # Store the classifier parameters\n        classifier = {\n            'feature_index': best_feature_idx,\n            'threshold': round(best_threshold, 4),\n            'polarity': best_polarity,\n            'alpha': alpha\n        }\n        classifiers.append(classifier)\n    \n    return classifiers\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef log_softmax(scores: list):\n    scores_np = np.array(scores)\n    # Subtract the max for numerical stability\n    max_score = np.max(scores_np)\n    stabilized_scores = scores_np - max_score\n    # Compute log-sum-exp\n    sum_exp = np.sum(np.exp(stabilized_scores))\n    log_sum_exp = np.log(sum_exp)\n    # Compute log-softmax\n    log_softmax_vals = stabilized_scores - log_sum_exp\n    # Round to 4 decimal places\n    rounded_vals = np.round(log_softmax_vals, 4)\n    # Return as list\n    return rounded_vals.tolist()\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport copy\nimport math\n\nnp.random.seed(42)\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\n\nclass Dense(Layer):\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_optimizer = None\n        self.w0_optimizer = None\n        if input_shape is not None:\n            self.set_input_shape(input_shape)\n        self.initialize()\n\n    def initialize(self):\n        # Determine input dimension\n        input_dim = self.input_shape[0] if self.input_shape is not None else None\n        if input_dim is None:\n            raise ValueError(\"Input shape must be specified for initialization.\")\n        limit = 1 / math.sqrt(input_dim)\n        # Initialize weights with uniform distribution\n        self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        # Initialize biases to zero\n        self.w0 = np.zeros(self.n_units)\n        # Initialize optimizers as placeholders (e.g., simple SGD with learning rate)\n        self.W_optimizer = {'lr': 0.01}\n        self.w0_optimizer = {'lr': 0.01}\n\n    def parameters(self):\n        # Total parameters = weights + biases\n        return (self.W.size + self.w0.size)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        # Round to 4 decimal places\n        output = np.round(output, 4)\n        return output.tolist()\n\n    def backward_pass(self, accum_grad):\n        # accum_grad is gradient of loss w.r.t. output of this layer\n        X = self.layer_input\n        # Gradient w.r.t. weights\n        grad_W = np.dot(X.T, accum_grad)\n        # Gradient w.r.t. biases\n        grad_w0 = np.sum(accum_grad, axis=0)\n        # Gradient w.r.t. input to propagate backwards\n        grad_input = np.dot(accum_grad, self.W.T)\n        # Round gradients to 4 decimal places\n        grad_W = np.round(grad_W, 4)\n        grad_w0 = np.round(grad_w0, 4)\n        grad_input = np.round(grad_input, 4)\n\n        # Update weights and biases if trainable\n        if self.trainable:\n            # Simple SGD update\n            self.W -= self.W_optimizer['lr'] * grad_W\n            self.w0 -= self.w0_optimizer['lr'] * grad_w0\n\n        return grad_input.tolist()\n\n    def output_shape(self):\n        return (self.n_units,)\n```"}
{"task_id": 41, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    # Add padding to the input matrix\n    padded_input = np.pad(input_matrix, pad_width=padding, mode='constant', constant_values=0)\n    \n    # Get dimensions\n    input_height, input_width = padded_input.shape\n    kernel_height, kernel_width = kernel.shape\n    \n    # Calculate output dimensions\n    out_height = ((input_height - kernel_height) // stride) + 1\n    out_width = ((input_width - kernel_width) // stride) + 1\n    \n    # Initialize output matrix\n    output = np.zeros((out_height, out_width))\n    \n    # Perform convolution\n    for i in range(out_height):\n        for j in range(out_width):\n            # Define the current slice\n            start_i = i * stride\n            start_j = j * stride\n            end_i = start_i + kernel_height\n            end_j = start_j + kernel_width\n            \n            # Extract the current region\n            region = padded_input[start_i:end_i, start_j:end_j]\n            \n            # Element-wise multiplication and sum\n            conv_value = np.sum(region * kernel)\n            \n            # Round to 4 decimal places\n            output[i, j] = round(conv_value, 4)\n    \n    # Convert to list\n    return output.tolist()\n```"}
{"task_id": 42, "completion_id": 0, "completion": "```python\ndef relu(z: float) -> float:\n    return z if z > 0 else 0\n```"}
{"task_id": 43, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    # Compute predictions\n    y_pred = X @ w\n    \n    # Compute Mean Squared Error (MSE)\n    mse = np.mean((y_true - y_pred) ** 2)\n    \n    # Compute regularization term (excluding bias term if present)\n    reg = alpha * np.sum(w ** 2)\n    \n    # Compute total Ridge loss\n    loss = mse + reg\n    \n    # Return rounded result to 4 decimal places\n    return round(loss, 4)\n```"}
{"task_id": 44, "completion_id": 0, "completion": "```python\ndef leaky_relu(z: float, alpha: float = 0.01) -> float | int:\n    return z if z > 0 else alpha * z\n```"}
{"task_id": 45, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)\n```"}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric.\n\n    Parameters:\n    y_true (np.ndarray): Array of true binary labels (0 or 1).\n    y_pred (np.ndarray): Array of predicted binary labels (0 or 1).\n\n    Returns:\n    float: Precision score.\n    \"\"\"\n    # Ensure inputs are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n\n    # Calculate true positives (TP)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    # Calculate false positives (FP)\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    \n    # Handle division by zero\n    if tp + fp == 0:\n        return 0.0\n    \n    # Calculate precision\n    return tp / (tp + fp)\n```"}
{"task_id": 47, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Performs gradient descent optimization with specified method.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: numpy array of shape (n_features,)\n    - learning_rate: float\n    - n_iterations: int\n    - batch_size: int (used for mini-batch)\n    - method: str ('batch', 'stochastic', 'mini-batch')\n\n    Returns:\n    - list of weights after each iteration, rounded to 4 decimal places\n    \"\"\"\n    n_samples = X.shape[0]\n    weights_history = []\n\n    for iteration in range(n_iterations):\n        if method == 'batch':\n            # Compute predictions\n            predictions = X @ weights\n            # Compute error\n            error = predictions - y\n            # Compute gradient\n            gradient = (2 / n_samples) * (X.T @ error)\n            # Update weights\n            weights = weights - learning_rate * gradient\n\n        elif method == 'stochastic':\n            # Shuffle data at each iteration for stochastic gradient descent\n            indices = np.random.permutation(n_samples)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for i in range(n_samples):\n                xi = X_shuffled[i].reshape(1, -1)\n                yi = y_shuffled[i]\n                prediction = xi @ weights\n                error = prediction - yi\n                gradient = 2 * xi.T * error\n                weights = weights - learning_rate * gradient.flatten()\n\n        elif method == 'mini-batch':\n            # Shuffle data at each iteration\n            indices = np.random.permutation(n_samples)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for start_idx in range(0, n_samples, batch_size):\n                end_idx = min(start_idx + batch_size, n_samples)\n                X_batch = X_shuffled[start_idx:end_idx]\n                y_batch = y_shuffled[start_idx:end_idx]\n                batch_size_actual = X_batch.shape[0]\n                predictions = X_batch @ weights\n                error = predictions - y_batch\n                gradient = (2 / batch_size_actual) * (X_batch.T @ error)\n                weights = weights - learning_rate * gradient\n\n        else:\n            raise ValueError(\"Invalid method. Choose 'batch', 'stochastic', or 'mini-batch'.\")\n\n        # Append current weights rounded to 4 decimal places\n        weights_rounded = np.round(weights, 4).tolist()\n        weights_history.append(weights_rounded)\n\n    return weights_history\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rref(matrix):\n    \"\"\"\n    Convert the given matrix to its Reduced Row Echelon Form (RREF).\n\n    Args:\n        matrix (list of list of floats): The input matrix.\n\n    Returns:\n        list of list of floats: The RREF of the input matrix.\n    \"\"\"\n    # Convert input list to numpy array for easier manipulation\n    A = np.array(matrix, dtype=float)\n    rows, cols = A.shape\n    lead = 0  # The current pivot row\n\n    for r in range(rows):\n        if lead >= cols:\n            break\n        i = r\n        # Find the pivot in column 'lead' at or below row 'r'\n        while i < rows and np.isclose(A[i, lead], 0):\n            i += 1\n        if i == rows:\n            # No pivot in this column, move to next column\n            lead += 1\n            continue\n        # Swap current row with the row having the pivot\n        if i != r:\n            A[[r, i]] = A[[i, r]]\n        # Normalize the pivot row\n        pivot = A[r, lead]\n        if not np.isclose(pivot, 0):\n            A[r] = A[r] / pivot\n        # Eliminate all other entries in this column\n        for i in range(rows):\n            if i != r:\n                factor = A[i, lead]\n                A[i] = A[i] - factor * A[r]\n        lead += 1\n\n    # Due to floating point operations, set very small numbers to zero\n    A[np.isclose(A, 1e-12)] = 0\n\n    return A.tolist()\n```"}
{"task_id": 49, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8, num_iterations=10):\n    # Initialize parameters\n    x = np.array(x0, dtype=float)\n    m = np.zeros_like(x)  # First moment vector\n    v = np.zeros_like(x)  # Second moment vector\n    \n    for t in range(1, num_iterations + 1):\n        g = np.array(grad(x), dtype=float)\n        \n        # Update biased first moment estimate\n        m = beta1 * m + (1 - beta1) * g\n        # Update biased second raw moment estimate\n        v = beta2 * v + (1 - beta2) * (g ** 2)\n        \n        # Compute bias-corrected first moment estimate\n        m_hat = m / (1 - beta1 ** t)\n        # Compute bias-corrected second raw moment estimate\n        v_hat = v / (1 - beta2 ** t)\n        \n        # Update parameters\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n        \n    # Round to 4 decimal places\n    x_rounded = np.round(x, 4)\n    # Return as list\n    return x_rounded.tolist()\n```"}
{"task_id": 50, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l1_regularization_gradient_descent(\n    X: np.array,\n    y: np.array,\n    alpha: float = 0.1,\n    learning_rate: float = 0.01,\n    max_iter: int = 1000,\n    tol: float = 1e-4\n) -> tuple:\n    n_samples, n_features = X.shape\n    \n    # Initialize weights and bias\n    w = np.zeros(n_features)\n    b = 0.0\n    \n    for iteration in range(max_iter):\n        # Compute predictions\n        y_pred = X @ w + b\n        \n        # Compute residuals\n        residuals = y_pred - y\n        \n        # Compute gradients\n        dw = (1 / n_samples) * (X.T @ residuals) + alpha * np.sign(w)\n        db = (1 / n_samples) * np.sum(residuals)\n        \n        # Save previous weights for convergence check\n        w_prev = w.copy()\n        b_prev = b\n        \n        # Update weights and bias\n        w -= learning_rate * dw\n        b -= learning_rate * db\n        \n        # Check convergence\n        if np.linalg.norm(w - w_prev, ord=2) < tol and abs(b - b_prev) < tol:\n            break\n    \n    # Round results to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    \n    # Return as list\n    return (w_rounded.tolist(), b_rounded)\n```"}
{"task_id": 51, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n    \n    Args:\n        source (str): The source string to be transformed.\n        target (str): The target string to transform into.\n        \n    Returns:\n        int: The minimum number of edits (OSA distance) required.\n    \"\"\"\n    len_s = len(source)\n    len_t = len(target)\n    \n    # Initialize the DP matrix with size (len_s+1) x (len_t+1)\n    # Using numpy for efficient array operations\n    D = np.zeros((len_s + 1, len_t + 1), dtype=int)\n    \n    # Base cases: transforming empty string to prefixes\n    for i in range(1, len_s + 1):\n        D[i][0] = i  # deletions\n    for j in range(1, len_t + 1):\n        D[0][j] = j  # insertions\n    \n    for i in range(1, len_s + 1):\n        for j in range(1, len_t + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            \n            # Compute costs for deletion, insertion, substitution\n            deletion = D[i - 1][j] + 1\n            insertion = D[i][j - 1] + 1\n            substitution = D[i - 1][j - 1] + cost\n            \n            D[i][j] = min(deletion, insertion, substitution)\n            \n            # Check for transposition\n            if i > 1 and j > 1 and source[i - 1] == target[j - 2] and source[i - 2] == target[j - 1]:\n                D[i][j] = min(D[i][j], D[i - 2][j - 2] + 1)\n    \n    return D[len_s][len_t]\n```"}
{"task_id": 52, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef recall(y_true, y_pred):\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate True Positives (TP): predicted=1 and true=1\n    TP = np.sum((y_pred == 1) & (y_true == 1))\n    \n    # Calculate False Negatives (FN): predicted=0 but true=1\n    FN = np.sum((y_pred == 0) & (y_true == 1))\n    \n    # Calculate recall\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    recall_value = TP / denominator\n    \n    # Return rounded to three decimal places\n    return round(recall_value, 3)\n```"}
{"task_id": 53, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef self_attention(Q, K, V):\n    \"\"\"\n    Compute the self-attention mechanism.\n\n    Args:\n        Q (np.ndarray): Query matrix of shape (seq_len, d_k)\n        K (np.ndarray): Key matrix of shape (seq_len, d_k)\n        V (np.ndarray): Value matrix of shape (seq_len, d_v)\n\n    Returns:\n        list: The self-attention output as a list of lists, rounded to 4 decimal places.\n    \"\"\"\n    # Compute the dot product of Q and K transpose\n    scores = np.dot(Q, K.T)\n    \n    # Scale the scores by sqrt of dimension of key vectors\n    d_k = K.shape[1]\n    scaled_scores = scores / np.sqrt(d_k)\n    \n    # Apply softmax to get attention weights\n    # For numerical stability, subtract max before exponentiation\n    max_scores = np.max(scaled_scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(scaled_scores - max_scores)\n    attention_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    \n    # Compute the weighted sum of V\n    output = np.dot(attention_weights, V)\n    \n    # Round to 4 decimal places\n    output_rounded = np.round(output, 4)\n    \n    # Convert to list of lists\n    return output_rounded.tolist()\n```"}
{"task_id": 54, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rnn_forward(\n    input_sequence: list[list[float]],\n    initial_hidden_state: list[float],\n    Wx: list[list[float]],\n    Wh: list[list[float]],\n    b: list[float]\n) -> list[float]:\n    # Convert inputs to numpy arrays for easier computation\n    h = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    \n    for x in input_sequence:\n        x = np.array(x)\n        # Compute the new hidden state\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + b)\n        # Round to 4 decimal places\n        h = np.round(h, 4)\n    \n    return h.tolist()\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef translate_object(points, tx, ty):\n    # Convert list of points to a numpy array\n    points_array = np.array(points)\n    # Create a translation matrix (3x3) for affine transformation\n    translation_matrix = np.array([\n        [1, 0, tx],\n        [0, 1, ty],\n        [0, 0, 1]\n    ])\n    # Convert points to homogeneous coordinates (add a third coordinate of 1)\n    ones = np.ones((points_array.shape[0], 1))\n    homogeneous_points = np.hstack([points_array, ones])\n    # Apply the translation matrix\n    translated_points = homogeneous_points @ translation_matrix.T\n    # Discard the homogeneous coordinate\n    result_points = translated_points[:, :2]\n    # Convert back to list of lists\n    return result_points.tolist()\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the KL divergence between two normal distributions:\n    P ~ N(mu_p, sigma_p^2)\n    Q ~ N(mu_q, sigma_q^2)\n\n    KL(P || Q) = log(sigma_q / sigma_p) + (sigma_p^2 + (mu_p - mu_q)^2) / (2 * sigma_q^2) - 0.5\n\n    Args:\n        mu_p (float): Mean of distribution P\n        sigma_p (float): Standard deviation of distribution P\n        mu_q (float): Mean of distribution Q\n        sigma_q (float): Standard deviation of distribution Q\n\n    Returns:\n        float: The KL divergence from P to Q\n    \"\"\"\n    # Ensure standard deviations are positive\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError(\"Standard deviations must be positive.\")\n    \n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    kl_div = term1 + term2 - 0.5\n    return kl_div\n```"}
{"task_id": 57, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    size = A.shape[0]\n    \n    # Initialize x\n    if x_ini is None:\n        x = np.zeros(size)\n    else:\n        x = np.array(x_ini, dtype=float)\n    \n    for _ in range(n):\n        for i in range(size):\n            # Sum over all j except i\n            sum_ = 0\n            for j in range(size):\n                if j != i:\n                    sum_ += A[i][j] * x[j]\n            # Update x[i]\n            x[i] = (b[i] - sum_) / A[i][i]\n        # Optional: could add convergence check here\n    \n    # Round to 4 decimal places\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n\n    # Forward elimination with partial pivoting\n    for i in range(n):\n        # Partial pivoting: find the max element in the current column\n        max_row = i + np.argmax(np.abs(A[i:, i]))\n        if A[max_row, i] == 0:\n            raise ValueError(\"Matrix is singular or nearly singular.\")\n        # Swap rows if needed\n        if max_row != i:\n            A[[i, max_row]] = A[[max_row, i]]\n            b[[i, max_row]] = b[[max_row, i]]\n\n        # Eliminate entries below pivot\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] = A[j, i:] - factor * A[i, i:]\n            b[j] = b[j] - factor * b[i]\n\n    # Backward substitution\n    x = np.zeros(n)\n    for i in reversed(range(n)):\n        if A[i, i] == 0:\n            raise ValueError(\"Matrix is singular or nearly singular.\")\n        x[i] = (b[i] - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]\n\n    # Round results to 4 decimal places\n    x = np.round(x, 4)\n\n    # Return as list\n    return x.tolist()\n```"}
{"task_id": 59, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass LSTM:\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n\n        # Initialize weights with small random values\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n\n        # Initialize biases to zeros\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns:\n        - list of hidden states at each time step (as list of lists)\n        - final hidden state\n        - final cell state\n        \"\"\"\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n\n        hidden_states = []\n\n        for t in range(x.shape[0]):\n            # Concatenate input and previous hidden state\n            combined = np.vstack((x[t].reshape(-1,1), h_prev))\n            # Compute gates\n            f_t = self._sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self._sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_tilde = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = self._sigmoid(np.dot(self.Wo, combined) + self.bo)\n\n            # Update cell state\n            c_next = f_t * c_prev + i_t * c_tilde\n            # Update hidden state\n            h_next = o_t * np.tanh(c_next)\n\n            # Append current hidden state (flattened) to list\n            hidden_states.append(h_next.flatten().tolist())\n\n            # Prepare for next iteration\n            h_prev = h_next\n            c_prev = c_next\n\n        # Round results to 4 decimal places\n        hidden_states = np.round(np.array(hidden_states), 4).tolist()\n        final_hidden_state = np.round(h_prev.flatten(), 4).tolist()\n        final_cell_state = np.round(c_prev.flatten(), 4).tolist()\n\n        return hidden_states, final_hidden_state, final_cell_state\n\n    def _sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n```"}
{"task_id": 60, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_tf_idf(corpus, query):\n    # Handle empty corpus\n    if not corpus:\n        return []\n\n    # Convert corpus to numpy array for easier manipulation\n    # But since documents are lists of words, we process accordingly\n    # First, get total number of documents\n    N = len(corpus)\n\n    # Build a vocabulary set from the corpus\n    vocab = set()\n    for doc in corpus:\n        vocab.update(doc)\n    vocab = list(vocab)\n\n    # Create a term index mapping for quick lookup\n    term_index = {term: idx for idx, term in enumerate(vocab)}\n\n    # Initialize document-term matrix (frequency matrix)\n    # Rows: documents, Columns: terms\n    dt_matrix = np.zeros((N, len(vocab)), dtype=float)\n\n    # Fill the term frequency matrix\n    for doc_idx, doc in enumerate(corpus):\n        for word in doc:\n            if word in term_index:\n                dt_matrix[doc_idx, term_index[word]] += 1\n\n    # Compute document frequency (df) for each term\n    df = np.count_nonzero(dt_matrix > 0, axis=0)\n\n    # Compute IDF with smoothing to avoid division by zero\n    # IDF = log((N + 1) / (df + 1)) + 1\n    idf = np.log((N + 1) / (df + 1)) + 1\n\n    # Compute Term Frequency (TF) for each document\n    # To avoid division by zero, handle documents with zero length\n    tf_matrix = np.zeros_like(dt_matrix)\n    for i, doc in enumerate(corpus):\n        total_terms = len(doc)\n        if total_terms > 0:\n            for word in doc:\n                if word in term_index:\n                    tf_matrix[i, term_index[word]] += 1\n            tf_matrix[i] /= total_terms  # normalize by total terms\n\n    # For the query, compute TF for each document\n    # Initialize result list\n    results = []\n\n    # For each document, compute TF-IDF for each query term\n    for doc_idx in range(N):\n        tfidf_scores = []\n        for q_word in query:\n            if q_word in term_index:\n                # TF for the term in the document\n                tf = tf_matrix[doc_idx, term_index[q_word]]\n                # TF-IDF score\n                score = tf * idf[term_index[q_word]]\n            else:\n                # Term not in vocabulary, score is 0\n                score = 0.0\n            tfidf_scores.append(round(score, 4))\n        results.append(tfidf_scores)\n\n    return results\n```"}
{"task_id": 61, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    # Calculate True Positives (TP), False Positives (FP), False Negatives (FN)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    \n    # Calculate Precision and Recall\n    precision = TP / (TP + FP) if (TP + FP) > 0 else 0.0\n    recall = TP / (TP + FN) if (TP + FN) > 0 else 0.0\n    \n    # Calculate F-Score\n    beta_squared = beta ** 2\n    denominator = (beta_squared * precision) + recall\n    if denominator == 0:\n        f_score_value = 0.0\n    else:\n        f_score_value = (1 + beta_squared) * (precision * recall) / denominator\n    \n    return round(f_score_value, 3)\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef initialize_weights(input_size, hidden_size, output_size):\n    \"\"\"\n    Initialize weights and biases for the RNN.\n    Weights are small random values, biases are zeros.\n    \"\"\"\n    W_xh = np.random.randn(hidden_size, input_size) * 0.01\n    W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n    W_hy = np.random.randn(output_size, hidden_size) * 0.01\n    b_h = np.zeros((hidden_size, 1))\n    b_y = np.zeros((output_size, 1))\n    return W_xh, W_hh, W_hy, b_h, b_y\n\ndef rnn_forward(W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n    \"\"\"\n    Forward pass through the RNN for the entire sequence.\n    Args:\n        W_xh, W_hh, W_hy: weight matrices\n        b_h, b_y: biases\n        hidden_size: size of hidden layer\n        input_sequence: list or array of input vectors (sequence length x input_size)\n    Returns:\n        outputs: list of output vectors at each time step\n        last_inputs: list of input vectors at each time step\n        last_hiddens: list of hidden states at each time step\n    \"\"\"\n    h_prev = np.zeros((hidden_size, 1))\n    outputs = []\n    last_inputs = []\n    last_hiddens = []\n\n    for x in input_sequence:\n        x = x.reshape(-1, 1)  # ensure column vector\n        last_inputs.append(x)\n        # Hidden state update\n        h_current = np.tanh(np.dot(W_xh, x) + np.dot(W_hh, h_prev) + b_h)\n        last_hiddens.append(h_current)\n        # Output computation\n        y = np.dot(W_hy, h_current) + b_y\n        outputs.append(y)\n        h_prev = h_current\n\n    return outputs, last_inputs, last_hiddens\n\ndef rnn_backward(W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n    \"\"\"\n    Backpropagation Through Time (BPTT) to update weights.\n    Args:\n        W_xh, W_hh, W_hy: current weights\n        b_h, b_y: current biases\n        hidden_size: size of hidden layer\n        input_sequence: list of input vectors\n        expected_output: list of expected output vectors\n        outputs: list of predicted outputs at each time step\n        last_inputs: list of input vectors at each time step\n        last_hiddens: list of hidden states at each time step\n        learning_rate: learning rate for updates\n    Returns:\n        Updated weights and biases\n    \"\"\"\n    # Initialize gradients\n    dW_xh = np.zeros_like(W_xh)\n    dW_hh = np.zeros_like(W_hh)\n    dW_hy = np.zeros_like(W_hy)\n    db_h = np.zeros_like(b_h)\n    db_y = np.zeros_like(b_y)\n\n    # Initialize delta for next hidden state (for BPTT)\n    dh_next = np.zeros((hidden_size, 1))\n\n    # Loop backwards through time\n    for t in reversed(range(len(input_sequence))):\n        x = last_inputs[t]\n        h = last_hiddens[t]\n        y_pred = outputs[t]\n        y_true = expected_output[t].reshape(-1, 1)\n\n        # Compute error at output\n        dy = y_pred - y_true  # shape: (output_size, 1)\n\n        # Gradients for W_hy and b_y\n        dW_hy += np.dot(dy, h.T)\n        db_y += dy\n\n        # Backpropagate into hidden layer\n        dh = np.dot(W_hy.T, dy) + dh_next  # shape: (hidden_size, 1)\n        # Derivative of tanh activation\n        dh_raw = (1 - h ** 2) * dh\n\n        # Gradients for W_xh, W_hh, and b_h\n        dW_xh += np.dot(dh_raw, x.T)\n        dW_hh += np.dot(dh_raw, last_hiddens[t-1].T) if t > 0 else 0\n        db_h += dh_raw\n\n        # Prepare dh_next for previous time step\n        dh_next = np.dot(W_hh.T, dh_raw)\n\n    # Clip gradients to prevent exploding gradients\n    for d in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n        np.clip(d, -1, 1, out=d)\n\n    # Update weights and biases\n    W_xh -= learning_rate * dW_xh\n    W_hh -= learning_rate * dW_hh\n    W_hy -= learning_rate * dW_hy\n    b_h -= learning_rate * db_h\n    b_y -= learning_rate * db_y\n\n    return W_xh, W_hh, W_hy, b_h, b_y\n\ndef entrypoint(input_sequence, expected_output, input_size, hidden_size, output_size, learning_rate=0.01, epochs=100, random_seed=42):\n    \"\"\"\n    Main function to train the RNN on the provided sequence data.\n    Args:\n        input_sequence: list of input vectors (sequence length x input_size)\n        expected_output: list of expected output vectors (sequence length x output_size)\n        input_size: size of input vectors\n        hidden_size: size of hidden layer\n        output_size: size of output vectors\n        learning_rate: learning rate for training\n        epochs: number of training epochs\n        random_seed: seed for reproducibility\n    Returns:\n        List of outputs after training, rounded to 5 decimal places\n    \"\"\"\n    np.random.seed(random_seed)  # Set random seed for reproducibility\n    W_xh, W_hh, W_hy, b_h, b_y = initialize_weights(input_size, hidden_size, output_size)\n    for epoch in range(epochs):\n        outputs, last_inputs, last_hiddens = rnn_forward(W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence)\n        W_xh, W_hh, W_hy, b_h, b_y = rnn_backward(\n            W_xh, W_hh, W_hy, b_h, b_y,\n            hidden_size,\n            input_sequence,\n            expected_output,\n            outputs,\n            last_inputs,\n            last_hiddens,\n            learning_rate\n        )\n    # Return the outputs rounded to 5 decimal places\n    return np.round(np.array(outputs), 5).tolist()\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-8):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x as a list rounded to 8 decimal places\n    \"\"\"\n    # Initialize the solution vector\n    if x0 is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = x0.astype(float)\n\n    # Compute initial residual\n    r = b - A @ x\n    # Initialize the search direction\n    p = r.copy()\n    # Compute initial residual norm\n    rs_old = np.dot(r, r)\n\n    for i in range(n):\n        Ap = A @ p\n        alpha = rs_old / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rs_new = np.dot(r, r)\n\n        # Check for convergence\n        if np.sqrt(rs_new) < tol:\n            break\n\n        p = r + (rs_new / rs_old) * p\n        rs_old = rs_new\n\n    # Round the solution to 8 decimal places and convert to list\n    x_rounded = np.round(x, 8).tolist()\n    return x_rounded\n```"}
{"task_id": 64, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    # Convert list to numpy array for easier calculations\n    y_array = np.array(y)\n    \n    # Get the unique classes and their counts\n    classes, counts = np.unique(y_array, return_counts=True)\n    \n    # Calculate the probabilities for each class\n    probabilities = counts / counts.sum()\n    \n    # Calculate Gini Impurity\n    gini = 1 - np.sum(probabilities ** 2)\n    \n    # Return rounded value\n    return round(gini, 3)\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```python\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_ptr = [0]  # Start with 0 for the first row\n\n    for row in dense_matrix:\n        non_zero_count = 0\n        for col_idx, element in enumerate(row):\n            if element != 0:\n                values.append(element)\n                col_indices.append(col_idx)\n                non_zero_count += 1\n        # Append the cumulative count of non-zero elements so far\n        row_ptr.append(row_ptr[-1] + non_zero_count)\n\n    return values, col_indices, row_ptr\n```"}
{"task_id": 66, "completion_id": 0, "completion": "```python\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L, rounded to 3 decimal places\n    \"\"\"\n    # Calculate dot product of v and L\n    dot_product = sum(vi * Li for vi, Li in zip(v, L))\n    # Calculate dot product of L with itself\n    L_norm_sq = sum(Li * Li for Li in L)\n    # Handle the case when L is a zero vector\n    if L_norm_sq == 0:\n        return [0.0 for _ in v]\n    # Compute the scalar projection factor\n    scalar = dot_product / L_norm_sq\n    # Compute the projection vector\n    projection = [scalar * Li for Li in L]\n    # Round each component to 3 decimal places\n    projection_rounded = [round(coord, 3) for coord in projection]\n    return projection_rounded\n```"}
{"task_id": 67, "completion_id": 0, "completion": "```python\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix:\n        return [], [], []\n\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n\n    values = []\n    row_indices = []\n    col_pointer = [0]\n\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        col_pointer.append(len(values))\n    \n    return values, row_indices, col_pointer\n```"}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef matrix_image(A):\n    \"\"\"\n    Computes the basis vectors for the column space (image) of matrix A.\n    The basis vectors are selected from the original columns of A corresponding\n    to the pivot columns in the row echelon form of A.\n\n    Parameters:\n    A (np.ndarray): The input matrix.\n\n    Returns:\n    list: A list of basis vectors (each as a list), rounded to 8 decimal places.\n    \"\"\"\n    # Convert A to a numpy array in case it's not\n    A = np.array(A, dtype=float)\n    m, n = A.shape\n\n    # Perform row echelon form (REF) using Gaussian elimination\n    R = A.copy()\n    pivot_cols = []\n\n    row = 0\n    for col in range(n):\n        # Find the pivot row\n        max_row = np.argmax(np.abs(R[row:, col])) + row\n        if np.abs(R[max_row, col]) > 1e-12:\n            # Swap to bring pivot to the current row\n            R[[row, max_row]] = R[[max_row, row]]\n            # Normalize pivot row\n            R[row] = R[row] / R[row, col]\n            # Eliminate below\n            for r in range(row + 1, m):\n                R[r] = R[r] - R[r, col] * R[row]\n            pivot_cols.append(col)\n            row += 1\n            if row == m:\n                break\n        # If pivot is zero, move to next column\n\n    # The pivot columns correspond to the basis vectors in the original matrix\n    basis_vectors = []\n    for col in pivot_cols:\n        basis_vectors.append(A[:, col])\n\n    # Round to 8 decimal places\n    basis_vectors = [np.round(vec, 8).tolist() for vec in basis_vectors]\n\n    return basis_vectors\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef r_squared(y_true, y_pred):\n    # Convert inputs to numpy arrays for consistency\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the total sum of squares (variance of the true values)\n    ss_total = np.sum((y_true - np.mean(y_true)) ** 2)\n    \n    # Calculate the residual sum of squares (errors between true and predicted)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    \n    # Compute R-squared\n    r2 = 1 - (ss_residual / ss_total)\n    \n    # Return the R-squared value rounded to three decimal places\n    return round(r2, 3)\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\ndef calculate_brightness(img):\n    # Check if the image is empty\n    if not img:\n        return -1\n\n    # Check if all rows are lists and non-empty\n    row_length = None\n    for row in img:\n        if not isinstance(row, list):\n            return -1\n        if row_length is None:\n            row_length = len(row)\n            if row_length == 0:\n                return -1\n        elif len(row) != row_length:\n            # Inconsistent row lengths\n            return -1\n\n    # Check pixel values for validity\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, (int, float)):\n                return -1\n            if pixel < 0 or pixel > 255:\n                return -1\n\n    # Calculate the sum of all pixel values\n    total_pixels = 0\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            total_brightness += pixel\n            total_pixels += 1\n\n    # Handle case where total_pixels is zero (empty rows)\n    if total_pixels == 0:\n        return -1\n\n    # Calculate average brightness\n    average_brightness = total_brightness / total_pixels\n\n    # Return rounded to two decimal places\n    return round(average_brightness, 2)\n```"}
{"task_id": 71, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Validate input types\n    if not (np.issubdtype(y_true.dtype, np.number) and np.issubdtype(y_pred.dtype, np.number)):\n        raise TypeError(\"Input arrays must contain numeric values.\")\n    \n    # Check for shape mismatch\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"Input arrays must have the same shape.\")\n    \n    # Check for empty arrays\n    if y_true.size == 0:\n        raise ValueError(\"Input arrays must not be empty.\")\n    \n    # Calculate the squared differences\n    squared_diff = (y_true - y_pred) ** 2\n    \n    # Compute mean of squared differences\n    mse = np.mean(squared_diff)\n    \n    # Calculate RMSE\n    rmse_value = np.sqrt(mse)\n    \n    # Return rounded result\n    return round(rmse_value, 3)\n```"}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef jaccard_index(y_true, y_pred):\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate intersection and union\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    \n    # Handle edge case where both arrays are all zeros\n    if union == 0:\n        return 1.0  # Both are empty, considered perfect overlap\n    \n    # Calculate Jaccard Index\n    jaccard = intersection / union\n    \n    # Return rounded result\n    return round(jaccard, 3)\n```"}
{"task_id": 73, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between two binary arrays.\n\n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Ensure binary arrays\n    y_true = y_true.astype(bool)\n    y_pred = y_pred.astype(bool)\n    \n    # Calculate intersection\n    intersection = np.sum(y_true & y_pred)\n    \n    # Calculate sums\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    \n    # Handle edge case: if both sums are zero, define Dice as 1 (perfect overlap)\n    if sum_true + sum_pred == 0:\n        return 1.0\n    \n    # Compute Dice Score\n    dice = (2 * intersection) / (sum_true + sum_pred)\n    \n    return round(dice, 3)\n```"}
{"task_id": 74, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a dataset row using Hyperdimensional Computing.\n\n    Parameters:\n    - row: dict, feature_name -> feature_value\n    - dim: int, dimensionality of hypervectors\n    - random_seeds: dict, feature_name -> seed for reproducibility\n\n    Returns:\n    - list: the composite hypervector as a list\n    \"\"\"\n    # Initialize the composite hypervector as a zero vector\n    composite_hv = np.zeros(dim)\n\n    for feature_name, feature_value in row.items():\n        seed = random_seeds.get(feature_name, 0)\n        rng = np.random.RandomState(seed)\n\n        # Generate hypervector for feature name (fixed, random, bipolar)\n        rng_name = np.random.RandomState(seed)\n        feature_name_hv = rng_name.choice([-1, 1], size=dim)\n\n        # Generate hypervector for feature value\n        # Use the same seed for the feature to ensure reproducibility\n        rng_value = np.random.RandomState(seed)\n        value_hv = rng_value.choice([-1, 1], size=dim)\n\n        # Bind feature name and value hypervectors (element-wise multiplication)\n        bound_hv = feature_name_hv * value_hv\n\n        # Bundle (add) the bound hypervector to the composite\n        composite_hv += bound_hv\n\n    # Optionally, normalize the composite hypervector (not required but common)\n    # composite_hv = composite_hv / np.linalg.norm(composite_hv)\n\n    return composite_hv.tolist()\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef confusion_matrix(data):\n    # Initialize counts\n    tp = fp = fn = tn = 0\n    \n    for y_true, y_pred in data:\n        if y_true == 1 and y_pred == 1:\n            tp += 1\n        elif y_true == 0 and y_pred == 1:\n            fp += 1\n        elif y_true == 1 and y_pred == 0:\n            fn += 1\n        elif y_true == 0 and y_pred == 0:\n            tn += 1\n    \n    # Return the confusion matrix as a list of lists\n    return [[tp, fp],\n            [fn, tn]]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cosine_similarity(v1, v2):\n    # Ensure input vectors are numpy arrays\n    v1 = np.array(v1)\n    v2 = np.array(v2)\n    \n    # Check if vectors have the same shape\n    if v1.shape != v2.shape:\n        raise ValueError(\"Input vectors must have the same shape.\")\n    \n    # Check for empty vectors\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError(\"Input vectors cannot be empty.\")\n    \n    # Calculate the dot product\n    dot_product = np.dot(v1, v2)\n    \n    # Calculate the magnitudes\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    \n    # Check for zero magnitude\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError(\"Input vectors cannot have zero magnitude.\")\n    \n    # Compute cosine similarity\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    \n    # Round to three decimal places\n    return round(similarity, 3)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    # Initialize counts\n    TP = FP = TN = FN = 0\n    \n    # Calculate confusion matrix components\n    for a, p in zip(actual, predicted):\n        if a == 1 and p == 1:\n            TP += 1\n        elif a == 0 and p == 1:\n            FP += 1\n        elif a == 0 and p == 0:\n            TN += 1\n        elif a == 1 and p == 0:\n            FN += 1\n    \n    # Construct confusion matrix\n    confusion_matrix = [[TN, FP],\n                        [FN, TP]]\n    \n    # Calculate metrics with handling division by zero\n    total = len(actual)\n    accuracy = (TP + TN) / total if total != 0 else 0.0\n    \n    precision = TP / (TP + FP) if (TP + FP) != 0 else 0.0\n    recall = TP / (TP + FN) if (TP + FN) != 0 else 0.0\n    f1_score = (2 * precision * recall) / (precision + recall) if (precision + recall) != 0 else 0.0\n    \n    specificity = TN / (TN + FP) if (TN + FP) != 0 else 0.0\n    negative_predictive_value = TN / (TN + FN) if (TN + FN) != 0 else 0.0\n    \n    # Round to three decimal places\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    \n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\n```"}
{"task_id": 78, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy import stats\n\ndef descriptive_statistics(data):\n    # Convert data to numpy array for convenience\n    data = np.array(data)\n    \n    # Calculate mean\n    mean = np.round(np.mean(data), 4)\n    \n    # Calculate median\n    median = np.round(np.median(data), 4)\n    \n    # Calculate mode\n    mode_result = stats.mode(data, nan_policy='omit')\n    mode_value = mode_result.mode[0]\n    mode = mode_value  # Mode is a single value\n    \n    # Calculate variance (sample variance)\n    variance = np.round(np.var(data, ddof=1), 4)\n    \n    # Calculate standard deviation (sample std)\n    standard_deviation = np.round(np.std(data, ddof=1), 4)\n    \n    # Calculate percentiles\n    percentile_25 = np.round(np.percentile(data, 25), 4)\n    percentile_50 = np.round(np.percentile(data, 50), 4)\n    percentile_75 = np.round(np.percentile(data, 75), 4)\n    \n    # Calculate interquartile range (IQR)\n    iqr = np.round(percentile_75 - percentile_25, 4)\n    \n    # Return as dictionary\n    return {\n        'mean': mean,\n        'median': median,\n        'mode': mode,\n        'variance': variance,\n        'standard_deviation': standard_deviation,\n        '25th_percentile': percentile_25,\n        '50th_percentile': percentile_50,\n        '75th_percentile': percentile_75,\n        'interquartile_range': iqr\n    }\n```"}
{"task_id": 79, "completion_id": 0, "completion": "```python\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places\n    \"\"\"\n    # Calculate the binomial coefficient (n choose k)\n    comb = math.comb(n, k)\n    # Calculate the probability\n    probability = comb * (p ** k) * ((1 - p) ** (n - k))\n    # Return the probability rounded to five decimal places\n    return round(probability, 5)\n```"}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport math\n\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -((x - mean) ** 2) / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport math\n\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    # Calculate the Poisson probability\n    probability = (math.exp(-lam) * lam**k) / math.factorial(k)\n    # Return the probability rounded to 5 decimal places\n    return round(probability, 5)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int or float: The contrast value, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    # Ensure the input is a numpy array\n    if not isinstance(img, np.ndarray):\n        raise TypeError(\"Input image must be a numpy.ndarray.\")\n    # Check if the image is 2D\n    if img.ndim != 2:\n        raise ValueError(\"Input image must be a 2D array representing a grayscale image.\")\n    # Check pixel value range\n    if np.any(img < 0) or np.any(img > 255):\n        raise ValueError(\"Pixel values should be in the range 0 to 255.\")\n    # Calculate contrast as max - min pixel value\n    contrast = np.max(img) - np.min(img)\n    return contrast\n```"}
{"task_id": 83, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float or int: The dot product of the two vectors.\n    \"\"\"\n    # Ensure the input vectors are numpy arrays\n    vec1 = np.array(vec1)\n    vec2 = np.array(vec2)\n    \n    # Check if the vectors are 1D\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError(\"Both input vectors must be 1D arrays.\")\n    \n    # Check if the vectors have the same length\n    if vec1.shape != vec2.shape:\n        raise ValueError(\"Input vectors must have the same length.\")\n    \n    # Calculate and return the dot product\n    return np.dot(vec1, vec2)\n```"}
{"task_id": 84, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    Returns:\n        list of list: Transformed features for each data point, rounded to 8 decimal places.\n    \"\"\"\n    if degree < 0:\n        return []\n\n    transformed_data = []\n\n    for x in data:\n        # Generate polynomial features from degree 0 up to the specified degree\n        features = [round(x ** d, 8) for d in range(degree + 1)]\n        transformed_data.append(features)\n\n    return transformed_data\n```"}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pos_encoding(position: int, d_model: int):\n    # Return -1 if position is 0 or d_model is less than or equal to 0\n    if position == 0 or d_model <= 0:\n        return -1\n\n    # Initialize the positional encoding matrix\n    angle_rads = np.zeros((position, d_model), dtype=np.float16)\n\n    # Create the position array (shape: [position, 1])\n    positions = np.arange(position).reshape(-1, 1)\n\n    # Compute the denominator for the angles\n    div_term = np.exp(np.arange(0, d_model, 2) * -(np.log(10000.0) / d_model)).astype(np.float16)\n\n    # Apply sine to even indices in the array; cosine to odd indices\n    angle_rads[:, 0::2] = np.sin(positions * div_term)\n    angle_rads[:, 1::2] = np.cos(positions * div_term)\n\n    # Convert to list of lists\n    return angle_rads.tolist()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of 1 (Overfitting), -1 (Underfitting), or 0 (Good fit).\n    \"\"\"\n    # Check for overfitting\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    # Check for underfitting\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    # Otherwise, the model is performing well\n    else:\n        return 0\n```"}
{"task_id": 87, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    # Convert inputs to numpy arrays for consistent operations\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    \n    # Update biased first moment estimate\n    m = beta1 * m + (1 - beta1) * grad\n    # Update biased second moment estimate\n    v = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected first and second moment estimates\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    \n    # Update parameters\n    parameter_update = learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = parameter - parameter_update\n    \n    # Round to 5 decimal places and convert to list\n    updated_parameter = np.round(updated_parameter, 5).tolist()\n    m = np.round(m, 5).tolist()\n    v = np.round(v, 5).tolist()\n    \n    return updated_parameter, m, v\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12,\n        \"n_layer\": 2,  # Number of transformer blocks\n        \"d_model\": 10,  # Embedding size\n        \"d_ff\": 20,     # Feed-forward layer size\n        \"max_position_embeddings\": 1024,\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),  # Token embedding matrix (vocab_size=3, d_model=10)\n        \"wpe\": np.random.rand(1024, 10),  # Positional embedding matrix\n        \"blocks\": [],  # Will be filled with transformer blocks\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\n\ndef gen_text(prompt: str, n_tokens_to_generate: int = 40):\n    np.random.seed(42)  # Set the random seed for reproducibility\n\n    # Load dummy encoder, hyperparameters, and parameters\n    encoder, hparams, params = load_encoder_hparams_and_params()\n\n    # Helper functions for the simplified GPT-2 components\n\n    def get_token_embeddings():\n        return params[\"wte\"]  # shape: (vocab_size, d_model)\n\n    def get_positional_embeddings():\n        return params[\"wpe\"]  # shape: (max_position_embeddings, d_model)\n\n    def layer_norm(x, g, b, epsilon=1e-5):\n        mean = x.mean(axis=-1, keepdims=True)\n        std = x.std(axis=-1, keepdims=True)\n        return g * (x - mean) / (std + epsilon) + b\n\n    def scaled_dot_product_attention(q, k, v):\n        dk = q.shape[-1]\n        scores = np.matmul(q, k.transpose(0, 2, 1)) / np.sqrt(dk)\n        weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n        weights /= np.sum(weights, axis=-1, keepdims=True)\n        return np.matmul(weights, v)\n\n    def multi_head_attention(x, n_head):\n        # For simplicity, assume d_model is divisible by n_head\n        d_model = x.shape[-1]\n        head_dim = d_model // n_head\n\n        # Initialize weights for query, key, value projections\n        W_q = np.random.rand(d_model, d_model)\n        W_k = np.random.rand(d_model, d_model)\n        W_v = np.random.rand(d_model, d_model)\n\n        q = np.dot(x, W_q).reshape(x.shape[0], -1, n_head, head_dim).transpose(0, 2, 1, 3)\n        k = np.dot(x, W_k).reshape(x.shape[0], -1, n_head, head_dim).transpose(0, 2, 1, 3)\n        v = np.dot(x, W_v).reshape(x.shape[0], -1, n_head, head_dim).transpose(0, 2, 1, 3)\n\n        # Compute attention for each head\n        attn_output = scaled_dot_product_attention(q, k, v)\n        # Concatenate heads\n        attn_output = attn_output.transpose(0, 2, 1, 3).reshape(x.shape[0], -1, d_model)\n\n        # Output projection\n        W_o = np.random.rand(d_model, d_model)\n        output = np.dot(attn_output, W_o)\n        return output\n\n    def feed_forward(x):\n        # Simple feed-forward network\n        W1 = np.random.rand(x.shape[-1], 20)\n        W2 = np.random.rand(20, x.shape[-1])\n        return np.dot(np.maximum(0, np.dot(x, W1)), W2)\n\n    def transformer_block(x):\n        # Layer normalization parameters\n        g = params[\"ln_f\"][\"g\"]\n        b = params[\"ln_f\"][\"b\"]\n        # Multi-head attention\n        attn_output = multi_head_attention(x, hparams[\"n_head\"])\n        x = layer_norm(x + attn_output, g, b)\n        # Feed-forward\n        ff_output = feed_forward(x)\n        x = layer_norm(x + ff_output, g, b)\n        return x\n\n    # Encode the prompt\n    tokens = encoder.encode(prompt)\n    # Pad or truncate tokens to context size\n    max_ctx = hparams[\"n_ctx\"]\n    tokens = tokens[-max_ctx:]\n    # Convert tokens to embeddings\n    token_embeddings = get_token_embeddings()\n    position_embeddings = get_positional_embeddings()\n\n    # Initialize input embeddings\n    input_embeddings = token_embeddings[tokens]\n    # Add positional embeddings\n    positions = np.arange(len(tokens))\n    input_embeddings += position_embeddings[positions]\n\n    # Convert to batch dimension\n    x = input_embeddings[np.newaxis, :, :]  # shape: (1, seq_len, d_model)\n\n    generated_tokens = tokens.copy()\n\n    for _ in range(n_tokens_to_generate):\n        # Pass through transformer blocks\n        for _ in range(hparams[\"n_layer\"]):\n            x = transformer_block(x)\n\n        # Take the last token's embedding for prediction\n        last_token_embedding = x[0, -1, :]  # shape: (d_model,)\n\n        # Compute logits for next token (simulate with a dot product)\n        logits = np.dot(get_token_embeddings(), last_token_embedding)\n        # Apply softmax\n        probs = np.exp(logits - np.max(logits))\n        probs /= np.sum(probs)\n\n        # Sample next token\n        next_token_id = np.random.choice(len(probs), p=probs)\n        generated_tokens.append(next_token_id)\n\n        # Append new token embedding to sequence\n        new_embedding = get_token_embeddings()[next_token_id]\n        # Add positional embedding\n        pos = len(generated_tokens) - 1\n        new_embedding += position_embeddings[pos]\n        # Append to x\n        new_embedding = new_embedding[np.newaxis, :]  # shape: (1, d_model)\n        x = np.concatenate([x, new_embedding[:, np.newaxis, :]], axis=1)\n\n    # Decode generated tokens\n    generated_text = encoder.decode(generated_tokens)\n    return generated_text\n```"}
{"task_id": 89, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pattern_weaver(n, crystal_values, dimension):\n    def softmax(values):\n        # To prevent overflow, subtract max from values\n        e_values = np.exp(values - np.max(values))\n        return e_values / e_values.sum()\n\n    # Convert crystal values to a numpy array\n    values = np.array(crystal_values, dtype=float)\n\n    # Initialize the output list\n    pattern_patterns = []\n\n    for i in range(n):\n        # Compute the query vector for the current crystal\n        query = values[i]\n        # Compute the key vectors for all crystals\n        keys = values\n\n        # Calculate raw attention scores (dot product)\n        scores = query * keys\n\n        # Apply softmax to get attention weights\n        attention_weights = softmax(scores)\n\n        # Compute the weighted sum (pattern) for the current crystal\n        pattern_value = np.sum(attention_weights * values)\n\n        # Round to 4 decimal places\n        pattern_patterns.append(round(pattern_value, 4))\n\n    return pattern_patterns\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for each document in the corpus given a query.\n\n    Parameters:\n    - corpus: list of strings, each representing a document.\n    - query: string, the search query.\n    - k1: float, term frequency scaling parameter.\n    - b: float, document length normalization parameter.\n\n    Returns:\n    - List of floats, each representing the BM25 score for the corresponding document, rounded to 3 decimal places.\n    \"\"\"\n\n    # Preprocessing: tokenize documents and query\n    # For simplicity, split on whitespace and convert to lowercase\n    tokenized_corpus = [doc.lower().split() for doc in corpus]\n    tokenized_query = query.lower().split()\n\n    # Compute document lengths\n    doc_lengths = [len(doc) for doc in tokenized_corpus]\n    avg_doc_length = np.mean(doc_lengths) if doc_lengths else 0\n\n    # Compute document frequencies for each term\n    # Count in how many documents each term appears\n    df_counter = Counter()\n    for doc in tokenized_corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            df_counter[term] += 1\n\n    N = len(corpus)  # Total number of documents\n\n    # Compute IDF for each term in the query\n    # Using BM25's IDF formula with smoothing\n    idf = {}\n    for term in tokenized_query:\n        df = df_counter.get(term, 0)\n        # Add 0.5 to numerator and denominator for smoothing (optional)\n        idf_score = np.log((N - df + 0.5) / (df + 0.5) + 1)\n        idf[term] = idf_score\n\n    scores = []\n\n    for doc_idx, doc in enumerate(tokenized_corpus):\n        score = 0.0\n        term_freqs = Counter(doc)\n        doc_len = doc_lengths[doc_idx]\n\n        for term in tokenized_query:\n            tf = term_freqs.get(term, 0)\n            if tf == 0:\n                continue\n            # BM25 term score\n            numerator = tf * (k1 + 1)\n            denominator = tf + k1 * (1 - b + b * (doc_len / avg_doc_length))\n            term_score = idf[term] * (numerator / denominator)\n            score += term_score\n\n        scores.append(round(score, 3))\n\n    return scores\n```"}
{"task_id": 91, "completion_id": 0, "completion": "```python\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    # Initialize counts\n    true_positive = 0\n    false_positive = 0\n    false_negative = 0\n\n    # Loop through the labels to count TP, FP, FN\n    for true_label, pred_label in zip(y_true, y_pred):\n        if pred_label == true_label:\n            if true_label == 1:\n                true_positive += 1\n        else:\n            if pred_label == 1:\n                false_positive += 1\n            if true_label == 1:\n                false_negative += 1\n\n    # Calculate precision and recall\n    precision = true_positive / (true_positive + false_positive) if (true_positive + false_positive) > 0 else 0.0\n    recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) > 0 else 0.0\n\n    # Calculate F1 score\n    if precision + recall == 0:\n        f1_score = 0.0\n    else:\n        f1_score = 2 * (precision * recall) / (precision + recall)\n\n    return round(f1_score, 3)\n```"}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport math\nPI = 3.14159\n\ndef power_grid_forecast(consumption_data):\n    # Number of days in the data\n    n = len(consumption_data)\n    \n    # Step 1: Detrend data by removing known fluctuation\n    detrended = []\n    for i in range(1, n + 1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended.append(consumption_data[i - 1] - fluctuation)\n    \n    # Step 2: Perform linear regression on detrended data\n    # Calculate means\n    x_values = list(range(1, n + 1))\n    mean_x = sum(x_values) / n\n    mean_y = sum(detrended) / n\n    \n    # Calculate slope (m) and intercept (b)\n    numerator = sum((x - mean_x) * (y - mean_y) for x, y in zip(x_values, detrended))\n    denominator = sum((x - mean_x) ** 2 for x in x_values)\n    m = numerator / denominator\n    b = mean_y - m * mean_x\n    \n    # Step 3: Predict day 15's base consumption\n    day_15 = 15\n    base_pred = m * day_15 + b\n    \n    # Step 4: Add back the fluctuation for day 15\n    fluctuation_day_15 = 10 * math.sin(2 * PI * day_15 / 10)\n    predicted_total = base_pred + fluctuation_day_15\n    \n    # Step 5: Add 5% safety margin\n    final_value = predicted_total * 1.05\n    \n    # Step 6: Round up to the nearest integer\n    final_int = int(math.ceil(final_value))\n    \n    return final_int\n```"}
{"task_id": 93, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    # Calculate the absolute differences\n    absolute_errors = np.abs(y_true - y_pred)\n    # Compute the mean of these errors\n    mean_absolute_error = np.mean(absolute_errors)\n    # Return the result rounded to 3 decimal places\n    return round(mean_absolute_error, 3)\n```"}
{"task_id": 94, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_qkv(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the Query, Key, and Value matrices by linear transformation.\n    \n    Args:\n        X (np.ndarray): Input data of shape (m, n).\n        W_q (np.ndarray): Weight matrix for Query of shape (n, n).\n        W_k (np.ndarray): Weight matrix for Key of shape (n, n).\n        W_v (np.ndarray): Weight matrix for Value of shape (n, n).\n        \n    Returns:\n        Q, K, V (np.ndarray): Transformed matrices each of shape (m, n).\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return Q, K, V\n\ndef self_attention(Q, K, V):\n    \"\"\"\n    Compute the scaled dot-product self-attention.\n    \n    Args:\n        Q (np.ndarray): Query matrix of shape (m, d).\n        K (np.ndarray): Key matrix of shape (m, d).\n        V (np.ndarray): Value matrix of shape (m, d).\n        \n    Returns:\n        output (np.ndarray): Attention output of shape (m, d).\n    \"\"\"\n    d_k = Q.shape[1]\n    # Compute scaled dot-product attention scores\n    scores = Q @ K.T / np.sqrt(d_k)\n    # Apply softmax to each row\n    exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attention_weights = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    # Compute the weighted sum of V\n    output = attention_weights @ V\n    return output\n\ndef multi_head_attention(Q, K, V, n_heads):\n    \"\"\"\n    Compute multi-head attention by splitting Q, K, V into multiple heads,\n    performing self-attention on each, and concatenating the results.\n    \n    Args:\n        Q, K, V (np.ndarray): Matrices of shape (m, n).\n        n_heads (int): Number of attention heads.\n        \n    Returns:\n        np.ndarray: Concatenated attention output of shape (m, n).\n    \"\"\"\n    m, n = Q.shape\n    assert n % n_heads == 0, \"n must be divisible by n_heads\"\n    depth = n // n_heads\n    \n    # Split Q, K, V into multiple heads\n    def split_heads(x):\n        # shape: (m, n_heads, depth)\n        return x.reshape(m, n_heads, depth)\n    \n    Q_heads = split_heads(Q)\n    K_heads = split_heads(K)\n    V_heads = split_heads(V)\n    \n    # Perform attention on each head\n    head_outputs = []\n    for i in range(n_heads):\n        q = Q_heads[:, i, :]\n        k = K_heads[:, i, :]\n        v = V_heads[:, i, :]\n        head_output = self_attention(q, k, v)\n        head_outputs.append(head_output)\n    \n    # Concatenate all heads\n    concatenated = np.concatenate(head_outputs, axis=1)\n    return concatenated\n\ndef entrypoint(m, n, n_heads, random_seed):\n    np.random.seed(random_seed)\n    # Generate input data\n    X = np.arange(m * n).reshape(m, n)\n    X = np.random.permutation(X.flatten()).reshape(m, n)\n    # Generate weight matrices\n    W_q = np.random.randint(0, 4, size=(n, n))\n    W_k = np.random.randint(0, 5, size=(n, n))\n    W_v = np.random.randint(0, 6, size=(n, n))\n    # Compute Q, K, V\n    Q, K, V = compute_qkv(X, W_q, W_k, W_v)\n    # Compute multi-head attention\n    return np.round(multi_head_attention(Q, K, V, n_heads), 4).tolist()\n```"}
{"task_id": 95, "completion_id": 0, "completion": "```python\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    n = len(x)\n\n    # Calculate the counts for the 2x2 contingency table\n    n11 = sum(1 for xi, yi in zip(x, y) if xi == 1 and yi == 1)\n    n10 = sum(1 for xi, yi in zip(x, y) if xi == 1 and yi == 0)\n    n01 = sum(1 for xi, yi in zip(x, y) if xi == 0 and yi == 1)\n    n00 = sum(1 for xi, yi in zip(x, y) if xi == 0 and yi == 0)\n\n    # Calculate numerator and denominator for Phi coefficient\n    numerator = (n11 * n00) - (n10 * n01)\n    denominator = ((n11 + n10) * (n01 + n00) * (n11 + n01) * (n10 + n00)) ** 0.5\n\n    # Handle case where denominator is zero\n    if denominator == 0:\n        return 0.0\n\n    phi = numerator / denominator\n    return round(phi, 4)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    # Hard Sigmoid is typically defined as:\n    # max(0, min(1, 0.2 * x + 0.5))\n    return max(0.0, min(1.0, 0.2 * x + 0.5))\n```"}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport math\n\ndef elu(x: float, alpha: float = 1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to 4 decimal places\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)\n```"}
{"task_id": 98, "completion_id": 0, "completion": "```python\ndef prelu(x: float, alpha: float = 0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * x\n```"}
{"task_id": 99, "completion_id": 0, "completion": "```python\nimport math\n\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places\n    \"\"\"\n    # To prevent overflow in e^x for large x\n    if x > 20:\n        # For large x, softplus(x) \u2248 x (since e^x dominates)\n        result = x\n    elif x < -20:\n        # For large negative x, softplus(x) \u2248 e^x\n        result = math.exp(x)\n    else:\n        # For moderate x, compute log(1 + e^x) directly\n        result = math.log1p(math.exp(x))\n    return round(result, 4)\n```"}
{"task_id": 100, "completion_id": 0, "completion": "```python\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value, rounded to 6 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n\n    # Compute the likelihood ratio with respect to the old policy\n    # (Assuming rhos are already pi_theta / pi_theta_old)\n    # Compute the ratio of current policy to reference policy\n    ratio_ref = rhos * (pi_theta_ref / pi_theta_old)\n\n    # Clipping the likelihood ratios\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n\n    # Compute the surrogate objectives\n    surrogate1 = rhos * A\n    surrogate2 = clipped_rhos * A\n\n    # The clipped surrogate objective\n    surrogate = np.minimum(surrogate1, surrogate2)\n\n    # Compute the average of the surrogate\n    policy_objective = np.mean(surrogate)\n\n    # Compute the KL divergence penalty\n    # KL(pi_theta_ref || pi_theta_old)\n    # To avoid log(0), add a small epsilon inside log\n    epsilon_log = 1e-8\n    kl_div = np.sum(pi_theta_ref * np.log((pi_theta_ref + epsilon_log) / (pi_theta_old + epsilon_log)))\n\n    # Total objective with penalty\n    total_objective = policy_objective - beta * kl_div\n\n    # Round to 6 decimal places\n    return round(total_objective, 6)\n```"}
{"task_id": 102, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to 4 decimal places\n    \"\"\"\n    result = x * (1 / (1 + math.exp(-x)))\n    return round(result, 4)\n```"}
{"task_id": 103, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554804\n\n    # To ensure numerical stability, handle large negative inputs\n    # For very large negative x, exp(x) approaches 0, so ELU(x) approaches -1\n    # For large positive x, ELU(x) = x\n    if x > 0:\n        selu_value = scale * x\n    else:\n        # Use math.exp for better control over numerical stability\n        exp_x = math.exp(x)\n        selu_value = scale * (alpha * (exp_x - 1))\n    \n    # Round to 4 decimal places\n    return round(selu_value, 4)\n```"}
{"task_id": 104, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    # Compute the linear combination\n    linear_combination = np.dot(X, weights) + bias\n    # Apply sigmoid function to get probabilities\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    # Generate binary predictions based on threshold 0.5\n    predictions = (probabilities >= 0.5).astype(int)\n    # Convert to list\n    return predictions.tolist()\n```"}
{"task_id": 105, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    # Ensure y is integer labels starting from 0\n    # Get number of samples (N), features (D), and number of classes (C)\n    N, D = X.shape\n    C = np.max(y) + 1  # assuming y contains class labels from 0 to C-1\n\n    # Initialize weights (parameters): shape (D, C)\n    B = np.zeros((D, C))\n    \n    # To store loss values\n    losses = []\n\n    for _ in range(iterations):\n        # Compute logits: shape (N, C)\n        logits = X @ B  # shape (N, C)\n\n        # Numerical stability: subtract max for each sample\n        logits -= np.max(logits, axis=1, keepdims=True)\n\n        # Compute softmax probabilities\n        exp_logits = np.exp(logits)\n        sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n        probs = exp_logits / sum_exp  # shape (N, C)\n\n        # Compute cross-entropy loss\n        # For each sample, pick the probability of the true class\n        correct_logprobs = -np.log(probs[np.arange(N), y])\n        loss = np.mean(correct_logprobs)\n        losses.append(round(loss, 4))\n\n        # Compute gradient\n        # Create indicator matrix for true classes\n        indicator = np.zeros_like(probs)\n        indicator[np.arange(N), y] = 1\n\n        # Gradient of loss w.r.t. logits\n        dL_dlogits = probs - indicator  # shape (N, C)\n\n        # Gradient w.r.t. weights B\n        grad = (X.T @ dL_dlogits) / N  # shape (D, C)\n\n        # Update weights\n        B -= learning_rate * grad\n\n    # Convert B to list of floats, flattened\n    B_flat = B.flatten().tolist()\n    B_rounded = [round(val, 4) for val in B_flat]\n\n    return B_rounded, losses\n```"}
{"task_id": 106, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    # Add bias term (intercept) to feature matrix\n    X_bias = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Initialize weights (parameters) to zeros\n    weights = np.zeros(X_bias.shape[1])\n    \n    # List to store loss values over iterations\n    loss_history = []\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    for _ in range(iterations):\n        # Compute linear combination\n        z = X_bias @ weights\n        # Predicted probabilities\n        y_pred = sigmoid(z)\n        \n        # Compute binary cross entropy loss\n        # To avoid log(0), clip y_pred\n        epsilon = 1e-15\n        y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n        # Append rounded loss\n        loss_history.append(round(loss, 4))\n        \n        # Compute gradient\n        gradient = (X_bias.T @ (y_pred - y)) / X.shape[0]\n        \n        # Update weights\n        weights -= learning_rate * gradient\n    \n    # Round final weights to 4 decimal places\n    weights_rounded = np.round(weights, 4)\n    \n    # Convert to list\n    weights_list = weights_rounded.tolist()\n    loss_list = [l for l in loss_history]\n    \n    return (loss_list, weights_list)\n```"}
{"task_id": 107, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\n\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    # Compute scaled dot-product attention scores\n    dk = Q.shape[-1]\n    scores = np.matmul(Q, K.transpose(0, 2, 1)) / np.sqrt(dk)\n    \n    # Apply the mask: set scores to a very negative value where mask == 0\n    scores = np.where(mask, scores, -1e9)\n    \n    # Compute attention weights with softmax\n    # To ensure numerical stability, subtract max before exponentiating\n    max_scores = np.max(scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(scores - max_scores)\n    attention_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    \n    # Compute the output as weighted sum of V\n    output = np.matmul(attention_weights, V)\n    \n    # Convert to list\n    return output.tolist()\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The measure increases with the variety and distribution of colors.\n    \"\"\"\n    from math import log2, isclose\n\n    if not apples:\n        return 0.0\n\n    # Count the frequency of each color\n    from collections import Counter\n    counts = Counter(apples)\n\n    total = len(apples)\n\n    # Calculate the probability of each color\n    probabilities = [count / total for count in counts.values()]\n\n    # Compute Shannon entropy as a measure of disorder\n    # Shannon entropy: sum of -p * log2(p)\n    entropy = -sum(p * log2(p) for p in probabilities if p > 0)\n\n    # Round to 4 decimal places\n    return round(entropy, 4)\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    \"\"\"\n    Performs Layer Normalization on input tensor X.\n\n    Args:\n        X (np.ndarray): Input tensor of shape (batch_size, seq_length, feature_dim).\n        gamma (np.ndarray): Scale parameter of shape (feature_dim,).\n        beta (np.ndarray): Shift parameter of shape (feature_dim,).\n        epsilon (float): Small constant for numerical stability.\n\n    Returns:\n        list: The normalized tensor as a nested list, rounded to 5 decimal places.\n    \"\"\"\n    # Compute mean and variance across the feature dimension for each sample in batch and sequence\n    mean = np.mean(X, axis=2, keepdims=True)\n    variance = np.var(X, axis=2, keepdims=True)\n\n    # Normalize\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n\n    # Apply scale (gamma) and shift (beta)\n    # Reshape gamma and beta for broadcasting\n    gamma = gamma.reshape(1, 1, -1)\n    beta = beta.reshape(1, 1, -1)\n\n    out = X_normalized * gamma + beta\n\n    # Round to 5 decimal places\n    out_rounded = np.round(out, 5)\n\n    # Convert to list\n    return out_rounded.tolist()\n```"}
{"task_id": 110, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score between a reference and a candidate translation.\n\n    Args:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation.\n        alpha (float): Weighting factor for precision and recall (default=0.9).\n        beta (float): Parameter for F-mean (default=3).\n        gamma (float): Penalty for fragmentation (default=0.5).\n\n    Returns:\n        float: The METEOR score rounded to 3 decimal places.\n    \"\"\"\n    # Tokenize the sentences into words\n    ref_words = reference.strip().split()\n    cand_words = candidate.strip().split()\n\n    # Count unigrams in reference and candidate\n    ref_counts = Counter(ref_words)\n    cand_counts = Counter(cand_words)\n\n    # Count matching unigrams\n    matches = sum((ref_counts & cand_counts).values())\n\n    # Handle case with no matches\n    if matches == 0:\n        return 0.0\n\n    # Precision and Recall\n    precision = matches / len(cand_words)\n    recall = matches / len(ref_words)\n\n    # F-mean\n    f_mean = (precision * recall) / (alpha * precision + (1 - alpha) * recall)\n\n    # Word order fragmentation penalty\n    # Find matched positions\n    ref_indices = {}\n    cand_indices = {}\n\n    # Map each matched word to its positions\n    for idx, word in enumerate(ref_words):\n        if word in cand_words:\n            ref_indices.setdefault(word, []).append(idx)\n\n    for idx, word in enumerate(cand_words):\n        if word in ref_words:\n            cand_indices.setdefault(word, []).append(idx)\n\n    # Build the list of matched positions in reference and candidate\n    matched_positions_ref = []\n    matched_positions_cand = []\n\n    for word in ref_counts:\n        count = min(ref_counts[word], cand_counts.get(word, 0))\n        ref_pos_list = ref_indices.get(word, [])\n        cand_pos_list = cand_indices.get(word, [])\n        # Match the positions for the number of matches\n        for i in range(count):\n            matched_positions_ref.append(ref_pos_list[i])\n            matched_positions_cand.append(cand_pos_list[i])\n\n    # If only one matched word, no fragmentation\n    if len(matched_positions_ref) <= 1:\n        fragmentation = 0\n    else:\n        # Count number of chunks (consecutive sequences)\n        chunks = 1\n        for i in range(1, len(matched_positions_ref)):\n            if matched_positions_ref[i] != matched_positions_ref[i-1] + 1 or \\\n               matched_positions_cand[i] != matched_positions_cand[i-1] + 1:\n                chunks += 1\n        fragmentation = (chunks - 1) / len(matched_positions_ref)\n\n    # Compute the penalty\n    penalty = gamma * fragmentation\n\n    # Final METEOR score\n    score = f_mean * (1 - penalty)\n\n    return round(score, 3)\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) between two events.\n\n    Parameters:\n    - joint_counts (int): The count of joint occurrence of the two events.\n    - total_counts_x (int): The total count of the first event.\n    - total_counts_y (int): The total count of the second event.\n    - total_samples (int): The total number of samples.\n\n    Returns:\n    - float: The PMI value rounded to 3 decimal places.\n    \"\"\"\n    # Convert counts to probabilities\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n\n    # To avoid log of zero, check if probabilities are greater than zero\n    if p_xy > 0 and p_x > 0 and p_y > 0:\n        pmi = np.log2(p_xy / (p_x * p_y))\n    else:\n        pmi = 0.0\n\n    return round(pmi, 3)\n```"}
{"task_id": 112, "completion_id": 0, "completion": "```python\ndef min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n\n    min_val = min(x)\n    max_val = max(x)\n\n    # Handle the case where all values are the same\n    if min_val == max_val:\n        return [round(0.0, 4) for _ in x]\n\n    normalized = []\n    for value in x:\n        norm_value = (value - min_val) / (max_val - min_val)\n        normalized.append(round(norm_value, 4))\n    return normalized\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    # First layer: linear transformation + ReLU\n    z1 = np.dot(w1, x)\n    a1 = np.maximum(z1, 0)  # ReLU\n    \n    # Second layer: linear transformation + ReLU\n    z2 = np.dot(w2, a1)\n    a2 = np.maximum(z2, 0)  # ReLU\n    \n    # Add shortcut connection (original input)\n    # Ensure input and output dimensions match\n    shortcut = x\n    # If dimensions differ, handle accordingly (assuming same shape here)\n    output = a2 + shortcut\n    \n    # Final ReLU activation\n    final_output = np.maximum(output, 0)\n    \n    # Round to 4 decimal places and convert to list\n    rounded_output = np.round(final_output, 4).tolist()\n    return rounded_output\n```"}
{"task_id": 114, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D feature map.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels)\n\n    Returns:\n    np.ndarray: 1D array of shape (channels,), where each element is the average\n                of the corresponding feature map.\n    \"\"\"\n    # Compute the mean over the height and width dimensions for each channel\n    return np.mean(x, axis=(0, 1))\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    \"\"\"\n    Performs batch normalization on a 4D input tensor in BCHW format.\n\n    Parameters:\n    - X: np.ndarray of shape (batch, channels, height, width)\n    - gamma: np.ndarray of shape (channels,)\n    - beta: np.ndarray of shape (channels,)\n    - epsilon: small float for numerical stability\n\n    Returns:\n    - List of lists representing the normalized, scaled, and shifted output, rounded to 4 decimal places.\n    \"\"\"\n    # Compute mean and variance across batch and spatial dimensions for each channel\n    # Reshape for broadcasting\n    # Shape: (channels,)\n    mean = np.mean(X, axis=(0, 2, 3))\n    var = np.var(X, axis=(0, 2, 3))\n    \n    # Normalize\n    X_normalized = (X - mean[None, :, None, None]) / np.sqrt(var[None, :, None, None] + epsilon)\n    \n    # Scale and shift\n    out = gamma[None, :, None, None] * X_normalized + beta[None, :, None, None]\n    \n    # Round to 4 decimal places\n    out_rounded = np.round(out, 4)\n    \n    # Convert to list\n    return out_rounded.tolist()\n```"}
{"task_id": 116, "completion_id": 0, "completion": "```python\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    # Compute the derivative of c * x^n at point x\n    derivative_value = c * n * (x ** (n - 1))\n    # Return the result rounded to 4 decimal places\n    return round(derivative_value, 4)\n```"}
{"task_id": 117, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthonormal_basis(vectors: list[list[float]], tol: float = 1e-10):\n    # Convert input list of vectors to numpy array for easier manipulation\n    vectors_np = np.array(vectors, dtype=float)\n    \n    # Initialize list to hold the orthonormal basis vectors\n    basis = []\n\n    for v in vectors_np:\n        # Start with the current vector\n        v_proj = v.copy()\n        # Subtract projections onto all previously found basis vectors\n        for b in basis:\n            proj = np.dot(v_proj, b) * b\n            v_proj = v_proj - proj\n        \n        # Check if the resulting vector is linearly independent (not near zero)\n        norm = np.linalg.norm(v_proj)\n        if norm > tol:\n            # Normalize the vector to have unit length\n            v_orthonormal = v_proj / norm\n            basis.append(v_orthonormal)\n        # If the vector is near zero, it is linearly dependent; skip it\n\n    # Round each basis vector to 4 decimal places and convert to list\n    basis_rounded = [np.round(b, 4).tolist() for b in basis]\n    return basis_rounded\n```"}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_product(a, b):\n    # Convert input lists to numpy arrays\n    vec_a = np.array(a)\n    vec_b = np.array(b)\n    # Compute the cross product\n    cross_prod = np.cross(vec_a, vec_b)\n    # Round to 4 decimal places\n    rounded = np.round(cross_prod, 4)\n    # Convert to list\n    return rounded.tolist()\n```"}
{"task_id": 119, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    \n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-12:\n        return -1\n    \n    n = A.shape[0]\n    x = np.zeros(n)\n    \n    for i in range(n):\n        A_copy = np.copy(A)\n        A_copy[:, i] = b\n        det_Ai = np.linalg.det(A_copy)\n        x[i] = det_Ai / det_A\n    \n    # Round to 4 decimal places\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()\n```"}
{"task_id": 120, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    # Check for empty lists or different lengths\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    \n    # Convert lists to numpy arrays for easier computation\n    p_array = np.array(p)\n    q_array = np.array(q)\n    \n    # Ensure the distributions are valid probability distributions\n    # (Optional: normalize if needed, but assuming input is already normalized)\n    # Compute the Bhattacharyya coefficient\n    coefficient = np.sum(np.sqrt(p_array * q_array))\n    \n    # To avoid math domain errors, ensure coefficient is within [0,1]\n    coefficient = min(max(coefficient, 0), 1)\n    \n    # Calculate the Bhattacharyya distance\n    distance = -np.log(coefficient)\n    \n    # Round to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 121, "completion_id": 0, "completion": "```python\ndef vector_sum(a: list[int|float], b: list[int|float]) -> list[int|float]:\n    # Check if vectors have the same length\n    if len(a) != len(b):\n        return -1\n    # Compute element-wise sum\n    return [x + y for x, y in zip(a, b)]\n```"}
{"task_id": 122, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Compute the average policy gradient using REINFORCE algorithm over given episodes.\n\n    Args:\n        theta (np.ndarray): Parameter matrix of shape (num_states, num_actions).\n        episodes (list of list): Each episode is a list of (state, action, reward) tuples.\n\n    Returns:\n        list: The average gradient as a list of lists, each inner list corresponds to a state's gradient.\n    \"\"\"\n    # Initialize gradient accumulator with zeros, same shape as theta\n    grad_accumulator = np.zeros_like(theta)\n\n    for episode in episodes:\n        G = 0  # Initialize return\n        # Process episode in reverse for cumulative return\n        for t in reversed(range(len(episode))):\n            state, action, reward = episode[t]\n            G = reward + G  # Update return\n\n            # Compute softmax probabilities for current state\n            logits = theta[state]\n            max_logit = np.max(logits)  # For numerical stability\n            exp_logits = np.exp(logits - max_logit)\n            probs = exp_logits / np.sum(exp_logits)\n\n            # Compute gradient of log policy\n            # For all actions: probs, for taken action: probs[action]\n            # Gradient: -probs for all actions + 1 at the taken action\n            grad_log_policy = -probs\n            grad_log_policy[action] += 1\n\n            # Accumulate gradient weighted by return G\n            grad_contribution = G * grad_log_policy\n\n            # Add to the overall gradient accumulator\n            grad_accumulator[state] += grad_contribution\n\n    # Compute average over all episodes\n    avg_grad = grad_accumulator / len(episodes)\n\n    # Round to 4 decimal places\n    avg_grad_rounded = np.round(avg_grad, 4)\n\n    # Convert to list of lists\n    return avg_grad_rounded.tolist()\n```"}
{"task_id": 123, "completion_id": 0, "completion": "```python\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational efficiency (cost savings) of an MoE layer compared to a dense layer.\n\n    Parameters:\n    - n_experts (int): Total number of experts.\n    - k_active (int): Number of active experts per input (sparsity).\n    - d_in (int): Input feature dimension.\n    - d_out (int): Output feature dimension.\n\n    Returns:\n    - savings_percentage (float): Percentage of FLOPs saved by MoE compared to dense layer, rounded to 1 decimal.\n    \"\"\"\n\n    # FLOPs for dense layer\n    dense_flops = d_in * d_out\n\n    # FLOPs for MoE layer\n    # For each active expert:\n    #   - Expert computation: d_in * d_out\n    #   - Gating computation: n_experts * d_in (to compute gating weights)\n    # Since only k_active experts are active per input:\n    moe_flops = k_active * (d_in * d_out + n_experts * d_in)\n\n    # Compute savings\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n\n    return round(savings, 1)\n```"}
{"task_id": 124, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef noisy_topk_gating(\n    X: np.ndarray,\n    W_g: np.ndarray,\n    W_noise: np.ndarray,\n    N: np.ndarray,\n    k: int\n):\n    \"\"\"\n    Implements the Noisy Top-K gating mechanism.\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gating weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_experts)\n    - k: Number of top experts to select (sparsity constraint)\n\n    Returns:\n    - gating_probs: List of lists representing the gating probabilities matrix,\n                    each rounded to 4 decimal places.\n    \"\"\"\n\n    # Compute clean logits: shape (batch_size, num_experts)\n    logits = np.dot(X, W_g)\n\n    # Compute noise logits: shape (batch_size, num_experts)\n    noise_logits = np.dot(X, W_noise)\n\n    # Add noise scaled by N\n    noisy_logits = logits + N * noise_logits\n\n    # For each sample, find the top-k experts\n    # argsort in descending order\n    topk_indices = np.argsort(-noisy_logits, axis=1)[:, :k]\n\n    # Create a mask for top-k experts\n    batch_size, num_experts = noisy_logits.shape\n    mask = np.zeros_like(noisy_logits)\n    row_indices = np.arange(batch_size)[:, None]\n    mask[row_indices, topk_indices] = 1\n\n    # Zero out logits not in top-k\n    masked_logits = np.where(mask == 1, noisy_logits, -np.inf)\n\n    # Compute softmax over the masked logits\n    # To avoid numerical instability, subtract max\n    max_logits = np.max(masked_logits, axis=1, keepdims=True)\n    exp_logits = np.exp(masked_logits - max_logits)\n    sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n    gating_probs = exp_logits / sum_exp\n\n    # Round to 4 decimal places\n    gating_probs_rounded = np.round(gating_probs, 4)\n\n    # Convert to list of lists\n    return gating_probs_rounded.tolist()\n```"}
{"task_id": 125, "completion_id": 0, "completion": "```python\nimport numpy as np\nnp.random.seed(42)\n\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Sparse Mixture of Experts (MoE) layer with softmax gating and top-k routing.\n\n    Args:\n        x (np.ndarray): Input tensor of shape (batch_size, input_dim)\n        We (np.ndarray): Expert weight matrix of shape (n_experts, input_dim, output_dim)\n        Wg (np.ndarray): Gating weight matrix of shape (input_dim, n_experts)\n        n_experts (int): Number of experts\n        top_k (int): Number of top experts to select per token\n\n    Returns:\n        list: Final output as a nested list, rounded to 4 decimal places\n    \"\"\"\n    batch_size, input_dim = x.shape\n    output_dim = We.shape[2]\n\n    # Compute gating logits: shape (batch_size, n_experts)\n    gating_logits = np.dot(x, Wg)  # shape: (batch_size, n_experts)\n\n    # Compute gating probabilities with softmax\n    # For numerical stability, subtract max\n    gating_logits_stable = gating_logits - np.max(gating_logits, axis=1, keepdims=True)\n    gating_exp = np.exp(gating_logits_stable)\n    gating_probs = gating_exp / np.sum(gating_exp, axis=1, keepdims=True)  # shape: (batch_size, n_experts)\n\n    # For each token, select top-k experts\n    top_k_indices = np.argsort(gating_probs, axis=1)[:, -top_k:][:, ::-1]  # shape: (batch_size, top_k)\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=1)  # shape: (batch_size, top_k)\n\n    # Initialize output tensor\n    # shape: (batch_size, output_dim)\n    output = np.zeros((batch_size, output_dim))\n\n    for i in range(batch_size):\n        # For each token\n        expert_indices = top_k_indices[i]  # shape: (top_k,)\n        expert_probs = top_k_probs[i]      # shape: (top_k,)\n\n        # Normalize the top-k gating probabilities\n        prob_sum = np.sum(expert_probs)\n        if prob_sum == 0:\n            # To avoid division by zero, distribute uniformly\n            expert_probs = np.ones_like(expert_probs) / top_k\n        else:\n            expert_probs = expert_probs / prob_sum\n\n        # For each selected expert, compute its contribution\n        for j, expert_idx in enumerate(expert_indices):\n            # Expert weight matrix: shape (input_dim, output_dim)\n            We_expert = We[expert_idx]  # shape: (input_dim, output_dim)\n            # Transform input\n            expert_output = np.dot(x[i], We_expert)  # shape: (output_dim,)\n            # Weight by gating probability\n            weighted_output = expert_probs[j] * expert_output\n            # Accumulate\n            output[i] += weighted_output\n\n    # Round to 4 decimal places\n    output_rounded = np.round(output, 4)\n\n    # Convert to list\n    return output_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample input\n    batch_size = 3\n    input_dim = 4\n    output_dim = 2\n    n_experts = 5\n    top_k = 2\n\n    x = np.random.randn(batch_size, input_dim)\n    We = np.random.randn(n_experts, input_dim, output_dim)\n    Wg = np.random.randn(input_dim, n_experts)\n\n    result = moe(x, We, Wg, n_experts, top_k)\n    print(result)\n```"}
{"task_id": 126, "completion_id": 0, "completion": "```python\nimport numpy as np\nnp.random.seed(42)\n\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float = 1e-5):\n    \"\"\"\n    Perform Group Normalization on input tensor X.\n\n    Parameters:\n    - X: np.ndarray of shape (B, C, H, W)\n    - gamma: np.ndarray of shape (C,)\n    - beta: np.ndarray of shape (C,)\n    - num_groups: int, number of groups to divide channels into\n    - epsilon: float, small value to avoid division by zero\n\n    Returns:\n    - List representation of the normalized tensor after applying scale and shift, rounded to 4 decimal places.\n    \"\"\"\n    B, C, H, W = X.shape\n    # Check that C is divisible by num_groups\n    assert C % num_groups == 0, \"Number of channels must be divisible by num_groups.\"\n    channels_per_group = C // num_groups\n\n    # Reshape to (B, num_groups, channels_per_group, H, W)\n    X_reshaped = X.reshape(B, num_groups, channels_per_group, H, W)\n\n    # Compute mean and variance over (channels_per_group, H, W)\n    mean = X_reshaped.mean(axis=(2,3,4), keepdims=True)\n    var = X_reshaped.var(axis=(2,3,4), keepdims=True)\n\n    # Normalize\n    X_norm = (X_reshaped - mean) / np.sqrt(var + epsilon)\n\n    # Reshape back to original shape\n    X_norm = X_norm.reshape(B, C, H, W)\n\n    # Apply scale (gamma) and shift (beta)\n    # Reshape gamma and beta for broadcasting\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n\n    out = X_norm * gamma + beta\n\n    # Round to 4 decimal places\n    out_rounded = np.round(out, 4)\n\n    # Convert to list\n    return out_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create dummy input tensor\n    X = np.random.randn(2, 4, 3, 3)\n    gamma = np.ones(4)\n    beta = np.zeros(4)\n    num_groups = 2\n\n    result = group_normalization(X, gamma, beta, num_groups)\n    print(result)\n```"}
{"task_id": 127, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef find_treasure(start_x: float, learning_rate: float = 0.1, tolerance: float = 1e-6, max_iters: int = 10000) -> float:\n    # Define the function\n    def f(x):\n        return x**4 - 3*x**3 + 2\n    \n    # Derivative of the function\n    def df(x):\n        return 4*x**3 - 9*x**2\n    \n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        new_x = x - learning_rate * gradient\n        # Check for convergence\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    \n    # Round to 4 decimal places\n    return round(x, 4)\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh (DyT) activation function to the input array.\n\n    Parameters:\n    - x: np.ndarray, input data\n    - alpha: float, scaling parameter\n    - gamma: float, shifting parameter\n    - beta: float, bias parameter\n\n    Returns:\n    - list of floats: the transformed and rounded results\n    \"\"\"\n    # Compute the dynamic scaling factor\n    scale = alpha * np.abs(x) + 1e-8  # add epsilon to avoid division by zero\n    \n    # Compute the normalized input\n    normalized_x = (x - beta) / scale\n    \n    # Apply the Tanh function\n    tanh_x = np.tanh(normalized_x)\n    \n    # Apply the dynamic scaling\n    dy_tanh = gamma * tanh_x\n    \n    # Round to 4 decimal places\n    rounded = np.round(dy_tanh, 4)\n    \n    # Return as list\n    return rounded.tolist()\n```"}
