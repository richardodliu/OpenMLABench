{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Performs Ridge (L2-regularized) linear regression using the closed-form solution.\n    \n    Parameters:\n    - data: numpy.ndarray\n        The dataset where the last column is the target variable y, and all preceding columns are features.\n    - alpha: float\n        The regularization strength (non-negative).\n        \n    Returns:\n    - list of floats: The weight vector (including bias term), rounded to 4 decimal places.\n                       Returns -1 if the matrix to invert is singular.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias (intercept) term as a column of ones\n    X_b = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute X^T X\n    XtX = X_b.T @ X_b\n    \n    # Add regularization term alpha * I\n    reg_matrix = alpha * np.eye(XtX.shape[0])\n    matrix_to_invert = XtX + reg_matrix\n    \n    # Check if the matrix is invertible\n    det = np.linalg.det(matrix_to_invert)\n    if np.isclose(det, 0):\n        return -1\n    \n    # Compute the inverse\n    try:\n        inv_matrix = np.linalg.inv(matrix_to_invert)\n    except np.linalg.LinAlgError:\n        return -1\n    \n    # Compute weights\n    w = inv_matrix @ (X_b.T @ y)\n    \n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Precompute the Gram matrix for efficiency\n    K = X_train @ X_train.T  # shape: (n_samples, n_samples)\n\n    while updates < n_iter:\n        error_found = False\n        for i in range(n_samples):\n            # Compute activation: sum_j alpha_j * y_j * K(x_j, x_i)\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                # Misclassified, update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                error_found = True\n                break  # Restart scan from the beginning\n        if not error_found:\n            # No misclassification in this pass, training converged\n            break\n\n    # Compute weight vector w from alpha\n    w = np.sum((alpha * y_train)[:, np.newaxis] * X_train, axis=0)\n\n    # Round w and b to 4 decimals\n    w_rounded = [round(coord, 4) for coord in w]\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    # Identity link: g(\u03bc) = \u03bc\n    identity = {\n        \"link\": lambda mu: mu,\n        \"inv_link\": lambda eta: eta,\n        \"deriv\": lambda mu: np.ones_like(mu)\n    }\n\n    # Log link: g(\u03bc) = log(\u03bc)\n    # Note: \u03bc > 0\n    log_link = {\n        \"link\": lambda mu: np.log(mu),\n        \"inv_link\": lambda eta: np.exp(eta),\n        \"deriv\": lambda mu: 1.0 / mu\n    }\n\n    # Logit link: g(\u03bc) = log(\u03bc / (1 - \u03bc))\n    # Note: 0 < \u03bc < 1\n    logit_link = {\n        \"link\": lambda mu: np.log(mu / (1 - mu)),\n        \"inv_link\": lambda eta: 1 / (1 + np.exp(-eta)),\n        \"deriv\": lambda mu: 1.0 / (mu * (1 - mu))\n    }\n\n    return {\n        \"identity\": identity,\n        \"log\": log_link,\n        \"logit\": logit_link\n    }\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    # Set the seed for reproducibility\n    np.random.seed(0)\n\n    n_samples, n_features = data.shape\n\n    # Initialize a list to store the depth for each sample\n    depths = [0] * n_samples\n\n    # Each node will be represented as a dictionary with keys:\n    # 'indices': indices of samples reaching this node\n    # 'depth': depth of this node\n    # 'left': left child node (or None)\n    # 'right': right child node (or None)\n    # 'is_leaf': boolean indicating if node is a leaf\n\n    def build_tree(indices, current_depth):\n        # If fewer than 3 samples, create a leaf node\n        if len(indices) < 3:\n            # Assign depth to all samples in this leaf\n            for idx in indices:\n                depths[idx] = current_depth\n            return\n\n        # Choose a feature at random\n        f = np.random.randint(0, n_features)\n\n        # Get the feature values for current samples\n        feature_values = data[indices, f]\n        down, up = feature_values.min(), feature_values.max()\n\n        # If all feature values are the same, create a leaf\n        if down == up:\n            for idx in indices:\n                depths[idx] = current_depth\n            return\n\n        # Choose a split value uniformly between down and up\n        v = np.random.uniform(down, up)\n\n        # Partition the indices into left and right\n        left_indices = [idx for idx in indices if data[idx, f] <= v]\n        right_indices = [idx for idx in indices if data[idx, f] > v]\n\n        # Recursively build left and right subtrees\n        build_tree(left_indices, current_depth + 1)\n        build_tree(right_indices, current_depth + 1)\n\n    # Start building the tree from all samples at depth 0\n    build_tree(list(range(n_samples)), 0)\n\n    return depths\n```"}
{"task_id": 4, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the squared norms of each sample\n    norms = np.sum(X ** 2, axis=1).reshape(-1, 1)  # shape (n_samples, 1)\n\n    # Use the identity: ||x - y||^2 = ||x||^2 + ||y||^2 - 2 * x\u00b7y\n    D = norms + norms.T - 2 * np.dot(X, X.T)\n\n    # Numerical stability: ensure no negative values due to floating point errors\n    D = np.maximum(D, 0)\n\n    # Round to 4 decimal places\n    D = np.round(D, 4)\n\n    # Convert to list of lists\n    return D.tolist()\n```"}
{"task_id": 6, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    # Convert all predictions to numpy arrays for easier manipulation\n    pred_arrays = [np.array(p) for p in predictions]\n    \n    # Check that all have the same shape\n    shape = pred_arrays[0].shape\n    for arr in pred_arrays:\n        if arr.shape != shape:\n            raise ValueError(\"All prediction arrays must have the same shape.\")\n    \n    # Sum the scaled predictions across all trees\n    # Initialize with zeros\n    total_score = np.zeros(shape)\n    for arr in pred_arrays:\n        total_score += -learning_rate * arr\n    \n    # Apply softmax row-wise\n    # To improve numerical stability, subtract max per row before exponentiating\n    max_per_row = np.max(total_score, axis=1, keepdims=True)\n    exp_scores = np.exp(total_score - max_per_row)\n    sum_exp = np.sum(exp_scores, axis=1, keepdims=True)\n    probabilities = exp_scores / sum_exp\n    \n    # For each sample, pick the class with the highest probability\n    predictions_labels = np.argmax(probabilities, axis=1)\n    \n    # Convert to list and return\n    return predictions_labels.tolist()\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Total number of transactions\n    N = len(transactions)\n    # Minimum support count\n    min_support = math.ceil(minsup * N)\n\n    # Convert each transaction to a set for faster subset checks\n    transaction_sets = [set(t) for t in transactions]\n\n    # Dictionary to hold all frequent itemsets with their support counts\n    frequent_itemsets = dict()\n\n    # Step 1: Find frequent 1-itemsets\n    item_counter = Counter()\n    for t in transaction_sets:\n        for item in t:\n            item_counter[item] += 1\n\n    # Filter 1-itemsets by support threshold\n    current_frequent_itemsets = {\n        (item,): count for item, count in item_counter.items() if count >= min_support\n    }\n    # Add to the global result\n    frequent_itemsets.update(current_frequent_itemsets)\n\n    # Initialize variables for iterative process\n    k = 2\n    prev_frequent_itemsets = list(current_frequent_itemsets.keys())\n\n    # Loop to find larger itemsets\n    while prev_frequent_itemsets:\n        candidate_counts = Counter()\n\n        # Generate candidate itemsets of size k\n        # To do this efficiently, we can generate candidates by joining previous frequent itemsets\n        # with each other, ensuring lex order and avoiding duplicates\n        candidates = set()\n        for i in range(len(prev_frequent_itemsets)):\n            for j in range(i + 1, len(prev_frequent_itemsets)):\n                # Join only if first k-2 items are the same (to avoid duplicates)\n                itemset1 = prev_frequent_itemsets[i]\n                itemset2 = prev_frequent_itemsets[j]\n                if itemset1[:-1] == itemset2[:-1]:\n                    candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    if len(candidate) == k:\n                        candidates.add(candidate)\n\n        # Count support for each candidate\n        for candidate in candidates:\n            # For each transaction, check if candidate is subset\n            count = 0\n            for t in transaction_sets:\n                if set(candidate).issubset(t):\n                    count += 1\n            if count >= min_support:\n                candidate_counts[candidate] = count\n\n        # Update the list of frequent itemsets\n        current_frequent_itemsets = {\n            itemset: count for itemset, count in candidate_counts.items()\n        }\n\n        # Add new frequent itemsets to the global result\n        frequent_itemsets.update(current_frequent_itemsets)\n\n        # Prepare for next iteration\n        prev_frequent_itemsets = list(current_frequent_itemsets.keys())\n        k += 1\n\n    return frequent_itemsets\n```"}
{"task_id": 8, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Initialize parameters\n    w = np.zeros(n_features)\n    b = 0.0\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Gradient descent\n    for _ in range(n_iterations):\n        # Compute linear scores\n        z = np.dot(X_train, w) + b\n        # Compute predictions\n        preds = sigmoid(z)\n        # Compute errors\n        errors = preds - y_train\n        # Compute gradients\n        dw = np.dot(X_train.T, errors) / n_samples\n        db = np.sum(errors) / n_samples\n        # Update parameters\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Prediction on test set\n    z_test = np.dot(X_test, w) + b\n    probs = sigmoid(z_test)\n    # Convert probabilities to class labels (0 or 1) using rounding\n    predicted_labels = [int(round(p)) for p in probs]\n    return predicted_labels\n```"}
{"task_id": 10, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\(\\tilde{X}_{t-1}\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\(X_t\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\(\\varepsilon\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    # Convert inputs to numpy arrays for broadcasting\n    prev_arr = np.atleast_1d(prev)\n    cur_arr = np.atleast_1d(cur)\n    weight_arr = np.atleast_1d(weight)\n\n    # Check that all inputs are broadcastable\n    # numpy broadcasting will handle shape compatibility\n\n    # Compute the smoothed values\n    smoothed = weight_arr * prev_arr + (1 - weight_arr) * cur_arr\n\n    # Round to four decimal places\n    smoothed_rounded = np.round(smoothed, 4)\n\n    # Determine if all inputs were scalars\n    all_scalar = (np.isscalar(prev) and np.isscalar(cur) and np.isscalar(weight))\n    \n    if all_scalar:\n        # Return a scalar float\n        return float(smoothed_rounded.item())\n    else:\n        # Return a list of floats\n        return smoothed_rounded.tolist()\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import list\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n\n    n_samples, n_features = data.shape\n\n    # Initialize centres with the first k samples\n    centres = data[:k].copy()\n\n    # Initialize labels for each sample\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iter):\n        # Step 1: Assign each sample to the nearest centre\n        for i in range(n_samples):\n            # Compute squared Euclidean distances to each centre\n            distances = np.sum((centres - data[i])**2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        new_centres = np.zeros_like(centres)\n        centres_movement = np.zeros(k)\n\n        # Step 2: Recompute centres\n        for cluster_idx in range(k):\n            # Get all samples assigned to this cluster\n            cluster_points = data[labels == cluster_idx]\n            if len(cluster_points) == 0:\n                # Empty cluster: reinitialize with a random sample\n                rand_idx = np.random.randint(0, n_samples)\n                new_centres[cluster_idx] = data[rand_idx]\n            else:\n                # Compute mean of assigned points\n                new_centres[cluster_idx] = np.mean(cluster_points, axis=0)\n\n        # Step 3: Check for convergence\n        centre_shifts = np.linalg.norm(centres - new_centres, axis=1)\n        max_shift = np.max(centre_shifts)\n\n        # Update centres\n        centres = new_centres\n\n        if max_shift < epsilon:\n            break\n\n    # Round centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n\n    # Convert labels to list of ints\n    labels = labels.tolist()\n\n    return centres, labels\n```"}
{"task_id": 12, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    # Number of frames and frame length\n    M, N = frames.shape\n    \n    # Compute the real FFT for each frame\n    fft_result = np.fft.rfft(frames, axis=1)\n    \n    # Compute the squared magnitude (power spectrum)\n    power_spec = np.abs(fft_result) ** 2\n    \n    # Optional scaling\n    if scale:\n        power_spec /= (N // 2 + 1)\n    \n    # Round to 4 decimal places\n    power_spec_rounded = np.round(power_spec, 4)\n    \n    # Convert to list of lists\n    return power_spec_rounded.tolist()\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n\n    # 1. Build item\u2013item similarity matrix S of shape (n_items, n_items)\n    S = np.zeros((n_items, n_items))\n    \n    # For each pair of items (i, j), compute similarity\n    for i in range(n_items):\n        for j in range(i, n_items):\n            # Find users who rated both items\n            users_rated_i = data[:, i] > 0\n            users_rated_j = data[:, j] > 0\n            common_users = users_rated_i & users_rated_j\n            common_indices = np.where(common_users)[0]\n            \n            if len(common_indices) == 0:\n                # No common raters\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = data[common_indices, i]\n                v2 = data[common_indices, j]\n                \n                if criterion == 'cosine':\n                    # Mean-centering only if std > 1e-3\n                    def mean_center(vec):\n                        std = np.std(vec)\n                        if std > 1e-3:\n                            return vec - np.mean(vec)\n                        else:\n                            return vec\n                    v1_centered = mean_center(v1)\n                    v2_centered = mean_center(v2)\n                    \n                    numerator = np.dot(v1_centered, v2_centered)\n                    denom = np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered)\n                    if denom > 1e-12:\n                        sim = numerator / denom\n                    else:\n                        sim = 0.0\n                elif criterion == 'pearson':\n                    # Use np.corrcoef\n                    if len(common_indices) > 1:\n                        corr = np.corrcoef(v1, v2)[0,1]\n                        # np.corrcoef can produce nan if variance is zero\n                        if np.isnan(corr):\n                            sim = 0.0\n                        else:\n                            sim = corr\n                    else:\n                        # With only one common user, correlation is undefined\n                        sim = 0.0\n                else:\n                    raise ValueError(\"Invalid criterion. Must be 'cosine' or 'pearson'.\")\n                \n                S[i, j] = sim\n                S[j, i] = sim\n\n    # 2. Collect items rated by the active user\n    user_ratings = data[user_ind]\n    rated_items = np.where(user_ratings > 0)[0]\n    unrated_items = np.where(user_ratings == 0)[0]\n\n    # If user has rated all items, return empty list\n    if len(rated_items) == n_items:\n        return []\n\n    # 3. For each unrated item, compute predicted attractiveness\n    scores = {}\n    for t in unrated_items:\n        # Similarities between item t and rated items\n        sim_t = S[t, rated_items]\n        ratings_rated = user_ratings[rated_items]\n        \n        numerator = np.sum(ratings_rated * sim_t)\n        denominator = np.sum(np.abs(sim_t))\n        if denominator == 0:\n            score = 0.0\n        else:\n            score = numerator / denominator\n        scores[t] = score\n\n    # 4. Sort items by decreasing score, break ties by smaller index\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n\n    # Return the top k items\n    recommended_items = [item for item, score in sorted_items[:k]]\n\n    return recommended_items\n```"}
{"task_id": 14, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    # Compute probabilities with sigmoid, adding epsilon to avoid log(0)\n    epsilon = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    p = np.clip(p, epsilon, 1 - epsilon)  # ensure numerical stability\n\n    # Compute individual losses\n    loss_i = - (y * np.log(p) + (1 - y) * np.log(1 - p))\n    mean_loss = np.mean(loss_i)\n    mean_loss = round(mean_loss, 4)\n\n    # Compute gradient: p - y\n    grad = p - y\n    grad = np.round(grad, 4)\n    gradient = grad.tolist()\n\n    # Compute Hessian diagonal: p * (1 - p)\n    hess = p * (1 - p)\n    hess = np.round(hess, 4)\n    hessian = hess.tolist()\n\n    return mean_loss, gradient, hessian\n```"}
{"task_id": 16, "completion_id": 0, "completion": "```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    # Convert the sequence to a sequence type that supports len() and slicing\n    seq_list = list(sequence)\n    seq_len = len(seq_list)\n    \n    # If N is larger than the sequence length, return empty list\n    if N > seq_len:\n        return []\n    \n    # Generate N-grams using list comprehension\n    return [tuple(seq_list[i:i+N]) for i in range(seq_len - N + 1)]\n```"}
{"task_id": 17, "completion_id": 0, "completion": "```python\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items:\n        return {}\n\n    n = len(items)\n    # Initialize a list of nodes with their data and an empty list for children\n    nodes = [{'item': items[i], 'count': counts[i], 'children': []} for i in range(n)]\n    \n    root = None\n    # For each node, assign it to its parent's children list\n    for i in range(n):\n        parent_idx = parents[i]\n        if parent_idx == -1:\n            root = nodes[i]\n        else:\n            # Append current node to its parent's children list\n            nodes[parent_idx]['children'].append(nodes[i])\n    \n    return root if root is not None else {}\n```"}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.get('dtype', float)\n    # If shape is an int, convert to a tuple for consistency\n    if isinstance(shape, int):\n        shape = (shape,)\n    # Use np.zeros to create the array\n    return np.zeros(shape, dtype=dtype)\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n\n    # Compute the total leaf score (without split)\n    def leaf_score(G, H):\n        return -0.5 * (G ** 2) / (H + lam) + gamma\n\n    total_score = leaf_score(total_g, total_h)\n\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        # Get unique sorted thresholds\n        thresholds = np.unique(feature_values)\n\n        # To consider splits between unique values, we can consider midpoints\n        # between consecutive unique values\n        if len(thresholds) == 1:\n            # No split possible on a feature with only one unique value\n            continue\n\n        # Generate candidate thresholds as midpoints between consecutive unique values\n        candidate_thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n\n        for threshold in candidate_thresholds:\n            # Create boolean mask for left and right splits\n            left_mask = feature_values <= threshold\n            right_mask = ~left_mask\n\n            # Check if both sides have at least 2 instances\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n\n            # Compute sums for left and right\n            g_left = np.sum(g[left_mask])\n            h_left = np.sum(h[left_mask])\n            g_right = np.sum(g[right_mask])\n            h_right = np.sum(h[right_mask])\n\n            # Compute leaf scores\n            score_left = leaf_score(g_left, h_left)\n            score_right = leaf_score(g_right, h_right)\n\n            # Compute gain\n            gain = total_score - score_left - score_right\n\n            # Update best split if gain is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n\n    # Return the best split if gain is positive\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    if isinstance(x, (list, np.ndarray)):\n        arr = np.array(x)\n        is_scalar_input = False\n    elif isinstance(x, (int, float)):\n        arr = np.array([x])\n        is_scalar_input = True\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray.\")\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + np.exp(-arr))\n    # Compute gradient: sigmoid * (1 - sigmoid)\n    gradient = sigmoid * (1 - sigmoid)\n\n    # Round results to 4 decimal places\n    sigmoid_rounded = np.round(sigmoid, 4)\n    gradient_rounded = np.round(gradient, 4)\n\n    if is_scalar_input:\n        # For scalar input, return float\n        return float(sigmoid_rounded[0]), float(gradient_rounded[0])\n    else:\n        # For array/list input, convert to list\n        return sigmoid_rounded.tolist(), gradient_rounded.tolist()\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Convert inputs to numpy arrays for convenience\n    X = np.array(x_train)\n    Y = np.array(y_train)\n    n_samples = len(X)\n\n    # Initialize sample weights uniformly\n    weights = np.ones(n_samples) / n_samples\n\n    # Store the ensemble classifiers: list of (d, theta, alpha)\n    classifiers = []\n\n    # Function to compute the ensemble prediction\n    def ensemble_predict(x):\n        total = 0.0\n        for d, theta, alpha in classifiers:\n            if d == 0:\n                pred = 1 if x <= theta else -1\n            else:\n                pred = 1 if x > theta else -1\n            total += alpha * pred\n        return 1 if total >= 0 else -1\n\n    # Function to compute training error\n    def compute_training_error():\n        preds = np.array([ensemble_predict(x) for x in X])\n        return np.mean(preds != Y)\n\n    # Main AdaBoost loop\n    while True:\n        # Sort data by x to consider thresholds between points\n        sorted_indices = np.argsort(X)\n        X_sorted = X[sorted_indices]\n        Y_sorted = Y[sorted_indices]\n        weights_sorted = weights[sorted_indices]\n\n        # Generate candidate thresholds: midpoints between consecutive points\n        thresholds = []\n        for i in range(n_samples - 1):\n            thresholds.append((X_sorted[i] + X_sorted[i+1]) / 2.0)\n        # Also consider thresholds outside the data range\n        min_x, max_x = X_sorted[0], X_sorted[-1]\n        thresholds = [min_x - 1] + thresholds + [max_x + 1]\n\n        best_error = float('inf')\n        best_stump = None\n\n        # For each threshold, evaluate both d=0 and d=1\n        for theta in thresholds:\n            for d in [0, 1]:\n                # Predict for all training points\n                preds = np.empty(n_samples, dtype=int)\n                if d == 0:\n                    preds = np.where(X_sorted <= theta, 1, -1)\n                else:\n                    preds = np.where(X_sorted > theta, 1, -1)\n\n                # Compute weighted error\n                err = np.sum(weights_sorted * (preds != Y_sorted))\n                if err < best_error:\n                    best_error = err\n                    best_stump = (d, theta)\n\n        # Avoid division by zero in alpha calculation\n        err = best_error\n        # To prevent numerical issues, clip error\n        err = min(max(err, 1e-10), 1 - 1e-10)\n\n        # Compute alpha\n        alpha = 0.5 * math.log((1 - err) / err)\n\n        # Add the selected stump to the ensemble\n        classifiers.append((best_stump[0], best_stump[1], alpha))\n\n        # Update weights\n        for i in range(n_samples):\n            d, theta = best_stump\n            x_i = X[i]\n            y_i = Y[i]\n            if d == 0:\n                pred = 1 if x_i <= theta else -1\n            else:\n                pred = 1 if x_i > theta else -1\n            # Update weight\n            weights[i] *= math.exp(-alpha * y_i * pred)\n\n        # Normalize weights\n        weights /= np.sum(weights)\n\n        # Compute training error of current ensemble\n        train_preds = np.array([ensemble_predict(x) for x in X])\n        train_error = np.mean(train_preds != Y)\n\n        # Check stopping condition\n        if train_error <= epsilon:\n            break\n\n        # Optional: stop if error is zero to prevent infinite loop\n        if train_error == 0:\n            break\n\n    # Final predictions on test set\n    predictions = [ensemble_predict(x) for x in x_test]\n    return predictions\n```"}
{"task_id": 22, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    # Generate the integer offsets uniformly from [-300, 299]\n    offsets = np.random.randint(-300, 300, size=shape)\n    # Generate the fractional parts uniformly from [0, 1)\n    u = np.random.uniform(0, 1, size=shape)\n    # Combine to form the tensor\n    tensor = offsets + u\n\n    if standardize:\n        # Compute mean and std for each column (feature)\n        # For tensors with more than 1 dimension, flatten all but the last axis\n        # to treat the last axis as features\n        # For example, shape (n_samples, n_features) or similar\n        # Reshape to 2D for simplicity if needed\n        original_shape = tensor.shape\n        # Reshape to 2D: (num_samples, num_features)\n        tensor_2d = tensor.reshape(-1, original_shape[-1])\n        # Compute mean and std along axis=0 (per feature)\n        mean = np.mean(tensor_2d, axis=0)\n        std = np.std(tensor_2d, axis=0)\n        # Avoid division by zero by adding epsilon\n        epsilon = np.finfo(float).eps\n        tensor_2d = (tensor_2d - mean) / (std + epsilon)\n        # Reshape back to original shape\n        tensor = tensor_2d.reshape(original_shape)\n\n    return tensor\n```"}
{"task_id": 24, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n\n    # Convert w and velocity to numpy arrays for vector operations\n    w = np.array(w, dtype=float)\n    if len(velocity) == 0:\n        v = np.zeros_like(w)\n    else:\n        v = np.array(velocity, dtype=float)\n\n    # Step 1: Look-ahead point\n    w_tilde = w - momentum * v\n\n    # Step 2: Gradient evaluation with clipping\n    g = grad_func(w_tilde)\n    g = np.clip(g, -1, 1)\n\n    # Step 3: Velocity update\n    v_new = momentum * v + learning_rate * g\n\n    # Step 4: Parameter update\n    w_new = w - v_new\n\n    # Round to 4 decimal places and convert to list\n    w_new_list = np.round(w_new, 4).tolist()\n    v_new_list = np.round(v_new, 4).tolist()\n\n    return w_new_list, v_new_list\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared Euclidean distances between each training sample and each test sample\n    # Using broadcasting for efficient computation\n    # X_train shape: (n, d)\n    # X_test shape: (m, d)\n    # Resulting distance matrix shape: (n, m)\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]  # shape: (n, m, d)\n    sq_distances = np.sum(diff ** 2, axis=2)  # shape: (n, m)\n\n    # Compute the kernel matrix between training samples and test samples\n    # K_{i,j} = exp(-gamma * ||x_i - z_j||^2)\n    K = np.exp(-gamma * sq_distances)  # shape: (n, m)\n\n    # Compute the decision function g(z) for each test sample\n    # g(z_j) = sum_i alpha_i * y_i * K_{i,j} + b\n    # We can vectorize this as:\n    # (alpha * y_train) shape: (n,)\n    # Multiply with K: broadcasting over columns\n    decision_values = np.dot((alpha * y_train), K) + b  # shape: (m,)\n\n    # Predict labels based on the sign of decision values\n    predictions = np.sign(decision_values)\n\n    # Convert predictions from float to int (ensure 1 or -1)\n    # sign(0) returns 0, but in SVM, decision boundary points can be assigned to 1 or -1\n    # Here, we can treat 0 as 1 (or -1), but typically, sign(0) returns 0.\n    # To be safe, assign 1 to zero decision values.\n    predictions = np.where(predictions == 0, 1, predictions).astype(int)\n\n    return predictions.tolist()\n```"}
{"task_id": 26, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    x_array = np.array(x)\n    \n    # Compute ReLU activation: max(0, x)\n    activation = np.where(x_array >= 0, x_array, 0)\n    \n    # Compute gradient: 1 where x >= 0, else 0\n    gradient = np.where(x_array >= 0, 1, 0)\n    \n    # Convert back to nested lists with original shape\n    activation_list = activation.tolist()\n    gradient_list = gradient.tolist()\n    \n    return activation_list, gradient_list\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert input list to numpy array\n    X_np = np.array(X, dtype=float)\n    m, n = X_np.shape\n\n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n\n    # Compute the SVD\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n\n    # Keep only the top k singular values/vectors\n    S_k = np.diag(S[:k])\n    U_k = U[:, :k]\n    VT_k = VT[:k, :]\n\n    # Reconstruct the matrix using truncated SVD\n    X_hat_np = U_k @ S_k @ VT_k\n\n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n\n    # Round the reconstructed matrix and mse to 4 decimal places\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    mse_rounded = round(mse, 4)\n\n    return (X_hat_rounded, mse_rounded)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for convenience\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort training data by feature values\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n\n    # Initialize residuals as the original targets\n    residuals = y_sorted.copy()\n\n    # List to store the learned stumps: each as (split_point, c_left, c_right)\n    stumps = []\n\n    # Compute initial residual sum of squares\n    rss = np.sum(residuals ** 2)\n\n    # Generate candidate split points: midpoints between consecutive x values\n    candidate_splits = (x_sorted[:-1] + x_sorted[1:]) / 2\n\n    # Iterative boosting process\n    while rss > epsilon:\n        best_rss = None\n        best_stump = None\n\n        # For each candidate split, compute the residuals if we add that stump\n        for s in candidate_splits:\n            # Find indices where x <= s and x > s\n            left_mask = x_sorted <= s\n            right_mask = x_sorted > s\n\n            # Handle case where no points on one side\n            if np.any(left_mask):\n                c1 = np.mean(residuals[left_mask])\n            else:\n                c1 = 0.0\n            if np.any(right_mask):\n                c2 = np.mean(residuals[right_mask])\n            else:\n                c2 = 0.0\n\n            # Compute new residuals after adding this stump\n            residuals_new = residuals.copy()\n            residuals_new[left_mask] = residuals[left_mask] - c1\n            residuals_new[right_mask] = residuals[right_mask] - c2\n\n            # Compute RSS after adding this stump\n            rss_candidate = np.sum(residuals_new ** 2)\n\n            # Check if this is the best so far\n            if (best_rss is None) or (rss_candidate < best_rss):\n                best_rss = rss_candidate\n                best_stump = (s, c1, c2)\n\n        # If the best RSS is not better than current, break\n        if best_rss >= rss:\n            break\n\n        # Add the best stump to the ensemble\n        s, c_left, c_right = best_stump\n        stumps.append((s, c_left, c_right))\n\n        # Update residuals\n        left_mask = x_sorted <= s\n        right_mask = x_sorted > s\n        residuals[left_mask] -= c_left\n        residuals[right_mask] -= c_right\n\n        # Update current RSS\n        rss = np.sum(residuals ** 2)\n\n    # Make prediction for x_query\n    prediction = 0.0\n    for (s, c_left, c_right) in stumps:\n        if x_query <= s:\n            prediction += c_left\n        else:\n            prediction += c_right\n\n    return round(prediction, 4)\n```"}
{"task_id": 32, "completion_id": 0, "completion": "```python\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    def convert(value):\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            return float(value)\n        else:\n            # For safety, though not specified, assume other types are invalid\n            raise ValueError(f\"Unsupported type: {type(value)}\")\n    return convert(a), convert(b)\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n    return wrapper\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    result = a + b\n    # Return int if result is integral, else float\n    if isinstance(result, float) and result.is_integer():\n        return int(result)\n    return result\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor of the specified shape filled with 0.0s and 1.0s.\n    \n    Each element is 1.0 with probability equal to 'sparsity' and 0.0 otherwise.\n    If 'seed' is provided, the random number generator is seeded for reproducibility.\n    \n    Parameters:\n    - shape (tuple of ints): The shape of the output tensor.\n    - sparsity (float): Probability of each element being 1.0. Must be in [0, 1].\n    - seed (int or None): Optional seed for reproducibility.\n    \n    Returns:\n    - numpy.ndarray: Array of shape 'shape' with dtype float, containing only 0.0 and 1.0.\n    - Returns -1 if 'sparsity' is outside [0, 1].\n    \"\"\"\n    # Validate sparsity\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n    \n    # Seed the random number generator if seed is provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate uniform random numbers in [0, 1)\n    rand_vals = np.random.rand(*shape)\n    \n    # Threshold at 1 - sparsity: values >= 1 - sparsity become 1.0\n    threshold = 1 - sparsity\n    binary_array = (rand_vals >= threshold).astype(float)\n    \n    return binary_array\n```"}
{"task_id": 35, "completion_id": 0, "completion": "```python\nfrom typing import Any\n\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int = -1, res: Any | None = None, child: dict | None = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\n\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        # Check if feature index is within sample bounds\n        if current.fea >= len(sample):\n            return -1\n        feature_value = sample[current.fea]\n        # Check if the feature value exists in current node's children\n        if feature_value not in current.child:\n            return -1\n        # Move to the corresponding child node\n        current = current.child[feature_value]\n    # Reached a leaf node\n    return current.res\n```"}
{"task_id": 36, "completion_id": 0, "completion": "```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Predicts the output for each sample in X using the decision tree rooted at 'root'.\"\"\"\n    predictions = []\n\n    if root is None:\n        return predictions  # Empty list if tree is empty\n\n    for sample in X:\n        node = root\n        while node.left is not None and node.right is not None:\n            # Non-leaf node: decide to go left or right\n            feature_idx = node.feature\n            threshold = node.threshold\n            if sample[feature_idx] <= threshold:\n                node = node.left\n            else:\n                node = node.right\n        # Leaf node: return its stored prediction\n        predictions.append(node.threshold)\n\n    return predictions\n```"}
{"task_id": 37, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.shape[0] == 0:\n        return None\n\n    # Initialize a cycle iterator for the splitting dimensions\n    n_features = data.shape[1] - 1\n    dims_cycle = cycle(range(n_features))\n    \n    def build_recursive(sub_data):\n        if sub_data.shape[0] == 0:\n            return None\n\n        # Get the current splitting dimension\n        d = next(dims_cycle)\n\n        # Sort data by the current dimension\n        sorted_idx = np.argsort(sub_data[:, d])\n        sorted_data = sub_data[sorted_idx]\n\n        # Find median index\n        median_idx = len(sorted_data) // 2\n\n        # Extract median point and label\n        median_point = sorted_data[median_idx, :-1].tolist()\n        median_label = sorted_data[median_idx, -1]\n\n        # Left subset: points before median\n        left_data = sorted_data[:median_idx]\n        # Right subset: points after median\n        right_data = sorted_data[median_idx + 1:]\n\n        # Recursively build left and right subtrees\n        left_subtree = build_recursive(left_data)\n        right_subtree = build_recursive(right_data)\n\n        # Return current node as a dictionary\n        return {\n            \"point\": median_point,\n            \"label\": median_label,\n            \"left\": left_subtree,\n            \"right\": right_subtree\n        }\n\n    return build_recursive(data)\n```"}
{"task_id": 38, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    scores = []\n\n    for a in range(n_arms):\n        A_a = np.array(A[a])  # (D, D)\n        b_a = np.array(b[a])  # (D,)\n        c_a = context[:, a]   # (D,)\n\n        # Compute theta_hat = A_a^{-1} * b_a\n        A_inv = np.linalg.inv(A_a)\n        theta_hat = A_inv @ b_a\n\n        # Compute the predicted reward\n        p_a = theta_hat @ c_a\n\n        # Compute the confidence bound\n        confidence = alpha * np.sqrt(c_a @ A_inv @ c_a)\n\n        # LinUCB score\n        score = p_a + confidence\n        scores.append(score)\n\n    # Return the index of the arm with the maximum score\n    return int(np.argmax(scores))\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    # Find the index of the median element in the column d\n    median_idx = n_samples // 2\n\n    # Use argpartition to find the index of the median value\n    partition_indices = np.argpartition(data[:, d], median_idx)\n    median_row_idx = partition_indices[median_idx]\n\n    # Get the median value\n    median_value = data[median_row_idx, d]\n\n    # Find all indices with values less than the median\n    left_mask = data[:, d] < median_value\n    left_indices = np.where(left_mask)[0]\n    # Find all indices with values greater than the median\n    right_mask = data[:, d] > median_value\n    right_indices = np.where(right_mask)[0]\n\n    # The median index itself\n    pivot = median_row_idx\n\n    # Return sorted lists for deterministic output\n    return pivot, sorted(left_indices.tolist()), sorted(right_indices.tolist())\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Preconditions\n    assert isinstance(x, np.ndarray), \"Input x must be a numpy array.\"\n    assert x.ndim == 1, \"Input x must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Input length must be at least as large as frame_width.\"\n\n    N = len(x)\n    n_frames = (N - frame_width) // stride + 1\n\n    # Calculate the new shape\n    shape = (n_frames, frame_width)\n\n    # Calculate the new strides\n    # The stride of the original array in bytes\n    stride_bytes = x.strides[0]\n    # The first dimension (number of frames) advances by stride_bytes\n    # The second dimension (within each frame) advances by stride_bytes\n    strides = (stride * stride_bytes, stride_bytes)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=shape, strides=strides)\n\n    # Set writability\n    frames.flags.writeable = writeable\n\n    return frames\n```"}
{"task_id": 41, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    predictions = []\n\n    # Convert training data to numpy array for efficient computation\n    X_train = np.array(X_data)\n    y_train = y_data\n\n    for x in X:\n        # Convert query point to numpy array\n        x_np = np.array(x)\n        # Compute Euclidean distances to all training samples\n        distances = np.linalg.norm(X_train - x_np, axis=1)\n        # Get indices of the k smallest distances\n        k = min(k, len(X_data))\n        neighbor_indices = np.argpartition(distances, k - 1)[:k]\n        # Retrieve the labels of the nearest neighbors\n        neighbor_labels = [y_train[idx] for idx in neighbor_indices]\n        # Count the occurrences of each label\n        label_counts = Counter(neighbor_labels)\n        # Find the maximum count\n        max_count = max(label_counts.values())\n        # Extract all labels with the maximum count\n        candidates = [label for label, count in label_counts.items() if count == max_count]\n        # Choose the lexicographically smallest label among candidates\n        predicted_label = sorted(candidates)[0]\n        predictions.append(predicted_label)\n\n    return predictions\n```"}
{"task_id": 42, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n\n    # Validate input: check if lists are non-empty and of equal length\n    if not isinstance(actual, list) or not isinstance(predicted, list):\n        return -1\n    if len(actual) == 0 or len(predicted) == 0:\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n\n    # Validate all values are >= 0\n    if any((not isinstance(x, (int, float))) or x < 0 for x in actual):\n        return -1\n    if any((not isinstance(x, (int, float))) or x < 0 for x in predicted):\n        return -1\n\n    # Convert lists to numpy arrays for efficient computation\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n\n    # Compute the log-transformed values: ln(x + 1)\n    # To avoid issues with log(0), since x >= 0, x+1 >= 1, so log is defined\n    log_actual = np.log(actual_np + 1)\n    log_predicted = np.log(predicted_np + 1)\n\n    # Calculate the squared differences\n    squared_diff = (log_predicted - log_actual) ** 2\n\n    # Compute the mean of squared differences\n    mean_squared_diff = np.mean(squared_diff)\n\n    # Take the square root to get RMSLE\n    rmsle_value = np.sqrt(mean_squared_diff)\n\n    # Round to 4 decimal places\n    return round(rmsle_value, 4)\n```"}
{"task_id": 44, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    x_np = np.array(x, dtype=float)\n    \n    # Compute tanh using the given formula: (2 / (1 + exp(-2x))) - 1\n    tanh_x = (2 / (1 + np.exp(-2 * x_np))) - 1\n    \n    if not derivative:\n        # Return tanh values rounded to 4 decimal places as a list\n        return [round(val, 4) for val in tanh_x]\n    else:\n        # Compute the gradient: 1 - tanh^2(x)\n        grad = 1 - tanh_x ** 2\n        return [round(val, 4) for val in grad]\n```"}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    # Convert input to a NumPy array for easier indexing\n    x_array = np.array(x, dtype=float)\n    N = len(x_array)\n    \n    # Handle the corner case of empty input\n    if N == 0:\n        return []\n\n    result = []\n    # Compute autocorrelation for each lag k\n    for k in range(N):\n        sum_value = 0.0\n        for n in range(N - k):\n            sum_value += x_array[n + k] * x_array[n]\n        result.append(sum_value)\n    \n    return result\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    X_array = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if X_array.ndim != 2:\n        return False\n\n    # Check if all elements are within [0, 1]\n    if not np.all((X_array >= 0) & (X_array <= 1)):\n        return False\n\n    # Check if each row sums to 1 within a tolerance\n    row_sums = X_array.sum(axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), atol=1e-8):\n        return False\n\n    return True\n```"}
{"task_id": 49, "completion_id": 0, "completion": "```python\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \"\"\"\n\n    def _move_up(heap: List[Number], index: int):\n        \"\"\"Restore heap property moving the element at index up.\"\"\"\n        parent = (index - 1) // 2\n        while index > 0 and heap[index] > heap[parent]:\n            heap[index], heap[parent] = heap[parent], heap[index]\n            index = parent\n            parent = (index - 1) // 2\n\n    def _move_down(heap: List[Number], index: int):\n        \"\"\"Restore heap property moving the element at index down.\"\"\"\n        size = len(heap)\n        while True:\n            left = 2 * index + 1\n            right = 2 * index + 2\n            largest = index\n\n            if left < size and heap[left] > heap[largest]:\n                largest = left\n            if right < size and heap[right] > heap[largest]:\n                largest = right\n\n            if largest == index:\n                break\n\n            heap[index], heap[largest] = heap[largest], heap[index]\n            index = largest\n\n    # Validate k\n    n = len(nums)\n    if k <= 0 or k > n:\n        return -1\n\n    heap: List[Number] = []\n\n    for num in nums:\n        if len(heap) < k:\n            # Insert into heap\n            heap.append(num)\n            _move_up(heap, len(heap) - 1)\n        else:\n            # Compare with root (max element)\n            if num < heap[0]:\n                # Replace root and move down\n                heap[0] = num\n                _move_down(heap, 0)\n\n    # At this point, heap contains k smallest elements in arbitrary order\n    # Sort the heap before returning\n    return sorted(heap)\n```"}
{"task_id": 51, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n    \"\"\"\n    Implements Newton's method for 2D linear regression.\n    \n    Args:\n        X (np.ndarray): Data matrix of shape (n_samples, 2).\n        y (np.ndarray): Target vector of shape (n_samples, 1) or (n_samples,).\n        epsilon (float): Threshold for the gradient norm to stop.\n        max_iter (int): Maximum number of iterations.\n        \n    Returns:\n        list[list[float]]: Final weight vector as a 2x1 list of lists, rounded to 4 decimal places.\n    \"\"\"\n    # Initialize weights\n    w = np.array([1.0, 1.0])\n    \n    n = X.shape[0]\n    \n    for _ in range(max_iter):\n        # Compute residuals\n        residual = X @ w - y\n        # Compute gradient\n        grad = (2 / n) * (X.T @ residual)\n        # Compute Hessian\n        H = (2 / n) * (X.T @ X)\n        \n        # Check for convergence\n        if np.linalg.norm(grad) < epsilon:\n            break\n        \n        # Compute pseudo-inverse of Hessian in case it's singular\n        H_inv = np.linalg.pinv(H)\n        \n        # Newton update\n        w = w - H_inv @ grad\n    \n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4)\n    # Return as list of lists (2x1)\n    return w_rounded.reshape(2, 1).tolist()\n```"}
{"task_id": 54, "completion_id": 0, "completion": "```python\nimport string\n\ndef tokenize_whitespace(line: str, lowercase: bool = True, filter_stopwords: bool = True, filter_punctuation: bool = True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n\n    # Define a set of common English stop-words\n    stopwords = {\n        'a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and',\n        'any', 'are', \"aren't\", 'as', 'at', 'be', 'because', 'been', 'before', 'being',\n        'below', 'between', 'both', 'but', 'by', \"can't\", 'cannot', 'could', \"couldn't\",\n        'did', \"didn't\", 'do', 'does', \"doesn't\", 'doing', \"don't\", 'down', 'during',\n        'each', 'few', 'for', 'from', 'further', 'had', \"hadn't\", 'has', \"hasn't\", 'have',\n        \"haven't\", 'having', 'he', \"he'd\", \"he'll\", \"he's\", 'her', 'here', \"here's\", 'hers',\n        'herself', 'him', 'himself', 'his', 'how', \"how's\", 'i', \"i'd\", \"i'll\", \"i'm\",\n        \"i've\", 'if', 'in', 'into', 'is', \"isn't\", 'it', \"it's\", 'its', 'itself', \"let's\",\n        'me', 'more', 'most', \"mustn't\", 'my', 'myself', 'no', 'nor', 'not', 'of', 'off',\n        'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out',\n        'over', 'own', 'same', \"shan't\", 'she', \"she'd\", \"she'll\", \"she's\", 'should',\n        \"shouldn't\", 'so', 'some', 'such', 'than', 'that', \"that's\", 'the', 'their',\n        'theirs', 'them', 'themselves', 'then', 'there', \"there's\", 'these', 'they',\n        \"they'd\", \"they'll\", \"they're\", \"they've\", 'this', 'those', 'through', 'to',\n        'too', 'under', 'until', 'up', 'very', 'was', \"wasn't\", 'we', \"we'd\", \"we'll\",\n        \"we're\", \"we've\", 'were', \"weren't\", 'what', \"what's\", 'when', \"when's\", 'where',\n        \"where's\", 'which', 'while', 'who', \"who's\", 'whom', 'why', \"why's\", 'with',\n        \"won't\", 'would', \"wouldn't\", 'you', \"you'd\", \"you'll\", \"you're\", \"you've\",\n        'your', 'yours', 'yourself', 'yourselves'\n    }\n\n    # Step 1: Optional lowercasing\n    if lowercase:\n        line = line.lower()\n\n    # Step 2: Split by whitespace\n    tokens = line.split()\n\n    processed_tokens = []\n\n    for token in tokens:\n        # Step 3: Strip punctuation if requested\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n\n        # Discard empty tokens after stripping\n        if not token:\n            continue\n\n        # Step 4: Filter stop-words if requested\n        if filter_stopwords and token in stopwords:\n            continue\n\n        # Append the token to the result list\n        processed_tokens.append(token)\n\n    return processed_tokens\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n\n    n_samples, n_features = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)  # Initialize running average of squared gradients\n\n    # Determine number of batches\n    num_batches = int(np.ceil(n_samples / batch_size))\n    # For cycling through data\n    indices = np.arange(n_samples)\n\n    for iteration in range(max_iter):\n        # Shuffle data at each iteration for stochasticity (optional)\n        # But since not specified, we can process in order or shuffle\n        # Here, process in order for simplicity\n        for batch_idx in range(num_batches):\n            start_idx = (batch_idx * batch_size) % n_samples\n            end_idx = start_idx + batch_size\n            if end_idx > n_samples:\n                # Wrap around\n                batch_indices = np.concatenate((indices[start_idx:], indices[:end_idx - n_samples]))\n            else:\n                batch_indices = indices[start_idx:end_idx]\n\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n\n            # Compute prediction\n            pred = X_batch @ w\n            # Compute gradient g = (1/n) * X^T (Xw - y)\n            residual = pred - y_batch\n            g = (X_batch.T @ residual) / len(y_batch)\n\n            # Update running average of squared gradients\n            s = rho * s + (1 - rho) * (g ** 2)\n\n            # Update weights\n            w -= eta * g / (np.sqrt(s) + eps_station)\n\n        # Check convergence: norm of gradient\n        # For convergence, compute gradient over full data\n        full_pred = X @ w\n        full_residual = full_pred - y\n        full_g = (X.T @ full_residual) / n_samples\n        grad_norm = np.linalg.norm(full_g)\n\n        if grad_norm < epsilon:\n            break\n\n    # Round weights to 4 decimal places and convert to list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its gradient with numerical stability.\n    \n    Parameters:\n    x : scalar, list, or np.ndarray\n        Input value(s).\n    deriv : bool, default=False\n        If False, compute SoftPlus(x).\n        If True, compute the gradient (sigmoid(x)).\n        \n    Returns:\n    list of floats or float\n        Rounded results to 4 decimal places.\n        Single float if input is scalar.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    x_arr = np.array(x, dtype=np.float64)\n    \n    # Initialize result array\n    result = np.empty_like(x_arr)\n    \n    # For large positive x, SoftPlus ~ x\n    mask_pos = x_arr > 20\n    # For large negative x, SoftPlus ~ exp(x)\n    mask_neg = x_arr < -20\n    # For intermediate x, compute normally\n    mask_mid = ~(mask_pos | mask_neg)\n    \n    # Compute for large positive x\n    result[mask_pos] = x_arr[mask_pos]\n    # Compute for large negative x\n    result[mask_neg] = np.exp(x_arr[mask_neg])\n    # Compute for intermediate x using a stable formulation\n    result[mask_mid] = np.log1p(np.exp(x_arr[mask_mid]))\n    \n    if deriv:\n        # Gradient is sigmoid(x)\n        grad = 1 / (1 + np.exp(-x_arr))\n        # Round to 4 decimal places\n        rounded = np.round(grad, 4)\n    else:\n        # Round to 4 decimal places\n        rounded = np.round(result, 4)\n    \n    # Return as list\n    if np.isscalar(x):\n        return float(rounded)\n    else:\n        return rounded.tolist()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Handle edge case: if sequence length < N, no N-grams can be formed\n    if len(sequence) < N:\n        return float('-inf')\n    \n    # Build N-gram counts\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    # Generate N-grams and their counts\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i+N])\n        ngram_counts[ngram] += 1\n    \n    # For N > 1, also count (N-1)-grams (prefixes)\n    if N > 1:\n        for i in range(len(corpus) - N + 1):\n            prefix = tuple(corpus[i:i+N-1])\n            prefix_counts[prefix] += 1\n    else:\n        # For unigram, prefix counts are just total tokens\n        total_tokens = len(corpus)\n        prefix_counts[()] = total_tokens  # empty tuple as key\n    \n    total_log_prob = 0.0\n    \n    # Iterate over the sequence to compute the total log probability\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            # Unigram probability: count(w) / total tokens\n            count_ngram = ngram_counts.get(ngram, 0)\n            total_tokens = len(corpus)\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / total_tokens\n        else:\n            # N-gram probability: count(w1..wN) / count(w1..wN-1)\n            count_ngram = ngram_counts.get(ngram, 0)\n            prefix = ngram[:-1]\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        \n        # Add log probability\n        total_log_prob += np.log(prob)\n    \n    return round(total_log_prob, 4)\n```"}
{"task_id": 60, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if y.size == 0:\n        return 0.0\n\n    if criterion == \"entropy\":\n        # Compute class probabilities\n        values, counts = np.unique(y, return_counts=True)\n        probabilities = counts / counts.sum()\n        # Compute entropy\n        entropy = -np.sum(probabilities * np.log2(probabilities))\n        return round(entropy, 4)\n\n    elif criterion == \"gini\":\n        # Compute class probabilities\n        values, counts = np.unique(y, return_counts=True)\n        probabilities = counts / counts.sum()\n        # Compute Gini index\n        gini = 1 - np.sum(probabilities ** 2)\n        return round(gini, 4)\n\n    elif criterion == \"mse\":\n        # Compute mean squared error\n        mean_y = np.mean(y)\n        mse = np.mean((y - mean_y) ** 2)\n        return round(mse, 4)\n\n    else:\n        raise ValueError(\"Invalid criterion. Must be one of 'entropy', 'gini', or 'mse'.\")\n```"}
{"task_id": 61, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    W = np.array(W)\n\n    # Validate that X is 2D\n    if X.ndim != 2:\n        return -1\n\n    n_samples, n_features = X.shape\n\n    # Reshape y to (n_samples, 1) if necessary\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    elif y.ndim > 2:\n        return -1\n\n    # Validate y shape\n    if y.shape != (n_samples, 1):\n        return -1\n\n    # Reshape W to (n_features, 1) if necessary\n    if W.ndim == 1:\n        W = W.reshape(-1, 1)\n    elif W.ndim > 2:\n        return -1\n\n    # Validate W shape\n    if W.shape != (n_features, 1):\n        return -1\n\n    # Compute the gradient\n    # (X^T (XW - y)) / N\n    residual = X @ W - y  # shape: (n_samples, 1)\n    gradient = (X.T @ residual) / n_samples  # shape: (n_features, 1)\n\n    # Round to 4 decimal places\n    gradient_rounded = np.round(gradient, 4)\n\n    # Convert to list of lists\n    return gradient_rounded.tolist()\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    m = len(X)\n\n    # Build the design matrix with polynomial features: column of ones + x^1 ... x^degree\n    X_poly = np.vstack([X**j for j in range(degree + 1)]).T  # shape: (m, degree+1)\n\n    # Initialize weights to zeros\n    w = np.zeros(degree + 1)\n\n    # Precompute x_j^T x_j for j >= 1 for efficiency\n    x_j_squared = np.sum(X_poly**2, axis=0)\n\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n\n        # Update bias term w0 exactly\n        residual = y - X_poly[:, 1:] @ w[1:]\n        w0_new = np.mean(residual)\n        delta_w0 = abs(w[0] - w0_new)\n        w[0] = w0_new\n\n        # Update other coefficients\n        for j in range(1, degree + 1):\n            # Compute residual excluding the j-th feature\n            residual = y - (X_poly @ w) + w[j] * X_poly[:, j]\n            rho = X_poly[:, j].T @ residual\n\n            # Soft thresholding\n            if rho > reg_factor:\n                w_j_new = (rho - reg_factor) / x_j_squared[j]\n            elif rho < -reg_factor:\n                w_j_new = (rho + reg_factor) / x_j_squared[j]\n            else:\n                w_j_new = 0.0\n\n            delta_wj = abs(w[j] - w_j_new)\n            w[j] = w_j_new\n\n        # Check for convergence\n        max_delta = max(abs(w - w_old))\n        if max_delta < tol:\n            break\n\n    # Round coefficients to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    return w_rounded\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): Observation sequence as a list of indices (length T).\n    t (int): Time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: The backward probability vector \u03b2_t, with each value rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n\n    # Initialize beta_t\n    beta_t = np.zeros(N)\n\n    if t == T - 1:\n        # At the last time step, \u03b2_T-1(i) = 1 for all i\n        beta_t = np.ones(N)\n    else:\n        # For t < T-1, compute \u03b2_t(i)\n        # \u03b2_t(i) = sum_j a_ij * b_j(o_{t+1}) * \u03b2_{t+1}(j)\n        # First, get \u03b2_{t+1}\n        beta_next = backward_beta(A.tolist(), B.tolist(), obs, t + 1)\n        beta_next = np.array(beta_next)\n\n        # For each state i, compute the sum over j\n        for i in range(N):\n            sum_j = 0.0\n            for j in range(N):\n                sum_j += A[i, j] * B[j, obs[t + 1]] * beta_next[j]\n            beta_t[i] = sum_j\n\n    # Round to 4 decimal places\n    return [round(prob, 4) for prob in beta_t]\n```"}
{"task_id": 64, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    # Create the DFT matrix\n    n = np.arange(N)\n    k = n.reshape((N, 1))\n    # Compute the exponent matrix\n    exponent = -2j * np.pi * k * n / N\n    # Compute the DFT matrix\n    W = np.exp(exponent)\n    # Compute the DFT via matrix multiplication\n    c = W @ frame\n\n    # Determine the range of coefficients to return\n    if positive_only:\n        end_idx = N // 2 + 1\n        c = c[:end_idx]\n    # Round real and imaginary parts to 4 decimals\n    c_rounded = [complex(round(c_i.real, 4), round(c_i.imag, 4)) for c_i in c]\n    return c_rounded\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Convert lists to numpy arrays for easier calculations\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    # Initialize beta matrix: shape (T, N)\n    beta = np.zeros((T, N))\n\n    # Base case: at time T-1, beta_{T-1}(i) = 1\n    beta[T - 1, :] = 1.0\n\n    # Recursive computation: t = T-2 down to 0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            # sum over j: A[i,j] * B[j, obs[t+1]] * beta[t+1, j]\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n\n    # Compute the total probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    # Round to six decimal places\n    return round(prob, 6)\n```"}
{"task_id": 67, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n\n    # Validate input lengths\n    N = len(S)\n    if len(A) != N or any(len(row) != N for row in A):\n        return -1\n    if len(B) != N or any(len(row) != len(B[0]) for row in B):\n        return -1\n\n    # Validate n_sample\n    if n_sample < 1:\n        return -1\n\n    # Set seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Helper function to validate probability distributions\n    def is_valid_prob_dist(dist):\n        total = sum(dist)\n        return abs(total - 1.0) <= 1e-8\n\n    # Validate S\n    if not is_valid_prob_dist(S):\n        return -1\n\n    # Validate rows of A\n    for row in A:\n        if not is_valid_prob_dist(row):\n            return -1\n\n    # Validate rows of B\n    for row in B:\n        if not is_valid_prob_dist(row):\n            return -1\n\n    # Convert to numpy arrays for convenience\n    S_np = np.array(S)\n    A_np = np.array(A)\n    B_np = np.array(B)\n\n    states = []\n    observations = []\n\n    # Sample initial state\n    current_state = np.random.choice(N, p=S_np)\n    states.append(current_state)\n\n    # Sample initial observation\n    obs = np.random.choice(len(B[current_state]), p=B[current_state])\n    observations.append(obs)\n\n    # Generate remaining sequence\n    for _ in range(1, n_sample):\n        # Transition to next state\n        current_state = np.random.choice(N, p=A[current_state])\n        states.append(current_state)\n\n        # Sample observation from current state\n        obs = np.random.choice(len(B[current_state]), p=B[current_state])\n        observations.append(obs)\n\n    return states, observations\n```"}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float = 0.01, momentum: float = 0.0, prev_update: np.ndarray | None = None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    # Initialize previous update if None\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    \n    # Compute new velocity (momentum update)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    \n    # Update parameters\n    updated_w = w - learning_rate * new_update\n    \n    # Round elements to 4 decimal places and convert to list\n    updated_w_list = np.round(updated_w, 4).tolist()\n    new_update_list = np.round(new_update, 4).tolist()\n    \n    return updated_w_list, new_update_list\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier handling\n    try:\n        S = np.array(S, dtype=float)\n        A = np.array(A, dtype=float)\n        B = np.array(B, dtype=float)\n    except Exception:\n        return -1\n\n    n = len(S)  # Number of states\n    if n == 0:\n        return -1\n\n    # Validate dimensions\n    if A.shape != (n, n):\n        return -1\n    if B.shape[0] != n:\n        return -1\n\n    m = B.shape[1]  # Number of observation symbols\n\n    # Validate observations\n    if not observations:\n        return -1\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1\n\n    # Initialize alpha matrix\n    T = len(observations)\n    alpha = np.zeros((T, n))\n\n    # Initialization step\n    alpha[0, :] = S * B[:, observations[0]]\n\n    # Recursive step\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t - 1, :] * A[:, j]) * B[j, observations[t]]\n\n    # Total probability of the observation sequence\n    prob = np.sum(alpha[T - 1, :])\n\n    return round(prob, 4)\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    # 1. Count support of individual items\n    item_support = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_support[item] += 1\n\n    # Filter items below min_support\n    frequent_items = {item for item, count in item_support.items() if count >= min_support}\n\n    # If no items are frequent, return empty list\n    if not frequent_items:\n        return []\n\n    # 2. Build the initial FP-tree\n    # Each node: { 'item': str, 'count': int, 'parent': node, 'children': dict }\n    class FPNode:\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None  # link to next node with same item\n\n        def increment(self, count):\n            self.count += count\n\n    # Build header table: item -> first node in linked list\n    header_table = {}\n    # Initialize header table with nodes\n    for item in frequent_items:\n        header_table[item] = None\n\n    # Function to insert a transaction into the FP-tree\n    def insert_transaction(tree_root, transaction, count=1):\n        current_node = tree_root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].increment(count)\n            else:\n                new_node = FPNode(item, count, current_node)\n                current_node.children[item] = new_node\n                # Update header table link\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    # Follow link to last node and append\n                    node = header_table[item]\n                    while node.link is not None:\n                        node = node.link\n                    node.link = new_node\n            current_node = current_node.children[item]\n\n    # Build the FP-tree\n    tree_root = FPNode(None, 0, None)\n    # Preprocess transactions: keep only frequent items and sort\n    for transaction in transactions:\n        filtered = [item for item in transaction if item in frequent_items]\n        sorted_items = sorted(filtered)\n        insert_transaction(tree_root, sorted_items)\n\n    # 3. Recursive mining function\n    def mine_fp_tree(tree_root, header_table, prefix):\n        # Collect all items in header table sorted by support ascending\n        items = sorted(header_table.items(), key=lambda x: x[1].count if x[1] else 0)\n        frequent_itemsets = []\n\n        for item, node in items:\n            # Build new prefix with current item\n            new_prefix = prefix + [item]\n            new_prefix_sorted = sorted(new_prefix)\n            frequent_itemsets.append(new_prefix_sorted)\n\n            # Build conditional pattern base\n            conditional_patterns = []\n            node_link = node\n            while node_link is not None:\n                path = []\n                parent = node_link.parent\n                while parent is not None and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                path.reverse()\n                if path:\n                    for _ in range(node_link.count):\n                        conditional_patterns.append(path)\n                node_link = node_link.link\n\n            # Count support in conditional pattern base\n            cond_support = Counter()\n            for pattern in conditional_patterns:\n                for item_in_pattern in pattern:\n                    cond_support[item_in_pattern] += 1\n\n            # Filter items in conditional pattern base\n            cond_frequent_items = {item for item, count in cond_support.items() if count >= min_support}\n            if not cond_frequent_items:\n                continue\n\n            # Build conditional FP-tree\n            def build_conditional_tree():\n                cond_tree_root = FPNode(None, 0, None)\n                cond_header_table = {}\n                for item in cond_frequent_items:\n                    cond_header_table[item] = None\n\n                for pattern in conditional_patterns:\n                    filtered_pattern = [i for i in pattern if i in cond_frequent_items]\n                    sorted_pattern = sorted(filtered_pattern)\n                    insert_transaction(cond_tree_root, sorted_pattern)\n\n                return cond_tree_root, cond_header_table\n\n            cond_tree_root, cond_header_table = build_conditional_tree()\n\n            # Recursively mine the conditional FP-tree\n            if any(cond_header_table.values()):\n                frequent_itemsets.extend(\n                    mine_fp_tree(cond_tree_root, cond_header_table, new_prefix)\n                )\n\n        return frequent_itemsets\n\n    # Start mining from the main FP-tree\n    result = mine_fp_tree(tree_root, header_table, [])\n\n    # Remove duplicates if any (shouldn't be, but just in case)\n    unique_result = []\n    seen = set()\n    for itemset in result:\n        t = tuple(itemset)\n        if t not in seen:\n            seen.add(t)\n            unique_result.append(itemset)\n\n    # Sort the result as specified\n    unique_result.sort(key=lambda x: (len(x), x))\n    return unique_result\n```"}
{"task_id": 71, "completion_id": 0, "completion": "```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    for sample in data:\n        label = sample[-1]\n        if label in label_counts:\n            label_counts[label] += 1\n        else:\n            label_counts[label] = 1\n    return label_counts\n```"}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Calculate the variance reduction achieved by a split in a regression tree.\n\n    Parameters:\n    y (np.ndarray): Target values at the parent node, shape (n_samples, n_features) or (n_samples,)\n    y_left (np.ndarray): Target values in the left child node, shape (n_left_samples, n_features) or (n_left_samples,)\n    y_right (np.ndarray): Target values in the right child node, shape (n_right_samples, n_features) or (n_right_samples,)\n\n    Returns:\n    float: Variance reduction rounded to 4 decimal places.\n    \"\"\"\n    # Ensure y, y_left, y_right are 2D arrays for consistent processing\n    y = np.atleast_2d(y)\n    y_left = np.atleast_2d(y_left)\n    y_right = np.atleast_2d(y_right)\n\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n\n    # Compute variance for parent node (sum over features)\n    var_parent = np.sum(np.var(y, axis=0))\n    # Compute variance for left child\n    var_left = np.sum(np.var(y_left, axis=0))\n    # Compute variance for right child\n    var_right = np.sum(np.var(y_right, axis=0))\n\n    # Calculate variance reduction\n    vr = var_parent - (n_left / n) * var_left - (n_right / n) * var_right\n\n    # Return rounded result\n    return round(vr, 4)\n```"}
{"task_id": 74, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef magnitude_spectrum(frames: \"np.ndarray\") -> \"list[list[float]]\":\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    # Convert input to numpy array\n    frames = np.asarray(frames)\n    \n    # Check if input is 1D (single frame) or 2D (multiple frames)\n    if frames.ndim == 1:\n        frames = frames.reshape(1, -1)\n    \n    spectra = []\n    for frame in frames:\n        # Compute the real FFT\n        spectrum = np.fft.rfft(frame)\n        # Take the magnitude (absolute value)\n        mag = np.abs(spectrum)\n        # Round to four decimal places\n        mag_rounded = np.round(mag, 4)\n        # Convert to list and append\n        spectra.append(mag_rounded.tolist())\n    \n    return spectra\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Validate k\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return -1\n\n    # Convert training data to numpy array for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n\n    predictions = []\n\n    for test_point in X_test:\n        test_point_np = np.array(test_point)\n\n        # Compute squared Euclidean distances (without sqrt for efficiency)\n        distances = np.sum((X_train_np - test_point_np) ** 2, axis=1)\n\n        # Get indices of the k smallest distances\n        neighbor_indices = np.argpartition(distances, k - 1)[:k]\n\n        # Count the class labels among the neighbors\n        neighbor_labels = y_train_np[neighbor_indices]\n        # Count occurrences of each class\n        class_counts = {}\n        for label in neighbor_labels:\n            class_counts[label] = class_counts.get(label, 0) + 1\n\n        # Find the class with the highest count\n        max_count = max(class_counts.values())\n        # Among classes with max count, pick the smallest label\n        candidate_classes = [cls for cls, count in class_counts.items() if count == max_count]\n        predicted_class = min(candidate_classes)\n\n        predictions.append(predicted_class)\n\n    return predictions\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Compute the element-wise log of y_pred with epsilon\n    log_preds = np.log(y_pred + epsilon)\n    \n    # Element-wise multiplication with y (which is one-hot)\n    # Since y is one-hot, only the true class contributes\n    # Sum over classes for each sample\n    sample_losses = -np.sum(y * log_preds, axis=1)\n    \n    # Sum over all samples to get total loss\n    total_loss = np.sum(sample_losses)\n    \n    # Round to 4 decimal places\n    return round(total_loss, 4)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n\n    def relu(Z):\n        return np.maximum(0, Z)\n\n    def sigmoid(Z):\n        return 1 / (1 + np.exp(-Z))\n\n    caches = []\n    A = X\n    L = len([key for key in parameters if key.startswith('W')])  # Number of layers\n\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        cache = (A, W, b, Z)  # Store cache for potential backward pass\n\n        if l < L:\n            A = relu(Z)\n        else:\n            A = sigmoid(Z)\n\n        caches.append(cache)\n\n    AL = A\n    # Round to 4 decimal places\n    AL_rounded = np.round(AL, 4)\n    return AL_rounded.tolist()\n```"}
{"task_id": 78, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n\n    # Convert lists to numpy arrays for easier computation\n    params_np = np.array(params, dtype=float)\n    grads_np = np.array(grads, dtype=float)\n    m_np = np.array(m, dtype=float)\n    u_np = np.array(u, dtype=float)\n\n    # Update biased first moment estimate\n    m_t = beta1 * m_np + (1 - beta1) * grads_np\n\n    # Update exponentially weighted infinity norm\n    u_t = np.maximum(beta2 * u_np, np.abs(grads_np))\n\n    # Compute bias-corrected learning rate\n    bias_correction = 1 - beta1 ** t\n    step_size = (learning_rate / bias_correction) * (m_t / (u_t + epsilon))\n\n    # Update parameters\n    new_params = params_np - step_size\n\n    # Increment time step\n    new_t = t + 1\n\n    # Round all entries to 6 decimal places\n    new_params_list = np.round(new_params, 6).tolist()\n    new_m_list = np.round(m_t, 6).tolist()\n    new_u_list = np.round(u_t, 6).tolist()\n\n    return new_params_list, new_m_list, new_u_list, new_t\n```"}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    w = np.array(w, dtype=float)\n    grad_w = np.array(grad_w, dtype=float)\n    \n    # Initialize running averages to zero (since it's the first step)\n    E_grad = np.zeros_like(w)\n    E_delta = np.zeros_like(w)\n    \n    # Update E_grad: running average of squared gradients\n    E_grad = rho * E_grad + (1 - rho) * (grad_w ** 2)\n    \n    # Compute RMS of gradient\n    RMS_grad = np.sqrt(E_grad + eps)\n    \n    # Since E_delta is zero initially, RMS_delta is sqrt(0 + eps) = sqrt(eps)\n    RMS_delta = np.sqrt(E_delta + eps)\n    \n    # Compute adaptive learning rate\n    adaptive_lr = RMS_delta / RMS_grad\n    \n    # Compute \u0394w\n    delta_w = adaptive_lr * grad_w\n    \n    # For components where gradient is zero, \u0394w should be zero (already zero)\n    delta_w = np.where(grad_w == 0, 0, delta_w)\n    \n    # Update E_delta: running average of squared updates\n    E_delta = rho * E_delta + (1 - rho) * (delta_w ** 2)\n    \n    # Update weights\n    w_new = w - delta_w\n    \n    # Round to 4 decimal places and convert to list\n    w_rounded = np.round(w_new, 4).tolist()\n    \n    return w_rounded\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Ensure A2 is a numpy array\n    A2 = np.array(A2)\n    Y = np.array(Y)\n    \n    # Clip A2 to avoid log(0)\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the cost\n    m = Y.shape[0]\n    cost = - (1 / m) * np.sum(\n        Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)\n    )\n    \n    # Return rounded to 6 decimal places\n    return round(cost, 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to numpy array for easier processing\n    Q = np.array(Q)\n    n = len(Q)\n    \n    # Find the index of the first occurrence of the maximum Q-value\n    greedy_index = np.argmax(Q)\n    \n    # Calculate the probability for the greedy action\n    p_greedy = 1 - epsilon + (epsilon / n)\n    \n    # Probability for non-greedy actions\n    p_other = epsilon / n\n    \n    # Initialize probability array\n    probabilities = np.full(n, p_other)\n    probabilities[greedy_index] = p_greedy\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Adjust for any rounding errors to ensure sum is exactly 1\n    total = np.sum(probabilities)\n    diff = 1.0 - total\n    # Correct the first element to compensate for rounding error\n    probabilities[0] += diff\n    \n    # Final rounding to ensure within tolerance\n    probabilities = np.round(probabilities, 4)\n    \n    return probabilities.tolist()\n```"}
{"task_id": 84, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    numerator = np.sum(residuals * h_pred)\n    denominator = np.sum(h_pred ** 2)\n\n    if denominator == 0:\n        # All h_pred are zero, residuals are perfectly fitted\n        gamma = 1.0\n    else:\n        gamma = numerator / denominator\n\n    return round(gamma, 4)\n```"}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    # Check for zero learning rate or zero input data\n    if lr == 0 or np.allclose(X, 0):\n        # No update needed\n        return W.round(4).tolist()\n\n    # Compute logits\n    Z = X @ W  # shape: (N, C)\n\n    # Apply softmax row-wise\n    # To improve numerical stability, subtract max from each row\n    Z_max = np.max(Z, axis=1, keepdims=True)\n    exp_Z = np.exp(Z - Z_max)\n    sum_exp_Z = np.sum(exp_Z, axis=1, keepdims=True)\n    Y_pred = exp_Z / sum_exp_Z  # shape: (N, C)\n\n    # Compute gradient\n    N = X.shape[0]\n    grad = (X.T @ (Y_pred - Y)) / N  # shape: (D, C)\n\n    # Update weights\n    W_new = W - lr * grad\n\n    # Round to 4 decimal places\n    W_rounded = np.round(W_new, 4)\n\n    return W_rounded.tolist()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n\n    num_trees = len(predictions)\n    num_samples = len(predictions[0])\n\n    # Initialize the list to hold final predictions\n    final_predictions = []\n\n    for sample_idx in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(num_trees)]\n        # Count the frequency of each class label\n        counter = Counter(votes)\n        # Find the maximum vote count\n        max_votes = max(counter.values())\n        # Extract all labels with the maximum votes\n        candidates = [label for label, count in counter.items() if count == max_votes]\n        # Select the smallest label among candidates\n        # For numeric labels, comparison is straightforward\n        # For strings, lex order applies\n        # The min() function works for both types if they are comparable\n        # Assuming all labels are of the same type per sample, as per problem statement\n        selected_label = min(candidates)\n        final_predictions.append(selected_label)\n\n    return final_predictions\n```"}
{"task_id": 87, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_y = Y.shape[0]\n    n_h = 10\n    return (n_x, n_h, n_y)\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    arr = np.array(z, dtype=float)\n\n    # Compute softplus using the numerically stable identity\n    result = np.logaddexp(0.0, arr)\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Check if input was scalar\n    if np.isscalar(z):\n        return float(result)\n    else:\n        # Convert to list\n        return result.tolist()\n```"}
{"task_id": 89, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # Linear step\n    Z = np.dot(W, A_prev) + b  # shape: (n_l, m)\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n\n    # Activation step\n    if activation == \"relu\":\n        A = np.maximum(0, Z)\n    elif activation == \"sigmoid\":\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        # Behavior unspecified for other activation strings\n        # For safety, raise an error\n        raise ValueError(\"Unsupported activation function. Use 'relu' or 'sigmoid'.\")\n\n    # Verify output shape\n    expected_shape = (W.shape[0], A_prev.shape[1])\n    assert A.shape == expected_shape, f\"Output shape {A.shape} does not match expected shape {expected_shape}\"\n\n    # Round to 4 decimal places and convert to list\n    A_rounded = A.round(4).tolist()\n\n    cache = (linear_cache, activation_cache)\n    return A_rounded, cache\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has 'ev_estimates' attribute or key\n    if not hasattr(policy, 'ev_estimates') and not isinstance(policy, dict):\n        return np.nan\n    if isinstance(policy, dict):\n        estimates = policy.get('ev_estimates', {})\n    else:\n        estimates = getattr(policy, 'ev_estimates', {})\n\n    # If estimates are missing or empty, return nan\n    if not estimates:\n        return np.nan\n\n    # Extract true expected values\n    true_evs = getattr(bandit, 'arm_evs', None)\n    if true_evs is None:\n        return np.nan\n\n    # Sort the arms to align estimates with true values\n    sorted_arms = sorted(estimates.keys())\n\n    # Compute squared errors\n    squared_errors = []\n    for arm in sorted_arms:\n        true_value = true_evs[arm]\n        estimate = estimates[arm]\n        squared_errors.append((estimate - true_value) ** 2)\n\n    # Calculate mean squared error\n    mse_value = np.mean(squared_errors)\n\n    # Return rounded to 4 decimal places\n    return round(mse_value, 4)\n```"}
{"task_id": 91, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    dA_np = np.array(dA)\n    Z = np.array(activation_cache)\n\n    # Check if shapes match\n    if dA_np.shape != Z.shape:\n        return -1\n\n    # Compute the indicator function: 1 where Z > 0, else 0\n    indicator = (Z > 0).astype(float)\n\n    # Compute dZ\n    dZ = dA_np * indicator\n\n    # Convert back to list of lists\n    return dZ.tolist()\n```"}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport numbers\n\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    # Check if 'a' is an instance of numbers.Number\n    # and ensure it is not a boolean (since bool is a subclass of int)\n    return isinstance(a, numbers.Number) and not isinstance(a, bool)\n```"}
{"task_id": 93, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    # Convert input to a NumPy array\n    Z_array = np.array(Z)\n    # Compute ReLU activation\n    A = np.maximum(0, Z_array)\n    # Convert both A and Z_array to lists for JSON-serializability\n    return A.tolist(), Z_array.tolist()\n```"}
{"task_id": 94, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    # Count the frequency of each label\n    counts = Counter(neighbors_targets)\n    # Find the maximum frequency\n    max_freq = max(counts.values())\n    # Collect all labels with the maximum frequency\n    candidates = [label for label, count in counts.items() if count == max_freq]\n    # Return the smallest label among the candidates\n    return min(candidates)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1. Build all N-gram frequency tables from the corpus\n    # Tokenize corpus and build vocabulary\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.strip().split()\n        tokenized_corpus.extend(tokens)\n    # Count words in corpus\n    word_counts = Counter(tokenized_corpus)\n    # Add <UNK> token to vocabulary\n    vocab = set(word_counts.keys())\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n\n    # Replace unseen words in corpus with <UNK>\n    # For building N-grams, we need to process each sentence separately\n    # and replace words not in vocab with <UNK>\n    processed_corpus = []\n    for sentence in corpus:\n        tokens = sentence.strip().split()\n        tokens = [w if w in vocab else \"<UNK>\" for w in tokens]\n        processed_corpus.append(tokens)\n\n    # Build N-gram counts\n    ngram_counts = [Counter() for _ in range(1, N+1)]\n    # For context counts (N-1 grams)\n    context_counts = Counter()\n\n    for tokens in processed_corpus:\n        # Pad the sentence with (N-1) start tokens if needed\n        # Not specified explicitly, but common practice is to pad with <s>\n        # Since not specified, we can proceed without padding\n        for n in range(1, N+1):\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i+n])\n                ngram_counts[n-1][ngram] += 1\n                if n > 1:\n                    context = ngram[:-1]\n                    context_counts[context] += 1\n\n    # 2. Process the target sequence\n    seq_tokens = sequence.strip().split()\n    # Replace unseen words with <UNK>\n    seq_tokens = [w if w in vocab else \"<UNK>\" for w in seq_tokens]\n\n    # If sequence length < N, no N-grams exist\n    if len(seq_tokens) < N:\n        return 0.0\n\n    # Calculate the log probability\n    log_prob = 0.0\n    for i in range(len(seq_tokens) - N + 1):\n        ngram = tuple(seq_tokens[i:i+N])\n        context = ngram[:-1]\n        word = ngram[-1]\n\n        # Count of the context\n        context_count = context_counts[context] if N > 1 else sum(ngram_counts[0].values())\n\n        # Count of the n-gram\n        ngram_count = ngram_counts[N-1][ngram]\n\n        # Apply additive smoothing\n        numerator = ngram_count + K\n        denominator = context_count + K * V\n\n        prob = numerator / denominator\n        log_prob += math.log(prob)\n\n    # Round to 4 decimals\n    return round(log_prob, 4)\n```"}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    Z_array = np.array(Z)\n    \n    # Compute the derivative: 1 where Z > 0, else 0\n    derivative = (Z_array > 0).astype(float)\n    \n    # Check if input was scalar\n    if np.isscalar(Z):\n        return float(derivative)\n    else:\n        return derivative.tolist()\n```"}
{"task_id": 99, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    # Check if Z is a scalar (int or float)\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    \n    # Check if Z is a NumPy array\n    elif isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    \n    # Check if Z is a list (could be list of lists or 1-D list)\n    elif isinstance(Z, list):\n        # Convert list to NumPy array for vectorized operation\n        Z_array = np.array(Z)\n        # Apply ReLU\n        relu_array = np.maximum(Z_array, 0)\n        # Convert back to list if original was a list\n        if Z_array.ndim == 1:\n            return relu_array.tolist()\n        elif Z_array.ndim == 2:\n            return relu_array.tolist()\n        else:\n            # For higher dimensions, just return as array\n            return relu_array\n    else:\n        # If input type is unrecognized, raise an error\n        raise TypeError(\"Input must be an int, float, list, or numpy.ndarray.\")\n```"}
{"task_id": 100, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy vectorized operations\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    \n    # Check if the lengths are equal\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    \n    # Calculate the number of mismatches\n    mismatches = np.sum(actual_arr != predicted_arr)\n    total_samples = actual_arr.shape[0]\n    \n    # Compute error rate\n    error_rate = mismatches / total_samples\n    \n    # Return rounded to four decimal places\n    return round(error_rate, 4)\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    # Check for 1D input\n    if x.ndim == 1:\n        raise ValueError(\"Cannot apply softmax to a tensor that is 1D\")\n    \n    # Compute the maximum value along the specified axis for numerical stability\n    max_x = np.max(x, axis=axis, keepdims=True)\n    \n    # Subtract max for numerical stability\n    shifted_x = x - max_x\n    \n    # Exponentiate the shifted values\n    exp_x = np.exp(shifted_x)\n    \n    # Sum of exponentials along the axis\n    sum_exp_x = np.sum(exp_x, axis=axis, keepdims=True)\n    \n    # Compute softmax probabilities\n    softmax_x = exp_x / sum_exp_x\n    \n    # Round to 4 decimal places\n    rounded = np.round(softmax_x, 4)\n    \n    # Convert to nested Python lists\n    return rounded.tolist()\n```"}
{"task_id": 102, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    # Validate inputs\n    if not isinstance(degree, int) or degree < 0:\n        return -1\n    if len(x) != len(y):\n        return -1\n    if len(x) == 0:\n        return -1\n    if len(x) < degree + 1:\n        # Not enough data points to fit the polynomial\n        return -1\n\n    # Construct the design matrix with polynomial features\n    # Each row: [1, x_i, x_i^2, ..., x_i^degree]\n    X = np.vander(x, N=degree + 1, increasing=True)\n\n    # Convert y to numpy array\n    y_array = np.array(y)\n\n    # Compute the weights using least squares (Moore-Penrose pseudo-inverse)\n    try:\n        w, residuals, rank, s = np.linalg.lstsq(X, y_array, rcond=None)\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Prepare the design matrix for prediction points\n    X_pred = np.vander(x_pred, N=degree + 1, increasing=True)\n\n    # Compute predictions\n    y_pred = X_pred @ w\n\n    # Round predictions to 4 decimal places\n    y_pred_rounded = [round(val, 4) for val in y_pred]\n\n    return y_pred_rounded\n```"}
{"task_id": 104, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    # Helper function to compute entropy\n    def entropy(labels):\n        # Count occurrences of each class\n        values, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        # Compute entropy\n        ent = -np.sum(probabilities * np.log2(probabilities))\n        return ent\n\n    # Calculate entropy of the parent node\n    H_y = entropy(y)\n\n    total_samples = len(y)\n    # Initialize sum of weighted entropies of child nodes\n    weighted_entropy_sum = 0.0\n\n    for split_labels in splits:\n        weight = len(split_labels) / total_samples\n        H_split = entropy(split_labels)\n        weighted_entropy_sum += weight * H_split\n\n    # Compute information gain\n    IG = H_y - weighted_entropy_sum\n\n    # Return rounded to 4 decimal places\n    return round(IG, 4)\n```"}
{"task_id": 105, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    # Validate sigma\n    if sigma <= 0:\n        return -1\n\n    # Convert x to a numpy array for uniform processing\n    x_array = np.array(x, dtype=float)\n\n    # Handle empty input\n    if x_array.size == 0:\n        return []\n\n    # Calculate the coefficient\n    coeff = 1.0 / (np.sqrt(2 * np.pi) * sigma)\n\n    # Calculate the exponent\n    exponent = -((x_array - mean) ** 2) / (2 * sigma ** 2)\n\n    # Compute the PDF values\n    pdf_values = coeff * np.exp(exponent)\n\n    # Round to 5 decimal places\n    rounded_values = [round(val, 5) for val in pdf_values]\n\n    return rounded_values\n```"}
{"task_id": 107, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    # Update biased first moment estimate\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    # Update biased second moment estimate\n    v_t = beta2 * v_prev + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_t / (1 - beta1 ** t)\n    # Compute bias-corrected second moment estimate\n    v_hat = v_t / (1 - beta2 ** t)\n    \n    # Parameter update\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    \n    # Round all values to 6 decimal places\n    theta_new = np.round(theta_new, 6)\n    m_t = np.round(m_t, 6)\n    v_t = np.round(v_t, 6)\n    m_hat = np.round(m_hat, 6)\n    v_hat = np.round(v_hat, 6)\n    \n    # Convert to lists for output\n    theta_list = theta_new.tolist()\n    m_list = m_t.tolist()\n    v_list = v_t.tolist()\n    \n    return theta_list, m_list, v_list, t + 1\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)  # For reproducibility\n\n    N, M = X.shape\n\n    # Initialize W and H with fixed seed\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        reconstruction = W @ H\n        frob_loss = np.linalg.norm(X - reconstruction, 'fro') ** 2\n        reg_loss = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        return frob_loss + reg_loss\n\n    prev_loss = compute_loss(X, W, H)\n    for iteration in range(max_iter):\n        # Update W: solve (H H^T + alpha * I) W^T = H X^T\n        HHT = H @ H.T\n        reg_W = alpha * np.eye(K)\n        for i in range(N):\n            # Solve for each row of W\n            W[i, :] = np.linalg.solve(HHT + reg_W, H @ X[i, :].T)\n\n        # Update H: solve (W^T W + alpha * I) H = W^T X\n        WTW = W.T @ W\n        reg_H = alpha * np.eye(K)\n        for j in range(M):\n            # Solve for each column of H\n            H[:, j] = np.linalg.solve(WTW + reg_H, W.T @ X[:, j])\n\n        # Compute current loss\n        current_loss = compute_loss(X, W, H, alpha)\n\n        # Check for convergence\n        if current_loss < tol:\n            break\n\n        # Optional: early stopping if loss does not improve significantly\n        # (not required, but can be added)\n        # if abs(prev_loss - current_loss) < 1e-8:\n        #     break\n        prev_loss = current_loss\n\n    # Reconstruct and round the matrix\n    X_hat = (W @ H).round(4)\n    return X_hat.tolist()\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n\n    # Set seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n\n    # Handle edge cases\n    if K <= 0:\n        return []\n    if K >= m:\n        # Each point as a centroid if K >= number of points\n        centroids = [X[i].copy() for i in range(min(K, m))]\n        # Pad with duplicates if K > m\n        while len(centroids) < K:\n            centroids.append(centroids[-1].copy())\n        # Round and sort\n        centroids = [list(np.round(c, 4)) for c in centroids]\n        centroids.sort(key=lambda c: (c[0], c))\n        return centroids\n\n    # 1. Initialize centroids with K-Means++ method\n    centroids = []\n\n    # Choose the first centroid randomly\n    first_idx = random.randint(0, m - 1)\n    centroids.append(X[first_idx])\n\n    # Choose remaining K-1 centroids\n    for _ in range(1, K):\n        # Compute squared distances from each point to the nearest centroid\n        distances = np.array([\n            min(np.sum((X[i] - c) ** 2) for c in centroids)\n            for i in range(m)\n        ])\n\n        # Handle the case where all distances are zero (all points are identical)\n        total_distance = distances.sum()\n        if total_distance == 0:\n            # All points are identical; pick random points\n            remaining_indices = list(set(range(m)) - {np.where((X == c).all(axis=1))[0][0] for c in centroids})\n            if remaining_indices:\n                next_idx = random.choice(remaining_indices)\n                centroids.append(X[next_idx])\n            else:\n                # All points are already chosen\n                break\n        else:\n            # Select next centroid with probability proportional to squared distance\n            probabilities = distances / total_distance\n            next_idx = np.random.choice(m, p=probabilities)\n            centroids.append(X[next_idx])\n\n    # Convert centroids to numpy array for easier computation\n    centroids = np.array(centroids)\n\n    # 2. Lloyd's iterations\n    for iteration in range(max_iter):\n        # Assign points to nearest centroid\n        distances = np.array([\n            np.sum((X - c) ** 2, axis=1) for c in centroids\n        ])  # shape: (K, m)\n        cluster_assignments = np.argmin(distances, axis=0)\n\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            points_in_cluster = X[cluster_assignments == k]\n            if len(points_in_cluster) == 0:\n                # Keep centroid unchanged if cluster is empty\n                new_centroids[k] = centroids[k]\n            else:\n                new_centroids[k] = points_in_cluster.mean(axis=0)\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids, rtol=1e-8, atol=1e-8):\n            break\n\n        centroids = new_centroids\n\n    # 3. Round to 4 decimal places\n    centroids = np.round(centroids, 4)\n\n    # 4. Sort centroids by first coordinate, then by full tuple\n    sorted_centroids = sorted(centroids.tolist(), key=lambda c: (c[0], c))\n\n    return sorted_centroids\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes the input text into a fixed-length list of integer token IDs.\n    Characters not in vocabulary are encoded as 0 (padding).\n    If shorter than time_steps, pad with 0s on the right.\n    If longer, truncate to time_steps.\n    \"\"\"\n    encoded = []\n    for ch in text:\n        encoded.append(vocabulary.get(ch, 0))\n    # Truncate if longer\n    encoded = encoded[:time_steps]\n    # Pad if shorter\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decodes a list/array of integer IDs back to a string.\n    Ignores padding tokens (0).\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx == 0:\n            continue  # skip padding\n        chars.append(inverse_vocab.get(idx, ''))\n    return ''.join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes input text, runs model prediction, and decodes the output.\n    Assumes model has a .predict method that accepts a batch of shape (batch_size, time_steps).\n    \"\"\"\n    # Encode input text\n    input_encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to numpy array and add batch dimension\n    input_array = np.array([input_encoded], dtype=np.int32)  # shape: (1, TIME_STEPS)\n    \n    # Get model prediction: shape (batch_size, time_steps, vocab_size)\n    prediction = model.predict(input_array)\n    \n    # For each time step, pick the index with the highest probability\n    predicted_ids = np.argmax(prediction, axis=-1)[0]  # shape: (time_steps,)\n    \n    # Decode predicted IDs to string\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_text\n```"}
{"task_id": 112, "completion_id": 0, "completion": "```python\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    # Extract words consisting of only alphabetic characters\n    words = re.findall(r'[A-Za-z]+', text)\n    # Convert all words to lowercase for case-insensitive counting\n    words_lower = [word.lower() for word in words]\n    # Count the frequency of each word\n    counter = Counter(words_lower)\n    # If no words found, return empty list\n    if not counter:\n        return []\n\n    # Create Token objects for each word\n    tokens = [Token(word) for word in counter]\n    # Assign counts to each Token\n    for token in tokens:\n        token.count = counter[token.word]\n\n    # Sort tokens:\n    # 1. Descending by count\n    # 2. Lexicographically ascending by word for ties\n    tokens.sort(key=lambda t: (-t.count, t.word))\n    return tokens\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *examples* is None, the function\n        should use the global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Use global EXAMPLES if examples is None\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        # Call the helper run_example\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate output characters into a string\n        predicted_str = ''.join(output_chars)\n        # Print input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_str}\")\n        # Collect the prediction\n        predictions.append(predicted_str)\n\n    return predictions\n```"}
{"task_id": 114, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772848170429916717\n    lam = 1.0507009873554804934193349852946\n\n    if not derivative:\n        # Compute SELU activation\n        # For x >= 0: lam * x\n        # For x < 0: lam * alpha * (exp(x) - 1)\n        selu_vals = np.where(\n            x >= 0,\n            lam * x,\n            lam * alpha * (np.exp(x) - 1)\n        )\n    else:\n        # Compute derivative of SELU\n        # For x >= 0: lam * 1\n        # For x < 0: lam * alpha * exp(x)\n        selu_vals = np.where(\n            x >= 0,\n            lam * 1,\n            lam * alpha * np.exp(x)\n        )\n\n    # Round to 6 decimal places\n    selu_rounded = np.round(selu_vals, 6)\n\n    # Convert to nested list with original shape\n    return selu_rounded.tolist()\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    epsilon = 1e-20  # small constant to avoid log(0)\n    \n    # Ensure y and w are 1D arrays for consistency\n    y = y.reshape(-1)\n    w = w.reshape(-1)\n    \n    # Compute z = X \u00b7 w\n    z = X @ w  # shape (m,)\n    \n    # Compute predicted probabilities p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Clip p to avoid log(0)\n    p_clipped = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the loss\n    loss_terms = y * np.log(p_clipped) + (1 - y) * np.log(1 - p_clipped)\n    loss = -np.mean(loss_terms)\n    \n    # Compute the gradient\n    diff = p - y  # shape (m,)\n    grad = (X.T @ diff) / X.shape[0]  # shape (n,)\n    \n    # Round loss and gradient\n    loss_rounded = round(loss, 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    \n    return loss_rounded, grad_rounded\n```"}
{"task_id": 116, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    # Calculate parent MSE\n    y_mean = np.mean(y)\n    mse_parent = np.mean((y - y_mean) ** 2)\n\n    # Calculate weighted child MSE\n    total_samples = len(y)\n    mse_children = 0.0\n    for s in splits:\n        if len(s) == 0:\n            continue  # Skip empty splits if any\n        s_mean = np.mean(s)\n        mse_s = np.mean((s - s_mean) ** 2)\n        weight = len(s) / total_samples\n        mse_children += weight * mse_s\n\n    # Compute the reduction\n    delta_mse = mse_parent - mse_children\n\n    # Return rounded to 4 decimal places\n    return round(delta_mse, 4)\n```"}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    m, n = X_train.shape\n    # Initialize sample weights uniformly\n    sample_weights = np.ones(m) / m\n\n    # List to store the weak classifiers' parameters\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Initialize variables to store the best stump\n        min_error = float('inf')\n        best_feature_idx = None\n        best_threshold = None\n        best_polarity = 1  # Direction of inequality\n\n        # For each feature, find the best threshold\n        for feature_idx in range(n):\n            feature_values = X_train[:, feature_idx]\n            # Get sorted unique values for potential thresholds\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions based on current threshold and polarity\n                    predictions = np.ones(m)\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n\n                    # Compute weighted error\n                    misclassified = predictions != y_train\n                    error = np.sum(sample_weights * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature_idx = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Compute alpha (classifier weight)\n        # To avoid division by zero, clip error\n        epsilon = 1e-10\n        min_error = max(min_error, epsilon)\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n\n        # Store the classifier parameters\n        classifiers.append({\n            'feature_idx': best_feature_idx,\n            'threshold': best_threshold,\n            'polarity': best_polarity,\n            'alpha': alpha\n        })\n\n        # Make predictions on training data with the selected stump\n        feature_values = X_train[:, best_feature_idx]\n        predictions = np.ones(m)\n        predictions[best_polarity * feature_values < best_polarity * best_threshold] = -1\n\n        # Update sample weights\n        # Increase weights for misclassified, decrease for correct\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        # Normalize weights\n        sample_weights /= np.sum(sample_weights)\n\n    # Now, predict on X_test\n    final_predictions = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        feature_idx = clf['feature_idx']\n        threshold = clf['threshold']\n        polarity = clf['polarity']\n        alpha = clf['alpha']\n\n        feature_values = X_test[:, feature_idx]\n        preds = np.ones(X_test.shape[0])\n        preds[polarity * feature_values < polarity * threshold] = -1\n\n        final_predictions += alpha * preds\n\n    # Final prediction is sign of weighted sum\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```"}
{"task_id": 119, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    # Check for empty lists or mismatched lengths\n    if not params or not grads or len(params) != len(grads):\n        return []\n\n    updated_params = []\n    for p, g in zip(params, grads):\n        # Compute the new parameter: theta - alpha * gradient\n        new_param = p - alpha * g\n        # Round to 4 decimal places\n        new_param_rounded = np.round(new_param, 4)\n        # Convert to list\n        updated_params.append(new_param_rounded.tolist())\n\n    return updated_params\n```"}
{"task_id": 120, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    # Convert X and y to numpy arrays for easier manipulation\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Check for dimension compatibility\n    if X_np.shape[0] != y_np.shape[0]:\n        return -1\n\n    m, n = X_np.shape  # number of samples and features\n\n    # Insert bias term (column of ones) at the beginning\n    X_aug = np.hstack((np.ones((m, 1)), X_np))\n\n    # Number of features including bias\n    N = X_aug.shape[1]\n\n    # Initialize weights uniformly in [-1/\u221aN, 1/\u221aN]\n    limit = 1 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, size=N)\n\n    # Gradient descent iterations\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X_aug @ w\n        # Compute error\n        error = y_pred - y_np\n        # Compute gradient\n        gradient = (1/m) * (X_aug.T @ error)\n        # Update weights\n        w = w - learning_rate * gradient\n\n    # Round weights to 4 decimal places\n    w_rounded = np.round(w, 4)\n\n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 122, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Augment X with a column of ones for the intercept\n    ones_column = np.ones((X_np.shape[0], 1))\n    X_aug = np.hstack((ones_column, X_np))\n\n    # Compute the Moore-Penrose pseudo-inverse of X_aug\n    X_pinv = np.linalg.pinv(X_aug)\n\n    # Calculate the weight vector\n    w = X_pinv @ y_np\n\n    # Round each weight to 4 decimal places\n    w_rounded = np.round(w, 4)\n\n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 123, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # Convert input to a list for uniform processing\n    y_list = list(y)\n\n    # Detect unique categories\n    unique_categories = sorted(set(y_list))\n\n    # Create a mapping from category to index\n    category_to_index = {category: idx for idx, category in enumerate(unique_categories)}\n\n    # Build the one-hot encoded matrix\n    one_hot_matrix = []\n    for item in y_list:\n        # Initialize a row with zeros\n        row = [0] * len(unique_categories)\n        # Set the position corresponding to the item's category to 1\n        index = category_to_index[item]\n        row[index] = 1\n        one_hot_matrix.append(row)\n\n    return one_hot_matrix\n```"}
{"task_id": 126, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert input lists to numpy arrays\n    X_np = np.array(X)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y)\n    \n    N, C = X_np.shape\n    M = Y_np.shape[0]\n    \n    # Set gamma if None\n    if gamma is None:\n        gamma = 1.0 / C\n    \n    # Compute the dot product matrix between X and Y\n    dot_product = np.dot(X_np, Y_np.T)\n    \n    # Compute the kernel matrix\n    K = (gamma * dot_product + c0) ** d\n    \n    # Round to 4 decimals\n    K_rounded = np.round(K, 4)\n    \n    # Convert to list of lists\n    return K_rounded.tolist()\n```"}
{"task_id": 127, "completion_id": 0, "completion": "```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    # Check if input lists have the same length\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Find the sorted list of unique classes\n    classes = sorted(set(y_true) | set(y_pred))\n    class_index = {label: idx for idx, label in enumerate(classes)}\n\n    # Initialize the confusion matrix with zeros\n    size = len(classes)\n    matrix = [[0 for _ in range(size)] for _ in range(size)]\n\n    # Populate the confusion matrix\n    for true_label, pred_label in zip(y_true, y_pred):\n        i = class_index[true_label]\n        j = class_index[pred_label]\n        matrix[i][j] += 1\n\n    return matrix\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Check for edge case: if n_components == 0, return empty list\n    if n_components == 0:\n        return []\n\n    # Unique classes\n    classes = np.unique(y)\n    n_classes = len(classes)\n    n_samples, n_features = X.shape\n\n    # Compute global mean\n    mu = np.mean(X, axis=0)\n\n    # Initialize scatter matrices\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n\n    # For each class, compute class mean and scatter matrices\n    for c in classes:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mu_c = np.mean(X_c, axis=0)\n        # Within-class scatter\n        X_centered = X_c - mu_c\n        S_W += X_centered.T @ X_centered\n        # Between-class scatter\n        mean_diff = (mu_c - mu).reshape(-1, 1)\n        S_B += N_c * (mean_diff @ mean_diff.T)\n\n    # Compute the pseudo-inverse of S_W\n    S_W_inv = np.linalg.pinv(S_W)\n\n    # Form the matrix A = S_W^{-1} * S_B\n    A = S_W_inv @ S_B\n\n    # Eigen-decomposition (A is symmetric)\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_idx]\n    eigenvectors = eigenvectors[:, sorted_idx]\n\n    # Select the top n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n\n    # Deterministic sign correction\n    for i in range(W.shape[1]):\n        first_nonzero_idx = np.nonzero(W[:, i])[0]\n        if first_nonzero_idx.size > 0:\n            first_nonzero_element = W[first_nonzero_idx[0], i]\n            if first_nonzero_element < 0:\n                W[:, i] = -W[:, i]\n\n    # Project data\n    projected = X @ W\n\n    # Round to four decimal places\n    projected_rounded = np.round(projected, 4)\n\n    # Convert to list of lists\n    return projected_rounded.tolist()\n```"}
{"task_id": 129, "completion_id": 0, "completion": "```python\nfrom itertools import islice, cycle\n\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    # Check for empty sequence or non-positive samples\n    if not sequence or samples <= 0:\n        return []\n\n    # Use itertools.cycle to create an infinite iterator over the sequence\n    # Use islice to take the first 'samples' elements\n    return list(islice(cycle(sequence), samples))\n```"}
{"task_id": 130, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # Filter transitions for the given (state, action) pair\n    filtered = [t for t in transitions if t[0] == state and t[1] == action]\n    \n    # If no such transitions, return empty list\n    if not filtered:\n        return []\n\n    # Count occurrences of each next_state\n    next_state_counts = Counter(t[3] for t in filtered)\n    total = sum(next_state_counts.values())\n\n    # Compute probabilities, round to 4 decimal places\n    result = []\n    for next_state in sorted(next_state_counts):\n        prob = round(next_state_counts[next_state] / total, 4)\n        result.append([next_state, prob])\n\n    return result\n```"}
{"task_id": 131, "completion_id": 0, "completion": "```python\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    # Check if uid is within valid range\n    if not (0 <= uid < len(_SHARED_SEQUENCES)):\n        return None\n\n    sequence = _SHARED_SEQUENCES[uid]\n\n    # Check if i is within valid range for the sequence\n    if not (-len(sequence) <= i < len(sequence)):\n        return None\n\n    # Return the element at position i\n    return sequence[i]\n```"}
{"task_id": 132, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    # Check if z is a scalar (int or float)\n    if isinstance(z, (int, float)):\n        return z\n    # Check if z is a NumPy ndarray\n    elif isinstance(z, np.ndarray):\n        return z\n    # For list or tuple, convert to NumPy ndarray\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    else:\n        # For any other types, attempt to convert to ndarray\n        return np.array(z)\n```"}
{"task_id": 133, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    try:\n        X_array = np.array(X_train)\n    except Exception:\n        # If conversion fails, return -1\n        return -1\n\n    # Validate indices: all should be in [0, vocab_length - 1]\n    if np.any(X_array < 0) or np.any(X_array >= vocab_length):\n        return -1\n\n    # Get shape\n    m, time_steps = X_array.shape\n\n    # Initialize a 3D array of zeros\n    one_hot = np.zeros((m, time_steps, vocab_length), dtype=int)\n\n    # Use advanced indexing to set the appropriate positions to 1\n    # For each sequence in batch, for each time step, set the index\n    for i in range(m):\n        for t in range(time_steps):\n            index = X_array[i, t]\n            one_hot[i, t, index] = 1\n\n    # Convert to nested list\n    return one_hot.tolist()\n```"}
{"task_id": 134, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    # Check if the list is empty\n    if not payoff_probs:\n        return (-1.0, -1)\n    \n    # Validate probabilities\n    for p in payoff_probs:\n        if not (0 <= p <= 1):\n            return (-1.0, -1)\n    \n    # Find the maximum probability\n    max_prob = max(payoff_probs)\n    # Find the smallest index with this maximum probability\n    best_index = payoff_probs.index(max_prob)\n    \n    return (max_prob, best_index)\n```"}
{"task_id": 135, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Performs OLS linear regression using the normal equation.\n       Returns predictions for X_test rounded to 4 decimal places,\n       or -1 if the matrix (X^T X) is singular.\"\"\"\n    \n    # Convert input lists to numpy arrays\n    X_train_np = np.array(X_train, dtype=float)\n    y_train_np = np.array(y_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    \n    # Add intercept term (column of ones)\n    intercept_column_train = np.ones((X_train_np.shape[0], 1))\n    X_train_aug = np.hstack((intercept_column_train, X_train_np))\n    \n    intercept_column_test = np.ones((X_test_np.shape[0], 1))\n    X_test_aug = np.hstack((intercept_column_test, X_test_np))\n    \n    # Compute X^T X\n    XtX = X_train_aug.T @ X_train_aug\n    \n    # Check if XtX is invertible\n    try:\n        XtX_inv = np.linalg.inv(XtX)\n    except np.linalg.LinAlgError:\n        # Matrix is singular\n        return -1\n    \n    # Compute coefficients: (X^T X)^(-1) X^T y\n    Xty = X_train_aug.T @ y_train_np\n    beta = XtX_inv @ Xty\n    \n    # Predict on test set\n    y_pred = X_test_aug @ beta\n    \n    # Round predictions to 4 decimal places\n    y_pred_rounded = [round(float(val), 4) for val in y_pred]\n    \n    return y_pred_rounded\n```"}
{"task_id": 136, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    # Step 1: Subtract the maximum value along the specified axis for numerical stability\n    z_max = np.max(z, axis=axis, keepdims=True)\n    shifted_z = z - z_max\n\n    # Step 2: Exponentiate the shifted values\n    exp_z = np.exp(shifted_z)\n\n    # Step 3: Divide by the sum of exponentials along the same axis\n    sum_exp_z = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_z = exp_z / sum_exp_z\n\n    # Step 4: Round to four decimal places\n    rounded_softmax = np.round(softmax_z, 4)\n\n    # Step 5: Convert to list\n    return rounded_softmax.tolist()\n```"}
{"task_id": 138, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    # Validate input lengths\n    if not y_true or not y_pred or len(y_true) != len(y_pred):\n        return -1\n\n    # Convert to numpy arrays for efficient comparison\n    y_true_np = np.array(y_true)\n    y_pred_np = np.array(y_pred)\n\n    # Count the number of matching elements\n    matches = np.sum(y_true_np == y_pred_np)\n\n    # Calculate accuracy\n    accuracy = matches / len(y_true)\n\n    # Round to four decimal places\n    return round(accuracy, 4)\n```"}
{"task_id": 139, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    # Convert input to a list if it's a numpy array for consistent processing\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    \n    result = []\n    for value in z:\n        # Compute tanh using the numerically stable formula\n        exp_neg_2z = np.exp(-2 * value)\n        tanh_value = (2 / (1 + exp_neg_2z)) - 1\n        # Round to four decimal places\n        result.append(round(tanh_value, 4))\n    return result\n```"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n\n    # Special case: 1x1 maze\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n\n    # Directions for movement: up, down, left, right\n    directions = [(-1,0), (1,0), (0,-1), (0,1)]\n\n    # Initialize fire_time grid with infinity\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n\n    # Find initial fire sources\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i,j))\n\n    # BFS for fire spread\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n\n    # Check if start or goal is on fire at time 0\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n\n    # BFS for agent movement\n    agent_queue = deque()\n    visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    # Start at (0,0) at time 0\n    agent_queue.append((0,0,0))\n    visited[0][0] = 0\n\n    while agent_queue:\n        x, y, time = agent_queue.popleft()\n\n        # If reached goal\n        if x == n-1 and y == n-1:\n            return time\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            nt = time + 1\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and visited[nx][ny] > nt:\n                    # Check if fire arrives after agent\n                    if fire_time[nx][ny] > nt:\n                        visited[nx][ny] = nt\n                        agent_queue.append((nx, ny, nt))\n    # If no path found\n    return -1\n```"}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    # Define a function to compute distances based on the selected metric\n    def compute_distance(a, b, metric_type):\n        if metric_type == 'euclidean':\n            # \u2113\u2082 distance\n            return np.linalg.norm(a - b)\n        elif metric_type == 'manhattan':\n            # \u2113\u2081 distance\n            return np.sum(np.abs(a - b))\n        elif metric_type == 'cosine':\n            # Cosine distance: 1 - cosine similarity\n            # To avoid division by zero, add a small epsilon\n            epsilon = 1e-10\n            a_norm = np.linalg.norm(a) + epsilon\n            b_norm = np.linalg.norm(b) + epsilon\n            cosine_similarity = np.dot(a, b) / (a_norm * b_norm)\n            return 1 - cosine_similarity\n        else:\n            # Fallback to Euclidean if unknown metric\n            return np.linalg.norm(a - b)\n\n    # Prepare an array to hold predictions\n    predictions = np.empty(X_test.shape[0], dtype=y_train.dtype)\n\n    # For each test sample, compute distances to all training samples\n    for i, test_sample in enumerate(X_test):\n        distances = np.array([compute_distance(test_sample, train_sample, metric) for train_sample in X_train])\n        # Find indices of the k smallest distances\n        neighbor_indices = np.argpartition(distances, k)[:k]\n        # Get the labels of the k nearest neighbors\n        neighbor_labels = y_train[neighbor_indices]\n        # Count the occurrences of each label\n        labels, counts = np.unique(neighbor_labels, return_counts=True)\n        # Find the label(s) with the maximum count\n        max_count = np.max(counts)\n        candidate_labels = labels[counts == max_count]\n        # In case of tie, select the smallest label\n        predicted_label = np.min(candidate_labels)\n        predictions[i] = predicted_label\n\n    return predictions\n```"}
{"task_id": 143, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    # Convert input to numpy array if necessary\n    x = np.asarray(x)\n\n    if not derivative:\n        # Forward pass: activation\n        return np.where(x >= 0, x, alpha * x)\n    else:\n        # Derivative\n        return np.where(x >= 0, 1, alpha)\n```"}
{"task_id": 144, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    \n    # Check if shapes are the same\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    \n    # Calculate MAE\n    mae = np.mean(np.abs(actual_arr - predicted_arr))\n    \n    # Return rounded result\n    return round(mae, 4)\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    # Define a small epsilon to avoid division by zero in cosine\n    epsilon = 1e-12\n\n    # Number of training samples\n    n_train = X.shape[0]\n\n    # Adjust k if it exceeds number of training samples\n    k = min(k, n_train)\n\n    predictions = []\n\n    for test_sample in X_test:\n        # Compute distances based on the selected metric\n        if metric == 'euclidean':\n            # Euclidean distance: sqrt(sum((x - y)^2))\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            # Manhattan distance: sum of absolute differences\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            # Cosine distance: 1 - (x \u00b7 y) / (||x|| * ||y||)\n            # Compute dot product\n            dot_products = np.dot(X, test_sample)\n            # Compute norms\n            X_norms = np.linalg.norm(X, axis=1)\n            test_norm = np.linalg.norm(test_sample)\n            denom = (X_norms * test_norm) + epsilon\n            cosine_sim = dot_products / denom\n            # Convert similarity to distance\n            distances = 1 - cosine_sim\n        else:\n            raise ValueError(\"Unsupported metric. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n\n        # Get indices of the k closest neighbors\n        neighbor_indices = np.argsort(distances)[:k]\n\n        # Get the labels of the neighbors\n        neighbor_labels = y[neighbor_indices]\n\n        # Count the occurrences of each label\n        labels, counts = np.unique(neighbor_labels, return_counts=True)\n\n        # Find the label(s) with the maximum count\n        max_count = np.max(counts)\n        candidate_labels = labels[counts == max_count]\n\n        # In case of tie, select the smallest label\n        predicted_label = np.min(candidate_labels)\n\n        predictions.append(predicted_label)\n\n    return predictions\n```"}
{"task_id": 147, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n\n    # Check for single class in training data\n    unique_classes = np.unique(y_train)\n    if unique_classes.size == 1:\n        # If only one class present, predict that class for all test samples\n        return [int(unique_classes[0])] * X_test.shape[0]\n\n    n_samples, n_features = X_train.shape\n\n    # Initialize weights and bias\n    w = np.zeros(n_features)\n    b = 0.0\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Gradient descent\n    for _ in range(epochs):\n        # Linear combination\n        z = np.dot(X_train, w) + b\n        # Predicted probabilities\n        y_pred = sigmoid(z)\n\n        # Compute gradients\n        error = y_pred - y_train\n        dw = np.dot(X_train.T, error) / n_samples\n        db = np.sum(error) / n_samples\n\n        # Update weights and bias\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Prediction on test set\n    z_test = np.dot(X_test, w) + b\n    probs = sigmoid(z_test)\n    # Threshold at 0.5\n    predictions = (probs >= 0.5).astype(int)\n\n    return predictions.tolist()\n```"}
{"task_id": 148, "completion_id": 0, "completion": "```python\nfrom typing import List, Union\n\ndef exp_smoothing(data: List[float], alpha: float) -> Union[List[float], int]:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Validate input\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n\n    smoothed = []\n    s_prev = data[0]  # s_0 = x_0\n    smoothed.append(round(s_prev, 4))\n    for x in data[1:]:\n        s_k = (1 - alpha) * s_prev + alpha * x\n        smoothed.append(round(s_k, 4))\n        s_prev = s_k\n\n    return smoothed\n```"}
{"task_id": 150, "completion_id": 0, "completion": "```python\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    if not grid or not grid[0]:\n        return -1\n\n    m, n = len(grid), len(grid[0])\n    start = (0, 0)\n    goal = (m - 1, n - 1)\n\n    # If start or goal is blocked, no path exists\n    if grid[0][0] == 1 or grid[m - 1][n - 1] == 1:\n        return -1\n\n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Heuristic function: Manhattan distance\n    def heuristic(r, c):\n        return abs(r - goal[0]) + abs(c - goal[1])\n\n    # Priority queue: elements are tuples (f_score, g_score, (row, col), parent)\n    # parent will be used to reconstruct the path\n    open_set = []\n    heappush(open_set, (heuristic(0, 0), 0, (0, 0), None))\n\n    # For tracking visited nodes and their best g_score\n    g_scores = [[float('inf')] * n for _ in range(m)]\n    g_scores[0][0] = 0\n\n    # For path reconstruction\n    came_from = dict()\n\n    while open_set:\n        f_score, g_score, current, parent = heappop(open_set)\n        r, c = current\n\n        # If we reached the goal, reconstruct path\n        if current == goal:\n            path = []\n            while current is not None:\n                path.append(current)\n                current = came_from.get(current)\n            return path[::-1]  # reverse to get path from start to goal\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < m and 0 <= nc < n:\n                if grid[nr][nc] == 0:\n                    tentative_g = g_score + 1\n                    if tentative_g < g_scores[nr][nc]:\n                        g_scores[nr][nc] = tentative_g\n                        f = tentative_g + heuristic(nr, nc)\n                        heappush(open_set, (f, tentative_g, (nr, nc), current))\n                        came_from[(nr, nc)] = current\n\n    # No path found\n    return -1\n```"}
{"task_id": 151, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Compute sigmoid activation and its gradient.\"\"\"\n    A = 1 / (1 + np.exp(-x))\n    A = np.round(A, 4)\n    # Derivative: sigmoid(x) * (1 - sigmoid(x))\n    grad = A * (1 - A)\n    grad = np.round(grad, 4)\n    return A, grad\n\ndef tanh(x: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Compute tanh activation and its gradient.\"\"\"\n    A = np.tanh(x)\n    A = np.round(A, 4)\n    # Derivative: 1 - tanh^2(x)\n    grad = 1 - A ** 2\n    grad = np.round(grad, 4)\n    return A, grad\n\ndef relu(x: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Compute ReLU activation and its gradient.\"\"\"\n    A = np.maximum(0, x)\n    A = np.round(A, 4)\n    # Derivative: 1 where x > 0, else 0\n    grad = np.where(x > 0, 1, 0)\n    grad = np.round(grad, 4)\n    return A, grad\n\ndef softmax(x: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Compute softmax activation and its gradient.\"\"\"\n    # Numerically stable softmax\n    shift_x = x - np.max(x, axis=-1, keepdims=True)\n    exp_x = np.exp(shift_x)\n    sum_exp = np.sum(exp_x, axis=-1, keepdims=True)\n    A = exp_x / sum_exp\n    A = np.round(A, 4)\n    # For softmax, the Jacobian is complex, but at this stage, we return ones\n    grad = np.ones_like(A)\n    return A, grad\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as\n        `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                      derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    activation = activation.lower()\n    if activation == \"sigmoid\":\n        A, local_grad = sigmoid(X)\n    elif activation == \"tanh\":\n        A, local_grad = tanh(X)\n    elif activation == \"relu\":\n        A, local_grad = relu(X)\n    elif activation == \"softmax\":\n        A, local_grad = softmax(X)\n    else:\n        raise ValueError(f\"Unsupported activation: {activation}\")\n\n    # Element-wise multiplication with upstream gradient\n    grad = upstream_grad * local_grad\n    grad = np.round(grad, 4)\n    return A, grad\n```"}
{"task_id": 152, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check for length mismatch or empty arrays\n    if y_true.shape != y_pred.shape or y_true.size == 0:\n        return -1\n    \n    # Calculate number of correct predictions\n    correct = np.sum(y_true == y_pred)\n    \n    # Calculate accuracy\n    accuracy = correct / y_true.size\n    \n    # Return rounded accuracy\n    return round(accuracy, 4)\n```"}
{"task_id": 154, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (m_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Convert 1D inputs to 2D\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    \n    # Compute squared norms of each row in X and Y\n    X_norms = np.sum(X**2, axis=1).reshape(-1, 1)  # shape (n_samples, 1)\n    Y_norms = np.sum(Y**2, axis=1).reshape(1, -1)  # shape (1, m_samples)\n    \n    # Compute pairwise squared Euclidean distances\n    # Using the formula: ||x - y||^2 = ||x||^2 + ||y||^2 - 2 * x\u00b7y\n    distances = X_norms + Y_norms - 2 * np.dot(X, Y.T)\n    \n    # Apply the RBF kernel formula\n    K = np.exp(-gamma * distances)\n    \n    # Round to 6 decimal places\n    K_rounded = np.round(K, 6)\n    \n    # Convert to nested list\n    return K_rounded.tolist()\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array if it's a list\n    x = np.array(state)\n\n    # First layer affine transformation + ReLU\n    z1 = np.dot(x, weights['W1']) + weights['b1']\n    a1 = np.maximum(z1, 0)  # ReLU\n\n    # Second layer affine transformation + ReLU\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(z2, 0)  # ReLU\n\n    # Output layer affine transformation + tanh\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n\n    # Round each component to 4 decimal places and convert to list\n    return [round(val, 4) for val in action]\n```"}
{"task_id": 157, "completion_id": 0, "completion": "```python\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    # Check if lengths are different\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # If both are empty, return 0\n    if len(y_true) == 0:\n        return 0\n\n    # Count matches\n    matches = sum(1 for true_label, pred_label in zip(y_true, y_pred) if true_label == pred_label)\n\n    # Calculate accuracy\n    accuracy = matches / len(y_true)\n\n    # Return rounded to 4 decimal places\n    return round(accuracy, 4)\n```"}
{"task_id": 158, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # Add intercept term if required\n    if fit_intercept:\n        intercept_column = np.ones((X_np.shape[0], 1))\n        X_np = np.hstack((intercept_column, X_np))\n    \n    # Compute X^T X and X^T y\n    XtX = X_np.T @ X_np\n    Xty = X_np.T @ y_np\n\n    # Initialize regularization matrix A\n    M = X_np.shape[1]\n    A = np.zeros((M, M))\n    if fit_intercept:\n        # Do not regularize the intercept term\n        A[1:, 1:] = alpha * np.eye(M - 1)\n    else:\n        A = alpha * np.eye(M)\n\n    # Compute the closed-form solution\n    beta = np.linalg.inv(XtX + A) @ Xty\n\n    # Round coefficients to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n\n    # Convert to list and return\n    return beta_rounded.tolist()\n```"}
{"task_id": 159, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    # Compute the difference vector\n    diff = x_i - mu\n\n    # Obtain the sign and log determinant of sigma for numerical stability\n    sign, logdet = np.linalg.slogdet(sigma)\n    if sign != 1:\n        raise ValueError(\"Covariance matrix must be positive definite.\")\n\n    d = x_i.shape[0]\n\n    # Solve for the quadratic form: \u03a3\u207b\u00b9(x - \u03bc) without explicit inversion\n    sol = np.linalg.solve(sigma, diff)\n    quadratic_form = np.dot(diff, sol)\n\n    # Compute the log probability\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + logdet + quadratic_form)\n\n    # Return rounded to 4 decimal places\n    return round(log_prob, 4)\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    m, n = X.shape\n\n    # Add intercept column\n    if fit_intercept:\n        X_intercept = np.ones((m, 1))\n        X = np.hstack((X_intercept, X))\n        # The first column is the intercept; do not penalize it\n        penalized_indices = np.arange(1, n + 1)\n    else:\n        # Add a column of zeros for intercept (not penalized)\n        X_intercept = np.zeros((m, 1))\n        X = np.hstack((X_intercept, X))\n        penalized_indices = np.arange(1, n + 1)  # same as above, but no penalty on first\n\n    n += 1  # Updated number of features including intercept\n\n    # Initialize weights\n    w = np.zeros(n)\n    b = 0.0  # intercept\n\n    # Precompute sum of squares for each feature (column)\n    X_squared_sum = np.sum(X ** 2, axis=0)\n\n    for iteration in range(max_iters):\n        # Compute residuals\n        residual = y - X @ w\n\n        # If fitting intercept, update it as mean residual\n        if fit_intercept:\n            b = np.mean(residual)\n            residual = residual - b  # adjust residuals after updating intercept\n\n        # Coordinate descent over each feature (excluding intercept if fit_intercept)\n        for j in range(n):\n            if fit_intercept and j == 0:\n                # Do not penalize intercept\n                continue\n\n            # Temporarily set weight to zero\n            w_j_old = w[j]\n            w[j] = 0.0\n\n            # Compute partial residual for feature j\n            r_j = residual + X[:, j] * w_j_old\n\n            # Compute numerator: inner product of feature j and residual\n            a_j = np.dot(X[:, j], r_j)\n\n            # Soft-thresholding operator\n            tau = lambda_param * m\n            if a_j > tau:\n                w_j_new = (a_j - tau) / X_squared_sum[j]\n            elif a_j < -tau:\n                w_j_new = (a_j + tau) / X_squared_sum[j]\n            else:\n                w_j_new = 0.0\n\n            # Update residuals after changing w_j\n            delta_w = w_j_new - w[j]\n            residual -= X[:, j] * delta_w\n            w[j] = w_j_new\n\n    # Extract weights (excluding intercept)\n    weights = w[1:] if fit_intercept else w\n    bias = w[0] if fit_intercept else 0.0\n\n    # Round to 4 decimal places\n    weights_list = [round(wi, 4) for wi in weights]\n    bias = round(bias, 4)\n\n    return weights_list, bias\n```"}
{"task_id": 161, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predict binary labels for each sample in X using a second-order Factorization Machine.\n\n    Parameters:\n    - X: numpy.ndarray of shape (m, n), input feature matrix\n    - w0: float, global bias\n    - w: numpy.ndarray of shape (n,), linear weights\n    - V: numpy.ndarray of shape (n, k), latent factors\n\n    Returns:\n    - labels: list of length m, each element is either 1 or -1\n    \"\"\"\n    m, n = X.shape\n    k = V.shape[1]\n    labels = []\n\n    # Compute the linear part: w0 + X @ w\n    linear_part = w0 + X @ w  # shape: (m,)\n\n    # Compute the interaction part using the trick\n    # (X V): shape (m, k)\n    XV = X @ V  # shape: (m, k)\n\n    # (X V)^2: shape (m, k)\n    XV_squared = XV ** 2\n\n    # X^2: shape (m, n)\n    X_squared = X ** 2\n\n    # V^2: shape (n, k)\n    V_squared = V ** 2\n\n    # Compute (X^2) @ V^2: shape (m, k)\n    X2V2 = X_squared @ V_squared\n\n    # Interaction term for each sample: sum over f of ( (X V)_f^2 - (X^2 V^2)_f )\n    interaction = 0.5 * np.sum(XV_squared - X2V2, axis=1)  # shape: (m,)\n\n    # Final scores\n    scores = linear_part + interaction\n\n    # Assign labels based on the sign of the score\n    for score in scores:\n        label = 1 if score >= 0 else -1\n        labels.append(label)\n\n    return labels\n```"}
{"task_id": 162, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float = 1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    # Assert that shapes match\n    assert Y_hat.shape == Y.shape, \"Y_hat and Y must have the same shape.\"\n    \n    # Compute the cross-entropy loss\n    # Add epsilon to Y_hat to avoid log(0)\n    log_probs = np.log(Y_hat + epsilon)\n    # Element-wise multiplication with Y (one-hot), then sum over classes\n    sample_losses = -np.sum(Y * log_probs, axis=1)\n    # Compute mean loss over batch\n    loss = np.mean(sample_losses)\n    \n    # Compute gradient\n    m = Y.shape[0]\n    gradient = (Y_hat - Y) / m\n    \n    # Round loss and gradient entries to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    \n    return loss_rounded, gradient_rounded\n```"}
{"task_id": 163, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n\n    # Convert input lists to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(X)\n\n    # 1. Expand X into polynomial features (including bias term)\n    # Shape: (n_samples, degree + 1)\n    X_poly = np.vstack([X**d for d in range(degree + 1)]).T\n\n    # Initialize coefficients beta\n    beta = np.zeros(degree + 1)\n\n    # 2. Fit the model\n    if l1_ratio == 0:\n        # Pure Ridge: solve analytically\n        # Regularization matrix: lambda * I, but do not penalize bias term (beta[0])\n        # So, create a diagonal matrix with 0 for bias, reg_factor for others\n        reg_matrix = reg_factor * np.eye(degree + 1)\n        reg_matrix[0, 0] = 0  # Do not penalize bias term\n\n        # Normal equation: (X^T X + reg_matrix) beta = X^T y\n        A = X_poly.T @ X_poly + reg_matrix\n        b = X_poly.T @ y\n        beta = np.linalg.solve(A, b)\n    else:\n        # Elastic Net with gradient descent\n        for _ in range(n_iterations):\n            # Predictions\n            y_pred = X_poly @ beta\n            # Residuals\n            residuals = y_pred - y\n            # Gradient of MSE part\n            grad = (2 / n_samples) * (X_poly.T @ residuals)\n\n            # Initialize sub-gradient for L1\n            sub_grad_l1 = np.zeros_like(beta)\n            # For coefficients except bias (beta[0])\n            for j in range(1, len(beta)):\n                if beta[j] > 0:\n                    sub_grad_l1[j] = 1\n                elif beta[j] < 0:\n                    sub_grad_l1[j] = -1\n                else:\n                    sub_grad_l1[j] = 0  # At zero, sub-gradient can be any value in [-1,1], choose 0\n\n            # Gradient of L2 part\n            grad_l2 = (1 - l1_ratio) * beta\n\n            # Total gradient\n            total_grad = grad + reg_factor * (l1_ratio * sub_grad_l1 + (1 - l1_ratio) * beta)\n\n            # Update coefficients\n            beta -= learning_rate * total_grad\n\n    # 3. Make predictions on original X\n    y_pred_final = (X_poly @ beta).round(4)\n\n    return y_pred_final.tolist()\n```"}
{"task_id": 164, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Computes the binary classification log-loss (cross-entropy loss) for given actual labels and predicted probabilities.\n    The predicted probabilities are first clipped to the interval [1e-15, 1 - 1e-15] to avoid log(0).\n    The function returns the average log-loss rounded to six decimal places.\n    \n    Parameters:\n    actual (list or array-like): List or array of true labels (0 or 1).\n    predicted (list or array-like): List or array of predicted probabilities (floats in [0, 1]).\n    \n    Returns:\n    float: The average log-loss rounded to six decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Clip predicted probabilities to avoid log(0)\n    predicted_clipped = np.clip(predicted, epsilon, 1 - epsilon)\n    \n    # Compute the log-loss for each sample\n    log_losses = - (actual * np.log(predicted_clipped) + (1 - actual) * np.log(1 - predicted_clipped))\n    \n    # Compute the mean log-loss\n    mean_log_loss = np.mean(log_losses)\n    \n    # Return rounded to six decimal places\n    return round(mean_log_loss, 6)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n\n    # Check if lengths are equal\n    if x_arr.shape != y_arr.shape:\n        return -1\n\n    # Compute the number of differing elements\n    differences = np.sum(x_arr != y_arr)\n\n    # Calculate normalized Hamming distance\n    N = x_arr.size\n    distance = differences / N\n\n    # Return rounded to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 166, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int = 1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    # Initialize weights and bias\n    w = np.zeros(X_train.shape[1])\n    b = 0\n\n    for _ in range(max_iter):\n        errors = 0\n        for x_i, y_i in zip(X_train, y_train):\n            m = y_i * (np.dot(w, x_i) + b)\n            if m <= 0:\n                # Misclassified, update weights and bias\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        # If no errors in this pass, convergence achieved\n        if errors == 0:\n            break\n\n    # Compute scores for test data\n    scores = np.dot(X_test, w) + b\n    # Assign labels: sign of score, with 0 mapped to +1\n    predictions = [1 if s >= 0 else -1 for s in scores]\n    return predictions\n```"}
{"task_id": 167, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # Clip y_hat to avoid log(0)\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = y.shape[0]\n    \n    # Compute the BCE loss\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    \n    # Compute the gradient\n    gradient = (y_hat_clipped - y) / m\n    \n    # Round the loss and gradient components to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    \n    return loss_rounded, gradient_rounded\n```"}
{"task_id": 168, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    import numpy as np\n\n    # Convert lists to numpy arrays for easier computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    # Get unique classes\n    classes = np.unique(y_train_np)\n\n    # Initialize dictionaries to hold class prior, means, and variances\n    class_priors = {}\n    means = {}\n    variances = {}\n\n    # Small value to add to variances to avoid division by zero\n    epsilon = 1e-6\n\n    # Compute parameters for each class\n    for c in classes:\n        # Select samples belonging to class c\n        X_c = X_train_np[y_train_np == c]\n        # Compute prior probability P(c)\n        class_priors[c] = X_c.shape[0] / X_train_np.shape[0]\n        # Compute mean and variance for each feature\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + epsilon  # add epsilon to avoid zero variance\n\n    predictions = []\n\n    # For each test sample, compute log-probabilities for each class\n    for x in X_test_np:\n        log_probs = {}\n        for c in classes:\n            # Compute log prior\n            log_prior = np.log(class_priors[c])\n            # Compute Gaussian log likelihood for each feature\n            # Using the formula: -0.5 * log(2\u03c0\u03c3\u00b2) - (x - \u03bc)\u00b2 / (2\u03c3\u00b2)\n            # Sum over features\n            mu = means[c]\n            var = variances[c]\n            # Compute the log of the Gaussian density for each feature\n            log_likelihood = -0.5 * np.log(2 * np.pi * var) - ((x - mu) ** 2) / (2 * var)\n            total_log_likelihood = np.sum(log_likelihood)\n            # Total log probability for class c\n            log_probs[c] = log_prior + total_log_likelihood\n        # Predict the class with the highest log probability\n        predicted_class = max(log_probs, key=log_probs.get)\n        predictions.append(predicted_class)\n\n    return predictions\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Validate N\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # Handle the special case N=1\n    if N == 1:\n        return [1.0]\n    \n    # Generate array of n values\n    n = np.arange(N)\n    # Compute the common factor\n    factor = 2 * np.pi / (N - 1)\n    \n    # Define window calculations\n    if window.lower() == \"hamming\":\n        # w[n] = 0.54 - 0.46 * cos(2\u03c0n/(N\u22121))\n        w = 0.54 - 0.46 * np.cos(factor * n)\n    elif window.lower() == \"hann\":\n        # w[n] = 0.5 - 0.5 * cos(2\u03c0n/(N\u22121))\n        w = 0.5 - 0.5 * np.cos(factor * n)\n    elif window.lower() == \"blackman_harris\":\n        # w[n] = a0 - a1 * cos(2\u03c0n/(N\u22121)) + a2 * cos(4\u03c0n/(N\u22121)) - a3 * cos(6\u03c0n/(N\u22121))\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = (a0\n             - a1 * np.cos(factor * n)\n             + a2 * np.cos(2 * factor * n)\n             - a3 * np.cos(3 * factor * n))\n    elif window.lower() == \"generalized_cosine\":\n        # Use provided coefficients\n        if coefficients is None:\n            raise ValueError(\"coefficients must be provided for generalized_cosine window.\")\n        # w[n] = sum_k a_k * cos(2\u03c0k n / (N-1))\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    # Round to 4 decimal places\n    w_rounded = [round(val, 4) for val in w]\n    return w_rounded\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n\n    # Convert lists to numpy arrays for easier computation\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train)\n\n    X_test = np.array(X_test, dtype=float)\n\n    # Handle the case where all training labels are identical\n    unique_labels = np.unique(y_train)\n    if unique_labels.size == 1:\n        # All labels are the same; predict the same label for all test samples\n        return [int(unique_labels[0])] * len(X_test)\n\n    # Map original labels to {0,1}\n    label_mapping = {}\n    label_mapping[unique_labels[0]] = 0\n    label_mapping[unique_labels[1]] = 1\n\n    y_mapped = np.array([label_mapping[label] for label in y_train])\n\n    # Store the inverse mapping for final predictions\n    inverse_mapping = {v: k for k, v in label_mapping.items()}\n\n    # Add intercept term (bias) to training and test data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Number of training samples\n    n_samples = X_train.shape[0]\n\n    # Number of batches per epoch\n    n_batches = int(np.ceil(n_samples / batch_size))\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Training loop\n    for epoch in range(epochs):\n        # Shuffle data at each epoch for better convergence\n        perm = np.random.permutation(n_samples)\n        X_shuffled = X_train[perm]\n        y_shuffled = y_mapped[perm]\n\n        for batch_idx in range(n_batches):\n            start_idx = batch_idx * batch_size\n            end_idx = min(start_idx + batch_size, n_samples)\n            X_batch = X_shuffled[start_idx:end_idx]\n            y_batch = y_shuffled[start_idx:end_idx]\n\n            # Compute predictions\n            z = np.dot(X_batch, weights)\n            preds = sigmoid(z)\n\n            # Compute gradient\n            error = preds - y_batch\n            gradient = np.dot(X_batch.T, error) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Make predictions on test set\n    probs = sigmoid(np.dot(X_test, weights))\n    predicted_labels = (probs >= 0.5).astype(int)\n\n    # Map predictions back to original labels\n    inverse_map = {v: k for k, v in label_mapping.items()}\n    final_predictions = [inverse_map[pred] for pred in predicted_labels]\n\n    return final_predictions\n```"}
{"task_id": 172, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    arr = np.array(z, dtype=float)\n\n    # Compute tanh of each element\n    tanh_vals = np.tanh(arr)\n\n    # Compute the derivative\n    deriv = 1 - tanh_vals**2\n\n    # Round to 4 decimal places\n    deriv_rounded = np.round(deriv, 4)\n\n    # Check if input was scalar\n    if np.isscalar(z):\n        return float(deriv_rounded)\n    else:\n        return deriv_rounded.tolist()\n```"}
{"task_id": 173, "completion_id": 0, "completion": "```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # Check if strings are of equal length\n    if len(candidate) != len(target):\n        return -1\n\n    # Calculate the sum of absolute differences\n    total_distance = 0\n    for c_char, t_char in zip(candidate, target):\n        total_distance += abs(ord(c_char) - ord(t_char))\n    return total_distance\n```"}
{"task_id": 174, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # To avoid log(0), clip predictions to a small positive value\n    epsilon = 1e-12\n    clipped_preds = np.clip(predictions, epsilon, 1.0)\n\n    # Calculate the cross-entropy loss\n    # For each sample, sum over classes: -sum(label * log(pred))\n    # Since labels are one-hot, this simplifies to -log(predicted probability of true class)\n    per_sample_loss = -np.sum(labels * np.log(clipped_preds), axis=1)\n    mean_loss = np.mean(per_sample_loss)\n\n    # Calculate accuracy\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n\n    # Round to 4 decimal places\n    return round(mean_loss, 4), round(accuracy, 4)\n```"}
{"task_id": 175, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a numpy array for consistent processing\n    weights_array = np.array(weights)\n    # Compute the sum of squares\n    sum_squares = np.sum(weights_array ** 2)\n    # Calculate the penalty\n    penalty = C * sum_squares\n    # Return rounded to 4 decimal places\n    return round(penalty, 4)\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"\n    Implements AdaBoost with decision stumps from scratch.\n    \n    Args:\n        X_train: List of feature vectors for training data.\n        y_train: List of labels (0 or 1) for training data.\n        X_test: List of feature vectors for test data.\n        n_estimators: Number of weak learners to use.\n        \n    Returns:\n        List of predicted labels (0 or 1) for X_test.\n    \"\"\"\n    # Convert labels from {0,1} to {-1,1} for convenience\n    y_train_signed = np.array([1 if y == 1 else -1 for y in y_train])\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    n_samples, n_features = X_train_np.shape\n    \n    # Initialize weights uniformly\n    w = np.ones(n_samples) / n_samples\n    \n    # Store the weak learners\n    learners = []\n    # Store the alpha (vote weight) for each learner\n    alphas = []\n    \n    for _ in range(n_estimators):\n        # Initialize variables to store the best stump\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_predictions = None\n        \n        # Iterate over all features\n        for feature_idx in range(n_features):\n            feature_values = X_train_np[:, feature_idx]\n            # Get all unique thresholds (candidate thresholds)\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions based on the current stump\n                    preds = np.ones(n_samples)\n                    if polarity == 1:\n                        preds[feature_values < threshold] = 1\n                        preds[feature_values >= threshold] = -1\n                    else:\n                        preds[feature_values >= threshold] = 1\n                        preds[feature_values < threshold] = -1\n                        \n                    # Compute weighted error\n                    misclassified = preds != y_train_signed\n                    error = np.sum(w * misclassified)\n                    \n                    # Check if this is the best stump so far\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_idx\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_predictions = preds\n                        \n        # If error is zero, perfect stump found, can stop early\n        if min_error == 0:\n            # Store the stump\n            learners.append({\n                'feature_index': best_feature,\n                'threshold': best_threshold,\n                'polarity': best_polarity\n            })\n            # Compute alpha\n            alpha = 0.5 * np.log((1 - min_error + 1e-10) / (min_error + 1e-10))\n            alphas.append(alpha)\n            break\n        \n        # Compute alpha for the selected stump\n        error_t = min_error\n        alpha_t = 0.5 * np.log((1 - error_t + 1e-10) / (error_t + 1e-10))\n        alphas.append(alpha_t)\n        # Store the stump parameters\n        learners.append({\n            'feature_index': best_feature,\n            'threshold': best_threshold,\n            'polarity': best_polarity\n        })\n        \n        # Update weights\n        # h_t(x_i) in {-1,1}\n        h_x = best_predictions\n        # Update rule\n        w = w * np.exp(-alpha_t * y_train_signed * h_x)\n        # Normalize weights\n        w /= np.sum(w)\n    \n    # Now, make predictions on X_test\n    final_scores = np.zeros(len(X_test))\n    for alpha, learner in zip(alphas, learners):\n        feature_idx = learner['feature_index']\n        threshold = learner['threshold']\n        polarity = learner['polarity']\n        feature_values = X_test_np[:, feature_idx]\n        preds = np.ones(len(X_test))\n        if polarity == 1:\n            preds[feature_values < threshold] = 1\n            preds[feature_values >= threshold] = -1\n        else:\n            preds[feature_values >= threshold] = 1\n            preds[feature_values < threshold] = -1\n        # Aggregate weighted votes\n        final_scores += alpha * preds\n    \n    # Convert final scores to {0,1}\n    y_pred = [1 if score >= 0 else 0 for score in final_scores]\n    return y_pred\n```"}
{"task_id": 177, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    arr = np.array(z)\n\n    # Compute exp(z) and exp(-z)\n    exp_z = np.exp(arr)\n    exp_neg_z = np.exp(-arr)\n\n    # Compute tanh(z) using the formula\n    tanh_vals = (exp_z - exp_neg_z) / (exp_z + exp_neg_z)\n\n    # Round to 4 decimal places\n    tanh_rounded = np.round(tanh_vals, 4)\n\n    # Check if input was scalar\n    if np.isscalar(z):\n        return float(tanh_rounded)\n    else:\n        return tanh_rounded.tolist()\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(n_dims, int) and n_dims > 0):\n        return -1\n    if not (isinstance(num_particles, int) and num_particles > 0):\n        return -1\n    if not (isinstance(num_iterations, int) and num_iterations > 0):\n        return -1\n\n    # Initialize RNG\n    rng = np.random.default_rng(seed)\n\n    # Define bounds\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # PSO parameters\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n\n    # Initialize particles' positions and velocities\n    positions = rng.uniform(low=lower_bound, high=upper_bound, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-abs(upper_bound - lower_bound), high=abs(upper_bound - lower_bound), size=(num_particles, n_dims))\n\n    # Initialize personal bests and their scores\n    p_best_positions = np.copy(positions)\n    p_best_scores = np.sum(p_best_positions**2, axis=1)\n\n    # Initialize global best\n    g_best_idx = np.argmin(p_best_scores)\n    g_best_position = p_best_positions[g_best_idx]\n    g_best_score = p_best_scores[g_best_idx]\n\n    for _ in range(num_iterations):\n        # Generate random coefficients\n        r1 = rng.random(size=(num_particles, n_dims))\n        r2 = rng.random(size=(num_particles, n_dims))\n\n        # Update velocities\n        velocities = (\n            w * velocities\n            + c1 * r1 * (p_best_positions - positions)\n            + c2 * r2 * (g_best_position - positions)\n        )\n\n        # Update positions\n        positions = positions + velocities\n        # Clip positions to bounds\n        positions = np.clip(positions, lower_bound, upper_bound)\n\n        # Evaluate current positions\n        scores = np.sum(positions**2, axis=1)\n\n        # Update personal bests\n        better_mask = scores < p_best_scores\n        p_best_positions[better_mask] = positions[better_mask]\n        p_best_scores[better_mask] = scores[better_mask]\n\n        # Update global best\n        current_g_best_idx = np.argmin(p_best_scores)\n        if p_best_scores[current_g_best_idx] < g_best_score:\n            g_best_score = p_best_scores[current_g_best_idx]\n            g_best_position = p_best_positions[current_g_best_idx]\n\n    # Return the best score found, rounded to 4 decimals\n    return round(g_best_score, 4)\n```"}
{"task_id": 179, "completion_id": 0, "completion": "```python\nimport re\nimport string\n\ndef tokenize_chars(line: str, lowercase: bool = True, filter_punctuation: bool = True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n\n    # Convert to lower-case if specified\n    if lowercase:\n        line = line.lower()\n\n    # Remove punctuation if specified\n    if filter_punctuation:\n        # Create a translation table for removing punctuation\n        translation_table = str.maketrans('', '', string.punctuation)\n        line = line.translate(translation_table)\n\n    # Collapse multiple spaces into a single space\n    line = re.sub(r'\\s{2,}', ' ', line)\n\n    # Remove leading and trailing spaces\n    line = line.strip()\n\n    # If the line is empty after preprocessing, return empty list\n    if not line:\n        return []\n\n    # Return list of characters\n    return list(line)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    n_train = len(X_train)\n    # Determine the number of neighbors to consider\n    if k <= 0 or k > n_train:\n        k = n_train\n\n    predictions = []\n\n    for test_point in X_test_np:\n        # Compute Euclidean distances to all training points\n        distances = np.linalg.norm(X_train_np - test_point, axis=1)\n        # Get indices of the k nearest neighbors\n        neighbor_indices = np.argpartition(distances, k - 1)[:k]\n        # Retrieve the neighbor targets\n        neighbor_targets = y_train_np[neighbor_indices]\n\n        if task == \"classification\":\n            # Count the frequency of each label\n            counter = Counter(neighbor_targets)\n            max_count = max(counter.values())\n            # Find all labels with the highest count (to handle ties)\n            candidates = [label for label, count in counter.items() if count == max_count]\n            # Return the smallest label among candidates\n            prediction = min(candidates)\n        elif task == \"regression\":\n            # Compute the mean of neighbor targets, rounded to 4 decimal places\n            mean_value = round(np.mean(neighbor_targets), 4)\n            prediction = mean_value\n        else:\n            raise ValueError(\"Invalid task type. Must be 'classification' or 'regression'.\")\n\n        predictions.append(prediction)\n\n    return predictions\n```"}
{"task_id": 181, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    predictions = []\n\n    # Convert training data to numpy array for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n\n    for test_point in X_test:\n        test_point_np = np.array(test_point)\n\n        # Compute Euclidean distances to all training points\n        distances = np.linalg.norm(X_train_np - test_point_np, axis=1)\n\n        # Find the indices of the k smallest distances\n        k_actual = min(k, len(X_train))\n        neighbor_indices = np.argpartition(distances, k_actual - 1)[:k_actual]\n\n        # Retrieve the neighbor targets\n        neighbor_targets = y_train_np[neighbor_indices]\n\n        if problem == 'classify':\n            # Count the frequency of each label\n            label_counts = Counter(neighbor_targets)\n            max_count = max(label_counts.values())\n            # Find all labels with the max count (to handle ties)\n            tied_labels = [label for label, count in label_counts.items() if count == max_count]\n            # Return the smallest label among the tied labels\n            prediction = sorted(tied_labels)[0]\n            predictions.append(prediction)\n        elif problem == 'regress':\n            # Compute the mean of neighbor targets\n            mean_value = np.mean(neighbor_targets)\n            # Round to 4 decimal places\n            predictions.append(round(mean_value, 4))\n        else:\n            raise ValueError(\"Invalid problem type. Choose 'classify' or 'regress'.\")\n\n    return predictions\n```"}
{"task_id": 182, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Computes the polynomial kernel matrix between two datasets X and Y.\n\n    Parameters:\n    - X: 2D list or numpy array of shape (n_samples_X, n_features)\n    - Y: 2D list or numpy array of shape (n_samples_Y, n_features)\n    - degree: positive integer, degree of the polynomial kernel (default 2)\n\n    Returns:\n    - A nested list representing the kernel matrix with entries rounded to 4 decimal places,\n      or -1 if input validation fails.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier processing\n    try:\n        X_np = np.array(X)\n        Y_np = np.array(Y)\n    except Exception:\n        return -1\n\n    # Validate that inputs are 2D\n    if X_np.ndim != 2 or Y_np.ndim != 2:\n        return -1\n\n    # Validate that the number of features match\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n\n    # Validate that degree is a positive integer >= 1\n    if not (isinstance(degree, int) and degree >= 1):\n        return -1\n\n    # Compute the kernel matrix\n    # Dot product between each pair of samples\n    dot_product = X_np @ Y_np.T\n\n    # Compute (X_i \u00b7 Y_j)^degree\n    kernel_matrix = np.power(dot_product, degree)\n\n    # Round to 4 decimal places\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n\n    # Convert to nested list\n    return kernel_matrix_rounded.tolist()\n```"}
{"task_id": 183, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Convert shape to a tuple if it's a list\n    shape = tuple(weight_shape)\n\n    # Determine fan_in based on the shape\n    if len(shape) == 2:\n        # Dense layer: shape = (n_in, n_out)\n        fan_in = shape[0]\n    elif len(shape) == 4:\n        # Conv2D layer: shape = (fW, fH, in_channels, out_channels)\n        fW, fH, in_channels, _ = shape\n        fan_in = fW * fH * in_channels\n    else:\n        # For safety, though per instructions, other shapes are out of scope\n        raise ValueError(\"Shape must be of length 2 or 4.\")\n\n    # Calculate the limit for uniform distribution\n    limit = np.sqrt(6.0 / fan_in)\n\n    # Generate the weights uniformly in [-limit, limit]\n    weights = np.random.uniform(low=-limit, high=limit, size=shape)\n\n    return weights\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class Node:\n        def __init__(self, indices, depth):\n            self.indices = indices  # indices of samples at this node\n            self.depth = depth\n            self.is_leaf = False\n            self.prediction = None\n            self.feature_index = None\n            self.threshold = None\n            self.left = None\n            self.right = None\n\n    def gini_impurity(y):\n        \"\"\"Compute Gini impurity for labels y.\"\"\"\n        if len(y) == 0:\n            return 0.0\n        classes, counts = np.unique(y, return_counts=True)\n        probs = counts / counts.sum()\n        return 1.0 - np.sum(probs ** 2)\n\n    def best_split(X, y, indices):\n        \"\"\"Find the best split for data at current node.\"\"\"\n        n_samples, n_features = X.shape\n        parent_gini = gini_impurity(y[indices])\n        best_gain = 0.0\n        best_feature = None\n        best_threshold = None\n\n        for feature_idx in range(n_features):\n            # Extract feature values for current samples\n            feature_values = X[indices, feature_idx]\n            # Sort samples by feature\n            sorted_idx = np.argsort(feature_values)\n            sorted_values = feature_values[sorted_idx]\n            sorted_y = y[indices][sorted_idx]\n\n            # Evaluate midpoints between consecutive different feature values\n            for i in range(1, len(sorted_values)):\n                if sorted_values[i] == sorted_values[i - 1]:\n                    continue  # skip identical values\n                threshold = (sorted_values[i] + sorted_values[i - 1]) / 2\n\n                # Split samples\n                left_mask = sorted_values <= threshold\n                right_mask = ~left_mask\n\n                left_indices = indices[sorted_idx][left_mask]\n                right_indices = indices[sorted_idx][right_mask]\n\n                # Skip if one child is empty\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n\n                # Compute Gini for children\n                gini_left = gini_impurity(y[left_indices])\n                gini_right = gini_impurity(y[right_indices])\n\n                # Compute weighted Gini\n                n_left = len(left_indices)\n                n_right = len(right_indices)\n                weighted_gini = (n_left * gini_left + n_right * gini_right) / (n_left + n_right)\n\n                # Compute Gini gain\n                gain = parent_gini - weighted_gini\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n\n        return best_feature, best_threshold, best_gain\n\n    def build_tree(node, X, y, depth):\n        \"\"\"Recursively build the decision tree.\"\"\"\n        # Check stopping conditions\n        node_labels = y[node.indices]\n        unique_labels = np.unique(node_labels)\n\n        # If all labels are the same, create a leaf\n        if len(unique_labels) == 1:\n            node.is_leaf = True\n            node.prediction = unique_labels[0]\n            return\n\n        # If max_depth is reached\n        if max_depth is not None and depth >= max_depth:\n            node.is_leaf = True\n            # Majority class\n            counts = np.bincount(node_labels)\n            node.prediction = np.argmax(counts)\n            return\n\n        # Find the best split\n        feature_idx, threshold, gain = best_split(X, y, node.indices)\n\n        # If no gain, create a leaf with majority class\n        if gain == 0 or feature_idx is None:\n            node.is_leaf = True\n            counts = np.bincount(node_labels)\n            node.prediction = np.argmax(counts)\n            return\n\n        # Perform split\n        feature_values = X[node.indices, feature_idx]\n        left_mask = feature_values <= threshold\n        right_mask = ~left_mask\n\n        left_indices = node.indices[left_mask]\n        right_indices = node.indices[right_mask]\n\n        # If any child is empty, create a leaf with majority class\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            node.is_leaf = True\n            counts = np.bincount(node_labels)\n            node.prediction = np.argmax(counts)\n            return\n\n        # Set current node's split info\n        node.feature_index = feature_idx\n        node.threshold = threshold\n\n        # Create child nodes\n        node.left = Node(left_indices, depth + 1)\n        node.right = Node(right_indices, depth + 1)\n\n        # Recursively build children\n        build_tree(node.left, X, y, depth + 1)\n        build_tree(node.right, X, y, depth + 1)\n\n    def predict_sample(node, x):\n        \"\"\"Predict label for a single sample.\"\"\"\n        while not node.is_leaf:\n            if x[node.feature_index] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.prediction\n\n    # Build the tree\n    n_samples = X_train.shape[0]\n    root = Node(np.arange(n_samples), depth=0)\n    build_tree(root, X_train, y_train, depth=0)\n\n    # Predict for each sample in X_test\n    predictions = [predict_sample(root, x) for x in X_test]\n    return predictions\n```"}
{"task_id": 185, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    # Convert X to a numpy ndarray if it isn't already\n    X = np.asarray(X)\n\n    # Check if X is empty\n    if X.size == 0:\n        raise ValueError(\"Got an empty matrix.\")\n\n    # Handle 1D array: treat as a single sample\n    if X.ndim == 1:\n        n_samples = 1\n        n_features = X.shape[0]\n    else:\n        # For ND array with ndim >= 2\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    \n    return (n_samples, n_features)\n```"}
{"task_id": 186, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    # Convert y_train to a numpy array for consistent operations\n    y_train = np.array(y_train)\n    # Compute the mean of y_train\n    mean_value = np.mean(y_train)\n    # Round the mean to 4 decimal places\n    rounded_mean = round(mean_value, 4)\n    # Determine the number of test samples\n    m_samples = len(X_test)\n    # Return a list with the rounded mean repeated for each test sample\n    return [rounded_mean] * m_samples\n```"}
{"task_id": 188, "completion_id": 0, "completion": "```python\nimport math\n\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    # Validate inputs\n    if not (0 <= min_epsilon < max_epsilon):\n        return -1\n    if not (decay_rate > 0):\n        return -1\n    if not (step >= 0):\n        return -1\n\n    # Compute epsilon(t) using the exponential decay formula\n    epsilon = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n\n    # Clip the value to ensure it doesn't go below min_epsilon due to numerical underflow\n    epsilon = max(epsilon, min_epsilon)\n\n    # Return rounded to 4 decimal places\n    return round(epsilon, 4)\n```"}
{"task_id": 189, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef batch_resample(X, new_dim, mode=\"bilinear\"):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    n_ex, in_rows, in_cols, in_channels = X.shape\n    out_rows, out_cols = new_dim\n\n    # Generate coordinate grid for output image\n    # Coordinates are normalized to [0, 1]\n    def get_source_coords(out_size, in_size):\n        # Generate equally spaced points in [0, in_size - 1]\n        return np.linspace(0, in_size - 1, out_size)\n\n    src_x = get_source_coords(out_cols, in_cols)\n    src_y = get_source_coords(out_rows, in_rows)\n\n    # For each output pixel, find corresponding source coordinate\n    # Create meshgrid for source coordinates\n    grid_x, grid_y = np.meshgrid(src_x, src_y)\n\n    # Initialize output array\n    output = np.zeros((n_ex, out_rows, out_cols, in_channels), dtype=np.float64)\n\n    for idx in range(n_ex):\n        for c in range(in_channels):\n            img = X[idx, :, :, c]\n\n            if mode == \"neighbor\":\n                # Nearest neighbor interpolation\n                # Round source coords to nearest integer\n                src_x_nn = np.round(grid_x).astype(int)\n                src_y_nn = np.round(grid_y).astype(int)\n\n                # Clip to valid indices\n                src_x_nn = np.clip(src_x_nn, 0, in_cols - 1)\n                src_y_nn = np.clip(src_y_nn, 0, in_rows - 1)\n\n                # Map source pixels to output\n                output[idx, :, :, c] = img[src_y_nn, src_x_nn]\n\n            elif mode == \"bilinear\":\n                # Bilinear interpolation\n                # Get the integer parts\n                x0 = np.floor(grid_x).astype(int)\n                y0 = np.floor(grid_y).astype(int)\n\n                # Get the fractional parts\n                dx = grid_x - x0\n                dy = grid_y - y0\n\n                # Clip indices to be within valid range\n                x0_clipped = np.clip(x0, 0, in_cols - 1)\n                y0_clipped = np.clip(y0, 0, in_rows - 1)\n                x1_clipped = np.clip(x0 + 1, 0, in_cols - 1)\n                y1_clipped = np.clip(y0 + 1, 0, in_rows - 1)\n\n                # Gather four neighboring pixels\n                top_left = img[y0_clipped, x0_clipped]\n                top_right = img[y0_clipped, x1_clipped]\n                bottom_left = img[y1_clipped, x0_clipped]\n                bottom_right = img[y1_clipped, x1_clipped]\n\n                # Interpolate along x\n                top = top_left * (1 - dx) + top_right * dx\n                bottom = bottom_left * (1 - dx) + bottom_right * dx\n\n                # Interpolate along y\n                pixel = top * (1 - dy) + bottom * dy\n\n                output[idx, :, :, c] = pixel\n            else:\n                raise NotImplementedError(f\"Unrecognized resampling mode: {mode}\")\n\n    # Round to 4 decimal places\n    return np.round(output, 4)\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n\n    X = np.array(X)\n    y = np.array(y)\n\n    n_samples, n_features = X.shape\n\n    # Compute the Gini impurity of the whole dataset\n    def gini_impurity(labels):\n        _, counts = np.unique(labels, return_counts=True)\n        proportions = counts / counts.sum()\n        return 1 - np.sum(proportions ** 2)\n\n    G_whole = gini_impurity(y)\n\n    # If all labels are the same, no split is possible\n    if len(np.unique(y)) == 1:\n        return (-1, None, round(G_whole, 4))\n\n    best_feature = -1\n    best_threshold = None\n    best_gini = float('inf')\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n\n        # If all feature values are the same, skip\n        if len(unique_values) == 1:\n            continue\n\n        # Generate candidate thresholds: midpoints between sorted unique values\n        sorted_values = np.sort(unique_values)\n        candidate_thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n\n        for threshold in candidate_thresholds:\n            # Split data\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n\n            # Skip if either child is empty\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n\n            n_left = len(y_left)\n            n_right = len(y_right)\n            n_total = n_left + n_right\n\n            # Compute Gini for left and right nodes\n            def gini(node_labels):\n                _, counts = np.unique(node_labels, return_counts=True)\n                proportions = counts / counts.sum()\n                return 1 - np.sum(proportions ** 2)\n\n            G_left = gini(y_left)\n            G_right = gini(y_right)\n\n            # Compute weighted Gini\n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n\n            # Tie-breaking rules\n            if G_split + 1e-12 < best_gini:\n                best_gini = G_split\n                best_feature = feature_idx\n                best_threshold = threshold\n            elif abs(G_split - best_gini) < 1e-12:\n                # Same impurity, tie-break by feature index\n                if feature_idx < best_feature:\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                elif feature_idx == best_feature:\n                    # Same feature, tie-break by threshold\n                    if threshold < best_threshold:\n                        best_threshold = threshold\n\n    if best_feature == -1:\n        # No valid split found\n        return (-1, None, round(G_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    # Normalize the metric name to lowercase for case-insensitive matching\n    name = name.lower()\n\n    def validate_vectors(x, y):\n        # Check if both are list, tuple, or np.ndarray\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        # Convert to numpy arrays for easier processing\n        try:\n            x_arr = np.array(x, dtype=float)\n            y_arr = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        # Check if 1D\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return False\n        # Check non-empty\n        if x_arr.size == 0 or y_arr.size == 0:\n            return False\n        # Check same length\n        if x_arr.shape != y_arr.shape:\n            return False\n        return True\n\n    def euclidean(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        x_arr = np.array(x, dtype=float)\n        y_arr = np.array(y, dtype=float)\n        dist = np.sqrt(np.sum((x_arr - y_arr) ** 2))\n        return round(dist, 4)\n\n    def manhattan(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        x_arr = np.array(x, dtype=float)\n        y_arr = np.array(y, dtype=float)\n        dist = np.sum(np.abs(x_arr - y_arr))\n        return round(dist, 4)\n\n    def chebyshev(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        x_arr = np.array(x, dtype=float)\n        y_arr = np.array(y, dtype=float)\n        dist = np.max(np.abs(x_arr - y_arr))\n        return round(dist, 4)\n\n    def cosine(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        x_arr = np.array(x, dtype=float)\n        y_arr = np.array(y, dtype=float)\n        norm_x = np.linalg.norm(x_arr)\n        norm_y = np.linalg.norm(y_arr)\n        # For cosine distance, norms must be non-zero\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        dot_product = np.dot(x_arr, y_arr)\n        cosine_similarity = dot_product / (norm_x * norm_y)\n        # Cosine distance\n        dist = 1 - cosine_similarity\n        return round(dist, 4)\n\n    # Map metric names to functions\n    metrics_map = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    def distance_func(x, y):\n        if name not in metrics_map:\n            return -1\n        return metrics_map[name](x, y)\n\n    return distance_func\n```"}
{"task_id": 193, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    # Check if input is a scalar (int or float)\n    if isinstance(z, (int, float)):\n        result = z / (1 + abs(z))\n        return round(result, 4)\n    else:\n        # Convert input to a NumPy array for uniform processing\n        arr = np.array(z)\n        # Handle empty array\n        if arr.size == 0:\n            return []\n        # Compute Softsign element-wise\n        softsign_arr = arr / (1 + np.abs(arr))\n        # Round each element to 4 decimal places and convert to list\n        return [float(round(val, 4)) for val in softsign_arr]\n```"}
{"task_id": 194, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier computation\n    weights_np = np.array(weights, dtype=float)\n    grads_np = np.array(gradients, dtype=float)\n\n    # Initialize G if it's the first iteration\n    if G is None:\n        G_np = np.zeros_like(weights_np)\n    else:\n        G_np = np.array(G, dtype=float)\n\n    # Accumulate squared gradients\n    G_np += grads_np ** 2\n\n    # Compute adjusted learning rate for each parameter\n    adjusted_lr = learning_rate / (np.sqrt(G_np) + eps)\n\n    # Update weights\n    new_weights = weights_np - adjusted_lr * grads_np\n\n    # Round results to 6 decimal places\n    new_weights = np.round(new_weights, 6).tolist()\n    new_G = np.round(G_np, 6).tolist()\n\n    return new_weights, new_G\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n\n    # Initialize variables\n    n_actions_per_dim: List[Union[int, float]] = []\n    action_ids: Union[List[Tuple[int, ...]], None] = None\n    action_dim: int = 0\n\n    # Helper function to process a single sub-space\n    def process_subspace(space):\n        # Discrete space\n        if hasattr(space, 'n'):\n            return space.n, False  # number of actions, not continuous\n        # Continuous space\n        elif hasattr(space, 'shape'):\n            return np.inf, True\n        else:\n            raise ValueError(\"Unknown sub-space type.\")\n\n    # Determine the structure of the action space\n    if hasattr(env.action_space, 'spaces'):\n        # Multi-dimensional space with sub-spaces\n        sub_spaces = env.action_space.spaces\n        action_dim = len(sub_spaces)\n        for sub_space in sub_spaces:\n            n_actions, is_continuous = process_subspace(sub_space)\n            n_actions_per_dim.append(n_actions)\n            if is_continuous:\n                # If any dimension is continuous, set action_ids to None\n                action_ids = None\n        # If no continuous dimension, generate all possible actions\n        if action_ids is None:\n            # At least one dimension is continuous\n            pass\n        else:\n            # All dimensions are discrete, generate cartesian product\n            ranges = []\n            for n in n_actions_per_dim:\n                # For discrete, range(n)\n                ranges.append(range(n))\n            # Generate all combinations\n            action_ids = list(product(*ranges))\n    else:\n        # Single space\n        n_actions, is_continuous = process_subspace(env.action_space)\n        if md_action:\n            # Multi-dimensional space: treat as a list with one sub-space\n            action_dim = 1\n            n_actions_per_dim = [n_actions]\n            if is_continuous:\n                action_ids = None\n            else:\n                # Discrete, generate all actions\n                ranges = [range(n_actions)]\n                action_ids = list(product(*ranges))\n        else:\n            # Single-dimensional space\n            action_dim = 1\n            n_actions_per_dim = [n_actions]\n            if is_continuous:\n                action_ids = None\n            else:\n                # Discrete, generate all actions\n                action_ids = list(product(range(n_actions)))\n\n    # If the environment is multi-dimensional and not using env.action_space.spaces,\n    # but md_action is True, we assume the shape attribute\n    if hasattr(env.action_space, 'shape') and md_action:\n        shape = env.action_space.shape\n        action_dim = len(shape)\n        n_actions_per_dim = []\n        for dim_size in shape:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(int(dim_size))\n        if cont_action:\n            action_ids = None\n        else:\n            ranges = [range(int(size)) for size in shape]\n            action_ids = list(product(*ranges))\n    elif hasattr(env.action_space, 'shape') and not md_action:\n        # Single shape, treat as one-dimensional\n        shape = env.action_space.shape\n        action_dim = len(shape)\n        if cont_action:\n            n_actions_per_dim = [np.inf] * len(shape)\n            action_ids = None\n        else:\n            n_actions_per_dim = [int(s) for s in shape]\n            ranges = [range(int(s)) for s in shape]\n            action_ids = list(product(*ranges))\n    # Final check: if any dimension is continuous, ensure action_ids is None\n    if any(isinstance(n, float) and np.isinf(n) for n in n_actions_per_dim):\n        action_ids = None\n\n    return n_actions_per_dim, action_ids, action_dim\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine number of topics T from the shape of phi[0]\n    T = phi[0].shape[1]\n    \n    # Initialize the count matrix for \u03b2: shape (V, T)\n    beta_counts = np.zeros((V, T))\n    \n    # Accumulate counts over all documents and tokens\n    for d, doc in enumerate(corpus):\n        phi_d = phi[d]  # shape (N_d, T)\n        for n, w in enumerate(doc):\n            # Add the variational probabilities for token n in document d\n            beta_counts[w] += phi_d[n]\n    \n    # To avoid division by zero, handle columns with all zeros\n    # For columns with sum zero, leave the row as zeros\n    col_sums = beta_counts.sum(axis=0)\n    \n    # Normalize each column to sum to 1\n    # For columns with sum zero, keep zeros\n    for t in range(T):\n        if col_sums[t] > 0:\n            beta_counts[:, t] /= col_sums[t]\n        # else leave as zeros\n    \n    # Round to 4 decimal places\n    beta_rounded = np.round(beta_counts, 4)\n    \n    # Convert to list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```"}
{"task_id": 199, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    y_left = [label for feature, label in zip(X, y) if feature < value]\n    y_right = [label for feature, label in zip(X, y) if feature >= value]\n    return y_left, y_right\n```"}
{"task_id": 200, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a numpy array for easy flattening and summation\n    weights_array = np.array(weights)\n    # Sum of absolute values of all elements\n    total_abs_sum = np.sum(np.abs(weights_array))\n    # Compute the penalty\n    penalty = C * total_abs_sum\n    # Return rounded to 4 decimal places\n    return round(penalty, 4)\n```"}
{"task_id": 201, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-12\n\n    # If axis is None, treat entire tensor as a single vector\n    if axis is None:\n        # Compute the norm of the entire tensor\n        norm = np.linalg.norm(p)\n        # Compute the scaling factor\n        scale = min(1, m / (norm + epsilon))\n        # Scale the entire tensor\n        p_clipped = p * scale\n    else:\n        # Compute norms along the specified axis, keep dims for broadcasting\n        norms = np.linalg.norm(p, axis=axis, keepdims=True)\n        # Compute the scaling factors\n        scales = np.minimum(1, m / (norms + epsilon))\n        # Broadcast scales to match p's shape\n        p_clipped = p * scales\n\n    # Round to 4 decimal places\n    p_rounded = np.round(p_clipped, 4)\n\n    # Convert to nested list\n    return p_rounded.tolist()\n```"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    n_samples = X.shape[0]\n    # Initialize medoids as the first k samples\n    medoid_indices = list(range(k))\n    medoids = X[medoid_indices]\n\n    # Function to compute total cost given current medoids\n    def total_cost(medoid_idxs):\n        cost = 0.0\n        for i in range(n_samples):\n            # Compute distances to current medoids\n            distances = np.linalg.norm(X[i] - X[medoid_idxs], axis=1)\n            cost += np.min(distances)\n        return cost\n\n    # Initial total cost\n    current_cost = total_cost(medoid_indices)\n\n    # Iterative improvement\n    while True:\n        best_swap = None\n        best_cost_reduction = 0.0\n\n        # For each current medoid\n        for m_idx in medoid_indices:\n            # For each non-medoid sample\n            non_meds = [idx for idx in range(n_samples) if idx not in medoid_indices]\n            for candidate_idx in non_meds:\n                # Propose swap: replace m_idx with candidate_idx\n                new_medoids = medoid_indices.copy()\n                new_medoids[new_medoids.index(m_idx)] = candidate_idx\n                new_cost = total_cost(new_medoids)\n                cost_reduction = current_cost - new_cost\n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    best_swap = (m_idx, candidate_idx, new_medoids, new_cost)\n\n        # If no improvement, break\n        if best_swap is None:\n            break\n        else:\n            # Perform the best swap\n            m_idx, candidate_idx, medoid_indices, current_cost = best_swap\n\n    # Assign each sample to the closest medoid\n    labels = []\n    for i in range(n_samples):\n        distances = np.linalg.norm(X[i] - X[medoid_indices], axis=1)\n        min_dist_idx = np.argmin(distances)\n        labels.append(min_dist_idx)\n\n    return labels\n```"}
{"task_id": 203, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1 within 1e-12), return -1.\n    \"\"\"\n    # Convert to numpy array if not already\n    probs = np.array(probs, dtype=float)\n\n    # Validate probabilities\n    if np.any(probs < 0):\n        return -1\n    total = np.sum(probs)\n    if not np.isclose(total, 1.0, atol=1e-12):\n        return -1\n\n    N = len(probs)\n    scaled_probs = probs * N\n\n    # Initialize tables\n    prob_table = np.zeros(N)\n    alias_table = np.zeros(N, dtype=int)\n\n    # Lists for small and large probabilities\n    small = []\n    large = []\n\n    for idx, sp in enumerate(scaled_probs):\n        if sp < 1:\n            small.append(idx)\n        else:\n            large.append(idx)\n\n    # Process small and large\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n\n        # Update scaled_probs for g\n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1\n\n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n\n    # Remaining entries\n    for remaining in large:\n        prob_table[remaining] = 1.0\n    for remaining in small:\n        prob_table[remaining] = 1.0\n\n    # Round to 4 decimal places and convert to lists\n    prob_table = [round(p, 4) for p in prob_table]\n    alias_table = [int(a) for a in alias_table]\n\n    return prob_table, alias_table\n```"}
{"task_id": 204, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    # Convert the input data to a list for uniform processing\n    data_list = list(data)\n    count_missing = 0\n\n    for item in data_list:\n        if item is None:\n            count_missing += 1\n        elif isinstance(item, float):\n            # Check for NaN using math.isnan\n            if math.isnan(item):\n                count_missing += 1\n        elif isinstance(item, np.ndarray):\n            # If the item is a NumPy array, check if it's a scalar or array\n            # For 1-D array, check each element\n            # But since data is 1-D, assume item is scalar or array\n            # To handle array elements, flatten and check\n            # But per problem statement, data is 1-D, so item is scalar or array\n            # For safety, handle array case\n            if item.size == 1:\n                val = item.item()\n                if isinstance(val, float) and math.isnan(val):\n                    count_missing += 1\n            else:\n                # For array elements, check if any element is NaN or None\n                # But per problem, data is 1-D, so unlikely\n                # So, skip or handle accordingly\n                pass\n        else:\n            # For other types, no missing value detection needed\n            pass\n\n    return count_missing\n```"}
{"task_id": 205, "completion_id": 0, "completion": "```python\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    seen_ids = set()\n    unique_ids = []\n\n    for item in registry:\n        if isinstance(item, dict) and \"id\" in item:\n            env_id = item[\"id\"]\n            if env_id not in seen_ids:\n                seen_ids.add(env_id)\n                unique_ids.append(env_id)\n\n    return unique_ids\n```"}
{"task_id": 206, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n\n    # Validate that inputs are 1D\n    if actual_arr.ndim != 1 or predicted_arr.ndim != 1:\n        return -1\n\n    # Validate that both have the same length\n    if actual_arr.shape[0] != predicted_arr.shape[0]:\n        return -1\n\n    # Compute the mean absolute error\n    mae = np.mean(np.abs(actual_arr - predicted_arr))\n\n    # Round to 4 decimal places\n    return round(mae, 4)\n```"}
{"task_id": 207, "completion_id": 0, "completion": "```python\ndef convolution_shape(img_height: int,\n                      img_width: int,\n                      filter_shape: tuple[int, int],\n                      stride: tuple[int, int],\n                      padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    KH, KW = filter_shape\n    SH, SW = stride\n    PH, PW = padding\n\n    # Validate stride values\n    if SH <= 0 or SW <= 0:\n        return -1\n\n    # Compute output height\n    numerator_H = img_height + 2 * PH - KH\n    if numerator_H % SH != 0:\n        return -1\n    OH = numerator_H // SH + 1\n\n    # Compute output width\n    numerator_W = img_width + 2 * PW - KW\n    if numerator_W % SW != 0:\n        return -1\n    OW = numerator_W // SW + 1\n\n    # Check for positive output dimensions\n    if OH <= 0 or OW <= 0:\n        return -1\n\n    return (OH, OW)\n```"}
{"task_id": 208, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    # If categories are not provided, infer from labels in order of first appearance\n    if categories is None:\n        seen = []\n        for label in labels:\n            if label not in seen:\n                seen.append(label)\n        categories = seen\n    else:\n        # If categories are provided, ensure they are unique\n        categories = list(categories)\n\n    # Create a mapping from category to index for quick lookup\n    category_to_index = {cat: idx for idx, cat in enumerate(categories)}\n\n    # Initialize the one-hot matrix\n    N = len(labels)\n    C = len(categories)\n    one_hot_matrix = np.zeros((N, C), dtype=int)\n\n    for i, label in enumerate(labels):\n        # Check if label is in categories\n        if label not in category_to_index:\n            return -1\n        index = category_to_index[label]\n        one_hot_matrix[i, index] = 1\n\n    return one_hot_matrix.tolist()\n```"}
{"task_id": 209, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    # Validate input lengths\n    if len(payoffs) != len(payoff_probs):\n        return -1\n\n    expected_values = []\n\n    for k in range(len(payoffs)):\n        payoffs_k = payoffs[k]\n        probs_k = payoff_probs[k]\n\n        # Check if lengths match\n        if len(payoffs_k) != len(probs_k):\n            return -1\n\n        # Check if probabilities sum to 1 within tolerance\n        total_prob = sum(probs_k)\n        if abs(total_prob - 1.0) > 1e-8:\n            return -1\n\n        # Compute expected value for arm k\n        ev = sum(p * payoff for p, payoff in zip(probs_k, payoffs_k))\n        expected_values.append(round(ev, 4))\n\n    # Find the arm with the maximum expected payoff\n    max_ev = max(expected_values)\n    # In case of ties, select the smallest index\n    best_arm = expected_values.index(max_ev)\n    best_ev = max_ev\n\n    return (expected_values, best_arm, round(best_ev, 4))\n```"}
{"task_id": 210, "completion_id": 0, "completion": "```python\nimport functools\nfrom typing import Callable, Any\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    @functools.wraps(decorator_func)\n    def wrapper(*args, **kwargs):\n        # If the decorator is used without parentheses, the first argument\n        # is the function to be decorated.\n        if len(args) == 1 and callable(args[0]) and not kwargs:\n            # Direct usage: @decorator\n            return decorator_func(args[0])\n        else:\n            # Usage with parameters: @decorator(...)\n            def real_decorator(func):\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n    return wrapper\n```"}
{"task_id": 211, "completion_id": 0, "completion": "```python\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Check for invalid inputs\n    if not actual or not predicted or len(actual) != len(predicted):\n        return -1\n\n    def classification_error(a, p):\n        # Count mismatches\n        mismatches = sum(1 for actual_label, predicted_label in zip(a, p) if actual_label != predicted_label)\n        total = len(a)\n        return mismatches / total\n\n    error = classification_error(actual, predicted)\n    accuracy_value = 1 - error\n    return round(accuracy_value, 4)\n```"}
{"task_id": 212, "completion_id": 0, "completion": "```python\nfrom collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    start = \"input\"\n    end = \"output_realtime\"\n\n    # If start or end not in graph, no path\n    if start not in graph or end not in graph:\n        return []\n\n    # Use BFS to find shortest paths\n    # Queue will hold tuples: (current_node, path_to_current_node)\n    queue = deque()\n    queue.append((start, [start]))\n\n    visited = set()\n    shortest_path_length = None\n    shortest_paths = []\n\n    while queue:\n        current_node, path = queue.popleft()\n\n        # If we've already found a shorter path, skip longer paths\n        if shortest_path_length is not None and len(path) > shortest_path_length:\n            continue\n\n        # If current node is the target\n        if current_node == end:\n            if shortest_path_length is None:\n                shortest_path_length = len(path)\n            shortest_paths.append(path)\n            # Continue to find all shortest paths\n            continue\n\n        # Mark visited for this level to avoid cycles\n        # But since multiple shortest paths may exist, we only mark nodes after processing all paths of current length\n        # To ensure lex order, process neighbors sorted lexicographically\n        for neighbor in sorted(graph.get(current_node, [])):\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n\n    if not shortest_paths:\n        return []\n\n    # Among all shortest paths, select lexicographically smallest\n    return min(shortest_paths)\n```"}
{"task_id": 213, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    # Handle empty shape or shape with zero dimension\n    if not shape or any(dim == 0 for dim in shape):\n        return []\n\n    # Compute fan_in and fan_out based on shape length\n    if len(shape) == 1:\n        fan_in = shape[0]\n        fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        # For 3 or more dimensions\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Handle case where fan_in is zero\n    if fan_in == 0:\n        return []\n\n    # Calculate standard deviation\n    std_dev = np.sqrt(2.0 / fan_in)\n\n    # Set seed for reproducibility\n    rng = np.random.default_rng(seed=42)\n\n    # Generate the weights\n    weights = rng.normal(loc=0.0, scale=std_dev, size=shape)\n\n    # Return as nested list\n    return weights.tolist()\n```"}
{"task_id": 214, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy handling\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    \n    # Check if the shapes are the same\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    \n    # Compute the squared differences\n    squared_diff = (actual_arr - predicted_arr) ** 2\n    \n    # Calculate the mean\n    mse = np.mean(squared_diff)\n    \n    # Return the rounded result\n    return float(np.round(mse, 4))\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    X_train = np.array(x_train)\n    y_train = np.array(y_train)\n    X_test = np.array(x_test)\n\n    # Validate n_iterations\n    if n_iterations < 1:\n        return -1\n\n    # Check shape compatibility\n    if X_train.ndim != 2 or X_test.ndim != 2:\n        return -1\n    if X_train.shape[0] != y_train.shape[0]:\n        return -1\n    if X_train.shape[1] != X_test.shape[1]:\n        return -1\n\n    # Polynomial feature expansion\n    def polynomial_expansion(X, degree):\n        # For each feature, generate polynomial features up to 'degree'\n        # Concatenate all polynomial features\n        poly_features = [np.ones((X.shape[0], 1))]  # bias term\n        for d in range(1, degree + 1):\n            poly_features.append(X ** d)\n        return np.hstack(poly_features)\n\n    X_train_poly = polynomial_expansion(X_train, degree)\n    X_test_poly = polynomial_expansion(X_test, degree)\n\n    # Standardize features (excluding bias term)\n    # Bias term is the first column (all ones), so skip it\n    feature_means = np.mean(X_train_poly[:, 1:], axis=0)\n    feature_stds = np.std(X_train_poly[:, 1:], axis=0)\n    # To avoid division by zero\n    feature_stds[feature_stds == 0] = 1\n\n    X_train_scaled = X_train_poly.copy()\n    X_test_scaled = X_test_poly.copy()\n\n    X_train_scaled[:, 1:] = (X_train_poly[:, 1:] - feature_means) / feature_stds\n    X_test_scaled[:, 1:] = (X_test_poly[:, 1:] - feature_means) / feature_stds\n\n    # Initialize weights (including bias)\n    n_features = X_train_scaled.shape[1]\n    w = np.zeros(n_features)\n\n    # Gradient descent\n    for _ in range(n_iterations):\n        # Predictions\n        y_pred = X_train_scaled @ w\n        # Error\n        error = y_pred - y_train\n        # Gradient of MSE\n        grad = (2 / X_train_scaled.shape[0]) * (X_train_scaled.T @ error)\n\n        # Regularization (excluding bias term)\n        # L2 gradient\n        l2_grad = 2 * reg_factor * l1_ratio * w\n        l2_grad[0] = 0  # no regularization for bias\n\n        # L1 sub-gradient\n        l1_subgrad = np.sign(w)\n        l1_subgrad[0] = 0  # no regularization for bias\n\n        # Total gradient\n        total_grad = grad + reg_factor * ((1 - l1_ratio) * 2 * w + l1_ratio * l1_subgrad)\n\n        # Update weights\n        w -= learning_rate * total_grad\n\n    # Make predictions on test set\n    y_test_pred = X_test_scaled @ w\n\n    # Round predictions to 4 decimals\n    rounded_preds = np.round(y_test_pred, 4).tolist()\n\n    return rounded_preds\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute sigmoid of predicted scores\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    # Compute sigmoid of negative actual * predicted\n    sigmoid_neg_actual_pred = 1 / (1 + np.exp(-(-actual * predicted)))\n\n    # Gradient: actual * sigmoid(-actual * predicted)\n    gradient = actual * sigmoid_neg_actual_pred\n\n    # Hessian: sigmoid(predicted) * (1 - sigmoid(predicted))\n    hessian = sigmoid_pred * (1 - sigmoid_pred)\n\n    # Probabilities: sigmoid(predicted)\n    prob = sigmoid_pred\n\n    # Round all results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    prob = np.round(prob, 6)\n\n    # Convert back to lists\n    return (gradient.tolist(), hessian.tolist(), prob.tolist())\n```"}
{"task_id": 218, "completion_id": 0, "completion": "Let's carefully implement the `blackjack_outcome` function following the rules described.\n\n### Approach:\n\n1. **Calculate hand value**:\n   - Sum the card values.\n   - Check for the presence of an Ace (1).\n   - If there's an Ace and adding 10 doesn't bust, count the Ace as 11 (usable ace).\n   - The final score is the best possible value \u2264 21.\n\n2. **Determine if a hand is a blackjack**:\n   - Exactly two cards.\n   - One Ace and one 10-value card.\n\n3. **Apply the rules**:\n   - If the player busts, return -1.\n   - If the dealer busts (and player hasn't), return +1.\n   - Otherwise, compare scores:\n     - Higher score: +1 for player, -1 for dealer.\n     - Tie: 0.\n   - If the player wins with a natural blackjack, return 1.5.\n\nLet's implement helper functions for clarity:\n- `hand_value(hand: list[int]) -> int`: computes the best score.\n- `is_blackjack(hand: list[int]) -> bool`: checks if the hand is a blackjack.\n\nNow, the code:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        total = sum(hand)\n        # Check for usable ace\n        if 1 in hand:\n            # If adding 10 doesn't bust, count Ace as 11\n            if total + 10 <= 21:\n                return total + 10\n        return total\n\n    def is_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and any(card == 10 for card in hand)\n\n    # Calculate scores\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n\n    # Check for busts\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n\n    # Check for blackjacks\n    player_blackjack = is_blackjack(player)\n    dealer_blackjack = is_blackjack(dealer)\n\n    # Apply rules\n    if player_bust:\n        return -1\n    if dealer_bust:\n        return 1\n    # Both not bust\n    if player_score > dealer_score:\n        # Check for player's natural blackjack\n        if player_blackjack:\n            return 1.5\n        else:\n            return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        # Tie\n        return 0\n```\n\n### Explanation:\n- The `hand_value` function correctly accounts for the usable ace.\n- The `is_blackjack` function checks for the special two-card blackjack.\n- The main logic applies the rules in order, considering busts, blackjacks, and score comparisons.\n\nThis implementation should correctly evaluate the outcome according to the specified rules."}
{"task_id": 220, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    # Initialize empty lists for phi and theta\n    phi = []\n    theta = []\n\n    # Check if C_wt is empty\n    if C_wt.size == 0:\n        phi = []\n    else:\n        V, T = C_wt.shape\n        # Compute denominator for phi\n        denom_phi = np.sum(C_wt, axis=0) + V * beta  # shape (T,)\n        # Compute phi with smoothing\n        phi_array = (C_wt + beta) / denom_phi  # broadcasting over columns\n        # Round to 4 decimals\n        phi = np.round(phi_array.tolist(), 4)\n\n    # Check if C_dt is empty\n    if C_dt.size == 0:\n        theta = []\n    else:\n        D, T = C_dt.shape\n        # Compute denominator for theta\n        denom_theta = np.sum(C_dt, axis=1) + T * alpha  # shape (D,)\n        # Compute theta with smoothing\n        theta_array = (C_dt + alpha) / denom_theta[:, np.newaxis]  # broadcasting over columns\n        # Round to 4 decimals\n        theta = np.round(theta_array.tolist(), 4)\n\n    return phi, theta\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors.\"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    # Compute log(1 + actual) and log(1 + predicted)\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    # Calculate squared differences\n    squared_errors = (log_actual - log_predicted) ** 2\n    return squared_errors\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate MSLE, with input validation.\"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Validate that inputs have the same shape\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Validate that all values are non-negative\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Compute element-wise squared log errors\n    errors = squared_log_error(actual, predicted)\n    \n    # Calculate mean and round to 4 decimal places\n    msle = np.mean(errors)\n    return round(float(msle), 4)\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n\n    # Initialize an array to hold the sigmoid values\n    sigmoid_vals = np.empty_like(z_array)\n\n    # For z >= 0: use the standard form for numerical stability\n    mask_pos = z_array >= 0\n    sigmoid_vals[mask_pos] = 1 / (1 + np.exp(-z_array[mask_pos]))\n\n    # For z < 0: use an alternative form to avoid overflow\n    mask_neg = ~mask_pos\n    exp_z = np.exp(z_array[mask_neg])\n    sigmoid_vals[mask_neg] = exp_z / (1 + exp_z)\n\n    # Determine if input was scalar\n    if np.isscalar(z):\n        # Return a single float rounded to 4 decimal places\n        return round(float(sigmoid_vals), 4)\n    else:\n        # Return a list with elements rounded to 4 decimal places\n        return sigmoid_vals.tolist()\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to numpy array for easy processing\n    arr = np.array(z)\n    # Apply Leaky ReLU: x if x >= 0 else a * x\n    activated = np.where(arr >= 0, arr, a * arr)\n    # Convert back to list with the same nested structure\n    return activated.tolist()\n```"}
{"task_id": 225, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hz2mel(hz, formula: str = \"htk\") -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    # Validate formula input\n    if formula not in (\"htk\", \"slaney\"):\n        raise AssertionError(\"Invalid formula. Choose 'htk' or 'slaney'.\")\n\n    # Convert input to numpy array for flexible processing\n    hz_array = np.array(hz)\n\n    # Apply the appropriate formula\n    if formula == \"htk\":\n        mel = 2595 * np.log10(1 + hz_array / 700)\n    else:  # formula == \"slaney\"\n        mel = 1127 * np.log(1 + hz_array / 700)\n\n    # Round to 4 decimal places\n    mel_rounded = np.round(mel, 4)\n\n    # Convert back to list with original shape\n    return mel_rounded.tolist()\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    n_samples, n_features = X_train.shape\n\n    # Initialize sample weights uniformly\n    sample_weights = np.ones(n_samples) / n_samples\n\n    # Store the weak learners and their weights\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Initialize variables to store the best stump\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n\n        # Loop over all features to find the best decision stump\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            # Get all possible thresholds (midpoints between sorted unique values)\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions based on current threshold and polarity\n                    predictions = np.ones(n_samples)\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n\n                    # Calculate weighted error\n                    misclassified = predictions != y_train\n                    error = np.sum(sample_weights * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Compute alpha (learner weight)\n        # Add a small epsilon to avoid division by zero\n        epsilon = 1e-10\n        alpha = 0.5 * np.log((1 - min_error + epsilon) / (min_error + epsilon))\n\n        # Store the current stump parameters and alpha\n        classifiers.append({\n            'feature_index': best_feature,\n            'threshold': best_threshold,\n            'polarity': best_polarity,\n            'alpha': alpha\n        })\n\n        # Make predictions with the current stump\n        feature_values = X_train[:, best_feature]\n        predictions = np.ones(n_samples)\n        predictions[best_polarity * feature_values < best_polarity * best_threshold] = -1\n\n        # Update sample weights\n        # Increase weights for misclassified samples\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        # Normalize weights\n        sample_weights /= np.sum(sample_weights)\n\n    # After training, make predictions on X_test\n    final_predictions = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        feature_values = X_test[:, clf['feature_index']]\n        preds = np.ones(X_test.shape[0])\n        preds[clf['polarity'] * feature_values < clf['polarity'] * clf['threshold']] = -1\n        final_predictions += clf['alpha'] * preds\n\n    # Final prediction is the sign of the weighted sum\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```"}
{"task_id": 227, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef value_network_forward(\n    state: list[float],\n    W1: list[list[float]],\n    W2: list[list[float]],\n    W3: list[list[float]] | list[float]\n) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    s = np.array(state, dtype=float)\n    W1_np = np.array(W1, dtype=float)\n    W2_np = np.array(W2, dtype=float)\n    W3_np = np.array(W3, dtype=float)\n\n    # Validate dimensions\n    # Check W1 shape: (N, H1)\n    if W1_np.ndim != 2:\n        return -1\n    if W1_np.shape[0] != s.shape[0]:\n        return -1\n\n    # Check W2 shape: (H1, H2)\n    if W2_np.ndim != 2:\n        return -1\n    if W2_np.shape[0] != W1_np.shape[1]:\n        return -1\n\n    # Check W3 shape: (H2, 1) or (H2,)\n    if W3_np.ndim == 2:\n        if W3_np.shape[0] != W2_np.shape[1] or W3_np.shape[1] != 1:\n            return -1\n    elif W3_np.ndim == 1:\n        if W3_np.shape[0] != W2_np.shape[1]:\n            return -1\n    else:\n        return -1\n\n    # Forward pass\n    h1 = np.tanh(s @ W1_np)  # shape: (H1,)\n    h2 = np.tanh(h1 @ W2_np) # shape: (H2,)\n    v = h2 @ W3_np          # shape: scalar\n\n    # Ensure v is a scalar\n    v_scalar = float(v)\n\n    # Round to 4 decimal places\n    return round(v_scalar, 4)\n```"}
{"task_id": 228, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    # If Y is None, compute distances within X\n    if Y is None:\n        Y = X\n\n    # Compute squared norms of each row in X and Y\n    X_norms = np.sum(X**2, axis=1).reshape(-1, 1)  # shape (N, 1)\n    Y_norms = np.sum(Y**2, axis=1).reshape(1, -1)  # shape (1, M)\n\n    # Compute the cross term\n    cross_term = np.dot(X, Y.T)  # shape (N, M)\n\n    # Use the identity: ||x - y||^2 = ||x||^2 + ||y||^2 - 2 * x\u00b7y\n    dist_squared = X_norms + Y_norms - 2 * cross_term\n\n    # Numerical stability: ensure no negative values due to floating point errors\n    dist_squared = np.maximum(dist_squared, 0)\n\n    # Take square root to get Euclidean distances\n    distances = np.sqrt(dist_squared)\n\n    # Round to 4 decimal places\n    distances_rounded = np.round(distances, 4)\n\n    # Convert to nested list\n    return distances_rounded.tolist()\n```"}
{"task_id": 230, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Implements Gaussian Naive Bayes classifier from scratch for binary classification.\n    \n    Parameters:\n    - X_train: numpy array of shape (n_samples, n_features)\n    - y_train: numpy array of shape (n_samples,)\n    - X_test: numpy array of shape (m_samples, n_features)\n    \n    Returns:\n    - List of predicted labels (0 or 1) for each test sample.\n    \"\"\"\n    epsilon = 1e-9  # small constant to avoid division by zero\n    \n    # Separate training data by class\n    X_c0 = X_train[y_train == 0]\n    X_c1 = X_train[y_train == 1]\n    \n    # Calculate class priors\n    prior_c0 = X_c0.shape[0] / X_train.shape[0]\n    prior_c1 = X_c1.shape[0] / X_train.shape[0]\n    \n    # Calculate means and variances for each feature per class\n    mu_c0 = np.mean(X_c0, axis=0)\n    var_c0 = np.var(X_c0, axis=0) + epsilon  # add epsilon to avoid zero variance\n    \n    mu_c1 = np.mean(X_c1, axis=0)\n    var_c1 = np.var(X_c1, axis=0) + epsilon\n    \n    # Precompute constants for Gaussian likelihoods\n    # log of the normalization factor: -0.5 * log(2*pi*variance)\n    log_coeff_c0 = -0.5 * np.log(2 * np.pi * var_c0)\n    log_coeff_c1 = -0.5 * np.log(2 * np.pi * var_c1)\n    \n    predictions = []\n    for x in X_test:\n        # Compute log posterior for class 0\n        log_likelihood_c0 = np.sum(log_coeff_c0 - ((x - mu_c0) ** 2) / (2 * var_c0))\n        log_posterior_c0 = np.log(prior_c0) + log_likelihood_c0\n        \n        # Compute log posterior for class 1\n        log_likelihood_c1 = np.sum(log_coeff_c1 - ((x - mu_c1) ** 2) / (2 * var_c1))\n        log_posterior_c1 = np.log(prior_c1) + log_likelihood_c1\n        \n        # Assign class with higher posterior probability\n        predicted_label = 1 if log_posterior_c1 > log_posterior_c0 else 0\n        predictions.append(predicted_label)\n    \n    return predictions\n```"}
{"task_id": 231, "completion_id": 0, "completion": "```python\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"\n    Checks if the given hand is a natural blackjack.\n    A natural blackjack is exactly two cards: one Ace (1) and one ten-valued card (10).\n    \n    Args:\n        hand (list[int]): List of integers representing card ranks.\n        \n    Returns:\n        bool: True if the hand is a natural blackjack, False otherwise.\n    \"\"\"\n    # Check if the hand has exactly two cards\n    if len(hand) != 2:\n        return False\n    \n    # Check for presence of an Ace (1) and a ten-valued card (10)\n    has_ace = 1 in hand\n    has_ten = 10 in hand\n    \n    return has_ace and has_ten\n```"}
{"task_id": 232, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    # Rule 1: Check if x is a 2D array\n    if not isinstance(x, np.ndarray):\n        return False\n    if x.ndim != 2:\n        return False\n\n    # Rule 2: Check if all elements are 0 or 1\n    if not np.all((x == 0) | (x == 1)):\n        return False\n\n    # Rule 3: Check if each row contains exactly one '1'\n    row_sums = np.sum(x, axis=1)\n    if not np.all(row_sums == 1):\n        return False\n\n    return True\n```"}
{"task_id": 234, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures: list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta:  float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # Set seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Validate input lengths\n    if len(successes) != len(failures):\n        return -1\n    if len(successes) == 0:\n        return -1\n    \n    # For each arm, sample from the Beta posterior\n    samples = []\n    for s, f in zip(successes, failures):\n        # Compute posterior parameters\n        alpha_post = prior_alpha + s\n        beta_post = prior_beta + f\n        # Sample from Beta distribution\n        sample = np.random.beta(alpha_post, beta_post)\n        samples.append(sample)\n    \n    # Find the index of the arm with the highest sample\n    # In case of ties, np.argmax returns the smallest index\n    return int(np.argmax(samples))\n```"}
{"task_id": 235, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    # Validate input array\n    if not isinstance(labels, np.ndarray):\n        raise TypeError(\"labels must be a numpy.ndarray\")\n    if labels.ndim != 1:\n        raise ValueError(\"labels array must be 1-dimensional\")\n    if not np.issubdtype(labels.dtype, np.integer):\n        raise TypeError(\"labels array must contain integers\")\n    \n    max_label = labels.max()\n    # Determine number of classes\n    if n_classes is None:\n        C = max_label + 1\n    else:\n        if n_classes < max_label + 1:\n            raise ValueError(f\"n_classes ({n_classes}) must be at least max label + 1 ({max_label + 1})\")\n        C = n_classes\n    \n    N = labels.shape[0]\n    # Initialize the one-hot matrix with zeros\n    one_hot = np.zeros((N, C), dtype=float)\n    # Set the appropriate elements to 1.0\n    one_hot[np.arange(N), labels] = 1.0\n    \n    return one_hot\n```"}
{"task_id": 236, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    indices = np.arange(N)\n    if shuffle:\n        np.random.shuffle(indices)\n    n_batches = (N + batchsize - 1) // batchsize  # ceil division\n\n    def generator():\n        for start_idx in range(0, N, batchsize):\n            end_idx = min(start_idx + batchsize, N)\n            yield indices[start_idx:end_idx]\n\n    return generator(), n_batches\n```"}
{"task_id": 237, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    total = 0\n    aces = 0\n\n    # Map face cards to their values\n    face_card_value = 10\n\n    for card in hand:\n        if card in ['J', 'Q', 'K']:\n            total += face_card_value\n        elif card == 'A':\n            aces += 1\n            total += 11  # Count each Ace as 11 initially\n        else:\n            # Numeric cards\n            total += int(card)\n\n    # Adjust for Aces if total exceeds 21\n    while total > 21 and aces > 0:\n        total -= 10  # Convert an Ace from 11 to 1\n        aces -= 1\n\n    # If total exceeds 21 after adjustments, it's a bust\n    if total > 21:\n        return 0\n    return total\n```"}
{"task_id": 239, "completion_id": 0, "completion": "```python\nimport math\n\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str = \"same\") -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == \"valid\":\n        # No padding needed\n        return ((0, 0), (0, 0))\n    elif output_shape == \"same\":\n        # For \"same\" padding, compute padding for height and width\n        filter_height, filter_width = filter_shape\n\n        # Calculate padding for height\n        pad_top = math.floor((filter_height - 1) / 2)\n        pad_bottom = math.ceil((filter_height - 1) / 2)\n\n        # Calculate padding for width\n        pad_left = math.floor((filter_width - 1) / 2)\n        pad_right = math.ceil((filter_width - 1) / 2)\n\n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n    else:\n        raise ValueError(\"Invalid output_shape. Expected 'same' or 'valid'.\")\n```"}
{"task_id": 240, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n\n    # Build observation mappings\n    if obs_encoder is not None:\n        obs2num = dict(obs_encoder)  # Use provided encoder directly\n    else:\n        obs2num = {}\n        for idx, obs in enumerate(obs_ids):\n            obs2num[obs] = idx\n\n    # Build inverse for observations\n    num2obs = {v: k for k, v in obs2num.items()}\n\n    # Build action mappings\n    if act_encoder is not None:\n        act2num = dict(act_encoder)  # Use provided encoder directly\n    else:\n        act2num = {}\n        for idx, act in enumerate(action_ids):\n            act2num[act] = idx\n\n    # Build inverse for actions\n    num2act = {v: k for k, v in act2num.items()}\n\n    return {\n        'obs2num': obs2num,\n        'num2obs': num2obs,\n        'act2num': act2num,\n        'num2act': num2act\n    }\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    # Check for shape length\n    if len(shape) < 2:\n        return -1\n\n    # Flatten the shape to a 2D matrix\n    d0 = shape[0]\n    rest = np.prod(shape[1:])  # product of remaining dimensions\n    A = np.random.randn(d0, rest)\n\n    # Compute SVD\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Choose the orthogonal matrix Q\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Reshape Q back to the original shape\n    Q_reshaped = Q.reshape(shape)\n\n    # Scale the matrix\n    Q_scaled = Q_reshaped * scale\n\n    # Convert to list of lists\n    return Q_scaled.tolist()\n```"}
{"task_id": 242, "completion_id": 0, "completion": "```python\nimport math\n\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # Check for any arms that haven't been pulled yet\n    for arm_idx, count in enumerate(pull_counts):\n        if count == 0:\n            return arm_idx\n\n    total_counts = current_step + 1\n    scores = []\n    for a in range(len(ev_estimates)):\n        # Compute the UCB score for each arm\n        exploration_term = C * math.sqrt(2 * math.log(total_counts) / pull_counts[a])\n        score = ev_estimates[a] + exploration_term\n        scores.append(score)\n\n    # Return the index of the arm with the highest score\n    # In case of ties, min index is chosen automatically by max\n    return int(max(range(len(scores)), key=lambda a: scores[a]))\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert input state to numpy array for convenience\n    s = np.array(state)\n\n    # Since all weights are 1.0 and biases are 0.0, we can compute directly:\n    # Step 1: Dense-1 with ReLU\n    z1 = max(0, s.sum())  # sum of s, then ReLU\n    # Step 2: Dense-2 with ReLU\n    z2 = 4 * z1\n    # Step 3: Dense-3 with ReLU\n    z3 = 4 * z2  # equals 16 * z1\n    # Step 4: Actor head logits\n    logits = 4 * z3  # equals 64 * z1\n\n    # Since all logits are identical, softmax over identical values yields equal probabilities\n    action_probs = [1/3, 1/3, 1/3]\n\n    # State value\n    state_value = 4 * z3  # equals 64 * z1\n\n    # Round to 4 decimal places\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value, 4)\n\n    return action_probs_rounded, state_value_rounded\n```"}
{"task_id": 244, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function creates a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Validate shape: must be a tuple of positive integers\n    if not isinstance(shape, tuple):\n        return -1\n    if not all(isinstance(dim, int) and dim > 0 for dim in shape):\n        return -1\n\n    # Validate sparsity: must be a float in [0, 1]\n    if not (isinstance(sparsity, (float, int)) and 0 <= sparsity <= 1):\n        return -1\n\n    # Generate random numbers\n    rand_array = np.random.rand(*shape)\n\n    # Threshold at 1 - sparsity: values >= 1 - sparsity become 1.0, else 0.0\n    threshold = 1 - sparsity\n    binary_array = (rand_array >= threshold).astype(float)\n\n    # Convert to nested list\n    return binary_array.tolist()\n```"}
{"task_id": 247, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    # Validate input lengths\n    if not (isinstance(payoff_dists, list) and isinstance(payoff_probs, list)):\n        return -1\n    if len(payoff_dists) == 0 or len(payoff_probs) == 0:\n        return -1\n    if len(payoff_dists) != len(payoff_probs):\n        return -1\n\n    # Convert to numpy arrays for easier validation and calculations\n    try:\n        mu_sigma_array = np.array(payoff_dists, dtype=float)\n        p_array = np.array(payoff_probs, dtype=float)\n    except Exception:\n        return -1\n\n    # Validate each element\n    for i, (mu, sigma2) in enumerate(mu_sigma_array):\n        if sigma2 <= 0:\n            return -1\n    if np.any(p_array < 0) or np.any(p_array > 1):\n        return -1\n\n    # Calculate expected rewards: p_k * \u03bc_k\n    expected_rewards = p_array * mu_sigma_array[:, 0]\n\n    # Find the maximum expected reward and its index\n    best_idx = int(np.argmax(expected_rewards))\n    best_ev = float(expected_rewards[best_idx])\n\n    # Round to 4 decimal places\n    best_ev_rounded = round(best_ev, 4)\n\n    return (best_ev_rounded, best_idx)\n```"}
{"task_id": 248, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    # Handle case when y_train is empty to avoid division by zero\n    if len(y_train) == 0:\n        p = 0.0\n    else:\n        p = np.mean(y_train)\n    # Round to four decimal places\n    p_rounded = round(p, 4)\n    # Create predictions list with the same length as X_test\n    predictions = [p_rounded] * len(X_test)\n    return predictions\n```"}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert input lists to numpy arrays\n    x = np.array(state)\n\n    # Extract parameters\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n\n    # Forward pass through shared layers\n    h1 = np.maximum(0, W1 @ x + b1)  # ReLU\n    h2 = np.maximum(0, W2 @ h1 + b2) # ReLU\n    h3 = np.maximum(0, W3 @ h2 + b3) # ReLU\n\n    # Actor head: affine + softmax\n    actor_logits = Wa @ h3 + ba\n    # To ensure numerical stability in softmax, subtract max\n    max_logit = np.max(actor_logits)\n    exp_logits = np.exp(actor_logits - max_logit)\n    probs = exp_logits / np.sum(exp_logits)\n\n    # Critic head: affine\n    value = Wc @ h3 + bc\n    value_scalar = float(value)\n\n    # Round probabilities and value to 4 decimal places\n    probs_rounded = [float(np.round(p, 4)) for p in probs]\n    # If any probability is exactly 0 or 1, keep one decimal place\n    probs_final = [p if p not in [0.0, 1.0] else float(np.round(p, 1)) for p in probs_rounded]\n    value_final = float(np.round(value_scalar, 4))\n    if value_final in [0.0, 1.0]:\n        value_final = float(np.round(value_final, 1))\n\n    return probs_final, value_final\n```"}
{"task_id": 251, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid.\"\"\"\n    def _apply(val):\n        return 1 / (1 + np.exp(-val))\n    \n    # Handle scalar\n    if isinstance(x, (int, float)):\n        return round(_apply(x), 4)\n    # Handle list or tuple\n    elif isinstance(x, (list, tuple)):\n        result = [_apply(v) for v in x]\n        return np.array([round(v, 4) for v in result])\n    # Handle numpy array\n    elif isinstance(x, np.ndarray):\n        result = _apply(x)\n        return np.round(result, 4)\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or np.ndarray.\")\n\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent.\"\"\"\n    def _apply(val):\n        return np.tanh(val)\n    \n    if isinstance(x, (int, float)):\n        return round(_apply(x), 4)\n    elif isinstance(x, (list, tuple)):\n        result = [_apply(v) for v in x]\n        return np.array([round(v, 4) for v in result])\n    elif isinstance(x, np.ndarray):\n        result = _apply(x)\n        return np.round(result, 4)\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or np.ndarray.\")\n\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit.\"\"\"\n    def _apply(val):\n        return max(0, val)\n    \n    if isinstance(x, (int, float)):\n        return round(_apply(x), 4)\n    elif isinstance(x, (list, tuple)):\n        result = [_apply(v) for v in x]\n        return np.array([round(v, 4) for v in result])\n    elif isinstance(x, np.ndarray):\n        result = np.maximum(0, x)\n        return np.round(result, 4)\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or np.ndarray.\")\n\ndef leaky_relu(x, alpha: float = 0.01):\n    \"\"\"Element-wise Leaky ReLU with slope alpha for x<0.\"\"\"\n    def _apply(val):\n        return val if val >= 0 else alpha * val\n    \n    if isinstance(x, (int, float)):\n        return round(_apply(x), 4)\n    elif isinstance(x, (list, tuple)):\n        result = [_apply(v) for v in x]\n        return np.array([round(v, 4) for v in result])\n    elif isinstance(x, np.ndarray):\n        result = np.where(x >= 0, x, alpha * x)\n        return np.round(result, 4)\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or np.ndarray.\")\n\ndef softmax(x):\n    \"\"\"Numerically stable softmax over a 1-D input.\"\"\"\n    if isinstance(x, (list, tuple)):\n        arr = np.array(x, dtype=float)\n    elif isinstance(x, np.ndarray):\n        arr = x.astype(float)\n    elif isinstance(x, (int, float)):\n        arr = np.array([x], dtype=float)\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or np.ndarray.\")\n    \n    # For softmax, ensure input is 1-D\n    if arr.ndim != 1:\n        raise ValueError(\"Softmax input must be a 1-D array or list.\")\n    \n    # Numerical stability: subtract max\n    max_val = np.max(arr)\n    exps = np.exp(arr - max_val)\n    sum_exps = np.sum(exps)\n    softmax_vals = exps / sum_exps\n    return np.round(softmax_vals, 4)\n\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\"\"\"\n    name = name.lower()\n    if name == \"sigmoid\":\n        return sigmoid\n    elif name == \"tanh\":\n        return tanh\n    elif name == \"relu\":\n        return relu\n    elif name == \"leaky_relu\":\n        return leaky_relu\n    elif name == \"softmax\":\n        return softmax\n    else:\n        raise ValueError(\"Invalid activation function.\")\n```"}
{"task_id": 252, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    # Compute the gradient: actual - predicted\n    grad_array = actual - predicted\n    # The Hessian is a list of ones with the same length\n    hess = [1.0] * len(actual)\n    # Convert gradient array to list\n    grad = grad_array.tolist()\n    return grad, hess\n```"}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    \n    if not gradient:\n        # Compute L2 norm\n        l2_norm = np.linalg.norm(w, ord=2)\n        penalty = alpha * (l1_ratio * l2_norm + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n    else:\n        # Compute gradient\n        sign_w = np.sign(w)\n        grad = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        # Round each element to 4 decimals\n        grad_rounded = [round(elem, 4) for elem in grad]\n        return grad_rounded\n```"}
{"task_id": 255, "completion_id": 0, "completion": "```python\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    total = sum(hand)\n    # Count the number of aces in the hand\n    num_aces = hand.count(1)\n    # Check if any ace can be counted as 11 without busting\n    # For each ace, try to treat it as 11 instead of 1\n    for _ in range(num_aces):\n        if total + 10 <= 21:\n            return True\n        total -= 1  # Adjust total if we consider this ace as 11\n    return False\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n\n    # Handle special parameter names\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    # Map \"Ba\" and \"Bx\" to lowercase keys\n    param_key = param_name.lower()\n\n    # Access the parameter\n    param = model.parameters[param_key]\n\n    # Initialize gradient array with same shape as param\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Save original parameter for restoration\n    original_param = param.astype(np.float64)\n\n    # Iterate over every element in the parameter\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n\n        # Save original value at index\n        original_value = param[idx]\n\n        # Perturb +epsilon\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n\n        for t in range(n_t):\n            # Forward pass for each time step\n            pred = model.forward(X[:, :, t])\n            predictions_plus.append(pred)\n        loss_plus = loss_func(predictions_plus)\n\n        # Perturb -epsilon\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n\n        for t in range(n_t):\n            pred = model.forward(X[:, :, t])\n            predictions_minus.append(pred)\n        loss_minus = loss_func(predictions_minus)\n\n        # Numerical gradient approximation\n        grad_estimate = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[idx] = grad_estimate\n\n        # Restore original value\n        param[idx] = original_value\n\n        it.iternext()\n\n    # Return the transpose of grads\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    m, n = X_train.shape\n    # Initialize sample weights uniformly\n    D = np.ones(m) / m\n\n    # Store the weak classifiers: each as a dict with 'feature_index', 'threshold', 'polarity', 'alpha'\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Initialize variables to store the best stump\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = 1\n\n        # For each feature, find the best threshold\n        for feature_i in range(n):\n            feature_values = X_train[:, feature_i]\n            # Get unique values to consider as thresholds\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions based on current threshold and polarity\n                    predictions = np.ones(m)\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n\n                    # Calculate weighted error\n                    misclassified = predictions != y_train\n                    error = np.sum(D * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        # Compute alpha (classifier weight)\n        # To avoid division by zero, clip error\n        epsilon = 1e-10\n        min_error = max(min_error, epsilon)\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n\n        # Store the classifier parameters\n        classifiers.append({\n            'feature_index': best_feature,\n            'threshold': best_threshold,\n            'polarity': best_polarity,\n            'alpha': alpha\n        })\n\n        # Make predictions on training data with the selected stump\n        feature_values = X_train[:, best_feature]\n        predictions = np.ones(m)\n        predictions[best_polarity * feature_values < best_polarity * best_threshold] = -1\n\n        # Update sample weights\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)  # Normalize\n\n    # Now, predict on X_test\n    final_predictions = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        feature_values = X_test[:, clf['feature_index']]\n        preds = np.ones(X_test.shape[0])\n        preds[clf['polarity'] * feature_values < clf['polarity'] * clf['threshold']] = -1\n        final_predictions += clf['alpha'] * preds\n\n    # Final prediction is sign of weighted sum\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```"}
{"task_id": 258, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if lengths match\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Compute per-sample hinge loss: max(0, 1 - y_i * y_hat_i)\n    losses = np.maximum(0, 1 - actual * predicted)\n    \n    # Compute mean loss\n    mean_loss = np.mean(losses)\n    \n    # Return rounded to 4 decimal places\n    return round(mean_loss, 4)\n```"}
{"task_id": 259, "completion_id": 0, "completion": "```python\nimport random\n\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    random.seed(42)\n    return random.sample(memory, batch_size)\n```"}
{"task_id": 260, "completion_id": 0, "completion": "```python\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation follows Sutton's algorithm with the specified modifications,\n    including deterministic hashing and wrapping behavior.\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for each float.\n        ints (list[int] | None): Additional integer variables.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    # Number of float variables\n    nf = len(floats)\n    # Initialize quantized values\n    q = [floor(f * numtilings) for f in floats]\n\n    # Prepare wrapwidths: if None or 0, treat as no wrapping\n    wrapwidths = wrapwidths or [None] * nf\n\n    # Initialize list to hold the indices for each tiling\n    tile_indices = []\n\n    for t in range(numtilings):\n        coords = [t]  # start with tiling index\n        b = t  # base offset for this tiling\n\n        for i in range(nf):\n            c = (q[i] + (b % numtilings)) // numtilings\n            if wrapwidths[i] is not None and wrapwidths[i] > 0:\n                c = c % wrapwidths[i]\n            # Append coordinate\n            coords.append(c)\n            b += t * 2  # update b for next coordinate\n\n        # Append additional integer variables if provided\n        if ints:\n            coords.extend(ints)\n\n        # Hash the coordinate list into [0, ihtORsize)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n\n        tile_indices.append(index)\n\n    return tile_indices\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    # Ensure shape has at least two dimensions\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Compute fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        # For shapes with more than 2 dimensions\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Calculate standard deviation\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Generate the array with normal distribution\n    return np.random.normal(loc=0.0, scale=s, size=shape)\n```"}
{"task_id": 263, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    # Convert input to numpy array if not already\n    a_prev = np.array(x, dtype=float)\n\n    for W, g in zip(weights, activations):\n        # Convert W to numpy array\n        W = np.array(W, dtype=float)\n        # Prepend bias term: 1 + previous activations\n        a_prev_with_bias = np.concatenate(([1], a_prev))\n        # Compute pre-activation\n        z = W @ a_prev_with_bias\n        # Apply activation function\n        if g == \"sigmoid\":\n            a = 1 / (1 + np.exp(-z))\n        elif g == \"relu\":\n            a = np.maximum(0, z)\n        elif g == \"linear\":\n            a = z\n        else:\n            raise ValueError(f\"Unknown activation function: {g}\")\n        a_prev = a\n\n    # Round the final output\n    a_final = np.round(a_prev, 4)\n\n    # Return scalar if single output neuron\n    if a_final.size == 1:\n        return float(a_final)\n    else:\n        return a_final.tolist()\n```"}
{"task_id": 265, "completion_id": 0, "completion": "```python\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        value = -0.25 * x + 82.50372665317208\n    elif x <= 600:\n        value = 20.00372665317208\n    elif x <= 700:\n        value = -0.2 * x + 140.00372665317207\n    else:\n        value = 0.003726653172066108\n    return round(value, 4)\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a mapping from vertex to its index for quick lookup\n    index_map = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize adjacency list with empty lists\n    G = [[] for _ in V]\n    \n    # For each edge, add the connected vertices to each other's adjacency list\n    for u, v in E:\n        # Check if both vertices are in V\n        if u in index_map and v in index_map:\n            u_idx = index_map[u]\n            v_idx = index_map[v]\n            # Add v to u's adjacency list if not already present\n            if v not in G[u_idx]:\n                G[u_idx].append(v)\n            # Add u to v's adjacency list if not already present\n            if u not in G[v_idx]:\n                G[v_idx].append(u)\n    \n    # Ensure the neighbors are ordered according to their appearance in V\n    # Since we added neighbors in the order of edges, and V order is preserved,\n    # the order inside each adjacency list is already consistent.\n    # But to be safe, we can filter neighbors to only those in V and in the correct order.\n    # (This is optional if edges are consistent, but good for robustness.)\n    for i, neighbors in enumerate(G):\n        # Filter neighbors to only those in V (should always be true)\n        neighbors_in_order = [n for n in V if n in neighbors]\n        G[i] = neighbors_in_order\n    \n    return G\n```"}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    min_error = float('inf')\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": None\n    }\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        # Get all unique feature values to consider as thresholds\n        thresholds = np.unique(feature_values)\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                # Make predictions based on current threshold and polarity\n                # For polarity=1:\n                #   predict 1 if x < threshold, else -1\n                # For polarity=-1:\n                #   predict -1 if x < threshold, else 1\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[feature_values >= threshold] = -1\n                else:\n                    predictions[feature_values < threshold] = -1\n\n                # Compute weighted error\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n\n                # Check if this is the best so far\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump[\"feature_index\"] = feature_idx\n                    best_stump[\"threshold\"] = round(threshold, 4)\n                    best_stump[\"polarity\"] = polarity\n                    best_stump[\"weighted_error\"] = round(weighted_error, 4)\n\n    return best_stump\n```"}
{"task_id": 268, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations\n\ndef random_unweighted_graph(n_vertices: int, \n                            edge_prob: float = 0.5, \n                            directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function returns the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    # Handle the trivial case\n    if n_vertices == 1:\n        return [[0]]\n\n    # Initialize adjacency matrix with zeros\n    adjacency = [[0 for _ in range(n_vertices)] for _ in range(n_vertices)]\n\n    # For undirected graphs, consider each unordered pair once\n    if not directed:\n        # Generate all combinations of vertices (unordered pairs)\n        for i, j in combinations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                adjacency[i][j] = 1\n                adjacency[j][i] = 1\n    else:\n        # For directed graphs, consider all ordered pairs except self-loops\n        for i in range(n_vertices):\n            for j in range(n_vertices):\n                if i != j:\n                    if np.random.rand() <= edge_prob:\n                        adjacency[i][j] = 1\n\n    return adjacency\n```"}
{"task_id": 269, "completion_id": 0, "completion": "```python\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # Parameters in the first fully-connected layer:\n    # weights: state_dimensions * 164\n    # biases: 164\n    first_layer_params = (state_dimensions * 164) + 164\n\n    # Parameters in the second fully-connected layer:\n    # weights: 164 * action_dimensions\n    # biases: action_dimensions\n    second_layer_params = (164 * action_dimensions) + action_dimensions\n\n    # Total parameters\n    total_params = first_layer_params + second_layer_params\n\n    return total_params\n```"}
{"task_id": 270, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    # Compute expected rewards for each arm: shape (K,)\n    expected_rewards = np.sum(context * thetas, axis=0)\n    \n    # Find the maximum reward\n    max_reward = np.max(expected_rewards)\n    \n    # Round the maximum reward to 4 decimal places\n    rounded_reward = round(max_reward, 4)\n    \n    # Find all arms with expected reward equal to max_reward\n    candidate_arms = np.where(expected_rewards == max_reward)[0]\n    \n    # Among candidates, select the one with the smallest index\n    best_arm = candidate_arms[0]\n    \n    return rounded_reward, best_arm\n```"}
{"task_id": 271, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n\n    # Compute gradients for left and right\n    g_left = np.array([pred - true for pred, true in zip(left_pred, left_true)])\n    g_right = np.array([pred - true for pred, true in zip(right_pred, right_true)])\n\n    # Sum of gradients\n    G_left = np.sum(g_left)\n    G_right = np.sum(g_right)\n\n    # Hessians are 1 for each sample\n    H_left = len(g_left)\n    H_right = len(g_right)\n\n    # Parent node sums\n    G_parent = G_left + G_right\n    H_parent = H_left + H_right\n\n    # Compute the gain\n    gain = 0.5 * (\n        (G_left ** 2) / H_left +\n        (G_right ** 2) / H_right -\n        (G_parent ** 2) / H_parent\n    )\n\n    # Round to 4 decimal places\n    gain_rounded = round(gain, 4)\n\n    # Return 0.0 if gain is exactly 0\n    if gain_rounded == 0:\n        return 0.0\n    return gain_rounded\n```"}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier processing\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # If all feature values are identical, no split is possible\n    unique_values = np.unique(feature)\n    if len(unique_values) == 1:\n        return (None, 0.0)\n\n    # Compute the entropy of the parent node\n    def entropy(labels):\n        total = len(labels)\n        counts = Counter(labels)\n        ent = 0.0\n        for count in counts.values():\n            p = count / total\n            ent -= p * math.log2(p)\n        return ent\n\n    parent_entropy = entropy(target)\n    n = len(target)\n\n    # Generate candidate thresholds: midpoints between consecutive distinct feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n\n    thresholds = []\n    for i in range(len(sorted_feature) - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            t = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n            thresholds.append(t)\n\n    # Initialize variables to track the best split\n    max_info_gain = -1\n    best_threshold = None\n\n    for t in thresholds:\n        # Split data\n        left_mask = feature < t\n        right_mask = ~left_mask\n\n        # If either side is empty, skip\n        if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n            continue\n\n        # Compute entropies for left and right splits\n        left_labels = target[left_mask]\n        right_labels = target[right_mask]\n\n        H_left = entropy(left_labels)\n        H_right = entropy(right_labels)\n\n        # Compute weighted average entropy\n        weight_left = len(left_labels) / n\n        weight_right = len(right_labels) / n\n        info_loss = weight_left * H_left + weight_right * H_right\n\n        # Compute information gain\n        info_gain = parent_entropy - info_loss\n\n        # Update best split if needed\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = t\n        elif math.isclose(info_gain, max_info_gain, rel_tol=1e-9):\n            # Tie: choose the smaller threshold\n            if best_threshold is None or t < best_threshold:\n                best_threshold = t\n\n    # If no positive information gain, return (None, 0.0)\n    if max_info_gain <= 0:\n        return (None, 0.0)\n\n    # Round results to 4 decimal places\n    threshold_rounded = round(best_threshold, 4)\n    info_gain_rounded = round(max_info_gain, 4)\n\n    return (threshold_rounded, info_gain_rounded)\n```"}
{"task_id": 274, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    # Convert input to a numpy array for easy processing\n    arr = np.array(values)\n    # Clip the array elements to the range [-5, 5]\n    clipped_arr = np.clip(arr, -5, 5)\n    # Convert back to a list of floats\n    return clipped_arr.tolist()\n```"}
{"task_id": 276, "completion_id": 0, "completion": "```python\nimport math\nimport string\nfrom collections import Counter\n\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float = 1.0, unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\n\n    The model is trained on *corpus* using the given *N* and *k* (smoothing\n    parameter).  All details of tokenisation, padding, vocabulary construction\n    and probability estimation are described in the task specification.\n\n    Args:\n        corpus: List of training sentences.\n        sentence: The sentence whose probability needs to be computed.\n        N: Order of the model (1 for unigram, 2 for bigram, etc.).\n        k: Additive smoothing parameter (default 1.0).\n        unk: If True, unseen tokens are mapped to a special <unk> symbol.\n\n    Returns:\n        A single float, rounded to 4 decimal places, representing the base-10\n        logarithm of the sentence probability.\n    \"\"\"\n\n    # Helper function to clean and tokenize a sentence\n    def tokenize(s):\n        tokens = s.lower().split()\n        tokens = [token.strip(string.punctuation) for token in tokens]\n        return tokens\n\n    # Build vocabulary from corpus\n    vocab = set()\n    token_counts = Counter()\n\n    # Tokenize corpus and count tokens\n    tokenized_corpus = []\n    for sent in corpus:\n        tokens = tokenize(sent)\n        tokenized_corpus.append(tokens)\n        token_counts.update(tokens)\n\n    # Add <unk> token if needed\n    if unk:\n        vocab.add(\"<unk>\")\n        token_counts[\"<unk>\"] = 0  # ensure <unk> is in vocab\n\n    # Final vocabulary\n    vocab.update(token_counts.keys())\n\n    # Map tokens to <unk> if needed\n    def map_token(token):\n        if unk and token not in token_counts:\n            return \"<unk>\"\n        return token\n\n    # Function to generate padded N-grams from a token list\n    def generate_ngrams(tokens):\n        # Pad with <bol> and <eol>\n        padding = [\"<bol>\"] * (N - 1)\n        padded_tokens = padding + tokens + [\"<eol>\"]\n        ngrams = []\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i+N])\n            ngrams.append(ngram)\n        return ngrams\n\n    # Build counts for N-grams and (N-1)-grams (for denominator)\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n\n    # Build counts from corpus\n    for sent in tokenized_corpus:\n        tokens = [map_token(t) for t in sent]\n        ngrams = generate_ngrams(tokens)\n        for ngram in ngrams:\n            ngram_counts[ngram] += 1\n        # For denominator, count (N-1)-grams (prefixes)\n        for i in range(len(ngrams)):\n            prefix = ngrams[i][:-1]\n            prefix_counts[prefix] += 1\n\n    # Process target sentence\n    target_tokens = tokenize(sentence)\n    target_tokens = [map_token(t) for t in target_tokens]\n    target_ngrams = generate_ngrams(target_tokens)\n\n    # Vocabulary size\n    V = len(vocab)\n\n    # Compute total count for unigrams (for N=1)\n    if N == 1:\n        total_count = sum(ngram_counts.values())\n\n    log_prob = 0.0\n\n    for ngram in target_ngrams:\n        prefix = ngram[:-1]\n        word = ngram[-1]\n\n        # Count of the prefix\n        prefix_count = prefix_counts[prefix] if prefix in prefix_counts else 0\n\n        # Count of the n-gram\n        ngram_count = ngram_counts[ngram] if ngram in ngram_counts else 0\n\n        # Apply smoothing\n        numerator = ngram_count + k\n        denominator = prefix_count + k * V\n\n        prob = numerator / denominator\n\n        # Add log10 probability\n        log_prob += math.log10(prob)\n\n    # Round to 4 decimal places\n    return round(log_prob, 4)\n```"}
{"task_id": 277, "completion_id": 0, "completion": "```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    # Check if 'action_space' is a tuple or dict\n    tuple_action = isinstance(env.get(\"action_space\"), (tuple, dict))\n    # Check if 'observation_space' is a tuple or dict\n    tuple_obs = isinstance(env.get(\"observation_space\"), (tuple, dict))\n    return (tuple_action, tuple_obs)\n```"}
{"task_id": 278, "completion_id": 0, "completion": "```python\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    current_node = tree\n    while True:\n        # Check if current node is a leaf node\n        if 'value' in current_node:\n            return current_node['value']\n        # Otherwise, it's an internal node\n        feature_i = current_node['feature_i']\n        threshold = current_node['threshold']\n        # Decide which branch to follow\n        if sample[feature_i] <= threshold:\n            current_node = current_node['true_branch']\n        else:\n            current_node = current_node['false_branch']\n```"}
{"task_id": 279, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier computation\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    N = len(y_true)\n    \n    # Compute MSE\n    mse = np.mean((y_pred - y_true) ** 2)\n    \n    # Compute gradient: 2/N * (y_pred - y_true)\n    gradient = (2 / N) * (y_pred - y_true)\n    \n    # Convert gradient to list of floats rounded to 4 decimal places\n    gradient_list = [round(float(g), 4) for g in gradient]\n    \n    # Compute classification accuracy\n    # Map predictions to binary classes with threshold 0.5\n    y_pred_class = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(y_pred_class == y_true)\n    \n    # Round all scalar outputs to 4 decimal places\n    mse_rounded = round(float(mse), 4)\n    accuracy_rounded = round(float(accuracy), 4)\n    \n    return mse_rounded, gradient_list, accuracy_rounded\n```"}
{"task_id": 280, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    # Compute the regularization value or gradient\n    if return_grad:\n        # Gradient: alpha * w\n        grad = alpha * w\n        # Round each element to 4 decimal places\n        grad_rounded = np.round(grad, 4)\n        return grad_rounded\n    else:\n        # Regularization value: 0.5 * alpha * sum of squares\n        val = 0.5 * alpha * np.sum(w ** 2)\n        # Round to 4 decimal places\n        return round(val, 4)\n```"}
{"task_id": 281, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    class L1Reg:\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w):\n            \"\"\"Compute the L1 penalty for weight vector w.\"\"\"\n            return self.alpha * np.sum(np.abs(w))\n\n        def grad(self, w):\n            \"\"\"Compute the gradient of the L1 penalty with respect to w.\"\"\"\n            # sign(w): 1 for positive, -1 for negative, 0 for zero\n            # Handle zero elements explicitly to return 0\n            gradient = np.sign(w)\n            # For alpha=0, gradient should be zero\n            if self.alpha == 0:\n                return np.zeros_like(w)\n            return self.alpha * gradient\n\n    return L1Reg(alpha)\n```"}
{"task_id": 282, "completion_id": 0, "completion": "```python\nimport math\n\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    n = 0\n    m = 0.0\n    s = 0.0\n\n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n\n    if n > 1:\n        variance = s / (n - 1)\n        std_dev = math.sqrt(variance)\n    else:\n        variance = 0.0\n        std_dev = 0.0\n\n    return (round(m, 4), round(variance, 4), round(std_dev, 4))\n```"}
{"task_id": 283, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    # Compute the predicted probabilities using sigmoid\n    p = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradients g_i = p_i - y_i\n    g = p - actual\n    \n    # Compute Hessians h_i = p_i * (1 - p_i)\n    h = p * (1 - p)\n    \n    # Sum of gradients and Hessians\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    \n    # Compute leaf value\n    leaf_value = sum_g / (sum_h + regularization)\n    \n    # Compute gain\n    gain = 0.5 * (sum_g ** 2) / (sum_h + regularization)\n    \n    # Round to 4 decimal places\n    leaf_value = round(leaf_value, 4)\n    gain = round(gain, 4)\n    \n    return [leaf_value, gain]\n```"}
{"task_id": 284, "completion_id": 0, "completion": "```python\ndef iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n\n    # If the object is already in the table, return its index\n    if obj in table:\n        return table[obj]\n\n    # If the table is not full, insert the new object\n    if len(table) < size:\n        if not readonly:\n            index = len(table)\n            table[obj] = index\n            return index\n        else:\n            # Readonly mode: object not in table, cannot insert\n            return None\n\n    # Table is full\n    # If readonly, do not insert, just return None\n    if readonly:\n        return None\n\n    # Not readonly: assign index based on hash collision\n    hash_index = hash(obj) % size\n    # Increment collision count\n    overfull_count[0] += 1\n    return hash_index\n```"}
{"task_id": 285, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    # Reshape 1-D arrays to 2-D row vectors\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    \n    # Check if feature dimensions match\n    if x.shape[1] != y.shape[1]:\n        return -1\n    \n    # Compute the Gram matrix\n    gram_matrix = x @ y.T\n    \n    # Convert to list of lists\n    return gram_matrix.tolist()\n```"}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    rows, cols = shape\n    rng = random.Random(seed)\n    return [[rng.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    # Look for the object in the global namespace\n    obj = globals().get(name)\n    # Check if the object exists and is callable\n    if callable(obj):\n        return obj\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output dimensions\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Initialize pooled output\n    pooled = np.zeros((N, C, out_h, out_w))\n    # Initialize gradient input\n    grad_input = np.zeros_like(X)\n\n    # Forward pass: compute pooled output\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    window = X[n, c, h_start:h_start + p_h, w_start:w_start + p_w]\n                    pooled[n, c, i, j] = np.mean(window)\n\n    # Backward pass: distribute gradients\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    window_grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += window_grad\n\n    # Round to 4 decimal places\n    pooled_rounded = np.round(pooled, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n\n    # Convert to lists\n    return pooled_rounded.tolist(), grad_input_rounded.tolist()\n```"}
{"task_id": 288, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    # Helper function to check if input is a scalar\n    def is_scalar(x):\n        return isinstance(x, (int, float, np.number))\n    \n    # Handle scalar case\n    if is_scalar(actual) and is_scalar(predicted):\n        return round((actual - predicted) ** 2, 4)\n    \n    # Convert inputs to numpy arrays for easier handling\n    try:\n        actual_arr = np.array(actual)\n        predicted_arr = np.array(predicted)\n    except Exception:\n        return -1\n    \n    # Check if inputs are 1D\n    if actual_arr.ndim != 1 or predicted_arr.ndim != 1:\n        return -1\n    \n    # Check for length mismatch or empty arrays\n    if len(actual_arr) == 0 or len(predicted_arr) == 0 or len(actual_arr) != len(predicted_arr):\n        return -1\n    \n    # Compute mean squared error\n    mse = np.mean((actual_arr - predicted_arr) ** 2)\n    return round(mse, 4)\n```"}
{"task_id": 289, "completion_id": 0, "completion": "```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    if not entries:\n        return \"\"\n    # Format each entry as 'field: \"value\"'\n    formatted_lines = [f'{field}: \"{value}\"' for field, value in entries]\n    # Join all lines with a newline, without adding an extra newline at the end\n    return \"\\n\".join(formatted_lines)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Both are leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    \n    # Both are internal nodes\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check feature indices\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Check thresholds with tolerance\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        # Recursively compare left and right subtrees\n        left_equal = compare_trees(tree_a.left, tree_b.left)\n        right_equal = compare_trees(tree_a.right, tree_b.right)\n        return left_equal and right_equal\n    \n    # One is leaf, the other is node - not equivalent\n    return False\n```"}
{"task_id": 291, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    # Validate input\n    if not isinstance(n_components, int):\n        return -1\n    m, d = X.shape\n    if n_components < 1 or n_components > d:\n        return -1\n\n    # Compute the covariance matrix\n    cov_matrix = np.cov(X, rowvar=False)\n\n    # Eigen decomposition\n    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n\n    # Select the first n eigenvectors\n    principal_components = eigenvectors_sorted[:, :n_components]\n\n    # Ensure deterministic sign: multiply eigenvector by -1 if its first element is negative\n    for i in range(n_components):\n        if principal_components[0, i] < 0:\n            principal_components[:, i] *= -1\n\n    # Project data onto the selected principal components\n    projected_data = np.dot(X, principal_components)\n\n    # Round to 4 decimal places\n    projected_data_rounded = np.round(projected_data, 4)\n\n    # Convert to list of lists\n    return projected_data_rounded.tolist()\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert input lists to numpy arrays for easy slicing\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    \n    # Validate shape\n    if p1.shape != p2.shape:\n        return -1\n    \n    # Determine the number of columns\n    num_cols = p1.shape[1]\n    \n    # Validate cutoff\n    if not (0 <= cutoff <= num_cols):\n        # If cutoff is out of bounds, treat as invalid input\n        return -1\n    \n    # Create children matrices\n    # Columns before cutoff are from respective parents\n    child1 = np.hstack((p1[:, :cutoff], p2[:, cutoff:]))\n    child2 = np.hstack((p2[:, :cutoff], p1[:, cutoff:]))\n    \n    # Convert back to lists of lists\n    return (child1.tolist(), child2.tolist())\n```"}
{"task_id": 293, "completion_id": 0, "completion": "```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Define the mapping dictionary with normalized keys\n    mapping = {\n        'dqn': ('CartPole-v0', 'unwrapped'),\n        'ddpg': ('Pendulum-v0', 'env'),\n        'a3c': ('Pendulum-v0', 'unwrapped'),\n        'a2c': ('CartPole-v0', 'env'),\n        'a2c_multi': ('CartPole-v0', 'raw'),\n        'trpo': ('Pendulum-v0', 'unwrapped')\n    }\n\n    # Normalize the input agent name\n    normalized_name = agent_name.strip().lower()\n\n    # Return the corresponding tuple if found, else -1\n    return mapping.get(normalized_name, -1)\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G.get('is_directed', False)\n    V2I = G.get('_V2I', {})\n    G_list = G.get('_G', [])\n\n    # Initialize adjacency dictionary with all vertices, even isolated ones\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in V2I}\n\n    # To avoid duplicate edges in undirected graphs, keep track of processed edges\n    processed_edges = set()\n\n    for edges in G_list:\n        for source_label, target_label, weight in edges:\n            # Add edge from source to target\n            adj[source_label].append((target_label, weight))\n            if not is_directed:\n                # For undirected graphs, add the reverse edge if not already added\n                edge_id = tuple(sorted([source_label, target_label]))\n                if edge_id not in processed_edges:\n                    adj[target_label].append((source_label, weight))\n                    processed_edges.add(edge_id)\n\n    # Sort neighbor lists alphabetically by neighbor label\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n\n    return adj\n```"}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    arr = np.asarray(x)\n    \n    # For boolean arrays, True and False are acceptable (equivalent to 1 and 0)\n    # For other types, check if all elements are either 0 or 1\n    # Use np.isin to check if elements are in [0, 1]\n    return np.all(np.isin(arr, [0, 1]))\n```"}
{"task_id": 297, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    # Validate feature_range\n    a, b = feature_range\n    if a >= b:\n        return -1\n\n    # Convert data to numpy array for easier manipulation\n    data_np = np.array(data, dtype=float)\n\n    # Initialize scaled data array\n    scaled_data = np.empty_like(data_np)\n\n    # Process each feature (column)\n    for col_idx in range(data_np.shape[1]):\n        col = data_np[:, col_idx]\n        min_val = np.min(col)\n        max_val = np.max(col)\n\n        # Handle constant feature (max == min)\n        if max_val == min_val:\n            # Set all values in this column to the lower bound 'a'\n            scaled_col = np.full_like(col, a)\n        else:\n            # Compute scaled values\n            scaled_col = ((col - min_val) / (max_val - min_val)) * (b - a) + a\n\n        # Assign scaled column back\n        scaled_data[:, col_idx] = scaled_col\n\n    # Replace nan, inf, -inf with 0.0\n    scaled_data = np.nan_to_num(scaled_data, nan=0.0, posinf=0.0, neginf=0.0)\n\n    # Round to 4 decimal places\n    scaled_data = np.round(scaled_data, 4)\n\n    # Convert back to list of lists\n    return scaled_data.tolist()\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    # Special tokens\n    BOL = \"<bol>\"\n    EOL = \"<eol>\"\n\n    # Tokenize corpus and query\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.strip().split()\n        corpus_tokens.append(tokens)\n\n    query_tokens = query.strip().split()\n\n    # Handle edge case: N=1 (unigrams)\n    # For N=1, no padding is needed\n    # For N>1, pad each sentence with N-1 <bol> tokens at start and one <eol> at end\n    if N == 1:\n        # For unigrams, just count tokens\n        total_tokens = 0\n        unigram_counts = Counter()\n        for tokens in corpus_tokens:\n            unigram_counts.update(tokens)\n            total_tokens += len(tokens)\n    else:\n        # For N>1, pad sentences\n        padded_corpus = []\n        for tokens in corpus_tokens:\n            padded_tokens = [BOL] * (N - 1) + tokens + [EOL]\n            padded_corpus.append(padded_tokens)\n\n        # Count N-grams and (N-1)-grams\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n\n        for tokens in padded_corpus:\n            for i in range(len(tokens) - N + 1):\n                ngram = tuple(tokens[i:i+N])\n                prefix = tuple(tokens[i:i+N-1])\n                ngram_counts[ngram] += 1\n                prefix_counts[prefix] += 1\n\n        # For query, pad similarly\n        padded_query = [BOL] * (N - 1) + query_tokens + [EOL]\n        # Generate N-grams from query\n        query_ngrams = []\n        for i in range(len(padded_query) - N + 1):\n            ngram = tuple(padded_query[i:i+N])\n            query_ngrams.append(ngram)\n\n        # Compute total count for unigrams (for N=1)\n        total_tokens = sum(ngram_counts.values())\n\n    # For N=1, counts are stored differently\n    if N == 1:\n        # For unigrams, total tokens and counts are available\n        # Compute probabilities for each token in query\n        total_count = total_tokens\n        # For each token in query, get count\n        log_prob_sum = 0.0\n        for token in query_tokens:\n            count = unigram_counts.get(token, 0)\n            if count == 0:\n                return float('-inf')\n            prob = count / total_count\n            log_prob_sum += math.log(prob)\n        return round(log_prob_sum, 4)\n\n    else:\n        # For N>1, compute probabilities for each N-gram in query\n        log_prob_sum = 0.0\n        for ngram in query_ngrams:\n            prefix = ngram[:-1]\n            count_ngram = ngram_counts.get(ngram, 0)\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n            log_prob_sum += math.log(prob)\n\n        return round(log_prob_sum, 4)\n```"}
{"task_id": 299, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom __future__ import annotations\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    m, n = X.shape\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n\n    # Initialize cluster assignments\n    labels = [-1] * m\n\n    for iteration in range(max_iterations):\n        # Step 1: Assign samples to the closest centroid\n        new_labels = []\n        for i in range(m):\n            # Compute distances to each centroid\n            distances = np.linalg.norm(X[i] - centroids, axis=1)\n            # Assign to the closest centroid\n            new_labels.append(int(np.argmin(distances)))\n\n        # Check for convergence\n        if new_labels == labels:\n            break\n        labels = new_labels\n\n        # Step 2: Recompute centroids\n        for cluster_idx in range(k):\n            # Get all samples assigned to this cluster\n            cluster_points = X[np.array(labels) == cluster_idx]\n            if len(cluster_points) > 0:\n                # Update centroid as mean of cluster points\n                centroids[cluster_idx] = np.mean(cluster_points, axis=0)\n            else:\n                # Keep centroid unchanged if cluster is empty\n                pass\n\n    return labels\n```"}
{"task_id": 300, "completion_id": 0, "completion": "```python\nimport heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str = \"largest\") -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    # Handle edge cases\n    if k <= 0 or not sequence:\n        return []\n\n    n = len(sequence)\n    # If k >= len(sequence), return the entire sequence sorted according to order\n    if k >= n:\n        return sorted(sequence, reverse=(order == \"largest\"))\n\n    # Initialize heap\n    heap = []\n\n    if order == \"largest\":\n        # For largest, maintain a min-heap of size k\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                # If current number is larger than the smallest in heap, replace\n                if num > heap[0]:\n                    heapq.heapreplace(heap, num)\n        # heap contains the k largest elements, but in min-heap order\n        # To return in non-increasing order, sort descending\n        result = sorted(heap, reverse=True)\n\n    elif order == \"smallest\":\n        # For smallest, maintain a max-heap of size k\n        # Python's heapq is a min-heap, so insert negatives to simulate max-heap\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, -num)\n            else:\n                # If current number is smaller than the largest in heap (which is -heap[0])\n                if num < -heap[0]:\n                    heapq.heapreplace(heap, -num)\n        # heap contains the k smallest elements as negatives\n        # Convert back and sort ascending\n        result = sorted([-x for x in heap])\n    else:\n        raise ValueError(\"Order must be either 'largest' or 'smallest'.\")\n\n    return result\n```"}
{"task_id": 301, "completion_id": 0, "completion": "```python\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n\n    class Node:\n        def __init__(self, key, val):\n            self.key = key\n            self.val = val\n            self.left = None\n            self.right = None\n\n        # Comparison operators based on val\n        def __lt__(self, other):\n            return self.val < other.val\n\n        def __le__(self, other):\n            return self.val <= other.val\n\n        def __gt__(self, other):\n            return self.val > other.val\n\n        def __ge__(self, other):\n            return self.val >= other.val\n\n    def insert(root, node):\n        \"\"\"Insert node into BST rooted at root following the rules.\"\"\"\n        if node < root:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n        else:\n            # node >= root\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n\n    def inorder_traversal(node):\n        \"\"\"In-order traversal that yields nodes.\"\"\"\n        if node is not None:\n            yield from inorder_traversal(node.left)\n            yield node\n            yield from inorder_traversal(node.right)\n\n    if not pairs:\n        return []\n\n    # Build the BST\n    root = Node(pairs[0][0], pairs[0][1])\n    for key, val in pairs[1:]:\n        insert(root, Node(key, val))\n\n    # Collect keys during in-order traversal\n    return [node.key for node in inorder_traversal(root)]\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            weight = 1.0 / (1.0 + dist)\n            W[i, j] = weight\n            W[j, i] = weight\n    # Diagonal remains zero\n    \n    # Step 2: Compute the unnormalized graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Compute the first k eigenvectors of L\n    # Since L is symmetric, eigenvalues are real\n    # We'll implement a simple eigen decomposition using numpy's eigvals and eigvecs\n    # For small datasets, this is acceptable\n    eigvals, eigvecs = np.linalg.eigh(L)\n    # eigvals are sorted in ascending order\n    # Select the first k eigenvectors\n    E = eigvecs[:, :k]\n    \n    # Step 4: Run k-means on rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k, :].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    max_iterations = 100\n    \n    for iteration in range(max_iterations):\n        # Assign each point to the nearest centroid\n        new_labels = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            new_labels[i] = np.argmin(distances)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        \n        # Update centroids\n        for cluster_idx in range(k):\n            cluster_points = E[labels == cluster_idx]\n            if len(cluster_points) == 0:\n                # Re-initialize centroid with a random row of E\n                rand_idx = np.random.randint(0, n_samples)\n                centroids[cluster_idx] = E[rand_idx]\n            else:\n                centroids[cluster_idx] = np.mean(cluster_points, axis=0)\n    \n    # Convert labels to list\n    return list(labels)\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Determine previous index (clamped at 0)\n    prev_idx = max(ix - 1, 0)\n\n    # Extract previous and current info\n    prev_mine, prev_label = params[prev_idx]\n    curr_mine, curr_label = params[ix]\n\n    # Build the formatted string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n\n    return debug_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (unused here).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused here).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar, a sequence (diagonal),\n           or a 2D array.\n        fit_intercept: If True, prepend a column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if needed\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n\n    # Handle prior mean mu\n    mu = np.array(mu)\n    if mu.ndim == 0:\n        mu = np.full(M, mu)\n    elif mu.ndim == 1:\n        if mu.shape[0] != M:\n            raise ValueError(\"Prior mean mu has incompatible shape.\")\n    else:\n        raise ValueError(\"Prior mean mu must be scalar or 1D array.\")\n\n    # Handle prior scale V\n    if V is None:\n        V_mat = np.eye(M)\n    elif np.isscalar(V):\n        V_mat = V * np.eye(M)\n    else:\n        V = np.array(V)\n        if V.ndim == 1:\n            V_mat = np.diag(V)\n        elif V.ndim == 2:\n            V_mat = V\n        else:\n            raise ValueError(\"V must be None, scalar, 1D, or 2D array.\")\n\n    # Compute V_inv\n    V_inv = np.linalg.inv(V_mat)\n\n    # Compute posterior covariance matrix (up to \u03c3\u00b2)\n    # \u03a3_b = (V^{-1} + X^T X)^{-1}\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n\n    # Compute posterior mean\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n\n    # Round to 4 decimal places\n    mu_b_rounded = np.round(mu_b, 4)\n\n    return mu_b_rounded.tolist()\n```"}
{"task_id": 305, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    # Convert input to a NumPy array for easy iteration\n    x_array = np.array(x, dtype=float)\n    result = []\n\n    for val in x_array:\n        if val >= 0:\n            # Use the stable form for non-negative x\n            sigmoid_val = 1 / (1 + np.exp(-val))\n        else:\n            # Use the stable form for negative x\n            exp_x = np.exp(val)\n            sigmoid_val = exp_x / (1 + exp_x)\n        # Round to 4 decimal places\n        result.append(round(sigmoid_val, 4))\n    return result\n```"}
{"task_id": 307, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    # Draw indices with replacement\n    idxs = np.random.randint(0, n_samples, size=n_samples)\n    # Index into X and y\n    X_sample = X[idxs]\n    y_sample = y[idxs]\n    return X_sample, y_sample\n```"}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    # Set default max_freq if not provided\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Helper functions for conversions\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert frequency limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters + 2 points evenly spaced in Mel scale\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel points back to Hz to get the filter edges\n    freq_points = mel_to_hz(mel_points)\n\n    # Compute the bin frequencies for the DFT\n    # The DFT bins are at k * fs / N for k in [0, N//2]\n    bin_freqs = np.linspace(0, fs / 2, N // 2 + 1)\n\n    # Initialize the filterbank matrix\n    filterbank = []\n\n    for i in range(n_filters):\n        # Initialize filter row with zeros\n        filter_row = np.zeros(N // 2 + 1)\n\n        # Define the left, center, and right frequencies of the triangle\n        f_left = freq_points[i]\n        f_center = freq_points[i + 1]\n        f_right = freq_points[i + 2]\n\n        # For each bin, compute the weight\n        for k, freq in enumerate(bin_freqs):\n            # Compute the slopes\n            left_slope = (freq - f_left) / (f_center - f_left) if f_center != f_left else 0\n            right_slope = (f_right - freq) / (f_right - f_center) if f_right != f_center else 0\n\n            # The filter value is the positive minimum of the two slopes\n            weight = max(0, min(left_slope, right_slope))\n            filter_row[k] = weight\n\n        # Normalize if required\n        if normalize:\n            # Compute the scale factor\n            scale = 2 / (f_center - f_left) if (f_center - f_left) != 0 else 0\n            filter_row = filter_row * scale\n\n        # Round to 4 decimal places\n        filterbank.append([round(w, 4) for w in filter_row])\n\n    return filterbank\n```"}
{"task_id": 309, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    # Compute the linear part: w^T x + w0\n    linear_terms = X @ w + w0  # shape: (m,)\n\n    # Compute the interaction terms\n    # First, compute (X v) which is shape (m, k)\n    XV = X @ v  # shape: (m, k)\n\n    # Compute (X^2) and (v^2)\n    X_squared = X ** 2  # shape: (m, n)\n    v_squared = v ** 2  # shape: (n, k)\n\n    # Compute (X^2) v^2: shape (m, k)\n    XV_squared = X_squared @ v_squared\n\n    # Compute the interaction term for each sample\n    # sum over f of [(X v)_f^2 - (X^2 v^2)_f]\n    interaction_terms = 0.5 * np.sum(XV ** 2 - XV_squared, axis=1)\n\n    # Final prediction\n    y_pred = linear_terms + interaction_terms\n\n    # Round to four decimal places and convert to list\n    return [round(val, 4) for val in y_pred]\n```"}
{"task_id": 310, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier computation\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    \n    # Validate that both inputs have the same non-zero length\n    if actual_arr.shape != predicted_arr.shape or actual_arr.size == 0:\n        return -1\n    \n    # Calculate the squared differences\n    squared_diff = (actual_arr - predicted_arr) ** 2\n    \n    # Compute the mean of squared differences\n    mse = np.mean(squared_diff)\n    \n    # Calculate the square root to get RMSE\n    rmse = np.sqrt(mse)\n    \n    # Round to 4 decimal places\n    return round(rmse, 4)\n```"}
{"task_id": 311, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    # Convert input to a NumPy array\n    np_arr = np.array(arr, copy=True)\n    # Create a copy to avoid modifying the original array\n    np_arr = np_arr.copy()\n    # Clip negative values to zero\n    np.maximum(np_arr, 0, out=np_arr)\n    # Convert to list of floats\n    return np_arr.tolist()\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # Handle special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Determine N based on symmetric or periodic\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n\n    # Generate n array\n    n = np.arange(0, window_len)\n\n    # For periodic, generate with length N+1 and discard last\n    if not symmetric:\n        n_periodic = np.arange(0, window_len + 1)\n        # Compute window with length N+1\n        window = (a0\n                  - a1 * np.cos(2 * np.pi * n_periodic / N)\n                  + a2 * np.cos(4 * np.pi * n_periodic / N)\n                  - a3 * np.cos(6 * np.pi * n_periodic / N))\n        # Discard last element to make it periodic\n        window = window[:-1]\n    else:\n        # Symmetric case\n        window = (a0\n                  - a1 * np.cos(2 * np.pi * n / N)\n                  + a2 * np.cos(4 * np.pi * n / N)\n                  - a3 * np.cos(6 * np.pi * n / N))\n    \n    # Round to 4 decimal places\n    window_rounded = np.round(window, 4).tolist()\n    return window_rounded\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    # Convert input to float for safety\n    x = float(x)\n    \n    # Use recursion to shift x to a value >= 6\n    result = 0.0\n    while x < 6:\n        result -= 1.0 / x\n        x += 1.0\n    \n    # Apply asymptotic expansion for large x\n    # \u03c8(x) \u2248 ln x - 1/(2x) - 1/(12x^2) + 1/(120x^4) - 1/(252x^6)\n    inv_x = 1.0 / x\n    inv_x2 = inv_x * inv_x\n    inv_x4 = inv_x2 * inv_x2\n    inv_x6 = inv_x4 * inv_x2\n    \n    psi_approx = (math.log(x)\n                  - 0.5 * inv_x\n                  - (1.0 / 12.0) * inv_x2\n                  + (1.0 / 120.0) * inv_x4\n                  - (1.0 / 252.0) * inv_x6)\n    \n    return result + psi_approx\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    # Convert gamma to numpy array if it's a list\n    gamma_array = np.array(gamma)\n    \n    # Extract the relevant row\n    gamma_d = gamma_array[d, :]\n    \n    # Compute sum of gamma parameters for the d-th row\n    gamma_sum = np.sum(gamma_d)\n    \n    # Compute \u03c8(gamma[d,t]) and \u03c8(sum(gamma[d,:]))\n    psi_gamma_t = digamma(gamma_d[t])\n    psi_sum = digamma(gamma_sum)\n    \n    # Calculate the expectation\n    expectation = psi_gamma_t - psi_sum\n    \n    # Round to 4 decimal places\n    return round(expectation, 4)\n```"}
{"task_id": 315, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n\n    # Normalize input: lowercase, remove underscores\n    key = name.lower().replace('_', '')\n\n    # Define the loss functions\n    def mae(y_true, y_pred):\n        y_true = np.array(y_true)\n        y_pred = np.array(y_pred)\n        result = np.mean(np.abs(y_true - y_pred))\n        return round(result, 4)\n\n    def mse(y_true, y_pred):\n        y_true = np.array(y_true)\n        y_pred = np.array(y_pred)\n        result = np.mean((y_true - y_pred) ** 2)\n        return round(result, 4)\n\n    def cross_entropy(y_true, y_pred):\n        y_true = np.array(y_true)\n        y_pred = np.array(y_pred)\n        # Clip predictions to avoid log(0)\n        epsilon = 1e-15\n        p = np.clip(y_pred, epsilon, 1 - epsilon)\n        # Compute binary cross entropy\n        result = -np.mean(y_true * np.log(p) + (1 - y_true) * np.log(1 - p))\n        return round(result, 4)\n\n    # Map normalized keys to functions\n    loss_map = {\n        'mae': mae,\n        'meanabsoluteerror': mae,\n        'mse': mse,\n        'meansquarederror': mse,\n        'crossentropy': cross_entropy,\n        'logloss': cross_entropy,\n        'ce': cross_entropy\n    }\n\n    if key not in loss_map:\n        raise ValueError(\"Invalid loss function.\")\n\n    return loss_map[key]\n```"}
{"task_id": 316, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    arr_x = np.array(x)\n    arr_y = np.array(y)\n    \n    # Check if vectors have the same length\n    if arr_x.shape != arr_y.shape:\n        return -1\n    \n    # Compute Euclidean distance\n    distance = np.sqrt(np.sum((arr_x - arr_y) ** 2))\n    \n    # Return rounded result\n    return round(distance, 4)\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine previous index, ensuring it doesn't go below 0\n    prev_idx = max(ix - 1, 0)\n\n    # Extract previous prediction and label\n    prev_prediction, prev_label = params[prev_idx]\n    # Extract current prediction and label\n    curr_prediction, curr_label = params[ix]\n\n    # Get the gold texts for previous and current labels\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n\n    # Build the string with the exact format\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\\n\"\n    )\n\n    return debug_str\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Initialize weights uniformly\n    weights = np.ones(n_samples) / n_samples\n\n    # Store the parameters of each weak learner\n    classifiers = []\n\n    for m in range(n_estimators):\n        # Initialize variables to store the best stump\n        min_error = float('inf')\n        best_stump = {}\n        # Loop over all features\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            # Get unique values to consider as thresholds\n            thresholds = np.unique(feature_values)\n            # To consider thresholds between unique values, we can take midpoints\n            candidate_thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n            # Also consider thresholds below min and above max\n            candidate_thresholds = np.concatenate((\n                [thresholds[0] - 1],\n                candidate_thresholds,\n                [thresholds[-1] + 1]\n            ))\n\n            for threshold in candidate_thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions\n                    predictions = np.ones(n_samples)\n                    predictions[feature_values * polarity < threshold * polarity] = -1\n\n                    # Compute weighted error\n                    misclassified = predictions != y_train\n                    error = np.sum(weights * misclassified)\n\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature_idx': feature_idx,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'predictions': predictions\n                        }\n\n        # Compute alpha\n        epsilon = min_error\n        # To avoid division by zero or log(0), clip epsilon\n        epsilon = max(epsilon, 1e-10)\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n\n        # Save the weak learner parameters\n        classifiers.append({\n            'feature_idx': best_stump['feature_idx'],\n            'threshold': best_stump['threshold'],\n            'polarity': best_stump['polarity'],\n            'alpha': alpha\n        })\n\n        # Update weights\n        # Predictions of the current weak learner\n        predictions = np.ones(n_samples)\n        feature_values = X_train[:, best_stump['feature_idx']]\n        predictions[feature_values * best_stump['polarity'] < best_stump['threshold'] * best_stump['polarity']] = -1\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        # Normalize weights\n        weights /= np.sum(weights)\n\n    # Make final predictions on X_test\n    final_scores = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        feature_values = X_test[:, clf['feature_idx']]\n        predictions = np.ones(X_test.shape[0])\n        predictions[feature_values * clf['polarity'] < clf['threshold'] * clf['polarity']] = -1\n        final_scores += clf['alpha'] * predictions\n\n    # Final prediction is sign of the weighted sum\n    final_predictions = [1 if score >= 0 else -1 for score in final_scores]\n\n    return final_predictions\n```"}
{"task_id": 319, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float = 0.01, epochs: int = 1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Ensure y is a 1D array\n    y = y.flatten()\n\n    # Add bias column of ones to X\n    X_b = np.column_stack((np.ones(X.shape[0]), X))\n\n    # Initialize theta with zeros\n    theta = np.zeros(X_b.shape[1])\n\n    # Perform SGD for the specified number of epochs\n    for _ in range(epochs):\n        for i in range(X_b.shape[0]):\n            x_i = X_b[i]\n            y_i = y[i]\n            y_pred = np.dot(theta, x_i)\n            error = y_pred - y_i\n            theta -= learning_rate * error * x_i\n\n    # Round to 4 decimal places and convert to list\n    return np.round(theta, 4).tolist()\n```"}
{"task_id": 321, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    np.random.seed(42)\n\n    # Define the alphabet: space + lowercase + uppercase\n    alphabet = [' '] + list(string.ascii_lowercase) + list(string.ascii_uppercase)\n    # Map characters to indices\n    char_to_index = {ch: i for i, ch in enumerate(alphabet)}\n    index_to_char = {i: ch for i, ch in enumerate(alphabet)}\n\n    L = len(target)\n\n    # Convert target string to indices\n    target_indices = np.array([char_to_index.get(c, 0) for c in target])\n\n    # Initialize population: random strings\n    population_indices = np.random.randint(0, len(alphabet), size=(population_size, L))\n    # Keep track of the best individual found\n    best_individual = None\n    best_fitness = -np.inf\n\n    for gen in range(iterations):\n        # Compute fitness for each individual\n        # Map each individual to indices\n        # Calculate sum of absolute differences\n        diff = np.abs(population_indices - target_indices)\n        sum_diff = np.sum(diff, axis=1)\n        # Compute fitness\n        fitness = 1.0 / (sum_diff + 1e-6)\n\n        # Update best individual\n        max_idx = np.argmax(fitness)\n        if fitness[max_idx] > best_fitness:\n            best_fitness = fitness[max_idx]\n            best_individual = population_indices[max_idx].copy()\n\n        # Check if any individual matches the target exactly\n        if np.any(sum_diff == 0):\n            # Found perfect match\n            best_idx = np.where(sum_diff == 0)[0][0]\n            best_individual = population_indices[best_idx].copy()\n            break\n\n        # Selection: roulette wheel without replacement\n        # Normalize fitness to probabilities\n        total_fitness = np.sum(fitness)\n        if total_fitness == 0:\n            probabilities = np.ones(population_size) / population_size\n        else:\n            probabilities = fitness / total_fitness\n\n        # Select parents without replacement\n        # To avoid selecting the same individual multiple times, we can sample without replacement\n        # but probabilities sum to 1, so we use np.random.choice with replace=False\n        parent_indices = np.random.choice(\n            population_size, size=population_size, replace=True, p=probabilities\n        )\n\n        # Create next generation\n        new_population = []\n\n        # Shuffle parent indices for pairing\n        np.random.shuffle(parent_indices)\n\n        for i in range(0, population_size, 2):\n            # Select two parents\n            parent1_idx = parent_indices[i]\n            parent2_idx = parent_indices[(i + 1) % population_size]\n\n            parent1 = population_indices[parent1_idx]\n            parent2 = population_indices[parent2_idx]\n\n            # Crossover point\n            crossover_point = np.random.randint(1, L)\n\n            # Create children\n            child1 = np.concatenate([parent1[:crossover_point], parent2[crossover_point:]])\n            child2 = np.concatenate([parent2[:crossover_point], parent1[crossover_point:]])\n\n            # Mutation\n            for child in [child1, child2]:\n                mutation_mask = np.random.rand(L) < mutation_rate\n                # For each gene to mutate, assign a random character\n                num_mutations = np.sum(mutation_mask)\n                if num_mutations > 0:\n                    child[mutation_mask] = np.random.randint(0, len(alphabet), size=num_mutations)\n\n                new_population.append(child)\n\n        # If population size is odd, we might have one extra individual\n        # Trim if necessary\n        if len(new_population) > population_size:\n            new_population = new_population[:population_size]\n        elif len(new_population) < population_size:\n            # Fill the remaining with random individuals\n            remaining = population_size - len(new_population)\n            extra = np.random.randint(0, len(alphabet), size=remaining)\n            new_population.extend(extra)\n\n        # Update population\n        population_indices = np.array(new_population)\n\n    # Convert best individual indices back to string\n    best_string = ''.join(index_to_char[idx] for idx in best_individual)\n    return best_string\n```"}
{"task_id": 322, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # Clip predicted probabilities to avoid log(0)\n    p_clipped = np.clip(predicted, EPS, 1 - EPS)\n    \n    # Compute the binary cross-entropy for each element\n    bce = - (actual * np.log(p_clipped) + (1 - actual) * np.log(1 - p_clipped))\n    \n    # Calculate the mean BCE\n    mean_bce = np.mean(bce)\n    \n    # Round to 4 decimal places\n    return round(mean_bce, 4)\n```"}
{"task_id": 324, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    # Check if x and y have the same length\n    if len(x) != len(y):\n        return []\n\n    # Get image dimensions\n    rows, cols = X.shape[:2]\n    channels = X.shape[2] if X.ndim == 3 else 1\n\n    # Ensure X has 3 dimensions for uniform processing\n    if channels == 1 and X.ndim == 2:\n        X = X[:, :, np.newaxis]\n\n    result = []\n\n    for xi, yi in zip(x, y):\n        # Clip coordinates to be within image bounds\n        xi_clipped = np.clip(xi, 0, cols - 1)\n        yi_clipped = np.clip(yi, 0, rows - 1)\n\n        # Find the coordinates of the top-left corner\n        x0 = int(np.floor(xi_clipped))\n        y0 = int(np.floor(yi_clipped))\n        # Coordinates of the bottom-right corner\n        x1 = min(x0 + 1, cols - 1)\n        y1 = min(y0 + 1, rows - 1)\n\n        # Distances from the top-left corner\n        dx = xi_clipped - x0\n        dy = yi_clipped - y0\n\n        # Retrieve pixel values at the four surrounding points\n        top_left = X[y0, x0]\n        top_right = X[y0, x1]\n        bottom_left = X[y1, x0]\n        bottom_right = X[y1, x1]\n\n        # Bilinear interpolation for each channel\n        interpolated = []\n        for c in range(channels):\n            # Interpolate along x for top and bottom\n            top = top_left[c] * (1 - dx) + top_right[c] * dx\n            bottom = bottom_left[c] * (1 - dx) + bottom_right[c] * dx\n            # Interpolate along y\n            value = top * (1 - dy) + bottom * dy\n            # Round to 4 decimal places\n            interpolated.append(round(value, 4))\n        result.append(interpolated)\n\n    return result\n```"}
{"task_id": 326, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    X = np.array(X)\n    support_vectors = np.array(support_vectors)\n    lagr_multipliers = np.array(lagr_multipliers)\n    support_vector_labels = np.array(support_vector_labels)\n\n    n_samples, n_features = X.shape\n\n    # Set default gamma if not provided\n    if gamma is None:\n        gamma = 1.0 / n_features\n\n    predictions = []\n\n    for x in X:\n        # Compute kernel between support vectors and the current sample\n        if kernel == \"linear\":\n            # K(u, v) = u^T v\n            kernel_vals = support_vectors @ x\n        elif kernel == \"polynomial\":\n            # K(u, v) = (gamma * u^T v + coef)^power\n            kernel_vals = (gamma * (support_vectors @ x) + coef) ** power\n        elif kernel == \"rbf\":\n            # K(u, v) = exp(-gamma * ||u - v||^2)\n            # Efficient computation of squared Euclidean distances\n            diff = support_vectors - x  # shape: (m_support, n_features)\n            sq_dist = np.sum(diff ** 2, axis=1)\n            kernel_vals = np.exp(-gamma * sq_dist)\n        else:\n            raise ValueError(f\"Unsupported kernel type: {kernel}\")\n\n        # Compute decision function\n        decision_value = np.sum(lagr_multipliers * support_vector_labels * kernel_vals) + intercept\n\n        # Assign label based on decision value\n        label = 1 if decision_value >= 0 else -1\n        predictions.append(label)\n\n    return predictions\n```"}
{"task_id": 328, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # Validate inputs\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        # For positive frequencies, indices 0 to N//2\n        k = np.arange(0, N//2 + 1)\n        delta_f = fs / N\n        freqs = k * delta_f\n    else:\n        # For full spectrum, use np.fft.fftfreq\n        freqs = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimal places and convert to list\n    return np.round(freqs, 4).tolist()\n```"}
{"task_id": 330, "completion_id": 0, "completion": "```python\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    # Create copies to avoid mutating the originals\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n\n    # Extract nested dictionaries if they exist\n    nested_params = summary_dict.get(\"parameters\", {})\n    nested_hyperparams = summary_dict.get(\"hyperparameters\", {})\n\n    # Merge nested dictionaries into the top-level summary_dict\n    # (simulate flattening)\n    flattened_summary = {}\n    # Add all top-level keys except 'parameters' and 'hyperparameters'\n    for key, value in summary_dict.items():\n        if key not in (\"parameters\", \"hyperparameters\"):\n            flattened_summary[key] = value\n    # Add nested 'parameters' and 'hyperparameters' if they exist\n    flattened_summary.update(nested_params)\n    flattened_summary.update(nested_hyperparams)\n\n    # Update parameters if keys exist\n    for key in new_parameters:\n        if key in flattened_summary:\n            new_parameters[key] = flattened_summary[key]\n\n    # Update hyperparameters if keys exist\n    for key in new_hyperparameters:\n        if key in flattened_summary:\n            new_hyperparameters[key] = flattened_summary[key]\n\n    return new_parameters, new_hyperparameters\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier processing\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    n_samples, n_estimators = predictions.shape\n\n    # Initialize list to hold squared errors for samples with at least one OOB prediction\n    squared_errors = []\n\n    for i in range(n_samples):\n        # Find indices of trees where sample i is out-of-bag\n        oob_indices = np.where(oob_mask[i])[0]\n        if len(oob_indices) > 0:\n            # Average the OOB predictions for sample i\n            oob_preds = predictions[i, oob_indices]\n            mean_pred = np.mean(oob_preds)\n            # Compute squared error\n            se = (y_true[i] - mean_pred) ** 2\n            squared_errors.append(se)\n\n    if len(squared_errors) == 0:\n        return -1\n\n    mse = np.mean(squared_errors)\n    return round(mse, 4)\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n\n    # Step 1: Count support for each item across all transactions\n    item_counts = Counter()\n    for transaction in transactions:\n        # Count each item only once per transaction\n        unique_items = set(transaction)\n        item_counts.update(unique_items)\n\n    # Step 2: Filter items below min_support\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support}\n\n    # If no items meet min_support, return just the root\n    if not frequent_items:\n        return {\"support\": 0, \"children\": {}}\n\n    # Step 3: Determine global ordering of items\n    # Sort by decreasing support, then alphabetically\n    sorted_items = sorted(\n        [item for item in item_counts if item in frequent_items],\n        key=lambda x: (-item_counts[x], x)\n    )\n\n    # Create a mapping from item to its rank in the ordering for quick lookup\n    item_order = {item: index for index, item in enumerate(sorted_items)}\n\n    # Initialize the root node\n    root = {\"support\": 0, \"children\": {}}\n\n    # Step 4: Build the FP-Tree\n    for transaction in transactions:\n        # Remove duplicates\n        unique_items = set(transaction)\n        # Keep only frequent items\n        filtered_items = [item for item in unique_items if item in frequent_items]\n        # Reorder according to global ordering\n        ordered_items = sorted(filtered_items, key=lambda x: item_order[x])\n\n        # Walk from root, updating/adding nodes\n        current_node = root\n        current_node[\"support\"] += 1  # Increment support for root\n        for item in ordered_items:\n            children = current_node[\"children\"]\n            if item not in children:\n                # Create new node\n                children[item] = {\"support\": 0, \"children\": {}}\n            # Move down the tree\n            current_node = children[item]\n            # Increment support for this node\n            current_node[\"support\"] += 1\n\n    return root\n```"}
{"task_id": 333, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float = 0.1, num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    m, n = X.shape\n\n    # 1. Standardise features (z-score normalization)\n    means = np.mean(X, axis=0)\n    stds = np.std(X, axis=0) + 1e-8  # avoid division by zero\n    X_norm = (X - means) / stds\n\n    # 2. Add bias column of ones\n    X_aug = np.hstack((np.ones((m, 1)), X_norm))\n\n    # 3. Initialize theta parameters to zeros\n    theta = np.zeros(n + 1)\n\n    # 4. Gradient descent\n    for _ in range(num_iter):\n        z = X_aug @ theta\n        h = 1 / (1 + np.exp(-z))  # sigmoid function\n        gradient = (1/m) * (X_aug.T @ (h - y))\n        theta -= alpha * gradient\n\n    # 5. Compute probabilities and classify\n    z_final = X_aug @ theta\n    probs = 1 / (1 + np.exp(-z_final))\n    preds = (probs >= 0.5).astype(int)\n\n    # 6. Return as list\n    return preds.tolist()\n```"}
{"task_id": 334, "completion_id": 0, "completion": "```python\nimport math\n\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n\n    # Compute the base factors\n    model_dim_factor = model_dim ** -0.5\n    step_factor = min(step ** -0.5, step * (warmup_steps ** -1.5))\n    lr = scale_factor * model_dim_factor * step_factor\n\n    return round(lr, 9)\n```"}
{"task_id": 335, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    name_lower = name.lower()\n\n    if name_lower == \"zeros\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.zeros(shape)\n        return initializer\n\n    elif name_lower == \"ones\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.ones(shape) * scale\n        return initializer\n\n    elif name_lower == \"normal\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n        return initializer\n\n    elif name_lower == \"glorot_uniform\":\n        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            if len(shape) < 2:\n                raise ValueError(\"Shape must have at least two dimensions for glorot_uniform initialization.\")\n            fan_in, fan_out = shape[0], shape[1]\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(low=-limit, high=limit, size=shape)\n        return initializer\n\n    else:\n        raise ValueError(f\"Unknown initializer name: {name}\")\n```"}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(\n    X: list[list[int | float]] | \"np.ndarray\",\n    Y: list[list[int | float]] | \"np.ndarray\" | None = None,\n    c0: int | float = 0\n) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n\n    # Convert inputs to numpy arrays for uniform processing\n    X_np = np.array(X, dtype=float)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y, dtype=float)\n\n    # Check shape compatibility\n    if X_np.ndim != 2 or Y_np.ndim != 2:\n        return -1\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n\n    # Compute the dot product matrix\n    K = np.dot(X_np, Y_np.T) + c0\n\n    # Round to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, 4).tolist()\n\n    return K_rounded\n```"}
{"task_id": 337, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    # Check if input coordinate lists are empty\n    if not x or not y:\n        return []\n\n    # Convert coordinate lists to numpy arrays for vectorized operations\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n\n    # Round coordinates using numpy's banker\u2019s rounding\n    x_round = np.around(x_arr).astype(int)\n    y_round = np.around(y_arr).astype(int)\n\n    # Clip indices to be within image bounds\n    in_rows, in_cols, channels = X.shape\n    x_clipped = np.clip(x_round, 0, in_cols - 1)\n    y_clipped = np.clip(y_round, 0, in_rows - 1)\n\n    # Fetch pixel values at the rounded and clipped indices\n    # Using advanced indexing for all coordinates at once\n    pixels = X[y_clipped, x_clipped, :]\n\n    # Convert to list of lists\n    return pixels.tolist()\n```"}
{"task_id": 338, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"\n    Computes the Ridge Regression weights using the closed-form solution.\n    \n    Parameters:\n    X (array-like): Feature matrix of shape (n_samples, n_features)\n    y (array-like): Target vector of shape (n_samples,)\n    reg_factor (float): Regularization factor (alpha), >= 0\n    \n    Returns:\n    list: Coefficients including bias term, rounded to 4 decimal places\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Append a column of ones to X for the bias term\n    n_samples = X.shape[0]\n    X_b = np.hstack((np.ones((n_samples, 1)), X))\n    \n    # Compute the matrix to invert: (X\u0304^T X\u0304 + \u03b1 I)\n    # Regularize all coefficients, including bias\n    d_plus_one = X_b.shape[1]\n    A = X_b.T @ X_b + reg_factor * np.eye(d_plus_one)\n    \n    # Compute the weights\n    w = np.linalg.inv(A) @ X_b.T @ y\n    \n    # Round each coefficient to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 339, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n\n    # Count the frequency of each element\n    counts = Counter(y)\n\n    # Find the maximum frequency\n    max_freq = max(counts.values())\n\n    # Collect all labels with the maximum frequency\n    candidates = [label for label in y if counts[label] == max_freq]\n\n    # Return the first occurrence among candidates\n    for element in y:\n        if element in candidates:\n            return element\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_new = beta1 * m + (1 - beta1) * grad\n    # Update biased second raw moment estimate\n    v_new = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - beta1 ** t)\n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_new / (1 - beta2 ** t)\n\n    # Compute the parameter update\n    # If gradient is exactly zero, param stays the same, but moments still update\n    # The update formula applies regardless\n    denom = np.sqrt(v_hat) + eps\n    param_new = param - lr * m_hat / denom\n\n    # Round results to 8 decimal places\n    param_new_list = np.round(param_new.flatten().tolist(), 8)\n    m_new_list = np.round(m_new.flatten().tolist(), 8)\n    v_new_list = np.round(v_new.flatten().tolist(), 8)\n\n    return param_new_list, m_new_list, v_new_list\n```"}
{"task_id": 342, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    # Check if vectors are of equal length\n    if len(x) != len(y):\n        return -1\n\n    # Convert lists to numpy arrays for efficient computation\n    x_array = np.array(x)\n    y_array = np.array(y)\n\n    # Compute the sum of absolute differences\n    distance = np.sum(np.abs(x_array - y_array))\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to numpy array if not already\n    rewards = np.array(rewards)\n\n    N = theta_samples.shape[0]\n    # Determine number of samples to retain\n    retain_count = int(np.floor(retain_prcnt * N))\n    # Get indices of samples sorted by rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    # Select top retain_count samples\n    elite_indices = sorted_indices[:retain_count]\n    elite_samples = theta_samples[elite_indices]\n\n    # Compute mean and variance per dimension\n    mean = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0)\n\n    # Round to four decimal places\n    mean_rounded = np.round(mean, 4).tolist()\n    var_rounded = np.round(var, 4).tolist()\n\n    return mean_rounded, var_rounded\n```"}
{"task_id": 344, "completion_id": 0, "completion": "```python\nimport heapq\n\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n\n    # Count the frequency of each token\n    freq = {}\n    for token in tokens:\n        freq[token] = freq.get(token, 0) + 1\n\n    # Handle the case with only one unique token\n    if len(freq) == 1:\n        only_token = next(iter(freq))\n        return {only_token: '0'}\n\n    # Build the initial heap\n    # Each node is represented as a tuple:\n    # (frequency, order, token, left_child, right_child)\n    # For internal nodes, token is an empty string \"\"\n    heap = []\n    # To ensure deterministic behavior, assign an order to each node\n    # (since heapq compares tuples lex order, and tokens may be equal)\n    order = 0\n    for token, frequency in freq.items():\n        heapq.heappush(heap, (frequency, order, token, None, None))\n        order += 1\n\n    # Build the Huffman tree\n    while len(heap) > 1:\n        # Pop two smallest nodes\n        freq1, order1, token1, left1, right1 = heapq.heappop(heap)\n        freq2, order2, token2, left2, right2 = heapq.heappop(heap)\n\n        # Create new internal node\n        merged_freq = freq1 + freq2\n        # Use a tuple with a higher order to maintain deterministic behavior\n        heapq.heappush(heap, (merged_freq, order, \"\", (freq1, order1, token1, left1, right1), (freq2, order2, token2, left2, right2)))\n        order += 1\n\n    # The remaining node is the root\n    root = heap[0]\n\n    # Traverse the tree to generate codes\n    codes = {}\n\n    def traverse(node, code):\n        freq, order, token, left, right = node\n        if token != \"\":\n            # Leaf node\n            codes[token] = code\n        else:\n            # Internal node\n            # Left edge: '0'\n            traverse(left, code + '0')\n            # Right edge: '1'\n            traverse(right, code + '1')\n\n    traverse(root, \"\")\n    return codes\n```"}
{"task_id": 345, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n\n    # 1. Add intercept (bias) column of ones to training and test data\n    X_train_aug = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_aug = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    # 2. Compute the posterior mean of the weights\n    # Compute X\u1d40X and X\u1d40y\n    XtX = X_train_aug.T @ X_train_aug\n    Xty = X_train_aug.T @ y_train\n    \n    # Compute the inverse of (X\u1d40X + \u03a9\u2080)\n    posterior_cov_inv = XtX + omega0\n    posterior_cov = np.linalg.inv(posterior_cov_inv)\n    \n    # Compute the posterior mean \u03bc\u2099\n    mu_n = posterior_cov @ (Xty + omega0 @ mu0)\n    \n    # 3. Make predictions for X_test using the posterior mean\n    y_pred = X_test_aug @ mu_n\n    \n    # Round predictions to 4 decimal places and convert to list\n    y_pred_rounded = [round(float(val), 4) for val in y_pred]\n    \n    return y_pred_rounded\n```"}
{"task_id": 346, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    # Count the occurrences of each class label\n    counts = np.bincount(y)\n    total = counts.sum()\n\n    # Filter out zero counts to avoid log2(0)\n    probabilities = counts / total\n    probabilities = probabilities[probabilities > 0]\n\n    # Compute entropy\n    entropy_value = -np.sum(probabilities * np.log2(probabilities))\n    return round(entropy_value, 4)\n```"}
{"task_id": 347, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == \"G\":\n        # Generator loss: -E[D(x_fake)]\n        loss = -np.mean(Y_fake)\n        return round(loss, 4)\n    elif module == \"C\":\n        # For critic loss, need Y_real and gradInterp\n        if Y_real is None or gradInterp is None:\n            raise ValueError(\"Y_real and gradInterp must be provided for critic loss.\")\n        # Compute the expectations\n        term1 = np.mean(Y_fake)\n        term2 = np.mean(Y_real)\n        # Gradient penalty term: \u03bb * E[(||\u2207D||\u2082 - 1)\u00b2]\n        # gradInterp shape: (n_ex, ...), compute norm over last dimension\n        grad_norms = np.linalg.norm(gradInterp, axis=1)\n        gradient_penalty = np.mean((grad_norms - 1) ** 2)\n        loss = (term1 - term2) + lambda_ * gradient_penalty\n        return round(loss, 4)\n    else:\n        raise ValueError(\"Invalid module. Must be 'C' or 'G'.\")\n```"}
{"task_id": 348, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    # Verify that X is a 2D array\n    if not isinstance(X, np.ndarray):\n        return False\n    if X.ndim != 2:\n        return False\n\n    n_rows, n_cols = X.shape\n    # Check if the matrix is square\n    if n_rows != n_cols:\n        return False\n\n    # Check symmetry within a tolerance\n    if not np.allclose(X, X.T, atol=1e-8):\n        return False\n\n    # Compute eigenvalues using np.linalg.eigvalsh (more efficient for symmetric matrices)\n    eigenvalues = np.linalg.eigvalsh(X)\n\n    # Check if all eigenvalues are greater than a small positive threshold\n    if np.all(eigenvalues > 1e-8):\n        return True\n    else:\n        return False\n```"}
{"task_id": 350, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_ridge_regression(X: list[float | int],\n                                y: list[float | int],\n                                degree: int,\n                                reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n\n    # Build the design matrix with polynomial features\n    # Each row: [1, x, x^2, ..., x^degree]\n    X_design = np.vander(X, N=degree+1, increasing=True)\n\n    # Compute the regularization matrix (lambda * I)\n    # For degree d, the matrix is (d+1) x (d+1)\n    reg_matrix = reg_factor * np.eye(degree + 1)\n\n    # Compute the closed-form solution:\n    # w = (X^T X + \u03bb I)^(-1) X^T y\n    A = X_design.T @ X_design + reg_matrix\n    b = X_design.T @ y\n\n    # Solve for w\n    w = np.linalg.solve(A, b)\n\n    # Round coefficients to 4 decimal places\n    w_rounded = np.round(w, 4)\n\n    # Convert to list and return\n    return w_rounded.tolist()\n```"}
{"task_id": 351, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n\n    # Calculate output spatial dimensions\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n\n    # Initialize the output array\n    pooled = np.empty((N, C, out_h, out_w))\n\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    # Define the current window's start and end indices\n                    h_start = i * stride\n                    h_end = h_start + p_h\n                    w_start = j * stride\n                    w_end = w_start + p_w\n\n                    # Extract the window\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n\n                    # Compute the max value in the window\n                    pooled[n, c, i, j] = np.max(window)\n\n    return pooled.tolist()\n```"}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list if it's a NumPy array or other iterable\n    labels = list(labels)\n    \n    # Handle empty input\n    if len(labels) == 0:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # If all labels are identical, entropy is 0\n    if len(label_counts) == 1:\n        return 0.0\n    \n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p = count / total_count\n        if p > 0:\n            entropy_value -= p * math.log2(p)\n    \n    # Round to 5 decimal places\n    return round(entropy_value, 5)\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    k_rows, k_cols, in_ch_W, out_ch = W.shape\n\n    # Check for input consistency\n    assert in_ch == in_ch_W, \"Input channels of X and W must match.\"\n\n    # Handle dilation\n    d = dilation + 1  # dilation=0 means no dilation, so effective dilation is 1\n    # Effective kernel size after dilation\n    k_rows_eff = k_rows + (k_rows - 1) * (d - 1)\n    k_cols_eff = k_cols + (k_cols - 1) * (d - 1)\n\n    # Function to compute padding sizes\n    def get_padding(pad, in_size, kernel_size, stride, dilation):\n        if isinstance(pad, str) and pad.lower() == 'same':\n            # Compute \"same\" padding\n            out_size = int(np.ceil(float(in_size) / float(stride)))\n            pad_total = max((out_size - 1) * stride + kernel_size - in_size, 0)\n            pad_before = pad_total // 2\n            pad_after = pad_total - pad_before\n            return pad_before, pad_after\n        elif isinstance(pad, int):\n            return pad, pad\n        elif isinstance(pad, tuple) and len(pad) == 2:\n            return pad[0], pad[1]\n        elif isinstance(pad, tuple) and len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n            return pr1, pr2, pc1, pc2\n        else:\n            # Invalid padding specification (behavior undefined as per instructions)\n            return 0, 0\n\n    # Compute padding for rows and columns\n    if isinstance(pad, str) and pad.lower() == 'same':\n        pad_top, pad_bottom = get_padding(pad, in_rows, k_rows, stride, d)\n        pad_left, pad_right = get_padding(pad, in_cols, k_cols, stride, d)\n    elif isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_top, pad_bottom = get_padding(pad[0], in_rows, k_rows, stride, d)\n            pad_left, pad_right = get_padding(pad[1], in_cols, k_cols, stride, d)\n        elif len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n            pad_top, pad_bottom = pr1, pr2\n            pad_left, pad_right = pc1, pc2\n        else:\n            # Invalid, default to zero\n            pad_top = pad_bottom = pad_left = pad_right = 0\n    else:\n        # Default to zero padding\n        pad_top = pad_bottom = pad_left = pad_right = 0\n\n    # Pad the input\n    X_padded = np.pad(\n        X,\n        ((0, 0),\n         (pad_top, pad_bottom),\n         (pad_left, pad_right),\n         (0, 0)),\n        mode='constant',\n        constant_values=0\n    )\n\n    # Compute output spatial dimensions\n    out_rows = ((in_rows + pad_top + pad_bottom - d * (k_rows - 1) - 1) // stride) + 1\n    out_cols = ((in_cols + pad_left + pad_right - d * (k_cols - 1) - 1) // stride) + 1\n\n    # Prepare im2col matrix\n    # For each patch, extract the receptive field considering dilation\n    # The shape of the im2col matrix: (n_ex * out_rows * out_cols, k_rows * k_cols * in_ch)\n    patches = []\n\n    for i in range(out_rows):\n        for j in range(out_cols):\n            # Calculate the start indices for the current patch\n            row_start = i * stride\n            col_start = j * stride\n\n            # Extract the patch for all examples\n            # For each example, extract the patch\n            patch = X_padded[\n                :,\n                row_start:row_start + d * (k_rows - 1) + 1: d,\n                col_start:col_start + d * (k_cols - 1) + 1: d,\n                :\n            ]  # shape: (n_ex, k_rows, k_cols, in_ch)\n\n            # Reshape to (n_ex, k_rows * k_cols * in_ch)\n            patch_reshaped = patch.reshape(n_ex, -1)\n            patches.append(patch_reshaped)\n\n    # Stack patches: shape (n_ex * out_rows * out_cols, k_rows * k_cols * in_ch)\n    im2col = np.vstack(patches)\n\n    # Reshape W to (k_rows * k_cols * in_ch, out_ch)\n    W_reshaped = W.reshape(-1, out_ch)\n\n    # Perform matrix multiplication (GEMM)\n    # For each example, compute the dot product\n    # Since im2col is (n_ex*out_rows*out_cols, kernel_size), we can do:\n    # result shape: (n_ex*out_rows*out_cols, out_ch)\n    conv_out = im2col @ W_reshaped  # shape: (n_ex*out_rows*out_cols, out_ch)\n\n    # Reshape to (n_ex, out_rows, out_cols, out_ch)\n    conv_out = conv_out.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    # Convert to list of lists\n    return conv_out.tolist()\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n\n    # 1. Standardise the data by subtracting the feature-wise mean\n    mean_centered = data - np.mean(data, axis=0)\n\n    # Determine the number of features\n    n_samples, n_features = mean_centered.shape\n\n    # 2. Obtain principal directions based on the solver\n    if solver == \"svd\":\n        # Use SVD on the mean-centered data\n        # Note: np.linalg.svd returns U, S, Vh\n        U, S, Vh = np.linalg.svd(mean_centered, full_matrices=False)\n        # Directions are rows of Vh\n        directions = Vh\n        # Variance explained by each component is proportional to the squared singular values\n        # but for PCA, the variance explained is (S^2) / (n_samples - 1)\n        # We'll compute explained variance later\n    elif solver == \"eigen\":\n        # Compute covariance matrix\n        cov_matrix = np.cov(mean_centered, rowvar=False, ddof=1)\n        # Eigen-decomposition\n        eigvals, eigvecs = np.linalg.eigh(cov_matrix)\n        # Eigenvectors are columns of eigvecs\n        directions = eigvecs.T\n        # Eigenvalues correspond to variance explained\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n\n    # 3. Sort directions by importance (descending order of variance)\n    if solver == \"svd\":\n        # Variance explained by each component is (S^2) / (n_samples - 1)\n        variances = (S ** 2) / (n_samples - 1)\n        # Get indices for sorting in descending order\n        sorted_idx = np.argsort(variances)[::-1]\n        sorted_variances = variances[sorted_idx]\n        directions = directions[sorted_idx]\n    else:\n        # For eigen, eigenvalues are variances\n        sorted_idx = np.argsort(eigvals)[::-1]\n        sorted_variances = eigvals[sorted_idx]\n        directions = directions[sorted_idx]\n\n    # Keep only the first n_components (or all if n_components > features)\n    n_components = min(n_components, n_features)\n    directions = directions[:n_components]\n    variances = sorted_variances[:n_components]\n\n    # 4. Make the sign of each direction deterministic\n    for i in range(n_components):\n        direction = directions[i]\n        # Find the first non-zero loading\n        non_zero_idx = np.argmax(np.abs(direction) > 1e-12)\n        if direction[non_zero_idx] < 0:\n            directions[i] = -direction\n\n    # 5. Project the data onto the retained directions\n    scores = np.dot(mean_centered, directions.T)\n\n    # Round scores to 4 decimals\n    scores = np.round(scores, 4)\n\n    # 6. Calculate explained variance ratio\n    total_variance = np.sum(variances)\n    explained_variance_ratio = (variances / total_variance) if total_variance != 0 else np.zeros_like(variances)\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n\n    # Convert scores to list of lists\n    scores_list = scores.tolist()\n\n    return scores_list, explained_variance_ratio\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, find the index of the maximum probability\n        return int(leaf.value.index(max(leaf.value)))\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    # Handle the case when K=1: centroid is the mean of all data\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        # Sort the centroid lex order (only one centroid)\n        sorted_centroid = np.round(centroid, 4).tolist()\n        return [sorted_centroid]\n\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n\n    for iteration in range(max_iters):\n        # Compute distances from each point to each centroid\n        # Using broadcasting for efficiency\n        # distances shape: (n_samples, K)\n        distances = np.linalg.norm(data[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n\n        # Assign each sample to the closest centroid\n        labels = np.argmin(distances, axis=1)\n\n        new_centroids = np.empty_like(centroids)\n        centroids_changed = False\n\n        for k in range(K):\n            # Get all samples assigned to cluster k\n            cluster_points = data[labels == k]\n            if len(cluster_points) == 0:\n                # Keep centroid unchanged if cluster is empty\n                new_centroids[k] = centroids[k]\n            else:\n                # Compute mean of assigned points\n                new_centroids[k] = np.mean(cluster_points, axis=0)\n\n        # Check for convergence: if centroids do not change more than tolerance\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n\n        # Check if any centroid has changed\n        if not np.allclose(centroids, new_centroids, atol=1e-6):\n            centroids_changed = True\n\n        centroids = new_centroids\n\n        if not centroids_changed:\n            # No change in centroids, early stop\n            break\n\n    # Sort the final centroids lexicographically\n    sorted_centroids = sorted(centroids.tolist())\n\n    # Round each coordinate to four decimals\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n\n    return rounded_centroids\n```"}
{"task_id": 358, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy comparison\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check if lengths match\n    if y_true.shape != y_pred.shape:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    \n    # Compute accuracy\n    accuracy_value = correct_predictions / total_predictions\n    \n    # Return rounded accuracy\n    return round(accuracy_value, 4)\n```"}
{"task_id": 359, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    # Ensure inputs are numpy arrays\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    if not derivative:\n        # Compute the cross-entropy loss\n        # For each sample, only the log of the predicted probability of the true class contributes\n        # sum over all samples\n        # Add eps inside log to avoid log(0)\n        log_preds = np.log(y_pred + eps)\n        # Element-wise multiply with y (which is one-hot), then sum over classes\n        loss = -np.sum(y * log_preds)\n        # Round to 4 decimal places\n        return round(loss, 4)\n    else:\n        # Compute the gradient: y_pred - y\n        grad = y_pred - y\n        # Convert to list of lists and round each element\n        grad_list = [[round(val, 4) for val in row] for row in grad]\n        return grad_list\n```"}
{"task_id": 360, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    # Convert input to numpy array if not already\n    x = np.asarray(frame, dtype=float)\n    N = len(x)\n    \n    # Initialize list to hold coefficients\n    c = []\n    \n    for k in range(N):\n        sum_val = 0.0\n        for n in range(N):\n            angle = (np.pi * k * (2 * n + 1)) / (2 * N)\n            sum_val += x[n] * np.cos(angle)\n        c_k = 2 * sum_val\n        c.append(c_k)\n    \n    if orthonormal:\n        # Apply scaling\n        for k in range(N):\n            if k == 0:\n                scale = 2 * np.sqrt(1 / (4 * N))\n            else:\n                scale = 2 * np.sqrt(1 / (2 * N))\n            c[k] = c[k] * scale\n    \n    # Round to 4 decimal places\n    c_rounded = [round(coeff, 4) for coeff in c]\n    return c_rounded\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a numpy array of floats\n    arr = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = arr.sum(axis=1)\n    \n    # Check if any row sums to zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by its sum\n    normalized = arr / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    rounded = np.round(normalized, 4)\n    \n    # Convert to list of lists\n    return rounded.tolist()\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            # For tuple/dict spaces, check all sub-spaces\n            if isinstance(space, Tuple):\n                return all(check_space(sub_space, False) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(check_space(sub_space, False) for sub_space in space.spaces.values())\n            else:\n                # If space is not a Tuple or Dict but is expected to be composite, treat as non-continuous\n                return False\n        else:\n            # For non-tuple spaces, check if it's a Box\n            return isinstance(space, Box)\n\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n\n    return (cont_action, cont_obs)\n```"}
{"task_id": 364, "completion_id": 0, "completion": "```python\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n```"}
{"task_id": 366, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    # Handle the case with a single sample\n    if X.shape[0] == 1:\n        return [[0.0]]\n    \n    # Compute the squared norms of each sample\n    squared_norms = np.sum(X**2, axis=1, keepdims=True)  # shape: (n_samples, 1)\n    \n    # Compute the pairwise squared Euclidean distances using the formula:\n    # d(i,j) = ||X[i] - X[j]||^2 = ||X[i]||^2 + ||X[j]||^2 - 2 * X[i]\u00b7X[j]\n    # Using broadcasting for efficient computation\n    D = squared_norms + squared_norms.T - 2 * np.dot(X, X.T)\n    \n    # Numerical stability: clamp small negative values to zero\n    np.clip(D, a_min=0, a_max=None, out=D)\n    \n    # Ensure the diagonal is exactly zero\n    np.fill_diagonal(D, 0.0)\n    \n    # Convert the numpy array to a list of lists with full precision\n    return D.tolist()\n```"}
{"task_id": 367, "completion_id": 0, "completion": "```python\nimport re\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get(\"hyperparameters\", {})\n        self.params.update({k: v for k, v in hp.items() if k != \"id\"})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {\"hyperparameters\": {\"id\": self.__class__.__name__, **self.params}}\n\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    # If param is None, return default LinearKernel\n    if param is None:\n        return LinearKernel()\n\n    # If param is already a KernelBase instance, return it directly\n    if isinstance(param, KernelBase):\n        return param\n\n    # If param is a string, parse it\n    if isinstance(param, str):\n        s = param.strip()\n        # Match pattern like 'KernelName(...)'\n        pattern = r'^(\\w+)\\s*(?:\\((.*)\\))?$'\n        match = re.match(pattern, s, re.IGNORECASE)\n        if not match:\n            raise ValueError(f\"Cannot parse kernel string: {s}\")\n        kernel_name = match.group(1).lower()\n        args_str = match.group(2)\n\n        # Parse arguments inside parentheses if any\n        args_dict = {}\n        if args_str:\n            # Split by comma, handle key=value pairs\n            for item in args_str.split(','):\n                item = item.strip()\n                if '=' in item:\n                    key, value = item.split('=', 1)\n                    key = key.strip()\n                    value = value.strip()\n                    # Convert value to appropriate type\n                    # Try int\n                    if re.match(r'^-?\\d+$', value):\n                        value_converted = int(value)\n                    # Try float\n                    elif re.match(r'^-?\\d*\\.\\d+$', value):\n                        value_converted = float(value)\n                    # Try boolean\n                    elif value.lower() in ('true', 'false'):\n                        value_converted = value.lower() == 'true'\n                    # Else keep as string\n                    else:\n                        value_converted = value\n                    args_dict[key] = value_converted\n                else:\n                    # Handle positional arguments if any (not specified in task, so ignore)\n                    pass\n\n        # Instantiate the appropriate kernel\n        if kernel_name == 'linear':\n            return LinearKernel()\n        elif kernel_name == 'polynomial':\n            # Provide default values if not specified\n            degree = args_dict.get('degree', 3)\n            coef0 = args_dict.get('coef0', 1.0)\n            return PolynomialKernel(degree=degree, coef0=coef0)\n        elif kernel_name == 'rbf':\n            gamma = args_dict.get('gamma', 1.0)\n            return RBFKernel(gamma=gamma)\n        else:\n            raise NotImplementedError(f\"Kernel '{kernel_name}' is not implemented.\")\n\n    # If param is a dictionary, check for 'hyperparameters'\n    if isinstance(param, dict):\n        if 'hyperparameters' not in param:\n            raise ValueError(\"Dictionary input must contain 'hyperparameters' key.\")\n        hp = param['hyperparameters']\n        if not isinstance(hp, dict):\n            raise ValueError(\"'hyperparameters' must be a dictionary.\")\n        if 'id' not in hp:\n            raise ValueError(\"'hyperparameters' dictionary must contain 'id' key.\")\n        kernel_id = hp['id']\n        # Remove 'id' from hyperparameters to pass remaining params\n        hp_params = {k: v for k, v in hp.items() if k != 'id'}\n        if kernel_id == 'LinearKernel':\n            return LinearKernel()\n        elif kernel_id == 'PolynomialKernel':\n            degree = hp_params.get('degree', 3)\n            coef0 = hp_params.get('coef0', 1.0)\n            return PolynomialKernel(degree=degree, coef0=coef0)\n        elif kernel_id == 'RBFKernel':\n            gamma = hp_params.get('gamma', 1.0)\n            return RBFKernel(gamma=gamma)\n        else:\n            raise NotImplementedError(f\"Kernel with id '{kernel_id}' is not implemented.\")\n\n    # If none of the above, raise an error\n    raise ValueError(\"Invalid parameter type for kernel initialization.\")\n```"}
{"task_id": 368, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or -1 when\n               input validation fails.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are lists\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    \n    # Validate that x and y are 1D arrays\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n    \n    # Validate that x and y have the same shape\n    if x_arr.shape != y_arr.shape:\n        return -1\n    \n    # Validate that p is strictly positive\n    if p <= 0:\n        return -1\n    \n    # Compute the Minkowski distance\n    diff = np.abs(x_arr - y_arr)\n    sum_power = np.sum(diff ** p)\n    distance = sum_power ** (1 / p)\n    \n    # Round to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros, shape matches the first update\n    running_pred = np.zeros_like(updates[0])\n\n    # Aggregate updates: subtract scaled tree predictions\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    if regression:\n        # For regression, return the predictions rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, convert logits to probabilities using softmax\n        # To ensure numerical stability, subtract max logits per sample\n        max_logits = np.max(running_pred, axis=1, keepdims=True)\n        exp_logits = np.exp(running_pred - max_logits)\n        probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        # Predicted class is the argmax of probabilities\n        return np.argmax(probs, axis=1)\n```"}
{"task_id": 370, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"Calculate the multivariate Gaussian density for each sample in X.\"\"\"\n    n = mu.shape[0]\n    # Compute the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Precompute the normalization constant\n    norm_const = 1.0 / ((2 * np.pi) ** (n / 2) * np.sqrt(cov_det))\n    \n    densities = []\n    for x in X:\n        diff = x - mu\n        exponent = -0.5 * diff.T @ cov_inv @ diff\n        density = norm_const * np.exp(exponent)\n        densities.append(round(density, 4))\n    \n    return densities\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or the string \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, kernel_in_channels, out_channels = W.shape\n\n    # Check input consistency\n    assert in_channels == kernel_in_channels, \"Input channels must match between X and W.\"\n    assert stride > 0, \"Stride must be positive.\"\n    assert dilation >= 0, \"Dilation must be non-negative.\"\n\n    # Handle padding\n    if isinstance(pad, str):\n        if pad.lower() == \"same\":\n            # Calculate output length\n            effective_kernel = (kernel_width - 1) * (dilation + 1) + 1\n            out_length = int(np.ceil(signal_length / stride))\n            total_pad = max(0, (out_length - 1) * stride + effective_kernel - signal_length)\n            p_left = total_pad // 2\n            p_right = total_pad - p_left\n        else:\n            raise ValueError(\"Invalid padding string. Use 'same' or an integer or 2-tuple.\")\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple) or isinstance(pad, list):\n        if len(pad) != 2:\n            raise ValueError(\"Pad tuple/list must have length 2.\")\n        p_left, p_right = pad\n    else:\n        raise TypeError(\"Pad must be an int, a tuple/list of two ints, or 'same'.\")\n\n    # Compute the effective kernel size considering dilation\n    effective_kernel = (kernel_width - 1) * (dilation + 1) + 1\n\n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n\n    # Compute output length\n    signal_length_padded = X_padded.shape[1]\n    out_length = ((signal_length_padded - effective_kernel) // stride) + 1\n\n    # Prepare output array\n    output = np.zeros((n_examples, out_length, out_channels))\n\n    # Perform the convolution (cross-correlation)\n    for n in range(n_examples):\n        for out_ch in range(out_channels):\n            for i in range(out_length):\n                start = i * stride\n                # Extract the window with dilation\n                window_indices = start + np.arange(0, kernel_width * (dilation + 1), dilation + 1)\n                # Check bounds\n                if window_indices[-1] >= signal_length_padded:\n                    break\n                # Extract the window for all input channels\n                window = X_padded[n, window_indices, :]  # shape: (kernel_width, in_channels)\n                # Get the kernel for this output channel\n                kernel = W[:, :, out_ch]  # shape: (kernel_width, in_channels)\n                # Element-wise multiply and sum over kernel width and input channels\n                # Cross-correlation: no kernel reversal\n                conv_sum = np.sum(window * kernel)\n                output[n, i, out_ch] = conv_sum\n\n    return output.tolist()\n```"}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    y = np.array(y)\n    \n    # Handle empty input\n    if y.size == 0:\n        return 0.0\n    \n    # Count occurrences of each class\n    class_counts = np.bincount(y)\n    total = y.size\n    \n    # Calculate class probabilities\n    p_c = class_counts / total\n    \n    # Compute Gini impurity\n    gini_value = 1 - np.sum(p_c ** 2)\n    \n    # Return rounded to 4 decimal places\n    return round(gini_value, 4)\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Target vector of shape (m,).\n        learning_rate (float): Step size for gradient descent.\n        n_iterations (int): Number of iterations to perform.\n\n    Returns:\n        tuple: (list of weights rounded to 4 decimals, bias rounded to 4 decimals)\n               or -1 if input dimensions are inconsistent.\n    \"\"\"\n    # Check for dimension consistency\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    m, n = X.shape\n\n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X @ theta + b\n\n        # Compute errors\n        error = y_pred - y\n\n        # Compute gradients\n        dw = (2 / m) * (X.T @ error)\n        db = (2 / m) * np.sum(error)\n\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Round the results to 4 decimal places\n    weights_rounded = [round(w, 4) for w in theta]\n    bias_rounded = round(b, 4)\n\n    return (weights_rounded, bias_rounded)\n```"}
{"task_id": 375, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n\n    # Validate input types\n    if not (isinstance(X_shape, tuple) and len(X_shape) == 4):\n        raise ValueError(\"X_shape must be a tuple of length 4.\")\n    if not (isinstance(out_dim, tuple) and len(out_dim) == 2):\n        raise ValueError(\"out_dim must be a tuple of length 2.\")\n    if not (isinstance(kernel_shape, tuple) and len(kernel_shape) == 2):\n        raise ValueError(\"kernel_shape must be a tuple of length 2.\")\n    if not isinstance(stride, int) or stride <= 0:\n        raise ValueError(\"stride must be a positive integer.\")\n    if not isinstance(dilation, int) or dilation < 0:\n        raise ValueError(\"dilation must be a non-negative integer.\")\n\n    n_ex, in_rows, in_cols, in_ch = X_shape\n    out_rows, out_cols = out_dim\n    fr, fc = kernel_shape\n\n    # Compute effective filter size considering dilation\n    _fr = fr * (dilation + 1) - dilation\n    _fc = fc * (dilation + 1) - dilation\n\n    # Compute total padding needed for height\n    total_pad_rows = ( (out_rows - 1) * stride + _fr - in_rows )\n    # Compute total padding needed for width\n    total_pad_cols = ( (out_cols - 1) * stride + _fc - in_cols )\n\n    # Check for impossible configurations\n    if total_pad_rows < 0 or total_pad_cols < 0:\n        raise ValueError(\"Requested output size is too small for the given input and kernel parameters.\")\n\n    # Distribute padding: extra pixel goes to bottom and right if total is odd\n    top = total_pad_rows // 2\n    bottom = total_pad_rows - top\n    left = total_pad_cols // 2\n    right = total_pad_cols - left\n\n    # Ensure non-negative padding\n    if top < 0 or bottom < 0 or left < 0 or right < 0:\n        raise ValueError(\"Computed padding is negative, which is invalid.\")\n\n    return (top, bottom, left, right)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose,\n    considering floating-point tolerance.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    arr = np.array(X)\n\n    # Check if the array is 2D\n    if arr.ndim != 2:\n        return False\n\n    # Check if the matrix is square\n    rows, cols = arr.shape\n    if rows != cols:\n        return False\n\n    # Check symmetry using np.allclose with a tolerance of 1e-8\n    return np.allclose(arr, arr.T, atol=1e-8)\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for logistic loss used in gradient boosting for binary classification.\n    \n    Parameters:\n    y (list): List of binary class labels (0 or 1).\n    f (list): List of current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to 4 decimal places, or -1 if invalid labels are present.\n    \"\"\"\n    # Validate input labels\n    for label in y:\n        if label not in [0, 1]:\n            return -1\n    \n    # Convert labels from {0,1} to {-1,1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    gradients = []\n    for y_i, f_i in zip(y_prime, f):\n        exp_term = np.exp(y_i * f_i)\n        g_i = y_i / (1 + exp_term)\n        gradients.append(round(g_i, 4))\n    \n    return gradients\n```"}
{"task_id": 378, "completion_id": 0, "completion": "```python\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    # Implement the indicator function\n    return 1 if flag == 1 else 0\n```"}
{"task_id": 379, "completion_id": 0, "completion": "```python\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # Create a sorted copy of the nodes based on the specified criteria\n    sorted_nodes = sorted(nodes, key=lambda node: (node['priority'], node['entry_id']))\n    # Extract and return the 'key' fields in the sorted order\n    return [node['key'] for node in sorted_nodes]\n```"}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the original paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array for vectorized operations\n    arr = np.array(x, dtype=float)\n\n    # Compute ELU(x, alpha)\n    elu = np.where(arr > 0, arr, alpha * (np.exp(arr) - 1))\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x)\n        result = scale * elu\n    elif order == 1:\n        # First derivative: d(SELU)/dx\n        # For x > 0: derivative = scale\n        # For x <= 0: derivative = scale * alpha * exp(x)\n        derivative = np.where(arr > 0, scale, scale * alpha * np.exp(arr))\n        result = derivative\n    elif order == 2:\n        # Second derivative: d\u00b2(SELU)/dx\u00b2\n        # For x > 0: second derivative = 0\n        # For x <= 0: second derivative = scale * alpha * exp(x)\n        second_derivative = np.where(arr > 0, 0.0, scale * alpha * np.exp(arr))\n        result = second_derivative\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n\n    # Round to 4 decimal places\n    result_rounded = np.round(result, 4)\n\n    # Convert to list or scalar\n    if np.isscalar(x):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n```"}
{"task_id": 382, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    epsilon = 1e-4  # small constant to avoid division by zero\n    \n    # Get unique classes and their order\n    classes = np.unique(y_train)\n    \n    # Calculate prior probabilities for each class\n    priors = {}\n    for c in classes:\n        priors[c] = np.sum(y_train == c) / len(y_train)\n    \n    # Calculate mean and variance for each feature per class\n    # Store in dictionaries: class -> feature-wise mean and variance\n    class_feature_stats = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        mu = np.mean(X_c, axis=0)\n        var = np.var(X_c, axis=0)\n        class_feature_stats[c] = {'mu': mu, 'var': var}\n    \n    predictions = []\n    for x in X_test:\n        class_posteriors = []\n        for c in classes:\n            # Start with the prior probability\n            log_posterior = np.log(priors[c])\n            mu = class_feature_stats[c]['mu']\n            var = class_feature_stats[c]['var']\n            # For each feature, compute the Gaussian likelihood\n            for i in range(len(x)):\n                # Gaussian likelihood\n                coeff = 1.0 / math.sqrt(2 * math.pi * (var[i] + epsilon))\n                exponent = - ((x[i] - mu[i]) ** 2) / (2 * (var[i] + epsilon))\n                likelihood = coeff * math.exp(exponent)\n                # To avoid underflow, sum logs instead of multiplying likelihoods\n                log_posterior += np.log(likelihood + 1e-12)  # add small number to avoid log(0)\n            class_posteriors.append((c, log_posterior))\n        # Select class with highest posterior (log scale)\n        predicted_class = max(class_posteriors, key=lambda item: item[1])[0]\n        predictions.append(predicted_class)\n    \n    return predictions\n```"}
{"task_id": 383, "completion_id": 0, "completion": "```python\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]\n```"}
{"task_id": 384, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    # Convert input to numpy array\n    L = np.array(L, dtype=float)\n    n = L.shape[0]\n    \n    # Check if k is valid\n    if k > n or k <= 0:\n        return -1\n    \n    # Compute eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eig(L)\n    \n    # Use the real part (discard negligible imaginary parts)\n    eigenvalues = eigenvalues.real\n    eigenvectors = eigenvectors.real\n    \n    # Sort eigenvalues and eigenvectors based on eigenvalues\n    idx = np.argsort(eigenvalues)\n    sorted_eigenvalues = eigenvalues[idx]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    \n    # Select the k eigenvectors corresponding to the smallest eigenvalues\n    selected_vectors = sorted_eigenvectors[:, :k]\n    \n    # Process each eigenvector\n    for i in range(k):\n        v = selected_vectors[:, i]\n        # Flip sign so that the first non-zero entry is positive\n        first_non_zero_idx = np.nonzero(v)[0]\n        if first_non_zero_idx.size > 0:\n            first_idx = first_non_zero_idx[0]\n            if v[first_idx] < 0:\n                v = -v\n        # Normalize to unit length\n        norm = np.linalg.norm(v)\n        if norm != 0:\n            v = v / norm\n        selected_vectors[:, i] = v\n    \n    # Round entries to 4 decimal places\n    selected_vectors = np.round(selected_vectors, 4)\n    \n    # Convert to list of lists with columns as eigenvectors\n    # Each column is an eigenvector, so transpose\n    result = selected_vectors.tolist()\n    return result\n```"}
{"task_id": 385, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"\n    Perform Linear Discriminant Analysis (LDA) for dimensionality reduction.\n    \n    Parameters:\n    - X: 2D list or array-like of shape (n_samples, n_features)\n    - y: 1D list or array-like of class labels\n    - k: number of components to project onto\n    \n    Returns:\n    - List of projected data points, each with k features, rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    class_labels = np.unique(y)\n    c = len(class_labels)\n    \n    # Adjust k if larger than c-1\n    max_components = c - 1\n    if k > max_components:\n        k = max_components\n    \n    # Compute overall mean\n    mean_overall = np.mean(X, axis=0)\n    \n    # Initialize scatter matrices\n    S_w = np.zeros((n_features, n_features))\n    S_b = np.zeros((n_features, n_features))\n    \n    for label in class_labels:\n        X_c = X[y == label]\n        n_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        \n        # Within-class scatter\n        X_centered = X_c - mean_c\n        S_w += X_centered.T @ X_centered\n        \n        # Between-class scatter\n        mean_diff = (mean_c - mean_overall).reshape(-1, 1)\n        S_b += n_c * (mean_diff @ mean_diff.T)\n    \n    # Solve the generalized eigenvalue problem S_w^{-1} S_b w = \u03bb w\n    # Use pseudo-inverse if S_w is singular\n    S_w_inv = np.linalg.pinv(S_w)\n    eigvals, eigvecs = np.linalg.eig(S_w_inv @ S_b)\n    \n    # Sort eigenvectors by descending eigenvalues\n    sorted_indices = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[sorted_indices]\n    eigvecs = eigvecs[:, sorted_indices]\n    \n    # Select the first k eigenvectors\n    W = eigvecs[:, :k]\n    \n    # Normalize each eigenvector to unit length\n    W_norm = W / np.linalg.norm(W, axis=0)\n    \n    # Make the first element of each eigenvector non-negative for deterministic orientation\n    for i in range(W_norm.shape[1]):\n        if W_norm[0, i] < 0:\n            W_norm[:, i] = -W_norm[:, i]\n    \n    # Project data onto the selected eigenvectors\n    X_projected = X @ W_norm\n    \n    # Round to 4 decimal places and convert to list\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n    \n    return X_projected_rounded\n```"}
{"task_id": 386, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Clip predictions to avoid log(0)\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    # Compute the BCE for each sample\n    bce_values = -(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    # Compute the mean BCE\n    mean_bce = np.mean(bce_values)\n    # Return rounded to 4 decimal places\n    return round(mean_bce, 4)\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    \n    # Initialize predictions with the mean of y\n    y_pred = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of squared error)\n        residuals = y - y_pred\n        \n        # Sort data by x\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        min_error = np.inf\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Check if all x are identical\n        if np.allclose(x_sorted, x_sorted[0]):\n            # No valid split; stump predicts global residual mean\n            global_residual_mean = np.mean(residuals)\n            # Update predictions\n            y_pred += learning_rate * global_residual_mean\n            continue\n        \n        # Evaluate all possible splits (midpoints between consecutive distinct x)\n        for i in range(1, n_samples):\n            if x_sorted[i] == x_sorted[i - 1]:\n                # Skip identical consecutive x values\n                continue\n            # Candidate split is midpoint between x_sorted[i-1] and x_sorted[i]\n            t = (x_sorted[i - 1] + x_sorted[i]) / 2\n            \n            # Left residuals\n            left_mask = x <= t\n            right_mask = ~left_mask\n            \n            # Means of residuals on each side\n            if np.any(left_mask):\n                r_mean_left = np.mean(residuals[left_mask])\n            else:\n                r_mean_left = 0.0\n            if np.any(right_mask):\n                r_mean_right = np.mean(residuals[right_mask])\n            else:\n                r_mean_right = 0.0\n            \n            # Compute sum of squared residuals for this split\n            sse_left = np.sum((residuals[left_mask] - r_mean_left) ** 2)\n            sse_right = np.sum((residuals[right_mask] - r_mean_right) ** 2)\n            total_error = sse_left + sse_right\n            \n            # Check if this split is better\n            if total_error < min_error:\n                min_error = total_error\n                best_split = t\n                best_left_mean = r_mean_left\n                best_right_mean = r_mean_right\n        \n        # If no valid split found (all x identical), use global residual mean\n        if best_split is None:\n            global_residual_mean = np.mean(residuals)\n            y_pred += learning_rate * global_residual_mean\n        else:\n            # Make predictions based on the best split\n            # For each sample, assign residual prediction\n            residual_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n            # Update the overall prediction\n            y_pred += learning_rate * residual_predictions\n    \n    # Round predictions to 4 decimals\n    return list(np.round(y_pred, 4))\n```"}
{"task_id": 389, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    W_np = np.array(W)\n\n    # Validate that the matrix is square\n    if W_np.ndim != 2 or W_np.shape[0] != W_np.shape[1]:\n        return -1\n\n    # Compute the degree matrix D as a diagonal matrix\n    degree_sums = W_np.sum(axis=1)\n    D = np.diag(degree_sums)\n\n    # Compute the Laplacian matrix\n    L = D - W_np\n\n    # Round to 4 decimal places\n    L_rounded = np.round(L, 4)\n\n    # Convert to list of lists\n    return L_rounded.tolist()\n```"}
{"task_id": 391, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    in_length, in_channels = X.shape\n\n    # Convert t to a numpy array for vectorized operations\n    t_array = np.array(t)\n\n    # Round to nearest integer, with ties going to the even integer\n    indices = np.round(t_array).astype(int)\n\n    # Clip indices to be within valid range\n    indices_clipped = np.clip(indices, 0, in_length - 1)\n\n    # Gather the samples at the clipped indices\n    samples = X[indices_clipped]\n\n    # Convert to list of lists\n    return samples.tolist()\n```"}
{"task_id": 392, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef preemphasis(x: \"list[float] | np.ndarray\", alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    # Convert input to numpy array and flatten to 1D\n    x_array = np.array(x).flatten()\n\n    # Initialize output array\n    filtered = np.empty_like(x_array, dtype=float)\n\n    # Keep the first sample unchanged\n    filtered[0] = x_array[0]\n\n    # Apply the pre-emphasis filter to subsequent samples\n    for t in range(1, len(x_array)):\n        filtered[t] = x_array[t] - alpha * x_array[t - 1]\n\n    # Round each element to 4 decimal places and convert to list\n    return [round(sample, 4) for sample in filtered]\n```"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n\n    # Initialize Eg if None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Update the running average of squared gradients\n    Eg_new = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Compute the adjusted gradient\n    adjusted_grad = grad / (np.sqrt(Eg_new + epsilon))\n\n    # Update parameters\n    w_new = w - learning_rate * adjusted_grad\n\n    # Round to 4 decimal places\n    w_rounded = np.round(w_new, 4)\n    Eg_rounded = np.round(Eg_new, 4)\n\n    # Convert to lists\n    w_list = w_rounded.tolist()\n    Eg_list = Eg_rounded.tolist()\n\n    return w_list, Eg_list\n```"}
{"task_id": 395, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    # Create the header line with 50 asterisks\n    header = '*' * 50\n    # Convert beta matrix to string using default str()\n    beta_str = str(beta)\n    # Convert probability to string\n    prob_str = str(b_prob)\n    # Assemble the final string with newline characters\n    result = f\"{header}\\nBeta:\\n{beta_str}\\nProbability of sequence: {prob_str}\"\n    return result\n```"}
{"task_id": 396, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    # Convert input to numpy array to ensure consistent processing\n    x_array = np.array(x, dtype=float)\n    \n    # Compute tanh\n    tanh_x = np.tanh(x_array)\n    \n    # First derivative: 1 - tanh(x)^2\n    first_derivative = 1 - tanh_x**2\n    \n    # Second derivative: -2 * tanh(x) * (1 - tanh(x)^2)\n    second_derivative = -2 * tanh_x * (1 - tanh_x**2)\n    \n    # Round all results to 6 decimal places\n    tanh_list = np.round(tanh_x, 6).tolist()\n    first_derivative_list = np.round(first_derivative, 6).tolist()\n    second_derivative_list = np.round(second_derivative, 6).tolist()\n    \n    return [tanh_list, first_derivative_list, second_derivative_list]\n```"}
{"task_id": 397, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.empty((0, n_classes))\n    \n    # Generate random class indices for each example\n    class_indices = np.random.randint(0, n_classes, size=n_examples)\n    \n    # Initialize the matrix with zeros\n    one_hot_matrix = np.zeros((n_examples, n_classes), dtype=float)\n    \n    # Set the appropriate element in each row to 1\n    one_hot_matrix[np.arange(n_examples), class_indices] = 1\n    \n    return one_hot_matrix\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    x_array = np.array(x, dtype=float)\n    \n    if not derivative:\n        # Compute ELU activation\n        result = np.where(\n            x_array >= 0,\n            x_array,\n            alpha * (np.exp(x_array) - 1)\n        )\n    else:\n        # Compute ELU derivative\n        elu_x = np.where(\n            x_array >= 0,\n            x_array,\n            alpha * (np.exp(x_array) - 1)\n        )\n        result = np.where(\n            x_array >= 0,\n            1,\n            elu_x + alpha\n        )\n    \n    # Round each element to 4 decimal places and convert to list\n    return [round(val, 4) for val in result]\n```"}
{"task_id": 399, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(X, np.ndarray) and isinstance(Y, np.ndarray)):\n        return -1\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute pairwise Euclidean distances efficiently\n    # Using the formula: ||x - y||^2 = ||x||^2 + ||y||^2 - 2 * x\u00b7y\n    X_sq = np.sum(X**2, axis=1).reshape(-1, 1)  # shape (m, 1)\n    Y_sq = np.sum(Y**2, axis=1).reshape(1, -1)  # shape (1, n)\n    cross_term = np.dot(X, Y.T)  # shape (m, n)\n\n    # Compute squared distances\n    dist_sq = X_sq + Y_sq - 2 * cross_term\n\n    # Numerical stability: ensure no negative values due to floating point errors\n    dist_sq = np.maximum(dist_sq, 0)\n\n    # Take square root to get Euclidean distances\n    distances = np.sqrt(dist_sq)\n\n    # Round to four decimal places\n    distances_rounded = np.round(distances, 4)\n\n    # Convert to list of lists\n    return distances_rounded.tolist()\n```"}
{"task_id": 400, "completion_id": 0, "completion": "```python\nimport math\n\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance == 0:\n        # Distribution collapses to a point mass at mean\n        if x < mean:\n            probability = 0.0\n        elif x == mean:\n            probability = 0.5\n        else:\n            probability = 1.0\n    else:\n        # Standardize the variable\n        std_dev = math.sqrt(variance)\n        z = (x - mean) / (math.sqrt(2) * std_dev)\n        # Use the error function to compute the CDF\n        probability = 0.5 * (1 + math.erf(z))\n    return round(probability, 6)\n```"}
{"task_id": 401, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    y = np.array(y)  # Ensure input is a NumPy array\n\n    # Check if y is already one-hot encoded\n    if y.ndim == 2:\n        row_sums = y.sum(axis=1)\n        # If all rows sum to 1 (or very close), assume already one-hot\n        if np.allclose(row_sums, 1) and np.all((y == 0) | (y == 1)):\n            return y.astype(float)\n\n    # Handle 1-D array or 2-D array with shape (N, 1)\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    elif y.shape[1] == 1:\n        y = y.reshape(-1, 1)\n\n    N = y.shape[0]\n\n    # Determine number of classes\n    if num_classes is None:\n        num_classes = int(y.max()) + 1\n\n    # Initialize the one-hot matrix\n    one_hot = np.zeros((N, num_classes), dtype=float)\n\n    # Use advanced indexing to set the appropriate elements to 1\n    # Flatten y to 1D for indexing\n    indices = y.flatten().astype(int)\n    row_indices = np.arange(N)\n    one_hot[row_indices, indices] = 1.0\n\n    return one_hot\n```"}
{"task_id": 402, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float = 1e-6) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    # Get unique classes\n    classes = np.unique(y_train)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n    \n    # Initialize dictionaries to hold class-specific parameters\n    class_priors = {}\n    means = {}\n    variances = {}\n    \n    # Calculate class priors, means, and variances\n    for c in classes:\n        X_c = X_train[y_train == c]\n        N_c = X_c.shape[0]\n        class_priors[c] = N_c / X_train.shape[0]\n        means[c] = np.mean(X_c, axis=0)\n        # Variance with epsilon to prevent zero variance\n        variances[c] = np.var(X_c, axis=0) + eps\n    \n    # Prepare array for predictions\n    predictions = np.empty(X_test.shape[0], dtype=y_train.dtype)\n    \n    # For each test sample, compute log-posterior for each class\n    for i, x in enumerate(X_test):\n        log_posteriors = []\n        for c in classes:\n            # Log prior\n            log_prior = np.log(class_priors[c])\n            # Compute log likelihood for each feature\n            mu_c = means[c]\n            var_c = variances[c]\n            # Gaussian log-likelihood\n            # shape: (n_features,)\n            log_likelihood = -0.5 * (np.log(2 * np.pi * var_c) + ((x - mu_c) ** 2) / var_c)\n            total_log_likelihood = np.sum(log_likelihood)\n            # Total log posterior (unnormalized)\n            log_posterior = log_prior + total_log_likelihood\n            log_posteriors.append(log_posterior)\n        # Assign class with highest log posterior\n        predictions[i] = classes[np.argmax(log_posteriors)]\n    \n    return predictions\n```"}
{"task_id": 405, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport re\n\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    # Convert input to numpy array of floats\n    arr = np.array(x, dtype=float)\n\n    # Define default activation functions\n    def identity(x): return x\n    def relu(x): return np.maximum(0, x)\n    def tanh(x): return np.tanh(x)\n    def sigmoid(x): return 1 / (1 + np.exp(-x))\n    def leaky_relu(x, alpha): return np.where(x > 0, x, alpha * x)\n    def affine(x, slope, intercept): return slope * x + intercept\n\n    # Handle param being None or \"identity\"\n    if param is None or (isinstance(param, str) and param.strip().lower() == \"identity\"):\n        result = identity(arr)\n    elif isinstance(param, str):\n        p = param.strip().lower()\n\n        # Check for relu\n        if p == \"relu\":\n            result = relu(arr)\n\n        # Check for tanh\n        elif p == \"tanh\":\n            result = tanh(arr)\n\n        # Check for sigmoid\n        elif p == \"sigmoid\":\n            result = sigmoid(arr)\n\n        # Check for leaky relu with optional alpha\n        elif p.startswith(\"leaky relu\"):\n            # Extract alpha if present\n            match = re.search(r\"alpha\\s*=\\s*([0-9]*\\.?[0-9]+)\", p)\n            alpha = 0.01  # default\n            if match:\n                alpha = float(match.group(1))\n            result = leaky_relu(arr, alpha)\n\n        # Check for affine with slope and intercept\n        elif p.startswith(\"affine\"):\n            # Extract slope and intercept\n            slope_match = re.search(r\"slope\\s*=\\s*([0-9]*\\.?[0-9]+)\", p)\n            intercept_match = re.search(r\"intercept\\s*=\\s*([0-9]*\\.?[0-9]+)\", p)\n            if slope_match and intercept_match:\n                slope = float(slope_match.group(1))\n                intercept = float(intercept_match.group(1))\n                result = affine(arr, slope, intercept)\n            else:\n                raise ValueError(f\"Unknown activation: {param}\")\n        else:\n            raise ValueError(f\"Unknown activation: {param}\")\n    else:\n        # If param is not a string, treat as unknown\n        raise ValueError(f\"Unknown activation: {param}\")\n\n    # Round to 6 decimal places\n    result_rounded = np.round(result, 6)\n\n    # Convert to list\n    return result_rounded.tolist()\n```"}
{"task_id": 406, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: \"np.ndarray\", y_train: \"np.ndarray\", X_test: \"np.ndarray\", k: int = 5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    predictions = []\n\n    n_train = X_train.shape[0]\n    n_test = X_test.shape[0]\n\n    for test_sample in X_test:\n        # Compute Euclidean distances to all training samples\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n\n        # Determine the number of neighbors to consider\n        k_neighbors = min(k, n_train)\n\n        # Get indices of the k smallest distances\n        neighbor_indices = np.argpartition(distances, k_neighbors - 1)[:k_neighbors]\n\n        # Retrieve the labels of the nearest neighbors\n        neighbor_labels = y_train[neighbor_indices]\n\n        # Count the occurrences of each label\n        label_counts = np.bincount(neighbor_labels)\n\n        # Select the label with the highest count (smallest label in case of tie)\n        predicted_label = label_counts.argmax()\n\n        predictions.append(int(predicted_label))\n\n    return predictions\n```"}
{"task_id": 410, "completion_id": 0, "completion": "```python\nimport re\n\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # Define patterns for simple activations\n    simple_activations = {\"ReLU\", \"Sigmoid\", \"Tanh\"}\n\n    # Check for simple activations\n    if act_str in simple_activations:\n        return {\"type\": act_str}\n\n    # Pattern for \"Affine(slope=<number>, intercept=<number>)\"\n    affine_pattern = re.compile(\n        r'^Affine\\s*\\(\\s*slope\\s*=\\s*([+-]?\\d*\\.?\\d+)\\s*,\\s*intercept\\s*=\\s*([+-]?\\d*\\.?\\d+)\\s*\\)$'\n    )\n\n    # Pattern for \"Leaky ReLU(alpha=<number>)\"\n    leaky_relu_pattern = re.compile(\n        r'^Leaky\\s*ReLU\\s*\\(\\s*alpha\\s*=\\s*([+-]?\\d*\\.?\\d+)\\s*\\)$'\n    )\n\n    # Try matching affine pattern\n    affine_match = affine_pattern.match(act_str)\n    if affine_match:\n        slope_str, intercept_str = affine_match.groups()\n        try:\n            slope = float(slope_str)\n            intercept = float(intercept_str)\n            return {\n                \"type\": \"Affine\",\n                \"slope\": slope,\n                \"intercept\": intercept\n            }\n        except ValueError:\n            return -1\n\n    # Try matching leaky ReLU pattern\n    leaky_match = leaky_relu_pattern.match(act_str)\n    if leaky_match:\n        alpha_str = leaky_match.group(1)\n        try:\n            alpha = float(alpha_str)\n            return {\n                \"type\": \"Leaky ReLU\",\n                \"alpha\": alpha\n            }\n        except ValueError:\n            return -1\n\n    # If none matched\n    return -1\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_iterable(x):\n        return isinstance(x, (list, tuple, np.ndarray))\n    \n    def process_data(data_list):\n        # Determine if data is tuple/list/array (multi-dimensional) or scalar\n        # All elements are assumed to have the same shape/dimensionality\n        if not data_list:\n            # Empty list, assume scalar with no dimensions\n            return {\n                'tuple': False,\n                'multidim': False,\n                'continuous': False,\n                'n_per_dim': [],\n                'n_ids': [],\n                'action_ids': [],\n                'shape': ()\n            }\n        first_elem = data_list[0]\n        # Check if first element is iterable\n        is_first_iterable = is_iterable(first_elem)\n        # Determine shape/dimensions\n        if is_first_iterable:\n            shape = np.shape(first_elem)\n            # All elements should have same shape\n            for elem in data_list:\n                if is_iterable(elem):\n                    if np.shape(elem) != shape:\n                        raise ValueError(\"Inconsistent shapes in data.\")\n                else:\n                    # If one is scalar and others are iterable, shape mismatch\n                    raise ValueError(\"Mixed scalar and iterable in data.\")\n            # For 1D shape, shape is (length,)\n            # For scalar, shape is ()\n        else:\n            shape = ()\n        return {\n            'tuple': is_first_iterable,\n            'multidim': len(shape) > 1,\n            'shape': shape\n        }\n\n    def flatten_data(data_list):\n        # Flatten all data into a 2D array: shape (n_samples, n_dims)\n        # For scalar data, shape is ()\n        # For multi-dimensional, shape is (length, ...), flatten to 1D per sample\n        flattened = []\n        for item in data_list:\n            if is_iterable(item):\n                arr = np.array(item)\n                flattened.append(arr.flatten())\n            else:\n                # scalar\n                flattened.append(np.array([item]))\n        return np.array(flattened)\n\n    # Process actions\n    action_info = process_data(actions)\n    # Process observations\n    obs_info = process_data(observations)\n\n    # Determine if data is tuple (multi-dimensional)\n    tuple_actions = action_info['tuple']\n    tuple_observations = obs_info['tuple']\n\n    # Determine if data is multidim (more than 1 dimension)\n    multidim_actions = action_info['multidim']\n    multidim_observations = obs_info['multidim']\n\n    # Flatten data for further analysis\n    actions_flat = flatten_data(actions)\n    observations_flat = flatten_data(observations)\n\n    # Check for continuous data\n    def is_continuous(flat_data):\n        # flat_data shape: (n_samples, n_dims)\n        # Check if any value is a non-integer float\n        # Use np.any with a tolerance for float comparison\n        # Values that are floats but not close to integers are continuous\n        # For integer detection, check if all values are close to their rounded values\n        # But since we need to detect non-integer floats, check for any float with fractional part\n        for val in flat_data.flatten():\n            if isinstance(val, float):\n                if not np.isclose(val, round(val)):\n                    return True\n        return False\n\n    continuous_actions = is_continuous(actions_flat)\n    continuous_observations = is_continuous(observations_flat)\n\n    # For each dimension, find unique values\n    def get_unique_per_dim(flat_data, shape):\n        # shape: tuple of dimensions\n        n_dims = len(shape)\n        n_samples = len(flat_data)\n        n_per_dim = []\n        n_ids = []\n        action_ids = []\n\n        # Reshape flat_data to shape (n_samples, shape...)\n        data_reshaped = flat_data.reshape((n_samples,) + shape)\n\n        for dim in range(n_dims):\n            # Extract all values in this dimension\n            dim_values = data_reshaped[:, dim]\n            # For multi-dimensional, need to handle accordingly\n            # For 1D shape, shape = (length,)\n            # For higher dims, shape = (d1, d2, ...)\n            # We want to get all values along this dimension\n            # For each sample, get the value at this dimension\n            # For multi-dimensional, the shape of data_reshaped is (n_samples, d1, d2, ...)\n            # So, for each sample, the value at position in this dimension is data_reshaped[:, dim]\n            # But for multi-dimensional, the dimension index is in the shape\n            # So, for each dimension, get all values along that axis\n            # We can do this by slicing data_reshaped along that axis\n            # For simplicity, we can iterate over all samples and get the values at that dimension\n            # But better to use np.take along axis\n            values_in_dim = np.take(data_reshaped, indices=range(shape[dim]), axis=1+dim)\n            # values_in_dim shape: (n_samples, shape[dim])\n            # For each position in shape, get unique values\n            # But we want to get unique values per dimension (i.e., across all samples)\n            # So, flatten all values in this dimension across samples\n            values_flat = values_in_dim.flatten()\n            unique_vals = np.unique(values_flat)\n            n_per_dim.append(len(unique_vals))\n            n_ids.append(list(unique_vals))\n            action_ids.append(list(unique_vals))\n        return n_per_dim, n_ids, action_ids\n\n    def get_unique_obs_per_dim(flat_data, shape):\n        # Similar to above, but for observations\n        n_dims = len(shape)\n        n_samples = len(flat_data)\n        n_per_dim = []\n        n_ids = []\n        obs_ids = []\n\n        data_reshaped = flat_data.reshape((n_samples,) + shape)\n\n        for dim in range(n_dims):\n            values_in_dim = np.take(data_reshaped, indices=range(shape[dim]), axis=1+dim)\n            values_flat = values_in_dim.flatten()\n            unique_vals = np.unique(values_flat)\n            n_per_dim.append(len(unique_vals))\n            n_ids.append(list(unique_vals))\n            obs_ids.append(list(unique_vals))\n        return n_per_dim, n_ids, obs_ids\n\n    # For actions\n    if action_info['shape'] == ():\n        # Scalar actions\n        n_actions_per_dim = []\n        n_action_ids = []\n        action_ids = []\n        action_dim = 0\n    else:\n        n_actions_per_dim, n_action_ids, action_ids = get_unique_per_dim(actions_flat, action_info['shape'])\n        action_dim = len(action_info['shape'])\n\n    # For observations\n    if obs_info['shape'] == ():\n        # Scalar observations\n        n_obs_per_dim = []\n        n_obs_ids = []\n        obs_ids = []\n        obs_dim = 0\n    else:\n        n_obs_per_dim, n_obs_ids, obs_ids = get_unique_obs_per_dim(observations_flat, obs_info['shape'])\n        obs_dim = len(obs_info['shape'])\n\n    # Prepare final dictionary\n    result = {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n    return result\n```"}
{"task_id": 412, "completion_id": 0, "completion": "```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n\n    def accuracy(y_true, y_pred):\n        total = len(y_true)\n        correct = sum(1 for yt, yp in zip(y_true, y_pred) if yt == yp)\n        result = correct / total if total > 0 else 0\n        return round(result, 4)\n\n    def precision(y_true, y_pred):\n        tp = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 1 and yp == 1)\n        fp = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 0 and yp == 1)\n        denom = tp + fp\n        result = tp / denom if denom > 0 else 0\n        return round(result, 4)\n\n    def recall(y_true, y_pred):\n        tp = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 1 and yp == 1)\n        fn = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 1 and yp == 0)\n        denom = tp + fn\n        result = tp / denom if denom > 0 else 0\n        return round(result, 4)\n\n    def f1(y_true, y_pred):\n        p = precision(y_true, y_pred)\n        r = recall(y_true, y_pred)\n        if p + r == 0:\n            return 0\n        f1_score = 2 * p * r / (p + r)\n        return round(f1_score, 4)\n\n    metrics = {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1\n    }\n\n    return metrics.get(name, -1)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    # Initialize predictions with the mean of y_train\n    y_pred = np.full(shape=y_train.shape, fill_value=np.mean(y_train))\n    # Store the final predictions for test data\n    test_predictions = np.zeros(X_test.shape[0])\n\n    def fit_tree(X, residuals, depth):\n        \"\"\"\n        Fit a regression tree to residuals with limited depth.\n        Returns a tree represented as a nested dictionary.\n        \"\"\"\n        # If max depth reached or no data, return mean\n        if depth == 0 or len(X) == 0:\n            return {'value': np.mean(residuals)}\n\n        n_samples, n_features = X.shape\n        best_feature = None\n        best_threshold = None\n        best_error = np.inf\n        best_left_idx = None\n        best_right_idx = None\n        best_left_mean = None\n        best_right_mean = None\n\n        # For each feature, try all possible splits\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            # To reduce computation, consider midpoints between sorted unique values\n            potential_thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n            for threshold in potential_thresholds:\n                left_idx = feature_values <= threshold\n                right_idx = feature_values > threshold\n\n                if np.sum(left_idx) == 0 or np.sum(right_idx) == 0:\n                    continue\n\n                left_residuals = residuals[left_idx]\n                right_residuals = residuals[right_idx]\n\n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n\n                # Compute squared error\n                error = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_left_idx = left_idx\n                    best_right_idx = right_idx\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n\n        # If no split improves error, return mean\n        if best_feature is None:\n            return {'value': np.mean(residuals)}\n\n        # Recursively build left and right subtrees\n        left_subtree = fit_tree(X[best_left_idx], residuals[best_left_idx], depth - 1)\n        right_subtree = fit_tree(X[best_right_idx], residuals[best_right_idx], depth - 1)\n\n        return {\n            'feature': best_feature,\n            'threshold': best_threshold,\n            'left': left_subtree,\n            'right': right_subtree\n        }\n\n    def predict_tree(tree, X):\n        \"\"\"\n        Predict using the regression tree.\n        \"\"\"\n        if 'value' in tree:\n            return np.full(shape=X.shape[0], fill_value=tree['value'])\n        feature_idx = tree['feature']\n        threshold = tree['threshold']\n        left_idx = X[:, feature_idx] <= threshold\n        right_idx = X[:, feature_idx] > threshold\n        predictions = np.empty(X.shape[0])\n        predictions[left_idx] = predict_tree(tree['left'], X[left_idx])\n        predictions[right_idx] = predict_tree(tree['right'], X[right_idx])\n        return predictions\n\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        # Fit a regression tree to residuals\n        tree = fit_tree(X_train, residuals, max_depth)\n        # Predict residuals on training data\n        residual_pred = predict_tree(tree, X_train)\n        # Update the overall prediction\n        y_pred += learning_rate * residual_pred\n\n        # For test data, predict residuals and update\n        test_residual_pred = predict_tree(tree, X_test)\n        test_predictions += learning_rate * test_residual_pred\n\n    # Round predictions to 4 decimal places and convert to list\n    final_predictions = np.round(test_predictions, 4).tolist()\n    return final_predictions\n```"}
{"task_id": 414, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n\n    # Validate inputs\n    if step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n\n    # Calculate current stage\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n\n    # Compute learning rate\n    lr = initial_lr * (decay ** curr_stage)\n\n    # Round to 6 decimal places\n    return round(lr, 6)\n```"}
{"task_id": 415, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Compute the un-normalised 1-D DCT-II of the input frame.\"\"\"\n    if not frame:\n        return []\n\n    x = np.array(frame, dtype=float)\n    N = len(x)\n    n = np.arange(N)\n    k = np.arange(N)\n\n    # Compute the cosine matrix: shape (N, N)\n    # Each element: cos[ \u03c0/N * (n + 0.5) * k ]\n    cosine_matrix = np.cos(np.pi / N * np.outer(n + 0.5, k))\n    \n    # Compute the DCT coefficients\n    X = np.dot(cosine_matrix.T, x)\n\n    # Round to 4 decimal places\n    rounded_X = np.round(X, 4)\n\n    return rounded_X.tolist()\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the multivariate Gaussian PDF for each data point in X without using third-party libraries.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features) or (n_samples,) if 1D\n    - mean: 1D array-like of length n_features\n    - cov: 2D array-like of shape (n_features, n_features), positive-definite covariance matrix\n    \n    Returns:\n    - List of PDF values for each sample in X, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.atleast_2d(X)\n    mean = np.array(mean)\n    cov = np.array(cov)\n    \n    n_samples, n_features = X.shape\n    \n    # Compute the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError(\"Covariance matrix must be positive definite.\")\n    \n    # Compute the inverse of the covariance matrix\n    cov_inv = np.linalg.inv(cov)\n    \n    # Constant coefficient\n    denom_const = math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    results = []\n    for x in X:\n        diff = x - mean\n        # Compute the exponent term: -0.5 * (x - mu)^T * cov_inv * (x - mu)\n        exponent = -0.5 * np.dot(np.dot(diff.T, cov_inv), diff)\n        pdf_value = (1.0 / denom_const) * math.exp(exponent)\n        results.append(round(pdf_value, 4))\n    \n    return results\n```"}
{"task_id": 417, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import list\n\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    # 1. Center the data by subtracting the column-wise mean\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n\n    # 2. Build the unbiased covariance matrix\n    n_samples = data.shape[0]\n    cov_matrix = (centered_data.T @ centered_data) / (n_samples - 1)\n\n    # 3. Eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # 4. Sort eigenvectors by descending eigenvalues\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_idx]\n    eigenvectors = eigenvectors[:, sorted_idx]\n\n    # 5. Keep the first k eigenvectors\n    k = min(k, eigenvectors.shape[1])  # handle case when k >= number of features\n    principal_components = eigenvectors[:, :k]\n\n    # Enforce deterministic orientation: flip sign so that first non-zero component is positive\n    for i in range(k):\n        pc = principal_components[:, i]\n        # Find the index of the first non-zero component\n        non_zero_idx = np.argmax(np.abs(pc) > 1e-12)\n        if pc[non_zero_idx] < 0:\n            principal_components[:, i] = -pc\n\n    # 6. Project the centered data onto the selected eigenvectors\n    projected_data = centered_data @ principal_components\n\n    # 7. Reconstruct the data back in the original space\n    reconstructed_data = projected_data @ principal_components.T + mean\n\n    # 8. Round both matrices to 4 decimal places\n    projected_data_rounded = np.round(projected_data, 4)\n    reconstructed_data_rounded = np.round(reconstructed_data, 4)\n\n    # 9. Convert to list of lists\n    projected_list = projected_data_rounded.tolist()\n    reconstructed_list = reconstructed_data_rounded.tolist()\n\n    return projected_list, reconstructed_list\n```"}
{"task_id": 418, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    # Convert list input to numpy array if necessary\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    n_samples, n_features = X.shape\n    \n    # Handle case with fewer than 2 samples\n    if n_samples < 2:\n        return [[0.0 for _ in range(n_features)] for _ in range(n_features)]\n    \n    # Compute means of each feature\n    means = np.mean(X, axis=0)\n    \n    # Center the data by subtracting the mean\n    centered_X = X - means\n    \n    # Compute covariance matrix\n    cov_matrix = (centered_X.T @ centered_X) / (n_samples - 1)\n    \n    # Round to 4 decimal places\n    cov_matrix_rounded = np.round(cov_matrix, 4)\n    \n    # Convert to nested list\n    return cov_matrix_rounded.tolist()\n```"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function returns the MAP predictive means for every row in `X_new`.\n    \"\"\"\n    # Step 1: Add intercept if needed\n    if fit_intercept:\n        intercept_column = np.ones((X.shape[0], 1))\n        X = np.hstack((intercept_column, X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    \n    N, M = X.shape\n\n    # Step 2: Handle prior mean mu\n    # If mu is scalar, replicate to length M\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu)\n    else:\n        mu_vec = np.array(mu)\n        # If mu is a vector but length doesn't match M, raise error\n        if mu_vec.shape[0] != M:\n            raise ValueError(f\"mu vector length {mu_vec.shape[0]} does not match number of features {M}\")\n\n    # Step 2: Handle prior covariance V\n    if V is None:\n        V_mat = np.eye(M)\n    elif np.isscalar(V):\n        V_mat = V * np.eye(M)\n    else:\n        V_array = np.array(V)\n        if V_array.ndim == 1:\n            # Diagonal matrix\n            V_mat = np.diag(V_array)\n        elif V_array.ndim == 2:\n            # Full matrix\n            V_mat = V_array\n            # Check if V is symmetric and positive-definite\n            if not np.allclose(V_mat, V_mat.T):\n                raise ValueError(\"V matrix must be symmetric.\")\n            # Optional: check positive definiteness\n            # But for simplicity, assume user provides valid V\n        else:\n            raise ValueError(\"V must be None, scalar, 1D array, or 2D array.\")\n    \n    # Step 3: Compute posterior covariance and mean\n    V_inv = np.linalg.inv(V_mat)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n\n    # Step 4: Predictive mean for X_new\n    y_pred = X_new @ mu_p\n\n    # Round predictions to 4 decimal places and convert to list\n    return [round(val, 4) for val in y_pred]\n```"}
{"task_id": 420, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n        If `column` is out of bounds, both masks are empty lists.\n    \"\"\"\n    # Check if column index is valid\n    if column < 0 or column >= X.shape[1]:\n        return [], []\n\n    # Generate boolean masks using numpy comparison\n    col_values = X[:, column]\n    left_mask_np = col_values < value\n    right_mask_np = col_values >= value\n\n    # Convert numpy boolean arrays to Python lists\n    left_mask = left_mask_np.tolist()\n    right_mask = right_mask_np.tolist()\n\n    return left_mask, right_mask\n```"}
{"task_id": 421, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n\n    n_samples = data.shape[0]\n    labels = [0] * n_samples  # 0 indicates unvisited\n    cluster_id = 0\n\n    def region_query(point_idx):\n        \"\"\"Find all points within eps of the point at index point_idx.\"\"\"\n        point = data[point_idx]\n        # Compute Euclidean distances to all points\n        distances = np.linalg.norm(data - point, axis=1)\n        # Return indices of neighbors within eps\n        neighbors = np.where(distances <= eps)[0]\n        return neighbors\n\n    for idx in range(n_samples):\n        if labels[idx] != 0:\n            # Already processed\n            continue\n\n        neighbors = region_query(idx)\n\n        if len(neighbors) < min_samples:\n            # Mark as noise\n            labels[idx] = -1\n        else:\n            # Found a new cluster\n            cluster_id += 1\n            labels[idx] = cluster_id\n\n            # Initialize the list of points to process with neighbors (excluding the current point)\n            seed_queue = list(neighbors)\n            # Remove the current point if present\n            if idx in seed_queue:\n                seed_queue.remove(idx)\n\n            while seed_queue:\n                current_point = seed_queue.pop()\n\n                if labels[current_point] == -1:\n                    # Change noise to border point (assign to cluster)\n                    labels[current_point] = cluster_id\n                elif labels[current_point] == 0:\n                    # Not visited yet\n                    labels[current_point] = cluster_id\n                    current_neighbors = region_query(current_point)\n                    if len(current_neighbors) >= min_samples:\n                        # Add new neighbors to the queue\n                        for neighbor in current_neighbors:\n                            if labels[neighbor] == 0:\n                                seed_queue.append(neighbor)\n\n    return labels\n```"}
{"task_id": 422, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    arr = np.array(x, dtype=float)\n\n    # Define the SoftPlus function\n    def softplus_fn(z):\n        return np.log1p(np.exp(z))\n    \n    # Define the first derivative (sigmoid)\n    def softplus_prime(z):\n        exp_z = np.exp(z)\n        return exp_z / (1 + exp_z)\n    \n    # Define the second derivative\n    def softplus_double_prime(z):\n        exp_z = np.exp(z)\n        denom = (1 + exp_z)\n        return exp_z / (denom ** 2)\n    \n    # Compute based on order\n    if order == 0:\n        result = softplus_fn(arr)\n    elif order == 1:\n        result = softplus_prime(arr)\n    elif order == 2:\n        result = softplus_double_prime(arr)\n    else:\n        return -1\n\n    # Round to 4 decimal places\n    result_rounded = np.round(result, 4)\n\n    # Convert to list for output\n    if result_rounded.ndim == 0:\n        # Scalar\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n```"}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the RMSLE between actual and predicted values.\n    \n    Returns:\n        The RMSLE rounded to 4 decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate that all values are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Convert lists to numpy arrays for efficient computation\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    \n    # Compute the log(1 + x) for each element\n    log_actual = np.log1p(actual_np)\n    log_predicted = np.log1p(predicted_np)\n    \n    # Calculate the squared differences\n    squared_diffs = (log_predicted - log_actual) ** 2\n    \n    # Compute the mean of squared differences\n    mean_squared_diff = np.mean(squared_diffs)\n    \n    # Take the square root to get RMSLE\n    rmsle = np.sqrt(mean_squared_diff)\n    \n    # Return rounded result\n    return round(rmsle, 4)\n```"}
{"task_id": 424, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    # Convert list to numpy array for convenience\n    y_array = np.array(y)\n    \n    # Calculate the frequency of each unique label\n    values, counts = np.unique(y_array, return_counts=True)\n    \n    # Compute the probabilities\n    probabilities = counts / counts.sum()\n    \n    # Calculate the entropy\n    # To avoid log2(0), only consider probabilities > 0\n    entropy_value = -np.sum(probabilities * np.log2(probabilities))\n    \n    # Round to 4 decimal places\n    return round(entropy_value, 4)\n```"}
{"task_id": 425, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy of a one-dimensional collection of non-negative integers.\n    \n    Parameters:\n    p (list[int] | np.ndarray): Input sequence of non-negative integers.\n    \n    Returns:\n    float: The Shannon entropy rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    data = np.array(p)\n    \n    # Calculate the total count\n    total = data.sum()\n    \n    # Handle edge case: if total is zero (empty input), entropy is 0.0\n    if total == 0:\n        return 0.0\n    \n    # Calculate probabilities\n    probabilities = data / total\n    \n    # Filter out zero probabilities to avoid log(0)\n    non_zero_probs = probabilities[probabilities > 0]\n    \n    # If only one unique value, entropy is 0.0\n    if len(non_zero_probs) == 1:\n        return 0.0\n    \n    # Compute entropy\n    entropy = -np.sum(non_zero_probs * np.log(non_zero_probs))\n    \n    # Round to 4 decimal places\n    return round(entropy, 4)\n```"}
{"task_id": 426, "completion_id": 0, "completion": "```python\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # Check for empty inputs\n    if not y_true or not y_pred:\n        return -1\n\n    # Check if both lists have the same length\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Count the number of correct predictions\n    correct_predictions = sum(1 for true_label, pred_label in zip(y_true, y_pred) if true_label == pred_label)\n\n    # Calculate accuracy\n    accuracy = correct_predictions / len(y_true)\n\n    # Return rounded accuracy\n    return round(accuracy, 4)\n```"}
{"task_id": 427, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    z_array = np.array(z)\n    \n    # Identity activation: return the input unchanged\n    activation = z_array.copy()\n    \n    # Derivative: array of ones with the same shape as input\n    derivative = np.ones_like(z_array)\n    \n    # Convert results back to Python lists\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    \n    return (activation_list, derivative_list)\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n\n    if window_len == 1:\n        # For a single sample, the window is just [1.0]\n        return [1.0]\n\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n\n    # Generate the window\n    n = np.arange(N)\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n\n    if not symmetric:\n        # For periodic window, drop the last sample\n        window = window[:-1]\n\n    # Round to 4 decimal places\n    window_rounded = [round(val, 4) for val in window]\n\n    return window_rounded\n```"}
{"task_id": 429, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    # Validate input\n    if not isinstance(context, np.ndarray):\n        return -1, -1\n    if context.ndim != 1:\n        return -1, -1\n    D, K = context_probs.shape\n    if len(context) != D:\n        return -1, -1\n    if np.sum(context) != 1:\n        return -1, -1\n    if not np.all((context == 0) | (context == 1)):\n        return -1, -1\n\n    # Find the index of the active context\n    context_index = np.argmax(context)\n\n    # Extract the probabilities for the current context\n    probs = context_probs[context_index]\n\n    # Find the maximum expected reward and corresponding arm\n    max_prob = np.max(probs)\n    optimal_arm = np.argmin(np.where(probs == max_prob, np.arange(K), K))\n    # np.argmin on the array of indices where probs == max_prob ensures smallest index in case of ties\n\n    # Round the maximum probability to 4 decimal places\n    optimal_rwd = float(np.round(max_prob, 4))\n\n    return optimal_rwd, int(optimal_arm)\n```"}
{"task_id": 430, "completion_id": 0, "completion": "```python\nfrom typing import List, Dict, Set, Tuple\n\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n\n    # Build adjacency list: for each vertex, list its outgoing neighbors\n    adjacency: Dict = {v: [] for v in vertices}\n    for u, v in edges:\n        adjacency[u].append(v)\n\n    # To ensure deterministic traversal, sort neighbors according to the order in vertices\n    # Create a mapping from vertex to its index in the vertices list for sorting\n    index_map = {v: i for i, v in enumerate(vertices)}\n    for u in adjacency:\n        adjacency[u].sort(key=lambda x: index_map[x])\n\n    visited: Dict = {}  # vertex -> 'unvisited', 'visiting', 'visited'\n    result: List = []\n\n    def dfs(vertex: str) -> bool:\n        \"\"\"\n        Perform DFS starting from vertex.\n        Returns True if a cycle is detected, False otherwise.\n        \"\"\"\n        visited[vertex] = 'visiting'\n        for neighbor in adjacency[vertex]:\n            state = visited.get(neighbor, 'unvisited')\n            if state == 'visiting':\n                # Found a cycle\n                return True\n            if state == 'unvisited':\n                if dfs(neighbor):\n                    return True\n        visited[vertex] = 'visited'\n        result.append(vertex)\n        return False\n\n    # Run DFS for each vertex in the order given by 'vertices' list\n    for v in vertices:\n        if visited.get(v, 'unvisited') == 'unvisited':\n            if dfs(v):\n                return None  # Cycle detected\n\n    # The result list is in reverse topological order, so reverse it\n    result.reverse()\n    return result\n```"}
{"task_id": 431, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy manipulation\n    arr1 = np.array(x1)\n    arr2 = np.array(x2)\n    \n    # Check if both vectors are 1-D\n    if arr1.ndim != 1 or arr2.ndim != 1:\n        return -1\n    \n    # Validate that both vectors have the same length\n    if arr1.shape[0] != arr2.shape[0]:\n        return -1\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((arr1 - arr2) ** 2))\n    \n    # Round to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Check the shape length\n    if len(shape) == 4:\n        # 2D convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other tensors, take the first two dimensions directly\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return float(fan_in), float(fan_out)\n```"}
{"task_id": 434, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax and return as list of lists with probabilities rounded to 6 decimal places.\"\"\"\n    # Ensure logits is a 2D array\n    logits = np.atleast_2d(logits)\n    \n    # Subtract the max for numerical stability\n    max_logits = np.max(logits, axis=1, keepdims=True)\n    stabilized_logits = logits - max_logits\n    \n    # Compute exponentials\n    exp_logits = np.exp(stabilized_logits)\n    \n    # Compute softmax probabilities\n    sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n    softmax_probs = exp_logits / sum_exp\n    \n    # Round to 6 decimal places\n    softmax_probs_rounded = np.round(softmax_probs, 6)\n    \n    # Convert to list of lists\n    return softmax_probs_rounded.tolist()\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert input lists to numpy arrays of type float\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    m, d = X_np.shape\n\n    # Handle special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y_np)\n        return [round(mean_y, 4)] * m\n\n    # Initialize predictions with the mean of y\n    y_pred = np.full(m, np.mean(y_np))\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_np - y_pred\n\n        # Fit linear regression (including intercept) to residuals\n        # To include intercept, add a column of ones\n        X_with_intercept = np.column_stack((np.ones(m), X_np))\n        # Solve for coefficients using normal equation: (X^T X) beta = X^T y\n        # To avoid explicit matrix inversion, use np.linalg.solve\n        A = X_with_intercept.T @ X_with_intercept\n        b = X_with_intercept.T @ residuals\n        # Solve for beta\n        beta = np.linalg.solve(A, b)\n\n        # Weak learner prediction\n        h = X_with_intercept @ beta\n\n        # Update overall prediction\n        y_pred += learning_rate * h\n\n    # Round predictions to 4 decimal places\n    final_predictions = [round(val, 4) for val in y_pred]\n    return final_predictions\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check for valid order\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to numpy array for uniform processing\n    arr = np.array(x, dtype=float)\n\n    # Compute sigmoid\n    sigma = 1 / (1 + np.exp(-arr))\n\n    # Compute derivatives if needed\n    if order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        result = sigma\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return scalar if input was scalar\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to numpy array for easier processing\n    y_array = np.array(y)\n    \n    # Check for non-negative integers\n    if np.any(y_array < 0):\n        return -1\n    \n    # Determine number of classes if not provided\n    max_y = y_array.max()\n    if num_classes is None:\n        num_classes = max_y + 1\n    else:\n        # If provided, check if it's sufficient\n        if num_classes <= max_y:\n            return -1\n    \n    # Create the one-hot encoded matrix\n    # Initialize with zeros\n    one_hot = np.zeros((len(y_array), num_classes), dtype=int)\n    # Set the appropriate elements to 1\n    one_hot[np.arange(len(y_array)), y_array] = 1\n    \n    # Convert to list of lists\n    return one_hot.tolist()\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import defaultdict\nfrom typing import Hashable\n\ndef apriori_frequent_itemsets(transactions: list[list[Hashable]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Total number of transactions\n    total_transactions = len(transactions)\n    if total_transactions == 0:\n        return []\n\n    # Count support for single items\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    # Generate frequent 1-itemsets\n    frequent_itemsets = []\n    current_frequent = []\n    for item, count in item_counts.items():\n        support = count / total_transactions\n        if support >= min_sup:\n            current_frequent.append((item,))\n    # Sort 1-itemsets lex order\n    current_frequent = sorted(current_frequent, key=lambda x: x[0])\n    frequent_itemsets.extend(current_frequent)\n\n    k = 2\n    prev_frequent = current_frequent\n\n    while prev_frequent:\n        # Generate candidate k-itemsets by self-joining previous frequent itemsets\n        candidates = set()\n        prev_frequent_sorted = [list(itemset) for itemset in prev_frequent]\n        len_prev = len(prev_frequent_sorted)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                # Join if first k-2 items are equal\n                if prev_frequent_sorted[i][:-1] == prev_frequent_sorted[j][:-1]:\n                    candidate = tuple(sorted(set(prev_frequent_sorted[i]) | set(prev_frequent_sorted[j])))\n                    if len(candidate) == k:\n                        candidates.add(candidate)\n\n        # Prune candidates: remove those with infrequent subsets\n        pruned_candidates = set()\n        for candidate in candidates:\n            # Generate all (k-1)-subsets\n            subsets = itertools.combinations(candidate, k - 1)\n            if all(tuple(sorted(subset)) in prev_frequent for subset in subsets):\n                pruned_candidates.add(candidate)\n\n        # Count support for candidates\n        candidate_counts = defaultdict(int)\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in pruned_candidates:\n                if set(candidate).issubset(transaction_set):\n                    candidate_counts[candidate] += 1\n\n        # Filter candidates by support\n        current_frequent = []\n        for candidate, count in candidate_counts.items():\n            support = count / total_transactions\n            if support >= min_sup:\n                current_frequent.append(candidate)\n\n        # Sort current frequent itemsets lex order\n        current_frequent = sorted(current_frequent, key=lambda x: x)\n        if current_frequent:\n            frequent_itemsets.extend(current_frequent)\n        else:\n            break\n\n        prev_frequent = current_frequent\n        k += 1\n\n    # Final output: sort by length, then lex order\n    # Already sorted within each size, so just sort overall\n    def sort_key(itemset):\n        return (len(itemset), itemset)\n\n    return sorted(frequent_itemsets, key=sort_key)\n```"}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the nested list into a NumPy array for easier manipulation\n    preds_array = np.array(predictions)  # shape: (n_estimators, n_samples, n_classes)\n    \n    # Compute the mean over estimators axis (axis=0)\n    mean_probs = np.mean(preds_array, axis=0)  # shape: (n_samples, n_classes)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_probs = np.round(mean_probs, 4)\n    \n    # Determine the predicted class for each sample (index of max probability)\n    predicted_classes = np.argmax(rounded_probs, axis=1).tolist()\n    \n    # Convert the probabilities back to a list of lists\n    probs_list = rounded_probs.tolist()\n    \n    return probs_list, predicted_classes\n```"}
{"task_id": 441, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    # Handle edge cases\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    N = window_len\n    n = np.arange(N)\n    \n    if symmetric:\n        # Symmetric window\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    else:\n        # Periodic window: generate symmetric window of length N+1, then remove last sample\n        N_periodic = N + 1\n        n_periodic = np.arange(N_periodic)\n        w_full = 0.54 - 0.46 * np.cos(2 * np.pi * n_periodic / (N_periodic - 1))\n        w = w_full[:-1]\n    \n    # Round to 4 decimal places\n    w_rounded = [round(val, 4) for val in w]\n    return w_rounded\n```"}
{"task_id": 442, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport heapq\n\ndef build_kdtree(X, y, depth=0):\n    \"\"\"\n    Recursively build a balanced KD-Tree represented as nested tuples.\n    Each node: (split_value, left_subtree, right_subtree, indices)\n    For leaves, left_subtree and right_subtree are None.\n    \"\"\"\n    n_samples, n_features = X.shape\n    if n_samples == 0:\n        return None\n    if n_samples == 1:\n        # Leaf node: store the index of the sample\n        return (X[0], None, None, [0])\n    \n    # Select axis based on depth\n    axis = depth % n_features\n    # Sort data along the selected axis\n    sorted_idx = np.argsort(X[:, axis])\n    X_sorted = X[sorted_idx]\n    y_sorted = y[sorted_idx]\n    # Find median\n    median_idx = n_samples // 2\n    median_value = X_sorted[median_idx, axis]\n    \n    # Build subtrees recursively\n    left_X = X_sorted[:median_idx]\n    left_y = y_sorted[:median_idx]\n    right_X = X_sorted[median_idx+1:]\n    right_y = y_sorted[median_idx+1:]\n    \n    left_subtree = build_kdtree(left_X, left_y, depth + 1)\n    right_subtree = build_kdtree(right_X, right_y, depth + 1)\n    \n    # Store the index of the median point\n    median_point = X_sorted[median_idx]\n    median_label_idx = sorted_idx[median_idx]\n    return (median_point, left_subtree, right_subtree, [median_label_idx])\n\ndef kdtree_nearest_neighbors(tree, point, k, heap=None, depth=0):\n    \"\"\"\n    Search for k nearest neighbors in the KD-Tree.\n    Uses a max-heap of size at most k to keep track of closest points.\n    \"\"\"\n    if heap is None:\n        heap = []\n\n    if tree is None:\n        return heap\n\n    node_point, left, right, indices = tree\n    # Compute squared distance\n    dist = np.sum((node_point - point) ** 2)\n    # Push current point with negative distance for max-heap\n    if len(heap) < k:\n        heapq.heappush(heap, (-dist, indices[0]))\n    else:\n        if dist < -heap[0][0]:\n            heapq.heappushpop(heap, (-dist, indices[0]))\n\n    # Decide which branch to search first\n    axis = None\n    # To determine axis, we need to reconstruct the tree structure\n    # But since the tree is nested, we can infer axis from depth\n    # But in this implementation, axis is not stored; we can pass it as argument\n    # To avoid complexity, we can pass axis as an argument in recursive calls\n    # So, let's modify the function signature to include axis\n    # But for simplicity, we can store axis in the node tuple\n    # Let's modify the build function to store axis as well\n\ndef build_kdtree_with_axis(X, y, depth=0):\n    \"\"\"\n    Same as build_kdtree but also stores axis in the node.\n    \"\"\"\n    n_samples, n_features = X.shape\n    if n_samples == 0:\n        return None\n    if n_samples == 1:\n        return (X[0], None, None, [0], 0)\n    axis = depth % n_features\n    sorted_idx = np.argsort(X[:, axis])\n    X_sorted = X[sorted_idx]\n    y_sorted = y[sorted_idx]\n    median_idx = n_samples // 2\n    median_value = X_sorted[median_idx, axis]\n    left_X = X_sorted[:median_idx]\n    left_y = y_sorted[:median_idx]\n    right_X = X_sorted[median_idx+1:]\n    right_y = y_sorted[median_idx+1:]\n    left_subtree = build_kdtree_with_axis(left_X, left_y, depth + 1)\n    right_subtree = build_kdtree_with_axis(right_X, right_y, depth + 1)\n    median_point = X_sorted[median_idx]\n    median_idx_global = sorted_idx[median_idx]\n    return (median_point, left_subtree, right_subtree, [median_idx_global], axis)\n\ndef kdtree_nearest_neighbors(tree, point, k, heap=None):\n    \"\"\"\n    Search for k nearest neighbors in the KD-Tree.\n    \"\"\"\n    if heap is None:\n        heap = []\n\n    if tree is None:\n        return\n\n    node_point, left, right, indices, axis = tree\n    dist = np.sum((node_point - point) ** 2)\n    # Max-heap: store negative distance\n    if len(heap) < k:\n        heapq.heappush(heap, (-dist, indices[0]))\n    else:\n        if dist < -heap[0][0]:\n            heapq.heappushpop(heap, (-dist, indices[0]))\n\n    # Decide which branch to search first\n    diff = point[axis] - node_point[axis]\n    first_branch = left if diff < 0 else right\n    second_branch = right if diff < 0 else left\n\n    # Search first branch\n    kdtree_nearest_neighbors(first_branch, point, k, heap)\n\n    # Check if we need to search the other branch\n    if len(heap) < k or diff ** 2 < -heap[0][0]:\n        kdtree_nearest_neighbors(second_branch, point, k, heap)\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a KD-Tree.\"\"\"\n    # Build KD-Tree with axis info\n    tree = build_kdtree_with_axis(X_train, y_train)\n\n    predictions = []\n\n    for x in X_test:\n        heap = []\n        kdtree_nearest_neighbors(tree, x, k, heap)\n        # Extract labels from heap\n        neighbor_labels = [y_train[idx] for _, idx in heap]\n        # Majority vote with tie-breaking by smallest class label\n        counts = np.bincount(neighbor_labels)\n        pred_label = np.argmax(counts)\n        predictions.append(pred_label)\n\n    return predictions\n```"}
{"task_id": 443, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    # Extract the column to compare\n    feature_column = X[:, feature_i]\n\n    # Check if threshold is numeric (int or float)\n    if isinstance(threshold, (int, float)):\n        # Create boolean mask for rows where feature >= threshold\n        mask_left = feature_column >= threshold\n    else:\n        # For non-numeric threshold, check for equality\n        mask_left = feature_column == threshold\n\n    # Use boolean masks to split the data\n    left_subset = X[mask_left]\n    right_subset = X[~mask_left]\n\n    return left_subset, right_subset\n```"}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert X to numpy array\n    try:\n        X_np = np.array(X, dtype=float)\n    except Exception:\n        return -1\n\n    # Validate X shape\n    if X_np.ndim != 2:\n        return -1\n\n    N, C = X_np.shape\n\n    # Handle Y\n    if Y is None:\n        Y_np = X_np\n    else:\n        try:\n            Y_np = np.array(Y, dtype=float)\n        except Exception:\n            return -1\n        # Validate Y shape\n        if Y_np.ndim != 2:\n            return -1\n        if Y_np.shape[1] != C:\n            return -1\n\n    # Validate sigma\n    if sigma is None:\n        # Default: sqrt(C/2)\n        sigma_value = np.sqrt(C / 2)\n        sigma_array = np.full(C, sigma_value)\n    elif isinstance(sigma, (float, int)):\n        # Single value for all features\n        if sigma <= 0:\n            return -1\n        sigma_array = np.full(C, float(sigma))\n    elif isinstance(sigma, list) or isinstance(sigma, np.ndarray):\n        # List of per-feature sigma\n        sigma_list = np.array(sigma, dtype=float)\n        if sigma_list.shape != (C,):\n            return -1\n        if np.any(sigma_list <= 0):\n            return -1\n        sigma_array = sigma_list\n    else:\n        return -1\n\n    # Compute the squared Euclidean distance matrix\n    # Efficient computation using broadcasting\n    # dist_{i,j}^2 = sum_j ((x_{i,j} - y_{j})/sigma_j)^2\n    # We can compute as:\n    # (X / sigma) and (Y / sigma), then compute pairwise squared distances\n    X_scaled = X_np / sigma_array\n    Y_scaled = Y_np / sigma_array\n\n    # Compute pairwise squared distances\n    # Using (a - b)^2 = a^2 + b^2 - 2ab\n    X_sq = np.sum(X_scaled ** 2, axis=1).reshape(-1, 1)  # shape (N,1)\n    Y_sq = np.sum(Y_scaled ** 2, axis=1).reshape(1, -1)  # shape (1,M)\n    cross_term = np.dot(X_scaled, Y_scaled.T)  # shape (N, M)\n\n    dist_sq = X_sq + Y_sq - 2 * cross_term\n    # Numerical stability: ensure no negative values due to floating point errors\n    dist_sq = np.maximum(dist_sq, 0)\n\n    # Compute the kernel matrix\n    kernel_matrix = np.exp(-0.5 * dist_sq)\n\n    # Round to 4 decimal places\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n\n    # Convert to nested list\n    result = kernel_matrix_rounded.tolist()\n\n    return result\n```"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    # Convert inputs to numpy arrays for easier processing\n    X = np.array(X)\n    y = np.array(y)\n\n    n_samples, n_features = X.shape\n\n    # Function to compute entropy\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probs = counts / counts.sum()\n        # To avoid log(0), mask zero probabilities\n        probs = probs[probs > 0]\n        return -np.sum(probs * np.log2(probs))\n\n    # Compute parent entropy\n    parent_entropy = entropy(y)\n\n    # If all labels are the same, no split can improve\n    unique_labels, counts_labels = np.unique(y, return_counts=True)\n    if len(unique_labels) == 1:\n        # All labels are same, no split improves\n        majority_label = unique_labels[0]\n        return (-1, None, majority_label, majority_label)\n\n    # Initialize variables to track best split\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    best_left_majority = None\n    best_right_majority = None\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        # Get sorted unique values\n        unique_values = np.unique(feature_values)\n        if len(unique_values) == 1:\n            # No split possible on this feature\n            continue\n\n        # Candidate thresholds are midpoints between successive unique values\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n        for thr in thresholds:\n            # Split data\n            left_mask = feature_values <= thr\n            right_mask = ~left_mask\n\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n\n            # Compute entropies\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n\n            # Compute information gain\n            gain = parent_entropy - (p_left * H_left + p_right * H_right)\n\n            # Check if this is better than current best\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = round(thr, 4)\n                # Determine majority labels for left and right\n                if len(y_left) > 0:\n                    left_counts = np.bincount(y_left)\n                    left_majority = np.argmax(left_counts)\n                else:\n                    # If no samples go left, fallback to overall majority\n                    left_majority = np.argmax(np.bincount(y))\n                if len(y_right) > 0:\n                    right_counts = np.bincount(y_right)\n                    right_majority = np.argmax(right_counts)\n                else:\n                    right_majority = np.argmax(np.bincount(y))\n            elif np.isclose(gain, best_gain):\n                # Tie in gain: choose the split with smaller feature index\n                # and if same, smaller threshold\n                if feature_idx < best_feature:\n                    best_feature = feature_idx\n                    best_threshold = round(thr, 4)\n                    if len(y_left) > 0:\n                        left_counts = np.bincount(y_left)\n                        left_majority = np.argmax(left_counts)\n                    else:\n                        left_majority = np.argmax(np.bincount(y))\n                    if len(y_right) > 0:\n                        right_counts = np.bincount(y_right)\n                        right_majority = np.argmax(right_counts)\n                    else:\n                        right_majority = np.argmax(np.bincount(y))\n                elif feature_idx == best_feature:\n                    # Same feature, compare thresholds\n                    if thr < best_threshold:\n                        best_threshold = round(thr, 4)\n                        if len(y_left) > 0:\n                            left_counts = np.bincount(y_left)\n                            left_majority = np.argmax(left_counts)\n                        else:\n                            left_majority = np.argmax(np.bincount(y))\n                        if len(y_right) > 0:\n                            right_counts = np.bincount(y_right)\n                            right_majority = np.argmax(right_counts)\n                        else:\n                            right_majority = np.argmax(np.bincount(y))\n\n    # If no split improves (gain <= 0), return default\n    if best_gain <= 0:\n        # All labels are same or no split improves\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n\n    # Return the best split info\n    # Determine majority labels for final split\n    y_left_final = y[X[:, best_feature] <= best_threshold]\n    y_right_final = y[X[:, best_feature] > best_threshold]\n    left_counts = np.bincount(y_left_final)\n    right_counts = np.bincount(y_right_final)\n    left_majority = np.argmax(left_counts)\n    right_majority = np.argmax(right_counts)\n\n    return (best_feature, best_threshold, left_majority, right_majority)\n```"}
{"task_id": 447, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    # Convert shape to a tuple if it's a list\n    if isinstance(shape, list):\n        shape = tuple(shape)\n    elif isinstance(shape, int):\n        shape = (shape,)\n    elif not isinstance(shape, tuple):\n        # If shape is some other type, attempt to convert to tuple\n        shape = tuple(shape)\n\n    # Create a NumPy array of ones with the specified shape and kwargs\n    array = np.ones(shape, **kwargs)\n\n    # Convert the NumPy array to a nested list\n    return array.tolist()\n```"}
{"task_id": 448, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if y_train.size == 0:\n        return []\n\n    mean_value = np.mean(y_train)\n    n_test_samples = X_test.shape[0]\n    predictions = [round(mean_value, 4)] * n_test_samples\n    return predictions\n```"}
{"task_id": 449, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    # Separate the training data by class\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    \n    # Compute class means\n    Mu0 = np.mean(X0, axis=0)\n    Mu1 = np.mean(X1, axis=0)\n    \n    # Stack centered data\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    \n    # Compute covariance matrix (not used later, but per instructions)\n    m = X_train.shape[1]\n    Sigma = (1.0 / m) * np.dot(X_sub_Mu.T, X_sub_Mu)\n    \n    # Compute the normal vector (direction of the hyperplane)\n    normal_vec = Mu1 - Mu0\n    # Normalize to unit vector\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec ** 2))\n    \n    # Compute the bias term\n    b = -np.dot(normal_vec.T, (Mu0 + Mu1) / 2)\n    \n    # Determine the sign factor\n    sign = int(np.dot(normal_vec.T, Mu1) + b > 0)\n    \n    # Make predictions on X_test\n    preds = (np.dot(X_test, normal_vec) + b > 0).astype(int) * sign\n    \n    # Return as list of ints\n    return preds.tolist()\n```"}
{"task_id": 450, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    n_samples = preds.shape[0]\n    final_predictions = []\n\n    for i in range(n_samples):\n        # Count the occurrences of each class label for the current sample\n        counts = np.bincount(preds[i])\n        # Find the class with the highest count; in case of tie, np.argmax returns the smallest class\n        majority_class = np.argmax(counts)\n        final_predictions.append(int(majority_class))\n    \n    return final_predictions\n```"}
{"task_id": 451, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\n\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    list[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n\n    # Handle edge cases\n    if X_train.shape[0] == 0 or k <= 0:\n        return []\n\n    # Build the KD-Tree node class\n    class KDNode:\n        def __init__(self, point: np.ndarray, label: int, left: Optional['KDNode'], right: Optional['KDNode'], axis: int):\n            self.point = point\n            self.label = label\n            self.left = left\n            self.right = right\n            self.axis = axis\n\n    def build_kdtree(points: np.ndarray, labels: np.ndarray, depth: int = 0) -> Optional[KDNode]:\n        if len(points) == 0:\n            return None\n        # Select axis based on depth so that axis cycles through all features\n        k_features = points.shape[1]\n        axis = depth % k_features\n        # Sort points along the selected axis\n        sorted_idx = np.argsort(points[:, axis])\n        points = points[sorted_idx]\n        labels = labels[sorted_idx]\n        median_idx = len(points) // 2\n        # Create node and construct subtrees\n        return KDNode(\n            point=points[median_idx],\n            label=labels[median_idx],\n            left=build_kdtree(points[:median_idx], labels[:median_idx], depth + 1),\n            right=build_kdtree(points[median_idx + 1:], labels[median_idx + 1:], depth + 1),\n            axis=axis\n        )\n\n    def distance_squared(p1: np.ndarray, p2: np.ndarray) -> float:\n        return np.sum((p1 - p2) ** 2)\n\n    def knn_search(node: Optional[KDNode], target: np.ndarray, k: int, heap: List[Tuple[float, int]]):\n        if node is None:\n            return\n        # Compute squared distance\n        dist = distance_squared(target, node.point)\n        # Use a max-heap (by negative distance) to keep track of k nearest neighbors\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist, node.label))\n        else:\n            if dist < -heap[0][0]:\n                heapq.heappushpop(heap, (-dist, node.label))\n        # Decide which branch to search first\n        axis = node.axis\n        diff = target[axis] - node.point[axis]\n        # Search the side that target is on\n        first, second = (node.left, node.right) if diff < 0 else (node.right, node.left)\n        knn_search(first, target, k, heap)\n        # Check if we need to search the other side\n        if len(heap) < k or diff ** 2 < -heap[0][0]:\n            knn_search(second, target, k, heap)\n\n    # Build the KD-Tree\n    tree_root = build_kdtree(X_train, y_train)\n\n    predictions = []\n\n    for x in X_test:\n        heap: List[Tuple[float, int]] = []\n        knn_search(tree_root, x, k, heap)\n        # Count labels among neighbors\n        labels = [label for _, label in heap]\n        count = Counter(labels)\n        # Find the label with the highest count, tie-break by smallest label\n        max_count = max(count.values())\n        candidates = [label for label, cnt in count.items() if cnt == max_count]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n\n    return predictions\n```"}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to numpy array if it's a list\n    X_array = np.array(X)\n    \n    # Extract the feature column\n    feature_column = X_array[:, feature_i]\n    \n    # Determine if threshold is numeric\n    is_numeric_threshold = isinstance(threshold, (int, float))\n    \n    # Create boolean mask for the first subset\n    if is_numeric_threshold:\n        mask_first = feature_column >= threshold\n    else:\n        mask_first = feature_column == threshold\n    \n    # Use the mask to split the data\n    first_subset = X_array[mask_first]\n    second_subset = X_array[~mask_first]\n    \n    # Convert to list of lists\n    result = [first_subset.tolist(), second_subset.tolist()]\n    return result\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n\n    # Validate input lengths\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n\n    # Validate gamma\n    if not (0 <= gamma <= 1):\n        return -1\n\n    batch_size, n_actions = Q.shape\n\n    # Validate Q and Q_next shapes\n    if Q_next.shape != Q.shape:\n        return -1\n\n    # Validate actions are within valid range\n    if any((a < 0 or a >= n_actions) for a in actions):\n        return -1\n\n    # Initialize the target matrix as a copy of Q\n    targets = np.copy(Q)\n\n    for i in range(batch_size):\n        if dones[i]:\n            target_value = rewards[i]\n        else:\n            max_next_q = np.max(Q_next[i])\n            target_value = rewards[i] + gamma * max_next_q\n\n        # Replace only the action taken\n        targets[i][actions[i]] = target_value\n\n    # Round to 4 decimal places\n    targets = np.round(targets, 4)\n\n    # Convert to list of lists\n    return targets.tolist()\n```"}
{"task_id": 454, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    # Half batch size\n    half = batch_size // 2\n\n    # Labels for real images: [1, 0]\n    valid_half = np.array([[1, 0]] * half)\n    # Labels for fake images: [0, 1]\n    fake_half = np.array([[0, 1]] * half)\n    # Full batch labels: first half real, second half fake\n    valid_full = np.vstack((valid_half, fake_half))\n\n    # Convert to lists\n    return valid_half.tolist(), fake_half.tolist(), valid_full.tolist()\n```"}
{"task_id": 455, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\n\ndef knn_classifier(X_train, y_train, X_query, k, method=\"naive\"):\n    \"\"\"k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, default \"naive\"\n        Neighbour search strategy: \"naive\", \"heap\" or \"kdtree\".\n\n    Returns\n    -------\n    list[int]\n        Predicted label for each query sample.\n    \"\"\"\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_query = np.array(X_query)\n\n    n_samples, n_features = X_train.shape\n\n    # --- KD-Tree implementation ---\n    class KDTreeNode:\n        def __init__(self, point_indices, depth=0):\n            self.point_indices = point_indices  # indices of points in this node\n            self.left = None\n            self.right = None\n            self.axis = None\n            self.median = None\n            self.is_leaf = False\n\n    def build_kdtree(indices, depth=0):\n        if len(indices) == 0:\n            return None\n        if len(indices) <= 10:\n            # Make a leaf node\n            node = KDTreeNode(indices, depth)\n            node.is_leaf = True\n            return node\n\n        # Choose axis to split on\n        axis = depth % n_features\n        # Alternatively, for better balance, split on axis with largest variance\n        # variances = np.var(X_train[indices], axis=0)\n        # axis = np.argmax(variances)\n\n        # Sort points along the chosen axis\n        sorted_indices = indices[np.argsort(X_train[indices, axis])]\n        median_idx = len(sorted_indices) // 2\n        median_point_idx = sorted_indices[median_idx]\n        median_value = X_train[median_point_idx, axis]\n\n        node = KDTreeNode(indices, depth)\n        node.axis = axis\n        node.median = median_value\n\n        left_indices = sorted_indices[:median_idx]\n        right_indices = sorted_indices[median_idx:]\n\n        node.left = build_kdtree(left_indices, depth + 1)\n        node.right = build_kdtree(right_indices, depth + 1)\n\n        return node\n\n    def kdtree_search(node, point, k, heap):\n        if node is None:\n            return\n\n        if node.is_leaf:\n            # Check all points in the leaf\n            for idx in node.point_indices:\n                dist = np.linalg.norm(X_train[idx] - point)\n                if len(heap) < k:\n                    heapq.heappush(heap, (-dist, y_train[idx]))\n                else:\n                    if dist < -heap[0][0]:\n                        heapq.heappushpop(heap, (-dist, y_train[idx]))\n            return\n\n        axis = node.axis\n        # Decide which branch to visit first\n        if point[axis] <= node.median:\n            first, second = node.left, node.right\n        else:\n            first, second = node.right, node.left\n\n        # Search the side that contains the query point\n        kdtree_search(first, point, k, heap)\n\n        # Check if we need to visit the other side\n        if len(heap) < k:\n            need_other = True\n        else:\n            # Check if the hypersphere crosses the splitting plane\n            dist_to_plane = abs(point[axis] - node.median)\n            need_other = dist_to_plane < -heap[0][0]\n\n        if need_other:\n            kdtree_search(second, point, k, heap)\n\n    # --- Main classifier logic ---\n predictions = []\n\n    if method == \"naive\":\n        # For each query, compute all distances\n        for q in X_query:\n            dists = np.linalg.norm(X_train - q, axis=1)\n            nearest_indices = np.argpartition(dists, k)[:k]\n            nearest_labels = y_train[nearest_indices]\n            # Majority vote with tie-breaking\n            count = Counter(nearest_labels)\n            max_count = max(count.values())\n            candidates = [label for label, cnt in count.items() if cnt == max_count]\n            predictions.append(min(candidates))\n\n    elif method == \"heap\":\n        # For each query, compute all distances once, then use heapq.nsmallest\n        for q in X_query:\n            dists = np.linalg.norm(X_train - q, axis=1)\n            nearest_indices = heapq.nsmallest(k, range(len(dists)), key=dists.__getitem__)\n            nearest_labels = y_train[nearest_indices]\n            count = Counter(nearest_labels)\n            max_count = max(count.values())\n            candidates = [label for label, cnt in count.items() if cnt == max_count]\n            predictions.append(min(candidates))\n\n    elif method == \"kdtree\":\n        # Build KD-Tree once\n        all_indices = np.array(range(n_samples))\n        root = build_kdtree(all_indices)\n\n        for q in X_query:\n            heap = []\n            kdtree_search(root, q, k, heap)\n            # heap contains (-distance, label), get labels\n            labels = [label for (_, label) in heap]\n            count = Counter(labels)\n            max_count = max(count.values())\n            candidates = [label for label, cnt in count.items() if cnt == max_count]\n            predictions.append(min(candidates))\n    else:\n        raise ValueError(\"Unknown method: {}\".format(method))\n\n    return predictions\n```"}
{"task_id": 456, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 p_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check for valid number of observations\n    if X.shape[0] < 2:\n        return -1\n\n    # If Y is provided, validate its shape\n    if Y is not None:\n        if Y.shape[0] != X.shape[0]:\n            return -1\n        Y_valid = Y\n    else:\n        Y_valid = X\n\n    n = X.shape[0]\n\n    # Center the data by subtracting the mean of each feature\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y_valid - np.mean(Y_valid, axis=0)\n\n    # Compute the covariance matrix\n    cov_matrix = (X_centered.T @ Y_centered) / (n - 1)\n\n    # Round to 4 decimal places\n    cov_matrix_rounded = np.round(cov_matrix, 4)\n\n    # Convert to list of lists\n    return cov_matrix_rounded.tolist()\n```"}
{"task_id": 457, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    # Validate alpha\n    if not (0 <= alpha <= 1):\n        return -1\n\n    # Convert weights to numpy array for vectorized operations\n    w = np.array(weights)\n\n    # Compute the penalty\n    l2_component = 0.5 * alpha * np.sum(w ** 2)\n    l1_component = (1 - alpha) * np.sum(np.abs(w))\n    penalty = l2_component + l1_component\n\n    # Round to 4 decimal places\n    return round(penalty, 4)\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to numpy array for easier processing\n    labels_array = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    max_label = np.max(labels_array)\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        # If provided, check if num_classes is sufficient\n        if num_classes <= max_label:\n            return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot = []\n    for label in labels_array:\n        # Create a row of zeros\n        row = [0] * num_classes\n        # Set the position of the label to 1\n        row[label] = 1\n        one_hot.append(row)\n    \n    return one_hot\n```"}
{"task_id": 459, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport heapq\n\ndef knn_validate_heap(X_train: \"np.ndarray\",\n                      Y_train: \"np.ndarray\",\n                      X_val: \"np.ndarray\",\n                      Y_val: \"np.ndarray\",\n                      k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    predicted_labels = []\n\n    for x in X_val:\n        # Initialize an empty max-heap (store negative distances for max-heap behavior)\n        heap = []\n\n        for idx, train_sample in enumerate(X_train):\n            # Compute Euclidean distance\n            dist = np.linalg.norm(x - train_sample)\n\n            # Push the negative distance and index onto the heap\n            # We use negative distance because heapq is a min-heap\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, idx))\n            else:\n                # If current distance is smaller than the largest in heap\n                if -heap[0][0] > dist:\n                    # Replace the largest distance with the current one\n                    heapq.heapreplace(heap, (-dist, idx))\n        # Extract the indices of the k nearest neighbors\n        neighbor_indices = [idx for (_, idx) in heap]\n\n        # Get the labels of the neighbors\n        neighbor_labels = Y_train[neighbor_indices]\n\n        # Count votes and determine the majority label\n        counts = np.bincount(neighbor_labels)\n        predicted_label = np.argmax(counts)\n        predicted_labels.append(int(predicted_label))\n\n    # Compute accuracy\n    predicted_labels_np = np.array(predicted_labels)\n    accuracy = np.mean(predicted_labels_np == Y_val)\n    accuracy = round(accuracy, 4)\n\n    return accuracy, predicted_labels\n```"}
{"task_id": 460, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted. Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    # If Y is None, set it to X for correlation of X with itself\n    if Y is None:\n        Y = X\n\n    # Check if X and Y have the same number of samples (rows)\n    if X.shape[0] != Y.shape[0]:\n        return -1\n\n    n_samples = X.shape[0]\n\n    # Compute means for each column\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n\n    # Center the data\n    X_centered = X - mean_X\n    Y_centered = Y - mean_Y\n\n    # Compute standard deviations for each column\n    std_X = np.sqrt(np.sum(X_centered ** 2, axis=0) / n_samples)\n    std_Y = np.sqrt(np.sum(Y_centered ** 2, axis=0) / n_samples)\n\n    # Check for zero standard deviation in any column\n    if np.any(std_X == 0) or np.any(std_Y == 0):\n        return -1\n\n    # Compute covariance matrix\n    cov = (X_centered.T @ Y_centered) / n_samples\n\n    # Compute correlation matrix\n    corr_matrix = cov / np.outer(std_X, std_Y)\n\n    # Round to four decimal places\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n\n    # Convert to list of lists\n    return corr_matrix_rounded.tolist()\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(x)\n    Y = np.array(y)\n    n_samples = len(X)\n    \n    # Handle edge cases\n    if n_estimators <= 0:\n        # Return the mean target for all samples\n        mean_y = np.round(np.mean(Y), 4)\n        return [mean_y] * n_samples\n    \n    # Initialize predictions with the mean of y\n    y_pred = np.full(n_samples, np.mean(Y))\n    \n    for _ in range(n_estimators):\n        residuals = Y - y_pred  # current residuals\n        \n        # If residuals are all zero, no need to continue\n        if np.allclose(residuals, 0):\n            break\n        \n        # Get unique sorted x values\n        unique_x = np.unique(X)\n        # Candidate split points are midpoints between consecutive unique x values\n        split_candidates = (unique_x[:-1] + unique_x[1:]) / 2\n        \n        best_sse = None\n        best_split = None\n        best_v_left = 0\n        best_v_right = 0\n        \n        for t in split_candidates:\n            # Split data\n            left_mask = X <= t\n            right_mask = X > t\n            \n            # Ignore splits that produce empty sides\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            \n            # Compute residual means on each side\n            v_left = np.mean(residuals[left_mask])\n            v_right = np.mean(residuals[right_mask])\n            \n            # Compute SSE for this split\n            sse_left = np.sum((residuals[left_mask] - v_left) ** 2)\n            sse_right = np.sum((residuals[right_mask] - v_right) ** 2)\n            total_sse = sse_left + sse_right\n            \n            # Check if this is the best split so far\n            if (best_sse is None) or (total_sse < best_sse):\n                best_sse = total_sse\n                best_split = t\n                best_v_left = v_left\n                best_v_right = v_right\n        \n        # If no valid split found, set stump to mean residual of entire data\n        if best_split is None:\n            overall_mean_residual = np.mean(residuals)\n            v_left = v_right = overall_mean_residual\n        else:\n            v_left = best_v_left\n            v_right = best_v_right\n        \n        # Make predictions with the stump\n        stump_pred = np.where(X <= best_split, v_left, v_right)\n        \n        # Update the overall prediction\n        y_pred += learning_rate * stump_pred\n    \n    # Round predictions to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 462, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    # If D is 0 or 1, return the input unchanged\n    if D <= 1:\n        return mfccs\n\n    G, C = mfccs.shape\n    # Create the lifter vector of shape (C,)\n    n = np.arange(C)\n    lifter = 1 + (D / 2.0) * np.sin(np.pi * n / D)\n\n    # Apply the lifter to each frame (row-wise)\n    # Broadcasting: (G, C) * (C,) -> (G, C)\n    return mfccs * lifter\n```"}
{"task_id": 463, "completion_id": 0, "completion": "```python\nimport math\n\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    if not X:\n        return 0.0\n\n    max_distance = 0.0\n    for point in X:\n        # Calculate Euclidean distance between centroid and point\n        distance = math.sqrt(sum((c - p) ** 2 for c, p in zip(centroid, point)))\n        if distance > max_distance:\n            max_distance = distance\n\n    return round(max_distance, 4)\n```"}
{"task_id": 464, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    predictions = []\n\n    for x in X_val:\n        # Compute Euclidean distances to all training points\n        distances = np.linalg.norm(X_train - x, axis=1)\n        # Find indices of the k closest neighbors\n        neighbor_indices = np.argpartition(distances, k - 1)[:k]\n        # Get the labels of these neighbors\n        neighbor_labels = Y_train[neighbor_indices]\n        # Count the occurrences of each label\n        label_counts = np.bincount(neighbor_labels)\n        # Select the label with the highest count; in case of tie, np.argmax returns smallest label\n        predicted_label = np.argmax(label_counts)\n        predictions.append(predicted_label)\n\n    # Calculate accuracy\n    correct = sum(p == y for p, y in zip(predictions, Y_val))\n    accuracy = round(correct / len(Y_val), 4)\n\n    return accuracy, predictions\n```"}
{"task_id": 465, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n    def f(x1, x2):\n        # Convert inputs to numpy arrays for consistent operations\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n        # Compute squared Euclidean distance\n        dist_sq = np.sum((x1 - x2) ** 2)\n        # Compute the RBF similarity\n        similarity = np.exp(-gamma * dist_sq)\n        # Round to four decimal places\n        return round(similarity, 4)\n    return f\n```"}
{"task_id": 466, "completion_id": 0, "completion": "```python\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # Remove punctuation using the translation table\n    no_punct = line.translate(_PUNC_TABLE)\n    # Strip leading and trailing whitespace\n    return no_punct.strip()\n```"}
{"task_id": 467, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regularization(weights: list[float | int], C: float = 0.01, norm: str = \"l2\") -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    # Convert weights to numpy array for convenience\n    w = np.array(weights, dtype=float)\n\n    if norm == \"l1\":\n        # Penalty: C * sum of absolute weights\n        penalty = C * np.sum(np.abs(w))\n        # Gradient: C * sign(w)\n        gradient = C * np.sign(w)\n    elif norm == \"l2\":\n        # Penalty: 0.5 * C * sum of w^2\n        penalty = 0.5 * C * np.sum(w ** 2)\n        # Gradient: C * w\n        gradient = C * w\n    else:\n        return -1\n\n    # Round penalty and gradient elements to 4 decimal places\n    penalty = round(penalty, 4)\n    gradient = [round(g, 4) for g in gradient]\n\n    return penalty, gradient\n```"}
{"task_id": 468, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n\n    # Ensure y_train is a column vector\n    y_train = y_train.reshape(-1, 1)  # shape (m, 1)\n\n    # Add bias term (column of ones) to X_train and X_test\n    X_train_b = np.hstack([X_train, np.ones((X_train.shape[0], 1))])  # shape (m, n+1)\n    X_test_b = np.hstack([X_test, np.ones((X_test.shape[0], 1))])     # shape (k, n+1)\n\n    m, n_plus_1 = X_train_b.shape\n\n    # Initialize weights (including bias) to zeros\n    W = np.zeros((n_plus_1, 1))  # shape (n+1, 1)\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Gradient descent\n    for _ in range(num_iters):\n        # Compute predictions\n        z = X_train_b @ W  # shape (m, 1)\n        h = sigmoid(z)     # shape (m, 1)\n\n        # Compute gradient\n        dW = (X_train_b.T @ (h - y_train)) / m  # shape (n+1, 1)\n\n        # Update weights\n        W -= learning_rate * dW\n\n    # Compute probabilities for X_test\n    probs = sigmoid(X_test_b @ W).flatten()  # shape (k,)\n\n    # Assign class labels based on threshold 0.5\n    predictions = [1 if p >= 0.5 else 0 for p in probs]\n\n    return predictions\n```"}
{"task_id": 469, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n    def kernel(x1, x2):\n        # Convert inputs to numpy arrays of float type\n        arr1 = np.array(x1, dtype=float)\n        arr2 = np.array(x2, dtype=float)\n\n        # Check if lengths match\n        if arr1.shape != arr2.shape:\n            return -1\n\n        # Compute and return the dot product as a Python float\n        return float(np.inner(arr1, arr2))\n    \n    return kernel\n```"}
{"task_id": 470, "completion_id": 0, "completion": "```python\nimport os\n\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # Convert to absolute path and resolve symlinks\n    abs_path = os.path.realpath(file_path)\n    # Get the directory part\n    dir_path = os.path.dirname(abs_path)\n    return dir_path\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n\n    # Number of actions\n    num_actions = len(q_table[0])\n\n    # Compute the expected Q value for the next state\n    if next_state is None:\n        expected_q = 0.0\n    else:\n        q_next = q_table[next_state]\n        max_q = max(q_next)\n        # Find all actions with the max Q-value (ties)\n        greedy_actions = [a for a, q_val in enumerate(q_next) if q_val == max_q]\n        # Probability of selecting a greedy action\n        prob_greedy = 1 - epsilon + (epsilon / len(greedy_actions))\n        # Initialize expected value\n        expected_q = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                prob_a = prob_greedy / len(greedy_actions)\n            else:\n                prob_a = epsilon / len(greedy_actions)\n            expected_q += prob_a * q_next[a]\n\n    # Compute the target\n    target = reward + gamma * expected_q\n\n    # Update the Q-value for the current state-action pair\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to four decimal places\n    rounded_q_table = [\n        [round(q_value, 4) for q_value in row]\n        for row in q_table\n    ]\n\n    return rounded_q_table\n```"}
{"task_id": 472, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    arr = np.array(x, dtype=float)\n    \n    # Check if arr is 1D or 2D\n    if arr.ndim == 1:\n        # For 1D array\n        max_val = np.max(arr)\n        shifted = arr - max_val\n        exp_shifted = np.exp(shifted)\n        sum_exp = np.sum(exp_shifted)\n        probs = exp_shifted / sum_exp\n        # Gradient: softmax * (1 - softmax)\n        grad = probs * (1 - probs)\n        # Round to 4 decimals and convert to list\n        probs_list = probs.round(4).tolist()\n        grad_list = grad.round(4).tolist()\n        return probs_list, grad_list\n    elif arr.ndim == 2:\n        # For 2D array, process row-wise\n        probs_rows = []\n        grad_rows = []\n        for row in arr:\n            max_val = np.max(row)\n            shifted = row - max_val\n            exp_shifted = np.exp(shifted)\n            sum_exp = np.sum(exp_shifted)\n            probs = exp_shifted / sum_exp\n            grad = probs * (1 - probs)\n            probs_rows.append(probs.round(4).tolist())\n            grad_rows.append(grad.round(4).tolist())\n        return probs_rows, grad_rows\n    else:\n        raise ValueError(\"Input must be a 1D or 2D list.\")\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # Determine class label\n        label = (i - 0.5) * 2  # -1 for first class, +1 for second, etc.\n\n        # Determine class position parameters\n        row_idx = i // 2\n        col_idx = i % 2\n\n        # Horizontal (x) bounds\n        x_min = (row_idx + 0.1) * 10\n        x_max = (row_idx + 0.9) * 10\n\n        # Vertical (y) bounds\n        y_min = ((col_idx * interval) + 0.1) * 10\n        y_max = ((col_idx * interval) + 0.9) * 10\n\n        # Generate training samples\n        x_train = np.round(np.random.uniform(x_min, x_max, n_train), 4)\n        y_train = np.round(np.random.uniform(y_min, y_max, n_train), 4)\n        X_train_list.append(np.column_stack((x_train, y_train)))\n        Y_train_list.extend([label] * n_train)\n\n        # Generate validation samples\n        x_val = np.round(np.random.uniform(x_min, x_max, n_val), 4)\n        y_val = np.round(np.random.uniform(y_min, y_max, n_val), 4)\n        X_val_list.append(np.column_stack((x_val, y_val)))\n        Y_val_list.extend([label] * n_val)\n\n    # Concatenate all class data\n    X_train = np.vstack(X_train_list)\n    Y_train = np.array(Y_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_val = np.array(Y_val_list)\n\n    return X_train, X_val, Y_train, Y_val\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update biased first moment estimate\n    m_t = b1 * m_prev + (1 - b1) * grad\n    \n    # Update biased second raw moment estimate\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_t / (1 - b1 ** t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_t / (1 - b2 ** t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_t, v_t\n```"}
{"task_id": 477, "completion_id": 0, "completion": "```python\nimport heapq\nfrom typing import List, Tuple\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    start_row, start_col = start\n    dest_row, dest_col = dest\n\n    # If start or destination is an obstacle, no path exists\n    if grid[start_row][start_col] == 1 or grid[dest_row][dest_col] == 1:\n        return -1\n\n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Priority queue: elements are tuples (f, g, row, col)\n    # f = total estimated cost (g + h)\n    # g = cost from start to current cell\n    heap = []\n\n    # Initialize the heap with the start position\n    # g = 0 at start\n    start_h = abs(start_row - dest_row) + abs(start_col - dest_col)\n    heapq.heappush(heap, (start_h, 0, start_row, start_col))\n\n    # Visited set to keep track of visited cells with the lowest g\n    visited = [[float('inf')] * cols for _ in range(rows)]\n    visited[start_row][start_col] = 0\n\n    while heap:\n        f, g, r, c = heapq.heappop(heap)\n\n        # If we've reached the destination\n        if (r, c) == (dest_row, dest_col):\n            return g\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n\n            # Check bounds and obstacles\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0:\n                tentative_g = g + 1\n                # If this path to neighbor is better than previous ones\n                if tentative_g < visited[nr][nc]:\n                    visited[nr][nc] = tentative_g\n                    h = abs(nr - dest_row) + abs(nc - dest_col)\n                    f = tentative_g + h\n                    heapq.heappush(heap, (f, tentative_g, nr, nc))\n\n    # Destination not reachable\n    return -1\n```"}
{"task_id": 478, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    # Convert input to numpy array of type float\n    data = np.array(X, dtype=float)\n    \n    # Handle empty data\n    if data.size == 0:\n        return []\n\n    # Number of samples\n    n = data.shape[0]\n    \n    # Compute the mean of each feature (column)\n    means = np.mean(data, axis=0)\n    \n    # Compute the squared differences from the mean\n    squared_diffs = (data - means) ** 2\n    \n    # Compute the population variance for each feature\n    variances = np.sum(squared_diffs, axis=0) / n\n    \n    # Compute the standard deviation by taking the square root\n    std_devs = np.sqrt(variances)\n    \n    # Round each value to 4 decimal places\n    rounded_std_devs = [round(val, 4) for val in std_devs]\n    \n    return rounded_std_devs\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_steps = len(rewards)\n    if num_steps == 0:\n        return []\n\n    num_arms = len(rewards[0])\n    \n    # Initialize estimates and counters\n    estimates = [ev_prior for _ in range(num_arms)]\n    counts = [0 for _ in range(num_arms)]\n    \n    for t in range(num_steps):\n        # Decide whether to explore or exploit\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimate (break ties by smallest index)\n            max_value = max(estimates)\n            # Find all arms with the max estimate\n            candidate_arms = [i for i, v in enumerate(estimates) if v == max_value]\n            # Choose the one with the smallest index among candidates\n            chosen_arm = candidate_arms[0]\n        \n        # Receive reward\n        reward = rewards[t][chosen_arm]\n        \n        # Update counts\n        counts[chosen_arm] += 1\n        # Update estimate using incremental mean\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / counts[chosen_arm]\n    \n    # Round estimates to 4 decimal places\n    return [round(v, 4) for v in estimates]\n```"}
{"task_id": 480, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n\n    # 1. Pre-emphasis\n    if alpha != 0:\n        x = np.concatenate(([x[0]], x[1:] - alpha * x[:-1]))\n\n    # 2. Frame parameters\n    frame_length = int(round(window_duration * fs))\n    frame_step = int(round(stride_duration * fs))\n    signal_length = len(x)\n\n    # Padding if center=True\n    if center:\n        pad_width = frame_length // 2\n        x = np.pad(x, (pad_width, pad_width), mode='symmetric')\n        signal_length = len(x)\n\n    # Calculate number of frames\n    num_frames = 1 + (signal_length - frame_length) // frame_step\n\n    # 3. Framing\n    frames = np.lib.stride_tricks.as_strided(\n        x,\n        shape=(num_frames, frame_length),\n        strides=(x.strides[0] * frame_step, x.strides[0])\n    ).copy()\n\n    # 4. Window function\n    if window.lower() == \"hamming\":\n        win = np.hamming(frame_length)\n    elif window.lower() == \"hann\":\n        win = np.hanning(frame_length)\n    elif window.lower() == \"blackman_harris\":\n        # Approximate Blackman-Harris window\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        n = np.arange(frame_length)\n        win = (a0\n               - a1 * np.cos(2 * np.pi * n / (frame_length - 1))\n               + a2 * np.cos(4 * np.pi * n / (frame_length - 1))\n               - a3 * np.cos(6 * np.pi * n / (frame_length - 1)))\n    else:\n        raise ValueError(\"Unsupported window type.\")\n\n    # Apply window\n    frames *= win\n\n    # 5. Power spectrum\n    N = frame_length\n    # FFT\n    fft_size = N\n    spectrum = np.fft.rfft(frames, n=fft_size)\n    power_spectrum = (np.abs(spectrum) ** 2) / N\n\n    # 6. Mel filter bank construction\n    def hz_to_mel(hz):\n        return 2595 * np.log10(1 + hz / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n\n    # Mel points\n    mel_min = hz_to_mel(0)\n    mel_max = hz_to_mel(fs / 2)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n\n    # Convert Hz to FFT bin indices\n    bin_indices = np.floor((hz_points / (fs / 2)) * (fft_size // 2)).astype(int)\n    bin_indices = np.clip(bin_indices, 0, fft_size // 2)\n\n    # Create filter bank\n    fbank = np.zeros((n_filters, fft_size // 2 + 1))\n    for m in range(1, n_filters + 1):\n        f_m_minus = bin_indices[m - 1]\n        f_m = bin_indices[m]\n        f_m_plus = bin_indices[m + 1]\n\n        # Rising edge\n        for k in range(f_m_minus, f_m):\n            if f_m - f_m_minus != 0:\n                fbank[m - 1, k] = (k - f_m_minus) / (f_m - f_m_minus)\n        # Falling edge\n        for k in range(f_m, f_m_plus):\n            if f_m_plus - f_m != 0:\n                fbank[m - 1, k] = (f_m_plus - k) / (f_m_plus - f_m)\n\n    # 7. Filter bank energies\n    filter_energies = power_spectrum @ fbank.T\n\n    # 8. Normalize (mean subtraction)\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=0)\n\n    # 9. Replace zeros with epsilon\n    epsilon = np.finfo(float).eps\n    filter_energies = np.maximum(filter_energies, epsilon)\n\n    # 10. Compute energy per frame\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n\n    # 11. Round to 4 decimals and convert to lists\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n\n    return filter_energies, energy_per_frame\n```"}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    n_points = data.shape[0]\n    labels = [-1] * n_points  # Initialize all points as noise\n    visited = [False] * n_points\n    cluster_id = 0\n\n    # Precompute pairwise distances for efficiency\n    # Alternatively, compute on the fly; here, for clarity, we'll compute on the fly\n    def region_query(point_idx):\n        \"\"\"Find all points within eps of point_idx.\"\"\"\n        point = data[point_idx]\n        neighbors = []\n        for idx in range(n_points):\n            if np.linalg.norm(data[idx] - point) <= eps:\n                neighbors.append(idx)\n        return neighbors\n\n    for idx in range(n_points):\n        if not visited[idx]:\n            visited[idx] = True\n            neighbors = region_query(idx)\n            if len(neighbors) < min_samples:\n                # Mark as noise (already initialized as -1)\n                continue\n            else:\n                # Start a new cluster\n                labels[idx] = cluster_id\n                # Expand cluster\n                seed_queue = neighbors.copy()\n                # Remove the current point from the queue if present\n                if idx in seed_queue:\n                    seed_queue.remove(idx)\n                while seed_queue:\n                    current_point = seed_queue.pop()\n                    if not visited[current_point]:\n                        visited[current_point] = True\n                        current_neighbors = region_query(current_point)\n                        if len(current_neighbors) >= min_samples:\n                            # Add new neighbors to the queue\n                            for neighbor in current_neighbors:\n                                if neighbor not in seed_queue:\n                                    seed_queue.append(neighbor)\n                    # Assign cluster label if not assigned yet\n                    if labels[current_point] == -1:\n                        labels[current_point] = cluster_id\n                cluster_id += 1\n\n    return labels\n```"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError(\"Input array y must be one-dimensional.\")\n    if np.any(y < 0):\n        raise ValueError(\"Labels must be non-negative integers.\")\n\n    if num_classes is None:\n        num_classes = y.max() + 1\n    else:\n        if not isinstance(num_classes, int):\n            raise TypeError(\"num_classes must be an integer or None.\")\n        if num_classes <= 0:\n            raise ValueError(\"num_classes must be a positive integer.\")\n        if np.any(y >= num_classes):\n            raise ValueError(\"Some labels are >= num_classes.\")\n\n    # Initialize the output array with zeros\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n\n    # Set the appropriate elements to 1\n    one_hot[np.arange(len(y)), y] = 1\n\n    return one_hot\n```"}
{"task_id": 483, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    # Convert labels to a numpy array for easier processing\n    labels = np.array(labels)\n    \n    # Determine number of classes if not provided\n    if num_classes is None:\n        num_classes = labels.max() + 1\n    \n    # Initialize the output list\n    one_hot_list = []\n    \n    # Generate one-hot vectors for each label\n    for label in labels:\n        # Create a zero vector of length num_classes\n        one_hot = [0] * num_classes\n        # Set the position corresponding to the label to 1\n        one_hot[label] = 1\n        one_hot_list.append(one_hot)\n    \n    return one_hot_list\n```"}
{"task_id": 484, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for convenience\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Generate polynomial features (including bias term)\n    # Shape: (n_samples, degree + 1)\n    Phi_train = np.column_stack([X_train ** d for d in range(degree + 1)])\n    Phi_test = np.column_stack([X_test ** d for d in range(degree + 1)])\n\n    n_samples, n_features = Phi_train.shape\n\n    # Initialize weights to zeros\n    w = np.zeros(n_features)\n\n    # Precompute z_j = sum_i phi_{ij}^2 for each feature j\n    z = np.sum(Phi_train ** 2, axis=0)\n\n    # Coordinate descent iterations\n    for _ in range(n_iterations):\n        for j in range(n_features):\n            # Compute the residual excluding feature j\n            residual = y_train - (Phi_train @ w) + Phi_train[:, j] * w[j]\n            # Compute rho_j\n            rho_j = np.dot(Phi_train[:, j], residual)\n\n            if j == 0:\n                # Bias term: no regularization\n                w[j] = rho_j / z[j]\n            else:\n                # Apply soft-thresholding\n                if rho_j > reg_factor:\n                    w[j] = (rho_j - reg_factor) / z[j]\n                elif rho_j < -reg_factor:\n                    w[j] = (rho_j + reg_factor) / z[j]\n                else:\n                    w[j] = 0.0\n\n    # Make predictions on test data\n    y_pred = Phi_test @ w\n\n    # Round predictions to 4 decimal places\n    return [round(val, 4) for val in y_pred]\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test: list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    # Handle empty training data\n    if len(X_train) == 0:\n        return []\n\n    # Convert to numpy arrays for easier handling\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n\n    # Define the tree node structure\n    class Node:\n        def __init__(self, prediction=None, feature_index=None, threshold=None, left=None, right=None):\n            self.prediction = prediction      # mean target value at leaf\n            self.feature_index = feature_index  # index of feature to split\n            self.threshold = threshold        # split point\n            self.left = left                  # left child node\n            self.right = right                # right child node\n\n    def build_tree(X, y, depth):\n        # Stopping conditions\n        if depth >= max_depth or len(y) < 2:\n            return Node(prediction=np.mean(y))\n        \n        # Initialize variables to find the best split\n        best_sse = float('inf')\n        best_threshold = None\n        best_left_idx = None\n        best_right_idx = None\n\n        # Sort data by feature values for efficient split search\n        sorted_idx = np.argsort(X)\n        X_sorted = X[sorted_idx]\n        y_sorted = y[sorted_idx]\n\n        # Try all possible split points (between consecutive unique values)\n        for i in range(1, len(X_sorted)):\n            if X_sorted[i] == X_sorted[i - 1]:\n                continue  # skip identical values to avoid zero-width splits\n            threshold = (X_sorted[i] + X_sorted[i - 1]) / 2\n\n            # Split data\n            left_mask = X <= threshold\n            right_mask = X > threshold\n\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue  # skip invalid splits\n\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n\n            # Compute sum of squared errors for this split\n            sse_left = np.sum((y_left - np.mean(y_left)) ** 2)\n            sse_right = np.sum((y_right - np.mean(y_right)) ** 2)\n            total_sse = sse_left + sse_right\n\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_threshold = threshold\n                best_left_idx = left_mask\n                best_right_idx = right_mask\n\n        # If no valid split found, create a leaf node\n        if best_threshold is None:\n            return Node(prediction=np.mean(y))\n        \n        # Recursively build left and right subtrees\n        left_node = build_tree(X[best_left_idx], y[best_left_idx], depth + 1)\n        right_node = build_tree(X[best_right_idx], y[best_right_idx], depth + 1)\n        return Node(feature_index=0, threshold=best_threshold, left=left_node, right=right_node)\n\n    def predict_single(node, x):\n        # Traverse the tree to make a prediction\n        while node.left or node.right:\n            if node.feature_index is None:\n                # Leaf node\n                return node.prediction\n            if x <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.prediction\n\n    # Build the tree\n    tree = build_tree(X_train_np, y_train_np, depth=0)\n\n    # Generate predictions for X_test\n    predictions = [predict_single(tree, x) for x in X_test]\n    return predictions\n```"}
{"task_id": 486, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy handling\n    y_true_arr = np.array(y_true)\n    y_pred_arr = np.array(y_pred)\n\n    # Check if inputs are non-empty and of the same length\n    if y_true_arr.size == 0 or y_pred_arr.size == 0:\n        return -1\n    if y_true_arr.shape != y_pred_arr.shape:\n        return -1\n\n    # Compute the squared differences\n    squared_diff = (y_true_arr - y_pred_arr) ** 2\n\n    # Calculate the mean\n    mse = np.mean(squared_diff)\n\n    # Return rounded to 4 decimal places\n    return round(mse, 4)\n```"}
{"task_id": 487, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    # Initialization: use the first k samples as initial centroids\n    centroids = X[:k].copy()\n\n    # To keep track of cluster assignments\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iters):\n        # Step 1: Assign each sample to the nearest centroid\n        # Compute distances from each point to each centroid\n        # Efficiently using broadcasting\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        # Step 2: Update centroids\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            # Get all points assigned to cluster i\n            cluster_points = X[new_labels == i]\n            if len(cluster_points) > 0:\n                new_centroids[i] = cluster_points.mean(axis=0)\n            else:\n                # If a cluster loses all members, leave its centroid unchanged\n                new_centroids[i] = centroids[i]\n\n        # Check for convergence: if centroids change less than tol\n        centroid_shift = np.linalg.norm(new_centroids - centroids)\n        if centroid_shift < tol:\n            break\n\n        centroids = new_centroids\n        labels = new_labels\n\n    return labels.tolist()\n```"}
{"task_id": 488, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    try:\n        data = np.array(X)\n    except Exception:\n        return -1\n\n    # Check if data is 2-D\n    if data.ndim != 2:\n        return -1\n\n    # Check if data has at least one sample and one feature\n    if data.shape[0] < 1 or data.shape[1] < 1:\n        return -1\n\n    # Calculate population variance for each feature (column)\n    # Population variance: sum of squared deviations divided by n\n    n_samples = data.shape[0]\n    # Compute mean of each feature\n    means = np.mean(data, axis=0)\n    # Compute squared deviations\n    squared_deviations = (data - means) ** 2\n    # Sum over samples and divide by n to get population variance\n    variances = np.sum(squared_deviations, axis=0) / n_samples\n\n    # Round to 4 decimal places and convert to list\n    return [round(var, 4) for var in variances]\n```"}
{"task_id": 489, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer -1.\n    \"\"\"\n    # Convert input to numpy array for easier processing\n    arr = np.array(one_hot)\n\n    # Check if input is 2D\n    if arr.ndim != 2:\n        return -1\n\n    # Verify that each row has exactly one '1' and the rest zeros\n    # Sum of each row should be 1\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, 1):\n        return -1\n\n    # Check that each row contains only 0s and 1s\n    if not np.all((arr == 0) | (arr == 1)):\n        return -1\n\n    # Verify that each row has exactly one '1'\n    ones_count = (arr == 1).sum(axis=1)\n    if not np.all(ones_count == 1):\n        return -1\n\n    # If all checks pass, get the index of the '1' in each row\n    class_labels = arr.argmax(axis=1).tolist()\n\n    return class_labels\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array for easy handling\n    arr = np.array(x)\n    \n    # Check if the array is one-dimensional\n    if arr.ndim != 1:\n        raise ValueError(\"Input must be a one-dimensional vector.\")\n    \n    # If the vector is empty, return an empty list\n    if arr.size == 0:\n        return []\n    \n    # Create a diagonal matrix with the vector elements on the diagonal\n    diag_matrix = np.diag(arr)\n    \n    # Convert the NumPy array to a list of lists\n    return diag_matrix.tolist()\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\nfrom typing import List, Tuple, Hashable, Iterable\n\ndef fp_growth(transactions: Iterable[Iterable[Hashable]], min_sup: int) -> List[Tuple]:\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    # Step 1: Count item frequencies\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    # Remove items below min_sup\n    frequent_items = {item for item, count in item_counts.items() if count >= min_sup}\n\n    # If no items meet min_sup, return empty list\n    if not frequent_items:\n        return []\n\n    # Step 2: Build the header table with item counts\n    # and create a mapping for item to its total count\n    # Also, create a mapping for item to its node links\n    header_table = {}\n    for item in frequent_items:\n        header_table[item] = [item_counts[item], []]  # [count, list of node references]\n\n    # Step 3: Build the FP-tree\n    class FPNode:\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n\n        def increment(self, count):\n            self.count += count\n\n        def path(self):\n            node = self\n            path_items = []\n            while node.parent is not None:\n                node = node.parent\n                if node.item is not None:\n                    path_items.append(node.item)\n            return path_items[::-1]  # reverse to get root-to-leaf order\n\n    # Initialize root of FP-tree\n    root = FPNode(None, 0, None)\n\n    # Function to insert a transaction into the FP-tree\n    def insert_transaction(transaction, node):\n        for item in transaction:\n            if item in node.children:\n                node.children[item].increment(1)\n            else:\n                new_node = FPNode(item, 1, node)\n                node.children[item] = new_node\n                # Update header table links\n                header_table[item][1].append(new_node)\n            node = node.children[item]\n\n    # Process transactions: filter and order items\n    for transaction in transactions:\n        # Filter out infrequent items\n        filtered = [item for item in transaction if item in frequent_items]\n        # Order items by descending frequency\n        ordered = sorted(filtered, key=lambda x: item_counts[x], reverse=True)\n        # Insert into FP-tree\n        insert_transaction(ordered, root)\n\n    # Step 4: Recursive mining function\n    def mine_fp_tree(node, suffix):\n        # Collect all items in header table sorted by increasing frequency\n        items = sorted(header_table.items(), key=lambda x: x[1][0])  # sort by count ascending\n        frequent_itemsets = []\n\n        for item, (count, node_links) in items:\n            new_suffix = (item,) + suffix\n            # Add the new frequent itemset\n            frequent_itemsets.append(tuple(sorted(new_suffix)))\n\n            # Build conditional pattern base\n            conditional_pattern_base = []\n            for n in node_links:\n                path = n.path()\n                if path:\n                    conditional_pattern_base.extend([path] * n.count)\n\n            # Count items in conditional pattern base\n            cond_item_counts = Counter()\n            for trans in conditional_pattern_base:\n                for itm in trans:\n                    cond_item_counts[itm] += 1\n\n            # Filter items below min_sup\n            cond_frequent_items = {itm for itm, cnt in cond_item_counts.items() if cnt >= min_sup}\n            if not cond_frequent_items:\n                continue\n\n            # Build conditional FP-tree\n            # Rebuild header table for conditional tree\n            cond_header_table = {}\n            for itm in cond_frequent_items:\n                cond_header_table[itm] = [cond_item_counts[itm], []]\n\n            # Build the conditional FP-tree\n            cond_root = FPNode(None, 0, None)\n\n            def insert_conditional_transaction(transaction, node):\n                for itm in transaction:\n                    if itm in cond_frequent_items:\n                        if itm in node.children:\n                            node.children[itm].increment(1)\n                        else:\n                            new_node = FPNode(itm, 1, node)\n                            node.children[itm] = new_node\n                            cond_header_table[itm][1].append(new_node)\n                        node = node.children[itm]\n\n            for trans in conditional_pattern_base:\n                filtered_trans = [itm for itm in trans if itm in cond_frequent_items]\n                ordered_trans = sorted(filtered_trans, key=lambda x: cond_item_counts[x], reverse=True)\n                insert_conditional_transaction(ordered_trans, cond_root)\n\n            # Recursive call\n            frequent_itemsets.extend(mine_fp_tree(cond_root, new_suffix))\n        return frequent_itemsets\n\n    # Step 5: Mine the FP-tree\n    result = mine_fp_tree(root, ())\n\n    # Remove duplicates and sort the result\n    unique_result = set(result)\n    # Sort by length, then lex order\n    sorted_result = sorted(unique_result, key=lambda x: (len(x), x))\n    return sorted_result\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    # Check for negative degree\n    if degree < 0:\n        return -1\n\n    # Convert input list to numpy array for easier manipulation\n    X_np = np.array(X)\n    n_samples, n_features = X_np.shape\n\n    # Generate all exponent combinations with total degree <= degree\n    exponents = []\n    for total_deg in range(degree + 1):\n        # Generate all combinations of exponents summing to total_deg\n        # using stars and bars approach\n        # But easier: generate all tuples of length n_features with sum = total_deg\n        # Using itertools.combinations_with_replacement is not directly suitable for this,\n        # so we can generate all possible exponent tuples with sum <= degree\n        # by iterating over all possible combinations with replacement of features\n        # and then generating exponents accordingly.\n        # But a more straightforward way:\n        # Generate all tuples of exponents with sum = total_deg\n        # Using integer partitioning approach:\n        # Generate all combinations of exponents with sum = total_deg\n        # via recursive or iterative method.\n\n        # To generate all exponent tuples with sum = total_deg:\n        # Use itertools.product with ranges, then filter sum\n        for exps in np.ndindex(*( [total_deg + 1] * n_features )):\n            if sum(exps) == total_deg:\n                exponents.append(exps)\n\n    # For each sample, compute all monomials\n    result = []\n    for sample in X_np:\n        row_features = []\n        for exp in exponents:\n            # Compute the product of feature^exponent\n            prod = 1.0\n            for feature_value, power in zip(sample, exp):\n                if power != 0:\n                    prod *= feature_value ** power\n            row_features.append(prod)\n        result.append(row_features)\n\n    return [row for row in result]\n```"}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert input to numpy array for consistency\n    y_array = np.array(y)\n    \n    # Check if the array is empty\n    if y_array.size == 0:\n        return -1\n    \n    # Calculate the mean of the sample\n    y_mean = np.mean(y_array)\n    \n    # Compute the squared differences\n    squared_diffs = (y_array - y_mean) ** 2\n    \n    # Calculate the MSE\n    mse_value = np.mean(squared_diffs)\n    \n    # Return the rounded result\n    return round(mse_value, 4)\n```"}
{"task_id": 494, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    # Convert preds to numpy array if it's a list\n    preds_array = np.array(preds)\n\n    if classifier:\n        # For classification, perform majority voting\n        # preds_array shape: (n_models, n_samples)\n        n_samples = preds_array.shape[1]\n        final_preds = []\n\n        for i in range(n_samples):\n            # Extract predictions for the i-th sample across all models\n            sample_preds = preds_array[:, i]\n            # Use bincount to count occurrences of each class label\n            counts = np.bincount(sample_preds)\n            # The class with the highest count is the majority\n            # In case of tie, np.argmax returns the smallest label\n            majority_class = np.argmax(counts)\n            final_preds.append(majority_class)\n\n        return final_preds\n\n    else:\n        # For regression, perform averaging\n        # Compute mean across models for each sample\n        mean_preds = np.mean(preds_array, axis=0)\n        # Round to 4 decimal places\n        rounded_preds = np.round(mean_preds, 4)\n        return list(rounded_preds)\n```"}
{"task_id": 495, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    # Compute mean of each column\n    means = np.mean(X, axis=0)\n    # Compute population standard deviation of each column\n    stds = np.std(X, axis=0, ddof=0)\n    \n    # Initialize an array to hold the standardized data\n    standardized = np.empty_like(X, dtype=float)\n    \n    # Iterate over each column to standardize\n    for i in range(X.shape[1]):\n        if stds[i] != 0:\n            # Standardize column i\n            standardized[:, i] = (X[:, i] - means[i]) / stds[i]\n        else:\n            # All values are identical; set column to zeros\n            standardized[:, i] = 0.0\n    \n    # Round to 4 decimal places\n    standardized_rounded = np.round(standardized, 4)\n    \n    # Convert to list of lists\n    return standardized_rounded.tolist()\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    x_array = np.array(x, dtype=float)\n\n    # Compute the affine activation\n    y = slope * x_array + intercept\n\n    # First derivative is constant (slope)\n    grad = np.full_like(x_array, slope)\n\n    # Second derivative is zero\n    grad2 = np.zeros_like(x_array)\n\n    # Round all elements to 4 decimal places and convert to lists\n    y_list = [round(val, 4) for val in y]\n    grad_list = [round(val, 4) for val in grad]\n    grad2_list = [round(val, 4) for val in grad2]\n\n    return y_list, grad_list, grad2_list\n```"}
{"task_id": 497, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    # Validate order\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to numpy array for easy processing\n    arr = np.array(x, dtype=float)\n\n    # Compute the exponential or its derivatives\n    result = np.exp(arr)\n\n    # For order 1 and 2, derivatives are the same as the function itself\n    if order in [1, 2]:\n        result = np.exp(arr)\n\n    # Round to 6 decimal places\n    result = np.round(result, 6)\n\n    # Convert back to list with original shape\n    return result.tolist()\n```"}
{"task_id": 498, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float = 0.3, order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    # Convert input to numpy array to handle element-wise operations\n    x_array = np.array(x, copy=False)\n\n    # Validate order\n    if order not in [0, 1, 2]:\n        return []\n\n    # Compute based on order\n    if order == 0:\n        # Function value\n        result = np.where(x_array > 0, x_array, alpha * x_array)\n    elif order == 1:\n        # First derivative\n        result = np.where(x_array > 0, 1, alpha)\n    else:\n        # Second derivative is zero everywhere\n        result = np.zeros_like(x_array)\n\n    # Convert result to list\n    return result.tolist()\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Validate k\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardise each feature (zero mean, unit *population* variance)\n    # Compute mean for each feature\n    means = np.mean(data, axis=0)\n    # Center the data\n    centered_data = data - means\n    # Compute variance for each feature\n    variances = np.var(data, axis=0)\n    # Standardise features\n    # For features with zero variance, leave as zeros\n    std_devs = np.sqrt(variances)\n    # To avoid division by zero, handle zero variance features\n    std_devs_safe = np.where(std_devs == 0, 1, std_devs)\n    standardized_data = centered_data / std_devs_safe\n\n    # Step 2: Compute the sample covariance matrix (with Bessel's correction)\n    cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n\n    # Step 3: Eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of each eigenvector\n    for i in range(sorted_eigenvectors.shape[1]):\n        # Find index of the entry with the largest absolute value\n        max_abs_idx = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        # If the entry is negative, flip the sign\n        if sorted_eigenvectors[max_abs_idx, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n\n    # Step 6: Project the standardized data onto the first k eigenvectors\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ top_k_eigenvectors\n\n    # Round to 4 decimal places\n    projected_rounded = np.round(projected_data, 4)\n\n    # Convert to list of lists\n    return projected_rounded.tolist()\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n\n    # Convert input lists to numpy arrays for easier manipulation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train).astype(float)\n    X_test_np = np.array(X_test)\n\n    # Initialize the model with the mean of y (initial prediction)\n    c = np.mean(y_train_np)\n    F = np.full_like(y_train_np, c)  # current prediction for each training sample\n\n    # Store the ensemble of weak learners: each is a dict with 'feature', 'threshold', 'left_value', 'right_value'\n    stumps = []\n\n    for m in range(n_estimators):\n        residuals = y_train_np - F  # residuals to fit the next stump\n\n        best_feature = None\n        best_threshold = None\n        best_loss = np.inf\n        best_left_value = None\n        best_right_value = None\n\n        # For each feature, find the best threshold\n        for feature_idx in range(X_train_np.shape[1]):\n            feature_values = X_train_np[:, feature_idx]\n            # Get sorted unique feature values to consider as thresholds\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                # Split data into left and right based on threshold\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n\n                # Compute mean residuals for left and right\n                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                    continue  # skip invalid splits\n\n                left_value = np.mean(residuals[left_mask])\n                right_value = np.mean(residuals[right_mask])\n\n                # Compute total squared error for this split\n                left_error = np.sum((residuals[left_mask] - left_value) ** 2)\n                right_error = np.sum((residuals[right_mask] - right_value) ** 2)\n                total_error = left_error + right_error\n\n                if total_error < best_loss:\n                    best_loss = total_error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        # After finding the best split, update the model\n        # Store the stump parameters\n        stumps.append({\n            'feature': best_feature,\n            'threshold': best_threshold,\n            'left_value': best_left_value,\n            'right_value': best_right_value\n        })\n\n        # Update the predictions F for training samples\n        feature_values = X_train_np[:, best_feature]\n        left_mask = feature_values <= best_threshold\n        right_mask = ~left_mask\n\n        # Update F with the new stump scaled by learning rate\n        F[left_mask] += learning_rate * best_left_value\n        F[right_mask] += learning_rate * best_right_value\n\n    # After training, compute the final predictions for X_test\n    F_test = np.full(X_test_np.shape[0], c)  # start from initial c\n    for stump in stumps:\n        feature_idx = stump['feature']\n        threshold = stump['threshold']\n        left_value = stump['left_value']\n        right_value = stump['right_value']\n        feature_values = X_test_np[:, feature_idx]\n        mask = feature_values <= threshold\n        F_test[mask] += learning_rate * left_value\n        F_test[~mask] += learning_rate * right_value\n\n    # Convert regression scores to binary class labels by thresholding at 0.5\n    predictions = (F_test >= 0.5).astype(int).tolist()\n\n    return predictions\n```"}
{"task_id": 501, "completion_id": 0, "completion": "```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    # Write your code below this line\n    return initial_lr\n```"}
{"task_id": 502, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    # Define the piecewise conditions\n    if order == 0:\n        # Compute HardSigmoid(z)\n        result = np.where(z < -2.5, 0,\n                 np.where(z > 2.5, 1,\n                          0.2 * z + 0.5))\n    elif order == 1:\n        # First derivative\n        result = np.where((z >= -2.5) & (z <= 2.5), 0.2, 0)\n    elif order == 2:\n        # Second derivative is zero everywhere\n        result = np.zeros_like(z)\n    else:\n        # Unsupported order\n        return []\n\n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n```"}
{"task_id": 503, "completion_id": 0, "completion": "```python\nfrom copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n\n    # Create a deep copy to avoid mutating the original\n    hparams_copy = deepcopy(hparams)\n\n    if updates is not None:\n        for key, value in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = value\n\n    return hparams_copy\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    # If the mini-batch is empty, return an empty list\n    if X.shape[0] == 0:\n        return []\n\n    m = X.shape[0]  # batch size\n\n    # Compute positive phase hidden probabilities\n    pos_hidden_probs = 1 / (1 + np.exp(-(np.dot(X, W) + hbias)))\n    # Sample hidden states (not needed for CD, only probabilities are used)\n    # But since the task specifies to use probabilities directly, we only need probs\n\n    # Initialize v_k and h_k with the probabilities\n    v_k = X.copy()\n    for _ in range(k):\n        # Compute hidden probabilities given visible\n        h_probs = 1 / (1 + np.exp(-(np.dot(v_k, W) + hbias)))\n        # Compute visible probabilities given hidden\n        v_probs = 1 / (1 + np.exp(-(np.dot(h_probs, W.T) + vbias)))\n        # Update v_k with probabilities (no stochastic sampling)\n        v_k = v_probs\n\n    # Compute hidden probabilities after k steps\n    h_k_probs = 1 / (1 + np.exp(-(np.dot(v_k, W) + hbias)))\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, pos_hidden_probs)\n    neg_grad = np.dot(v_k.T, h_k_probs)\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round to 4 decimal places\n    W_rounded = np.round(W_new, 4)\n\n    # Convert to list of lists\n    return W_rounded.tolist()\n```"}
{"task_id": 508, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    # Iterate over the dictionary items in insertion order\n    return [value for key, value in params.items() if name in key]\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n\n    # Check if vectors have the same length\n    if x_arr.shape != y_arr.shape:\n        return -1\n\n    # Compute the maximum absolute difference\n    max_diff = np.max(np.abs(x_arr - y_arr))\n\n    # Return the result rounded to four decimal places\n    return round(float(max_diff), 4)\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n\n    # Clip y_pred to avoid log(0)\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute binary cross-entropy (reconstruction loss)\n    # Shape: (batch_size, n_features)\n    bce = - (y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    # Sum over features for each sample\n    recon_loss = np.sum(bce, axis=1)\n\n    # Compute KL divergence\n    # Shape: (batch_size, latent_dim)\n    kl_div = -0.5 * (1 + t_log_var - t_mean**2 - np.exp(t_log_var))\n    # Sum over latent dimensions for each sample\n    kl_loss = np.sum(kl_div, axis=1)\n\n    # Total loss per sample\n    total_loss = recon_loss + kl_loss\n\n    # Average over batch\n    avg_loss = np.mean(total_loss)\n\n    # Round to 6 decimal places\n    return round(avg_loss, 6)\n```"}
{"task_id": 511, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n    \"\"\"Generate a list of success probabilities for a Bernoulli multi-armed bandit environment.\n    \n    The probabilities are generated by:\n    1. Drawing n_arms samples from a uniform distribution on [0, 1).\n    2. Normalizing these samples so they sum to 1.\n    3. Rounding each probability to 4 decimal places.\n    \n    Args:\n        n_arms (int): Number of arms. If less than 1, returns an empty list.\n        \n    Returns:\n        list[float]: List of success probabilities, each rounded to 4 decimal places.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    \n    # Step 1: Draw n_arms samples from uniform distribution\n    samples = np.random.uniform(0, 1, n_arms)\n    \n    # Step 2: Normalize the samples to sum to 1\n    total = np.sum(samples)\n    normalized_probs = samples / total\n    \n    # Step 3: Round each probability to 4 decimal places\n    rounded_probs = [round(prob, 4) for prob in normalized_probs]\n    \n    return rounded_probs\n```"}
{"task_id": 512, "completion_id": 0, "completion": "```python\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    k_h, k_w = pool_shape\n    n, c, h, w = image_shape\n    s_h, s_w = stride\n\n    # Check if kernel fits inside the input dimensions\n    if k_h > h or k_w > w:\n        return -1\n\n    # Check if (h - k_h) is divisible by s_h\n    if (h - k_h) % s_h != 0:\n        return -1\n\n    # Check if (w - k_w) is divisible by s_w\n    if (w - k_w) % s_w != 0:\n        return -1\n\n    # Compute output dimensions\n    out_h = (h - k_h) // s_h + 1\n    out_w = (w - k_w) // s_w + 1\n\n    return (out_h, out_w)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X_np = np.array(X)  # shape: (n_samples, n_features)\n    w_np = np.array(w)  # shape: (n_features,)\n    V_np = np.array(V)  # shape: (n_features, k)\n\n    n_samples, n_features = X_np.shape\n    k = V_np.shape[1]\n\n    # Compute the linear part: w0 + X * w\n    linear_terms = np.dot(X_np, w_np)  # shape: (n_samples,)\n\n    # Compute the interaction terms\n    # Step 1: Compute (X * V) for each sample\n    # shape: (n_samples, k)\n    XV = np.dot(X_np, V_np)\n\n    # Step 2: Compute the squared sum: (\u03a3\u2c7c V_{j,f} x\u2c7c)^2\n    sum_squared = XV ** 2  # shape: (n_samples, k)\n\n    # Step 3: Compute the sum of squares: \u03a3\u2c7c V_{j,f}^2 x\u2c7c^2\n    V_squared = V_np ** 2  # shape: (n_features, k)\n    X_squared = X_np ** 2  # shape: (n_samples, n_features)\n    # For each sample, compute sum over features of V_{j,f}^2 * x_j^2\n    sum_Vx2 = np.dot(X_squared, V_squared)  # shape: (n_samples, k)\n\n    # Step 4: Compute the interaction term for each sample\n    interaction_terms = 0.5 * np.sum(sum_squared - sum_Vx2, axis=1)  # shape: (n_samples,)\n\n    # Final prediction\n    preds = w0 + linear_terms + interaction_terms\n\n    # Round to 4 decimal places\n    preds_rounded = np.round(preds, 4).tolist()\n\n    return preds_rounded\n```"}
{"task_id": 514, "completion_id": 0, "completion": "```python\ndef switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n\n    # Validate current_phase\n    if current_phase not in (\"training\", \"testing\"):\n        return -1\n\n    # Check if both switches are supplied\n    if set_train is not None and set_test is not None:\n        return -1\n\n    # Validate switch values if provided\n    if set_train is not None:\n        if not isinstance(set_train, bool):\n            return -1\n        # Set phase based on set_train\n        return \"training\" if set_train else \"testing\"\n\n    if set_test is not None:\n        if not isinstance(set_test, bool):\n            return -1\n        # Set phase based on set_test\n        return \"testing\" if set_test else \"training\"\n\n    # If no switches provided, toggle the phase\n    if current_phase == \"training\":\n        return \"testing\"\n    elif current_phase == \"testing\":\n        return \"training\"\n    else:\n        # Should not reach here if input validation is correct\n        return -1\n```"}
{"task_id": 515, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    def recurse(current: Dict[str, Any], parent_key: str = \"\") -> Dict[str, Any]:\n        flat_dict = {}\n        for key, value in current.items():\n            # Construct the new key\n            new_key = f\"{parent_key}.{key}\" if parent_key else key\n            if isinstance(value, dict):\n                # Recursively flatten nested dictionary\n                flat_dict.update(recurse(value, new_key))\n            else:\n                # Assign non-dictionary value\n                flat_dict[new_key] = value\n        return flat_dict\n\n    return recurse(params)\n```"}
{"task_id": 516, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    arr_a = np.array(a)\n    arr_b = np.array(b)\n    \n    # Check if vectors have the same length\n    if arr_a.size != arr_b.size:\n        return -1\n    \n    # Compute Euclidean distance\n    distance = np.linalg.norm(arr_a - arr_b)\n    \n    # Round to 4 decimal places\n    return round(distance, 4)\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    z_array = np.array(z, dtype=np.float64)\n\n    # To ensure numerical stability, handle large positive and negative z\n    # For large positive z, sigmoid approaches 1\n    # For large negative z, sigmoid approaches 0\n    # Use the stable form:\n    # sigmoid(z) = 1 / (1 + exp(-z))\n    # but for large |z|, compute differently to avoid overflow\n\n    # Initialize result array\n    result = np.empty_like(z_array)\n\n    # For positive z, compute directly\n    pos_mask = z_array >= 0\n    result[pos_mask] = 1 / (1 + np.exp(-z_array[pos_mask]))\n\n    # For negative z, compute using exp(z) to avoid overflow\n    neg_mask = ~pos_mask\n    exp_z = np.exp(z_array[neg_mask])\n    result[neg_mask] = exp_z / (1 + exp_z)\n\n    # Round to four decimal places\n    result = np.round(result, 4)\n\n    # Return scalar if input was scalar\n    if np.isscalar(z):\n        return float(result)\n    else:\n        return result.tolist()\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Convert actual if needed\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        elif actual.ndim == 2 and actual.shape[1] == 1:\n            actual = actual.ravel()\n\n        # Convert predicted if needed\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        elif predicted.ndim == 2 and predicted.shape[1] == 1:\n            predicted = predicted.ravel()\n\n        return function(actual, predicted)\n\n    return wrapper\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for easy processing\n    arr = np.array(z, dtype=float)\n\n    # Compute the gradient element-wise\n    grad = arr * (1 - arr)\n\n    # Round the results to 4 decimal places\n    grad_rounded = np.round(grad, 4)\n\n    # Return in the same structure as input\n    if np.isscalar(z):\n        # If input was scalar, return scalar\n        return float(grad_rounded)\n    elif isinstance(z, list):\n        # If input was list, convert back to list\n        return grad_rounded.tolist()\n    else:\n        # If input was ndarray, return ndarray\n        return grad_rounded\n```"}
{"task_id": 521, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    # Convert input to a numpy array for easy element-wise operations\n    arr = np.array(z)\n    \n    # Compute the gradient: 1 where arr > 0, else 0\n    grad = (arr > 0).astype(int)\n    \n    # Check if the input was a scalar (0-dimensional array)\n    if arr.ndim == 0:\n        return int(grad)\n    else:\n        return grad.tolist()\n```"}
{"task_id": 522, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # Reset seed for reproducibility\n    np.random.seed(42)\n    \n    # Convert weight_shape to a tuple if it's not already\n    if isinstance(weight_shape, (list, tuple)):\n        shape = tuple(weight_shape)\n    elif isinstance(weight_shape, int):\n        shape = (weight_shape,)\n    else:\n        raise TypeError(\"weight_shape must be an int, list, or tuple\")\n    \n    # Generate the random numbers\n    array = np.random.randn(*shape)\n    \n    # Round to 4 decimal places\n    array_rounded = np.round(array, 4)\n    \n    # Convert to nested list\n    return array_rounded.tolist()\n```"}
{"task_id": 523, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    # Determine fan-in based on shape\n    if len(weight_shape) == 2:\n        # Fully-connected / dense layer\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # Convolutional layer\n        kernel_h, kernel_w, in_channels, _ = weight_shape\n        fan_in = kernel_h * kernel_w * in_channels\n    else:\n        # Default case: treat as 2D with first dimension as fan_in\n        fan_in = weight_shape[0]\n    \n    # Calculate standard deviation\n    sigma = np.sqrt(2 / fan_in)\n    \n    # Generate the weights\n    weights = np.random.normal(loc=0.0, scale=sigma, size=weight_shape)\n    \n    # Round to 4 decimal places\n    weights_rounded = np.round(weights, 4)\n    \n    # Convert to nested list\n    return weights_rounded.tolist()\n```"}
{"task_id": 525, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    # Ensure X and y are numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n\n    # Reshape y to be 1-D if it's 2-D with shape (m,1)\n    if y.ndim > 1:\n        y = y.reshape(-1)\n\n    m, n = X.shape\n\n    # Compute column-wise means\n    x_mean = np.mean(X, axis=0)\n    y_mean = np.mean(y)\n\n    # Mean-centre the data\n    X_centered = X - x_mean\n    y_centered = y - y_mean\n\n    # Compute the matrix to invert\n    A = X_centered.T @ X_centered\n    # Add regularization term (lambda_ * I)\n    A_reg = A + lambda_ * np.eye(n)\n\n    # Compute the right-hand side\n    b = X_centered.T @ y_centered\n\n    # Solve for weights using pseudo-inverse in case A_reg is singular\n    w = np.linalg.pinv(A_reg) @ b\n\n    # Compute bias\n    b_bias = y_mean - np.dot(x_mean, w)\n\n    # Round weights and bias to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    bias_rounded = round(b_bias, 4)\n\n    return w_rounded, bias_rounded\n```"}
{"task_id": 527, "completion_id": 0, "completion": "```python\nimport os\nfrom typing import List, Union\n\ndef extract_archive(file_path: str, path: str = '.', archive_format: Union[str, List[str], None] = 'auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n\n    # Define supported extensions for each format (case-insensitive)\n    tar_extensions = [\".tar\", \".tar.gz\", \".tgz\", \".tar.bz\", \".tar.bz2\", \".tbz\"]\n    zip_extensions = [\".zip\"]\n\n    # Normalize archive_format input\n    if archive_format is None:\n        allowed_formats = []\n    elif archive_format == 'auto':\n        allowed_formats = ['tar', 'zip']\n    elif isinstance(archive_format, str):\n        allowed_formats = [archive_format]\n    elif isinstance(archive_format, list):\n        allowed_formats = archive_format\n    else:\n        # Unexpected type, treat as no allowed formats\n        allowed_formats = []\n\n    # Convert allowed formats to lowercase for case-insensitive comparison\n    allowed_formats = [fmt.lower() for fmt in allowed_formats]\n\n    # If no formats are allowed, return False immediately\n    if not allowed_formats:\n        return False\n\n    # Extract the filename from the path\n    filename = os.path.basename(file_path).lower()\n\n    # Check for each allowed format\n    for fmt in allowed_formats:\n        if fmt == 'tar':\n            # Check if filename ends with any tar extension\n            if any(filename.endswith(ext) for ext in tar_extensions):\n                return True\n        elif fmt == 'zip':\n            if any(filename.endswith(ext) for ext in zip_extensions):\n                return True\n        else:\n            # Unknown format, ignore\n            continue\n\n    # No matching extension found\n    return False\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert input data to numpy array for easier manipulation\n    X_np = np.array(X)\n    w = np.array(W)\n\n    # Determine the range for each axis based on the data\n    x1_min, x1_max = X_np[:,0].min(), X_np[:,0].max()\n    x2_min, x2_max = X_np[:,1].min(), X_np[:,1].max()\n\n    # Create linearly spaced arrays for each axis\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a meshgrid from these arrays\n    xx, yy = np.meshgrid(x1_plot, x2_plot)\n\n    # Flatten the grid to create a list of points for classification\n    grid_points = np.c_[xx.ravel(), yy.ravel()]\n\n    # Compute the linear combination for each point\n    # sign(w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b)\n    z = np.dot(grid_points, w) + b\n\n    # Apply the sign function: 1 if z >= 0, else -1\n    labels = np.where(z >= 0, 1, -1)\n\n    # Reshape labels back into a grid_n x grid_n list of lists\n    label_grid = labels.reshape((grid_n, grid_n))\n    return label_grid.tolist()\n```"}
{"task_id": 529, "completion_id": 0, "completion": "```python\nimport math\n\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        # When target is unknown, just print current right-aligned in 7 spaces + \"/Unknown\"\n        return f\"{current:7d}/Unknown\"\n    else:\n        # When target is known\n        # Calculate number of digits needed for target\n        d = len(str(target))\n        # Format current with right alignment\n        current_str = f\"{current:>{d}d}\"\n        # Start constructing the output\n        output = f\"{current_str}/{target} [\"\n        # Calculate progress width\n        prog_width = int(width * current / target)\n        # Build the bar\n        if prog_width > 0:\n            # Append (prog_width - 1) '=' characters\n            output += '=' * (prog_width - 1)\n            # Decide whether to add '>' or '='\n            if current < target:\n                output += '>'\n            else:\n                output += '='\n        # Append remaining dots\n        remaining = width - prog_width\n        output += '.' * remaining\n        # Close the bar\n        output += ']'\n        return output\n```"}
{"task_id": 530, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions for numerical stability\n    epsilon = 1e-7\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy for each sample\n    loss = - (y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    \n    # Compute the mean loss over all samples\n    mean_loss = np.mean(loss)\n    \n    # Return rounded to 4 decimal places\n    return round(mean_loss, 4)\n```"}
{"task_id": 531, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    # Validate input\n    if window_len <= 0:\n        raise ValueError(\"window_len must be a positive integer.\")\n\n    K = len(coefs) - 1  # Highest k\n    n = np.arange(window_len)\n\n    if symmetric:\n        # Symmetric window: n from 0 to L-1\n        theta = np.pi * (n / (window_len - 1))\n    else:\n        # Periodic window: n from 0 to L, but discard last sample\n        # For periodic, sample L+1 points from -pi to pi inclusive, then discard last\n        # So, generate L+1 points and ignore the last\n        n_periodic = np.arange(window_len + 1)\n        theta = np.pi * n_periodic / window_len\n        # We'll use only the first L points\n        n = n[:window_len]\n\n    # Initialize window array\n    w = np.zeros(window_len)\n\n    # Compute the window\n    for k, a_k in enumerate(coefs):\n        w += a_k * np.cos(k * theta)\n\n    # Round to four decimal places\n    w_rounded = np.round(w, 4).tolist()\n\n    return w_rounded\n```"}
{"task_id": 532, "completion_id": 0, "completion": "```python\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n\n    # If fewer than two layers, no trainable parameters exist\n    if len(layers) < 2:\n        return 0\n\n    total_params = 0\n    # Iterate over each pair of consecutive layers\n    for n_in, n_out in zip(layers[:-1], layers[1:]):\n        weights = n_in * n_out\n        biases = n_out\n        total_params += weights + biases\n\n    return total_params\n```"}
{"task_id": 533, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Convert x to a numpy array for vectorized operations\n    x_array = np.array(x, dtype=float)\n    \n    # Calculate the PDF\n    coeff = 1 / (sigma * np.sqrt(2 * np.pi))\n    exponent = -((x_array - mean) ** 2) / (2 * sigma ** 2)\n    pdf_values = coeff * np.exp(exponent)\n    \n    # Round to 4 decimal places\n    rounded = np.round(pdf_values, 4)\n    \n    # Return scalar if input was scalar\n    if np.isscalar(x):\n        return float(rounded)\n    else:\n        return rounded.tolist()\n```"}
{"task_id": 534, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    # Convert input to a numpy array for uniform processing\n    arr = np.array(Z)\n    \n    # Compute sigmoid\n    sigmoid_arr = 1 / (1 + np.exp(-arr))\n    \n    # Round to 4 decimal places\n    sigmoid_arr = np.round(sigmoid_arr, 4)\n    \n    # Check if input was scalar\n    if np.isscalar(Z):\n        return float(sigmoid_arr)\n    else:\n        return sigmoid_arr.tolist()\n```"}
{"task_id": 536, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n\n    # Step 1: Prepend a column of ones to X_train and X_test for bias term\n    X_train_aug = np.column_stack((np.ones(X_train.shape[0]), X_train))\n    X_test_aug = np.column_stack((np.ones(X_test.shape[0]), X_test))\n    \n    # Step 2: Learn theta\n    if method == \"normal\":\n        # Closed-form solution: theta = (X^T X)^(-1) X^T y\n        XTX = X_train_aug.T @ X_train_aug\n        XTy = X_train_aug.T @ y_train\n        theta = np.linalg.inv(XTX) @ XTy\n    else:\n        # Batch Gradient Descent\n        m = X_train_aug.shape[0]\n        n = X_train_aug.shape[1]\n        theta = np.zeros(n)\n        for _ in range(num_iter):\n            gradient = (X_train_aug.T @ (X_train_aug @ theta - y_train)) / m\n            theta = theta - alpha * gradient\n\n    # Step 3: Make predictions on X_test\n    y_pred = X_test_aug @ theta\n\n    # Step 4: Round predictions to 4 decimal places\n    y_pred_rounded = np.round(y_pred, 4)\n\n    return y_pred_rounded.tolist()\n```"}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-9  # To avoid division by zero\n\n    # Separate training data by class\n    X_class0 = X_train[y_train == 0]\n    X_class1 = X_train[y_train == 1]\n\n    # Calculate mean and std for each feature per class\n    mu0 = np.mean(X_class0, axis=0)\n    sigma0 = np.std(X_class0, axis=0) + epsilon\n\n    mu1 = np.mean(X_class1, axis=0)\n    sigma1 = np.std(X_class1, axis=0) + epsilon\n\n    # Calculate class priors\n    prior0 = len(X_class0) / len(X_train)\n    prior1 = len(X_class1) / len(X_train)\n\n    predictions = []\n\n    for x in X_test:\n        # Compute likelihood for class 0\n        likelihood0 = np.prod(\n            (1 / (np.sqrt(2 * np.pi) * sigma0)) *\n            np.exp(- ((x - mu0) ** 2) / (2 * sigma0 ** 2))\n        )\n\n        # Compute likelihood for class 1\n        likelihood1 = np.prod(\n            (1 / (np.sqrt(2 * np.pi) * sigma1)) *\n            np.exp(- ((x - mu1) ** 2) / (2 * sigma1 ** 2))\n        )\n\n        # Compute posterior probabilities (unnormalized)\n        posterior0 = likelihood0 * prior0\n        posterior1 = likelihood1 * prior1\n\n        # Predict class with higher posterior\n        predicted_class = 0 if posterior0 > posterior1 else 1\n        predictions.append(predicted_class)\n\n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        AL (np.ndarray): Predicted probabilities, shape (m,) or (1,m).\n        Y (np.ndarray): True labels, shape (m,) or (1,m).\n\n    Returns:\n        float: The binary cross-entropy cost rounded to 4 decimal places.\n    \"\"\"\n    # Ensure AL and Y are 1D arrays\n    AL = AL.flatten()\n    Y = Y.flatten()\n\n    # Clip AL to avoid log(0)\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n\n    # Compute the cost\n    m = Y.shape[0]\n    cost = - (1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n\n    # Return as a Python float rounded to 4 decimal places\n    return round(float(cost), 4)\n```"}
{"task_id": 540, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # Compute sigmoid of Z\n    sigmoid_Z = 1 / (1 + np.exp(-Z))\n    # Compute derivative: sigmoid(Z) * (1 - sigmoid(Z))\n    derivative = sigmoid_Z * (1 - sigmoid_Z)\n    # Round to 4 decimal places\n    rounded_derivative = np.round(derivative, 4)\n    # Convert to list\n    return rounded_derivative.tolist()\n```"}
{"task_id": 541, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    # Convert inputs to numpy arrays for easy element-wise operations\n    y_array = np.array(y)\n    y_hat_array = np.array(y_hat)\n    \n    # Compute the gradient: y_hat - y\n    grad = y_hat_array - y_array\n    \n    # Round each element to 4 decimal places\n    grad_rounded = np.round(grad, 4)\n    \n    # Convert to list with original shape\n    return grad_rounded.tolist()\n```"}
{"task_id": 542, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Performs a single RMSProp optimization step.\n\n    Args:\n        params (list[np.ndarray]): List of parameter arrays to be updated.\n        grads (list[np.ndarray]): List of gradients corresponding to params.\n        s (list[np.ndarray] | None): List of running averages of squared gradients.\n                                         If None, initialized internally.\n        alpha (float): Learning rate.\n        beta (float): Decay rate for the running average.\n        epsilon (float): Small constant to prevent division by zero.\n\n    Returns:\n        tuple: (new_params, new_s)\n            new_params (list[np.ndarray]): Updated parameters, rounded to 6 decimal places.\n            new_s (list[np.ndarray]): Updated running averages.\n    \"\"\"\n    if s is None:\n        s = [np.zeros_like(g) for g in grads]\n    else:\n        # Ensure s has the same shape as grads\n        s = [np.array(s_i, dtype=g.dtype) for s_i, g in zip(s, grads)]\n    \n    new_params = []\n    new_s = []\n\n    for param, grad, s_i in zip(params, grads, s):\n        # Update the running average of squared gradients\n        s_new = beta * s_i + (1 - beta) * (grad ** 2)\n        # Compute the adjusted gradient\n        adjusted_grad = grad / (np.sqrt(s_new) + epsilon)\n        # Update parameters\n        param_new = param - alpha * adjusted_grad\n        # Round parameters to 6 decimal places\n        param_new_rounded = np.round(param_new, 6)\n        # Append to output lists\n        new_params.append(param_new_rounded)\n        new_s.append(s_new)\n\n    return new_params, new_s\n```"}
{"task_id": 543, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n\n    total_count = len(data)\n    label_counts = Counter(data)\n\n    gini = 1.0\n    for count in label_counts.values():\n        p = count / total_count\n        gini -= p ** 2\n\n    return round(gini, 4)\n```"}
{"task_id": 544, "completion_id": 0, "completion": "```python\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n\n    for sample in data:\n        # Ensure the sample has enough features\n        if fea < len(sample):\n            if sample[fea] >= value:\n                set1.append(sample)\n            else:\n                set2.append(sample)\n        else:\n            # If the feature index is out of bounds, treat as not meeting the condition\n            set2.append(sample)\n\n    return set1, set2\n```"}
{"task_id": 545, "completion_id": 0, "completion": "```python\ndef tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    def recurse(node: \"node | None\", depth: int) -> tuple[int, int]:\n        if node is None:\n            # Empty subtree contributes no leaves and depth 0\n            return 0, 0\n\n        # Check if current node is a leaf\n        if node.results is not None:\n            # Leaf node: count as 1 leaf, depth is current depth\n            return 1, depth\n\n        # Recurse on left and right children\n        left_leaves, left_max_depth = recurse(node.left, depth + 1)\n        right_leaves, right_max_depth = recurse(node.right, depth + 1)\n\n        # Aggregate results\n        total_leaves = left_leaves + right_leaves\n        max_subtree_depth = max(left_max_depth, right_max_depth)\n\n        return total_leaves, max_subtree_depth\n\n    # Start recursion from root at depth 1\n    return recurse(root, 1)\n```"}
{"task_id": 546, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Any, Dict, List\n\ndef gini_impurity(data: List[List[Any]]) -> float:\n    \"\"\"Calculate the Gini impurity for a dataset.\"\"\"\n    if not data:\n        return 0.0\n    labels = [sample[-1] for sample in data]\n    total = len(labels)\n    counts = Counter(labels)\n    impurity = 1.0 - sum((count / total) ** 2 for count in counts.values())\n    return impurity\n\ndef majority_class(data: List[List[Any]]) -> Any:\n    \"\"\"Return the class label that appears most frequently in data.\"\"\"\n    labels = [sample[-1] for sample in data]\n    counts = Counter(labels)\n    # In case of tie, the class that appears first in data wins\n    max_count = max(counts.values())\n    for label in labels:\n        if counts[label] == max_count:\n            return label\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\"\"\"\n    if not data:\n        return {}\n\n    # Compute current Gini impurity\n    current_impurity = gini_impurity(data)\n\n    n_features = len(data[0]) - 1  # number of features\n    best_gain = 0.0\n    best_split = None\n\n    # Iterate over features\n    for feature_idx in range(n_features):\n        # Get all unique values for this feature\n        feature_values = set(sample[feature_idx] for sample in data)\n        # Iterate over sorted unique values\n        for value in sorted(feature_values):\n            # Split data\n            left = [sample for sample in data if sample[feature_idx] == value]\n            right = [sample for sample in data if sample[feature_idx] != value]\n\n            # Ignore splits that don't partition data\n            if not left or not right:\n                continue\n\n            # Compute weighted impurity after split\n            total = len(data)\n            left_weight = len(left) / total\n            right_weight = len(right) / total\n            impurity_after = (left_weight * gini_impurity(left) +\n                              right_weight * gini_impurity(right))\n            gain = current_impurity - impurity_after\n\n            # Check if this is the best split so far\n            if gain > best_gain:\n                best_gain = gain\n                best_split = {\n                    \"feature\": feature_idx,\n                    \"value\": value,\n                    \"left\": left,\n                    \"right\": right\n                }\n\n    # Decide whether to split or create a leaf\n    if best_gain <= 0:\n        # No positive gain, create a leaf with majority class\n        return {\"label\": majority_class(data)}\n\n    # Recursively build subtrees\n    left_subtree = build_tree(best_split[\"left\"])\n    right_subtree = build_tree(best_split[\"right\"])\n\n    # Return internal node\n    return {\n        \"feature\": best_split[\"feature\"],\n        \"value\": best_split[\"value\"],\n        \"left\": left_subtree,\n        \"right\": right_subtree\n    }\n```"}
{"task_id": 547, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for easier manipulation\n    try:\n        A_np = np.array(A)\n        B_np = np.array(B)\n        S_np = np.array(S)\n        obs_np = np.array(obs)\n    except Exception:\n        return -1\n\n    # Validate dimensions\n    n_states = A_np.shape[0]\n    # Check A is square and matches dimensions\n    if A_np.ndim != 2 or A_np.shape[0] != A_np.shape[1]:\n        return -1\n    # Check B dimensions\n    if B_np.ndim != 2 or B_np.shape[0] != n_states:\n        return -1\n    # Check S length\n    if len(S_np) != n_states:\n        return -1\n    # Check obs is a list of integers within emission range\n    if len(obs) == 0:\n        return -1\n    if not all(isinstance(o, int) for o in obs):\n        return -1\n    m_emissions = B_np.shape[1]\n    if any(o < 0 or o >= m_emissions for o in obs):\n        return -1\n    # Check t validity\n    if t < 0 or t >= len(obs):\n        return -1\n\n    # Initialize alpha\n    # \u03b1_0 = S * B[:, obs[0]]\n    alpha = S_np * B_np[:, obs[0]]\n\n    # Compute \u03b1_t for t >= 1\n    for time in range(1, t + 1):\n        # \u03b1_t = (\u03b1_{t-1} @ A) * B[:, obs[t]]\n        alpha = (alpha @ A_np) * B_np[:, obs[time]]\n\n    # Round to 4 decimal places\n    alpha_rounded = np.round(alpha, 4).tolist()\n\n    return alpha_rounded\n```"}
{"task_id": 548, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier computation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = A.shape[0]\n    T = len(obs)\n\n    # Validate t\n    if t < 0 or t >= T - 1:\n        return -1\n\n    # Forward pass (\u03b1)\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, obs[0]]\n    # Normalize to prevent underflow (optional, but good practice)\n    # alpha[0, :] /= np.sum(alpha[0, :])\n\n    for i in range(1, T):\n        alpha[i, :] = (alpha[i - 1, :].dot(A)) * B[:, obs[i]]\n\n    # Backward pass (\u03b2)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n\n    for i in range(T - 2, -1, -1):\n        beta[i, :] = A.dot(B[:, obs[i + 1]] * beta[i + 1, :])\n\n    # Compute numerator for \u03be_t(i,j)\n    numerator = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            numerator[i, j] = alpha[t, i] * A[i, j] * B[j, obs[t + 1]] * beta[t + 1, j]\n\n    # Compute denominator (sum over all i,j)\n    denom = np.sum(numerator)\n\n    # Handle case where denom is zero to avoid division by zero\n    if denom == 0:\n        # Return a matrix of zeros\n        xi = np.zeros((N, N))\n    else:\n        xi = numerator / denom\n\n    # Round to 4 decimals and convert to list of lists\n    xi_rounded = np.round(xi, 4).tolist()\n\n    return xi_rounded\n```"}
{"task_id": 549, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    \n    # Check if vectors are of the same length\n    if x_arr.shape != y_arr.shape:\n        return -1\n    \n    # Compute squared Euclidean distance\n    dist = np.sum((x_arr - y_arr) ** 2)\n    \n    # Return rounded result\n    return round(dist, 4)\n```"}
{"task_id": 551, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef best_gini_split(X: np.ndarray,\n                    y: np.ndarray,\n                    epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n    n_samples = len(y)\n    if n_samples == 0:\n        return -1, None, 0.0\n\n    # Function to compute Gini impurity for a set of labels\n    def gini(labels):\n        total = len(labels)\n        if total == 0:\n            return 0.0\n        counts = Counter(labels)\n        impurity = 1.0 - sum((count / total) ** 2 for count in counts.values())\n        return impurity\n\n    # Compute parent Gini impurity\n    parent_gini = gini(y)\n\n    # Initialize best split variables\n    best_feature = -1\n    best_value = None\n    best_gini = parent_gini  # Initialize with parent impurity\n\n    # Loop over features\n    for feature_idx in range(X.shape[1]):\n        feature_column = X[:, feature_idx]\n        # Get unique values for potential splits\n        unique_values = np.unique(feature_column)\n\n        for split_value in unique_values:\n            # Create boolean mask for samples satisfying the split\n            mask_left = (feature_column == split_value)\n            mask_right = ~mask_left\n\n            y_left = y[mask_left]\n            y_right = y[mask_right]\n\n            # Compute Gini for left and right subsets\n            gini_left = gini(y_left)\n            gini_right = gini(y_right)\n\n            # Compute weighted Gini impurity\n            weight_left = len(y_left) / n_samples\n            weight_right = len(y_right) / n_samples\n            gini_split = weight_left * gini_left + weight_right * gini_right\n\n            # Check if this split improves impurity reduction\n            if gini_split < best_gini:\n                best_gini = gini_split\n                best_feature = feature_idx\n                best_value = split_value\n\n    # Check if the best split reduces impurity sufficiently\n    if best_gini <= parent_gini - epsilon:\n        return best_feature, best_value, float(best_gini)\n    else:\n        return -1, None, float(parent_gini)\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])          # Initial state distribution\n    A = np.array(hmm['A'])            # Transition matrix\n    B = np.array(hmm['B'])            # Emission matrix\n\n    T = len(observations)\n    N = len(pi)\n\n    # Check if t is within valid range\n    if t < 0 or t >= T:\n        return []\n\n    # Forward pass: compute alpha\n    alpha = np.zeros((T, N))\n    # Initialization\n    alpha[0] = pi * B[:, observations[0]]\n    # Induction\n    for time in range(1, T):\n        alpha[time] = (alpha[time - 1] @ A) * B[:, observations[time]]\n\n    # Backward pass: compute beta\n    beta = np.zeros((T, N))\n    # Initialization\n    beta[T - 1] = np.ones(N)\n    # Induction\n    for time in range(T - 2, -1, -1):\n        beta[time] = A @ (B[:, observations[time + 1]] * beta[time + 1])\n\n    # Compute gamma for time t\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma = numerator / denominator\n\n    # Round to four decimal places\n    gamma_rounded = [round(prob, 4) for prob in gamma]\n\n    return gamma_rounded\n```"}
{"task_id": 553, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    # Add bias term (column of ones) to training and test data\n    X_train_bias = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_bias = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    \n    n_samples, n_features = X_train_bias.shape\n    \n    # Initialize weights to zeros\n    w = np.zeros(n_features)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Batch Gradient Descent\n    for _ in range(max_iter):\n        z = X_train_bias @ w  # shape: (n_samples,)\n        predictions = sigmoid(z)\n        # Gradient: (X^T)(y - predictions) / n_samples\n        gradient = (X_train_bias.T @ (y_train - predictions)) / n_samples\n        # Update weights\n        w += alpha * gradient\n    \n    # Compute probabilities for test set\n    test_probs = sigmoid(X_test_bias @ w)\n    # Classify based on 0.5 threshold\n    test_preds = [1 if prob >= 0.5 else 0 for prob in test_probs]\n    \n    return test_preds\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    n_samples = data.shape[0]\n    # Step 1: Compute pairwise Euclidean distances\n    # Efficient way: use broadcasting or scipy.spatial.distance.cdist\n    # But since only numpy is allowed, we'll do broadcasting\n    # For large datasets, this might be slow, but acceptable here\n    distances = np.linalg.norm(data[:, np.newaxis, :] - data[np.newaxis, :, :], axis=2)\n\n    # Step 2: Build neighborhood list for each point\n    neighbors = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Step 3: Identify core points\n    core_points = [i for i in range(n_samples) if len(neighbors[i]) >= min_samples]\n\n    # Initialize labels: -1 for noise, 0 for unvisited\n    labels = [0] * n_samples\n    cluster_id = 0\n\n    # Step 4: Expand clusters\n    for point in range(n_samples):\n        if labels[point] != 0:\n            # Already visited\n            continue\n        if point not in core_points:\n            # Not a core point, mark as noise temporarily\n            labels[point] = -1\n            continue\n        # Start a new cluster\n        cluster_id += 1\n        labels[point] = cluster_id\n        queue = deque([point])\n\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighbors[current_point]:\n                if labels[neighbor] == 0:\n                    # Unvisited\n                    labels[neighbor] = cluster_id\n                    if neighbor in core_points:\n                        queue.append(neighbor)\n                elif labels[neighbor] == -1:\n                    # Previously marked as noise, now assign to cluster\n                    labels[neighbor] = cluster_id\n\n    # Step 5: Remaining unlabeled points are noise\n    # (Already labeled as -1 or assigned to clusters)\n    return labels\n```"}
{"task_id": 559, "completion_id": 0, "completion": "```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int] = None, right: 'Optional[Node]' = None,\n                 left: 'Optional[Node]' = None):\n        self.val = val\n        self.right = right\n        self.left = left\n\n\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    result = []\n\n    def traverse(node: Optional[Node]):\n        if node is None:\n            return\n        # If node is a leaf (no children), add its value\n        if node.left is None and node.right is None:\n            if node.val is not None:\n                result.append(node.val)\n        else:\n            # Traverse left subtree\n            traverse(node.left)\n            # Traverse right subtree\n            traverse(node.right)\n\n    traverse(root)\n    return result\n```"}
{"task_id": 560, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\n\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n\n    # Helper function to build a balanced k-d tree\n    def build_kd_tree(points, depth=0):\n        if not points:\n            return None\n        k_dim = len(points[0])  # dimensionality\n        axis = depth % k_dim\n        # Sort points by the current axis\n        points_sorted = sorted(points, key=lambda p: p[0][axis])\n        median_idx = len(points_sorted) // 2\n        median_point, median_point_idx = points_sorted[median_idx]\n        # Build node\n        node = {\n            'point_idx': median_point_idx,\n            'axis': axis,\n            'left': build_kd_tree(points_sorted[:median_idx], depth + 1),\n            'right': build_kd_tree(points_sorted[median_idx + 1:], depth + 1)\n        }\n        return node\n\n    # Helper function to compute squared Euclidean distance\n    def squared_distance(p1, p2):\n        return sum((a - b) ** 2 for a, b in zip(p1, p2))\n\n    # Build the k-d tree\n    # We need to keep track of points with their original indices\n    indexed_points = list(enumerate(points))\n    root = build_kd_tree(indexed_points)\n\n    # Use a max-heap to keep track of the k closest points found so far\n    # Heap elements: (-distance, index)\n    heap = []\n\n    def search(node):\n        if node is None:\n            return\n        point_idx = node['point_idx']\n        point = points[point_idx]\n        axis = node['axis']\n\n        dist = squared_distance(point, query)\n        # If heap not full, push current point\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist, point_idx))\n        else:\n            # If current point is closer than the farthest in heap, replace\n            if dist < -heap[0][0] or (dist == -heap[0][0] and point_idx < heap[0][1]):\n                heapq.heappushpop(heap, (-dist, point_idx))\n\n        # Decide which branch to search first\n        diff = query[axis] - point[axis]\n        first_branch = node['left'] if diff < 0 else node['right']\n        second_branch = node['right'] if diff < 0 else node['left']\n\n        # Search the side that query falls into\n        search(first_branch)\n\n        # Check if we need to search the other side\n        # If the hypersphere crosses the splitting plane, the other side might contain closer points\n        if len(heap) < k or diff ** 2 < -heap[0][0]:\n            search(second_branch)\n\n    # Start the search\n    search(root)\n\n    # Extract the indices from the heap\n    result = [idx for _, idx in heap]\n    # Sort by distance and then by index\n    # Since heap contains negative distances, we need to get actual distances for sorting\n    result_sorted = sorted(result, key=lambda idx: (squared_distance(points[idx], query), idx))\n    return result_sorted\n```"}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Performs Gaussian Mixture Model clustering using the Expectation-Maximization algorithm.\n    \n    Parameters:\n        data (np.ndarray): N x D array of samples.\n        k (int): Number of Gaussian components.\n        max_iter (int): Maximum number of EM iterations.\n        epsilon (float): Tolerance for convergence based on change in mixture weights.\n        \n    Returns:\n        list[int]: List of length N with cluster labels (0 to k-1), sorted by mean's first coordinate.\n    \"\"\"\n    N, D = data.shape\n    \n    # Handle the case when k=1: all samples belong to one cluster\n    if k == 1:\n        return [0] * N\n    \n    # 1. Initialization\n    # Randomly select k data points as initial means\n    rng = np.random.default_rng()\n    indices = rng.choice(N, size=k, replace=False)\n    means = data[indices]\n    \n    # Initialize covariance matrices to identity matrices\n    covariances = np.array([np.eye(D) for _ in range(k)])\n    \n    # Initialize mixture weights uniformly\n    weights = np.ones(k) / k\n    \n    # To store responsibilities\n    responsibilities = np.zeros((N, k))\n    \n    for iteration in range(max_iter):\n        # E-step: compute responsibilities\n        for j in range(k):\n            # Compute the multivariate normal density for all data points\n            diff = data - means[j]\n            # Compute the inverse and determinant for covariance\n            cov = covariances[j]\n            try:\n                inv_cov = np.linalg.inv(cov)\n                det_cov = np.linalg.det(cov)\n            except np.linalg.LinAlgError:\n                # In case covariance is singular, add small regularization\n                cov += np.eye(D) * 1e-6\n                inv_cov = np.linalg.inv(cov)\n                det_cov = np.linalg.det(cov)\n            norm_const = 1.0 / (np.power((2 * np.pi), D / 2) * np.sqrt(det_cov))\n            # Mahalanobis distance\n            mahal = np.einsum('ij,jk,ik->i', diff, inv_cov, diff)\n            responsibilities[:, j] = weights[j] * norm_const * np.exp(-0.5 * mahal)\n        \n        # Total responsibility sum for each data point\n        resp_sums = responsibilities.sum(axis=1, keepdims=True)\n        # To avoid division by zero\n        resp_sums[resp_sums == 0] = 1e-16\n        responsibilities /= resp_sums\n        \n        # M-step: update parameters\n        Nk = responsibilities.sum(axis=0)  # effective number of points per component\n        new_means = np.zeros((k, D))\n        new_covariances = np.zeros((k, D, D))\n        new_weights = Nk / N\n        \n        for j in range(k):\n            # Update means\n            weighted_sum = np.sum(responsibilities[:, j, np.newaxis] * data, axis=0)\n            new_means[j] = weighted_sum / Nk[j]\n            # Update covariances\n            diff = data - new_means[j]\n            weighted_cov = np.einsum('i,ij,ik->jk', responsibilities[:, j], diff, diff)\n            new_covariances[j] = weighted_cov / Nk[j]\n            # Regularize covariance to avoid singularity\n            new_covariances[j] += np.eye(D) * 1e-6\n        \n        # Check for convergence\n        weight_change = np.linalg.norm(new_weights - weights)\n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n        \n        if weight_change < epsilon:\n            break\n    \n    # Assign each sample to the component with the highest responsibility\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Re-label components based on the first coordinate of their means\n    # Sort components by means[:, 0]\n    sorted_indices = np.argsort(means[:, 0])\n    label_mapping = np.zeros(k, dtype=int)\n    for new_label, old_index in enumerate(sorted_indices):\n        label_mapping[old_index] = new_label\n    \n    # Map old labels to new labels\n    final_labels = [label_mapping[label] for label in labels]\n    \n    return final_labels\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    # 1. Build the similarity matrix W using Gaussian kernel\n    # Compute pairwise squared distances\n    sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    W = np.exp(-gamma * sq_dists)\n\n    # 2. Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        # Compute D^{-1/2}\n        with np.errstate(divide='ignore'):\n            D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        # Handle potential infinities if any degree is zero\n        D_inv_sqrt[np.isinf(D_inv_sqrt)] = 0\n        # Compute normalized Laplacian\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n\n    # 3. Compute eigenvectors corresponding to the smallest n_cluster eigenvalues\n    # Use np.linalg.eigh since L is symmetric\n    eigvals, eigvecs = np.linalg.eigh(L)\n    # Select the eigenvectors corresponding to the smallest eigenvalues\n    idx = np.argsort(eigvals)[:n_cluster]\n    U = eigvecs[:, idx]\n\n    # If normalized, row-normalize U\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1, keepdims=True)\n        # Avoid division by zero\n        row_norms[row_norms == 0] = 1\n        U = U / row_norms\n\n    # 4. Run k-means in the eigenvector space\n    # Initialize centroids: first n_cluster samples\n    centroids = U[:n_cluster, :].copy()\n\n    labels = np.zeros(N, dtype=int)\n    for _ in range(100):  # limit iterations for convergence\n        # Assign labels based on closest centroid\n        distances = np.linalg.norm(U[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        new_labels = np.argmin(distances, axis=1)\n\n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        for k in range(n_cluster):\n            points_in_k = U[labels == k]\n            if len(points_in_k) > 0:\n                centroids[k] = np.mean(points_in_k, axis=0)\n            else:\n                # If a cluster gets empty, reinitialize its centroid\n                centroids[k] = U[np.random.randint(N)]\n\n    # 4b. Relabel clusters so that the cluster containing the smallest original index gets label 0, etc.\n    # Find the smallest original index in each cluster\n    cluster_min_indices = []\n    for k in range(n_cluster):\n        members = np.where(labels == k)[0]\n        if len(members) > 0:\n            cluster_min_indices.append((np.min(members), k))\n        else:\n            # If empty, assign a large index to avoid confusion\n            cluster_min_indices.append((N, k))\n    # Sort clusters by their smallest original index\n    cluster_min_indices.sort(key=lambda x: x[0])\n    # Create a mapping from old cluster label to new label\n    label_mapping = {old_k: new_k for new_k, (_, old_k) in enumerate(cluster_min_indices)}\n    relabeled = [label_mapping[lab] for lab in labels]\n\n    return relabeled\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build Gram matrix G\n    G = X_data @ X_data.T  # shape: N x N\n\n    for iteration in range(max_iter):\n        error_made = False\n        for i in range(N):\n            # Compute g = sum_j alpha_j y_j G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            # Check the margin condition\n            if y_data[i] * (g + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                error_made = True\n        # If no errors in this pass, convergence achieved\n        if not error_made:\n            break\n\n    # Recover weight vector w\n    w = np.sum((alpha * y_data)[:, np.newaxis] * X_data, axis=0)\n\n    # Round components to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while True:\n        # If current node is a leaf, return its prediction\n        if hasattr(current_node, 'y'):\n            return current_node.y\n\n        # Internal node: decide based on task_type\n        feature_index = current_node.label\n        feature_value = features[feature_index]\n\n        if task_type == 'classification':\n            # Find the first child whose x matches the feature value\n            matched_child = None\n            for child in current_node.child:\n                if hasattr(child, 'x') and child.x == feature_value:\n                    matched_child = child\n                    break\n            # If no match found, default to second child\n            if matched_child is None:\n                matched_child = current_node.child[1]\n            current_node = matched_child\n\n        elif task_type == 'regression':\n            # Compare feature value with split point s\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n        else:\n            raise ValueError(\"Invalid task_type. Must be 'classification' or 'regression'.\")\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Compute the entropy of a label distribution.\"\"\"\n        label_counts = np.bincount(labels)\n        total = len(labels)\n        probs = label_counts / total\n        # Filter out zero probabilities to avoid log(0)\n        probs = probs[probs > 0]\n        return -np.sum(probs * np.log2(probs))\n    \n    n_samples = y.shape[0]\n    # Compute entropy of the entire label set\n    H_y = entropy(y)\n\n    n_features = X.shape[1]\n    max_gain = -1\n    best_feature = -1\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n\n        # Initialize conditional entropy\n        H_y_given_A = 0.0\n\n        for val in unique_values:\n            # Get indices where feature == val\n            indices = np.where(feature_values == val)[0]\n            subset_labels = y[indices]\n            weight = len(indices) / n_samples\n            subset_entropy = entropy(subset_labels)\n            H_y_given_A += weight * subset_entropy\n\n        info_gain = H_y - H_y_given_A\n        # Round to 6 decimal places\n        info_gain_rounded = round(info_gain, 6)\n\n        if info_gain_rounded > max_gain:\n            max_gain = info_gain_rounded\n            best_feature = feature_idx\n        elif info_gain_rounded == max_gain:\n            # Tie-breaker: choose the smaller index\n            if feature_idx < best_feature:\n                best_feature = feature_idx\n\n    return (best_feature, max_gain)\n```"}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)  # Set seed for reproducibility\n    n_samples, n_features = data.shape\n\n    # Handle edge case: if epsilon=0, no outliers\n    if epsilon == 0:\n        return []\n\n    # Precompute c(n) for n=1..sample_size\n    # c(1)=0, for n>1: 2*ln(n-1)+0.5772156649 - 2*(n-1)/n\n    c_values = [0.0]\n    for n in range(2, sample_size + 1):\n        c_n = 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n        c_values.append(c_n)\n\n    # Function to compute c(n) for a given n\n    def c(n):\n        if n <= 1:\n            return 0.0\n        return c_values[n - 1]\n\n    # Function to build a single isolation tree\n    def build_tree(subsample_indices, depth, height_limit):\n        # If depth reaches limit or node has <=1 sample, create a leaf\n        if depth >= height_limit or len(subsample_indices) <= 1:\n            return {\n                'size': len(subsample_indices),\n                'indices': subsample_indices,\n                'split_feature': None,\n                'split_value': None,\n                'left': None,\n                'right': None\n            }\n\n        # Extract current data\n        current_data = data[subsample_indices]\n\n        # For splitting, choose a random feature\n        feature_idx = np.random.randint(n_features)\n        feature_values = current_data[:, feature_idx]\n\n        min_val = feature_values.min()\n        max_val = feature_values.max()\n\n        # If all values are the same, can't split further\n        if min_val == max_val:\n            return {\n                'size': len(subsample_indices),\n                'indices': subsample_indices,\n                'split_feature': None,\n                'split_value': None,\n                'left': None,\n                'right': None\n            }\n\n        # Choose a random threshold within [min, max]\n        threshold = np.random.uniform(min_val, max_val)\n\n        # Partition the data\n        left_mask = feature_values < threshold\n        right_mask = ~left_mask\n\n        left_indices = subsample_indices[left_mask]\n        right_indices = subsample_indices[right_mask]\n\n        # Recursively build left and right subtrees\n        left_subtree = build_tree(left_indices, depth + 1, height_limit)\n        right_subtree = build_tree(right_indices, depth + 1, height_limit)\n\n        return {\n            'size': len(subsample_indices),\n            'indices': subsample_indices,\n            'split_feature': feature_idx,\n            'split_value': threshold,\n            'left': left_subtree,\n            'right': right_subtree\n        }\n\n    # Function to compute path length for a single observation\n    def path_length(tree, x_idx):\n        node = tree\n        length = 0\n        while node['split_feature'] is not None:\n            feature_idx = node['split_feature']\n            threshold = node['split_value']\n            if data[x_idx, feature_idx] < threshold:\n                node = node['left']\n            else:\n                node = node['right']\n            length += 1\n        # At leaf, add c(n)\n        return length + c(node['size'])\n\n    # Build all trees\n    height_limit = math.ceil(math.log2(sample_size))\n    trees = []\n\n    for _ in range(n_trees):\n        # Sample without replacement if sample_size < n_samples\n        if sample_size >= n_samples:\n            sample_indices = np.arange(n_samples)\n        else:\n            sample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        tree = build_tree(sample_indices, depth=0, height_limit=height_limit)\n        trees.append(tree)\n\n    # Compute average path length for each data point\n    path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        total_length = 0\n        for tree in trees:\n            total_length += path_length(tree, i)\n        path_lengths[i] = total_length / n_trees\n\n    # Compute the normalization factor \u03c6\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n\n    # Compute scores\n    scores = np.power(2, - (path_lengths / phi))\n\n    # Determine outliers: top epsilon fraction\n    if epsilon == 0:\n        return []\n\n    threshold = np.quantile(scores, 1 - epsilon)\n    outlier_indices = np.where(scores >= threshold)[0]\n    return sorted(outlier_indices.tolist())\n```"}
{"task_id": 567, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    pred_array = np.array(predictions)\n    \n    # Number of samples (columns)\n    num_samples = pred_array.shape[1]\n    \n    final_labels = []\n    \n    for col_idx in range(num_samples):\n        # Extract the predictions for the current sample across all trees\n        sample_votes = pred_array[:, col_idx]\n        \n        # Count the occurrences of each label\n        labels, counts = np.unique(sample_votes, return_counts=True)\n        \n        # Find the maximum count\n        max_count = np.max(counts)\n        \n        # Get all labels with the maximum count (to handle ties)\n        candidates = labels[counts == max_count]\n        \n        # Select the smallest label among candidates\n        chosen_label = int(np.min(candidates))\n        final_labels.append(chosen_label)\n    \n    return final_labels\n```"}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Implements a Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\n    Args:\n        X_train: numpy array of shape (n_samples, n_features), categorical features.\n        y_train: numpy array of shape (n_samples,), labels.\n        X_test: numpy array of shape (m_samples, n_features), features to classify.\n        epsilon: convergence threshold.\n        n_iter: maximum number of iterations.\n    Returns:\n        List of predicted labels for X_test.\n    \"\"\"\n\n    # Step 1: Build the set of all possible labels\n    labels = np.unique(y_train)\n    label_to_index = {label: idx for idx, label in enumerate(labels)}\n    n_labels = len(labels)\n\n    n_samples, n_features = X_train.shape\n\n    # Step 2: Build feature-value pairs and empirical expectations\n    # For each feature index, find all unique feature values\n    feature_values = [np.unique(X_train[:, f]) for f in range(n_features)]\n    # Create a list of all feature-value pairs: (feature_index, feature_value)\n    feature_value_pairs = []\n    for f in range(n_features):\n        for val in feature_values[f]:\n            feature_value_pairs.append((f, val))\n    n_features_values = len(feature_value_pairs)\n\n    # Map each (feature_index, feature_value) to an index\n    f_idx_map = {fv: idx for idx, fv in enumerate(feature_value_pairs)}\n\n    # Step 3: Build empirical expectations\n    # For each (feature_value, label), count how many samples have that feature value and label\n    empirical_counts = np.zeros((n_features_values, n_labels))\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        y_idx = label_to_index[y]\n        for f in range(n_features):\n            val = x[f]\n            fv = (f, val)\n            f_idx = f_idx_map[fv]\n            empirical_counts[f_idx, y_idx] += 1\n    # Normalize to get empirical expectations\n    empirical_expectation = empirical_counts / n_samples\n\n    # Step 4: Initialize weights to zero\n    weights = np.zeros(n_features_values)\n\n    # Precompute the feature indicator matrix for training data\n    # For each sample, for each feature-value pair, indicator is 1 if feature matches value, else 0\n    # But to save memory, we will compute feature expectations on the fly during updates\n\n    # Step 5: Define helper functions\n    def compute_Z(x, weights):\n        \"\"\"Compute normalization constant Z(x) for input x.\"\"\"\n        sum_exp = 0.0\n        for y_idx, y in enumerate(labels):\n            sum_wf = 0.0\n            for f in range(n_features):\n                val = x[f]\n                fv = (f, val)\n                f_idx = f_idx_map[fv]\n                sum_wf += weights[f_idx]\n            sum_exp += math.exp(sum_wf)\n        return sum_exp\n\n    def compute_conditional_probs(x, weights):\n        \"\"\"Compute P(y|x) for all labels.\"\"\"\n        denom = 0.0\n        scores = []\n        for y_idx, y in enumerate(labels):\n            sum_wf = 0.0\n            for f in range(n_features):\n                val = x[f]\n                fv = (f, val)\n                f_idx = f_idx_map[fv]\n                sum_wf += weights[f_idx]\n            score = math.exp(sum_wf)\n            scores.append(score)\n            denom += score\n        probs = [score / denom for score in scores]\n        return probs\n\n    # Step 6: Iterative optimization\n    for iteration in range(n_iter):\n        max_delta = 0.0\n        # Compute model expectations\n        model_expectation = np.zeros(n_features_values)\n        for i in range(n_samples):\n            x = X_train[i]\n            probs = compute_conditional_probs(x, weights)\n            for y_idx, y in enumerate(labels):\n                p_yx = probs[y_idx]\n                for f in range(n_features):\n                    val = x[f]\n                    fv = (f, val)\n                    f_idx = f_idx_map[fv]\n                    model_expectation[f_idx] += p_yx * (y == y_train[i])\n        # Normalize model expectation\n        model_expectation /= n_samples\n\n        # Update weights\n        for f_idx in range(n_features_values):\n            # To avoid division by zero, add a small epsilon if needed\n            empirical = empirical_expectation[f_idx]\n            model = model_expectation[f_idx]\n            # To prevent log(0), clip model to a small positive number\n            if model == 0:\n                model = 1e-12\n            delta = (1.0 / n_labels) * math.log(empirical / model) if model > 0 else 0.0\n            weights[f_idx] += delta\n            max_delta = max(max_delta, abs(delta))\n        if max_delta < epsilon:\n            break\n\n    # Step 7: Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        probs = compute_conditional_probs(x, weights)\n        max_idx = np.argmax(probs)\n        predictions.append(labels[max_idx])\n\n    return predictions\n```"}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_doc_counts = Counter()\n\n    # Count in how many documents each word appears\n    for _, words in data:\n        unique_words = set(words)\n        for word in unique_words:\n            word_doc_counts[word] += 1\n\n    # Calculate ratios and sort from most common to least\n    ratios = []\n    for word, count in word_doc_counts.items():\n        ratio = round(count / total_docs, 4)\n        ratios.append((word, ratio))\n    # Sort by ratio descending; if tie, order doesn't matter\n    ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top words based on cut_off\n    if cut_off is None:\n        top_words = {word for word, _ in ratios}\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = {word for word, _ in ratios[:cut_off]}\n\n    return ratios, top_words\n```"}
{"task_id": 570, "completion_id": 0, "completion": "```python\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n\n    # Count how many documents per class\n    class_counts = defaultdict(int)\n    # Count how many documents per class contain each keyword\n    keyword_counts_per_class = defaultdict(lambda: defaultdict(int))\n    # Set of all classes\n    classes = set()\n\n    # Training phase\n    for label, tokens in train_data:\n        classes.add(label)\n        class_counts[label] += 1\n        token_set = set(tokens)\n        for w in keywords:\n            if w in token_set:\n                keyword_counts_per_class[label][w] += 1\n\n    # Total number of documents\n    total_docs = len(train_data)\n\n    # Compute P(w|c) for each class c and keyword w\n    # Note: No smoothing, so if count is zero, probability is zero\n    prob_w_given_c = defaultdict(dict)\n    for c in classes:\n        N_c = class_counts[c]\n        for w in keywords:\n            count = keyword_counts_per_class[c][w]\n            prob_w_given_c[c][w] = count / N_c if count > 0 else 0.0\n\n    # Prediction\n    predictions = []\n    for tokens in test_samples:\n        token_set = set(tokens)\n        class_likelihoods = {}\n        for c in classes:\n            likelihood = 1.0\n            for w in keywords:\n                p = prob_w_given_c[c][w]\n                if w in token_set:\n                    likelihood *= p\n                else:\n                    likelihood *= (1 - p)\n            class_likelihoods[c] = likelihood\n        # Select class with maximum likelihood\n        predicted_label = max(class_likelihoods, key=class_likelihoods.get)\n        predictions.append(predicted_label)\n\n    return predictions\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    # w = sum_i alpha_i * y_i * x_i\n    w = np.dot((alpha * y), X)  # shape: (n_features,)\n\n    # Round w to 4 decimal places\n    w_rounded = np.round(w, 4)\n\n    # Compute the bias term b\n    # b = (1/n) * sum_i ( y_i - w^T x_i )\n    n_samples = X.shape[0]\n    # Compute w^T x_i for all samples\n    wx = np.dot(X, w)\n    # Compute the differences y_i - (w^T x_i)\n    diffs = y - wx\n    b = np.mean(diffs)\n\n    # Round b to 4 decimal places\n    b_rounded = round(b, 4)\n\n    # Convert w to list\n    w_list = w_rounded.tolist()\n\n    return w_list, b_rounded\n```"}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute the LOF scores for each sample in data and identify outliers.\n\n    Parameters:\n    - data: numpy array of shape (n_samples, n_features)\n    - k: number of neighbors (integer)\n    - epsilon: threshold for outlier detection (float)\n\n    Returns:\n    - tuple: (list_of_LOF_scores, list_of_outlier_indices)\n    \"\"\"\n    n_samples = data.shape[0]\n    \n    # 1. Compute the full pairwise Euclidean distance matrix\n    # Efficiently compute using broadcasting\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.linalg.norm(diff, axis=2)\n    \n    # Initialize arrays\n    k_distance = np.zeros(n_samples)\n    neighbors_idx = [[] for _ in range(n_samples)]\n    \n    # 2. For each point, find its k-distance and neighbors\n    for i in range(n_samples):\n        # Exclude the point itself by setting its distance to infinity\n        dist_i = dist_matrix[i].copy()\n        dist_i[i] = np.inf\n        # Find the indices of the k nearest neighbors\n        neighbor_indices = np.argpartition(dist_i, k)[:k]\n        # Get the k-th nearest distance\n        kth_distance = np.max(dist_i[neighbor_indices])\n        k_distance[i] = kth_distance\n        neighbors_idx[i] = neighbor_indices.tolist()\n    \n    # 3. Define reachability distance\n    # reach-dist_k(p, q) = max(k-distance(q), dist(p, q))\n    reach_dist = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for q in neighbors_idx[i]:\n            reach_dist[i, q] = max(k_distance[q], dist_matrix[i, q])\n    \n    # 4. Compute Local Reachability Density (LRD)\n    LRD = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = 0.0\n        for q in neighbors_idx[i]:\n            sum_reach_dist += reach_dist[i, q]\n        # To avoid division by zero, add a small epsilon if sum_reach_dist is zero\n        if sum_reach_dist == 0:\n            LRD[i] = np.inf\n        else:\n            LRD[i] = k / sum_reach_dist\n    \n    # 5. Compute LOF scores\n    LOF_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_LRD_q = 0.0\n        for q in neighbors_idx[i]:\n            sum_LRD_q += LRD[q]\n        LOF_scores[i] = (sum_LRD_q / k) / LRD[i]\n    \n    # Round scores to 4 decimal places\n    LOF_scores = np.round(LOF_scores, 4)\n    \n    # Identify outliers: scores > epsilon\n    outlier_indices = [i for i, score in enumerate(LOF_scores) if score > epsilon]\n    outlier_indices.sort()\n    \n    return (LOF_scores.tolist(), outlier_indices)\n```"}
{"task_id": 573, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    # Initialize weights and bias\n    w = np.zeros(X_train.shape[1])\n    b = 0.0\n    error_history = []\n\n    for epoch in range(n_iter):\n        error_count = 0\n        for x_i, y_i in zip(X_train, y_train):\n            activation = np.dot(w, x_i) + b\n            if y_i * activation <= 0:\n                # Update weights and bias\n                w += eta * y_i * x_i\n                b += eta * y_i\n                error_count += 1\n        error_history.append(error_count)\n        # Check for convergence\n        if error_count == 0:\n            break\n\n    # Round weights and bias to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded, error_history\n```"}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    total_train_points = m * n_train\n    total_val_points = m * n_val\n    \n    X_train = np.empty((total_train_points, 2))\n    y_train = np.empty(total_train_points, dtype=int)\n    X_val = np.empty((total_val_points, 2))\n    y_val = np.empty(total_val_points, dtype=int)\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        train_x = np.random.uniform(base + 1, base + 9, n_train)\n        train_y = np.random.uniform(base + 1, base + 9, n_train)\n        # Generate validation points\n        val_x = np.random.uniform(base + 1, base + 9, n_val)\n        val_y = np.random.uniform(base + 1, base + 9, n_val)\n        \n        # Round to 4 decimal places\n        train_x = np.round(train_x, 4)\n        train_y = np.round(train_y, 4)\n        val_x = np.round(val_x, 4)\n        val_y = np.round(val_y, 4)\n        \n        # Store in arrays\n        start_train_idx = c * n_train\n        start_val_idx = c * n_val\n        \n        X_train[start_train_idx:start_train_idx + n_train, 0] = train_x\n        X_train[start_train_idx:start_train_idx + n_train, 1] = train_y\n        y_train[start_train_idx:start_train_idx + n_train] = c\n        \n        X_val[start_val_idx:start_val_idx + n_val, 0] = val_x\n        X_val[start_val_idx:start_val_idx + n_val, 1] = val_y\n        y_val[start_val_idx:start_val_idx + n_val] = c\n    \n    return X_train, X_val, y_train, y_val\n```"}
{"task_id": 577, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function creates four NumPy arrays:\n    - X_train: training features\n    - X_val: validation features\n    - y_train: training labels\n    - y_val: validation labels\n\n    according to the specified rules.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed for reproducibility.\n\n    Returns:\n        A tuple (X_train, X_val, y_train, y_val).\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n\n    for i in range(m):\n        # Determine class label\n        label = (i - 0.5) * 2\n\n        # Generate training samples\n        for _ in range(n_train):\n            # Sample x coordinate\n            x_lower = ((i // 2) + 0.1) * 10\n            x_upper = ((i // 2) + 0.9) * 10\n            x_sample = random.uniform(x_lower, x_upper)\n\n            # Sample y coordinate\n            y_lower = ((i % 2) * 0.5 + 0.1) * 10\n            y_upper = ((i % 2) * 0.5 + 0.9) * 10\n            y_sample = random.uniform(y_lower, y_upper)\n\n            # Round to 4 decimal places\n            x_sample = round(x_sample, 4)\n            y_sample = round(y_sample, 4)\n\n            X_train_list.append([x_sample, y_sample])\n            y_train_list.append(label)\n\n        # Generate validation samples\n        for _ in range(n_val):\n            # Sample x coordinate\n            x_lower = ((i // 2) + 0.1) * 10\n            x_upper = ((i // 2) + 0.9) * 10\n            x_sample = random.uniform(x_lower, x_upper)\n\n            # Sample y coordinate\n            y_lower = ((i % 2) * 0.5 + 0.1) * 10\n            y_upper = ((i % 2) * 0.5 + 0.9) * 10\n            y_sample = random.uniform(y_lower, y_upper)\n\n            # Round to 4 decimal places\n            x_sample = round(x_sample, 4)\n            y_sample = round(y_sample, 4)\n\n            X_val_list.append([x_sample, y_sample])\n            y_val_list.append(label)\n\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train_list)\n    y_train = np.array(y_train_list)\n    X_val = np.array(X_val_list)\n    y_val = np.array(y_val_list)\n\n    return X_train, X_val, y_train, y_val\n```"}
{"task_id": 578, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    # Check if the list has fewer than 2 elements\n    if len(corpus) < 2:\n        return []\n\n    # Generate pairs using list comprehension\n    return [(corpus[i], corpus[i + 1]) for i in range(len(corpus) - 1)]\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n\n    # 1. Initialization: take the first k points as initial centers\n    centres = X[:k].copy()\n\n    labels = [-1] * m\n    for iteration in range(max_iters):\n        # 2. Assignment step\n        new_labels = []\n        for point in X:\n            # Compute distances to each centre\n            distances = np.linalg.norm(centres - point, axis=1)\n            # Assign to the nearest centre, tie-breaker by smaller index\n            label = np.argmin(distances)\n            new_labels.append(label)\n\n        # Check if assignments have changed\n        if new_labels == labels:\n            break\n        labels = new_labels\n\n        # 3. Update step\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n\n        for idx, label in enumerate(labels):\n            new_centres[label] += X[idx]\n            counts[label] += 1\n\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                # Keep the centre unchanged if no points assigned\n                new_centres[i] = centres[i]\n\n        centres = new_centres\n\n    # Round centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n\n    return labels, centres\n```"}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Initialize parameters\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    # If learning rate or iterations is zero, return initial parameters\n    if learning_rate == 0 or iterations == 0:\n        weights = w.round(4).tolist()\n        bias = round(b, 4)\n        return (weights, bias)\n\n    for _ in range(iterations):\n        # Predictions\n        y_hat = X @ w + b\n        # Residuals\n        r = y - y_hat\n\n        # Gradient for bias\n        grad_b = -2 * np.sum(r) / m\n\n        # Gradients for weights\n        # sign(w_j), with sign(0) = -1\n        sign_w = np.where(w >= 0, 1, -1)\n\n        # Compute gradient for each weight\n        grad_w = (-2 * X.T @ r) / m + (l1_penalty * sign_w) / m + (2 * l2_penalty * w) / m\n\n        # Update parameters\n        w = w - learning_rate * grad_w\n        b = b - learning_rate * grad_b\n\n    # Round results\n    weights = w.round(4).tolist()\n    bias = round(b, 4)\n\n    return (weights, bias)\n```"}
{"task_id": 582, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X = np.array(X)\n    n = X.shape[0]\n    \n    # Handle the case when n=1\n    if n == 1:\n        return [[0]]\n    \n    # Determine k\n    k = min(int(np.floor(np.sqrt(n))), 10)\n    \n    # Compute the pairwise Euclidean distances\n    # Efficient way: use broadcasting or scipy, but here we'll do with numpy\n    # Distance matrix: shape (n, n)\n    diff = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    dist_matrix = np.linalg.norm(diff, axis=2)\n    \n    # Initialize directed adjacency matrix\n    directed_W = np.zeros((n, n), dtype=int)\n    \n    for i in range(n):\n        # Exclude the point itself by setting its distance to infinity\n        dist_matrix[i, i] = np.inf\n        # Get indices of the k closest points\n        neighbors_idx = np.argsort(dist_matrix[i])[:k]\n        # Set edges i -> j\n        directed_W[i, neighbors_idx] = 1\n    \n    # Convert directed to undirected\n    # An edge exists if either i->j or j->i\n    W = np.maximum(directed_W, directed_W.T)\n    \n    # Convert to list of lists with integers\n    W_list = W.tolist()\n    return W_list\n```"}
{"task_id": 584, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    # Convert the input list of lists into a NumPy array\n    frame = np.array(state)\n    # Stack the frame four times along a new last axis\n    stacked = np.stack([frame] * 4, axis=-1)\n    # Convert back to list of lists of lists\n    return stacked.tolist()\n```"}
{"task_id": 585, "completion_id": 0, "completion": "```python\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a > b:\n        return 1\n    elif a == b:\n        return 0\n    else:\n        return -1\n```"}
{"task_id": 586, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    # Validation\n    if len(x) != len(y):\n        raise ValueError(\"Input arrays x and y must have the same length.\")\n    if len(x) < 2:\n        raise ValueError(\"Input arrays must have at least two points.\")\n    if not (2 <= window <= len(x)):\n        raise ValueError(\"Window size must be at least 2 and at most the length of x.\")\n    \n    # 1. Normalize x and y to [0,1]\n    x_min, x_max = np.min(x), np.max(x)\n    y_min, y_max = np.min(y), np.max(y)\n    \n    # Handle the case where all x or y are the same (avoid division by zero)\n    if x_max == x_min:\n        norm_x = np.zeros_like(x)\n        norm_x_query = 0.0\n    else:\n        norm_x = (x - x_min) / (x_max - x_min)\n        norm_x_query = (x_query - x_min) / (x_max - x_min)\n    \n    if y_max == y_min:\n        norm_y = np.zeros_like(y)\n    else:\n        norm_y = (y - y_min) / (y_max - y_min)\n    \n    # 2. Find the window nearest neighbours to x_query\n    distances = np.abs(norm_x - norm_x_query)\n    # Get indices of the sorted distances\n    nearest_indices = np.argsort(distances)[:window]\n    # Extract the selected points\n    x_neigh = norm_x[nearest_indices]\n    y_neigh = norm_y[nearest_indices]\n    d = distances[nearest_indices]\n    \n    # 3. Compute tricubic weights\n    d_max = np.max(d)\n    # To avoid division by zero if all selected points are at the same position\n    if d_max == 0:\n        weights = np.ones_like(d)\n    else:\n        u = d / d_max\n        # Apply the tricubic weight function\n        weights = np.where(\n            u <= 1,\n            (1 - u**3)**3,\n            0\n        )\n    \n    # 4. Fit weighted straight line y = a + b*x\n    # Compute weighted means\n    sum_w = np.sum(weights)\n    weighted_x_mean = np.sum(weights * x_neigh) / sum_w\n    weighted_y_mean = np.sum(weights * y_neigh) / sum_w\n    \n    # Compute numerator and denominator for slope\n    numerator = np.sum(weights * (x_neigh - weighted_x_mean) * (y_neigh - weighted_y_mean))\n    denominator = np.sum(weights * (x_neigh - weighted_x_mean)**2)\n    \n    # Handle the case where denominator is zero\n    if denominator == 0:\n        # All selected points share the same x or weights are zero\n        # Return the weighted mean of y\n        y_pred_norm = weighted_y_mean\n    else:\n        b = numerator / denominator\n        a = weighted_y_mean - b * weighted_x_mean\n        # 5. Predict at normalized x_query\n        y_pred_norm = a + b * norm_x_query\n    \n    # Convert back to original y scale\n    if y_max == y_min:\n        y_pred = y_min\n    else:\n        y_pred = y_pred_norm * (y_max - y_min) + y_min\n    \n    # 6. Round to 4 decimal places\n    return float(np.round(y_pred, 4))\n```"}
{"task_id": 587, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Any, List, Tuple\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    # Initialize the buffer\n    buffer = []\n    # List to store outputs of commands that produce a result\n    results = []\n\n    # Set seed once for deterministic behavior\n    random.seed(0)\n\n    for op in operations:\n        command = op[0]\n\n        if command == 'append':\n            # Append transition to buffer\n            transition = op[1]\n            buffer.append(transition)\n\n        elif command == 'pop':\n            # Remove and return the most recent transition\n            if buffer:\n                results.append(buffer.pop())\n            else:\n                results.append(None)\n\n        elif command == 'sample':\n            batch_size = op[1]\n            # Sample without replacement if enough elements\n            if batch_size > len(buffer):\n                results.append([])\n            else:\n                results.append(random.sample(buffer, batch_size))\n\n        elif command == 'size':\n            results.append(len(buffer))\n\n    return results\n```"}
{"task_id": 588, "completion_id": 0, "completion": "```python\nfrom typing import Optional\n\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    left_depth = tree_max_depth(root.left)\n    right_depth = tree_max_depth(root.right)\n    return max(left_depth, right_depth) + 1\n```"}
{"task_id": 590, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags: list[list[bool]]) -> tuple[list[tuple[int, int]],\n                                                    list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    rows = len(ground)\n    cols = len(ground[0]) if rows > 0 else 0\n\n    # Helper to get neighbors within bounds\n    def neighbors(r, c):\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                nr, nc = r + dr, c + dc\n                if (dr != 0 or dc != 0) and 0 <= nr < rows and 0 <= nc < cols:\n                    yield nr, nc\n\n    clicks = set()\n    new_flags = set()\n\n    for r in range(rows):\n        for c in range(cols):\n            value = ground[r][c]\n            # Process only revealed squares (not np.nan)\n            if not np.isnan(value):\n                # Skip if already flagged\n                if flags[r][c]:\n                    continue\n\n                neighbor_coords = list(neighbors(r, c))\n                # Count flagged neighbors\n                flagged_neighbors = sum(flags[nr][nc] for nr, nc in neighbor_coords)\n                # Count hidden and unflagged neighbors\n                hidden_unflagged_neighbors = [\n                    (nr, nc) for nr, nc in neighbor_coords\n                    if np.isnan(ground[nr][nc]) and not flags[nr][nc]\n                ]\n                unexplored_count = len(hidden_unflagged_neighbors)\n\n                # Apply rules based on the value\n                if value == 0:\n                    # All hidden, unflagged neighbors can be safely revealed\n                    for nr, nc in hidden_unflagged_neighbors:\n                        clicks.add((nr, nc))\n                elif value == 8:\n                    # All hidden, unflagged neighbors are bombs\n                    for nr, nc in hidden_unflagged_neighbors:\n                        new_flags.add((nr, nc))\n                else:\n                    # For values 1-7\n                    if flagged_neighbors == value:\n                        # All unexplored neighbors are safe to reveal\n                        for nr, nc in hidden_unflagged_neighbors:\n                            clicks.add((nr, nc))\n                    elif unexplored_count == value:\n                        # All unexplored neighbors are bombs\n                        for nr, nc in hidden_unflagged_neighbors:\n                            new_flags.add((nr, nc))\n\n    # Return sorted lists of unique tuples\n    return sorted(clicks), sorted(new_flags)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input vector to numpy array\n    current_input = np.array(x, dtype=float)\n\n    # Iterate through all layers except the last\n    for layer_idx in range(len(weights) - 1):\n        layer_weights = weights[layer_idx]\n        # Prepare weight matrix for current layer\n        # Each neuron: first weight is bias, remaining are input weights\n        # We will construct a matrix of shape (num_neurons, input_dim + 1)\n        weight_matrix = []\n        for neuron_weights in layer_weights:\n            weight_matrix.append(neuron_weights)\n        weight_matrix = np.array(weight_matrix, dtype=float)\n\n        # Add bias input '1' to current input\n        input_with_bias = np.concatenate(([1.0], current_input))\n        # Compute neuron pre-activations\n        pre_activations = weight_matrix @ input_with_bias\n        # Apply ReLU\n        current_input = np.maximum(pre_activations, 0)\n\n    # Process last layer (linear)\n    last_layer_weights = weights[-1]\n    weight_matrix = np.array(last_layer_weights, dtype=float)\n    input_with_bias = np.concatenate(([1.0], current_input))\n    output = weight_matrix @ input_with_bias\n\n    # Round the output(s) to 4 decimal places\n    if weight_matrix.shape[0] == 1:\n        # Single output neuron\n        return round(float(output), 4)\n    else:\n        # Multiple output neurons\n        return [round(float(val), 4) for val in output]\n```"}
{"task_id": 592, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    n_rows, n_cols = clicked.shape\n\n    # Generate all possible neighbor offsets (8 directions)\n    neighbor_offsets = [(-1, -1), (-1, 0), (-1, 1),\n                        (0, -1),           (0, 1),\n                        (1, -1),  (1, 0),  (1, 1)]\n\n    unopened_neighbors = []\n    flagged_count = 0\n\n    for dr, dc in neighbor_offsets:\n        nr, nc = row + dr, col + dc\n        # Check if neighbor is within bounds\n        if 0 <= nr < n_rows and 0 <= nc < n_cols:\n            # Count flagged neighbors\n            if flags[nr, nc]:\n                flagged_count += 1\n            # Collect unopened neighbors\n            if not clicked[nr, nc]:\n                unopened_neighbors.append((nr, nc))\n\n    # Sort the list lex order: first by row, then by column\n    unopened_neighbors.sort(key=lambda x: (x[0], x[1]))\n\n    return unopened_neighbors, flagged_count\n```"}
{"task_id": 593, "completion_id": 0, "completion": "```python\nfrom copy import deepcopy\n\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function must apply the logical rules described in the task statement\n    (solved constraints, propagation, subset rule, duplicate removal) until no\n    new information can be obtained.\n\n    The result is a tuple (safe, mines) of two **alphabetically sorted** lists.\n    The first element contains all variables that are certainly safe, the second\n    one all variables that are certainly mines.  If nothing can be deduced an\n    empty list must be returned instead.\n    \"\"\"\n    # Make a deep copy to avoid mutating input\n    constraints = deepcopy(constraints)\n\n    # Initialize sets for known safe and mine variables\n    safe_vars = set()\n    mine_vars = set()\n\n    # Helper function to flatten constraints and remove duplicates\n    def clean_constraints(constraints):\n        # Remove duplicate constraints (same variables and value)\n        unique = {}\n        for vars_set, val in constraints:\n            key = (frozenset(vars_set), val)\n            unique[key] = (vars_set, val)\n        return list(unique.values())\n\n    # Repeat until no changes\n    changed = True\n    while changed:\n        changed = False\n\n        # Step 1: Solved constraints\n        new_constraints = []\n        for vars_list, val in constraints:\n            # Remove known safe variables\n            vars_list = [v for v in vars_list if v not in safe_vars]\n            # Remove known mine variables and adjust val\n            mines_in_vars = [v for v in vars_list if v in mine_vars]\n            if mines_in_vars:\n                val -= len(mines_in_vars)\n                vars_list = [v for v in vars_list if v not in mine_vars]\n            # Check for solved constraints\n            if val == 0:\n                # All variables in vars_list are safe\n                for v in vars_list:\n                    if v not in safe_vars:\n                        safe_vars.add(v)\n                        changed = True\n                # Constraint is fully satisfied, skip adding\n            elif val == len(vars_list):\n                # All variables in vars_list are mines\n                for v in vars_list:\n                    if v not in mine_vars:\n                        mine_vars.add(v)\n                        changed = True\n                # Constraint is fully satisfied, skip adding\n            else:\n                # Not fully solved, keep constraint\n                if vars_list:\n                    new_constraints.append([vars_list, val])\n        constraints = clean_constraints(new_constraints)\n\n        # Step 2: Propagation of knowledge\n        # Already handled in step 1 by removing known safe/mine variables\n        # but we can do an explicit pass to ensure consistency\n        # (No additional code needed here since handled above)\n\n        # Step 3: Subset rule\n        # For each pair of constraints, check subset relation\n        new_constraints = constraints[:]\n        for i in range(len(constraints)):\n            for j in range(len(constraints)):\n                if i == j:\n                    continue\n                s1, v1 = constraints[i]\n                s2, v2 = constraints[j]\n                set1 = set(s1)\n                set2 = set(s2)\n                if set1 < set2:\n                    # s1 is subset of s2\n                    diff_vars = list(set2 - set1)\n                    new_v = v2 - v1\n                    # Create new constraint\n                    new_constraint = [diff_vars, new_v]\n                    # Check if this constraint already exists\n                    # To avoid duplicates, we will handle duplicate removal later\n                    new_constraints.append(new_constraint)\n        constraints = clean_constraints(new_constraints)\n\n        # Step 4: Remove duplicate constraints\n        # Already handled in clean_constraints\n\n    # Prepare final lists\n    safe_list = sorted([v for v in safe_vars])\n    mine_list = sorted([v for v in mine_vars])\n\n    return (safe_list, mine_list)\n```"}
{"task_id": 594, "completion_id": 0, "completion": "```python\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    rows = len(maze)\n    if rows == 0:\n        return {}\n    cols = len(maze[0])\n    graph = {}\n\n    # Directions for orthogonal neighbors: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 0:\n                node = (r, c)\n                neighbors = []\n\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    # Check bounds and if neighbor is open\n                    if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] == 0:\n                        neighbors.append((nr, nc))\n                # Sort neighbors lexicographically for deterministic output\n                neighbors.sort()\n                graph[node] = neighbors\n\n    return graph\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    n_samples, n_features = X.shape\n    \n    # Initialize centroids with the first k samples\n    centroids = X[:k].astype(float)\n    \n    for _ in range(max_iters):\n        # Step 1: Assign samples to nearest centroid\n        # Compute squared Euclidean distances\n        # Efficient broadcasting: (n_samples, 1, n_features) - (1, k, n_features)\n        # Result: (n_samples, k)\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        # Assign each sample to the closest centroid\n        labels = np.argmin(distances, axis=1)\n        \n        # Store old centroids for convergence check\n        old_centroids = centroids.copy()\n        \n        # Step 2: Update centroids\n        for i in range(k):\n            # Get all samples assigned to cluster i\n            cluster_points = X[labels == i]\n            if len(cluster_points) > 0:\n                # Update centroid to mean of assigned points\n                centroids[i] = np.mean(cluster_points, axis=0)\n            # If cluster is empty, keep centroid unchanged\n        \n        # Check for convergence: if all centroids move less than 1e-4\n        shifts = np.linalg.norm(centroids - old_centroids, axis=1)\n        if np.all(shifts < 1e-4):\n            break\n    \n    # Sort centroids lex order\n    sorted_centroids = sorted(centroids.tolist())\n    \n    # Round each coordinate to 4 decimal places\n    rounded_centroids = [\n        [round(coord, 4) for coord in centroid]\n        for centroid in sorted_centroids\n    ]\n    \n    return rounded_centroids\n```"}
{"task_id": 596, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    adjacency = {}\n    rows, cols = maze.shape\n\n    # Directions for neighbors: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r, c] == 1:\n                neighbors = []\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    # Check bounds and if neighbor is free\n                    if 0 <= nr < rows and 0 <= nc < cols and maze[nr, nc] == 1:\n                        neighbors.append((nr, nc))\n                # Sort neighbors lexicographically\n                neighbors.sort()\n                adjacency[(r, c)] = neighbors\n\n    return adjacency\n```"}
{"task_id": 597, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    # Convert inputs to numpy arrays for easier processing\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Function to compute population variance\n    def variance(values):\n        if len(values) == 0:\n            return 0.0\n        mean_val = np.mean(values)\n        return np.mean((values - mean_val) ** 2)\n\n    # Initialize variables to track the best split\n    best_feature = None\n    best_threshold = None\n    best_mse = float('inf')\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        # Get unique sorted feature values to consider as thresholds\n        thresholds = np.unique(feature_values)\n        for t in thresholds:\n            # Split data into left and right based on threshold t\n            left_mask = feature_values <= t\n            right_mask = feature_values > t\n\n            # Ensure both sides are non-empty\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n\n            # Compute variances\n            var_left = variance(y_left)\n            var_right = variance(y_right)\n\n            # Compute weighted MSE\n            mse = (len(y_left) / n_samples) * var_left + (len(y_right) / n_samples) * var_right\n\n            # Update best split if this is better\n            if mse < best_mse:\n                best_mse = mse\n                best_feature = feature_idx\n                best_threshold = t\n            # If tie, choose the one with smaller feature index (already handled by update condition)\n            # If same feature, smaller threshold (not necessary here because we iterate thresholds in sorted order)\n\n    # Round the best MSE to 4 decimal places\n    best_mse = round(best_mse, 4)\n\n    return [best_feature, best_threshold, best_mse]\n```"}
{"task_id": 598, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    # Convert input data to numpy array for easier computation\n    arr = np.array(data, dtype=float)\n    \n    # Compute mean and standard deviation (population std, ddof=0) for each feature (column)\n    means = np.mean(arr, axis=0)\n    stds = np.std(arr, axis=0, ddof=0)\n    \n    # To avoid division by zero, set stds that are zero to 1 temporarily\n    # We'll handle constant features separately\n    stds_safe = np.where(stds == 0, 1, stds)\n    \n    # Standardize: (x - mean) / std\n    standardized = (arr - means) / stds_safe\n    \n    # For features with std == 0, set all values to 0\n    # Create a mask for constant features\n    constant_mask = (stds == 0)\n    # Expand mask to match shape for broadcasting\n    for idx, is_constant in enumerate(constant_mask):\n        if is_constant:\n            standardized[:, idx] = 0.0\n    \n    # Replace NaN and inf with 0\n    standardized = np.nan_to_num(standardized, nan=0.0, posinf=0.0, neginf=0.0)\n    \n    # Round to 4 decimal places\n    standardized = np.round(standardized, 4)\n    \n    # Convert back to list of lists\n    return standardized.tolist()\n```"}
