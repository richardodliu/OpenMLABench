{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((row[i] * b[i] for i in range(len(row))))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n\n    Args:\n        a: A 2D list representing the matrix.\n\n    Returns:\n        The transposed matrix as a 2D list.\n    \"\"\"\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    if arr.size != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_arr = arr.reshape(new_shape).tolist()\n    return reshaped_arr"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n\n    Parameters:\n    - matrix (list[list[float]]): A 2D list representing the matrix.\n    - mode (str): 'row' to compute means for each row, 'column' to compute means for each column.\n\n    Returns:\n    - list[float]: A list of means according to the specified mode.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_cols = len(matrix[0])\n        means = []\n        for col in range(num_cols):\n            col_sum = sum((matrix[row][col] for row in range(len(matrix))))\n            means.append(col_sum / len(matrix))\n        return means\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the result.\n\n    Args:\n        matrix: A 2D list representing the matrix.\n        scalar: A number (int or float) to multiply with the matrix.\n\n    Returns:\n        A new 2D list representing the resulting matrix after scalar multiplication.\n    \"\"\"\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix.\n    \n    Args:\n        matrix: A 2x2 matrix represented as a list of lists.\n        \n    Returns:\n        A list containing the two eigenvalues, sorted from highest to lowest.\n    \"\"\"\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = discriminant ** 0.5\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A, dtype=np.float64)\n    T_np = np.array(T, dtype=np.float64)\n    S_np = np.array(S, dtype=np.float64)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    det_T = np.linalg.det(T_np)\n    det_S = np.linalg.det(S_np)\n    if abs(det_T) < 1e-10 or abs(det_S) < 1e-10:\n        return -1\n    try:\n        T_inv = np.linalg.inv(T_np)\n        result = T_inv @ A_np @ S_np\n        result_rounded = np.round(result, 4)\n        return result_rounded.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]] | None:\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        return None\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    rows_a = len(a)\n    cols_a = len(a[0]) if rows_a > 0 else 0\n    rows_b = len(b)\n    cols_b = len(b[0]) if rows_b > 0 else 0\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Args:\n        vectors: A list of lists, where each inner list represents a feature with its observations.\n        \n    Returns:\n        A covariance matrix as a list of lists.\n    \"\"\"\n    n = len(vectors[0])\n    m = len(vectors)\n    means = [sum(feature) / n for feature in vectors]\n    cov_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                xi = vectors[i][k] - means[i]\n                yj = vectors[j][k] - means[j]\n                covariance += xi * yj\n            cov_matrix[i][j] = covariance / (n - 1)\n    return cov_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system Ax = b using the Jacobi method for n iterations.\n    \n    Parameters:\n        A (np.ndarray): Coefficient matrix (must be square).\n        b (np.ndarray): Constant terms vector.\n        n (int): Number of iterations.\n        \n    Returns:\n        list: Approximate solution x after n iterations, rounded to 4 decimal places.\n    \"\"\"\n    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:\n        raise ValueError('Matrix A must be square and have the same number of rows as vector b.')\n    x = np.zeros_like(b, dtype=np.float64)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            sum_val = np.dot(A[i, :], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - sum_val) / A[i, i]\n        x = np.round(x_new, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobi method.\n    \n    Parameters:\n        A (np.ndarray): A 2x2 matrix.\n        \n    Returns:\n        tuple: A tuple containing the two singular values, rounded to 4 decimal places.\n    \"\"\"\n    if A.shape != (2, 2):\n        raise ValueError('Input must be a 2x2 matrix.')\n    B = np.vstack((A, A.T))\n\n    def power_iteration(matrix, num_iterations=1000, tolerance=1e-06):\n        n = matrix.shape[1]\n        x = np.random.rand(n)\n        for _ in range(num_iterations):\n            y = matrix @ x\n            norm_y = np.linalg.norm(y)\n            x = y / norm_y\n            if norm_y < tolerance:\n                break\n        return norm_y\n    B_T_B = B.T @ B\n    sigma_1_squared = power_iteration(B_T_B)\n    trace_B_T_B = np.trace(B_T_B)\n    det_B_T_B = np.linalg.det(B_T_B)\n    sigma_1 = np.sqrt(sigma_1_squared)\n    sigma_2 = np.sqrt(trace_B_T_B - sigma_1_squared)\n    return (round(sigma_1, 4), round(sigma_2, 4))"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n\n    def determinant(mat: list[list[int | float]]) -> float:\n        if len(mat) == 1:\n            return mat[0][0]\n        if len(mat) == 2:\n            return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]\n        det = 0.0\n        for col in range(len(mat)):\n            sign = 1 if col % 2 == 0 else -1\n            minor = [[mat[row][c] for c in range(len(mat)) if c != col] for row in range(1, len(mat))]\n            det += sign * mat[0][col] * determinant(minor)\n        return det\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Input must be a 4x4 matrix')\n    return determinant(matrix)"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_np = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n    try:\n        theta = np.linalg.inv(X_np.T @ X_np) @ X_np.T @ y_np\n    except np.linalg.LinAlgError:\n        theta = np.linalg.pinv(X_np) @ y_np\n    return [round(coef, 4) for coef in theta.tolist()]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        error = predictions - y\n        gradient = X.T.dot(error) / len(y)\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_normalized = (data - min_vals) / (max_vals - min_vals)\n    standardized_list = standardized.round(4).tolist()\n    min_max_list = min_max_normalized.round(4).tolist()\n    return (standardized_list, min_max_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids)\n    if len(centroids) != k:\n        raise ValueError('The number of initial centroids must be equal to k.')\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points_array[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Perform K-Fold Cross-Validation by splitting the dataset into k folds.\n    \n    Parameters:\n        X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n        y (np.ndarray): Target vector of shape (n_samples,)\n        k (int): Number of folds\n        shuffle (bool): Whether to shuffle the data before splitting\n        random_seed (int): Random seed for reproducibility\n    \n    Returns:\n        list: A list of tuples, where each tuple contains (train_indices, test_indices)\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    combined = np.column_stack((X, y))\n    if shuffle:\n        np.random.shuffle(combined)\n    fold_size = len(combined) // k\n    folds = [combined[i * fold_size:(i + 1) * fold_size] for i in range(k)]\n    result = []\n    for i in range(k):\n        test_indices = folds[i][:, -1]\n        test_indices = np.where(np.isin(y, test_indices))[0]\n        train_data = np.vstack(folds[:i] + folds[i + 1:])\n        train_indices = train_data[:, -1]\n        train_indices = np.where(np.isin(y, train_indices))[0]\n        result.append((train_indices, test_indices))\n    return result"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data_standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(data_standardized, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    rounded_principal_components = [list(row.round(4)) for row in principal_components]\n    return rounded_principal_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learn a decision tree from a list of examples, using recursive binary splitting\n    based on entropy and information gain.\n    \n    Parameters:\n        examples (list[dict]): List of examples, each being a dictionary of attribute-value pairs.\n        attributes (list[str]): List of attribute names to consider for splitting.\n        target_attr (str): The name of the target attribute (class label).\n        \n    Returns:\n        dict: A nested dictionary representing the decision tree.\n    \"\"\"\n    if len(set((example[target_attr] for example in examples))) == 1:\n        return {target_attr: examples[0][target_attr]}\n    if not attributes:\n        counter = Counter((example[target_attr] for example in examples))\n        return {target_attr: counter.most_common(1)[0][0]}\n    (best_attr, best_gain) = select_best_attribute(examples, attributes, target_attr)\n    if best_gain == 0:\n        counter = Counter((example[target_attr] for example in examples))\n        return {target_attr: counter.most_common(1)[0][0]}\n    tree = {best_attr: {}}\n    attr_values = set((example[best_attr] for example in examples))\n    for value in attr_values:\n        subset = [example for example in examples if example[best_attr] == value]\n        remaining_attributes = [attr for attr in attributes if attr != best_attr]\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"\n    Calculate the entropy of the given examples with respect to the target attribute.\n    \"\"\"\n    counts = Counter((example[target_attr] for example in examples))\n    total = len(examples)\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return entropy\ndef information_gain(examples: list[dict], attr: str, target_attr: str) -> float:\n    \"\"\"\n    Calculate the information gain of splitting on the given attribute.\n    \"\"\"\n    total_entropy = entropy(examples, target_attr)\n    attr_values = set((example[attr] for example in examples))\n    weighted_entropy = 0.0\n    for value in attr_values:\n        subset = [example for example in examples if example[attr] == value]\n        prob = len(subset) / len(examples)\n        weighted_entropy += prob * entropy(subset, target_attr)\n    return total_entropy - weighted_entropy\ndef select_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> tuple[str, float]:\n    \"\"\"\n    Select the attribute with the highest information gain.\n    \"\"\"\n    best_gain = -1.0\n    best_attr = None\n    for attr in attributes:\n        gain = information_gain(examples, attr, target_attr)\n        if gain > best_gain:\n            best_gain = gain\n            best_attr = attr\n    return (best_attr, best_gain)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if kernel == 'linear':\n                K[i, j] = np.dot(data[i], data[j])\n            elif kernel == 'rbf':\n                diff = data[i] - data[j]\n                K[i, j] = np.exp(-np.linalg.norm(diff) ** 2 / (2 * sigma ** 2))\n            else:\n                raise ValueError(\"Unsupported kernel type. Use 'linear' or 'rbf'.\")\n    for t in range(1, iterations + 1):\n        eta_t = 1 / (lambda_val * t)\n        for idx in range(n_samples):\n            y_i = labels[idx]\n            sum_term = 0.0\n            for j in range(n_samples):\n                sum_term += alpha[j] * labels[j] * K[j, idx]\n            prediction = sum_term + b\n            if y_i * prediction < 1:\n                alpha[idx] += eta_t * y_i\n                b += eta_t\n    alpha_rounded = np.round(alpha, 4)\n    b_rounded = np.round(b, 4)\n    return [alpha_rounded.tolist(), b_rounded.tolist()]"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [exp / sum_exp for exp in exp_scores]\n    rounded_softmax = [round(value, 4) for value in softmax_values]\n    return rounded_softmax"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    X = np.array(features)\n    y = np.array(labels)\n    z = np.dot(X, weights) + bias\n    predicted_probabilities = 1 / (1 + np.exp(-z))\n    predicted_probabilities = np.round(predicted_probabilities, 4).tolist()\n    mse = np.mean((y - predicted_probabilities) ** 2)\n    mse = round(mse, 4)\n    return (predicted_probabilities, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    for epoch in range(epochs):\n        z = np.dot(features, weights) + bias\n        predictions = sigmoid(z)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_history.append(round(mse, 4))\n        error = predictions - labels\n        delta = error * sigmoid_derivative(predictions)\n        weights -= learning_rate * np.dot(features.T, delta)\n        bias -= learning_rate * np.sum(delta)\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    mse_history = [round(mse, 4) for mse in mse_history]\n    return (weights.tolist(), bias, mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = Value(other) if not isinstance(other, Value) else other\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += 1.0 * out.grad\n            other.grad += 1.0 * out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = Value(other) if not isinstance(other, Value) else other\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(self.data, 0), (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (self.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        visited = set()\n        topo = []\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    M_B = np.array(B)\n    M_C = np.array(C)\n    M_C_inv = np.linalg.inv(M_C)\n    P = M_C_inv @ M_B\n    return [list(map(round, row)) for row in np.round(P, 4).tolist()]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    if A.shape != (2, 2):\n        raise ValueError('Input must be a 2x2 matrix.')\n    A_T_A = A.T @ A\n    (eigenvalues, V) = np.linalg.eig(A_T_A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    V = V[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    A_A_T = A @ A.T\n    (eigenvalues_U, U) = np.linalg.eig(A_A_T)\n    idx_U = np.argsort(eigenvalues_U)[::-1]\n    eigenvalues_U = eigenvalues_U[idx_U]\n    U = U[:, idx_U]\n    for i in range(2):\n        if U[i, i] < 0:\n            U[:, i] *= -1\n        if V[i, i] < 0:\n            V[:, i] *= -1\n    U_rounded = np.round(U, 4)\n    S_rounded = np.round(S, 4)\n    V_rounded = np.round(V, 4)\n    U_list = U_rounded.tolist()\n    S_list = S_rounded.tolist()\n    V_list = V_rounded.tolist()\n    return (U_list, S_list, V_list)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles two NumPy arrays X and y in unison.\n\n    Parameters:\n    - X: numpy.ndarray, features of the dataset\n    - y: numpy.ndarray, labels of the dataset\n    - seed: int or None, optional seed for random number generator\n\n    Returns:\n    - Tuple of two Python lists: (X_shuffled, y_shuffled)\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    combined = np.column_stack((X, y))\n    np.random.shuffle(combined)\n    X_shuffled = combined[:, :X.shape[1]]\n    y_shuffled = combined[:, X.shape[1]:]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from the input arrays X and optionally y.\n    \n    Parameters:\n        X (np.ndarray): Input features.\n        y (np.ndarray, optional): Target labels. Defaults to None.\n        batch_size (int): Size of each batch. Defaults to 64.\n\n    Yields:\n        list: A batch of data. If y is provided, yields (X_batch, y_batch) as lists;\n              otherwise, yields X_batch as a list.\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size].tolist()\n        if y is not None:\n            y_batch = y[i:i + batch_size].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two subsets based on whether the value of a specified feature is greater than or equal to a given threshold.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - feature_i: index of the feature to use for splitting\n    - threshold: value to compare the feature against\n\n    Returns:\n    - left: list of samples where feature_i >= threshold\n    - right: list of samples where feature_i < threshold\n    \"\"\"\n    left = X[X[:, feature_i] >= threshold].tolist()\n    right = X[X[:, feature_i] < threshold].tolist()\n    return (left, right)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features up to the specified degree for a given dataset.\n\n    Parameters:\n    X (np.ndarray): A 2D numpy array of shape (n_samples, n_features).\n    degree (int): The maximum degree of polynomial features to generate.\n\n    Returns:\n    list: A Python list of the generated polynomial features.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    poly_features = []\n    for deg in range(1, degree + 1):\n        for indices in combinations_with_replacement(range(n_features), deg):\n            feature = np.prod(X[:, indices], axis=1)\n            poly_features.append(feature)\n    poly_array = np.column_stack(poly_features)\n    return poly_array.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of the given dataset.\n\n    Parameters:\n    - X (np.ndarray): A 2D numpy array representing the feature matrix.\n    - y (np.ndarray): A 1D numpy array representing the target labels.\n    - n_subsets (int): The number of random subsets to generate.\n    - replacements (bool): If True, allow sampling with replacement; otherwise, without replacement.\n    - seed (int): Random seed for reproducibility.\n\n    Returns:\n    - list: A list of tuples, where each tuple is (X_subset, y_subset), and each subset is a numpy array.\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        indices = np.random.choice(n_samples, size=n_samples, replace=replacements)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return [tuple(subset.tolist()) for subset in subsets]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((len(x), n_col), dtype=int)\n    one_hot[np.arange(len(x)), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    y_true (np.ndarray): 1D numpy array of true labels.\n    y_pred (np.ndarray): 1D numpy array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length.')\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        corr_matrix = np.corrcoef(X, rowvar=False)\n    else:\n        combined = np.hstack((X, Y))\n        corr_matrix = np.corrcoef(combined, rowvar=False)\n    return np.round(corr_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = -1\n        best_threshold = 0\n        best_sign = 1\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X = X[sorted_indices, feature]\n            sorted_y = y[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n            cum_weights = np.cumsum(sorted_weights)\n            for i in range(1, n_samples):\n                threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n                predictions = np.where(sorted_X < threshold, -1, 1)\n                errors = np.abs(predictions - sorted_y)\n                weighted_error = np.sum(errors * sorted_weights)\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_sign = 1 if np.sign(np.sum(sorted_weights * sorted_y)) == 1 else -1\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        predictions = np.where(X[:, best_feature] < best_threshold, -1, 1)\n        predictions *= best_sign\n        errors = np.abs(predictions - y)\n        weights *= np.exp(-alpha * y * predictions)\n        weights /= np.sum(weights)\n        classifiers.append({'feature': best_feature, 'threshold': round(best_threshold, 4), 'sign': best_sign, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores, dtype=np.float64)\n    max_score = np.max(scores_array)\n    scores_stable = scores_array - max_score\n    exp_scores = np.exp(scores_stable)\n    sum_exp = np.sum(exp_scores)\n    log_softmax_values = np.log(sum_exp) - scores_stable\n    result = np.round(log_softmax_values, 4).tolist()\n    return result"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be specified for weight initialization.')\n        input_dim = self.input_shape[0]\n        limit = 1.0 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, size=(input_dim, self.n_units))\n        self.w0 = np.zeros(shape=(self.n_units,))\n        self.optimizer_W = copy.deepcopy(optimizer)\n        self.optimizer_w0 = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return int(np.prod(self.W.shape) + np.prod(self.w0.shape))\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        Z = np.dot(X, self.W) + self.w0\n        return Z\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        grad_W = np.dot(self.layer_input.T, accum_grad)\n        grad_w0 = np.sum(accum_grad, axis=0)\n        if self.trainable:\n            self.W = self.optimizer_W.update(self.W, grad_W)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (batch_size, in_channels, in_height, in_width) = input_matrix.shape\n    (k_channels, out_channels, kernel_height, kernel_width) = kernel.shape\n    assert in_channels == k_channels, 'Number of input channels must match number of kernel channels.'\n    out_height = (in_height - kernel_height + 2 * padding) // stride + 1\n    out_width = (in_width - kernel_width + 2 * padding) // stride + 1\n    padded_input = np.pad(input_matrix, ((0, 0), (0, 0), (padding, padding), (padding, padding)), mode='constant')\n    output = np.zeros((batch_size, out_channels, out_height, out_width))\n    for b in range(batch_size):\n        for oc in range(out_channels):\n            for i in range(out_height):\n                for j in range(out_width):\n                    start_i = i * stride\n                    start_j = j * stride\n                    region = padded_input[b, :, start_i:start_i + kernel_height, start_j:start_j + kernel_width]\n                    output[b, oc, i, j] = np.sum(region * kernel[oc])\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0.0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Computes the Ridge Regression loss function.\n\n    Parameters:\n    X (np.ndarray): 2D feature matrix of shape (n_samples, n_features)\n    w (np.ndarray): 1D coefficient vector of shape (n_features,)\n    y_true (np.ndarray): 1D true labels vector of shape (n_samples,)\n    alpha (float): Regularization parameter\n\n    Returns:\n    float: Ridge loss rounded to the nearest 4th decimal\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    l2_penalty = alpha * np.sum(w ** 2)\n    total_loss = mse + l2_penalty\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky ReLU activation function.\n\n    Parameters:\n    z (float): Input value.\n    alpha (float, optional): Slope for negative values, defaults to 0.01.\n\n    Returns:\n    float: Output after applying Leaky ReLU.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel (dot product) between two input vectors.\n\n    Parameters:\n    x1 (np.ndarray): First input vector.\n    x2 (np.ndarray): Second input vector.\n\n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0.0\n    return tp / (tp + fp)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent with specified method: 'batch', 'stochastic', or 'mini_batch'.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: numpy array of shape (n_features,) or scalar\n    - learning_rate: float\n    - n_iterations: int\n    - batch_size: int (only used for 'stochastic' and 'mini_batch')\n    - method: str ('batch', 'stochastic', 'mini_batch')\n\n    Returns:\n    - weights: numpy array of updated weights after training\n    \"\"\"\n    weights = np.array(weights).flatten()\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    for _ in range(n_iterations):\n        if method == 'batch':\n            predictions = X @ weights\n            errors = predictions - y\n            gradient = 2 / n_samples * X.T @ errors\n            weights -= learning_rate * gradient\n        elif method == 'stochastic':\n            for i in range(n_samples):\n                prediction = X[i] @ weights\n                error = prediction - y[i]\n                gradient = 2 * X[i] * error\n                weights -= learning_rate * gradient\n        elif method == 'mini_batch':\n            for i in range(0, n_samples, batch_size):\n                batch_end = min(i + batch_size, n_samples)\n                X_batch = X[i:batch_end]\n                y_batch = y[i:batch_end]\n                predictions = X_batch @ weights\n                errors = predictions - y_batch\n                gradient = 2 / batch_size * X_batch.T @ errors\n                weights -= learning_rate * gradient\n        else:\n            raise ValueError(\"Method must be one of 'batch', 'stochastic', or 'mini_batch'.\")\n    return weights.round(4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists): A 2D list representing the matrix.\n    \n    Returns:\n    list: The RREF of the matrix in Python list format.\n    \"\"\"\n    mat = np.array(matrix, dtype=float)\n    (rows, cols) = mat.shape\n    pivot_cols = []\n    rank = 0\n    for col in range(cols):\n        pivot_row = None\n        for r in range(rank, rows):\n            if not np.isclose(mat[r, col], 0):\n                pivot_row = r\n                break\n        if pivot_row is None:\n            continue\n        mat[[rank, pivot_row]] = mat[[pivot_row, rank]]\n        pivot_val = mat[rank, col]\n        mat[rank] = mat[rank] / pivot_val\n        for r in range(rows):\n            if r != rank and (not np.isclose(mat[r, col], 0)):\n                factor = mat[r, col]\n                mat[r] = mat[r] - factor * mat[rank]\n        pivot_cols.append(col)\n        rank += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Perform Lasso Regression using Gradient Descent with L1 Regularization.\n\n    Parameters:\n        X (np.array): Input feature matrix of shape (n_samples, n_features)\n        y (np.array): Target vector of shape (n_samples,)\n        alpha (float): Regularization parameter\n        learning_rate (float): Learning rate for gradient descent\n        max_iter (int): Maximum number of iterations\n        tol (float): Tolerance for stopping criterion\n\n    Returns:\n        tuple: A tuple containing the optimized weights and bias, both rounded to 4 decimal places.\n    \"\"\"\n    y = y.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    w = np.zeros((n_features, 1))\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X @ w + b\n        errors = y_pred - y\n        grad_w = X.T @ errors / n_samples\n        grad_b = np.sum(errors) / n_samples\n        w_new = np.sign(w) * np.maximum(np.abs(w) - alpha * learning_rate, 0) - learning_rate * grad_w\n        b_new = b - learning_rate * grad_b\n        if np.linalg.norm(w_new - w) < tol and abs(b_new - b) < tol:\n            break\n        w = w_new\n        b = b_new\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4).tolist()\n    return (w_rounded, b_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i][0] = i\n    for j in range(len_target + 1):\n        dp[0][j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if source[i - 1] == target[j - 2] and source[i - 2] == target[j - 1]:\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[len_source][len_target]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = tp + fn\n    if denominator == 0:\n        return 0.0\n    recall_value = tp / denominator\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T)\n    attention_weights = np.exp(attention_scores - np.max(attention_scores, axis=1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h = np.array(initial_hidden_state)\n    for x in input_sequence:\n        x = np.array(x)\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + np.array(b))\n    final_hidden_state = np.round(h, 4).tolist()\n    return final_hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_array, np.ones((points_array.shape[0], 1))))\n    translated_points = homogeneous_points @ translation_matrix.T\n    return translated_points[:, :2].tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    - mu_p: Mean of distribution P\n    - sigma_p: Standard deviation of distribution P\n    - mu_q: Mean of distribution Q\n    - sigma_q: Standard deviation of distribution Q\n    \n    Returns:\n    - The KL divergence D_KL(P || Q) as a float\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    kl = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return float(kl)"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A)\n    b = np.array(b)\n    size = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(size)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(size):\n            sum_term = 0\n            for j in range(size):\n                if j != i:\n                    sum_term += A[i, j] * x[j]\n            x[i] = (b[i] - sum_term) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    aug = np.hstack((A, b.reshape(n, 1)))\n    for i in range(n):\n        max_row = i\n        for j in range(i, n):\n            if abs(aug[j, i]) > abs(aug[max_row, i]):\n                max_row = j\n        aug[[i, max_row]] = aug[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = aug[j, i] / aug[i, i]\n            aug[j, i:] -= factor * aug[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = aug[i, n] / aug[i, i]\n        for j in range(i + 1, n):\n            x[i] -= aug[i, j] / aug[i, i] * x[j]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        (T, _) = x.shape\n        hidden_states = []\n        h = initial_hidden_state\n        c = initial_cell_state\n        for t in range(T):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((x_t, h))\n            f = sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i = sigmoid(np.dot(self.Wi, combined) + self.bi)\n            g = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o = sigmoid(np.dot(self.Wo, combined) + self.bo)\n            c = f * c + i * g\n            h = o * np.tanh(c)\n            hidden_states.append(h)\n        hidden_states = [np.round(h, 4).tolist() for h in hidden_states]\n        final_hidden_state = np.round(h, 4).tolist()\n        final_cell_state = np.round(c, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Computes TF-IDF scores for each word in the query across all documents in the corpus.\n\n    Parameters:\n    - corpus: A list of documents, where each document is a list of words.\n    - query: A list of words for which you want to compute the TF-IDF scores.\n\n    Returns:\n    - A list of lists containing the TF-IDF scores for the query words in each document,\n      rounded to five decimal places.\n    \"\"\"\n    if not corpus:\n        return []\n    tf_scores = []\n    for doc in corpus:\n        word_counts = {}\n        total_words = len(doc)\n        for word in doc:\n            word_counts[word] = word_counts.get(word, 0) + 1\n        tf_doc = {word: count / total_words for (word, count) in word_counts.items()}\n        tf_scores.append(tf_doc)\n    doc_count = len(corpus)\n    idf_scores = {}\n    for word in set(query):\n        doc_freq = 0\n        for doc in corpus:\n            if word in doc:\n                doc_freq += 1\n        idf = np.log((doc_count + 1) / (doc_freq + 1))\n        idf_scores[word] = idf\n    result = []\n    for tf_doc in tf_scores:\n        doc_tfidf = []\n        for word in query:\n            tf = tf_doc.get(word, 0.0)\n            idf = idf_scores.get(word, 0.0)\n            tf_idf = tf * idf\n            doc_tfidf.append(round(tf_idf, 4))\n        result.append(doc_tfidf)\n    return result"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels (binary)\n    :param y_pred: Numpy array of predicted labels (binary)\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    if tp == 0:\n        return 0.0\n    precision = tp / (tp + fp)\n    recall = tp / (tp + fn)\n    fscore = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall)\n    return round(fscore, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns:\n            outputs: Output at each time step\n            last_inputs: Inputs at each time step\n            last_hiddens: Hidden states at each time step\n        \"\"\"\n        (T, D) = x.shape\n        H = self.hidden_size\n        O = self.output_size\n        h = np.zeros((H, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for t in range(T):\n            x_t = x[t].reshape(-1, 1)\n            last_inputs.append(x_t)\n            h = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h) + self.b_h)\n            last_hiddens.append(h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n        return (np.array(outputs), np.array(last_inputs), np.array(last_hiddens))\n\n    def initialize_weights(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns the output, the last inputs and the hidden states.\n        \"\"\"\n        (T, D) = input_sequence.shape\n        H = hidden_size\n        O = W_hy.shape[0]\n        h = np.zeros((H, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for t in range(T):\n            x_t = input_sequence[t].reshape(-1, 1)\n            last_inputs.append(x_t)\n            h = np.tanh(np.dot(W_xh, x_t) + np.dot(W_hh, h) + b_h)\n            last_hiddens.append(h)\n            y = np.dot(W_hy, h) + b_y\n            outputs.append(y)\n        return (np.array(outputs), np.array(last_inputs), np.array(last_hiddens))\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        (T, D) = input_sequence.shape\n        H = hidden_size\n        O = W_hy.shape[0]\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        delta_h = np.zeros((H, 1))\n        for t in reversed(range(T)):\n            y = outputs[t]\n            dy = y - expected_output[t].reshape(-1, 1)\n            delta_y = dy\n            db_y += delta_y\n            dW_hy += np.dot(delta_y, last_hiddens[t].T)\n            delta_h = np.dot(W_hy.T, delta_y) + delta_h\n            tanh = last_hiddens[t]\n            dtanh = 1 - tanh ** 2\n            delta_h *= dtanh\n            x_t = last_inputs[t]\n            db_h += delta_h\n            dW_xh += np.dot(delta_h, x_t.T)\n            dW_hh += np.dot(delta_h, last_hiddens[t - 1].T) if t > 0 else np.zeros_like(dW_hh)\n        W_xh -= learning_rate * dW_xh\n        W_hh -= learning_rate * dW_hh\n        W_hy -= learning_rate * dW_hy\n        b_h -= learning_rate * db_h\n        b_y -= learning_rate * db_y\n        return (W_xh, W_hh, W_hy, b_h, b_y)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - A @ x\n    p = r.copy()\n    r_norm = np.linalg.norm(r)\n    if r_norm < tol:\n        return np.round(x, 8).tolist()\n    for _ in range(n):\n        Ap = A @ p\n        alpha = r_norm ** 2 / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        r_new_norm = np.linalg.norm(r)\n        if r_new_norm < tol:\n            break\n        beta = r_new_norm ** 2 / r_norm ** 2\n        p = r + beta * p\n        r_norm = r_new_norm\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    n_samples = len(y)\n    if n_samples == 0:\n        return 0.0\n    class_counts = np.bincount(y)\n    probabilities = class_counts / n_samples\n    gini = 1.0 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        non_zero_count = 0\n        for (col_idx, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_idx)\n                non_zero_count += 1\n        row_pointer.append(row_pointer[-1] + non_zero_count)\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected (list of floats)\n    :param L: The line vector defining the direction of projection (list of floats)\n    :return: List representing the projection of v onto L, rounded to three decimal places\n    \"\"\"\n    dot_v_L = sum((v_i * l_i for (v_i, l_i) in zip(v, L)))\n    dot_L_L = sum((l_i * l_i for l_i in L))\n    if dot_L_L == 0:\n        return [0.0] * len(v)\n    scalar = dot_v_L / dot_L_L\n    projection = [scalar * l_i for l_i in L]\n    return [round(component, 3) for component in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_pointer = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            value = dense_matrix[row][col]\n            if value != 0:\n                values.append(value)\n                row_indices.append(row)\n        col_pointer.append(len(values))\n    return (values, row_indices, col_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space (image) of a matrix A.\n    \n    Parameters:\n    A (np.ndarray): Input matrix (2D NumPy array).\n    \n    Returns:\n    list: A list of basis vectors (as lists) that span the column space of A.\n    \"\"\"\n    A = np.array(A, dtype=np.float64)\n    rank = np.linalg.matrix_rank(A)\n    (Q, R) = np.linalg.qr(A)\n    pivot_cols = np.where(np.abs(R.diagonal()) > 1e-08)[0]\n    basis = A[:, pivot_cols]\n    return basis.round(8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_true = np.mean(y_true)\n    sst = np.sum((y_true - mean_true) ** 2)\n    ssr = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ssr / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_brightness = sum((sum(row) for row in img))\n    total_pixels = row_length * len(img)\n    return round(total_brightness / total_pixels, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not (isinstance(y_true, (list, np.ndarray)) and isinstance(y_pred, (list, np.ndarray))):\n        raise ValueError('Input must be either a list or a numpy array.')\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must have the same length.')\n    squared_diffs = (y_true - y_pred) ** 2\n    mse = np.mean(squared_diffs)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n\n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must be of the same length.')\n    intersection = np.sum((y_true == 1) & (y_pred == 1))\n    union = np.sum((y_true == 1) | (y_pred == 1))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between two binary arrays.\n\n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Dice score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must be of the same length.')\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 0.0\n    dice = 2.0 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n\n    def generate_hv(seed=None):\n        np.random.seed(seed)\n        return np.random.choice([-1, 1], size=dim)\n\n    def bind(hv1, hv2):\n        return hv1 * hv2\n\n    def bundle(hvs):\n        return np.sign(np.sum(hvs, axis=0))\n    feature_hvs = []\n    for (feature_name, feature_value) in row.items():\n        name_seed = random_seeds.get(feature_name, None)\n        name_hv = generate_hv(name_seed)\n        value_seed = random_seeds.get(feature_name, None)\n        value_hv = generate_hv(value_seed)\n        bound_hv = bind(name_hv, value_hv)\n        feature_hvs.append(bound_hv)\n    composite_hv = bundle(feature_hvs)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a 2x2 confusion matrix for binary classification.\n    \n    Parameters:\n        data (list of lists): Each inner list is [y_true, y_pred], where:\n            - y_true: actual label (0 or 1)\n            - y_pred: predicted label (0 or 1)\n    \n    Returns:\n        list of lists: A 2x2 confusion matrix in the format:\n            [[TN, FP],\n             [FN, TP]]\n    \"\"\"\n    (tn, fp, fn, tp) = (0, 0, 0, 0)\n    for (y_true, y_pred) in data:\n        if y_true == 0 and y_pred == 0:\n            tn += 1\n        elif y_true == 0 and y_pred == 1:\n            fp += 1\n        elif y_true == 1 and y_pred == 0:\n            fn += 1\n        elif y_true == 1 and y_pred == 1:\n            tp += 1\n    return [[tn, fp], [fn, tp]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' must be the same.\")\n    if not all((x in {0, 1} for x in actual + predicted)):\n        raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    (tn, fp, fn, tp) = (0, 0, 0, 0)\n    for (a, p) in zip(actual, predicted):\n        if a == 0 and p == 0:\n            tn += 1\n        elif a == 0 and p == 1:\n            fp += 1\n        elif a == 1 and p == 0:\n            fn += 1\n        elif a == 1 and p == 1:\n            tp += 1\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + tn + fp + fn)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0\n    npv = tn / (tn + fn) if tn + fn > 0 else 0\n    return (confusion_matrix, round(accuracy, 3), round(f1_score, 3), round(specificity, 3), round(npv, 3))"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    try:\n        mode = float(stats.mode(data, keepdims=False).mode)\n    except IndexError:\n        mode = None\n    variance = np.var(data, ddof=1)\n    standard_deviation = np.std(data, ddof=1)\n    percentiles = np.percentile(data, [25, 50, 75])\n    twenty_fifth_percentile = percentiles[0]\n    fiftyth_percentile = percentiles[1]\n    seventy_fifth_percentile = percentiles[2]\n    interquartile_range = seventy_fifth_percentile - twenty_fifth_percentile\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(twenty_fifth_percentile, 4), '50th_percentile': round(fiftyth_percentile, 4), '75th_percentile': round(seventy_fifth_percentile, 4), 'interquartile_range': round(interquartile_range, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials (rounded to five decimal places)\n    \"\"\"\n    if k < 0 or k > n:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    \n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    if k < 0:\n        raise ValueError('k must be a non-negative integer')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: Contrast value calculated as (max_pixel - min_pixel).\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input must be a 2D numpy array.')\n    if not 0 <= img.min() <= img.max() <= 255:\n        raise ValueError('Pixel values must be in the range [0, 255].')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    return float(max_pixel - min_pixel)"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    data = np.array(data)\n    from sklearn.preprocessing import PolynomialFeatures\n    poly = PolynomialFeatures(degree=degree, include_bias=False)\n    transformed = poly.fit_transform(data.reshape(-1, 1))\n    result = [list(map(round, row)) for row in np.round(transformed, 8)]\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            denom = np.power(10000, 2 * (i // 2) / d_model)\n            if i % 2 == 0:\n                pe[pos, i] = np.sin(pos / denom)\n            else:\n                pe[pos, i] = np.cos(pos / denom)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    parameter = np.asarray(parameter)\n    grad = np.asarray(grad)\n    m = np.asarray(m)\n    v = np.asarray(v)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = updated_parameter.round(5).tolist()\n    updated_m = m.round(5).tolist()\n    updated_v = v.round(5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    embedding_dim = params['wte'].shape[1]\n    seq_len = len(token_ids)\n    max_seq_len = hparams['n_ctx']\n    if seq_len > max_seq_len:\n        token_ids = token_ids[-max_seq_len:]\n    else:\n        token_ids = token_ids + [0] * (max_seq_len - seq_len)\n    token_embeddings = params['wte'][token_ids]\n    positional_embeddings = params['wpe'][:seq_len]\n    embedded_seq = token_embeddings + positional_embeddings\n    normalized_output = embedded_seq * params['ln_f']['g'] + params['ln_f']['b']\n    generated_token_ids = []\n    current_seq = token_ids.copy()\n    for _ in range(n_tokens_to_generate):\n        context_vector = normalized_output[-1]\n        logits = np.dot(context_vector, params['wte'].T)\n        probs = np.exp(logits) / np.sum(np.exp(logits))\n        next_token_id = np.random.choice(len(encoder.encoder_dict), p=probs)\n        generated_token_ids.append(next_token_id)\n        current_seq = current_seq[-(max_seq_len - 1):] + [next_token_id]\n    full_token_ids = token_ids + generated_token_ids\n    generated_text = encoder.decode(full_token_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    Q = np.random.randn(n, dimension)\n    K = np.random.randn(n, dimension)\n    V = np.random.randn(n, dimension)\n    attention_scores = np.dot(Q, K.T) / np.sqrt(dimension)\n    attention_weights = softmax(attention_scores)\n    weighted_values = np.dot(attention_weights, V)\n    return [round(val, 4) for val in weighted_values.tolist()]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    corpus = [doc.lower().split() for doc in corpus]\n    query = query.lower().split()\n    tf_docs = [Counter(doc) for doc in corpus]\n    num_docs = len(corpus)\n    doc_freq = Counter()\n    for doc in corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            doc_freq[term] += 1\n    idf = {}\n    for (term, freq) in doc_freq.items():\n        idf[term] = np.log((num_docs - freq + 0.5) / (freq + 0.5))\n    avg_doc_length = sum((len(doc) for doc in corpus)) / num_docs\n    scores = []\n    for (i, doc) in enumerate(corpus):\n        score = 0.0\n        doc_len = len(doc)\n        for term in query:\n            if term not in idf:\n                continue\n            tf = tf_docs[i].get(term, 0)\n            numerator = idf[term] * (k1 + 1) * tf\n            denominator = tf + k1 * (1 - b + b * (doc_len / avg_doc_length))\n            score += numerator / denominator\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    from sklearn.metrics import f1_score\n    f1 = f1_score(y_true, y_pred)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for (i, consumption) in enumerate(consumption_data, start=1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption - fluctuation\n        detrended_data.append(detrended)\n    n = len(detrended_data)\n    x = list(range(1, n + 1))\n    y = detrended_data\n    mean_x = sum(x) / n\n    mean_y = sum(y) / n\n    numerator = sum(((xi - mean_x) * (yi - mean_y) for (xi, yi) in zip(x, y)))\n    denominator = sum(((xi - mean_x) ** 2 for xi in x))\n    m = numerator / denominator\n    b = mean_y - m * mean_x\n    base_consumption_day_15 = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    rounded_total = round(total_consumption_day_15)\n    safety_margin = math.ceil(rounded_total * 0.05)\n    final_forecast = rounded_total + safety_margin\n    return final_forecast"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, n_heads: int) -> np.ndarray:\n    \"\"\"\n    Perform scaled dot-product self-attention.\n    \"\"\"\n    d_k = Q.shape[1] // n_heads\n    Q_split = np.reshape(Q, (Q.shape[0], n_heads, d_k))\n    K_split = np.reshape(K, (K.shape[0], n_heads, d_k))\n    V_split = np.reshape(V, (V.shape[0], n_heads, d_k))\n    scores = np.matmul(Q_split, K_split.transpose(0, 1, 2)) / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    context = np.matmul(attention_weights, V_split)\n    context = np.reshape(context, (context.shape[0], -1))\n    return context\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention mechanism.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    context = self_attention(Q, K, V, n_heads)\n    context_rounded = np.round(context, decimals=4)\n    return context_rounded.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    n_00 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 0))\n    n_01 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 1))\n    n_10 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 0))\n    n_11 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 1))\n    n = len(x)\n    p_x1 = (n_10 + n_11) / n\n    p_y1 = (n_01 + n_11) / n\n    e_11 = n * p_x1 * p_y1\n    e_01 = n * (1 - p_x1) * p_y1\n    e_10 = n * p_x1 * (1 - p_y1)\n    e_00 = n * (1 - p_x1) * (1 - p_y1)\n    chi2 = (n_11 - e_11) ** 2 / e_11 + (n_01 - e_01) ** 2 / e_01 + (n_10 - e_10) ** 2 / e_10 + (n_00 - e_00) ** 2 / e_00\n    phi = chi2 ** 0.5 / n ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0.0, min(1.0, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x > 20:\n        return x\n    elif x < -20:\n        return 0.0\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    unclipped_terms = np.array(rhos) * np.array(A)\n    clipped_terms = np.array(clipped_rhos) * np.array(A)\n    surr_loss = np.minimum(unclipped_terms, clipped_terms)\n    kl_divergence = np.sum(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    total_loss = -np.mean(surr_loss) - beta * kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return scale * x\n    else:\n        return scale * (alpha * math.exp(x) - alpha)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = y.shape[1]\n    W = np.random.randn(n_features, n_classes) * 0.01\n    losses = []\n    for _ in range(iterations):\n        scores = X @ W\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        log_likelihood = -np.sum(y * np.log(probs + 1e-08)) / n_samples\n        losses.append(round(log_likelihood, 4))\n        dw = X.T @ (probs - y) / n_samples\n        W -= learning_rate * dw\n    B = np.round(W.flatten(), 4).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n        X (np.ndarray): Input features of shape (n_samples, n_features).\n        y (np.ndarray): Target labels of shape (n_samples,).\n        learning_rate (float): Learning rate for gradient descent.\n        iterations (int): Number of iterations to run gradient descent.\n\n    Returns:\n        tuple[list[float], list[float]]: A tuple containing:\n            - List of optimized coefficients (weights + bias), rounded to 4 decimal places.\n            - List of loss values over iterations, rounded to 4 decimal places.\n    \"\"\"\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    weights = np.random.randn(X.shape[1])\n    losses = []\n    for _ in range(iterations):\n        z = np.dot(X, weights)\n        y_pred = 1 / (1 + np.exp(-z))\n        epsilon = 1e-15\n        loss = -np.mean(y * np.log(y_pred + epsilon) + (1 - y) * np.log(1 - y_pred + epsilon))\n        losses.append(round(loss, 4))\n        gradient = np.dot(X.T, y_pred - y) / y.size\n        weights -= learning_rate * gradient\n    optimized_weights = [round(w, 4) for w in weights.tolist()]\n    losses = [round(loss, 4) for loss in losses]\n    return (optimized_weights, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n\n    Args:\n        Q: Query matrix of shape (seq_len, d_model)\n        K: Key matrix of shape (seq_len, d_model)\n        V: Value matrix of shape (seq_len, d_model)\n        mask: Attention mask of shape (seq_len, seq_len)\n\n    Returns:\n        Output of masked self-attention as a Python list after reshaping.\n    \"\"\"\n    d_k = Q.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = scores + mask * -1000000000.0\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    Uses Shannon Entropy as the measure of disorder.\n    Returns the result rounded to the nearest 4th decimal.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = Counter(apples)\n    total = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor.\n    \n    Parameters:\n    - X: Input tensor of shape (batch_size, sequence_length, feature_dim)\n    - gamma: Scaling parameter of shape (feature_dim,)\n    - beta: Shifting parameter of shape (feature_dim,)\n    - epsilon: Small value to avoid division by zero\n    \n    Returns:\n    - Normalized tensor as a list with values rounded to 5 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = X_normalized * gamma[np.newaxis, np.newaxis, :] + beta[np.newaxis, np.newaxis, :]\n    return X_scaled.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score between a reference and a candidate translation.\n    \n    Parameters:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation.\n        alpha (float): Weight for precision in the F-mean formula.\n        beta (float): Weight for recall in the F-mean formula.\n        gamma (float): Penalty factor for fragmentation.\n        \n    Returns:\n        float: METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    ref_counter = Counter(ref_tokens)\n    cand_counter = Counter(cand_tokens)\n    common_words = set(ref_counter.keys()) & set(cand_counter.keys())\n    total_ref_words = len(ref_tokens)\n    total_cand_words = len(cand_tokens)\n    precision = sum((cand_counter[word] for word in common_words)) / total_cand_words if total_cand_words > 0 else 0\n    recall = sum((cand_counter[word] for word in common_words)) / total_ref_words if total_ref_words > 0 else 0\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall) if alpha * precision + (1 - alpha) * recall != 0 else 0\n\n    def lcs_length(a, b):\n        (m, n) = (len(a), len(b))\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n    lcs = lcs_length(ref_tokens, cand_tokens)\n    fragmentation_penalty = 1 - lcs / len(ref_tokens) if len(ref_tokens) > 0 else 0\n    meteor = f_mean * (1 - gamma * fragmentation_penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute Pointwise Mutual Information (PMI) between two events.\n    \n    Parameters:\n    - joint_counts: int, number of times both events occurred together\n    - total_counts_x: int, total occurrences of event x\n    - total_counts_y: int, total occurrences of event y\n    - total_samples: int, total number of samples in the corpus\n    \n    Returns:\n    - float, PMI rounded to 3 decimal places\n    \"\"\"\n    if joint_counts == 0 or total_counts_x == 0 or total_counts_y == 0 or (total_samples == 0):\n        return 0.0\n    expected_joint = total_counts_x * total_counts_y / total_samples\n    if expected_joint == 0:\n        return 0.0\n    pmi = np.log(joint_counts / expected_joint)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    z_shortcut = z2 + x\n    output = np.maximum(0, z_shortcut)\n    return output.round(4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: Output array of shape (channels,), where each element is the average\n                of all values in the corresponding feature map.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform batch normalization on a 4D NumPy array in BCHW format.\n\n    Parameters:\n    - X: Input tensor of shape (batch, channels, height, width)\n    - gamma: Scale parameter (gamma) of shape (channels,)\n    - beta: Shift parameter (beta) of shape (channels,)\n    - epsilon: Small value to avoid division by zero (default: 1e-5)\n\n    Returns:\n    - Normalized output tensor rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    if gamma.shape[0] != X.shape[1]:\n        raise ValueError('gamma must have the same number of channels as X')\n    if beta.shape[0] != X.shape[1]:\n        raise ValueError('beta must have the same number of channels as X')\n    (batch_size, channels, height, width) = X.shape\n    X_reshaped = X.reshape(batch_size * height * width, channels)\n    mean = np.mean(X_reshaped, axis=0)\n    var = np.var(X_reshaped, axis=0)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_transformed = X_normalized * gamma + beta\n    X_output = X_transformed.reshape(batch_size, channels, height, width)\n    return X_output.round(4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    - c (float): Coefficient of the term.\n    - x (float): Point at which to evaluate the derivative.\n    - n (float): Exponent of the term.\n    \n    Returns:\n    - float: Derivative value rounded to 4 decimal places.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors)\n    n = len(vectors)\n    m = vectors.shape[1]\n    if m != 2:\n        raise ValueError('All vectors must be 2D.')\n    basis = []\n    for i in range(n):\n        v = vectors[i]\n        for j in range(len(basis)):\n            u_j = basis[j]\n            proj = np.dot(v, u_j) / np.dot(u_j, u_j) * u_j\n            v = v - proj\n        if np.linalg.norm(v) > tol:\n            u = v / np.linalg.norm(v)\n            basis.append(u.tolist())\n    rounded_basis = [np.round(vec, 4).tolist() for vec in basis]\n    return rounded_basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3-dimensional vectors.\n\n    Parameters:\n    a (list or np.ndarray): First 3D vector.\n    b (list or np.ndarray): Second 3D vector.\n\n    Returns:\n    list: The cross product vector, rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    return result.round(4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=np.float64)\n    b = np.array(b, dtype=np.float64)\n    if A.shape[0] != A.shape[1]:\n        return -1\n    n = A.shape[0]\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return np.round(np.array(x), 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = np.sum(np.sqrt(np.array(p) * np.array(q)))\n    if bc == 0:\n        return 0.0\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        rewards = [reward for (state, action, reward) in episode]\n        G = 0.0\n        for t in reversed(range(len(rewards))):\n            G = G + rewards[t]\n            returns.insert(0, G)\n        for (t, (state, action, reward)) in enumerate(episode):\n            logits = theta[state, :]\n            probabilities = np.exp(logits) / np.sum(np.exp(logits))\n            log_prob = np.log(probabilities[action])\n            grad_contribution = np.zeros(num_actions)\n            grad_contribution[action] = 1.0\n            grad_contribution -= probabilities\n            grad_contribution *= returns[t]\n            gradient[state, :] += log_prob * grad_contribution\n    gradient /= len(episodes)\n    return gradient.round(4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational efficiency of a Mixture-of-Experts (MoE) layer compared to a dense layer.\n\n    Parameters:\n    - n_experts: Number of experts in the MoE layer.\n    - k_active: Number of active experts per input (sparsity).\n    - d_in: Input dimension.\n    - d_out: Output dimension.\n\n    Returns:\n    - A tuple containing:\n        - FLOPs for dense layer (float)\n        - FLOPs for MoE layer (float)\n        - Efficiency savings percentage (float)\n    All values are rounded to the nearest 1st decimal.\n    \"\"\"\n    flops_dense = d_in * d_out\n    flops_moe = k_active / n_experts * d_in * d_out\n    if flops_dense == 0:\n        efficiency_savings = 0.0\n    else:\n        efficiency_savings = (flops_dense - flops_moe) / flops_dense * 100\n    return (round(flops_dense, 1), round(flops_moe, 1), round(efficiency_savings, 1))"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating mechanism for MoE models.\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gate weights matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weights matrix of shape (input_dim, num_experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_experts)\n    - k: Sparsity constraint (number of experts to activate per input)\n\n    Returns:\n    - A list of lists representing the final routing probabilities matrix,\n      rounded to 4 decimal places.\n    \"\"\"\n    logits = X @ W_g\n    noise = X @ W_noise\n    noise += N\n    scores = logits + noise\n    topk_indices = np.argpartition(-scores, k, axis=1)[:, :k]\n    topk_scores = np.take_along_axis(scores, topk_indices, axis=1)\n    exp_scores = np.exp(topk_scores - np.max(topk_scores, axis=1, keepdims=True))\n    probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    output = np.zeros_like(scores)\n    output[np.arange(output.shape[0])[:, None], topk_indices] = probs\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gate_scores = np.dot(x, Wg)\n    gate_probs = np.exp(gate_scores - np.max(gate_scores, axis=1, keepdims=True))\n    gate_probs = gate_probs / np.sum(gate_probs, axis=1, keepdims=True)\n    indices = np.argpartition(-gate_probs, top_k, axis=1)[:, :top_k]\n    top_k_probs = np.take_along_axis(gate_probs, indices, axis=1)\n    top_k_probs = top_k_probs / np.sum(top_k_probs, axis=1, keepdims=True)\n    expert_outputs = np.take_along_axis(We, indices[..., np.newaxis], axis=1)\n    expert_outputs = np.squeeze(expert_outputs, axis=2)\n    expert_outputs = np.dot(x[:, np.newaxis, :], expert_outputs).squeeze(axis=1)\n    moe_output = np.sum(expert_outputs * top_k_probs[:, :, np.newaxis], axis=1)\n    moe_output = np.round(moe_output, 4)\n    return moe_output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    X = np.array(X)\n    (B, C, H, W) = X.shape\n    group_size = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, group_size, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    X_out = X_normalized * gamma + beta\n    X_out_rounded = np.round(X_out, decimals=4)\n    return X_out_rounded.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for _ in range(max_iters):\n        derivative = 4 * x ** 3 - 9 * x ** 2\n        new_x = x - learning_rate * derivative\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    transformed = gamma * np.tanh(alpha * x + beta)\n    rounded = np.round(transformed, decimals=4)\n    return rounded.tolist()"}
