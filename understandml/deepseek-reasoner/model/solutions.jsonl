{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Compute the closed-form solution for Ridge Regression.\"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.hstack([np.ones((X.shape[0], 1)), X])\n    n_features = X_b.shape[1]\n    A = X_b.T @ X_b + alpha * np.eye(n_features)\n    det = np.linalg.det(A)\n    if np.abs(det) < 1e-12:\n        return -1\n    w = np.linalg.inv(A) @ (X_b.T @ y)\n    return np.round(w, 4).tolist()"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    gram = X_train @ X_train.T\n    i = 0\n    while updates < n_iter:\n        if i >= n_samples:\n            break\n        activation = np.dot(alpha * y_train, gram[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0\n        else:\n            i += 1\n    w = np.dot(alpha * y_train, X_train)\n    w_rounded = [round(x, 4) for x in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'deriv': lambda mu: np.ones_like(mu)}, 'log': {'link': np.log, 'inv_link': np.exp, 'deriv': lambda mu: 1.0 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'deriv': lambda mu: 1 / (mu * (1 - mu))}}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    depths = [0] * n_samples\n    indices = list(range(n_samples))\n\n    def process_node(current_indices, current_depth):\n        if len(current_indices) < 3:\n            for i in current_indices:\n                depths[i] = current_depth\n            return\n        f = np.random.randint(data.shape[1])\n        feature_values = data[current_indices, f]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        v = np.random.uniform(down, up)\n        left = []\n        right = []\n        for i in current_indices:\n            if data[i, f] <= v:\n                left.append(i)\n            else:\n                right.append(i)\n        if not left or not right:\n            for i in current_indices:\n                depths[i] = current_depth\n            return\n        process_node(left, current_depth + 1)\n        process_node(right, current_depth + 1)\n    process_node(indices, 0)\n    return depths"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    x_norms = np.sum(X ** 2, axis=1)\n    gram = X @ X.T\n    D = x_norms[:, np.newaxis] + x_norms[np.newaxis, :] - 2 * gram\n    D_rounded = np.round(D, 4)\n    return D_rounded.tolist()"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    np_preds = [np.array(p) for p in predictions]\n    sum_pred = np.sum(np_preds, axis=0)\n    scores = -learning_rate * sum_pred\n    max_scores = np.max(scores, axis=1, keepdims=True)\n    exp_scores = np.exp(scores - max_scores)\n    softmax_probs = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n    pred_labels = np.argmax(softmax_probs, axis=1)\n    return pred_labels.tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\"\"\"\n    n_trans = len(transactions)\n    if n_trans == 0 or minsup <= 0:\n        return {}\n    min_support = math.ceil(minsup * n_trans)\n    if min_support <= 0:\n        return {}\n    preprocessed = [set(t) for t in transactions]\n    item_counter = Counter()\n    for t in preprocessed:\n        for item in t:\n            item_counter[item] += 1\n    F_prev = {(item,): count for (item, count) in item_counter.items() if count >= min_support}\n    frequent_itemsets = dict(F_prev)\n    k = 2\n    while F_prev:\n        itemsets = sorted(F_prev.keys())\n        Ck = []\n        for i in range(len(itemsets)):\n            itemset1 = itemsets[i]\n            for j in range(i + 1, len(itemsets)):\n                itemset2 = itemsets[j]\n                if itemset1[:-1] == itemset2[:-1] and itemset1[-1] < itemset2[-1]:\n                    new_candidate = itemset1 + (itemset2[-1],)\n                    valid = True\n                    for subset in combinations(new_candidate, k - 1):\n                        if subset not in F_prev:\n                            valid = False\n                            break\n                    if valid:\n                        Ck.append(new_candidate)\n        Ck = list(set(Ck))\n        Fk = {}\n        for candidate in Ck:\n            count = 0\n            for t in preprocessed:\n                if all((item in t for item in candidate)):\n                    count += 1\n            if count >= min_support:\n                Fk[candidate] = count\n        if not Fk:\n            break\n        frequent_itemsets.update(Fk)\n        F_prev = Fk\n        k += 1\n    return frequent_itemsets"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(n_iterations):\n        z = np.dot(X_train, w) + b\n        prob = 1 / (1 + np.exp(-z))\n        error = prob - y_train\n        dw = 1 / n_samples * np.dot(X_train.T, error)\n        db = 1 / n_samples * np.sum(error)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    z_test = np.dot(X_test, w) + b\n    prob_test = 1 / (1 + np.exp(-z_test))\n    y_pred = np.round(prob_test).astype(int)\n    return y_pred.tolist()"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\\\(\tilde{X}_{t-1}\\\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\\\(X_t\\\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\\\(\\x0barepsilon\\\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    prev = np.asarray(prev)\n    if prev.ndim not in (0, 1):\n        raise ValueError('prev must be a scalar or 1D array.')\n    cur = np.asarray(cur)\n    if cur.ndim not in (0, 1):\n        raise ValueError('cur must be a scalar or 1D array.')\n    weight = np.asarray(weight)\n    if weight.ndim not in (0, 1):\n        raise ValueError('weight must be a scalar or 1D array.')\n    if (weight < 0).any() or (weight > 1).any():\n        raise ValueError('All elements in weight must be between 0 and 1 inclusive.')\n    smoothed = weight * prev + (1 - weight) * cur\n    rounded = np.round(smoothed, 4)\n    all_scalar = prev.ndim == 0 and cur.ndim == 0 and (weight.ndim == 0)\n    return rounded.item() if all_scalar else rounded.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\"\"\"\n    if data.size == 0 or k == 0:\n        return ([], [])\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        distances = np.sum((data[:, np.newaxis] - centers) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centers = np.zeros_like(centers)\n        for j in range(k):\n            mask = labels == j\n            if np.sum(mask) == 0:\n                new_centers[j] = data[np.random.randint(data.shape[0])]\n            else:\n                new_centers[j] = data[mask].mean(axis=0)\n        delta = np.max(np.linalg.norm(new_centers - centers, axis=1))\n        if delta < epsilon:\n            centers = new_centers.copy()\n            break\n        centers = new_centers.copy()\n    centers = np.round(centers, 4)\n    distances = np.sum((data[:, np.newaxis] - centers) ** 2, axis=2)\n    labels = np.argmin(distances, axis=1).tolist()\n    centers_list = [center.tolist() for center in centers]\n    return (centers_list, labels)"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool=False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\"\"\"\n    N = frames.shape[1]\n    fft_result = np.fft.rfft(frames, axis=1)\n    power = np.abs(fft_result) ** 2\n    if scale:\n        scaling_factor = N // 2 + 1\n        power = power / scaling_factor\n    power_rounded = np.round(power, 4)\n    return power_rounded.tolist()"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\"\"\"\n    n_items = data.shape[1]\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            common_rated = (data[:, i] > 0) & (data[:, j] > 0)\n            if not np.any(common_rated):\n                S[i, j] = S[j, i] = 0.0\n                continue\n            v1 = data[common_rated, i]\n            v2 = data[common_rated, j]\n            if criterion == 'cosine':\n                std1 = np.std(v1, ddof=1)\n                if std1 > 0.001:\n                    v1 = v1 - np.mean(v1)\n                std2 = np.std(v2, ddof=1)\n                if std2 > 0.001:\n                    v2 = v2 - np.mean(v2)\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n                if norm1 == 0 or norm2 == 0:\n                    sim = 0.0\n                else:\n                    sim = np.dot(v1, v2) / (norm1 * norm2)\n            elif criterion == 'pearson':\n                if len(v1) < 2:\n                    sim = 0.0\n                else:\n                    corr = np.corrcoef(v1, v2)[0, 1]\n                    sim = 0.0 if np.isnan(corr) else corr\n            else:\n                sim = 0.0\n            S[i, j] = S[j, i] = sim\n    user_ratings = data[user_ind]\n    rated_items = np.where(user_ratings > 0)[0].tolist()\n    if len(rated_items) == n_items:\n        return []\n    unrated = [t for t in range(n_items) if user_ratings[t] == 0]\n    scores = []\n    for t in unrated:\n        sum_num = 0.0\n        sum_den = 0.0\n        for i in rated_items:\n            sim = S[t, i]\n            sum_num += user_ratings[i] * sim\n            sum_den += abs(sim)\n        score = sum_num / sum_den if sum_den != 0 else 0.0\n        scores.append((score, t))\n    sorted_scores = sorted(scores, key=lambda x: (-x[0], x[1]))\n    result = [t for (score, t) in sorted_scores[:k]]\n    return result"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\"\"\"\n    epsilon = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    p_clipped = np.clip(p, epsilon, 1 - epsilon)\n    loss_i = -(y * np.log(p_clipped) + (1 - y) * np.log(1 - p_clipped))\n    mean_loss = np.mean(loss_i).item()\n    mean_loss_rounded = round(mean_loss, 4)\n    gradient = (p - y).tolist()\n    hessian = (p * (1 - p)).tolist()\n    gradient_rounded = [round(g, 4) for g in gradient]\n    hessian_rounded = [round(h, 4) for h in hessian]\n    return (mean_loss_rounded, gradient_rounded, hessian_rounded)"}
{"task_id": 16, "completion_id": 0, "solution": "from typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    L = len(sequence)\n    if N > L:\n        return []\n    return [tuple(sequence[i:i + N]) for i in range(L - N + 1)]"}
{"task_id": 17, "completion_id": 0, "solution": "def build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items:\n        return {}\n    root_index = parents.index(-1)\n    children_map = {}\n    for i in range(len(parents)):\n        parent = parents[i]\n        if parent == -1:\n            continue\n        if parent not in children_map:\n            children_map[parent] = []\n        children_map[parent].append(i)\n\n    def build_node(index: int) -> dict:\n        node = {'item': items[index], 'count': counts[index], 'children': []}\n        for child_index in children_map.get(index, []):\n            child_node = build_node(child_index)\n            node['children'].append(child_node)\n        return node\n    return build_node(root_index)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.get('dtype', float)\n    return np.zeros(shape, dtype=dtype)"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    for feature in range(n_features):\n        X_feature = X[:, feature]\n        sorted_indices = np.argsort(X_feature)\n        X_sorted = X_feature[sorted_indices]\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        cum_g = np.concatenate([[0], np.cumsum(g_sorted)])\n        cum_h = np.concatenate([[0], np.cumsum(h_sorted)])\n        total_g = cum_g[-1]\n        total_h = cum_h[-1]\n        denominator_parent = total_h + lam\n        if denominator_parent == 0:\n            continue\n        parent_loss = -total_g ** 2 / (2 * denominator_parent) + gamma\n        unique_vals = np.unique(X_sorted)\n        for t in unique_vals:\n            split_idx = np.searchsorted(X_sorted, t, side='right')\n            left_count = split_idx\n            right_count = n_samples - split_idx\n            if left_count < 2 or right_count < 2:\n                continue\n            sum_g_left = cum_g[split_idx]\n            sum_h_left = cum_h[split_idx]\n            sum_g_right = total_g - sum_g_left\n            sum_h_right = total_h - sum_h_left\n            denominator_left = sum_h_left + lam\n            denominator_right = sum_h_right + lam\n            if denominator_left == 0 or denominator_right == 0:\n                continue\n            left_loss = -sum_g_left ** 2 / (2 * denominator_left) + gamma\n            right_loss = -sum_g_right ** 2 / (2 * denominator_right) + gamma\n            current_gain = parent_loss - (left_loss + right_loss)\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature = feature\n                best_threshold = t\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        sig = 1 / (1 + np.exp(-x))\n        grad = sig * (1 - sig)\n        return (round(sig, 4), round(grad, 4))\n    else:\n        if isinstance(x, list):\n            arr = np.array(x)\n        else:\n            arr = x\n        if arr.ndim == 0:\n            sig = 1 / (1 + np.exp(-arr))\n            grad = sig * (1 - sig)\n            return (round(sig.item(), 4), round(grad.item(), 4))\n        else:\n            sig = 1 / (1 + np.exp(-arr))\n            grad = sig * (1 - sig)\n            sig_rounded = np.round(sig, 4).tolist()\n            grad_rounded = np.round(grad, 4).tolist()\n            return (sig_rounded, grad_rounded)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    N = len(x_train)\n    if not np.all(np.isin(y_train, [-1, 1])):\n        raise ValueError('y_train must contain only 1 or -1')\n    sorted_x = np.sort(x_train)\n    if len(sorted_x) == 1:\n        thetas = [sorted_x[0]]\n    else:\n        thetas = [(sorted_x[i] + sorted_x[i + 1]) / 2 for i in range(len(sorted_x) - 1)]\n    thetas = np.array(thetas)\n    D = np.ones(N) / N\n    stumps = []\n    while True:\n        best_err = np.inf\n        best_d = None\n        best_theta = None\n        best_preds = None\n        for theta in thetas:\n            for d in [0, 1]:\n                if d == 0:\n                    preds = np.where(x_train <= theta, 1, -1)\n                else:\n                    preds = np.where(x_train > theta, 1, -1)\n                err = np.sum(D * (preds != y_train))\n                if err < best_err:\n                    best_err = err\n                    best_d = d\n                    best_theta = theta\n                    best_preds = preds\n        if best_err == 0:\n            alpha = np.inf\n        else:\n            alpha = 0.5 * np.log((1 - best_err) / best_err)\n        stumps.append((alpha, best_d, best_theta))\n        correct = best_preds == y_train\n        factors = np.where(correct, np.exp(-alpha), np.exp(alpha))\n        D *= factors\n        D /= D.sum()\n        current_preds = []\n        for x in x_train:\n            sum_alpha = 0.0\n            for (a, d_stump, theta_stump) in stumps:\n                if d_stump == 0:\n                    h = 1 if x <= theta_stump else -1\n                else:\n                    h = 1 if x > theta_stump else -1\n                sum_alpha += a * h\n            current_pred = 1 if sum_alpha >= 0 else -1\n            current_preds.append(current_pred)\n        training_error = np.mean(np.array(current_preds) != y_train)\n        if training_error <= epsilon:\n            break\n    y_pred = []\n    for x in x_test:\n        sum_alpha = 0.0\n        for (a, d, theta) in stumps:\n            if d == 0:\n                h = 1 if x <= theta else -1\n            else:\n                h = 1 if x > theta else -1\n            sum_alpha += a * h\n        pred = 1 if sum_alpha >= 0 else -1\n        y_pred.append(pred)\n    return y_pred"}
{"task_id": 22, "completion_id": 0, "solution": "import numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    offset = np.random.randint(low=-300, high=300, size=shape)\n    u = np.random.rand(*shape)\n    tensor = offset.astype(np.float64) + u\n    if not standardize:\n        return tensor\n    eps = np.finfo(float).eps\n    original_shape = tensor.shape\n    X_2d = tensor.reshape(-1, original_shape[-1])\n    means = X_2d.mean(axis=0)\n    stds = X_2d.std(axis=0, ddof=0)\n    stds += eps\n    X_2d_standardized = (X_2d - means) / stds\n    tensor_standardized = X_2d_standardized.reshape(original_shape)\n    return tensor_standardized"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\"\"\"\n    w = np.asarray(w)\n    if not velocity:\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.asarray(velocity)\n    look_ahead_w = w - momentum * velocity\n    g = grad_func(look_ahead_w)\n    g = np.asarray(g)\n    g_clipped = np.clip(g, -1.0, 1.0)\n    new_velocity = momentum * velocity + learning_rate * g_clipped\n    new_w = w - new_velocity\n    new_w_rounded = np.round(new_w, 4).tolist()\n    new_velocity_rounded = np.round(new_velocity, 4).tolist()\n    return (new_w_rounded, new_velocity_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    X_train_sq = np.sum(X_train ** 2, axis=1)\n    X_test_sq = np.sum(X_test ** 2, axis=1)\n    cross_term = X_train @ X_test.T\n    squared_distances = X_train_sq[:, np.newaxis] + X_test_sq[np.newaxis, :] - 2 * cross_term\n    K = np.exp(-gamma * squared_distances)\n    decision_values = np.dot(alpha * y_train, K) + b\n    predicted_labels = np.where(decision_values >= 0, 1, -1).astype(int).tolist()\n    return predicted_labels"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    x_array = np.array(x)\n    activation = np.maximum(x_array, 0)\n    gradient = (x_array >= 0).astype(int)\n    return (activation.tolist(), gradient.tolist())"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = S[:k]\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ np.diag(S_k) @ Vt_k\n    mse = np.sum(S[k:] ** 2) / (m * n)\n    X_hat_rounded = np.round(X_hat, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x_train = np.asarray(x_train)\n    y_train = np.asarray(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    split_candidates = []\n    n = len(x_sorted)\n    for i in range(n - 1):\n        split = (x_sorted[i] + x_sorted[i + 1]) / 2\n        split_candidates.append(split)\n    valid_splits = []\n    for s in split_candidates:\n        mask_left = x_sorted <= s\n        mask_right = x_sorted > s\n        if np.any(mask_left) and np.any(mask_right):\n            valid_splits.append(s)\n    ensemble = []\n    residuals = y_sorted.copy()\n    current_rss = np.sum(residuals ** 2)\n    if valid_splits:\n        while current_rss > epsilon:\n            best_split = None\n            best_c1 = None\n            best_c2 = None\n            best_new_rss = np.inf\n            for s in valid_splits:\n                mask_left = x_sorted <= s\n                mask_right = ~mask_left\n                c1 = np.mean(residuals[mask_left])\n                c2 = np.mean(residuals[mask_right])\n                predictions = np.where(mask_left, c1, c2)\n                new_residuals = residuals - predictions\n                new_rss = np.sum(new_residuals ** 2)\n                if new_rss < best_new_rss:\n                    best_new_rss = new_rss\n                    best_split = s\n                    best_c1 = c1\n                    best_c2 = c2\n            if best_split is None:\n                break\n            ensemble.append((best_split, best_c1, best_c2))\n            mask_left = x_sorted <= best_split\n            predictions = np.where(mask_left, best_c1, best_c2)\n            residuals -= predictions\n            current_rss = best_new_rss\n            if current_rss <= epsilon:\n                break\n    prediction = 0.0\n    for stump in ensemble:\n        (s, c1, c2) = stump\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 32, "completion_id": 0, "solution": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n\n    def convert(value):\n        if isinstance(value, str):\n            return float(value)\n        return value\n    return (convert(a), convert(b))\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    return a + b"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"Generates a binary tensor with specified shape and sparsity.\n\n    The tensor is filled with 0.0s and 1.0s, where each element has a probability\n    equal to 'sparsity' of being 1.0. If a seed is provided, the results are reproducible.\n\n    Args:\n        shape: The dimensions of the output tensor.\n        sparsity: Probability of an element being 1.0; must be in [0, 1].\n        seed: Optional seed for the random number generator.\n\n    Returns:\n        A numpy.ndarray with elements 0.0 and 1.0, or -1 if sparsity is invalid.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1.0 - sparsity\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = np.where(random_tensor >= threshold, 1.0, 0.0)\n    return binary_tensor"}
{"task_id": 35, "completion_id": 0, "solution": "from typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        fea = current.fea\n        if fea < 0 or fea >= len(sample):\n            return -1\n        value = sample[fea]\n        if value not in current.child:\n            return -1\n        current = current.child[value]\n    return current.res"}
{"task_id": 36, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    if root is None:\n        return []\n    predictions = []\n    for sample in X:\n        current = root\n        while True:\n            if current.left is None and current.right is None:\n                predictions.append(current.threshold)\n                break\n            feature_idx = current.feature\n            threshold = current.threshold\n            if sample[feature_idx] <= threshold:\n                current = current.left\n            else:\n                current = current.right\n    return predictions"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\"\"\"\n    if data.size == 0:\n        return None\n    m = data.shape[1] - 1\n    dim_cycle = cycle(range(m))\n    return _build_kd_tree(data, dim_cycle)\ndef _build_kd_tree(data: np.ndarray, dim_cycle: cycle) -> dict | None:\n    if data.shape[0] == 0:\n        return None\n    d = next(dim_cycle)\n    sorted_indices = data[:, d].argsort()\n    sorted_data = data[sorted_indices]\n    n = sorted_data.shape[0]\n    median_idx = (n - 1) // 2\n    median_row = sorted_data[median_idx]\n    left_data = sorted_data[:median_idx]\n    right_data = sorted_data[median_idx + 1:]\n    left_subtree = _build_kd_tree(left_data, dim_cycle)\n    right_subtree = _build_kd_tree(right_data, dim_cycle)\n    return {'point': median_row[:-1].tolist(), 'label': median_row[-1].item(), 'left': left_subtree, 'right': right_subtree}"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\"\"\"\n    n_arms = context.shape[1]\n    scores = []\n    for a in range(n_arms):\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        inv_A_a = np.linalg.inv(A_a)\n        theta_a = inv_A_a @ b_a\n        c_a = context[:, a]\n        term1 = np.dot(theta_a, c_a)\n        cov_term = c_a @ inv_A_a @ c_a\n        term2 = alpha * np.sqrt(cov_term)\n        scores.append(term1 + term2)\n    return np.argmax(scores)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\"\"\"\n    n_samples = data.shape[0]\n    k = n_samples // 2\n    col = data[:, d]\n    partitioned_indices = np.argpartition(col, k)\n    pivot_idx = partitioned_indices[k]\n    med_val = col[pivot_idx]\n    left_mask = col < med_val\n    right_mask = col > med_val\n    left_indices = np.flatnonzero(left_mask).tolist()\n    right_indices = np.flatnonzero(right_mask).tolist()\n    left_indices.sort()\n    right_indices.sort()\n    return (pivot_idx, left_indices, right_indices)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be one-dimensional'\n    assert stride >= 1, 'stride must be >= 1'\n    assert len(x) >= frame_width, 'x is shorter than frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * x.strides[0], x.strides[0])\n    framed = as_strided(x, shape=new_shape, strides=new_strides)\n    if not writeable:\n        framed.flags.writeable = False\n    return framed"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples X using the k-Nearest Neighbours rule.\"\"\"\n    X_data_np = np.array(X_data)\n    y_data_np = np.array(y_data)\n    X_np = np.array(X)\n    predictions = []\n    for query in X_np:\n        distances = np.linalg.norm(X_data_np - query, axis=1)\n        dl = list(zip(distances, y_data))\n        dl_sorted = sorted(dl, key=lambda x: (x[0], x[1]))\n        k_actual = min(k, len(dl_sorted))\n        neighbors = dl_sorted[:k_actual]\n        labels = [label for (d, label) in neighbors]\n        counter = Counter(labels)\n        if not counter:\n            predictions.append(None)\n            continue\n        max_count = max(counter.values())\n        candidates = [label for (label, cnt) in counter.items() if cnt == max_count]\n        predicted_label = sorted(candidates)[0]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1.0\n    if any((x < 0 for x in actual)) or any((y < 0 for y in predicted)):\n        return -1.0\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    log_actual = np.log(actual_np + 1)\n    log_predicted = np.log(predicted_np + 1)\n    squared_diffs = (log_predicted - log_actual) ** 2\n    mean_squared_error = np.mean(squared_diffs)\n    rmsle_value = np.sqrt(mean_squared_error)\n    return round(rmsle_value, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    arr_x = np.array(x)\n    exp_neg_2x = np.exp(-2 * arr_x)\n    tanh_values = 2 / (1 + exp_neg_2x) - 1\n    if derivative:\n        result = 1 - tanh_values ** 2\n    else:\n        result = tanh_values\n    return np.round(result, 4).tolist()"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    N = len(x)\n    if N == 0:\n        return []\n    result = []\n    for k in range(N):\n        sum_ak = 0\n        for n in range(N - k):\n            sum_ak += x[n + k] * x[n]\n        result.append(sum_ak)\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        for row in X:\n            if not isinstance(row, list):\n                return False\n        if X:\n            first_len = len(X[0])\n            for row in X:\n                if len(row) != first_len:\n                    return False\n        try:\n            arr = np.array(X)\n        except:\n            return False\n    elif isinstance(X, np.ndarray):\n        arr = X\n    else:\n        return False\n    if arr.ndim != 2:\n        return False\n    if not np.issubdtype(arr.dtype, np.number):\n        return False\n    if (arr < 0).any() or (arr > 1).any():\n        return False\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 49, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    if k <= 0 or k > len(nums):\n        return -1\n\n    def _move_up(heap: List[Number], index: int) -> None:\n        while index > 0:\n            parent = (index - 1) // 2\n            if heap[index] > heap[parent]:\n                (heap[index], heap[parent]) = (heap[parent], heap[index])\n                index = parent\n            else:\n                break\n\n    def _move_down(heap: List[Number], index: int) -> None:\n        n = len(heap)\n        while True:\n            left = 2 * index + 1\n            right = 2 * index + 2\n            largest = index\n            if left < n and heap[left] > heap[largest]:\n                largest = left\n            if right < n and heap[right] > heap[largest]:\n                largest = right\n            if largest != index:\n                (heap[index], heap[largest]) = (heap[largest], heap[index])\n                index = largest\n            else:\n                break\n    heap: List[Number] = []\n    for num in nums:\n        if len(heap) < k:\n            heap.append(num)\n            _move_up(heap, len(heap) - 1)\n        elif num < heap[0]:\n            heap[0] = num\n            _move_down(heap, 0)\n    return sorted(heap)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"Implements Newton's method for two-variable linear least-squares regression.\"\"\"\n    n = X.shape[0]\n    y = y.reshape(-1, 1)\n    H = 2.0 / n * X.T @ X\n    H_pinv = np.linalg.pinv(H)\n    w = np.array([[1.0], [1.0]])\n    for _ in range(max_iter):\n        residual = X @ w - y\n        gradient = 2.0 / n * (X.T @ residual)\n        grad_norm = np.linalg.norm(gradient)\n        if grad_norm < epsilon:\n            break\n        w -= H_pinv @ gradient\n    return np.round(w, decimals=4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import string\n_STOPWORDS = {'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"}\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\"\"\"\n    if lowercase:\n        line = line.lower()\n    tokens = line.split()\n    processed_tokens = []\n    for token in tokens:\n        if filter_punctuation:\n            stripped_token = token.strip(string.punctuation)\n        else:\n            stripped_token = token\n        if stripped_token:\n            processed_tokens.append(stripped_token)\n    if filter_stopwords:\n        processed_tokens = [token for token in processed_tokens if token not in _STOPWORDS]\n    return processed_tokens"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\"\"\"\n    (n, d) = (X.shape[0], X.shape[1])\n    w = np.zeros(d)\n    s = np.zeros_like(w)\n    start = 0\n    for _ in range(max_iter):\n        if n < batch_size:\n            X_batch = X\n            y_batch = y\n            m = n\n        else:\n            indices = (start + np.arange(batch_size)) % n\n            X_batch = X[indices]\n            y_batch = y[indices]\n            m = batch_size\n            start = (start + batch_size) % n\n        residual_batch = X_batch @ w - y_batch\n        g_batch = X_batch.T @ residual_batch / m\n        s = rho * s + (1 - rho) * g_batch ** 2\n        w -= eta * g_batch / (np.sqrt(s) + eps_station)\n        residual_full = X @ w - y\n        g_full = X.T @ residual_full / n\n        g_norm = np.linalg.norm(g_full)\n        if g_norm < epsilon:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function or its gradient (sigmoid) with numerical stability.\"\"\"\n    is_scalar = not isinstance(x, (list, np.ndarray))\n    x_np = np.array([x]) if is_scalar else np.asarray(x)\n    if deriv:\n        sigmoid = np.where(x_np >= 0, 1.0 / (1.0 + np.exp(-x_np)), np.exp(x_np) / (1.0 + np.exp(x_np)))\n        output = sigmoid\n    else:\n        mask = x_np > 0\n        softplus_vals = np.zeros_like(x_np)\n        x_pos = x_np[mask]\n        softplus_vals[mask] = x_pos + np.log1p(np.exp(-x_pos))\n        x_neg = x_np[~mask]\n        softplus_vals[~mask] = np.log1p(np.exp(x_neg))\n        output = softplus_vals\n    output_rounded = np.round(output, 4)\n    return output_rounded.item() if is_scalar else output_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    if len(sequence) < N:\n        return round(0.0, 4)\n    corpus_ngrams = [tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    count_ngrams = Counter(corpus_ngrams)\n    count_prefix = None\n    if N > 1:\n        corpus_prefix_ngrams = [tuple(corpus[i:i + (N - 1)]) for i in range(len(corpus) - (N - 1) + 1)]\n        count_prefix = Counter(corpus_prefix_ngrams)\n    total_log = 0.0\n    for i in range(len(sequence) - N + 1):\n        current_ngram = tuple(sequence[i:i + N])\n        numerator = count_ngrams.get(current_ngram, 0)\n        if numerator == 0:\n            return float('-inf')\n        if N == 1:\n            denominator = len(corpus)\n        else:\n            prefix = current_ngram[:-1]\n            denominator = count_prefix.get(prefix, 0)\n        if denominator == 0:\n            return float('-inf')\n        prob = numerator / denominator\n        total_log += np.log(prob)\n    return round(total_log, 4)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if y.size == 0:\n        return 0.0\n    if criterion not in {'entropy', 'gini', 'mse'}:\n        raise ValueError('Invalid criterion')\n    if criterion == 'entropy':\n        counts = np.unique(y, return_counts=True)[1]\n        probabilities = counts / y.size\n        entropy = -np.sum(probabilities * np.log2(probabilities))\n        return round(entropy, 4)\n    elif criterion == 'gini':\n        counts = np.unique(y, return_counts=True)[1]\n        probabilities = counts / y.size\n        gini = 1 - np.sum(probabilities ** 2)\n        return round(gini, 4)\n    else:\n        mean = np.mean(y)\n        mse = np.mean((y - mean) ** 2)\n        return round(mse, 4)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\"\"\"\n    X_arr = np.array(X)\n    y_arr = np.array(y)\n    W_arr = np.array(W)\n    if X_arr.ndim != 2:\n        return -1\n    (n_samples, n_features) = X_arr.shape\n    if y_arr.ndim == 1:\n        y_processed = y_arr.reshape(-1, 1)\n    elif y_arr.ndim == 2 and y_arr.shape[1] == 1:\n        y_processed = y_arr\n    else:\n        return -1\n    if y_processed.shape[0] != n_samples:\n        return -1\n    if W_arr.ndim == 1:\n        W_processed = W_arr.reshape(-1, 1)\n    elif W_arr.ndim == 2 and W_arr.shape[1] == 1:\n        W_processed = W_arr\n    else:\n        return -1\n    if W_processed.shape[0] != n_features:\n        return -1\n    residual = X_arr.dot(W_processed) - y_processed\n    gradient = X_arr.T.dot(residual) / n_samples\n    gradient_rounded = np.round(gradient, 4)\n    return gradient_rounded.tolist()"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model with polynomial features using coordinate descent.\"\"\"\n    X = np.asarray(X).flatten()\n    y = np.asarray(y).flatten()\n    m = X.shape[0]\n    if m == 0:\n        return [0.0] * (degree + 1)\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    residual = y - X_poly @ w\n    for _ in range(n_iterations):\n        max_delta = 0.0\n        sum_other_terms = X_poly[:, 1:] @ w[1:]\n        w0_new = np.mean(y - sum_other_terms)\n        delta_w0 = abs(w0_new - w[0])\n        if delta_w0 > max_delta:\n            max_delta = delta_w0\n        residual -= w0_new - w[0]\n        w[0] = w0_new\n        for j in range(1, degree + 1):\n            Xj = X_poly[:, j]\n            Xj_squared_sum = Xj @ Xj\n            if Xj_squared_sum == 0:\n                new_wj = 0.0\n            else:\n                rho_j = Xj @ residual + w[j] * Xj_squared_sum\n                if abs(rho_j) <= reg_factor:\n                    new_wj = 0.0\n                else:\n                    new_wj = np.sign(rho_j) * (abs(rho_j) - reg_factor) / Xj_squared_sum\n            delta = abs(new_wj - w[j])\n            if delta > max_delta:\n                max_delta = delta\n            residual += (w[j] - new_wj) * Xj\n            w[j] = new_wj\n        if max_delta < tol:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the backward probability vector beta_t for the given HMM parameters and observation sequence.\"\"\"\n    N = len(A)\n    T = len(obs)\n    if t == T - 1:\n        return [round(1.0, 4) for _ in range(N)]\n    beta_prev = [1.0 for _ in range(N)]\n    for s in range(T - 2, t - 1, -1):\n        o = obs[s + 1]\n        beta_current = []\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                total += A[i][j] * B[j][o] * beta_prev[j]\n            beta_current.append(total)\n        beta_prev = beta_current\n    return [round(x, 4) for x in beta_prev]"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    k = np.arange(N).reshape(-1, 1)\n    n = np.arange(N)\n    exponent = -2j * np.pi * k * n / N\n    dft_matrix = np.exp(exponent)\n    coefficients = dft_matrix @ frame\n    rounded_coeffs = np.around(coefficients, 4)\n    if positive_only:\n        return rounded_coeffs[:N // 2 + 1].tolist()\n    else:\n        return rounded_coeffs.tolist()"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A, dtype=np.float64)\n    B = np.array(B, dtype=np.float64)\n    pi = np.array(pi, dtype=np.float64)\n    obs = np.array(obs, dtype=int)\n    T = len(obs)\n    N = len(pi)\n    if T == 0:\n        return 0.0\n    beta_prev = np.ones(N, dtype=np.float64)\n    for t in reversed(range(T - 1)):\n        o = obs[t + 1]\n        temp = B[:, o] * beta_prev\n        beta_prev = A.dot(temp)\n    total = np.sum(pi * B[:, obs[0]] * beta_prev)\n    return round(total, 6)"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\"\"\"\n    sum_S = np.sum(S)\n    if not np.isclose(sum_S, 1.0, atol=1e-08):\n        return -1\n    for row in A:\n        sum_row = np.sum(row)\n        if not np.isclose(sum_row, 1.0, atol=1e-08):\n            return -1\n    for row in B:\n        sum_row = np.sum(row)\n        if not np.isclose(sum_row, 1.0, atol=1e-08):\n            return -1\n    if seed is not None:\n        np.random.seed(seed)\n    current_state = np.random.choice(len(S), p=S)\n    states = [current_state]\n    observation = np.random.choice(len(B[current_state]), p=B[current_state])\n    observations = [observation]\n    for _ in range(n_sample - 1):\n        current_state = np.random.choice(len(A[current_state]), p=A[current_state])\n        states.append(current_state)\n        observation = np.random.choice(len(B[current_state]), p=B[current_state])\n        observations.append(observation)\n    return (states, observations)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    updated_w = w - learning_rate * new_update\n    return (np.round(updated_w, 4).tolist(), np.round(new_update, 4).tolist())"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1.0\n    if len(A) != n:\n        return -1.0\n    for row in A:\n        if len(row) != n:\n            return -1.0\n    if len(B) != n:\n        return -1.0\n    if n == 0:\n        return -1.0\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1.0\n    if not observations:\n        return -1.0\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1.0\n    T = len(observations)\n    alpha_prev = [S[i] * B[i][observations[0]] for i in range(n)]\n    for t in range(1, T):\n        current_obs = observations[t]\n        alpha_current = []\n        for j in range(n):\n            total = 0.0\n            for i in range(n):\n                total += alpha_prev[i] * A[i][j]\n            alpha_current.append(total * B[j][current_obs])\n        alpha_prev = alpha_current\n    final_prob = sum(alpha_prev)\n    return round(final_prob, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nclass TreeNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.node_link = None\ndef build_fp_tree(transactions_with_counts, min_support):\n    item_counts = defaultdict(int)\n    for (transaction, count) in transactions_with_counts:\n        for item in transaction:\n            item_counts[item] += count\n    frequent_items = {item for (item, cnt) in item_counts.items() if cnt >= min_support}\n    if not frequent_items:\n        return (None, None)\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    root = TreeNode(None, 0, None)\n    header_table = {}\n    for item in sorted_items:\n        header_table[item] = [item_counts[item], None]\n    for (transaction, count) in transactions_with_counts:\n        sorted_transaction = [item for item in sorted_items if item in transaction]\n        if not sorted_transaction:\n            continue\n        current_node = root\n        for item in sorted_transaction:\n            if item in current_node.children:\n                current_node = current_node.children[item]\n                current_node.count += count\n            else:\n                new_node = TreeNode(item, count, current_node)\n                current_node.children[item] = new_node\n                current_node = new_node\n                if header_table[item][1] is None:\n                    header_table[item][1] = new_node\n                else:\n                    last_node = header_table[item][1]\n                    while last_node.node_link is not None:\n                        last_node = last_node.node_link\n                    last_node.node_link = new_node\n    return (root, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    if not transactions or min_support < 1:\n        return []\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    filtered_transactions = []\n    for trans in transactions:\n        unique_trans = list(set(trans))\n        filtered = [item for item in unique_trans if item in frequent_items]\n        if filtered:\n            filtered.sort(key=lambda x: sorted_items.index(x))\n            filtered_transactions.append(filtered)\n    if not filtered_transactions:\n        return []\n    transactions_with_counts = [(t, 1) for t in filtered_transactions]\n    (root, header_table) = build_fp_tree(transactions_with_counts, min_support)\n    if not header_table:\n        return []\n    header_list = sorted(header_table.items(), key=lambda x: (-x[1][0], x[0]))\n    frequent_itemsets = []\n\n    def mine_tree(header_list, prefix, frequent_itemsets):\n        for (item, (support, head_node)) in reversed(header_list):\n            new_prefix = prefix.copy()\n            new_prefix.append(item)\n            new_prefix_sorted = sorted(new_prefix)\n            frequent_itemsets.append(tuple(new_prefix_sorted))\n            conditional_patterns = []\n            node = head_node\n            while node is not None:\n                path = []\n                current = node.parent\n                while current.parent is not None:\n                    path.append(current.item)\n                    current = current.parent\n                path.reverse()\n                if path:\n                    conditional_patterns.append((path, node.count))\n                node = node.node_link\n            if conditional_patterns:\n                (cond_root, cond_header_table) = build_fp_tree(conditional_patterns, min_support)\n                if cond_header_table is not None:\n                    cond_header_list = sorted(cond_header_table.items(), key=lambda x: (-x[1][0], x[0]))\n                    mine_tree(cond_header_list, new_prefix_sorted, frequent_itemsets)\n    mine_tree(header_list, [], frequent_itemsets)\n    unique_itemsets = set(frequent_itemsets)\n    sorted_itemsets = [list(items) for items in unique_itemsets]\n    sorted_itemsets.sort(key=lambda x: (len(x), x))\n    return sorted_itemsets"}
{"task_id": 71, "completion_id": 0, "solution": "def label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    counts = {}\n    for sample in data:\n        label = sample[-1]\n        counts[label] = counts.get(label, 0) + 1\n    return counts"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"Calculate the variance reduction after splitting a node into two children.\"\"\"\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    var_parent = np.var(y, axis=0, ddof=0).sum()\n    var_left = np.var(y_left, axis=0, ddof=0).sum()\n    var_right = np.var(y_right, axis=0, ddof=0).sum()\n    vr = var_parent - n_left / n * var_left - n_right / n * var_right\n    return round(vr, 4)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    if frames.ndim == 1:\n        frames = frames.reshape(1, -1)\n    fft_coefficients = np.fft.rfft(frames, axis=1)\n    magnitudes = np.abs(fft_coefficients)\n    rounded_magnitudes = np.around(magnitudes, decimals=4)\n    return rounded_magnitudes.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\"\"\"\n    n_train = len(X_train)\n    n_test = len(X_test)\n    if not isinstance(k, int) or k <= 0 or k > n_train:\n        return [-1] * n_test\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for x in X_test_np:\n        distances = np.sum((X_train_np - x) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train_np[nearest_indices]\n        label_counts = {}\n        for label in nearest_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        max_count = max(label_counts.values())\n        candidates = [label for (label, count) in label_counts.items() if count == max_count]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    eps = np.finfo(y_pred.dtype).eps\n    log_probs = np.log(y_pred + eps)\n    loss = -np.sum(y * log_probs)\n    return round(loss.item(), 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\"\"\"\n    L = len(parameters) // 2\n    caches = []\n    A_prev = X\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        if l == L:\n            A = 1 / (1 + np.exp(-Z))\n        else:\n            A = np.maximum(0, Z)\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        caches.append((linear_cache, activation_cache))\n        A_prev = A\n    AL_rounded = np.round(A_prev, 4)\n    return (AL_rounded.tolist(), caches)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    params_np = np.array(params, dtype=np.float64)\n    grads_np = np.array(grads, dtype=np.float64)\n    m_np = np.array(m, dtype=np.float64)\n    u_np = np.array(u, dtype=np.float64)\n    m_new = beta1 * m_np + (1 - beta1) * grads_np\n    u_new = np.maximum(beta2 * u_np, np.abs(grads_np))\n    denominator = 1 - beta1 ** t\n    step = learning_rate / denominator * m_new / (u_new + epsilon)\n    params_updated = params_np - step\n    new_t = t + 1\n    updated_params = np.round(params_updated, 6).tolist()\n    updated_m = np.round(m_new, 6).tolist()\n    updated_u = np.round(u_new, 6).tolist()\n    return (updated_params, updated_m, updated_u, new_t)"}
{"task_id": 80, "completion_id": 0, "solution": "import numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\"\"\"\n    w_np = np.asarray(w)\n    grad_w_np = np.asarray(grad_w)\n    e_grad = (1 - rho) * grad_w_np ** 2\n    rms_grad = np.sqrt(e_grad + eps)\n    rms_delta = np.sqrt(eps)\n    adaptive_lr = rms_delta / rms_grad\n    delta_w = adaptive_lr * grad_w_np\n    new_w = w_np - delta_w\n    return np.round(new_w, 4).tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.size\n    log_probs = Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)\n    cost = -np.sum(log_probs) / m\n    return round(cost.item(), 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q_array = np.asarray(Q)\n    n = Q_array.size\n    if n == 0:\n        return []\n    a_star = np.argmax(Q_array)\n    base = epsilon / n\n    probs = np.full(n, base, dtype=np.float64)\n    probs[a_star] += 1 - epsilon\n    rounded_probs = np.round(probs, 4)\n    return rounded_probs.tolist()"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    numerator = np.dot(residuals, h_pred)\n    denominator = np.dot(h_pred, h_pred)\n    if denominator == 0:\n        gamma = 1.0\n    else:\n        gamma = numerator / denominator\n    return round(gamma, 4)"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    if lr == 0 or np.all(X == 0):\n        return np.round(W, 4).tolist()\n    N = X.shape[0]\n    Z = X @ W\n    exp_Z = np.exp(Z)\n    Y_hat = exp_Z / exp_Z.sum(axis=1, keepdims=True)\n    grad = X.T @ (Y_hat - Y) / N\n    W_new = W - lr * grad\n    return np.round(W_new, 4).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    samples = zip(*predictions)\n    aggregated = []\n    for sample_votes in samples:\n        counts = Counter(sample_votes)\n        max_count = max(counts.values())\n        candidates = [k for (k, v) in counts.items() if v == max_count]\n        candidates_sorted = sorted(candidates)\n        aggregated.append(candidates_sorted[0])\n    return aggregated"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        s = np.logaddexp(0.0, z)\n        rounded = np.round(s, 4)\n        return float(rounded)\n    else:\n        z_array = np.asarray(z)\n        s = np.logaddexp(0.0, z_array)\n        s_rounded = np.round(s, 4)\n        return s_rounded.tolist()"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\"\"\"\n    Z = np.dot(W, A_prev) + b\n    linear_cache = (A_prev, W, b)\n    if activation == 'relu':\n        A = np.maximum(0, Z)\n    elif activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        raise ValueError(f'Unsupported activation function: {activation}')\n    assert A.shape == (W.shape[0], A_prev.shape[1]), 'Output shape mismatch'\n    A_rounded = A.round(4).tolist()\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A_rounded, cache)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\"\"\"\n    ev_estimates = None\n    if hasattr(policy, 'ev_estimates'):\n        ev_estimates = policy.ev_estimates\n    elif isinstance(policy, dict) and 'ev_estimates' in policy:\n        ev_estimates = policy['ev_estimates']\n    else:\n        return np.nan\n    if not isinstance(ev_estimates, dict) or len(ev_estimates) == 0:\n        return np.nan\n    arm_evs = None\n    if hasattr(bandit, 'arm_evs'):\n        arm_evs = bandit.arm_evs\n    elif isinstance(bandit, dict) and 'arm_evs' in bandit:\n        arm_evs = bandit['arm_evs']\n    else:\n        return np.nan\n    if not isinstance(arm_evs, (list, tuple)):\n        return np.nan\n    n_arms = len(arm_evs)\n    for i in range(n_arms):\n        if i not in ev_estimates:\n            return np.nan\n    squared_errors = []\n    for i in range(n_arms):\n        true_val = arm_evs[i]\n        estimate_val = ev_estimates[i]\n        squared_error = (estimate_val - true_val) ** 2\n        squared_errors.append(squared_error)\n    average_mse = sum(squared_errors) / n_arms\n    return round(average_mse, 4)"}
{"task_id": 91, "completion_id": 0, "solution": "import numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]] | int:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    dA_np = np.array(dA)\n    Z_np = np.array(activation_cache)\n    if dA_np.shape != Z_np.shape:\n        return -1\n    mask = Z_np > 0\n    dZ_np = dA_np * mask\n    return dZ_np.tolist()"}
{"task_id": 92, "completion_id": 0, "solution": "import numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_arr = np.asarray(Z)\n    if Z_arr.ndim == 0:\n        Z_arr = Z_arr.reshape(1)\n    A = np.maximum(Z_arr, 0)\n    return (A.tolist(), Z_arr.tolist())"}
{"task_id": 94, "completion_id": 0, "solution": "from collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    counts = Counter(neighbors_targets)\n    max_count = max(counts.values())\n    candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n    sorted_candidates = sorted(candidates)\n    return sorted_candidates[0]"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    training_vocab = set()\n    for sentence in corpus:\n        tokens = sentence.split()\n        training_vocab.update(tokens)\n    V_size = len(training_vocab) + 1\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        for n in range(1, N + 1):\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i + n])\n                ngram_counts[n][ngram] += 1\n    sequence_tokens = sequence.split()\n    processed_tokens = [word if word in training_vocab else '<UNK>' for word in sequence_tokens]\n    if len(processed_tokens) < N:\n        return 0.0\n    total_log_prob = 0.0\n    for i in range(len(processed_tokens) - N + 1):\n        current_ngram = tuple(processed_tokens[i:i + N])\n        context = current_ngram[:-1]\n        count_ngram = ngram_counts[N].get(current_ngram, 0)\n        if N == 1:\n            count_context = sum(ngram_counts[1].values())\n        else:\n            count_context = ngram_counts[N - 1].get(context, 0)\n        numerator = count_ngram + K\n        denominator = count_context + K * V_size\n        prob = numerator / denominator\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 97, "completion_id": 0, "solution": "import numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    arr = np.asarray(Z)\n    der = (arr > 0).astype(float)\n    if der.ndim == 0:\n        return der.item()\n    else:\n        return der.tolist()"}
{"task_id": 99, "completion_id": 0, "solution": "import numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    elif isinstance(Z, list):\n        arr = np.array(Z)\n        return np.maximum(0, arr).tolist()\n    elif isinstance(Z, np.ndarray):\n        return np.maximum(0, Z)\n    else:\n        raise TypeError('Unsupported input type')"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    mismatches = np.sum(actual_array != predicted_array)\n    total = len(actual_array)\n    if total == 0:\n        return 0.0\n    error_rate = mismatches / total\n    return round(error_rate, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    max_x = np.max(x, axis=axis, keepdims=True)\n    shifted = x - max_x\n    exp_shifted = np.exp(shifted)\n    sum_exp = np.sum(exp_shifted, axis=axis, keepdims=True)\n    probabilities = exp_shifted / sum_exp\n    rounded = np.round(probabilities, 4)\n    return rounded.tolist()"}
{"task_id": 102, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    if not x:\n        return -1\n    if degree < 0:\n        return -1\n    if len(x) < degree + 1:\n        return -1\n    x_np = np.array(x)\n    y_np = np.array(y)\n    X_train = np.column_stack([x_np ** i for i in range(degree + 1)])\n    try:\n        (coefficients, _, _, _) = np.linalg.lstsq(X_train, y_np, rcond=None)\n    except:\n        return -1\n    x_pred_np = np.array(x_pred)\n    X_pred = np.column_stack([x_pred_np ** i for i in range(degree + 1)])\n    predictions = X_pred @ coefficients\n    rounded_predictions = np.round(predictions, 4).tolist()\n    return rounded_predictions"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\"\"\"\n\n    def entropy(arr: np.ndarray) -> float:\n        if len(arr) == 0:\n            return 0.0\n        counts = np.unique(arr, return_counts=True)[1]\n        probabilities = counts / len(arr)\n        return -np.sum(probabilities * np.log2(probabilities))\n    parent_entropy = entropy(y)\n    total_samples = len(y)\n    if total_samples == 0:\n        return 0.0\n    weighted_child_entropy = 0.0\n    for child in splits:\n        child_length = len(child)\n        if child_length == 0:\n            continue\n        child_weight = child_length / total_samples\n        weighted_child_entropy += child_weight * entropy(child)\n    information_gain_value = parent_entropy - weighted_child_entropy\n    return round(information_gain_value, 4)"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    x_arr = np.asarray(x)\n    x_flat = x_arr.ravel()\n    if x_flat.size == 0:\n        return []\n    coefficient = 1.0 / (np.sqrt(2 * np.pi) * sigma)\n    exponent = -(x_flat - mean) ** 2 / (2 * sigma ** 2)\n    pdf_values = coefficient * np.exp(exponent)\n    rounded = np.round(pdf_values, 5)\n    return rounded.tolist()"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\"\"\"\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    v_t = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    update = alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    theta_new = theta - update\n    theta_new_list = np.around(theta_new, 6).tolist()\n    m_t_list = np.around(m_t, 6).tolist()\n    v_t_list = np.around(v_t, 6).tolist()\n    return (theta_new_list, m_t_list, v_t_list, t + 1)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    best_loss = float('inf')\n    best_X_hat = None\n    for _ in range(max_iter):\n        H_HT = H @ H.T\n        reg_W = H_HT + alpha * np.eye(K)\n        inv_reg_W = np.linalg.inv(reg_W)\n        W = X @ H.T @ inv_reg_W\n        WT_W = W.T @ W\n        reg_H = WT_W + alpha * np.eye(K)\n        inv_reg_H = np.linalg.inv(reg_H)\n        H = inv_reg_H @ (W.T @ X)\n        X_hat = W @ H\n        frobenius_loss = np.linalg.norm(X - X_hat, 'fro') ** 2\n        reg_term = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        current_loss = frobenius_loss + reg_term\n        if current_loss < best_loss:\n            best_loss = current_loss\n            best_X_hat = X_hat.copy()\n        if best_loss <= tol:\n            break\n    return best_X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = []\n    indices = np.arange(m)\n    first_idx = np.random.choice(indices)\n    centroids.append(X[first_idx].copy())\n    for _ in range(1, K):\n        current_centroids = np.array(centroids)\n        dist_sq = np.sum((X[:, np.newaxis, :] - current_centroids) ** 2, axis=2)\n        min_dist_sq = np.min(dist_sq, axis=1)\n        sum_D = min_dist_sq.sum()\n        if sum_D == 0:\n            probabilities = np.ones(m) / m\n        else:\n            probabilities = min_dist_sq / sum_D\n        next_idx = np.random.choice(indices, p=probabilities)\n        centroids.append(X[next_idx].copy())\n    centroids = np.array(centroids)\n    prev_labels = None\n    for _ in range(max_iter):\n        dist_sq = ((X[:, np.newaxis, :] - centroids) ** 2).sum(axis=2)\n        labels = np.argmin(dist_sq, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        new_centroids = []\n        for i in range(K):\n            mask = labels == i\n            if np.sum(mask) == 0:\n                new_centroid = centroids[i].copy()\n            else:\n                new_centroid = X[mask].mean(axis=0)\n            new_centroids.append(new_centroid)\n        centroids = np.array(new_centroids)\n        prev_labels = labels.copy()\n    centroids_rounded = np.round(centroids, decimals=4)\n    centroids_list = centroids_rounded.tolist()\n    centroids_list.sort(key=lambda x: (x[0], x))\n    return centroids_list"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    truncated_text = text[:time_steps]\n    encoded = [vocabulary.get(c, 0) for c in truncated_text]\n    pad_length = time_steps - len(encoded)\n    encoded += [0] * pad_length\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer token ids back to a string, ignoring padding tokens (0).\"\"\"\n    return ''.join([inverse_vocab[idx] for idx in indices if idx != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs model prediction, and decodes the output.\"\"\"\n    encoded_sequence = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array([encoded_sequence])\n    prediction = model.predict(input_batch)\n    predicted_ids = np.argmax(prediction, axis=-1).squeeze()\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 112, "completion_id": 0, "solution": "import re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    words = [word.lower() for word in re.findall('[A-Za-z]+', text)]\n    if not words:\n        return []\n    word_counts = Counter(words)\n    tokens = []\n    for (word, count) in word_counts.items():\n        token = Token(word)\n        token.count = count\n        tokens.append(token)\n    tokens.sort(key=lambda x: (-x.count, x.word))\n    return tokens"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n        predictions.append(output_str)\n    return predictions"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    lambda_val = 1.0507009873554805\n    if derivative:\n        grad = np.where(x >= 0, 1, alpha * np.exp(x)) * lambda_val\n    else:\n        activated = np.where(x >= 0, x, alpha * (np.exp(x) - 1)) * lambda_val\n        grad = activated\n    rounded = np.around(grad, decimals=6)\n    return rounded.tolist()"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\"\"\"\n    m = X.shape[0]\n    y = y.ravel()\n    w = w.ravel()\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p_clipped = np.clip(p, epsilon, 1 - epsilon)\n    loss_terms = y * np.log(p_clipped) + (1 - y) * np.log(1 - p_clipped)\n    loss = -np.sum(loss_terms) / m\n    loss_rounded = np.round(loss, 4).item()\n    diff = p - y\n    gradient = X.T.dot(diff) / m\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.reshape(-1, 1).tolist()\n    return (loss_rounded, gradient_list)"}
{"task_id": 116, "completion_id": 0, "solution": "import numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    parent_mean = np.mean(y)\n    parent_mse = np.mean((y - parent_mean) ** 2)\n    n = y.size\n    mse_children = 0.0\n    for split in splits:\n        split_size = split.size\n        if split_size == 0:\n            continue\n        split_mean = np.mean(split)\n        split_mse = np.mean((split - split_mean) ** 2)\n        mse_children += split_size / n * split_mse\n    delta_mse = parent_mse - mse_children\n    return round(delta_mse, 4)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(n_clf, 1)\n    D = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        best_error = np.inf\n        best_j = -1\n        best_threshold = 0.0\n        best_sign = 1\n        for j in range(n):\n            sorted_indices = np.argsort(X_train[:, j])\n            X_sorted_j = X_train[sorted_indices, j]\n            y_sorted = y_train[sorted_indices]\n            weights_sorted = D[sorted_indices]\n            pos_mask = y_sorted == 1\n            neg_mask = y_sorted == -1\n            cum_pos = np.cumsum(pos_mask * weights_sorted)\n            cum_neg = np.cumsum(neg_mask * weights_sorted)\n            total_pos = cum_pos[-1] if len(cum_pos) > 0 else 0\n            total_neg = cum_neg[-1] if len(cum_neg) > 0 else 0\n            for k in range(len(X_sorted_j) - 1):\n                if X_sorted_j[k] == X_sorted_j[k + 1]:\n                    continue\n                sum_pos_left = cum_pos[k]\n                sum_neg_left = cum_neg[k]\n                sum_pos_right = total_pos - sum_pos_left\n                sum_neg_right = total_neg - sum_neg_left\n                error1 = sum_neg_left + sum_pos_right\n                error2 = sum_pos_left + sum_neg_right\n                current_error = min(error1, error2)\n                if current_error < best_error:\n                    best_error = current_error\n                    best_j = j\n                    best_threshold = (X_sorted_j[k] + X_sorted_j[k + 1]) / 2\n                    best_sign = 1 if error1 < error2 else -1\n        eps = 1e-15\n        error_t = max(eps, min(best_error, 1 - eps))\n        alpha = 0.5 * np.log((1 - error_t) / error_t)\n        stumps.append((alpha, best_j, best_threshold, best_sign))\n        h_train = np.where(X_train[:, best_j] <= best_threshold, best_sign, -best_sign)\n        D *= np.exp(-alpha * y_train * h_train)\n        D /= D.sum()\n    predictions = []\n    for x in X_test:\n        sum_alpha_h = 0.0\n        for (alpha, j, threshold, sign) in stumps:\n            if x[j] <= threshold:\n                h = sign\n            else:\n                h = -sign\n            sum_alpha_h += alpha * h\n        predictions.append(1 if sum_alpha_h >= 0 else -1)\n    return predictions"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    if not params or not grads or len(params) != len(grads):\n        return []\n    updated_params = []\n    for (param, grad) in zip(params, grads):\n        new_param = param - alpha * grad\n        rounded_param = np.round(new_param, 4)\n        updated_params.append(rounded_param.tolist())\n    return updated_params"}
{"task_id": 120, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\"\"\"\n    if len(X) != len(y):\n        return -1\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    m = X_np.shape[0] if X_np.ndim > 0 else 0\n    if m == 0:\n        X_aug = np.ones((0, 1))\n    else:\n        ones_col = np.ones((m, 1))\n        X_aug = np.hstack((ones_col, X_np))\n    N = X_aug.shape[1] if X_aug.size > 0 else 1\n    low = -1.0 / math.sqrt(N)\n    high = 1.0 / math.sqrt(N)\n    w = np.random.uniform(low=low, high=high, size=N)\n    for _ in range(n_iterations):\n        if m == 0:\n            break\n        predictions = X_aug.dot(w)\n        errors = predictions - y_np\n        gradient = X_aug.T @ errors / m\n        w -= learning_rate * gradient\n    return [round(weight, 4) for weight in w]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    ones = np.ones((X_np.shape[0], 1))\n    X_aug = np.hstack((ones, X_np))\n    weights = np.linalg.pinv(X_aug) @ y_np\n    return [round(w, 4) for w in weights.tolist()]"}
{"task_id": 123, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\"\"\"\n    unique_cats = np.unique(y)\n    category_to_index = {cat: idx for (idx, cat) in enumerate(unique_cats)}\n    encoded = []\n    for sample in y:\n        row = [0] * len(unique_cats)\n        row[category_to_index[sample]] = 1\n        encoded.append(row)\n    return encoded"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\"\"\"\n    X_np = np.array(X)\n    Y_np = X_np if Y is None else np.array(Y)\n    C = X_np.shape[1]\n    gamma_val = gamma if gamma is not None else 1.0 / C\n    dot_product = X_np @ Y_np.T\n    gram_matrix = (gamma_val * dot_product + c0) ** d\n    return np.round(gram_matrix, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "def confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    classes = sorted(set(y_true) | set(y_pred))\n    class_to_idx = {cls: idx for (idx, cls) in enumerate(classes)}\n    c = len(classes)\n    matrix = [[0 for _ in range(c)] for _ in range(c)]\n    for (true_cls, pred_cls) in zip(y_true, y_pred):\n        i = class_to_idx[true_cls]\n        j = class_to_idx[pred_cls]\n        matrix[i][j] += 1\n    return matrix"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\"\"\"\n    if n_components == 0:\n        return []\n    (m, d) = X.shape\n    classes = np.unique(y)\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        class_mean = np.mean(X_c, axis=0)\n        X_c_centered = X_c - class_mean\n        S_W += X_c_centered.T @ X_c_centered\n    S_B = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        class_mean = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        diff = class_mean - global_mean\n        S_B += n_c * np.outer(diff, diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        eigenvector = sorted_eigenvectors[:, i]\n        for j in range(eigenvector.shape[0]):\n            if not np.isclose(eigenvector[j], 0, atol=1e-08):\n                if eigenvector[j] < 0:\n                    sorted_eigenvectors[:, i] = -eigenvector\n                break\n    W = sorted_eigenvectors[:, :n_components]\n    X_proj = X @ W\n    X_proj_rounded = np.round(X_proj, 4)\n    return X_proj_rounded.tolist()"}
{"task_id": 129, "completion_id": 0, "solution": "from itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    return list(islice(cycle(sequence), samples))"}
{"task_id": 130, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[Any]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\"\"\"\n    next_states = [t[3] for t in transitions if t[0] == state and t[1] == action]\n    if not next_states:\n        return []\n    counts = Counter(next_states)\n    total = len(next_states)\n    sorted_items = sorted(counts.items(), key=lambda x: x[0])\n    result = []\n    for (s, cnt) in sorted_items:\n        prob = round(cnt / total, 4)\n        result.append([s, prob])\n    return result"}
{"task_id": 131, "completion_id": 0, "solution": "def get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n    sequence = _SHARED_SEQUENCES[uid]\n    n = len(sequence)\n    if n == 0:\n        return None\n    if i < -n or i >= n:\n        return None\n    return sequence[i]"}
{"task_id": 132, "completion_id": 0, "solution": "import numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return z\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    else:\n        return z"}
{"task_id": 133, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    for sample in X_train:\n        for token in sample:\n            if token < 0 or token >= vocab_length:\n                return -1\n    Y = []\n    for sample in X_train:\n        time_steps = []\n        for token in sample:\n            one_hot = [0] * vocab_length\n            one_hot[token] = 1\n            time_steps.append(one_hot)\n        Y.append(time_steps)\n    return Y"}
{"task_id": 134, "completion_id": 0, "solution": "def best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    if not payoff_probs:\n        return (-1.0, -1)\n    for prob in payoff_probs:\n        if not 0.0 <= prob <= 1.0:\n            return (-1.0, -1)\n    max_prob = -1.0\n    best_index = -1\n    for (index, prob) in enumerate(payoff_probs):\n        if prob > max_prob:\n            max_prob = prob\n            best_index = index\n    return (float(max_prob), best_index)"}
{"task_id": 135, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Implements OLS Linear Regression using the normal equation.\"\"\"\n    X_train_np = np.array(X_train, dtype=np.float64)\n    y_train_np = np.array(y_train, dtype=np.float64)\n    X_test_np = np.array(X_test, dtype=np.float64)\n    n_samples_train = X_train_np.shape[0]\n    X_train_aug = np.hstack([np.ones((n_samples_train, 1)), X_train_np])\n    try:\n        X_T_X = X_train_aug.T @ X_train_aug\n        X_T_X_inv = np.linalg.inv(X_T_X)\n    except np.linalg.LinAlgError:\n        return -1\n    theta = X_T_X_inv @ (X_train_aug.T @ y_train_np)\n    n_samples_test = X_test_np.shape[0]\n    X_test_aug = np.hstack([np.ones((n_samples_test, 1)), X_test_np])\n    predictions = X_test_aug @ theta\n    return [round(float(pred), 4) for pred in predictions]"}
{"task_id": 136, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\"\"\"\n    max_z = np.max(z, axis=axis, keepdims=True)\n    shifted_z = z - max_z\n    exp_z = np.exp(shifted_z)\n    sum_exp = np.sum(exp_z, axis=axis, keepdims=True)\n    probabilities = exp_z / sum_exp\n    rounded = np.round(probabilities, 4)\n    return rounded.tolist()"}
{"task_id": 138, "completion_id": 0, "solution": "def accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1.0\n    correct = sum((1 for (a, b) in zip(y_true, y_pred) if a == b))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 139, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    if not z:\n        return []\n    result = []\n    for element in z:\n        exponent = -2 * element\n        e_term = np.exp(exponent)\n        val = 2.0 / (1 + e_term) - 1\n        rounded_val = round(val, 4)\n        result.append(rounded_val)\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if n == 0:\n        return -1\n    fire_time = [[math.inf] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (i, j) = q.popleft()\n        for (di, dj) in dirs:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < n and 0 <= nj < n:\n                if grid[ni][nj] != '#' and fire_time[ni][nj] > fire_time[i][j] + 1:\n                    fire_time[ni][nj] = fire_time[i][j] + 1\n                    q.append((ni, nj))\n    if fire_time[0][0] == 0 or fire_time[n - 1][n - 1] == 0:\n        return -1\n    if n == 1:\n        return 0\n    visited = [[math.inf] * n for _ in range(n)]\n    q_agent = deque()\n    q_agent.append((0, 0, 0))\n    visited[0][0] = 0\n    while q_agent:\n        (i, j, t) = q_agent.popleft()\n        for (di, dj) in dirs:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < n and 0 <= nj < n:\n                if grid[ni][nj] == '#':\n                    continue\n                new_time = t + 1\n                if fire_time[ni][nj] > new_time:\n                    if ni == n - 1 and nj == n - 1:\n                        return new_time\n                    if visited[ni][nj] > new_time:\n                        visited[ni][nj] = new_time\n                        q_agent.append((ni, nj, new_time))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    if metric == 'euclidean':\n        distances = np.sqrt(((X_test[:, np.newaxis] - X_train) ** 2).sum(axis=2))\n    elif metric == 'manhattan':\n        distances = np.abs(X_test[:, np.newaxis] - X_train).sum(axis=2)\n    elif metric == 'cosine':\n        dot_product = np.dot(X_test, X_train.T)\n        norm_test = np.linalg.norm(X_test, axis=1, keepdims=True)\n        norm_train = np.linalg.norm(X_train, axis=1)\n        cosine_sim = dot_product / (norm_test * norm_train)\n        distances = 1 - cosine_sim\n    nearest_indices = np.argpartition(distances, k, axis=1)[:, :k]\n    y_neighbors = y_train[nearest_indices]\n    y_pred = []\n    for neighbors in y_neighbors:\n        (labels, counts) = np.unique(neighbors, return_counts=True)\n        max_count = np.max(counts)\n        candidates = labels[counts == max_count]\n        y_pred.append(np.min(candidates))\n    return np.array(y_pred)"}
{"task_id": 143, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    if derivative:\n        return np.where(x >= 0, 1.0, alpha)\n    else:\n        return np.where(x >= 0, x, alpha * x)"}
{"task_id": 144, "completion_id": 0, "solution": "import numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    mae = np.mean(np.abs(actual - predicted))\n    return round(mae, 4)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n    predictions = []\n    n_train = X.shape[0]\n    k_adj = min(k, n_train)\n    for x in X_test:\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - x) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - x), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X, x)\n            norm_x = np.linalg.norm(x)\n            norm_X = np.linalg.norm(X, axis=1)\n            denominator = norm_X * norm_x + 1e-12\n            cosine_sim = dot_product / denominator\n            distances = 1 - cosine_sim\n        else:\n            raise ValueError(f\"Invalid metric '{metric}'. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n        sorted_indices = np.argsort(distances)\n        k_nearest_indices = sorted_indices[:k_adj]\n        k_nearest_labels = y[k_nearest_indices]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = unique_labels[counts == max_count]\n        predicted_label = np.min(candidates)\n        predictions.append(predicted_label)\n    return np.array(predictions).tolist()"}
{"task_id": 147, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\"\"\"\n    unique_classes = np.unique(y_train)\n    if len(unique_classes) == 1:\n        return [unique_classes[0]] * X_test.shape[0]\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(epochs):\n        z = np.dot(X_train, w) + b\n        p = 1 / (1 + np.exp(-z))\n        error = p - y_train\n        dw = np.dot(X_train.T, error) / n_samples\n        db = np.sum(error) / n_samples\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    z_test = np.dot(X_test, w) + b\n    p_test = 1 / (1 + np.exp(-z_test))\n    y_pred = (p_test >= 0.5).astype(int)\n    return y_pred.tolist()"}
{"task_id": 148, "completion_id": 0, "solution": "from typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    n = len(data)\n    if alpha == 0:\n        first = round(data[0], 4)\n        return [first] * n\n    if alpha == 1:\n        return [round(x, 4) for x in data]\n    smoothed = [data[0]]\n    for x in data[1:]:\n        next_s = (1 - alpha) * smoothed[-1] + alpha * x\n        smoothed.append(next_s)\n    return [round(num, 4) for num in smoothed]"}
{"task_id": 150, "completion_id": 0, "solution": "from heapq import heappush, heappop\nfrom typing import List, Tuple, Union\nimport math\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\"\"\"\n    m = len(grid)\n    n = len(grid[0]) if m > 0 else 0\n    if m == 0 or n == 0:\n        return -1\n    start = (0, 0)\n    goal = (m - 1, n - 1)\n    if grid[start[0]][start[1]] == 1 or grid[goal[0]][goal[1]] == 1:\n        return -1\n    if start == goal:\n        return [start]\n    g_scores = [[math.inf for _ in range(n)] for _ in range(m)]\n    g_scores[start[0]][start[1]] = 0\n    parent = [[None for _ in range(n)] for _ in range(m)]\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    start_h = m - 1 - start[0] + (n - 1 - start[1])\n    heappush(heap, (start_h + 0, 0, start[0], start[1]))\n    while heap:\n        (f_current, g_current, row, col) = heappop(heap)\n        if (row, col) == goal:\n            path = []\n            current = (row, col)\n            while current is not None:\n                path.append(current)\n                current = parent[current[0]][current[1]]\n            path.reverse()\n            return path\n        if g_current > g_scores[row][col]:\n            continue\n        for (dr, dc) in directions:\n            new_row = row + dr\n            new_col = col + dc\n            if 0 <= new_row < m and 0 <= new_col < n and (grid[new_row][new_col] == 0):\n                tentative_g = g_current + 1\n                if tentative_g < g_scores[new_row][new_col]:\n                    g_scores[new_row][new_col] = tentative_g\n                    parent[new_row][new_col] = (row, col)\n                    h = m - 1 - new_row + (n - 1 - new_col)\n                    f = tentative_g + h\n                    heappush(heap, (f, tentative_g, new_row, new_col))\n    return -1"}
{"task_id": 151, "completion_id": 0, "solution": "import numpy as np\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\"\"\"\n    activation = activation.lower()\n    A = None\n    dA = None\n    if activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-X))\n        dA = A * (1 - A)\n    elif activation == 'tanh':\n        A = np.tanh(X)\n        dA = 1 - A ** 2\n    elif activation == 'relu':\n        A = np.maximum(0, X)\n        dA = (A > 0).astype(np.float64)\n    elif activation == 'softmax':\n        max_X = np.max(X, axis=-1, keepdims=True)\n        exp_X = np.exp(X - max_X)\n        A = exp_X / np.sum(exp_X, axis=-1, keepdims=True)\n        dA = np.ones_like(A)\n    else:\n        raise ValueError(f'Unsupported activation function: {activation}')\n    grad = upstream_grad * dA\n    return (np.round(A, 4), np.round(grad, 4))"}
{"task_id": 152, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.size == 0 or y_pred.size == 0 or len(y_true) != len(y_pred):\n        return -1\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 154, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    X_sq = np.sum(X ** 2, axis=1).reshape(-1, 1)\n    Y_sq = np.sum(Y ** 2, axis=1).reshape(1, -1)\n    squared_distances = X_sq + Y_sq - 2 * np.dot(X, Y.T)\n    K = np.exp(-gamma * squared_distances)\n    return np.round(K, 6).tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    x = np.asarray(state)\n    x = np.dot(x, weights['W1']) + weights['b1']\n    x = np.maximum(x, 0)\n    x = np.dot(x, weights['W2']) + weights['b2']\n    x = np.maximum(x, 0)\n    x = np.dot(x, weights['W3']) + weights['b3']\n    x = np.tanh(x)\n    return np.round(x, 4).tolist()"}
{"task_id": 157, "completion_id": 0, "solution": "def accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if not y_true:\n        return 0\n    correct = sum((1 for (t, p) in zip(y_true, y_pred) if t == p))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 158, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    if fit_intercept:\n        ones = np.ones((X_np.shape[0], 1))\n        X_np = np.hstack([ones, X_np])\n    K = X_np.shape[1]\n    if fit_intercept:\n        diag = np.zeros(K)\n        diag[1:] = alpha\n    else:\n        diag = alpha * np.ones(K)\n    A = np.diag(diag)\n    XtX = X_np.T @ X_np\n    XtX_plus_A = XtX + A\n    inv_XtXA = np.linalg.inv(XtX_plus_A)\n    beta = inv_XtXA @ (X_np.T @ y_np)\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 159, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    (m, n_original) = X.shape\n    if fit_intercept:\n        intercept_col = np.ones((m, 1))\n    else:\n        intercept_col = np.zeros((m, 1))\n    X_new = np.hstack((intercept_col, X))\n    n_new = X_new.shape[1]\n    w = np.zeros(n_new)\n    m = X_new.shape[0]\n    for _ in range(max_iters):\n        if fit_intercept:\n            residuals = y - X_new[:, 1:] @ w[1:]\n            w[0] = np.mean(residuals)\n        for j in range(1, n_new):\n            old_wj = w[j]\n            w[j] = 0.0\n            r_j = y - X_new @ w\n            xj = X_new[:, j]\n            rho_j = xj.dot(r_j)\n            sum_xj_sq = xj.dot(xj)\n            if sum_xj_sq == 0.0:\n                w_j_new = 0.0\n            else:\n                tau = lambda_param * m\n                soft_val = np.sign(rho_j) * np.maximum(np.abs(rho_j) - tau, 0.0)\n                w_j_new = soft_val / sum_xj_sq\n            w[j] = w_j_new\n    bias = round(float(w[0]), 4)\n    weights = [round(float(weight), 4) for weight in w[1:]]\n    return (weights, bias)"}
{"task_id": 161, "completion_id": 0, "solution": "import numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"Predict binary labels using Factorization Machine model.\"\"\"\n    linear_term = w0 + X.dot(w)\n    xv = X @ V\n    sum_square = (xv ** 2).sum(axis=1)\n    v_squared_sum = (V ** 2).sum(axis=1)\n    x_squared = X ** 2\n    sum_other = x_squared @ v_squared_sum\n    interaction_term = 0.5 * (sum_square - sum_other)\n    scores = linear_term + interaction_term\n    labels = np.where(scores >= 0, 1, -1).tolist()\n    return labels"}
{"task_id": 162, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\"\"\"\n    assert Y_hat.shape == Y.shape, 'Shapes must match'\n    m = Y_hat.shape[0]\n    Y_hat_eps = Y_hat + epsilon\n    element_wise = Y * np.log(Y_hat_eps)\n    total_loss = np.sum(element_wise)\n    loss = -total_loss / m\n    loss_rounded = round(loss.item(), 4)\n    gradient = (Y_hat - Y) / m\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.tolist()\n    return (loss_rounded, gradient_list)"}
{"task_id": 163, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    X_array = np.array(X)\n    y_array = np.array(y)\n    n_samples = len(X_array)\n    X_poly = np.vander(X_array, degree + 1, increasing=True)\n    if l1_ratio == 0:\n        n_features = X_poly.shape[1]\n        XtX = X_poly.T @ X_poly\n        reg_matrix = np.eye(n_features)\n        reg_matrix[0, 0] = 0\n        reg_matrix *= reg_factor * (1 - l1_ratio) / 2\n        XtX_reg = XtX + reg_matrix\n        Xty = X_poly.T @ y_array\n        beta = np.linalg.solve(XtX_reg, Xty)\n    else:\n        beta = np.zeros(X_poly.shape[1])\n        for _ in range(n_iterations):\n            y_hat = X_poly @ beta\n            error = y_hat - y_array\n            gradient_mse = 2.0 / n_samples * X_poly.T @ error\n            reg_grad = np.zeros_like(beta)\n            beta_rest = beta[1:]\n            if beta_rest.size > 0:\n                l1_grad = np.sign(beta_rest)\n                l1_grad[beta_rest == 0] = 0\n                reg_grad_rest = reg_factor * (l1_ratio * l1_grad + (1 - l1_ratio) * beta_rest)\n                reg_grad[1:] = reg_grad_rest\n            total_gradient = gradient_mse + reg_grad\n            beta -= learning_rate * total_gradient\n    predictions = X_poly @ beta\n    return [round(p, 4) for p in predictions.tolist()]"}
{"task_id": 164, "completion_id": 0, "solution": "import numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"Compute the binary classification log-loss (cross-entropy loss) between actual labels and predicted probabilities.\"\"\"\n    epsilon = 1e-15\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    loss = -(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted)).mean()\n    return round(loss, 6)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    N = len(x)\n    if N == 0:\n        return 0.0\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    sum_diff = np.sum(x_arr != y_arr)\n    normalized = sum_diff / N\n    return round(normalized, 4)"}
{"task_id": 166, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\"\"\"\n    n_features = X_train.shape[1]\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        errors = 0\n        for i in range(X_train.shape[0]):\n            x_i = X_train[i]\n            y_i = y_train[i]\n            margin = y_i * (np.dot(w, x_i) + b)\n            if margin <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        if errors == 0:\n            break\n    scores = X_test.dot(w) + b\n    predictions = np.where(scores >= 0, 1, -1).tolist()\n    return predictions"}
{"task_id": 167, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    m = y_hat.size\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    gradient = (y_hat_clipped - y) / m\n    loss_rounded = np.round(loss, 4).item()\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 168, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    classes = np.unique(y_train)\n    params = []\n    for c in classes:\n        mask = y_train == c\n        X_c = X_train[mask]\n        n_c = X_c.shape[0]\n        prior = np.log(n_c / X_train.shape[0])\n        means = np.mean(X_c, axis=0)\n        variances = np.var(X_c, axis=0, ddof=0) + 1e-06\n        params.append((c, prior, means, variances))\n    predictions = []\n    for x in X_test:\n        max_log_p = -np.inf\n        best_class = None\n        for (c, prior, means, variances) in params:\n            diff = x - means\n            exponent = diff ** 2 / variances\n            log_terms = np.log(2 * np.pi * variances)\n            log_likelihood = -0.5 * np.sum(exponent + log_terms)\n            log_p = prior + log_likelihood\n            if log_p > max_log_p:\n                max_log_p = log_p\n                best_class = c\n        predictions.append(best_class)\n    return predictions"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    valid_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in valid_windows:\n        raise ValueError('Unknown window type')\n    n = np.arange(N)\n    if window == 'hamming':\n        arg = 2 * np.pi * n / (N - 1)\n        w = 0.54 - 0.46 * np.cos(arg)\n    elif window == 'hann':\n        arg = 2 * np.pi * n / (N - 1)\n        w = 0.5 - 0.5 * np.cos(arg)\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        arg = 2 * np.pi * n / (N - 1)\n        term1 = a1 * np.cos(arg)\n        term2 = a2 * np.cos(2 * arg)\n        term3 = a3 * np.cos(3 * arg)\n        w = a0 - term1 + term2 - term3\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided for generalized_cosine window')\n        arg = 2 * np.pi * n / (N - 1)\n        w = np.zeros(N)\n        for (k, a) in enumerate(coefficients):\n            w += a * np.cos(k * arg)\n    rounded = np.round(w, 4)\n    return rounded.tolist()"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \"\"\"\n    unique_labels = list(set(y_train))\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    unique_labels = sorted(unique_labels)\n    (label0, label1) = unique_labels\n    label_map = {label0: 0, label1: 1}\n    inverse_map = {0: label0, 1: label1}\n    y_internal = np.array([label_map[y] for y in y_train])\n    X_train_np = np.hstack([np.ones((len(X_train), 1)), np.array(X_train)])\n    X_test_np = np.hstack([np.ones((len(X_test), 1)), np.array(X_test)])\n    weights = np.zeros(X_train_np.shape[1])\n    m = X_train_np.shape[0]\n    for epoch in range(epochs):\n        indices = np.random.permutation(m)\n        X_shuffled = X_train_np[indices]\n        y_shuffled = y_internal[indices]\n        for i in range(0, m, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = X_batch.dot(weights)\n            h = 1 / (1 + np.exp(-z))\n            error = h - y_batch\n            gradient = X_batch.T.dot(error) / len(X_batch)\n            weights -= learning_rate * gradient\n    z_test = X_test_np.dot(weights)\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions_internal = (probabilities >= 0.5).astype(int)\n    return [inverse_map[pred] for pred in predictions_internal.tolist()]"}
{"task_id": 172, "completion_id": 0, "solution": "import numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    if np.isscalar(z):\n        derivative = 1 - np.tanh(z) ** 2\n        rounded = np.round(derivative, 4)\n        return float(rounded)\n    else:\n        arr = np.asarray(z)\n        derivative = 1 - np.tanh(arr) ** 2\n        rounded = np.round(derivative, 4)\n        result = rounded.tolist()\n        if arr.ndim == 0:\n            return [result]\n        else:\n            return result"}
{"task_id": 173, "completion_id": 0, "solution": "def alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    total = 0\n    for (c, t) in zip(candidate, target):\n        total += abs(ord(c) - ord(t))\n    return total"}
{"task_id": 174, "completion_id": 0, "solution": "import numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-12\n    clipped_predictions = np.clip(predictions, epsilon, 1.0)\n    log_p = np.log(clipped_predictions)\n    sum_per_sample = np.sum(labels * log_p, axis=1)\n    loss = -np.mean(sum_per_sample)\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n    return (round(loss, 4), round(accuracy, 4))"}
{"task_id": 175, "completion_id": 0, "solution": "import numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    w = np.array(weights)\n    sum_sq = np.sum(w ** 2)\n    penalty = C * sum_sq\n    return round(penalty, 4)"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    y_converted = np.where(y_train == 1, 1, -1)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_j = -1\n        best_threshold = None\n        best_polarity = None\n        best_h = None\n        for j in range(n_features):\n            unique_values = np.unique(X_train[:, j])\n            for threshold in unique_values:\n                for polarity in [1, -1]:\n                    if polarity == 1:\n                        h = np.where(X_train[:, j] < threshold, 1, -1)\n                    else:\n                        h = np.where(X_train[:, j] >= threshold, 1, -1)\n                    error = np.sum(weights * (h != y_converted))\n                    current_candidate = (error, j, threshold, polarity)\n                    if current_candidate < (best_error, best_j, best_threshold, best_polarity):\n                        (best_error, best_j, best_threshold, best_polarity) = current_candidate\n                        best_h = h.copy()\n        if best_error < 1e-10:\n            alpha = 0.5 * np.log((1.0 - best_error) / (best_error + 1e-10))\n            stumps.append((best_j, best_threshold, best_polarity, alpha))\n            break\n        alpha = 0.5 * np.log((1.0 - best_error) / (best_error + 1e-10))\n        exponent = -alpha * y_converted * best_h\n        weights *= np.exp(exponent)\n        weights /= np.sum(weights)\n        stumps.append((best_j, best_threshold, best_polarity, alpha))\n        if best_error < 1e-10:\n            break\n    predictions = []\n    for x in X_test:\n        sum_votes = 0.0\n        for (j, threshold, polarity, alpha_t) in stumps:\n            feature_val = x[j]\n            if polarity == 1:\n                h = 1 if feature_val < threshold else -1\n            else:\n                h = 1 if feature_val >= threshold else -1\n            sum_votes += alpha_t * h\n        pred = 1 if sum_votes > 0 else 0\n        predictions.append(pred)\n    return predictions"}
{"task_id": 177, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        e_z = np.exp(z)\n        e_neg_z = np.exp(-z)\n        t = (e_z - e_neg_z) / (e_z + e_neg_z)\n        rounded = np.round(t, 4)\n        return float(rounded)\n    else:\n        if isinstance(z, list):\n            arr = np.array(z)\n        else:\n            arr = z\n        e_z = np.exp(arr)\n        e_neg_z = np.exp(-arr)\n        numerator = e_z - e_neg_z\n        denominator = e_z + e_neg_z\n        tanh_arr = numerator / denominator\n        rounded_tanh = np.round(tanh_arr, 4)\n        return rounded_tanh.tolist()"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1.0\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    pbest_positions = positions.copy()\n    current_values = np.sum(positions ** 2, axis=1)\n    gbest_idx = np.argmin(current_values)\n    gbest_value = current_values[gbest_idx]\n    gbest_position = pbest_positions[gbest_idx].copy()\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.uniform(0, 1, size=n_dims)\n            r2 = rng.uniform(0, 1, size=n_dims)\n            velocities[i] = w * velocities[i] + c1 * r1 * (pbest_positions[i] - positions[i]) + c2 * r2 * (gbest_position - positions[i])\n            new_pos = np.clip(positions[i] + velocities[i], -1, 1)\n            new_val = np.sum(new_pos ** 2)\n            positions[i] = new_pos\n            if new_val < current_values[i]:\n                current_values[i] = new_val\n                pbest_positions[i] = new_pos.copy()\n                if new_val < gbest_value:\n                    gbest_value = new_val\n                    gbest_position = new_pos.copy()\n    return round(gbest_value, 4)"}
{"task_id": 179, "completion_id": 0, "solution": "import re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    processed_line = line\n    if lowercase:\n        processed_line = processed_line.lower()\n    if filter_punctuation:\n        punct_set = set(string.punctuation)\n        processed_line = ''.join([c for c in processed_line if c not in punct_set])\n    processed_line = re.sub(' {2,}', ' ', processed_line)\n    processed_line = processed_line.strip(' ')\n    return list(processed_line) if processed_line else []"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    n_train = X_train_np.shape[0]\n    if k == 0 or k > n_train:\n        effective_k = n_train\n    else:\n        effective_k = k\n    predictions = []\n    for test_point in X_test_np:\n        distances = np.sqrt(np.sum((X_train_np - test_point) ** 2, axis=1))\n        sorted_indices = np.argsort(distances)\n        neighbors_indices = sorted_indices[:effective_k]\n        neighbor_labels = y_train_np[neighbors_indices]\n        if task == 'classification':\n            counts = Counter(neighbor_labels)\n            if not counts:\n                predictions.append(None)\n                continue\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            prediction = min(candidates)\n        else:\n            mean_value = np.mean(neighbor_labels)\n            prediction = round(mean_value, 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 181, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\"\"\"\n    predictions = []\n    effective_k = min(k, len(X_train))\n    for test_sample in X_test:\n        distances = []\n        for (x, y) in zip(X_train, y_train):\n            distance = 0.0\n            for (xi, ti) in zip(x, test_sample):\n                distance += (xi - ti) ** 2\n            distance = np.sqrt(distance)\n            distances.append((distance, y))\n        distances.sort(key=lambda pair: (pair[0], pair[1]))\n        neighbors = distances[:effective_k]\n        labels = [y for (d, y) in neighbors]\n        if problem == 'classify':\n            if not labels:\n                predictions.append(None)\n                continue\n            count = Counter(labels)\n            max_freq = max(count.values())\n            candidates = [label for (label, freq) in count.items() if freq == max_freq]\n            candidates_sorted = sorted(candidates)\n            predictions.append(candidates_sorted[0])\n        elif problem == 'regress':\n            if not labels:\n                predictions.append(0.0)\n                continue\n            avg = sum(labels) / len(labels)\n            predictions.append(round(avg, 4))\n        else:\n            raise ValueError(f'Invalid problem type: {problem}')\n    return predictions"}
{"task_id": 182, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"Compute the polynomial kernel matrix between two datasets X and Y.\n    \n    Args:\n        X (list or numpy.ndarray): A 2-D input data matrix of shape (n, p).\n        Y (list or numpy.ndarray): A 2-D input data matrix of shape (m, p).\n        degree (int, optional): The polynomial degree. Defaults to 2.\n    \n    Returns:\n        list: Polynomial kernel matrix rounded to four decimal places, as a nested list. \n              Returns -1 if any validation fails.\n    \"\"\"\n    X = np.array(X)\n    Y = np.array(Y)\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    dot_product = X @ Y.T\n    K = dot_product ** degree\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 183, "completion_id": 0, "solution": "import numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    else:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    limit = np.sqrt(6 / fan_in)\n    return np.random.uniform(low=-limit, high=limit, size=weight_shape)"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n\n    class TreeNode:\n\n        def __init__(self, value=None, feature=None, threshold=None, left=None, right=None):\n            self.value = value\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n\n        def is_leaf(self):\n            return self.value is not None\n\n    def gini(y):\n        counts = np.bincount(y)\n        if len(counts) == 0:\n            return 0.0\n        probs = counts / len(y)\n        return 1.0 - np.sum(probs ** 2)\n\n    def get_majority_class(y):\n        counts = np.bincount(y)\n        return np.argmax(counts)\n\n    def build_tree(X, y, current_depth, max_depth):\n        unique_classes = np.unique(y)\n        if len(unique_classes) == 1:\n            return TreeNode(value=int(unique_classes[0]))\n        if max_depth is not None and current_depth >= max_depth:\n            return TreeNode(value=int(get_majority_class(y)))\n        parent_gini = gini(y)\n        best_gain = -1\n        best_feature = None\n        best_threshold = None\n        best_left_mask = None\n        best_right_mask = None\n        (n_samples, n_features) = X.shape\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            sorted_indices = np.argsort(feature_values)\n            sorted_features = feature_values[sorted_indices]\n            unique_values = np.unique(sorted_features)\n            if len(unique_values) < 2:\n                continue\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for thresh in thresholds:\n                left_mask = feature_values <= thresh\n                right_mask = ~left_mask\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                g_left = gini(y_left)\n                g_right = gini(y_right)\n                (n_left, n_right) = (len(y_left), len(y_right))\n                weighted_gini = (n_left * g_left + n_right * g_right) / (n_left + n_right)\n                gain = parent_gini - weighted_gini\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = thresh\n                    best_left_mask = left_mask\n                    best_right_mask = right_mask\n        if best_gain <= 0 or best_feature is None:\n            return TreeNode(value=int(get_majority_class(y)))\n        (X_left, y_left) = (X[best_left_mask], y[best_left_mask])\n        (X_right, y_right) = (X[best_right_mask], y[best_right_mask])\n        left_child = build_tree(X_left, y_left, current_depth + 1, max_depth)\n        right_child = build_tree(X_right, y_right, current_depth + 1, max_depth)\n        return TreeNode(feature=best_feature, threshold=best_threshold, left=left_child, right=right_child)\n    if X_train.size == 0:\n        return [0] * len(X_test)\n    root = build_tree(X_train, y_train, current_depth=0, max_depth=max_depth)\n    predictions = []\n    for sample in X_test:\n        node = root\n        while True:\n            if node.is_leaf():\n                predictions.append(node.value)\n                break\n            feature_val = sample[node.feature]\n            if feature_val <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n    return predictions"}
{"task_id": 185, "completion_id": 0, "solution": "import numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    X = np.asarray(X)\n    if X.size == 0:\n        raise ValueError('Got an empty matrix.')\n    if X.ndim == 1:\n        return (1, X.shape[0])\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n        return (n_samples, int(n_features))"}
{"task_id": 186, "completion_id": 0, "solution": "import numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    This function returns the arithmetic mean of y_train for every sample in X_test.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    X_test = np.asarray(X_test)\n    if X_test.shape[0] == 0:\n        return []\n    mean_val = np.mean(y_train)\n    rounded_mean = round(mean_val, 4)\n    return [rounded_mean] * X_test.shape[0]"}
{"task_id": 188, "completion_id": 0, "solution": "import math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    if not (0 <= min_epsilon < max_epsilon and decay_rate > 0 and (step >= 0)):\n        return -1.0\n    delta = max_epsilon - min_epsilon\n    exponent = -decay_rate * step\n    epsilon = min_epsilon + delta * math.exp(exponent)\n    epsilon = max(epsilon, min_epsilon)\n    return round(epsilon, 4)"}
{"task_id": 189, "completion_id": 0, "solution": "import numpy as np\ndef batch_resample(X, new_dim, mode='bilinear'):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_channels) = X.shape\n    (out_rows, out_cols) = new_dim\n    y_coords = np.linspace(0, in_rows - 1, out_rows)\n    x_coords = np.linspace(0, in_cols - 1, out_cols)\n    (Y, X_grid) = np.meshgrid(y_coords, x_coords, indexing='ij')\n    if mode == 'bilinear':\n        i0 = np.floor(Y).astype(int)\n        i1 = i0 + 1\n        j0 = np.floor(X_grid).astype(int)\n        j1 = j0 + 1\n        i0 = np.clip(i0, 0, in_rows - 1)\n        i1 = np.clip(i1, 0, in_rows - 1)\n        j0 = np.clip(j0, 0, in_cols - 1)\n        j1 = np.clip(j1, 0, in_cols - 1)\n        dy = Y - i0\n        dx = X_grid - j0\n        A = X[:, i0, j0, :]\n        B = X[:, i0, j1, :]\n        C = X[:, i1, j0, :]\n        D = X[:, i1, j1, :]\n        w_a = (1 - dy) * (1 - dx)\n        w_b = (1 - dy) * dx\n        w_c = dy * (1 - dx)\n        w_d = dy * dx\n        w_a = w_a[np.newaxis, ..., np.newaxis]\n        w_b = w_b[np.newaxis, ..., np.newaxis]\n        w_c = w_c[np.newaxis, ..., np.newaxis]\n        w_d = w_d[np.newaxis, ..., np.newaxis]\n        interpolated = w_a * A + w_b * B + w_c * C + w_d * D\n        output = interpolated\n    elif mode == 'neighbor':\n        i = np.round(Y).astype(int)\n        j = np.round(X_grid).astype(int)\n        i = np.clip(i, 0, in_rows - 1)\n        j = np.clip(j, 0, in_cols - 1)\n        output = X[:, i, j, :]\n    else:\n        raise NotImplementedError(f'Unrecognized resampling mode: {mode}')\n    output = np.round(output, 4)\n    return output"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    (classes, counts) = np.unique(y, return_counts=True)\n    total = len(y)\n    if total == 0:\n        return (-1, None, 0.0)\n    p = counts / total\n    g_whole = 1.0 - np.sum(p ** 2)\n    g_whole_rounded = round(g_whole, 4)\n    all_constant = True\n    for j in range(n_features):\n        if np.unique(X[:, j]).size > 1:\n            all_constant = False\n            break\n    if all_constant:\n        return (-1, None, g_whole_rounded)\n    best_feature = -1\n    best_threshold = None\n    best_gini = float('inf')\n    for j in range(n_features):\n        feature = X[:, j]\n        unique_values = np.unique(feature)\n        for v in unique_values:\n            left_mask = feature <= v\n            n_left = np.sum(left_mask)\n            n_right = n_samples - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[left_mask]\n            y_right = y[~left_mask]\n            left_counts = np.unique(y_left, return_counts=True)[1]\n            p_left = left_counts / n_left\n            g_left = 1.0 - np.sum(p_left ** 2)\n            right_counts = np.unique(y_right, return_counts=True)[1]\n            p_right = right_counts / n_right\n            g_right = 1.0 - np.sum(p_right ** 2)\n            g_split = n_left / n_samples * g_left + n_right / n_samples * g_right\n            if g_split < best_gini - 1e-12:\n                best_gini = g_split\n                best_feature = j\n                best_threshold = v\n            elif abs(g_split - best_gini) < 1e-12:\n                if best_feature == -1 or j < best_feature or (j == best_feature and v < best_threshold):\n                    best_gini = g_split\n                    best_feature = j\n                    best_threshold = v\n    if best_feature == -1:\n        return (-1, None, g_whole_rounded)\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    valid_metrics = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if name not in valid_metrics:\n\n        def invalid_metric(x, y):\n            return -1\n        return invalid_metric\n\n    def validated_metric(x, y):\n        try:\n            if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n                return -1\n            x_arr = np.array(x, dtype=float)\n            y_arr = np.array(y, dtype=float)\n            if x_arr.ndim != 1 or y_arr.ndim != 1:\n                return -1\n            if x_arr.size == 0 or y_arr.size == 0 or x_arr.shape != y_arr.shape:\n                return -1\n            if name == 'cosine':\n                norm_x = np.linalg.norm(x_arr)\n                norm_y = np.linalg.norm(y_arr)\n                if norm_x == 0.0 or norm_y == 0.0:\n                    return -1\n            if name == 'euclidean':\n                distance = np.sqrt(np.sum((x_arr - y_arr) ** 2))\n            elif name == 'manhattan':\n                distance = np.sum(np.abs(x_arr - y_arr))\n            elif name == 'chebyshev':\n                distance = np.max(np.abs(x_arr - y_arr))\n            elif name == 'cosine':\n                dot_product = np.dot(x_arr, y_arr)\n                norm_product = np.linalg.norm(x_arr) * np.linalg.norm(y_arr)\n                distance = 1 - dot_product / norm_product\n            else:\n                return -1\n            return round(distance, 4)\n        except:\n            return -1\n    return validated_metric"}
{"task_id": 193, "completion_id": 0, "solution": "import numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    arr = np.asarray(z)\n    if arr.ndim == 0:\n        result = arr / (1 + np.abs(arr))\n        return round(result.item(), 4)\n    else:\n        if arr.size == 0:\n            return []\n        result = arr / (1 + np.abs(arr))\n        return [round(x, 4) for x in result.tolist()]"}
{"task_id": 194, "completion_id": 0, "solution": "import numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\"\"\"\n    weights_np = np.array(weights, dtype=np.float64)\n    gradients_np = np.array(gradients, dtype=np.float64)\n    if G is None:\n        new_G = gradients_np ** 2\n    else:\n        G_np = np.array(G, dtype=np.float64)\n        new_G = G_np + gradients_np ** 2\n    denominator = np.sqrt(new_G + eps)\n    delta = learning_rate * gradients_np / denominator\n    updated_weights = weights_np - delta\n    new_weights_list = np.round(updated_weights, 6).tolist()\n    new_G_list = np.round(new_G, 6).tolist()\n    return (new_weights_list, new_G_list)"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    action_ids = None\n    if hasattr(env.action_space, 'spaces'):\n        for subspace in env.action_space.spaces:\n            if hasattr(subspace, 'n'):\n                n_actions_per_dim.append(subspace.n)\n                action_dim += 1\n            elif hasattr(subspace, 'shape'):\n                dims = int(np.prod(subspace.shape))\n                n_actions_per_dim.extend([np.inf] * dims)\n                action_dim += dims\n            else:\n                raise ValueError('Unsupported subspace type in multi-dimensional action space.')\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n    elif hasattr(env.action_space, 'shape'):\n        dims = int(np.prod(env.action_space.shape))\n        n_actions_per_dim.extend([np.inf] * dims)\n        action_dim = dims\n    else:\n        raise ValueError('Unsupported action space type.')\n    has_continuous = any((np.isinf(n) for n in n_actions_per_dim))\n    if has_continuous:\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    T = phi[0].shape[1] if phi else 0\n    beta = np.zeros((V, T), dtype=np.float64)\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        doc_words = corpus[d]\n        N_d = len(doc_words)\n        for n in range(N_d):\n            v = doc_words[n]\n            beta[v, :] += doc_phi[n, :]\n    sums = beta.sum(axis=0)\n    sums = np.where(sums == 0, 1.0, sums)\n    beta_normalized = beta / sums.reshape(1, -1)\n    beta_rounded = np.round(beta_normalized, 4)\n    result = [[float(round(val, 4)) for val in row] for row in beta_rounded]\n    return result"}
{"task_id": 199, "completion_id": 0, "solution": "import numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    mask = X < value\n    y_left = y[mask].tolist()\n    y_right = y[~mask].tolist()\n    return (y_left, y_right)"}
{"task_id": 200, "completion_id": 0, "solution": "import numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(weights)\n    l1 = C * np.abs(arr).sum()\n    return round(l1, 4)"}
{"task_id": 201, "completion_id": 0, "solution": "import numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    epsilon = 1e-12\n    if axis is None:\n        norm = np.linalg.norm(p) + epsilon\n        scaling = min(1.0, m / norm)\n        clipped_p = p * scaling\n    else:\n        norms = np.linalg.norm(p, axis=axis, keepdims=True) + epsilon\n        scaling = np.minimum(1.0, m / norms)\n        clipped_p = p * scaling\n    rounded = np.round(clipped_p, 4)\n    return rounded.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n_samples = X.shape[0]\n    current_medoids = list(range(k))\n    current_cost = 0.0\n    for x in X:\n        min_dist = np.min([np.linalg.norm(x - X[med]) for med in current_medoids])\n        current_cost += min_dist\n    while True:\n        best_gain = 0.0\n        best_new_medoids = current_medoids.copy()\n        for m in current_medoids:\n            non_medoids = [s for s in range(n_samples) if s not in current_medoids]\n            for s in non_medoids:\n                new_medoids = current_medoids.copy()\n                idx = new_medoids.index(m)\n                new_medoids[idx] = s\n                new_cost = 0.0\n                for x in X:\n                    min_dist = np.inf\n                    for med in new_medoids:\n                        dist = np.linalg.norm(x - X[med])\n                        if dist < min_dist:\n                            min_dist = dist\n                    new_cost += min_dist\n                gain = current_cost - new_cost\n                if gain > best_gain:\n                    best_gain = gain\n                    best_new_medoids = new_medoids\n        if best_gain > 0:\n            current_medoids = best_new_medoids\n            current_cost -= best_gain\n        else:\n            break\n    labels = []\n    for x in X:\n        min_dist = np.inf\n        best_label = 0\n        for (label_idx, med) in enumerate(current_medoids):\n            dist = np.linalg.norm(x - X[med])\n            if dist < min_dist:\n                min_dist = dist\n                best_label = label_idx\n            elif dist == min_dist and label_idx < best_label:\n                best_label = label_idx\n        labels.append(best_label)\n    return labels"}
{"task_id": 203, "completion_id": 0, "solution": "import numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    if not isinstance(probs, np.ndarray):\n        probs = np.array(probs, dtype=np.float64)\n    else:\n        probs = probs.copy()\n    if np.any(probs < 0):\n        return -1\n    if not np.isclose(np.sum(probs), 1.0, atol=1e-12):\n        return -1\n    N = len(probs)\n    scaled_probs = probs * N\n    small = [i for i in range(N) if scaled_probs[i] < 1.0]\n    large = [i for i in range(N) if scaled_probs[i] >= 1.0]\n    prob_table = [0.0] * N\n    alias_table = [0] * N\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        alias_table[l] = g\n        prob_table[l] = scaled_probs[l]\n        scaled_probs[g] += scaled_probs[l] - 1.0\n        if scaled_probs[g] < 1.0:\n            small.append(g)\n        else:\n            large.append(g)\n    for i in small:\n        prob_table[i] = 1.0\n    for i in large:\n        prob_table[i] = 1.0\n    prob_table = [round(p, 4) for p in prob_table]\n    return (prob_table, alias_table)"}
{"task_id": 204, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for elem in list(data):\n        if elem is None:\n            count += 1\n        else:\n            try:\n                if math.isnan(elem):\n                    count += 1\n            except TypeError:\n                pass\n    return count"}
{"task_id": 205, "completion_id": 0, "solution": "def get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    unique_ids = []\n    seen = set()\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            env_id = item['id']\n            if env_id not in seen:\n                seen.add(env_id)\n                unique_ids.append(env_id)\n    return unique_ids"}
{"task_id": 206, "completion_id": 0, "solution": "import numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    for seq in [actual, predicted]:\n        if isinstance(seq, np.ndarray):\n            if seq.ndim != 1:\n                return -1\n            if not np.issubdtype(seq.dtype, np.number):\n                return -1\n        else:\n            for element in seq:\n                if not isinstance(element, (int, float)):\n                    return -1\n    np_actual = np.asarray(actual) if not isinstance(actual, np.ndarray) else actual\n    np_predicted = np.asarray(predicted) if not isinstance(predicted, np.ndarray) else predicted\n    mae = np.mean(np.abs(np_actual - np_predicted))\n    return round(mae, 4)"}
{"task_id": 207, "completion_id": 0, "solution": "def convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    (kh, kw) = filter_shape\n    (sh, sw) = stride\n    (ph, pw) = padding\n    if img_height <= 0 or img_width <= 0 or kh <= 0 or (kw <= 0) or (sh <= 0) or (sw <= 0):\n        return -1\n    numerator_h = img_height + 2 * ph - kh\n    numerator_w = img_width + 2 * pw - kw\n    if numerator_h < 0 or numerator_w < 0:\n        return -1\n    if numerator_h % sh != 0 or numerator_w % sw != 0:\n        return -1\n    oh = numerator_h // sh + 1\n    ow = numerator_w // sw + 1\n    return (oh, ow)"}
{"task_id": 208, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\"\"\"\n    if categories is None:\n        seen = set()\n        categories = []\n        for label in labels:\n            if label not in seen:\n                seen.add(label)\n                categories.append(label)\n    else:\n        category_set = set(categories)\n        for label in labels:\n            if label not in category_set:\n                return -1\n    index_map = {cat: idx for (idx, cat) in enumerate(categories)}\n    indices = [index_map[label] for label in labels]\n    n = len(labels)\n    c = len(categories)\n    array = np.zeros((n, c), dtype=int)\n    rows = np.arange(n)\n    array[rows, indices] = 1\n    return array.tolist()"}
{"task_id": 209, "completion_id": 0, "solution": "def analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float] | int:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\"\"\"\n    if len(payoffs) != len(payoff_probs):\n        return -1\n    for k in range(len(payoffs)):\n        if len(payoffs[k]) != len(payoff_probs[k]):\n            return -1\n        prob_sum = sum(payoff_probs[k])\n        if abs(prob_sum - 1.0) > 1e-08:\n            return -1\n    expected_values = []\n    for k in range(len(payoffs)):\n        ev = sum((payoff * prob for (payoff, prob) in zip(payoffs[k], payoff_probs[k])))\n        ev_rounded = round(ev, 4)\n        expected_values.append(ev_rounded)\n    best_ev = max(expected_values)\n    best_arm = expected_values.index(best_ev)\n    return (expected_values, best_arm, best_ev)"}
{"task_id": 210, "completion_id": 0, "solution": "import functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n\n    @functools.wraps(decorator_func)\n    def wrapper_decorator(*args, **kwargs):\n        if args and callable(args[0]):\n            return decorator_func(*args, **kwargs)\n        else:\n\n            def real_decorator(func: Callable) -> Any:\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n    return wrapper_decorator"}
{"task_id": 211, "completion_id": 0, "solution": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1.0\n    total_samples = len(actual)\n    mismatches = sum((a != p for (a, p) in zip(actual, predicted)))\n    error = mismatches / total_samples\n    acc = 1.0 - error\n    return round(acc, 4)"}
{"task_id": 212, "completion_id": 0, "solution": "from collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\"\"\"\n    all_nodes = set()\n    for node in graph:\n        all_nodes.add(node)\n        all_nodes.update(graph[node])\n    all_nodes.add('input')\n    all_nodes.add('output_realtime')\n    distance = {node: None for node in all_nodes}\n    predecessors = {node: [] for node in all_nodes}\n    queue = deque()\n    if 'input' not in distance:\n        return []\n    distance['input'] = 0\n    queue.append('input')\n    while queue:\n        current = queue.popleft()\n        current_distance = distance[current]\n        neighbors = graph.get(current, [])\n        for neighbor in neighbors:\n            if distance[neighbor] is None:\n                distance[neighbor] = current_distance + 1\n                predecessors[neighbor].append(current)\n                queue.append(neighbor)\n            elif distance[neighbor] == current_distance + 1:\n                predecessors[neighbor].append(current)\n    if distance['output_realtime'] is None:\n        return []\n    path = []\n    current = 'output_realtime'\n    while current != 'input':\n        path.append(current)\n        preds = predecessors[current]\n        if not preds:\n            return []\n        current = min(preds)\n    path.append('input')\n    path.reverse()\n    return path"}
{"task_id": 213, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    if not shape:\n        return []\n    n_dims = len(shape)\n    fan_in = 0\n    if n_dims == 1:\n        fan_in = shape[0]\n    elif n_dims == 2:\n        fan_in = shape[0]\n    else:\n        receptive_field = 1\n        for dim in shape[2:]:\n            receptive_field *= dim\n        fan_in = shape[1] * receptive_field\n    if fan_in == 0:\n        return []\n    stddev = np.sqrt(2.0 / fan_in)\n    np.random.seed(42)\n    weights = np.random.normal(loc=0.0, scale=stddev, size=shape)\n    return weights.tolist()"}
{"task_id": 214, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    squared_errors = (actual - predicted) ** 2\n    mse = np.mean(squared_errors)\n    rounded_mse = np.round(mse, 4)\n    return rounded_mse.item()"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.ndim == 1:\n        x_train = x_train.reshape(-1, 1)\n    if x_test.ndim == 1:\n        x_test = x_test.reshape(-1, 1)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def generate_poly(x, degree):\n        (n_samples, n_features) = x.shape\n        poly = np.ones((n_samples, 1))\n        for feature_idx in range(n_features):\n            feature_col = x[:, feature_idx]\n            for power in range(1, degree + 1):\n                new_col = (feature_col ** power).reshape(-1, 1)\n                poly = np.hstack((poly, new_col))\n        return poly\n    x_train_poly = generate_poly(x_train, degree)\n    x_test_poly = generate_poly(x_test, degree)\n    x_train_non_bias = x_train_poly[:, 1:]\n    if x_train_non_bias.size == 0:\n        x_train_std = x_train_poly\n        x_test_std = x_test_poly\n    else:\n        means = np.mean(x_train_non_bias, axis=0)\n        stds = np.std(x_train_non_bias, axis=0, ddof=0)\n        stds[stds == 0] = 1.0\n        x_train_std = x_train_poly.copy()\n        x_train_std[:, 1:] = (x_train_non_bias - means) / stds\n        x_test_non_bias = x_test_poly[:, 1:]\n        x_test_std = x_test_poly.copy()\n        x_test_std[:, 1:] = (x_test_non_bias - means) / stds\n    (n_samples_train, n_features) = x_train_std.shape\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        y_pred = x_train_std @ w\n        error = y_pred - y_train\n        gradient_mse = x_train_std.T @ error / n_samples_train\n        reg_grad = np.zeros_like(w)\n        if n_features > 1:\n            mask = np.arange(n_features) >= 1\n            w_non_bias = w[mask]\n            sign_w = np.sign(w_non_bias)\n            l1_part = l1_ratio * sign_w\n            l2_part = 2 * (1 - l1_ratio) * w_non_bias\n            reg_grad[mask] = reg_factor * (l1_part + l2_part)\n        total_gradient = gradient_mse + reg_grad\n        w -= learning_rate * total_gradient\n    y_pred_test = x_test_std @ w\n    return np.round(y_pred_test, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    s_predicted = 1 / (1 + np.exp(-predicted))\n    hessian = s_predicted * (1 - s_predicted)\n    prob = s_predicted\n    s_grad = 1 / (1 + np.exp(actual * predicted))\n    grad = actual * s_grad\n    grad_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hessian, 6).tolist()\n    prob_list = np.round(prob, 6).tolist()\n    return (grad_list, hessian_list, prob_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n    player_sum = sum(player)\n    player_aces = player.count(1)\n    if player_aces > 0 and player_sum + 10 <= 21:\n        player_score = player_sum + 10\n    else:\n        player_score = player_sum\n    if player_score > 21:\n        return -1.0\n    dealer_sum = sum(dealer)\n    dealer_aces = dealer.count(1)\n    if dealer_aces > 0 and dealer_sum + 10 <= 21:\n        dealer_score = dealer_sum + 10\n    else:\n        dealer_score = dealer_sum\n    if dealer_score > 21:\n        return 1.0\n    player_natural = len(player) == 2 and player_score == 21\n    dealer_natural = len(dealer) == 2 and dealer_score == 21\n    if player_natural:\n        if dealer_natural:\n            return 0.0\n        else:\n            return 1.5 if dealer_score != 21 else 0.0\n    elif dealer_natural:\n        return 0.0 if player_score == 21 else -1.0\n    elif player_score > dealer_score:\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 220, "completion_id": 0, "solution": "import numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    phi = []\n    if C_wt.size > 0:\n        (V, T) = C_wt.shape\n        sum_cols = C_wt.sum(axis=0)\n        denominator = sum_cols + V * beta\n        phi_matrix = (C_wt + beta) / denominator[np.newaxis, :]\n        phi = np.round(phi_matrix, 4).tolist()\n    else:\n        phi = []\n    theta = []\n    if C_dt.size > 0:\n        (D, T_theta) = C_dt.shape\n        sum_rows = C_dt.sum(axis=1)\n        denominator_theta = sum_rows + T_theta * alpha\n        theta_matrix = (C_dt + alpha) / denominator_theta[:, np.newaxis]\n        theta = np.round(theta_matrix, 4).tolist()\n    else:\n        theta = []\n    return (phi, theta)"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1.0\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1.0\n    sle = squared_log_error(actual, predicted)\n    msle = np.mean(sle)\n    return round(msle, 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        if isinstance(z, np.ndarray):\n            z_scalar = z.item()\n        else:\n            z_scalar = z\n        if z_scalar >= 0:\n            s = 1.0 / (1.0 + np.exp(-z_scalar))\n        else:\n            s = np.exp(z_scalar) / (1.0 + np.exp(z_scalar))\n        return round(s, 4)\n    else:\n        arr = np.array(z, dtype=np.float64)\n        result = np.where(arr >= 0, 1.0 / (1.0 + np.exp(-arr)), np.exp(arr) / (1.0 + np.exp(arr)))\n        rounded = np.round(result, 4)\n        return rounded.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(element, a) for element in z]\n    else:\n        return z if z >= 0 else a * z"}
{"task_id": 225, "completion_id": 0, "solution": "import numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    assert formula in ('htk', 'slaney'), 'Invalid formula'\n    arr = np.asarray(hz, dtype=np.float64)\n    if formula == 'htk':\n        mel = 2595.0 * np.log10(1.0 + arr / 700.0)\n    else:\n        mel = 1127.0 * np.log(1.0 + arr / 700.0)\n    mel_rounded = np.round(mel, 4)\n    return mel_rounded.tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    ensemble = []\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_error = np.inf\n        for feature in range(n_features):\n            values = X_train[:, feature]\n            unique_values = np.unique(values)\n            if len(unique_values) < 2:\n                continue\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                pred_p1 = np.where(values <= threshold, -1, 1)\n                error_p1 = np.sum(weights * (pred_p1 != y_train))\n                pred_pm1 = np.where(values <= threshold, 1, -1)\n                error_pm1 = np.sum(weights * (pred_pm1 != y_train))\n                if error_p1 < error_pm1:\n                    (current_error, current_polarity) = (error_p1, 1)\n                else:\n                    (current_error, current_polarity) = (error_pm1, -1)\n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = current_polarity\n        error = best_error\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        pred = np.where(X_train[:, best_feature] <= best_threshold, -best_polarity, best_polarity)\n        misclassified = pred != y_train\n        weights *= np.exp(alpha * (2 * misclassified - 1))\n        weights /= np.sum(weights)\n        ensemble.append((alpha, best_feature, best_threshold, best_polarity))\n    y_pred = np.zeros(X_test.shape[0])\n    for (alpha, feature, threshold, polarity) in ensemble:\n        x_feature = X_test[:, feature]\n        stump_pred = np.where(x_feature <= threshold, -polarity, polarity)\n        y_pred += alpha * stump_pred\n    y_pred = np.sign(y_pred)\n    y_pred[y_pred == 0] = 1\n    return y_pred.astype(int).tolist()"}
{"task_id": 227, "completion_id": 0, "solution": "import numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\"\"\"\n    state_arr = np.array(state)\n    if state_arr.ndim != 1:\n        return -1.0\n    N = state_arr.shape[0]\n    try:\n        W1_arr = np.array(W1, dtype=np.float64)\n    except ValueError:\n        return -1.0\n    if W1_arr.ndim != 2 or W1_arr.shape[0] != N:\n        return -1.0\n    H1 = W1_arr.shape[1]\n    try:\n        W2_arr = np.array(W2, dtype=np.float64)\n    except ValueError:\n        return -1.0\n    if W2_arr.ndim != 2 or W2_arr.shape[0] != H1:\n        return -1.0\n    H2 = W2_arr.shape[1]\n    try:\n        W3_arr = np.array(W3, dtype=np.float64)\n    except ValueError:\n        return -1.0\n    if W3_arr.ndim == 1:\n        if W3_arr.shape[0] != H2:\n            return -1.0\n    elif W3_arr.ndim == 2:\n        if W3_arr.shape[0] != H2 or W3_arr.shape[1] != 1:\n            return -1.0\n    else:\n        return -1.0\n    h1 = np.tanh(np.dot(state_arr, W1_arr))\n    h2 = np.tanh(np.dot(h1, W2_arr))\n    W3_flat = W3_arr.squeeze()\n    v = np.dot(h2, W3_flat)\n    return float(np.round(v, 4))"}
{"task_id": 228, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_squared = np.sum(X ** 2, axis=1)\n    Y_squared = np.sum(Y ** 2, axis=1)\n    dot_product = X @ Y.T\n    D_squared = X_squared[:, np.newaxis] + Y_squared[np.newaxis, :] - 2 * dot_product\n    D_squared = np.maximum(D_squared, 0)\n    D = np.sqrt(D_squared)\n    return np.round(D, 4).tolist()"}
{"task_id": 230, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"Implements Gaussian Naive Bayes for binary classification from scratch.\"\"\"\n    mask0 = y_train == 0\n    X_class0 = X_train[mask0]\n    X_class1 = X_train[~mask0]\n    prior0 = X_class0.shape[0] / X_train.shape[0]\n    prior1 = X_class1.shape[0] / X_train.shape[0]\n    log_prior0 = np.log(prior0)\n    log_prior1 = np.log(prior1)\n    mean0 = np.mean(X_class0, axis=0)\n    var0 = np.var(X_class0, axis=0, ddof=0) + 1e-09\n    mean1 = np.mean(X_class1, axis=0)\n    var1 = np.var(X_class1, axis=0, ddof=0) + 1e-09\n    log_2pi_var0_sum = np.sum(np.log(2 * np.pi * var0))\n    log_2pi_var1_sum = np.sum(np.log(2 * np.pi * var1))\n    diff0 = X_test - mean0\n    diff1 = X_test - mean1\n    sum_sq_div_var0 = np.sum(diff0 ** 2 / var0, axis=1)\n    sum_sq_div_var1 = np.sum(diff1 ** 2 / var1, axis=1)\n    log_likelihood0 = -0.5 * (log_2pi_var0_sum + sum_sq_div_var0)\n    log_likelihood1 = -0.5 * (log_2pi_var1_sum + sum_sq_div_var1)\n    log_posterior0 = log_prior0 + log_likelihood0\n    log_posterior1 = log_prior1 + log_likelihood1\n    predictions = np.where(log_posterior0 > log_posterior1, 0, 1)\n    return predictions.tolist()"}
{"task_id": 231, "completion_id": 0, "solution": "def is_natural(hand: list[int]) -> bool:\n    \"\"\"Determine if the given hand is a natural blackjack (Ace and a ten-valued card).\"\"\"\n    return len(hand) == 2 and sorted(hand) == [1, 10]"}
{"task_id": 232, "completion_id": 0, "solution": "import numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if x.ndim != 2:\n        return False\n    if not np.all((x == 0) | (x == 1)):\n        return False\n    row_sums = x.sum(axis=1)\n    if not np.all(row_sums == 1):\n        return False\n    return True"}
{"task_id": 234, "completion_id": 0, "solution": "import numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    a = prior_alpha + np.array(successes)\n    b = prior_beta + np.array(failures)\n    samples = np.random.beta(a, b)\n    return int(np.argmax(samples))"}
{"task_id": 235, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError('Labels must be 1-dimensional.')\n    if labels.size == 0:\n        if n_classes is None:\n            raise ValueError('n_classes must be specified when labels is empty.')\n        C = n_classes\n    else:\n        max_label = labels.max()\n        if n_classes is not None:\n            if n_classes < max_label + 1:\n                raise ValueError('n_classes must be at least max(labels)+1')\n            C = n_classes\n        else:\n            C = max_label + 1\n    one_hot = np.zeros((labels.size, C), dtype=float)\n    if labels.size > 0:\n        rows = np.arange(labels.size)\n        cols = labels\n        one_hot[rows, cols] = 1.0\n    return one_hot"}
{"task_id": 236, "completion_id": 0, "solution": "import numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    indices = np.arange(N, dtype=np.int64)\n    if shuffle:\n        np.random.shuffle(indices)\n    n_batches = (N + batchsize - 1) // batchsize\n    mb_gen = (indices[i * batchsize:(i + 1) * batchsize] for i in range(n_batches))\n    return (mb_gen, n_batches)"}
{"task_id": 237, "completion_id": 0, "solution": "from typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    sum_non_ace = 0\n    num_aces = 0\n    for card in hand:\n        if card == 'A':\n            num_aces += 1\n        elif card in {'J', 'Q', 'K'}:\n            sum_non_ace += 10\n        else:\n            sum_non_ace += int(card)\n    total = sum_non_ace + 11 * num_aces\n    num_subtract = 0\n    while total > 21 and num_subtract < num_aces:\n        total -= 10\n        num_subtract += 1\n    return total if total <= 21 else 0"}
{"task_id": 239, "completion_id": 0, "solution": "def determine_padding(filter_shape: tuple[int, int], output_shape: str='same') -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    (fh, fw) = filter_shape\n    pad_total_h = fh - 1\n    pad_top = pad_total_h // 2\n    pad_bottom = pad_total_h - pad_top\n    pad_total_w = fw - 1\n    pad_left = pad_total_w // 2\n    pad_right = pad_total_w - pad_left\n    return ((pad_top, pad_bottom), (pad_left, pad_right))"}
{"task_id": 240, "completion_id": 0, "solution": "def create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    if obs_encoder is not None:\n        obs2num = dict(obs_encoder)\n    else:\n        obs2num = {obs: idx for (idx, obs) in enumerate(obs_ids)} if obs_ids else {}\n    num2obs = {v: k for (k, v) in obs2num.items()}\n    if act_encoder is not None:\n        act2num = dict(act_encoder)\n    else:\n        act2num = {act: idx for (idx, act) in enumerate(action_ids)} if action_ids else {}\n    num2act = {v: k for (k, v) in act2num.items()}\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    remaining_dims = int(np.prod(shape[1:]))\n    A = np.random.normal(size=(d0, remaining_dims))\n    (U, S, Vh) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vh\n    tensor = Q.reshape(shape) * scale\n    return tensor.tolist()"}
{"task_id": 242, "completion_id": 0, "solution": "import math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\"\"\"\n    for i in range(len(pull_counts)):\n        if pull_counts[i] == 0:\n            return i\n    T = current_step + 1\n    scores = []\n    for i in range(len(ev_estimates)):\n        exploration_term = C * math.sqrt(2 * math.log(T) / pull_counts[i])\n        scores.append(ev_estimates[i] + exploration_term)\n    return scores.index(max(scores))"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\"\"\"\n    sum_s = sum(state)\n    z1 = max(0.0, sum_s)\n    state_value = 64.0 * z1\n    action_probs = [round(1 / 3, 4)] * 3\n    return (action_probs, round(state_value, 4))"}
{"task_id": 244, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) == 0:\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n    if isinstance(sparsity, bool):\n        return -1\n    if not isinstance(sparsity, (int, float)):\n        return -1\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    rnd = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    binary_tensor = (rnd >= threshold).astype(float)\n    return binary_tensor.tolist()"}
{"task_id": 247, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    K = len(payoff_dists)\n    if K == 0 or len(payoff_probs) != K:\n        return -1\n    for (mu, sigma_sq) in payoff_dists:\n        if sigma_sq <= 0:\n            return -1\n    for p in payoff_probs:\n        if not 0.0 <= p <= 1.0:\n            return -1\n    mus = np.array([mu for (mu, sigma_sq) in payoff_dists])\n    p_array = np.array(payoff_probs)\n    evs = p_array * mus\n    best_ev = evs.max()\n    best_arm = evs.argmax()\n    best_ev_rounded = round(best_ev, 4)\n    return (best_ev_rounded, best_arm)"}
{"task_id": 248, "completion_id": 0, "solution": "import numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\"\"\"\n    if X_test.shape[0] == 0:\n        return []\n    p = y_train.sum() / len(y_train)\n    prob_array = np.full(X_test.shape[0], p)\n    rounded_array = np.round(prob_array, 4)\n    return rounded_array.tolist()"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\"\"\"\n    x = np.array(state, dtype=np.float32)\n    for layer in ['1', '2', '3']:\n        W = np.array(params[f'W{layer}'], dtype=np.float32)\n        b = np.array(params[f'b{layer}'], dtype=np.float32)\n        x = x @ W + b\n        x = np.maximum(x, 0)\n    Wa = np.array(params['Wa'], dtype=np.float32)\n    ba = np.array(params['ba'], dtype=np.float32)\n    actor_scores = x @ Wa + ba\n    exp_scores = np.exp(actor_scores - np.max(actor_scores))\n    probabilities = exp_scores / exp_scores.sum()\n    prob_list = probabilities.tolist()\n    Wc = np.array(params['Wc'], dtype=np.float32)\n    bc = np.array(params['bc'], dtype=np.float32)\n    critic_value = (x @ Wc + bc).item()\n    rounded_probs = []\n    for p in prob_list:\n        p_rounded = round(p, 4)\n        if p_rounded in (0.0, 1.0):\n            rounded_probs.append(round(p_rounded, 1))\n        else:\n            rounded_probs.append(round(p_rounded, 4))\n    value_rounded = round(critic_value, 4)\n    if value_rounded in (0.0, 1.0):\n        value_final = round(value_rounded, 1)\n    else:\n        value_final = round(value_rounded, 4)\n    return (rounded_probs, value_final)"}
{"task_id": 251, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    if isinstance(x, (int, float)):\n        result = 1 / (1 + np.exp(-x))\n        rounded = np.round(result, 4)\n        return rounded.item()\n    else:\n        x = np.asarray(x)\n        result = 1 / (1 + np.exp(-x))\n        rounded = np.round(result, 4)\n        return rounded\ndef tanh(x):\n    if isinstance(x, (int, float)):\n        result = np.tanh(x)\n        rounded = np.round(result, 4)\n        return rounded.item()\n    else:\n        x = np.asarray(x)\n        result = np.tanh(x)\n        rounded = np.round(result, 4)\n        return rounded\ndef relu(x):\n    if isinstance(x, (int, float)):\n        result = max(0.0, x)\n        rounded = np.round(result, 4)\n        return rounded.item()\n    else:\n        x = np.asarray(x)\n        result = np.maximum(0, x)\n        rounded = np.round(result, 4)\n        return rounded\ndef leaky_relu(x, alpha: float=0.01):\n    if isinstance(x, (int, float)):\n        val = x if x >= 0 else alpha * x\n        rounded = np.round(val, 4)\n        return rounded.item()\n    else:\n        x = np.asarray(x)\n        result = np.where(x >= 0, x, x * alpha)\n        rounded = np.round(result, 4)\n        return rounded\ndef softmax(x):\n    if isinstance(x, (int, float)):\n        return np.round(1.0, 4).item()\n    else:\n        x = np.asarray(x)\n        max_x = np.max(x)\n        e_x = np.exp(x - max_x)\n        sum_e_x = np.sum(e_x)\n        result = e_x / sum_e_x\n        rounded = np.round(result, 4)\n        return rounded\ndef get_activation(name):\n    activations = {'sigmoid': sigmoid, 'tanh': tanh, 'relu': relu, 'leaky_relu': lambda x: leaky_relu(x, alpha=0.01), 'softmax': softmax}\n    if name not in activations:\n        raise ValueError('Invalid activation function.')\n    return activations[name]"}
{"task_id": 252, "completion_id": 0, "solution": "import numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad = (actual - predicted).tolist()\n    hess = [1.0] * len(actual)\n    return (grad, hess)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_np = np.asarray(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w_np) + (1 - l1_ratio) * w_np)\n        grad_rounded = np.round(grad, 4)\n        return grad_rounded.tolist()\n    else:\n        l1_term = l1_ratio * np.sum(np.abs(w_np))\n        l2_sq_term = 0.5 * (1 - l1_ratio) * np.sum(w_np ** 2)\n        penalty = alpha * (l1_term + l2_sq_term)\n        return round(penalty, 4)"}
{"task_id": 255, "completion_id": 0, "solution": "def usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    if 1 not in hand:\n        return False\n    total = sum(hand)\n    return total + 10 <= 21"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\"\"\"\n    if param_name in {'X', 'y'}:\n        return None\n    if param_name == 'Ba':\n        key = 'ba'\n    elif param_name == 'Bx':\n        key = 'bx'\n    else:\n        key = param_name\n    if key not in model.parameters:\n        return None\n    param = model.parameters[key]\n    original_param = param.copy()\n    param_float64 = param.astype(np.float64)\n    model.parameters[key] = param_float64\n    grads = np.zeros_like(param_float64, dtype=np.float64)\n    for idx in np.ndindex(param_float64.shape):\n        original_val = param_float64[idx].item()\n        param_float64[idx] = original_val + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            X_t = X[:, :, t].astype(np.float64)\n            pred = model.forward(X_t)\n            predictions_plus.append(pred)\n        L_plus = loss_func(predictions_plus)\n        param_float64[idx] = original_val - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            X_t = X[:, :, t].astype(np.float64)\n            pred = model.forward(X_t)\n            predictions_minus.append(pred)\n        L_minus = loss_func(predictions_minus)\n        param_float64[idx] = original_val\n        grad = (L_plus - L_minus) / (2 * epsilon)\n        grads[idx] = grad\n    model.parameters[key] = original_param\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(n_clf, 1)\n    weights = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        best_error = np.inf\n        best_feature = None\n        best_threshold = None\n        best_direction = None\n        for j in range(n):\n            feature_values = X_train[:, j]\n            sorted_indices = np.argsort(feature_values)\n            sorted_feature = feature_values[sorted_indices]\n            sorted_y = y_train[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n            for i in range(len(sorted_feature) - 1):\n                th = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n                error_plus = np.sum(sorted_weights[:i + 1][sorted_y[:i + 1] != -1]) + np.sum(sorted_weights[i + 1:][sorted_y[i + 1:] != 1])\n                error_minus = np.sum(sorted_weights[:i + 1][sorted_y[:i + 1] != 1]) + np.sum(sorted_weights[i + 1:][sorted_y[i + 1:] != -1])\n                current_error = min(error_plus, error_minus)\n                current_direction = 1 if error_plus < error_minus else -1\n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature = j\n                    best_threshold = th\n                    best_direction = current_direction\n            th = sorted_feature[0] - 1e-05\n            error_plus = np.sum(sorted_weights[sorted_y != 1])\n            error_minus = np.sum(sorted_weights[sorted_y != -1])\n            current_error = min(error_plus, error_minus)\n            current_direction = 1 if error_plus < error_minus else -1\n            if current_error < best_error:\n                best_error = current_error\n                best_feature = j\n                best_threshold = th\n                best_direction = current_direction\n            th = sorted_feature[-1] + 1e-05\n            error_plus = np.sum(sorted_weights[sorted_y != -1])\n            error_minus = np.sum(sorted_weights[sorted_y != 1])\n            current_error = min(error_plus, error_minus)\n            current_direction = 1 if error_plus < error_minus else -1\n            if current_error < best_error:\n                best_error = current_error\n                best_feature = j\n                best_threshold = th\n                best_direction = current_direction\n        epsilon = max(best_error, 1e-10)\n        epsilon = min(epsilon, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        pred = np.where(X_train[:, best_feature] >= best_threshold, best_direction, -best_direction)\n        incorrect = pred != y_train\n        weights *= np.exp(alpha * incorrect)\n        weights /= np.sum(weights)\n        stumps.append((best_feature, best_threshold, best_direction, alpha))\n    predictions = []\n    for x in X_test:\n        sum_alpha = 0.0\n        for (j, th, d, a) in stumps:\n            if x[j] >= th:\n                h = d\n            else:\n                h = -d\n            sum_alpha += a * h\n        predictions.append(1 if sum_alpha >= 0 else -1)\n    return predictions"}
{"task_id": 258, "completion_id": 0, "solution": "import numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        return -1\n    product = actual * predicted\n    losses = np.maximum(0, 1 - product)\n    mean_loss = np.mean(losses)\n    return round(mean_loss, 4)"}
{"task_id": 259, "completion_id": 0, "solution": "import random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if len(memory) < batch_size:\n        return -1\n    random.seed(42)\n    return random.sample(memory, batch_size)"}
{"task_id": 260, "completion_id": 0, "solution": "from math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\"\"\"\n    q_list = [floor(f * numtilings) for f in floats]\n    ints = [] if ints is None else ints\n    indices = []\n    for t in range(numtilings):\n        coords = [t]\n        b = t\n        for (q_i, wrapwidth) in zip(q_list, wrapwidths):\n            mod_b = b % numtilings\n            c = (q_i + mod_b) // numtilings\n            if wrapwidth is not None and wrapwidth > 0:\n                c %= wrapwidth\n            coords.append(c)\n            b += t * 2\n        coords.extend(ints)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n        indices.append(index)\n    return indices"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(0.0, std, shape)"}
{"task_id": 263, "completion_id": 0, "solution": "import numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\"\"\"\n    a_prev = np.array(x, dtype=np.float64).reshape(-1, 1)\n    for (W, activation) in zip(weights, activations):\n        W = np.array(W, dtype=np.float64)\n        tilde_a_prev = np.vstack(([[1]], a_prev))\n        z = W @ tilde_a_prev\n        if activation == 'sigmoid':\n            a_prev = 1 / (1 + np.exp(-z))\n        elif activation == 'relu':\n            a_prev = np.maximum(0, z)\n        elif activation == 'linear':\n            a_prev = z\n        else:\n            raise ValueError(f'Unsupported activation function: {activation}')\n    output = np.round(a_prev, 4)\n    if output.size == 1:\n        return output.item()\n    else:\n        return output.flatten().tolist()"}
{"task_id": 265, "completion_id": 0, "solution": "def king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        loss = -0.25 * x + 82.50372665317208\n    elif x <= 600:\n        loss = 20.00372665317208\n    elif x <= 700:\n        loss = -0.2 * x + 140.00372665317207\n    else:\n        loss = 0.003726653172066108\n    return round(loss, 4)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    vertices_set = set(V)\n    adj_dict = {v: set() for v in V}\n    for (u, v) in E:\n        if u in vertices_set and v in vertices_set:\n            adj_dict[u].add(v)\n            adj_dict[v].add(u)\n    vertex_to_index = {v: idx for (idx, v) in enumerate(V)}\n    result = []\n    for v in V:\n        adj_vertices = list(adj_dict[v])\n        adj_vertices.sort(key=lambda x: vertex_to_index[x])\n        result.append(adj_vertices)\n    return result"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\"\"\"\n    best_error = np.inf\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    (n_samples, n_features) = X.shape\n    for j in range(n_features):\n        x_j = X[:, j]\n        sorted_indices = np.argsort(x_j)\n        sorted_x = x_j[sorted_indices]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        (unique_thetas, split_indices) = np.unique(sorted_x, return_index=True)\n        n = len(sorted_x)\n        if n == 0:\n            continue\n        mask_neq_1 = sorted_y != 1\n        mask_neq_minus1 = sorted_y != -1\n        contrib_neq_1 = mask_neq_1 * sorted_weights\n        contrib_neq_minus1 = mask_neq_minus1 * sorted_weights\n        cum_neq_1 = np.zeros(n + 1)\n        cum_neq_1[1:] = np.cumsum(contrib_neq_1)\n        cum_neq_minus1 = np.zeros(n + 1)\n        cum_neq_minus1[1:] = np.cumsum(contrib_neq_minus1)\n        total_neq_1 = cum_neq_1[-1]\n        total_neq_minus1 = cum_neq_minus1[-1]\n        for (theta, split_idx) in zip(unique_thetas, split_indices):\n            error_p1 = cum_neq_1[split_idx] + (total_neq_minus1 - cum_neq_minus1[split_idx])\n            error_pm1 = cum_neq_minus1[split_idx] + (total_neq_1 - cum_neq_1[split_idx])\n            if error_p1 < best_error:\n                best_error = error_p1\n                best_feature = j\n                best_threshold = theta\n                best_polarity = 1\n            if error_pm1 < best_error:\n                best_error = error_pm1\n                best_feature = j\n                best_threshold = theta\n                best_polarity = -1\n    best_threshold = round(best_threshold, 4)\n    best_error = round(best_error, 4)\n    return {'feature_index': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': best_error}"}
{"task_id": 268, "completion_id": 0, "solution": "import numpy as np\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    if n_vertices == 1:\n        return [[0]]\n    if directed:\n        adj = (np.random.rand(n_vertices, n_vertices) <= edge_prob).astype(int)\n        np.fill_diagonal(adj, 0)\n    else:\n        (rows, cols) = np.triu_indices(n_vertices, k=1)\n        r = np.random.rand(len(rows))\n        mask = r <= edge_prob\n        adj = np.zeros((n_vertices, n_vertices), dtype=int)\n        adj[rows[mask], cols[mask]] = 1\n        adj[cols[mask], rows[mask]] = 1\n    return adj.tolist()"}
{"task_id": 269, "completion_id": 0, "solution": "def count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    return 164 * (state_dimensions + 1) + 165 * action_dimensions"}
{"task_id": 270, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    expected_rewards = (context * thetas).sum(axis=0)\n    rounded_rewards = np.round(expected_rewards, 4)\n    best_arm = np.argmax(rounded_rewards)\n    max_reward = rounded_rewards[best_arm].item()\n    return (max_reward, best_arm)"}
{"task_id": 271, "completion_id": 0, "solution": "def xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\"\"\"\n    G_L = sum((lp - lt for (lp, lt) in zip(left_pred, left_true)))\n    H_L = len(left_true)\n    G_R = sum((rp - rt for (rp, rt) in zip(right_pred, right_true)))\n    H_R = len(right_true)\n    G_P = G_L + G_R\n    H_P = H_L + H_R\n    score_L = G_L ** 2 / H_L\n    score_R = G_R ** 2 / H_R\n    score_P = G_P ** 2 / H_P\n    gain = 0.5 * (score_L + score_R - score_P)\n    rounded_gain = round(gain, 4)\n    return 0.0 if rounded_gain == 0.0 else rounded_gain"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport bisect\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    sorted_pairs = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_features = [x[0] for x in sorted_pairs]\n    sorted_targets = [x[1] for x in sorted_pairs]\n    unique_sorted = []\n    prev = None\n    for val in sorted_features:\n        if val != prev:\n            unique_sorted.append(val)\n            prev = val\n    candidate_thresholds = []\n    for i in range(len(unique_sorted) - 1):\n        mid = (unique_sorted[i] + unique_sorted[i + 1]) / 2\n        candidate_thresholds.append(mid)\n    if not candidate_thresholds:\n        return (None, 0.0)\n    parent_counts = Counter(sorted_targets)\n    total_parent = len(sorted_targets)\n    parent_entropy = 0.0\n    for count in parent_counts.values():\n        p = count / total_parent\n        if p > 0:\n            parent_entropy -= p * math.log2(p)\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n    max_gain = -float('inf')\n    best_threshold = None\n    for t in candidate_thresholds:\n        split_idx = bisect.bisect_left(sorted_features, t)\n        left_targets = sorted_targets[:split_idx]\n        right_targets = sorted_targets[split_idx:]\n        left_total = len(left_targets)\n        left_entropy = 0.0\n        if left_total > 0:\n            left_counts = Counter(left_targets)\n            for count in left_counts.values():\n                p = count / left_total\n                if p > 0:\n                    left_entropy -= p * math.log2(p)\n        right_total = len(right_targets)\n        right_entropy = 0.0\n        if right_total > 0:\n            right_counts = Counter(right_targets)\n            for count in right_counts.values():\n                p = count / right_total\n                if p > 0:\n                    right_entropy -= p * math.log2(p)\n        n = total_parent\n        weighted_avg = left_total / n * left_entropy + right_total / n * right_entropy\n        gain = parent_entropy - weighted_avg\n        if gain > max_gain or (gain == max_gain and t < best_threshold):\n            max_gain = gain\n            best_threshold = t\n    if max_gain <= 0.0:\n        return (None, 0.0)\n    else:\n        return (round(best_threshold, 4), round(max_gain, 4))"}
{"task_id": 274, "completion_id": 0, "solution": "import numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\"\"\"\n    arr = np.array(values, dtype=float)\n    clipped = np.clip(arr, -5, 5)\n    return clipped.tolist()"}
{"task_id": 276, "completion_id": 0, "solution": "import math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\"\"\"\n    training_tokens = set()\n    counts = Counter()\n    h_counts = Counter()\n    for s in corpus:\n        tokens = s.lower().split()\n        stripped = [t.strip(string.punctuation) for t in tokens]\n        processed = ['<bol>'] + stripped + ['<eol>']\n        for token in processed:\n            training_tokens.add(token)\n        for i in range(len(processed) - (N - 1)):\n            ngram = processed[i:i + N]\n            h = tuple(ngram[:-1])\n            w = ngram[-1]\n            key = (h, w)\n            counts[key] += 1\n            h_counts[h] += 1\n    if unk:\n        vocab = training_tokens.union({'<unk>'})\n    else:\n        vocab = training_tokens\n    vocab_size = len(vocab)\n    target_tokens = sentence.lower().split()\n    stripped_target = [t.strip(string.punctuation) for t in target_tokens]\n    if unk:\n        processed_target = ['<unk>' if t not in training_tokens else t for t in stripped_target]\n    else:\n        processed_target = stripped_target\n    padded_target = ['<bol>'] + processed_target + ['<eol>']\n    target_ngrams = []\n    for i in range(len(padded_target) - (N - 1)):\n        ngram = padded_target[i:i + N]\n        h = tuple(ngram[:-1])\n        w = ngram[-1]\n        target_ngrams.append((h, w))\n    total_log = 0.0\n    for (h, w) in target_ngrams:\n        count_hw = counts.get((h, w), 0)\n        count_h = h_counts.get(h, 0)\n        numerator = count_hw + k\n        denominator = count_h + k * vocab_size\n        if denominator <= 0:\n            prob = 0.0\n        else:\n            prob = numerator / denominator\n        total_log += math.log10(prob) if prob > 0 else float('-inf')\n    if total_log == float('-inf'):\n        return round(float('-inf'), 4)\n    return round(total_log, 4)"}
{"task_id": 277, "completion_id": 0, "solution": "def is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env['action_space'], (tuple, dict))\n    tuple_obs = isinstance(env['observation_space'], (tuple, dict))\n    return (tuple_action, tuple_obs)"}
{"task_id": 278, "completion_id": 0, "solution": "def evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    current_node = tree\n    while True:\n        if 'value' in current_node:\n            return current_node['value']\n        feature_i = current_node['feature_i']\n        threshold = current_node['threshold']\n        if sample[feature_i] <= threshold:\n            current_node = current_node['true_branch']\n        else:\n            current_node = current_node['false_branch']"}
{"task_id": 279, "completion_id": 0, "solution": "import numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    N = len(y_true)\n    mse = np.mean((y_pred - y_true) ** 2)\n    mse_rounded = round(mse, 4)\n    gradient = 2.0 / N * (y_pred - y_true)\n    gradient_list = [round(g, 4) for g in gradient.tolist()]\n    pred_classes = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(pred_classes == y_true)\n    accuracy_rounded = round(accuracy, 4)\n    return (mse_rounded, gradient_list, accuracy_rounded)"}
{"task_id": 280, "completion_id": 0, "solution": "import numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"Compute the L2 regularization value or its gradient.\"\"\"\n    if return_grad:\n        grad = alpha * w\n        rounded_grad = np.round(grad, 4)\n        return rounded_grad\n    else:\n        sum_sq = np.sum(w ** 2)\n        value = 0.5 * alpha * sum_sq\n        rounded_value = round(float(value), 4)\n        return rounded_value"}
{"task_id": 281, "completion_id": 0, "solution": "import numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative')\n\n    class L1Regularizer:\n\n        def __init__(self, alpha: float):\n            self.alpha = alpha\n\n        def __call__(self, w: np.ndarray) -> float:\n            return float(self.alpha * np.sum(np.abs(w)))\n\n        def grad(self, w: np.ndarray) -> np.ndarray:\n            return self.alpha * np.sign(w)\n    return L1Regularizer(alpha)"}
{"task_id": 282, "completion_id": 0, "solution": "import math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    if not data:\n        return (0.0, 0.0, 0.0)\n    n = 0\n    m = 0.0\n    s = 0.0\n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n    if n <= 1:\n        variance = 0.0\n    else:\n        variance = s / (n - 1)\n    std_dev = math.sqrt(variance)\n    mean_rounded = round(m, 4)\n    var_rounded = round(variance, 4)\n    std_rounded = round(std_dev, 4)\n    return (mean_rounded, var_rounded, std_rounded)"}
{"task_id": 283, "completion_id": 0, "solution": "import numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    p = 1.0 / (1.0 + np.exp(-predicted))\n    g = p - actual\n    sum_g = np.sum(g)\n    sum_h = np.sum(p * (1 - p))\n    denominator = sum_h + regularization\n    leaf_value = sum_g / denominator\n    gain = 0.5 * sum_g ** 2 / denominator\n    return [round(leaf_value, 4), round(gain, 4)]"}
{"task_id": 284, "completion_id": 0, "solution": "def iht_get_index(obj: object, size: int, table: dict, overfull_count: list[int], readonly: bool=False) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    if obj in table:\n        return table[obj]\n    if readonly:\n        return None\n    if len(table) >= size:\n        index = hash(obj) % size\n        overfull_count[0] += 1\n        return index\n    else:\n        index = len(table)\n        table[obj] = index\n        return index"}
{"task_id": 285, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    x_2d = x.reshape(1, -1) if x.ndim == 1 else x\n    y_2d = y.reshape(1, -1) if y.ndim == 1 else y\n    if x_2d.shape[1] != y_2d.shape[1]:\n        return -1\n    kernel_matrix = x_2d @ y_2d.T\n    return kernel_matrix.tolist()"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    global_symbols = globals()\n    initializer = global_symbols.get(name)\n    if initializer is not None and callable(initializer):\n        return initializer\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    X_strides = X.strides\n    new_strides = (X_strides[0], X_strides[1], X_strides[2] * s_h, X_strides[3] * s_w, X_strides[2], X_strides[3])\n    X_windows = as_strided(X, shape=(N, C, H_out, W_out, p_h, p_w), strides=new_strides)\n    pooled_output = np.mean(X_windows, axis=(-2, -1))\n    grad_input = np.zeros_like(X)\n    grad_windows = as_strided(grad_input, shape=(N, C, H_out, W_out, p_h, p_w), strides=new_strides)\n    scaled_grad = accum_grad[..., np.newaxis, np.newaxis] / (p_h * p_w)\n    np.add(grad_windows, scaled_grad, out=grad_windows)\n    pooled_output_rounded = np.round(pooled_output, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n    return (pooled_output_rounded.tolist(), grad_input_rounded.tolist())"}
{"task_id": 288, "completion_id": 0, "solution": "import numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    if np.isscalar(actual) and np.isscalar(predicted):\n        se = (actual - predicted) ** 2\n        return round(float(se), 4)\n    if np.isscalar(actual) or np.isscalar(predicted):\n        return -1\n    if isinstance(actual, np.ndarray) and actual.ndim != 1:\n        return -1\n    if isinstance(predicted, np.ndarray) and predicted.ndim != 1:\n        return -1\n    try:\n        len_actual = len(actual)\n        len_predicted = len(predicted)\n    except TypeError:\n        return -1\n    if len_actual == 0 or len_predicted == 0 or len_actual != len_predicted:\n        return -1\n    try:\n        a = np.asarray(actual, dtype=np.float64)\n        p = np.asarray(predicted, dtype=np.float64)\n    except (ValueError, TypeError):\n        return -1\n    mse = np.mean((a - p) ** 2)\n    return round(float(mse), 4)"}
{"task_id": 289, "completion_id": 0, "solution": "def format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    lines = [f'{field}: \"{str(value)}\"' for (field, value) in entries]\n    return '\\n'.join(lines)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    value: object\n@dataclass\nclass Node:\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08, rtol=0.0)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08, rtol=0.0):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 291, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    (m, d) = X.shape\n    if n_components < 1 or n_components > d:\n        return -1\n    sigma = np.cov(X, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(sigma)\n    eigenvalues = np.real(eigenvalues)\n    eigenvectors = np.real(eigenvectors)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    selected = sorted_eigenvectors[:, :n_components]\n    for i in range(selected.shape[1]):\n        if selected[0, i] < 0:\n            selected[:, i] *= -1\n    transformed = X @ selected\n    transformed_rounded = np.round(transformed, 4)\n    return transformed_rounded.tolist()"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\"\"\"\n    parent1_rows = len(parent1)\n    parent2_rows = len(parent2)\n    if parent1_rows != parent2_rows:\n        return -1\n    if parent1_rows == 0:\n        return ([], [])\n    parent1_cols = len(parent1[0])\n    for row in parent1:\n        if len(row) != parent1_cols:\n            return -1\n    parent2_cols = len(parent2[0])\n    for row in parent2:\n        if len(row) != parent2_cols:\n            return -1\n    if parent1_cols != parent2_cols:\n        return -1\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 293, "completion_id": 0, "solution": "def map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    processed_name = agent_name.strip().lower()\n    agent_mapping = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    return agent_mapping.get(processed_name, -1)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\"\"\"\n    adj = {}\n    v2i = G['_V2I']\n    for vertex in v2i:\n        adj[vertex] = []\n    for edges in G['_G']:\n        for edge in edges:\n            (s, t, w) = edge\n            adj[s].append((t, w))\n            if not G['is_directed']:\n                adj[t].append((s, w))\n    for u in adj:\n        adj[u].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return bool(np.all((x == 0) | (x == 1)))"}
{"task_id": 297, "completion_id": 0, "solution": "import numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    (a, b) = feature_range\n    if a >= b:\n        return -1\n    data_np = np.array(data, dtype=np.float64)\n    mins = data_np.min(axis=0)\n    maxs = data_np.max(axis=0)\n    denominator = maxs - mins\n    denominator[denominator == 0] = 1\n    scaled = (data_np - mins) / denominator * (b - a) + a\n    scaled = np.nan_to_num(scaled, nan=0.0, posinf=0.0, neginf=0.0)\n    rounded = np.round(scaled, 4)\n    return rounded.tolist()"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\"\"\"\n    if N < 1:\n        raise ValueError('N must be \u2265 1')\n    if N == 1:\n        unigram_counts = Counter()\n        for sentence in corpus:\n            tokens = sentence.split()\n            unigram_counts.update(tokens)\n        total_tokens = sum(unigram_counts.values())\n    else:\n        ngram_counts = Counter()\n        prefix_counts = Counter()\n        for sentence in corpus:\n            original_tokens = sentence.split()\n            padded_tokens = ['<bol>'] * (N - 1) + original_tokens + ['<eol>']\n            for i in range(len(padded_tokens) - N + 1):\n                ngram = tuple(padded_tokens[i:i + N])\n                ngram_counts[ngram] += 1\n            for i in range(len(padded_tokens) - (N - 1) + 1):\n                prefix = tuple(padded_tokens[i:i + (N - 1)])\n                prefix_counts[prefix] += 1\n    query_tokens = query.split()\n    if N > 1:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    if len(padded_query) < N:\n        return float('-inf')\n    query_ngrams = [tuple(padded_query[i:i + N]) for i in range(len(padded_query) - N + 1)]\n    log_sum = 0.0\n    for ngram in query_ngrams:\n        if N == 1:\n            unigram = ngram[0]\n            count = unigram_counts.get(unigram, 0)\n            if count == 0 or total_tokens == 0:\n                return float('-inf')\n            prob = count / total_tokens\n        else:\n            count_ngram = ngram_counts.get(ngram, 0)\n            if count_ngram == 0:\n                return float('-inf')\n            prefix = ngram[:-1]\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        log_sum += math.log(prob)\n    return round(log_sum, 4)"}
{"task_id": 299, "completion_id": 0, "solution": "import numpy as np\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iterations):\n        squared_distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        assignments = np.argmin(squared_distances, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            mask = assignments == j\n            if mask.any():\n                new_centroids[j] = X[mask].mean(axis=0)\n        if np.array_equal(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return assignments.tolist()"}
{"task_id": 300, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Union\nNumber = Union[int, float]\ndef top_k_elements(sequence: List[Number], k: int, order: str='largest') -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\"\"\"\n    if not sequence or k <= 0:\n        return []\n    n = len(sequence)\n    if k >= n:\n        if order == 'largest':\n            return sorted(sequence, reverse=True)\n        else:\n            return sorted(sequence)\n    if order == 'largest':\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            elif num > heap[0]:\n                heapq.heappushpop(heap, num)\n        res = []\n        while heap:\n            res.append(heapq.heappop(heap))\n        res.reverse()\n        return res\n    else:\n        heap = []\n        for num in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, -num)\n            elif num < -heap[0]:\n                heapq.heappushpop(heap, -num)\n        res = []\n        while heap:\n            res.append(-heapq.heappop(heap))\n        res.reverse()\n        return res"}
{"task_id": 301, "completion_id": 0, "solution": "def inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n    from functools import total_ordering\n\n    @total_ordering\n    class Node:\n\n        def __init__(self, key, val):\n            self.key = key\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def __lt__(self, other):\n            if not isinstance(other, Node):\n                return NotImplemented\n            return self.val < other.val\n\n        def __eq__(self, other):\n            if not isinstance(other, Node):\n                return NotImplemented\n            return self.val == other.val\n    nodes = [Node(k, v) for (k, v) in pairs]\n    root = nodes[0]\n    for node in nodes[1:]:\n        current = root\n        while True:\n            if node < current:\n                if current.left is None:\n                    current.left = node\n                    break\n                else:\n                    current = current.left\n            elif current.right is None:\n                current.right = node\n                break\n            else:\n                current = current.right\n    result = []\n\n    def in_order(node):\n        if node is not None:\n            in_order(node.left)\n            result.append(node.key)\n            in_order(node.right)\n    in_order(root)\n    return result"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    diff = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    distance_matrix = np.sqrt((diff ** 2).sum(axis=2))\n    W = 1 / (1 + distance_matrix)\n    np.fill_diagonal(W, 0)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    prev_labels = None\n    for _ in range(100):\n        distances = np.sqrt(((E[:, np.newaxis, :] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            cluster = labels[i]\n            new_centroids[cluster] += E[i]\n            counts[cluster] += 1\n        for c in range(k):\n            if counts[c] == 0:\n                random_idx = np.random.randint(n)\n                new_centroids[c] = E[random_idx]\n            else:\n                new_centroids[c] = new_centroids[c] / counts[c]\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_index = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_index]\n    (curr_mine, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    debug_lines = ['-' * 25 + ' DEBUG ' + '-' * 25, f'Mine (prev) [{prev_label}]:', prev_mine, f'Theirs (prev) [{prev_label}]:', prev_gold, f'Mine [{curr_label}]:', curr_mine, f'Theirs [{curr_label}]:', curr_gold + warn_str, '-' * 23 + ' END DEBUG ' + '-' * 23]\n    return '\\n'.join(debug_lines)"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility.\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X_augmented = np.hstack([np.ones((X.shape[0], 1), dtype=X.dtype), X])\n    else:\n        X_augmented = X.copy()\n    (n_samples, n_features) = X_augmented.shape\n    if np.isscalar(mu):\n        mu_prior = np.full(n_features, mu, dtype=np.float64)\n    else:\n        mu_prior = np.asarray(mu, dtype=np.float64)\n        if mu_prior.shape != (n_features,):\n            raise ValueError('mu must be a scalar or have length equal to the number of features.')\n    if V is None:\n        V_prior = np.eye(n_features)\n    elif np.isscalar(V):\n        V_prior = V * np.eye(n_features)\n    elif isinstance(V, (list, tuple)):\n        if len(V) != n_features:\n            raise ValueError('V as list/tuple must have length equal to the number of features.')\n        V_prior = np.diag(V)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            if V.size != n_features:\n                raise ValueError('V as 1D array must have length equal to the number of features.')\n            V_prior = np.diag(V)\n        elif V.ndim == 2:\n            if V.shape != (n_features, n_features):\n                raise ValueError('V as 2D array must be a square matrix matching feature count.')\n            V_prior = V\n        else:\n            raise ValueError('V must be 1D or 2D numpy array.')\n    else:\n        raise TypeError('V must be None, scalar, list/tuple, or numpy array.')\n    V_inv = np.linalg.inv(V_prior)\n    XTX = X_augmented.T @ X_augmented\n    XTy = X_augmented.T @ y\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu_prior + XTy)\n    return [round(coef, 4) for coef in mu_b.tolist()]"}
{"task_id": 305, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=np.float64).flatten()\n    s = np.where(x_arr >= 0, 1 / (1 + np.exp(-x_arr)), np.exp(x_arr) / (1 + np.exp(x_arr)))\n    s_rounded = np.round(s, decimals=4)\n    return s_rounded.tolist()"}
{"task_id": 307, "completion_id": 0, "solution": "import numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    return (X[idxs], y[idxs])"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    mels = np.linspace(min_mel, max_mel, num=n_filters + 2)\n    f_Hz = 700 * (10 ** (mels / 2595) - 1)\n    bin_freqs = np.arange(N // 2 + 1) * fs / N\n    filterbank = []\n    for i in range(n_filters):\n        f_left = f_Hz[i]\n        f_center = f_Hz[i + 1]\n        f_right = f_Hz[i + 2]\n        mask = (bin_freqs >= f_left) & (bin_freqs <= f_right)\n        left_slope = (bin_freqs - f_left) / (f_center - f_left)\n        right_slope = (f_right - bin_freqs) / (f_right - f_center)\n        weights = np.minimum(left_slope, right_slope)\n        weights = np.clip(weights, 0.0, None)\n        weights = np.where(mask, weights, 0.0)\n        if normalize:\n            scale = 2.0 / (f_right - f_left)\n            weights *= scale\n        rounded_weights = [round(w, 4) for w in weights.tolist()]\n        filterbank.append(rounded_weights)\n    return filterbank"}
{"task_id": 309, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    linear_term = X.dot(w) + w0\n    XV = X.dot(v)\n    sum_XV_sq = (XV ** 2).sum(axis=1)\n    X_sq = X ** 2\n    V_sq_sum = (v ** 2).sum(axis=1)\n    sum_X_sq_V_sq = X_sq.dot(V_sq_sum)\n    interaction = 0.5 * (sum_XV_sq - sum_X_sq_V_sq)\n    predictions = linear_term + interaction\n    return [round(pred, 4) for pred in predictions.tolist()]"}
{"task_id": 310, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1.0\n    actual_arr = np.asarray(actual)\n    predicted_arr = np.asarray(predicted)\n    squared_errors = (actual_arr - predicted_arr) ** 2\n    mse = np.mean(squared_errors)\n    rmse = np.sqrt(mse)\n    return round(rmse, 4)"}
{"task_id": 311, "completion_id": 0, "solution": "import numpy as np\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    if isinstance(arr, list):\n        np_arr = np.array(arr, dtype=float)\n    else:\n        np_arr = arr.astype(float)\n    clipped = np.clip(np_arr, a_min=0.0, a_max=None)\n    return clipped.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len + 1)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return np.round(window, 4).tolist()"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        shift = 0.0\n        x = float(x)\n        while x < 6:\n            shift -= 1.0 / x\n            x += 1.0\n        ln_x = math.log(x)\n        inv_x = 1.0 / x\n        inv_x2 = inv_x * inv_x\n        inv_x4 = inv_x2 * inv_x2\n        inv_x6 = inv_x4 * inv_x2\n        result = ln_x - 0.5 * inv_x - 1.0 / 12.0 * inv_x2 + 1.0 / 120.0 * inv_x4 - 1.0 / 252.0 * inv_x6\n        return result + shift\n    gamma_row = gamma[d]\n    sum_gamma = sum(gamma_row)\n    gamma_dt = gamma_row[t]\n    term1 = digamma(gamma_dt)\n    term2 = digamma(sum_gamma)\n    result = term1 - term2\n    return round(result, 4)"}
{"task_id": 315, "completion_id": 0, "solution": "import numpy as np\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    processed = name.lower().replace('_', '')\n\n    def mae_loss(y_true, y_pred):\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n        loss = np.mean(np.abs(y_true - y_pred))\n        return round(float(loss), 4)\n\n    def mse_loss(y_true, y_pred):\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n        loss = np.mean((y_true - y_pred) ** 2)\n        return round(float(loss), 4)\n\n    def bce_loss(y_true, y_pred):\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n        y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n        loss = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n        return round(float(loss), 4)\n    loss_mapping = {'mae': mae_loss, 'meanabsoluteerror': mae_loss, 'mse': mse_loss, 'meansquarederror': mse_loss, 'crossentropy': bce_loss, 'logloss': bce_loss, 'ce': bce_loss}\n    if processed not in loss_mapping:\n        raise ValueError('Invalid loss function.')\n    return loss_mapping[processed]"}
{"task_id": 316, "completion_id": 0, "solution": "import numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x_np = np.array(x)\n    y_np = np.array(y)\n    distance = np.linalg.norm(x_np - y_np)\n    return round(distance, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    prev_mine = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n'\n    prev_theirs = f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n'\n    two_blanks = '\\n\\n'\n    current_mine = f'Mine [{curr_label}]:\\n{curr_pred}\\n'\n    current_theirs = f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    footer = '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    return header + prev_mine + prev_theirs + two_blanks + current_mine + current_theirs + footer"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    (n_samples, n_features) = X_train.shape\n    D = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = np.inf\n        best_j = -1\n        best_t = None\n        best_p = None\n        for j in range(n_features):\n            sorted_indices = np.argsort(X_train[:, j])\n            X_j_sorted = X_train[sorted_indices, j]\n            y_sorted = y_train[sorted_indices]\n            D_sorted = D[sorted_indices]\n            mask_pos = y_sorted == 1\n            mask_neg = ~mask_pos\n            left_pos = np.cumsum(D_sorted * mask_pos)\n            left_neg = np.cumsum(D_sorted * mask_neg)\n            total_pos = left_pos[-1] if len(left_pos) > 0 else 0\n            total_neg = left_neg[-1] if len(left_neg) > 0 else 0\n            for k in range(len(X_j_sorted) - 1):\n                if X_j_sorted[k] == X_j_sorted[k + 1]:\n                    continue\n                t_candidate = (X_j_sorted[k] + X_j_sorted[k + 1]) / 2\n                current_left_pos = left_pos[k]\n                current_left_neg = left_neg[k]\n                current_right_pos = total_pos - current_left_pos\n                current_right_neg = total_neg - current_left_neg\n                error_p1 = current_left_pos + current_right_neg\n                error_m1 = current_left_neg + current_right_pos\n                if error_p1 < error_m1:\n                    current_error = error_p1\n                    current_p = 1\n                else:\n                    current_error = error_m1\n                    current_p = -1\n                if current_error < best_error:\n                    best_error = current_error\n                    best_j = j\n                    best_t = t_candidate\n                    best_p = current_p\n        if best_j == -1:\n            weighted_error_p1 = np.sum(D[y_train == -1])\n            weighted_error_m1 = np.sum(D[y_train == 1])\n            if weighted_error_p1 < weighted_error_m1:\n                best_p = 1\n                best_error = weighted_error_p1\n            else:\n                best_p = -1\n                best_error = weighted_error_m1\n            best_j = 0\n            best_t = -np.inf\n        epsilon_m = best_error\n        epsilon_m = max(epsilon_m, 1e-15)\n        epsilon_m = min(epsilon_m, 1 - 1e-15)\n        alpha_m = 0.5 * math.log((1 - epsilon_m) / epsilon_m)\n        h_m = best_p * np.where(X_train[:, best_j] >= best_t, 1, -1)\n        D *= np.exp(-alpha_m * y_train * h_m)\n        D_sum = D.sum()\n        if D_sum > 0:\n            D /= D_sum\n        else:\n            D = np.ones_like(D) / n_samples\n        stumps.append((best_j, best_t, best_p, alpha_m))\n    sum_alpha_h = np.zeros(X_test.shape[0])\n    for (j, t, p, alpha) in stumps:\n        h = p * np.where(X_test[:, j] >= t, 1, -1)\n        sum_alpha_h += alpha * h\n    y_pred = [1 if s >= 0 else -1 for s in sum_alpha_h]\n    return y_pred"}
{"task_id": 319, "completion_id": 0, "solution": "import numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y).flatten()\n    m = X.shape[0]\n    X_with_bias = np.c_[np.ones((m, 1)), X]\n    n_features = X_with_bias.shape[1]\n    theta = np.zeros(n_features)\n    for _ in range(epochs):\n        for i in range(m):\n            x_i = X_with_bias[i]\n            y_i = y[i]\n            prediction = np.dot(theta, x_i)\n            error = prediction - y_i\n            theta -= learning_rate * error * x_i\n    theta_rounded = np.round(theta, 4).tolist()\n    return theta_rounded"}
{"task_id": 321, "completion_id": 0, "solution": "import numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    np.random.seed(42)\n    characters = [' '] + list(string.ascii_lowercase) + list(string.ascii_uppercase)\n    char_to_index = {c: idx for (idx, c) in enumerate(characters)}\n    target_len = len(target)\n    target_indices = [char_to_index[c] for c in target]\n    population = [''.join(np.random.choice(characters, size=target_len)) for _ in range(population_size)]\n    best_individual = None\n    best_fitness = -np.inf\n    for _ in range(iterations):\n        fitness = []\n        for individual in population:\n            sum_diff = 0\n            for (i, c) in enumerate(individual):\n                sum_diff += abs(char_to_index[c] - target_indices[i])\n            ind_fitness = 1.0 / (sum_diff + 1e-06)\n            fitness.append(ind_fitness)\n            if ind_fitness > best_fitness:\n                best_fitness = ind_fitness\n                best_individual = individual\n        if best_individual == target:\n            break\n        parents = []\n        remaining_pop = population.copy()\n        remaining_fit = fitness.copy()\n        total_fit = sum(remaining_fit)\n        for _ in range(population_size):\n            if total_fit <= 0:\n                chosen_idx = np.random.choice(len(remaining_pop))\n            else:\n                probs = [f / total_fit for f in remaining_fit]\n                chosen_idx = np.random.choice(len(remaining_pop), p=probs)\n            parents.append(remaining_pop[chosen_idx])\n            total_fit -= remaining_fit[chosen_idx]\n            del remaining_pop[chosen_idx]\n            del remaining_fit[chosen_idx]\n        next_generation = []\n        for i in range(population_size // 2):\n            parent1 = parents[2 * i]\n            parent2 = parents[2 * i + 1]\n            crossover_point = np.random.randint(0, target_len + 1)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:]\n            next_generation.extend([child1, child2])\n        mutated_next_gen = []\n        for child in next_generation:\n            mutated = []\n            for c in child:\n                if np.random.random() < mutation_rate:\n                    mutated.append(np.random.choice(characters))\n                else:\n                    mutated.append(c)\n            mutated_next_gen.append(''.join(mutated))\n        population = mutated_next_gen\n    return best_individual"}
{"task_id": 322, "completion_id": 0, "solution": "import numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    predicted_clipped = np.clip(predicted, EPS, 1 - EPS)\n    term1 = actual * np.log(predicted_clipped)\n    term2 = (1 - actual) * np.log(1 - predicted_clipped)\n    total_loss = -np.sum(term1 + term2) / actual.size\n    return round(total_loss, 4)"}
{"task_id": 324, "completion_id": 0, "solution": "import numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    if len(x) != len(y):\n        return []\n    rows = X.shape[0]\n    cols = X.shape[1]\n    channels = X.shape[2]\n    result = []"}
{"task_id": 326, "completion_id": 0, "solution": "import numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\"\"\"\n    support_vectors = np.array(support_vectors)\n    X = np.array(X)\n    n_features = support_vectors.shape[1]\n    if gamma is None:\n        gamma = 1.0 / n_features\n    alpha_y = np.array(lagr_multipliers) * np.array(support_vector_labels)\n    if kernel == 'linear':\n        kernel_matrix = support_vectors @ X.T\n    elif kernel == 'polynomial':\n        linear_part = support_vectors @ X.T\n        kernel_matrix = (gamma * linear_part + coef) ** power\n    elif kernel == 'rbf':\n        S_sq = np.sum(support_vectors ** 2, axis=1)[:, np.newaxis]\n        X_sq = np.sum(X ** 2, axis=1)\n        distances = S_sq + X_sq - 2 * support_vectors @ X.T\n        kernel_matrix = np.exp(-gamma * distances)\n    else:\n        raise ValueError(f'Invalid kernel: {kernel}')\n    decision_values = alpha_y @ kernel_matrix + intercept\n    labels = np.where(decision_values >= 0, 1, -1).tolist()\n    return labels"}
{"task_id": 328, "completion_id": 0, "solution": "from typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        max_k = N // 2\n        k_values = np.arange(max_k + 1)\n        freqs = k_values * (fs / N)\n    else:\n        freqs = np.fft.fftfreq(N) * fs\n    rounded_freqs = np.round(freqs, 4)\n    return rounded_freqs.tolist()"}
{"task_id": 330, "completion_id": 0, "solution": "def update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n    flattened = {}\n    for key in summary_dict:\n        if key not in ('parameters', 'hyperparameters'):\n            flattened[key] = summary_dict[key]\n    if 'parameters' in summary_dict:\n        for (k, v) in summary_dict['parameters'].items():\n            flattened[k] = v\n    if 'hyperparameters' in summary_dict:\n        for (k, v) in summary_dict['hyperparameters'].items():\n            flattened[k] = v\n    for (key, value) in flattened.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n    return (new_parameters, new_hyperparameters)"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask).astype(bool)\n    oob_counts = oob_mask.sum(axis=1)\n    valid_samples = oob_counts > 0\n    if not np.any(valid_samples):\n        return -1.0\n    oob_sums = (predictions * oob_mask).sum(axis=1)\n    averages = oob_sums[valid_samples] / oob_counts[valid_samples]\n    squared_errors = (y_true[valid_samples] - averages) ** 2\n    mse = squared_errors.mean()\n    return round(mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\"\"\"\n    item_counter = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_counter.update(unique_items)\n    frequent_items = {item: count for (item, count) in item_counter.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    order_dict = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        unique_trans = set(transaction)\n        filtered = [item for item in unique_trans if item in frequent_items]\n        if not filtered:\n            continue\n        filtered_sorted = sorted(filtered, key=lambda x: order_dict[x])\n        current_node = root\n        for item in filtered_sorted:\n            children = current_node['children']\n            if item in children:\n                children[item]['support'] += 1\n                current_node = children[item]\n            else:\n                new_node = {'support': 1, 'children': {}}\n                children[item] = new_node\n                current_node = new_node\n    return root"}
{"task_id": 333, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    mean_X = np.mean(X, axis=0)\n    std_X = np.std(X, axis=0)\n    X_normalized = (X - mean_X) / (std_X + 1e-08)\n    m = X.shape[0]\n    X_augmented = np.hstack([np.ones((m, 1)), X_normalized])\n    theta = np.zeros(X_augmented.shape[1])\n    for _ in range(num_iter):\n        z = X_augmented.dot(theta)\n        h = 1 / (1 + np.exp(-z))\n        gradient = X_augmented.T.dot(h - y) / m\n        theta -= alpha * gradient\n    z_final = X_augmented.dot(theta)\n    probabilities = 1 / (1 + np.exp(-z_final))\n    predicted_labels = (probabilities >= 0.5).astype(int)\n    return predicted_labels.tolist()"}
{"task_id": 334, "completion_id": 0, "solution": "import math\ndef noam_learning_rate(step: int, model_dim: int=512, scale_factor: float=1.0, warmup_steps: int=4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return round(0.0, 9)\n    model_dim_factor = math.pow(model_dim, -0.5)\n    term1 = math.pow(step, -0.5)\n    term2 = step * math.pow(warmup_steps, -1.5)\n    min_term = min(term1, term2)\n    lr = scale_factor * model_dim_factor * min_term\n    return round(lr, 9)"}
{"task_id": 335, "completion_id": 0, "solution": "import numpy as np\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    lower_name = name.lower()\n    if lower_name == 'zeros':\n        return lambda shape, scale=1.0: np.zeros(shape)\n    elif lower_name == 'ones':\n        return lambda shape, scale=1.0: np.ones(shape) * scale\n    elif lower_name == 'normal':\n        return lambda shape, scale=1.0: np.random.normal(0, scale, shape)\n    elif lower_name == 'glorot_uniform':\n\n        def initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            if len(shape) < 2:\n                raise ValueError('Glorot uniform initializer requires at least two dimensions.')\n            fan_in = shape[0]\n            fan_out = shape[1]\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(-limit, limit, shape)\n        return initializer\n    else:\n        raise ValueError(f'Unsupported initializer: {name}')"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\"\"\"\n    if isinstance(X, list) and len(X) == 0:\n        return []\n    x = np.array(X)\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    if x.shape[0] == 0:\n        return []\n    if Y is None:\n        y = x.copy()\n    else:\n        y = np.array(Y)\n        if y.ndim == 1:\n            y = y.reshape(1, -1)\n    if x.shape[1] != y.shape[1]:\n        return -1\n    dot_product = np.dot(x, y.T)\n    k_matrix = dot_product + c0\n    k_rounded = np.round(k_matrix, 4)\n    return k_rounded.tolist()"}
{"task_id": 337, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\"\"\"\n    if len(x) == 0 and len(y) == 0:\n        return []\n    if len(x) != len(y):\n        return []\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    (rows, cols, _) = X.shape\n    x_rounded = np.around(x_arr).astype(int)\n    y_rounded = np.around(y_arr).astype(int)\n    x_clipped = np.clip(x_rounded, 0, cols - 1)\n    y_clipped = np.clip(y_rounded, 0, rows - 1)\n    pixels = X[y_clipped, x_clipped, :]\n    return pixels.tolist()"}
{"task_id": 338, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X, y, reg_factor):\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = X.shape[0] if X.ndim > 0 else 0\n    n_features = X.shape[1] if X.ndim > 1 else 0\n    X_bar = np.hstack([np.ones((n_samples, 1)), X]) if n_samples != 0 else np.ones((0, n_features + 1))\n    I = np.eye(X_bar.shape[1])\n    XT_X = X_bar.T @ X_bar\n    A = XT_X + reg_factor * I\n    A_inv = np.linalg.inv(A)\n    w = A_inv @ (X_bar.T @ y)\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 339, "completion_id": 0, "solution": "from collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    counts = Counter(y)\n    max_count = max(counts.values())\n    candidates = {k for (k, v) in counts.items() if v == max_count}\n    for element in y:\n        if element in candidates:\n            return element"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\"\"\"\n    new_m = beta1 * m + (1 - beta1) * grad\n    new_v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = new_m / (1 - beta1 ** t)\n    v_hat = new_v / (1 - beta2 ** t)\n    denominator = np.sqrt(v_hat) + eps\n    delta = lr * m_hat / denominator\n    if np.all(grad == 0):\n        updated_param = param.copy()\n    else:\n        updated_param = param - delta\n    updated_param_list = np.round(updated_param, 8).tolist()\n    new_m_list = np.round(new_m, 8).tolist()\n    new_v_list = np.round(new_v, 8).tolist()\n    return (updated_param_list, new_m_list, new_v_list)"}
{"task_id": 342, "completion_id": 0, "solution": "import numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1.0\n    distance = sum((abs(a - b) for (a, b) in zip(x, y)))\n    return round(distance, 4)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\"\"\"\n    N = theta_samples.shape[0]\n    k = int(retain_prcnt * N)\n    rewards_arr = np.array(rewards)\n    sorted_indices = np.argsort(-rewards_arr)\n    elite_indices = sorted_indices[:k]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    rounded_mean = np.round(mean, 4)\n    rounded_variance = np.round(variance, 4)\n    return (rounded_mean.tolist(), rounded_variance.tolist())"}
{"task_id": 344, "completion_id": 0, "solution": "import heapq\nfrom collections import Counter\nclass Node:\n\n    def __init__(self, freq, token, left=None, right=None):\n        self.freq = freq\n        self.token = token\n        self.left = left\n        self.right = right\n\n    def __lt__(self, other):\n        if self.freq == other.freq:\n            return self.token < other.token\n        return self.freq < other.freq\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\"\"\"\n    if not tokens:\n        return {}\n    freq = Counter(tokens)\n    unique = list(freq.items())\n    if len(unique) == 1:\n        only_token = unique[0][0]\n        return {only_token: '0'}\n    heap = []\n    for (token, count) in unique:\n        heapq.heappush(heap, Node(count, token))\n    while len(heap) > 1:\n        left = heapq.heappop(heap)\n        right = heapq.heappop(heap)\n        merged_freq = left.freq + right.freq\n        merged_node = Node(merged_freq, '', left, right)\n        heapq.heappush(heap, merged_node)\n    root = heapq.heappop(heap)\n    codes = {}\n    stack = [(root, '')]\n    while stack:\n        (node, code) = stack.pop()\n        if node.left is None and node.right is None:\n            codes[node.token] = code\n        else:\n            if node.right:\n                stack.append((node.right, code + '1'))\n            if node.left:\n                stack.append((node.left, code + '0'))\n    return codes"}
{"task_id": 345, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\"\"\"\n    X_train_aug = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test_aug = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    XT_X = X_train_aug.T @ X_train_aug\n    inv_term = XT_X + omega0\n    inv_matrix = np.linalg.inv(inv_term)\n    XT_y = X_train_aug.T @ y_train\n    rhs = XT_y + omega0 @ mu0\n    mu_n = inv_matrix @ rhs\n    predictions = X_test_aug @ mu_n\n    return np.round(predictions, 4).tolist()"}
{"task_id": 346, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    (labels, counts) = np.unique(y, return_counts=True)\n    probs = counts / counts.sum()\n    entropy_value = -np.sum(probs * np.log2(probs))\n    return round(entropy_value, 4)"}
{"task_id": 347, "completion_id": 0, "solution": "import numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\"\"\"\n    if module == 'C':\n        if Y_real is None or gradInterp is None:\n            raise ValueError(\"Y_real and gradInterp must be provided when module is 'C'\")\n        mean_fake = np.mean(Y_fake)\n        mean_real = np.mean(Y_real)\n        grad_flat = gradInterp.reshape(gradInterp.shape[0], -1)\n        norms = np.linalg.norm(grad_flat, axis=1)\n        gp_term = lambda_ * np.mean((norms - 1) ** 2)\n        loss = mean_fake - mean_real + gp_term\n    elif module == 'G':\n        loss = -np.mean(Y_fake)\n    else:\n        raise ValueError(\"module must be either 'C' or 'G'\")\n    return float(np.round(loss, 4))"}
{"task_id": 348, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    if X.ndim != 2 or X.shape[0] != X.shape[1]:\n        return False\n    if not np.allclose(X, X.T, atol=1e-08):\n        return False\n    eigenvalues = np.linalg.eigvalsh(X)\n    return np.all(eigenvalues > 1e-08)"}
{"task_id": 350, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_ridge_regression(X: list[float | int], y: list[float | int], degree: int, reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    design_matrix = np.column_stack([X_np ** i for i in range(degree + 1)])\n    XTX = design_matrix.T @ design_matrix\n    reg_matrix = reg_factor * np.eye(degree + 1)\n    XTX_plus_reg = XTX + reg_matrix\n    inv_XTX_plus_reg = np.linalg.inv(XTX_plus_reg)\n    XTy = design_matrix.T @ y_np\n    coefficients = inv_XTX_plus_reg @ XTy\n    return np.round(coefficients, 4).tolist()"}
{"task_id": 351, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    new_shape = (N, C, out_h, out_w, p_h, p_w)\n    new_strides = (X.strides[0], X.strides[1], stride * X.strides[2], stride * X.strides[3], X.strides[2], X.strides[3])\n    windows = as_strided(X, shape=new_shape, strides=new_strides)\n    pooled = windows.max(axis=(-2, -1))\n    return pooled.tolist()"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    total = len(labels)\n    entropy_val = 0.0\n    for cnt in counts.values():\n        p = cnt / total\n        entropy_val += p * math.log2(p)\n    entropy_val = -entropy_val\n    return round(entropy_val, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kr, kc, in_ch_W, out_ch) = W.shape\n    if in_ch != in_ch_W:\n        raise ValueError('Mismatch in input channels between X and W')\n    kr_eff = (kr - 1) * dilation + 1\n    kc_eff = (kc - 1) * dilation + 1\n    if pad == 'same':\n        pad_row_total = max(0, (in_rows - 1) * stride + kr_eff - in_rows)\n        pad_col_total = max(0, (in_cols - 1) * stride + kc_eff - in_cols)\n        pr1 = pad_row_total // 2\n        pr2 = pad_row_total - pr1\n        pc1 = pad_col_total // 2\n        pc2 = pad_col_total - pc1\n    elif isinstance(pad, int):\n        pr1 = pr2 = pad\n        pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (pr, pc) = pad\n            pr1 = pr2 = pr\n            pc1 = pc2 = pc\n        elif len(pad) == 4:\n            (pr1, pr2, pc1, pc2) = pad\n        else:\n            pr1 = pr2 = pc1 = pc2 = 0\n    else:\n        pr1 = pr2 = pc1 = pc2 = 0\n    X_pad = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    (H_pad, W_pad) = (X_pad.shape[1], X_pad.shape[2])\n    H_out = (H_pad - kr_eff) // stride + 1\n    W_out = (W_pad - kc_eff) // stride + 1\n    if H_out <= 0 or W_out <= 0:\n        return np.zeros((n_ex, H_out, W_out, out_ch)).tolist()\n    (s_batch, s_H, s_W, s_ch) = X_pad.strides\n    new_shape = (n_ex, H_out, W_out, kr, kc, in_ch)\n    new_strides = (s_batch, s_H * stride, s_W * stride, s_H * (dilation + 1), s_W * (dilation + 1), s_ch)\n    patches = np.lib.stride_tricks.as_strided(X_pad, shape=new_shape, strides=new_strides, writeable=False)\n    patches_reshaped = patches.reshape(-1, kr * kc * in_ch)\n    W_reshaped = W.reshape(-1, out_ch)\n    result = np.matmul(patches_reshaped, W_reshaped)\n    output = result.reshape(n_ex, H_out, W_out, out_ch)\n    return output.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_idx = np.argsort(eigenvalues)[::-1]\n        sorted_eigenvalues = eigenvalues[sorted_idx]\n        sorted_eigenvectors = eigenvectors[:, sorted_idx]\n        directions = sorted_eigenvectors.T\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'.\")\n    n_features = data.shape[1]\n    n_components = min(n_components, n_features)\n    directions = directions[:n_components]\n    for i in range(directions.shape[0]):\n        direction = directions[i]\n        non_zero_indices = np.flatnonzero(direction)\n        if non_zero_indices.size > 0:\n            first_non_zero = non_zero_indices[0]\n            if direction[first_non_zero] < 0:\n                directions[i] *= -1\n    scores = centered_data @ directions.T\n    if solver == 'svd':\n        total_variance = (s ** 2).sum()\n        explained_var_ratios = s[:n_components] ** 2 / total_variance\n    else:\n        total_variance = sorted_eigenvalues.sum()\n        explained_var_ratios = sorted_eigenvalues[:n_components] / total_variance\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_var_ratios_rounded = np.round(explained_var_ratios, 4).tolist()\n    return (scores_rounded, explained_var_ratios_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = leaf.value\n        max_prob = max(probs)\n        return probs.index(max_prob)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data[:, np.newaxis] - centroids) ** 2).sum(axis=2))\n        closest = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(K):\n            mask = closest == j\n            if mask.any():\n                new_centroids[j] = data[mask].mean(axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids.copy()\n    sorted_centroids = sorted(centroids.tolist())\n    rounded_centroids = [[round(val, 4) for val in centroid] for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 358, "completion_id": 0, "solution": "import numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.size == 0:\n        return 0.0\n    correct = (y_true == y_pred).sum()\n    total = len(y_true)\n    acc = correct / total\n    return round(acc, 4)"}
{"task_id": 359, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    if not derivative:\n        loss = -np.sum(y * np.log(y_pred + eps))\n        return round(loss.item(), 4)\n    else:\n        gradient = y_pred - y\n        return np.round(gradient, 4).tolist()"}
{"task_id": 360, "completion_id": 0, "solution": "import numpy as np\ndef dct(frame: np.ndarray | list[float], orthonormal: bool=True) -> list[float]:\n    x = np.array(frame)\n    N = x.size\n    coefficients = np.zeros(N)\n    for k in range(N):\n        sum_total = 0.0\n        for n in range(N):\n            angle = np.pi * k * (2 * n + 1) / (2 * N)\n            sum_total += x[n] * np.cos(angle)\n        c_k = 2 * sum_total\n        if orthonormal:\n            if k == 0:\n                scale = np.sqrt(1 / N)\n            else:\n                scale = np.sqrt(2 / N)\n            c_k *= scale\n        coefficients[k] = c_k\n    rounded = np.round(coefficients, 4)\n    return rounded.tolist()"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized = arr / row_sums[:, np.newaxis]\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_subspaces_are_box(space):\n        if isinstance(space, Tuple):\n            return all((isinstance(s, Box) for s in space.spaces))\n        elif isinstance(space, Dict):\n            return all((isinstance(s, Box) for s in space.spaces.values()))\n        else:\n            return False\n    cont_action = all_subspaces_are_box(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = all_subspaces_are_box(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 364, "completion_id": 0, "solution": "def sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0"}
{"task_id": 366, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    if X.size == 0:\n        return []\n    sum_X = np.sum(X ** 2, axis=1)\n    gram = X @ X.T\n    distances = sum_X[:, np.newaxis] + sum_X[np.newaxis, :] - 2 * gram\n    np.maximum(distances, 0, out=distances)\n    np.fill_diagonal(distances, 0.0)\n    return distances.tolist()"}
{"task_id": 367, "completion_id": 0, "solution": "import re\nfrom typing import Any, Dict, Optional\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get('hyperparameters', {})\n        self.params.update({k: v for (k, v) in hp.items() if k != 'id'})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {'hyperparameters': {'id': self.__class__.__name__, **self.params}}\nclass LinearKernel(KernelBase):\n\n    def __init__(self):\n        super().__init__()\nclass PolynomialKernel(KernelBase):\n\n    def __init__(self, degree: int=3, coef0: float=1.0):\n        super().__init__(degree=degree, coef0=coef0)\nclass RBFKernel(KernelBase):\n\n    def __init__(self, gamma: float=1.0):\n        super().__init__(gamma=gamma)\ndef initialize_kernel(param: Optional[Any]=None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\"\"\"\n    if param is None:\n        return LinearKernel()\n    if isinstance(param, KernelBase):\n        return param\n    if isinstance(param, str):\n        match = re.match('^\\\\s*([a-zA-Z]+)\\\\s*(?:\\\\((.*)\\\\))?\\\\s*$', param, re.IGNORECASE)\n        if not match:\n            raise NotImplementedError(f'Unknown kernel specification: {param}')\n        kernel_name = match.group(1).lower()\n        params_str = match.group(2)\n        params = {}\n        if params_str is not None:\n            for pair in params_str.split(','):\n                pair = pair.strip()\n                if not pair:\n                    continue\n                if '=' not in pair:\n                    raise ValueError(f'Invalid parameter format in kernel string: {pair}')\n                (key, value_str) = pair.split('=', 1)\n                key = key.strip()\n                value_str = value_str.strip()\n\n                def parse_value(s):\n                    s = s.strip()\n                    lower_s = s.lower()\n                    if lower_s == 'true':\n                        return True\n                    elif lower_s == 'false':\n                        return False\n                    elif lower_s == 'none':\n                        return None\n                    try:\n                        return int(s)\n                    except ValueError:\n                        pass\n                    try:\n                        return float(s)\n                    except ValueError:\n                        pass\n                    if len(s) >= 2 and s[0] == s[-1] and (s[0] in ('\"', \"'\")):\n                        return s[1:-1]\n                    return s\n                value = parse_value(value_str)\n                params[key] = value\n        kernel_map = {'linear': LinearKernel, 'polynomial': PolynomialKernel, 'rbf': RBFKernel}\n        kernel_cls = kernel_map.get(kernel_name)\n        if kernel_cls is None:\n            raise NotImplementedError(f'Unknown kernel type: {kernel_name}')\n        try:\n            return kernel_cls(**params)\n        except TypeError as e:\n            raise TypeError(f'Invalid parameters for {kernel_cls.__name__}: {e}')\n    elif isinstance(param, dict):\n        if 'hyperparameters' not in param:\n            raise ValueError(\"Dictionary parameter missing 'hyperparameters' key\")\n        hp = param['hyperparameters']\n        if 'id' not in hp:\n            raise ValueError(\"hyperparameters missing 'id' key\")\n        kernel_id = hp['id']\n        kernel_classes = {'LinearKernel': LinearKernel, 'PolynomialKernel': PolynomialKernel, 'RBFKernel': RBFKernel}\n        if kernel_id not in kernel_classes:\n            raise NotImplementedError(f'Unknown kernel ID: {kernel_id}')\n        kernel_cls = kernel_classes[kernel_id]\n        params = {k: v for (k, v) in hp.items() if k != 'id'}\n        try:\n            return kernel_cls(**params)\n        except TypeError as e:\n            raise TypeError(f'Invalid parameters for {kernel_cls.__name__}: {e}')\n    else:\n        raise NotImplementedError(f'Unsupported kernel specification type: {type(param)}')"}
{"task_id": 368, "completion_id": 0, "solution": "import numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or \u20111 when\n               input validation fails.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n    if x_arr.shape != y_arr.shape:\n        return -1\n    if p <= 0:\n        return -1\n    differences = np.abs(x_arr - y_arr)\n    sum_powered = np.sum(differences ** p)\n    distance = sum_powered ** (1.0 / p)\n    return round(distance, 4)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\"\"\"\n    sum_updates = sum(updates)\n    running_pred = -learning_rate * sum_updates\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        logits = running_pred\n        max_logits = np.max(logits, axis=1, keepdims=True)\n        shifted_logits = logits - max_logits\n        exp_logits = np.exp(shifted_logits)\n        softmax = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(softmax, axis=1).astype(int)"}
{"task_id": 370, "completion_id": 0, "solution": "import numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    (m, n) = X.shape\n    det = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    diff = X - mu\n    quadratic = np.sum(diff @ inv_cov * diff, axis=1)\n    normalization = 1.0 / ((2 * np.pi) ** (n / 2) * np.sqrt(det))\n    densities = normalization * np.exp(-0.5 * quadratic)\n    return [round(density, 4) for density in densities.tolist()]"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    kernel_width = W.shape[0]\n    out_channels = W.shape[2]\n    if pad == 'same':\n        out_len = np.ceil(l_in / stride).astype(int)\n        effective_kernel = (kernel_width - 1) * (dilation + 1) + 1\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(\"Invalid pad argument. Must be 'same', int, or 2-tuple.\")\n    X_padded = np.pad(X, [(0, 0), (p_left, p_right), (0, 0)], mode='constant')\n    padded_length = X_padded.shape[1]\n    effective_kernel_size = (kernel_width - 1) * (dilation + 1) + 1\n    output_length = (padded_length - effective_kernel_size) // stride + 1\n    output_length = max(0, output_length)\n    if output_length == 0:\n        return np.zeros((n_examples, 0, out_channels)).tolist()\n    output_positions = np.arange(output_length) * stride\n    kernel_offsets = np.arange(kernel_width) * (dilation + 1)\n    indices = output_positions[:, None] + kernel_offsets[None, :]\n    valid_indices = (indices >= 0) & (indices < padded_length)\n    indices = np.where(valid_indices, indices, 0)\n    output = np.zeros((n_examples, output_length, out_channels))\n    for ex_idx in range(n_examples):\n        example = X_padded[ex_idx]\n        window = example[indices]\n        window = window * valid_indices[..., None]\n        example_output = np.einsum('okc,kco->oc', window, W)\n        output[ex_idx] = example_output\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probs = counts / len(y)\n    sum_squares = np.sum(probs ** 2)\n    return round(1.0 - sum_squares, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    y = y.ravel()\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b\n        error = y_hat - y\n        dw = 2 / m * X.T.dot(error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = [round(val, 4) for val in theta]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)"}
{"task_id": 375, "completion_id": 0, "solution": "def calc_pad_dims_2D(X_shape: tuple, out_dim: tuple, kernel_shape: tuple, stride: int, dilation: int=0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    if not (isinstance(X_shape, tuple) and len(X_shape) == 4 and all((isinstance(d, int) for d in X_shape))):\n        raise ValueError('X_shape must be a tuple of four integers')\n    if not (isinstance(out_dim, tuple) and len(out_dim) == 2 and all((isinstance(d, int) for d in out_dim))):\n        raise ValueError('out_dim must be a tuple of two integers')\n    if not (isinstance(kernel_shape, tuple) and len(kernel_shape) == 2 and all((isinstance(k, int) for k in kernel_shape))):\n        raise ValueError('kernel_shape must be a tuple of two integers')\n    if not isinstance(stride, int):\n        raise ValueError('stride must be an integer')\n    if not isinstance(dilation, int):\n        raise ValueError('dilation must be an integer')\n    in_rows = X_shape[1]\n    in_cols = X_shape[2]\n    (fr, fc) = kernel_shape\n    (out_rows, out_cols) = out_dim\n    effective_fr = fr * (dilation + 1) - dilation\n    effective_fc = fc * (dilation + 1) - dilation\n    total_pad_row = (out_rows - 1) * stride + effective_fr - in_rows\n    total_pad_col = (out_cols - 1) * stride + effective_fc - in_cols\n    if total_pad_row < 0 or total_pad_col < 0:\n        raise ValueError('Impossible output size: negative padding required')\n    up_pad = total_pad_row // 2\n    down_pad = total_pad_row - up_pad\n    left_pad = total_pad_col // 2\n    right_pad = total_pad_col - left_pad\n    return (up_pad, down_pad, left_pad, right_pad)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    x_np = np.array(X)\n    return np.allclose(x_np, x_np.T, rtol=0, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Compute the negative gradient for logistic loss in binary classification.\"\"\"\n    y_arr = np.array(y)\n    if np.any((y_arr != 0) & (y_arr != 1)):\n        return -1\n    f_arr = np.array(f)\n    y_prime = 2 * y_arr - 1\n    denominator = 1 + np.exp(y_prime * f_arr)\n    g = y_prime / denominator\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()"}
{"task_id": 378, "completion_id": 0, "solution": "def indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0"}
{"task_id": 379, "completion_id": 0, "solution": "def sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    sorted_nodes = sorted(nodes, key=lambda x: (x['priority'], x['entry_id']))\n    return [node['key'] for node in sorted_nodes]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_np = np.asarray(x)\n    if order == 0:\n        elu = np.where(x_np > 0, x_np, alpha * (np.exp(x_np) - 1))\n        result = scale * elu\n    elif order == 1:\n        derivative = np.where(x_np > 0, 1, alpha * np.exp(x_np))\n        result = scale * derivative\n    elif order == 2:\n        result = np.where(x_np > 0, 0, scale * alpha * np.exp(x_np))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 382, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_naive_bayes_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n    \"\"\"\n    classes = np.unique(y_train)\n    priors = []\n    means = []\n    variances = []\n    for c in classes:\n        X_c = X_train[y_train == c]\n        prior = X_c.shape[0] / X_train.shape[0]\n        priors.append(prior)\n        mu = np.mean(X_c, axis=0)\n        var = np.var(X_c, axis=0, ddof=0)\n        means.append(mu)\n        variances.append(var)\n    predictions = []\n    for x in X_test:\n        log_posteriors = []\n        for i in range(len(classes)):\n            prior = priors[i]\n            mu = means[i]\n            var = variances[i]\n            var_plus_eps = var + 0.0001\n            numerator = (x - mu) ** 2\n            exponent = -numerator / (2 * var_plus_eps)\n            log_denominator = 0.5 * np.log(2 * np.pi * var_plus_eps)\n            log_likelihood = np.sum(exponent - log_denominator)\n            log_posterior = math.log(prior) + log_likelihood\n            log_posteriors.append(log_posterior)\n        predicted_class_idx = np.argmax(log_posteriors)\n        predicted_class = classes[predicted_class_idx]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 383, "completion_id": 0, "solution": "def find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]"}
{"task_id": 384, "completion_id": 0, "solution": "import numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\"\"\"\n    L_np = np.array(L, dtype=np.float64)\n    n = L_np.shape[0]\n    if k > n:\n        return -1\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L_np)\n    selected_vecs = eigenvectors[:, :k].copy()\n    for i in range(k):\n        vec = selected_vecs[:, i]\n        norm = np.linalg.norm(vec)\n        if norm != 0:\n            selected_vecs[:, i] = vec / norm\n    epsilon = 1e-09\n    for i in range(k):\n        vec = selected_vecs[:, i]\n        for element in vec:\n            if abs(element) > epsilon:\n                if element < 0:\n                    selected_vecs[:, i] *= -1\n                break\n    rounded = np.round(selected_vecs, 4)\n    return rounded.tolist()"}
{"task_id": 385, "completion_id": 0, "solution": "import numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    X = np.array(X, dtype=np.float64)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    classes = np.unique(y)\n    c = len(classes)\n    k = min(k, c - 1)\n    if k <= 0:\n        return [[] for _ in range(n_samples)]\n    m = np.mean(X, axis=0)\n    class_means = []\n    class_counts = []\n    for cls in classes:\n        X_cls = X[y == cls]\n        class_means.append(np.mean(X_cls, axis=0))\n        class_counts.append(X_cls.shape[0])\n    class_means = np.array(class_means)\n    class_counts = np.array(class_counts)\n    S_w = np.zeros((n_features, n_features))\n    for (i, cls) in enumerate(classes):\n        X_cls = X[y == cls]\n        X_cls_centered = X_cls - class_means[i]\n        S_w += X_cls_centered.T @ X_cls_centered\n    S_b = np.zeros((n_features, n_features))\n    for i in range(c):\n        diff = class_means[i] - m\n        S_b += class_counts[i] * np.outer(diff, diff)\n    Sw_inv = np.linalg.pinv(S_w)\n    M = Sw_inv @ S_b\n    (eigenvalues, eigenvectors) = np.linalg.eig(M)\n    eigenvalues = np.real(eigenvalues)\n    eigenvectors = np.real(eigenvectors)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    W = eigenvectors[:, :k]\n    for i in range(W.shape[1]):\n        vec = W[:, i].copy()\n        norm = np.linalg.norm(vec)\n        if norm == 0:\n            continue\n        vec /= norm\n        if vec[0] < 0:\n            vec *= -1\n        W[:, i] = vec\n    projected = X @ W\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()"}
{"task_id": 386, "completion_id": 0, "solution": "import numpy as np\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    y_pred_clipped = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    terms = y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped)\n    bce = -np.mean(terms)\n    return round(bce, 4)"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.full_like(y, np.mean(y), dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        r_sorted = residuals[sorted_indices]\n        split_candidates = []\n        for i in range(len(x_sorted) - 1):\n            if x_sorted[i] != x_sorted[i + 1]:\n                split = (x_sorted[i] + x_sorted[i + 1]) / 2\n                split_candidates.append(split)\n        if not split_candidates:\n            global_mean = np.mean(residuals)\n            y_hat += learning_rate * global_mean\n            continue\n        best_t = None\n        best_loss = float('inf')\n        best_left_mean = 0.0\n        best_right_mean = 0.0\n        for t in split_candidates:\n            left_mask = x_sorted <= t\n            right_mask = ~left_mask\n            left_mean = np.mean(r_sorted[left_mask])\n            right_mean = np.mean(r_sorted[right_mask])\n            pred = np.where(left_mask, left_mean, right_mean)\n            loss = np.sum((r_sorted - pred) ** 2)\n            if loss < best_loss:\n                best_loss = loss\n                best_t = t\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        mask = x <= best_t\n        r_hat = np.where(mask, best_left_mean, best_right_mean)\n        y_hat += learning_rate * r_hat\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 389, "completion_id": 0, "solution": "import numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    W_np = np.array(W)\n    if W_np.ndim != 2 or W_np.shape[0] != W_np.shape[1]:\n        return -1\n    row_sums = W_np.sum(axis=1)\n    D = np.diag(row_sums)\n    L = D - W_np\n    L_rounded = np.around(L, decimals=4)\n    return L_rounded.tolist()"}
{"task_id": 391, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    t_np = np.array(t)\n    indices = np.around(t_np).astype(int)\n    in_length = X.shape[0]\n    clipped_indices = np.clip(indices, 0, in_length - 1)\n    samples = X[clipped_indices]\n    return samples.tolist()"}
{"task_id": 392, "completion_id": 0, "solution": "import numpy as np\ndef preemphasis(x: 'list[float] | np.ndarray', alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    arr = np.array(x).flatten()\n    shifted = np.zeros_like(arr)\n    shifted[1:] = arr[:-1]\n    filtered = arr - alpha * shifted\n    filtered_rounded = np.round(filtered, 4)\n    return filtered_rounded.tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    denominator = np.sqrt(Eg_next + 1e-08)\n    w_next = w - learning_rate * grad / denominator\n    return (np.round(w_next, 4).tolist(), np.round(Eg_next, 4).tolist())"}
{"task_id": 395, "completion_id": 0, "solution": "import numpy as np\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    header = '*' * 50\n    beta_str = str(beta)\n    prob_str = str(b_prob)\n    return f'{header}\\nBeta:\\n{beta_str}\\nProbability of sequence: {prob_str}'"}
{"task_id": 396, "completion_id": 0, "solution": "import numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\"\"\"\n    x = np.asarray(x)\n    tanh_values = np.tanh(x)\n    first_derivative = 1 - tanh_values ** 2\n    second_derivative = -2 * tanh_values * first_derivative\n    tanh_list = np.round(tanh_values, 6).tolist()\n    first_deriv_list = np.round(first_derivative, 6).tolist()\n    second_deriv_list = np.round(second_derivative, 6).tolist()\n    return [tanh_list, first_deriv_list, second_deriv_list]"}
{"task_id": 397, "completion_id": 0, "solution": "import numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.zeros((0, n_classes))\n    indices = np.random.randint(n_classes, size=n_examples)\n    matrix = np.zeros((n_examples, n_classes))\n    matrix[np.arange(n_examples), indices] = 1.0\n    return matrix"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.asarray(x)\n    if derivative:\n        result = np.where(x_arr >= 0, 1.0, alpha * np.exp(x_arr))\n    else:\n        result = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    return [round(val, 4) for val in result.tolist()]"}
{"task_id": 399, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    if X.ndim != 2 or Y.ndim != 2 or X.shape[1] != Y.shape[1]:\n        return -1\n    X_sq = np.sum(X ** 2, axis=1)\n    Y_sq = np.sum(Y ** 2, axis=1)\n    dot_product = np.dot(X, Y.T)\n    D_squared = X_sq[:, np.newaxis] + Y_sq - 2 * dot_product\n    D_squared = np.maximum(D_squared, 0)\n    D = np.sqrt(D_squared)\n    D_rounded = np.round(D, 4)\n    return D_rounded.tolist()"}
{"task_id": 400, "completion_id": 0, "solution": "import math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance == 0:\n        if x < mean:\n            prob = 0.0\n        elif x == mean:\n            prob = 0.5\n        else:\n            prob = 1.0\n    else:\n        sigma = math.sqrt(variance)\n        z = (x - mean) / (sigma * math.sqrt(2))\n        prob = 0.5 * (1 + math.erf(z))\n    return round(prob, 6)"}
{"task_id": 401, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(y: np.ndarray, num_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    if y.ndim == 2:\n        sum_ok = np.allclose(y.sum(axis=1), 1.0)\n        elements_ok = np.all((y == 0) | (y == 1))\n        if sum_ok and elements_ok:\n            return y.copy().astype(float)\n    y_flat = y.reshape(-1)\n    if num_classes is None:\n        num_classes = y_flat.max() + 1\n    n_samples = y_flat.size\n    one_hot = np.zeros((n_samples, num_classes), dtype=float)\n    one_hot[np.arange(n_samples), y_flat] = 1.0\n    return one_hot"}
{"task_id": 402, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float=1e-06) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\"\"\"\n    (classes, counts) = np.unique(y_train, return_counts=True)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n    log_priors = np.log(counts / len(y_train))\n    means = np.zeros((n_classes, n_features))\n    variances = np.zeros((n_classes, n_features))\n    for (i, c) in enumerate(classes):\n        mask = y_train == c\n        X_c = X_train[mask]\n        means[i] = np.mean(X_c, axis=0)\n        variances[i] = np.var(X_c, axis=0, ddof=0) + eps\n    n_test = X_test.shape[0]\n    log_posteriors = np.zeros((n_test, n_classes))\n    for i in range(n_classes):\n        mu = means[i]\n        var = variances[i]\n        log_prior = log_priors[i]\n        diff = X_test - mu\n        squared = diff ** 2\n        term = squared / var\n        log_2pi_var = np.log(2 * np.pi * var)\n        sum_terms = np.sum(log_2pi_var + term, axis=1)\n        log_likelihood = -0.5 * sum_terms\n        log_posteriors[:, i] = log_prior + log_likelihood\n    predicted_indices = np.argmax(log_posteriors, axis=1)\n    return classes[predicted_indices]"}
{"task_id": 405, "completion_id": 0, "solution": "import numpy as np\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    x = np.asarray(x, dtype=np.float_)\n    if param is None:\n        activation_type = 'identity'\n        params = {}\n    else:\n        param_str = param.strip()\n        if '(' in param_str:\n            (act_name_part, rest) = param_str.split('(', 1)\n            act_name = act_name_part.strip().lower()\n            params_part = rest.split(')', 1)[0].strip()\n        else:\n            act_name = param_str.strip().lower()\n            params_part = ''\n        params = {}\n        if params_part:\n            parts = params_part.split(',')\n            for part in parts:\n                part = part.strip()\n                if '=' not in part:\n                    raise ValueError(f\"Invalid parameter format in '{param}': '{part}'\")\n                (key, val) = part.split('=', 1)\n                key = key.strip().lower()\n                val = val.strip()\n                try:\n                    params[key] = float(val)\n                except ValueError:\n                    raise ValueError(f\"Invalid parameter value '{val}' in activation '{param}'\")\n        if act_name == 'identity':\n            activation_type = 'identity'\n            allowed_params = set()\n        elif act_name == 'relu':\n            activation_type = 'relu'\n            allowed_params = set()\n        elif act_name == 'tanh':\n            activation_type = 'tanh'\n            allowed_params = set()\n        elif act_name == 'sigmoid':\n            activation_type = 'sigmoid'\n            allowed_params = set()\n        elif act_name == 'leaky relu':\n            activation_type = 'leaky_relu'\n            allowed_params = {'alpha'}\n        elif act_name == 'affine':\n            activation_type = 'affine'\n            allowed_params = {'slope', 'intercept'}\n        else:\n            raise ValueError(f'Unknown activation: {param}')\n        for key in params:\n            if key not in allowed_params:\n                raise ValueError(f\"Invalid parameter '{key}' for activation '{act_name}' in '{param}'\")\n        if activation_type == 'leaky_relu':\n            alpha = params.get('alpha', 0.01)\n        elif activation_type == 'affine':\n            required = {'slope', 'intercept'}\n            missing = required - params.keys()\n            if missing:\n                raise ValueError(f\"Missing required parameters {missing} for affine activation in '{param}'\")\n            slope = params['slope']\n            intercept = params['intercept']\n        elif activation_type in ['identity', 'relu', 'tanh', 'sigmoid']:\n            if params:\n                raise ValueError(f\"Activation '{act_name}' does not accept parameters in '{param}'\")\n    if activation_type == 'identity':\n        result = x\n    elif activation_type == 'relu':\n        result = np.maximum(0, x)\n    elif activation_type == 'tanh':\n        result = np.tanh(x)\n    elif activation_type == 'sigmoid':\n        result = 1 / (1 + np.exp(-x))\n    elif activation_type == 'leaky_relu':\n        result = np.where(x > 0, x, alpha * x)\n    elif activation_type == 'affine':\n        result = slope * x + intercept\n    else:\n        raise ValueError(f'Unhandled activation type: {activation_type}')\n    result_rounded = np.round(result, 6)\n    return result_rounded.tolist()"}
{"task_id": 406, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int=5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\"\"\"\n    squared_diff = (X_test[:, np.newaxis, :] - X_train) ** 2\n    squared_distances = np.sum(squared_diff, axis=2)\n    sorted_indices = np.argsort(squared_distances, axis=1)\n    k_nearest_indices = sorted_indices[:, :k]\n    k_nearest_labels = y_train[k_nearest_indices]\n    predictions = []\n    for labels in k_nearest_labels:\n        counts = np.bincount(labels)\n        if len(counts) == 0:\n            predictions.append(0)\n        else:\n            predictions.append(np.argmax(counts))\n    return predictions"}
{"task_id": 410, "completion_id": 0, "solution": "import re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    if act_str in ['ReLU', 'Sigmoid', 'Tanh']:\n        return {'type': act_str}\n    number_pattern = '([+-]?(?:\\\\d+\\\\.?\\\\d*|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?)'\n    affine_re = re.compile('^Affine\\\\(slope=' + number_pattern + ', intercept=' + number_pattern + '\\\\)$')\n    affine_match = affine_re.fullmatch(act_str)\n    if affine_match:\n        try:\n            slope = float(affine_match.group(1))\n            intercept = float(affine_match.group(2))\n            return {'type': 'Affine', 'slope': slope, 'intercept': intercept}\n        except:\n            return -1\n    leaky_relu_re = re.compile('^Leaky ReLU\\\\(alpha=' + number_pattern + '\\\\)$')\n    leaky_match = leaky_relu_re.fullmatch(act_str)\n    if leaky_match:\n        try:\n            alpha = float(leaky_match.group(1))\n            return {'type': 'Leaky ReLU', 'alpha': alpha}\n        except:\n            return -1\n    return -1"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n\n    def to_python_scalar(value):\n        if isinstance(value, np.generic):\n            return value.item()\n        return value\n\n    def get_tuple_flag(lst):\n        if not lst:\n            return False\n        return isinstance(lst[0], (list, tuple, np.ndarray))\n\n    def is_continuous(value):\n        if isinstance(value, np.generic):\n            value = value.item()\n        if isinstance(value, float):\n            return not value.is_integer()\n        if isinstance(value, int):\n            return False\n        return False\n\n    def process_dimensions(lst, is_tuple):\n        if not lst:\n            return ([], [])\n        dimensions = []\n        if is_tuple:\n            num_dim = len(lst[0])\n            dimensions = [[] for _ in range(num_dim)]\n            for elem in lst:\n                for i in range(num_dim):\n                    val = elem[i]\n                    py_val = to_python_scalar(val)\n                    dimensions[i].append(py_val)\n        else:\n            dimensions = [[to_python_scalar(elem) for elem in lst]]\n        n_per_dim = []\n        ids_per_dim = []\n        for dim in dimensions:\n            unique = sorted(set(dim))\n            n_per_dim.append(len(unique))\n            ids_per_dim.append(list(unique))\n        return (n_per_dim, ids_per_dim)\n    tuple_actions = get_tuple_flag(actions)\n    if tuple_actions:\n        action_dim = len(actions[0]) if actions else 0\n    else:\n        action_dim = 1 if actions else 0\n    multidim_actions = action_dim > 1\n    flattened_actions = []\n    if tuple_actions and actions:\n        for elem in actions:\n            flattened_actions.extend(elem)\n    else:\n        flattened_actions = list(actions)\n    continuous_actions = any((is_continuous(val) for val in flattened_actions))\n    (n_actions_per_dim, action_ids) = process_dimensions(actions, tuple_actions)\n    tuple_observations = get_tuple_flag(observations)\n    if tuple_observations:\n        obs_dim = len(observations[0]) if observations else 0\n    else:\n        obs_dim = 1 if observations else 0\n    multidim_observations = obs_dim > 1\n    flattened_observations = []\n    if tuple_observations and observations:\n        for elem in observations:\n            flattened_observations.extend(elem)\n    else:\n        flattened_observations = list(observations)\n    continuous_observations = any((is_continuous(val) for val in flattened_observations))\n    (n_obs_per_dim, obs_ids) = process_dimensions(observations, tuple_observations)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 412, "completion_id": 0, "solution": "def get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    if name == 'accuracy':\n\n        def metric(y_true, y_pred):\n            correct = sum((t == p for (t, p) in zip(y_true, y_pred)))\n            total = len(y_true)\n            return round(correct / total, 4) if total != 0 else 0.0\n        return metric\n    elif name == 'precision':\n\n        def metric(y_true, y_pred):\n            tp = sum((t == 1 and p == 1 for (t, p) in zip(y_true, y_pred)))\n            fp = sum((t == 0 and p == 1 for (t, p) in zip(y_true, y_pred)))\n            denominator = tp + fp\n            return round(tp / denominator, 4) if denominator != 0 else 0.0\n        return metric\n    elif name == 'recall':\n\n        def metric(y_true, y_pred):\n            tp = sum((t == 1 and p == 1 for (t, p) in zip(y_true, y_pred)))\n            fn = sum((t == 1 and p == 0 for (t, p) in zip(y_true, y_pred)))\n            denominator = tp + fn\n            return round(tp / denominator, 4) if denominator != 0 else 0.0\n        return metric\n    elif name == 'f1':\n\n        def metric(y_true, y_pred):\n            tp = sum((t == 1 and p == 1 for (t, p) in zip(y_true, y_pred)))\n            fp = sum((t == 0 and p == 1 for (t, p) in zip(y_true, y_pred)))\n            fn = sum((t == 1 and p == 0 for (t, p) in zip(y_true, y_pred)))\n            denom_p = tp + fp\n            precision = tp / denom_p if denom_p != 0 else 0.0\n            denom_r = tp + fn\n            recall = tp / denom_r if denom_r != 0 else 0.0\n            if precision + recall == 0:\n                return 0.0\n            f1 = 2 * (precision * recall) / (precision + recall)\n            return round(f1, 4)\n        return metric\n    else:\n        return -1"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n\n    def build_tree(X, y, depth, max_depth):\n        if depth >= max_depth or len(y) <= 1:\n            return {'value': np.mean(y)}\n        if np.var(y) == 0:\n            return {'value': np.mean(y)}\n        best_feature = None\n        best_threshold = None\n        best_mse = np.inf\n        (n_samples, n_features) = X.shape\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X_feature = X[sorted_indices, feature]\n            sorted_y = y[sorted_indices]\n            sum_total = sorted_y.sum()\n            sum_sq_total = (sorted_y ** 2).sum()\n            sum_left = 0.0\n            sum_sq_left = 0.0\n            for i in range(1, len(sorted_y)):\n                sum_left += sorted_y[i - 1]\n                sum_sq_left += sorted_y[i - 1] ** 2\n                sum_right = sum_total - sum_left\n                sum_sq_right = sum_sq_total - sum_sq_left\n                n_left = i\n                n_right = len(sorted_y) - i\n                if n_left == 0 or n_right == 0:\n                    continue\n                mse_left = sum_sq_left - sum_left ** 2 / n_left\n                mse_right = sum_sq_right - sum_right ** 2 / n_right\n                total_mse = mse_left + mse_right\n                if total_mse < best_mse:\n                    best_mse = total_mse\n                    best_feature = feature\n                    best_threshold = (sorted_X_feature[i - 1] + sorted_X_feature[i]) / 2.0\n        if best_feature is None:\n            return {'value': np.mean(y)}\n        left_mask = X[:, best_feature] <= best_threshold\n        right_mask = ~left_mask\n        if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n            return {'value': np.mean(y)}\n        left_subtree = build_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n        right_subtree = build_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n        return {'feature': best_feature, 'threshold': best_threshold, 'left': left_subtree, 'right': right_subtree}\n\n    def predict_tree(node, X):\n        predictions = np.zeros(X.shape[0])\n        for i in range(X.shape[0]):\n            current_node = node\n            while True:\n                if 'value' in current_node:\n                    predictions[i] = current_node['value']\n                    break\n                else:\n                    feat = current_node['feature']\n                    thr = current_node['threshold']\n                    if X[i, feat] <= thr:\n                        current_node = current_node['left']\n                    else:\n                        current_node = current_node['right']\n        return predictions\n    initial_pred = np.mean(y_train)\n    current_train_pred = np.full_like(y_train, initial_pred, dtype=np.float64)\n    test_pred = np.full(X_test.shape[0], initial_pred, dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y_train - current_train_pred\n        tree = build_tree(X_train, residuals, 0, max_depth)\n        pred_train = predict_tree(tree, X_train)\n        current_train_pred += learning_rate * pred_train\n        pred_test = predict_tree(tree, X_test)\n        test_pred += learning_rate * pred_test\n    test_pred_rounded = np.round(test_pred, 4)\n    return test_pred_rounded.tolist()"}
{"task_id": 414, "completion_id": 0, "solution": "def exponential_scheduler(step: int, initial_lr: float=0.01, stage_length: int=500, staircase: bool=False, decay: float=0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    if step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n    lr = initial_lr * decay ** curr_stage\n    return round(lr, 6)"}
{"task_id": 415, "completion_id": 0, "solution": "import numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Implements the un-normalized 1-D DCT-II as per the given definition.\"\"\"\n    if not frame:\n        return []\n    x = np.array(frame)\n    N = len(x)\n    n = np.arange(N)\n    n_ph = n + 0.5\n    k = np.arange(N).reshape(-1, 1)\n    arg = np.pi / N * k * n_ph\n    cos_matrix = np.cos(arg)\n    coeffs = cos_matrix @ x\n    rounded = np.round(coeffs, 4)\n    return rounded.tolist()"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Compute the PDF of a multivariate Gaussian distribution for given data points.\n    \n    Args:\n        X (np.ndarray): Data points, shape (n_samples, n_features) or (n_samples,) for 1D.\n        mean (np.ndarray): Mean vector of the distribution, shape (n_features,).\n        cov (np.ndarray): Covariance matrix, shape (n_features, n_features).\n        \n    Returns:\n        list: PDF values for each data point, rounded to four decimal places.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    d = len(mean)\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    denominator = (2 * np.pi) ** (d / 2) * np.sqrt(cov_det)\n    norm = 1.0 / denominator\n    diff = X - mean\n    temp = diff @ cov_inv\n    quadratic = np.sum(temp * diff, axis=1)\n    exponents = -0.5 * quadratic\n    pdf_values = norm * np.exp(exponents)\n    return [round(val, 4) for val in pdf_values]"}
{"task_id": 417, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\"\"\"\n    mean = np.mean(data, axis=0)\n    centered = data - mean\n    n_samples = data.shape[0]\n    if n_samples > 1:\n        cov = centered.T @ centered / (n_samples - 1)\n    else:\n        cov = np.zeros((centered.shape[1], centered.shape[1]))\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov)\n    eigenvalues = np.real(eigenvalues)\n    eigenvectors = np.real(eigenvectors)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    k_eigenvectors = sorted_eigenvectors[:, :k]\n    for i in range(k_eigenvectors.shape[1]):\n        vec = k_eigenvectors[:, i]\n        non_zero_mask = np.abs(vec) > 1e-08\n        if np.any(non_zero_mask):\n            first_non_zero = np.argmax(non_zero_mask)\n            if vec[first_non_zero] < 0:\n                k_eigenvectors[:, i] *= -1\n    low_dim = centered @ k_eigenvectors\n    reconstructed_centered = low_dim @ k_eigenvectors.T\n    reconstructed = reconstructed_centered + mean\n    low_dim_rounded = np.round(low_dim, 4)\n    reconstructed_rounded = np.round(reconstructed, 4)\n    return (low_dim_rounded.tolist(), reconstructed_rounded.tolist())"}
{"task_id": 418, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n, d) = X.shape\n    if n < 2:\n        cov_matrix = np.zeros((d, d))\n    else:\n        cov_matrix = np.cov(X.T, ddof=1)\n    return np.round(cov_matrix, 4).tolist()"}
{"task_id": 419, "completion_id": 0, "solution": ""}
{"task_id": 420, "completion_id": 0, "solution": "import numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    if column < 0 or column >= X.shape[1]:\n        return ([], [])\n    left_mask = (X[:, column] < value).tolist()\n    right_mask = (X[:, column] >= value).tolist()\n    return (left_mask, right_mask)"}
{"task_id": 421, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\"\"\"\n    n_samples = data.shape[0]\n    labels = np.full(n_samples, -2, dtype=int)\n    visited = np.zeros(n_samples, dtype=bool)\n    cluster_id = 0\n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        visited[i] = True\n        distances = np.linalg.norm(data - data[i], axis=1)\n        neighbors = np.where(distances <= eps)[0].tolist()\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = neighbors.copy()\n            j = 0\n            while j < len(queue):\n                current_point = queue[j]\n                if not visited[current_point]:\n                    visited[current_point] = True\n                    current_distances = np.linalg.norm(data - data[current_point], axis=1)\n                    current_neighbors = np.where(current_distances <= eps)[0].tolist()\n                    if len(current_neighbors) >= min_samples:\n                        queue.extend(current_neighbors)\n                if labels[current_point] in (-2, -1):\n                    labels[current_point] = cluster_id\n                j += 1\n    return labels.tolist()"}
{"task_id": 422, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    x_arr = np.asarray(x)\n    if order == 0:\n        result = np.maximum(x_arr, 0) + np.log1p(np.exp(-np.abs(x_arr)))\n    elif order == 1:\n        result = 1.0 / (1.0 + np.exp(-x_arr))\n    else:\n        sig = 1.0 / (1.0 + np.exp(-x_arr))\n        result = sig * (1.0 - sig)\n    return np.round(result, 4).tolist()"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if not (all((x >= 0 for x in actual)) and all((x >= 0 for x in predicted))):\n        return -1\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    log_diff = np.log1p(predicted_np) - np.log1p(actual_np)\n    squared_diff = np.square(log_diff)\n    mean_squared_diff = np.mean(squared_diff)\n    rmsle = np.sqrt(mean_squared_diff)\n    return round(rmsle, 4)"}
{"task_id": 424, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    counts = np.unique(y, return_counts=True)[1]\n    probs = counts / len(y)\n    non_zero_probs = probs[probs > 0]\n    h = -np.sum(non_zero_probs * np.log2(non_zero_probs))\n    return round(h, 4)"}
{"task_id": 425, "completion_id": 0, "solution": "import numpy as np\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    (values, counts) = np.unique(p, return_counts=True)\n    if len(values) == 1:\n        return 0.0\n    probs = counts / len(p)\n    entropy = -np.sum(probs * np.log(probs))\n    return round(entropy, 4)"}
{"task_id": 426, "completion_id": 0, "solution": "def classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    if len(y_true) == 0 or len(y_pred) == 0:\n        return -1.0\n    if len(y_true) != len(y_pred):\n        return -1.0\n    correct = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == pred:\n            correct += 1\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 427, "completion_id": 0, "solution": "import numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        arr = np.array(z)\n    else:\n        arr = z\n    arr = np.atleast_1d(arr)\n    activation = arr\n    derivative = np.ones_like(arr)\n    return (activation.tolist(), derivative.tolist())"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len if symmetric else window_len + 1\n    samples = np.arange(N)\n    hann_values = 0.5 - 0.5 * np.cos(2 * math.pi * samples / (N - 1))\n    if not symmetric:\n        hann_values = hann_values[:window_len]\n    hann_rounded = np.round(hann_values, 4)\n    return hann_rounded.tolist()"}
{"task_id": 429, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    if context.ndim != 1:\n        return (-1, -1)\n    D = context_probs.shape[0]\n    if context.size != D:\n        return (-1, -1)\n    if not np.isin(context, [0, 1]).all():\n        return (-1, -1)\n    if np.sum(context) != 1:\n        return (-1, -1)\n    active_context_idx = np.argmax(context)\n    probs = context_probs[active_context_idx, :]\n    max_prob = np.max(probs)\n    optimal_arm = np.where(probs == max_prob)[0][0]\n    optimal_rwd = np.round(max_prob, 4)\n    return (optimal_rwd, optimal_arm)"}
{"task_id": 430, "completion_id": 0, "solution": "from typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph using deterministic DFS.\"\"\"\n    pos = {v: idx for (idx, v) in enumerate(vertices)}\n    adj: Dict = {u: [] for u in vertices}\n    for (src, dest) in edges:\n        adj[src].append(dest)\n    for u in adj:\n        adj[u].sort(key=lambda x: pos[x])\n    visited: Set = set()\n    recursion_stack: Set = set()\n    result: List = []\n\n    def dfs(u) -> bool:\n        \"\"\"Returns False if a cycle is detected, True otherwise.\"\"\"\n        if u in recursion_stack:\n            return False\n        if u in visited:\n            return True\n        visited.add(u)\n        recursion_stack.add(u)\n        for v in adj[u]:\n            if not dfs(v):\n                return False\n        recursion_stack.remove(u)\n        result.append(u)\n        return True\n    for u in vertices:\n        if u not in visited:\n            if not dfs(u):\n                return None\n    return result[::-1]"}
{"task_id": 431, "completion_id": 0, "solution": "import numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    x1 = np.asarray(x1)\n    x2 = np.asarray(x2)\n    if len(x1) != len(x2):\n        return -1\n    squared_diff = (x1 - x2) ** 2\n    sum_squared = np.sum(squared_diff)\n    distance = np.sqrt(sum_squared)\n    return round(distance, 4)"}
{"task_id": 433, "completion_id": 0, "solution": "def glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 434, "completion_id": 0, "solution": "import numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax.\"\"\"\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    max_vals = np.max(logits, axis=1, keepdims=True)\n    shifted = logits - max_vals\n    exps = np.exp(shifted)\n    sums = np.sum(exps, axis=1, keepdims=True)\n    probabilities = exps / sums\n    rounded = np.round(probabilities, decimals=6)\n    return rounded.tolist()"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    X = np.array(X, dtype=np.float64)\n    y = np.array(y, dtype=np.float64)\n    m = X.shape[0]\n    mean_val = y.mean()\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(mean_val, 4)] * m\n    y_hat = np.full(m, mean_val, dtype=np.float64)\n    for _ in range(n_estimators):\n        r = y - y_hat\n        X_aug = np.hstack([np.ones((m, 1)), X])\n        theta = np.linalg.lstsq(X_aug, r, rcond=None)[0]\n        h = X_aug @ theta\n        y_hat += learning_rate * h\n    y_hat_rounded = np.round(y_hat, 4)\n    return y_hat_rounded.tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    original_is_scalar = np.isscalar(x)\n    x_arr = np.asarray(x)\n    s = 1 / (1 + np.exp(-x_arr))\n    if order == 0:\n        res = s\n    elif order == 1:\n        res = s * (1 - s)\n    else:\n        res = s * (1 - s) * (1 - 2 * s)\n    res_rounded = np.round(res, 4)\n    if original_is_scalar:\n        return float(res_rounded)\n    else:\n        return res_rounded.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y_np = np.asarray(y)\n    if y_np.size == 0:\n        return []\n    max_label = y_np.max()\n    if num_classes is not None:\n        if num_classes < max_label + 1:\n            return -1\n        num_classes_ = num_classes\n    else:\n        num_classes_ = max_label + 1\n    n_samples = y_np.shape[0]\n    matrix = np.zeros((n_samples, num_classes_), dtype=int)\n    rows = np.arange(n_samples)\n    matrix[rows, y_np] = 1\n    return matrix.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\"\"\"\n    if not transactions:\n        return []\n    n_transactions = len(transactions)\n    required_count = math.ceil(min_sup * n_transactions - 1e-12)\n    transaction_sets = [frozenset(trans) for trans in transactions]\n    item_counts = defaultdict(int)\n    for trans in transactions:\n        unique_items = set(trans)\n        for item in unique_items:\n            item_counts[item] += 1\n    frequent_items = []\n    frequent_1 = [tuple([item]) for item in sorted((item for (item, cnt) in item_counts.items() if cnt >= required_count))]\n    frequent_items.extend(frequent_1)\n    prev_frequent = frequent_1\n    k = 2\n    while True:\n        candidates = []\n        prev_sorted = sorted(prev_frequent)\n        len_prev = len(prev_sorted)\n        for i in range(len_prev):\n            itemset_i = prev_sorted[i]\n            for j in range(i + 1, len_prev):\n                itemset_j = prev_sorted[j]\n                if itemset_i[:-1] == itemset_j[:-1]:\n                    if itemset_i[-1] < itemset_j[-1]:\n                        new_candidate = itemset_i + (itemset_j[-1],)\n                        candidates.append(new_candidate)\n                else:\n                    break\n        prev_frequent_set = set(prev_sorted)\n        pruned_candidates = []\n        for candidate in candidates:\n            valid = True\n            for i in range(len(candidate)):\n                subset = candidate[:i] + candidate[i + 1:]\n                if subset not in prev_frequent_set:\n                    valid = False\n                    break\n            if valid:\n                pruned_candidates.append(candidate)\n        current_frequent = []\n        for candidate in pruned_candidates:\n            count = 0\n            for t_set in transaction_sets:\n                all_in = True\n                for item in candidate:\n                    if item not in t_set:\n                        all_in = False\n                        break\n                if all_in:\n                    count += 1\n            if count >= required_count:\n                current_frequent.append(candidate)\n        if not current_frequent:\n            break\n        frequent_items.extend(current_frequent)\n        prev_frequent = current_frequent\n        k += 1\n    frequent_items.sort(key=lambda x: (len(x), x))\n    return frequent_items"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    np_preds = np.array(predictions)\n    avg_probs = np.mean(np_preds, axis=0)\n    rounded_probs = np.round(avg_probs, 4)\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    return (rounded_probs.tolist(), predicted_classes.tolist())"}
{"task_id": 441, "completion_id": 0, "solution": "import numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    m = window_len if symmetric else window_len + 1\n    n = np.arange(m)\n    window = 0.54 - 0.46 * np.cos(2 * np.pi * n / (m - 1))\n    if not symmetric:\n        window = window[:window_len]\n    window_rounded = np.round(window, decimals=4)\n    return window_rounded.tolist()"}
{"task_id": 442, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    (n_train, n_features) = X_train.shape\n\n    def build_tree(points_indices, depth):\n        if not points_indices:\n            return None\n        split_axis = depth % n_features\n        sorted_indices = sorted(points_indices, key=lambda idx: X_train[idx, split_axis])\n        median_pos = len(sorted_indices) // 2\n        median_idx = sorted_indices[median_pos]\n        left = build_tree(sorted_indices[:median_pos], depth + 1)\n        right = build_tree(sorted_indices[median_pos + 1:], depth + 1)\n        return (split_axis, median_idx, left, right)\n    tree = build_tree(list(range(n_train)), 0)\n\n    def query_knn(node, query_point, k):\n        heap = []\n\n        def recurse(node):\n            if node is None:\n                return\n            (split_axis, current_idx, left, right) = node\n            current_point = X_train[current_idx]\n            distance_sq = np.sum((current_point - query_point) ** 2)\n            current_max = None\n            if len(heap) < k:\n                heapq.heappush(heap, (-distance_sq, -current_idx))\n            else:\n                (current_max_neg_dist, current_max_neg_idx) = heap[0]\n                current_max_dist = -current_max_neg_dist\n                current_max_idx = -current_max_neg_idx\n                if distance_sq < current_max_dist or (distance_sq == current_max_dist and current_idx < current_max_idx):\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (-distance_sq, -current_idx))\n            query_value = query_point[split_axis]\n            split_value = current_point[split_axis]\n            if query_value <= split_value:\n                near_subtree = left\n                far_subtree = right\n            else:\n                near_subtree = right\n                far_subtree = left\n            recurse(near_subtree)\n            current_max_sq = -heap[0][0] if heap else float('inf')\n            axis_distance_sq = (query_value - split_value) ** 2\n            if axis_distance_sq <= current_max_sq or len(heap) < k:\n                recurse(far_subtree)\n        recurse(node)\n        return [-idx for (dist_sq, idx) in heap]\n    predictions = []\n    for test_sample in X_test:\n        neighbors = query_knn(tree, test_sample, k)\n        labels = y_train[neighbors]\n        if labels.size == 0:\n            predictions.append(0)\n            continue\n        counts = np.bincount(labels)\n        majority = np.argmax(counts)\n        predictions.append(int(majority))\n    return predictions"}
{"task_id": 443, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    if isinstance(threshold, bool):\n        left_mask = X[:, feature_i] == threshold\n    elif isinstance(threshold, (int, float, np.integer, np.floating)):\n        left_mask = X[:, feature_i] >= threshold\n    else:\n        left_mask = X[:, feature_i] == threshold\n    left_subset = X[left_mask]\n    right_subset = X[~left_mask]\n    return (left_subset, right_subset)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\"\"\"\n    X_np = np.array(X)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y)\n    if X_np.ndim != 2 or Y_np.ndim != 2:\n        return -1\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    C = X_np.shape[1]\n    if sigma is None:\n        sigma_val = np.sqrt(C / 2.0)\n    elif isinstance(sigma, (float, int)):\n        if sigma <= 0:\n            return -1\n        sigma_val = sigma\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        try:\n            sigma_arr = np.array(sigma, dtype=np.float64)\n        except (ValueError, TypeError):\n            return -1\n        if (sigma_arr <= 0).any():\n            return -1\n        sigma_val = sigma_arr\n    else:\n        return -1\n    diff = X_np[:, np.newaxis, :] - Y_np[np.newaxis, :, :]\n    scaled = diff / sigma_val\n    squared = scaled ** 2\n    sum_sq = squared.sum(axis=2)\n    k = np.exp(-0.5 * sum_sq)\n    rounded = np.round(k, decimals=4)\n    return rounded.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        (_, counts) = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels):\n        if len(labels) == 0:\n            return 0\n        (values, counts) = np.unique(labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = values[counts == max_count]\n        return np.min(candidates)\n    parent_entropy = entropy(y)\n    if parent_entropy == 0.0:\n        majority = majority_label(y)\n        return (-1, None, majority, majority)\n    overall_majority = majority_label(y)\n    current_max_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_maj = None\n    right_maj = None\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        sorted_values = np.sort(unique_values)\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n        for t in thresholds:\n            left_mask = feature_values <= t\n            n_left = np.sum(left_mask)\n            if n_left == 0 or n_left == n_samples:\n                continue\n            left_y = y[left_mask]\n            right_y = y[~left_mask]\n            h_left = entropy(left_y)\n            h_right = entropy(right_y)\n            p_left = n_left / n_samples\n            p_right = (n_samples - n_left) / n_samples\n            gain = parent_entropy - (p_left * h_left + p_right * h_right)\n            if gain > current_max_gain:\n                current_max_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                left_maj = majority_label(left_y)\n                right_maj = majority_label(right_y)\n            elif gain == current_max_gain:\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = t\n                    left_maj = majority_label(left_y)\n                    right_maj = majority_label(right_y)\n                elif j == best_feature_index and t < best_threshold:\n                    best_threshold = t\n                    left_maj = majority_label(left_y)\n                    right_maj = majority_label(right_y)\n    if current_max_gain <= 0.0:\n        return (-1, None, overall_majority, overall_majority)\n    else:\n        rounded_threshold = round(best_threshold, 4)\n        return (best_feature_index, rounded_threshold, left_maj, right_maj)"}
{"task_id": 447, "completion_id": 0, "solution": "import numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    return np.ones(shape, **kwargs).tolist()"}
{"task_id": 448, "completion_id": 0, "solution": "import numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if y_train.size == 0:\n        return []\n    mean_val = np.mean(y_train)\n    n_samples = X_test.shape[0]\n    predictions = np.full(n_samples, mean_val)\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()"}
{"task_id": 449, "completion_id": 0, "solution": "import numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\"\"\"\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    Mu0 = np.mean(X0, axis=0)\n    Mu1 = np.mean(X1, axis=0)\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = X_train.shape[1]\n    Sigma = 1.0 / m * (X_sub_Mu.T @ X_sub_Mu)\n    normal_vec = Mu1 - Mu0\n    norm = np.sqrt(np.sum(normal_vec ** 2))\n    if norm != 0:\n        normal_vec /= norm\n    w = normal_vec\n    midpoint = (Mu0 + Mu1) / 2\n    b = -np.dot(w, midpoint)\n    sign = int(np.dot(w, Mu1) + b > 0)\n    linear = X_test @ w + b\n    predictions = (linear > 0).astype(int) * sign\n    return predictions.tolist()"}
{"task_id": 450, "completion_id": 0, "solution": "import numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    return [np.bincount(row).argmax() for row in preds]"}
{"task_id": 451, "completion_id": 0, "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import List\nimport numpy as np\nclass Node:\n    __slots__ = ['split_axis', 'split_value', 'point', 'label', 'left', 'right']\n\n    def __init__(self, split_axis, split_value, point, label, left, right):\n        self.split_axis = split_axis\n        self.split_value = split_value\n        self.point = point\n        self.label = label\n        self.left = left\n        self.right = right\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> List[int]:\n    if len(X_train) == 0 or k <= 0:\n        return []\n    (n_samples, n_features) = X_train.shape\n    y_train = np.asarray(y_train)\n\n    def build_kd_tree(points: List[List[float]], labels: List[int], depth: int=0) -> Optional[Node]:\n        if not points:\n            return None\n        axis = depth % n_features\n        combined = list(zip(points, labels))\n        combined.sort(key=lambda x: x[0][axis])\n        sorted_points = [p for (p, l) in combined]\n        sorted_labels = [l for (p, l) in combined]\n        median_idx = len(sorted_points) // 2\n        median_point = sorted_points[median_idx]\n        median_label = sorted_labels[median_idx]\n        left_points = sorted_points[:median_idx]\n        left_labels = sorted_labels[:median_idx]\n        right_points = sorted_points[median_idx + 1:]\n        right_labels = sorted_labels[median_idx + 1:]\n        left_child = build_kd_tree(left_points, left_labels, depth + 1)\n        right_child = build_kd_tree(right_points, right_labels, depth + 1)\n        return Node(axis, median_point[axis], median_point, median_label, left_child, right_child)\n    points = X_train.tolist()\n    labels = y_train.tolist()\n    root = build_kd_tree(points, labels)\n    predictions = []\n\n    def search_knn(node: Optional[Node], query: List[float], heap: list, k: int):\n        if not node:\n            return\n        distance = math.sqrt(sum(((x - y) ** 2 for (x, y) in zip(query, node.point))))\n        if len(heap) < k:\n            heapq.heappush(heap, (-distance, node.label))\n        else:\n            current_max = -heap[0][0]\n            if distance < current_max:\n                heapq.heappushpop(heap, (-distance, node.label))\n        if query[node.split_axis] < node.split_value:\n            (near, far) = (node.left, node.right)\n        else:\n            (near, far) = (node.right, node.left)\n        search_knn(near, query, heap, k)\n        current_max_dist = -heap[0][0] if len(heap) >= k else float('inf')\n        split_dist = abs(query[node.split_axis] - node.split_value)\n        if split_dist < current_max_dist:\n            search_knn(far, query, heap, k)\n    for test_point in X_test:\n        query = test_point.tolist()\n        heap = []\n        search_knn(root, query, heap, k)\n        if not heap:\n            predictions.append(0)\n            continue\n        counter = Counter((label for (_, label) in heap))\n        max_count = max(counter.values())\n        candidates = [label for (label, count) in counter.items() if count == max_count]\n        predictions.append(min(candidates))\n    return predictions"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    X_array = np.array(X) if isinstance(X, list) else X\n    left = []\n    right = []\n    is_numeric = type(threshold) in (int, float)\n    for row in X_array:\n        value = row[feature_i]\n        if is_numeric:\n            if value >= threshold:\n                left.append(row)\n            else:\n                right.append(row)\n        elif value == threshold:\n            left.append(row)\n        else:\n            right.append(row)\n    left_list = [r.tolist() for r in left]\n    right_list = [r.tolist() for r in right]\n    return [left_list, right_list]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if gamma < 0 or gamma > 1:\n        return -1\n    if Q.ndim != 2 or Q_next.ndim != 2 or Q.shape != Q_next.shape:\n        return -1\n    batch_size = Q.shape[0]\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    y = Q.copy()\n    for i in range(batch_size):\n        done = dones[i]\n        reward = rewards[i]\n        action = actions[i]\n        if done:\n            target = reward\n        else:\n            next_max = np.max(Q_next[i])\n            target = reward + gamma * next_max\n        y[i, action] = target\n    y_rounded = np.round(y, 4)\n    return y_rounded.tolist()"}
{"task_id": 454, "completion_id": 0, "solution": "import numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    n_half = batch_size // 2\n    valid_half = np.zeros((n_half, 2), dtype=np.int32)\n    valid_half[:, 0] = 1\n    fake_half = np.zeros((n_half, 2), dtype=np.int32)\n    fake_half[:, 1] = 1\n    valid_full = np.zeros((batch_size, 2), dtype=np.int32)\n    valid_full[:, 0] = 1\n    return (valid_half.tolist(), fake_half.tolist(), valid_full.tolist())"}
{"task_id": 455, "completion_id": 0, "solution": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter\ndef knn_classifier(X_train, y_train, X_query, k, method='naive'):\n    \"\"\"k-Nearest Neighbour classifier.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_query = np.array(X_query)\n    predictions = []\n    if method == 'naive':\n        for q in X_query:\n            distances = []\n            for (i, x) in enumerate(X_train):\n                dist = np.sum((x - q) ** 2)\n                distances.append((dist, y_train[i]))\n            distances.sort(key=lambda x: (x[0], x[1]))\n            top_k = distances[:k]\n            labels = [label for (d, label) in top_k]\n            counts = Counter(labels)\n            max_count = max(counts.values(), default=0)\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            predictions.append(min(candidates) if candidates else 0)\n    elif method == 'heap':\n        for q in X_query:\n            heap = []\n            for (i, x) in enumerate(X_train):\n                dist = np.sum((x - q) ** 2)\n                if len(heap) < k:\n                    heapq.heappush(heap, (-dist, y_train[i]))\n                else:\n                    current_max = -heap[0][0]\n                    if dist < current_max:\n                        heapq.heappushpop(heap, (-dist, y_train[i]))\n            labels = [label for (neg_d, label) in heap]\n            counts = Counter(labels)\n            max_count = max(counts.values(), default=0)\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            predictions.append(min(candidates) if candidates else 0)\n    elif method == 'kdtree':\n        points = list(zip(X_train, y_train))\n\n        def build_kd_tree(points):\n            if not points:\n                return None\n            if len(points) == 1:\n                return {'type': 'leaf', 'point': points[0]}\n            features = np.array([p[0] for p in points])\n            variances = np.var(features, axis=0)\n            split_axis = np.argmax(variances)\n            sorted_points = sorted(points, key=lambda x: x[0][split_axis])\n            median_idx = len(sorted_points) // 2\n            split_val = sorted_points[median_idx][0][split_axis]\n            left_points = sorted_points[:median_idx]\n            right_points = sorted_points[median_idx:]\n            left_child = build_kd_tree(left_points)\n            right_child = build_kd_tree(right_points)\n            return {'type': 'internal', 'axis': split_axis, 'split_val': split_val, 'left': left_child, 'right': right_child}\n        tree = build_kd_tree(points)\n\n        def search(node, query, heap, k):\n            if node is None:\n                return\n            if node['type'] == 'leaf':\n                point = node['point']\n                dist = np.sum((point[0] - query) ** 2)\n                if len(heap) < k:\n                    heapq.heappush(heap, (-dist, point[1]))\n                else:\n                    current_max = -heap[0][0]\n                    if dist < current_max:\n                        heapq.heappushpop(heap, (-dist, point[1]))\n                return\n            axis = node['axis']\n            split_val = node['split_val']\n            if query[axis] <= split_val:\n                near_subtree = node['left']\n                far_subtree = node['right']\n            else:\n                near_subtree = node['right']\n                far_subtree = node['left']\n            search(near_subtree, query, heap, k)\n            plane_dist = (query[axis] - split_val) ** 2\n            current_max = -heap[0][0] if len(heap) >= k else float('inf')\n            if plane_dist < current_max or len(heap) < k:\n                search(far_subtree, query, heap, k)\n        for q in X_query:\n            heap = []\n            if tree is not None:\n                search(tree, q, heap, k)\n            labels = [label for (neg_d, label) in heap]\n            counts = Counter(labels)\n            max_count = max(counts.values(), default=0)\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            predictions.append(min(candidates) if candidates else 0)\n    else:\n        raise ValueError('Invalid method')\n    return predictions"}
{"task_id": 456, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    n_samples = X.shape[0]\n    if n_samples < 2:\n        return -1\n    if Y is not None:\n        if Y.shape[0] != n_samples:\n            return -1\n    else:\n        Y = X\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    if Y.ndim == 1:\n        Y = Y.reshape(-1, 1)\n    X_centered = X - X.mean(axis=0, keepdims=True)\n    Y_centered = Y - Y.mean(axis=0, keepdims=True)\n    covariance_matrix = X_centered.T @ Y_centered / (n_samples - 1)\n    rounded_cov = np.round(covariance_matrix, 4)\n    return rounded_cov.tolist()"}
{"task_id": 457, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    if alpha < 0 or alpha > 1:\n        return -1\n    w = np.asarray(weights)\n    sum_squares = np.sum(w ** 2)\n    l2_term = 0.5 * alpha * sum_squares\n    l1_term = (1 - alpha) * np.sum(np.abs(w))\n    penalty = l2_term + l1_term\n    return round(penalty, 4)"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels_np = np.array(labels)\n    if labels_np.size == 0:\n        return []\n    if (labels_np < 0).any():\n        return -1\n    max_label = labels_np.max()\n    if num_classes is not None:\n        if num_classes < max_label + 1:\n            return -1\n    else:\n        num_classes = max_label + 1\n    result = []\n    for label in labels_np:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result"}
{"task_id": 459, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_validate_heap(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    predicted_labels = []\n    n_val = X_val.shape[0]\n    n_train = X_train.shape[0]\n    for i in range(n_val):\n        x_val = X_val[i]\n        heap = []\n        for j in range(n_train):\n            x_train = X_train[j]\n            distance = np.linalg.norm(x_val - x_train)\n            if len(heap) < k:\n                heapq.heappush(heap, (-distance, j))\n            else:\n                current_max_neg = heap[0][0]\n                if distance < -current_max_neg:\n                    heapq.heappushpop(heap, (-distance, j))\n        neighbors = [item[1] for item in heap]\n        labels = Y_train[neighbors]\n        counts = np.bincount(labels)\n        majority = np.argmax(counts)\n        predicted_labels.append(int(majority))\n    accuracy = np.mean(np.array(predicted_labels) == Y_val)\n    accuracy_rounded = round(accuracy, 4)\n    return (accuracy_rounded, predicted_labels)"}
{"task_id": 460, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    n_samples = X.shape[0]\n    if Y is not None and Y.shape[0] != n_samples:\n        return -1\n    X_means = X.mean(axis=0)\n    X_centered = X - X_means\n    X_std = np.sqrt((X_centered ** 2).mean(axis=0))\n    if np.any(X_std == 0):\n        return -1\n    if Y is None:\n        Y_centered = X_centered\n        Y_std = X_std\n    else:\n        Y_means = Y.mean(axis=0)\n        Y_centered = Y - Y_means\n        Y_std = np.sqrt((Y_centered ** 2).mean(axis=0))\n        if np.any(Y_std == 0):\n            return -1\n    cov_matrix = X_centered.T @ Y_centered / n_samples\n    corr_matrix = cov_matrix / (X_std[:, np.newaxis] * Y_std[np.newaxis, :])\n    rounded_corr = np.round(corr_matrix, 4)\n    return rounded_corr.tolist()"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    if n_samples == 0:\n        return []\n    y_pred = np.full(n_samples, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        r = y - y_pred\n        if np.all(r == 0):\n            break\n        unique_x = np.unique(x)\n        split_candidates = unique_x[:-1] if len(unique_x) > 1 else []\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        sum_r = np.sum(r)\n        sum_r_sq = np.sum(r ** 2)\n        if len(split_candidates) == 0:\n            v = np.mean(r)\n            stump_pred = np.full(n_samples, v)\n        else:\n            for t in split_candidates:\n                left_mask = x <= t\n                count_left = np.sum(left_mask)\n                if count_left == 0 or count_left == n_samples:\n                    continue\n                sum_left = np.sum(r[left_mask])\n                sum_left_sq = np.sum(r[left_mask] ** 2)\n                count_right = n_samples - count_left\n                sum_right = sum_r - sum_left\n                sum_right_sq = sum_r_sq - sum_left_sq\n                sse_left = sum_left_sq - sum_left ** 2 / count_left\n                sse_right = sum_right_sq - sum_right ** 2 / count_right\n                total_sse = sse_left + sse_right\n                if total_sse < best_sse or (total_sse == best_sse and (best_t is None or t < best_t)):\n                    best_sse = total_sse\n                    best_t = t\n                    best_vL = sum_left / count_left\n                    best_vR = sum_right / count_right\n            if best_t is not None:\n                stump_pred = np.where(x <= best_t, best_vL, best_vR)\n            else:\n                v = np.mean(r)\n                stump_pred = np.full(n_samples, v)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 462, "completion_id": 0, "solution": "import numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    if D == 0 or D == 1:\n        return mfccs.copy()\n    C = mfccs.shape[1]\n    n = np.arange(C)\n    lifter = 1 + D / 2 * np.sin(np.pi * n / D)\n    lifted = mfccs * lifter\n    return lifted.astype(mfccs.dtype)"}
{"task_id": 463, "completion_id": 0, "solution": "import math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between centroid and points in X, rounded to 4 decimals.\"\"\"\n    if not X:\n        return 0.0\n    max_distance = 0.0\n    for point in X:\n        sum_squares = 0.0\n        for (c, x) in zip(centroid, point):\n            sum_squares += (c - x) ** 2\n        distance = math.sqrt(sum_squares)\n        if distance > max_distance:\n            max_distance = distance\n    return round(max_distance, 4)"}
{"task_id": 464, "completion_id": 0, "solution": "import numpy as np\ndef knn_validate(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    diff = X_val[:, np.newaxis, :] - X_train\n    squared_distances = np.sum(diff ** 2, axis=2)\n    k_nearest_indices = np.argsort(squared_distances, axis=1)[:, :k]\n    nearest_labels = Y_train[k_nearest_indices]\n    predicted_labels = []\n    for labels_row in nearest_labels:\n        counts = np.bincount(labels_row)\n        predicted = np.argmax(counts)\n        predicted_labels.append(predicted)\n    correct_predictions = np.array(predicted_labels) == Y_val\n    accuracy = correct_predictions.mean()\n    accuracy_rounded = round(accuracy, 4)\n    return (accuracy_rounded, predicted_labels)"}
{"task_id": 465, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n\n    def f(x1, x2):\n        x1 = np.asarray(x1)\n        x2 = np.asarray(x2)\n        squared_distance = np.sum((x1 - x2) ** 2)\n        result = np.exp(-gamma * squared_distance)\n        return round(result, 4)\n    return f"}
{"task_id": 466, "completion_id": 0, "solution": "import string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    return line.translate(_PUNC_TABLE).strip()"}
{"task_id": 467, "completion_id": 0, "solution": "import numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if norm not in ('l1', 'l2'):\n        return -1\n    w = np.array(weights)\n    if norm == 'l1':\n        penalty = C * np.abs(w).sum()\n        gradient = C * np.sign(w)\n    else:\n        penalty = 0.5 * C * (w ** 2).sum()\n        gradient = C * w\n    penalty_rounded = round(penalty.item(), 4)\n    gradient_rounded = [round(g, 4) for g in gradient.tolist()]\n    return (penalty_rounded, gradient_rounded)"}
{"task_id": 468, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, num_iters: int=10000) -> list[int]:\n    if y_train.ndim == 1:\n        y_train = y_train.reshape(-1, 1)\n    X_train_bias = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n    X_test_bias = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n    n_features = X_train_bias.shape[1]\n    W = np.zeros((n_features, 1))\n    m = X_train_bias.shape[0]\n    for _ in range(num_iters):\n        Z = X_train_bias @ W\n        h = 1 / (1 + np.exp(-Z))\n        error = h - y_train\n        dW = X_train_bias.T @ error / m\n        W -= learning_rate * dW\n    Z_test = X_test_bias @ W\n    probabilities = 1 / (1 + np.exp(-Z_test))\n    y_pred = (probabilities >= 0.5).astype(int)\n    return y_pred.flatten().tolist()"}
{"task_id": 469, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(**kwargs) -> callable:\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n\n    def f(x1, x2):\n        x1 = np.asarray(x1, dtype=float).flatten()\n        x2 = np.asarray(x2, dtype=float).flatten()\n        if x1.size != x2.size:\n            return -1\n        return float(np.inner(x1, x2))\n    return f"}
{"task_id": 470, "completion_id": 0, "solution": "import os\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    canonical_path = os.path.realpath(file_path)\n    directory = os.path.dirname(canonical_path)\n    return directory"}
{"task_id": 471, "completion_id": 0, "solution": "def expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    new_q = [row.copy() for row in q_table]\n    if next_state is None:\n        target = reward\n    else:\n        s_prime = next_state\n        q_s_prime = new_q[s_prime]\n        num_actions = len(q_s_prime)\n        max_q = max(q_s_prime)\n        a_greedy = q_s_prime.index(max_q)\n        expectation = 0.0\n        for a_prime in range(num_actions):\n            if a_prime == a_greedy:\n                prob = 1 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expectation += prob * q_s_prime[a_prime]\n        target = reward + gamma * expectation\n    new_q[state][action] += lr * (target - new_q[state][action])\n    for row in new_q:\n        for i in range(len(row)):\n            row[i] = round(row[i], 4)\n    return new_q"}
{"task_id": 472, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    x_np = np.array(x)\n    max_vals = np.max(x_np, axis=-1, keepdims=True)\n    shifted = x_np - max_vals\n    exps = np.exp(shifted)\n    sum_exps = np.sum(exps, axis=-1, keepdims=True)\n    probs = exps / sum_exps\n    gradients = probs * (1 - probs)\n    probs_rounded = np.round(probs, 4)\n    gradients_rounded = np.round(gradients, 4)\n    return (probs_rounded.tolist(), gradients_rounded.tolist())"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_floor = i // 2\n        x_low = (x_floor + 0.1) * 10\n        x_high = (x_floor + 0.9) * 10\n        y_mod = i % 2\n        y_low = (y_mod * interval + 0.1) * 10\n        y_high = (y_mod * interval + 0.9) * 10\n        for _ in range(n_train):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            X_train.append([x, y])\n            Y_train.append(label)\n        for _ in range(n_val):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            X_val.append([x, y])\n            Y_val.append(label)\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    m_prev = np.zeros_like(grad) if m_prev is None else m_prev\n    v_prev = np.zeros_like(grad) if v_prev is None else v_prev\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 477, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\"\"\"\n    if start == dest:\n        return 0\n    rows = len(grid)\n    if rows == 0:\n        return -1\n    cols = len(grid[0]) if rows > 0 else 0\n    if cols == 0:\n        return -1\n    (start_r, start_c) = start\n    (dest_r, dest_c) = dest\n    if not (0 <= start_r < rows and 0 <= start_c < cols) or grid[start_r][start_c] != 0:\n        return -1\n    if not (0 <= dest_r < rows and 0 <= dest_c < cols) or grid[dest_r][dest_c] != 0:\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    costs = [[float('inf')] * cols for _ in range(rows)]\n    costs[start_r][start_c] = 0\n    heap = []\n    initial_h = abs(start_r - dest_r) + abs(start_c - dest_c)\n    heapq.heappush(heap, (initial_h, 0, start_r, start_c))\n    while heap:\n        (current_f, current_g, r, c) = heapq.heappop(heap)\n        if (r, c) == (dest_r, dest_c):\n            return current_g\n        if current_g > costs[r][c]:\n            continue\n        for (dr, dc) in directions:\n            new_r = r + dr\n            new_c = c + dc\n            if 0 <= new_r < rows and 0 <= new_c < cols and (grid[new_r][new_c] == 0):\n                new_g = current_g + 1\n                if new_g < costs[new_r][new_c]:\n                    costs[new_r][new_c] = new_g\n                    new_h = abs(new_r - dest_r) + abs(new_c - dest_c)\n                    new_f = new_g + new_h\n                    heapq.heappush(heap, (new_f, new_g, new_r, new_c))\n    return -1"}
{"task_id": 478, "completion_id": 0, "solution": "import numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    if X_np.size == 0:\n        return []\n    mu = np.mean(X_np, axis=0)\n    squared_diff = (X_np - mu) ** 2\n    sum_sq = np.sum(squared_diff, axis=0)\n    variance = sum_sq / X_np.shape[0]\n    std_dev = np.sqrt(variance)\n    rounded_std = np.around(std_dev, decimals=4)\n    return rounded_std.tolist()"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not rewards:\n        return []\n    n_arms = len(rewards[0])\n    V = np.full(n_arms, ev_prior, dtype=np.float64)\n    C = np.zeros(n_arms, dtype=np.int64)\n    for t in range(len(rewards)):\n        current_rewards = rewards[t]\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(n_arms)\n        else:\n            chosen_arm = np.argmax(V)\n        reward = current_rewards[chosen_arm]\n        C[chosen_arm] += 1\n        V[chosen_arm] += (reward - V[chosen_arm]) / C[chosen_arm]\n    return [round(val, 4) for val in V.tolist()]"}
{"task_id": 480, "completion_id": 0, "solution": "import numpy as np\ndef mel_spectrogram(x: 'np.ndarray', window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\"\"\"\n    x = x.copy()\n    if alpha != 0.0:\n        x[1:] -= alpha * x[:-1]\n    frame_width = int(round(window_duration * fs))\n    stride = int(round(stride_duration * fs))\n    if frame_width == 0:\n        return ([], [])\n    if center:\n        pad_width = frame_width // 2\n        padded_x = np.pad(x, (pad_width, pad_width), mode='constant')\n    else:\n        padded_x = x\n    num_frames = (len(padded_x) - frame_width) // stride + 1\n    if num_frames <= 0:\n        return ([], [])\n    indices = np.arange(num_frames) * stride\n    frames = np.array([padded_x[i:i + frame_width] for i in indices])\n    if window == 'hamming':\n        win = np.hamming(frame_width)\n    elif window == 'hann':\n        win = np.hanning(frame_width)\n    elif window == 'blackman_harris':\n        win = np.blackmanharris(frame_width)\n    else:\n        raise ValueError(f'Invalid window function: {window}')\n    windowed_frames = frames * win\n    power_spectrum = np.abs(np.fft.rfft(windowed_frames, axis=1)) ** 2\n    power_spectrum /= frame_width\n    energy_per_frame = power_spectrum.sum(axis=1)\n    n_bins = power_spectrum.shape[1]\n    freqs = np.arange(n_bins) * (fs / frame_width)\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    (mel_min, mel_max) = (hz_to_mel(0), hz_to_mel(fs / 2))\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    fbank = np.zeros((n_filters, n_bins))\n    for i in range(n_filters):\n        (left, center, right) = (hz_points[i], hz_points[i + 1], hz_points[i + 2])\n        rising = (freqs >= left) & (freqs < center)\n        fbank[i, rising] = (freqs[rising] - left) / (center - left)\n        falling = (freqs >= center) & (freqs <= right)\n        fbank[i, falling] = (right - freqs[falling]) / (right - center)\n    filter_energies = np.dot(power_spectrum, fbank.T)\n    if mean_normalize:\n        filter_energies -= filter_energies.mean(axis=0, keepdims=True)\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    return (filter_energies, energy_per_frame)"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    labels = [-2] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if labels[i] != -2:\n            continue\n        distances = np.linalg.norm(data - data[i], axis=1)\n        neighbors = np.where(distances <= eps)[0]\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        labels[i] = cluster_id\n        queue = deque(neighbors.tolist())\n        while queue:\n            j = queue.popleft()\n            if labels[j] == -1:\n                labels[j] = cluster_id\n            elif labels[j] == -2:\n                labels[j] = cluster_id\n                j_distances = np.linalg.norm(data - data[j], axis=1)\n                j_neighbors = np.where(j_distances <= eps)[0]\n                if len(j_neighbors) >= min_samples:\n                    for n in j_neighbors:\n                        if labels[n] == -2 or labels[n] == -1:\n                            if labels[n] == -2:\n                                queue.append(n)\n                            labels[n] = cluster_id\n        cluster_id += 1\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative.')\n    if num_classes is not None:\n        if not isinstance(num_classes, int) or num_classes < 0:\n            raise ValueError('num_classes must be a non-negative integer')\n        if np.any(y >= num_classes):\n            raise ValueError('Labels must be less than num_classes.')\n    elif y.size == 0:\n        num_classes = 0\n    else:\n        num_classes = np.max(y) + 1\n    n_samples = y.shape[0]\n    categorical = np.zeros((n_samples, num_classes), dtype=int)\n    if n_samples > 0 and num_classes > 0:\n        categorical[np.arange(n_samples), y] = 1\n    return categorical"}
{"task_id": 483, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    labels_np = np.array(labels)\n    if num_classes is None:\n        num_classes = labels_np.max() + 1 if labels_np.size > 0 else 0\n    result = []\n    for label in labels_np:\n        vec = [0] * num_classes\n        vec[label] = 1\n        result.append(vec)\n    return result"}
{"task_id": 484, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], degree: int, reg_factor: float=0.1, n_iterations: int=1000) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    phi = X_train.reshape(-1, 1) ** np.arange(degree + 1)\n    z = np.sum(phi ** 2, axis=0)\n    w = np.zeros(degree + 1)\n    current_predictions = phi @ w\n    for _ in range(n_iterations):\n        for j in range(degree + 1):\n            residual_part = y_train - current_predictions\n            rho_j = np.dot(phi[:, j], residual_part) + w[j] * z[j]\n            if j == 0:\n                new_wj = rho_j / z[j]\n            else:\n                soft = np.sign(rho_j) * np.maximum(np.abs(rho_j) - reg_factor, 0.0)\n                new_wj = soft / z[j]\n            delta = new_wj - w[j]\n            current_predictions += phi[:, j] * delta\n            w[j] = new_wj\n    X_test = np.array(X_test)\n    phi_test = X_test.reshape(-1, 1) ** np.arange(degree + 1)\n    y_pred = phi_test @ w\n    rounded_predictions = np.round(y_pred, 4)\n    return rounded_predictions.tolist()"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\"\"\"\n    if not X_train:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(X_train)\n    X_sorted = X_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n\n    def build_tree(X, y, current_depth):\n        if current_depth >= max_depth or len(X) < 2:\n            return {'mean': np.mean(y) if len(y) > 0 else 0.0}\n        best_sse = float('inf')\n        best_threshold = None\n        best_i = -1\n        for i in range(len(X) - 1):\n            if X[i] >= X[i + 1]:\n                continue\n            left_y = y[:i + 1]\n            right_y = y[i + 1:]\n            mean_left = np.mean(left_y)\n            mean_right = np.mean(right_y)\n            sse_left = np.sum((left_y - mean_left) ** 2)\n            sse_right = np.sum((right_y - mean_right) ** 2)\n            total_sse = sse_left + sse_right\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_threshold = (X[i] + X[i + 1]) / 2\n                best_i = i\n        if best_i == -1:\n            return {'mean': np.mean(y)}\n        left_X = X[:best_i + 1]\n        left_y = y[:best_i + 1]\n        right_X = X[best_i + 1:]\n        right_y = y[best_i + 1:]\n        left_child = build_tree(left_X, left_y, current_depth + 1)\n        right_child = build_tree(right_X, right_y, current_depth + 1)\n        return {'threshold': best_threshold, 'left': left_child, 'right': right_child}\n    root = build_tree(X_sorted, y_sorted, 0)\n\n    def predict_single(x):\n        node = root\n        while True:\n            if 'mean' in node:\n                return node['mean']\n            elif x <= node['threshold']:\n                node = node['left']\n            else:\n                node = node['right']\n    return [predict_single(x) for x in X_test]"}
{"task_id": 486, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.ndim != 1 or y_pred.ndim != 1:\n        return -1\n    n = len(y_true)\n    if n != len(y_pred) or n == 0:\n        return -1\n    squared_errors = (y_true - y_pred) ** 2\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 487, "completion_id": 0, "solution": "import numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int=300, tol: float=0.0001) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        squared_diffs = (X[:, np.newaxis, :] - centroids) ** 2\n        distances_sq = np.sum(squared_diffs, axis=2)\n        labels = np.argmin(distances_sq, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            mask = labels == j\n            if np.any(mask):\n                new_centroids[j] = X[mask].mean(axis=0)\n        if np.linalg.norm(centroids - new_centroids) < tol:\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 488, "completion_id": 0, "solution": "import numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    if isinstance(X, list):\n        if not X:\n            return -1\n        for row in X:\n            if not isinstance(row, list):\n                return -1\n    try:\n        X = np.array(X)\n    except:\n        return -1\n    if X.ndim != 2:\n        return -1\n    if X.shape[0] < 1:\n        return -1\n    variances = np.var(X, axis=0)\n    rounded_variances = [round(var, 4) for var in variances.tolist()]\n    return rounded_variances"}
{"task_id": 489, "completion_id": 0, "solution": "import numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\"\"\"\n    arr = np.asarray(one_hot)\n    if arr.ndim != 2:\n        return -1\n    row_sums = arr.sum(axis=1)\n    row_maxs = arr.max(axis=1)\n    if not (np.all(row_sums == 1) and np.all(row_maxs == 1)):\n        return -1\n    indices = arr.argmax(axis=1).tolist()\n    return indices"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | np.ndarray) -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    arr = x if isinstance(x, np.ndarray) else np.array(x)\n    if arr.size == 0:\n        return []\n    return np.diag(arr).tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass FPNode:\n\n    def __init__(self, item, count=0, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.node_link = None\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n    item_counts = Counter()\n    for trans in transactions:\n        for item in trans:\n            item_counts[item] += 1\n    frequent_items = {item: cnt for (item, cnt) in item_counts.items() if cnt >= min_sup}\n    if not frequent_items:\n        return []\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    rank = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = FPNode(None)\n    header_table = defaultdict(list)\n    for trans in transactions:\n        filtered = [item for item in trans if item in frequent_items]\n        filtered.sort(key=lambda x: rank[x])\n        current = root\n        for item in filtered:\n            if item in current.children:\n                current = current.children[item]\n                current.count += 1\n            else:\n                new_node = FPNode(item, 1, current)\n                current.children[item] = new_node\n                header_table[item].append(new_node)\n                current = new_node\n    frequent_itemsets = []\n\n    def is_single_path(node):\n        if not node.children:\n            return True\n        if len(node.children) > 1:\n            return False\n        return is_single_path(next(iter(node.children.values())))\n\n    def mine_tree(header, min_sup, suffix, frequent_itemsets):\n        items = sorted(header.keys(), key=lambda x: (frequent_items[x], x))\n        for item in items:\n            new_suffix = tuple(sorted(list(suffix) + [item]))\n            frequent_itemsets.append(new_suffix)\n            conditional_patterns = []\n            for node in header[item]:\n                path = []\n                count = node.count\n                parent = node.parent\n                while parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                path.reverse()\n                conditional_patterns.append((path, count))\n            cond_counts = Counter()\n            for (path, cnt) in conditional_patterns:\n                for it in path:\n                    cond_counts[it] += cnt\n            cond_freq = {it: cnt for (it, cnt) in cond_counts.items() if cnt >= min_sup}\n            if not cond_freq:\n                continue\n            cond_sorted = sorted(cond_freq.keys(), key=lambda x: (-cond_counts[x], x))\n            cond_root = FPNode(None)\n            cond_header = defaultdict(list)\n            for (path, cnt) in conditional_patterns:\n                filtered_path = [it for it in path if it in cond_freq]\n                filtered_path.sort(key=lambda x: (-cond_counts[x], x))\n                current = cond_root\n                for it in filtered_path:\n                    if it in current.children:\n                        current = current.children[it]\n                        current.count += cnt\n                    else:\n                        new_node = FPNode(it, cnt, current)\n                        current.children[it] = new_node\n                        cond_header[it].append(new_node)\n                        current = new_node\n            if is_single_path(cond_root):\n                path_items = []\n                current_node = cond_root\n                while current_node.children:\n                    next_node = next(iter(current_node.children.values()))\n                    path_items.append(next_node.item)\n                    current_node = next_node\n                for i in range(1, len(path_items) + 1):\n                    for subset in itertools.combinations(path_items, i):\n                        combined = tuple(sorted(list(subset) + [item] + list(suffix)))\n                        frequent_itemsets.append(combined)\n            else:\n                mine_tree(cond_header, min_sup, new_suffix, frequent_itemsets)\n    mine_tree(header_table, min_sup, tuple(), frequent_itemsets)\n    unique = list({tuple(sorted(itemset)) for itemset in frequent_itemsets})\n    unique.sort(key=lambda x: (len(x), x))\n    return unique"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    X = np.array(X, dtype=float)\n    (n_samples, m) = X.shape\n    exponents = []\n    for current_degree in range(degree + 1):\n        if current_degree == 0:\n            exponents.append((0,) * m)\n        else:\n            for comb in combinations_with_replacement(range(m), current_degree):\n                exp = [0] * m\n                for idx in comb:\n                    exp[idx] += 1\n                exponents.append(tuple(exp))\n    result = []\n    for row in X:\n        new_row = []\n        for exp in exponents:\n            product = 1.0\n            for i in range(m):\n                product *= row[i] ** exp[i]\n            new_row.append(product)\n        result.append(new_row)\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y_arr = np.array(y)\n    if y_arr.size == 0:\n        return -1\n    mean_val = np.mean(y_arr)\n    mse_value = np.mean((y_arr - mean_val) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 494, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\"\"\"\n    preds_array = np.array(preds)\n    if classifier:\n        n_samples = preds_array.shape[1]\n        aggregated = []\n        for i in range(n_samples):\n            sample_preds = preds_array[:, i]\n            (unique_values, counts) = np.unique(sample_preds, return_counts=True)\n            max_count = np.max(counts)\n            candidates = unique_values[counts == max_count]\n            final_label = np.min(candidates)\n            aggregated.append(final_label)\n        return aggregated\n    else:\n        means = np.mean(preds_array, axis=0)\n        rounded = np.round(means, 4)\n        return rounded.tolist()"}
{"task_id": 495, "completion_id": 0, "solution": "import numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    mean = np.mean(X, axis=0)\n    std = np.std(X, axis=0, ddof=0)\n    standardized = (X - mean) / std\n    standardized[:, std == 0] = 0.0\n    rounded = np.round(standardized, 4)\n    return rounded.tolist()"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.atleast_1d(np.asarray(x))\n    y = slope * x_arr + intercept\n    grad = np.full_like(y, slope)\n    grad2 = np.zeros_like(y)\n    y_list = np.round(y, 4).tolist()\n    grad_list = np.round(grad, 4).tolist()\n    grad2_list = np.round(grad2, 4).tolist()\n    return (y_list, grad_list, grad2_list)"}
{"task_id": 497, "completion_id": 0, "solution": "import numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    x_array = np.asarray(x)\n    result = np.exp(x_array)\n    rounded_result = np.around(result, decimals=6)\n    return rounded_result.tolist()"}
{"task_id": 498, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return []\n    x_arr = np.array(x)\n    if order == 0:\n        result = np.where(x_arr > 0, x_arr, alpha * x_arr)\n    elif order == 1:\n        result = np.where(x_arr > 0, 1.0, alpha)\n    else:\n        result = np.zeros_like(x_arr)\n    if result.ndim == 0:\n        return [result.tolist()]\n    return result.tolist()"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    data_centered = data - np.mean(data, axis=0)\n    var_pop = np.var(data_centered, axis=0, ddof=0)\n    std = np.sqrt(var_pop)\n    std[std == 0] = 1.0\n    data_std = data_centered / std\n    cov_matrix = np.cov(data_std, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    for i in range(eigenvectors_sorted.shape[1]):\n        eigenvector = eigenvectors_sorted[:, i]\n        max_abs_idx = np.argmax(np.abs(eigenvector))\n        if eigenvector[max_abs_idx] < 0:\n            eigenvectors_sorted[:, i] = -eigenvector\n    projection = data_std @ eigenvectors_sorted[:, :k]\n    return np.round(projection, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    c = np.mean(y_train)\n    F = np.full(n_samples, c)\n    stumps = []\n    for m in range(n_estimators):\n        residuals = y_train - F\n        best_sse = float('inf')\n        best_j = None\n        best_t = None\n        best_left_val = None\n        best_right_val = None\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            unique_values = np.unique(feature_values)\n            for t in unique_values:\n                left_mask = feature_values <= t\n                n_left = left_mask.sum()\n                n_right = n_samples - n_left\n                if n_left == 0 or n_right == 0:\n                    continue\n                left_res = residuals[left_mask]\n                right_res = residuals[~left_mask]\n                left_val = left_res.mean()\n                right_val = right_res.mean()\n                sse = np.sum((left_res - left_val) ** 2) + np.sum((right_res - right_val) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_j = j\n                    best_t = t\n                    best_left_val = left_val\n                    best_right_val = right_val\n        if best_j is not None:\n            stumps.append((best_j, best_t, best_left_val, best_right_val))\n            h_pred = np.where(X_train[:, best_j] <= best_t, best_left_val, best_right_val)\n            F += learning_rate * h_pred\n    predictions = []\n    for x in X_test:\n        f = c\n        for (j, t, lv, rv) in stumps:\n            if x[j] <= t:\n                f += learning_rate * lv\n            else:\n                f += learning_rate * rv\n        predictions.append(1 if f >= 0.5 else 0)\n    return predictions"}
{"task_id": 501, "completion_id": 0, "solution": "def constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr"}
{"task_id": 502, "completion_id": 0, "solution": "import numpy as np\ndef hard_sigmoid(z: np.ndarray, order: int=0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\"\"\"\n    if order not in {0, 1, 2}:\n        return []\n    if order == 0:\n        result = 0.2 * z + 0.5\n        result = np.clip(result, 0, 1)\n    elif order == 1:\n        mask = (z >= -2.5) & (z <= 2.5)\n        result = np.where(mask, 0.2, 0.0)\n    else:\n        result = np.zeros_like(z)\n    rounded = np.round(result, 4)\n    return rounded.tolist()"}
{"task_id": 503, "completion_id": 0, "solution": "from copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\"\"\"\n    if hparams is None:\n        return -1\n    copied_hparams = deepcopy(hparams)\n    if updates is not None:\n        for (key, value) in updates.items():\n            if key in copied_hparams:\n                copied_hparams[key] = value\n    return copied_hparams"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.size == 0:\n        return []\n    m = X.shape[0]\n    h0_input = X.dot(W) + hbias\n    h0_prob = 1 / (1 + np.exp(-h0_input))\n    if k == 0:\n        v_k = X\n        h_k = h0_prob\n    else:\n        current_h = h0_prob\n        for _ in range(k):\n            v_input = current_h.dot(W.T) + vbias\n            v = 1 / (1 + np.exp(-v_input))\n            h_input = v.dot(W) + hbias\n            current_h = 1 / (1 + np.exp(-h_input))\n        v_k = v\n        h_k = current_h\n    pos_grad = X.T.dot(h0_prob)\n    neg_grad = v_k.T.dot(h_k)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 508, "completion_id": 0, "solution": "from typing import Any, Dict, List\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    return [value for (key, value) in params.items() if name in key]"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1.0\n    if len(x) == 0:\n        return 0.0\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    diff = np.abs(x_arr - y_arr)\n    max_diff = np.max(diff)\n    return round(max_diff, 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    bce = y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped)\n    reconstruction_loss = -np.sum(bce, axis=1)\n    kl = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    total_loss = reconstruction_loss + kl\n    average_loss = np.mean(total_loss)\n    return round(average_loss.item(), 6)"}
{"task_id": 511, "completion_id": 0, "solution": "import numpy as np\ndef random_bernoulli_mab(n_arms: int=10) -> list[float]:\n    \"\"\"Generates a list of success probabilities for a Bernoulli MAB environment.\"\"\"\n    if n_arms < 1:\n        return []\n    samples = np.random.uniform(0, 1, n_arms)\n    sum_samples = samples.sum()\n    if sum_samples == 0:\n        probs = np.ones(n_arms) / n_arms\n    else:\n        probs = samples / sum_samples\n    return [round(p, 4) for p in probs]"}
{"task_id": 512, "completion_id": 0, "solution": "def pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\"\"\"\n    (k_h, k_w) = pool_shape\n    (_, _, h, w) = image_shape\n    (s_h, s_w) = stride\n    if s_h <= 0 or s_w <= 0:\n        return -1\n    if k_h > h or k_w > w:\n        return -1\n    if (h - k_h) % s_h != 0 or (w - k_w) % s_w != 0:\n        return -1\n    out_h = (h - k_h) // s_h + 1\n    out_w = (w - k_w) // s_w + 1\n    return (out_h, out_w)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    linear_term = w0 + X_np.dot(w_np)\n    XV = X_np.dot(V_np)\n    sum_XV_sq = (XV ** 2).sum(axis=1)\n    X_sq = X_np ** 2\n    V_sq = V_np ** 2\n    sum_XV_sq_terms = X_sq.dot(V_sq).sum(axis=1)\n    interaction_term = 0.5 * (sum_XV_sq - sum_XV_sq_terms)\n    predictions = linear_term + interaction_term\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()"}
{"task_id": 514, "completion_id": 0, "solution": "def switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str | int:\n    \"\"\"Update the training/testing phase.\"\"\"\n    if current_phase not in ('training', 'testing'):\n        return -1\n    if set_train is not None and set_test is not None:\n        return -1\n    if set_train is not None and (not isinstance(set_train, bool)) or (set_test is not None and (not isinstance(set_test, bool))):\n        return -1\n    if set_train is not None:\n        new_phase = 'training' if set_train else 'testing'\n    elif set_test is not None:\n        new_phase = 'testing' if set_test else 'training'\n    else:\n        new_phase = 'testing' if current_phase == 'training' else 'training'\n    return new_phase"}
{"task_id": 515, "completion_id": 0, "solution": "from typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    result = {}\n    for (key, value) in params.items():\n        if isinstance(value, dict):\n            sub_flattened = flatten_parameters(value)\n            for (sub_key, sub_value) in sub_flattened.items():\n                new_key = f'{key}.{sub_key}'\n                result[new_key] = sub_value\n        else:\n            result[key] = value\n    return result"}
{"task_id": 516, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    a_array = np.asarray(a).flatten()\n    b_array = np.asarray(b).flatten()\n    if a_array.size != b_array.size:\n        return -1\n    difference = a_array - b_array\n    squared_diff = np.square(difference)\n    sum_squared = np.sum(squared_diff)\n    distance = math.sqrt(sum_squared)\n    return round(distance, 4)"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    if is_scalar:\n        z = np.array([z])\n    else:\n        z = np.asarray(z)\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    rounded = np.round(sigmoid_values, 4)\n    if is_scalar:\n        return float(rounded[0])\n    else:\n        return rounded.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        grad = z * (1 - z)\n        return np.round(grad, 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(elem) for elem in z]\n    else:\n        return np.round(z * (1 - z), 4).item()"}
{"task_id": 521, "completion_id": 0, "solution": "import numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    if isinstance(z, np.ndarray) and z.ndim == 0:\n        return 1 if z.item() > 0 else 0\n    elif isinstance(z, (int, float)):\n        return 1 if z > 0 else 0\n    elif isinstance(z, np.ndarray):\n        return (z > 0).astype(int).tolist()\n    elif isinstance(z, list):\n        return [relu_grad(elem) for elem in z]\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy array')"}
{"task_id": 522, "completion_id": 0, "solution": "import numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    np.random.seed(42)\n    tensor = np.random.normal(loc=0, scale=1, size=weight_shape)\n    tensor_rounded = np.around(tensor, decimals=4)\n    return tensor_rounded.tolist()"}
{"task_id": 523, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        fan_in = weight_shape[0]\n    std_dev = np.sqrt(2 / fan_in)\n    weights = np.random.normal(loc=0, scale=std_dev, size=weight_shape)\n    return np.round(weights, 4).tolist()"}
{"task_id": 525, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: np.ndarray, y: np.ndarray, lambda_: float=0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\"\"\"\n    y = y.ravel()\n    (m, n) = X.shape\n    x_means = np.mean(X, axis=0)\n    y_mean = np.mean(y)\n    X_centered = X - x_means\n    y_centered = y - y_mean\n    Xt_X = X_centered.T @ X_centered\n    regularization = lambda_ * np.eye(n)\n    M = Xt_X + regularization\n    M_pinv = np.linalg.pinv(M)\n    w = M_pinv @ (X_centered.T @ y_centered)\n    bias = y_mean - np.dot(x_means, w)\n    weights = np.round(w, 4).tolist()\n    bias = np.round(bias, 4).item()\n    return (weights, bias)"}
{"task_id": 527, "completion_id": 0, "solution": "import os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\"\"\"\n    if not isinstance(file_path, str):\n        return False\n    if archive_format is None:\n        return False\n    if isinstance(archive_format, list) and len(archive_format) == 0:\n        return False\n    allowed_formats = []\n    if archive_format == 'auto':\n        allowed_formats = ['tar', 'zip']\n    elif isinstance(archive_format, str):\n        allowed_formats = [archive_format.lower()]\n    elif isinstance(archive_format, list):\n        allowed_formats = [fmt.lower() for fmt in archive_format if isinstance(fmt, str)]\n    else:\n        return False\n    allowed_formats = [fmt for fmt in allowed_formats if fmt in {'tar', 'zip'}]\n    if not allowed_formats:\n        return False\n    format_extensions = {'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'], 'zip': ['.zip']}\n    all_extensions = []\n    for fmt in allowed_formats:\n        all_extensions.extend(format_extensions.get(fmt, []))\n    file_name = os.path.basename(file_path).lower()\n    for ext in all_extensions:\n        if file_name.endswith(ext):\n            return True\n    return False"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot, indexing='ij')\n    Z = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(Z >= 0, 1, -1)\n    return labels.tolist()"}
{"task_id": 529, "completion_id": 0, "solution": "import math\ndef generate_progress_bar(current: int, target: int | None, width: int=30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\"\"\"\n    if target is None:\n        return f'{current:7d}/Unknown'\n    else:\n        d = len(str(target))\n        start_part = f'{current:>{d}}/{target} ['\n        if target == 0:\n            prog_width = 0\n        else:\n            prog_width = int(width * current / target)\n            prog_width = min(prog_width, width)\n        filled_part = ''\n        if prog_width > 0:\n            filled_part += '=' * (prog_width - 1)\n            if current < target:\n                filled_part += '>'\n            else:\n                filled_part += '='\n        dots_part = '.' * (width - prog_width)\n        bar_part = filled_part + dots_part\n        return f'{start_part}{bar_part}]'"}
{"task_id": 530, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    clipped_preds = np.clip(y_pred, 1e-07, 1 - 1e-07)\n    term1 = y_true * np.log(clipped_preds)\n    term2 = (1 - y_true) * np.log(1 - clipped_preds)\n    mean_loss = -np.mean(term1 + term2)\n    return round(mean_loss, 4)"}
{"task_id": 531, "completion_id": 0, "solution": "import numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function creates either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and returns it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length L of the final window (must be strictly positive).\n        coefs (list[float]): List of coefficients a_k.\n        symmetric (bool, optional): If True produce a symmetric window of length L;\n            otherwise produce a periodic window suitable for the FFT. Defaults to False.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if symmetric:\n        theta = np.linspace(-np.pi, np.pi, window_len)\n    else:\n        theta = np.linspace(-np.pi, np.pi, window_len + 1)[:-1]\n    window = np.zeros(window_len)\n    for (k, a_k) in enumerate(coefs):\n        window += a_k * np.cos(k * theta)\n    return [round(val, 4) for val in window.tolist()]"}
{"task_id": 532, "completion_id": 0, "solution": "def count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total = 0\n    for i in range(len(layers) - 1):\n        n_in = layers[i]\n        n_out = layers[i + 1]\n        total += n_in * n_out + n_out\n    return total"}
{"task_id": 533, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    arr = np.asarray(x)\n    coefficient = 1 / (sigma * np.sqrt(2 * np.pi))\n    exponent = -(arr - mean) ** 2 / (2 * sigma ** 2)\n    pdf_values = coefficient * np.exp(exponent)\n    rounded = np.round(pdf_values, 4)\n    if arr.ndim == 0:\n        return rounded.item()\n    else:\n        return rounded.tolist()"}
{"task_id": 534, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        s = 1 / (1 + np.exp(-Z))\n        rounded = np.around(s, 4)\n        return float(rounded)\n    else:\n        arr = np.array(Z)\n        s = 1 / (1 + np.exp(-arr, dtype=np.float64))\n        rounded = np.around(s, 4)\n        return rounded.tolist()"}
{"task_id": 536, "completion_id": 0, "solution": ""}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\"\"\"\n    mask0 = y_train == 0\n    X0 = X_train[mask0]\n    X1 = X_train[~mask0]\n    mean0 = np.mean(X0, axis=0)\n    std0 = np.std(X0, axis=0, ddof=1)\n    mean1 = np.mean(X1, axis=0)\n    std1 = np.std(X1, axis=0, ddof=1)\n    epsilon = 1e-09\n    std0 += epsilon\n    std1 += epsilon\n    prior0 = X0.shape[0] / X_train.shape[0]\n    prior1 = X1.shape[0] / X_train.shape[0]\n    predictions = []\n    for x in X_test:\n        log_likelihood0 = -0.5 * np.log(2 * np.pi) - np.log(std0) - (x - mean0) ** 2 / (2 * std0 ** 2)\n        log_prob0 = np.log(prior0) + np.sum(log_likelihood0)\n        log_likelihood1 = -0.5 * np.log(2 * np.pi) - np.log(std1) - (x - mean1) ** 2 / (2 * std1 ** 2)\n        log_prob1 = np.log(prior1) + np.sum(log_likelihood1)\n        predictions.append(0 if log_prob0 > log_prob1 else 1)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    m = Y.size\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cross_entropy = -(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    cost = np.sum(cross_entropy) / m\n    return float(cost)"}
{"task_id": 540, "completion_id": 0, "solution": "import numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    sigmoid = 1 / (1 + np.exp(-Z))\n    derivative = sigmoid * (1 - sigmoid)\n    rounded = np.round(derivative, 4)\n    return rounded.tolist()"}
{"task_id": 541, "completion_id": 0, "solution": "import numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    y_array = np.array(y)\n    y_hat_array = np.array(y_hat)\n    gradient = y_hat_array - y_array\n    rounded = np.round(gradient, 4)\n    if rounded.ndim == 0:\n        return [rounded.tolist()]\n    return rounded.tolist()"}
{"task_id": 542, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Implement a single optimization step of the RMSProp algorithm.\"\"\"\n    if s is None:\n        s = []\n    if not s:\n        s = [np.zeros_like(g) for g in grads]\n    new_params = []\n    new_s = []\n    for (param, grad, s_i) in zip(params, grads, s):\n        s_updated = beta * s_i + (1 - beta) * grad ** 2\n        update = alpha * grad / (np.sqrt(s_updated) + epsilon)\n        param_updated = np.round(param - update, 6)\n        new_params.append(param_updated)\n        new_s.append(s_updated)\n    return (new_params, new_s)"}
{"task_id": 543, "completion_id": 0, "solution": "from collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    total = len(data)\n    counts = Counter(data)\n    sum_p_sq = sum(((count / total) ** 2 for count in counts.values()))\n    gini = 1 - sum_p_sq\n    return round(gini, 4)"}
{"task_id": 544, "completion_id": 0, "solution": "def split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)"}
{"task_id": 545, "completion_id": 0, "solution": "def tree_stats(root: 'node | None') -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    if root is None:\n        return (0, 0)\n    if root.results is not None:\n        return (1, 1)\n    (left_count, left_depth) = tree_stats(root.left)\n    (right_count, right_depth) = tree_stats(root.right)\n    total_count = left_count + right_count\n    if total_count == 0:\n        return (0, 0)\n    current_depth = 1 + max(left_depth, right_depth)\n    return (total_count, current_depth)"}
{"task_id": 546, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, Dict, List\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\"\"\"\n\n    def compute_gini(samples):\n        if not samples:\n            return 0.0\n        counts = Counter((sample[-1] for sample in samples))\n        total = len(samples)\n        impurity = 1.0\n        for count in counts.values():\n            prob = count / total\n            impurity -= prob ** 2\n        return impurity\n\n    def get_majority_label(samples):\n        labels = [sample[-1] for sample in samples]\n        counts = Counter(labels)\n        if not counts:\n            return None\n        max_count = max(counts.values())\n        candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n        for label in labels:\n            if label in candidates:\n                return label\n        return None\n    if not data:\n        return {}\n    current_gini = compute_gini(data)\n    if current_gini == 0.0:\n        return {'label': data[0][-1]}\n    best_gain = -1.0\n    best_feature = None\n    best_value = None\n    best_left = None\n    best_right = None\n    n_features = len(data[0]) - 1 if data else 0\n    for feature_index in range(n_features):\n        unique_values = list({sample[feature_index] for sample in data})\n        unique_values.sort()\n        for value in unique_values:\n            left = [sample for sample in data if sample[feature_index] == value]\n            right = [sample for sample in data if sample[feature_index] != value]\n            if not left or not right:\n                continue\n            left_gini = compute_gini(left)\n            right_gini = compute_gini(right)\n            total = len(data)\n            weighted_gini = len(left) / total * left_gini + len(right) / total * right_gini\n            gain = current_gini - weighted_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_value = value\n                best_left = left\n                best_right = right\n    if best_gain <= 0.0:\n        majority_label = get_majority_label(data)\n        return {'label': majority_label}\n    else:\n        left_subtree = build_tree(best_left)\n        right_subtree = build_tree(best_right)\n        return {'feature': best_feature, 'value': best_value, 'left': left_subtree, 'right': right_subtree}"}
{"task_id": 547, "completion_id": 0, "solution": "import numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float] | int:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\"\"\"\n    if t < 0 or t >= len(obs):\n        return -1\n    n = len(S)\n    if n == 0:\n        return -1\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    if len(B) != n:\n        return -1\n    m = len(B[0]) if n > 0 else 0\n    for row in B:\n        if len(row) != m:\n            return -1\n    if m == 0:\n        return -1\n    for o in obs:\n        if not isinstance(o, int):\n            return -1\n        if o < 0 or o >= m:\n            return -1\n    A_np = np.array(A, dtype=np.float64)\n    B_np = np.array(B, dtype=np.float64)\n    S_np = np.array(S, dtype=np.float64)\n    current_obs = obs[0]\n    alpha_prev = S_np * B_np[:, current_obs]\n    for i in range(1, t + 1):\n        current_obs = obs[i]\n        alpha_prev = np.dot(alpha_prev, A_np) * B_np[:, current_obs]\n    alpha_rounded = [round(x, 4) for x in alpha_prev.tolist()]\n    return alpha_rounded"}
{"task_id": 548, "completion_id": 0, "solution": "import numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\"\"\"\n    n = len(obs)\n    if t < 0 or t >= n - 1:\n        return -1\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    n_states = A.shape[0]\n    alpha_t = pi * B[:, obs[0]]\n    for time in range(1, t + 1):\n        alpha_t = alpha_t @ A * B[:, obs[time]]\n    T = n\n    beta = np.zeros((T, n_states))\n    beta[-1] = 1.0\n    for time in reversed(range(T - 1)):\n        beta[time] = A @ (B[:, obs[time + 1]] * beta[time + 1])\n    beta_t_plus_1 = beta[t + 1]\n    B_j = B[:, obs[t + 1]]\n    numerator = alpha_t[:, np.newaxis] * A * B_j * beta_t_plus_1\n    denominator = numerator.sum()\n    if denominator == 0:\n        return [[0.0 for _ in range(n_states)] for _ in range(n_states)]\n    xi = numerator / denominator\n    xi_rounded = np.round(xi, 4).tolist()\n    return xi_rounded"}
{"task_id": 549, "completion_id": 0, "solution": "import numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1.0\n    distance_sq = np.sum((x - y) ** 2)\n    return round(distance_sq, 4)"}
{"task_id": 551, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    (n_samples, n_features) = X.shape\n    if n_samples == 0:\n        return (-1, None, 0.0)\n    parent_counts = np.unique(y, return_counts=True)[1]\n    sum_sq = np.sum((parent_counts / n_samples) ** 2)\n    parent_gini = 1.0 - sum_sq\n    parent_gini = float(parent_gini)\n    best_gini = parent_gini\n    best_feature = -1\n    best_value = None\n    for feature in range(n_features):\n        feature_col = X[:, feature]\n        unique_values = np.unique(feature_col)\n        for value in unique_values:\n            mask = feature_col == value\n            left_y = y[mask]\n            right_y = y[~mask]\n            if left_y.size == 0:\n                left_gini = 1.0\n            else:\n                left_counts = np.unique(left_y, return_counts=True)[1]\n                left_sum_sq = np.sum((left_counts / left_y.size) ** 2)\n                left_gini = 1.0 - left_sum_sq\n            if right_y.size == 0:\n                right_gini = 1.0\n            else:\n                right_counts = np.unique(right_y, return_counts=True)[1]\n                right_sum_sq = np.sum((right_counts / right_y.size) ** 2)\n                right_gini = 1.0 - right_sum_sq\n            weighted_gini = left_y.size / n_samples * left_gini + right_y.size / n_samples * right_gini\n            if weighted_gini < best_gini:\n                best_gini = weighted_gini\n                best_feature = feature\n                best_value = value.item() if isinstance(value, np.generic) else value\n    if parent_gini - best_gini >= epsilon:\n        return (best_feature, best_value, float(best_gini))\n    else:\n        return (-1, None, parent_gini)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    n_states = len(pi)\n    alpha = np.zeros((T, n_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for time in range(1, T):\n        for j in range(n_states):\n            alpha[time, j] = B[j, observations[time]] * np.dot(alpha[time - 1], A[:, j])\n    beta = np.ones((T, n_states))\n    for time in reversed(range(T - 1)):\n        for i in range(n_states):\n            beta[time, i] = np.dot(A[i, :], B[:, observations[time + 1]] * beta[time + 1, :])\n    gamma = alpha[t] * beta[t]\n    gamma_sum = gamma.sum()\n    if gamma_sum == 0:\n        return [0.0] * n_states\n    gamma_normalized = gamma / gamma_sum\n    rounded_gamma = [round(prob, 4) for prob in gamma_normalized.tolist()]\n    return rounded_gamma"}
{"task_id": 553, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\"\"\"\n    X_train_bias = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test_bias = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    n_samples = X_train.shape[0]\n    w = np.zeros(X_train_bias.shape[1])\n    for _ in range(max_iter):\n        z = X_train_bias @ w\n        sigma = 1 / (1 + np.exp(-z))\n        gradient = X_train_bias.T @ (y_train - sigma) / n_samples\n        w += alpha * gradient\n    test_probs = 1 / (1 + np.exp(-X_test_bias @ w))\n    predictions = (test_probs >= 0.5).astype(int).tolist()\n    return predictions"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    distances = np.sqrt(np.sum((data[:, np.newaxis, :] - data) ** 2, axis=2))\n    neighborhood = []\n    for i in range(n_samples):\n        mask = distances[i] <= eps\n        neighbors = np.where(mask)[0].tolist()\n        neighborhood.append(neighbors)\n    core_mask = [len(neighbors) >= min_samples for neighbors in neighborhood]\n    labels = [0] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue\n        if not core_mask[i]:\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque()\n        queue.append(i)\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhood[current_point]:\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if core_mask[neighbor]:\n                        queue.append(neighbor)\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n    return labels"}
{"task_id": 559, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary-tree node used by the task.\"\"\"\n\n    def __init__(self, val: Optional[int]=None, right: 'Optional[Node]'=None, left: 'Optional[Node]'=None):\n        self.val = val\n        self.right = right\n        self.left = left\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\"\"\"\n    if root is None:\n        return []\n    if root.left is None and root.right is None:\n        return [root.val]\n    left_leaves = leaf_values(root.left)\n    right_leaves = leaf_values(root.right)\n    return left_leaves + right_leaves"}
{"task_id": 560, "completion_id": 0, "solution": "import heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\"\"\"\n    n = len(points)\n    if n == 0:\n        return []\n    k = min(k, n)\n    if k <= 0:\n        return []\n    num_dimensions = len(points[0])\n\n    def build_kd_tree(indices, depth):\n        if not indices:\n            return None\n        axis = depth % num_dimensions\n        sorted_indices = sorted(indices, key=lambda i: points[i][axis])\n        median = len(sorted_indices) // 2\n        median_index = sorted_indices[median]\n        return {'index': median_index, 'axis': axis, 'left': build_kd_tree(sorted_indices[:median], depth + 1), 'right': build_kd_tree(sorted_indices[median + 1:], depth + 1)}\n    tree = build_kd_tree(list(range(n)), 0)\n    heap = []\n\n    def search(node):\n        if not node:\n            return\n        point = points[node['index']]\n        dist_sq = sum(((q - p) ** 2 for (q, p) in zip(query, point)))\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist_sq, -node['index'], node['index']))\n        else:\n            (current_max_neg_dist, current_max_neg_idx, current_max_idx) = heap[0]\n            current_max_dist = -current_max_neg_dist\n            if dist_sq < current_max_dist or (dist_sq == current_max_dist and node['index'] < current_max_idx):\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-dist_sq, -node['index'], node['index']))\n        axis = node['axis']\n        if query[axis] < point[axis]:\n            search(node['left'])\n            current_max_dist_sq = -heap[0][0] if len(heap) >= k else float('inf')\n            split_dist = (point[axis] - query[axis]) ** 2\n            if split_dist <= current_max_dist_sq:\n                search(node['right'])\n        else:\n            search(node['right'])\n            current_max_dist_sq = -heap[0][0] if len(heap) >= k else float('inf')\n            split_dist = (query[axis] - point[axis]) ** 2\n            if split_dist <= current_max_dist_sq:\n                search(node['left'])\n    search(tree)\n    results = []\n    while heap:\n        (neg_dist_sq, neg_idx, idx) = heapq.heappop(heap)\n        results.append((-neg_dist_sq, idx))\n    results.sort(key=lambda x: (x[0], x[1]))\n    return [x[1] for x in results]"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Perform Gaussian Mixture Model clustering using the EM algorithm and return deterministic cluster labels.\"\"\"\n    if k == 1:\n        return [0] * len(data)\n    (n_samples, d) = data.shape\n    data_sum = np.sum(data)\n    seed = int(abs(data_sum * 1000000.0)) + k\n    np.random.seed(seed)\n    indices = np.random.choice(n_samples, k, replace=False)\n    mu = data[indices]\n    pi = np.ones(k) / k\n    data_cov = np.cov(data, rowvar=False) + 1e-06 * np.eye(d)\n    sigma = np.tile(data_cov, (k, 1, 1))\n    prev_pi = pi.copy()\n    for _ in range(max_iter):\n        log_probs = np.zeros((n_samples, k))\n        for ki in range(k):\n            mu_k = mu[ki]\n            sigma_k = sigma[ki]\n            try:\n                sigma_inv = np.linalg.inv(sigma_k)\n                log_det = np.log(np.linalg.det(sigma_k))\n            except np.linalg.LinAlgError:\n                sigma_k_reg = sigma_k + 1e-06 * np.eye(d)\n                sigma_inv = np.linalg.inv(sigma_k_reg)\n                log_det = np.log(np.linalg.det(sigma_k_reg))\n            diff = data - mu_k\n            quadratic = np.einsum('ij,ij->i', diff @ sigma_inv, diff)\n            log_prob = np.log(pi[ki]) - 0.5 * (d * np.log(2 * np.pi) + log_det + quadratic)\n            log_probs[:, ki] = log_prob\n        max_log_probs = np.max(log_probs, axis=1, keepdims=True)\n        log_probs -= max_log_probs\n        gamma = np.exp(log_probs)\n        gamma /= gamma.sum(axis=1, keepdims=True)\n        n_k = gamma.sum(axis=0)\n        pi = n_k / n_samples\n        n_k = np.maximum(n_k, 1e-06)\n        mu = gamma.T @ data / n_k[:, np.newaxis]\n        for ki in range(k):\n            diff = data - mu[ki]\n            sigma[ki] = gamma[:, ki] * diff.T @ diff / n_k[ki]\n            sigma[ki] += 1e-06 * np.eye(d)\n        delta = np.max(np.abs(pi - prev_pi))\n        if delta < epsilon:\n            break\n        prev_pi = pi.copy()\n    log_probs = np.zeros((n_samples, k))\n    for ki in range(k):\n        mu_k = mu[ki]\n        sigma_k = sigma[ki]\n        sigma_inv = np.linalg.inv(sigma_k)\n        log_det = np.log(np.linalg.det(sigma_k))\n        diff = data - mu_k\n        quadratic = np.einsum('ij,ij->i', diff @ sigma_inv, diff)\n        log_prob = np.log(pi[ki]) - 0.5 * (d * np.log(2 * np.pi) + log_det + quadratic)\n        log_probs[:, ki] = log_prob\n    max_log_probs = np.max(log_probs, axis=1, keepdims=True)\n    log_probs -= max_log_probs\n    gamma = np.exp(log_probs)\n    gamma /= gamma.sum(axis=1, keepdims=True)\n    original_assignments = np.argmax(gamma, axis=1)\n    permutation = np.argsort(mu[:, 0])\n    inv_perm = np.zeros(k, dtype=int)\n    for (new_label, original_label) in enumerate(permutation):\n        inv_perm[original_label] = new_label\n    new_assignments = inv_perm[original_assignments]\n    return new_assignments.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    x_squared = np.sum(data ** 2, axis=1)\n    x_dot = data @ data.T\n    squared_distances = x_squared[:, np.newaxis] + x_squared[np.newaxis, :] - 2 * x_dot\n    W = np.exp(-gamma * squared_distances)\n    degrees = W.sum(axis=1)\n    if method == 'unnormalized':\n        L = np.diag(degrees) - W\n    elif method == 'normalized':\n        D_inv_sqrt = 1.0 / np.sqrt(degrees)\n        L = np.diag(degrees) - W\n        L = D_inv_sqrt[:, np.newaxis] * L * D_inv_sqrt[np.newaxis, :]\n    else:\n        raise ValueError(\"Method must be 'unnormalized' or 'normalized'\")\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    k_eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(k_eigenvectors, axis=1, keepdims=True)\n        row_norms[row_norms == 0] = 1\n        k_eigenvectors = k_eigenvectors / row_norms\n\n    def run_kmeans(X, k):\n        centroids = X[:k].copy()\n        while True:\n            distances = np.linalg.norm(X[:, np.newaxis, :] - centroids, axis=2)\n            labels = np.argmin(distances, axis=1)\n            new_centroids = np.zeros_like(centroids)\n            for i in range(k):\n                mask = labels == i\n                if mask.any():\n                    new_centroids[i] = X[mask].mean(axis=0)\n                else:\n                    new_centroids[i] = centroids[i]\n            if np.allclose(new_centroids, centroids):\n                break\n            centroids = new_centroids.copy()\n        cluster_indices = {}\n        for (idx, label) in enumerate(labels):\n            cluster_indices.setdefault(label, []).append(idx)\n        min_indices = {label: min(indices) for (label, indices) in cluster_indices.items()}\n        sorted_labels = sorted(min_indices.keys(), key=lambda x: min_indices[x])\n        label_map = {old: new for (new, old) in enumerate(sorted_labels)}\n        return [label_map[label] for label in labels]\n    labels = run_kmeans(k_eigenvectors, n_cluster)\n    return labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = X_data @ X_data.T\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), float(b_rounded))"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current = root\n    while True:\n        if hasattr(current, 'y'):\n            return current.y\n        if task_type == 'classification':\n            feature_val = features[current.label]\n            found_child = None\n            for child in current.child:\n                if child.x == feature_val:\n                    found_child = child\n                    break\n            current = current.child[1] if found_child is None else found_child\n        else:\n            feature_val = features[current.label]\n            if feature_val <= current.s:\n                current = current.child[0]\n            else:\n                current = current.child[1]"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    (n_samples, n_features) = X.shape\n    if n_samples == 0:\n        return (0, 0.0)\n    counts_y = np.bincount(y)\n    probs_y = counts_y[counts_y > 0] / n_samples\n    H_y = -np.sum(probs_y * np.log2(probs_y))\n    max_ig = -float('inf')\n    best_feature = 0\n    for j in range(n_features):\n        feature_col = X[:, j]\n        (values, value_counts) = np.unique(feature_col, return_counts=True)\n        cond_entropy = 0.0\n        for (v, cnt) in zip(values, value_counts):\n            mask = feature_col == v\n            y_subset = y[mask]\n            counts_sub = np.bincount(y_subset)\n            probs_sub = counts_sub[counts_sub > 0] / cnt\n            entropy_sub = -np.sum(probs_sub * np.log2(probs_sub))\n            cond_entropy += cnt / n_samples * entropy_sub\n        ig = H_y - cond_entropy\n        if ig > max_ig or (ig == max_ig and j < best_feature):\n            max_ig = ig\n            best_feature = j\n    max_ig_rounded = round(max_ig, 6)\n    return (best_feature, max_ig_rounded)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    if epsilon == 0:\n        return []\n    (n_samples, n_features) = data.shape\n    s = min(sample_size, n_samples)\n    if s <= 1:\n        phi = 1.0\n    else:\n        phi = 2 * math.log(s - 1) - 2 * (s - 1) / s\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            indices = np.random.choice(n_samples, size=sample_size, replace=False)\n            subsample = data[indices]\n        if s == 0:\n            height_limit = 0\n        else:\n            height_limit = math.ceil(math.log2(s)) if s > 0 else 0\n\n        def build_tree(node_data, current_depth):\n            if current_depth >= height_limit or len(node_data) <= 1:\n                return {'type': 'leaf', 'n': len(node_data)}\n            else:\n                feature_idx = np.random.randint(n_features)\n                min_val = np.min(node_data[:, feature_idx])\n                max_val = np.max(node_data[:, feature_idx])\n                threshold = np.random.uniform(min_val, max_val)\n                left_mask = node_data[:, feature_idx] <= threshold\n                left_data = node_data[left_mask]\n                right_data = node_data[~left_mask]\n                left_child = build_tree(left_data, current_depth + 1)\n                right_child = build_tree(right_data, current_depth + 1)\n                return {'type': 'split', 'feature': feature_idx, 'threshold': threshold, 'left': left_child, 'right': right_child}\n        tree = build_tree(subsample, 0)\n        trees.append(tree)\n    path_lengths = np.zeros((n_samples, n_trees))\n    for (tree_idx, tree) in enumerate(trees):\n        for data_idx in range(n_samples):\n            x = data[data_idx]\n            current_node = tree\n            depth = 0\n            while True:\n                if current_node['type'] == 'leaf':\n                    n = current_node['n']\n                    if n <= 1:\n                        c = 0.0\n                    else:\n                        c = 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n                    path_lengths[data_idx, tree_idx] = depth + c\n                    break\n                else:\n                    feat = current_node['feature']\n                    thresh = current_node['threshold']\n                    if x[feat] <= thresh:\n                        current_node = current_node['left']\n                    else:\n                        current_node = current_node['right']\n                    depth += 1\n    avg_h = np.mean(path_lengths, axis=1)\n    scores = 2 ** (-avg_h / phi)\n    if epsilon >= 1:\n        selected_indices = np.arange(n_samples)\n    else:\n        m = math.ceil(epsilon * n_samples)\n        sorted_indices = np.argsort(-scores)\n        selected_indices = sorted_indices[:m]\n    selected_indices.sort()\n    return selected_indices.tolist()"}
{"task_id": 567, "completion_id": 0, "solution": "import numpy as np\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\"\"\"\n    arr = np.array(predictions)\n    arr = arr.astype(int)\n    samples = arr.T\n    result = []\n    for sample in samples:\n        (values, counts) = np.unique(sample, return_counts=True)\n        max_count = counts.max()\n        candidates = values[counts == max_count]\n        result.append(np.min(candidates))\n    return result"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier using Generalized Iterative Scaling.\"\"\"\n    feature_counts = defaultdict(int)\n    (N, num_features) = X_train.shape\n    for (x, y) in zip(X_train, y_train):\n        for i in range(num_features):\n            v = x[i]\n            feature_counts[i, v, y] += 1\n    features = list(feature_counts.keys())\n    num_feature_pairs = len(features)\n    if num_feature_pairs == 0:\n        return [0] * X_test.shape[0]\n    feature_to_j = {key: j for (j, key) in enumerate(features)}\n    emp_exp = np.array([feature_counts[key] / N for key in features])\n    iv_to_x_indices = defaultdict(list)\n    for x_idx in range(N):\n        x = X_train[x_idx]\n        for i in range(num_features):\n            v = x[i]\n            iv_to_x_indices[i, v].append(x_idx)\n    unique_labels = np.unique(y_train)\n    C = 0\n    for x in X_train:\n        for y in unique_labels:\n            current_sum = 0\n            for i in range(num_features):\n                v = x[i]\n                if (i, v, y) in feature_to_j:\n                    current_sum += 1\n            if current_sum > C:\n                C = current_sum\n    if C == 0:\n        C = 1\n    weights = np.zeros(num_feature_pairs)\n    K = len(unique_labels)\n    unique_labels_list = unique_labels.tolist()\n    for _ in range(n_iter):\n        prob = np.zeros((N, K))\n        for x_idx in range(N):\n            x = X_train[x_idx]\n            scores = np.zeros(K)\n            for (yk_idx, yk) in enumerate(unique_labels):\n                score = 0.0\n                for i in range(num_features):\n                    v = x[i]\n                    key = (i, v, yk)\n                    if key in feature_to_j:\n                        j = feature_to_j[key]\n                        score += weights[j]\n                scores[yk_idx] = score\n            max_score = np.max(scores)\n            exp_scores = np.exp(scores - max_score)\n            Z = np.sum(exp_scores)\n            if Z == 0:\n                prob[x_idx] = np.ones(K) / K\n            else:\n                prob[x_idx] = exp_scores / Z\n        model_exp = np.zeros(num_feature_pairs)\n        for j in range(num_feature_pairs):\n            (i, v, l) = features[j]\n            l_idx = unique_labels_list.index(l)\n            x_indices = iv_to_x_indices.get((i, v), [])\n            if x_indices:\n                model_exp[j] = np.sum(prob[x_indices, l_idx]) / N\n        delta = 1.0 / C * np.log(emp_exp / (model_exp + 1e-10))\n        weights += delta\n        max_delta = np.max(np.abs(delta))\n        if max_delta < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        scores = np.zeros(K)\n        for (yk_idx, yk) in enumerate(unique_labels):\n            score = 0.0\n            for i in range(num_features):\n                v = x[i]\n                key = (i, v, yk)\n                if key in feature_to_j:\n                    j = feature_to_j[key]\n                    score += weights[j]\n            scores[yk_idx] = score\n        pred_idx = np.argmax(scores)\n        predictions.append(unique_labels[pred_idx])\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\"\"\"\n    doc_counts = Counter()\n    total_docs = len(data)\n    for doc in data:\n        (_, words) = doc\n        unique_words = set(words)\n        for word in unique_words:\n            doc_counts[word] += 1\n    ratios = []\n    for (word, count) in doc_counts.items():\n        ratio = count / total_docs if total_docs != 0 else 0.0\n        ratio_rounded = round(ratio, 4)\n        ratios.append((word, ratio_rounded))\n    sorted_ratios = sorted(ratios, key=lambda x: (-x[1], x[0]))\n    if cut_off is None:\n        words_set = {word for (word, _) in sorted_ratios}\n    elif cut_off <= 0:\n        words_set = set()\n    else:\n        k = min(cut_off, len(sorted_ratios))\n        words_set = {word for (word, _) in sorted_ratios[:k]}\n    return (sorted_ratios, words_set)"}
{"task_id": 570, "completion_id": 0, "solution": "from collections import defaultdict\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]], keywords: set[str], test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\"\"\"\n    class_counts = defaultdict(lambda : defaultdict(int))\n    n_c = defaultdict(int)\n    for (label, tokens) in train_data:\n        n_c[label] += 1\n        tokens_set = set(tokens)\n        for word in keywords:\n            if word in tokens_set:\n                class_counts[label][word] += 1\n    predictions = []\n    for sample in test_samples:\n        sample_set = set(sample)\n        max_likelihood = -1.0\n        best_label = None\n        for label in n_c:\n            likelihood = 1.0\n            for word in keywords:\n                count = class_counts[label].get(word, 0)\n                total_docs = n_c[label]\n                p = count / total_docs if total_docs != 0 else 0.0\n                if word in sample_set:\n                    likelihood *= p\n                else:\n                    likelihood *= 1 - p\n            if likelihood > max_likelihood or best_label is None:\n                max_likelihood = likelihood\n                best_label = label\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w_rounded = np.round(w, 4)\n    w_list = w_rounded.tolist()\n    residuals = y - X @ w\n    b = np.round(residuals.mean(), 4)\n    return (w_list, float(b))"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = data.shape[0]\n    distance_matrix = np.sqrt(np.sum((data[:, np.newaxis] - data) ** 2, axis=2))\n    k_distances = []\n    neighbors = []\n    for p in range(n):\n        row = distance_matrix[p]\n        sorted_indices = np.argsort(row)\n        sorted_distances = row[sorted_indices]\n        k_distance = sorted_distances[k]\n        k_neighbors = sorted_indices[1:k + 1].tolist()\n        k_distances.append(k_distance)\n        neighbors.append(k_neighbors)\n    LRD = np.zeros(n)\n    for p in range(n):\n        sum_reach = 0.0\n        for q in neighbors[p]:\n            reach_dist = max(k_distances[q], distance_matrix[p, q])\n            sum_reach += reach_dist\n        LRD[p] = k / sum_reach if sum_reach != 0 else 0.0\n    LOF = np.zeros(n)\n    for p in range(n):\n        sum_LRD = 0.0\n        for q in neighbors[p]:\n            sum_LRD += LRD[q]\n        avg_LRD = sum_LRD / k\n        LOF[p] = avg_LRD / LRD[p] if LRD[p] != 0 else 0.0\n    LOF_rounded = np.round(LOF, 4)\n    outlier_indices = np.where(LOF_rounded > epsilon)[0].tolist()\n    outlier_indices.sort()\n    return (LOF_rounded.tolist(), outlier_indices)"}
{"task_id": 573, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\"\"\"\n    (m, n) = X_train.shape\n    w = np.zeros(n, dtype=np.float64)\n    b = 0.0\n    error_history = []\n    for _ in range(n_iter):\n        error_count = 0\n        for i in range(m):\n            x_i = X_train[i]\n            y_i = y_train[i]\n            prediction = np.dot(w, x_i) + b\n            if y_i * prediction <= 0:\n                w += eta * y_i * x_i\n                b += eta * y_i\n                error_count += 1\n        error_history.append(error_count)\n        if error_count == 0:\n            break\n    w_rounded = [round(num, 4) for num in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded, error_history)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        low = base + 1\n        high = base + 9\n        for _ in range(n_train):\n            x = random.uniform(low, high)\n            y = random.uniform(low, high)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = random.uniform(low, high)\n            y = random.uniform(low, high)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.array(X_train).round(4)\n    X_val = np.array(X_val).round(4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 577, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for i in range(m):\n        a_x = (i // 2 + 0.1) * 10\n        b_x = (i // 2 + 0.9) * 10\n        a_y = (i % 2 * 0.5 + 0.1) * 10\n        b_y = (i % 2 * 0.5 + 0.9) * 10\n        samples = []\n        for _ in range(n_train + n_val):\n            rx = random.random()\n            x = a_x + (b_x - a_x) * rx\n            x_rounded = round(x, 4)\n            ry = random.random()\n            y = a_y + (b_y - a_y) * ry\n            y_rounded = round(y, 4)\n            samples.append([x_rounded, y_rounded])\n        X_train.extend(samples[:n_train])\n        X_val.extend(samples[n_train:])\n        label = (i - 0.5) * 2\n        y_train.extend([label] * n_train)\n        y_val.extend([label] * n_val)\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))"}
{"task_id": 578, "completion_id": 0, "solution": "from typing import List, Tuple\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    return list(zip(corpus, corpus[1:]))"}
{"task_id": 579, "completion_id": 0, "solution": ""}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    if learning_rate == 0.0 or iterations == 0:\n        return ([round(0.0, 4) for _ in range(n)], round(0.0, 4))\n    w = np.zeros(n)\n    b = 0.0\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residual = y - y_pred\n        sign_w = np.where(w == 0, -1, np.sign(w))\n        grad_w = -2 * X.T.dot(residual) + l1_penalty * sign_w + 2 * l2_penalty * w\n        grad_b = -2 * np.sum(residual)\n        w -= learning_rate * grad_w / m\n        b -= learning_rate * grad_b / m\n    weights_rounded = [round(weight, 4) for weight in w]\n    bias_rounded = round(b, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 582, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X_np = np.array(X)\n    n = X_np.shape[0]\n    if n == 1:\n        return [[0]]\n    k = min(int(math.floor(math.sqrt(n))), 10)\n    squared_distances = np.sum((X_np[:, np.newaxis, :] - X_np) ** 2, axis=2)\n    directed_adj = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        sorted_indices = np.argsort(squared_distances[i])\n        neighbors = sorted_indices[1:k + 1]\n        directed_adj[i, neighbors] = 1\n    undirected_adj = (directed_adj | directed_adj.T).astype(int)\n    return undirected_adj.tolist()"}
{"task_id": 584, "completion_id": 0, "solution": "import numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    arr = np.array(state)\n    expanded = arr[:, :, np.newaxis]\n    stacked = np.tile(expanded, (1, 1, 4))\n    return stacked.tolist()"}
{"task_id": 585, "completion_id": 0, "solution": "def cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a < b:\n        return -1\n    elif a > b:\n        return 1\n    else:\n        return 0"}
{"task_id": 586, "completion_id": 0, "solution": "import numpy as np\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\"\"\"\n    if len(x) != len(y):\n        raise ValueError('x and y must have the same length.')\n    if window < 2 or window > len(x):\n        raise ValueError('window must be between 2 and len(x).')\n    (x_min, x_max) = (x.min(), x.max())\n    x_range = x_max - x_min\n    if x_range == 0:\n        x_normalized = np.full_like(x, 0.5, dtype=np.float64)\n    else:\n        x_normalized = (x - x_min) / x_range\n    (y_min, y_max) = (y.min(), y.max())\n    y_range = y_max - y_min\n    if y_range == 0:\n        y_normalized = np.full_like(y, 0.5, dtype=np.float64)\n    else:\n        y_normalized = (y - y_min) / y_range\n    if x_range == 0:\n        x_query_normalized = 0.5\n    else:\n        x_query_normalized = (x_query - x_min) / x_range\n    distances = np.abs(x_normalized - x_query_normalized)\n    selected_indices = np.argsort(distances)[:window]\n    selected_x = x_normalized[selected_indices]\n    selected_y = y_normalized[selected_indices]\n    selected_distances = distances[selected_indices]\n    d_max = np.max(selected_distances)\n    if d_max == 0:\n        weights = np.ones_like(selected_distances)\n    else:\n        scaled_dist = selected_distances / d_max\n        weights = (1 - scaled_dist ** 3) ** 3\n    sum_weights = np.sum(weights)\n    if sum_weights == 0:\n        a = np.mean(selected_y)\n        b = 0.0\n    else:\n        x_weighted_mean = np.sum(weights * selected_x) / sum_weights\n        y_weighted_mean = np.sum(weights * selected_y) / sum_weights\n        numerator = np.sum(weights * (selected_x - x_weighted_mean) * (selected_y - y_weighted_mean))\n        denominator = np.sum(weights * (selected_x - x_weighted_mean) ** 2)\n        if denominator == 0:\n            b = 0.0\n            a = y_weighted_mean\n        else:\n            b = numerator / denominator\n            a = y_weighted_mean - b * x_weighted_mean\n    y_hat_normalized = a + b * x_query_normalized\n    if y_range == 0:\n        y_hat = y_min\n    else:\n        y_hat = y_min + y_hat_normalized * y_range\n    return float(np.round(y_hat, 4))"}
{"task_id": 587, "completion_id": 0, "solution": "import random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\"\"\"\n    random.seed(0)\n    buffer = []\n    outputs = []\n    for op in operations:\n        command = op[0]\n        if command == 'append':\n            transition = op[1]\n            buffer.append(transition)\n        elif command == 'pop':\n            if not buffer:\n                outputs.append(None)\n            else:\n                outputs.append(buffer.pop())\n        elif command == 'sample':\n            batch_size = op[1]\n            if len(buffer) < batch_size:\n                outputs.append([])\n            else:\n                sampled = random.sample(buffer, batch_size)\n                outputs.append(sampled)\n        elif command == 'size':\n            outputs.append(len(buffer))\n    return outputs"}
{"task_id": 588, "completion_id": 0, "solution": "from typing import Optional\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self, data=None, split_variable=None, split_variable_value=None, left: Optional['Node']=None, right: Optional['Node']=None, depth: int=0, criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    return 1 + max(tree_max_depth(root.left), tree_max_depth(root.right))"}
{"task_id": 590, "completion_id": 0, "solution": "import numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\"\"\"\n    rows = len(ground)\n    if rows == 0:\n        return ([], [])\n    cols = len(ground[0])\n    clicks_set = set()\n    new_flags_set = set()\n    for r in range(rows):\n        for c in range(cols):\n            if not np.isnan(ground[r][c]) and (not flags[r][c]):\n                val = ground[r][c]\n                neighbors = []\n                for dr in [-1, 0, 1]:\n                    for dc in [-1, 0, 1]:\n                        if dr == 0 and dc == 0:\n                            continue\n                        (nr, nc) = (r + dr, c + dc)\n                        if 0 <= nr < rows and 0 <= nc < cols:\n                            neighbors.append((nr, nc))\n                candidates = [(nr, nc) for (nr, nc) in neighbors if np.isnan(ground[nr][nc]) and (not flags[nr][nc])]\n                if val == 0:\n                    clicks_set.update(candidates)\n                elif val == 8:\n                    new_flags_set.update(candidates)\n                else:\n                    bombs = sum((flags[nr][nc] for (nr, nc) in neighbors))\n                    unexplored = len(candidates)\n                    if bombs == val:\n                        clicks_set.update(candidates)\n                    elif unexplored == val:\n                        new_flags_set.update(candidates)\n    clicks = sorted(clicks_set)\n    new_flags = sorted(new_flags_set)\n    return (clicks, new_flags)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    current = np.array(x, dtype=np.float64)\n    for (i, layer) in enumerate(weights):\n        augmented = np.insert(current, 0, 1.0)\n        layer_weights = np.array(layer, dtype=np.float64)\n        output = np.dot(augmented, layer_weights.T)\n        if i != len(weights) - 1:\n            output = np.maximum(output, 0)\n        current = output\n    rounded = np.round(current, 4)\n    return rounded.item() if len(rounded) == 1 else rounded.tolist()"}
{"task_id": 592, "completion_id": 0, "solution": "import numpy as np\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\"\"\"\n    (rows, cols) = clicked.shape\n    unopened = []\n    flagged_count = 0\n    deltas = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    for (dr, dc) in deltas:\n        r = row + dr\n        c = col + dc\n        if 0 <= r < rows and 0 <= c < cols:\n            if flags[r, c]:\n                flagged_count += 1\n            if not clicked[r, c]:\n                unopened.append((r, c))\n    unopened_sorted = sorted(unopened)\n    return (unopened_sorted, flagged_count)"}
{"task_id": 593, "completion_id": 0, "solution": "from copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\"\"\"\n    safe = set()\n    mines = set()\n    current_constraints = [(tuple(sorted(c[0])), c[1]) for c in constraints]\n    changed = True\n    while changed:\n        changed = False\n        to_remove = []\n        new_safe = set()\n        new_mines = set()\n        for (idx, (vars_, val)) in enumerate(current_constraints):\n            if val == 0:\n                new_safe.update(vars_)\n                to_remove.append(idx)\n            elif val == len(vars_):\n                new_mines.update(vars_)\n                to_remove.append(idx)\n        if new_safe:\n            safe.update(new_safe)\n            changed = True\n        if new_mines:\n            mines.update(new_mines)\n            changed = True\n        current_constraints = [c for (idx, c) in enumerate(current_constraints) if idx not in to_remove]\n        new_constraints = []\n        for (vars_, val) in current_constraints:\n            remaining_vars = [var for var in vars_ if var not in safe and var not in mines]\n            mine_count = sum((1 for var in vars_ if var in mines))\n            new_val = val - mine_count\n            new_vars = tuple(sorted(remaining_vars))\n            new_constraints.append((new_vars, new_val))\n        filtered_new = []\n        for (vars_, val) in new_constraints:\n            if len(vars_) > 0:\n                filtered_new.append((vars_, val))\n            elif val == 0:\n                pass\n        if current_constraints != filtered_new:\n            changed = True\n            current_constraints = filtered_new\n        subset_changes = True\n        while subset_changes:\n            subset_changes = False\n            new_constraints_subset = []\n            replaced = set()\n            for i in range(len(current_constraints)):\n                if i in replaced:\n                    continue\n                (C_i_vars, C_i_val) = current_constraints[i]\n                S_i = set(C_i_vars)\n                found = False\n                for j in range(len(current_constraints)):\n                    if j == i or j in replaced:\n                        continue\n                    (C_j_vars, C_j_val) = current_constraints[j]\n                    S_j = set(C_j_vars)\n                    if S_j.issubset(S_i) and S_j != S_i:\n                        new_vars = list(S_i - S_j)\n                        new_vars.sort()\n                        new_vars_tuple = tuple(new_vars)\n                        new_val = C_i_val - C_j_val\n                        if len(new_vars) > 0:\n                            new_constraints_subset.append((new_vars_tuple, new_val))\n                        elif new_val != 0:\n                            pass\n                        replaced.add(i)\n                        found = True\n                        subset_changes = True\n                        changed = True\n                        break\n                if not found:\n                    new_constraints_subset.append(current_constraints[i])\n            if subset_changes:\n                current_constraints = new_constraints_subset\n        seen = set()\n        unique_constraints = []\n        for c in current_constraints:\n            key = (c[0], c[1])\n            if key not in seen:\n                seen.add(key)\n                unique_constraints.append(c)\n        if len(unique_constraints) < len(current_constraints):\n            changed = True\n        current_constraints = unique_constraints\n    safe_sorted = sorted(safe - mines)\n    mines_sorted = sorted(mines - safe)\n    return (safe_sorted, mines_sorted)"}
{"task_id": 594, "completion_id": 0, "solution": ""}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Compute the centroids using K-Means clustering algorithm.\"\"\"\n    if k == 0:\n        return []\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            mask = labels == i\n            if np.any(mask):\n                new_centroids[i] = X[mask].mean(axis=0)\n            else:\n                new_centroids[i] = centroids[i]\n        delta = np.linalg.norm(new_centroids - centroids, axis=1)\n        if np.all(delta < 0.0001):\n            break\n        centroids = new_centroids\n    if centroids.size == 0:\n        sorted_centroids = centroids\n    else:\n        keys = [centroids[:, col] for col in reversed(range(centroids.shape[1]))]\n        order = np.lexsort(keys)\n        sorted_centroids = centroids[order]\n    rounded_centroids = np.round(sorted_centroids, 4)\n    return rounded_centroids.tolist()"}
{"task_id": 596, "completion_id": 0, "solution": "import numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\"\"\"\n    adjacency = {}\n    (rows, cols) = maze.shape\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row, col] == 1:\n                neighbors = []\n                for (dr, dc) in directions:\n                    (nr, nc) = (row + dr, col + dc)\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        if maze[nr, nc] == 1:\n                            neighbors.append((nr, nc))\n                adjacency[row, col] = sorted(neighbors)\n    return adjacency"}
{"task_id": 597, "completion_id": 0, "solution": "import numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    X = np.asarray(X)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    best_feature = -1\n    best_threshold = None\n    best_mse = float('inf')\n    for j in range(n_features):\n        X_j = X[:, j]\n        sorted_indices = np.argsort(X_j)\n        sorted_x = X_j[sorted_indices]\n        sorted_y = y[sorted_indices]\n        unique_thresholds = np.unique(sorted_x)\n        if len(unique_thresholds) < 2:\n            continue\n        unique_thresholds_candidates = unique_thresholds[:-1]\n        prefix_sum = np.cumsum(sorted_y)\n        prefix_sq_sum = np.cumsum(sorted_y ** 2)\n        total_sum = prefix_sum[-1]\n        total_sq_sum = prefix_sq_sum[-1]\n        n = n_samples\n        for t in unique_thresholds_candidates:\n            split_idx = np.searchsorted(sorted_x, t, side='right')\n            if split_idx == 0 or split_idx == n:\n                continue\n            len_L = split_idx\n            sum_y_L = prefix_sum[split_idx - 1]\n            sum_sq_L = prefix_sq_sum[split_idx - 1]\n            mean_L = sum_y_L / len_L\n            var_L = sum_sq_L / len_L - mean_L ** 2\n            len_R = n - split_idx\n            sum_y_R = total_sum - sum_y_L\n            sum_sq_R = total_sq_sum - sum_sq_L\n            mean_R = sum_y_R / len_R\n            var_R = sum_sq_R / len_R - mean_R ** 2\n            mse = len_L / n * var_L + len_R / n * var_R\n            if mse < best_mse:\n                best_mse = mse\n                best_feature = j\n                best_threshold = t\n            elif mse == best_mse:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                elif j == best_feature and t < best_threshold:\n                    best_threshold = t\n    best_mse_rounded = round(best_mse, 4)\n    return [best_feature, best_threshold, best_mse_rounded]"}
{"task_id": 598, "completion_id": 0, "solution": "import numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\"\"\"\n    data_np = np.array(data, dtype=np.float64)\n    mu = np.mean(data_np, axis=0)\n    sigma = np.std(data_np, axis=0, ddof=0)\n    sigma_adj = np.where(sigma == 0, 1.0, sigma)\n    standardized = (data_np - mu) / sigma_adj\n    standardized = np.nan_to_num(standardized, nan=0.0, posinf=0.0, neginf=0.0)\n    rounded = np.round(standardized, 4)\n    return rounded.tolist()"}
