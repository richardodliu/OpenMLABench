{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularized) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: A 2D numpy array where the last column is the target y and all preceding columns are the features X.\n    - alpha: The regularization strength (non-negative float).\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places.\n      If the matrix (X^T X + alpha * I) is not invertible, returns -1.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept)\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Compute the matrix (X^T X + alpha * I)\n    m, n = X_b.shape\n    I = np.eye(n)\n    A = X_b.T.dot(X_b) + alpha * I\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector\n    w = np.linalg.inv(A).dot(X_b.T).dot(y)\n    \n    # Round the coefficients to 4 decimal places and return as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# print(ridge_regression(data, alpha=0.1))\n```\n\nThis code defines a function `ridge_regression` that takes a 2D numpy array `data` and a regularization strength `alpha`. It separates the features and target, adds a bias term to the features, and computes the weight vector using the closed-form solution for Ridge Regression. If the matrix used in the computation is not invertible, it returns `-1`. Otherwise, it returns the weight vector rounded to four decimal places as a list."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the problem description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n\n    while update_count < n_iter:\n        all_correct = True\n        for i in range(n_samples):\n            # Compute the activation using the current alpha values\n            activation = np.dot(alpha * y_train, np.dot(X_train, X_train[i]))\n            # Test the margin\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                all_correct = False\n                break\n        if all_correct:\n            break\n        update_count += 1\n\n    # Compute the primal weight vector w from the final alpha\n    w = np.dot(alpha * y_train, X_train)\n\n    return [round(weight, 4) for weight in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([1, -1, 1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the dual parameters `alpha` to zero and the bias `b` to zero.\n2. **Training Loop**: We iterate over the training samples. For each sample, we compute the activation using the current `alpha` values and the Gram matrix (inner products of samples).\n3. **Margin Check**: If the margin (product of the label and the activation plus bias) is less than or equal to zero, the sample is misclassified. We update the corresponding `alpha` and `b`.\n4. **Restart Condition**: If any sample is misclassified, we restart the scan from the beginning. This ensures that all samples are correctly classified before moving on.\n5. **Termination**: The loop terminates either when no updates are made in a full pass over the data or after reaching the maximum number of updates (`n_iter`).\n6. **Compute Primal Weights**: After training, we compute the primal weight vector `w` from the final `alpha` values.\n7. **Rounding**: Finally, we round the components of `w` and `b` to four decimal places before returning them.\n\nThis implementation ensures that the dual-form perceptron algorithm is correctly applied, and it handles the constraints provided in the problem statement."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    \n    def identity_link(mu):\n        return mu\n    \n    def identity_inv_link(eta):\n        return eta\n    \n    def identity_derivative(mu):\n        return np.ones_like(mu)\n    \n    def log_link(mu):\n        return np.log(mu)\n    \n    def log_inv_link(eta):\n        return np.exp(eta)\n    \n    def log_derivative(mu):\n        return 1 / mu\n    \n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n    \n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n    \n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    \n    links = {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n    \n    return links\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"Link:\", np.round(eta, 4))\nprint(\"Inverse Link:\", np.round(mu2, 4))\n```\n\nThis code defines the `glm_links` function, which returns a dictionary of link functions for the identity, log, and logit links used in Generalized Linear Models (GLMs). Each link function includes the link itself, its inverse, and its derivative, all designed to work with numpy scalars and arrays. The example usage demonstrates how to use these functions to transform and invert values between the linear predictor space and the expected value space."}
{"task_id": 3, "completion_id": 0, "completion": "To solve the problem of computing the path lengths in an isolation tree, we need to follow the steps outlined in the task description. Here's a step-by-step breakdown of how to implement this:\n\n1. **Initialize the Tree Growth**: Start with the entire dataset and recursively split it until each leaf node contains fewer than three samples.\n2. **Random Splitting**: For each node, randomly select a feature and a threshold within the range of that feature's values to split the data.\n3. **Record Depths**: As you build the tree, keep track of the depth at which each sample reaches a leaf node.\n4. **Reproducibility**: Ensure that the random splits are reproducible by setting the random seed to 0.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def grow_tree(indices, depth):\n        if len(indices) < 3:\n            return [depth] * len(indices)\n        \n        f = np.random.randint(0, data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        \n        left_depths = grow_tree(left_indices, depth + 1)\n        right_depths = grow_tree(right_indices, depth + 1)\n        \n        return left_depths + right_depths\n    \n    indices = np.arange(data.shape[0])\n    depths = grow_tree(indices, 0)\n    return depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\n### Explanation:\n\n- **Random Seed**: We set `np.random.seed(0)` to ensure that the random splits are reproducible.\n- **Recursive Tree Growth**: The `grow_tree` function recursively splits the data until each leaf node contains fewer than three samples. It returns a list of depths for the samples that reach each leaf.\n- **Depth Calculation**: The depth of each sample is tracked by passing the current depth into the recursive calls.\n- **Feature and Threshold Selection**: For each node, a random feature is chosen, and a random threshold within the feature's range is selected to split the data.\n\nThis implementation should correctly compute the path lengths for each sample in the input data matrix, following the rules specified for isolation trees."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of finding frequent itemsets in a given list of transactions, we can follow these steps:\n\n1. **Calculate the Minimum Support Threshold**: Given the minimum support threshold `minsup` as a fraction between 0 and 1, we need to calculate the minimum number of transactions that an itemset must appear in to be considered frequent. This is done by taking the ceiling of `minsup * N`, where `N` is the total number of transactions.\n\n2. **Generate Candidate Itemsets**: Start with individual items (1-itemsets) and iteratively generate larger itemsets (2-itemsets, 3-itemsets, etc.) by combining frequent itemsets from the previous iteration.\n\n3. **Count the Support of Each Itemset**: For each candidate itemset, count how many transactions contain all the items in the itemset.\n\n4. **Filter Frequent Itemsets**: Keep only those itemsets whose support count meets or exceeds the minimum support threshold.\n\n5. **Return the Result**: Store the frequent itemsets in a dictionary where the keys are tuples of sorted items and the values are their respective support counts.\n\nHere's the implementation of the above logic:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support threshold\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Initialize the dictionary to store frequent itemsets\n    frequent_itemsets = {}\n    \n    # Step 1: Find frequent 1-itemsets\n    item_counter = Counter(item for transaction in transactions for item in set(transaction))\n    for item, count in item_counter.items():\n        if count >= min_support_count:\n            frequent_itemsets[(item,)] = count\n    \n    # Step 2: Generate and check higher-order itemsets\n    k = 2\n    while frequent_itemsets:\n        # Generate candidate k-itemsets\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if len(itemset1) == k - 1 and len(itemset2) == k - 1:\n                    # Combine itemsets if they differ by exactly one item\n                    diff = set(itemset1) ^ set(itemset2)\n                    if len(diff) == 1:\n                        candidate = tuple(sorted(itemset1 + tuple(diff)))\n                        candidates.add(candidate)\n        \n        # Count the support of each candidate k-itemset\n        candidate_counter = Counter(\n            tuple(sorted(set(transaction) & set(candidate))) \n            for candidate in candidates \n            for transaction in transactions\n        )\n        \n        # Filter frequent k-itemsets\n        frequent_itemsets.clear()\n        for itemset, count in candidate_counter.items():\n            if count >= min_support_count:\n                frequent_itemsets[itemset] = count\n        \n        k += 1\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis code will correctly identify and return all frequent itemsets in the given transactions based on the specified minimum support threshold."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = data[:k].copy()\n    num_samples, num_features = data.shape\n    labels = np.zeros(num_samples, dtype=int)\n\n    for _ in range(max_iter):\n        # Assign each sample to the nearest centroid\n        for i in range(num_samples):\n            distances = np.sum((data[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Recompute centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(num_samples):\n            new_centroids[labels[i]] += data[i]\n            counts[labels[i]] += 1\n\n        # Handle empty clusters\n        for j in range(k):\n            if counts[j] == 0:\n                # Reinitialize empty cluster centroid with a random sample\n                new_centroids[j] = data[np.random.randint(num_samples)]\n\n        # Normalize new centroids\n        new_centroids /= counts[:, np.newaxis]\n\n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < epsilon):\n            break\n\n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places\n    centroids = np.round(centroids, 4).tolist()\n\n    return centroids, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centroids, labels = kmeans(data, k)\n# print(\"Centroids:\", centroids)\n# print(\"Labels:\", labels)\n```\n\nThis implementation of the K-Means clustering algorithm follows the specified requirements. It initializes centroids using the first `k` samples, assigns each sample to the nearest centroid based on squared Euclidean distance, updates centroids as the mean of assigned samples, and handles empty clusters by reinitializing them with random samples. The algorithm stops when the maximum change in centroids is less than `epsilon` or after `max_iter` iterations. Finally, it rounds the centroids to four decimal places before returning them along with the cluster labels."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender in pure Python using NumPy, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                continue\n            \n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            \n            if criterion == 'cosine':\n                if np.std(v1) > 1e-3:\n                    v1 -= np.mean(v1)\n                if np.std(v2) > 1e-3:\n                    v2 -= np.mean(v2)\n                similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n            elif criterion == 'pearson':\n                similarity = np.corrcoef(v1, v2)[0, 1]\n            \n            S[i, j] = S[j, i] = similarity\n    \n    # Step 2: Collect the indices of the items the active user has already rated\n    rated_indices = np.where(data[user_ind, :] > 0)[0]\n    unrated_indices = np.where(data[user_ind, :] == 0)[0]\n    \n    if len(unrated_indices) == 0:\n        return []\n    \n    # Step 3: Compute the predicted attractiveness score for each unrated item\n    scores = {}\n    for t in unrated_indices:\n        numerator = 0\n        denominator = 0\n        for i in rated_indices:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n        \n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0\n    \n    # Step 4: Return the top k unrated items with the highest scores\n    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)\n    top_k_items = [item[0] for item in sorted_scores[:k]]\n    \n    return top_k_items\n```\n\n### Explanation:\n1. **Building the Item-Item Similarity Matrix (`S`)**:\n   - For each pair of items `(i, j)`, find the users who have rated both items.\n   - If there are no common users, set the similarity to 0.\n   - If using cosine similarity, mean-center the vectors if their standard deviation is greater than `1e-3`.\n   - Compute the cosine similarity or Pearson correlation based on the selected criterion.\n\n2. **Collecting Rated and Unrated Items**:\n   - Identify the items the active user has rated and those they haven't.\n\n3. **Predicting Attractiveness Scores**:\n   - For each unrated item, compute the predicted attractiveness score using the formula provided.\n\n4. **Returning the Top k Items**:\n   - Sort the unrated items by their predicted scores in descending order.\n   - Return the top `k` items.\n\nThis implementation ensures that the recommendations are based on the item similarities and the user's past ratings, adhering to the constraints and requirements specified."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    \n    def calculate_gain(g_left, h_left, g_right, h_right):\n        L_parent = -0.5 * (np.sum(g) ** 2) / (np.sum(h) + lam) + gamma\n        L_left = -0.5 * (np.sum(g_left) ** 2) / (np.sum(h_left) + lam) + gamma\n        L_right = -0.5 * (np.sum(g_right) ** 2) / (np.sum(h_right) + lam) + gamma\n        return L_parent - L_left - L_right\n\n    best_gain = -np.inf\n    best_feature_index = None\n    best_threshold = None\n\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            mask_left = X[:, feature_index] <= threshold\n            mask_right = X[:, feature_index] > threshold\n            \n            if np.sum(mask_left) < 2 or np.sum(mask_right) < 2:\n                continue\n            \n            g_left = g[mask_left]\n            h_left = h[mask_left]\n            g_right = g[mask_right]\n            h_right = h[mask_right]\n            \n            gain = calculate_gain(g_left, h_left, g_right, h_right)\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n\n    if best_gain > 0:\n        return (best_feature_index, best_threshold)\n    else:\n        return None\n```\n\nThis function iterates over each feature and each unique value within that feature to consider it as a potential threshold for splitting. It calculates the gain for each possible split and keeps track of the split that provides the maximum gain. If no split results in a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    if isinstance(x, (list, int, float)):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to list if input was a list or scalar\n    if isinstance(x, list):\n        sigmoid_x_rounded = sigmoid_x_rounded.tolist()\n        gradient_x_rounded = gradient_x_rounded.tolist()\n    elif isinstance(x, (int, float)):\n        sigmoid_x_rounded = float(sigmoid_x_rounded)\n        gradient_x_rounded = float(gradient_x_rounded)\n    \n    return sigmoid_x_rounded, gradient_x_rounded\n```\n\nThis function handles the computation of the sigmoid activation and its gradient for various input types, ensuring the results are rounded to four decimal places and formatted appropriately based on the input type."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    n_features = 1  # Since it's one-dimensional\n\n    # Initialize weights uniformly\n    weights = np.full(n_samples, 1 / n_samples)\n\n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = [x_train[i] for i in sorted_indices]\n    y_train_sorted = [y_train[i] for i in sorted_indices]\n\n    # List to store the stumps and their coefficients\n    stumps = []\n    coefficients = []\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_direction = None\n\n        # Iterate over all possible thresholds\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for direction in [0, 1]:\n                # Calculate the error for the current stump\n                if direction == 0:\n                    predictions = [1 if x <= threshold else -1 for x in x_train_sorted]\n                else:\n                    predictions = [1 if x > threshold else -1 for x in x_train_sorted]\n\n                errors = [weights[i] for i in range(n_samples) if predictions[i] != y_train_sorted[i]]\n                error = sum(errors)\n\n                # Check if this stump has the minimum error\n                if error < min_error:\n                    min_error = error\n                    best_stump = (direction, threshold)\n                    best_error = error\n\n        # Calculate the coefficient for the best stump\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update the weights\n        for i in range(n_samples):\n            if best_stump[0] == 0:\n                if x_train_sorted[i] <= best_stump[1]:\n                    weights[i] *= math.exp(-alpha * y_train_sorted[i])\n                else:\n                    weights[i] *= math.exp(alpha * y_train_sorted[i])\n            else:\n                if x_train_sorted[i] > best_stump[1]:\n                    weights[i] *= math.exp(-alpha * y_train_sorted[i])\n                else:\n                    weights[i] *= math.exp(alpha * y_train_sorted[i])\n\n        # Normalize the weights\n        weights /= np.sum(weights)\n\n        # Store the best stump and its coefficient\n        stumps.append(best_stump)\n        coefficients.append(alpha)\n\n        # Check if the training error is within the allowed epsilon\n        if min_error <= epsilon:\n            break\n\n    # Make predictions for the test set\n    def predict_single(x):\n        total = 0\n        for coef, (d, theta) in zip(coefficients, stumps):\n            if d == 0:\n                total += coef if x <= theta else -coef\n            else:\n                total += coef if x > theta else -coef\n        return 1 if total >= 0 else -1\n\n    predictions = [predict_single(x) for x in x_test]\n\n    return predictions\n```\n\nThis code implements the AdaBoost algorithm using one-dimensional decision stumps. It starts with uniform sample weights, iteratively selects the stump with the minimum weighted error, updates the sample weights, and stops when the training error is within the specified epsilon. The function then returns predictions for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Calculate the squared Euclidean distances between each pair of test and train samples\n    distances = np.sum(X_train**2, axis=1)[:, None] + np.sum(X_test**2, axis=1) - 2 * np.dot(X_train, X_test.T)\n    \n    # Compute the Gaussian kernel values\n    K = np.exp(-gamma * distances)\n    \n    # Compute the decision function values for each test sample\n    decision_values = np.dot(K, alpha * y_train) + b\n    \n    # Predict the labels based on the sign of the decision function values\n    predictions = np.sign(decision_values).astype(int)\n    \n    return predictions.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description. It calculates the squared Euclidean distances between each pair of test and training samples, computes the Gaussian kernel values, and then uses these to compute the decision function values for each test sample. Finally, it predicts the labels based on the sign of the decision function values. The result is returned as a list of integers."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Get the shape of the matrix\n    m, n = X_np.shape\n    \n    # Check if k is valid\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Select the first k singular values and vectors\n    s_k = s[:k]\n    U_k = U[:, :k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and MSE to four decimal places\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis function performs the following steps:\n1. Converts the input list of lists `X` into a NumPy array for easier manipulation.\n2. Checks if the value of `k` is within the valid range. If not, it returns `-1`.\n3. Performs a truncated Singular Value Decomposition (SVD) on the matrix `X`.\n4. Constructs the rank-\\(k\\) approximation of `X` using the first \\(k\\) singular values and vectors.\n5. Computes the mean squared error (MSE) between the original matrix `X` and its reconstruction `X_hat`.\n6. Rounds both the reconstructed matrix and the MSE to four decimal places and returns them as a tuple."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the `predict_boosting_tree` function as described, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training samples by the feature x\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    \n    # Initialize residuals\n    residuals = y_train_sorted.copy()\n    \n    # Initialize the prediction\n    prediction = np.zeros_like(y_train_sorted)\n    \n    # Calculate candidate split points\n    split_points = (x_train_sorted[:-1] + x_train_sorted[1:]) / 2\n    \n    while True:\n        min_rss = np.inf\n        best_stump = None\n        \n        for s in split_points:\n            # Calculate the means of residuals for the two sides of the split\n            left_indices = x_train_sorted <= s\n            right_indices = x_train_sorted > s\n            \n            if np.any(left_indices):\n                c1 = np.mean(residuals[left_indices])\n            else:\n                c1 = 0\n            \n            if np.any(right_indices):\n                c2 = np.mean(residuals[right_indices])\n            else:\n                c2 = 0\n            \n            # Calculate the RSS for this split\n            rss = np.sum((residuals[left_indices] - c1)**2) + np.sum((residuals[right_indices] - c2)**2)\n            \n            # Check if this is the best split so far\n            if rss < min_rss:\n                min_rss = rss\n                best_stump = (s, c1, c2)\n        \n        # If no better split is found, break the loop\n        if best_stump is None:\n            break\n        \n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        prediction[x_train_sorted <= s] += c1\n        prediction[x_train_sorted > s] += c2\n        \n        # Update residuals\n        residuals = y_train_sorted - prediction\n        \n        # Check if the RSS is below the tolerance\n        if min_rss < epsilon:\n            break\n    \n    # Predict the value for x_query\n    if x_query <= x_train_sorted[-1]:\n        final_prediction = np.mean(y_train_sorted)\n    else:\n        final_prediction = np.mean(y_train_sorted)\n    \n    for s, c1, c2 in zip(split_points, prediction[x_train_sorted <= split_points], prediction[x_train_sorted > split_points]):\n        if x_query <= s:\n            final_prediction += c1\n        else:\n            final_prediction += c2\n    \n    return round(final_prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2, 3, 5, 7, 11]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis function implements the described gradient boosting algorithm using decision stumps. It sorts the training data, calculates candidate split points, iteratively adds the stump that minimizes the residual sum of squares, and updates the residuals. Finally, it predicts the value for the query point by summing the contributions from all learned stumps. The result is rounded to four decimal places as required."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the shape of the tensor.\n    - sparsity: A float representing the probability of generating a 1.0 (must be in [0, 1]).\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy ndarray of dtype float32 or float64, containing only 0.0s and 1.0s.\n    - Returns -1 if the sparsity value is outside the valid range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random tensor with values in the range [0, 1)\n    random_tensor = np.random.rand(*shape)\n    \n    # Apply the sparsity threshold to convert to binary values\n    binary_tensor = (random_tensor >= (1 - sparsity)).astype(np.float32)\n    \n    return binary_tensor\n```\n\nThis function generates a binary tensor according to the specified shape and sparsity. It uses NumPy's random number generation capabilities to create a tensor of random values between 0 and 1, then applies a threshold to convert these values into 0s and 1s based on the given sparsity. If a seed is provided, it ensures that the results are reproducible."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the median split for KD-Tree construction using `numpy.argpartition`, we need to follow these steps:\n\n1. Use `numpy.argpartition` to partition the data based on the specified column `d`.\n2. Identify the median index.\n3. Determine which indices are less than the median and which are greater than the median.\n4. Ensure the resulting lists are sorted.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Partition the indices based on the column d\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # Get the median value\n    median_value = data[partitioned_indices[median_index], d]\n    \n    # Find the exact median index\n    pivot = None\n    for idx in partitioned_indices[:median_index + 1]:\n        if data[idx, d] == median_value:\n            pivot = idx\n            break\n    \n    # Separate the indices into left and right\n    left = [idx for idx in partitioned_indices[:median_index] if data[idx, d] < median_value]\n    right = [idx for idx in partitioned_indices[median_index + 1:] if data[idx, d] > median_value]\n    \n    # Sort the left and right lists\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n```\n\n### Explanation:\n\n1. **Partitioning**: We use `np.argpartition` to rearrange the indices such that the element at the `median_index` is the k-th smallest element in the array. This operation is done in O(n) time.\n\n2. **Finding the Median Index**: After partitioning, the element at `median_index` is guaranteed to be the median or one of the medians (if there are multiple medians due to even number of elements).\n\n3. **Identifying the Pivot**: We iterate through the first half of the partitioned indices to find the exact index of the median value.\n\n4. **Separating Indices**: We create two lists, `left` and `right`, containing the indices of elements less than and greater than the median value, respectively.\n\n5. **Sorting**: Finally, we sort the `left` and `right` lists to ensure determinism in the output.\n\nThis approach ensures that the split is performed efficiently in O(n) time, meeting the requirements of KD-Tree construction."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function using NumPy's `as_strided` for creating a view of the input signal with overlapping frames, we need to carefully manage the strides and shape of the resulting array. Here's how you can achieve this:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Length of signal must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the view using as_strided\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    result = as_strided(x, shape=shape, strides=strides)\n\n    # Set the writability of the result\n    if not writeable:\n        result.setflags(write=False)\n\n    return result\n```\n\n### Explanation:\n\n1. **Assertions**: We start by checking the pre-conditions using assertions. These ensure that the input signal is one-dimensional, the stride is positive, and the signal length is at least as long as the frame width.\n\n2. **Calculate Number of Frames**: We compute the number of frames using the formula provided in the description.\n\n3. **Using `as_strided`**: \n   - We define the desired shape of the resulting array as `(n_frames, frame_width)`.\n   - We calculate the strides for the new array. The first stride corresponds to the distance between the start of each frame (`stride * x.strides[0]`), and the second stride is the distance between elements within each frame (`x.strides[0]`).\n   - We use `as_strided` to create a view of the original array with the specified shape and strides.\n\n4. **Set Writability**: Finally, we set the writability of the resulting array based on the `writeable` parameter. If `writeable` is `False`, we make the array read-only.\n\nThis implementation ensures that the function returns a view on the original data, which is efficient in terms of memory usage and avoids unnecessary copying."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(X.sum(axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis function first converts the input matrix into a NumPy array for easier manipulation. It then checks if the matrix is two-dimensional, ensures all elements are within the range [0, 1], and verifies that each row sums to 1 within a specified numerical tolerance. If all these conditions are met, the function returns `True`; otherwise, it returns `False`."}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for t in range(max_iter):\n        # Shuffle data for each epoch\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        \n        # Mini-batch processing\n        for i in range(0, n, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            \n            # Compute gradient\n            residuals = X_batch @ w - y_batch\n            gradient = (1 / batch_size) * X_batch.T @ residuals\n            \n            # Update running average of squared gradients\n            s = rho * s + (1 - rho) * gradient ** 2\n            \n            # Update weights\n            w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# print(rms_prop(X, y))\n```\n\nThis implementation of the RMSprop optimizer for linear regression follows the specified requirements. It includes handling for mini-batches, early stopping based on the gradient norm, and ensures numerical stability through the addition of `eps_station`. The weights are returned as a list rounded to four decimal places."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its gradient.\n\n    Parameters:\n    - x: A scalar, Python list, or NumPy array of real numbers.\n    - deriv: A boolean flag indicating whether to compute the derivative (gradient) of the SoftPlus function.\n\n    Returns:\n    - A Python list (or a single float if the input is a scalar) containing the computed SoftPlus values or gradients,\n      rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    x_array = np.array(x)\n    \n    if deriv:\n        # Compute the gradient (sigmoid function)\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        # Compute the SoftPlus function\n        # Use log1p for numerical stability\n        result = np.log1p(np.exp(-np.abs(x_array))) + np.maximum(x_array, 0)\n    \n    # Round the result to the nearest 4th decimal\n    rounded_result = np.round(result, decimals=4)\n    \n    # Convert the result back to a Python list\n    if isinstance(x, (list, tuple)):\n        return rounded_result.tolist()\n    elif isinstance(x, np.ndarray):\n        return rounded_result.tolist()\n    else:\n        return float(rounded_result)\n\n# Example usage:\nprint(softplus([0, 1, -1]))  # SoftPlus values\nprint(softplus([0, 1, -1], deriv=True))  # Derivatives (sigmoid values)\n```\n\nThis implementation defines the `softplus` function to compute either the SoftPlus activation or its gradient based on the `deriv` flag. It uses `np.log1p` for numerical stability and ensures the output is rounded to the nearest 4th decimal, returning a Python list or a single float as appropriate."}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Count all N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        prefix_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        prefix_counts = Counter(corpus)\n\n    # Calculate the total log-probability\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N > 1:\n            prefix = tuple(sequence[i:i+N-1])\n            count_ngram = ngram_counts[ngram]\n            count_prefix = prefix_counts[prefix]\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        else:\n            count_ngram = ngram_counts[ngram]\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / len(corpus)\n        \n        log_prob += np.log(prob)\n    \n    return round(log_prob, 4)\n```\n\nThis function first counts all the necessary N-grams and (N-1)-grams from the corpus. It then calculates the log-probability for each position in the sequence by dividing the count of the current N-gram by the count of its prefix (or the total number of words for unigrams). If any count is zero, it returns `float('-inf')`. Finally, it returns the total log-probability rounded to four decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of training examples\n    m = len(X)\n    \n    # Build the design matrix with polynomial features\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        # Store the previous weights to check for convergence\n        w_prev = w.copy()\n        \n        # Update the bias term\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update the coefficients using coordinate descent\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T @ (y - X_poly @ w + w[j] * X_poly[:, j])\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    # Round the coefficients to 4 decimal places\n    return [round(weight, 4) for weight in w]\n\ndef soft_threshold(rho, lambda_):\n    \"\"\"Compute the soft thresholding operator.\"\"\"\n    return np.sign(rho) * max(abs(rho) - lambda_, 0)\n```\n\nThis implementation follows the steps outlined in the task description. It constructs a polynomial feature matrix, initializes the weights, and uses coordinate descent to optimize the Lasso objective function. The soft thresholding function is used to update the coefficients, and the algorithm stops when the largest absolute weight change falls below the specified tolerance or after the maximum number of iterations. The final weights are rounded to four decimal places before being returned."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    - A: Transition-probability matrix of shape (N, N).\n    - B: Emission-probability matrix of shape (N, M).\n    - obs: List of observation indices (length T).\n    - t: Integer time index (0 \u2264 t < T).\n\n    Returns:\n    - A list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    \n    # Initialize the backward probability vector for the last time step\n    beta = [1.0] * N\n    \n    # Iterate backwards from T-2 to t\n    for i in range(T-2, t-1, -1):\n        beta_next = [0.0] * N\n        for j in range(N):\n            beta_next[j] = sum(A[j][k] * B[k][obs[i+1]] * beta[k] for k in range(N))\n        beta = beta_next\n    \n    # Round the results to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\n# obs = [0, 1, 2]\n# t = 0\n# print(backward_beta(A, B, obs, t))\n```\n\nThis function calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. It uses the provided transition and emission probability matrices, along with the observation sequence, to compute the probabilities iteratively from the end of the sequence back to the specified time index \\(t\\). The results are rounded to four decimal places as required."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for computing the probability of an observation sequence in a Hidden Markov Model (HMM), we need to follow these steps:\n\n1. **Initialize**: Start with the last time step where the backward variable is set to 1.\n2. **Recursive Calculation**: Use the recursive formula to compute the backward variables for each previous time step.\n3. **Compute Sequence Probability**: Finally, use the initial probabilities and the first backward variable to compute the probability of the entire sequence.\n\nHere's the complete implementation of the `backward_prob` function:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check if any input list is empty\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(pi)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the beta values for the last time step\n    beta = np.zeros((T, N))\n    beta[T-1] = 1.0\n\n    # Compute the beta values for each time step from T-2 to 0\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1][j] for j in range(N))\n\n    # Compute the probability of the sequence\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N))\n\n    # Return the result rounded to 6 decimal places\n    return round(prob, 6)\n```\n\n### Explanation:\n\n- **Initialization**: We initialize the backward variable for the last time step (`beta[T-1]`) to 1 because there are no future observations to consider.\n  \n- **Recursive Calculation**: For each time step `t` from `T-2` to `0`, we calculate `beta[t][i]` using the recursive formula. This involves summing over all possible next states `j` the product of the transition probability `A[i][j]`, the emission probability `B[j][obs[t+1]]`, and the backward variable `beta[t+1][j]`.\n\n- **Sequence Probability**: Finally, we compute the probability of the entire sequence by summing over all initial states `i` the product of the initial probability `pi[i]`, the emission probability `B[i][obs[0]]`, and the backward variable `beta[0][i]`.\n\nThis function will correctly compute the probability of the given observation sequence using the backward algorithm, rounding the result to six decimal places."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models (HMMs), we need to follow these steps:\n\n1. **Input Validation**: Ensure that the dimensions of the input matrices and vectors are consistent and that all observations are within the valid range.\n2. **Initialization**: Set up the initial state probabilities.\n3. **Forward Pass**: Compute the forward variables using the recurrence relation of the forward algorithm.\n4. **Result Calculation**: Sum the forward variables at the final time step to get the probability of the observation sequence.\n\nHere's the implementation of the forward algorithm in Python:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Validate dimensions\n    n_states = len(S)\n    if A.shape != (n_states, n_states):\n        return -1\n    if B.shape != (n_states, B.shape[1]):\n        return -1\n    if not observations:\n        return -1\n    \n    # Check if all observations are within the valid range\n    if any(obs < 0 or obs >= B.shape[1] for obs in observations):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((n_states, T))\n    \n    # Initialization step\n    alpha[:, 0] = S * B[:, observations[0]]\n    \n    # Recursion step\n    for t in range(1, T):\n        for i in range(n_states):\n            alpha[i, t] = alpha[:, t-1].dot(A[:, i]) * B[i, observations[t]]\n    \n    # Termination step\n    probability = np.sum(alpha[:, -1])\n    \n    # Return the result rounded to 4 decimal places\n    return round(probability, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.4, 0.6]]\n# observations = [0, 1]\n# print(forward_algorithm(S, A, B, observations))  # Output should be rounded to 4 decimal places\n```\n\n### Explanation:\n- **Input Validation**: We check if the dimensions of `S`, `A`, and `B` are correct and if the observations are within the valid range.\n- **Initialization**: The forward variable `alpha` is initialized with the product of initial state probabilities and the emission probabilities of the first observation.\n- **Recursion**: For each subsequent observation, we update the forward variables using the transition probabilities and emission probabilities.\n- **Termination**: The probability of the entire sequence is the sum of the forward variables at the last time step.\n- **Output**: The result is rounded to four decimal places before being returned. If any validation fails, the function returns `-1`."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow these steps:\n\n1. **Count the Support of Every Single Item**: We'll count how many times each item appears across all transactions. Items that appear fewer than `min_support` times will be discarded.\n\n2. **Build the FP-Tree**: We'll construct a tree-like structure where each node represents an item and its support count. The tree is built by inserting transactions into the tree in the order of their frequent items.\n\n3. **Mine Conditional FP-Trees**: For each frequent item, we'll create a conditional pattern base and then build a conditional FP-tree from this base. We'll recursively apply the FP-Growth algorithm to these conditional FP-trees to find larger item-sets.\n\n4. **Return the Frequent Item-Sets**: Finally, we'll collect all frequent item-sets and sort them as required.\n\nHere's the implementation of the FP-Growth algorithm in Python:\n\n```python\nfrom collections import Counter, defaultdict\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None, None)\n        self.header_table = {}\n\n    def insert(self, transaction, count):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, current_node)\n                current_node.children[item] = new_node\n                if item not in self.header_table:\n                    self.header_table[item] = []\n                self.header_table[item].append(new_node)\n            else:\n                new_node = current_node.children[item]\n            new_node.count += count\n            current_node = new_node\n\n    def get_conditional_pattern_base(self, item):\n        if item not in self.header_table:\n            return []\n        pattern_base = []\n        for node in self.header_table[item]:\n            path = []\n            while node.parent != self.root:\n                path.append((node.item, node.count))\n                node = node.parent\n            if path:\n                pattern_base.append(path[::-1])\n        return pattern_base\n\nclass FPNode:\n    def __init__(self, item, parent):\n        self.item = item\n        self.parent = parent\n        self.children = {}\n        self.count = 0\n\ndef fp_growth(transactions, min_support):\n    # Step 1: Count the support of every single item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Step 2: Build the FP-tree\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: (-frequent_items[x], x))  # Sort by frequency, then lexicographically\n        fp_tree.insert(filtered_transaction, 1)\n\n    # Step 3: Mine conditional FP-trees\n    def mine_fp_tree(tree, prefix, frequent_itemsets):\n        if not tree.header_table:\n            return\n\n        # Step 3.1: Sort items in the header table by support count (descending) and lexicographically\n        sorted_items = sorted(tree.header_table.keys(), key=lambda x: (-frequent_items[x], x))\n\n        for item in sorted_items:\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n\n            # Step 3.2: Get the conditional pattern base\n            conditional_pattern_base = tree.get_conditional_pattern_base(item)\n\n            # Step 3.3: Build the conditional FP-tree\n            conditional_tree = FPTree()\n            conditional_item_counts = Counter()\n            for pattern in conditional_pattern_base:\n                conditional_item_counts.update(pattern)\n                conditional_tree.insert(pattern, 1)\n\n            # Step 3.4: Recursively mine the conditional FP-tree\n            mine_fp_tree(conditional_tree, new_prefix, frequent_itemsets)\n\n    frequent_itemsets = []\n    mine_fp_tree(fp_tree, [], frequent_itemsets)\n\n    # Step 4: Return the frequent item-sets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['I1', 'I2', 'I5'],\n    ['I2', 'I4'],\n    ['I2', 'I3'],\n    ['I1', 'I2', 'I4'],\n    ['I1', 'I3'],\n    ['I2', 'I3'],\n    ['I1', 'I3'],\n    ['I1', 'I2', 'I3', 'I5'],\n    ['I1', 'I2', 'I3']\n]\n\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis implementation follows the FP-Growth algorithm as described. It constructs the FP-tree, mines conditional FP-trees, and collects frequent item-sets. The results are sorted as required to ensure determinism."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n\n    def euclidean_distance(x1, x2):\n        return sum((a - b) ** 2 for a, b in zip(x1, x2))\n\n    predictions = []\n\n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [(euclidean_distance(test_sample, train_sample), label)\n                     for train_sample, label in zip(X_train, y_train)]\n        \n        # Sort distances by the first element (distance) and then by the second element (label) in case of ties\n        distances.sort(key=lambda x: (x[0], x[1]))\n        \n        # Get the k nearest neighbors\n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        # Find the most common label among the k nearest neighbors\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        \n        predictions.append(most_common_label)\n\n    return predictions\n```\n\nThis implementation follows the rules specified:\n\n1. It calculates the Euclidean distance between each test sample and all training samples.\n2. It sorts the distances and selects the k nearest neighbors.\n3. It uses majority voting to determine the class label, breaking ties by choosing the smallest class label.\n4. It checks if k is valid and returns -1 if it is not."}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n```\n\nThis function takes two inputs, `y` and `y_pred`, which are expected to be one-hot encoded true labels and predicted probabilities, respectively. It computes the unnormalized categorical cross-entropy loss using the formula provided, ensuring numerical stability by adding a small epsilon value before taking the logarithm. The result is then rounded to four decimal places and returned as a float."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef linear_forward(A, W, b):\n    \"\"\"Linear part of a layer's forward propagation.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Forward propagation for the LINEAR->ACTIVATION layer.\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a python dictionary containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n    \n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n    \n    cache = (linear_cache, activation_cache)\n    return A, cache\n\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1...WL and b1...bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation=\"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation=\"sigmoid\")\n    caches.append(cache)\n    \n    # Round the final activation matrix AL to 4 decimal places and convert it to a plain Python list\n    AL_rounded = np.round(AL, 4).tolist()\n    \n    return AL_rounded, caches\n```\n\nThis code defines the forward propagation for an L-layer neural network using ReLU activations for all hidden layers and a sigmoid activation for the output layer. The `L_model_forward` function takes the input data `X` and the network parameters `parameters`, computes the forward pass, and returns the final activations rounded to four decimal places as a plain Python list, along with the caches needed for backpropagation."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y have the same shape\n    assert A2.shape == Y.shape, \"A2 and Y must have the same shape\"\n\n    # Clip A2 to avoid log(0) which is undefined\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    m = A2.size\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n\n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to a NumPy array if it isn't already\n    Q = np.array(Q)\n    \n    # Number of actions\n    n = len(Q)\n    \n    # Find the index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize the probability array\n    probabilities = np.full(n, base_prob)\n    \n    # Set the probability of the greedy action\n    probabilities[greedy_index] = greedy_prob\n    \n    # Round the probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum of probabilities is exactly 1\n    probabilities = np.clip(probabilities, 0, 1)\n    probabilities /= np.sum(probabilities)\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis implementation ensures that the probabilities are correctly calculated according to the \u03b5-soft policy, rounded to four decimal places, and that their sum is exactly 1. The use of NumPy helps in efficiently handling the calculations and ensures numerical stability."}
{"task_id": 86, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that aggregates predictions from multiple decision trees using a majority vote. The function will handle both numeric and string labels, ensuring that in case of a tie, the smallest label is chosen.\n\nHere's the implementation of the `aggregate_random_forest_votes` function:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_predictions = []\n\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [predictions[tree_index][sample_index] for tree_index in range(len(predictions))]\n        \n        # Count the occurrences of each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen\n        majority_vote = min(vote_counts, key=lambda x: (-vote_counts[x], x))\n        \n        # Append the majority vote to the result list\n        aggregated_predictions.append(majority_vote)\n\n    return aggregated_predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We first determine the number of samples by checking the length of the first inner list (`num_samples`). We also initialize an empty list `aggregated_predictions` to store the final predictions.\n\n2. **Iterate Over Samples**: We loop over each sample index from `0` to `num_samples - 1`.\n\n3. **Collect Votes**: For each sample, we collect the predictions from all trees. This is done by iterating over each tree index and accessing the prediction for the current sample.\n\n4. **Count Votes**: We use `Counter` from the `collections` module to count the occurrences of each class label in the collected votes.\n\n5. **Determine Majority Vote**: We find the class label with the highest vote count. In case of a tie, the `min` function is used with a custom key. The key `lambda x: (-vote_counts[x], x)` ensures that the label with the highest count is chosen first, and in case of a tie, the smallest label is chosen.\n\n6. **Store Result**: The majority vote for the current sample is appended to the `aggregated_predictions` list.\n\n7. **Return Result**: Finally, we return the list of aggregated predictions.\n\nThis function efficiently aggregates the predictions using majority voting and handles ties by selecting the smallest label."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z_array = np.asarray(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the values to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, (list, np.ndarray)):\n        return rounded_values.tolist()\n    else:\n        return rounded_values.item()\n\n# Example usage:\n# z = np.array([-1000, 0, 3])\n# print(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis implementation ensures that the softplus function is computed in a numerically stable manner using `np.logaddexp`, and it handles both scalar and array-like inputs appropriately, returning a pure Python list for non-scalar inputs."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Sort the arm indices from the policy estimates\n    sorted_indices = sorted(policy.ev_estimates.keys())\n    \n    # Calculate the squared errors\n    squared_errors = [\n        (policy.ev_estimates[i] - bandit.arm_evs[i]) ** 2\n        for i in sorted_indices\n    ]\n    \n    # Compute the mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Round the result to 4 decimal places\n    return round(mse_value, 4)\n```\n\nThis function first checks if the policy has any estimates. If not, it returns `numpy.nan`. Otherwise, it sorts the arm indices from the policy estimates, calculates the squared errors for each arm, computes the mean-squared error, and rounds the result to 4 decimal places before returning it."}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build the vocabulary and add <UNK>\n    vocab = set()\n    for sentence in corpus:\n        vocab.update(sentence.split())\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n    \n    # Step 2: Build frequency tables for 1-gram to N-gram\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    \n    for sentence in corpus:\n        words = [\"<s>\"] + sentence.split() + [\"</s>\"]\n        for i in range(len(words)):\n            for j in range(1, N+1):\n                if i+j <= len(words):\n                    ngram = tuple(words[i:i+j])\n                    ngram_counts[j-1][ngram] += 1\n    \n    # Step 3: Compute the log-probability of the sequence\n    sequence_words = [\"<s>\"] + sequence.split() + [\"</s>\"]\n    log_prob = 0.0\n    \n    for i in range(len(sequence_words)):\n        for j in range(1, N+1):\n            if i+j <= len(sequence_words):\n                ngram = tuple(sequence_words[i:i+j])\n                context = ngram[:-1]\n                \n                # Handle unseen words by mapping them to \"<UNK>\"\n                if any(word not in vocab for word in context):\n                    context = tuple(\"<UNK>\" if word not in vocab else word for word in context)\n                \n                if j == 1:\n                    count_context = sum(ngram_counts[0].values())\n                else:\n                    count_context = ngram_counts[j-2][context]\n                \n                count_ngram = ngram_counts[j-1][ngram]\n                \n                # Additive smoothing\n                smoothed_prob = (count_ngram + K) / (count_context + K * V)\n                log_prob += math.log(smoothed_prob)\n    \n    # Return the log-probability rounded to 4 decimals\n    return round(log_prob, 4)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) algorithm for matrix factorization, we need to follow these steps:\n\n1. **Initialize** the factor matrices \\( W \\) and \\( H \\) with random values using a fixed seed for reproducibility.\n2. **Iterate** between updating \\( W \\) and \\( H \\) while keeping the other fixed.\n3. **Compute** the regularized Frobenius reconstruction loss after each update.\n4. **Stop** the iteration if the loss drops below the tolerance (`tol`) or if the maximum number of iterations (`max_iter`) is reached.\n5. **Return** the reconstructed matrix \\( \\hat{X} = WH \\) rounded to 4 decimal places.\n\nHere's the complete implementation of the `als_factorization` function:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    \n    # Initialize W and H with random values\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss():\n        reconstruction = np.dot(W, H)\n        loss = np.linalg.norm(X - reconstruction, 'fro')**2\n        reg_term = alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        return loss + reg_term\n    \n    prev_loss = np.inf\n    for iteration in range(max_iter):\n        # Update W\n        for i in range(N):\n            if np.sum(X[i, :]) > 0:\n                A = np.dot(H, H.T) + alpha * np.eye(K)\n                b = np.dot(X[i, :], H)\n                W[i, :] = np.linalg.solve(A, b)\n        \n        # Update H\n        for j in range(M):\n            if np.sum(X[:, j]) > 0:\n                A = np.dot(W.T, W) + alpha * np.eye(K)\n                b = np.dot(W.T, X[:, j])\n                H[:, j] = np.linalg.solve(A, b)\n        \n        # Compute the loss\n        current_loss = compute_loss()\n        \n        # Check for convergence\n        if np.abs(current_loss - prev_loss) < tol:\n            break\n        \n        prev_loss = current_loss\n    \n    # Reconstruct the matrix\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# result = als_factorization(X, K=2, alpha=0.1, max_iter=100, tol=1e-4)\n# print(result)\n```\n\n### Explanation:\n- **Initialization**: We initialize \\( W \\) and \\( H \\) with random values using `np.random.rand` and set the seed to 0 for reproducibility.\n- **Updates**: For each iteration, we update \\( W \\) and \\( H \\) by solving the regularized least-squares problem. This involves computing the matrix \\( A \\) and vector \\( b \\) for each row/column of \\( X \\) and solving the linear system \\( Ax = b \\).\n- **Loss Calculation**: The regularized Frobenius loss is calculated after each update to check for convergence.\n- **Convergence Check**: The loop stops if the change in loss is below the tolerance or if the maximum number of iterations is reached.\n- **Reconstruction**: Finally, the reconstructed matrix \\( \\hat{X} \\) is computed and returned as a list of lists rounded to 4 decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow these steps:\n\n1. **Initialization**: Use the K-Means++ method to choose the initial centroids.\n2. **Assignment**: Assign each data point to the nearest centroid.\n3. **Update**: Update the centroids based on the mean of the points assigned to them.\n4. **Convergence Check**: Repeat the assignment and update steps until the cluster assignments do not change or the maximum number of iterations is reached.\n5. **Sorting and Rounding**: Sort the final centroids by their first coordinate and round them to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    # Step 1: Initialize centroids using K-Means++\n    centroids = []\n    centroids.append(X[np.random.choice(len(X))])\n\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid_index = np.random.choice(len(X), p=probabilities)\n        centroids.append(X[next_centroid_index])\n\n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        # Assignment step\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n        # Update step\n        new_centroids = np.array([X[labels == k].mean(axis=0) if len(X[labels == k]) > 0 else centroids[k] for k in range(K)])\n\n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Step 3: Sort and round centroids\n    centroids = sorted(centroids, key=lambda c: (c[0], tuple(c)))\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n\n    return centroids\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [4, 2], [4, 4], [4, 0]])\n# K = 2\n# print(kmeans(X, K, random_state=0))\n```\n\n### Explanation:\n\n- **K-Means++ Initialization**: We start by randomly selecting the first centroid. For each subsequent centroid, we calculate the distance from each data point to the nearest existing centroid, compute the probability distribution based on these distances, and select the next centroid according to this distribution.\n\n- **Lloyd's Iterations**: We repeatedly assign each data point to the nearest centroid and then update the centroids to be the mean of the points assigned to them. This process continues until the centroids no longer change or the maximum number of iterations is reached.\n\n- **Handling Empty Clusters**: If a cluster becomes empty during the update step, its centroid remains unchanged.\n\n- **Sorting and Rounding**: Finally, we sort the centroids by their first coordinate and round them to four decimal places before returning them."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a text string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs the model, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array([encoded_input])\n    prediction = model.predict(input_batch)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output\n```\n\nThis code provides the required helper functions for encoding and decoding character-level sequences using a fixed-length representation. The `string_to_int` function converts a text string into a fixed-length list of integer token IDs, while `int_to_string` converts a list of integer IDs back to a text string, ignoring padding tokens. The `run_example` function integrates these functionalities by encoding the input text, running a model prediction, and decoding the output."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        predictions.append(predicted_string)\n\n    return predictions\n```"}
{"task_id": 115, "completion_id": 0, "completion": "To implement the `logistic_loss_and_gradient` function, we need to follow these steps:\n\n1. **Compute the linear combination**: For each sample, compute \\( z = x \\cdot w \\).\n2. **Apply the sigmoid function**: Compute the predicted probabilities \\( p = \\sigma(z) = \\frac{1}{1 + e^{-z}} \\).\n3. **Handle numerical stability**: Replace any predicted probability \\( p \\) that is exactly 0 or 1 with a small constant \\( \\epsilon = 1e-20 \\).\n4. **Compute the loss**: Calculate the average binary cross-entropy loss \\( J(w) \\).\n5. **Compute the gradient**: Calculate the gradient of the loss with respect to the weights \\( \\nabla J(w) \\).\n6. **Return the results**: Return the loss rounded to 4 decimal places and the gradient converted to a nested Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector if it's not already\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    \n    # Compute the linear combination\n    z = np.dot(X, w)\n    \n    # Apply the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n    \n    # Handle numerical stability\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the loss\n    loss = -1 / len(y) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient\n    gradient = 1 / len(y) * np.dot(X.T, (p - y))\n    \n    # Round the loss and convert the gradient to a nested list\n    loss_rounded = round(loss, 4)\n    gradient_rounded = gradient.round(4).tolist()\n    \n    return loss_rounded, gradient_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, -0.5])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\n### Explanation:\n- **Sigmoid Function**: The sigmoid function \\( \\sigma(z) = \\frac{1}{1 + e^{-z}} \\) maps any real-valued number into the (0, 1) interval, which can be interpreted as probabilities.\n- **Numerical Stability**: By clipping the probabilities \\( p \\) to be between \\( \\epsilon \\) and \\( 1 - \\epsilon \\), we avoid taking the logarithm of zero or one, which would result in undefined values.\n- **Gradient Calculation**: The gradient is computed using the formula \\( \\nabla J(w) = \\frac{1}{m} X^T (p - y) \\), which is derived from the chain rule applied to the logistic loss function.\n\nThis implementation ensures that the loss and gradient are computed correctly and efficiently, even for large datasets."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for each training example.\n2. **Iteratively Train Weak Learners**: For each iteration, train a decision stump that minimizes the weighted error. Update the weights based on the error of the stump.\n3. **Calculate Stump Weight**: Compute the weight of the stump using the formula provided.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions from all stumps and determine the final prediction based on the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    D = np.full(m, 1 / m)  # Initialize weights uniformly\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Find the best decision stump\n        best_error = np.inf\n        best_threshold = 0\n        best_feature = 0\n        best_polarity = 1\n\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_train[:, feature] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] >= threshold] = -1\n\n                    errors = D[y_train != predictions]\n                    error = np.sum(errors)\n\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_polarity = polarity\n\n        # Calculate the stump weight\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n\n        # Update the weights\n        predictions = np.ones(m)\n        if best_polarity == 1:\n            predictions[X_train[:, best_feature] < best_threshold] = -1\n        else:\n            predictions[X_train[:, best_feature] >= best_threshold] = -1\n\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n\n        # Store the classifier\n        classifiers.append((best_feature, best_threshold, best_polarity, alpha))\n\n    # Predict for the test set\n    predictions = np.zeros(len(X_test))\n    for feature, threshold, polarity, alpha in classifiers:\n        pred = np.ones(len(X_test))\n        if polarity == 1:\n            pred[X_test[:, feature] < threshold] = -1\n        else:\n            pred[X_test[:, feature] >= threshold] = -1\n        predictions += alpha * pred\n\n    return [1 if p > 0 else -1 for p in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function, which trains an AdaBoost model using decision stumps and predicts labels for a test set. The function handles the initialization of weights, training of weak learners, updating of weights, and aggregation of predictions to produce the final output."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    \n    for c in classes:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mu_c).T, (X_c - mu_c))\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    \n    for c in classes:\n        N_c = X[y == c].shape[0]\n        mu_c = np.mean(X[y == c], axis=0)\n        S_B += N_c * np.dot((mu_c - mu).reshape(d, 1), (mu_c - mu).reshape(1, d))\n    \n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n    \n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Step 5: Sort the eigen-pairs in descending order of the eigen-values\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 6: Flip the sign of eigenvectors if the first non-zero element is negative\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[:, i][eigenvectors[:, i] != 0][0] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Step 7: Project X on the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    projected_data = np.dot(X, W)\n    \n    # Round every element to four decimal places\n    projected_data_rounded = np.round(projected_data, 4)\n    \n    # Convert to list of lists\n    return projected_data_rounded.tolist()\n```"}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping the fire maze, we need to simulate the spread of fire and the movement of the agent simultaneously. The key challenge is to ensure that the agent reaches the goal before any part of the maze burns. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Initialize the Grid**: Parse the input grid to identify the starting positions of the agent and the fire.\n\n2. **Simulate Fire Spread**: Use a breadth-first search (BFS) to simulate the spread of fire. Each minute, the fire will spread to all adjacent free cells.\n\n3. **Simulate Agent Movement**: Use another BFS to simulate the agent's movement. The agent can only move to cells that are not on fire at the moment the agent arrives.\n\n4. **Check for Goal Reachability**: During the agent's BFS, check if the agent can reach the goal cell before the fire does.\n\n5. **Edge Cases**: Handle edge cases such as when the start or goal cell is initially on fire, or when the maze size is 1x1.\n\nHere's the complete implementation of the solution:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Check if start or goal is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # Initialize fire positions\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))  # (row, col, time)\n    \n    # Initialize agent position\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    visited = set()\n    visited.add((0, 0, 0))\n    \n    # Function to get the state of the cell at a given time\n    def get_cell_state(row, col, time):\n        if row < 0 or row >= n or col < 0 or col >= n or grid[row][col] == '#':\n            return '#'\n        fire_time = fire_times.get((row, col), float('inf'))\n        if fire_time <= time:\n            return 'F'\n        return '.'\n    \n    # Simulate fire spread\n    fire_times = {}\n    while fire_queue:\n        row, col, time = fire_queue.popleft()\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] != '#' and (new_row, new_col) not in fire_times:\n                fire_times[(new_row, new_col)] = time + 1\n                fire_queue.append((new_row, new_col, time + 1))\n    \n    # Simulate agent movement\n    while agent_queue:\n        row, col, time = agent_queue.popleft()\n        if row == n - 1 and col == n - 1:\n            return time\n        \n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col, time + 1) not in visited and get_cell_state(new_row, new_col, time + 1) == '.':\n                visited.add((new_row, new_col, time + 1))\n                agent_queue.append((new_row, new_col, time + 1))\n    \n    return -1\n\n# Example usage:\ngrid = [\n    \".F.\",\n    \".#.\",\n    \"...\"\n]\nprint(escape_fire_maze(grid))  # Output: 2\n```\n\n### Explanation:\n- **Fire Simulation**: We use a BFS to simulate the fire spread. Each cell that catches fire is recorded with the time it catches fire.\n- **Agent Simulation**: We use another BFS to simulate the agent's movement. The agent can only move to cells that are not on fire at the time the agent arrives.\n- **State Checking**: The `get_cell_state` function checks if a cell is free or on fire at a given time.\n- **Edge Cases**: The function handles cases where the start or goal is on fire immediately, or when the maze size is 1x1.\n\nThis approach ensures that we efficiently simulate both the fire spread and the agent's movement, providing the correct minimum time for the agent to reach the goal or determine if it's impossible."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Validate the metric\n    valid_metrics = ['euclidean', 'manhattan', 'cosine']\n    if metric not in valid_metrics:\n        metric = 'euclidean'\n    \n    # Calculate the distance matrix\n    distance_matrix = cdist(X_test, X_train, metric=metric)\n    \n    # Find the indices of the k nearest neighbors for each test sample\n    nearest_indices = np.argsort(distance_matrix, axis=1)[:, :k]\n    \n    # Get the labels of the k nearest neighbors\n    k_nearest_labels = y_train[nearest_indices]\n    \n    # Predict the class by majority vote\n    predicted_labels = []\n    for labels in k_nearest_labels:\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        # In case of a tie, return the smallest label value\n        predicted_label = unique_labels[np.argmax(counts)]\n        predicted_labels.append(predicted_label)\n    \n    return np.array(predicted_labels)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1.5, 2.5]])\n# k = 2\n# print(knn_predict(X_train, y_train, X_test, k))  # Output might be [0]\n```\n\nThis implementation of the k-Nearest Neighbors (k-NN) classifier follows the specified requirements. It computes the distances between test samples and training samples using the specified metric, finds the k nearest neighbors for each test sample, and predicts the class by majority vote. In case of a tie, it returns the smallest label value. The function defaults to the Euclidean metric if an unknown metric is provided."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - (dot_product / (norm_a * norm_b + epsilon))\n\n    if k > len(X):\n        k = len(X)\n\n    predictions = []\n\n    for test_sample in X_test:\n        distances = []\n        for i, train_sample in enumerate(X):\n            if metric == 'euclidean':\n                dist = euclidean_distance(test_sample, train_sample)\n            elif metric == 'manhattan':\n                dist = manhattan_distance(test_sample, train_sample)\n            elif metric == 'cosine':\n                dist = cosine_distance(test_sample, train_sample)\n            else:\n                raise ValueError(\"Invalid metric specified\")\n            distances.append((dist, y[i]))\n\n        # Sort distances and get the labels of the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in distances[:k]]\n\n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        if len(unique_labels) > 1 and counts[np.argmax(counts)] == counts[np.argsort(counts)[-2]]:\n            most_common_label = min(unique_labels[counts == counts[np.argmax(counts)]])\n\n        predictions.append(most_common_label)\n\n    return predictions\n```"}
{"task_id": 155, "completion_id": 0, "completion": "To implement the forward pass of the actor network using NumPy, we need to perform the following steps:\n\n1. Convert the input state to a NumPy array if it's not already.\n2. Perform the first linear transformation using `W1` and `b1`, followed by the ReLU activation.\n3. Perform the second linear transformation using `W2` and `b2`, followed by the ReLU activation.\n4. Perform the final linear transformation using `W3` and `b3`, followed by the tanh activation.\n5. Round the resulting action vector to four decimal places and return it as a list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it's not already\n    state = np.array(state)\n    \n    # First linear transformation and ReLU activation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU\n    \n    # Second linear transformation and ReLU activation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU\n    \n    # Third linear transformation and tanh activation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    \n    # Round the action vector to four decimal places and return as a list\n    return [round(float(a), 4) for a in action]\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# weights = {\n#     'W1': np.random.randn(3, 64),\n#     'b1': np.random.randn(64),\n#     'W2': np.random.randn(64, 32),\n#     'b2': np.random.randn(32),\n#     'W3': np.random.randn(32, 1),\n#     'b3': np.random.randn(1)\n# }\n# print(actor_forward(state, weights))\n```\n\nThis function takes a state vector and a dictionary of weights, performs the forward pass through the network, and returns the action vector rounded to four decimal places. The ReLU activation is implemented using `np.maximum(0, z)`, and the tanh activation is implemented using `np.tanh(z)`."}
{"task_id": 160, "completion_id": 0, "completion": "To implement Lasso regression via coordinate descent using only NumPy, we need to follow the steps outlined in the task description. Below is the complete implementation of the `fit_lasso` function:\n\n```python\nimport numpy as np\n\ndef soft_thresholding(a, tau):\n    \"\"\"Apply the soft-thresholding operator.\"\"\"\n    return np.sign(a) * np.maximum(np.abs(a) - tau, 0)\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Step 1: Add an all-ones column to X if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    \n    # Step 2: Initialise all parameters to zero\n    w = np.zeros(n)\n    \n    for _ in range(max_iters):\n        if fit_intercept:\n            # Recompute the intercept in every outer loop\n            b = np.mean(y - X[:, 1:] @ w)\n            r = y - X[:, 1:] @ w - b\n        else:\n            r = y - X @ w\n        \n        for j in range(n):\n            # Step 3: Temporarily set the current weight to 0\n            w_j = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual r_j\n            r_j = r + X[:, j] * w_j\n            \n            # Update weight w_j with the soft-thresholding operator\n            numerator = np.dot(X[:, j], r_j)\n            denominator = np.sum(X[:, j] ** 2)\n            w[j] = soft_thresholding(numerator, lambda_param * m) / denominator\n        \n        if fit_intercept:\n            # Recompute the intercept after updating weights\n            b = np.mean(y - X[:, 1:] @ w)\n    \n    # Return the final intercept and weight vector, rounded to 4 decimal places\n    if fit_intercept:\n        return [round(w_i, 4) for w_i in w[1:]], round(b, 4)\n    else:\n        return [round(w_i, 4) for w_i in w], 0.0\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# lambda_param = 0.1\n# max_iters = 100\n# fit_intercept = True\n# result = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\n# print(result)\n```\n\n### Explanation:\n1. **Soft Thresholding Function**: This helper function implements the soft-thresholding operation.\n2. **Adding Intercept**: If `fit_intercept` is `True`, an all-ones column is added to the feature matrix `X`.\n3. **Initialization**: All weights are initialized to zero.\n4. **Coordinate Descent Loop**:\n   - For each iteration, if `fit_intercept` is `True`, the intercept `b` is recomputed.\n   - For each weight `w_j`, it is temporarily set to zero, and the partial residual `r_j` is computed.\n   - The weight `w_j` is updated using the soft-thresholding operator.\n5. **Final Output**: The final weights and intercept are returned, rounded to four decimal places.\n\nThis implementation ensures that the Lasso regression model is trained using coordinate descent optimization, adhering to the constraints provided."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are different\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the number of differing elements\n    diff_count = np.sum(x != y)\n    \n    # Calculate the normalized Hamming distance\n    distance = diff_count / x.shape[0]\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(hamming_distance([1, 0, 1, 1], [1, 0, 0, 1]))  # Output: 0.25\n# print(hamming_distance([1, 0, 1, 1], [1, 0, 1]))     # Output: -1\n```\n\nThis function first checks if the input vectors have the same length. If they do not, it returns `-1`. Otherwise, it calculates the number of differing elements between the two vectors and divides this by the total number of elements to get the normalized Hamming distance. The result is then rounded to four decimal places before being returned."}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) +\n                     a2 * np.cos(4 * np.pi * n / (N - 1)) -\n                     a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        return [round(sum(ak * np.cos(2 * np.pi * k * n / (N - 1)) for k, ak in enumerate(coefficients)), 4) for n in range(N)]\n    \n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```\n\nThis function `generate_window` generates the coefficients for various window functions used in digital signal processing. It supports the Hamming, Hann, Blackman-Harris, and generalized cosine windows. The coefficients are rounded to four decimal places and returned as a list. The function also handles special cases such as when `N` is 1 or when an unknown window type is provided."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier using mini-batch Gradient Descent from scratch, we need to follow several steps. Here's a detailed breakdown of the implementation:\n\n1. **Data Preparation**: Convert the input lists to NumPy arrays for easier manipulation. Add an intercept term (bias) to the feature matrices.\n2. **Label Mapping**: Map the original labels to `{0, 1}` for internal processing and then map them back after predictions.\n3. **Gradient Descent**: Implement mini-batch Gradient Descent to minimize the negative log-likelihood loss.\n4. **Prediction**: Use the trained model to predict probabilities and convert them to class labels based on a threshold of 0.5.\n5. **Edge Case Handling**: If all training labels are identical, skip training and predict the same label for all test samples.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term (bias) to the feature matrices\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Handle edge case where all training labels are identical\n    if np.all(y_train == y_train[0]):\n        return [y_train[0]] * len(X_test)\n    \n    # Map original labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Compute predictions\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            \n            # Compute gradients\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / batch_size\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions = (probabilities >= 0.5).astype(int)\n    \n    # Map predictions back to original label set\n    reverse_label_map = {v: k for k, v in label_map.items()}\n    final_predictions = [reverse_label_map[pred] for pred in predictions]\n    \n    return final_predictions\n```\n\nThis implementation follows the requirements and constraints provided. It uses mini-batch Gradient Descent to train the model and handles the special case where all training labels are identical. The predictions are returned in the same label set as `y_train`."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow these steps:\n\n1. **Initialize Sample Weights**: Start with equal weights for each sample.\n2. **Train Weak Learners**: For each boosting round, train a decision stump that minimizes the weighted classification error.\n3. **Update Sample Weights**: Adjust the weights based on the performance of the weak learner.\n4. **Aggregate Predictions**: Combine the predictions of all weak learners to produce the final prediction.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"AdaBoost with Decision Stumps from Scratch\"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize sample weights\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    \n    # List to store the weak learners\n    weak_learners = []\n    \n    # Training loop\n    for _ in range(n_estimators):\n        # Initialize variables to track the best stump\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        best_error = np.inf\n        \n        # Iterate over each feature to find the best stump\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions using the current stump\n                    predictions = np.where((X_train[:, feature_index] < threshold) == (polarity == 1), 1, -1)\n                    \n                    # Calculate the weighted error\n                    error = np.sum(weights[predictions != y_train])\n                    \n                    # Update the best stump if the current one has a lower error\n                    if error < best_error:\n                        best_error = error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # If a perfect stump is found, stop early\n        if best_error == 0:\n            break\n        \n        # Calculate the stump's weight\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        \n        # Store the best stump\n        weak_learners.append((best_feature_index, best_threshold, best_polarity, alpha))\n        \n        # Update the sample weights\n        predictions = np.where((X_train[:, best_feature_index] < best_threshold) == (best_polarity == 1), 1, -1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    \n    # Prediction function for the test set\n    def predict(X):\n        total_predictions = np.zeros(len(X))\n        for feature_index, threshold, polarity, alpha in weak_learners:\n            predictions = np.where((X[:, feature_index] < threshold) == (polarity == 1), 1, -1)\n            total_predictions += alpha * predictions\n        return np.sign(total_predictions).astype(int)\n    \n    # Get the predictions for the test set\n    test_predictions = predict(X_test)\n    \n    # Convert predictions from {-1, 1} to {0, 1}\n    test_predictions = [1 if pred == 1 else 0 for pred in test_predictions]\n    \n    return test_predictions\n\n# Example usage:\n# X_train = [[0, 1], [1, 1], [1, 0], [0, 0]]\n# y_train = [0, 1, 1, 0]\n# X_test = [[0, 0], [1, 1]]\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=3)\n# print(predictions)  # Output: [0, 1]\n```\n\n### Explanation:\n- **Initialization**: We start by initializing the sample weights to be uniform.\n- **Weak Learner Selection**: For each boosting round, we iterate over all possible stumps (defined by feature, threshold, and polarity) and select the one with the lowest weighted error.\n- **Weight Update**: After selecting the best stump, we update the sample weights based on how well the stump performed.\n- **Prediction Aggregation**: For the test set, we aggregate the predictions of all weak learners, convert them to class labels {0, 1}, and return the result.\n\nThis implementation ensures that the AdaBoost algorithm is trained using decision stumps and produces accurate predictions for the test set."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input arguments\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n\n    # Define constants\n    w = 0.5  # Inertia weight\n    c1 = 1.5  # Cognitive weight\n    c2 = 1.5  # Social weight\n    lower_bound = -1\n    upper_bound = 1\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions**2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1 = rng.uniform(0, 1)\n            r2 = rng.uniform(0, 1)\n            velocities[i] = w * velocities[i] + \\\n                           c1 * r1 * (personal_best_positions[i] - positions[i]) + \\\n                           c2 * r2 * (global_best_position - positions[i])\n\n            # Update position\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n\n            # Evaluate new position\n            new_value = np.sum(positions[i]**2)\n\n            # Update personal best\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n\n                # Update global best if necessary\n                if new_value < global_best_value:\n                    global_best_value = new_value\n                    global_best_position = positions[i]\n\n    # Return the best value rounded to four decimals\n    return round(global_best_value, 4)\n```\n\nThis implementation of Particle Swarm Optimization (PSO) minimizes the Sphere function in an n-dimensional space. It checks for valid input parameters and uses a deterministic approach with a specified random seed for reproducibility. The algorithm iteratively updates the positions and velocities of particles based on their personal best and the global best positions, ensuring that the solution remains within the defined bounds."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    return np.sqrt(sum((a - b) ** 2 for a, b in zip(point1, point2)))\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), i) for i, train_point in enumerate(X_train)]\n        \n        # Sort by distance\n        distances.sort(key=lambda x: x[0])\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = [index for _, index in distances[:k]]\n        \n        # Get the labels/targets of the k nearest neighbors\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Majority vote for classification\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n        elif task == \"regression\":\n            # Average for regression\n            prediction = round(np.mean(k_nearest_labels), 4)\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis implementation follows the rules and details provided:\n\n1. It uses the Euclidean distance to measure similarity between data points.\n2. If `k` is 0 or larger than the number of training samples, it uses all training samples.\n3. For classification, it returns the most frequent label among the k neighbors, using the smallest label in case of a tie.\n4. For regression, it returns the arithmetic mean of the neighbors' target values, rounded to 4 decimal places.\n5. The order of the test samples is preserved in the output."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision tree classifier using the CART algorithm from scratch, we need to follow these steps:\n\n1. **Calculate Gini Impurity**: This measures the probability of incorrectly classifying a randomly chosen element if it was randomly labeled according to the distribution of labels in the subset.\n2. **Recursive Splitting**: At each node, find the best split that maximizes the Gini gain.\n3. **Stopping Criteria**: Stop splitting when all labels are identical, the maximum depth is reached, or a split produces an empty child.\n4. **Prediction**: Use the trained tree to predict the class labels for the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini(y):\n    \"\"\"Calculate the Gini impurity of a set of labels.\"\"\"\n    if len(y) == 0:\n        return 0\n    counts = Counter(y)\n    total = len(y)\n    return 1 - sum((count / total) ** 2 for count in counts.values())\n\ndef gini_gain(parent, left, right):\n    \"\"\"Calculate the Gini gain after a split.\"\"\"\n    weight_left = len(left) / len(parent)\n    weight_right = len(right) / len(parent)\n    return gini(parent) - (weight_left * gini(left) + weight_right * gini(right))\n\nclass DecisionTreeNode:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef split_data(X, y, feature, threshold):\n    \"\"\"Split the dataset into left and right based on the feature and threshold.\"\"\"\n    left_indices = X[:, feature] <= threshold\n    right_indices = X[:, feature] > threshold\n    return X[left_indices], y[left_indices], X[right_indices], y[right_indices]\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(y) == 0:\n        return DecisionTreeNode(value=None)\n    \n    # Leaf node if all labels are the same\n    if len(set(y)) == 1:\n        return DecisionTreeNode(value=y[0])\n    \n    # Leaf node if max depth is reached\n    if max_depth is not None and depth >= max_depth:\n        return DecisionTreeNode(value=Counter(y).most_common(1)[0][0])\n    \n    best_feature, best_threshold, best_gain = None, None, -np.inf\n    n_features = X.shape[1]\n    \n    for feature in range(n_features):\n        unique_values = np.unique(X[:, feature])\n        for i in range(1, len(unique_values)):\n            threshold = (unique_values[i - 1] + unique_values[i]) / 2\n            X_left, y_left, X_right, y_right = split_data(X, y, feature, threshold)\n            gain = gini_gain(y, y_left, y_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    if best_gain == -np.inf:\n        return DecisionTreeNode(value=Counter(y).most_common(1)[0][0])\n    \n    X_left, y_left, X_right, y_right = split_data(X, y, best_feature, best_threshold)\n    left_node = build_tree(X_left, y_left, depth + 1, max_depth)\n    right_node = build_tree(X_right, y_right, depth + 1, max_depth)\n    \n    return DecisionTreeNode(feature=best_feature, threshold=best_threshold, left=left_node, right=right_node)\n\ndef predict_single(tree, x):\n    \"\"\"Predict the class label for a single sample.\"\"\"\n    if tree.value is not None:\n        return tree.value\n    if x[tree.feature] <= tree.threshold:\n        return predict_single(tree.left, x)\n    else:\n        return predict_single(tree.right, x)\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict_single(tree, x) for x in X_test]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[2.5, 3.5]])\n# predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=2)\n# print(predictions)  # Output: [0]\n```\n\nThis code defines a `DecisionTreeNode` class to represent each node in the tree, a `build_tree` function to recursively construct the tree, and a `predict_single` function to make predictions for individual samples. The `decision_tree_predict` function ties everything together, building the tree on the training data and predicting labels for the test data."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    \n    def gini_impurity(labels):\n        \"\"\"Compute the Gini impurity of a set of labels.\"\"\"\n        n = len(labels)\n        if n == 0:\n            return 0\n        counts = np.bincount(labels)\n        proportions = counts / n\n        return 1 - np.sum(proportions ** 2)\n\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = gini_impurity(y)  # Start with the Gini impurity of the whole dataset\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue  # Skip if either child node is empty\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_samples\n            \n            gini_left = gini_impurity(left_labels)\n            gini_right = gini_impurity(right_labels)\n            \n            gini_split = (n_left / n_total) * gini_left + (n_right / n_total) * gini_right\n            \n            if gini_split < best_gini:\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(gini_split, best_gini):\n                if feature_index < best_feature_index:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[0, 0], [1, 1], [1, 0], [0, 1]]\n# y = [0, 1, 1, 0]\n# print(best_gini_split(X, y))\n```\n\nThis function computes the best binary split for a decision tree based on minimizing the weighted Gini impurity. It iterates over each feature and each unique value within that feature to determine the optimal split, considering the constraints and tie-breaking rules provided."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate_vectors(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        return True\n\n    def euclidean_distance(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan_distance(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev_distance(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine_distance(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        cosine_similarity = np.dot(x, y) / (norm_x * norm_y)\n        return round(1 - cosine_similarity, 4)\n\n    metrics = {\n        'euclidean': euclidean_distance,\n        'manhattan': manhattan_distance,\n        'chebyshev': chebyshev_distance,\n        'cosine': cosine_distance\n    }\n\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return metrics[name](x, y)\n\n    return d\n```\n\nThis code defines a factory function `metric` that returns a callable distance function based on the specified metric name. The callable performs input validation and computes the distance accordingly. If the input is invalid or the metric name is unsupported, it returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    \n    # Initialize variables\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    \n    # Check if the action space is multi-dimensional\n    if md_action:\n        # Iterate over each sub-space\n        for sub_space in env.action_space.spaces:\n            if cont_action:\n                # If any dimension is continuous, set n_actions_per_dim to infinity\n                n_actions_per_dim.append(np.inf)\n            else:\n                # For discrete dimensions, append the number of actions\n                n_actions_per_dim.append(sub_space.n)\n        \n        # Calculate the total number of action dimensions\n        action_dim = len(env.action_space.spaces)\n        \n        # If the action space is fully discrete, generate all possible actions\n        if not cont_action:\n            action_ids = list(product(*(range(sub_space.n) for sub_space in env.action_space.spaces)))\n    \n    else:\n        # Single-dimensional action space\n        if cont_action:\n            # Continuous single-dimensional space\n            n_actions_per_dim.append(np.inf)\n        else:\n            # Discrete single-dimensional space\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n        \n        # The action dimension is 1 for single-dimensional spaces\n        action_dim = 1\n    \n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` takes an environment object `env`, and two boolean flags `md_action` and `cont_action` to determine if the action space is multi-dimensional and continuous, respectively. It then calculates and returns the number of actions per dimension, a list of all possible discrete actions, and the total number of action dimensions. The function handles both continuous and discrete action spaces, as well as single and multi-dimensional cases."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize beta with zeros\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    \n    # Accumulate the weighted counts for each word-topic pair\n    for d, doc_phi in enumerate(phi):\n        for n, word in enumerate(corpus[d]):\n            beta[word, :] += doc_phi[n, :]\n    \n    # Normalise each column of beta so that they sum to 1\n    for t in range(T):\n        if np.sum(beta[:, t]) > 0:\n            beta[:, t] /= np.sum(beta[:, t])\n    \n    # Round the entries to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to list of lists for the final output\n    return beta_rounded.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description:\n\n1. **Initialization**: We initialize the `beta` matrix with zeros, ensuring it has the correct dimensions `(V, T)` where `V` is the vocabulary size and `T` is the number of topics.\n\n2. **Accumulation**: For each document and each token within the document, we add the corresponding row from `phi` to the appropriate row in `beta`. This accumulates the weighted counts for each word-topic pair.\n\n3. **Normalization**: Each column of `beta` is normalized so that the sum of its elements equals 1. This ensures that each column represents a valid probability distribution over the vocabulary for a given topic.\n\n4. **Rounding**: All entries in `beta` are rounded to 4 decimal places to meet the output constraints.\n\n5. **Conversion**: Finally, the `beta` matrix is converted to a list of lists before being returned. This format is required by the problem statement."}
{"task_id": 202, "completion_id": 0, "completion": "Here is the implementation of the Partitioning Around Medoids (PAM) clustering algorithm:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    # Step 1: Initialize the medoids\n    medoids = X[:k]\n    \n    # Function to calculate the total cost\n    def total_cost(medoids, X):\n        assignments = np.argmin([euclidean_distance(X, m) for m in medoids], axis=0)\n        return np.sum([euclidean_distance(X[i], medoids[assignments[i]]) for i in range(len(X))])\n    \n    # Step 2: Iteratively improve the medoids\n    while True:\n        current_cost = total_cost(medoids, X)\n        best_swap = None\n        best_cost_reduction = 0\n        \n        # Try all possible swaps\n        for i in range(k):\n            for j in range(k, len(X)):\n                # Swap medoid i with non-medoid j\n                new_medoids = medoids.copy()\n                new_medoids[i] = X[j]\n                \n                new_cost = total_cost(new_medoids, X)\n                cost_reduction = current_cost - new_cost\n                \n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    best_swap = (i, j)\n        \n        if best_swap is None:\n            break\n        \n        # Perform the best swap\n        i, j = best_swap\n        medoids[i] = X[j]\n    \n    # Step 3: Assign each sample to the closest medoid\n    assignments = np.argmin([euclidean_distance(X, m) for m in medoids], axis=0)\n    \n    return assignments.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis code defines the `pam_clustering` function, which follows the steps outlined in the problem description. It initializes the medoids, iteratively attempts to improve them by swapping, and finally assigns each sample to the closest medoid. The function returns a list of cluster labels."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Check for valid input\n    if n_iterations < 1 or len(x_train[0]) != len(x_test[0]):\n        return -1\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Generate polynomial features\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    \n    # Standardize features\n    scaler = StandardScaler()\n    x_train_poly[:, 1:] = scaler.fit_transform(x_train_poly[:, 1:])\n    x_test_poly[:, 1:] = scaler.transform(x_test_poly[:, 1:])\n    \n    # Initialize weights\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        gradient = np.dot(x_train_poly.T, errors) / len(x_train)\n        \n        # Apply L1 and L2 regularization\n        l1_penalty = l1_ratio * reg_factor * np.sign(weights)\n        l2_penalty = (1 - l1_ratio) * reg_factor * weights\n        \n        # Update weights\n        gradient += l1_penalty\n        gradient[0] -= l2_penalty[0]  # Do not regularize the bias term\n        weights -= learning_rate * gradient\n    \n    # Make predictions on test data\n    predictions = np.dot(x_test_poly, weights)\n    \n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the requirements specified in the task description. It includes:\n\n1. **Polynomial Feature Generation**: Using `PolynomialFeatures` from `sklearn.preprocessing`.\n2. **Feature Standardization**: Using `StandardScaler` from `sklearn.preprocessing` to ensure zero-mean and unit-variance for non-bias features.\n3. **Batch Gradient Descent**: Iteratively updating the weights to minimize the mean-squared error with Elastic Net regularization.\n4. **Regularization**: Applying both L1 and L2 penalties, ensuring the bias term is not regularized.\n5. **Input Validation**: Checking for compatible feature counts between training and test data and ensuring a positive number of iterations.\n\nMake sure to import the necessary modules at the beginning of your script:\n\n```python\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\n```\n\nThis code should work correctly for the given task."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate the sigmoid transformation\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Calculate the gradient of the logistic loss\n    gradient = actual * sigmoid - actual\n    \n    # Calculate the Hessian of the logistic loss\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round all results to 6 decimal places\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_rounded = np.round(sigmoid, 6)\n    \n    # Convert the results back to lists\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_rounded.tolist()\n    \n    return gradient_list, hessian_list, probability_list\n```\n\nThis function computes the gradient, Hessian, and probability for each observation using the logistic loss function. It handles inputs in the form of lists, tuples, or NumPy arrays, performs vectorized computations for efficiency, and ensures all outputs are rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "To solve the problem of evaluating the outcome of a finished round of Blackjack, we need to implement the `blackjack_outcome` function. This function will take two lists of integers representing the player's and dealer's final hands, respectively, and return the player's reward based on the rules provided.\n\nHere's a step-by-step breakdown of how to implement this:\n\n1. **Calculate the Hand Value**: We need a helper function to calculate the value of a hand. This function should handle the special case where an Ace can be counted as 11 if it doesn't cause the hand to bust.\n\n2. **Check for Natural Blackjack**: A natural blackjack is defined as a two-card hand consisting of one Ace and one 10-value card. We need to check for this condition and assign the appropriate reward if the player has a natural blackjack.\n\n3. **Determine Busts**: Check if either the player or the dealer has bust (i.e., their hand value exceeds 21).\n\n4. **Compare Scores**: If neither player nor dealer busts, compare their scores and determine the winner.\n\n5. **Return the Reward**: Based on the above conditions, return the appropriate reward.\n\nHere's the complete implementation:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand.\"\"\"\n        total = sum(hand)\n        aces = hand.count(1)\n        \n        # Try to use aces as 11 if possible\n        for _ in range(aces):\n            if total + 10 <= 21:\n                total += 10\n                break\n        \n        return total\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and sorted(hand) == [1, 10]\n    \n    # Calculate hand values\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    # Check for player's natural blackjack\n    if is_natural_blackjack(player):\n        if dealer_value != 21:  # Dealer does not have a natural blackjack\n            return 1.5\n        else:\n            return 0  # Draw with both having natural blackjack\n    \n    # Check for busts\n    if player_value > 21:\n        return -1  # Player busts\n    if dealer_value > 21:\n        return 1  # Dealer busts\n    \n    # Compare scores\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0\n\n# Example usage:\n# print(blackjack_outcome([1, 10], [10, 7]))  # Should return 1.5 (natural blackjack)\n# print(blackjack_outcome([10, 7], [10, 7]))  # Should return 0 (draw)\n# print(blackjack_outcome([11, 11], [10, 7]))  # Should return -1 (player busts)\n# print(blackjack_outcome([10, 7], [11, 11]))  # Should return 1 (dealer busts)\n# print(blackjack_outcome([10, 7], [10, 8]))  # Should return -1 (player loses)\n# print(blackjack_outcome([10, 7], [9, 8]))  # Should return 1 (player wins)\n```\n\nThis implementation follows the rules provided and handles all edge cases, including natural blackjacks, busts, and score comparisons."}
{"task_id": 221, "completion_id": 0, "completion": "Here's the implementation of the Mean Squared Logarithmic Error (MSLE) metric in Python:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function to calculate element-wise squared log errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if all values are non-negative\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return None\n    \n    # Calculate squared log error\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    squared_errors = (log_actual - log_predicted) ** 2\n    \n    return squared_errors\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the inputs have the same shape\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    \n    # If squared_errors is None, it means there were negative values\n    if squared_errors is None:\n        return -1\n    \n    # Calculate mean squared log error\n    msle = np.mean(squared_errors)\n    \n    # Round to 4 decimal places\n    return round(msle, 4)\n```\n\n### Explanation:\n\n1. **Helper Function `squared_log_error(actual, predicted)`**:\n   - Converts the input sequences to NumPy arrays.\n   - Checks if all values in both sequences are non-negative. If any value is negative, it returns `None`.\n   - Computes the element-wise squared logarithmic errors using the formula: \\((\\log(1 + \\text{actual}) - \\log(1 + \\text{predicted}))^2\\).\n\n2. **Main Function `mean_squared_log_error(actual, predicted)`**:\n   - Converts the input sequences to NumPy arrays.\n   - Validates that the input sequences have the same shape. If not, it returns `-1`.\n   - Calls the helper function to compute the squared log errors.\n   - If the helper function returns `None`, it indicates invalid input (negative values), so it returns `-1`.\n   - Computes the mean of the squared log errors.\n   - Rounds the result to 4 decimal places and returns it as a Python float.\n\nThis implementation ensures that the inputs are validated correctly and that the MSLE is computed accurately."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function in a numerically stable manner, we need to handle both large positive and negative values of `z` separately. This is because the exponential function can grow very large or very small, leading to numerical instability. Here's how you can implement this:\n\n1. For `z >= 0`, use the formula:\n   \\[\n   \\text{sigmoid}(z) = \\frac{1}{1 + e^{-z}}\n   \\]\n\n2. For `z < 0`, use the alternative formula to avoid computing \\(e^z\\) directly:\n   \\[\n   \\text{sigmoid}(z) = \\frac{e^z}{1 + e^z}\n   \\]\n\nThis approach ensures that we do not encounter overflow issues when dealing with extreme values of `z`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(result, 4)\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Apply the sigmoid function element-wise\n    mask = z_array >= 0\n    result_array = np.empty_like(z_array, dtype=float)\n    result_array[mask] = 1 / (1 + np.exp(-z_array[mask]))\n    result_array[~mask] = np.exp(z_array[~mask]) / (1 + np.exp(z_array[~mask]))\n    \n    # Round the results to 4 decimal places\n    result_array = np.round(result_array, 4)\n    \n    # Convert the result back to a Python list with the same nested structure\n    return result_array.tolist()\n\n# Example usage:\nprint(sigmoid(0))          # Output: 0.5\nprint(sigmoid([0, 1, -1])) # Output: [0.5, 0.7311, 0.2689]\nprint(sigmoid(np.array([[0, 1], [-1, 2]]))) # Output: [[0.5, 0.7311], [0.2689, 0.8808]]\n```\n\n### Explanation:\n- **Scalar Input**: If `z` is a scalar, we directly apply the appropriate formula based on whether `z` is non-negative or negative.\n- **Array-like Input**: We convert the input to a NumPy array to leverage vectorized operations. We use a boolean mask to apply the correct formula to each element based on its sign.\n- **Rounding**: After computing the sigmoid values, we round them to 4 decimal places.\n- **Conversion to List**: Finally, we convert the NumPy array back to a Python list to match the required output format."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    \n    def apply_leaky_relu(value):\n        if value >= 0:\n            return value\n        else:\n            return a * value\n    \n    if isinstance(z, (int, float)):\n        return apply_leaky_relu(z)\n    elif isinstance(z, list):\n        return [leaky_relu(item, a) for item in z]\n    elif isinstance(z, np.ndarray):\n        return leaky_relu(z.tolist(), a)\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n# Example usage:\n# print(leaky_relu([[-1, 2], [3, -4]], 0.01))\n# Output: [[-0.01, 2], [3, -0.04]]\n```\n\nThis implementation handles scalars, lists (including nested lists), and `numpy.ndarray` inputs. It applies the Leaky ReLU activation function to each element and returns the result as a Python list with the same structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize Sample Weights**: Start with equal weights for all training samples.\n2. **Train Weak Learners**: For each boosting round, train a decision stump that minimizes the weighted classification error.\n3. **Compute Learner Weight**: Calculate the weight (`alpha`) for the stump based on its error rate.\n4. **Update Sample Weights**: Adjust the sample weights such that misclassified samples get higher weights.\n5. **Make Predictions**: At prediction time, combine the predictions of all stumps using their respective weights and return the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    \n    for _ in range(n_clf):\n        # Initialize variables to track the best stump\n        best_stump = None\n        min_error = float('inf')\n        \n        # Iterate over each feature to find the best split\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                # Try both polarities\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    \n                    # Calculate the weighted error\n                    error = np.sum(sample_weights[y_train != predictions])\n                    \n                    # Check if this is the best stump\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        \n        # Compute the stump weight (alpha)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        \n        # Store the best stump and its weight\n        classifiers.append((best_stump, alpha))\n        \n        # Update sample weights\n        predictions = np.ones(n_samples)\n        feature_index, threshold, polarity = best_stump\n        if polarity == 1:\n            predictions[X_train[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_train[:, feature_index] >= threshold] = -1\n        \n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    \n    # Make predictions on the test set\n    test_predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in classifiers:\n        feature_index, threshold, polarity = stump\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        \n        test_predictions += alpha * predictions\n    \n    # Return the sign of the weighted sum of stump decisions\n    return [1 if pred > 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 0], [2, 3], [3, 2]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [2, 1]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function which trains an AdaBoost ensemble using decision stumps and predicts the labels for the test data. The function returns a list of integers, each being either `-1` or `1`, representing the predicted class labels for the test samples."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Step 2: Create a 2-D matrix A \u2208 \u211d^{d0\u00d7(d1\u22efdn)} filled with i.i.d. samples from the standard normal distribution.\n    d0 = shape[0]\n    d1_to_dn = int(np.prod(shape[1:]))\n    A = np.random.randn(d0, d1_to_dn)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = Q.reshape(shape) * scale\n    \n    # Convert the result to a list before returning\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\n### Explanation:\n1. **Check Shape Validity**: The function first checks if the input shape has at least two dimensions. If not, it returns `-1`.\n2. **Matrix Creation**: It creates a 2-D matrix `A` with dimensions `d0` (the first dimension of the input shape) and `d1_to_dn` (the product of all other dimensions).\n3. **SVD Decomposition**: It computes the Singular Value Decomposition (SVD) of `A`, resulting in matrices `U`, `\u03a3`, and `Vt`.\n4. **Select Orthogonal Matrix**: It selects the matrix `Q` which is either `U` or `Vt`, depending on which one matches the shape of `A`.\n5. **Reshape and Scale**: It reshapes `Q` back to the original shape and multiplies it by the `scale` factor.\n6. **Return as List**: Finally, it converts the resulting NumPy array to a Python list and returns it.\n\nThis implementation ensures that the resulting tensor satisfies the orthogonality condition as described in the task."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array\n    s = np.array(state)\n    \n    # Define the weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    W2 = np.ones((4, 4))\n    W3 = np.ones((4, 4))\n    Wa = np.ones((4, 3))\n    Wc = np.ones((4, 1))\n    \n    b1 = np.zeros(4)\n    b2 = np.zeros(4)\n    b3 = np.zeros(4)\n    ba = np.zeros(3)\n    bc = np.zeros(1)\n    \n    # Compute the activations through the network\n    z1 = np.maximum(0, s @ W1 + b1)  # ReLU activation\n    z2 = np.maximum(0, z1 @ W2 + b2)  # ReLU activation\n    z3 = np.maximum(0, z2 @ W3 + b3)  # ReLU activation\n    \n    logits = z3 @ Wa + ba\n    action_probs = np.exp(logits - np.max(logits)) / np.sum(np.exp(logits - np.max(logits)))  # Softmax activation\n    \n    state_value = (z3 @ Wc + bc)[0]\n    \n    # Round the results to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    \n    return action_probs, state_value\n```\n\nThis function performs the forward pass through the specified Actor-Critic network using basic NumPy operations. It calculates the action probabilities and the state value based on the given state input, ensuring the results are rounded to four decimal places as required."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))  # Subtract max for numerical stability\n    return e_x / e_x.sum(axis=0)\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state)\n    \n    # Unpack parameters\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Shared layers\n    h1 = relu(np.dot(W1, state) + b1)\n    h2 = relu(np.dot(W2, h1) + b2)\n    h3 = relu(np.dot(W3, h2) + b3)\n    \n    # Actor head\n    actor_scores = np.dot(Wa, h3) + ba\n    probabilities = softmax(actor_scores)\n    \n    # Critic head\n    value = np.dot(Wc, h3) + bc\n    \n    # Round probabilities and value to 4 decimal places\n    probabilities = [round(p, 4) if p != 0.0 and p != 1.0 else round(p, 1) for p in probabilities]\n    value = round(value[0], 4) if value[0] != 0.0 and value[0] != 1.0 else round(value[0], 1)\n    \n    return probabilities, value\n```\n\nThis implementation defines the forward pass for an Actor-Critic network using NumPy. It includes the necessary activation functions (ReLU and softmax), processes the input state through the shared layers, and computes the action probabilities and state value using the actor and critic heads, respectively. The results are rounded according to the specified constraints."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    \n    if not gradient:\n        # Compute the Elastic-Net penalty\n        l1_penalty = l1_ratio * np.sum(np.abs(w))\n        l2_penalty = 0.5 * (1 - l1_ratio) * np.dot(w, w)\n        penalty_value = alpha * (l1_penalty + l2_penalty)\n        return round(penalty_value, 4)\n    else:\n        # Compute the gradient of the Elastic-Net penalty\n        l1_gradient = alpha * l1_ratio * np.sign(w)\n        l2_gradient = alpha * (1 - l1_ratio) * w\n        gradient_value = l1_gradient + l2_gradient\n        return [round(g, 4) for g in gradient_value]\n\n# Example usage:\n# penalty = elastic_net_regularization([1, 2, 3], alpha=0.1, l1_ratio=0.5)\n# gradient = elastic_net_regularization([1, 2, 3], alpha=0.1, l1_ratio=0.5, gradient=True)\n# print(\"Penalty:\", penalty)\n# print(\"Gradient:\", gradient)\n```\n\nThis function calculates either the Elastic-Net penalty or its gradient based on the input parameters. The penalty is computed using the L1 and L2 components, while the gradient is derived from the partial derivatives of the penalty with respect to each weight in the vector. Both results are rounded to four decimal places as specified."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    \n    # Special case handling\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Handle special parameter names\n    if param_name == \"Ba\":\n        param_name = \"ba\"\n    elif param_name == \"Bx\":\n        param_name = \"bx\"\n    \n    # Get the parameter\n    param = model.parameters[param_name]\n    \n    # Initialize the numerical gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over every element of the parameter\n    for i in np.ndindex(param.shape):\n        # Perturb the parameter by +epsilon\n        model.parameters[param_name][i] += epsilon\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n        \n        # Reset the parameter\n        model.parameters[param_name][i] -= epsilon\n        \n        # Perturb the parameter by -epsilon\n        model.parameters[param_name][i] -= epsilon\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n        \n        # Reset the parameter\n        model.parameters[param_name][i] += epsilon\n        \n        # Compute the numerical gradient\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    \n    # Return the transposed gradient\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm from scratch using decision stumps, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for each training example.\n2. **Iteratively Train Weak Learners**: For each iteration, train a decision stump that minimizes the weighted error. Update the weights based on the stump's performance.\n3. **Compute Stump Weight**: Calculate the weight of the stump based on its error rate.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions from all stumps and assign the final label based on the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    m, n = X_train.shape\n    D = np.full(m, 1 / m)  # Initialize weights uniformly\n    alpha = np.zeros(n_clf)\n    h = [None] * n_clf\n    \n    for t in range(n_clf):\n        # Train a decision stump\n        best_error = np.inf\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n                \n                # Calculate weighted error\n                misclassified = predictions != y_train\n                error = np.sum(D[misclassified])\n                \n                # Consider the inverted polarity\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                \n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = 1 if predictions == y_train else -1\n        \n        # Compute the stump weight\n        epsilon = best_error\n        alpha[t] = 0.5 * np.log((1 - epsilon) / epsilon)\n        \n        # Update the weights\n        D *= np.exp(-alpha[t] * y_train * ((X_train[:, best_feature] < best_threshold) * 2 - 1))\n        D /= np.sum(D)\n        \n        # Store the stump\n        h[t] = (best_feature, best_threshold, best_polarity)\n    \n    # Predict on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for t in range(n_clf):\n        feature, threshold, polarity = h[t]\n        predictions += alpha[t] * polarity * ((X_test[:, feature] < threshold) * 2 - 1)\n    \n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 0], [2, 1], [1, 2]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[0.5, 0.5], [1.5, 1.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function, which trains AdaBoost using decision stumps and predicts labels for the test set. The function handles the initialization of weights, training of each weak learner, updating of weights, and aggregation of predictions to produce the final output."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    # Calculate fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    \n    # Calculate the standard deviation\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    \n    # Generate the weights using normal distribution\n    weights = np.random.normal(loc=0.0, scale=std_dev, size=shape)\n    \n    return weights\n```\n\nThis implementation follows the steps outlined in the task description:\n\n1. It checks if the shape has at least two dimensions.\n2. It calculates `fan_in` and `fan_out` based on the shape.\n3. It computes the standard deviation `s` using the formula \\( s = \\sqrt{\\frac{2}{\\text{fan\\_in} + \\text{fan\\_out}}} \\).\n4. It generates a NumPy array with the specified shape, where the elements are drawn from a normal distribution with mean 0 and the calculated standard deviation.\n\nThis function ensures that the global NumPy random state is not modified beyond what is necessary for sampling."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of converting an undirected, un-weighted graph into an adjacency list, we need to follow these steps:\n\n1. **Initialize the Adjacency List**: Create a list of lists where each sublist corresponds to a vertex in `V` and will store its neighbors.\n\n2. **Iterate Over Edges**: For each edge `(u, v)` in `E`, add `v` to the adjacency list of `u` and `u` to the adjacency list of `v`. This step ensures that the graph is treated as undirected.\n\n3. **Remove Duplicates and Sort**: Ensure that each adjacency list contains unique neighbors and that they are sorted according to their order of appearance in `V`.\n\n4. **Return the Result**: Return the constructed adjacency list.\n\nHere's the implementation of the function:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Step 1: Initialize the adjacency list\n    adj_list = [[] for _ in V]\n    \n    # Step 2: Create a dictionary to map vertices to their indices in V\n    vertex_to_index = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Step 3: Iterate over each edge and update the adjacency list\n    for u, v in E:\n        if u in vertex_to_index and v in vertex_to_index:\n            u_index = vertex_to_index[u]\n            v_index = vertex_to_index[v]\n            \n            # Add v to u's adjacency list if not already present\n            if v not in adj_list[u_index]:\n                adj_list[u_index].append(v)\n            \n            # Add u to v's adjacency list if not already present\n            if u not in adj_list[v_index]:\n                adj_list[v_index].append(u)\n    \n    # Step 4: Sort each adjacency list according to the order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: vertex_to_index[x])\n    \n    return adj_list\n```\n\n### Explanation:\n\n- **Initialization**: We start by creating an empty adjacency list with the same number of sublists as there are vertices in `V`.\n\n- **Vertex Index Mapping**: We create a dictionary to map each vertex to its index in `V`. This helps us quickly find the correct sublist in the adjacency list for any given vertex.\n\n- **Processing Edges**: For each edge `(u, v)`, we check if both vertices are in `V` (to handle cases where edges might reference vertices not in `V`). If they are, we add `v` to `u`'s adjacency list and `u` to `v`'s adjacency list, ensuring no duplicates by checking before adding.\n\n- **Sorting**: Finally, we sort each adjacency list to ensure that neighbors are ordered by their appearance in `V`.\n\nThis approach ensures that the adjacency list is correctly built, free of duplicates, and sorted as required."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n    best_weighted_error = float('inf')\n\n    for feature_index in range(n_features):\n        # Get unique values for the current feature\n        feature_values = np.unique(X[:, feature_index])\n        \n        for threshold in feature_values:\n            for polarity in [1, -1]:\n                # Calculate predictions based on the current threshold and polarity\n                if polarity == 1:\n                    predictions = np.where(X[:, feature_index] < threshold, 1, -1)\n                else:\n                    predictions = np.where(X[:, feature_index] < threshold, -1, 1)\n                \n                # Calculate the weighted error for the current stump\n                weighted_error = np.sum(sample_weights[y != predictions])\n                \n                # Update the best stump if the current one has a lower error\n                if weighted_error < best_weighted_error:\n                    best_weighted_error = weighted_error\n                    best_feature_index = feature_index\n                    best_threshold = round(threshold, 4)\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": best_threshold,\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_weighted_error, 4)\n    }\n```\n\nThis function iterates over all features and all unique values of each feature to find the optimal decision stump. It calculates the weighted error for each possible stump configuration and keeps track of the configuration with the lowest error. The results are returned in a dictionary with the specified keys."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    \n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        if not labels:\n            return 0.0\n        label_counts = Counter(labels)\n        n = len(labels)\n        return -sum((count / n) * math.log2(count / n) for count in label_counts.values())\n    \n    # Combine feature and target into a list of tuples and sort by feature value\n    combined = sorted(zip(feature, target))\n    \n    # If all feature values are identical, return (None, 0.0)\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    \n    # Calculate initial entropy of the parent set\n    parent_entropy = entropy(target)\n    \n    max_gain = 0.0\n    best_threshold = None\n    \n    # Iterate over unique feature values to find the best split\n    for i in range(len(combined) - 1):\n        if combined[i][0] != combined[i + 1][0]:  # Only consider distinct feature values\n            threshold = (combined[i][0] + combined[i + 1][0]) / 2.0\n            \n            # Split the target labels into left and right subsets\n            left_labels = [label for _, label in combined[:i + 1]]\n            right_labels = [label for _, label in combined[i + 1:]]\n            \n            # Calculate the weighted average entropy of the left and right subsets\n            left_weight = len(left_labels) / len(target)\n            right_weight = len(right_labels) / len(target)\n            weighted_entropy = (left_weight * entropy(left_labels)) + (right_weight * entropy(right_labels))\n            \n            # Calculate information gain\n            gain = parent_entropy - weighted_entropy\n            \n            # Update best threshold if this gain is higher than the current max_gain\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (round(best_threshold, 4) if best_threshold is not None else None, round(max_gain, 4))\n\n# Example usage:\n# feature = [1.0, 1.5, 3.0, 5.0]\n# target = [0, 0, 1, 1]\n# print(best_split(feature, target))  # Output: (2.25, 0.5)\n```\n\nThis function `best_split` calculates the optimal threshold for splitting a dataset based on information gain. It first defines a helper function `entropy` to compute the Shannon entropy of a set of class labels. The main function then sorts the combined feature and target data, checks for identical feature values, and iterates through distinct feature values to find the split that maximizes information gain. The results are rounded to four decimal places before being returned."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\n### Explanation:\n1. **Initializer Functions**:\n   - `zeros_init(shape)`: Creates a matrix filled with zeros.\n   - `ones_init(shape)`: Creates a matrix filled with ones.\n   - `random_uniform_init(shape, low=0.0, high=1.0, seed=42)`: Creates a matrix with elements drawn uniformly from the specified interval `[low, high]`. The seed ensures reproducibility.\n\n2. **get_initializer Function**:\n   - This function takes a string `name` as input.\n   - It looks up the object with the given name in the global namespace using `globals().get(name)`.\n   - It checks if the retrieved object is callable using `callable(initializer)`.\n   - If the object is callable, it returns the object.\n   - If the object is not callable or does not exist, it raises a `ValueError` with the message \"Invalid initialization function.\"\n\nThis setup allows users to specify an initializer by its name and get the corresponding function, which can then be used to initialize weights in a neural network or other numerical computations."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the forward and backward passes of a 2-D average-pooling layer, we need to follow these steps:\n\n1. **Forward Pass**:\n   - Slide the pooling window over the input feature map.\n   - Compute the average of the elements within each window.\n   - Store the results in the pooled output array.\n\n2. **Backward Pass**:\n   - Distribute the gradient from the pooled output back to the input.\n   - Each element in the input that contributed to a pooled value receives an equal share of the gradient.\n\nHere's the implementation of the `average_pool2d` function:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the output dimensions\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    \n    # Initialize the pooled output and gradient input\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    h_end = h_start + p_h\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    h_end = h_start + p_h\n                    w_end = w_start + p_w\n                    window_size = p_h * p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / window_size\n    \n    # Round and convert to lists\n    pooled_output_rounded = np.round(pooled_output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    \n    return pooled_output_rounded, grad_input_rounded\n```\n\n### Explanation:\n\n- **Forward Pass**:\n  - We iterate over each sample (`n`) and each channel (`c`).\n  - For each position in the output feature map (`i`, `j`), we define the window in the input feature map.\n  - We compute the mean of the window and store it in the `pooled_output`.\n\n- **Backward Pass**:\n  - We iterate over each sample (`n`) and each channel (`c`).\n  - For each position in the output feature map (`i`, `j`), we distribute the gradient equally among the elements in the corresponding window in the input feature map.\n\n- **Rounding and Conversion**:\n  - Both the `pooled_output` and `grad_input` are rounded to the nearest 4th decimal and converted to lists before returning.\n\nThis implementation ensures that the forward and backward passes are correctly computed and formatted as required."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Check if both trees are leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Compare leaf values using numpy.allclose for numerical types\n        if isinstance(tree_a.value, (int, float, np.ndarray, list)):\n            return np.allclose(tree_a.value, tree_b.value)\n        else:\n            return tree_a.value == tree_b.value\n    \n    # Check if one is a leaf and the other is a node\n    if isinstance(tree_a, Leaf) != isinstance(tree_b, Leaf):\n        return False\n    \n    # Both are nodes, check their structure and recursively compare children\n    if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n        return False\n    \n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n```\n\nThis implementation defines the `compare_trees` function, which recursively checks if two decision trees are equivalent by comparing their structures and node values. The function uses `np.allclose` to handle numerical comparisons with a specified tolerance."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for efficient slicing\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n\n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n\n    # Get the number of rows and columns\n    num_rows, num_cols = np_parent1.shape\n\n    # Ensure the cutoff is within valid range\n    if not (0 <= cutoff <= num_cols):\n        raise ValueError(\"Cutoff must be between 0 and the number of columns (inclusive).\")\n\n    # Create the children matrices using slicing\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n\n    # Convert the NumPy arrays back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n\n    # Return the children as a tuple of lists\n    return (child1_list, child2_list)\n```\n\nThis function performs the single-point column crossover for two neural network weight matrices. It first checks if the input matrices have the same shape. If they do, it slices the matrices according to the specified cutoff and combines them to form two new children matrices. Finally, it converts these matrices back to lists and returns them."}
{"task_id": 294, "completion_id": 0, "completion": "To solve this problem, we need to convert a custom graph representation into a plain adjacency dictionary. The custom graph is represented by a dictionary `G` with specific fields, and our goal is to transform it into a format that is easy to serialize and inspect.\n\nHere's a step-by-step breakdown of how we can achieve this:\n\n1. **Initialize the Adjacency Dictionary**: We'll start by creating an empty dictionary `adj` where each key will be a vertex label, and the value will be a list of tuples representing the edges connected to that vertex.\n\n2. **Iterate Over the Graph**: We'll iterate over the `_G` list, which contains the adjacency information. Each element in `_G` corresponds to a vertex and its outgoing edges.\n\n3. **Handle Directed vs Undirected Graphs**:\n   - For directed graphs, we'll directly add the edges to the adjacency dictionary.\n   - For undirected graphs, we'll ensure that each edge appears in both directions.\n\n4. **Sort the Neighbors**: After processing all edges, we'll sort the neighbors for each vertex alphabetically to ensure determinism.\n\n5. **Include Vertices with No Edges**: We'll ensure that all vertices, even those with no edges, are included in the adjacency dictionary with an empty list.\n\nHere's the complete implementation of the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for edges in G['_G']:\n        for source_label, target_label, weight in edges:\n            if G['is_directed']:\n                adj[source_label].append((target_label, weight))\n            else:\n                adj[source_label].append((target_label, weight))\n                adj[target_label].append((source_label, weight))\n    \n    for neighbors in adj.values():\n        neighbors.sort()\n    \n    return adj\n```\n\n### Explanation:\n\n- **Initialization**: We initialize `adj` with all vertex labels from `G['_V2I']`, ensuring that vertices with no edges are included with an empty list.\n  \n- **Processing Edges**: We iterate over each list of edges in `G['_G']`. For each edge `(source_label, target_label, weight)`, we add it to the adjacency list of `source_label`. If the graph is undirected, we also add the reverse edge `(target_label, source_label)`.\n\n- **Sorting**: After processing all edges, we sort the list of neighbors for each vertex to ensure the output is deterministic.\n\nThis function should correctly convert the custom graph representation into the desired adjacency dictionary format, handling both directed and undirected graphs as specified."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# arr = np.array([0, 1, 0, 1])\n# print(is_binary(arr))  # Should return True\n\n# arr = np.array([0, 2, 0, 1])\n# print(is_binary(arr))  # Should return False\n```\n\nThis function first converts the input to a NumPy array if it isn't already one. Then, it uses a boolean mask to check if every element in the array is either `0` or `1`. The `np.all()` function returns `True` only if all elements in the mask are `True`, indicating that all elements in the array are binary."}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Split sentences into tokens\n    tokens_corpus = [sentence.split() for sentence in corpus]\n    \n    # Pad tokens with <bol> and <eol> for N > 1\n    if N > 1:\n        tokens_corpus = [['<bol>'] * (N - 1) + tokens + ['<eol>'] for tokens in tokens_corpus]\n    \n    # Count N-grams and (N-1)-gram prefixes\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    for tokens in tokens_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n    \n    # Split query into tokens and pad if necessary\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    \n    # Calculate the total log-probability\n    total_log_prob = 0.0\n    \n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        \n        if prefix_counts[prefix] == 0:\n            return float('-inf')\n        \n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        if prob == 0:\n            return float('-inf')\n        \n        total_log_prob += math.log(prob)\n    \n    return round(total_log_prob, 4)\n```\n\nThis implementation follows the steps outlined in the task description. It processes the corpus to count N-grams and their prefixes, then calculates the log-probability for the query based on these counts. If any N-gram or prefix is unseen, it returns negative infinity."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    \n    # Step 1: Build the weighted adjacency matrix W\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the diagonal degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Step 3: Compute the unnormalized graph Laplacian L\n    L = D - W\n    \n    # Step 4: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 5: Run k-means on the rows of E\n    def kmeans(E, k, max_iter=100):\n        # Initialize centroids with the first k rows of E\n        centroids = E[:k].copy()\n        labels = np.zeros(n, dtype=int)\n        \n        for _ in range(max_iter):\n            # Assign each point to the nearest centroid\n            for i in range(n):\n                distances = np.linalg.norm(E[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            \n            # Update centroids\n            new_centroids = np.array([E[labels == j].mean(axis=0) for j in range(k)])\n            \n            # Check for convergence\n            if np.all(centroids == new_centroids):\n                break\n            \n            centroids = new_centroids\n        \n        # Handle empty clusters by reinitializing centroids\n        for j in range(k):\n            if np.sum(labels == j) == 0:\n                centroids[j] = E[np.random.randint(n)]\n        \n        return labels.tolist()\n    \n    return kmeans(E, k)\n\n# Example usage:\n# X = np.random.rand(100, 2)  # Example data\n# k = 3  # Desired number of clusters\n# labels = spectral_clustering(X, k)\n# print(labels)\n```\n\nThis implementation follows the steps outlined in the task description to perform spectral clustering from scratch using only NumPy for numerical operations. The `spectral_clustering` function takes a 2-D NumPy array `X` and an integer `k` as inputs and returns a list of cluster labels. The k-means step includes handling of empty clusters by reinitializing their centroids."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Ensure ix is within bounds\n    ix = max(0, min(ix, len(params) - 1))\n    \n    # Get previous and current elements\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    # Format the debug string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\nThis function formats a detailed debugging string comparing the current and previous outputs of a program to their expected (gold-standard) outputs. It ensures that the output matches the specified format exactly, including the number of dashes, line breaks, and the placement of the optional warning string."}
{"task_id": 304, "completion_id": 0, "completion": "To implement the function `bayesian_posterior_mean`, we need to follow these steps:\n\n1. **Handle the Intercept**: If `fit_intercept` is `True`, prepend a column of ones to the design matrix `X`.\n2. **Process the Prior Parameters**:\n   - Convert `mu` to a vector if it's a scalar.\n   - Convert `V` to a diagonal matrix if it's a scalar or a list/tuple.\n3. **Compute the Posterior Mean**:\n   - Calculate the posterior covariance matrix `Sigma_b`.\n   - Calculate the posterior mean `mu_b`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if required\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Process mu and V\n    N, M = X.shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    # Compute the posterior mean\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Round the result to 4 decimal places\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([1, 2])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\n### Explanation:\n- **Intercept Handling**: If `fit_intercept` is `True`, we prepend a column of ones to `X` to account for the intercept term.\n- **Parameter Processing**:\n  - `mu` is converted to a vector if it's a scalar.\n  - `V` is converted to a diagonal matrix if it's a scalar or a list/tuple. If `V` is `None`, it defaults to the identity matrix.\n- **Posterior Mean Calculation**:\n  - `V_inv` is the inverse of the prior covariance matrix `V`.\n  - `Sigma_b` is the posterior covariance matrix up to the noise variance `\u03c3\u00b2`.\n  - `mu_b` is the posterior mean of the coefficients.\n- **Rounding**: The final result is rounded to 4 decimal places before returning."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n\n    # Step 1: Convert Hz limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Step 2: Generate n_filters+2 equally-spaced Mel values\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Step 3: Convert Mel values back to Hz\n    freqs = mel_to_hz(mels)\n\n    # Step 4: Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Step 5: Compute the weights for each filter\n    for i in range(n_filters):\n        left_mel = mels[i]\n        center_mel = mels[i + 1]\n        right_mel = mels[i + 2]\n\n        left_freq = mel_to_hz(left_mel)\n        center_freq = mel_to_hz(center_mel)\n        right_freq = mel_to_hz(right_mel)\n\n        for k in range(N // 2 + 1):\n            freq = k * fs / N\n\n            if freq < left_freq:\n                weight = 0\n            elif left_freq <= freq < center_freq:\n                weight = (freq - left_freq) / (center_freq - left_freq)\n            elif center_freq <= freq < right_freq:\n                weight = (right_freq - freq) / (right_freq - center_freq)\n            else:\n                weight = 0\n\n            filterbank[i, k] = weight\n\n    # Step 6: Normalize the filters if required\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (freqs[i + 2] - freqs[i])\n\n    # Convert to list and round to 4 decimal places\n    filterbank_list = [[round(weight, 4) for weight in row] for row in filterbank]\n\n    return filterbank_list\n```\n\nThis code constructs a Mel filterbank transformation matrix according to the specified requirements. It includes conversion between Hz and Mel scales, generation of triangular filters, and optional normalization of the filters. The final output is a list of lists, with each element rounded to four decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n\n    N = window_len - 1 if symmetric else window_len\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n\n    window = [\n        a0 - a1 * np.cos(2 * np.pi * n / N) +\n        a2 * np.cos(4 * np.pi * n / N) -\n        a3 * np.cos(6 * np.pi * n / N)\n        for n in range(window_len)\n    ]\n\n    return [round(w, 4) for w in window]\n```\n\nThis implementation generates a Blackman\u2013Harris window based on the given parameters. It handles special cases where the window length is less than or equal to zero or exactly one. The function also supports both symmetric and periodic forms of the window, depending on the `symmetric` parameter."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a moderate value using recursion\n    while x < 6:\n        x += 1\n        # Accumulate the sum of the series 1 / (k - 1) for k from x to 6\n        sum_series = sum(1 / (k - 1) for k in range(int(x), 6))\n    \n    # Apply the asymptotic expansion for large x\n    return math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6) - sum_series\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Calculate the digamma values\n    psi_gamma_dt = digamma(gamma[d][t])\n    psi_sum_gamma_d = digamma(sum(gamma[d]))\n    \n    # Compute the expected log value\n    expected_log = psi_gamma_dt - psi_sum_gamma_d\n    \n    # Round the result to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage:\n# gamma = [[2, 3, 5], [1, 1, 1]]\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Output should be rounded to 4 decimals\n```\n\nThis code defines a `digamma` function to approximate the digamma function using a combination of recursion and an asymptotic expansion. The `expected_log_dirichlet` function then uses this `digamma` function to compute the expected log of a Dirichlet-distributed component, rounding the result to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "Here's the implementation of the `err_fmt` function according to the provided specifications:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Calculate the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract the relevant tuples\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold texts\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    # Construct the debug report\n    report = (\n        f\"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        f\"----------------------- END DEBUG -----------------------\\n\"\n    )\n    \n    return report\n```\n\nThis function constructs the debug report by extracting the necessary information from the `params` list and the `golds` dictionary, and then formats it according to the specified layout. The function handles the case where `ix` is 0 by using `max(ix - 1, 0)` to ensure the previous index is always valid."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        # Find the best decision stump\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == -1:\n                        predictions[X_train[:, feature] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] > threshold] = -1\n                    \n                    errors = weights[y_train != predictions]\n                    error = np.sum(errors)\n                    \n                    if error > 0.5:\n                        error = 1 - error\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # Calculate alpha\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        \n        # Update weights\n        predictions = np.ones(n_samples)\n        if best_polarity == -1:\n            predictions[X_train[:, best_feature] <= best_threshold] = -1\n        else:\n            predictions[X_train[:, best_feature] > best_threshold] = -1\n        \n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        \n        # Store the classifier and its weight\n        classifiers.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(X_test))\n    for alpha, (feature, threshold, polarity) in zip(alphas, classifiers):\n        predictions = np.ones(len(X_test))\n        if polarity == -1:\n            predictions[X_test[:, feature] <= threshold] = -1\n        else:\n            predictions[X_test[:, feature] > threshold] = -1\n        test_predictions += alpha * predictions\n    \n    return [1 if pred >= 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n# print(predictions)\n```\n\nThis implementation of AdaBoost uses decision stumps as weak learners and trains them iteratively to form a strong classifier. The function `adaboost_predict` takes training data, tests data, and the number of estimators (weak learners) as input, and returns the predicted labels for the test data."}
{"task_id": 329, "completion_id": 0, "completion": "Here's the implementation of the `dft_bins` function based on the provided description:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    if positive_only:\n        bins = np.arange(N // 2 + 1) * delta_f\n    else:\n        bins = np.fft.fftfreq(N, 1/fs)\n    \n    return [round(freq, 4) for freq in bins.tolist()]\n\n# Example usage:\n# print(dft_bins(8, fs=44000, positive_only=True))\n# print(dft_bins(8, fs=44000, positive_only=False))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` or `fs` is non-positive. If so, it returns an empty list.\n2. **Frequency Step Calculation**: The frequency step `delta_f` is calculated as `fs / N`.\n3. **Positive Only Mode**:\n   - If `positive_only` is `True`, it computes the frequencies for the first half of the DFT bins (including zero), which corresponds to indices from `0` to `\u230aN/2\u230b`.\n4. **Full Spectrum Mode**:\n   - If `positive_only` is `False`, it uses `np.fft.fftfreq` to generate the full list of frequencies, including both positive and negative frequencies.\n5. **Rounding**: All computed frequencies are rounded to 4 decimal places before returning them as a list.\n\nThis function should meet the requirements specified in the task description."}
{"task_id": 331, "completion_id": 0, "completion": "To compute the out-of-bag mean squared error (OOB-MSE) for a Random Forest regressor, we need to follow these steps:\n\n1. Identify the samples that have at least one out-of-bag (OOB) prediction.\n2. For each of these samples, compute the average of their OOB predictions.\n3. Calculate the squared error between the true value and the average OOB prediction for each sample.\n4. Compute the mean of these squared errors.\n5. If no sample has an OOB prediction, return -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Find samples with at least one OOB prediction\n    oob_samples = np.any(oob_mask, axis=1)\n\n    # If no sample has an OOB prediction, return -1\n    if not np.any(oob_samples):\n        return -1\n\n    # Calculate the average OOB prediction for each sample\n    oob_predictions = np.where(oob_mask, predictions, np.nan)\n    oob_averages = np.nanmean(oob_predictions, axis=1)\n\n    # Compute the squared errors for the OOB samples\n    squared_errors = (y_true[oob_samples] - oob_averages[oob_samples]) ** 2\n\n    # Calculate the mean squared error\n    oob_mse_value = np.mean(squared_errors)\n\n    # Return the OOB MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\n### Explanation:\n- **Step 1:** We convert the input lists to numpy arrays for easier manipulation.\n- **Step 2:** We identify the samples that have at least one OOB prediction using `np.any(oob_mask, axis=1)`.\n- **Step 3:** If no sample has an OOB prediction, we return `-1`.\n- **Step 4:** We calculate the average OOB prediction for each sample using `np.where` to filter out non-OOB predictions and `np.nanmean` to compute the mean while ignoring NaNs.\n- **Step 5:** We compute the squared errors for the samples with OOB predictions.\n- **Step 6:** We calculate the mean of these squared errors to get the OOB-MSE.\n- **Step 7:** Finally, we return the OOB-MSE rounded to 4 decimal places."}
{"task_id": 332, "completion_id": 0, "completion": "To construct an FP-Tree without using classes, we can follow the outlined steps. Here's a complete implementation:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    \n    # Step 1: Compute the support for each item\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(set(transaction))\n    \n    # Step 2: Filter out items with support less than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Sort items by decreasing support, then alphabetically\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Filter and sort items in the transaction\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: -sorted_items.index(x))\n        \n        # Walk through the tree and update nodes\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 1, \"children\": {}}\n            else:\n                current_node[\"children\"][item][\"support\"] += 1\n            current_node = current_node[\"children\"][item]\n    \n    return root\n\n# Example usage:\ntransactions = [\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\"],\n    [\"a\", \"c\"],\n    [\"b\", \"c\"],\n    [\"a\", \"b\", \"c\"]\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n\n1. **Item Support Calculation**: We use `Counter` to count the occurrences of each item across all transactions.\n\n2. **Filtering Frequent Items**: We create a dictionary `frequent_items` that only includes items with support greater than or equal to `min_support`.\n\n3. **Sorting Items**: We sort the frequent items first by their support in descending order and then alphabetically to resolve ties.\n\n4. **Building the FP-Tree**:\n   - We initialize the root node with a support of 0 and an empty children dictionary.\n   - For each transaction, we filter out infrequent items and sort the remaining items according to the global ordering.\n   - We traverse the tree, updating the support of each node and adding new nodes as necessary.\n\nThis implementation constructs the FP-Tree as a nested dictionary structure, adhering to the specified requirements."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check for compatible shapes\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result back to a list of lists\n    return K_rounded.tolist()\n```\n\nThis function first checks if the input vectors `X` and `Y` are provided as NumPy arrays, converting them if necessary. It then checks if the number of columns in `X` and `Y` are the same. If not, it returns `-1`. Otherwise, it computes the linear kernel matrix using the dot product and adds the constant `c0`. Finally, it rounds the results to four decimal places and converts the NumPy array back to a list of lists before returning it."}
{"task_id": 340, "completion_id": 0, "completion": "To implement the single optimization step of the Adam algorithm, we need to follow the given update rules for the moments \\( m \\) and \\( v \\), and then use these to compute the updated parameter \\( \\theta' \\). Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Bias correction for the first moment estimate\n    m_hat_t = m_t / (1 - (beta1 ** t))\n    \n    # Bias correction for the second moment estimate\n    v_hat_t = v_t / (1 - (beta2 ** t))\n    \n    # Update the parameter\n    param_new = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Return the updated parameter and new moments, rounded to 8 decimal places\n    return (\n        [round(float(x), 8) for x in param_new.flatten()],\n        [round(float(x), 8) for x in m_t.flatten()],\n        [round(float(x), 8) for x in v_t.flatten()]\n    )\n```\n\n### Explanation:\n1. **First Moment Update (\\( m_t \\))**: This is computed using the running average of the gradients.\n2. **Second Moment Update (\\( v_t \\))**: This is computed using the running average of the squared gradients.\n3. **Bias Correction**: Since the initial moments are biased towards zero, we correct them by dividing by \\( 1 - \\beta_1^t \\) and \\( 1 - \\beta_2^t \\).\n4. **Parameter Update (\\( \\theta' \\))**: The parameter is updated using the corrected moments and the learning rate.\n\n### Notes:\n- The function returns the updated parameter and the new moments as lists, each element rounded to 8 decimal places.\n- The function handles multi-dimensional parameters by using NumPy operations, which are vectorized and efficient.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the Cross-Entropy Method (CEM) parameter update, we need to follow these steps:\n\n1. **Sort the Samples**: Sort the parameter vectors (`theta_samples`) based on their corresponding rewards in descending order.\n2. **Select Top Samples**: Retain only the top `retain_prcnt` fraction of the sorted samples.\n3. **Compute Mean and Variance**: Calculate the mean and variance of the retained samples across each dimension.\n4. **Round the Results**: Round the computed mean and variance to four decimal places.\n\nHere's the implementation of the `cross_entropy_update` function:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Step 1: Sort the samples based on rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_samples = theta_samples[sorted_indices]\n    \n    # Step 2: Retain the top retain_prcnt fraction of samples\n    num_retain = int(retain_prcnt * len(sorted_samples))\n    elite_samples = sorted_samples[:num_retain]\n    \n    # Step 3: Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Step 4: Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\n### Explanation:\n\n- **Sorting**: We use `np.argsort(rewards)[::-1]` to get the indices that would sort the rewards in descending order. We then use these indices to sort the `theta_samples`.\n- **Retention**: We calculate the number of samples to retain using `int(retain_prcnt * len(sorted_samples))` and slice the sorted samples to get the elite samples.\n- **Mean and Variance**: We compute the mean and variance of the elite samples using `np.mean` and `np.var` respectively.\n- **Rounding**: We round the mean and variance values to four decimal places using a list comprehension.\n\nThis function will correctly update the parameter distribution based on the Cross-Entropy Method, retaining the best-performing samples and computing the new mean and variance for the next iteration."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the entropy\n    H = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        H -= probability * math.log2(probability)\n    \n    return round(H, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'c', 'a', 'b']\n# print(entropy(labels))  # Output should be 1.37095\n```\n\nThis function calculates the Shannon entropy of a given set of class labels. It first checks if the input is empty and returns 0.0 if it is. Then, it uses the `Counter` from the `collections` module to count the occurrences of each label. The entropy is computed by iterating over these counts, calculating the probability of each label, and applying the entropy formula. Finally, the result is rounded to five decimal places before being returned."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the im2col + GEMM strategy, we need to follow these steps:\n\n1. **Padding**: Apply the specified padding to the input images.\n2. **Im2Col**: Convert the padded images into a column format.\n3. **GEMM**: Perform matrix multiplication between the columnized images and the reshaped kernels.\n4. **Reshape**: Reshape the result back to the desired output shape.\n5. **Convert to List**: Convert the final NumPy array to a Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    # Unpack dimensions\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, str) and pad == 'same':\n        pad_top = dilation * (kernel_rows - 1) // 2\n        pad_bottom = dilation * (kernel_rows - 1) // 2\n        pad_left = dilation * (kernel_cols - 1) // 2\n        pad_right = dilation * (kernel_cols - 1) // 2\n        pad = (pad_top, pad_bottom, pad_left, pad_right)\n    \n    pad_top, pad_bottom, pad_left, pad_right = pad\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad_top + pad_bottom - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - dilation * (kernel_cols - 1) - 1) // stride + 1\n    \n    # Im2Col\n    i0 = np.repeat(np.arange(kernel_rows, dtype=np.int64), kernel_cols)\n    i0 = np.tile(i0 * dilation, (out_ch, in_ch, out_rows, out_cols))\n    i1 = stride * np.repeat(np.arange(out_rows, dtype=np.int64), out_cols)\n    i1 = np.tile(i1, (out_ch, in_ch, kernel_rows * kernel_cols))\n    i2 = stride * np.tile(np.arange(out_cols, dtype=np.int64), (out_ch, in_ch, kernel_rows * kernel_cols))\n    i = i0 + i1 + i2\n    j = np.repeat(np.arange(in_ch, dtype=np.int64), kernel_rows * kernel_cols * out_rows * out_cols).reshape((out_ch, in_ch, kernel_rows * kernel_cols, out_rows * out_cols))\n    k = np.repeat(np.arange(kernel_rows * kernel_cols, dtype=np.int64), out_rows * out_cols).reshape((1, 1, kernel_rows * kernel_cols, out_rows * out_cols)).repeat(out_ch, axis=0)\n    X_col = X_padded[:, i, j, k].reshape((n_ex, -1, out_rows * out_cols))\n    \n    # Reshape weights for GEMM\n    W_col = W.reshape((out_ch, -1))\n    \n    # GEMM\n    Y_col = np.matmul(W_col, X_col)\n    \n    # Reshape to output dimensions\n    Y = Y_col.reshape((n_ex, out_ch, out_rows, out_cols)).transpose(0, 2, 3, 1)\n    \n    # Convert to list\n    return Y.tolist()\n\n# Example usage:\n# X = np.random.rand(1, 32, 32, 3)\n# W = np.random.rand(3, 3, 3, 16)\n# result = conv2D(X, W, stride=1, pad='same')\n# print(result)\n```\n\nThis implementation follows the steps outlined above, ensuring that all operations are performed using NumPy only. The function handles different padding specifications and computes the convolution efficiently using the im2col + GEMM approach."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean_centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions\n    if solver == \"svd\":\n        U, S, Vt = np.linalg.svd(mean_centered_data, full_matrices=False)\n        directions = Vt.T\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(mean_centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        directions = directions[:, ::-1]  # Reverse to get descending order\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Sort the directions in descending order of their importance\n    # For SVD, the eigenvalues are the squares of the singular values\n    if solver == \"svd\":\n        eigenvalues = S ** 2\n    \n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    directions = directions[:, sorted_indices]\n    \n    # Step 4: Keep the first n_components of them\n    if n_components > directions.shape[1]:\n        n_components = directions.shape[1]\n    \n    directions = directions[:, :n_components]\n    \n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(directions.shape[1]):\n        if directions[:, i].nonzero()[0].size > 0:\n            first_non_zero_index = directions[:, i].nonzero()[0][0]\n            if directions[first_non_zero_index, i] < 0:\n                directions[:, i] *= -1\n    \n    # Step 6: Project the centred data onto the retained directions\n    scores = np.dot(mean_centered_data, directions)\n    \n    # Step 7: Calculate explained variance ratio\n    total_variance = np.sum(eigenvalues)\n    explained_variance = eigenvalues[:n_components]\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Round the final results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "To complete the `leaf_predict` function, we need to handle two cases based on whether the tree is a classification tree or a regression tree:\n\n1. **Classification Tree**: If `classifier` is `True`, the leaf contains an array of class membership probabilities. We need to return the index of the class with the highest probability. In case of a tie, `numpy.argmax` will resolve it by returning the smallest index.\n\n2. **Regression Tree**: If `classifier` is `False`, the leaf contains a scalar value representing the mean of the target values that fell into that region. We simply return this scalar value.\n\nHere's the implementation of the `leaf_predict` function:\n\n```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n```\n\n### Explanation:\n- **Classification Case**: We use `np.argmax(leaf.value)` to find the index of the highest probability in the list of class probabilities. This function automatically handles ties by returning the smallest index.\n- **Regression Case**: We simply return `leaf.value`, which is the scalar mean of the target values for that leaf node.\n\nThis function will correctly handle both classification and regression tasks based on the `classifier` flag."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0).reshape(1, -1)\n        return [centroid[0].tolist()]\n\n    # Initialize centroids with the first K samples\n    centroids = data[:K]\n\n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if len(data[labels == k]) > 0 else centroids[k]\n                                 for k in range(K)])\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n\n        centroids = new_centroids\n\n    # Sort centroids lexicographically\n    centroids = np.sort(centroids, axis=0)\n\n    # Round to four decimals and convert to list of lists\n    return [centroid.tolist() for centroid in centroids]\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis implementation of the K-Means clustering algorithm initializes the centroids with the first K samples, iteratively assigns samples to the nearest centroid, updates the centroids, and checks for convergence. The final centroids are sorted lexicographically and rounded to four decimal places before being returned as a list of lists."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by dividing by its sum\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round the result to 4 decimal places\n    rounded_matrix = np.round(normalized_matrix, 4)\n    \n    # Convert the result back to a list of lists\n    return rounded_matrix.tolist()\n```\n\nThis function first converts the input data into a NumPy array of floats. It then calculates the sum of each row and checks if any row sum is zero, returning `-1` if so. Otherwise, it normalizes each row by dividing its elements by the row sum and rounds the results to four decimal places before converting the matrix back to a list of lists for the final output."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def check_continuous(space: Space, is_tuple: bool) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Discrete):\n            return False\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            if is_tuple:\n                return all(check_continuous(sub_space, True) for sub_space in space.spaces.values() if isinstance(space, Dict) else space.spaces)\n            else:\n                return False\n        else:\n            raise ValueError(f\"Unknown space type: {type(space)}\")\n    \n    cont_action = check_continuous(env.action_space, tuple_action)\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n```\n\nThis implementation defines a helper function `check_continuous` that recursively checks whether a given space is continuous based on the provided flags. The main function `is_continuous` uses this helper to determine the continuity of both the action and observation spaces and returns the results as a tuple."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the outputs of the trees\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        # Return the running prediction rounded to 4 decimals for regression\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities for classification\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        # Return the predicted class labels\n        return np.argmax(probabilities, axis=1)\n```\n\nThis function follows the specified requirements and correctly handles both regression and classification tasks using NumPy operations. The use of vectorization ensures that the function is efficient and avoids explicit Python loops over individual samples."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D convolution with the specified features, we need to handle several aspects:\n\n1. **Padding**: We need to handle different types of padding:\n   - A single integer for symmetric padding.\n   - A 2-tuple for asymmetric padding.\n   - The string \"same\" which calculates padding based on the output size.\n\n2. **Dilation**: This involves inserting zeros between the kernel elements.\n\n3. **Stride**: This determines how much the kernel moves across the input signal.\n\n4. **Multiple Channels**: Both the input and output can have multiple channels, which means we need to perform the convolution for each channel pair.\n\n5. **Batch Processing**: The input can have multiple examples, and we need to process each example separately.\n\nHere's the implementation of the `conv1D` function:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width considering dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Determine padding\n    if isinstance(pad, str) and pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Invalid padding type\")\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Initialize output\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform the convolution\n    for n in range(n_examples):\n        for o in range(out_channels):\n            for i in range(in_channels):\n                for j in range(output_length):\n                    start_idx = j * stride\n                    end_idx = start_idx + effective_kernel_width\n                    kernel_slice = W[:, i, o][::dilation+1]\n                    signal_slice = X_padded[n, start_idx:end_idx, i]\n                    output[n, j, o] += np.sum(kernel_slice * signal_slice)\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(10, 100, 3)  # 10 examples, 100 signal length, 3 input channels\n# W = np.random.rand(5, 3, 2)     # 5 kernel width, 3 input channels, 2 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n# print(result)\n```\n\n### Explanation:\n- **Padding Calculation**: If `pad` is \"same\", we calculate the total padding needed to ensure the output length matches the input length divided by the stride, rounded up.\n- **Effective Kernel Width**: This accounts for the dilation by inserting zeros between kernel elements.\n- **Convolution Loop**: We iterate over each example, output channel, input channel, and output position to compute the dot product of the kernel slice and the corresponding signal slice.\n- **Output**: The result is converted to a list using `tolist()` before returning."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef gini(y: Union[list[int], \"np.ndarray\"]) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert the input to a NumPy array for easier manipulation\n    y = np.array(y)\n    \n    # Calculate the frequency of each class\n    unique_classes, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the result rounded to 4 decimal places\n    return round(gini_impurity, 4)\n```\n\nThis function first checks if the input list or array is empty and returns `0.0` if it is. It then calculates the frequency of each class in the input, computes the Gini impurity using the formula provided, and returns the result rounded to four decimal places."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X @ theta + b\n        \n        # Compute gradients\n        dw = (2 / m) * X.T @ (y_pred - y)\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = [round(w, 4) for w in theta]\n    b_rounded = round(b, 4)\n    \n    return theta_rounded, b_rounded\n```\n\nThis function initializes the weights and bias, checks for consistency in the input data, and performs batch gradient descent to minimize the mean-squared error. The learned parameters are then rounded to four decimal places before being returned."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Use NumPy's allclose to check if the matrix is equal to its transpose\n    return np.allclose(X_np, X_np.T)\n\n# Example usage:\n# matrix = [\n#     [1, 2, 3],\n#     [2, 5, 6],\n#     [3, 6, 9]\n# ]\n# print(is_symmetric(matrix))  # Output: True\n```\n\nThis function first checks if the input matrix is square by comparing the number of rows and columns. If it is not square, it returns `False`. Then, it uses NumPy's `allclose` function to determine if the matrix is equal to its transpose, allowing for small numerical differences due to floating-point arithmetic."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n\n    Returns:\n    list: A list of negative gradients g rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n\n    # Convert labels to {-1, 1}\n    y_prime = np.array([2 * label - 1 for label in y])\n    f_array = np.array(f)\n\n    # Calculate the negative gradient\n    gradient = y_prime / (1 + np.exp(y_prime * f_array))\n\n    # Round the results to 4 decimal places\n    return [round(g, 4) for g in gradient.tolist()]\n\n# Example usage:\n# y = [0, 1, 1, 0]\n# f = [0.1, 0.8, -0.5, 0.3]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis function first checks if all labels in the input list `y` are either 0 or 1. If not, it returns -1. Otherwise, it converts the labels to the set {-1, 1} and calculates the negative gradient of the logistic loss. The results are then rounded to four decimal places and returned as a list."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function along with its first and second derivatives, we need to follow the mathematical definitions provided. Here's how you can do it:\n\n1. **SELU Function**: This is a scaled version of the ELU function.\n2. **First Derivative**: Compute the derivative of the SELU function.\n3. **Second Derivative**: Compute the second derivative of the SELU function.\n\nLet's implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array\n    x = np.array(x)\n    \n    if order == 0:\n        # SELU function\n        result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\nprint(selu([1, -1, 0], 0))  # SELU values\nprint(selu([1, -1, 0], 1))  # First derivatives\nprint(selu([1, -1, 0], 2))  # Second derivatives\n```\n\n### Explanation:\n- **SELU Function**: For `x > 0`, `SELU(x) = scale * x`. For `x <= 0`, `SELU(x) = scale * alpha * (exp(x) - 1)`.\n- **First Derivative**: For `x > 0`, the derivative is `scale * 1`. For `x <= 0`, the derivative is `scale * alpha * exp(x)`.\n- **Second Derivative**: For `x > 0`, the derivative is `0` (since the derivative of a constant is zero). For `x <= 0`, the derivative is `scale * alpha * exp(x)`.\n\nThis implementation handles both scalar and array inputs and returns the results rounded to four decimal places."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the targets\n    predictions = np.full_like(y, y.mean())\n    \n    # Sort the data by x values\n    sorted_indices = np.argsort(x)\n    x_sorted = x[sorted_indices]\n    y_sorted = y[sorted_indices]\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_sorted - predictions[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        min_error = np.inf\n        \n        # Evaluate every possible split\n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] != x_sorted[i - 1]:  # Ensure different consecutive x values\n                t = (x_sorted[i] + x_sorted[i - 1]) / 2\n                left_residuals = residuals[x_sorted <= t]\n                right_residuals = residuals[x_sorted > t]\n                \n                # Calculate the sum of squared errors for this split\n                error = np.sum(left_residuals**2) + np.sum(right_residuals**2)\n                \n                if error < min_error:\n                    min_error = error\n                    best_split = t\n        \n        # If no valid split found, use the global mean residual\n        if best_split is None:\n            stump_predictions = np.full_like(residuals, residuals.mean())\n        else:\n            stump_predictions = np.where(x_sorted <= best_split, residuals[x_sorted <= best_split].mean(), residuals[x_sorted > best_split].mean())\n        \n        # Update predictions\n        predictions += learning_rate * stump_predictions\n    \n    # Round the final predictions to 4 decimal places and convert to a list\n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the described procedure for training a 1-D gradient boosting regressor using decision stumps. It iteratively computes residuals, finds the best split point, and updates the predictions based on the stump's output. The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 394, "completion_id": 0, "completion": "Here's the implementation of the RMSprop update step in Python:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of squared gradients\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-8)\n    \n    # Round and convert to lists\n    w_next_rounded = [round(x, 4) for x in w_next.flatten()]\n    Eg_next_rounded = [round(x, 4) for x in Eg.flatten()]\n    \n    return w_next_rounded, Eg_next_rounded\n```\n\n### Explanation:\n1. **Initialization**: If `Eg` is `None`, we initialize it as a zero array with the same shape as the gradient `grad`.\n2. **Update Running Average**: We compute the new running average of squared gradients using the formula provided.\n3. **Parameter Update**: We update the parameters `w` using the RMSprop update rule.\n4. **Rounding and Conversion**: Both the updated parameters and the new running average are rounded to 4 decimal places and converted to regular Python lists before returning.\n\nThis function will correctly perform one update step of the RMSprop optimizer, adhering to the constraints provided."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array for efficient computation\n    x = np.array(x)\n    \n    # Compute ELU activation\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        result = np.where(x >= 0, 1, result + alpha)\n    \n    # Round the result to 4 decimal places and convert to list\n    return [round(val, 4) for val in result]\n\n# Example usage:\n# print(elu([1, -1, 2, -2], alpha=0.1))  # Activation\n# print(elu([1, -1, 2, -2], alpha=0.1, derivative=True))  # Gradient\n```\n\nThis function `elu` computes either the ELU activation or its gradient based on the input parameters. It uses NumPy for efficient computation and handles both positive and negative inputs according to the ELU definition. The results are rounded to four decimal places before being returned as a Python list."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def compute_stats(data_list):\n        # Check if any element is a tuple/list/array\n        tuple_data = any(isinstance(item, (list, tuple, np.ndarray)) for item in data_list)\n        \n        # Flatten the data if it's multi-dimensional\n        if tuple_data:\n            flattened_data = [item for sublist in data_list for item in sublist]\n        else:\n            flattened_data = data_list\n        \n        # Check for multidimensionality\n        multidim_data = tuple_data and len(data_list[0]) > 1\n        \n        # Check for continuous data\n        continuous_data = any(isinstance(item, float) and not item.is_integer() for item in flattened_data)\n        \n        # Get unique values and their counts per dimension\n        unique_values_per_dim = []\n        if multidim_data:\n            for dim in zip(*data_list):\n                unique_values_per_dim.append(len(set(dim)))\n        else:\n            unique_values_per_dim.append(len(set(flattened_data)))\n        \n        # Get sorted unique values per dimension\n        unique_ids_per_dim = []\n        if multidim_data:\n            for dim in zip(*data_list):\n                unique_ids_per_dim.append(sorted(set(dim)))\n        else:\n            unique_ids_per_dim.append(sorted(set(flattened_data)))\n        \n        return {\n            'tuple_data': tuple_data,\n            'multidim_data': multidim_data,\n            'continuous_data': continuous_data,\n            'n_per_dim': unique_values_per_dim,\n            'dim': len(data_list[0]) if multidim_data else 1,\n            'ids': unique_ids_per_dim\n        }\n    \n    actions_stats = compute_stats(actions)\n    observations_stats = compute_stats(observations)\n    \n    return {\n        'tuple_actions': actions_stats['tuple_data'],\n        'tuple_observations': observations_stats['tuple_data'],\n        'multidim_actions': actions_stats['multidim_data'],\n        'multidim_observations': observations_stats['multidim_data'],\n        'continuous_actions': actions_stats['continuous_data'],\n        'continuous_observations': observations_stats['continuous_data'],\n        'n_actions_per_dim': actions_stats['n_per_dim'],\n        'action_dim': actions_stats['dim'],\n        'n_obs_per_dim': observations_stats['n_per_dim'],\n        'obs_dim': observations_stats['dim'],\n        'action_ids': actions_stats['ids'],\n        'obs_ids': observations_stats['ids']\n    }\n```\n\nThis function `env_stats` computes various statistics about the given actions and observations, including whether they are multi-dimensional, whether they contain continuous values, and the unique values in each dimension. The function uses helper logic to determine these properties and returns them in a structured dictionary."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def split_data(X, y, feature_index, threshold):\n        left_indices = X[:, feature_index] <= threshold\n        right_indices = X[:, feature_index] > threshold\n        return X[left_indices], y[left_indices], X[right_indices], y[right_indices]\n    \n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_mse = np.inf\n        best_feature_index = None\n        best_threshold = None\n        \n        for feature_index in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                X_left, y_left, X_right, y_right = split_data(X, y, feature_index, threshold)\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                \n                current_mse = mse(y, np.concatenate([np.full_like(y_left, np.mean(y_left)), np.full_like(y_right, np.mean(y_right))]))\n                \n                if current_mse < best_mse:\n                    best_mse = current_mse\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n        \n        if best_feature_index is None:\n            return np.mean(y)\n        \n        X_left, y_left, X_right, y_right = split_data(X, y, best_feature_index, best_threshold)\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (best_feature_index, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(X, tree):\n        if isinstance(tree, np.float64):\n            return tree\n        feature_index, threshold, left_tree, right_tree = tree\n        if X[feature_index] <= threshold:\n            return predict_tree(X, left_tree)\n        else:\n            return predict_tree(X, right_tree)\n    \n    def predict_trees(X, trees):\n        return sum(predict_tree(X, tree) for tree in trees)\n    \n    # Initialize predictions with the mean of the training targets\n    predictions = np.full_like(y_train, np.mean(y_train))\n    \n    trees = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of the squared-error loss)\n        residuals = y_train - predictions\n        \n        # Fit a CART regression tree to the residuals\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        \n        # Update the running prediction\n        predictions += learning_rate * np.array([predict_tree(x, tree) for x in X_train])\n    \n    # Make predictions on the test set\n    test_predictions = np.array([predict_trees(x, trees) for x in X_test])\n    \n    # Round predictions to 4 decimal places and convert to a list\n    return [round(pred, 4) for pred in test_predictions]\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): Data points for which the PDF values are to be computed. Shape (n_samples, n_features).\n    mean (np.ndarray): Mean vector of the distribution. Length n_features.\n    cov (np.ndarray): Covariance matrix of the distribution. Shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    pdf_values = []\n    \n    for i in range(n_samples):\n        x_minus_mean = X[i] - mean\n        exponent = -0.5 * np.dot(x_minus_mean.T, np.dot(inv_cov, x_minus_mean))\n        pdf_value = (1 / (math.sqrt((2 * math.pi) ** n_features * det_cov))) * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n```\n\nThis implementation calculates the multivariate Gaussian PDF for each sample in `X` using the given `mean` and `cov`. It handles both 1D and 2D arrays for `X`, ensuring that the input is always treated as a 2D array with shape `(n_samples, n_features)`. The PDF values are computed using the formula provided and rounded to four decimal places before being returned as a list."}
{"task_id": 419, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Gaussian prior and known observation variance, we need to follow these steps:\n\n1. **Add Intercept**: If `fit_intercept` is `True`, add a column of ones to the input matrices `X` and `X_new`.\n2. **Prior Setup**: Handle different forms of the prior covariance matrix `V` (scalar, diagonal, or full matrix).\n3. **Posterior Calculation**: Compute the posterior mean and covariance.\n4. **Predictive Mean**: Use the posterior mean to compute the MAP predictive mean for `X_new`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Step 1: Add intercept if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n\n    # Step 2: Handle different forms of the prior covariance matrix V\n    M = X.shape[1]\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(M)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Ensure V is symmetric and positive definite\n    assert np.allclose(V, V.T), \"V must be symmetric\"\n    assert np.linalg.det(V) > 0, \"V must be positive definite\"\n\n    # Step 3: Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    posterior_cov = np.linalg.inv(V_inv + X.T @ X)\n    posterior_mean = posterior_cov @ (V_inv @ mu + X.T @ y)\n\n    # Step 4: Compute the MAP predictive mean for X_new\n    y_pred = X_new @ posterior_mean\n\n    # Round every predicted value to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([5, 6])\n# X_new = np.array([[7, 8]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\n### Explanation:\n\n- **Intercept Handling**: We add a column of ones to `X` and `X_new` if `fit_intercept` is `True`.\n- **Prior Covariance Matrix `V`**: We handle different types of `V` (scalar, diagonal, or full matrix) and ensure it is symmetric and positive definite.\n- **Posterior Calculation**: We compute the posterior mean and covariance using the formulas provided.\n- **Predictive Mean**: We compute the MAP predictive mean for `X_new` using the posterior mean.\n- **Output**: We round the predictions to 4 decimal places and return them as a list.\n\nThis implementation ensures that the Bayesian linear regression is performed correctly according to the given specifications."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    \n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all values in both lists are non-negative\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    sum_of_squares = sum((np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2 for i in range(n))\n    rmsle = np.sqrt(sum_of_squares / n)\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if the lengths of `actual` and `predicted` lists are equal. If not, it returns `-1`.\n   - It then checks if all elements in both lists are non-negative. If any element is negative, it returns `-1`.\n\n2. **RMSLE Calculation**:\n   - The function calculates the RMSLE using the formula provided. It uses `np.log1p` to compute the logarithm of `1 + x`, which is more numerically stable than `np.log(1 + x)` when `x` is close to zero.\n   - It computes the sum of squared differences between the logarithms of the predicted and actual values.\n   - Finally, it calculates the square root of the mean of these squared differences.\n\n3. **Output**:\n   - The result is rounded to four decimal places using `round(rmsle, 4)` before being returned."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    \n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)\n    \n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    \n    if not symmetric:\n        window = window[:-1]\n    \n    return [round(x, 4) for x in window]\n\n# Example usage:\n# print(hann(10, symmetric=True))  # Symmetric Hann window of length 10\n# print(hann(10, symmetric=False)) # Periodic Hann window of length 10\n```\n\nThis code defines the `hann` function, which generates a Hann window of a specified length. The function handles both symmetric and periodic windows, and it ensures that the window coefficients are rounded to four decimal places. The function also handles special cases where the window length is less than or equal to zero or exactly one."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # For other tensors, use the first two dimensions\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    \n    return (fan_in, fan_out)\n```\n\nThis function checks the dimensionality of the input shape and calculates the fan-in and fan-out accordingly. For 4-dimensional shapes, it assumes they represent a 2-D convolutional kernel and calculates the receptive field size. For other shapes, it directly uses the first two dimensions to determine fan-in and fan-out. The results are returned as a tuple of floats."}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case handling\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Repeat for t = 1 ... n_estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.column_stack((np.ones(len(X)), X))\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Round the final predictions to 4 decimal places and convert to a list\n    return [round(pred, 4) for pred in y_pred]\n```\n\nThis implementation follows the steps outlined in the task description. It uses NumPy for efficient array operations and leverages the least squares method to fit the linear regression models. The special cases where `n_estimators` is less than or equal to zero or `learning_rate` is zero are handled by returning a list filled with the mean of the target values. Each prediction is rounded to four decimal places before being returned as a list."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to a NumPy array for uniform processing\n    x_np = np.array(x)\n    \n    # Compute the sigmoid function value\n    sigma_x = 1 / (1 + np.exp(-x_np))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    \n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Convert back to the original type if it was a scalar\n    if isinstance(x, (int, float)):\n        return result_rounded.item()\n    else:\n        return result_rounded.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 0]]), order=2))  # Output: [[0.0625, 0.0313], [0.0313, 0.0625]]\n```\n\nThis implementation handles the computation of the logistic sigmoid function and its first and second derivatives. It ensures that the output is rounded to four decimal places and maintains the original input type (scalar or list/NumPy array). If an invalid `order` is provided, it returns `-1`."}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    if num_classes is None:\n        num_classes = max(y) + 1\n    \n    if num_classes < max(y) + 1:\n        return -1\n    \n    one_hot_matrix = np.eye(num_classes)[y]\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n\n# Test cases:\n# assert to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# assert to_categorical([0, 1, 2], num_classes=5) == [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0]]\n# assert to_categorical([0, 1, 2], num_classes=2) == -1\n# assert to_categorical([0]) == [[1]]\n# assert to_categorical([]) == []\n```\n\nThis implementation of `to_categorical` follows the specified requirements:\n\n1. It accepts a 1-D list or NumPy array `y` containing non-negative integer class indices.\n2. If `num_classes` is `None`, it determines it automatically as `max(y) + 1`.\n3. If `num_classes` is provided but smaller than `max(y) + 1`, it returns `-1`.\n4. Otherwise, it builds a 2-D NumPy array where each row corresponds to a one-hot encoded label.\n5. Finally, it converts the result to a regular Python list of lists before returning it."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def get_support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(set(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if len(itemset1) == k - 2 and len(itemset2) == k - 2:\n                    if itemset1[:-1] == itemset2[:-1] and itemset1[-1] < itemset2[-1]:\n                        candidate = tuple(sorted(itemset1 + (itemset2[-1],)))\n                        if all(subset in frequent_itemsets for subset in itertools.combinations(candidate, k - 1)):\n                            candidates.add(candidate)\n        return candidates\n\n    # Step 1: Generate frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item not in item_counts:\n                item_counts[item] = 0\n            item_counts[item] += 1\n\n    frequent_itemsets = {frozenset([item]) for item, count in item_counts.items() if count / len(transactions) >= min_sup}\n\n    # Step 2: Generate larger frequent itemsets\n    k = 2\n    while frequent_itemsets:\n        candidates = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = {candidate for candidate in candidates if get_support(candidate) >= min_sup}\n        k += 1\n\n    # Convert frozensets to tuples and sort them\n    result = sorted((tuple(itemset) for itemset in frequent_itemsets), key=lambda x: (len(x), x))\n    return result\n```\n\nThis implementation follows the Apriori algorithm to find frequent itemsets. It starts with generating frequent 1-itemsets and then iteratively generates larger itemsets by joining and pruning candidates. The final result is sorted by the length of the itemsets and then lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the predictions to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the mean across the first axis (n_estimators) to get the average probabilities\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    \n    # Find the predicted class index by taking the argmax of the rounded probabilities\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n    \n    # Convert the NumPy arrays back to Python lists before returning\n    return rounded_probabilities.tolist(), predicted_classes.tolist()\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2]],\n#     [[0.1, 0.4, 0.5], [0.5, 0.3, 0.2]],\n#     [[0.3, 0.3, 0.4], [0.4, 0.4, 0.2]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis function takes a three-level nested list of probability predictions from multiple estimators, averages them, rounds to four decimal places, and determines the predicted class for each sample. The results are returned as specified."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel, we need to follow these steps:\n\n1. **Input Validation**: Ensure that the feature dimensions of `X` and `Y` match. Also, validate the `sigma` parameter to ensure it is either a positive float, a list of positive floats with the same length as the number of features, or `None`.\n\n2. **Default Sigma Calculation**: If `sigma` is `None`, compute the default value as \\(\\sqrt{\\frac{C}{2}}\\), where \\(C\\) is the number of features.\n\n3. **Kernel Matrix Computation**: Compute the RBF kernel matrix using the formula provided. For each pair of vectors \\(x\\) and \\(y\\), calculate the kernel value using the squared Euclidean distance normalized by `sigma`.\n\n4. **Rounding**: Round all entries of the kernel matrix to 4 decimal places.\n\n5. **Return**: Return the kernel matrix as a nested Python list.\n\nHere's the implementation of the `rbf_kernel` function:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate sigma\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    elif sigma is None:\n        sigma = np.sqrt(C / 2)\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    kernel_matrix = np.zeros((X.shape[0], Y.shape[0]))\n    for i, x in enumerate(X):\n        for j, y in enumerate(Y):\n            diff = (x - y) / sigma\n            kernel_value = np.exp(-0.5 * np.sum(diff ** 2))\n            kernel_matrix[i, j] = kernel_value\n    \n    # Round to 4 decimal places and convert to list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n```\n\n### Explanation:\n\n- **Input Conversion**: We convert `X` and `Y` to NumPy arrays for efficient computation.\n- **Feature Dimension Check**: We ensure that the number of features in `X` matches the number of features in `Y`.\n- **Sigma Validation**: We handle different types of `sigma` inputs, ensuring they are valid and converting them to a NumPy array for uniform processing.\n- **Kernel Matrix Calculation**: We iterate over each pair of vectors in `X` and `Y`, compute the normalized squared Euclidean distance, and apply the RBF formula.\n- **Rounding and Output**: Finally, we round the kernel matrix values to 4 decimal places and return it as a nested Python list."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    def entropy(labels):\n        \"\"\"Compute the Shannon entropy of a list of labels.\"\"\"\n        if not labels:\n            return 0\n        counter = Counter(labels)\n        n = len(labels)\n        return -sum((count / n) * np.log2(count / n) for count in counter.values())\n\n    def majority_label(labels):\n        \"\"\"Return the majority label, breaking ties by choosing the smallest label.\"\"\"\n        if not labels:\n            return None\n        counter = Counter(labels)\n        return min(counter, key=lambda x: (-counter[x], x))\n\n    n_samples, n_features = len(X), len(X[0])\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    majority_label = majority_label(y)\n\n    for j in range(n_features):\n        # Sort the unique values in the feature column\n        unique_values = sorted(set(X[i][j] for i in range(n_samples)))\n        # Consider midpoints between successive values as potential thresholds\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        \n        for t in thresholds:\n            left_labels = [y[i] for i in range(n_samples) if X[i][j] <= t]\n            right_labels = [y[i] for i in range(n_samples) if X[i][j] > t]\n            \n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority = majority_label(left_labels)\n                right_majority = majority_label(right_labels)\n\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, left_majority, right_majority)\n```\n\nThis implementation defines a `decision_stump` function that computes the best single-level split for a decision tree based on information gain. It uses helper functions to calculate entropy and determine the majority label. The function iterates over each feature and considers midpoints between unique values as potential thresholds, calculating the information gain for each split. It keeps track of the split with the highest gain and returns the appropriate tuple. If no split improves the information gain, it returns a tuple indicating no split is beneficial."}
{"task_id": 452, "completion_id": 0, "completion": "To solve the problem of splitting a dataset based on a feature threshold, we need to handle both numeric and categorical thresholds. The function will iterate through the dataset, check each sample against the threshold, and partition the samples accordingly. Here's how you can implement this:\n\n```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    subset_1 = []\n    subset_2 = []\n\n    for sample in X:\n        if isinstance(sample, np.ndarray):\n            sample = sample.tolist()\n        \n        if isinstance(threshold, (int, float)):\n            if sample[feature_i] >= threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n        else:\n            if sample[feature_i] == threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n\n    return [subset_1, subset_2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts either a NumPy array or a list of lists. If the input is a NumPy array, it converts each sample to a list for uniform processing.\n2. **Threshold Check**:\n   - For numeric thresholds, it checks if the feature value is greater than or equal to the threshold.\n   - For categorical thresholds, it checks if the feature value is exactly equal to the threshold.\n3. **Partitioning**: Based on the threshold check, samples are added to `subset_1` or `subset_2`.\n4. **Return**: The function returns a list containing the two subsets, preserving their original order.\n\nThis implementation ensures that the dataset is split correctly based on the specified feature and threshold, while maintaining the order of samples."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if not (0 <= gamma <= 1):\n        return -1\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n\n    # Initialize the target Q values matrix\n    Q_target = Q.copy()\n\n    # Update the target Q values\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        Q_target[i, actions[i]] = target\n\n    # Round the results to 4 decimal places and convert to list of lists\n    Q_target_rounded = [[round(value, 4) for value in row] for row in Q_target]\n\n    return Q_target_rounded\n```\n\nThis function first checks if the inputs are valid, ensuring that the discount factor `gamma` is within the specified range and that all input lists have the same length. It then iterates over each sample in the batch, calculates the appropriate target value based on whether the next state is terminal, and updates the corresponding entry in the `Q_target` matrix. Finally, it rounds each value to four decimal places and converts the resulting NumPy array to a nested list before returning it."}
{"task_id": 458, "completion_id": 0, "completion": "Here's the implementation of the `to_categorical` function based on your requirements:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels_array = np.asarray(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels_array) + 1\n    \n    # Check if num_classes is smaller than max(labels) + 1\n    if num_classes <= max(labels_array):\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels_array))]\n    \n    # Fill in the one-hot encoded matrix\n    for i, label in enumerate(labels_array):\n        one_hot_matrix[i][label] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 3]\n# print(to_categorical(labels))\n# Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if any label is negative. If so, it returns `-1`.\n   - It then checks if `num_classes` is provided. If not, it infers `num_classes` as `max(labels) + 1`.\n   - If `num_classes` is provided but is smaller than `max(labels) + 1`, it returns `-1`.\n\n2. **One-Hot Encoding**:\n   - The function initializes a list of lists (`one_hot_matrix`) with zeros.\n   - It iterates over the `labels` and sets the appropriate position to `1` for each label.\n\n3. **Output**:\n   - The function returns the one-hot encoded matrix as a list of lists of integers."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(x)\n\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        min_sse = float('inf')\n        best_split = None\n        best_vL = best_vR = None\n        \n        unique_x = np.unique(x[:-1])  # Exclude the greatest value to avoid empty right side\n        for t in unique_x:\n            left_indices = x <= t\n            right_indices = x > t\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            vL = np.mean(residuals[left_indices])\n            vR = np.mean(residuals[right_indices])\n            \n            sse = np.sum((residuals[left_indices] - vL) ** 2) + np.sum((residuals[right_indices] - vR) ** 2)\n            \n            if sse < min_sse:\n                min_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        \n        if best_split is None:\n            # No valid split found, predict the mean residual of the whole data\n            stump_predictions = np.full_like(residuals, np.mean(residuals))\n        else:\n            stump_predictions = np.where(x <= best_split, best_vL, best_vR)\n        \n        predictions += learning_rate * stump_predictions\n    \n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the described algorithm for gradient boosting with decision stumps for one-dimensional regression. It iteratively computes the residuals, finds the best split for each iteration, updates the predictions, and finally returns the rounded predictions."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Calculate the expected value of Q[next_state]\n        max_q_next = max(q_table[next_state])\n        greedy_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_q_next]\n        num_greedy_actions = len(greedy_actions)\n        \n        expected_q_next = (1 - epsilon + epsilon / num_actions) * max_q_next\n        expected_q_next += sum((epsilon / num_actions) * q_table[next_state][a] for a in range(num_actions) if a not in greedy_actions)\n        \n        target = reward + gamma * expected_q_next\n    else:\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to 4 decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```"}
{"task_id": 474, "completion_id": 0, "completion": "To address the task, we need to implement the `generate_data` function that creates a 2-D toy dataset suitable for binary classification. The dataset should have two classes, each arranged in a rectangular cluster. The first class (label -1) is located in the square [1, 9] \u00d7 [1, 9], and the second class (label +1) is shifted upward by the value of the parameter `interval` (in multiples of 10).\n\nHere's the complete implementation of the `generate_data` function:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the bounds for the x and y coordinates\n        x_min = np.floor(i / 2) * 10 + 0.1\n        x_max = x_min + 0.8\n        y_min = (i % 2) * interval * 10 + 0.1\n        y_max = y_min + 0.8\n\n        # Generate training samples\n        x_train_samples = np.random.uniform(x_min, x_max, n_train)\n        y_train_samples = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(np.column_stack((x_train_samples, y_train_samples)))\n        Y_train.extend([(i - 0.5) * 2] * n_train)\n\n        # Generate validation samples\n        x_val_samples = np.random.uniform(x_min, x_max, n_val)\n        y_val_samples = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(np.column_stack((x_val_samples, y_val_samples)))\n        Y_val.extend([(i - 0.5) * 2] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\n### Explanation:\n1. **Random Seed Handling**: If a seed is provided, both `random` and `numpy.random` are seeded to ensure reproducibility.\n2. **Parameter Calculation**: For each class `i`, the bounds for `x` and `y` coordinates are calculated based on the class index and the `interval`.\n3. **Sample Generation**: Training and validation samples are generated using `numpy.random.uniform` within the calculated bounds.\n4. **Label Assignment**: Labels are assigned based on the class index `i` using the formula `(i - 0.5) * 2`.\n5. **Rounding**: All coordinates are rounded to four decimal places using `np.round`.\n6. **Return Values**: The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`.\n\nThis implementation ensures that the data generator is reusable and correctly handles the generation of both training and validation datasets with appropriate labels."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update first moment estimate\n    m_new = b1 * m_prev + (1 - b1) * grad\n    \n    # Update second raw moment estimate\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - b1 ** t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # Should print approximately 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy algorithm for the multi-armed bandit problem, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Number of arms\n    N = len(rewards[0])\n    \n    # Initialize the estimated values and counters\n    estimates = [ev_prior] * N\n    counts = [0] * N\n    \n    # Iterate over each time-step\n    for t, reward_list in enumerate(rewards):\n        # Choose an arm\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the highest estimate\n            chosen_arm = np.argmax(estimates)\n        \n        # Get the reward for the chosen arm\n        reward = reward_list[chosen_arm]\n        \n        # Update the count for the chosen arm\n        counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm\n        C_i = counts[chosen_arm]\n        V_i = estimates[chosen_arm]\n        estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n    \n    # Return the final estimates rounded to 4 decimal places\n    return [round(estimate, 4) for estimate in estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 2.0, 3.0],\n#     [3.0, 2.0, 1.0],\n#     [2.0, 3.0, 1.0]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the estimated value (`estimates`) for each arm with `ev_prior` and set the count (`counts`) for each arm to zero.\n2. **Iteration**: For each time-step, we decide whether to explore (choose a random arm) or exploit (choose the arm with the highest estimate). This decision is made based on the exploration probability `epsilon`.\n3. **Reward Reception**: We receive the reward for the chosen arm.\n4. **Update Estimates**: We update the estimate for the chosen arm using the incremental sample mean formula.\n5. **Return Results**: Finally, we return the estimated values rounded to four decimal places.\n\nThis implementation ensures that the results are reproducible when a seed is provided, and it follows the \u03b5-greedy strategy as described."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index, eps):\n        neighbors = []\n        for i in range(data.shape[0]):\n            if euclidean_distance(data[i], data[point_index]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, cluster_id, neighbors):\n        cluster_labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if cluster_labels[neighbor_index] == -1:\n                cluster_labels[neighbor_index] = cluster_id\n            elif cluster_labels[neighbor_index] == 0:\n                cluster_labels[neighbor_index] = cluster_id\n                additional_neighbors = region_query(neighbor_index, eps)\n                if len(additional_neighbors) >= min_samples:\n                    neighbors.extend(additional_neighbors)\n            i += 1\n\n    cluster_labels = [0] * data.shape[0]\n    cluster_id = 0\n\n    for point_index in range(data.shape[0]):\n        if cluster_labels[point_index] != 0:\n            continue\n        neighbors = region_query(point_index, eps)\n        if len(neighbors) < min_samples:\n            cluster_labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, cluster_id, neighbors)\n\n    return cluster_labels\n```\n\nThis implementation of DBSCAN follows the rules you specified. It starts by defining helper functions to calculate Euclidean distance and to find all neighbors within a given radius (`eps`). The main function iterates over each point, checking if it has enough neighbors to form a core point. If so, it expands the cluster by adding reachable points. Points that don't meet the criteria for being part of a cluster are labeled as noise (`-1`)."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if num_classes <= 0:\n        raise ValueError(\"num_classes must be greater than 0\")\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"All labels must be in the range [0, num_classes - 1]\")\n    \n    # Create an empty matrix of zeros\n    one_hot_matrix = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Use numpy's advanced indexing to set the appropriate elements to 1\n    one_hot_matrix[np.arange(y.shape[0]), y] = 1\n    \n    return one_hot_matrix\n```\n\nThis implementation of `to_categorical` follows the specified requirements:\n\n- It converts a vector of integer class labels into a 2-D array of one-hot encoded vectors.\n- It supports an optional `num_classes` parameter, which determines the number of columns in the output matrix.\n- If `num_classes` is not provided, it defaults to `max(y) + 1`.\n- It raises a `ValueError` if any label is negative or not smaller than `num_classes`.\n- The returned array contains only integers (0s and 1s)."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    if not X_train:\n        return []\n\n    def sse(y):\n        return np.sum((y - np.mean(y)) ** 2)\n\n    def split_data(X, y, split_point):\n        left_mask = np.array(X) < split_point\n        right_mask = ~left_mask\n        return X[left_mask], y[left_mask], X[right_mask], y[right_mask]\n\n    def find_best_split(X, y):\n        if len(X) < 2:\n            return None, None\n        best_sse = float('inf')\n        best_split = None\n        for i in range(1, len(X)):\n            split_point = (X[i - 1] + X[i]) / 2\n            _, y_left, _, y_right = split_data(X, y, split_point)\n            current_sse = sse(y_left) + sse(y_right)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = split_point\n        return best_split, best_sse\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        split_point, _ = find_best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        X_left, y_left, X_right, y_right = split_data(X, y, split_point)\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (split_point, left_tree, right_tree)\n\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_tree, right_tree = tree\n        if x < split_point:\n            return predict(left_tree, x)\n        else:\n            return predict(right_tree, x)\n\n    # Sort the training data by feature values\n    sorted_indices = np.argsort(X_train)\n    X_sorted = np.array(X_train)[sorted_indices]\n    y_sorted = np.array(y_train)[sorted_indices]\n\n    # Build the regression tree\n    tree = build_tree(X_sorted, y_sorted, 0)\n\n    # Make predictions for the test data\n    predictions = [predict(tree, x) for x in X_test]\n    return predictions\n```\n\nThis code implements a simple univariate regression tree using recursive greedy splitting to minimize the sum of squared errors (SSE). The tree is built by recursively selecting the best split point until the maximum depth is reached or the node contains fewer than two samples. Each leaf node is labeled with the mean of the target values in that leaf. The function then returns predictions for an arbitrary list of test points by traversing the tree."}
{"task_id": 490, "completion_id": 0, "completion": "To accomplish the task of converting a one-dimensional vector into a square diagonal matrix, we can follow these steps:\n\n1. **Check if the input is empty**: If the input vector is empty, return an empty list immediately.\n2. **Convert the input to a NumPy array**: This will allow us to easily manipulate the data and create the diagonal matrix.\n3. **Create a diagonal matrix using NumPy**: Use the `np.diag` function to create a diagonal matrix from the input vector.\n4. **Convert the resulting matrix to a list of lists**: Use the `tolist()` method to convert the NumPy array to a list of lists, which is the required output format.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Check if the input is empty\n    if not x:\n        return []\n    \n    # Convert the input to a NumPy array\n    x_array = np.array(x)\n    \n    # Create a diagonal matrix\n    diagonal_matrix = np.diag(x_array)\n    \n    # Convert the matrix to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# print(make_diagonal([1, 2, 3]))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n# print(make_diagonal((4, 5)))     # Output: [[4, 0], [0, 5]]\n# print(make_diagonal([]))         # Output: []\n```\n\n### Explanation:\n- **Empty Input Check**: The function first checks if the input `x` is empty. If it is, it returns an empty list.\n- **Conversion to NumPy Array**: The input is converted to a NumPy array to leverage NumPy's efficient array operations.\n- **Creating the Diagonal Matrix**: The `np.diag` function is used to create a diagonal matrix where the input vector's elements are placed on the main diagonal.\n- **Conversion to List of Lists**: Finally, the resulting diagonal matrix is converted to a list of lists using the `tolist()` method, which matches the required output format.\n\nThis approach ensures that the function handles different types of input (lists, tuples, and NumPy arrays) and produces the correct output format."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm for frequent item-set mining, we need to follow the two major stages outlined in the problem description. Below is the complete implementation of the `fp_growth` function:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Helper class to represent a node in the FP-tree\n    class FPNode:\n        def __init__(self, value, count=1, parent=None, children=None):\n            self.value = value\n            self.count = count\n            self.parent = parent\n            self.children = defaultdict(FPNode) if children is None else children\n        \n        def increment(self):\n            self.count += 1\n    \n    # Step 1: Build the FP-tree\n    def build_fp_tree(transactions, min_sup):\n        # Count the frequency of each item\n        item_counts = Counter(item for transaction in transactions for item in transaction)\n        # Filter out items below min_sup\n        filtered_transactions = [[item for item in transaction if item_counts[item] >= min_sup] for transaction in transactions]\n        \n        # Sort items by frequency (descending) and lexicographically (ascending)\n        sorted_items = sorted(filtered_transactions[0], key=lambda x: (-item_counts[x], x))\n        \n        # Create the root of the FP-tree\n        root = FPNode(None)\n        \n        # Insert each transaction into the FP-tree\n        for transaction in filtered_transactions:\n            current_node = root\n            for item in sorted_items:\n                if item in transaction:\n                    if item not in current_node.children:\n                        current_node.children[item] = FPNode(item, parent=current_node)\n                    current_node = current_node.children[item]\n                    current_node.increment()\n        \n        return root, item_counts\n    \n    # Step 2: Generate conditional pattern bases\n    def generate_conditional_pattern_bases(node, prefix, conditional_patterns):\n        if node.parent is not None:\n            conditional_patterns.append((prefix + (node.value,), node.count))\n            generate_conditional_pattern_bases(node.parent, prefix, conditional_patterns)\n    \n    # Step 3: Build conditional FP-tree\n    def build_conditional_fp_tree(conditional_patterns, min_sup):\n        # Create a new FP-tree from the conditional patterns\n        root = FPNode(None)\n        for pattern, count in conditional_patterns:\n            current_node = root\n            for item in pattern:\n                if item not in current_node.children:\n                    current_node.children[item] = FPNode(item, parent=current_node)\n                current_node = current_node.children[item]\n                current_node.increment()\n        return root\n    \n    # Step 4: Mine the conditional FP-tree\n    def mine_fp_tree(root, prefix, frequent_itemsets, min_sup):\n        # Collect all nodes in the tree in reverse order of their counts\n        nodes = []\n        for node in root.children.values():\n            nodes.extend(node.children.values())\n        nodes.sort(key=lambda x: (-x.count, x.value))\n        \n        # Enumerate all non-empty combinations of items on a single path\n        if len(nodes) == 1 and nodes[0].value is not None:\n            path = [(nodes[0].value,)]\n            while nodes[0].parent is not None:\n                path.append((nodes[0].parent.value,))\n                nodes[0] = nodes[0].parent\n            path.reverse()\n            for r in range(1, len(path) + 1):\n                for combination in itertools.combinations(path, r):\n                    frequent_itemsets.add(tuple(prefix) + tuple(combination))\n        \n        # Recursively mine the conditional FP-tree\n        for node in nodes:\n            if node.value is not None:\n                conditional_patterns = []\n                generate_conditional_pattern_bases(node, (), conditional_patterns)\n                if conditional_patterns:\n                    conditional_root = build_conditional_fp_tree(conditional_patterns, min_sup)\n                    mine_fp_tree(conditional_root, prefix + (node.value,), frequent_itemsets, min_sup)\n    \n    # Main execution\n    if not transactions or min_sup <= 0:\n        return []\n    \n    # Build the initial FP-tree\n    fp_tree, item_counts = build_fp_tree(transactions, min_sup)\n    \n    # Initialize the set to store frequent itemsets\n    frequent_itemsets = set()\n    \n    # Mine the FP-tree\n    mine_fp_tree(fp_tree, (), frequent_itemsets, min_sup)\n    \n    # Convert the set to a sorted list of tuples\n    result = sorted(frequent_itemsets, key=lambda x: (len(x), x))\n    \n    return result\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis implementation follows the FP-Growth algorithm as described. It constructs the FP-tree, generates conditional pattern bases, builds conditional FP-trees, and recursively mines the trees to find all frequent item-sets. The final result is sorted by length and lexicographically."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X_np = np.array(X)\n    n_samples, n_features = X_np.shape\n    result = []\n\n    for _ in range(n_samples):\n        result.append([1.0])  # Start with the degree-0 term\n\n    for d in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), d):\n            for i in range(n_samples):\n                term = 1.0\n                for index in combo:\n                    term *= X_np[i, index]\n                result[i].append(term)\n\n    return result\n```\n\nThis implementation follows the requirements by generating all possible monomials of the input features up to the specified degree. It uses `itertools.combinations_with_replacement` to generate the combinations of feature indices for each degree, ensuring that the terms are ordered by degree and lexicographically within the same degree. The resulting matrix is returned as a list of lists."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_value = np.mean(squared_diffs)\n    \n    return round(mse_value, 4)\n```\n\nThis function first checks if the input `y` is empty and returns `-1` if it is. Otherwise, it converts the input to a NumPy array, calculates the mean of the array, computes the squared differences from the mean, and then calculates the mean of these squared differences to get the MSE. Finally, it rounds the result to four decimal places before returning it."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    # Apply the affine transformation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (constant for affine function)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (zero for affine function)\n    grad2 = np.zeros_like(x)\n    \n    # Round all results to 4 decimal places\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    \n    # Convert back to lists before returning\n    return y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist()\n\n# Example usage:\n# x = [1, 2, 3]\n# result = apply_affine(x, slope=2.0, intercept=3.0)\n# print(result)  # Output: ([5.0, 7.0, 9.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis function takes a 1-D list or NumPy array `x`, applies the affine transformation using the provided `slope` and `intercept`, and returns the transformed values along with their first and second derivatives. All results are rounded to four decimal places."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Step 1: Standardise each feature\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    \n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)  # Population variance\n    std[std == 0] = 1  # Avoid division by zero for features with zero variance\n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, bias=True)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    projected_data = standardized_data @ sorted_eigenvectors[:, :k]\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(projected_data, 4).tolist()\n```\n\nThis implementation follows the steps outlined in the task description to perform PCA dimensionality reduction. It includes standardization of the data, computation of the covariance matrix, eigen-decomposition, sorting of eigenvalues and eigenvectors, fixing the sign of eigenvectors, and projecting the data onto the first `k` principal components. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the average of the training labels\n    F = np.mean(y_train)\n    \n    # Store the predictions of each stump\n    stump_predictions = []\n    \n    for m in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Initialize the best stump\n        best_stump = None\n        best_error = float('inf')\n        \n        # Iterate over each feature to find the best split\n        for feature_index in range(X_train.shape[1]):\n            unique_values = np.unique(X_train[:, feature_index])\n            \n            for threshold in unique_values:\n                # Split the data based on the threshold\n                left_indices = X_train[:, feature_index] <= threshold\n                right_indices = X_train[:, feature_index] > threshold\n                \n                # Calculate the predictions for the left and right sides\n                left_prediction = np.mean(residuals[left_indices])\n                right_prediction = np.mean(residuals[right_indices])\n                \n                # Calculate the total squared error for this split\n                error = np.sum((residuals[left_indices] - left_prediction) ** 2) + \\\n                        np.sum((residuals[right_indices] - right_prediction) ** 2)\n                \n                # Update the best stump if this one has a lower error\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_index, threshold, left_prediction, right_prediction)\n        \n        # Add the best stump's prediction to the ensemble\n        feature_index, threshold, left_prediction, right_prediction = best_stump\n        stump_predictions.append(best_stump)\n        \n        # Update the model with the best stump's contribution\n        stump_contribution = np.zeros_like(F)\n        stump_contribution[X_train[:, feature_index] <= threshold] = left_prediction\n        stump_contribution[X_train[:, feature_index] > threshold] = right_prediction\n        F += learning_rate * stump_contribution\n    \n    # Predict the class labels for the test set\n    F_test = np.full_like(y_train, F)\n    for feature_index, threshold, left_prediction, right_prediction in stump_predictions:\n        stump_contribution = np.zeros_like(F_test)\n        stump_contribution[X_test[:, feature_index] <= threshold] = left_prediction\n        stump_contribution[X_test[:, feature_index] > threshold] = right_prediction\n        F_test += learning_rate * stump_contribution\n    \n    # Threshold the final scores at 0.5 to get binary class labels\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X_train = [[0, 1], [1, 0], [1, 1], [0, 0]]\n# y_train = [0, 1, 1, 0]\n# X_test = [[0, 1], [1, 0]]\n# predictions = gradient_boosting_classifier(X_train, y_train, X_test)\n# print(predictions)  # Output: [0, 1]\n```\n\nThis implementation follows the guidelines provided and constructs a simple gradient boosting classifier using decision stumps. It iteratively fits stumps to the residuals of the current model, updating the model with each stump's contribution, and finally predicts class labels for the test set by thresholding the final regression scores."}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Positive phase: compute hidden probabilities given visible data\n    m, n_v = X.shape\n    n_h = W.shape[1]\n    \n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Negative phase: run k Gibbs steps\n    v_k_prob = X\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round to 4 decimal places and convert to list of lists\n    W_new_rounded = np.round(W_new, decimals=4).tolist()\n\n    return W_new_rounded\n```\n\nThis implementation follows the steps outlined in the task description. It computes the positive phase hidden probabilities, runs `k` full Gibbs steps without stochastic sampling, calculates the positive and negative gradients, updates the weight matrix, and returns the updated matrix rounded to four decimal places as a list of lists."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the component-wise absolute differences\n    differences = np.abs(x - y)\n    \n    # Find the maximum difference\n    max_difference = np.max(differences)\n    \n    # Return the result rounded to four decimal places\n    return round(max_difference, 4)\n```\n\nThis function first checks if the input vectors have the same length. If they do not, it returns `-1`. Otherwise, it calculates the component-wise absolute differences between the vectors, finds the maximum of these differences, and returns the result rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the Variational Auto-Encoder (VAE) loss for Bernoulli visible units, we need to calculate both the reconstruction loss and the KL divergence, then sum them up and take the average over the mini-batch. Here's how you can do it:\n\n1. **Reconstruction Loss**: This is the element-wise binary cross-entropy between the true input `y` and the reconstruction `y_pred`. For binary data, the binary cross-entropy loss is given by:\n   \\[\n   \\text{Reconstruction Loss} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i) \\right]\n   \\]\n   where \\( N \\) is the number of samples in the batch.\n\n2. **KL Divergence**: This measures the difference between the approximate posterior \\( q(t|x) \\) and the prior \\( p(t) \\). For a Gaussian prior and a Gaussian approximate posterior, the KL divergence is:\n   \\[\n   \\text{KL Divergence} = -\\frac{1}{2} \\sum_{i=1}^{D} \\left[ 1 + \\log(\\sigma_i^2) - \\mu_i^2 - \\sigma_i^2 \\right]\n   \\]\n   where \\( D \\) is the dimensionality of the latent space.\n\n3. **Numerical Stability**: To ensure numerical stability, we clip the predicted values `y_pred` to be within the open interval \\((\\varepsilon, 1 - \\varepsilon)\\), where \\(\\varepsilon = \\text{np.finfo(float).eps}\\).\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n\n    # Reconstruction Loss: Binary Cross-Entropy\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n\n    # KL Divergence\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n\n    # Total VAE Loss\n    total_loss = reconstruction_loss + kl_divergence\n\n    # Return the loss rounded to 6 decimal places\n    return round(total_loss, 6)\n```\n\nThis function calculates the VAE loss for a mini-batch of data, ensuring numerical stability by clipping the predicted probabilities, and returns the average loss rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "To implement the Factorization Machine (FM) regression prediction, we need to follow the given formula and ensure that our implementation works efficiently for any number of samples, features, and latent factors. We'll use NumPy for numerical computations to handle the matrix operations effectively.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Initialize predictions with the global bias\n    predictions = np.full(n_samples, w0)\n    \n    # Add linear term to predictions\n    predictions += X @ w\n    \n    # Calculate the pairwise interaction term\n    V_times_X = X @ V\n    sum_of_squares = np.sum(V_times_X**2, axis=1)\n    square_of_sums = np.sum(V_times_X, axis=1)**2\n    interaction_term = 0.5 * (square_of_sums - sum_of_squares)\n    \n    # Add interaction term to predictions\n    predictions += interaction_term\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 0, 1], [0, 1, 1]]\n# w0 = 0.1\n# w = [0.5, 0.3, 0.2]\n# V = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\n# print(fm_predict(X, w0, w, V))\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists to NumPy arrays to leverage efficient matrix operations.\n2. **Global Bias**: We initialize the predictions with the global bias term `w0`.\n3. **Linear Term**: We compute the linear term by taking the dot product of the feature matrix `X` and the weight vector `w`.\n4. **Pairwise Interaction Term**:\n   - Compute `V_times_X`, which is the matrix product of `X` and `V`.\n   - Calculate the sum of squares of each row in `V_times_X`.\n   - Calculate the square of the sum of each row in `V_times_X`.\n   - The interaction term is then computed as `0.5 * (square_of_sums - sum_of_squares)`.\n5. **Final Predictions**: We add the interaction term to the linear term and round the results to 4 decimal places.\n6. **Return**: The function returns the predictions as a list of floats.\n\nThis implementation ensures that the FM prediction is computed efficiently for any number of samples, features, and latent factors."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the `sigmoid` function according to the specified requirements, we need to handle different types of inputs: scalars, lists/tuples, and NumPy arrays. Additionally, we must ensure numerical stability for very large or small values of `z`. Here's how you can achieve this:\n\n1. **Scalar Input**: If `z` is a scalar, compute the sigmoid directly and return the result rounded to four decimal places.\n2. **List/Tuple Input**: Convert the list or tuple to a NumPy array, compute the sigmoid, and then convert the result back to a list.\n3. **NumPy Array Input**: Compute the sigmoid directly on the array.\n4. **Numerical Stability**: Use the property that for large positive `z`, `sigmoid(z)` approaches 1, and for large negative `z`, it approaches 0. This can be handled using conditional checks.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Handle scalar input\n        if z > 700:\n            return 1.0\n        elif z < -700:\n            return 0.0\n        else:\n            return round(1 / (1 + np.exp(-z)), 4)\n    \n    # Convert list/tuple to numpy array\n    z_array = np.array(z)\n    \n    # Apply sigmoid function element-wise\n    sigmoid_values = 1 / (1 + np.exp(-z_array))\n    \n    # Round to four decimal places\n    sigmoid_values_rounded = np.round(sigmoid_values, 4)\n    \n    # Convert back to list if input was not a NumPy array\n    if isinstance(z, (list, tuple)):\n        return sigmoid_values_rounded.tolist()\n    \n    return sigmoid_values_rounded\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n- **Scalar Handling**: Direct computation with checks for large `z` values to avoid overflow.\n- **Array Handling**: Conversion to NumPy array for vectorized operations, followed by rounding and conversion back to list if necessary.\n- **Numerical Stability**: Special cases for `z > 700` and `z < -700` ensure that the function does not overflow and returns the correct limit values.\n\nThis implementation ensures that the function works correctly for all specified input types and maintains numerical stability."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        # Convert actual if it's one-hot encoded\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Convert predicted if it's one-hot encoded\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # If z is a scalar, compute the gradient and round it\n        return round(z * (1 - z), 4)\n    \n    # Convert the input to a NumPy array for element-wise operations\n    z_array = np.array(z)\n    \n    # Compute the gradient element-wise\n    gradient_array = z_array * (1 - z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_gradient_array = np.round(gradient_array, 4)\n    \n    # Convert the result back to the original type (list or tuple)\n    if isinstance(z, list):\n        # If the input was a list, convert the array back to a list\n        return rounded_gradient_array.tolist()\n    elif isinstance(z, tuple):\n        # If the input was a tuple, convert the array back to a tuple\n        return tuple(rounded_gradient_array.tolist())\n    \n    # If the input was a NumPy array, return the array directly\n    return rounded_gradient_array\n\n# Example usage:\nprint(sigmoid_grad(0.5))  # Output: 0.25\nprint(sigmoid_grad([0.1, 0.9]))  # Output: [0.09, 0.009]\nprint(sigmoid_grad(np.array([[0.2, 0.8], [0.3, 0.7]])))  # Output: [[0.16, 0.019999999999999996], [0.21, 0.02]]\n```\n\nThis function handles various types of inputs, including scalars, lists, and NumPy arrays, and returns the gradient of the sigmoid function rounded to four decimal places. It maintains the structure of the input, returning a float for scalars and a list or NumPy array for other types."}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create two equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a mesh grid from these arrays\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier processing\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Calculate the decision boundary values\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back into a grid\n    labels_grid = labels_flat.reshape(grid_n, grid_n)\n    \n    # Convert the NumPy array to a Python list of lists\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis function generates a grid of predictions for a 2-D linear classifier using the provided weight vector `W`, bias `b`, and original data set `X`. The grid is created by first determining the range of the data in each dimension, then generating equally spaced points within these ranges. The classifier's decision boundary is evaluated at each grid point, and the results are stored in a 2-D list."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Training phase\n    # Separate the training data into two classes\n    X_class_0 = X_train[y_train == 0]\n    X_class_1 = X_train[y_train == 1]\n    \n    # Calculate means and standard deviations for each feature in both classes\n    mean_0 = np.mean(X_class_0, axis=0)\n    std_0 = np.std(X_class_0, axis=0) + epsilon\n    mean_1 = np.mean(X_class_1, axis=0)\n    std_1 = np.std(X_class_1, axis=0) + epsilon\n    \n    # Calculate class priors\n    prior_0 = len(X_class_0) / len(y_train)\n    prior_1 = len(X_class_1) / len(y_train)\n    \n    # Prediction phase\n    predictions = []\n    for x in X_test:\n        # Calculate the likelihood for each class\n        likelihood_0 = np.prod((1 / (np.sqrt(2 * np.pi) * std_0)) * \n                                np.exp(-0.5 * ((x - mean_0) ** 2 / std_0 ** 2)))\n        likelihood_1 = np.prod((1 / (np.sqrt(2 * np.pi) * std_1)) * \n                                np.exp(-0.5 * ((x - mean_1) ** 2 / std_1 ** 2)))\n        \n        # Calculate the posterior probabilities\n        posterior_0 = likelihood_0 * prior_0\n        posterior_1 = likelihood_1 * prior_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\nThis implementation of the Gaussian Naive Bayes classifier follows the steps outlined in the task description. It calculates the mean and standard deviation for each feature in both classes during the training phase and uses these parameters to compute the posterior probabilities for each test sample during the prediction phase. The class with the higher posterior probability is chosen as the predicted class for each sample."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for a binary classification problem.\n\n    Parameters:\n    AL (np.ndarray): The predicted probabilities of shape (1, m) or (m,).\n    Y (np.ndarray): The true binary labels of shape (1, m) or (m,).\n\n    Returns:\n    float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n\n    # Clip the probabilities to avoid numerical overflow\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n\n    # Calculate the cost\n    m = AL.shape[1]\n    cost = (-1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n\n    # Return the cost as a plain Python float\n    return float(np.round(cost, 4))\n```\n\nThis function `compute_cost` takes two NumPy arrays `AL` and `Y`, computes the binary cross-entropy cost using the provided formula, and returns the result as a plain Python float rounded to four decimal places. The clipping of probabilities ensures numerical stability by preventing values too close to zero or one from causing issues with the logarithm function."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    \n    # Extract HMM parameters\n    pi = hmm['pi']  # Initial state distribution\n    A = hmm['A']    # Transition matrix\n    B = hmm['B']    # Emission matrix\n    \n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= num_observations:\n        return []\n    \n    # Step 1: Compute forward probabilities \u03b1\n    alpha = np.zeros((num_observations, num_states))\n    \n    # Initialize \u03b1 for t=0\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Compute \u03b1 for t > 0\n    for time_step in range(1, num_observations):\n        alpha[time_step] = (alpha[time_step - 1].dot(A)) * B[:, observations[time_step]]\n    \n    # Step 2: Compute backward probabilities \u03b2\n    beta = np.zeros((num_observations, num_states))\n    \n    # Initialize \u03b2 for t=T-1\n    beta[-1] = np.ones(num_states)\n    \n    # Compute \u03b2 for t < T-1\n    for time_step in range(num_observations - 2, -1, -1):\n        beta[time_step] = (beta[time_step + 1] * B[:, observations[time_step + 1]]).dot(A.T)\n    \n    # Step 3: Compute \u03b3\u209c\n    gamma_t = (alpha[t] * beta[t]) / np.sum(alpha[t] * beta[t])\n    \n    # Round to four decimal places\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n    \n    return gamma_t_rounded\n```\n\nThis function implements the forward-backward algorithm to compute the posterior state distribution \\( \\gamma_t \\) for a given Hidden Markov Model (HMM), observation sequence, and time index \\( t \\). It ensures that the probabilities are rounded to four decimal places before returning them."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbors(point_index, eps):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n\n    for point_index in range(n_samples):\n        if labels[point_index] != -1:  # Skip already labeled points\n            continue\n\n        neighbors = get_neighbors(point_index, eps)\n        if len(neighbors) < min_samples:\n            continue  # Point is noise\n\n        # Found a core point, start a new cluster\n        cluster_id += 1\n        labels[point_index] = cluster_id\n        queue = deque(neighbors)\n\n        while queue:\n            current_point_index = queue.popleft()\n            if labels[current_point_index] == -1:  # Unlabeled point\n                labels[current_point_index] = cluster_id\n                current_neighbors = get_neighbors(current_point_index, eps)\n                if len(current_neighbors) >= min_samples:\n                    queue.extend(current_neighbors)\n\n    return labels\n```\n\nThis implementation of the DBSCAN algorithm follows the steps outlined in the task description. It computes the Euclidean distance between points, builds neighborhood lists, identifies core points, and expands clusters using a breadth-first search (BFS). Points that are not part of any cluster are labeled as noise."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Gaussian Mixture Model (GMM) using the Expectation-Maximization (EM) algorithm, we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters of the Gaussian components, including the mixture weights, means, and covariance matrices.\n2. **Expectation (E) Step**: Compute the responsibilities, which represent the probability that each sample belongs to each Gaussian component.\n3. **Maximization (M) Step**: Update the parameters of the Gaussian components based on the responsibilities computed in the E step.\n4. **Convergence Check**: Repeat the E and M steps until the change in mixture weights is smaller than a prescribed tolerance or the maximum number of iterations is reached.\n5. **Assignment**: Assign each sample to the component with the highest posterior probability.\n6. **Deterministic Output**: Sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nHere's the implementation of the `gmm_em` function:\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: The maximum number of iterations for the EM algorithm.\n    - epsilon: The tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialization\n    # Randomly initialize mixture weights\n    weights = np.random.rand(k)\n    weights /= np.sum(weights)\n    \n    # Randomly initialize means\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    \n    # Randomly initialize full covariance matrices\n    covariances = [np.eye(n_features) for _ in range(k)]\n    \n    # Step 2: EM Algorithm\n    for _ in range(max_iter):\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((n_samples, k))\n        for j in range(k):\n            diff = data - means[j]\n            exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[j]) * diff, axis=1)\n            responsibilities[:, j] = weights[j] * np.exp(exponent) / np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[j]))\n        \n        # Normalize responsibilities\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.sum(axis=0) / n_samples\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True).T\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_sum = np.dot(responsibilities[:, j] * diff.T, diff)\n            new_covariances.append(weighted_sum / responsibilities[:, j].sum())\n        \n        # Check for convergence\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Step 3: Assignment\n    responsibilities = np.zeros((n_samples, k))\n    for j in range(k):\n        diff = data - means[j]\n        exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[j]) * diff, axis=1)\n        responsibilities[:, j] = weights[j] * np.exp(exponent) / np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[j]))\n    \n    # Assign each sample to the component with the highest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Deterministic Output\n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    label_map = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    labels = [label_map[label] for label in labels]\n    \n    return labels\n```\n\nThis implementation follows the described steps and ensures that the output is deterministic by sorting the components by their mean values. The function returns a list of cluster labels for each sample."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Step 1: Build the similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_dist_sq = np.sum(data[:, np.newaxis] - data[np.newaxis, :], axis=2) ** 2\n    W = np.exp(-gamma * pairwise_dist_sq)\n\n    # Step 2: Construct the un-normalized Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        # Step 2b: Construct the symmetric normalized Laplacian L_sym = D^(-1/2) * L * D^(-1/2)\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.sum(W, axis=1)))\n        L_sym = D_inv_sqrt @ L @ D_inv_sqrt\n        L = L_sym\n\n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    if method == 'normalized':\n        # Row-normalize the eigenvector matrix\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    X_transformed = eigenvectors[:, :n_cluster]\n\n    # Step 4: Run k-means in the eigenvector space\n    from sklearn.cluster import KMeans\n    kmeans = KMeans(n_clusters=n_cluster, init='k-means++', random_state=0)\n    kmeans.fit(X_transformed)\n    labels = kmeans.labels_\n\n    # Step 5: Relabel clusters so that the cluster containing the smallest original index gets label 0, etc.\n    unique_indices = np.unique(data, axis=0)\n    min_index_labels = []\n    for idx in unique_indices:\n        min_idx = np.argmin(np.linalg.norm(data - idx, axis=1))\n        min_index_labels.append(labels[min_idx])\n\n    relabeled_labels = np.array([min_index_labels.index(label) for label in labels])\n\n    return relabeled_labels.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description. It constructs a similarity graph using a Gaussian kernel, computes the appropriate Laplacian matrix, finds the eigenvectors corresponding to the smallest eigenvalues, and then applies k-means clustering in the transformed eigenvector space. Finally, it relabels the clusters to ensure that the cluster containing the smallest original index is labeled as 0."}
{"task_id": 563, "completion_id": 0, "completion": "Here's the implementation of the dual-form Perceptron learning algorithm as described:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(X_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix\n    G = np.dot(X_data, X_data.T)\n    \n    converged = False\n    for _ in range(max_iter):\n        num_updates = 0\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                num_updates += 1\n        if num_updates == 0:\n            converged = True\n            break\n    \n    # Recover the weight vector\n    w = np.sum(alpha.reshape(-1, 1) * y_data.reshape(-1, 1) * X_data, axis=0)\n    \n    # Round the results\n    w = [round(weight, 4) for weight in w]\n    b = round(b, 4)\n    \n    return w, b\n```\n\n### Explanation:\n1. **Initialization**: We initialize `alpha` to a zero vector of size `N` (number of samples) and `b` to 0.\n2. **Gram Matrix**: We compute the Gram matrix `G` where each element `G[i, j]` is the dot product of `X_data[i]` and `X_data[j]`.\n3. **Training Loop**: We iterate over the data up to `max_iter` times. For each sample `i`, we compute the value `g` as the sum of `alpha[j] * y_data[j] * G[j, i]` for all `j`. If the condition `y_data[i] * (g + b) <= 0` is met, we update `alpha[i]` and `b`.\n4. **Convergence Check**: If no updates are made during a full pass over the data, the algorithm has converged, and we break out of the loop.\n5. **Weight Recovery**: After training, we recover the weight vector `w` using the formula `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62`.\n6. **Rounding**: Finally, we round each component of `w` and `b` to 4 decimal places before returning them.\n\nThis implementation ensures that the dual-form Perceptron algorithm is followed exactly as specified."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    def traverse(node):\n        if node.y is not None:\n            return node.y\n        \n        if task_type == 'classification':\n            feature_value = features[node.label]\n            for child in node.child:\n                if child.x == feature_value:\n                    return traverse(child)\n            # Default to the second child if no match is found\n            return traverse(node.child[1])\n        \n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                return traverse(node.child[0])\n            else:\n                return traverse(node.child[1])\n    \n    return traverse(root)\n```\n\nThis function `predict_sample` takes the root of a decision tree, a list or tuple of feature values, and the task type ('classification' or 'regression') as inputs. It traverses the tree according to the rules specified for classification and regression trees and returns the value stored in the reached leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the `choose_best_feature` function, we need to calculate the information gain for each feature and select the one that provides the highest gain. The information gain is calculated using the formula:\n\n\\[ IG(A) = H(y) - H(y|A) \\]\n\nWhere:\n- \\( H(y) \\) is the entropy of the entire dataset.\n- \\( H(y|A) \\) is the conditional entropy of the dataset given the feature \\( A \\).\n\nHere's the step-by-step implementation:\n\n1. **Calculate Entropy \\( H(y) \\)**:\n   - Entropy is a measure of the uncertainty in the dataset. It is calculated as:\n     \\[\n     H(y) = -\\sum_{i=0}^{C-1} p(c_i) \\log_2(p(c_i))\n     \\]\n     where \\( C \\) is the number of classes, and \\( p(c_i) \\) is the probability of class \\( c_i \\).\n\n2. **Calculate Conditional Entropy \\( H(y|A) \\)**:\n   - For each feature \\( A \\), split the dataset based on its values and calculate the entropy for each subset.\n   - The conditional entropy is then the weighted sum of these entropies:\n     \\[\n     H(y|A) = \\sum_{v} \\frac{|S_v|}{|S|} H(y|A=v)\n     \\]\n     where \\( S_v \\) is the subset of the dataset where feature \\( A \\) has value \\( v \\), and \\( |S| \\) is the total number of samples.\n\n3. **Calculate Information Gain**:\n   - For each feature, compute the information gain using the formula above and select the feature with the highest gain.\n\n4. **Return the Best Feature**:\n   - If multiple features have the same information gain, return the feature with the smallest index.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    n_samples, n_features = X.shape\n    best_feature_index = -1\n    max_information_gain = -float('inf')\n    \n    # Calculate the entropy of the target variable\n    H_y = entropy(y)\n    \n    for feature_index in range(n_features):\n        # Calculate the conditional entropy H(y|A)\n        H_y_given_A = 0.0\n        feature_values, feature_counts = np.unique(X[:, feature_index], return_counts=True)\n        \n        for value, count in zip(feature_values, feature_counts):\n            # Get the subset of labels for the current feature value\n            subset_labels = y[X[:, feature_index] == value]\n            # Calculate the entropy of the subset\n            H_y_given_A += (count / n_samples) * entropy(subset_labels)\n        \n        # Calculate the information gain\n        information_gain = H_y - H_y_given_A\n        \n        # Update the best feature if this one has a higher gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    # Return the best feature index and the maximum information gain rounded to 6 decimal places\n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 1, 1]])\n# y = np.array([0, 1, 0, 1])\n# print(choose_best_feature(X, y))  # Output: (0, 0.5)\n```\n\nThis function will correctly compute the information gain for each feature and return the feature with the highest gain, rounded to six decimal places. If there are ties, it will return the feature with the smallest index."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def path_length(x, node):\n        if node is None:\n            return 0\n        if len(node['data']) == 1:\n            return c(len(node['data']))\n        \n        feature = node['feature']\n        threshold = node['threshold']\n        \n        if x[feature] < threshold:\n            return 1 + path_length(x, node['left'])\n        else:\n            return 1 + path_length(x, node['right'])\n    \n    def build_tree(data, depth=0, height_limit=None):\n        if height_limit is None:\n            height_limit = math.ceil(math.log2(len(data)))\n        \n        if depth >= height_limit or len(data) <= 1:\n            return {'data': data}\n        \n        feature = np.random.randint(data.shape[1])\n        min_val = np.min(data[:, feature])\n        max_val = np.max(data[:, feature])\n        threshold = np.random.uniform(min_val, max_val)\n        \n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        \n        node = {\n            'feature': feature,\n            'threshold': threshold,\n            'left': build_tree(left_data, depth + 1, height_limit),\n            'right': build_tree(right_data, depth + 1, height_limit)\n        }\n        \n        return node\n    \n    n_samples = data.shape[0]\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    \n    scores = np.zeros(n_samples)\n    \n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[subsample_indices]\n        \n        tree = build_tree(subsample)\n        \n        for i in range(n_samples):\n            scores[i] += path_length(data[i], tree)\n    \n    scores /= n_trees\n    scores = 2 ** (-scores / phi)\n    \n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores >= threshold)[0].tolist()\n    outliers.sort()\n    \n    return outliers\n```\n\nThis implementation of the mini Isolation Forest for outlier detection follows the specified requirements. It includes the construction of random isolation trees, the computation of path lengths, and the conversion of these lengths into anomaly scores. The function returns the indices of the detected outliers, sorted in increasing order."}
{"task_id": 568, "completion_id": 0, "completion": "To implement the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow these steps:\n\n1. **Feature Extraction**: Identify all unique (feature_index, feature_value, label) pairs from the training data.\n2. **Empirical Distributions**: Compute the empirical distribution of each (feature_index, feature_value, label) pair.\n3. **Initial Weights**: Initialize weights for each (feature_index, feature_value, label) pair.\n4. **GIS Algorithm**: Iteratively update the weights until convergence or the maximum number of iterations is reached.\n5. **Prediction**: Use the learned weights to predict the most likely label for each sample in the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Extract all unique (feature_index, feature_value, label) pairs\n    feature_value_label_pairs = set()\n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            if v != 0:  # Treat feature as present only if it has a non-zero value\n                feature_value_label_pairs.add((i, v, y))\n    \n    # Step 2: Compute empirical distributions\n    empirical_counts = defaultdict(float)\n    total_counts = defaultdict(float)\n    \n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            if v != 0:\n                empirical_counts[(i, v, y)] += 1\n                total_counts[y] += 1\n    \n    empirical_dists = {pair: count / total_counts[y] for pair, count in empirical_counts.items()}\n    \n    # Step 3: Initialize weights\n    weights = {pair: 0.0 for pair in feature_value_label_pairs}\n    \n    # Step 4: GIS Algorithm\n    for _ in range(n_iter):\n        # Compute the current conditional probabilities\n        conditional_probs = defaultdict(lambda: defaultdict(float))\n        \n        for x, y in zip(X_train, y_train):\n            z_x = 0.0\n            for i, v in enumerate(x):\n                if v != 0:\n                    z_x += sum(math.exp(weights[(i, v, y)]) for y in set(y_train))\n            \n            for i, v in enumerate(x):\n                if v != 0:\n                    for y in set(y_train):\n                        conditional_probs[(x, y)][(i, v, y)] = math.exp(weights[(i, v, y)]) / z_x\n        \n        # Update weights\n        max_update = 0.0\n        for pair in feature_value_label_pairs:\n            i, v, y = pair\n            update = empirical_dists[pair] - sum(\n                conditional_probs[x][pair] for x in X_train if x[i] == v\n            )\n            weights[pair] += update\n            max_update = max(max_update, abs(update))\n        \n        if max_update < epsilon:\n            break\n    \n    # Step 5: Prediction\n    predictions = []\n    for x in X_test:\n        scores = defaultdict(float)\n        for i, v in enumerate(x):\n            if v != 0:\n                for y in set(y_train):\n                    scores[y] += weights[(i, v, y)]\n        \n        predicted_label = max(scores, key=scores.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n- **Feature Extraction**: We iterate over the training data to collect all unique (feature_index, feature_value, label) pairs.\n- **Empirical Distributions**: We compute the empirical distribution for each pair by counting how often each pair appears in the training data relative to the total occurrences of each label.\n- **Initial Weights**: We initialize all weights to zero.\n- **GIS Algorithm**: We iteratively update the weights by comparing the empirical distribution with the current conditional distribution. The update is based on the difference between these distributions.\n- **Prediction**: For each test sample, we compute the score for each label by summing the weights of the relevant feature-value-label pairs and choose the label with the highest score.\n\nThis implementation ensures that the Maximum Entropy Classifier is trained using the GIS algorithm and can predict labels for new samples."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_documents = len(data)\n    \n    # Initialize a counter for word occurrences\n    word_counter = Counter()\n    \n    # Initialize a set to track words present in each document\n    word_set = set()\n    \n    # Iterate over each document\n    for _, words in data:\n        # Update the word counter\n        word_counter.update(words)\n        # Add words to the set of words seen in this document\n        word_set.update(words)\n    \n    # Calculate the document-frequency ratio for each word\n    df_ratios = [(word, round(count / num_documents, 4)) for word, count in word_counter.items()]\n    \n    # Sort the list of (word, ratio) pairs by ratio in descending order\n    df_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the number of words to include in the set\n    if cut_off is None:\n        top_words = set(word for word, _ in df_ratios)\n    else:\n        top_words = set(word for word, _ in df_ratios[:cut_off])\n    \n    return df_ratios, top_words\n```\n\nThis implementation follows the requirements specified in the task description. It calculates the document-frequency ratio for each word across a collection of documents and returns both a sorted list of these ratios and a set of the most common words based on the `cut_off` parameter. The ratios are rounded to four decimal places as required."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Calculate the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Calculate the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the results to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis function calculates the weight vector `w` and the bias term `b` for a linear SVM using the given formulas. It then rounds these values to four decimal places and returns them as a tuple `(w_list, b)`. The weight vector `w` is converted to a Python list before returning."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm.\"\"\"\n    \n    # Step 1: Compute the full pairwise Euclidean distance matrix\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(data[i] - data[j])\n            distance_matrix[i, j] = dist\n            distance_matrix[j, i] = dist\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbors N_k(p)\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [[] for _ in range(n_samples)]\n    \n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances[i] = distances[sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k+1]\n    \n    # Step 3: Define the reachability distance between two points\n    def reach_dist_k(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Calculate the Local Reachability Density (LRD) of p\n    lrd = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        sum_reach_dist = sum(reach_dist_k(i, q) for q in k_neighbors[i])\n        lrd[i] = k / sum_reach_dist\n    \n    # Step 5: Calculate the Local Outlier Factor (LOF)\n    lof_scores = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        sum_lrd_ratio = sum(lrd[q] / lrd[i] for q in k_neighbors[i])\n        lof_scores[i] = sum_lrd_ratio / k\n    \n    # Round the LOF scores to 4 decimal places\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    \n    # Find the indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = [i for i, score in enumerate(lof_scores) if score > epsilon]\n    outlier_indices_sorted = sorted(outlier_indices)\n    \n    return lof_scores_rounded, outlier_indices_sorted\n```\n\nThis implementation follows the steps outlined in the problem description to compute the Local Outlier Factor (LOF) scores and identify outliers based on the given `epsilon` value. The code ensures that all necessary calculations are performed manually without relying on external libraries like `scipy` or `sklearn`."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.extend(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n        \n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.extend(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    y_train = np.array(y_train)\n    X_val = np.round(np.array(X_val), 4)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis function generates synthetic 2-D data for a specified number of classes (`m`), with each class having a specified number of training (`n_train`) and validation (`n_val`) points. The coordinates of the points are sampled from a uniform distribution within a specific range determined by the class label. The function ensures reproducibility by using a random seed if provided. The coordinates in the returned arrays are rounded to 4 decimal places."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Initialize the first k points as the initial centers\n    centers = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assignment step: Assign each point to the nearest center\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centers, axis=1)\n            nearest_center_index = np.argmin(distances)\n            labels.append(nearest_center_index)\n        \n        # Update step: Recompute the centers\n        new_centers = np.zeros_like(centers)\n        counts = np.zeros(k, dtype=int)\n        \n        for i, label in enumerate(labels):\n            new_centers[label] += X[i]\n            counts[label] += 1\n        \n        # Avoid division by zero if a center has no points assigned to it\n        for i in range(k):\n            if counts[i] == 0:\n                continue\n            new_centers[i] /= counts[i]\n        \n        # Check for convergence\n        if np.allclose(centers, new_centers, atol=1e-9):\n            break\n        \n        centers = new_centers\n    \n    # Round the centers to 4 decimal places\n    centers = np.round(centers, 4).tolist()\n    \n    return labels, centers\n```\n\nThis implementation follows the classical K-Means algorithm as described. It initializes the centers using the first `k` points, then iteratively assigns points to the nearest center and updates the centers based on the mean of the assigned points. The process stops when the centers no longer change significantly or when the maximum number of iterations is reached. The centers are rounded to four decimal places before returning."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Initialize weights and bias\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    \n    # Check if learning rate or iterations are zero\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n    \n    # Perform gradient descent\n    for _ in range(iterations):\n        # Compute predictions\n        predictions = np.dot(X, weights) + bias\n        \n        # Compute residuals\n        residuals = y - predictions\n        \n        # Compute gradients\n        gradient_weights = -2 * np.dot(X.T, residuals) / m\n        gradient_bias = -2 * np.sum(residuals) / m\n        \n        # Add L1 and L2 penalties\n        gradient_weights += l1_penalty * np.sign(weights)\n        gradient_weights += 2 * l2_penalty * weights\n        \n        # Update weights and bias\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    \n    # Round the results to 4 decimal places\n    weights_rounded = [round(w, 4) for w in weights]\n    bias_rounded = round(bias, 4)\n    \n    return weights_rounded, bias_rounded\n```\n\nThis implementation of Elastic-Net Regression from scratch includes the initialization of weights and bias, checks for edge cases where the learning rate or number of iterations is zero, and performs the specified number of gradient descent iterations. The gradients are computed according to the provided formulas, including the L1 and L2 penalties. Finally, the results are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    \n    def relu(x):\n        return np.maximum(0, x)\n    \n    # Add bias term to the input\n    current_input = np.array([1] + x)\n    \n    # Iterate over each layer\n    for L in range(len(weights)):\n        # Perform dot product with the weight matrix\n        next_input = np.dot(current_input, weights[L])\n        \n        # Apply ReLU activation if it's not the last layer\n        if L < len(weights) - 1:\n            next_input = relu(next_input)\n        \n        # Update current input\n        current_input = next_input\n    \n    # Round the final output to four decimal places\n    if len(current_input) == 1:\n        return round(float(current_input[0]), 4)\n    else:\n        return [round(float(val), 4) for val in current_input]\n```"}
{"task_id": 595, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each sample to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Update each centroid to the mean of the assigned samples\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 5: Sort the centroids in ascending lexicographical order and round them to 4 decimal places\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = np.round(sorted_centroids, 4)\n    \n    return rounded_centroids.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\n### Explanation:\n\n1. **Initialization**: The centroids are initialized using the first `k` samples from the input data `X`.\n\n2. **Assignment Step**: For each sample in `X`, we calculate the squared Euclidean distance to each centroid and assign the sample to the nearest centroid.\n\n3. **Update Step**: We update each centroid to be the mean of all samples assigned to it. If a cluster becomes empty, the centroid remains unchanged.\n\n4. **Convergence Check**: We check if the centroids have moved less than `1e-4` in any direction. If so, we stop the iterations early.\n\n5. **Sorting and Rounding**: After convergence, we sort the centroids lexicographically and round each coordinate to four decimal places.\n\nThis implementation ensures that the centroids are computed correctly according to the given requirements."}
