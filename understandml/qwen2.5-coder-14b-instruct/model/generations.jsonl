{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularized) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: A 2D numpy array where the last column is the target y and all preceding columns are the features X.\n    - alpha: The regularization strength (non-negative float).\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places.\n      If the matrix (X^T X + alpha * I) is not invertible, returns -1.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept)\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Compute the matrix (X^T X + alpha * I)\n    m, n = X_b.shape\n    I = np.eye(n)\n    A = X_b.T.dot(X_b) + alpha * I\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector\n    w = np.linalg.inv(A).dot(X_b.T).dot(y)\n    \n    # Round the coefficients to 4 decimal places and return as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# print(ridge_regression(data, alpha=0.1))\n```\n\nThis code defines a function `ridge_regression` that takes a 2D numpy array `data` and a regularization strength `alpha`. It separates the features and target, adds a bias term to the features, and computes the weight vector using the closed-form solution for Ridge Regression. If the matrix used in the computation is not invertible, it returns `-1`. Otherwise, it returns the weight vector rounded to four decimal places as a list."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the problem description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n\n    while update_count < n_iter:\n        all_correct = True\n        for i in range(n_samples):\n            # Compute the activation using the current alpha values\n            activation = np.dot(alpha * y_train, np.dot(X_train, X_train[i]))\n            # Test the margin\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                all_correct = False\n                break\n        if all_correct:\n            break\n        update_count += 1\n\n    # Compute the primal weight vector w from the final alpha\n    w = np.dot(alpha * y_train, X_train)\n\n    return [round(weight, 4) for weight in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([1, -1, 1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the dual parameters `alpha` to zero and the bias `b` to zero.\n2. **Training Loop**: We iterate over the training samples. For each sample, we compute the activation using the current `alpha` values and the Gram matrix (inner products of samples).\n3. **Margin Check**: If the margin (product of the label and the activation plus bias) is less than or equal to zero, the sample is misclassified. We update the corresponding `alpha` and `b`.\n4. **Restart Condition**: If any sample is misclassified, we restart the scan from the beginning. This ensures that all samples are correctly classified before moving on.\n5. **Termination**: The loop terminates either when no updates are made in a full pass over the data or after reaching the maximum number of updates (`n_iter`).\n6. **Compute Primal Weights**: After training, we compute the primal weight vector `w` from the final `alpha` values.\n7. **Rounding**: Finally, we round the components of `w` and `b` to four decimal places before returning them.\n\nThis implementation ensures that the dual-form perceptron algorithm is correctly applied, and it handles the constraints provided in the problem statement."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    \n    def identity_link(mu):\n        return mu\n    \n    def identity_inv_link(eta):\n        return eta\n    \n    def identity_derivative(mu):\n        return np.ones_like(mu)\n    \n    def log_link(mu):\n        return np.log(mu)\n    \n    def log_inv_link(eta):\n        return np.exp(eta)\n    \n    def log_derivative(mu):\n        return 1 / mu\n    \n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n    \n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n    \n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    \n    links = {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n    \n    return links\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"Link:\", np.round(eta, 4))\nprint(\"Inverse Link:\", np.round(mu2, 4))\n```\n\nThis code defines the `glm_links` function, which returns a dictionary of link functions for the identity, log, and logit links used in Generalized Linear Models (GLMs). Each link function includes the link itself, its inverse, and its derivative, all designed to work with numpy scalars and arrays. The example usage demonstrates how to use these functions to transform and invert values between the linear predictor space and the expected value space."}
{"task_id": 3, "completion_id": 0, "completion": "To solve the problem of computing the path lengths in an isolation tree, we need to follow the steps outlined in the task description. Here's a step-by-step breakdown of how to implement this:\n\n1. **Initialize the Tree Growth**: Start with the entire dataset and recursively split it until each leaf node contains fewer than three samples.\n2. **Random Splitting**: For each node, randomly select a feature and a threshold within the range of that feature's values to split the data.\n3. **Record Depths**: As you build the tree, keep track of the depth at which each sample reaches a leaf node.\n4. **Reproducibility**: Ensure that the random splits are reproducible by setting the random seed to 0.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def grow_tree(indices, depth):\n        if len(indices) < 3:\n            return [depth] * len(indices)\n        \n        f = np.random.randint(0, data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        \n        left_depths = grow_tree(left_indices, depth + 1)\n        right_depths = grow_tree(right_indices, depth + 1)\n        \n        return left_depths + right_depths\n    \n    indices = np.arange(data.shape[0])\n    depths = grow_tree(indices, 0)\n    return depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\n### Explanation:\n\n- **Random Seed**: We set `np.random.seed(0)` to ensure that the random splits are reproducible.\n- **Recursive Tree Growth**: The `grow_tree` function recursively splits the data until each leaf node contains fewer than three samples. It returns a list of depths for the samples that reach each leaf.\n- **Depth Calculation**: The depth of each sample is tracked by passing the current depth into the recursive calls.\n- **Feature and Threshold Selection**: For each node, a random feature is chosen, and a random threshold within the feature's range is selected to split the data.\n\nThis implementation should correctly compute the path lengths for each sample in the input data matrix, following the rules specified for isolation trees."}
{"task_id": 4, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the squared norms of each sample\n    squared_norms = np.sum(X ** 2, axis=1)\n\n    # Compute the dot product matrix\n    dot_product_matrix = np.dot(X, X.T)\n\n    # Compute the squared Euclidean distances using the formula\n    D = squared_norms[:, np.newaxis] + squared_norms - 2 * dot_product_matrix\n\n    # Round the distances to 4 decimal places\n    D_rounded = np.round(D, 4)\n\n    # Convert the result to a list of lists\n    return D_rounded.tolist()\n```\n\nThis implementation follows the instructions provided and uses vectorized operations to compute the pair-wise squared Euclidean distance matrix efficiently. The use of NumPy's broadcasting and matrix operations ensures that the computation runs in O(n_samples\u00b2) time, which is optimal for this task. The final result is rounded to four decimal places and converted to a standard Python nested list."}
{"task_id": 6, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    # Sum up the predictions from all trees\n    aggregated_predictions = sum(np.array(tree_pred) * (-learning_rate) for tree_pred in predictions)\n    \n    # Apply softmax transformation\n    def softmax(x):\n        e_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n        return e_x / e_x.sum(axis=1, keepdims=True)\n    \n    softmaxed_predictions = softmax(aggregated_predictions)\n    \n    # Get the predicted class labels\n    predicted_classes = np.argmax(softmaxed_predictions, axis=1).tolist()\n    \n    return predicted_classes\n```\n\nThis function takes a list of tree predictions and a learning rate, aggregates the predictions, applies a softmax transformation, and returns the predicted class labels for each sample."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of finding frequent itemsets in a given list of transactions, we can follow these steps:\n\n1. **Calculate the Minimum Support Threshold**: Given the minimum support threshold `minsup` as a fraction between 0 and 1, we need to calculate the minimum number of transactions that an itemset must appear in to be considered frequent. This is done by taking the ceiling of `minsup * N`, where `N` is the total number of transactions.\n\n2. **Generate Candidate Itemsets**: Start with individual items (1-itemsets) and iteratively generate larger itemsets (2-itemsets, 3-itemsets, etc.) by combining frequent itemsets from the previous iteration.\n\n3. **Count the Support of Each Itemset**: For each candidate itemset, count how many transactions contain all the items in the itemset.\n\n4. **Filter Frequent Itemsets**: Keep only those itemsets whose support count meets or exceeds the minimum support threshold.\n\n5. **Return the Result**: Store the frequent itemsets in a dictionary where the keys are tuples of sorted items and the values are their respective support counts.\n\nHere's the implementation of the above logic:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support threshold\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Initialize the dictionary to store frequent itemsets\n    frequent_itemsets = {}\n    \n    # Step 1: Find frequent 1-itemsets\n    item_counter = Counter(item for transaction in transactions for item in set(transaction))\n    for item, count in item_counter.items():\n        if count >= min_support_count:\n            frequent_itemsets[(item,)] = count\n    \n    # Step 2: Generate and check higher-order itemsets\n    k = 2\n    while frequent_itemsets:\n        # Generate candidate k-itemsets\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if len(itemset1) == k - 1 and len(itemset2) == k - 1:\n                    # Combine itemsets if they differ by exactly one item\n                    diff = set(itemset1) ^ set(itemset2)\n                    if len(diff) == 1:\n                        candidate = tuple(sorted(itemset1 + tuple(diff)))\n                        candidates.add(candidate)\n        \n        # Count the support of each candidate k-itemset\n        candidate_counter = Counter(\n            tuple(sorted(set(transaction) & set(candidate))) \n            for candidate in candidates \n            for transaction in transactions\n        )\n        \n        # Filter frequent k-itemsets\n        frequent_itemsets.clear()\n        for itemset, count in candidate_counter.items():\n            if count >= min_support_count:\n                frequent_itemsets[itemset] = count\n        \n        k += 1\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis code will correctly identify and return all frequent itemsets in the given transactions based on the specified minimum support threshold."}
{"task_id": 8, "completion_id": 0, "completion": "To implement binary logistic regression from scratch using batch gradient descent, we need to follow these steps:\n\n1. Initialize the weights and bias to zero.\n2. Compute the linear combination of the input features and weights, plus the bias.\n3. Apply the sigmoid function to convert the linear combination into a probability.\n4. Compute the loss using the binary cross-entropy loss function.\n5. Compute the gradients of the loss with respect to the weights and bias.\n6. Update the weights and bias using the gradients and the learning rate.\n7. Repeat steps 2-6 for the specified number of iterations.\n8. Use the trained model to predict the class labels for the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    # Add a column of ones to X_train for the bias term\n    X_train = np.column_stack((np.ones(X_train.shape[0]), X_train))\n    # Add a column of ones to X_test for the bias term\n    X_test = np.column_stack((np.ones(X_test.shape[0]), X_test))\n    \n    # Initialize weights and bias\n    n_features = X_train.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        # Compute the linear combination\n        z = np.dot(X_train, weights)\n        # Apply the sigmoid function\n        predictions = sigmoid(z)\n        \n        # Compute the gradient\n        error = predictions - y_train\n        gradient = np.dot(X_train.T, error) / len(y_train)\n        \n        # Update the weights\n        weights -= learning_rate * gradient\n    \n    # Predict on the test set\n    z_test = np.dot(X_test, weights)\n    predictions_test = sigmoid(z_test)\n    predicted_labels = [int(round(p)) for p in predictions_test]\n    \n    return predicted_labels\n```\n\n### Explanation:\n1. **Initialization**: We initialize the weights to zero and add a column of ones to both `X_train` and `X_test` to account for the bias term.\n2. **Sigmoid Function**: This function converts the linear combination into a probability between 0 and 1.\n3. **Gradient Descent**: For each iteration, we compute the linear combination, apply the sigmoid function, compute the error, calculate the gradient, and update the weights.\n4. **Prediction**: After training, we use the learned weights to predict the class labels for the test data by applying the sigmoid function and rounding the result.\n\nThis implementation should work for binary logistic regression without using any third-party ML libraries."}
{"task_id": 10, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\(\\tilde{X}_{t-1}\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\(X_t\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\(\\varepsilon\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    # Convert inputs to numpy arrays for easy broadcasting\n    prev_arr = np.array(prev)\n    cur_arr = np.array(cur)\n    weight_arr = np.array(weight)\n\n    # Ensure weight is within the valid range [0, 1]\n    if not ((0 <= weight_arr) & (weight_arr <= 1)).all():\n        raise ValueError(\"Weight must be between 0 and 1.\")\n\n    # Apply the smoothing formula\n    smoothed = weight_arr * prev_arr + (1 - weight_arr) * cur_arr\n\n    # Round to four decimal places\n    smoothed_rounded = np.round(smoothed, 4)\n\n    # Convert back to list if necessary\n    if isinstance(prev, (list, tuple)) or isinstance(cur, (list, tuple)) or isinstance(weight, (list, tuple)):\n        return smoothed_rounded.tolist()\n    else:\n        return float(smoothed_rounded)\n\n# Example usage:\n# print(smooth(10.0, 12.0, 0.8))  # Output: 10.4\n```\n\nThis implementation handles both scalar and vector inputs, applies the exponential smoothing formula, and ensures the result is rounded to four decimal places. The function also checks that the smoothing factor is within the valid range [0, 1]."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = data[:k].copy()\n    num_samples, num_features = data.shape\n    labels = np.zeros(num_samples, dtype=int)\n\n    for _ in range(max_iter):\n        # Assign each sample to the nearest centroid\n        for i in range(num_samples):\n            distances = np.sum((data[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Recompute centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(num_samples):\n            new_centroids[labels[i]] += data[i]\n            counts[labels[i]] += 1\n\n        # Handle empty clusters\n        for j in range(k):\n            if counts[j] == 0:\n                # Reinitialize empty cluster centroid with a random sample\n                new_centroids[j] = data[np.random.randint(num_samples)]\n\n        # Normalize new centroids\n        new_centroids /= counts[:, np.newaxis]\n\n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < epsilon):\n            break\n\n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places\n    centroids = np.round(centroids, 4).tolist()\n\n    return centroids, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centroids, labels = kmeans(data, k)\n# print(\"Centroids:\", centroids)\n# print(\"Labels:\", labels)\n```\n\nThis implementation of the K-Means clustering algorithm follows the specified requirements. It initializes centroids using the first `k` samples, assigns each sample to the nearest centroid based on squared Euclidean distance, updates centroids as the mean of assigned samples, and handles empty clusters by reinitializing them with random samples. The algorithm stops when the maximum change in centroids is less than `epsilon` or after `max_iter` iterations. Finally, it rounds the centroids to four decimal places before returning them along with the cluster labels."}
{"task_id": 12, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    M, N = frames.shape\n    power_spectra = []\n\n    for frame in frames:\n        # Compute the real FFT for the current frame\n        fft_result = np.fft.rfft(frame)\n        \n        # Compute the power spectrum by squaring the magnitude of the FFT result\n        power_spectrum_frame = np.abs(fft_result) ** 2\n        \n        # Optionally scale the power spectrum\n        if scale:\n            power_spectrum_frame /= (N // 2 + 1)\n        \n        # Round the power spectrum to 4 decimal places and append to the result list\n        power_spectra.append(np.round(power_spectrum_frame, 4).tolist())\n\n    return power_spectra\n```\n\nThis function processes each frame of the input signal, computes its power spectrum using the real FFT, optionally scales it, and returns the results as a list of lists rounded to four decimal places."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender in pure Python using NumPy, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                continue\n            \n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            \n            if criterion == 'cosine':\n                if np.std(v1) > 1e-3:\n                    v1 -= np.mean(v1)\n                if np.std(v2) > 1e-3:\n                    v2 -= np.mean(v2)\n                similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n            elif criterion == 'pearson':\n                similarity = np.corrcoef(v1, v2)[0, 1]\n            \n            S[i, j] = S[j, i] = similarity\n    \n    # Step 2: Collect the indices of the items the active user has already rated\n    rated_indices = np.where(data[user_ind, :] > 0)[0]\n    unrated_indices = np.where(data[user_ind, :] == 0)[0]\n    \n    if len(unrated_indices) == 0:\n        return []\n    \n    # Step 3: Compute the predicted attractiveness score for each unrated item\n    scores = {}\n    for t in unrated_indices:\n        numerator = 0\n        denominator = 0\n        for i in rated_indices:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n        \n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0\n    \n    # Step 4: Return the top k unrated items with the highest scores\n    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)\n    top_k_items = [item[0] for item in sorted_scores[:k]]\n    \n    return top_k_items\n```\n\n### Explanation:\n1. **Building the Item-Item Similarity Matrix (`S`)**:\n   - For each pair of items `(i, j)`, find the users who have rated both items.\n   - If there are no common users, set the similarity to 0.\n   - If using cosine similarity, mean-center the vectors if their standard deviation is greater than `1e-3`.\n   - Compute the cosine similarity or Pearson correlation based on the selected criterion.\n\n2. **Collecting Rated and Unrated Items**:\n   - Identify the items the active user has rated and those they haven't.\n\n3. **Predicting Attractiveness Scores**:\n   - For each unrated item, compute the predicted attractiveness score using the formula provided.\n\n4. **Returning the Top k Items**:\n   - Sort the unrated items by their predicted scores in descending order.\n   - Return the top `k` items.\n\nThis implementation ensures that the recommendations are based on the item similarities and the user's past ratings, adhering to the constraints and requirements specified."}
{"task_id": 14, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    # Calculate the sigmoid function\n    epsilon = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    \n    # Clip probabilities to avoid log(0)\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Calculate the loss for each sample\n    loss_i = - (y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Calculate the mean loss\n    mean_loss = np.mean(loss_i).round(4)\n    \n    # Calculate the gradient for each sample\n    gradient_i = p - y\n    \n    # Calculate the Hessian diagonal for each sample\n    hessian_i = p * (1 - p)\n    \n    return mean_loss, [g.round(4) for g in gradient_i], [h.round(4) for h in hessian_i]\n\n# Example usage:\n# y = np.array([0, 1, 0])\n# y_pred = np.array([-1.0, 1.0, 0.0])\n# mean_loss, gradient, hessian = logistic_loss_metrics(y, y_pred)\n# print(mean_loss, gradient, hessian)\n```\n\nThis function calculates the binary logistic loss, its gradient, and the Hessian diagonal for each sample. The results are rounded to four decimal places as required."}
{"task_id": 16, "completion_id": 0, "completion": "```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    if N > len(sequence):\n        return []\n    \n    return [tuple(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n\n# Example usage:\n# print(ngrams([1, 2, 3, 4], 2))  # Output: [(1, 2), (2, 3), (3, 4)]\n# print(ngrams(\"hello\", 3))        # Output: [('h', 'e', 'l'), ('e', 'l', 'l'), ('l', 'l', 'o')]\n# print(ngrams((1, 2, 3), 4))      # Output: []\n```\n\nThis implementation defines the `ngrams` function, which takes an iterable `sequence` and an integer `N`, and returns a list of tuples representing all contiguous N-grams of the sequence. The function checks if `N` is greater than the length of the sequence and returns an empty list in that case. Otherwise, it uses a list comprehension to generate the N-grams by slicing the sequence and converting each slice to a tuple."}
{"task_id": 17, "completion_id": 0, "completion": "To solve the problem of building a tree from parent lists, we need to follow these steps:\n\n1. **Identify the Root**: The root node is the one whose parent index is `-1`.\n2. **Build the Tree Structure**: We need to create a nested dictionary for each node, where each node contains its `item`, `count`, and a list of its `children`.\n3. **Maintain Order**: Ensure that children are added to their parent in the order they appear in the input lists.\n\nHere's the implementation of the `build_tree` function:\n\n```python\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items or not counts or not parents:\n        return {}\n\n    # Create a dictionary to hold the tree nodes\n    nodes = {}\n    \n    # Populate the nodes dictionary with initial data\n    for i in range(len(items)):\n        nodes[i] = {\n            'item': items[i],\n            'count': counts[i],\n            'children': []\n        }\n    \n    # Identify the root node\n    root_index = -1\n    for i, parent in enumerate(parents):\n        if parent == -1:\n            root_index = i\n            break\n    \n    # Build the tree by adding children to their respective parents\n    for i, parent in enumerate(parents):\n        if parent != -1:\n            nodes[parent]['children'].append(nodes[i])\n    \n    # Return the root node\n    return nodes[root_index]\n\n# Example usage:\n# items = [\"A\", \"B\", \"C\", \"D\"]\n# counts = [10, 20, 30, 40]\n# parents = [-1, 0, 0, 1]\n# print(build_tree(items, counts, parents))\n```\n\n### Explanation:\n\n1. **Check for Empty Input**: If any of the input lists are empty, return an empty dictionary.\n2. **Initialize Nodes**: Create a dictionary `nodes` where each key is an index from the input lists, and the value is another dictionary representing the node with keys `'item'`, `'count'`, and `'children'`.\n3. **Find the Root**: Iterate through the `parents` list to find the index of the root node (where the parent is `-1`).\n4. **Build the Tree**: For each node, append it to its parent's `children` list based on the `parents` list.\n5. **Return the Root**: Finally, return the dictionary representing the root node.\n\nThis approach ensures that the tree is built correctly and efficiently, maintaining the order of children as they appear in the input lists."}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    # Extract the dtype from kwargs, defaulting to float if not provided\n    dtype = kwargs.get('dtype', float)\n    \n    # Use np.zeros to create the array with the specified shape and dtype\n    return np.zeros(shape, dtype=dtype)\n\n# Example usage:\n# print(zero(5))  # Output: [0. 0. 0. 0. 0.]\n# print(zero((3, 4)))  # Output: [[0. 0. 0. 0.]\n#                                [0. 0. 0. 0.]\n#                                [0. 0. 0. 0.]]\n# print(zero((2, 3), dtype=int))  # Output: [[0 0 0]\n#                                      [0 0 0]]\n```\n\nThis function `zero` takes a `shape` argument which can be an integer or a tuple/list of integers to define the dimensions of the array. It also accepts an optional `dtype` keyword argument to specify the data type of the array elements. If `dtype` is not provided, it defaults to `float`. The function uses NumPy's `np.zeros` to create and return the array filled with zeros."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    \n    def calculate_gain(g_left, h_left, g_right, h_right):\n        L_parent = -0.5 * (np.sum(g) ** 2) / (np.sum(h) + lam) + gamma\n        L_left = -0.5 * (np.sum(g_left) ** 2) / (np.sum(h_left) + lam) + gamma\n        L_right = -0.5 * (np.sum(g_right) ** 2) / (np.sum(h_right) + lam) + gamma\n        return L_parent - L_left - L_right\n\n    best_gain = -np.inf\n    best_feature_index = None\n    best_threshold = None\n\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            mask_left = X[:, feature_index] <= threshold\n            mask_right = X[:, feature_index] > threshold\n            \n            if np.sum(mask_left) < 2 or np.sum(mask_right) < 2:\n                continue\n            \n            g_left = g[mask_left]\n            h_left = h[mask_left]\n            g_right = g[mask_right]\n            h_right = h[mask_right]\n            \n            gain = calculate_gain(g_left, h_left, g_right, h_right)\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n\n    if best_gain > 0:\n        return (best_feature_index, best_threshold)\n    else:\n        return None\n```\n\nThis function iterates over each feature and each unique value within that feature to consider it as a potential threshold for splitting. It calculates the gain for each possible split and keeps track of the split that provides the maximum gain. If no split results in a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    if isinstance(x, (list, int, float)):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to list if input was a list or scalar\n    if isinstance(x, list):\n        sigmoid_x_rounded = sigmoid_x_rounded.tolist()\n        gradient_x_rounded = gradient_x_rounded.tolist()\n    elif isinstance(x, (int, float)):\n        sigmoid_x_rounded = float(sigmoid_x_rounded)\n        gradient_x_rounded = float(gradient_x_rounded)\n    \n    return sigmoid_x_rounded, gradient_x_rounded\n```\n\nThis function handles the computation of the sigmoid activation and its gradient for various input types, ensuring the results are rounded to four decimal places and formatted appropriately based on the input type."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    n_features = 1  # Since it's one-dimensional\n\n    # Initialize weights uniformly\n    weights = np.full(n_samples, 1 / n_samples)\n\n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = [x_train[i] for i in sorted_indices]\n    y_train_sorted = [y_train[i] for i in sorted_indices]\n\n    # List to store the stumps and their coefficients\n    stumps = []\n    coefficients = []\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_direction = None\n\n        # Iterate over all possible thresholds\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for direction in [0, 1]:\n                # Calculate the error for the current stump\n                if direction == 0:\n                    predictions = [1 if x <= threshold else -1 for x in x_train_sorted]\n                else:\n                    predictions = [1 if x > threshold else -1 for x in x_train_sorted]\n\n                errors = [weights[i] for i in range(n_samples) if predictions[i] != y_train_sorted[i]]\n                error = sum(errors)\n\n                # Check if this stump has the minimum error\n                if error < min_error:\n                    min_error = error\n                    best_stump = (direction, threshold)\n                    best_error = error\n\n        # Calculate the coefficient for the best stump\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update the weights\n        for i in range(n_samples):\n            if best_stump[0] == 0:\n                if x_train_sorted[i] <= best_stump[1]:\n                    weights[i] *= math.exp(-alpha * y_train_sorted[i])\n                else:\n                    weights[i] *= math.exp(alpha * y_train_sorted[i])\n            else:\n                if x_train_sorted[i] > best_stump[1]:\n                    weights[i] *= math.exp(-alpha * y_train_sorted[i])\n                else:\n                    weights[i] *= math.exp(alpha * y_train_sorted[i])\n\n        # Normalize the weights\n        weights /= np.sum(weights)\n\n        # Store the best stump and its coefficient\n        stumps.append(best_stump)\n        coefficients.append(alpha)\n\n        # Check if the training error is within the allowed epsilon\n        if min_error <= epsilon:\n            break\n\n    # Make predictions for the test set\n    def predict_single(x):\n        total = 0\n        for coef, (d, theta) in zip(coefficients, stumps):\n            if d == 0:\n                total += coef if x <= theta else -coef\n            else:\n                total += coef if x > theta else -coef\n        return 1 if total >= 0 else -1\n\n    predictions = [predict_single(x) for x in x_test]\n\n    return predictions\n```\n\nThis code implements the AdaBoost algorithm using one-dimensional decision stumps. It starts with uniform sample weights, iteratively selects the stump with the minimum weighted error, updates the sample weights, and stops when the training error is within the specified epsilon. The function then returns predictions for the test set."}
{"task_id": 22, "completion_id": 0, "completion": "Here's the implementation of the `random_tensor` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    # Generate the integer part of the tensor\n    offset = np.random.randint(-300, 300, size=shape)\n    \n    # Generate the uniform real part of the tensor\n    u = np.random.uniform(0, 1, size=shape)\n    \n    # Combine the integer and real parts\n    tensor = offset + u\n    \n    # Standardize if requested\n    if standardize:\n        epsilon = np.finfo(float).eps\n        for i in range(tensor.shape[-1]):\n            col = tensor[..., i]\n            mean = np.mean(col)\n            std = np.std(col)\n            tensor[..., i] = (col - mean) / (std + epsilon)\n    \n    return tensor\n\n# Example usage:\n# shape = (100, 5)\n# standardized_tensor = random_tensor(shape, standardize=True)\n# print(standardized_tensor)\n```\n\n### Explanation:\n1. **Generating the Integer Part**: \n   - We use `np.random.randint(-300, 300, size=shape)` to generate integers uniformly distributed between -300 and 299.\n\n2. **Generating the Uniform Real Part**:\n   - We use `np.random.uniform(0, 1, size=shape)` to generate real numbers uniformly distributed in the interval [0, 1).\n\n3. **Combining the Parts**:\n   - The integer and real parts are added together to form the final tensor.\n\n4. **Standardization**:\n   - If `standardize` is `True`, we standardize each column of the tensor.\n   - For each column, we calculate the mean and standard deviation.\n   - We then shift the column to have a mean of 0 and scale it to have a standard deviation of 1.\n   - A small constant `epsilon` is added to the denominator to prevent division by zero when the standard deviation is zero.\n\nThis function ensures that the generated tensor meets the specified requirements, including optional standardization of columns."}
{"task_id": 24, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    w = np.array(w, dtype=float)\n    \n    # Initialize velocity if it's empty\n    if not velocity:\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.array(velocity, dtype=float)\n    \n    # Step 1: Look-ahead point\n    w_tilde = w - momentum * velocity\n    \n    # Step 2: Gradient evaluation with element-wise clipping\n    gradient = grad_func(w_tilde)\n    gradient_clipped = np.clip(gradient, -1, 1)\n    \n    # Step 3: Velocity update\n    velocity_new = momentum * velocity + learning_rate * gradient_clipped\n    \n    # Step 4: Parameter update\n    w_new = w - velocity_new\n    \n    # Round the results to 4 decimal places and convert to lists\n    w_new_rounded = [round(value, 4) for value in w_new]\n    velocity_new_rounded = [round(value, 4) for value in velocity_new]\n    \n    return w_new_rounded, velocity_new_rounded\n```\n\nThis implementation follows the Nesterov Accelerated Gradient (NAG) optimization algorithm steps you described. It includes handling the initial case where the velocity is an empty list by initializing it to a vector of zeros. The gradient is clipped element-wise between -1 and 1 before updating the velocity and parameters. Finally, both the updated parameters and velocity are rounded to four decimal places and returned as Python lists."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Calculate the squared Euclidean distances between each pair of test and train samples\n    distances = np.sum(X_train**2, axis=1)[:, None] + np.sum(X_test**2, axis=1) - 2 * np.dot(X_train, X_test.T)\n    \n    # Compute the Gaussian kernel values\n    K = np.exp(-gamma * distances)\n    \n    # Compute the decision function values for each test sample\n    decision_values = np.dot(K, alpha * y_train) + b\n    \n    # Predict the labels based on the sign of the decision function values\n    predictions = np.sign(decision_values).astype(int)\n    \n    return predictions.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description. It calculates the squared Euclidean distances between each pair of test and training samples, computes the Gaussian kernel values, and then uses these to compute the decision function values for each test sample. Finally, it predicts the labels based on the sign of the decision function values. The result is returned as a list of integers."}
{"task_id": 26, "completion_id": 0, "completion": "To implement the ReLU activation function along with its gradient, we can follow these steps:\n\n1. Convert the input list to a NumPy array for efficient element-wise operations.\n2. Apply the ReLU activation using `np.maximum` to ensure element-wise comparison.\n3. Compute the gradient mask using `np.where`, which will return 1 for elements where the input is greater than or equal to 0, and 0 otherwise.\n4. Convert the resulting NumPy arrays back to Python lists to match the desired output format.\n5. Return the activation and gradient as a tuple of lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    # Convert the input list to a NumPy array\n    x_np = np.array(x)\n    \n    # Compute the ReLU activation\n    activation_np = np.maximum(0, x_np)\n    \n    # Compute the gradient mask\n    gradient_np = np.where(x_np >= 0, 1, 0)\n    \n    # Convert the NumPy arrays back to Python lists\n    activation = activation_np.tolist()\n    gradient = gradient_np.tolist()\n    \n    return activation, gradient\n\n# Example usage:\ninput_data = [[-1, 2, -3], [4, -5, 6]]\nactivation, gradient = relu(input_data)\nprint(\"Activation:\", activation)\nprint(\"Gradient:\", gradient)\n```\n\n### Explanation:\n- **NumPy Conversion**: We convert the input list to a NumPy array to leverage efficient vectorized operations.\n- **ReLU Activation**: We use `np.maximum(0, x_np)` to apply the ReLU function element-wise.\n- **Gradient Mask**: We use `np.where(x_np >= 0, 1, 0)` to create the gradient mask. This function checks each element of `x_np` and assigns 1 if the element is non-negative, otherwise 0.\n- **List Conversion**: Finally, we convert the resulting NumPy arrays back to Python lists using the `.tolist()` method to ensure the output matches the input format.\n\nThis implementation handles both 1-D and nested lists, preserving the original shape in the output."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Get the shape of the matrix\n    m, n = X_np.shape\n    \n    # Check if k is valid\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Select the first k singular values and vectors\n    s_k = s[:k]\n    U_k = U[:, :k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and MSE to four decimal places\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis function performs the following steps:\n1. Converts the input list of lists `X` into a NumPy array for easier manipulation.\n2. Checks if the value of `k` is within the valid range. If not, it returns `-1`.\n3. Performs a truncated Singular Value Decomposition (SVD) on the matrix `X`.\n4. Constructs the rank-\\(k\\) approximation of `X` using the first \\(k\\) singular values and vectors.\n5. Computes the mean squared error (MSE) between the original matrix `X` and its reconstruction `X_hat`.\n6. Rounds both the reconstructed matrix and the MSE to four decimal places and returns them as a tuple."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the `predict_boosting_tree` function as described, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training samples by the feature x\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    \n    # Initialize residuals\n    residuals = y_train_sorted.copy()\n    \n    # Initialize the prediction\n    prediction = np.zeros_like(y_train_sorted)\n    \n    # Calculate candidate split points\n    split_points = (x_train_sorted[:-1] + x_train_sorted[1:]) / 2\n    \n    while True:\n        min_rss = np.inf\n        best_stump = None\n        \n        for s in split_points:\n            # Calculate the means of residuals for the two sides of the split\n            left_indices = x_train_sorted <= s\n            right_indices = x_train_sorted > s\n            \n            if np.any(left_indices):\n                c1 = np.mean(residuals[left_indices])\n            else:\n                c1 = 0\n            \n            if np.any(right_indices):\n                c2 = np.mean(residuals[right_indices])\n            else:\n                c2 = 0\n            \n            # Calculate the RSS for this split\n            rss = np.sum((residuals[left_indices] - c1)**2) + np.sum((residuals[right_indices] - c2)**2)\n            \n            # Check if this is the best split so far\n            if rss < min_rss:\n                min_rss = rss\n                best_stump = (s, c1, c2)\n        \n        # If no better split is found, break the loop\n        if best_stump is None:\n            break\n        \n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        prediction[x_train_sorted <= s] += c1\n        prediction[x_train_sorted > s] += c2\n        \n        # Update residuals\n        residuals = y_train_sorted - prediction\n        \n        # Check if the RSS is below the tolerance\n        if min_rss < epsilon:\n            break\n    \n    # Predict the value for x_query\n    if x_query <= x_train_sorted[-1]:\n        final_prediction = np.mean(y_train_sorted)\n    else:\n        final_prediction = np.mean(y_train_sorted)\n    \n    for s, c1, c2 in zip(split_points, prediction[x_train_sorted <= split_points], prediction[x_train_sorted > split_points]):\n        if x_query <= s:\n            final_prediction += c1\n        else:\n            final_prediction += c2\n    \n    return round(final_prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2, 3, 5, 7, 11]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis function implements the described gradient boosting algorithm using decision stumps. It sorts the training data, calculates candidate split points, iteratively adds the stump that minimizes the residual sum of squares, and updates the residuals. Finally, it predicts the value for the query point by summing the contributions from all learned stumps. The result is rounded to four decimal places as required."}
{"task_id": 32, "completion_id": 0, "completion": "```python\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    # Convert inputs to float if they are strings, leave them unchanged if they are already numbers\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    \n    return a, b\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n\n    return wrapper\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    return a + b\n```\n\nThis code defines the `check_data` function to handle the input sanitization, ensuring that both inputs are converted to numeric types if they are provided as strings. The `validate_input` decorator applies this sanitization before calling the `sum_numbers` function, which simply returns the sum of the two validated inputs."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the shape of the tensor.\n    - sparsity: A float representing the probability of generating a 1.0 (must be in [0, 1]).\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy ndarray of dtype float32 or float64, containing only 0.0s and 1.0s.\n    - Returns -1 if the sparsity value is outside the valid range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random tensor with values in the range [0, 1)\n    random_tensor = np.random.rand(*shape)\n    \n    # Apply the sparsity threshold to convert to binary values\n    binary_tensor = (random_tensor >= (1 - sparsity)).astype(np.float32)\n    \n    return binary_tensor\n```\n\nThis function generates a binary tensor according to the specified shape and sparsity. It uses NumPy's random number generation capabilities to create a tensor of random values between 0 and 1, then applies a threshold to convert these values into 0s and 1s based on the given sparsity. If a seed is provided, it ensures that the results are reproducible."}
{"task_id": 35, "completion_id": 0, "completion": "To implement the `classify` function, we need to traverse the decision tree starting from the root node and follow the rules provided in the task description. Here's how you can implement this:\n\n```python\nfrom typing import Any, Dict, List, Optional\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int = -1, res: Optional[Any] = None, child: Optional[Dict[Any, 'node']] = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\n\ndef classify(root: node, sample: List[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    \n    while current.fea != -1:  # While the current node is not a leaf\n        if current.fea >= len(sample):  # Check if the feature index is out of bounds\n            return -1\n        \n        feature_value = sample[current.fea]\n        \n        if feature_value not in current.child:  # Check if the feature value is not in the children\n            return -1\n        \n        current = current.child[feature_value]  # Move to the corresponding sub-tree\n    \n    return current.res  # Return the label of the leaf node\n```\n\n### Explanation:\n1. **Initialization**: Start at the root node.\n2. **Traversal Loop**: Continue traversing the tree until a leaf node is reached (`current.fea == -1`).\n   - **Feature Index Check**: If the feature index (`current.fea`) is greater than or equal to the length of the sample, return `-1` because the sample does not have enough features.\n   - **Feature Value Lookup**: Retrieve the feature value from the sample using the current node's feature index.\n   - **Child Node Check**: If the feature value is not present in the `current.child` dictionary, return `-1` because the path does not exist.\n   - **Move to Sub-tree**: If the feature value exists, move to the corresponding sub-tree.\n3. **Leaf Node**: Once a leaf node is reached, return the label stored in `current.res`.\n\nThis implementation ensures that the function correctly traverses the decision tree and handles cases where the sample cannot be classified due to missing features or non-existent paths."}
{"task_id": 36, "completion_id": 0, "completion": "```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Run the decision tree on a batch of samples and return the corresponding list of predictions.\n\n    :param root: The root node of the decision tree.\n    :param X: A list of samples, where each sample is a list of feature values.\n    :return: A list of predictions corresponding to the input samples.\n    \"\"\"\n    predictions = []\n\n    def traverse(node: Optional[Node], sample: List[float]) -> float:\n        if node is None:\n            raise ValueError(\"Tree is empty\")\n        if node.left is None and node.right is None:\n            return node.threshold\n        if sample[node.feature] <= node.threshold:\n            return traverse(node.left, sample)\n        else:\n            return traverse(node.right, sample)\n\n    for sample in X:\n        prediction = traverse(root, sample)\n        predictions.append(prediction)\n\n    return predictions\n```\n\nThis implementation defines the `predict_tree` function, which takes a decision tree's root node and a list of samples, and returns a list of predictions. The function uses a helper function `traverse` to navigate through the tree for each sample and determine the prediction based on the decision rules provided."}
{"task_id": 37, "completion_id": 0, "completion": "To implement the KD-Tree construction as described, we need to follow the rules provided in the task description. Here's a step-by-step breakdown of how to achieve this:\n\n1. **Check for Empty Input**: If the input array is empty, return `None`.\n2. **Cycle Through Dimensions**: Use a generator to cycle through the dimensions for splitting.\n3. **Sort Data**: Sort the data based on the current splitting dimension.\n4. **Select Median**: Choose the median point based on the sorted data.\n5. **Recursive Construction**: Recursively build the left and right subtrees using the left and right subsets of the data.\n6. **Node Structure**: Each node in the tree is represented as a dictionary with keys `'point'`, `'label'`, `'left'`, and `'right'`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.shape[0] == 0:\n        return None\n\n    # Cycle through dimensions\n    dimensions = cycle(range(data.shape[1] - 1))\n\n    def build_subtree(subset):\n        if subset.shape[0] == 0:\n            return None\n\n        # Get the current dimension\n        d = next(dimensions)\n\n        # Sort the subset by the current dimension\n        sorted_indices = np.argsort(subset[:, d])\n        sorted_subset = subset[sorted_indices]\n\n        # Find the median index\n        median_index = sorted_subset.shape[0] // 2\n\n        # Select the median point\n        median_point = sorted_subset[median_index, :-1].tolist()\n        median_label = sorted_subset[median_index, -1]\n\n        # Create the node\n        node = {\n            'point': median_point,\n            'label': median_label,\n            'left': build_subtree(sorted_subset[:median_index]),\n            'right': build_subtree(sorted_subset[median_index + 1:])\n        }\n\n        return node\n\n    return build_subtree(data)\n\n# Example usage:\n# data = np.array([[2, 3, 'A'], [5, 4, 'B'], [9, 6, 'C'], [4, 7, 'D']])\n# kd_tree = build_kd_tree(data)\n# print(kd_tree)\n```\n\n### Explanation:\n- **Cycle Through Dimensions**: We use `itertools.cycle` to create an infinite iterator over the dimensions. This ensures that the dimensions cycle through `0, 1, ..., m-1, 0, 1, ...`.\n- **Sorting and Median Selection**: For each recursive call, we sort the data based on the current dimension and select the median point.\n- **Recursive Subtree Construction**: We recursively build the left and right subtrees using the points before and after the median, respectively.\n- **Node Creation**: Each node is a dictionary containing the point, its label, and pointers to the left and right subtrees.\n\nThis implementation efficiently constructs a KD-Tree from the given data, adhering to the specified rules and constraints."}
{"task_id": 38, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    scores = []\n\n    for a in range(n_arms):\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        c_a = context[:, a]\n\n        # Compute the parameter estimate\n        theta_hat_a = np.linalg.inv(A_a) @ b_a\n\n        # Compute the LinUCB score\n        p_a = theta_hat_a.T @ c_a + alpha * np.sqrt(c_a.T @ np.linalg.inv(A_a) @ c_a)\n        scores.append(p_a)\n\n    # Return the index of the arm with the highest score\n    return np.argmax(scores)\n```\n\nThis function implements the arm selection phase of the LinUCB algorithm for a disjoint contextual linear bandit. It calculates the LinUCB upper confidence bound for each arm and returns the index of the arm with the highest score. In case of a tie, it returns the smallest index due to the behavior of `numpy.argmax`."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the median split for KD-Tree construction using `numpy.argpartition`, we need to follow these steps:\n\n1. Use `numpy.argpartition` to partition the data based on the specified column `d`.\n2. Identify the median index.\n3. Determine which indices are less than the median and which are greater than the median.\n4. Ensure the resulting lists are sorted.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Partition the indices based on the column d\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # Get the median value\n    median_value = data[partitioned_indices[median_index], d]\n    \n    # Find the exact median index\n    pivot = None\n    for idx in partitioned_indices[:median_index + 1]:\n        if data[idx, d] == median_value:\n            pivot = idx\n            break\n    \n    # Separate the indices into left and right\n    left = [idx for idx in partitioned_indices[:median_index] if data[idx, d] < median_value]\n    right = [idx for idx in partitioned_indices[median_index + 1:] if data[idx, d] > median_value]\n    \n    # Sort the left and right lists\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n```\n\n### Explanation:\n\n1. **Partitioning**: We use `np.argpartition` to rearrange the indices such that the element at the `median_index` is the k-th smallest element in the array. This operation is done in O(n) time.\n\n2. **Finding the Median Index**: After partitioning, the element at `median_index` is guaranteed to be the median or one of the medians (if there are multiple medians due to even number of elements).\n\n3. **Identifying the Pivot**: We iterate through the first half of the partitioned indices to find the exact index of the median value.\n\n4. **Separating Indices**: We create two lists, `left` and `right`, containing the indices of elements less than and greater than the median value, respectively.\n\n5. **Sorting**: Finally, we sort the `left` and `right` lists to ensure determinism in the output.\n\nThis approach ensures that the split is performed efficiently in O(n) time, meeting the requirements of KD-Tree construction."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function using NumPy's `as_strided` for creating a view of the input signal with overlapping frames, we need to carefully manage the strides and shape of the resulting array. Here's how you can achieve this:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Length of signal must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the view using as_strided\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    result = as_strided(x, shape=shape, strides=strides)\n\n    # Set the writability of the result\n    if not writeable:\n        result.setflags(write=False)\n\n    return result\n```\n\n### Explanation:\n\n1. **Assertions**: We start by checking the pre-conditions using assertions. These ensure that the input signal is one-dimensional, the stride is positive, and the signal length is at least as long as the frame width.\n\n2. **Calculate Number of Frames**: We compute the number of frames using the formula provided in the description.\n\n3. **Using `as_strided`**: \n   - We define the desired shape of the resulting array as `(n_frames, frame_width)`.\n   - We calculate the strides for the new array. The first stride corresponds to the distance between the start of each frame (`stride * x.strides[0]`), and the second stride is the distance between elements within each frame (`x.strides[0]`).\n   - We use `as_strided` to create a view of the original array with the specified shape and strides.\n\n4. **Set Writability**: Finally, we set the writability of the resulting array based on the `writeable` parameter. If `writeable` is `False`, we make the array read-only.\n\nThis implementation ensures that the function returns a view on the original data, which is efficient in terms of memory usage and avoids unnecessary copying."}
{"task_id": 41, "completion_id": 0, "completion": "Here's a complete implementation of the k-Nearest Neighbours (k-NN) classifier in Python:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    predictions = []\n    \n    for query in X:\n        # Calculate distances from the query point to all training points\n        distances = [(euclidean_distance(query, train_point), label)\n                     for train_point, label in zip(X_data, y_data)]\n        \n        # Sort distances and take the k nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        # Count the occurrences of each label among the k nearest neighbours\n        label_counts = Counter(k_nearest_labels)\n        \n        # Find the most common label(s)\n        most_common_labels = label_counts.most_common()\n        \n        # Sort the most common labels lexicographically and choose the first one\n        predicted_label = sorted(most_common_labels, key=lambda x: x[0])[0][0]\n        \n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Euclidean Distance Calculation**: \n   - The `euclidean_distance` function computes the Euclidean distance between two points. This is done using NumPy for efficient computation.\n\n2. **k-NN Prediction**:\n   - The `knn_predict` function iterates over each query sample in `X`.\n   - For each query, it calculates the Euclidean distance to all training samples and stores these distances along with their corresponding labels.\n   - The distances are sorted, and the `k` smallest distances are selected.\n   - The labels of these `k` nearest neighbors are counted using `Counter`.\n   - The most common label is determined. If there is a tie, the labels are sorted lexicographically, and the smallest one is chosen.\n   - The predicted label is appended to the `predictions` list.\n\n3. **Output**:\n   - The function returns a list of predicted labels for each query sample in `X`.\n\nThis implementation ensures that the k-NN classifier works for any numeric feature dimension and for labels of any sortable type, adhering to the rules specified in the task description."}
{"task_id": 42, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    # Validate input\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Compute RMSLE\n    log_diff = [np.log(pred + 1) - np.log(act + 1) for pred, act in zip(predicted, actual)]\n    squared_log_diff = [d ** 2 for d in log_diff]\n    mean_squared_log_diff = np.mean(squared_log_diff)\n    rmsle_value = np.sqrt(mean_squared_log_diff)\n    \n    # Return rounded result\n    return round(rmsle_value, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(rmsle(actual, predicted))  # Output should be -1 due to negative value in actual\n```\n\nThis function first checks if the input lists are valid: they must be of the same non-zero length and contain only non-negative values. If the validation fails, it returns `-1`. Otherwise, it computes the RMSLE using the provided formula and returns the result rounded to four decimal places."}
{"task_id": 44, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute tanh using the formula\n        tanh_x = (2 / (1 + np.exp(-2 * x))) - 1\n    else:\n        # Compute the derivative of tanh\n        tanh_x = (2 / (1 + np.exp(-2 * x))) - 1\n        tanh_x_derivative = 1 - tanh_x**2\n    \n    # Convert the result back to a list and round to 4 decimal places\n    if not derivative:\n        return [round(val, 4) for val in tanh_x.tolist()]\n    else:\n        return [round(val, 4) for val in tanh_x_derivative.tolist()]\n\n# Example usage:\n# print(tanh_activation([0, 1, 2], derivative=False))\n# print(tanh_activation([0, 1, 2], derivative=True))\n```\n\nThis implementation defines the `tanh_activation` function, which computes either the hyperbolic tangent or its derivative for each element in the input list or array. The function uses NumPy for efficient computation and ensures the results are rounded to four decimal places before returning them as a Python list."}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.asarray(x)\n    \n    # Get the length of the input array\n    N = len(x)\n    \n    # Handle the corner case where N = 0\n    if N == 0:\n        return []\n    \n    # Initialize the list to store autocorrelation coefficients\n    autocorrelation = []\n    \n    # Compute the autocorrelation for each lag k\n    for k in range(N):\n        # Calculate the sum for the current lag k\n        sum_k = sum(x[n] * x[n + k] for n in range(N - k))\n        # Append the result to the autocorrelation list\n        autocorrelation.append(sum_k)\n    \n    return autocorrelation\n\n# Example usage:\nx = np.array([1, 2, 3])\nprint(autocorrelate_1d(x))  # Output: [14, 8, 3]\n```\n\nThis function `autocorrelate_1d` computes the one-dimensional autocorrelation of a given 1-D sequence using the direct double-sum formulation. It handles both Python lists and NumPy arrays as input and returns a Python list of autocorrelation coefficients. The function also correctly handles the edge case where the input sequence is empty."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(X.sum(axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis function first converts the input matrix into a NumPy array for easier manipulation. It then checks if the matrix is two-dimensional, ensures all elements are within the range [0, 1], and verifies that each row sums to 1 within a specified numerical tolerance. If all these conditions are met, the function returns `True`; otherwise, it returns `False`."}
{"task_id": 49, "completion_id": 0, "completion": "```python\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    if k <= 0 or k > len(nums):\n        return -1\n\n    def _move_up(heap, index):\n        parent_index = (index - 1) // 2\n        while index > 0 and heap[index] > heap[parent_index]:\n            heap[index], heap[parent_index] = heap[parent_index], heap[index]\n            index = parent_index\n\n    def _move_down(heap, index):\n        size = len(heap)\n        while True:\n            left_child = 2 * index + 1\n            right_child = 2 * index + 2\n            largest = index\n\n            if left_child < size and heap[left_child] > heap[largest]:\n                largest = left_child\n            if right_child < size and heap[right_child] > heap[largest]:\n                largest = right_child\n\n            if largest != index:\n                heap[index], heap[largest] = heap[largest], heap[index]\n                index = largest\n            else:\n                break\n\n    max_heap = []\n\n    for num in nums:\n        if len(max_heap) < k:\n            max_heap.append(num)\n            _move_up(max_heap, len(max_heap) - 1)\n        else:\n            if num < max_heap[0]:\n                max_heap[0] = num\n                _move_down(max_heap, 0)\n\n    max_heap.sort()\n    return max_heap\n```\n\n### Explanation:\n1. **Initial Check**: The function first checks if `k` is valid. If `k` is less than or equal to zero or greater than the length of the input list, it returns `-1`.\n\n2. **Helper Functions**:\n   - `_move_up`: This function ensures the heap property is maintained after inserting a new element. It compares the newly added element with its parent and swaps them if necessary, moving up the tree.\n   - `_move_down`: This function ensures the heap property is maintained after replacing the root with a new element. It compares the root with its children and swaps it with the larger child if necessary, moving down the tree.\n\n3. **Main Logic**:\n   - A list `max_heap` is used to maintain the k smallest elements.\n   - For each number in the input list:\n     - If the heap has fewer than `k` elements, the number is added to the heap, and `_move_up` is called to maintain the heap property.\n     - If the heap already has `k` elements, the number is compared with the root of the heap (the largest element in the heap). If the number is smaller, it replaces the root, and `_move_down` is called to restore the heap property.\n\n4. **Final Step**: After processing all numbers, the heap contains the k smallest elements, which are then sorted and returned."}
{"task_id": 51, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n    n = X.shape[0]\n    w = np.array([[1.0], [1.0]])\n    \n    for _ in range(max_iter):\n        # Calculate the gradient\n        gradient = (2/n) * X.T @ (X @ w - y)\n        \n        # Calculate the Hessian\n        Hessian = (2/n) * X.T @ X\n        \n        # Check if the Hessian is singular and use pseudo-inverse if necessary\n        if np.linalg.matrix_rank(Hessian) < Hessian.shape[1]:\n            Hessian_inv = np.linalg.pinv(Hessian)\n        else:\n            Hessian_inv = np.linalg.inv(Hessian)\n        \n        # Update the weights\n        w_new = w - Hessian_inv @ gradient\n        \n        # Check convergence\n        if np.linalg.norm(w_new - w) < epsilon:\n            break\n        \n        w = w_new\n    \n    # Return the final weights rounded to 4 decimal places\n    return [[round(w_val[0], 4)] for w_val in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([[5], [6], [7]])\n# print(newton(X, y))\n```\n\nThis implementation of Newton's method for two-variable linear regression follows the specified requirements. It calculates the gradient and Hessian at each iteration, updates the weights using the Newton-Raphson update rule, and checks for convergence based on the change in weights. If the Hessian is singular, it uses the Moore-Penrose pseudo-inverse to ensure the algorithm continues to work. The final weights are returned as a list of lists, rounded to four decimal places."}
{"task_id": 54, "completion_id": 0, "completion": "```python\nimport string\n\ndef tokenize_whitespace(line: str, lowercase: bool = True, filter_stopwords: bool = True, filter_punctuation: bool = True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    \n    # Define a set of common English stop-words\n    STOP_WORDS = {\n        'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", \n        'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', \n        'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', \n        'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', \n        'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', \n        'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', \n        'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', \n        'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', \n        'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', \n        'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", \n        'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \n        \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", \n        'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", \n        'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"\n    }\n    \n    # Convert to lower-case if required\n    if lowercase:\n        line = line.lower()\n    \n    # Split the line into tokens by whitespace\n    tokens = line.split()\n    \n    # Process each token\n    processed_tokens = []\n    for token in tokens:\n        # Strip punctuation if required\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n        \n        # Discard empty tokens\n        if not token:\n            continue\n        \n        # Filter out stop-words if required\n        if filter_stopwords and token in STOP_WORDS:\n            continue\n        \n        # Add the processed token to the list\n        processed_tokens.append(token)\n    \n    return processed_tokens\n```\n\nThis function implements a whitespace tokenizer with options for lower-casing, punctuation stripping, and stop-word filtering. It uses the standard library and adheres to the specified constraints."}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for t in range(max_iter):\n        # Shuffle data for each epoch\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        \n        # Mini-batch processing\n        for i in range(0, n, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            \n            # Compute gradient\n            residuals = X_batch @ w - y_batch\n            gradient = (1 / batch_size) * X_batch.T @ residuals\n            \n            # Update running average of squared gradients\n            s = rho * s + (1 - rho) * gradient ** 2\n            \n            # Update weights\n            w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# print(rms_prop(X, y))\n```\n\nThis implementation of the RMSprop optimizer for linear regression follows the specified requirements. It includes handling for mini-batches, early stopping based on the gradient norm, and ensures numerical stability through the addition of `eps_station`. The weights are returned as a list rounded to four decimal places."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its gradient.\n\n    Parameters:\n    - x: A scalar, Python list, or NumPy array of real numbers.\n    - deriv: A boolean flag indicating whether to compute the derivative (gradient) of the SoftPlus function.\n\n    Returns:\n    - A Python list (or a single float if the input is a scalar) containing the computed SoftPlus values or gradients,\n      rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    x_array = np.array(x)\n    \n    if deriv:\n        # Compute the gradient (sigmoid function)\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        # Compute the SoftPlus function\n        # Use log1p for numerical stability\n        result = np.log1p(np.exp(-np.abs(x_array))) + np.maximum(x_array, 0)\n    \n    # Round the result to the nearest 4th decimal\n    rounded_result = np.round(result, decimals=4)\n    \n    # Convert the result back to a Python list\n    if isinstance(x, (list, tuple)):\n        return rounded_result.tolist()\n    elif isinstance(x, np.ndarray):\n        return rounded_result.tolist()\n    else:\n        return float(rounded_result)\n\n# Example usage:\nprint(softplus([0, 1, -1]))  # SoftPlus values\nprint(softplus([0, 1, -1], deriv=True))  # Derivatives (sigmoid values)\n```\n\nThis implementation defines the `softplus` function to compute either the SoftPlus activation or its gradient based on the `deriv` flag. It uses `np.log1p` for numerical stability and ensures the output is rounded to the nearest 4th decimal, returning a Python list or a single float as appropriate."}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Count all N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        prefix_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        prefix_counts = Counter(corpus)\n\n    # Calculate the total log-probability\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N > 1:\n            prefix = tuple(sequence[i:i+N-1])\n            count_ngram = ngram_counts[ngram]\n            count_prefix = prefix_counts[prefix]\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        else:\n            count_ngram = ngram_counts[ngram]\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / len(corpus)\n        \n        log_prob += np.log(prob)\n    \n    return round(log_prob, 4)\n```\n\nThis function first counts all the necessary N-grams and (N-1)-grams from the corpus. It then calculates the log-probability for each position in the sequence by dividing the count of the current N-gram by the count of its prefix (or the total number of words for unigrams). If any count is zero, it returns `float('-inf')`. Finally, it returns the total log-probability rounded to four decimal places."}
{"task_id": 60, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import entropy\n\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    if criterion == \"entropy\":\n        # Calculate the probability distribution of classes\n        p = np.bincount(y) / len(y)\n        # Entropy is the sum of -p(x) * log2(p(x)) for all x\n        return round(entropy(p, base=2), 4)\n    \n    elif criterion == \"gini\":\n        # Calculate the probability distribution of classes\n        p = np.bincount(y) / len(y)\n        # Gini index is 1 - sum(p(x)^2) for all x\n        return round(1 - np.sum(p**2), 4)\n    \n    elif criterion == \"mse\":\n        # Mean squared error is the variance of the target values\n        return round(np.var(y), 4)\n    \n    else:\n        raise ValueError(\"Criterion must be one of 'entropy', 'gini', or 'mse'.\")\n\n# Example usage:\n# y = np.array([0, 1, 1, 0, 1])\n# print(compute_impurity(y, \"entropy\"))  # Output: 0.8113\n# print(compute_impurity(y, \"gini\"))     # Output: 0.4800\n# print(compute_impurity(y, \"mse\"))      # Output: 0.2000\n```\n\nThis function `compute_impurity` calculates the impurity of a node based on the specified criterion. It handles the calculation for entropy, Gini index, and mean squared error, and raises an error if an unsupported criterion is provided. The results are rounded to four decimal places as required."}
{"task_id": 61, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    W = np.array(W)\n\n    # Check if X is 2D\n    if len(X.shape) != 2:\n        return -1\n\n    # Reshape y and W if they are 1D\n    if len(y.shape) == 1:\n        y = y.reshape(-1, 1)\n    if len(W.shape) == 1:\n        W = W.reshape(-1, 1)\n\n    # Check dimensions\n    n_samples, n_features = X.shape\n    if y.shape[0] != n_samples or W.shape[0] != n_features:\n        return -1\n\n    # Compute the gradient\n    gradient = (X.T @ (X @ W - y)) / n_samples\n\n    # Round to 4 decimal places and convert to list of lists\n    gradient_rounded = np.round(gradient, 4).tolist()\n\n    return gradient_rounded\n```\n\nThis function follows the requirements by:\n1. Accepting `X`, `y`, and `W` as Python lists or NumPy arrays.\n2. Automatically reshaping one-dimensional `y` and/or `W` into column vectors.\n3. Validating the dimensions and returning `-1` if any condition is violated.\n4. Computing the gradient using vectorized NumPy operations.\n5. Rounding every value in the resulting vector to 4 decimal places and returning it as a nested Python list of shape `(d, 1)`."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of training examples\n    m = len(X)\n    \n    # Build the design matrix with polynomial features\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        # Store the previous weights to check for convergence\n        w_prev = w.copy()\n        \n        # Update the bias term\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update the coefficients using coordinate descent\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T @ (y - X_poly @ w + w[j] * X_poly[:, j])\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    # Round the coefficients to 4 decimal places\n    return [round(weight, 4) for weight in w]\n\ndef soft_threshold(rho, lambda_):\n    \"\"\"Compute the soft thresholding operator.\"\"\"\n    return np.sign(rho) * max(abs(rho) - lambda_, 0)\n```\n\nThis implementation follows the steps outlined in the task description. It constructs a polynomial feature matrix, initializes the weights, and uses coordinate descent to optimize the Lasso objective function. The soft thresholding function is used to update the coefficients, and the algorithm stops when the largest absolute weight change falls below the specified tolerance or after the maximum number of iterations. The final weights are rounded to four decimal places before being returned."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    - A: Transition-probability matrix of shape (N, N).\n    - B: Emission-probability matrix of shape (N, M).\n    - obs: List of observation indices (length T).\n    - t: Integer time index (0 \u2264 t < T).\n\n    Returns:\n    - A list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    \n    # Initialize the backward probability vector for the last time step\n    beta = [1.0] * N\n    \n    # Iterate backwards from T-2 to t\n    for i in range(T-2, t-1, -1):\n        beta_next = [0.0] * N\n        for j in range(N):\n            beta_next[j] = sum(A[j][k] * B[k][obs[i+1]] * beta[k] for k in range(N))\n        beta = beta_next\n    \n    # Round the results to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\n# obs = [0, 1, 2]\n# t = 0\n# print(backward_beta(A, B, obs, t))\n```\n\nThis function calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. It uses the provided transition and emission probability matrices, along with the observation sequence, to compute the probabilities iteratively from the end of the sequence back to the specified time index \\(t\\). The results are rounded to four decimal places as required."}
{"task_id": 64, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    c = np.zeros(N, dtype=complex)\n    \n    for k in range(N):\n        for n in range(N):\n            c[k] += frame[n] * np.exp(-2j * np.pi * k * n / N)\n    \n    # Round the real and imaginary parts to 4 decimals\n    c_rounded = [round(complex(c[k].real, c[k].imag), 4) for k in range(N)]\n    \n    if positive_only:\n        return c_rounded[:N//2 + 1]\n    else:\n        return c_rounded\n```\n\nThis implementation of the Discrete Fourier Transform (DFT) follows the specified requirements. It computes the DFT using nested loops, ensuring a complexity of \\(O(N^2)\\). The results are rounded to four decimal places, and the function returns either the full spectrum or only the non-negative frequency terms based on the `positive_only` flag."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for computing the probability of an observation sequence in a Hidden Markov Model (HMM), we need to follow these steps:\n\n1. **Initialize**: Start with the last time step where the backward variable is set to 1.\n2. **Recursive Calculation**: Use the recursive formula to compute the backward variables for each previous time step.\n3. **Compute Sequence Probability**: Finally, use the initial probabilities and the first backward variable to compute the probability of the entire sequence.\n\nHere's the complete implementation of the `backward_prob` function:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check if any input list is empty\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(pi)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the beta values for the last time step\n    beta = np.zeros((T, N))\n    beta[T-1] = 1.0\n\n    # Compute the beta values for each time step from T-2 to 0\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1][j] for j in range(N))\n\n    # Compute the probability of the sequence\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N))\n\n    # Return the result rounded to 6 decimal places\n    return round(prob, 6)\n```\n\n### Explanation:\n\n- **Initialization**: We initialize the backward variable for the last time step (`beta[T-1]`) to 1 because there are no future observations to consider.\n  \n- **Recursive Calculation**: For each time step `t` from `T-2` to `0`, we calculate `beta[t][i]` using the recursive formula. This involves summing over all possible next states `j` the product of the transition probability `A[i][j]`, the emission probability `B[j][obs[t+1]]`, and the backward variable `beta[t+1][j]`.\n\n- **Sequence Probability**: Finally, we compute the probability of the entire sequence by summing over all initial states `i` the product of the initial probability `pi[i]`, the emission probability `B[i][obs[0]]`, and the backward variable `beta[0][i]`.\n\nThis function will correctly compute the probability of the given observation sequence using the backward algorithm, rounding the result to six decimal places."}
{"task_id": 67, "completion_id": 0, "completion": "To implement the function `gen_hmm_data`, we need to follow these steps:\n\n1. Validate the input probability distributions:\n   - Ensure that the initial state distribution `S` sums to 1.\n   - Ensure that each row in the state-transition matrix `A` sums to 1.\n   - Ensure that each row in the emission matrix `B` sums to 1.\n\n2. Set the random seed if provided to ensure reproducibility.\n\n3. Sample the initial hidden state from the initial state distribution `S`.\n\n4. For each subsequent state, sample the next hidden state from the current state's row in the transition matrix `A`.\n\n5. For each state, sample the corresponding observation from the current state's row in the emission matrix `B`.\n\n6. Repeat the process for the desired number of samples (`n_sample`).\n\n7. Return the sequences of hidden states and observations.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    # Validate the probability distributions\n    def is_valid_distribution(dist):\n        return abs(sum(dist) - 1.0) < 1e-8\n\n    if not is_valid_distribution(S):\n        return -1\n    for row in A:\n        if not is_valid_distribution(row):\n            return -1\n    for row in B:\n        if not is_valid_distribution(row):\n            return -1\n\n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Number of states\n    N = len(S)\n\n    # Initialize lists to store states and observations\n    states = []\n    observations = []\n\n    # Sample the initial state\n    initial_state = np.random.choice(N, p=S)\n    states.append(initial_state)\n    # Sample the initial observation\n    initial_observation = np.random.choice(len(B[0]), p=B[initial_state])\n    observations.append(initial_observation)\n\n    # Generate the rest of the sequence\n    for _ in range(1, n_sample):\n        # Sample the next state\n        current_state = states[-1]\n        next_state = np.random.choice(N, p=A[current_state])\n        states.append(next_state)\n        # Sample the observation for the next state\n        observation = np.random.choice(len(B[0]), p=B[next_state])\n        observations.append(observation)\n\n    return states, observations\n```\n\nThis function will generate a sequence of hidden states and observations based on the provided HMM parameters. It ensures that all probability distributions are valid and uses NumPy's random number generation to sample from these distributions. The optional `seed` parameter allows for reproducible results."}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float = 0.01, momentum: float = 0.0, prev_update: np.ndarray | None = None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    \n    # Compute the new momentum update (velocity)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    \n    # Update the parameters\n    updated_w = w - learning_rate * new_update\n    \n    # Round the results to 4 decimal places and convert to lists\n    updated_w_rounded = [round(x, 4) for x in updated_w.flatten()]\n    new_update_rounded = [round(x, 4) for x in new_update.flatten()]\n    \n    return updated_w_rounded, new_update_rounded\n```\n\nThis function implements the stochastic gradient descent with momentum update as described. It takes the current parameters, the gradient, learning rate, momentum, and the previous update (if any) as inputs. It computes the new momentum update, updates the parameters, and returns both the updated parameters and the new momentum update, rounded to four decimal places and converted to lists."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models (HMMs), we need to follow these steps:\n\n1. **Input Validation**: Ensure that the dimensions of the input matrices and vectors are consistent and that all observations are within the valid range.\n2. **Initialization**: Set up the initial state probabilities.\n3. **Forward Pass**: Compute the forward variables using the recurrence relation of the forward algorithm.\n4. **Result Calculation**: Sum the forward variables at the final time step to get the probability of the observation sequence.\n\nHere's the implementation of the forward algorithm in Python:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Validate dimensions\n    n_states = len(S)\n    if A.shape != (n_states, n_states):\n        return -1\n    if B.shape != (n_states, B.shape[1]):\n        return -1\n    if not observations:\n        return -1\n    \n    # Check if all observations are within the valid range\n    if any(obs < 0 or obs >= B.shape[1] for obs in observations):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((n_states, T))\n    \n    # Initialization step\n    alpha[:, 0] = S * B[:, observations[0]]\n    \n    # Recursion step\n    for t in range(1, T):\n        for i in range(n_states):\n            alpha[i, t] = alpha[:, t-1].dot(A[:, i]) * B[i, observations[t]]\n    \n    # Termination step\n    probability = np.sum(alpha[:, -1])\n    \n    # Return the result rounded to 4 decimal places\n    return round(probability, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.4, 0.6]]\n# observations = [0, 1]\n# print(forward_algorithm(S, A, B, observations))  # Output should be rounded to 4 decimal places\n```\n\n### Explanation:\n- **Input Validation**: We check if the dimensions of `S`, `A`, and `B` are correct and if the observations are within the valid range.\n- **Initialization**: The forward variable `alpha` is initialized with the product of initial state probabilities and the emission probabilities of the first observation.\n- **Recursion**: For each subsequent observation, we update the forward variables using the transition probabilities and emission probabilities.\n- **Termination**: The probability of the entire sequence is the sum of the forward variables at the last time step.\n- **Output**: The result is rounded to four decimal places before being returned. If any validation fails, the function returns `-1`."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow these steps:\n\n1. **Count the Support of Every Single Item**: We'll count how many times each item appears across all transactions. Items that appear fewer than `min_support` times will be discarded.\n\n2. **Build the FP-Tree**: We'll construct a tree-like structure where each node represents an item and its support count. The tree is built by inserting transactions into the tree in the order of their frequent items.\n\n3. **Mine Conditional FP-Trees**: For each frequent item, we'll create a conditional pattern base and then build a conditional FP-tree from this base. We'll recursively apply the FP-Growth algorithm to these conditional FP-trees to find larger item-sets.\n\n4. **Return the Frequent Item-Sets**: Finally, we'll collect all frequent item-sets and sort them as required.\n\nHere's the implementation of the FP-Growth algorithm in Python:\n\n```python\nfrom collections import Counter, defaultdict\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None, None)\n        self.header_table = {}\n\n    def insert(self, transaction, count):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, current_node)\n                current_node.children[item] = new_node\n                if item not in self.header_table:\n                    self.header_table[item] = []\n                self.header_table[item].append(new_node)\n            else:\n                new_node = current_node.children[item]\n            new_node.count += count\n            current_node = new_node\n\n    def get_conditional_pattern_base(self, item):\n        if item not in self.header_table:\n            return []\n        pattern_base = []\n        for node in self.header_table[item]:\n            path = []\n            while node.parent != self.root:\n                path.append((node.item, node.count))\n                node = node.parent\n            if path:\n                pattern_base.append(path[::-1])\n        return pattern_base\n\nclass FPNode:\n    def __init__(self, item, parent):\n        self.item = item\n        self.parent = parent\n        self.children = {}\n        self.count = 0\n\ndef fp_growth(transactions, min_support):\n    # Step 1: Count the support of every single item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Step 2: Build the FP-tree\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: (-frequent_items[x], x))  # Sort by frequency, then lexicographically\n        fp_tree.insert(filtered_transaction, 1)\n\n    # Step 3: Mine conditional FP-trees\n    def mine_fp_tree(tree, prefix, frequent_itemsets):\n        if not tree.header_table:\n            return\n\n        # Step 3.1: Sort items in the header table by support count (descending) and lexicographically\n        sorted_items = sorted(tree.header_table.keys(), key=lambda x: (-frequent_items[x], x))\n\n        for item in sorted_items:\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n\n            # Step 3.2: Get the conditional pattern base\n            conditional_pattern_base = tree.get_conditional_pattern_base(item)\n\n            # Step 3.3: Build the conditional FP-tree\n            conditional_tree = FPTree()\n            conditional_item_counts = Counter()\n            for pattern in conditional_pattern_base:\n                conditional_item_counts.update(pattern)\n                conditional_tree.insert(pattern, 1)\n\n            # Step 3.4: Recursively mine the conditional FP-tree\n            mine_fp_tree(conditional_tree, new_prefix, frequent_itemsets)\n\n    frequent_itemsets = []\n    mine_fp_tree(fp_tree, [], frequent_itemsets)\n\n    # Step 4: Return the frequent item-sets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['I1', 'I2', 'I5'],\n    ['I2', 'I4'],\n    ['I2', 'I3'],\n    ['I1', 'I2', 'I4'],\n    ['I1', 'I3'],\n    ['I2', 'I3'],\n    ['I1', 'I3'],\n    ['I1', 'I2', 'I3', 'I5'],\n    ['I1', 'I2', 'I3']\n]\n\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis implementation follows the FP-Growth algorithm as described. It constructs the FP-tree, mines conditional FP-trees, and collects frequent item-sets. The results are sorted as required to ensure determinism."}
{"task_id": 71, "completion_id": 0, "completion": "```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    for sample in data:\n        if sample:  # Ensure the sample is not empty\n            label = sample[-1]\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n    return label_counts\n```\n\nThis function iterates over each sample in the input data set, extracts the label from the last element of each sample, and updates the count of each label in the `label_counts` dictionary. If the input data set is empty, the function returns an empty dictionary."}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Calculate the variance reduction for a split in a regression tree.\n\n    Parameters:\n    - y: np.ndarray, the target vector for the parent node.\n    - y_left: np.ndarray, the target vector for the left child node after the split.\n    - y_right: np.ndarray, the target vector for the right child node after the split.\n\n    Returns:\n    - float, the variance reduction obtained by the split, rounded to the nearest 4th decimal.\n    \"\"\"\n    # Calculate the variance of the parent node\n    var_y = np.var(y, axis=0).sum()\n    \n    # Calculate the variance of the left and right child nodes\n    var_y_left = np.var(y_left, axis=0).sum()\n    var_y_right = np.var(y_right, axis=0).sum()\n    \n    # Number of samples in the parent, left, and right nodes\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    \n    # Calculate the variance reduction\n    vr = var_y - (n_left / n) * var_y_left - (n_right / n) * var_y_right\n    \n    # Return the variance reduction rounded to the nearest 4th decimal\n    return round(vr, 4)\n```\n\nThis function calculates the variance reduction for a split in a regression tree by following the given formula. It computes the variance for the parent and child nodes, then uses these to determine the reduction in variance due to the split. The result is rounded to four decimal places as specified."}
{"task_id": 74, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef magnitude_spectrum(frames: \"np.ndarray\") -> \"list[list[float]]\":\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    # Ensure frames is at least 2D\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]\n    \n    # Compute the magnitude spectrum for each frame\n    magnitude_spectra = []\n    for frame in frames:\n        # Compute the real FFT\n        fft_result = np.fft.rfft(frame)\n        # Compute the magnitude spectrum\n        magnitude = np.abs(fft_result)\n        # Round to four decimal places\n        rounded_magnitude = np.round(magnitude, 4)\n        # Append to the result list\n        magnitude_spectra.append(rounded_magnitude.tolist())\n    \n    return magnitude_spectra\n```\n\nThis function first checks if the input `frames` is a one-dimensional array and converts it to a two-dimensional array if necessary. It then iterates over each frame, computes the real FFT using `numpy.fft.rfft`, calculates the magnitude of the FFT coefficients, rounds them to four decimal places, and appends the result to a list. Finally, it returns the list of magnitude spectra."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n\n    def euclidean_distance(x1, x2):\n        return sum((a - b) ** 2 for a, b in zip(x1, x2))\n\n    predictions = []\n\n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [(euclidean_distance(test_sample, train_sample), label)\n                     for train_sample, label in zip(X_train, y_train)]\n        \n        # Sort distances by the first element (distance) and then by the second element (label) in case of ties\n        distances.sort(key=lambda x: (x[0], x[1]))\n        \n        # Get the k nearest neighbors\n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        # Find the most common label among the k nearest neighbors\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        \n        predictions.append(most_common_label)\n\n    return predictions\n```\n\nThis implementation follows the rules specified:\n\n1. It calculates the Euclidean distance between each test sample and all training samples.\n2. It sorts the distances and selects the k nearest neighbors.\n3. It uses majority voting to determine the class label, breaking ties by choosing the smallest class label.\n4. It checks if k is valid and returns -1 if it is not."}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n```\n\nThis function takes two inputs, `y` and `y_pred`, which are expected to be one-hot encoded true labels and predicted probabilities, respectively. It computes the unnormalized categorical cross-entropy loss using the formula provided, ensuring numerical stability by adding a small epsilon value before taking the logarithm. The result is then rounded to four decimal places and returned as a float."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef linear_forward(A, W, b):\n    \"\"\"Linear part of a layer's forward propagation.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Forward propagation for the LINEAR->ACTIVATION layer.\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a python dictionary containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n    \n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n    \n    cache = (linear_cache, activation_cache)\n    return A, cache\n\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1...WL and b1...bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation=\"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation=\"sigmoid\")\n    caches.append(cache)\n    \n    # Round the final activation matrix AL to 4 decimal places and convert it to a plain Python list\n    AL_rounded = np.round(AL, 4).tolist()\n    \n    return AL_rounded, caches\n```\n\nThis code defines the forward propagation for an L-layer neural network using ReLU activations for all hidden layers and a sigmoid activation for the output layer. The `L_model_forward` function takes the input data `X` and the network parameters `parameters`, computes the forward pass, and returns the final activations rounded to four decimal places as a plain Python list, along with the caches needed for backpropagation."}
{"task_id": 78, "completion_id": 0, "completion": "Here is the implementation of the Adamax update step function:\n\n```python\nimport numpy as np\n\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    \n    # Convert lists to numpy arrays for element-wise operations\n    params = np.array(params)\n    grads = np.array(grads)\n    m = np.array(m)\n    u = np.array(u)\n    \n    # Update first-moment estimate\n    m_t = beta1 * m + (1 - beta1) * grads\n    \n    # Update exponentially weighted infinity-norm\n    u_t = np.maximum(beta2 * u, np.abs(grads))\n    \n    # Calculate the step size\n    step = learning_rate / (1 - beta1 ** t) * m_t / (u_t + epsilon)\n    \n    # Update parameters\n    params -= step\n    \n    # Increment the time-step counter\n    t += 1\n    \n    # Round the results to 6 decimal places\n    updated_params = np.round(params, 6).tolist()\n    updated_m = np.round(m_t, 6).tolist()\n    updated_u = np.round(u_t, 6).tolist()\n    updated_t = t\n    \n    return updated_params, updated_m, updated_u, updated_t\n```\n\nThis function takes the current parameter vector, gradient vector, first-moment estimates, exponentially weighted infinity-norms, and the current time-step counter as inputs, along with the Adamax hyper-parameters. It performs one Adamax update step and returns the updated parameter vector, first-moment estimates, exponentially weighted infinity-norms, and the incremented time-step counter, all rounded to six decimal places."}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    w = np.array(w)\n    grad_w = np.array(grad_w)\n    \n    # Initialize running averages to zero\n    E_grad = np.zeros_like(w)\n    E_delta = np.zeros_like(w)\n    \n    # Calculate E_grad\n    E_grad = rho * E_grad + (1 - rho) * (grad_w ** 2)\n    \n    # Calculate RMS of gradients\n    RMS_grad = np.sqrt(E_grad + eps)\n    \n    # Since it's the first step, E_delta is zero, so RMS_\u0394w will be sqrt(eps)\n    RMS_\u0394w = np.sqrt(E_delta + eps)\n    \n    # Calculate adaptive learning rate\n    adaptive_lr = RMS_\u0394w / RMS_grad\n    \n    # Calculate parameter update\n    \u0394w = adaptive_lr * grad_w\n    \n    # Update E_delta\n    E_delta = rho * E_delta + (1 - rho) * (\u0394w ** 2)\n    \n    # Update weights\n    w_new = w - \u0394w\n    \n    # Return the updated weights as a list rounded to 4 decimal places\n    return np.round(w_new, 4).tolist()\n\n# Example usage:\n# w = [1.0, 2.0, 3.0]\n# grad_w = [0.1, -0.2, 0.3]\n# updated_weights = adadelta_update(w, grad_w)\n# print(updated_weights)\n```\n\nThis function implements the Adadelta optimization algorithm for a single update step, assuming that the running averages are initialized to zero. It handles both 1-D and n-D input arrays and returns the updated weights as a Python list rounded to four decimal places."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y have the same shape\n    assert A2.shape == Y.shape, \"A2 and Y must have the same shape\"\n\n    # Clip A2 to avoid log(0) which is undefined\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    m = A2.size\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n\n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to a NumPy array if it isn't already\n    Q = np.array(Q)\n    \n    # Number of actions\n    n = len(Q)\n    \n    # Find the index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize the probability array\n    probabilities = np.full(n, base_prob)\n    \n    # Set the probability of the greedy action\n    probabilities[greedy_index] = greedy_prob\n    \n    # Round the probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum of probabilities is exactly 1\n    probabilities = np.clip(probabilities, 0, 1)\n    probabilities /= np.sum(probabilities)\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis implementation ensures that the probabilities are correctly calculated according to the \u03b5-soft policy, rounded to four decimal places, and that their sum is exactly 1. The use of NumPy helps in efficiently handling the calculations and ensures numerical stability."}
{"task_id": 84, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    numerator = np.sum(residuals * h_pred)\n    denominator = np.sum(h_pred ** 2)\n    \n    if denominator == 0:\n        return 1.0\n    \n    gamma = numerator / denominator\n    return round(gamma, 4)\n\n# Example usage:\n# y = np.array([3, -0.5, 2, 7])\n# y_pred = np.array([2.5, 0.0, 2, 8])\n# h_pred = np.array([0.5, -0.5, 0, -1])\n# print(mse_line_search(y, y_pred, h_pred))  # Output should be the optimal gamma\n```\n\nThis function calculates the optimal step size \\(\\gamma\\) for gradient boosting with the mean-squared-error (MSE) objective. It follows the closed-form solution provided in the task description, ensuring that if the denominator is zero, it returns 1.0 by convention. The result is rounded to four decimal places as required."}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    # Check if learning rate is 0 or X is all zeros\n    if lr == 0 or not np.any(X):\n        return W.tolist()\n\n    # Step 1: Compute logits Z = X \u00b7 W\n    Z = np.dot(X, W)\n\n    # Step 2: Apply softmax transformation row-wise to obtain predicted probabilities \u0176\n    exp_Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))  # Subtract max for numerical stability\n    Y_hat = exp_Z / np.sum(exp_Z, axis=1, keepdims=True)\n\n    # Step 3: Compute the gradient of the average cross-entropy loss with respect to W\n    grad = np.dot(X.T, (Y_hat - Y)) / X.shape[0]\n\n    # Step 4: Update the weights with plain gradient descent\n    W_updated = W - lr * grad\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_updated, 4).tolist()\n```\n\nThis function implements one step of gradient descent for a softmax regression model. It first checks if the learning rate is zero or if the input data `X` is all zeros, in which case it returns the current weights without any changes. It then computes the logits, applies the softmax function to get the predicted probabilities, calculates the gradient of the loss with respect to the weights, and updates the weights using the gradient descent rule. Finally, it returns the updated weights rounded to four decimal places."}
{"task_id": 86, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that aggregates predictions from multiple decision trees using a majority vote. The function will handle both numeric and string labels, ensuring that in case of a tie, the smallest label is chosen.\n\nHere's the implementation of the `aggregate_random_forest_votes` function:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_predictions = []\n\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [predictions[tree_index][sample_index] for tree_index in range(len(predictions))]\n        \n        # Count the occurrences of each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen\n        majority_vote = min(vote_counts, key=lambda x: (-vote_counts[x], x))\n        \n        # Append the majority vote to the result list\n        aggregated_predictions.append(majority_vote)\n\n    return aggregated_predictions\n```\n\n### Explanation:\n\n1. **Initialization**: We first determine the number of samples by checking the length of the first inner list (`num_samples`). We also initialize an empty list `aggregated_predictions` to store the final predictions.\n\n2. **Iterate Over Samples**: We loop over each sample index from `0` to `num_samples - 1`.\n\n3. **Collect Votes**: For each sample, we collect the predictions from all trees. This is done by iterating over each tree index and accessing the prediction for the current sample.\n\n4. **Count Votes**: We use `Counter` from the `collections` module to count the occurrences of each class label in the collected votes.\n\n5. **Determine Majority Vote**: We find the class label with the highest vote count. In case of a tie, the `min` function is used with a custom key. The key `lambda x: (-vote_counts[x], x)` ensures that the label with the highest count is chosen first, and in case of a tie, the smallest label is chosen.\n\n6. **Store Result**: The majority vote for the current sample is appended to the `aggregated_predictions` list.\n\n7. **Return Result**: Finally, we return the list of aggregated predictions.\n\nThis function efficiently aggregates the predictions using majority voting and handles ties by selecting the smallest label."}
{"task_id": 87, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]  # Number of input features\n    n_h = 10          # Fixed size of the hidden layer\n    n_y = Y.shape[0]  # Number of output units\n    \n    return n_x, n_h, n_y\n```\n\nThis function extracts the necessary dimensions from the input and output matrices `X` and `Y`, respectively, and returns them along with the fixed hidden layer size of 10."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z_array = np.asarray(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the values to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, (list, np.ndarray)):\n        return rounded_values.tolist()\n    else:\n        return rounded_values.item()\n\n# Example usage:\n# z = np.array([-1000, 0, 3])\n# print(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis implementation ensures that the softplus function is computed in a numerically stable manner using `np.logaddexp`, and it handles both scalar and array-like inputs appropriately, returning a pure Python list for non-scalar inputs."}
{"task_id": 89, "completion_id": 0, "completion": "Here's the implementation of the `linear_activation_forward` function:\n\n```python\nimport numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # Linear part\n    Z = np.dot(W, A_prev) + b\n    \n    # Activation part\n    if activation == \"relu\":\n        A = np.maximum(0, Z)\n    elif activation == \"sigmoid\":\n        A = 1 / (1 + np.exp(-Z))\n    \n    # Round the activations to 4 decimal places and convert to a list\n    A_rounded = A.round(4).tolist()\n    \n    # Cache for backpropagation\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    \n    # Verify the shape of the output activation\n    assert A.shape == (W.shape[0], A_prev.shape[1]), \"Output activation shape mismatch\"\n    \n    return A_rounded, cache\n```\n\nThis function performs the forward propagation for a single layer in a neural network. It first computes the linear transformation \\( Z = W \\cdot A_{\\text{prev}} + b \\), then applies the specified activation function (either ReLU or sigmoid). The results are rounded to four decimal places and converted to a plain Python list. The function also returns a cache containing the intermediate values needed for backpropagation."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Sort the arm indices from the policy estimates\n    sorted_indices = sorted(policy.ev_estimates.keys())\n    \n    # Calculate the squared errors\n    squared_errors = [\n        (policy.ev_estimates[i] - bandit.arm_evs[i]) ** 2\n        for i in sorted_indices\n    ]\n    \n    # Compute the mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Round the result to 4 decimal places\n    return round(mse_value, 4)\n```\n\nThis function first checks if the policy has any estimates. If not, it returns `numpy.nan`. Otherwise, it sorts the arm indices from the policy estimates, calculates the squared errors for each arm, computes the mean-squared error, and rounds the result to 4 decimal places before returning it."}
{"task_id": 91, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    dA_np = np.array(dA)\n    Z_np = np.array(activation_cache)\n    \n    # Check if shapes match\n    if dA_np.shape != Z_np.shape:\n        return -1\n    \n    # Compute the gradient of ReLU\n    dZ_np = dA_np * (Z_np > 0)\n    \n    # Convert the result back to a list of lists\n    dZ = dZ_np.tolist()\n    \n    return dZ\n```\n\nThis function first converts the input lists to NumPy arrays to leverage vectorized operations. It then checks if the shapes of the arrays match; if not, it returns `-1`. If the shapes match, it computes the gradient of the ReLU function using element-wise multiplication and a boolean mask that indicates where the elements of `Z` are greater than zero. Finally, it converts the resulting NumPy array back to a list of lists and returns it."}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport numbers\n\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and not isinstance(a, bool)\n```\n\nThis function checks if the input `a` is an instance of `numbers.Number` and ensures it is not a boolean by using `isinstance(a, bool)` in the return statement. If both conditions are met, it returns `True`; otherwise, it returns `False`."}
{"task_id": 93, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    # Convert input to a NumPy array\n    Z_array = np.array(Z)\n    \n    # Apply ReLU activation\n    A_array = np.maximum(0, Z_array)\n    \n    # Convert the results to Python lists\n    A = A_array.tolist()\n    cache = Z_array.tolist()\n    \n    return A, cache\n```\n\nThis function takes an input `Z`, which can be a NumPy array, a Python scalar, or a nested list, and computes the ReLU activation for each element. The result is returned as a tuple containing two lists: the first list contains the ReLU activations, and the second list is the original input converted to a list. This ensures that the output is JSON-serializable."}
{"task_id": 94, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    # Count the frequency of each label\n    label_counts = Counter(neighbors_targets)\n    \n    # Find the maximum frequency\n    max_frequency = max(label_counts.values())\n    \n    # Collect all labels with the maximum frequency\n    candidates = [label for label, count in label_counts.items() if count == max_frequency]\n    \n    # Return the smallest label among the candidates\n    return min(candidates)\n```\n\nThis function uses the `Counter` from the `collections` module to count the occurrences of each label in the list of neighbor targets. It then determines the maximum frequency and collects all labels that have this frequency. Finally, it returns the smallest label from among these candidates, ensuring that ties are resolved according to Python's default ordering."}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build the vocabulary and add <UNK>\n    vocab = set()\n    for sentence in corpus:\n        vocab.update(sentence.split())\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n    \n    # Step 2: Build frequency tables for 1-gram to N-gram\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    \n    for sentence in corpus:\n        words = [\"<s>\"] + sentence.split() + [\"</s>\"]\n        for i in range(len(words)):\n            for j in range(1, N+1):\n                if i+j <= len(words):\n                    ngram = tuple(words[i:i+j])\n                    ngram_counts[j-1][ngram] += 1\n    \n    # Step 3: Compute the log-probability of the sequence\n    sequence_words = [\"<s>\"] + sequence.split() + [\"</s>\"]\n    log_prob = 0.0\n    \n    for i in range(len(sequence_words)):\n        for j in range(1, N+1):\n            if i+j <= len(sequence_words):\n                ngram = tuple(sequence_words[i:i+j])\n                context = ngram[:-1]\n                \n                # Handle unseen words by mapping them to \"<UNK>\"\n                if any(word not in vocab for word in context):\n                    context = tuple(\"<UNK>\" if word not in vocab else word for word in context)\n                \n                if j == 1:\n                    count_context = sum(ngram_counts[0].values())\n                else:\n                    count_context = ngram_counts[j-2][context]\n                \n                count_ngram = ngram_counts[j-1][ngram]\n                \n                # Additive smoothing\n                smoothed_prob = (count_ngram + K) / (count_context + K * V)\n                log_prob += math.log(smoothed_prob)\n    \n    # Return the log-probability rounded to 4 decimals\n    return round(log_prob, 4)\n```"}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    if not isinstance(Z, np.ndarray):\n        Z = np.array(Z)\n    \n    # Compute the derivative of ReLU element-wise\n    derivative = (Z > 0).astype(float)\n    \n    # Convert the result back to the original type if it was a scalar\n    if isinstance(Z, (int, float)):\n        return float(derivative)\n    \n    # Convert the result to a list if the input was a list\n    if isinstance(Z, list):\n        return derivative.tolist()\n    \n    # Return the NumPy array if the input was an ndarray\n    return derivative\n\n# Example usage:\nprint(drelu(3))          # Output: 1.0\nprint(drelu(-2))         # Output: 0.0\nprint(drelu([1, -1, 2]))  # Output: [1.0, 0.0, 1.0]\nprint(drelu([[1, -1], [2, -2]]))  # Output: [[1.0, 0.0], [1.0, 0.0]]\n```\n\nThis function `drelu` computes the element-wise derivative of the ReLU activation function for various types of input, including scalars, lists, and NumPy arrays. It ensures that the output maintains the same shape and type as the input."}
{"task_id": 99, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    elif isinstance(Z, list):\n        return [relu_(item) for item in Z]\n    elif isinstance(Z, np.ndarray):\n        return np.maximum(0, Z)\n    else:\n        raise TypeError(\"Unsupported input type. Please provide a scalar, list, or NumPy array.\")\n\n# Example usage:\nprint(relu_(3))  # Output: 3\nprint(relu_(-1))  # Output: 0\nprint(relu_([1, -2, 3]))  # Output: [1, 0, 3]\nprint(relu_(np.array([[1, -2], [-3, 4]])))  # Output: [[1 0]\n                                              #         [0 4]]\n```\n\nThis implementation of the ReLU activation function handles scalars, lists, and NumPy arrays, ensuring that the output type matches the input type. For NumPy arrays, it uses the `np.maximum` function to apply the ReLU activation in a vectorized manner."}
{"task_id": 100, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the lengths of the inputs are the same\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Calculate the number of mismatches\n    mismatches = np.sum(actual != predicted)\n    \n    # Calculate the error rate\n    error_rate = mismatches / len(actual)\n    \n    # Return the error rate rounded to four decimal places\n    return round(error_rate, 4)\n\n# Example usage\nactual = np.array([0, 1, 2, 2, 1])\npredicted = np.array([0, 0, 2, 1, 1])\nprint(classification_error(actual, predicted))  # Output: 0.4\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError(\"Cannot apply softmax to a tensor that is 1D\")\n    \n    # Compute the max of x along the specified axis, keeping the dimensions\n    max_x = np.max(x, axis=axis, keepdims=True)\n    \n    # Subtract the max from x for numerical stability\n    exp_x = np.exp(x - max_x)\n    \n    # Compute the sum of the exponentials along the specified axis, keeping the dimensions\n    sum_exp_x = np.sum(exp_x, axis=axis, keepdims=True)\n    \n    # Compute the softmax\n    softmax_x = exp_x / sum_exp_x\n    \n    # Round to 4 decimal places and convert to a list\n    return np.round(softmax_x, 4).tolist()\n```\n\nThis implementation of the softmax function follows the guidelines provided, ensuring numerical stability by subtracting the maximum value along the specified axis before computing the exponential. It also checks for 1-dimensional input and raises an appropriate error. The result is rounded to four decimal places and converted to a standard Python list."}
{"task_id": 102, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    # Check for invalid input\n    if len(x) != len(y) or len(x) == 0 or degree < 0 or len(x) < degree + 1:\n        return -1\n    \n    # Create the design matrix for the training data\n    X = np.vander(x, degree + 1, increasing=True)\n    \n    # Solve for the weights using the Moore-Penrose pseudo-inverse\n    weights = np.linalg.pinv(X).dot(y)\n    \n    # Create the design matrix for the prediction data\n    X_pred = np.vander(x_pred, degree + 1, increasing=True)\n    \n    # Compute the predictions\n    predictions = X_pred.dot(weights)\n    \n    # Round the predictions to 4 decimal places\n    predictions_rounded = [round(pred, 4) for pred in predictions]\n    \n    return predictions_rounded\n```\n\nThis implementation follows the guidelines provided and ensures that the polynomial regression model is fitted correctly and predictions are made for the given input points. The function checks for various edge cases to ensure robustness."}
{"task_id": 104, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Computes the entropy of a label distribution.\n\n    Args:\n        labels: 1-D NumPy array containing the class labels.\n\n    Returns:\n        Entropy of the label distribution.\n    \"\"\"\n    if len(labels) == 0:\n        return 0.0\n    \n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    parent_entropy = entropy(y)\n    total_samples = len(y)\n    weighted_entropy_sum = 0.0\n    \n    for split in splits:\n        split_entropy = entropy(split)\n        split_weight = len(split) / total_samples\n        weighted_entropy_sum += split_weight * split_entropy\n    \n    information_gain_value = parent_entropy - weighted_entropy_sum\n    return round(information_gain_value, 4)\n\n# Example usage:\n# y = np.array([0, 1, 1, 0, 1])\n# splits = [np.array([0, 0]), np.array([1, 1, 1])]\n# print(information_gain(y, splits))  # Output should be rounded to 4 decimal places\n```\n\nThis code defines a function `information_gain` that calculates the information gain for a given split of class labels. It uses a helper function `entropy` to compute the entropy of a label distribution. The main function calculates the entropy of the parent node and the weighted sum of entropies of the child nodes, then computes the information gain and rounds it to four decimal places."}
{"task_id": 105, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    # Validate sigma\n    if sigma <= 0:\n        return -1\n    \n    # Ensure x is a NumPy array for vectorized operations\n    x_array = np.array(x)\n    \n    # Compute the Gaussian PDF\n    pdf_values = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-((x_array - mean) ** 2) / (2 * sigma ** 2))\n    \n    # Round each result to five decimal places and convert to a list\n    rounded_pdf_values = [round(value, 5) for value in pdf_values]\n    \n    return rounded_pdf_values\n```\n\nThis implementation checks if the standard deviation `sigma` is strictly positive. If not, it returns `-1`. Otherwise, it computes the Gaussian PDF for each element in the input `x`, rounds the results to five decimal places, and returns them as a list. The function handles various input types, including lists, tuples, and NumPy arrays, and also gracefully handles empty inputs by returning an empty list."}
{"task_id": 107, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    # Update the first moment estimate\n    m_t = beta1 * m_prev + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v_prev + (1 - beta2) * (grad ** 2)\n    \n    # Bias correction\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    \n    # Update the parameters\n    theta_new = theta - alpha * m_hat_t / (np.sqrt(v_hat_t) + epsilon)\n    \n    # Increment the time step\n    t_new = t + 1\n    \n    # Round all values to 6 decimal places and convert to lists\n    theta_new_rounded = [round(x, 6) for x in theta_new]\n    m_t_rounded = [round(x, 6) for x in m_t]\n    v_t_rounded = [round(x, 6) for x in v_t]\n    \n    return theta_new_rounded, m_t_rounded, v_t_rounded, t_new\n```\n\nThis function implements a single step of the Adam optimization algorithm, updating the parameters based on the given gradient and previous moment estimates. The results are rounded to six decimal places and returned as lists, along with the incremented time step."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) algorithm for matrix factorization, we need to follow these steps:\n\n1. **Initialize** the factor matrices \\( W \\) and \\( H \\) with random values using a fixed seed for reproducibility.\n2. **Iterate** between updating \\( W \\) and \\( H \\) while keeping the other fixed.\n3. **Compute** the regularized Frobenius reconstruction loss after each update.\n4. **Stop** the iteration if the loss drops below the tolerance (`tol`) or if the maximum number of iterations (`max_iter`) is reached.\n5. **Return** the reconstructed matrix \\( \\hat{X} = WH \\) rounded to 4 decimal places.\n\nHere's the complete implementation of the `als_factorization` function:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    \n    # Initialize W and H with random values\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss():\n        reconstruction = np.dot(W, H)\n        loss = np.linalg.norm(X - reconstruction, 'fro')**2\n        reg_term = alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        return loss + reg_term\n    \n    prev_loss = np.inf\n    for iteration in range(max_iter):\n        # Update W\n        for i in range(N):\n            if np.sum(X[i, :]) > 0:\n                A = np.dot(H, H.T) + alpha * np.eye(K)\n                b = np.dot(X[i, :], H)\n                W[i, :] = np.linalg.solve(A, b)\n        \n        # Update H\n        for j in range(M):\n            if np.sum(X[:, j]) > 0:\n                A = np.dot(W.T, W) + alpha * np.eye(K)\n                b = np.dot(W.T, X[:, j])\n                H[:, j] = np.linalg.solve(A, b)\n        \n        # Compute the loss\n        current_loss = compute_loss()\n        \n        # Check for convergence\n        if np.abs(current_loss - prev_loss) < tol:\n            break\n        \n        prev_loss = current_loss\n    \n    # Reconstruct the matrix\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# result = als_factorization(X, K=2, alpha=0.1, max_iter=100, tol=1e-4)\n# print(result)\n```\n\n### Explanation:\n- **Initialization**: We initialize \\( W \\) and \\( H \\) with random values using `np.random.rand` and set the seed to 0 for reproducibility.\n- **Updates**: For each iteration, we update \\( W \\) and \\( H \\) by solving the regularized least-squares problem. This involves computing the matrix \\( A \\) and vector \\( b \\) for each row/column of \\( X \\) and solving the linear system \\( Ax = b \\).\n- **Loss Calculation**: The regularized Frobenius loss is calculated after each update to check for convergence.\n- **Convergence Check**: The loop stops if the change in loss is below the tolerance or if the maximum number of iterations is reached.\n- **Reconstruction**: Finally, the reconstructed matrix \\( \\hat{X} \\) is computed and returned as a list of lists rounded to 4 decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow these steps:\n\n1. **Initialization**: Use the K-Means++ method to choose the initial centroids.\n2. **Assignment**: Assign each data point to the nearest centroid.\n3. **Update**: Update the centroids based on the mean of the points assigned to them.\n4. **Convergence Check**: Repeat the assignment and update steps until the cluster assignments do not change or the maximum number of iterations is reached.\n5. **Sorting and Rounding**: Sort the final centroids by their first coordinate and round them to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    # Step 1: Initialize centroids using K-Means++\n    centroids = []\n    centroids.append(X[np.random.choice(len(X))])\n\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid_index = np.random.choice(len(X), p=probabilities)\n        centroids.append(X[next_centroid_index])\n\n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        # Assignment step\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n        # Update step\n        new_centroids = np.array([X[labels == k].mean(axis=0) if len(X[labels == k]) > 0 else centroids[k] for k in range(K)])\n\n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Step 3: Sort and round centroids\n    centroids = sorted(centroids, key=lambda c: (c[0], tuple(c)))\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n\n    return centroids\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [4, 2], [4, 4], [4, 0]])\n# K = 2\n# print(kmeans(X, K, random_state=0))\n```\n\n### Explanation:\n\n- **K-Means++ Initialization**: We start by randomly selecting the first centroid. For each subsequent centroid, we calculate the distance from each data point to the nearest existing centroid, compute the probability distribution based on these distances, and select the next centroid according to this distribution.\n\n- **Lloyd's Iterations**: We repeatedly assign each data point to the nearest centroid and then update the centroids to be the mean of the points assigned to them. This process continues until the centroids no longer change or the maximum number of iterations is reached.\n\n- **Handling Empty Clusters**: If a cluster becomes empty during the update step, its centroid remains unchanged.\n\n- **Sorting and Rounding**: Finally, we sort the centroids by their first coordinate and round them to four decimal places before returning them."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a text string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs the model, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array([encoded_input])\n    prediction = model.predict(input_batch)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output\n```\n\nThis code provides the required helper functions for encoding and decoding character-level sequences using a fixed-length representation. The `string_to_int` function converts a text string into a fixed-length list of integer token IDs, while `int_to_string` converts a list of integer IDs back to a text string, ignoring padding tokens. The `run_example` function integrates these functionalities by encoding the input text, running a model prediction, and decoding the output."}
{"task_id": 112, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that processes a given text string to extract words, count their frequencies, and then sort them according to the specified rules. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Extract Words**: Use a regular expression to find all sequences of English alphabetic characters in the text. This will help us identify words while ignoring any non-alphabetic characters.\n\n2. **Normalize Case**: Convert all extracted words to lowercase to ensure that the comparison is case-insensitive.\n\n3. **Count Frequencies**: Use a `Counter` from the `collections` module to count the occurrences of each word.\n\n4. **Create Token Objects**: For each unique word, create a `Token` object and set its `word` and `count` attributes.\n\n5. **Sort Tokens**: Sort the list of `Token` objects first by frequency in descending order, and then lexicographically in ascending order for words with the same frequency.\n\n6. **Return the Result**: Return the sorted list of `Token` objects. If no words are found, return an empty list.\n\nHere's the complete implementation:\n\n```python\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    # Extract words using regex, converting them to lowercase\n    words = re.findall(r'[a-zA-Z]+', text.lower())\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Create Token objects\n    tokens = [Token(word) for word in word_counts]\n    \n    # Set the count attribute for each token\n    for token in tokens:\n        token.count = word_counts[token.word]\n    \n    # Sort tokens by frequency (descending) and then lexicographically (ascending)\n    tokens.sort(key=lambda x: (-x.count, x.word))\n    \n    return tokens\n```\n\n### Explanation:\n\n- **Regex for Word Extraction**: `re.findall(r'[a-zA-Z]+', text.lower())` finds all sequences of alphabetic characters in the text, converting everything to lowercase to ensure case insensitivity.\n\n- **Counting Frequencies**: `Counter(words)` creates a dictionary-like object where keys are words and values are their respective counts.\n\n- **Creating Tokens**: We iterate over the word counts to create `Token` objects and set their `count` attributes.\n\n- **Sorting**: The `sort` method is used with a custom key that sorts primarily by negative count (to achieve descending order) and secondarily by the word itself (for lexicographical order).\n\nThis implementation efficiently handles the task requirements and ensures that the output list of `Token` objects is correctly sorted and formatted."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        predictions.append(predicted_string)\n\n    return predictions\n```"}
{"task_id": 114, "completion_id": 0, "completion": "To implement the SELU activation function in Python, we need to handle both the activation and its derivative based on the input flag. The function should work with NumPy arrays and convert the output to standard Python lists with the specified precision.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772848170429916717\n    lambd = 1.0507009873554804934193349852946\n    \n    if derivative:\n        # Compute the derivative of SELU\n        result = np.where(x >= 0, lambd, lambd * alpha * np.exp(x))\n    else:\n        # Compute the SELU activation\n        result = np.where(x >= 0, lambd * x, lambd * alpha * (np.exp(x) - 1))\n    \n    # Round the result to 6 decimal places and convert to a list\n    rounded_result = np.round(result, 6).tolist()\n    return rounded_result\n\n# Example usage:\n# x = np.array([[1, -1], [2, -2]])\n# print(selu(x))  # Activation mode\n# print(selu(x, derivative=True))  # Derivative mode\n```\n\n### Explanation:\n1. **Constants**: We define the constants `alpha` and `lambd` as specified in the problem statement.\n2. **Conditional Logic**: We use `np.where` to apply the SELU activation or its derivative based on the `derivative` flag.\n   - For activation (`derivative=False`), we use the formula:\n     \\[\n     \\operatorname{selu}(x) = \\lambda \\begin{cases}\n     x, & x \\ge 0 \\\\\n     \\alpha \\, (e^x - 1), & x < 0\n     \\end{cases}\n     \\]\n   - For the derivative (`derivative=True`), we use the formula:\n     \\[\n     \\operatorname{selu}'(x) = \\lambda \\begin{cases}\n     1, & x \\ge 0 \\\\\n     \\alpha \\, e^x, & x < 0\n     \\end{cases}\n     \\]\n3. **Rounding and Conversion**: We round the resulting array to 6 decimal places using `np.round` and then convert it to a standard Python list using `.tolist()` to ensure compatibility with environments that do not support NumPy.\n\nThis implementation ensures that the function works correctly for both activation and derivative modes, and the output is formatted as required."}
{"task_id": 115, "completion_id": 0, "completion": "To implement the `logistic_loss_and_gradient` function, we need to follow these steps:\n\n1. **Compute the linear combination**: For each sample, compute \\( z = x \\cdot w \\).\n2. **Apply the sigmoid function**: Compute the predicted probabilities \\( p = \\sigma(z) = \\frac{1}{1 + e^{-z}} \\).\n3. **Handle numerical stability**: Replace any predicted probability \\( p \\) that is exactly 0 or 1 with a small constant \\( \\epsilon = 1e-20 \\).\n4. **Compute the loss**: Calculate the average binary cross-entropy loss \\( J(w) \\).\n5. **Compute the gradient**: Calculate the gradient of the loss with respect to the weights \\( \\nabla J(w) \\).\n6. **Return the results**: Return the loss rounded to 4 decimal places and the gradient converted to a nested Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector if it's not already\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    \n    # Compute the linear combination\n    z = np.dot(X, w)\n    \n    # Apply the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n    \n    # Handle numerical stability\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the loss\n    loss = -1 / len(y) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient\n    gradient = 1 / len(y) * np.dot(X.T, (p - y))\n    \n    # Round the loss and convert the gradient to a nested list\n    loss_rounded = round(loss, 4)\n    gradient_rounded = gradient.round(4).tolist()\n    \n    return loss_rounded, gradient_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, -0.5])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\n### Explanation:\n- **Sigmoid Function**: The sigmoid function \\( \\sigma(z) = \\frac{1}{1 + e^{-z}} \\) maps any real-valued number into the (0, 1) interval, which can be interpreted as probabilities.\n- **Numerical Stability**: By clipping the probabilities \\( p \\) to be between \\( \\epsilon \\) and \\( 1 - \\epsilon \\), we avoid taking the logarithm of zero or one, which would result in undefined values.\n- **Gradient Calculation**: The gradient is computed using the formula \\( \\nabla J(w) = \\frac{1}{m} X^T (p - y) \\), which is derived from the chain rule applied to the logistic loss function.\n\nThis implementation ensures that the loss and gradient are computed correctly and efficiently, even for large datasets."}
{"task_id": 116, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    # Calculate the parent MSE\n    parent_mean = np.mean(y)\n    mse_parent = np.mean((y - parent_mean) ** 2)\n    \n    # Calculate the weighted child MSE\n    n = len(y)\n    mse_children = 0.0\n    for split in splits:\n        if len(split) == 0:\n            continue\n        split_mean = np.mean(split)\n        mse_children += (len(split) / n) * np.mean((split - split_mean) ** 2)\n    \n    # Calculate the MSE reduction\n    mse_reduction = mse_parent - mse_children\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_reduction, 4)\n```\n\nThis function calculates the mean-squared error reduction for a given split in a regression decision tree. It first computes the parent MSE, then calculates the weighted average of the child MSEs, and finally returns the difference rounded to four decimal places."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for each training example.\n2. **Iteratively Train Weak Learners**: For each iteration, train a decision stump that minimizes the weighted error. Update the weights based on the error of the stump.\n3. **Calculate Stump Weight**: Compute the weight of the stump using the formula provided.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions from all stumps and determine the final prediction based on the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    D = np.full(m, 1 / m)  # Initialize weights uniformly\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Find the best decision stump\n        best_error = np.inf\n        best_threshold = 0\n        best_feature = 0\n        best_polarity = 1\n\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_train[:, feature] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] >= threshold] = -1\n\n                    errors = D[y_train != predictions]\n                    error = np.sum(errors)\n\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_polarity = polarity\n\n        # Calculate the stump weight\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n\n        # Update the weights\n        predictions = np.ones(m)\n        if best_polarity == 1:\n            predictions[X_train[:, best_feature] < best_threshold] = -1\n        else:\n            predictions[X_train[:, best_feature] >= best_threshold] = -1\n\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n\n        # Store the classifier\n        classifiers.append((best_feature, best_threshold, best_polarity, alpha))\n\n    # Predict for the test set\n    predictions = np.zeros(len(X_test))\n    for feature, threshold, polarity, alpha in classifiers:\n        pred = np.ones(len(X_test))\n        if polarity == 1:\n            pred[X_test[:, feature] < threshold] = -1\n        else:\n            pred[X_test[:, feature] >= threshold] = -1\n        predictions += alpha * pred\n\n    return [1 if p > 0 else -1 for p in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function, which trains an AdaBoost model using decision stumps and predicts labels for a test set. The function handles the initialization of weights, training of weak learners, updating of weights, and aggregation of predictions to produce the final output."}
{"task_id": 119, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    # Check if params and grads are empty or have different lengths\n    if not params or not grads or len(params) != len(grads):\n        return []\n    \n    # Initialize an empty list to store updated parameters\n    updated_params = []\n    \n    # Iterate over the parameters and gradients\n    for param, grad in zip(params, grads):\n        # Perform the SGD update\n        updated_param = param - alpha * grad\n        # Round the updated parameter to four decimal places and convert to a list\n        updated_params.append(np.round(updated_param, 4).tolist())\n    \n    return updated_params\n```\n\nThis function checks if the input lists `params` and `grads` are valid and have the same length. If they are not, it returns an empty list. Otherwise, it performs the SGD update for each parameter, rounds the result to four decimal places, and returns the updated parameters as a list of lists."}
{"task_id": 120, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Check if the shapes of X and y are compatible\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Add a column of ones to X for the bias term\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Initialize the weight vector randomly\n    n_features = X.shape[1]\n    w = np.random.uniform(-1 / math.sqrt(n_features), 1 / math.sqrt(n_features), n_features)\n    \n    # Perform batch gradient descent\n    m = X.shape[0]\n    for _ in range(n_iterations):\n        # Compute the prediction\n        y_pred = X @ w\n        \n        # Compute the gradient\n        gradient = (1 / m) * X.T @ (y_pred - y)\n        \n        # Update the weights\n        w -= learning_rate * gradient\n    \n    # Round the weights to 4 decimal places and convert to a list\n    return [round(weight, 4) for weight in w]\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [3, 5, 7]\n# n_iterations = 1000\n# learning_rate = 0.01\n# print(linear_regression(X, y, n_iterations, learning_rate))\n```\n\nThis implementation follows the steps outlined in the task description. It checks for shape compatibility, adds a bias column, initializes weights randomly, performs batch gradient descent, and returns the weights rounded to four decimal places."}
{"task_id": 122, "completion_id": 0, "completion": "To solve the problem of finding the ordinary least-squares (OLS) linear regression weights using the Moore-Penrose pseudo-inverse, we can follow these steps:\n\n1. Convert the input lists `X` and `y` to NumPy arrays.\n2. Augment the design matrix `X` by adding a column of ones to account for the intercept term.\n3. Use the Moore-Penrose pseudo-inverse to compute the optimal weights.\n4. Round the weights to the nearest fourth decimal place and return them as a flat Python list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    # Convert lists to NumPy arrays\n    X_np = np.array(X)\n    y_np = np.array(y)\n    \n    # Augment X with a column of ones\n    X_augmented = np.column_stack((np.ones(X_np.shape[0]), X_np))\n    \n    # Compute the optimal weights using the Moore-Penrose pseudo-inverse\n    w_optimal = np.linalg.pinv(X_augmented).dot(y_np)\n    \n    # Round the weights to the nearest 4th decimal place\n    w_rounded = np.round(w_optimal, 4)\n    \n    # Return as a flat Python list\n    return w_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [2, 3, 4]\n# print(linear_regression_weights(X, y))\n```\n\n### Explanation:\n\n- **Conversion to NumPy Arrays**: The input lists `X` and `y` are converted to NumPy arrays for efficient numerical operations.\n- **Augmentation**: A column of ones is added to the design matrix `X` using `np.column_stack`. This column represents the intercept term in the linear model.\n- **Moore-Penrose Pseudo-inverse**: The optimal weights are computed using the Moore-Penrose pseudo-inverse of the augmented matrix `X_augmented`. This is done using `np.linalg.pinv`.\n- **Rounding**: The resulting weights are rounded to four decimal places using `np.round`.\n- **Return as List**: Finally, the weights are converted back to a Python list and returned.\n\nThis approach ensures that the solution is robust and works even when the matrix `X\u1d40X` is not invertible, which can happen in cases of multicollinearity or when the number of features exceeds the number of samples."}
{"task_id": 123, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # Convert the input to a NumPy array if it isn't already\n    y = np.asarray(y)\n    \n    # Find unique categories and sort them\n    unique_categories = sorted(np.unique(y))\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = []\n    \n    # Create the one-hot encoded matrix\n    for value in y:\n        # Create a row of zeros\n        row = [0] * len(unique_categories)\n        \n        # Set the appropriate index to 1\n        row[unique_categories.index(value)] = 1\n        \n        # Append the row to the matrix\n        one_hot_matrix.append(row)\n    \n    return one_hot_matrix\n```\n\nThis function first ensures that the input is a NumPy array. It then determines the unique categories in the input array and sorts them. For each value in the input array, it creates a row of zeros, sets the appropriate index to 1 based on the category, and appends this row to the one-hot encoded matrix. Finally, it returns the matrix as a list of lists."}
{"task_id": 126, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert input lists to NumPy arrays for efficient computation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Determine the number of features (columns)\n    C = X.shape[1]\n    \n    # Set gamma to 1/C if it is None\n    if gamma is None:\n        gamma = 1 / C\n    \n    # Compute the Gram matrix\n    K = (gamma * np.dot(X, Y.T) + c0) ** d\n    \n    # Round the result to 4 decimal places and convert to a nested list\n    return K.round(4).tolist()\n```\n\nThis implementation follows the requirements specified in the task description. It uses NumPy for efficient matrix operations and ensures that the final output is a nested Python list rounded to four decimal places. The function handles cases where `Y` is not provided by defaulting to `X`, and it sets `gamma` to `1/C` if `gamma` is `None`."}
{"task_id": 127, "completion_id": 0, "completion": "```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Find the unique classes and sort them\n    unique_classes = sorted(set(y_true + y_pred))\n\n    # Initialize the confusion matrix with zeros\n    num_classes = len(unique_classes)\n    matrix = [[0] * num_classes for _ in range(num_classes)]\n\n    # Create a mapping from class label to index\n    class_to_index = {cls: idx for idx, cls in enumerate(unique_classes)}\n\n    # Fill the confusion matrix\n    for true, pred in zip(y_true, y_pred):\n        true_idx = class_to_index[true]\n        pred_idx = class_to_index[pred]\n        matrix[true_idx][pred_idx] += 1\n\n    return matrix\n```\n\nThis implementation first checks if the lengths of `y_true` and `y_pred` are the same. If not, it returns `-1`. It then determines the unique classes and sorts them to establish the order of the rows and columns in the confusion matrix. A dictionary is used to map each class to its index. Finally, it iterates over the paired true and predicted labels, updating the matrix accordingly. The result is a list of lists representing the confusion matrix."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    \n    for c in classes:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mu_c).T, (X_c - mu_c))\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    \n    for c in classes:\n        N_c = X[y == c].shape[0]\n        mu_c = np.mean(X[y == c], axis=0)\n        S_B += N_c * np.dot((mu_c - mu).reshape(d, 1), (mu_c - mu).reshape(1, d))\n    \n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n    \n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Step 5: Sort the eigen-pairs in descending order of the eigen-values\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 6: Flip the sign of eigenvectors if the first non-zero element is negative\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[:, i][eigenvectors[:, i] != 0][0] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Step 7: Project X on the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    projected_data = np.dot(X, W)\n    \n    # Round every element to four decimal places\n    projected_data_rounded = np.round(projected_data, 4)\n    \n    # Convert to list of lists\n    return projected_data_rounded.tolist()\n```"}
{"task_id": 129, "completion_id": 0, "completion": "```python\nfrom itertools import islice, cycle\n\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    \n    # Use itertools.cycle to create an infinite iterator over the sequence\n    # Use itertools.islice to take the first 'samples' elements from this iterator\n    cycled_sequence = cycle(sequence)\n    result = list(islice(cycled_sequence, samples))\n    \n    return result\n```\n\nThis function uses `itertools.cycle` to create an infinite iterator that cycles through the given sequence. It then uses `itertools.islice` to extract the first `samples` elements from this infinite iterator. If the sequence is empty or `samples` is not positive, it returns an empty list."}
{"task_id": 130, "completion_id": 0, "completion": "To solve this problem, we need to create a function that processes a list of experience tuples and calculates the empirical probability distribution for a given `(state, action)` pair. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Filter the Tuples**: First, we need to filter the list of tuples to only include those where the `state` and `action` match the query.\n\n2. **Count the Next States**: For the filtered tuples, we count the occurrences of each `next_state`.\n\n3. **Calculate Probabilities**: Convert these counts into probabilities by dividing each count by the total number of occurrences for the given `(state, action)` pair.\n\n4. **Format the Output**: Format the output as a list of `[next_state, probability]` pairs, sorted by `next_state`, and round the probabilities to 4 decimal places.\n\nHere's the implementation of the function:\n\n```python\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # Filter transitions to only include those with the given state and action\n    filtered_transitions = [(s, a, r, ns) for s, a, r, ns in transitions if s == state and a == action]\n    \n    if not filtered_transitions:\n        return []\n    \n    # Count the occurrences of each next_state\n    next_state_counts = Counter(ns for _, _, _, ns in filtered_transitions)\n    \n    # Calculate the total number of occurrences\n    total_count = sum(next_state_counts.values())\n    \n    # Create the probability distribution\n    prob_distribution = [\n        [ns, round(count / total_count, 4)]\n        for ns, count in next_state_counts.items()\n    ]\n    \n    # Sort the distribution by next_state\n    prob_distribution.sort(key=lambda x: x[0])\n    \n    return prob_distribution\n```\n\n### Explanation:\n\n- **Filtering**: We use a list comprehension to filter the transitions that match the given `(state, action)` pair.\n  \n- **Counting**: We use `Counter` from the `collections` module to count how many times each `next_state` appears in the filtered list.\n\n- **Probability Calculation**: We calculate the probability for each `next_state` by dividing its count by the total number of occurrences.\n\n- **Formatting**: We format the result as a list of `[next_state, probability]` pairs, sort it by `next_state`, and round the probabilities to 4 decimal places.\n\nThis function will correctly compute the empirical probability distribution for any given `(state, action)` pair from the list of experience tuples."}
{"task_id": 131, "completion_id": 0, "completion": "```python\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    global _SHARED_SEQUENCES\n    \n    # Check if uid is a valid index for _SHARED_SEQUENCES\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n    \n    sequence = _SHARED_SEQUENCES[uid]\n    \n    # Check if i is a valid index for the sequence\n    if i < -len(sequence) or i >= len(sequence):\n        return None\n    \n    return sequence[i]\n```\n\nThis function first checks if the `uid` is within the valid range for the `_SHARED_SEQUENCES` list. If not, it returns `None`. Then, it retrieves the sequence associated with the given `uid`. Next, it checks if the index `i` is valid for the retrieved sequence, considering both positive and negative indices. If `i` is out of range, it returns `None`. Otherwise, it returns the element at the specified index."}
{"task_id": 132, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return z\n    elif isinstance(z, (list, tuple)):\n        return np.array(z)\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        raise TypeError(\"Unsupported input type\")\n\n# Example usage:\n# print(linear(5))          # Should return 5\n# print(linear([1, 2, 3]))  # Should return array([1, 2, 3])\n# print(linear((4, 5)))     # Should return array([4, 5])\n# x = np.array([6, 7, 8])\n# print(linear(x))          # Should return array([6, 7, 8]) without creating a new array\n```\n\nThis implementation of the linear activation function handles the specified input types and constraints. It returns the input unchanged if it's a scalar, converts lists and tuples to NumPy arrays, and returns the NumPy array directly if the input is already an ndarray."}
{"task_id": 133, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    # Check for invalid indices\n    for sequence in X_train:\n        if any(index < 0 or index >= vocab_length for index in sequence):\n            return -1\n\n    # Initialize the one-hot encoded target list\n    Y_train = []\n\n    # Convert each sequence to one-hot encoding\n    for sequence in X_train:\n        one_hot_sequence = []\n        for index in sequence:\n            # Create a one-hot vector for the current index\n            one_hot_vector = [0] * vocab_length\n            one_hot_vector[index] = 1\n            one_hot_sequence.append(one_hot_vector)\n        Y_train.append(one_hot_sequence)\n\n    return Y_train\n```\n\nThis function first checks if any token index in the input sequences is out of the valid range `[0, vocab_length - 1]`. If it finds any such index, it returns `-1`. Otherwise, it proceeds to convert each sequence into its one-hot encoded form and returns the result as a nested list."}
{"task_id": 134, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    # Check if the list is empty\n    if not payoff_probs:\n        return (-1.0, -1)\n    \n    # Validate probabilities\n    if any(p < 0 or p > 1 for p in payoff_probs):\n        return (-1.0, -1)\n    \n    # Find the index of the maximum probability\n    max_prob_index = np.argmax(payoff_probs)\n    \n    # Return the maximum probability and its index\n    return (payoff_probs[max_prob_index], max_prob_index)\n```\n\nThis function first checks if the input list is empty and returns `(-1.0, -1)` if it is. Then, it validates that all probabilities are within the range `[0, 1]`. If any probability is out of this range, it returns `(-1.0, -1)`. Finally, it uses `numpy.argmax` to find the index of the maximum probability and returns the maximum probability along with its index."}
{"task_id": 135, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Perform OLS linear regression and predict target values for the test set.\"\"\"\n    \n    # Convert input lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add a column of ones to X_train for the intercept term\n    X_train_with_intercept = np.column_stack((np.ones(len(X_train)), X_train))\n    \n    # Calculate the normal equation: (X^T * X)^(-1) * X^T * y\n    try:\n        # Compute the pseudo-inverse of (X^T * X)\n        XTX_inv = np.linalg.inv(X_train_with_intercept.T @ X_train_with_intercept)\n        # Calculate the coefficients\n        coefficients = XTX_inv @ X_train_with_intercept.T @ y_train\n    except np.linalg.LinAlgError:\n        # If the matrix is singular, return -1\n        return [-1]\n    \n    # Add a column of ones to X_test for the intercept term\n    X_test_with_intercept = np.column_stack((np.ones(len(X_test)), X_test))\n    \n    # Predict the target values for X_test\n    predictions = X_test_with_intercept @ coefficients\n    \n    # Round the predictions to 4 decimal places\n    predictions_rounded = [round(pred, 4) for pred in predictions]\n    \n    return predictions_rounded\n```\n\nThis implementation follows the steps outlined in the task description:\n\n1. It converts the input lists to NumPy arrays for easier manipulation.\n2. It adds a column of ones to the training feature matrix to account for the intercept term.\n3. It attempts to compute the regression coefficients using the normal equation. If the matrix \\((X^{\\top}X)\\) is singular, it catches the `LinAlgError` and returns \\([-1]\\).\n4. It adds a column of ones to the test feature matrix and uses the learned coefficients to make predictions.\n5. Finally, it rounds the predictions to four decimal places and returns them as a list."}
{"task_id": 136, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    # Step 1: Subtract the max value along the specified axis\n    max_z = np.max(z, axis=axis, keepdims=True)\n    shifted_z = z - max_z\n    \n    # Step 2: Exponentiate the shifted values\n    exp_shifted_z = np.exp(shifted_z)\n    \n    # Step 3: Sum the exponentials along the specified axis\n    sum_exp_z = np.sum(exp_shifted_z, axis=axis, keepdims=True)\n    \n    # Step 4: Compute the softmax\n    softmax_values = exp_shifted_z / sum_exp_z\n    \n    # Step 5: Round to four decimal places\n    rounded_softmax = np.round(softmax_values, decimals=4)\n    \n    # Step 6: Convert to a Python list\n    return rounded_softmax.tolist()\n\n# Example usage:\nz = np.array([1.0, 2.0, 3.0])\naxis = 0\nprint(softmax(z, axis))  # Output: [[0.0900, 0.2447, 0.6652]]\n```\n\nThis implementation follows the steps outlined in the problem description to compute the numerically-stable softmax function. It handles the subtraction of the maximum value to prevent overflow, exponentiates the shifted values, normalizes them, rounds the results, and finally converts the NumPy array to a Python list."}
{"task_id": 138, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    # Check if the lengths are the same and non-zero\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate accuracy\n    accuracy = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy, 4)\n\n# Example usage:\n# y_true = [1, 2, 3, 4]\n# y_pred = [1, 2, 0, 4]\n# print(accuracy_score(y_true, y_pred))  # Output: 0.75\n```\n\nThis function first checks if the input lists `y_true` and `y_pred` are of the same non-zero length. If not, it returns `-1`. Otherwise, it calculates the number of correct predictions by comparing each element in the lists. Finally, it computes the accuracy as the ratio of correct predictions to the total number of predictions and returns this value rounded to four decimal places."}
{"task_id": 139, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    z = np.array(z)\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each element in the input array\n    for value in z:\n        # Calculate the tanh using the numerically stable formula\n        tanh_value = (2 / (1 + np.exp(-2 * value))) - 1\n        # Round the result to 4 decimal places and append to the result list\n        result.append(round(tanh_value, 4))\n    \n    return result\n```\n\nThis implementation defines the `tanh_activation` function, which computes the hyperbolic tangent for each element in the input iterable. It uses the numerically stable formula provided and rounds each result to four decimal places before returning the list of computed values."}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping the fire maze, we need to simulate the spread of fire and the movement of the agent simultaneously. The key challenge is to ensure that the agent reaches the goal before any part of the maze burns. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Initialize the Grid**: Parse the input grid to identify the starting positions of the agent and the fire.\n\n2. **Simulate Fire Spread**: Use a breadth-first search (BFS) to simulate the spread of fire. Each minute, the fire will spread to all adjacent free cells.\n\n3. **Simulate Agent Movement**: Use another BFS to simulate the agent's movement. The agent can only move to cells that are not on fire at the moment the agent arrives.\n\n4. **Check for Goal Reachability**: During the agent's BFS, check if the agent can reach the goal cell before the fire does.\n\n5. **Edge Cases**: Handle edge cases such as when the start or goal cell is initially on fire, or when the maze size is 1x1.\n\nHere's the complete implementation of the solution:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Check if start or goal is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # Initialize fire positions\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))  # (row, col, time)\n    \n    # Initialize agent position\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    visited = set()\n    visited.add((0, 0, 0))\n    \n    # Function to get the state of the cell at a given time\n    def get_cell_state(row, col, time):\n        if row < 0 or row >= n or col < 0 or col >= n or grid[row][col] == '#':\n            return '#'\n        fire_time = fire_times.get((row, col), float('inf'))\n        if fire_time <= time:\n            return 'F'\n        return '.'\n    \n    # Simulate fire spread\n    fire_times = {}\n    while fire_queue:\n        row, col, time = fire_queue.popleft()\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] != '#' and (new_row, new_col) not in fire_times:\n                fire_times[(new_row, new_col)] = time + 1\n                fire_queue.append((new_row, new_col, time + 1))\n    \n    # Simulate agent movement\n    while agent_queue:\n        row, col, time = agent_queue.popleft()\n        if row == n - 1 and col == n - 1:\n            return time\n        \n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col, time + 1) not in visited and get_cell_state(new_row, new_col, time + 1) == '.':\n                visited.add((new_row, new_col, time + 1))\n                agent_queue.append((new_row, new_col, time + 1))\n    \n    return -1\n\n# Example usage:\ngrid = [\n    \".F.\",\n    \".#.\",\n    \"...\"\n]\nprint(escape_fire_maze(grid))  # Output: 2\n```\n\n### Explanation:\n- **Fire Simulation**: We use a BFS to simulate the fire spread. Each cell that catches fire is recorded with the time it catches fire.\n- **Agent Simulation**: We use another BFS to simulate the agent's movement. The agent can only move to cells that are not on fire at the time the agent arrives.\n- **State Checking**: The `get_cell_state` function checks if a cell is free or on fire at a given time.\n- **Edge Cases**: The function handles cases where the start or goal is on fire immediately, or when the maze size is 1x1.\n\nThis approach ensures that we efficiently simulate both the fire spread and the agent's movement, providing the correct minimum time for the agent to reach the goal or determine if it's impossible."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Validate the metric\n    valid_metrics = ['euclidean', 'manhattan', 'cosine']\n    if metric not in valid_metrics:\n        metric = 'euclidean'\n    \n    # Calculate the distance matrix\n    distance_matrix = cdist(X_test, X_train, metric=metric)\n    \n    # Find the indices of the k nearest neighbors for each test sample\n    nearest_indices = np.argsort(distance_matrix, axis=1)[:, :k]\n    \n    # Get the labels of the k nearest neighbors\n    k_nearest_labels = y_train[nearest_indices]\n    \n    # Predict the class by majority vote\n    predicted_labels = []\n    for labels in k_nearest_labels:\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        # In case of a tie, return the smallest label value\n        predicted_label = unique_labels[np.argmax(counts)]\n        predicted_labels.append(predicted_label)\n    \n    return np.array(predicted_labels)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1.5, 2.5]])\n# k = 2\n# print(knn_predict(X_train, y_train, X_test, k))  # Output might be [0]\n```\n\nThis implementation of the k-Nearest Neighbors (k-NN) classifier follows the specified requirements. It computes the distances between test samples and training samples using the specified metric, finds the k nearest neighbors for each test sample, and predicts the class by majority vote. In case of a tie, it returns the smallest label value. The function defaults to the Euclidean metric if an unknown metric is provided."}
{"task_id": 143, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    \n    if derivative:\n        return np.where(x >= 0, 1, alpha)\n    else:\n        return np.where(x >= 0, x, alpha * x)\n\n# Example usage:\n# x = np.array([-1, 0, 1])\n# print(leaky_relu(x))  # Output: [-0.2  0.   1. ]\n# print(leaky_relu(x, derivative=True))  # Output: [0.2 1.  1. ]\n```\n\nThis implementation of the Leaky ReLU function uses NumPy's `where` function to apply the appropriate transformation to each element of the input array based on whether it is greater than or equal to zero. The function handles both the activation and its derivative, and it works for any input that can be converted to a NumPy array."}
{"task_id": 144, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the shapes of the arrays are the same\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate the absolute differences\n    abs_diff = np.abs(actual - predicted)\n    \n    # Calculate the mean of the absolute differences\n    mae = np.mean(abs_diff)\n    \n    # Round the result to 4 decimal places\n    return round(mae, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(mean_absolute_error(actual, predicted))  # Output: 0.5\n```\n\nThis function first converts the input sequences to NumPy arrays to ensure compatibility with NumPy operations. It then checks if the shapes of the two arrays are the same. If they are not, it returns `-1`. If they are, it calculates the mean of the absolute differences between the actual and predicted values, rounds the result to four decimal places, and returns it."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - (dot_product / (norm_a * norm_b + epsilon))\n\n    if k > len(X):\n        k = len(X)\n\n    predictions = []\n\n    for test_sample in X_test:\n        distances = []\n        for i, train_sample in enumerate(X):\n            if metric == 'euclidean':\n                dist = euclidean_distance(test_sample, train_sample)\n            elif metric == 'manhattan':\n                dist = manhattan_distance(test_sample, train_sample)\n            elif metric == 'cosine':\n                dist = cosine_distance(test_sample, train_sample)\n            else:\n                raise ValueError(\"Invalid metric specified\")\n            distances.append((dist, y[i]))\n\n        # Sort distances and get the labels of the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in distances[:k]]\n\n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        if len(unique_labels) > 1 and counts[np.argmax(counts)] == counts[np.argsort(counts)[-2]]:\n            most_common_label = min(unique_labels[counts == counts[np.argmax(counts)]])\n\n        predictions.append(most_common_label)\n\n    return predictions\n```"}
{"task_id": 147, "completion_id": 0, "completion": "To implement binary Logistic Regression from scratch using batch gradient descent, we need to follow these steps:\n\n1. **Initialize the weights and bias**: Start with random values for the weights and a zero bias.\n2. **Define the sigmoid function**: This function will map any real-valued number into the (0, 1) interval, which can be interpreted as probabilities.\n3. **Compute the negative log-likelihood**: This is the cost function that we will minimize.\n4. **Gradient Descent**: Update the weights and bias iteratively to minimize the cost function.\n5. **Prediction**: Use the learned weights and bias to predict the class labels for the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    # Check if the training set contains only one class\n    if np.all(y_train == 0) or np.all(y_train == 1):\n        return [int(np.mean(y_train))] * len(X_test)\n\n    # Add a column of ones to X_train for the bias term\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    # Initialize weights and bias\n    weights = np.zeros(X_train.shape[1])\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Gradient Descent\n    for _ in range(epochs):\n        # Compute the predicted probabilities\n        z = np.dot(X_train, weights)\n        y_pred = sigmoid(z)\n        \n        # Compute the gradient\n        gradient = np.dot(X_train.T, (y_pred - y_train)) / X_train.shape[0]\n        \n        # Update the weights\n        weights -= learning_rate * gradient\n\n    # Add a column of ones to X_test for the bias term\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Predict the class labels\n    z_test = np.dot(X_test, weights)\n    y_pred_test = sigmoid(z_test)\n    predictions = (y_pred_test >= 0.5).astype(int)\n\n    return predictions.tolist()\n\n# Example usage\nX_train = np.array([[-2,-1],[-3,-2],[-1,-2],[-2,-3],\n                    [ 2, 1],[ 3, 2],[ 1, 2],[ 2, 3]])\ny_train = np.array([0,0,0,0,1,1,1,1])\nX_test  = np.array([[-2,-2],[ 2, 2]])\n\npredictions = logistic_regression(X_train, y_train, X_test)\nprint(predictions)  # Output: [0, 1]\n```\n\n### Explanation:\n1. **Initialization**: We initialize the weights to zero and add a bias term by appending a column of ones to the feature matrix.\n2. **Sigmoid Function**: The sigmoid function maps the linear combination of features and weights to a probability between 0 and 1.\n3. **Gradient Descent**: We update the weights by subtracting the product of the learning rate and the gradient of the cost function.\n4. **Prediction**: After training, we use the learned weights to predict the class labels for the test data by applying the sigmoid function and thresholding at 0.5.\n\nThis implementation ensures that the model learns the optimal weights and bias to minimize the negative log-likelihood, effectively performing binary classification."}
{"task_id": 148, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check for special cases\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    \n    # Initialize the list of smoothed values\n    smoothed_values = []\n    \n    # Handle the case when alpha is 0\n    if alpha == 0:\n        return [round(data[0], 4)] * len(data)\n    \n    # Handle the case when alpha is 1\n    if alpha == 1:\n        return [round(x, 4) for x in data]\n    \n    # Compute the smoothed values using the recursive formula\n    s_k = data[0]\n    smoothed_values.append(round(s_k, 4))\n    \n    for x_k in data[1:]:\n        s_k = (1 - alpha) * s_k + alpha * x_k\n        smoothed_values.append(round(s_k, 4))\n    \n    return smoothed_values\n```\n\nThis implementation checks for invalid inputs and handles the special cases where `alpha` is 0 or 1. It then computes the exponential moving average using the recursive formula provided, rounding each smoothed value to four decimal places."}
{"task_id": 150, "completion_id": 0, "completion": "To solve the problem of finding the shortest path in a grid using the A* search algorithm with the Manhattan-distance heuristic, we need to implement the following steps:\n\n1. **Initialize the Open Set**: This is a priority queue where we store nodes to be evaluated. We will use a min-heap to efficiently get the node with the lowest cost.\n\n2. **Initialize the Closed Set**: This set will keep track of nodes that have already been evaluated.\n\n3. **Initialize the G-Scores and F-Scores**: The G-score is the cost of the path from the start node to the current node. The F-score is the estimated total cost from the start node to the goal through the current node, calculated as `G-score + H-score`.\n\n4. **Heuristic Function**: The Manhattan distance heuristic calculates the estimated cost from the current node to the goal.\n\n5. **A* Algorithm**:\n   - Start with the initial node (top-left corner).\n   - While there are nodes in the open set, select the node with the lowest F-score.\n   - If the selected node is the goal, reconstruct and return the path.\n   - For each neighbor of the current node, calculate the tentative G-score.\n   - If the tentative G-score is better than the previously recorded G-score, update the path and scores, and add the neighbor to the open set if it's not already there.\n\n6. **Path Reconstruction**: Once the goal is reached, backtrack from the goal to the start using the recorded paths.\n\nHere's the complete implementation:\n\n```python\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    if grid[0][0] == 1 or grid[rows-1][cols-1] == 1:\n        return -1\n\n    start = (0, 0)\n    goal = (rows - 1, cols - 1)\n\n    # Directions for moving in the grid: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Priority queue for the open set\n    open_set = []\n    heappush(open_set, (0, start))\n\n    # Dictionary to store the G-score of each node\n    g_scores = {start: 0}\n    # Dictionary to store the F-score of each node\n    f_scores = {start: heuristic(start, goal)}\n    # Dictionary to store the path\n    came_from = {}\n\n    while open_set:\n        _, current = heappop(open_set)\n\n        if current == goal:\n            return reconstruct_path(came_from, current)\n\n        for direction in directions:\n            neighbor = (current[0] + direction[0], current[1] + direction[1])\n\n            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:\n                tentative_g_score = g_scores[current] + 1\n\n                if neighbor not in g_scores or tentative_g_score < g_scores[neighbor]:\n                    came_from[neighbor] = current\n                    g_scores[neighbor] = tentative_g_score\n                    f_scores[neighbor] = tentative_g_score + heuristic(neighbor, goal)\n                    if neighbor not in open_set:\n                        heappush(open_set, (f_scores[neighbor], neighbor))\n\n    return -1\n\ndef heuristic(a: Tuple[int, int], b: Tuple[int, int]) -> int:\n    \"\"\"Calculate the Manhattan distance between two points.\"\"\"\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef reconstruct_path(came_from: dict, current: Tuple[int, int]) -> List[Tuple[int, int]]:\n    \"\"\"Reconstruct the path from the start to the current position.\"\"\"\n    total_path = [current]\n    while current in came_from:\n        current = came_from[current]\n        total_path.append(current)\n    total_path.reverse()\n    return total_path\n```\n\n### Explanation:\n- **Heuristic Function**: The Manhattan distance is used to estimate the cost from the current node to the goal.\n- **Priority Queue**: The open set is implemented as a priority queue to efficiently retrieve the node with the lowest F-score.\n- **Path Reconstruction**: After reaching the goal, the path is reconstructed by backtracking from the goal to the start using the `came_from` dictionary.\n\nThis implementation ensures that the shortest path is found using the A* algorithm with the Manhattan heuristic, and it handles cases where no path exists by returning `-1`."}
{"task_id": 151, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef sigmoid_derivative(activated):\n    return activated * (1 - activated)\n\ndef tanh(x):\n    return np.tanh(x)\n\ndef tanh_derivative(activated):\n    return 1 - np.square(activated)\n\ndef relu(x):\n    return np.maximum(0, x)\n\ndef relu_derivative(activated):\n    return (activated > 0).astype(float)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return e_x / np.sum(e_x, axis=-1, keepdims=True)\n\ndef softmax_derivative(activated):\n    # Since softmax is typically used in the final layer, we return an array of ones.\n    return np.ones_like(activated)\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as\n        `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                      derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    if activation == 'sigmoid':\n        A = sigmoid(X)\n        grad = upstream_grad * sigmoid_derivative(A)\n    elif activation == 'tanh':\n        A = tanh(X)\n        grad = upstream_grad * tanh_derivative(A)\n    elif activation == 'relu':\n        A = relu(X)\n        grad = upstream_grad * relu_derivative(A)\n    elif activation == 'softmax':\n        A = softmax(X)\n        grad = upstream_grad * softmax_derivative(A)\n    else:\n        raise ValueError(f\"Unsupported activation function: {activation}\")\n\n    return np.round(A, 4), np.round(grad, 4)\n```\n\nThis implementation defines the four common activation functions (`sigmoid`, `tanh`, `relu`, and `softmax`) along with their derivatives. The `activation_forward_backward` function applies the specified activation function to the input `X` and computes the element-wise product of the `upstream_grad` and the local gradient of the activation function. Both the activated output and the gradient are rounded to 4 decimal places before being returned."}
{"task_id": 152, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    \n    # Check if the lengths are the same and not empty\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = np.sum(y_true == y_pred)\n    \n    # Calculate accuracy\n    accuracy = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to four decimal places\n    return round(accuracy, 4)\n\n# Example usage\ny_true = [1, 0, 2, 2, 1]\ny_pred = [1, 0, 1, 2, 0]\nprint(accuracy_score(y_true, y_pred))  # Output: 0.6\n```"}
{"task_id": 154, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Ensure X and Y are 2D arrays\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n\n    # Compute squared Euclidean distances\n    dists = np.sum(X**2, axis=1, keepdims=True) + np.sum(Y**2, axis=1) - 2 * np.dot(X, Y.T)\n    dists = np.maximum(dists, 0)  # Ensure no negative distances due to floating point errors\n\n    # Apply the RBF kernel formula\n    K = np.exp(-gamma * dists)\n\n    # Round to 6 decimal places and convert to nested list\n    return np.round(K, 6).tolist()\n```\n\nThis function first ensures that both `X` and `Y` are treated as 2D arrays, even if they are provided as 1D arrays. It then computes the squared Euclidean distances between each pair of points in `X` and `Y`. The RBF kernel is applied to these distances, and the resulting matrix is rounded to six decimal places before being converted to a nested Python list and returned."}
{"task_id": 155, "completion_id": 0, "completion": "To implement the forward pass of the actor network using NumPy, we need to perform the following steps:\n\n1. Convert the input state to a NumPy array if it's not already.\n2. Perform the first linear transformation using `W1` and `b1`, followed by the ReLU activation.\n3. Perform the second linear transformation using `W2` and `b2`, followed by the ReLU activation.\n4. Perform the final linear transformation using `W3` and `b3`, followed by the tanh activation.\n5. Round the resulting action vector to four decimal places and return it as a list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it's not already\n    state = np.array(state)\n    \n    # First linear transformation and ReLU activation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU\n    \n    # Second linear transformation and ReLU activation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU\n    \n    # Third linear transformation and tanh activation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    \n    # Round the action vector to four decimal places and return as a list\n    return [round(float(a), 4) for a in action]\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# weights = {\n#     'W1': np.random.randn(3, 64),\n#     'b1': np.random.randn(64),\n#     'W2': np.random.randn(64, 32),\n#     'b2': np.random.randn(32),\n#     'W3': np.random.randn(32, 1),\n#     'b3': np.random.randn(1)\n# }\n# print(actor_forward(state, weights))\n```\n\nThis function takes a state vector and a dictionary of weights, performs the forward pass through the network, and returns the action vector rounded to four decimal places. The ReLU activation is implemented using `np.maximum(0, z)`, and the tanh activation is implemented using `np.tanh(z)`."}
{"task_id": 157, "completion_id": 0, "completion": "```python\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    # Check if the lengths of the containers are different\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Check if both containers are empty\n    if len(y_true) == 0:\n        return 0\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate the accuracy\n    accuracy = correct_predictions / len(y_true)\n    \n    # Return the accuracy rounded to 4 decimal places\n    return round(accuracy, 4)\n```"}
{"task_id": 158, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    # If fit_intercept is True, add a column of ones to X\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Number of features (including intercept if added)\n    M = X.shape[1]\n    \n    # Create the regularization matrix A\n    A = alpha * np.eye(M)\n    \n    # If fit_intercept is True, set the first diagonal element of A to 0\n    if fit_intercept:\n        A[0, 0] = 0\n    \n    # Compute the closed-form solution for beta\n    beta_hat = np.linalg.inv(X.T @ X + A) @ X.T @ y\n    \n    # Round the coefficients to four decimal places\n    beta_hat_rounded = np.round(beta_hat, 4)\n    \n    return beta_hat_rounded.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description. It first checks if an intercept should be added to the feature matrix `X`. If so, it adds a column of ones. Then, it constructs the regularization matrix `A`, ensuring that the intercept term is not regularized if `fit_intercept` is `True`. Finally, it computes the ridge regression coefficients using the closed-form solution and rounds them to four decimal places before returning them as a list."}
{"task_id": 159, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    # Compute the dimension d\n    d = len(x_i)\n    \n    # Compute (x_i - mu)\n    diff = x_i - mu\n    \n    # Compute ln det \u03a3 using numpy.linalg.slogdet\n    sign, log_det_sigma = np.linalg.slogdet(sigma)\n    \n    # Compute \u03a3\u207b\u00b9 (x_i - \u00b5) using numpy.linalg.solve for better numerical stability\n    inv_sigma_diff = np.linalg.solve(sigma, diff)\n    \n    # Compute (x_i - \u00b5)^T \u03a3\u207b\u00b9 (x_i - \u00b5)\n    quadratic_term = np.dot(diff, inv_sigma_diff)\n    \n    # Compute the log probability density\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + log_det_sigma + quadratic_term)\n    \n    # Return the result rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage:\n# x_i = np.array([1.0, 2.0])\n# mu = np.array([0.0, 0.0])\n# sigma = np.array([[1.0, 0.5], [0.5, 1.0]])\n# print(log_gaussian_pdf(x_i, mu, sigma))\n```\n\nThis function computes the log probability density of a multivariate Gaussian distribution for a given sample vector `x_i`, mean vector `mu`, and covariance matrix `sigma`. It uses `numpy.linalg.slogdet` to compute the logarithm of the determinant of the covariance matrix and `numpy.linalg.solve` to solve the linear system involving the inverse of the covariance matrix, ensuring numerical stability. The result is rounded to four decimal places before being returned."}
{"task_id": 160, "completion_id": 0, "completion": "To implement Lasso regression via coordinate descent using only NumPy, we need to follow the steps outlined in the task description. Below is the complete implementation of the `fit_lasso` function:\n\n```python\nimport numpy as np\n\ndef soft_thresholding(a, tau):\n    \"\"\"Apply the soft-thresholding operator.\"\"\"\n    return np.sign(a) * np.maximum(np.abs(a) - tau, 0)\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Step 1: Add an all-ones column to X if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    \n    # Step 2: Initialise all parameters to zero\n    w = np.zeros(n)\n    \n    for _ in range(max_iters):\n        if fit_intercept:\n            # Recompute the intercept in every outer loop\n            b = np.mean(y - X[:, 1:] @ w)\n            r = y - X[:, 1:] @ w - b\n        else:\n            r = y - X @ w\n        \n        for j in range(n):\n            # Step 3: Temporarily set the current weight to 0\n            w_j = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual r_j\n            r_j = r + X[:, j] * w_j\n            \n            # Update weight w_j with the soft-thresholding operator\n            numerator = np.dot(X[:, j], r_j)\n            denominator = np.sum(X[:, j] ** 2)\n            w[j] = soft_thresholding(numerator, lambda_param * m) / denominator\n        \n        if fit_intercept:\n            # Recompute the intercept after updating weights\n            b = np.mean(y - X[:, 1:] @ w)\n    \n    # Return the final intercept and weight vector, rounded to 4 decimal places\n    if fit_intercept:\n        return [round(w_i, 4) for w_i in w[1:]], round(b, 4)\n    else:\n        return [round(w_i, 4) for w_i in w], 0.0\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# lambda_param = 0.1\n# max_iters = 100\n# fit_intercept = True\n# result = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\n# print(result)\n```\n\n### Explanation:\n1. **Soft Thresholding Function**: This helper function implements the soft-thresholding operation.\n2. **Adding Intercept**: If `fit_intercept` is `True`, an all-ones column is added to the feature matrix `X`.\n3. **Initialization**: All weights are initialized to zero.\n4. **Coordinate Descent Loop**:\n   - For each iteration, if `fit_intercept` is `True`, the intercept `b` is recomputed.\n   - For each weight `w_j`, it is temporarily set to zero, and the partial residual `r_j` is computed.\n   - The weight `w_j` is updated using the soft-thresholding operator.\n5. **Final Output**: The final weights and intercept are returned, rounded to four decimal places.\n\nThis implementation ensures that the Lasso regression model is trained using coordinate descent optimization, adhering to the constraints provided."}
{"task_id": 161, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"Predict binary class labels using the Factorization Machine model.\"\"\"\n    # Number of samples\n    m = X.shape[0]\n    \n    # Initialize predictions with the global bias\n    predictions = np.full(m, w0)\n    \n    # Add linear term to predictions\n    predictions += np.dot(X, w)\n    \n    # Add pairwise interaction term using the computational trick\n    XV = np.dot(X, V)\n    XV_squared = XV ** 2\n    X_squared = X ** 2\n    X_squaredV_squared = np.dot(X_squared, V ** 2)\n    \n    pairwise_interaction = 0.5 * (np.sum(XV_squared, axis=1) - np.sum(X_squaredV_squared, axis=1))\n    predictions += pairwise_interaction\n    \n    # Convert scores to binary labels\n    labels = np.where(predictions >= 0, 1, -1)\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 0, 1], [0, 1, 1]])\n# w0 = 0.1\n# w = np.array([0.2, -0.3, 0.4])\n# V = np.array([[0.1, -0.2], [-0.3, 0.4], [0.5, -0.6]])\n# print(factorization_machine_predict(X, w0, w, V))\n```\n\nThis function implements the Factorization Machine prediction model and converts the resulting scores into binary class labels according to the specified rule. The computational trick is used to efficiently calculate the pairwise interaction term."}
{"task_id": 162, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float = 1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    # Ensure the shapes of Y_hat and Y match\n    assert Y_hat.shape == Y.shape, \"Shapes of Y_hat and Y must match.\"\n\n    # Add epsilon for numerical stability\n    Y_hat += epsilon\n\n    # Compute the loss\n    loss = -np.mean(np.sum(Y * np.log(Y_hat), axis=1))\n\n    # Compute the gradient\n    gradient = (Y_hat - Y) / Y_hat.shape[0]\n\n    # Round the loss and gradient to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [[round(grad, 4) for grad in row] for row in gradient]\n\n    return loss_rounded, gradient_rounded\n```\n\nThis function first checks if the shapes of `Y_hat` and `Y` match, then adds a small constant `epsilon` to `Y_hat` to ensure numerical stability when computing the logarithm. It calculates the cross-entropy loss and its gradient, rounding both to four decimal places before returning them."}
{"task_id": 163, "completion_id": 0, "completion": "Here's a complete implementation of the `elastic_net_regression` function based on the provided specifications:\n\n```python\nimport numpy as np\n\ndef expand_polynomial_features(X: list[float], degree: int) -> np.ndarray:\n    \"\"\"Expand the input features into a polynomial feature matrix.\"\"\"\n    X = np.array(X)\n    n_samples = len(X)\n    X_poly = np.ones((n_samples, degree + 1))\n    \n    for i in range(1, degree + 1):\n        X_poly[:, i] = X ** i\n    \n    return X_poly\n\ndef compute_cost(X_poly: np.ndarray, y: np.ndarray, beta: np.ndarray, reg_factor: float, l1_ratio: float) -> float:\n    \"\"\"Compute the Elastic Net cost function.\"\"\"\n    n_samples = len(y)\n    predictions = X_poly @ beta\n    mse = (1 / n_samples) * np.sum((predictions - y) ** 2)\n    l1_penalty = reg_factor * l1_ratio * np.sum(np.abs(beta[1:]))\n    l2_penalty = reg_factor * (1 - l1_ratio) * 0.5 * np.sum(beta[1:] ** 2)\n    return mse + l1_penalty + l2_penalty\n\ndef compute_gradient(X_poly: np.ndarray, y: np.ndarray, beta: np.ndarray, reg_factor: float, l1_ratio: float) -> np.ndarray:\n    \"\"\"Compute the gradient of the Elastic Net cost function.\"\"\"\n    n_samples = len(y)\n    predictions = X_poly @ beta\n    residuals = predictions - y\n    gradient = (1 / n_samples) * X_poly.T @ residuals\n    gradient[1:] += reg_factor * l1_ratio * np.sign(beta[1:])\n    gradient[1:] += reg_factor * (1 - l1_ratio) * beta[1:]\n    return gradient\n\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\"\"\"\n    X_poly = expand_polynomial_features(X, degree)\n    n_features = X_poly.shape[1]\n    \n    # Initialize beta coefficients\n    beta = np.zeros(n_features)\n    \n    if l1_ratio == 0:\n        # Pure Ridge regression using normal equations\n        I = np.eye(n_features)\n        I[0, 0] = 0  # Do not penalize the bias term\n        beta = np.linalg.inv(X_poly.T @ X_poly + reg_factor * (1 - l1_ratio) * I) @ X_poly.T @ y\n    else:\n        # Gradient Descent for Elastic Net\n        for _ in range(n_iterations):\n            gradient = compute_gradient(X_poly, y, beta, reg_factor, l1_ratio)\n            beta -= learning_rate * gradient\n    \n    # Predictions\n    predictions = X_poly @ beta\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\n# X = [1, 2, 3, 4]\n# y = [2, 4, 6, 8]\n# predictions = elastic_net_regression(X, y, degree=2, reg_factor=0.1, l1_ratio=0.5, learning_rate=0.01, n_iterations=1000)\n# print(predictions)\n```\n\n### Explanation:\n1. **Polynomial Feature Expansion**: The `expand_polynomial_features` function creates a matrix of polynomial features up to the specified degree, including the bias term.\n\n2. **Cost Function**: The `compute_cost` function calculates the Elastic Net cost, which includes the mean squared error (MSE), L1 penalty, and L2 penalty.\n\n3. **Gradient Calculation**: The `compute_gradient` function computes the gradient of the Elastic Net cost function, taking into account the L1 and L2 penalties.\n\n4. **Model Fitting**:\n   - For pure Ridge regression (`l1_ratio == 0`), the model is fitted using the normal equations with a diagonal Tikhonov term that does not penalize the bias coefficient.\n   - For Elastic Net (`l1_ratio != 0`), the model is fitted using batch gradient descent.\n\n5. **Predictions**: The model's predictions are computed and returned as a list of floats rounded to 4 decimal places."}
{"task_id": 164, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Computes the binary classification log-loss (cross-entropy loss) for given actual labels and predicted probabilities.\n\n    Parameters:\n    actual (np.array): An array of ground-truth binary labels (0 or 1).\n    predicted (np.array): An array of predicted probabilities for the positive class (values between 0 and 1).\n\n    Returns:\n    float: The average log-loss rounded to six decimal places.\n    \"\"\"\n    # Define epsilon to avoid log(0) or log(1)\n    epsilon = 1e-15\n    \n    # Clip the predicted probabilities to avoid log(0) or log(1)\n    predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    \n    # Calculate the log-loss\n    log_loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    \n    # Return the log-loss rounded to six decimal places\n    return round(log_loss, 6)\n\n# Example usage:\n# actual = np.array([0, 1, 1, 0])\n# predicted = np.array([0.1, 0.9, 0.8, 0.2])\n# print(compute_log_loss(actual, predicted))\n```\n\nThis function `compute_log_loss` takes two numpy arrays as input: `actual`, which contains the true binary labels, and `predicted`, which contains the predicted probabilities for the positive class. It calculates the log-loss using the formula provided, ensuring that the predicted probabilities are clipped to avoid taking the logarithm of zero or one. Finally, it returns the average log-loss rounded to six decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are different\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the number of differing elements\n    diff_count = np.sum(x != y)\n    \n    # Calculate the normalized Hamming distance\n    distance = diff_count / x.shape[0]\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(hamming_distance([1, 0, 1, 1], [1, 0, 0, 1]))  # Output: 0.25\n# print(hamming_distance([1, 0, 1, 1], [1, 0, 1]))     # Output: -1\n```\n\nThis function first checks if the input vectors have the same length. If they do not, it returns `-1`. Otherwise, it calculates the number of differing elements between the two vectors and divides this by the total number of elements to get the normalized Hamming distance. The result is then rounded to four decimal places before being returned."}
{"task_id": 166, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int = 1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    # Initialize weights and bias\n    w = np.zeros(X_train.shape[1])\n    b = 0\n    \n    # Training loop\n    for _ in range(max_iter):\n        num_errors = 0\n        for x_i, y_i in zip(X_train, y_train):\n            # Compute the signed margin\n            m = y_i * (np.dot(w, x_i) + b)\n            # Update if misclassified\n            if m <= 0:\n                w += y_i * x_i\n                b += y_i\n                num_errors += 1\n        # Early stopping if no errors in the current epoch\n        if num_errors == 0:\n            break\n    \n    # Prediction on test set\n    predictions = []\n    for x_test in X_test:\n        score = np.dot(w, x_test) + b\n        # Treat score exactly 0 as +1\n        prediction = 1 if score >= 0 else -1\n        predictions.append(prediction)\n    \n    return predictions\n```"}
{"task_id": 167, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # Clip y_hat to avoid log(0)\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    \n    # Compute the mean BCE loss\n    m = len(y)\n    loss = -1 / m * np.sum(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    \n    # Compute the gradient of the loss with respect to y_hat\n    gradient = (y_hat_clipped - y) / m\n    \n    # Round the loss and gradient to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    \n    return loss_rounded, gradient_rounded\n```\n\nThis function implements the Binary Cross Entropy loss and its gradient as described in the task. It clips the predicted probabilities to avoid taking the logarithm of zero, computes the loss and gradient, and rounds the results to four decimal places before returning them."}
{"task_id": 168, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Number of features\n    n_features = X_train.shape[1]\n\n    # Get unique classes\n    classes = np.unique(y_train)\n\n    # Initialize dictionaries to store means, variances, and prior probabilities\n    means = {}\n    variances = {}\n    priors = {}\n\n    # Calculate means, variances, and priors for each class\n    for c in classes:\n        # Select samples belonging to class c\n        X_c = X_train[y_train == c]\n        \n        # Calculate mean and variance for each feature\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + 1e-6  # Add a small value to avoid division by zero\n        \n        # Calculate prior probability\n        priors[c] = len(X_c) / len(X_train)\n\n    # Function to calculate the Gaussian density\n    def gaussian_density(x, mean, variance):\n        return np.exp(-(x - mean) ** 2 / (2 * variance)) / np.sqrt(2 * np.pi * variance)\n\n    # Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate the posterior probability for each class\n        posteriors = []\n        for c in classes:\n            # Calculate the likelihood of the sample under the current class\n            likelihood = np.prod(gaussian_density(x, means[c], variances[c]))\n            \n            # Calculate the posterior probability using Bayes' theorem\n            posterior = likelihood * priors[c]\n            posteriors.append(posterior)\n        \n        # Predict the class with the highest posterior probability\n        predicted_class = np.argmax(posteriors)\n        predictions.append(predicted_class)\n\n    return predictions\n```\n\nThis implementation of the Gaussian Naive Bayes classifier follows the steps outlined in the task description. It calculates the mean and variance for each feature within each class, computes the prior probabilities, and then uses these parameters to predict the class of each test sample based on the highest posterior probability."}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) +\n                     a2 * np.cos(4 * np.pi * n / (N - 1)) -\n                     a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        return [round(sum(ak * np.cos(2 * np.pi * k * n / (N - 1)) for k, ak in enumerate(coefficients)), 4) for n in range(N)]\n    \n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```\n\nThis function `generate_window` generates the coefficients for various window functions used in digital signal processing. It supports the Hamming, Hann, Blackman-Harris, and generalized cosine windows. The coefficients are rounded to four decimal places and returned as a list. The function also handles special cases such as when `N` is 1 or when an unknown window type is provided."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier using mini-batch Gradient Descent from scratch, we need to follow several steps. Here's a detailed breakdown of the implementation:\n\n1. **Data Preparation**: Convert the input lists to NumPy arrays for easier manipulation. Add an intercept term (bias) to the feature matrices.\n2. **Label Mapping**: Map the original labels to `{0, 1}` for internal processing and then map them back after predictions.\n3. **Gradient Descent**: Implement mini-batch Gradient Descent to minimize the negative log-likelihood loss.\n4. **Prediction**: Use the trained model to predict probabilities and convert them to class labels based on a threshold of 0.5.\n5. **Edge Case Handling**: If all training labels are identical, skip training and predict the same label for all test samples.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term (bias) to the feature matrices\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Handle edge case where all training labels are identical\n    if np.all(y_train == y_train[0]):\n        return [y_train[0]] * len(X_test)\n    \n    # Map original labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Compute predictions\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            \n            # Compute gradients\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / batch_size\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions = (probabilities >= 0.5).astype(int)\n    \n    # Map predictions back to original label set\n    reverse_label_map = {v: k for k, v in label_map.items()}\n    final_predictions = [reverse_label_map[pred] for pred in predictions]\n    \n    return final_predictions\n```\n\nThis implementation follows the requirements and constraints provided. It uses mini-batch Gradient Descent to train the model and handles the special case where all training labels are identical. The predictions are returned in the same label set as `y_train`."}
{"task_id": 172, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array\n    z_array = np.array(z)\n    \n    # Compute the derivative of tanh element-wise\n    derivative = 1 - np.tanh(z_array) ** 2\n    \n    # Round the result to 4 decimal places\n    rounded_derivative = np.round(derivative, 4)\n    \n    # Check if the input was a scalar and return accordingly\n    if np.isscalar(z):\n        return rounded_derivative.item()\n    else:\n        return rounded_derivative.tolist()\n\n# Example usage:\n# Scalar input\nprint(tanh_grad(0))  # Output: 1.0\n\n# List input\nprint(tanh_grad([0, 1, 2]))  # Output: [1.0, 0.7616, 0.4199]\n\n# NumPy array input\nprint(tanh_grad(np.array([0, 1, 2])))  # Output: [1.0, 0.7616, 0.4199]\n```"}
{"task_id": 173, "completion_id": 0, "completion": "Here's the implementation of the `alphabetical_distance` function according to the given requirements:\n\n```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # Check if the lengths of the strings are different\n    if len(candidate) != len(target):\n        return -1\n    \n    # Calculate the total alphabetical distance\n    distance = sum(abs(ord(c) - ord(t)) for c, t in zip(candidate, target))\n    \n    return distance\n\n# Example usage:\n# print(alphabetical_distance(\"HELLO\", \"WORLD\"))  # Output: 72\n```\n\n### Explanation:\n1. **Length Check**: The function first checks if the lengths of the `candidate` and `target` strings are different. If they are, it returns `-1` immediately.\n2. **Distance Calculation**: If the strings are of equal length, it calculates the alphabetical distance by iterating over pairs of characters from both strings using `zip`. For each pair, it computes the absolute difference of their ASCII values using `ord()`, and sums these differences.\n3. **Return Result**: Finally, it returns the computed distance.\n\nThis function handles all specified cases, including when both strings are empty, which results in a distance of `0`."}
{"task_id": 174, "completion_id": 0, "completion": "To implement the `gan_discriminator_metrics` function, we need to calculate two things:\n\n1. **Categorical Cross-Entropy Loss**: This measures how well the predicted probabilities match the true labels. For a one-hot encoded label and a softmax output, the cross-entropy loss can be computed using the formula:\n   \\[\n   \\text{Loss} = -\\sum_{i=1}^{n} y_i \\log(p_i)\n   \\]\n   where \\( y_i \\) is the true label (0 or 1) and \\( p_i \\) is the predicted probability.\n\n2. **Classification Accuracy**: This is the proportion of correctly classified samples. A sample is correctly classified if the predicted class (the index of the maximum probability) matches the true class (the index of the 1 in the one-hot encoding).\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the categorical cross-entropy loss\n    epsilon = 1e-10  # Small value to avoid log(0)\n    loss = -np.sum(labels * np.log(predictions + epsilon)) / predictions.shape[0]\n    \n    # Calculate the classification accuracy\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n    \n    # Round the results to 4 decimal places\n    loss_rounded = round(loss, 4)\n    accuracy_rounded = round(accuracy, 4)\n    \n    return loss_rounded, accuracy_rounded\n\n# Example usage:\n# predictions = np.array([[0.7, 0.3], [0.2, 0.8]])\n# labels = np.array([[1, 0], [0, 1]])\n# print(gan_discriminator_metrics(predictions, labels))\n```\n\n### Explanation:\n- **Cross-Entropy Loss**: We use `np.log(predictions + epsilon)` to avoid taking the logarithm of zero, which would result in an undefined value. The small `epsilon` ensures numerical stability.\n- **Accuracy**: We use `np.argmax` to find the indices of the maximum probabilities and compare them to the indices of the 1s in the one-hot encoded labels to determine correctness.\n- **Rounding**: Both the loss and accuracy are rounded to four decimal places as required."}
{"task_id": 175, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a NumPy array if it's not already\n    weights_array = np.array(weights)\n    \n    # Calculate the sum of squares of the weights\n    sum_of_squares = np.sum(weights_array ** 2)\n    \n    # Compute the penalty\n    penalty = C * sum_of_squares\n    \n    # Return the penalty rounded to 4 decimal places\n    return round(penalty, 4)\n\n# Example usage:\n# weights = [1.0, 2.0, 3.0]\n# C = 0.5\n# print(l2_penalty(weights, C))  # Output: 7.0\n```\n\nThis function takes a list or NumPy array of weights and a regularization strength \\( C \\), computes the L2 regularization penalty, and returns the result rounded to four decimal places. It handles edge cases like empty or all-zero weight vectors by returning a penalty of 0."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps from scratch, we need to follow these steps:\n\n1. **Initialize Sample Weights**: Start with equal weights for each sample.\n2. **Train Weak Learners**: For each boosting round, train a decision stump that minimizes the weighted classification error.\n3. **Update Sample Weights**: Adjust the weights based on the performance of the weak learner.\n4. **Aggregate Predictions**: Combine the predictions of all weak learners to produce the final prediction.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"AdaBoost with Decision Stumps from Scratch\"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize sample weights\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    \n    # List to store the weak learners\n    weak_learners = []\n    \n    # Training loop\n    for _ in range(n_estimators):\n        # Initialize variables to track the best stump\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        best_error = np.inf\n        \n        # Iterate over each feature to find the best stump\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions using the current stump\n                    predictions = np.where((X_train[:, feature_index] < threshold) == (polarity == 1), 1, -1)\n                    \n                    # Calculate the weighted error\n                    error = np.sum(weights[predictions != y_train])\n                    \n                    # Update the best stump if the current one has a lower error\n                    if error < best_error:\n                        best_error = error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # If a perfect stump is found, stop early\n        if best_error == 0:\n            break\n        \n        # Calculate the stump's weight\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        \n        # Store the best stump\n        weak_learners.append((best_feature_index, best_threshold, best_polarity, alpha))\n        \n        # Update the sample weights\n        predictions = np.where((X_train[:, best_feature_index] < best_threshold) == (best_polarity == 1), 1, -1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    \n    # Prediction function for the test set\n    def predict(X):\n        total_predictions = np.zeros(len(X))\n        for feature_index, threshold, polarity, alpha in weak_learners:\n            predictions = np.where((X[:, feature_index] < threshold) == (polarity == 1), 1, -1)\n            total_predictions += alpha * predictions\n        return np.sign(total_predictions).astype(int)\n    \n    # Get the predictions for the test set\n    test_predictions = predict(X_test)\n    \n    # Convert predictions from {-1, 1} to {0, 1}\n    test_predictions = [1 if pred == 1 else 0 for pred in test_predictions]\n    \n    return test_predictions\n\n# Example usage:\n# X_train = [[0, 1], [1, 1], [1, 0], [0, 0]]\n# y_train = [0, 1, 1, 0]\n# X_test = [[0, 0], [1, 1]]\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=3)\n# print(predictions)  # Output: [0, 1]\n```\n\n### Explanation:\n- **Initialization**: We start by initializing the sample weights to be uniform.\n- **Weak Learner Selection**: For each boosting round, we iterate over all possible stumps (defined by feature, threshold, and polarity) and select the one with the lowest weighted error.\n- **Weight Update**: After selecting the best stump, we update the sample weights based on how well the stump performed.\n- **Prediction Aggregation**: For the test set, we aggregate the predictions of all weak learners, convert them to class labels {0, 1}, and return the result.\n\nThis implementation ensures that the AdaBoost algorithm is trained using decision stumps and produces accurate predictions for the test set."}
{"task_id": 177, "completion_id": 0, "completion": "To implement the hyperbolic tangent activation function without using `numpy.tanh`, we need to handle different types of inputs: scalars, Python lists (including nested lists), and NumPy arrays. The function should compute the tanh for each element and return the result in the same structure as the input, rounded to four decimal places.\n\nHere's how you can implement this:\n\n```python\nimport numpy as np\nfrom typing import Union\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    \n    def compute_tanh(x):\n        e_z = np.exp(x)\n        e_neg_z = np.exp(-x)\n        return round((e_z - e_neg_z) / (e_z + e_neg_z), 4)\n    \n    if isinstance(z, (int, float)):\n        return compute_tanh(z)\n    \n    elif isinstance(z, list):\n        def process_list(lst):\n            return [process_list(item) if isinstance(item, list) else compute_tanh(item) for item in lst]\n        return process_list(z)\n    \n    elif isinstance(z, np.ndarray):\n        # Convert the numpy array to a list, process it, and then convert back to a list\n        processed_array = np.vectorize(compute_tanh)(z)\n        return processed_array.tolist()\n    \n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n# Example usage:\nprint(tanh(0))  # Should return 0.0\nprint(tanh([0, 1, [2, -3]]))  # Should return [0.0, 0.7616, [0.964, -0.9951]]\nprint(tanh(np.array([[0, 1], [-2, 3]])))  # Should return [[0.0, 0.7616], [-0.964, 0.9951]]\n```\n\n### Explanation:\n1. **Scalar Input**: If the input is a scalar (either `int` or `float`), we directly compute the tanh using the formula and return the result rounded to four decimal places.\n\n2. **List Input**: If the input is a list, we recursively process each element. If an element is a list itself, we call the function recursively. Otherwise, we compute the tanh for the scalar value.\n\n3. **NumPy Array Input**: If the input is a NumPy array, we use `np.vectorize` to apply the `compute_tanh` function to each element of the array. After computing, we convert the resulting NumPy array back to a Python list using `.tolist()`.\n\nThis implementation ensures that the function handles all specified input types correctly and returns the results in the required format."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input arguments\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n\n    # Define constants\n    w = 0.5  # Inertia weight\n    c1 = 1.5  # Cognitive weight\n    c2 = 1.5  # Social weight\n    lower_bound = -1\n    upper_bound = 1\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions**2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1 = rng.uniform(0, 1)\n            r2 = rng.uniform(0, 1)\n            velocities[i] = w * velocities[i] + \\\n                           c1 * r1 * (personal_best_positions[i] - positions[i]) + \\\n                           c2 * r2 * (global_best_position - positions[i])\n\n            # Update position\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n\n            # Evaluate new position\n            new_value = np.sum(positions[i]**2)\n\n            # Update personal best\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n\n                # Update global best if necessary\n                if new_value < global_best_value:\n                    global_best_value = new_value\n                    global_best_position = positions[i]\n\n    # Return the best value rounded to four decimals\n    return round(global_best_value, 4)\n```\n\nThis implementation of Particle Swarm Optimization (PSO) minimizes the Sphere function in an n-dimensional space. It checks for valid input parameters and uses a deterministic approach with a specified random seed for reproducibility. The algorithm iteratively updates the positions and velocities of particles based on their personal best and the global best positions, ensuring that the solution remains within the defined bounds."}
{"task_id": 179, "completion_id": 0, "completion": "```python\nimport re\nimport string\n\ndef tokenize_chars(line: str, lowercase: bool = True, filter_punctuation: bool = True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n\n    # Convert to lower-case if required\n    if lowercase:\n        line = line.lower()\n\n    # Remove punctuation if required\n    if filter_punctuation:\n        line = line.translate(str.maketrans('', '', string.punctuation))\n\n    # Collapse multiple spaces into a single space and strip leading/trailing spaces\n    line = re.sub(r'\\s+', ' ', line).strip()\n\n    # Return the list of characters\n    return list(line)\n\n# Example usage:\n# print(tokenize_chars(\"Hello, World!\"))  # Output: ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n```\n\nThis function implements the specified character-level tokenization with optional preprocessing steps for converting to lowercase and removing punctuation. It also handles the collapsing of spaces and ensures that the final list of characters is returned."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    return np.sqrt(sum((a - b) ** 2 for a, b in zip(point1, point2)))\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), i) for i, train_point in enumerate(X_train)]\n        \n        # Sort by distance\n        distances.sort(key=lambda x: x[0])\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = [index for _, index in distances[:k]]\n        \n        # Get the labels/targets of the k nearest neighbors\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Majority vote for classification\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n        elif task == \"regression\":\n            # Average for regression\n            prediction = round(np.mean(k_nearest_labels), 4)\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis implementation follows the rules and details provided:\n\n1. It uses the Euclidean distance to measure similarity between data points.\n2. If `k` is 0 or larger than the number of training samples, it uses all training samples.\n3. For classification, it returns the most frequent label among the k neighbors, using the smallest label in case of a tie.\n4. For regression, it returns the arithmetic mean of the neighbors' target values, rounded to 4 decimal places.\n5. The order of the test samples is preserved in the output."}
{"task_id": 181, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(sum((np.array(a) - np.array(b)) ** 2))\n\n    predictions = []\n\n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [(euclidean_distance(test_sample, train_sample), label)\n                      for train_sample, label in zip(X_train, y_train)]\n        \n        # Sort distances by the first element (distance)\n        distances.sort(key=lambda x: x[0])\n        \n        # Get the k nearest neighbors\n        k_nearest_neighbors = distances[:k]\n        \n        if problem == 'classify':\n            # Extract labels from the k nearest neighbors\n            labels = [label for _, label in k_nearest_neighbors]\n            # Find the most common label\n            most_common_label, _ = Counter(labels).most_common(1)[0]\n            predictions.append(most_common_label)\n        elif problem == 'regress':\n            # Extract target values from the k nearest neighbors\n            targets = [label for _, label in k_nearest_neighbors]\n            # Calculate the mean of the target values\n            mean_target = np.mean(targets)\n            # Round to 4 decimal places\n            predictions.append(round(mean_target, 4))\n    \n    return predictions\n```\n\nThis implementation of the k-Nearest Neighbors (kNN) algorithm includes:\n1. A helper function `euclidean_distance` to calculate the Euclidean distance between two samples.\n2. The main function `knn_predict` which iterates over each test sample, calculates distances to all training samples, sorts them, and selects the k nearest neighbors.\n3. For classification (`problem='classify'`), it uses the `Counter` class to find the most common label among the k nearest neighbors. In case of a tie, it naturally selects the smallest label due to the nature of `Counter.most_common`.\n4. For regression (`problem='regress'`), it calculates the arithmetic mean of the target values of the k nearest neighbors and rounds the result to 4 decimal places."}
{"task_id": 182, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Computes the polynomial kernel matrix for given matrices X and Y.\n    \n    Parameters:\n    - X: A 2-D list or NumPy array representing the first dataset.\n    - Y: A 2-D list or NumPy array representing the second dataset.\n    - degree: An integer representing the degree of the polynomial kernel (default is 2).\n    \n    Returns:\n    - A 2-D list representing the polynomial kernel matrix rounded to four decimal places.\n      Returns -1 if the inputs are invalid.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X)\n    Y = np.array(Y)\n    \n    # Validate inputs\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    \n    # Compute the kernel matrix\n    K = (X @ Y.T) ** degree\n    \n    # Round to four decimal places and convert to a list\n    K_rounded = np.round(K, decimals=4).tolist()\n    \n    return K_rounded\n```\n\nThis function first checks if the inputs are valid according to the specified constraints. It then computes the polynomial kernel matrix using matrix multiplication and exponentiation, rounds the results to four decimal places, and returns the result as a nested Python list."}
{"task_id": 183, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Check the shape length to determine the type of layer\n    if len(weight_shape) == 2:\n        # Dense layer: fan-in is the first dimension\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # 2-D convolutional layer: fan-in is the product of spatial size and input depth\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        raise ValueError(\"Unsupported weight shape. Must be 2D for dense or 4D for convolutional layers.\")\n    \n    # Calculate the limit for the uniform distribution\n    limit = np.sqrt(6 / fan_in)\n    \n    # Generate the weights using the uniform distribution\n    weights = np.random.uniform(-limit, limit, weight_shape)\n    \n    return weights\n\n# Example usage\nif __name__ == \"__main__\":\n    import numpy as np\n    np.random.seed(42)\n    weights = he_uniform((2, 2))\n    print(np.round(weights, 4))\n```\n\nThis code defines the `he_uniform` function, which initializes a weight tensor according to the He uniform distribution. It handles both dense and 2-D convolutional layers by calculating the appropriate `fan_in` based on the shape of the weight tensor. The function then generates random values from a uniform distribution within the specified range and returns them as a NumPy array."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision tree classifier using the CART algorithm from scratch, we need to follow these steps:\n\n1. **Calculate Gini Impurity**: This measures the probability of incorrectly classifying a randomly chosen element if it was randomly labeled according to the distribution of labels in the subset.\n2. **Recursive Splitting**: At each node, find the best split that maximizes the Gini gain.\n3. **Stopping Criteria**: Stop splitting when all labels are identical, the maximum depth is reached, or a split produces an empty child.\n4. **Prediction**: Use the trained tree to predict the class labels for the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini(y):\n    \"\"\"Calculate the Gini impurity of a set of labels.\"\"\"\n    if len(y) == 0:\n        return 0\n    counts = Counter(y)\n    total = len(y)\n    return 1 - sum((count / total) ** 2 for count in counts.values())\n\ndef gini_gain(parent, left, right):\n    \"\"\"Calculate the Gini gain after a split.\"\"\"\n    weight_left = len(left) / len(parent)\n    weight_right = len(right) / len(parent)\n    return gini(parent) - (weight_left * gini(left) + weight_right * gini(right))\n\nclass DecisionTreeNode:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef split_data(X, y, feature, threshold):\n    \"\"\"Split the dataset into left and right based on the feature and threshold.\"\"\"\n    left_indices = X[:, feature] <= threshold\n    right_indices = X[:, feature] > threshold\n    return X[left_indices], y[left_indices], X[right_indices], y[right_indices]\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(y) == 0:\n        return DecisionTreeNode(value=None)\n    \n    # Leaf node if all labels are the same\n    if len(set(y)) == 1:\n        return DecisionTreeNode(value=y[0])\n    \n    # Leaf node if max depth is reached\n    if max_depth is not None and depth >= max_depth:\n        return DecisionTreeNode(value=Counter(y).most_common(1)[0][0])\n    \n    best_feature, best_threshold, best_gain = None, None, -np.inf\n    n_features = X.shape[1]\n    \n    for feature in range(n_features):\n        unique_values = np.unique(X[:, feature])\n        for i in range(1, len(unique_values)):\n            threshold = (unique_values[i - 1] + unique_values[i]) / 2\n            X_left, y_left, X_right, y_right = split_data(X, y, feature, threshold)\n            gain = gini_gain(y, y_left, y_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    if best_gain == -np.inf:\n        return DecisionTreeNode(value=Counter(y).most_common(1)[0][0])\n    \n    X_left, y_left, X_right, y_right = split_data(X, y, best_feature, best_threshold)\n    left_node = build_tree(X_left, y_left, depth + 1, max_depth)\n    right_node = build_tree(X_right, y_right, depth + 1, max_depth)\n    \n    return DecisionTreeNode(feature=best_feature, threshold=best_threshold, left=left_node, right=right_node)\n\ndef predict_single(tree, x):\n    \"\"\"Predict the class label for a single sample.\"\"\"\n    if tree.value is not None:\n        return tree.value\n    if x[tree.feature] <= tree.threshold:\n        return predict_single(tree.left, x)\n    else:\n        return predict_single(tree.right, x)\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict_single(tree, x) for x in X_test]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[2.5, 3.5]])\n# predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=2)\n# print(predictions)  # Output: [0]\n```\n\nThis code defines a `DecisionTreeNode` class to represent each node in the tree, a `build_tree` function to recursively construct the tree, and a `predict_single` function to make predictions for individual samples. The `decision_tree_predict` function ties everything together, building the tree on the training data and predicting labels for the test data."}
{"task_id": 185, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    # Convert X to np.ndarray if it is not already one\n    X = np.asarray(X)\n    \n    # Check if X is empty\n    if X.size == 0:\n        raise ValueError(\"Got an empty matrix.\")\n    \n    # Determine the number of samples and features\n    if X.ndim == 1:\n        n_samples = 1\n        n_features = len(X)\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    \n    return (n_samples, n_features)\n```"}
{"task_id": 186, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    # Calculate the mean of y_train\n    mean_y_train = np.mean(y_train)\n    \n    # Round the mean to 4 decimal places\n    mean_y_train_rounded = round(mean_y_train, 4)\n    \n    # Create a list with the mean repeated for each row in X_test\n    predictions = [mean_y_train_rounded] * len(X_test)\n    \n    return predictions\n```\n\nThis function calculates the mean of the training target values `y_train`, rounds it to four decimal places, and then creates a list where this mean value is repeated for each row in the test feature matrix `X_test`. The function handles the case where `X_test` is empty by returning an empty list."}
{"task_id": 188, "completion_id": 0, "completion": "```python\nimport math\n\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    # Validate inputs\n    if not (0 <= min_epsilon < max_epsilon) or not (decay_rate > 0) or not (step >= 0):\n        return -1\n    \n    # Compute \u03b5(t)\n    epsilon_t = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n    \n    # Clip the result to ensure it doesn't fall below \u03b5_min\n    epsilon_t = max(epsilon_t, min_epsilon)\n    \n    # Return the result rounded to 4 decimal places\n    return round(epsilon_t, 4)\n```\n\nThis function first checks if the input parameters are valid. If any of the conditions are violated, it returns `-1`. Otherwise, it calculates the exponential decay of \u03b5 using the given formula, clips the result to ensure it does not fall below `\u03b5_min`, and returns the value rounded to four decimal places."}
{"task_id": 189, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.ndimage import zoom\n\ndef batch_resample(X, new_dim, mode=\"bilinear\"):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    if mode not in [\"bilinear\", \"neighbor\"]:\n        raise NotImplementedError(f\"Unrecognized resampling mode: {mode}\")\n    \n    n_ex, in_rows, in_cols, in_channels = X.shape\n    out_rows, out_cols = new_dim\n    \n    # Calculate zoom factors for rows and columns\n    zoom_factor_row = out_rows / in_rows\n    zoom_factor_col = out_cols / in_cols\n    \n    # Initialize an empty array for the resampled images\n    resampled_X = np.zeros((n_ex, out_rows, out_cols, in_channels))\n    \n    for i in range(n_ex):\n        for c in range(in_channels):\n            if mode == \"bilinear\":\n                # Use scipy's zoom for bilinear interpolation\n                resampled_X[i, :, :, c] = zoom(X[i, :, :, c], (zoom_factor_row, zoom_factor_col), order=1)\n            elif mode == \"neighbor\":\n                # Use scipy's zoom for nearest neighbor interpolation\n                resampled_X[i, :, :, c] = zoom(X[i, :, :, c], (zoom_factor_row, zoom_factor_col), order=0)\n    \n    # Round the results to 4 decimal places\n    resampled_X = np.round(resampled_X, 4)\n    \n    return resampled_X\n```\n\nThis function uses the `scipy.ndimage.zoom` method to perform the resampling. The `order` parameter in `zoom` specifies the order of the spline interpolation: `order=1` for bilinear interpolation and `order=0` for nearest neighbor interpolation. After resampling, the results are rounded to the nearest 4th decimal place."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    \n    def gini_impurity(labels):\n        \"\"\"Compute the Gini impurity of a set of labels.\"\"\"\n        n = len(labels)\n        if n == 0:\n            return 0\n        counts = np.bincount(labels)\n        proportions = counts / n\n        return 1 - np.sum(proportions ** 2)\n\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = gini_impurity(y)  # Start with the Gini impurity of the whole dataset\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue  # Skip if either child node is empty\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_samples\n            \n            gini_left = gini_impurity(left_labels)\n            gini_right = gini_impurity(right_labels)\n            \n            gini_split = (n_left / n_total) * gini_left + (n_right / n_total) * gini_right\n            \n            if gini_split < best_gini:\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(gini_split, best_gini):\n                if feature_index < best_feature_index:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[0, 0], [1, 1], [1, 0], [0, 1]]\n# y = [0, 1, 1, 0]\n# print(best_gini_split(X, y))\n```\n\nThis function computes the best binary split for a decision tree based on minimizing the weighted Gini impurity. It iterates over each feature and each unique value within that feature to determine the optimal split, considering the constraints and tie-breaking rules provided."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate_vectors(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        return True\n\n    def euclidean_distance(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan_distance(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev_distance(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine_distance(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        cosine_similarity = np.dot(x, y) / (norm_x * norm_y)\n        return round(1 - cosine_similarity, 4)\n\n    metrics = {\n        'euclidean': euclidean_distance,\n        'manhattan': manhattan_distance,\n        'chebyshev': chebyshev_distance,\n        'cosine': cosine_distance\n    }\n\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return metrics[name](x, y)\n\n    return d\n```\n\nThis code defines a factory function `metric` that returns a callable distance function based on the specified metric name. The callable performs input validation and computes the distance accordingly. If the input is invalid or the metric name is unsupported, it returns `-1`."}
{"task_id": 193, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Scalar input\n        result = z / (1 + abs(z))\n        return round(result, 4)\n    elif isinstance(z, (list, np.ndarray)):\n        # Array-like input\n        result = [round(val / (1 + abs(val)), 4) for val in z]\n        return result\n    else:\n        raise ValueError(\"Input must be a scalar (int or float) or an array-like (list or numpy.ndarray).\")\n\n# Example usage:\nprint(softsign(0.5))  # Scalar input\nprint(softsign([-1, 0, 1]))  # List input\nprint(softsign(np.array([-2, -1, 0, 1, 2])))  # NumPy array input\n```\n\nThis implementation checks the type of the input and applies the Softsign function accordingly. It ensures that the output is rounded to four decimal places and handles both scalar and array-like inputs."}
{"task_id": 194, "completion_id": 0, "completion": "Here's the implementation of the Adagrad optimization step in Python:\n\n```python\nimport numpy as np\n\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    weights = np.array(weights)\n    gradients = np.array(gradients)\n    \n    # Initialize G if it's the first iteration\n    if G is None:\n        G = np.zeros_like(weights)\n    \n    # Accumulate the squared gradients\n    G += gradients ** 2\n    \n    # Update the parameters\n    new_weights = weights - learning_rate * gradients / np.sqrt(G + eps)\n    \n    # Return the results rounded to 6 decimal places\n    return (np.round(new_weights, 6).tolist(), np.round(G, 6).tolist())\n\n# Example usage:\n# weights = [0.1, 0.2, 0.3]\n# gradients = [0.4, 0.5, 0.6]\n# new_weights, new_G = adagrad_update(weights, gradients)\n# print(\"New Weights:\", new_weights)\n# print(\"Updated G:\", new_G)\n```\n\n### Explanation:\n1. **Initialization**: The function starts by converting the input lists `weights` and `gradients` into NumPy arrays to facilitate element-wise operations. If `G` is `None`, it initializes `G` as a zero array of the same shape as `weights`.\n\n2. **Accumulating Squared Gradients**: The squared gradients are added to `G`. This step updates the running sum of squared gradients.\n\n3. **Parameter Update**: The weights are updated using the Adagrad formula. The learning rate is scaled by the inverse square root of the accumulated gradients plus a small constant `eps` to prevent division by zero.\n\n4. **Rounding**: The updated weights and the new `G` are rounded to six decimal places before returning them as lists.\n\nThis implementation ensures that the Adagrad optimization step is performed correctly and efficiently."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    \n    # Initialize variables\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    \n    # Check if the action space is multi-dimensional\n    if md_action:\n        # Iterate over each sub-space\n        for sub_space in env.action_space.spaces:\n            if cont_action:\n                # If any dimension is continuous, set n_actions_per_dim to infinity\n                n_actions_per_dim.append(np.inf)\n            else:\n                # For discrete dimensions, append the number of actions\n                n_actions_per_dim.append(sub_space.n)\n        \n        # Calculate the total number of action dimensions\n        action_dim = len(env.action_space.spaces)\n        \n        # If the action space is fully discrete, generate all possible actions\n        if not cont_action:\n            action_ids = list(product(*(range(sub_space.n) for sub_space in env.action_space.spaces)))\n    \n    else:\n        # Single-dimensional action space\n        if cont_action:\n            # Continuous single-dimensional space\n            n_actions_per_dim.append(np.inf)\n        else:\n            # Discrete single-dimensional space\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n        \n        # The action dimension is 1 for single-dimensional spaces\n        action_dim = 1\n    \n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` takes an environment object `env`, and two boolean flags `md_action` and `cont_action` to determine if the action space is multi-dimensional and continuous, respectively. It then calculates and returns the number of actions per dimension, a list of all possible discrete actions, and the total number of action dimensions. The function handles both continuous and discrete action spaces, as well as single and multi-dimensional cases."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize beta with zeros\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    \n    # Accumulate the weighted counts for each word-topic pair\n    for d, doc_phi in enumerate(phi):\n        for n, word in enumerate(corpus[d]):\n            beta[word, :] += doc_phi[n, :]\n    \n    # Normalise each column of beta so that they sum to 1\n    for t in range(T):\n        if np.sum(beta[:, t]) > 0:\n            beta[:, t] /= np.sum(beta[:, t])\n    \n    # Round the entries to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to list of lists for the final output\n    return beta_rounded.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description:\n\n1. **Initialization**: We initialize the `beta` matrix with zeros, ensuring it has the correct dimensions `(V, T)` where `V` is the vocabulary size and `T` is the number of topics.\n\n2. **Accumulation**: For each document and each token within the document, we add the corresponding row from `phi` to the appropriate row in `beta`. This accumulates the weighted counts for each word-topic pair.\n\n3. **Normalization**: Each column of `beta` is normalized so that the sum of its elements equals 1. This ensures that each column represents a valid probability distribution over the vocabulary for a given topic.\n\n4. **Rounding**: All entries in `beta` are rounded to 4 decimal places to meet the output constraints.\n\n5. **Conversion**: Finally, the `beta` matrix is converted to a list of lists before being returned. This format is required by the problem statement."}
{"task_id": 199, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    y_left = [label for feature, label in zip(X, y) if feature < value]\n    y_right = [label for feature, label in zip(X, y) if feature >= value]\n    \n    return y_left, y_right\n```\n\nThis function uses list comprehensions to iterate over the paired elements of `X` and `y`, checking each feature value against the specified `value`. It collects labels into `y_left` if their corresponding feature is less than `value`, and into `y_right` if it is greater than or equal to `value`. The result is returned as a tuple of two lists."}
{"task_id": 200, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a NumPy array if it's not already one\n    weights_array = np.array(weights)\n    \n    # Calculate the sum of the absolute values of the weights\n    l1_sum = np.sum(np.abs(weights_array))\n    \n    # Compute the L1 penalty\n    l1_penalty = C * l1_sum\n    \n    # Return the penalty rounded to 4 decimal places\n    return round(l1_penalty, 4)\n\n# Example usage:\n# weights = [[1, -2], [3, 4]]\n# C = 0.1\n# print(compute_l1_penalty(weights, C))  # Output should be 10.0\n```\n\nThis function first converts the input `weights` into a NumPy array to handle nested lists and ensure compatibility with NumPy operations. It then calculates the sum of the absolute values of all elements in the array, multiplies this sum by the regularization strength `C`, and finally rounds the result to four decimal places before returning it."}
{"task_id": 201, "completion_id": 0, "completion": "To implement the `max_norm` function as described, we need to follow these steps:\n\n1. **Compute the L2 norm** of each slice of the array along the specified axis.\n2. **Normalize each slice** if its norm exceeds the given threshold `m`.\n3. **Round the resulting array** to four decimal places.\n4. **Convert the NumPy array to a nested Python list** and return it.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    # Ensure the input is a NumPy array\n    p = np.asarray(p)\n    \n    # Compute the L2 norm along the specified axis\n    norms = np.linalg.norm(p, ord=2, axis=axis, keepdims=True)\n    \n    # Add a small epsilon to avoid division by zero\n    epsilon = 1e-12\n    \n    # Compute the scaling factor\n    scale = np.minimum(1.0, m / (norms + epsilon))\n    \n    # Clip the norms\n    p_clipped = p * scale\n    \n    # Round the result to 4 decimal places\n    p_rounded = np.round(p_clipped, decimals=4)\n    \n    # Convert to a nested Python list\n    return p_rounded.tolist()\n\n# Example usage:\n# p = np.array([[1, 2, 3], [4, 5, 6]])\n# print(max_norm(p, m=1.0, axis=1))\n```\n\n### Explanation:\n\n- **L2 Norm Calculation**: We use `np.linalg.norm` with `ord=2` to compute the Euclidean norm along the specified axis. The `keepdims=True` argument ensures that the result has the same number of dimensions as the input array, which is necessary for element-wise multiplication.\n  \n- **Normalization**: We calculate the scaling factor as `min(1, m / (norms + epsilon))`. This ensures that if the norm is already less than or equal to `m`, the slice remains unchanged. Otherwise, it is scaled down to have a norm of `m`.\n\n- **Rounding and Conversion**: Finally, we round the clipped array to four decimal places using `np.round` and convert it to a nested Python list using `.tolist()`.\n\nThis function should work correctly for any input array and axis, handling both single and multi-dimensional arrays."}
{"task_id": 202, "completion_id": 0, "completion": "Here is the implementation of the Partitioning Around Medoids (PAM) clustering algorithm:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    # Step 1: Initialize the medoids\n    medoids = X[:k]\n    \n    # Function to calculate the total cost\n    def total_cost(medoids, X):\n        assignments = np.argmin([euclidean_distance(X, m) for m in medoids], axis=0)\n        return np.sum([euclidean_distance(X[i], medoids[assignments[i]]) for i in range(len(X))])\n    \n    # Step 2: Iteratively improve the medoids\n    while True:\n        current_cost = total_cost(medoids, X)\n        best_swap = None\n        best_cost_reduction = 0\n        \n        # Try all possible swaps\n        for i in range(k):\n            for j in range(k, len(X)):\n                # Swap medoid i with non-medoid j\n                new_medoids = medoids.copy()\n                new_medoids[i] = X[j]\n                \n                new_cost = total_cost(new_medoids, X)\n                cost_reduction = current_cost - new_cost\n                \n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    best_swap = (i, j)\n        \n        if best_swap is None:\n            break\n        \n        # Perform the best swap\n        i, j = best_swap\n        medoids[i] = X[j]\n    \n    # Step 3: Assign each sample to the closest medoid\n    assignments = np.argmin([euclidean_distance(X, m) for m in medoids], axis=0)\n    \n    return assignments.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis code defines the `pam_clustering` function, which follows the steps outlined in the problem description. It initializes the medoids, iteratively attempts to improve them by swapping, and finally assigns each sample to the closest medoid. The function returns a list of cluster labels."}
{"task_id": 203, "completion_id": 0, "completion": "To implement the alias method for efficient discrete sampling, we need to follow the steps outlined in the problem description. Here's the complete implementation of the `build_alias_table` function:\n\n```python\nimport numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if not isinstance(probs, np.ndarray):\n        probs = np.array(probs)\n    \n    # Check if probabilities are valid\n    if np.any(probs < 0) or not np.isclose(np.sum(probs), 1, atol=1e-12):\n        return -1\n    \n    N = len(probs)\n    \n    # Step 1: Multiply every probability by N\n    scaled_probs = probs * N\n    \n    # Step 2: Separate indices into small and large lists\n    small = [i for i in range(N) if scaled_probs[i] < 1]\n    large = [i for i in range(N) if scaled_probs[i] >= 1]\n    \n    # Initialize the tables\n    prob_table = [0.0] * N\n    alias_table = [0] * N\n    \n    # Step 3: Fill the tables using the alias method\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        \n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        \n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1\n        \n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n    \n    # Step 4: Handle remaining indices\n    for i in large:\n        prob_table[i] = 1.0\n    for i in small:\n        prob_table[i] = 1.0\n    \n    # Round the prob_table to 4 decimal places\n    prob_table = [round(p, 4) for p in prob_table]\n    \n    return prob_table, alias_table\n\n# Example usage:\nprobs = [0.1, 0.2, 0.7]\nprob_table, alias_table = build_alias_table(probs)\nprint(prob_table, alias_table)  # Output: ([0.3, 0.6, 1.0], [2, 2, 0])\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input probabilities are valid (non-negative and sum to 1). If not, it returns `-1`.\n2. **Scaling Probabilities**: Each probability is multiplied by `N` to get `scaled_probs`.\n3. **Separating Indices**: Indices are separated into `small` and `large` lists based on whether their scaled probabilities are less than or greater than 1.\n4. **Building Tables**: The alias and probability tables are built by iterating through the `small` and `large` lists, updating the tables and adjusting the scaled probabilities accordingly.\n5. **Handling Remaining Indices**: Any remaining indices in the `large` or `small` lists are set to have a probability of 1 in the `prob_table`.\n6. **Rounding**: The `prob_table` is rounded to four decimal places before returning.\n\nThis implementation ensures that the alias method tables are built correctly and efficiently."}
{"task_id": 204, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for element in data:\n        if element is None or (isinstance(element, float) and math.isnan(element)):\n            count += 1\n    return count\n```\n\nThis function iterates over each element in the input data, checks if it is `None` or a `NaN` float, and increments the count accordingly. Finally, it returns the total count of missing elements."}
{"task_id": 205, "completion_id": 0, "completion": "```python\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    unique_ids = []\n    seen_ids = set()\n\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            env_id = item['id']\n            if env_id not in seen_ids:\n                unique_ids.append(env_id)\n                seen_ids.add(env_id)\n\n    return unique_ids\n```\n\nThis function iterates over each item in the `registry` list. It checks if the item is a dictionary and contains the key `'id'`. If both conditions are met, it checks if the `'id'` value has already been seen. If not, it adds the `'id'` to the `unique_ids` list and marks it as seen in the `seen_ids` set. This ensures that each `'id'` is added only once, preserving the order of their first appearance."}
{"task_id": 206, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    \n    # Check if both arrays are one-dimensional\n    if actual_array.ndim != 1 or predicted_array.ndim != 1:\n        return -1\n    \n    # Check if both arrays have the same length\n    if actual_array.shape[0] != predicted_array.shape[0]:\n        return -1\n    \n    # Calculate the mean absolute error\n    mae = np.mean(np.abs(actual_array - predicted_array))\n    \n    # Return the result rounded to four decimal places\n    return round(mae, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(absolute_error(actual, predicted))  # Output should be 0.5\n```\n\nThis implementation first converts the input sequences to NumPy arrays if they are not already in that format. It then checks if both arrays are one-dimensional and of equal length. If these conditions are met, it calculates the MAE using NumPy's efficient operations and returns the result rounded to four decimal places. If the inputs are invalid, it returns -1."}
{"task_id": 207, "completion_id": 0, "completion": "```python\ndef convolution_shape(img_height: int,\n                      img_width: int,\n                      filter_shape: tuple[int, int],\n                      stride: tuple[int, int],\n                      padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    KH, KW = filter_shape\n    SH, SW = stride\n    PH, PW = padding\n\n    # Check for non-positive stride\n    if SH <= 0 or SW <= 0:\n        return -1\n\n    # Calculate output height and width\n    OH = (img_height + 2 * PH - KH) / SH + 1\n    OW = (img_width + 2 * PW - KW) / SW + 1\n\n    # Check if OH and OW are positive integers\n    if OH.is_integer() and OW.is_integer() and OH > 0 and OW > 0:\n        return int(OH), int(OW)\n    else:\n        return -1\n```\n\nThis function calculates the output dimensions of a 2D convolution operation based on the given parameters. It first checks if the strides are positive, then computes the output height and width using the provided formula. If both output dimensions are positive integers, it returns them as a tuple; otherwise, it returns -1 to indicate an invalid configuration."}
{"task_id": 208, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        # Deduce categories from labels while preserving order of first appearance\n        categories = []\n        for label in labels:\n            if label not in categories:\n                categories.append(label)\n    \n    # Check for any unknown labels\n    if any(label not in categories for label in labels):\n        return -1\n    \n    # Create the one-hot encoded matrix\n    num_labels = len(labels)\n    num_categories = len(categories)\n    encoded_matrix = np.zeros((num_labels, num_categories), dtype=int)\n    \n    for i, label in enumerate(labels):\n        category_index = categories.index(label)\n        encoded_matrix[i, category_index] = 1\n    \n    return encoded_matrix.tolist()\n```\n\nThis function first checks if the `categories` list is provided. If not, it infers the categories from the `labels` list while preserving the order of their first appearance. It then checks if there are any labels in `labels` that are not in `categories`. If such a label is found, the function returns `-1`. Otherwise, it creates a one-hot encoded matrix using NumPy and returns it as a list of lists."}
{"task_id": 209, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    K = len(payoffs)\n    \n    if K != len(payoff_probs):\n        return -1\n    \n    expected_values = []\n    \n    for k in range(K):\n        if len(payoffs[k]) != len(payoff_probs[k]):\n            return -1\n        \n        if not np.isclose(sum(payoff_probs[k]), 1, atol=1e-8):\n            return -1\n        \n        expected_value = sum(p * v for p, v in zip(payoff_probs[k], payoffs[k]))\n        expected_values.append(round(expected_value, 4))\n    \n    best_arm = np.argmax(expected_values)\n    best_ev = expected_values[best_arm]\n    \n    return expected_values, best_arm, best_ev\n```\n\nThis function first checks if the number of payoff lists matches the number of probability lists. For each arm, it verifies that the lengths of the payoff and probability lists are equal and that the probabilities sum to 1 within a specified tolerance. It then calculates the expected value for each arm, rounds it to four decimal places, and identifies the arm with the highest expected value. If any validation fails, the function returns -1."}
{"task_id": 210, "completion_id": 0, "completion": "To implement the `doublewrap` function, we need to create a decorator that can handle two scenarios:\n\n1. When the decorator is used without parentheses, e.g., `@my_deco`.\n2. When the decorator is used with parentheses and optional arguments, e.g., `@my_deco(a=10)` or `@my_deco(3, 4)`.\n\nThe key idea is to distinguish between these two cases. If the decorator is called with a function as its first argument, it should immediately apply the decorator. Otherwise, it should return a new decorator that waits for the function to be passed.\n\nHere's how you can implement the `doublewrap` function:\n\n```python\nimport functools\nfrom typing import Callable, Any, TypeVar\n\nT = TypeVar('T')\n\ndef doublewrap(decorator_func: Callable[[Callable[..., T], ...], Callable[..., T]]) -> Callable[..., Callable[..., T]]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    \n    @functools.wraps(decorator_func)\n    def _decorator(*args, **kwargs):\n        if len(args) == 1 and callable(args[0]) and not kwargs:\n            # If the decorator is used without parentheses, e.g., @my_deco\n            return decorator_func(args[0])\n        else:\n            # If the decorator is used with parentheses, e.g., @my_deco(a=10)\n            def real_decorator(func):\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n    \n    return _decorator\n\n# Example usage\n@doublewrap\ndef repeat(func, times: int = 2):\n    \"\"\"Repeat the return value *times* times.\"\"\"\n    def inner(*args, **kwargs):\n        return func(*args, **kwargs) * times\n    return inner\n\n@repeat                   # used without arguments, default times = 2\ndef greet():\n    return \"Hi\"\n\n@repeat(times=3)          # used with keyword argument\ndef excited():\n    return \"Wow\"\n\nprint(greet())   # \u279e \"HiHi\"\nprint(excited()) # \u279e \"WowWowWow\"\n```\n\n### Explanation:\n\n1. **Type Hinting**: We use `TypeVar` to create a generic type variable `T` for the return type of the decorated function. This helps in type hinting the `decorator_func` and the `real_decorator`.\n\n2. **Wrapper Function**: The `_decorator` function is defined to handle both cases. It uses `*args` and `**kwargs` to capture any arguments passed to the decorator.\n\n3. **Immediate Application**: If `_decorator` is called with a single argument that is callable and no keyword arguments, it means the decorator is being used without parentheses. In this case, it directly applies `decorator_func` to the function.\n\n4. **Deferred Application**: If `_decorator` is called with any other arguments, it means the decorator is being used with parentheses. In this case, it returns a `real_decorator` function that will later receive the function to be decorated.\n\n5. **Metadata Preservation**: We use `functools.wraps` to ensure that the metadata of the original `decorator_func` is preserved.\n\nThis implementation ensures that the decorator can be used both with and without parentheses, while preserving the original decorator's metadata."}
{"task_id": 211, "completion_id": 0, "completion": "```python\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Check if the inputs are valid\n    if len(actual) != len(predicted) or not actual or not predicted:\n        return -1.0\n    \n    # Calculate the number of mismatches\n    mismatches = sum(1 for a, p in zip(actual, predicted) if a != p)\n    \n    # Calculate the classification error\n    classification_error = mismatches / len(actual)\n    \n    # Return the accuracy rounded to four decimal places\n    return round(1.0 - classification_error, 4)\n```\n\nThis implementation first checks if the input sequences are valid (i.e., they are non-empty and of equal length). If not, it returns `-1`. Otherwise, it calculates the number of mismatches between the actual and predicted labels, computes the classification error, and finally returns the accuracy rounded to four decimal places."}
{"task_id": 212, "completion_id": 0, "completion": "To solve this problem, we need to find a shortest path from the \"input\" layer to the \"output_realtime\" layer in a directed acyclic graph (DAG) represented by an adjacency list. If there are multiple shortest paths, we should return the lexicographically smallest one.\n\nHere's a step-by-step approach to implement the solution:\n\n1. **Breadth-First Search (BFS):** BFS is suitable for finding the shortest path in an unweighted graph. It explores all nodes at the present depth level before moving on to nodes at the next depth level.\n\n2. **Queue:** We'll use a queue to facilitate the BFS traversal. Each element in the queue will be a tuple containing the current path and the current node.\n\n3. **Visited Set:** To avoid revisiting nodes and potential cycles, we'll maintain a set of visited nodes.\n\n4. **Lexicographical Order:** As we explore paths, we'll keep track of the lexicographically smallest path found so far.\n\n5. **Edge Cases:** Handle cases where the \"output_realtime\" node is not reachable from the \"input\" node by returning an empty list.\n\nHere's the implementation of the `extract_realtime_model` function:\n\n```python\nfrom collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    if \"input\" not in graph or \"output_realtime\" not in graph:\n        return []\n\n    queue = deque([([\"input\"], \"input\")])\n    visited = set()\n    shortest_path = None\n\n    while queue:\n        path, node = queue.popleft()\n\n        if node == \"output_realtime\":\n            if shortest_path is None or path < shortest_path:\n                shortest_path = path\n            continue\n\n        if node in visited:\n            continue\n\n        visited.add(node)\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append((path + [neighbor], neighbor))\n\n    return shortest_path if shortest_path else []\n\n# Example usage:\n# graph = {\n#     \"input\": [\"layer1\", \"layer2\"],\n#     \"layer1\": [\"output_realtime\"],\n#     \"layer2\": [\"layer3\"],\n#     \"layer3\": [\"output_realtime\"]\n# }\n# print(extract_realtime_model(graph))  # Output: ['input', 'layer1', 'output_realtime']\n```\n\n### Explanation:\n- **Initialization:** We start by checking if both \"input\" and \"output_realtime\" exist in the graph. If not, we return an empty list.\n- **Queue Setup:** We initialize the queue with the starting node \"input\" and an initial path containing just \"input\".\n- **BFS Loop:** We process each node by dequeuing it, checking if it's the target node \"output_realtime\". If so, we update the shortest path if the current path is shorter or lexicographically smaller.\n- **Neighbor Exploration:** For each neighbor of the current node, if it hasn't been visited, we enqueue it with the updated path.\n- **Result:** After processing all nodes, we return the shortest path found, or an empty list if no path exists.\n\nThis approach ensures that we find the shortest path efficiently and handle ties by lexicographical order."}
{"task_id": 213, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    if not shape or 0 in shape:\n        return []\n\n    # Set the random seed for reproducibility\n    np.random.seed(42)\n\n    # Calculate fan_in based on the shape\n    if len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n\n    # Standard deviation for He Normal\n    std_dev = np.sqrt(2 / fan_in)\n\n    # Generate the weights using a normal distribution\n    weights = np.random.normal(loc=0, scale=std_dev, size=shape)\n\n    # Convert the NumPy array to a nested Python list\n    return weights.tolist()\n```\n\nThis implementation follows the guidelines provided:\n\n1. It takes a tensor shape as input.\n2. It computes `fan_in` and `fan_out` based on the shape.\n3. It uses NumPy's random generator with a fixed seed of 42 to ensure reproducibility.\n4. It returns the initialised weights as a nested Python list by calling `tolist()` on the generated NumPy array.\n5. If `fan_in` is 0, it returns an empty list."}
{"task_id": 214, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the lengths of the two arrays are the same\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate the squared differences\n    squared_diff = (actual - predicted) ** 2\n    \n    # Compute the mean of the squared differences\n    mse = np.mean(squared_diff)\n    \n    # Round the result to 4 decimal places\n    return np.round(mse, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(mean_squared_error(actual, predicted))  # Output: 0.375\n```\n\nThis function first converts the input sequences to NumPy arrays if they are not already, ensuring compatibility for element-wise operations. It then checks if the sequences have the same length, returning `-1` if they do not. If they do, it calculates the squared differences between corresponding elements, computes their mean, and rounds the result to four decimal places before returning it."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Check for valid input\n    if n_iterations < 1 or len(x_train[0]) != len(x_test[0]):\n        return -1\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Generate polynomial features\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    \n    # Standardize features\n    scaler = StandardScaler()\n    x_train_poly[:, 1:] = scaler.fit_transform(x_train_poly[:, 1:])\n    x_test_poly[:, 1:] = scaler.transform(x_test_poly[:, 1:])\n    \n    # Initialize weights\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        gradient = np.dot(x_train_poly.T, errors) / len(x_train)\n        \n        # Apply L1 and L2 regularization\n        l1_penalty = l1_ratio * reg_factor * np.sign(weights)\n        l2_penalty = (1 - l1_ratio) * reg_factor * weights\n        \n        # Update weights\n        gradient += l1_penalty\n        gradient[0] -= l2_penalty[0]  # Do not regularize the bias term\n        weights -= learning_rate * gradient\n    \n    # Make predictions on test data\n    predictions = np.dot(x_test_poly, weights)\n    \n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the requirements specified in the task description. It includes:\n\n1. **Polynomial Feature Generation**: Using `PolynomialFeatures` from `sklearn.preprocessing`.\n2. **Feature Standardization**: Using `StandardScaler` from `sklearn.preprocessing` to ensure zero-mean and unit-variance for non-bias features.\n3. **Batch Gradient Descent**: Iteratively updating the weights to minimize the mean-squared error with Elastic Net regularization.\n4. **Regularization**: Applying both L1 and L2 penalties, ensuring the bias term is not regularized.\n5. **Input Validation**: Checking for compatible feature counts between training and test data and ensuring a positive number of iterations.\n\nMake sure to import the necessary modules at the beginning of your script:\n\n```python\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\n```\n\nThis code should work correctly for the given task."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate the sigmoid transformation\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Calculate the gradient of the logistic loss\n    gradient = actual * sigmoid - actual\n    \n    # Calculate the Hessian of the logistic loss\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round all results to 6 decimal places\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_rounded = np.round(sigmoid, 6)\n    \n    # Convert the results back to lists\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_rounded.tolist()\n    \n    return gradient_list, hessian_list, probability_list\n```\n\nThis function computes the gradient, Hessian, and probability for each observation using the logistic loss function. It handles inputs in the form of lists, tuples, or NumPy arrays, performs vectorized computations for efficiency, and ensures all outputs are rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "To solve the problem of evaluating the outcome of a finished round of Blackjack, we need to implement the `blackjack_outcome` function. This function will take two lists of integers representing the player's and dealer's final hands, respectively, and return the player's reward based on the rules provided.\n\nHere's a step-by-step breakdown of how to implement this:\n\n1. **Calculate the Hand Value**: We need a helper function to calculate the value of a hand. This function should handle the special case where an Ace can be counted as 11 if it doesn't cause the hand to bust.\n\n2. **Check for Natural Blackjack**: A natural blackjack is defined as a two-card hand consisting of one Ace and one 10-value card. We need to check for this condition and assign the appropriate reward if the player has a natural blackjack.\n\n3. **Determine Busts**: Check if either the player or the dealer has bust (i.e., their hand value exceeds 21).\n\n4. **Compare Scores**: If neither player nor dealer busts, compare their scores and determine the winner.\n\n5. **Return the Reward**: Based on the above conditions, return the appropriate reward.\n\nHere's the complete implementation:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand.\"\"\"\n        total = sum(hand)\n        aces = hand.count(1)\n        \n        # Try to use aces as 11 if possible\n        for _ in range(aces):\n            if total + 10 <= 21:\n                total += 10\n                break\n        \n        return total\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and sorted(hand) == [1, 10]\n    \n    # Calculate hand values\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    # Check for player's natural blackjack\n    if is_natural_blackjack(player):\n        if dealer_value != 21:  # Dealer does not have a natural blackjack\n            return 1.5\n        else:\n            return 0  # Draw with both having natural blackjack\n    \n    # Check for busts\n    if player_value > 21:\n        return -1  # Player busts\n    if dealer_value > 21:\n        return 1  # Dealer busts\n    \n    # Compare scores\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0\n\n# Example usage:\n# print(blackjack_outcome([1, 10], [10, 7]))  # Should return 1.5 (natural blackjack)\n# print(blackjack_outcome([10, 7], [10, 7]))  # Should return 0 (draw)\n# print(blackjack_outcome([11, 11], [10, 7]))  # Should return -1 (player busts)\n# print(blackjack_outcome([10, 7], [11, 11]))  # Should return 1 (dealer busts)\n# print(blackjack_outcome([10, 7], [10, 8]))  # Should return -1 (player loses)\n# print(blackjack_outcome([10, 7], [9, 8]))  # Should return 1 (player wins)\n```\n\nThis implementation follows the rules provided and handles all edge cases, including natural blackjacks, busts, and score comparisons."}
{"task_id": 220, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    # Check if C_wt or C_dt is empty\n    if C_wt.size == 0:\n        phi = []\n    else:\n        V, T = C_wt.shape\n        # Calculate phi with Dirichlet smoothing\n        phi = (C_wt + beta) / (np.sum(C_wt, axis=0) + V * beta)\n        phi = np.round(phi, 4).tolist()\n\n    if C_dt.size == 0:\n        theta = []\n    else:\n        D, T = C_dt.shape\n        # Calculate theta with Dirichlet smoothing\n        theta = (C_dt + alpha) / (np.sum(C_dt, axis=1, keepdims=True) + T * alpha)\n        theta = np.round(theta, 4).tolist()\n\n    return phi, theta\n```\n\nThis function takes the word-topic count matrix `C_wt` and document-topic count matrix `C_dt`, along with the hyperparameters `alpha` and `beta`, and returns the smoothed estimates of the word-topic distribution `phi` and the document-topic distribution `theta`. Each entry in the resulting matrices is rounded to four decimal places. If either of the input count matrices is empty, the corresponding output will be an empty list."}
{"task_id": 221, "completion_id": 0, "completion": "Here's the implementation of the Mean Squared Logarithmic Error (MSLE) metric in Python:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function to calculate element-wise squared log errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if all values are non-negative\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return None\n    \n    # Calculate squared log error\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    squared_errors = (log_actual - log_predicted) ** 2\n    \n    return squared_errors\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if the inputs have the same shape\n    if actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    \n    # If squared_errors is None, it means there were negative values\n    if squared_errors is None:\n        return -1\n    \n    # Calculate mean squared log error\n    msle = np.mean(squared_errors)\n    \n    # Round to 4 decimal places\n    return round(msle, 4)\n```\n\n### Explanation:\n\n1. **Helper Function `squared_log_error(actual, predicted)`**:\n   - Converts the input sequences to NumPy arrays.\n   - Checks if all values in both sequences are non-negative. If any value is negative, it returns `None`.\n   - Computes the element-wise squared logarithmic errors using the formula: \\((\\log(1 + \\text{actual}) - \\log(1 + \\text{predicted}))^2\\).\n\n2. **Main Function `mean_squared_log_error(actual, predicted)`**:\n   - Converts the input sequences to NumPy arrays.\n   - Validates that the input sequences have the same shape. If not, it returns `-1`.\n   - Calls the helper function to compute the squared log errors.\n   - If the helper function returns `None`, it indicates invalid input (negative values), so it returns `-1`.\n   - Computes the mean of the squared log errors.\n   - Rounds the result to 4 decimal places and returns it as a Python float.\n\nThis implementation ensures that the inputs are validated correctly and that the MSLE is computed accurately."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function in a numerically stable manner, we need to handle both large positive and negative values of `z` separately. This is because the exponential function can grow very large or very small, leading to numerical instability. Here's how you can implement this:\n\n1. For `z >= 0`, use the formula:\n   \\[\n   \\text{sigmoid}(z) = \\frac{1}{1 + e^{-z}}\n   \\]\n\n2. For `z < 0`, use the alternative formula to avoid computing \\(e^z\\) directly:\n   \\[\n   \\text{sigmoid}(z) = \\frac{e^z}{1 + e^z}\n   \\]\n\nThis approach ensures that we do not encounter overflow issues when dealing with extreme values of `z`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(result, 4)\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Apply the sigmoid function element-wise\n    mask = z_array >= 0\n    result_array = np.empty_like(z_array, dtype=float)\n    result_array[mask] = 1 / (1 + np.exp(-z_array[mask]))\n    result_array[~mask] = np.exp(z_array[~mask]) / (1 + np.exp(z_array[~mask]))\n    \n    # Round the results to 4 decimal places\n    result_array = np.round(result_array, 4)\n    \n    # Convert the result back to a Python list with the same nested structure\n    return result_array.tolist()\n\n# Example usage:\nprint(sigmoid(0))          # Output: 0.5\nprint(sigmoid([0, 1, -1])) # Output: [0.5, 0.7311, 0.2689]\nprint(sigmoid(np.array([[0, 1], [-1, 2]]))) # Output: [[0.5, 0.7311], [0.2689, 0.8808]]\n```\n\n### Explanation:\n- **Scalar Input**: If `z` is a scalar, we directly apply the appropriate formula based on whether `z` is non-negative or negative.\n- **Array-like Input**: We convert the input to a NumPy array to leverage vectorized operations. We use a boolean mask to apply the correct formula to each element based on its sign.\n- **Rounding**: After computing the sigmoid values, we round them to 4 decimal places.\n- **Conversion to List**: Finally, we convert the NumPy array back to a Python list to match the required output format."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    \n    def apply_leaky_relu(value):\n        if value >= 0:\n            return value\n        else:\n            return a * value\n    \n    if isinstance(z, (int, float)):\n        return apply_leaky_relu(z)\n    elif isinstance(z, list):\n        return [leaky_relu(item, a) for item in z]\n    elif isinstance(z, np.ndarray):\n        return leaky_relu(z.tolist(), a)\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n# Example usage:\n# print(leaky_relu([[-1, 2], [3, -4]], 0.01))\n# Output: [[-0.01, 2], [3, -0.04]]\n```\n\nThis implementation handles scalars, lists (including nested lists), and `numpy.ndarray` inputs. It applies the Leaky ReLU activation function to each element and returns the result as a Python list with the same structure as the input."}
{"task_id": 225, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hz2mel(hz, formula: str = \"htk\") -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    # Convert input to a numpy array for easy manipulation\n    hz_array = np.asarray(hz)\n    \n    # Check if the formula is valid\n    if formula not in [\"htk\", \"slaney\"]:\n        raise AssertionError(\"Formula must be either 'htk' or 'slaney'.\")\n    \n    # Apply the appropriate conversion formula\n    if formula == \"htk\":\n        mel = 2595 * np.log10(1 + hz_array / 700)\n    else:  # formula == \"slaney\"\n        mel = 1127 * np.log(1 + hz_array / 700)\n    \n    # Round the result to 4 decimal places\n    mel_rounded = np.round(mel, 4)\n    \n    # Convert the numpy array back to a list, preserving the original shape\n    mel_list = mel_rounded.tolist()\n    \n    return mel_list\n```\n\nThis function takes an array-like input of frequencies in Hertz and converts them to the mel scale using either the HTK or Slaney formula. It ensures that the output is rounded to four decimal places and returned as a Python list with the same shape as the input. If an unsupported formula is provided, it raises an `AssertionError`."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize Sample Weights**: Start with equal weights for all training samples.\n2. **Train Weak Learners**: For each boosting round, train a decision stump that minimizes the weighted classification error.\n3. **Compute Learner Weight**: Calculate the weight (`alpha`) for the stump based on its error rate.\n4. **Update Sample Weights**: Adjust the sample weights such that misclassified samples get higher weights.\n5. **Make Predictions**: At prediction time, combine the predictions of all stumps using their respective weights and return the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    \n    for _ in range(n_clf):\n        # Initialize variables to track the best stump\n        best_stump = None\n        min_error = float('inf')\n        \n        # Iterate over each feature to find the best split\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                # Try both polarities\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    \n                    # Calculate the weighted error\n                    error = np.sum(sample_weights[y_train != predictions])\n                    \n                    # Check if this is the best stump\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        \n        # Compute the stump weight (alpha)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        \n        # Store the best stump and its weight\n        classifiers.append((best_stump, alpha))\n        \n        # Update sample weights\n        predictions = np.ones(n_samples)\n        feature_index, threshold, polarity = best_stump\n        if polarity == 1:\n            predictions[X_train[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_train[:, feature_index] >= threshold] = -1\n        \n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    \n    # Make predictions on the test set\n    test_predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in classifiers:\n        feature_index, threshold, polarity = stump\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        \n        test_predictions += alpha * predictions\n    \n    # Return the sign of the weighted sum of stump decisions\n    return [1 if pred > 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 0], [2, 3], [3, 2]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1, 2], [2, 1]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function which trains an AdaBoost ensemble using decision stumps and predicts the labels for the test data. The function returns a list of integers, each being either `-1` or `1`, representing the predicted class labels for the test samples."}
{"task_id": 227, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef value_network_forward(state: list[float],\n                          W1: list[list[float]],\n                          W2: list[list[float]],\n                          W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    state_np = np.array(state)\n    W1_np = np.array(W1)\n    W2_np = np.array(W2)\n    W3_np = np.array(W3)\n\n    # Validate dimensions\n    N = len(state_np)\n    H1 = W1_np.shape[1]\n    H2 = W2_np.shape[1]\n\n    if W1_np.shape != (N, H1):\n        return -1\n    if W2_np.shape != (H1, H2):\n        return -1\n    if W3_np.shape not in [(H2, 1), (H2,)]:\n        return -1\n\n    # Perform the forward pass\n    h1 = np.tanh(np.dot(state_np, W1_np))\n    h2 = np.tanh(np.dot(h1, W2_np))\n    v = np.dot(h2, W3_np)\n\n    # Ensure v is a scalar and round it to 4 decimal places\n    return round(v.item(), 4)\n```\n\nThis function first checks the dimensions of the input matrices to ensure they match the expected shapes. If any dimension check fails, it returns `-1`. Otherwise, it performs the forward pass through the network using NumPy operations, applies the hyperbolic tangent activation function to the hidden layers, and computes the final value. The result is rounded to four decimal places before being returned."}
{"task_id": 228, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    \n    # Compute the squared norms of each row in X and Y\n    X_norms = np.sum(X**2, axis=1)\n    Y_norms = np.sum(Y**2, axis=1)\n    \n    # Compute the dot product between each row in X and each row in Y\n    XY_dot = np.dot(X, Y.T)\n    \n    # Use the identity to compute the squared distances\n    squared_distances = X_norms[:, np.newaxis] + Y_norms - 2 * XY_dot\n    \n    # Take the square root to get the Euclidean distances\n    distances = np.sqrt(squared_distances)\n    \n    # Round to 4 decimal places and convert to a list of lists\n    return np.round(distances, 4).tolist()\n```\n\nThis function computes the pairwise Euclidean distances between the rows of two matrices `X` and `Y`. If `Y` is not provided, it computes the distances within `X` itself. The distances are calculated using vectorized operations for efficiency and then rounded to four decimal places before being returned as a nested list."}
{"task_id": 230, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    # Number of samples and features\n    n_samples, n_features = X_train.shape\n    \n    # Calculate the prior probabilities P(c)\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    \n    # Initialize means and variances for both classes\n    mean_0 = np.zeros(n_features)\n    mean_1 = np.zeros(n_features)\n    var_0 = np.zeros(n_features)\n    var_1 = np.zeros(n_features)\n    \n    # Calculate mean and variance for each class\n    for j in range(n_features):\n        mean_0[j] = np.mean(X_train[y_train == 0, j])\n        mean_1[j] = np.mean(X_train[y_train == 1, j])\n        \n        var_0[j] = np.var(X_train[y_train == 0, j]) + 1e-9  # Add small epsilon to avoid division by zero\n        var_1[j] = np.var(X_train[y_train == 1, j]) + 1e-9  # Add small epsilon to avoid division by zero\n    \n    # Function to calculate the log Gaussian probability\n    def log_gaussian(x, mean, var):\n        return -0.5 * np.log(2 * np.pi * var) - 0.5 * ((x - mean) ** 2 / var)\n    \n    # Predict labels for test data\n    predictions = []\n    for x in X_test:\n        log_prob_0 = np.log(prior_0) + np.sum(log_gaussian(x, mean_0, var_0))\n        log_prob_1 = np.log(prior_1) + np.sum(log_gaussian(x, mean_1, var_1))\n        \n        if log_prob_0 > log_prob_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\nThis implementation follows the steps outlined in the task description. It calculates the necessary statistics (means, variances, and priors) for each class and then computes the log posterior probabilities for each test sample to determine the predicted class. The function returns a list of predicted labels for the test samples."}
{"task_id": 231, "completion_id": 0, "completion": "```python\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"\n    Determines if the given hand is a natural blackjack.\n\n    A natural blackjack is defined as a two-card hand consisting of an Ace (1)\n    and any ten-valued card (10, Jack, Queen, or King, all encoded as 10).\n\n    Parameters:\n    hand (list[int]): A list of integers representing the ranks of the cards in the hand.\n\n    Returns:\n    bool: True if the hand is a natural blackjack, False otherwise.\n    \"\"\"\n    # Check if the hand has exactly two cards\n    if len(hand) != 2:\n        return False\n    \n    # Check if one card is an Ace (1) and the other is a ten-valued card (10)\n    return {1, 10} == set(hand)\n```\n\nThis function first checks if the hand contains exactly two cards. If not, it returns `False`. Then, it checks if the set of cards in the hand is exactly `{1, 10}`, which would mean one card is an Ace and the other is a ten-valued card. If this condition is met, it returns `True`; otherwise, it returns `False`."}
{"task_id": 232, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    # Check if the array is two-dimensional\n    if x.ndim != 2:\n        return False\n    \n    # Check if all elements are either 0 or 1\n    if not np.all(np.isin(x, [0, 1])):\n        return False\n    \n    # Check if each row contains exactly one 1\n    if not np.all(np.sum(x, axis=1) == 1):\n        return False\n    \n    return True\n\n# Example usage:\n# x = np.array([[0, 1, 0],\n#               [1, 0, 0],\n#               [0, 0, 1]])\n# print(is_one_hot(x))  # Output: True\n```\n\nThis function first checks if the input array is two-dimensional. Then, it verifies that all elements in the array are either 0 or 1. Finally, it checks that each row contains exactly one 1, which is a key characteristic of a one-hot encoded matrix. If all these conditions are met, the function returns `True`; otherwise, it returns `False`."}
{"task_id": 234, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures: list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta: float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # Check if inputs are valid\n    if len(successes) != len(failures) or not successes or not failures:\n        return -1\n\n    # Set the random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Sample from the Beta posterior for each arm\n    samples = [\n        np.random.beta(prior_alpha + success, prior_beta + failure)\n        for success, failure in zip(successes, failures)\n    ]\n\n    # Return the index of the arm with the highest sample\n    return np.argmax(samples)\n```\n\nThis function implements single-step Thompson sampling for a Bernoulli multi-armed bandit. It checks for valid input, sets the random seed if provided, and samples from the Beta posterior for each arm. Finally, it returns the index of the arm with the highest sampled value."}
{"task_id": 235, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError(\"Input array must be 1-dimensional.\")\n    \n    num_samples = labels.size\n    if n_classes is None:\n        n_classes = labels.max() + 1\n    else:\n        if n_classes < labels.max() + 1:\n            raise ValueError(\"n_classes must be at least max(labels) + 1.\")\n    \n    one_hot_matrix = np.zeros((num_samples, n_classes), dtype=float)\n    one_hot_matrix[np.arange(num_samples), labels] = 1.0\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = np.array([0, 1, 2, 0])\n# one_hot = to_one_hot(labels)\n# print(one_hot)\n```\n\nThis function `to_one_hot` takes a 1-D NumPy array of integer class labels and converts it into a one-hot encoded 2-D NumPy array. It handles the case where the number of classes (`n_classes`) is either specified or needs to be inferred from the data. The function ensures that the input is 1-dimensional and raises appropriate errors if the conditions are not met. The resulting one-hot encoded matrix has a dtype of float, with 1s represented as 1.0."}
{"task_id": 236, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    n_batches = np.ceil(N / batchsize).astype(int)\n    \n    indices = np.arange(N)\n    if shuffle:\n        np.random.shuffle(indices)\n    \n    for i in range(0, N, batchsize):\n        yield indices[i:i + batchsize]\n\n    return minibatch, n_batches\n```\n\nThis function creates a generator that yields the indices of each mini-batch. It first determines the total number of batches required, then optionally shuffles the indices, and finally yields slices of the indices corresponding to each mini-batch. The generator is single-pass, meaning it will raise `StopIteration` after all batches have been yielded."}
{"task_id": 237, "completion_id": 0, "completion": "Here's a Python implementation of the Blackjack hand evaluator:\n\n```python\nfrom typing import List\n\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    # Dictionary to map card labels to their values\n    card_values = {\n        '2': 2, '3': 3, '4': 4, '5': 5, '6': 6,\n        '7': 7, '8': 8, '9': 9, '10': 10,\n        'J': 10, 'Q': 10, 'K': 10, 'A': 11\n    }\n    \n    # Calculate the initial score without considering Aces\n    total_score = sum(card_values[card] for card in hand)\n    \n    # Count the number of Aces in the hand\n    num_aces = hand.count('A')\n    \n    # Adjust the score for Aces\n    while num_aces > 0 and total_score > 21:\n        total_score -= 10  # Treat an Ace as 1 instead of 11\n        num_aces -= 1\n    \n    # If the total score is still over 21 after adjusting for Aces, the hand is bust\n    if total_score > 21:\n        return 0\n    \n    return total_score\n```\n\n### Explanation:\n1. **Card Values Mapping**: We create a dictionary `card_values` to map each card label to its corresponding value. Numeric cards are mapped to their face values, face cards ('J', 'Q', 'K') are mapped to 10, and Aces are initially mapped to 11.\n\n2. **Initial Score Calculation**: We calculate the initial total score by summing the values of all cards in the hand using the `card_values` dictionary.\n\n3. **Adjusting for Aces**: We count the number of Aces in the hand. If the total score exceeds 21, we adjust the score by treating each Ace as 1 (instead of 11) until the score is 21 or less, or until there are no more Aces to adjust.\n\n4. **Bust Check**: If after adjusting for Aces the total score is still greater than 21, the hand is considered bust, and we return 0.\n\n5. **Return the Score**: If the score is 21 or less, we return the calculated score."}
{"task_id": 239, "completion_id": 0, "completion": "```python\nimport math\n\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str = \"same\") -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == \"valid\":\n        return ((0, 0), (0, 0))\n    \n    elif output_shape == \"same\":\n        filter_height, filter_width = filter_shape\n        \n        # Calculate padding for height\n        pad_top = math.floor((filter_height - 1) / 2)\n        pad_bottom = math.ceil((filter_height - 1) / 2)\n        \n        # Calculate padding for width\n        pad_left = math.floor((filter_width - 1) / 2)\n        pad_right = math.ceil((filter_width - 1) / 2)\n        \n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n    \n    else:\n        raise ValueError(\"Invalid output_shape. Only 'same' and 'valid' are supported.\")\n\n# Example usage:\n# print(determine_padding((3, 3)))  # Output: ((1, 1), (1, 1))\n# print(determine_padding((3, 3), \"valid\"))  # Output: ((0, 0), (0, 0))\n```\n\nThis function calculates the necessary padding for a 2-D convolution based on the specified filter size and desired output shape. For the \"same\" output shape, it computes the padding such that the output dimensions match the input dimensions when using a stride of one. The padding is distributed symmetrically, with any extra padding going to the bottom and right sides."}
{"task_id": 240, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    \n    def build_encoder(ids, encoder=None):\n        if encoder is not None:\n            # Use the provided encoder\n            num2id = {v: k for k, v in encoder.items()}\n        else:\n            # Create an encoder by enumerating the ids\n            encoder = {id_: idx for idx, id_ in enumerate(ids)}\n            num2id = {idx: id_ for idx, id_ in enumerate(ids)}\n        \n        return encoder, num2id\n    \n    # Build encoders for observations and actions\n    obs2num, num2obs = build_encoder(obs_ids, obs_encoder)\n    act2num, num2act = build_encoder(action_ids, act_encoder)\n    \n    # Return the combined dictionary\n    return {\n        'obs2num': obs2num,\n        'num2obs': num2obs,\n        'act2num': act2num,\n        'num2act': num2act\n    }\n\n# Example usage:\nobs_ids = ['left', 'right', 'front', 'back']\naction_ids = ['move', 'turn']\nresult = create_encoding_dicts(obs_ids, action_ids)\nprint(result)\n```\n\nThis implementation defines a helper function `build_encoder` that handles the creation of both the forward and backward mappings for either observations or actions. It checks if an explicit encoder is provided and uses it; otherwise, it creates a new mapping by enumerating the identifiers. The main function `create_encoding_dicts` then uses this helper function to build the required dictionaries and returns them in a single dictionary."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Step 2: Create a 2-D matrix A \u2208 \u211d^{d0\u00d7(d1\u22efdn)} filled with i.i.d. samples from the standard normal distribution.\n    d0 = shape[0]\n    d1_to_dn = int(np.prod(shape[1:]))\n    A = np.random.randn(d0, d1_to_dn)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = Q.reshape(shape) * scale\n    \n    # Convert the result to a list before returning\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\n### Explanation:\n1. **Check Shape Validity**: The function first checks if the input shape has at least two dimensions. If not, it returns `-1`.\n2. **Matrix Creation**: It creates a 2-D matrix `A` with dimensions `d0` (the first dimension of the input shape) and `d1_to_dn` (the product of all other dimensions).\n3. **SVD Decomposition**: It computes the Singular Value Decomposition (SVD) of `A`, resulting in matrices `U`, `\u03a3`, and `Vt`.\n4. **Select Orthogonal Matrix**: It selects the matrix `Q` which is either `U` or `Vt`, depending on which one matches the shape of `A`.\n5. **Reshape and Scale**: It reshapes `Q` back to the original shape and multiplies it by the `scale` factor.\n6. **Return as List**: Finally, it converts the resulting NumPy array to a Python list and returns it.\n\nThis implementation ensures that the resulting tensor satisfies the orthogonality condition as described in the task."}
{"task_id": 242, "completion_id": 0, "completion": "```python\nimport math\n\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # Check if there is an arm that has never been pulled\n    for i, count in enumerate(pull_counts):\n        if count == 0:\n            return i\n\n    # Calculate the UCB scores for each arm\n    ucb_scores = [\n        ev_estimates[i] + C * math.sqrt((2 * math.log(current_step + 1)) / pull_counts[i])\n        for i in range(len(ev_estimates))\n    ]\n\n    # Return the index of the arm with the highest UCB score\n    return ucb_scores.index(max(ucb_scores))\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array\n    s = np.array(state)\n    \n    # Define the weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    W2 = np.ones((4, 4))\n    W3 = np.ones((4, 4))\n    Wa = np.ones((4, 3))\n    Wc = np.ones((4, 1))\n    \n    b1 = np.zeros(4)\n    b2 = np.zeros(4)\n    b3 = np.zeros(4)\n    ba = np.zeros(3)\n    bc = np.zeros(1)\n    \n    # Compute the activations through the network\n    z1 = np.maximum(0, s @ W1 + b1)  # ReLU activation\n    z2 = np.maximum(0, z1 @ W2 + b2)  # ReLU activation\n    z3 = np.maximum(0, z2 @ W3 + b3)  # ReLU activation\n    \n    logits = z3 @ Wa + ba\n    action_probs = np.exp(logits - np.max(logits)) / np.sum(np.exp(logits - np.max(logits)))  # Softmax activation\n    \n    state_value = (z3 @ Wc + bc)[0]\n    \n    # Round the results to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    \n    return action_probs, state_value\n```\n\nThis function performs the forward pass through the specified Actor-Critic network using basic NumPy operations. It calculates the action probabilities and the state value based on the given state input, ensuring the results are rounded to four decimal places as required."}
{"task_id": 244, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Validate the shape argument\n    if not isinstance(shape, tuple) or not all(isinstance(dim, int) and dim > 0 for dim in shape):\n        return -1\n    \n    # Validate the sparsity argument\n    if not isinstance(sparsity, (int, float)) or not (0 <= sparsity <= 1):\n        return -1\n    \n    # Generate random numbers\n    random_numbers = np.random.rand(*shape)\n    \n    # Convert to binary based on sparsity\n    binary_tensor = (random_numbers >= (1 - sparsity)).astype(float)\n    \n    # Convert to nested Python list\n    return binary_tensor.tolist()\n```\n\nThis function first checks if the `shape` is a tuple of positive integers and if `sparsity` is a float within the range [0, 1]. If either condition fails, it returns -1. Otherwise, it generates a random tensor using `numpy.random.rand`, converts it to a binary tensor based on the `sparsity` value, and then converts the result to a nested Python list using the `tolist()` method."}
{"task_id": 247, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    # Input validation\n    if len(payoff_dists) != len(payoff_probs) or len(payoff_dists) == 0:\n        return -1\n    \n    for \u03bc_k, \u03c3_k_squared in payoff_dists:\n        if \u03c3_k_squared <= 0:\n            return -1\n    \n    for p_k in payoff_probs:\n        if not (0 <= p_k <= 1):\n            return -1\n    \n    # Calculate expected rewards\n    expected_rewards = np.array([p_k * \u03bc_k for (\u03bc_k, _), p_k in zip(payoff_dists, payoff_probs)])\n    \n    # Find the best arm and its expected value\n    best_arm = np.argmax(expected_rewards)\n    best_ev = round(expected_rewards[best_arm], 4)\n    \n    return (best_ev, best_arm)\n```\n\nThis function first validates the input to ensure that both lists are of the same non-zero length, that all variances are strictly positive, and that all probabilities lie within the interval [0, 1]. If any of these conditions are not met, it returns -1. If the input is valid, it calculates the expected reward for each arm, finds the arm with the highest expected reward, and returns the expected reward rounded to four decimal places along with the index of that arm."}
{"task_id": 248, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    if len(X_test) == 0:\n        return []\n\n    # Calculate the positive-class probability\n    p = np.mean(y_train)\n    \n    # Create a NumPy array filled with p and round to four decimal places\n    predictions = np.full(len(X_test), p).round(4)\n    \n    # Convert to a list and return\n    return predictions.tolist()\n```"}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))  # Subtract max for numerical stability\n    return e_x / e_x.sum(axis=0)\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state)\n    \n    # Unpack parameters\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Shared layers\n    h1 = relu(np.dot(W1, state) + b1)\n    h2 = relu(np.dot(W2, h1) + b2)\n    h3 = relu(np.dot(W3, h2) + b3)\n    \n    # Actor head\n    actor_scores = np.dot(Wa, h3) + ba\n    probabilities = softmax(actor_scores)\n    \n    # Critic head\n    value = np.dot(Wc, h3) + bc\n    \n    # Round probabilities and value to 4 decimal places\n    probabilities = [round(p, 4) if p != 0.0 and p != 1.0 else round(p, 1) for p in probabilities]\n    value = round(value[0], 4) if value[0] != 0.0 and value[0] != 1.0 else round(value[0], 1)\n    \n    return probabilities, value\n```\n\nThis implementation defines the forward pass for an Actor-Critic network using NumPy. It includes the necessary activation functions (ReLU and softmax), processes the input state through the shared layers, and computes the action probabilities and state value using the actor and critic heads, respectively. The results are rounded according to the specified constraints."}
{"task_id": 251, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(1 / (1 + np.exp(-x)), 4)\n    elif isinstance(x, (list, tuple)):\n        x = np.array(x)\n    return np.round(1 / (1 + np.exp(-x)), 4)\n\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(np.tanh(x), 4)\n    elif isinstance(x, (list, tuple)):\n        x = np.array(x)\n    return np.round(np.tanh(x), 4)\n\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(max(0, x), 4)\n    elif isinstance(x, (list, tuple)):\n        x = np.array(x)\n    return np.round(np.maximum(0, x), 4)\n\ndef leaky_relu(x, alpha: float = 0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope *alpha* for x<0.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(max(alpha * x, x), 4)\n    elif isinstance(x, (list, tuple)):\n        x = np.array(x)\n    return np.round(np.where(x >= 0, x, alpha * x), 4)\n\ndef softmax(x):\n    \"\"\"Numerically stable softmax over a 1-D input.\"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    e_x = np.exp(x - np.max(x))\n    return np.round(e_x / e_x.sum(axis=0), 4)\n\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    activations = {\n        \"sigmoid\": sigmoid,\n        \"tanh\": tanh,\n        \"relu\": relu,\n        \"leaky_relu\": leaky_relu,\n        \"softmax\": softmax\n    }\n    \n    if name not in activations:\n        raise ValueError('Invalid activation function.')\n    \n    return activations[name]\n```\n\nThis code defines the five most commonly used activation functions in neural networks: sigmoid, tanh, ReLU, Leaky ReLU, and softmax. Each function is designed to handle both scalar and vector inputs, ensuring the output maintains the same structure as the input. The `get_activation` function maps a string name to the corresponding activation function, raising a `ValueError` if the name is not recognized."}
{"task_id": 252, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    # Compute the gradient\n    grad = (actual - predicted).tolist()\n    \n    # Compute the Hessian (diagonal elements are all 1)\n    hess = [1.0] * len(actual)\n    \n    return grad, hess\n```\n\nThis function calculates the gradient and Hessian of the least-squares loss for given `actual` and `predicted` NumPy arrays. The gradient is computed as the difference between the actual and predicted values, and the Hessian is a list of ones with the same length as the input arrays. Both results are returned as Python lists."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    \n    if not gradient:\n        # Compute the Elastic-Net penalty\n        l1_penalty = l1_ratio * np.sum(np.abs(w))\n        l2_penalty = 0.5 * (1 - l1_ratio) * np.dot(w, w)\n        penalty_value = alpha * (l1_penalty + l2_penalty)\n        return round(penalty_value, 4)\n    else:\n        # Compute the gradient of the Elastic-Net penalty\n        l1_gradient = alpha * l1_ratio * np.sign(w)\n        l2_gradient = alpha * (1 - l1_ratio) * w\n        gradient_value = l1_gradient + l2_gradient\n        return [round(g, 4) for g in gradient_value]\n\n# Example usage:\n# penalty = elastic_net_regularization([1, 2, 3], alpha=0.1, l1_ratio=0.5)\n# gradient = elastic_net_regularization([1, 2, 3], alpha=0.1, l1_ratio=0.5, gradient=True)\n# print(\"Penalty:\", penalty)\n# print(\"Gradient:\", gradient)\n```\n\nThis function calculates either the Elastic-Net penalty or its gradient based on the input parameters. The penalty is computed using the L1 and L2 components, while the gradient is derived from the partial derivatives of the penalty with respect to each weight in the vector. Both results are rounded to four decimal places as specified."}
{"task_id": 255, "completion_id": 0, "completion": "To solve this problem, we need to determine if there is an ace in the hand that can be counted as 11 without causing the hand's total value to exceed 21. Here's how we can implement the `usable_ace` function:\n\n1. First, we need to check if there is at least one ace in the hand. An ace is represented by the value 1.\n2. If there is an ace, we need to calculate the hand value assuming all aces are counted as 1.\n3. Then, we check if adding 10 (the difference between counting an ace as 11 instead of 1) to this total would keep the hand value \u2264 21.\n\nHere's the implementation:\n\n```python\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    # Check if there is at least one ace in the hand\n    if 1 not in hand:\n        return False\n    \n    # Calculate the hand value assuming all aces are counted as 1\n    hand_value = sum(hand)\n    \n    # Check if there is at least one ace that can be counted as 11\n    # This means the hand value plus 10 should not exceed 21\n    return hand_value + 10 <= 21\n\n# Example usage:\nprint(usable_ace([1, 7]))  # True, because the ace can be 11 making the total 18\nprint(usable_ace([1, 10, 10]))  # False, because the ace would make the total 31\n```\n\n### Explanation:\n- We first check if there is an ace in the hand using `if 1 not in hand`.\n- We then calculate the total value of the hand assuming all aces are counted as 1.\n- Finally, we check if adding 10 to this total (to account for one ace being 11 instead of 1) would keep the total \u2264 21. If it does, the function returns `True`, indicating that there is a usable ace. Otherwise, it returns `False`."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    \n    # Special case handling\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Handle special parameter names\n    if param_name == \"Ba\":\n        param_name = \"ba\"\n    elif param_name == \"Bx\":\n        param_name = \"bx\"\n    \n    # Get the parameter\n    param = model.parameters[param_name]\n    \n    # Initialize the numerical gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over every element of the parameter\n    for i in np.ndindex(param.shape):\n        # Perturb the parameter by +epsilon\n        model.parameters[param_name][i] += epsilon\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n        \n        # Reset the parameter\n        model.parameters[param_name][i] -= epsilon\n        \n        # Perturb the parameter by -epsilon\n        model.parameters[param_name][i] -= epsilon\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n        \n        # Reset the parameter\n        model.parameters[param_name][i] += epsilon\n        \n        # Compute the numerical gradient\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    \n    # Return the transposed gradient\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm from scratch using decision stumps, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for each training example.\n2. **Iteratively Train Weak Learners**: For each iteration, train a decision stump that minimizes the weighted error. Update the weights based on the stump's performance.\n3. **Compute Stump Weight**: Calculate the weight of the stump based on its error rate.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions from all stumps and assign the final label based on the sign of the weighted sum.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    m, n = X_train.shape\n    D = np.full(m, 1 / m)  # Initialize weights uniformly\n    alpha = np.zeros(n_clf)\n    h = [None] * n_clf\n    \n    for t in range(n_clf):\n        # Train a decision stump\n        best_error = np.inf\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n                \n                # Calculate weighted error\n                misclassified = predictions != y_train\n                error = np.sum(D[misclassified])\n                \n                # Consider the inverted polarity\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                \n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = 1 if predictions == y_train else -1\n        \n        # Compute the stump weight\n        epsilon = best_error\n        alpha[t] = 0.5 * np.log((1 - epsilon) / epsilon)\n        \n        # Update the weights\n        D *= np.exp(-alpha[t] * y_train * ((X_train[:, best_feature] < best_threshold) * 2 - 1))\n        D /= np.sum(D)\n        \n        # Store the stump\n        h[t] = (best_feature, best_threshold, best_polarity)\n    \n    # Predict on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for t in range(n_clf):\n        feature, threshold, polarity = h[t]\n        predictions += alpha[t] * polarity * ((X_test[:, feature] < threshold) * 2 - 1)\n    \n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 0], [2, 1], [1, 2]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[0.5, 0.5], [1.5, 1.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)\n```\n\nThis code defines the `adaboost_predict` function, which trains AdaBoost using decision stumps and predicts labels for the test set. The function handles the initialization of weights, training of each weak learner, updating of weights, and aggregation of predictions to produce the final output."}
{"task_id": 258, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    # Check if the lengths of the inputs are the same\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Convert inputs to NumPy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the per-sample hinge loss using vectorized operations\n    per_sample_loss = np.maximum(0, 1 - actual * predicted)\n    \n    # Compute the mean hinge loss\n    mean_loss = np.mean(per_sample_loss)\n    \n    # Return the mean loss rounded to four decimal places\n    return round(mean_loss, 4)\n```\n\nThis function first checks if the input lists have the same length. If they do not, it returns `-1`. Otherwise, it converts the inputs to NumPy arrays and computes the hinge loss using vectorized operations. Finally, it returns the mean hinge loss rounded to four decimal places."}
{"task_id": 259, "completion_id": 0, "completion": "```python\nimport random\n\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    \n    random.seed(42)\n    sampled_indices = random.sample(range(len(memory)), batch_size)\n    sampled_transitions = [memory[i] for i in sampled_indices]\n    \n    return sampled_transitions\n```\n\nThis function first checks if the `batch_size` is greater than the length of the `memory`. If it is, the function returns `-1`. Otherwise, it sets the random seed to `42` to ensure deterministic behavior, samples `batch_size` unique indices from the range of the memory length, and then collects the transitions at those indices into a list, which it returns."}
{"task_id": 260, "completion_id": 0, "completion": "Here is the implementation of the `tileswrap` function based on the provided description and example:\n\n```python\nfrom itertools import zip_longest\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    if ints is None:\n        ints = []\n\n    indices = []\n    \n    for t in range(numtilings):\n        coords = [t]\n        b = t\n        for q, wrapwidth in zip_longest([floor(f * numtilings) for f in floats], wrapwidths, fillvalue=None):\n            c = (q + (b % numtilings)) // numtilings\n            if wrapwidth is not None and wrapwidth > 0:\n                coords.append(c % wrapwidth)\n            else:\n                coords.append(c)\n            b += t * 2\n        \n        coords.extend(ints)\n        \n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n        \n        indices.append(index)\n    \n    return indices\n\n# Example usage\nihtORsize = 32\nnumtilings = 2\nfloats = [0.1]\nwrapwidths = [5]\nprint(tileswrap(ihtORsize, numtilings, floats, wrapwidths))  # Output: [0, 31]\n```\n\n### Explanation:\n1. **Quantization**: Each float is quantized by multiplying it by `numtilings` and taking the floor of the result.\n2. **Tile Calculation**: For each tiling, we start with the tiling index and adjust the coordinates based on the quantized values and wrap widths.\n3. **Hashing**: The coordinates are hashed using a deterministic polynomial hash function.\n4. **Result**: The function returns a list of indices, one for each tiling.\n\nThis implementation ensures that the indices are correctly calculated and hashed according to the specified rules."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    # Calculate fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    \n    # Calculate the standard deviation\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    \n    # Generate the weights using normal distribution\n    weights = np.random.normal(loc=0.0, scale=std_dev, size=shape)\n    \n    return weights\n```\n\nThis implementation follows the steps outlined in the task description:\n\n1. It checks if the shape has at least two dimensions.\n2. It calculates `fan_in` and `fan_out` based on the shape.\n3. It computes the standard deviation `s` using the formula \\( s = \\sqrt{\\frac{2}{\\text{fan\\_in} + \\text{fan\\_out}}} \\).\n4. It generates a NumPy array with the specified shape, where the elements are drawn from a normal distribution with mean 0 and the calculated standard deviation.\n\nThis function ensures that the global NumPy random state is not modified beyond what is necessary for sampling."}
{"task_id": 263, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    \n    # Convert input to numpy array if it's not already\n    a = np.array(x, dtype=float)\n    \n    # Define activation functions\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    def relu(z):\n        return np.maximum(0, z)\n    \n    def linear(z):\n        return z\n    \n    # Activation function dictionary\n    activation_functions = {\n        \"sigmoid\": sigmoid,\n        \"relu\": relu,\n        \"linear\": linear\n    }\n    \n    # Forward pass through the network\n    for W, g in zip(weights, activations):\n        # Prepend the bias term\n        a_tilde = np.insert(a, 0, 1)\n        \n        # Compute the pre-activation\n        z = np.dot(W, a_tilde)\n        \n        # Apply the activation function\n        a = activation_functions[g](z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(a, 4)\n    \n    # Return a scalar if the output is a single neuron\n    if result.size == 1:\n        return result.item()\n    \n    return result.tolist()\n```\n\nThis code defines a function `feedforward_predict` that performs a forward pass through a fully-connected neural network. It takes an input vector `x`, a list of weight matrices `weights`, and a list of activation functions `activations`. The function computes the output of the network by applying the specified activation functions to each layer and returns the result rounded to four decimal places."}
{"task_id": 265, "completion_id": 0, "completion": "```python\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        return round(-0.25 * x + 82.50372665317208, 4)\n    elif 250 < x <= 600:\n        return round(20.00372665317208, 4)\n    elif 600 < x <= 700:\n        return round(-0.2 * x + 140.00372665317207, 4)\n    else:\n        return round(0.003726653172066108, 4)\n\n# Example usage:\n# print(king_loss_fn(250))  # Should return 52.5037\n# print(king_loss_fn(500))  # Should return 20.0037\n# print(king_loss_fn(650))  # Should return 13.0037\n# print(king_loss_fn(750))  # Should return 0.0037\n```\n\nThis function implements the piece-wise loss function as specified, using conditional statements to determine which segment of the function to evaluate based on the input value `x`. The result is then rounded to four decimal places before being returned."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of converting an undirected, un-weighted graph into an adjacency list, we need to follow these steps:\n\n1. **Initialize the Adjacency List**: Create a list of lists where each sublist corresponds to a vertex in `V` and will store its neighbors.\n\n2. **Iterate Over Edges**: For each edge `(u, v)` in `E`, add `v` to the adjacency list of `u` and `u` to the adjacency list of `v`. This step ensures that the graph is treated as undirected.\n\n3. **Remove Duplicates and Sort**: Ensure that each adjacency list contains unique neighbors and that they are sorted according to their order of appearance in `V`.\n\n4. **Return the Result**: Return the constructed adjacency list.\n\nHere's the implementation of the function:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Step 1: Initialize the adjacency list\n    adj_list = [[] for _ in V]\n    \n    # Step 2: Create a dictionary to map vertices to their indices in V\n    vertex_to_index = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Step 3: Iterate over each edge and update the adjacency list\n    for u, v in E:\n        if u in vertex_to_index and v in vertex_to_index:\n            u_index = vertex_to_index[u]\n            v_index = vertex_to_index[v]\n            \n            # Add v to u's adjacency list if not already present\n            if v not in adj_list[u_index]:\n                adj_list[u_index].append(v)\n            \n            # Add u to v's adjacency list if not already present\n            if u not in adj_list[v_index]:\n                adj_list[v_index].append(u)\n    \n    # Step 4: Sort each adjacency list according to the order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: vertex_to_index[x])\n    \n    return adj_list\n```\n\n### Explanation:\n\n- **Initialization**: We start by creating an empty adjacency list with the same number of sublists as there are vertices in `V`.\n\n- **Vertex Index Mapping**: We create a dictionary to map each vertex to its index in `V`. This helps us quickly find the correct sublist in the adjacency list for any given vertex.\n\n- **Processing Edges**: For each edge `(u, v)`, we check if both vertices are in `V` (to handle cases where edges might reference vertices not in `V`). If they are, we add `v` to `u`'s adjacency list and `u` to `v`'s adjacency list, ensuring no duplicates by checking before adding.\n\n- **Sorting**: Finally, we sort each adjacency list to ensure that neighbors are ordered by their appearance in `V`.\n\nThis approach ensures that the adjacency list is correctly built, free of duplicates, and sorted as required."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n    best_weighted_error = float('inf')\n\n    for feature_index in range(n_features):\n        # Get unique values for the current feature\n        feature_values = np.unique(X[:, feature_index])\n        \n        for threshold in feature_values:\n            for polarity in [1, -1]:\n                # Calculate predictions based on the current threshold and polarity\n                if polarity == 1:\n                    predictions = np.where(X[:, feature_index] < threshold, 1, -1)\n                else:\n                    predictions = np.where(X[:, feature_index] < threshold, -1, 1)\n                \n                # Calculate the weighted error for the current stump\n                weighted_error = np.sum(sample_weights[y != predictions])\n                \n                # Update the best stump if the current one has a lower error\n                if weighted_error < best_weighted_error:\n                    best_weighted_error = weighted_error\n                    best_feature_index = feature_index\n                    best_threshold = round(threshold, 4)\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": best_threshold,\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_weighted_error, 4)\n    }\n```\n\nThis function iterates over all features and all unique values of each feature to find the optimal decision stump. It calculates the weighted error for each possible stump configuration and keeps track of the configuration with the lowest error. The results are returned in a dictionary with the specified keys."}
{"task_id": 268, "completion_id": 0, "completion": "To implement the Erd\u0151s\u2013R\u00e9nyi random graph model in Python, we need to generate an adjacency matrix based on the given number of vertices (`n_vertices`) and the edge formation probability (`edge_prob`). The graph can be either directed or undirected, which affects how edges are formed and represented in the adjacency matrix.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef random_unweighted_graph(n_vertices: int, edge_prob: float = 0.5, directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    if n_vertices == 1:\n        return [[0]]\n\n    # Initialize the adjacency matrix with zeros\n    adj_matrix = [[0] * n_vertices for _ in range(n_vertices)]\n\n    if directed:\n        # For directed graphs, consider all ordered pairs (i, j) where i != j\n        for i in range(n_vertices):\n            for j in range(n_vertices):\n                if i != j and np.random.rand() <= edge_prob:\n                    adj_matrix[i][j] = 1\n    else:\n        # For undirected graphs, consider all unordered pairs (i, j) where i < j\n        for i in range(n_vertices):\n            for j in range(i + 1, n_vertices):\n                if np.random.rand() <= edge_prob:\n                    adj_matrix[i][j] = 1\n                    adj_matrix[j][i] = 1  # Ensure symmetry\n\n    return adj_matrix\n```\n\n### Explanation:\n\n1. **Initialization**: We start by checking if `n_vertices` is 1. If so, we return a single-element list `[[0]]` because a graph with one vertex has no edges.\n\n2. **Adjacency Matrix**: We initialize an `n_vertices x n_vertices` adjacency matrix filled with zeros.\n\n3. **Directed Graph**:\n   - If the graph is directed, we iterate over all ordered pairs `(i, j)` where `i != j`.\n   - For each pair, we use `np.random.rand()` to decide whether to add an edge. If the random value is less than or equal to `edge_prob`, we set `adj_matrix[i][j]` to 1.\n\n4. **Undirected Graph**:\n   - If the graph is undirected, we iterate over all unordered pairs `(i, j)` where `i < j`.\n   - For each pair, we use `np.random.rand()` to decide whether to add an edge. If the random value is less than or equal to `edge_prob`, we set both `adj_matrix[i][j]` and `adj_matrix[j][i]` to 1 to ensure the matrix remains symmetric.\n\nThis implementation efficiently generates the desired Erd\u0151s\u2013R\u00e9nyi random graph and returns it as an adjacency matrix."}
{"task_id": 269, "completion_id": 0, "completion": "```python\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # Calculate the number of parameters for the first layer\n    first_layer_weights = state_dimensions * 164\n    first_layer_biases = 164\n    first_layer_params = first_layer_weights + first_layer_biases\n\n    # Calculate the number of parameters for the second layer\n    second_layer_weights = 164 * action_dimensions\n    second_layer_biases = action_dimensions\n    second_layer_params = second_layer_weights + second_layer_biases\n\n    # Total parameters is the sum of parameters from both layers\n    total_params = first_layer_params + second_layer_params\n\n    return total_params\n```"}
{"task_id": 270, "completion_id": 0, "completion": "To solve this problem, we need to compute the expected reward for each arm using the given context vectors and parameter vectors. The expected reward for each arm is calculated as the dot product of the corresponding context vector and parameter vector. After computing these rewards, we find the maximum reward, round it to four decimal places, and determine the index of the arm that provides this reward. If multiple arms have the same reward after rounding, we select the arm with the smallest index.\n\nHere's the implementation of the `oracle_payoff` function:\n\n```python\nimport numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    # Calculate the expected rewards for each arm\n    rewards = np.dot(context.T, thetas)\n    \n    # Round the rewards to four decimal places\n    rounded_rewards = np.round(rewards, decimals=4)\n    \n    # Find the maximum reward and its index\n    best_reward = np.max(rounded_rewards)\n    best_arm = np.argmin(rounded_rewards == best_reward)\n    \n    return best_reward, best_arm\n\n# Example usage\ncontext = np.array([[0.5, 1.0],\n                    [1.5, 0.2]])\nthetas  = np.array([[0.1, 0.3],\n                    [0.4, 0.2]])\n\nprint(oracle_payoff(context, thetas))  # Output: (0.65, 0)\n```\n\n### Explanation:\n1. **Dot Product Calculation**: We use `np.dot(context.T, thetas)` to compute the expected rewards for each arm. The `.T` transpose operation is used to align the dimensions for the dot product correctly.\n   \n2. **Rounding**: The rewards are rounded to four decimal places using `np.round(rewards, decimals=4)`.\n\n3. **Finding the Maximum Reward**: We use `np.max(rounded_rewards)` to find the maximum reward after rounding.\n\n4. **Selecting the Best Arm**: We use `np.argmin(rounded_rewards == best_reward)` to find the index of the first occurrence of the maximum reward. This ensures that if there are multiple arms with the same reward, the smallest index is returned.\n\nThis function efficiently computes the desired output and handles the constraints specified in the problem statement."}
{"task_id": 271, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    # Calculate gradients and hessians\n    left_g = np.array(left_pred) - np.array(left_true)\n    left_h = np.ones_like(left_g)\n    \n    right_g = np.array(right_pred) - np.array(right_true)\n    right_h = np.ones_like(right_g)\n    \n    # Parent node's gradients and hessians\n    G_P = np.sum(left_g) + np.sum(right_g)\n    H_P = np.sum(left_h) + np.sum(right_h)\n    \n    # Left node's gradients and hessians\n    G_L = np.sum(left_g)\n    H_L = np.sum(left_h)\n    \n    # Right node's gradients and hessians\n    G_R = np.sum(right_g)\n    H_R = np.sum(right_h)\n    \n    # Calculate gain\n    gain = 0.5 * (\n        (G_L**2 / H_L) + (G_R**2 / H_R) - (G_P**2 / H_P)\n    )\n    \n    # Return gain rounded to 4 decimal places\n    return round(gain, 4)\n\n# Example usage:\n# left_true = [1.0, 2.0, 3.0]\n# left_pred = [1.1, 1.9, 3.1]\n# right_true = [4.0, 5.0, 6.0]\n# right_pred = [3.9, 5.1, 6.1]\n# print(xgboost_split_gain(left_true, left_pred, right_true, right_pred))\n```\n\nThis function calculates the split gain for a given split in an XGBoost model using the squared-error loss function. It computes the gradients and hessians for the left and right child nodes, as well as the parent node, and then uses these to compute the gain according to the provided formula. The result is rounded to four decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    \n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        if not labels:\n            return 0.0\n        label_counts = Counter(labels)\n        n = len(labels)\n        return -sum((count / n) * math.log2(count / n) for count in label_counts.values())\n    \n    # Combine feature and target into a list of tuples and sort by feature value\n    combined = sorted(zip(feature, target))\n    \n    # If all feature values are identical, return (None, 0.0)\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    \n    # Calculate initial entropy of the parent set\n    parent_entropy = entropy(target)\n    \n    max_gain = 0.0\n    best_threshold = None\n    \n    # Iterate over unique feature values to find the best split\n    for i in range(len(combined) - 1):\n        if combined[i][0] != combined[i + 1][0]:  # Only consider distinct feature values\n            threshold = (combined[i][0] + combined[i + 1][0]) / 2.0\n            \n            # Split the target labels into left and right subsets\n            left_labels = [label for _, label in combined[:i + 1]]\n            right_labels = [label for _, label in combined[i + 1:]]\n            \n            # Calculate the weighted average entropy of the left and right subsets\n            left_weight = len(left_labels) / len(target)\n            right_weight = len(right_labels) / len(target)\n            weighted_entropy = (left_weight * entropy(left_labels)) + (right_weight * entropy(right_labels))\n            \n            # Calculate information gain\n            gain = parent_entropy - weighted_entropy\n            \n            # Update best threshold if this gain is higher than the current max_gain\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (round(best_threshold, 4) if best_threshold is not None else None, round(max_gain, 4))\n\n# Example usage:\n# feature = [1.0, 1.5, 3.0, 5.0]\n# target = [0, 0, 1, 1]\n# print(best_split(feature, target))  # Output: (2.25, 0.5)\n```\n\nThis function `best_split` calculates the optimal threshold for splitting a dataset based on information gain. It first defines a helper function `entropy` to compute the Shannon entropy of a set of class labels. The main function then sorts the combined feature and target data, checks for identical feature values, and iterates through distinct feature values to find the split that maximizes information gain. The results are rounded to four decimal places before being returned."}
{"task_id": 274, "completion_id": 0, "completion": "To implement the `small_norm_clip` function, we need to ensure that each element in the input list or NumPy array is clipped to the interval \\([-5, 5]\\). This means any value less than \\(-5\\) will be set to \\(-5\\), and any value greater than \\(5\\) will be set to \\(5\\). We will use NumPy for efficient computation if the input is a NumPy array, but the final result should be returned as a Python list.\n\nHere's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(values, list):\n        values = np.array(values)\n    \n    # Clip the values to the interval [-5, 5]\n    clipped_values = np.clip(values, -5, 5)\n    \n    # Convert the result back to a Python list\n    return clipped_values.tolist()\n\n# Example usage:\n# print(small_norm_clip([3, 7, -10, 5, 2]))  # Output: [3, 5, -5, 5, 2]\n# print(small_norm_clip(np.array([-6, 4, 10, 0])))  # Output: [-5, 4, 5, 0]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input is a list. If it is, it converts the list to a NumPy array. This allows us to leverage NumPy's efficient array operations.\n\n2. **Clipping**: The `np.clip` function is used to clip the values to the specified interval \\([-5, 5]\\). This function is efficient and handles both scalar and array inputs.\n\n3. **Output Conversion**: The clipped values are converted back to a Python list using the `tolist()` method, ensuring the output matches the specified format.\n\nThis implementation efficiently handles both list and NumPy array inputs and returns the desired clipped values as a Python list."}
{"task_id": 276, "completion_id": 0, "completion": "To implement the additive-smoothing \\( N \\)-gram language model as described, we need to follow several steps:\n\n1. **Tokenization and Padding**: Convert sentences to lowercase, remove leading/trailing punctuation, and pad each sentence with `<bol>` and `<eol>`.\n2. **Vocabulary Construction**: Build a vocabulary from the training corpus, including the special `<unk>` token if specified.\n3. **N-gram Counting**: Count the occurrences of each \\( N \\)-gram in the padded training corpus.\n4. **Probability Calculation**: Compute the additive-smoothed probability for each \\( N \\)-gram in the target sentence.\n5. **Logarithm Calculation**: Sum the logarithms of these probabilities and return the result rounded to 4 decimal places.\n\nHere's the implementation:\n\n```python\nimport math\nimport string\nfrom collections import Counter\n\ndef tokenize(sentence: str) -> list[str]:\n    # Convert to lowercase and split by whitespace\n    tokens = sentence.lower().split()\n    # Remove leading/trailing punctuation from each token\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ndef pad_sentence(tokens: list[str]) -> list[str]:\n    # Pad with <bol> and <eol>\n    return ['<bol>'] + tokens + ['<eol>']\n\ndef build_vocabulary(corpus: list[str], unk: bool = True) -> set[str]:\n    vocabulary = set()\n    for sentence in corpus:\n        tokens = tokenize(sentence)\n        vocabulary.update(tokens)\n    if unk:\n        vocabulary.add('<unk>')\n    return vocabulary\n\ndef count_ngrams(corpus: list[str], N: int) -> dict[tuple, int]:\n    ngram_counts = Counter()\n    for sentence in corpus:\n        tokens = pad_sentence(tokenize(sentence))\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i+N])\n            ngram_counts[ngram] += 1\n    return ngram_counts\n\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float = 1.0, unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\"\"\"\n    \n    # Step 1: Tokenize and pad the training corpus\n    padded_corpus = [pad_sentence(tokenize(sent)) for sent in corpus]\n    \n    # Step 2: Build the vocabulary\n    vocabulary = build_vocabulary(corpus, unk)\n    V = len(vocabulary)\n    \n    # Step 3: Count N-grams\n    ngram_counts = count_ngrams(padded_corpus, N)\n    \n    # Step 4: Tokenize and pad the target sentence\n    target_tokens = pad_sentence(tokenize(sentence))\n    \n    # Step 5: Calculate the total number of tokens\n    total_tokens = sum(ngram_counts.values())\n    \n    # Step 6: Compute the log probability\n    log_prob = 0.0\n    for i in range(len(target_tokens) - N + 1):\n        ngram = tuple(target_tokens[i:i+N])\n        if ngram not in ngram_counts:\n            # If the ngram is not in the training data, map it to <unk> if unk is True\n            if unk:\n                ngram = tuple(['<unk>'] * N)\n        \n        count_h_w = ngram_counts.get(ngram, 0)\n        if N == 1:\n            count_h = total_tokens\n        else:\n            history = ngram[:-1]\n            count_h = sum(count for ng in ngram_counts if ng[:-1] == history)\n        \n        prob = (count_h_w + k) / (count_h + k * V)\n        log_prob += math.log10(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"I am a student\", \"I love programming\", \"Students learn programming\"]\nsentence = \"I am a student\"\nN = 2\nk = 1.0\nunk = True\n\nprint(additive_ngram_log_prob(corpus, sentence, N, k, unk))\n```\n\nThis code defines a function `additive_ngram_log_prob` that computes the base-10 logarithm of the probability of a given sentence under an additive-smoothed \\( N \\)-gram language model. The function handles tokenization, padding, vocabulary construction, \\( N \\)-gram counting, and probability calculation according to the specified rules."}
{"task_id": 277, "completion_id": 0, "completion": "```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env[\"action_space\"], (tuple, dict))\n    tuple_obs = isinstance(env[\"observation_space\"], (tuple, dict))\n    return tuple_action, tuple_obs\n```"}
{"task_id": 278, "completion_id": 0, "completion": "To solve this problem, we need to traverse the decision tree based on the given sample's features. We'll recursively follow the branches of the tree until we reach a leaf node, which will contain the final prediction or regression value.\n\nHere's the implementation of the `evaluate_decision_tree` function:\n\n```python\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    # Check if the current node is a leaf node\n    if 'value' in tree:\n        return tree['value']\n    \n    # Get the feature index and threshold from the current node\n    feature_index = tree['feature_i']\n    threshold = tree['threshold']\n    \n    # Determine which branch to take based on the sample's feature value\n    if sample[feature_index] <= threshold:\n        return evaluate_decision_tree(tree['true_branch'], sample)\n    else:\n        return evaluate_decision_tree(tree['false_branch'], sample)\n\n# Example usage:\n# Define a simple decision tree\ndecision_tree = {\n    'feature_i': 0,\n    'threshold': 0.5,\n    'true_branch': {\n        'value': 'Class A'\n    },\n    'false_branch': {\n        'feature_i': 1,\n        'threshold': 0.3,\n        'true_branch': {\n            'value': 'Class B'\n        },\n        'false_branch': {\n            'value': 'Class C'\n        }\n    }\n}\n\n# Sample input\nsample = [0.4, 0.2]\n\n# Evaluate the decision tree\nprediction = evaluate_decision_tree(decision_tree, sample)\nprint(prediction)  # Output should be 'Class A'\n```\n\n### Explanation:\n1. **Leaf Node Check**: The function first checks if the current node is a leaf node by looking for the key `'value'`. If it exists, the function returns the value associated with this key.\n\n2. **Internal Node Processing**: If the current node is an internal node, the function retrieves the `feature_i` and `threshold` values.\n\n3. **Branching Decision**: The function then compares the value of the feature at `feature_i` in the sample to the threshold. Depending on whether the sample's feature value is less than or equal to the threshold, the function recursively calls itself on either the `true_branch` or the `false_branch`.\n\nThis approach ensures that the function correctly traverses the decision tree and returns the value from the leaf node that is reached based on the sample's feature values."}
{"task_id": 279, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier computation\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the Mean Squared Error\n    mse_value = np.mean((y_pred - y_true) ** 2)\n    \n    # Calculate the gradient of the MSE w.r.t. predictions\n    gradient = (2 / len(y_true)) * (y_pred - y_true)\n    gradient_rounded = [round(g, 4) for g in gradient]\n    \n    # Calculate the classification accuracy\n    predictions_binary = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(predictions_binary == y_true)\n    \n    # Round the MSE value and accuracy to four decimal places\n    mse_value_rounded = round(mse_value, 4)\n    accuracy_rounded = round(accuracy, 4)\n    \n    return mse_value_rounded, gradient_rounded, accuracy_rounded\n```\n\nThis function calculates the Mean Squared Error, its gradient, and the classification accuracy based on the given predictions and true labels. It ensures all outputs are rounded to four decimal places as specified."}
{"task_id": 280, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if return_grad:\n        # Calculate the gradient of the L2 regularization term\n        gradient = alpha * w\n        return np.round(gradient, 4)\n    else:\n        # Calculate the L2 regularization value\n        regularization_value = 0.5 * alpha * np.sum(w ** 2)\n        return np.round(regularization_value, 4)\n\n# Example usage:\nw = np.array([1.0, -2.0, 3.0])\nalpha = 0.1\n\nprint(l2_regularization(w, alpha))            # \u279c 0.7\nprint(l2_regularization(w, alpha, True))      # \u279c array([ 0.1, -0.2,  0.3])\n```\n\nThis implementation correctly computes both the L2 regularization value and its gradient, handling inputs of arbitrary shape and rounding the results to four decimal places as required."}
{"task_id": 281, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass L1Regularization:\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    def __init__(self, alpha: float):\n        if alpha < 0:\n            raise ValueError(\"Alpha must be a non-negative float.\")\n        self.alpha = alpha\n\n    def __call__(self, w: np.ndarray) -> float:\n        \"\"\"Returns the L1 penalty value.\"\"\"\n        if self.alpha == 0:\n            return 0.0\n        return self.alpha * np.sum(np.abs(w))\n\n    def grad(self, w: np.ndarray) -> np.ndarray:\n        \"\"\"Returns the gradient of the penalty with respect to w.\"\"\"\n        if self.alpha == 0:\n            return np.zeros_like(w)\n        return self.alpha * np.sign(w)\n\n# Example usage:\n# reg = L1Regularization(alpha=0.1)\n# w = np.array([1, -2, 3])\n# print(reg(w))  # Output: 0.6\n# print(reg.grad(w))  # Output: [0.1 -0.1 0.1]\n```\n\nThis implementation defines a class `L1Regularization` that can be used to compute the L1 penalty and its gradient. The class is initialized with a non-negative float `alpha`, which controls the strength of the regularization. The `__call__` method computes the L1 penalty, and the `grad` method computes the gradient of the penalty with respect to the weight vector `w`. Both methods handle arbitrary-shaped NumPy arrays and ensure that if `alpha` is zero, the penalty and gradient are both zero."}
{"task_id": 282, "completion_id": 0, "completion": "Here is the implementation of the `running_stats` function using Welford's method:\n```python\nimport math\n\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    if not data:\n        return (0.0, 0.0, 0.0)\n    \n    n = 0\n    m = 0.0\n    s = 0.0\n    \n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n    \n    variance = s / (n - 1) if n > 1 else 0.0\n    std_dev = math.sqrt(variance)\n    \n    return (round(m, 4), round(variance, 4), round(std_dev, 4))\n```\n\nThis function follows the Welford's method to compute the running mean, variance, and standard deviation of a stream of data. It maintains a running counter `n`, a running mean `m`, and a running sum of squares of differences from the current mean `s`. After processing all data, it calculates the sample variance and standard deviation and returns them rounded to 4 decimal places. If the input list is empty, it returns `(0.0, 0.0, 0.0)`."}
{"task_id": 283, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    # Ensure inputs are numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate probabilities using the sigmoid function\n    p_i = 1 / (1 + np.exp(-predicted))\n    \n    # Calculate gradients and Hessians\n    g_i = p_i - actual\n    h_i = p_i * (1 - p_i)\n    \n    # Sum gradients and Hessians\n    sum_g_i = np.sum(g_i)\n    sum_h_i = np.sum(h_i)\n    \n    # Calculate leaf value and gain\n    leaf_value = sum_g_i / (sum_h_i + regularization)\n    gain = 0.5 * (sum_g_i ** 2) / (sum_h_i + regularization)\n    \n    # Round the results to 4 decimal places\n    leaf_value_rounded = round(leaf_value, 4)\n    gain_rounded = round(gain, 4)\n    \n    return [leaf_value_rounded, gain_rounded]\n\n# Example usage:\n# actual = np.array([0, 1, 0, 1])\n# predicted = np.array([-1.0, 2.0, -0.5, 1.5])\n# regularization = 1.0\n# print(binary_log_loss_metrics(actual, predicted, regularization))\n```\n\nThis function calculates the approximate leaf value and split gain for binary cross-entropy loss in gradient boosting. It uses the provided true labels and raw scores to compute the necessary derivatives and then applies the formulas for leaf value and gain, rounding the results to four decimal places before returning them."}
{"task_id": 284, "completion_id": 0, "completion": "```python\ndef iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    # Check if the object is already in the table\n    if obj in table:\n        return table[obj]\n    \n    # If readonly is True, return None if the object is not in the table\n    if readonly:\n        return None\n    \n    # If the table is not full, add the new object with the next available index\n    if len(table) < size:\n        next_index = len(table)\n        table[obj] = next_index\n        return next_index\n    \n    # If the table is full, return the hash-based index and increment the collision count\n    else:\n        index = hash(obj) % size\n        overfull_count[0] += 1\n        return index\n```"}
{"task_id": 285, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    # Ensure x and y are 2D arrays\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    \n    # Check if feature dimensions match\n    if x.shape[1] != y.shape[1]:\n        return -1\n    \n    # Compute the linear kernel matrix\n    kernel_matrix = x @ y.T\n    \n    # Convert the result to a list of lists and return\n    return kernel_matrix.tolist()\n```\n\nThis implementation first checks if the input arrays `x` and `y` are one-dimensional and reshapes them to two-dimensional if necessary. It then checks if the feature dimensions (the number of columns) of `x` and `y` match. If they do not match, it returns `-1`. If they match, it computes the linear kernel matrix by taking the matrix product of `x` and the transpose of `y`, and returns the result as a list of lists using the `tolist()` method."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\n### Explanation:\n1. **Initializer Functions**:\n   - `zeros_init(shape)`: Creates a matrix filled with zeros.\n   - `ones_init(shape)`: Creates a matrix filled with ones.\n   - `random_uniform_init(shape, low=0.0, high=1.0, seed=42)`: Creates a matrix with elements drawn uniformly from the specified interval `[low, high]`. The seed ensures reproducibility.\n\n2. **get_initializer Function**:\n   - This function takes a string `name` as input.\n   - It looks up the object with the given name in the global namespace using `globals().get(name)`.\n   - It checks if the retrieved object is callable using `callable(initializer)`.\n   - If the object is callable, it returns the object.\n   - If the object is not callable or does not exist, it raises a `ValueError` with the message \"Invalid initialization function.\"\n\nThis setup allows users to specify an initializer by its name and get the corresponding function, which can then be used to initialize weights in a neural network or other numerical computations."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the forward and backward passes of a 2-D average-pooling layer, we need to follow these steps:\n\n1. **Forward Pass**:\n   - Slide the pooling window over the input feature map.\n   - Compute the average of the elements within each window.\n   - Store the results in the pooled output array.\n\n2. **Backward Pass**:\n   - Distribute the gradient from the pooled output back to the input.\n   - Each element in the input that contributed to a pooled value receives an equal share of the gradient.\n\nHere's the implementation of the `average_pool2d` function:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the output dimensions\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    \n    # Initialize the pooled output and gradient input\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    h_end = h_start + p_h\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    h_end = h_start + p_h\n                    w_end = w_start + p_w\n                    window_size = p_h * p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / window_size\n    \n    # Round and convert to lists\n    pooled_output_rounded = np.round(pooled_output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    \n    return pooled_output_rounded, grad_input_rounded\n```\n\n### Explanation:\n\n- **Forward Pass**:\n  - We iterate over each sample (`n`) and each channel (`c`).\n  - For each position in the output feature map (`i`, `j`), we define the window in the input feature map.\n  - We compute the mean of the window and store it in the `pooled_output`.\n\n- **Backward Pass**:\n  - We iterate over each sample (`n`) and each channel (`c`).\n  - For each position in the output feature map (`i`, `j`), we distribute the gradient equally among the elements in the corresponding window in the input feature map.\n\n- **Rounding and Conversion**:\n  - Both the `pooled_output` and `grad_input` are rounded to the nearest 4th decimal and converted to lists before returning.\n\nThis implementation ensures that the forward and backward passes are correctly computed and formatted as required."}
{"task_id": 288, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    # Check if both inputs are scalars\n    if isinstance(actual, (int, float)) and isinstance(predicted, (int, float)):\n        return round((actual - predicted) ** 2, 4)\n    \n    # Check if both inputs are iterables\n    if isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray)):\n        # Check if the lengths are identical and greater than 0\n        if len(actual) != len(predicted) or len(actual) == 0:\n            return -1\n        \n        # Calculate the mean squared error\n        mse = np.mean((np.array(actual) - np.array(predicted)) ** 2)\n        return round(mse, 4)\n    \n    # If inputs are not valid, return -1\n    return -1\n```\n\nThis function handles both scalar and iterable inputs, checks for length mismatches, and ensures the result is rounded to four decimal places. It uses NumPy for efficient computation when dealing with iterables."}
{"task_id": 289, "completion_id": 0, "completion": "```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    if not entries:\n        return \"\"\n    \n    formatted_lines = [f\"{field}: \\\"{value}\\\"\" for field, value in entries]\n    return \"\\n\".join(formatted_lines)\n```\n\nThis function iterates over the list of tuples, formats each tuple according to the specified pattern, and then joins all the formatted strings with a newline character. If the input list is empty, it returns an empty string."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Check if both trees are leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Compare leaf values using numpy.allclose for numerical types\n        if isinstance(tree_a.value, (int, float, np.ndarray, list)):\n            return np.allclose(tree_a.value, tree_b.value)\n        else:\n            return tree_a.value == tree_b.value\n    \n    # Check if one is a leaf and the other is a node\n    if isinstance(tree_a, Leaf) != isinstance(tree_b, Leaf):\n        return False\n    \n    # Both are nodes, check their structure and recursively compare children\n    if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n        return False\n    \n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n```\n\nThis implementation defines the `compare_trees` function, which recursively checks if two decision trees are equivalent by comparing their structures and node values. The function uses `np.allclose` to handle numerical comparisons with a specified tolerance."}
{"task_id": 291, "completion_id": 0, "completion": "Here's the implementation of the `pca_transform` function according to the given specifications:\n\n```python\nimport numpy as np\n\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    # Validate n_components\n    m, d = X.shape\n    if not (1 <= n_components <= d):\n        return -1\n    \n    # Step 2: Compute the covariance matrix\n    cov_matrix = np.cov(X, rowvar=False)\n    \n    # Step 3: Find eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)\n    \n    # Step 4: Sort eigenpairs\n    eigen_pairs = [(eigenvalues[i], eigenvectors[:, i]) for i in range(d)]\n    eigen_pairs.sort(key=lambda x: x[0], reverse=True)\n    \n    # Step 5: Keep the first n eigenvectors\n    top_n_eigenvectors = [pair[1] for pair in eigen_pairs[:n_components]]\n    V = np.vstack(top_n_eigenvectors)\n    \n    # Ensure deterministic sign for eigenvectors\n    for i in range(n_components):\n        if V[i, 0] < 0:\n            V[i, :] *= -1\n    \n    # Step 6: Project X onto the selected components\n    X_projected = X @ V\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(X_projected, 4).tolist()\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `n_components` is within the valid range `[1, d]`. If not, it returns `-1`.\n\n2. **Covariance Matrix Calculation**: The covariance matrix `\u03a3` is computed using `np.cov` with `rowvar=False` to ensure that each row represents a sample.\n\n3. **Eigenvalue Decomposition**: The eigenvalues and eigenvectors of the covariance matrix are obtained using `np.linalg.eig`.\n\n4. **Sorting Eigenpairs**: The eigenpairs (eigenvalue, eigenvector pairs) are sorted in descending order based on the eigenvalues.\n\n5. **Selecting Principal Components**: The top `n_components` eigenvectors are selected. Each eigenvector is checked for its first element, and if it is negative, the entire eigenvector is multiplied by `-1` to ensure a consistent sign.\n\n6. **Projection**: The input data `X` is projected onto the selected principal components using matrix multiplication `X @ V`.\n\n7. **Formatting the Output**: The resulting projection is rounded to 4 decimal places and converted to a Python list using `tolist()`.\n\nThis implementation ensures that the PCA transformation is performed correctly and adheres to the specified constraints."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for efficient slicing\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n\n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n\n    # Get the number of rows and columns\n    num_rows, num_cols = np_parent1.shape\n\n    # Ensure the cutoff is within valid range\n    if not (0 <= cutoff <= num_cols):\n        raise ValueError(\"Cutoff must be between 0 and the number of columns (inclusive).\")\n\n    # Create the children matrices using slicing\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n\n    # Convert the NumPy arrays back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n\n    # Return the children as a tuple of lists\n    return (child1_list, child2_list)\n```\n\nThis function performs the single-point column crossover for two neural network weight matrices. It first checks if the input matrices have the same shape. If they do, it slices the matrices according to the specified cutoff and combines them to form two new children matrices. Finally, it converts these matrices back to lists and returns them."}
{"task_id": 293, "completion_id": 0, "completion": "```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Normalize the agent name by stripping spaces and converting to lowercase\n    agent_name = agent_name.strip().lower()\n\n    # Define the mapping from agent names to environment and access type\n    agent_to_env_access = {\n        'dqn': ('CartPole-v0', 'unwrapped'),\n        'ddpg': ('Pendulum-v0', 'env'),\n        'a3c': ('Pendulum-v0', 'unwrapped'),\n        'a2c': ('CartPole-v0', 'env'),\n        'a2c_multi': ('CartPole-v0', 'raw'),\n        'trpo': ('Pendulum-v0', 'unwrapped')\n    }\n\n    # Return the corresponding environment and access type, or -1 if not found\n    return agent_to_env_access.get(agent_name, -1)\n```\n\nThis function normalizes the input agent name by stripping any leading or trailing spaces and converting it to lowercase. It then uses a dictionary to map the normalized agent name to the corresponding environment and access type. If the agent name is not found in the dictionary, the function returns `-1`."}
{"task_id": 294, "completion_id": 0, "completion": "To solve this problem, we need to convert a custom graph representation into a plain adjacency dictionary. The custom graph is represented by a dictionary `G` with specific fields, and our goal is to transform it into a format that is easy to serialize and inspect.\n\nHere's a step-by-step breakdown of how we can achieve this:\n\n1. **Initialize the Adjacency Dictionary**: We'll start by creating an empty dictionary `adj` where each key will be a vertex label, and the value will be a list of tuples representing the edges connected to that vertex.\n\n2. **Iterate Over the Graph**: We'll iterate over the `_G` list, which contains the adjacency information. Each element in `_G` corresponds to a vertex and its outgoing edges.\n\n3. **Handle Directed vs Undirected Graphs**:\n   - For directed graphs, we'll directly add the edges to the adjacency dictionary.\n   - For undirected graphs, we'll ensure that each edge appears in both directions.\n\n4. **Sort the Neighbors**: After processing all edges, we'll sort the neighbors for each vertex alphabetically to ensure determinism.\n\n5. **Include Vertices with No Edges**: We'll ensure that all vertices, even those with no edges, are included in the adjacency dictionary with an empty list.\n\nHere's the complete implementation of the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for edges in G['_G']:\n        for source_label, target_label, weight in edges:\n            if G['is_directed']:\n                adj[source_label].append((target_label, weight))\n            else:\n                adj[source_label].append((target_label, weight))\n                adj[target_label].append((source_label, weight))\n    \n    for neighbors in adj.values():\n        neighbors.sort()\n    \n    return adj\n```\n\n### Explanation:\n\n- **Initialization**: We initialize `adj` with all vertex labels from `G['_V2I']`, ensuring that vertices with no edges are included with an empty list.\n  \n- **Processing Edges**: We iterate over each list of edges in `G['_G']`. For each edge `(source_label, target_label, weight)`, we add it to the adjacency list of `source_label`. If the graph is undirected, we also add the reverse edge `(target_label, source_label)`.\n\n- **Sorting**: After processing all edges, we sort the list of neighbors for each vertex to ensure the output is deterministic.\n\nThis function should correctly convert the custom graph representation into the desired adjacency dictionary format, handling both directed and undirected graphs as specified."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# arr = np.array([0, 1, 0, 1])\n# print(is_binary(arr))  # Should return True\n\n# arr = np.array([0, 2, 0, 1])\n# print(is_binary(arr))  # Should return False\n```\n\nThis function first converts the input to a NumPy array if it isn't already one. Then, it uses a boolean mask to check if every element in the array is either `0` or `1`. The `np.all()` function returns `True` only if all elements in the mask are `True`, indicating that all elements in the array are binary."}
{"task_id": 297, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    a, b = feature_range\n    if a >= b:\n        return -1\n\n    # Convert the input data to a NumPy array for easier manipulation\n    data_array = np.array(data, dtype=float)\n\n    # Handle NaN, inf, -inf by replacing them with 0.0\n    data_array = np.nan_to_num(data_array)\n\n    # Initialize an empty list to store the scaled data\n    scaled_data = []\n\n    # Iterate over each feature column\n    for j in range(data_array.shape[1]):\n        min_j = np.min(data_array[:, j])\n        max_j = np.max(data_array[:, j])\n\n        # If the feature column is constant, treat its range as 1\n        if min_j == max_j:\n            min_j = max_j - 1\n\n        # Apply Min-Max scaling to the current feature column\n        scaled_column = ((data_array[:, j] - min_j) / (max_j - min_j)) * (b - a) + a\n        scaled_data.append(scaled_column)\n\n    # Convert the scaled data back to a list of lists and round to four decimal places\n    scaled_data_list = [list(map(lambda x: round(x, 4), col)) for col in zip(*scaled_data)]\n\n    return scaled_data_list\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Split sentences into tokens\n    tokens_corpus = [sentence.split() for sentence in corpus]\n    \n    # Pad tokens with <bol> and <eol> for N > 1\n    if N > 1:\n        tokens_corpus = [['<bol>'] * (N - 1) + tokens + ['<eol>'] for tokens in tokens_corpus]\n    \n    # Count N-grams and (N-1)-gram prefixes\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    for tokens in tokens_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n    \n    # Split query into tokens and pad if necessary\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    \n    # Calculate the total log-probability\n    total_log_prob = 0.0\n    \n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        \n        if prefix_counts[prefix] == 0:\n            return float('-inf')\n        \n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        if prob == 0:\n            return float('-inf')\n        \n        total_log_prob += math.log(prob)\n    \n    return round(total_log_prob, 4)\n```\n\nThis implementation follows the steps outlined in the task description. It processes the corpus to count N-grams and their prefixes, then calculates the log-probability for the query based on these counts. If any N-gram or prefix is unseen, it returns negative infinity."}
{"task_id": 299, "completion_id": 0, "completion": "Here's the implementation of the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> List[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    m, n = X.shape\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iterations):\n        # Step 1: Assign each sample to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2: Recompute centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(k_means(X, k))\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `k` samples of the dataset `X`.\n2. **Assignment Step**: Each sample is assigned to the nearest centroid based on Euclidean distance.\n3. **Update Step**: Each centroid is updated to be the mean of all samples assigned to it. If a cluster becomes empty, its centroid remains unchanged.\n4. **Convergence Check**: The algorithm stops iterating if the centroids do not change between iterations or if the maximum number of iterations (`max_iterations`) is reached.\n5. **Output**: The function returns a list of cluster indices for each sample.\n\nThis implementation ensures that the results are deterministic by initializing centroids with the first `k` samples and handling empty clusters appropriately."}
{"task_id": 300, "completion_id": 0, "completion": "```python\nimport heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str = \"largest\") -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    if k <= 0 or not sequence:\n        return []\n    \n    if k >= len(sequence):\n        return sorted(sequence, reverse=(order == \"largest\"))\n    \n    if order == \"largest\":\n        # Use a min-heap to keep track of the k largest elements\n        heap = sequence[:k]\n        heapq.heapify(heap)\n        for num in sequence[k:]:\n            if num > heap[0]:\n                heapq.heapreplace(heap, num)\n        return sorted(heap, reverse=True)\n    else:\n        # Use a max-heap to keep track of the k smallest elements\n        # We invert the values to use the min-heap as a max-heap\n        heap = [-num for num in sequence[:k]]\n        heapq.heapify(heap)\n        for num in sequence[k:]:\n            if -num > heap[0]:\n                heapq.heapreplace(heap, -num)\n        return sorted([-num for num in heap])\n\n# Example usage:\n# print(top_k_elements([5, 1, 9, 3, 7], 3, \"largest\"))  # Output: [9, 7, 5]\n# print(top_k_elements([5, 1, 9, 3, 7], 3, \"smallest\")) # Output: [1, 3, 5]\n```\n\n### Explanation:\n1. **Edge Cases**: \n   - If `k <= 0` or the sequence is empty, return an empty list.\n   - If `k >= len(sequence)`, return the entire sequence sorted according to the specified order.\n\n2. **Heap Usage**:\n   - For finding the largest elements, use a min-heap. This allows us to efficiently keep track of the k largest elements seen so far.\n   - For finding the smallest elements, use a max-heap. Since Python's `heapq` only provides a min-heap, we invert the values to simulate a max-heap.\n\n3. **Heap Operations**:\n   - Initialize the heap with the first k elements of the sequence.\n   - For each subsequent element, check if it should replace the smallest (or largest, in the case of inverted values) element in the heap.\n   - Use `heapreplace` to efficiently replace the root of the heap if necessary.\n\n4. **Sorting**:\n   - After processing all elements, sort the heap to get the final result in the required order."}
{"task_id": 301, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that constructs a binary search tree (BST) from a list of `(key, value)` pairs and then performs an in-order traversal to return the keys in sorted order based on the values. Here's how we can achieve this:\n\n1. **Define the Node Class**: We assume that the `Node` class is already defined with the necessary comparison operators (`>`, `>=`, `<`, `<=`) on the `val` attribute.\n\n2. **Insert Nodes into the BST**: We will insert each node into the BST according to the rules provided:\n   - Start with the first pair as the root.\n   - For each subsequent pair, create a `Node` and insert it into the tree:\n     - If the new node is strictly smaller than the current node, go left.\n     - Otherwise, go right.\n\n3. **In-order Traversal**: Perform an in-order traversal of the BST to collect the keys in ascending order of their values.\n\nHere's the complete implementation:\n\n```python\nclass Node:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __gt__(self, other):\n        return self.val > other.val\n\n    def __ge__(self, other):\n        return self.val >= other.val\n\n    def __lt__(self, other):\n        return self.val < other.val\n\n    def __le__(self, other):\n        return self.val <= other.val\n\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n\n    # Helper function to insert a node into the BST\n    def insert(root, node):\n        if node < root:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n        else:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n\n    # Helper function to perform in-order traversal\n    def inorder_traverse(node, result):\n        if node is not None:\n            inorder_traverse(node.left, result)\n            result.append(node.key)\n            inorder_traverse(node.right, result)\n\n    # Create the root node from the first pair\n    root = Node(*pairs[0])\n    \n    # Insert the rest of the nodes\n    for key, val in pairs[1:]:\n        insert(root, Node(key, val))\n    \n    # Collect keys in in-order\n    keys = []\n    inorder_traverse(root, keys)\n    \n    return keys\n```\n\n### Explanation:\n\n- **Node Class**: The `Node` class is assumed to have a `key` and a `val` attribute, and it implements comparison operators based on `val`.\n\n- **inorder_keys Function**:\n  - If the input list `pairs` is empty, return an empty list.\n  - Create the root node using the first pair.\n  - Insert each subsequent pair into the BST using the `insert` helper function.\n  - Perform an in-order traversal using the `inorder_traverse` helper function to collect the keys in the correct order.\n  - Return the list of keys.\n\nThis solution ensures that the BST is built correctly and the in-order traversal returns the keys in ascending order of their values."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    \n    # Step 1: Build the weighted adjacency matrix W\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the diagonal degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Step 3: Compute the unnormalized graph Laplacian L\n    L = D - W\n    \n    # Step 4: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 5: Run k-means on the rows of E\n    def kmeans(E, k, max_iter=100):\n        # Initialize centroids with the first k rows of E\n        centroids = E[:k].copy()\n        labels = np.zeros(n, dtype=int)\n        \n        for _ in range(max_iter):\n            # Assign each point to the nearest centroid\n            for i in range(n):\n                distances = np.linalg.norm(E[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            \n            # Update centroids\n            new_centroids = np.array([E[labels == j].mean(axis=0) for j in range(k)])\n            \n            # Check for convergence\n            if np.all(centroids == new_centroids):\n                break\n            \n            centroids = new_centroids\n        \n        # Handle empty clusters by reinitializing centroids\n        for j in range(k):\n            if np.sum(labels == j) == 0:\n                centroids[j] = E[np.random.randint(n)]\n        \n        return labels.tolist()\n    \n    return kmeans(E, k)\n\n# Example usage:\n# X = np.random.rand(100, 2)  # Example data\n# k = 3  # Desired number of clusters\n# labels = spectral_clustering(X, k)\n# print(labels)\n```\n\nThis implementation follows the steps outlined in the task description to perform spectral clustering from scratch using only NumPy for numerical operations. The `spectral_clustering` function takes a 2-D NumPy array `X` and an integer `k` as inputs and returns a list of cluster labels. The k-means step includes handling of empty clusters by reinitializing their centroids."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Ensure ix is within bounds\n    ix = max(0, min(ix, len(params) - 1))\n    \n    # Get previous and current elements\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    # Format the debug string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\nThis function formats a detailed debugging string comparing the current and previous outputs of a program to their expected (gold-standard) outputs. It ensures that the output matches the specified format exactly, including the number of dashes, line breaks, and the placement of the optional warning string."}
{"task_id": 304, "completion_id": 0, "completion": "To implement the function `bayesian_posterior_mean`, we need to follow these steps:\n\n1. **Handle the Intercept**: If `fit_intercept` is `True`, prepend a column of ones to the design matrix `X`.\n2. **Process the Prior Parameters**:\n   - Convert `mu` to a vector if it's a scalar.\n   - Convert `V` to a diagonal matrix if it's a scalar or a list/tuple.\n3. **Compute the Posterior Mean**:\n   - Calculate the posterior covariance matrix `Sigma_b`.\n   - Calculate the posterior mean `mu_b`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if required\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Process mu and V\n    N, M = X.shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    # Compute the posterior mean\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Round the result to 4 decimal places\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([1, 2])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\n### Explanation:\n- **Intercept Handling**: If `fit_intercept` is `True`, we prepend a column of ones to `X` to account for the intercept term.\n- **Parameter Processing**:\n  - `mu` is converted to a vector if it's a scalar.\n  - `V` is converted to a diagonal matrix if it's a scalar or a list/tuple. If `V` is `None`, it defaults to the identity matrix.\n- **Posterior Mean Calculation**:\n  - `V_inv` is the inverse of the prior covariance matrix `V`.\n  - `Sigma_b` is the posterior covariance matrix up to the noise variance `\u03c3\u00b2`.\n  - `mu_b` is the posterior mean of the coefficients.\n- **Rounding**: The final result is rounded to 4 decimal places before returning."}
{"task_id": 305, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each element in the array\n    for value in x:\n        if value >= 0:\n            # Use the stable formula for x >= 0\n            sig_value = 1 / (1 + np.exp(-value))\n        else:\n            # Use the stable formula for x < 0\n            sig_value = np.exp(value) / (1 + np.exp(value))\n        \n        # Round the result to 4 decimal places and append to the list\n        result.append(round(sig_value, 4))\n    \n    return result\n\n# Example usage:\n# print(sigmoid([1, -1, 0, 10, -10]))\n```\n\nThis implementation of the sigmoid function handles both positive and negative inputs using the numerically stable formulations provided. It converts the input to a NumPy array to facilitate element-wise operations and ensures that the output is a Python list with each value rounded to four decimal places."}
{"task_id": 307, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    return X[idxs], y[idxs]\n\n# Example usage:\n# np.random.seed(42)  # For reproducibility\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 2])\n# X_sample, y_sample = bootstrap_sample(X, y)\n# print(\"X_sample:\\n\", X_sample)\n# print(\"y_sample:\\n\", y_sample)\n```\n\nThis function `bootstrap_sample` takes a feature matrix `X` and a target vector `y`, both as NumPy arrays, and returns a bootstrap sample of the data. The bootstrap sample is generated by randomly selecting `n_samples` indices with replacement from the range `{0, ..., n_samples-1}` and then using these indices to extract the corresponding rows from `X` and `y`. The resulting arrays `X_sample` and `y_sample` have the same shapes as the input arrays `X` and `y`."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n\n    # Step 1: Convert Hz limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Step 2: Generate n_filters+2 equally-spaced Mel values\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Step 3: Convert Mel values back to Hz\n    freqs = mel_to_hz(mels)\n\n    # Step 4: Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Step 5: Compute the weights for each filter\n    for i in range(n_filters):\n        left_mel = mels[i]\n        center_mel = mels[i + 1]\n        right_mel = mels[i + 2]\n\n        left_freq = mel_to_hz(left_mel)\n        center_freq = mel_to_hz(center_mel)\n        right_freq = mel_to_hz(right_mel)\n\n        for k in range(N // 2 + 1):\n            freq = k * fs / N\n\n            if freq < left_freq:\n                weight = 0\n            elif left_freq <= freq < center_freq:\n                weight = (freq - left_freq) / (center_freq - left_freq)\n            elif center_freq <= freq < right_freq:\n                weight = (right_freq - freq) / (right_freq - center_freq)\n            else:\n                weight = 0\n\n            filterbank[i, k] = weight\n\n    # Step 6: Normalize the filters if required\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (freqs[i + 2] - freqs[i])\n\n    # Convert to list and round to 4 decimal places\n    filterbank_list = [[round(weight, 4) for weight in row] for row in filterbank]\n\n    return filterbank_list\n```\n\nThis code constructs a Mel filterbank transformation matrix according to the specified requirements. It includes conversion between Hz and Mel scales, generation of triangular filters, and optional normalization of the filters. The final output is a list of lists, with each element rounded to four decimal places."}
{"task_id": 309, "completion_id": 0, "completion": "To implement the Factorization Machine (FM) prediction formula, we need to follow these steps:\n\n1. Compute the linear part of the prediction, which is the dot product of the weight vector `w` and each row `x_i` of the feature matrix `X`, plus the bias `w0`.\n2. Compute the pairwise interaction part of the prediction. This involves:\n   - Calculating the outer product of each row `x_i` with itself (`x_i \u2299 x_i`).\n   - Multiplying the outer product by the element-wise square of the corresponding column in the factor matrix `v`.\n   - Summing up the results for all columns in `v`.\n   - Subtracting the sum of the element-wise squares of `x_i` multiplied by the element-wise squares of the corresponding columns in `v`.\n3. Combine the linear part and the pairwise interaction part to get the final prediction for each sample.\n4. Round each prediction to four decimal places and return the results as a list.\n\nHere's the implementation of the `fm_predict` function:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    # Number of samples and features\n    m, n = X.shape\n    k = v.shape[1]\n    \n    predictions = []\n    \n    for i in range(m):\n        x_i = X[i]\n        \n        # Linear part\n        linear_part = w0 + np.dot(w, x_i)\n        \n        # Pairwise interaction part\n        pairwise_part = 0.5 * np.sum(\n            (np.dot(x_i, v) ** 2) - np.dot(x_i ** 2, v ** 2)\n        )\n        \n        # Total prediction\n        prediction = linear_part + pairwise_part\n        \n        # Append the rounded prediction to the list\n        predictions.append(round(prediction, 4))\n    \n    return predictions\n```\n\nThis function iterates over each sample in the feature matrix `X`, computes the linear and pairwise interaction parts of the FM prediction, and appends the rounded result to the `predictions` list. Finally, it returns the list of predictions."}
{"task_id": 310, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    # Convert inputs to NumPy arrays for consistent handling\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Check if both arrays have the same non-zero length\n    if actual.size == 0 or predicted.size == 0 or actual.shape != predicted.shape:\n        return -1\n    \n    # Calculate the squared differences\n    squared_diff = (actual - predicted) ** 2\n    \n    # Compute the mean of the squared differences\n    mean_squared_diff = np.mean(squared_diff)\n    \n    # Calculate the RMSE\n    rmse = np.sqrt(mean_squared_diff)\n    \n    # Return the RMSE rounded to 4 decimal places\n    return round(rmse, 4)\n```"}
{"task_id": 311, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    if isinstance(arr, np.ndarray):\n        # Create a copy to avoid modifying the original array\n        arr = arr.copy()\n    else:\n        # Convert the list to a NumPy array\n        arr = np.array(arr)\n\n    # Use NumPy's clip function to replace negative values with 0.0\n    arr = np.clip(arr, a_min=0.0, a_max=None)\n\n    # Convert the resulting array back to a list\n    return arr.tolist()\n\n# Example usage:\n# nested_list = [[-1, 2, -3], [4, -5, 6]]\n# print(clip_non_negative(nested_list))  # Output: [[0.0, 2.0, 0.0], [4.0, 0.0, 6.0]]\n\n# numpy_array = np.array([[-1, 2, -3], [4, -5, 6]])\n# print(clip_non_negative(numpy_array))  # Output: [[0.0, 2.0, 0.0], [4.0, 0.0, 6.0]]\n```\n\nThis solution ensures that the input is converted to a NumPy array if it is not already one, applies the clipping operation using NumPy's `clip` function, and then converts the result back to a Python list. This approach handles both nested lists and NumPy arrays, and ensures that the original input is not modified in-place when it is a NumPy array."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n\n    N = window_len - 1 if symmetric else window_len\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n\n    window = [\n        a0 - a1 * np.cos(2 * np.pi * n / N) +\n        a2 * np.cos(4 * np.pi * n / N) -\n        a3 * np.cos(6 * np.pi * n / N)\n        for n in range(window_len)\n    ]\n\n    return [round(w, 4) for w in window]\n```\n\nThis implementation generates a Blackman\u2013Harris window based on the given parameters. It handles special cases where the window length is less than or equal to zero or exactly one. The function also supports both symmetric and periodic forms of the window, depending on the `symmetric` parameter."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a moderate value using recursion\n    while x < 6:\n        x += 1\n        # Accumulate the sum of the series 1 / (k - 1) for k from x to 6\n        sum_series = sum(1 / (k - 1) for k in range(int(x), 6))\n    \n    # Apply the asymptotic expansion for large x\n    return math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6) - sum_series\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Calculate the digamma values\n    psi_gamma_dt = digamma(gamma[d][t])\n    psi_sum_gamma_d = digamma(sum(gamma[d]))\n    \n    # Compute the expected log value\n    expected_log = psi_gamma_dt - psi_sum_gamma_d\n    \n    # Round the result to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage:\n# gamma = [[2, 3, 5], [1, 1, 1]]\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Output should be rounded to 4 decimals\n```\n\nThis code defines a `digamma` function to approximate the digamma function using a combination of recursion and an asymptotic expansion. The `expected_log_dirichlet` function then uses this `digamma` function to compute the expected log of a Dirichlet-distributed component, rounding the result to four decimal places."}
{"task_id": 315, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    # Normalize the input name\n    name = name.replace(\"_\", \"\").lower()\n    \n    # Define the loss functions\n    def mae(y_true, y_pred):\n        return round(np.mean(np.abs(np.array(y_true) - np.array(y_pred))), 4)\n    \n    def mse(y_true, y_pred):\n        return round(np.mean((np.array(y_true) - np.array(y_pred)) ** 2), 4)\n    \n    def binary_cross_entropy(y_true, y_pred):\n        y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n        return round(-np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred)), 4)\n    \n    # Map normalized names to loss functions\n    loss_functions = {\n        \"mae\": mae,\n        \"meanabsoluteerror\": mae,\n        \"mse\": mse,\n        \"meansquarederror\": mse,\n        \"crossentropy\": binary_cross_entropy,\n        \"logloss\": binary_cross_entropy,\n        \"ce\": binary_cross_entropy\n    }\n    \n    # Get the loss function based on the name\n    loss_func = loss_functions.get(name)\n    \n    if loss_func is None:\n        raise ValueError(\"Invalid loss function.\")\n    \n    return loss_func\n```\n\nThis implementation defines a `get_loss` function that returns a loss function based on the provided name. The function normalizes the input name by removing underscores and converting it to lowercase. It then maps these normalized names to their corresponding loss functions, which are defined within the function. If the name does not match any known loss function, it raises a `ValueError`. Each loss function computes the loss and rounds the result to four decimal places."}
{"task_id": 316, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((x - y) ** 2))\n    \n    # Return the distance rounded to four decimal places\n    return round(distance, 4)\n```\n\nThis function first converts the input vectors `x` and `y` into NumPy arrays. It then checks if the vectors have the same length. If they do not, it returns `-1`. If they do, it calculates the Euclidean distance using the formula provided and returns the result rounded to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "Here's the implementation of the `err_fmt` function according to the provided specifications:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Calculate the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract the relevant tuples\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold texts\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    # Construct the debug report\n    report = (\n        f\"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        f\"----------------------- END DEBUG -----------------------\\n\"\n    )\n    \n    return report\n```\n\nThis function constructs the debug report by extracting the necessary information from the `params` list and the `golds` dictionary, and then formats it according to the specified layout. The function handles the case where `ix` is 0 by using `max(ix - 1, 0)` to ensure the previous index is always valid."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        # Find the best decision stump\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == -1:\n                        predictions[X_train[:, feature] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] > threshold] = -1\n                    \n                    errors = weights[y_train != predictions]\n                    error = np.sum(errors)\n                    \n                    if error > 0.5:\n                        error = 1 - error\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # Calculate alpha\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        \n        # Update weights\n        predictions = np.ones(n_samples)\n        if best_polarity == -1:\n            predictions[X_train[:, best_feature] <= best_threshold] = -1\n        else:\n            predictions[X_train[:, best_feature] > best_threshold] = -1\n        \n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        \n        # Store the classifier and its weight\n        classifiers.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(X_test))\n    for alpha, (feature, threshold, polarity) in zip(alphas, classifiers):\n        predictions = np.ones(len(X_test))\n        if polarity == -1:\n            predictions[X_test[:, feature] <= threshold] = -1\n        else:\n            predictions[X_test[:, feature] > threshold] = -1\n        test_predictions += alpha * predictions\n    \n    return [1 if pred >= 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n# print(predictions)\n```\n\nThis implementation of AdaBoost uses decision stumps as weak learners and trains them iteratively to form a strong classifier. The function `adaboost_predict` takes training data, tests data, and the number of estimators (weak learners) as input, and returns the predicted labels for the test data."}
{"task_id": 319, "completion_id": 0, "completion": "Here's the implementation of the `stochastic_gradient_descent` function as per the given task description:\n\n```python\nimport numpy as np\n\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float = 0.01, epochs: int = 1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y).flatten()  # Ensure y is a 1D array\n    \n    # Prepend a bias column of ones to X\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Initialize the weight vector \u03b8 with zeros\n    theta = np.zeros(X.shape[1])\n    \n    # Perform SGD\n    for _ in range(epochs):\n        for i in range(len(y)):\n            # Compute the prediction\n            prediction = np.dot(theta, X[i])\n            \n            # Compute the error\n            error = prediction - y[i]\n            \n            # Update the weights\n            theta -= learning_rate * error * X[i]\n    \n    # Return the learned parameters rounded to 4 decimal places as a Python list\n    return [round(t, 4) for t in theta]\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [3, 5, 7]\n# print(stochastic_gradient_descent(X, y, learning_rate=0.01, epochs=1000))\n```\n\n### Explanation:\n1. **Input Conversion**: The function first ensures that the input `X` and `y` are numpy arrays. If they are provided as lists, they are converted to numpy arrays.\n2. **Bias Column Addition**: A column of ones is added to `X` to account for the bias term in the linear model.\n3. **Initialization**: The weight vector `theta` is initialized to zeros with a size of `n+1` (where `n` is the number of features).\n4. **Stochastic Gradient Descent**: The function iterates over the data for a specified number of epochs. For each data point, it computes the prediction, calculates the error, and updates the weights accordingly.\n5. **Output**: The final learned parameters are rounded to four decimal places and returned as a Python list."}
{"task_id": 321, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    np.random.seed(42)\n    \n    # Define the alphabet\n    alphabet = ' ' + string.ascii_letters\n    \n    # Helper function to calculate fitness\n    def calculate_fitness(individual):\n        L = len(individual)\n        return 1 / (sum(abs(alphabet.index(individual[i]) - alphabet.index(target[i])) for i in range(L)) + 1e-6)\n    \n    # Helper function to perform crossover\n    def crossover(parent1, parent2):\n        crossover_point = np.random.randint(1, len(target))\n        child1 = parent1[:crossover_point] + parent2[crossover_point:]\n        child2 = parent2[:crossover_point] + parent1[crossover_point:]\n        return child1, child2\n    \n    # Helper function to perform mutation\n    def mutate(individual, mutation_rate):\n        mutated_individual = ''.join(\n            np.random.choice(alphabet) if np.random.rand() < mutation_rate else char\n            for char in individual\n        )\n        return mutated_individual\n    \n    # Initialize the population\n    population = [''.join(np.random.choice(alphabet) for _ in range(len(target))) for _ in range(population_size)]\n    \n    best_fitness = 0\n    best_individual = ''\n    \n    for _ in range(iterations):\n        # Evaluate fitness\n        fitness_scores = [calculate_fitness(individual) for individual in population]\n        \n        # Check if we have found the target\n        if max(fitness_scores) == 1:\n            best_index = fitness_scores.index(max(fitness_scores))\n            return population[best_index]\n        \n        # Select parents\n        parents = []\n        for _ in range(population_size // 2):\n            selected = np.random.choice(population, size=2, p=fitness_scores / sum(fitness_scores), replace=False)\n            parents.extend(selected)\n        \n        # Create new population through crossover and mutation\n        new_population = []\n        for i in range(0, len(parents), 2):\n            parent1, parent2 = parents[i], parents[i + 1]\n            child1, child2 = crossover(parent1, parent2)\n            child1 = mutate(child1, mutation_rate)\n            child2 = mutate(child2, mutation_rate)\n            new_population.extend([child1, child2])\n        \n        # Update the population\n        population = new_population\n        \n        # Track the best individual\n        current_best_index = np.argmax(fitness_scores)\n        current_best_fitness = fitness_scores[current_best_index]\n        current_best_individual = population[current_best_index]\n        \n        if current_best_fitness > best_fitness:\n            best_fitness = current_best_fitness\n            best_individual = current_best_individual\n    \n    return best_individual\n```"}
{"task_id": 322, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # Clip predicted values to avoid log(0)\n    predicted = np.clip(predicted, EPS, 1 - EPS)\n    \n    # Calculate the binary cross-entropy loss\n    bce_loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    \n    # Round the result to 4 decimal places\n    return round(bce_loss, 4)\n```\n\nThis function implements the binary cross-entropy loss as described. It clips the predicted probabilities to ensure numerical stability, computes the loss using the formula provided, and returns the mean loss rounded to four decimal places."}
{"task_id": 324, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n\n    rows, cols, channels = X.shape\n    interpolated_values = []\n\n    for xi, yi in zip(x, y):\n        # Clip coordinates to the valid range\n        xi = max(0, min(cols - 1, xi))\n        yi = max(0, min(rows - 1, yi))\n\n        # Find the four surrounding pixels\n        x1, y1 = int(xi), int(yi)\n        x2, y2 = x1 + 1, y1 + 1\n\n        # Calculate the fractional parts\n        dx = xi - x1\n        dy = yi - y1\n\n        # Perform bilinear interpolation\n        top_left = X[y1, x1]\n        top_right = X[y1, x2]\n        bottom_left = X[y2, x1]\n        bottom_right = X[y2, x2]\n\n        interpolated_pixel = (1 - dx) * ((1 - dy) * top_left + dy * bottom_left) + \\\n                           dx * ((1 - dy) * top_right + dy * bottom_right)\n\n        # Round to 4 decimal places and convert to list\n        interpolated_pixel_rounded = [round(value, 4) for value in interpolated_pixel]\n        interpolated_values.append(interpolated_pixel_rounded)\n\n    return interpolated_values\n```"}
{"task_id": 326, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    # Convert input lists to numpy arrays for vectorized operations\n    X = np.array(X)\n    support_vectors = np.array(support_vectors)\n    \n    # Determine the number of features if gamma is not provided\n    if gamma is None:\n        gamma = 1 / support_vectors.shape[1]\n    \n    # Initialize an empty list to store predictions\n    predictions = []\n    \n    # Iterate over each sample in X\n    for x in X:\n        # Compute the decision function value for the sample\n        decision_value = 0.0\n        for alpha, y_i, x_i in zip(lagr_multipliers, support_vector_labels, support_vectors):\n            if kernel == \"linear\":\n                K = np.dot(x_i, x)\n            elif kernel == \"polynomial\":\n                K = (gamma * np.dot(x_i, x) + coef) ** power\n            elif kernel == \"rbf\":\n                K = np.exp(-gamma * np.linalg.norm(x_i - x) ** 2)\n            else:\n                raise ValueError(\"Unsupported kernel type\")\n            \n            decision_value += alpha * y_i * K\n        \n        decision_value += intercept\n        \n        # Append the predicted label to the predictions list\n        predictions.append(1 if decision_value >= 0 else -1)\n    \n    return predictions\n```\n\nThis function `svm_predict` takes in the necessary parameters to compute the decision function for a given set of samples `X` using a pre-trained SVM model. It supports three types of kernels: linear, polynomial, and radial basis function (RBF). The function iterates over each sample in `X`, computes the decision value using the specified kernel, and appends the predicted label to the results list. If the decision value is exactly zero, the label 1 is returned, as per the additional requirement."}
{"task_id": 328, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []\n```\n\nThis function iterates over each word in the provided corpus. It checks if the word is non-empty and if the first character of the word is uppercase using `str.isupper()`. If such a word is found, it returns a list containing that word. If no capitalized word is found after checking all words, it returns an empty list."}
{"task_id": 329, "completion_id": 0, "completion": "Here's the implementation of the `dft_bins` function based on the provided description:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    if positive_only:\n        bins = np.arange(N // 2 + 1) * delta_f\n    else:\n        bins = np.fft.fftfreq(N, 1/fs)\n    \n    return [round(freq, 4) for freq in bins.tolist()]\n\n# Example usage:\n# print(dft_bins(8, fs=44000, positive_only=True))\n# print(dft_bins(8, fs=44000, positive_only=False))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` or `fs` is non-positive. If so, it returns an empty list.\n2. **Frequency Step Calculation**: The frequency step `delta_f` is calculated as `fs / N`.\n3. **Positive Only Mode**:\n   - If `positive_only` is `True`, it computes the frequencies for the first half of the DFT bins (including zero), which corresponds to indices from `0` to `\u230aN/2\u230b`.\n4. **Full Spectrum Mode**:\n   - If `positive_only` is `False`, it uses `np.fft.fftfreq` to generate the full list of frequencies, including both positive and negative frequencies.\n5. **Rounding**: All computed frequencies are rounded to 4 decimal places before returning them as a list.\n\nThis function should meet the requirements specified in the task description."}
{"task_id": 330, "completion_id": 0, "completion": "```python\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    # Flatten the summary_dict by merging nested \"parameters\" and \"hyperparameters\"\n    flattened_updates = summary_dict.copy()\n    if \"parameters\" in flattened_updates:\n        flattened_updates.update(flattened_updates.pop(\"parameters\"))\n    if \"hyperparameters\" in flattened_updates:\n        flattened_updates.update(flattened_updates.pop(\"hyperparameters\"))\n\n    # Create new dictionaries for parameters and hyperparameters\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n\n    # Apply updates to the new dictionaries\n    for key, value in flattened_updates.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n\n    return new_parameters, new_hyperparameters\n```\n\nThis function first flattens the `summary_dict` by merging any nested `\"parameters\"` and `\"hyperparameters\"` dictionaries into the top level. It then creates copies of the original `parameters` and `hyperparameters` dictionaries to avoid modifying them. Finally, it applies the updates from the flattened dictionary to the appropriate new dictionary based on whether the key is found in `parameters` or `hyperparameters`."}
{"task_id": 331, "completion_id": 0, "completion": "To compute the out-of-bag mean squared error (OOB-MSE) for a Random Forest regressor, we need to follow these steps:\n\n1. Identify the samples that have at least one out-of-bag (OOB) prediction.\n2. For each of these samples, compute the average of their OOB predictions.\n3. Calculate the squared error between the true value and the average OOB prediction for each sample.\n4. Compute the mean of these squared errors.\n5. If no sample has an OOB prediction, return -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Find samples with at least one OOB prediction\n    oob_samples = np.any(oob_mask, axis=1)\n\n    # If no sample has an OOB prediction, return -1\n    if not np.any(oob_samples):\n        return -1\n\n    # Calculate the average OOB prediction for each sample\n    oob_predictions = np.where(oob_mask, predictions, np.nan)\n    oob_averages = np.nanmean(oob_predictions, axis=1)\n\n    # Compute the squared errors for the OOB samples\n    squared_errors = (y_true[oob_samples] - oob_averages[oob_samples]) ** 2\n\n    # Calculate the mean squared error\n    oob_mse_value = np.mean(squared_errors)\n\n    # Return the OOB MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\n### Explanation:\n- **Step 1:** We convert the input lists to numpy arrays for easier manipulation.\n- **Step 2:** We identify the samples that have at least one OOB prediction using `np.any(oob_mask, axis=1)`.\n- **Step 3:** If no sample has an OOB prediction, we return `-1`.\n- **Step 4:** We calculate the average OOB prediction for each sample using `np.where` to filter out non-OOB predictions and `np.nanmean` to compute the mean while ignoring NaNs.\n- **Step 5:** We compute the squared errors for the samples with OOB predictions.\n- **Step 6:** We calculate the mean of these squared errors to get the OOB-MSE.\n- **Step 7:** Finally, we return the OOB-MSE rounded to 4 decimal places."}
{"task_id": 332, "completion_id": 0, "completion": "To construct an FP-Tree without using classes, we can follow the outlined steps. Here's a complete implementation:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    \n    # Step 1: Compute the support for each item\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(set(transaction))\n    \n    # Step 2: Filter out items with support less than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Sort items by decreasing support, then alphabetically\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Filter and sort items in the transaction\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: -sorted_items.index(x))\n        \n        # Walk through the tree and update nodes\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 1, \"children\": {}}\n            else:\n                current_node[\"children\"][item][\"support\"] += 1\n            current_node = current_node[\"children\"][item]\n    \n    return root\n\n# Example usage:\ntransactions = [\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\"],\n    [\"a\", \"c\"],\n    [\"b\", \"c\"],\n    [\"a\", \"b\", \"c\"]\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n\n1. **Item Support Calculation**: We use `Counter` to count the occurrences of each item across all transactions.\n\n2. **Filtering Frequent Items**: We create a dictionary `frequent_items` that only includes items with support greater than or equal to `min_support`.\n\n3. **Sorting Items**: We sort the frequent items first by their support in descending order and then alphabetically to resolve ties.\n\n4. **Building the FP-Tree**:\n   - We initialize the root node with a support of 0 and an empty children dictionary.\n   - For each transaction, we filter out infrequent items and sort the remaining items according to the global ordering.\n   - We traverse the tree, updating the support of each node and adding new nodes as necessary.\n\nThis implementation constructs the FP-Tree as a nested dictionary structure, adhering to the specified requirements."}
{"task_id": 333, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float = 0.1, num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    \n    # Step 1: Standardize the features\n    mean = X.mean(axis=0)\n    std = X.std(axis=0)\n    X_standardized = (X - mean) / (std + 1e-8)\n    \n    # Step 2: Augment the feature matrix with a bias column\n    X_augmented = np.hstack([np.ones((X.shape[0], 1)), X_standardized])\n    \n    # Step 3: Initialize parameters\n    theta = np.zeros(X_augmented.shape[1])\n    \n    # Step 4: Gradient Descent\n    m = X_augmented.shape[0]\n    for _ in range(num_iter):\n        # Compute the hypothesis\n        z = np.dot(X_augmented, theta)\n        h_theta = 1 / (1 + np.exp(-z))\n        \n        # Compute the gradient\n        gradient = np.dot(X_augmented.T, (h_theta - y)) / m\n        \n        # Update the parameters\n        theta -= alpha * gradient\n    \n    # Step 5: Predict the class labels\n    z = np.dot(X_augmented, theta)\n    h_theta = 1 / (1 + np.exp(-z))\n    predictions = (h_theta >= 0.5).astype(int)\n    \n    # Return the predictions as a list\n    return predictions.tolist()\n```\n\nThis implementation follows the steps outlined in the task description. It standardizes the features, augments the feature matrix with a bias term, initializes the parameters, performs batch gradient descent, and finally predicts the class labels. The predictions are returned as a standard Python list."}
{"task_id": 334, "completion_id": 0, "completion": "```python\nimport math\n\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n    \n    model_dim_term = math.pow(model_dim, -0.5)\n    warmup_term = math.pow(warmup_steps, -1.5)\n    \n    if step < warmup_steps:\n        lr = scale_factor * model_dim_term * step * warmup_term\n    else:\n        lr = scale_factor * model_dim_term * math.pow(step, -0.5)\n    \n    return round(lr, 9)\n```\n\nThis implementation follows the Noam learning-rate schedule as described. It calculates the learning rate based on the given step, model dimension, scale factor, and warmup steps. The learning rate is rounded to 9 decimal places before being returned."}
{"task_id": 335, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    name = name.lower()\n\n    if name == \"zeros\":\n        return lambda shape, scale=1.0: np.zeros(shape)\n    \n    elif name == \"ones\":\n        return lambda shape, scale=1.0: np.ones(shape) * scale\n    \n    elif name == \"normal\":\n        return lambda shape, scale=1.0: np.random.normal(loc=0.0, scale=scale, size=shape)\n    \n    elif name == \"glorot_uniform\":\n        return lambda shape, scale=1.0: (\n            np.random.uniform(\n                low=-scale * np.sqrt(6 / (shape[0] + shape[1])),\n                high=scale * np.sqrt(6 / (shape[0] + shape[1])),\n                size=shape\n            )\n            if len(shape) == 2 else\n            raise ValueError(\"Glorot uniform initialization is only supported for two-dimensional shapes.\")\n        )\n    \n    else:\n        raise ValueError(f\"Unsupported initialization strategy: {name}\")\n\n# Example usage:\n# initializer = get_initializer(\"zeros\")\n# print(initializer((3, 4)))\n```\n\nThis code defines the `get_initializer` function, which returns a callable based on the specified initialization strategy. The callable initializes a NumPy array of the given shape according to the chosen strategy. The function handles different initialization methods such as \"zeros\", \"ones\", \"normal\", and \"glorot_uniform\", and raises a `ValueError` if an unsupported strategy is provided."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check for compatible shapes\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result back to a list of lists\n    return K_rounded.tolist()\n```\n\nThis function first checks if the input vectors `X` and `Y` are provided as NumPy arrays, converting them if necessary. It then checks if the number of columns in `X` and `Y` are the same. If not, it returns `-1`. Otherwise, it computes the linear kernel matrix using the dot product and adds the constant `c0`. Finally, it rounds the results to four decimal places and converts the NumPy array back to a list of lists before returning it."}
{"task_id": 337, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    if not x or not y:\n        return []\n\n    in_rows, in_cols, _ = X.shape\n    interpolated_pixels = []\n\n    for xi, yi in zip(x, y):\n        # Step 1: Round to the nearest integer using banker's rounding\n        rounded_x = int(np.around(xi))\n        rounded_y = int(np.around(yi))\n        \n        # Step 2: Clip the indices to be within the image bounds\n        clipped_x = max(0, min(rounded_x, in_cols - 1))\n        clipped_y = max(0, min(rounded_y, in_rows - 1))\n        \n        # Step 3: Fetch the pixel value at the clipped coordinates\n        pixel_value = X[clipped_y, clipped_x].tolist()\n        interpolated_pixels.append(pixel_value)\n\n    return interpolated_pixels\n```\n\nThis function performs nearest-neighbour interpolation on a 2-D image represented by a 3-D NumPy array. It rounds the input coordinates to the nearest integer using banker's rounding, clips them to ensure they are within the valid range of the image, and then fetches the corresponding pixel values. The results are returned as a Python list."}
{"task_id": 338, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"Computes the closed-form solution for Ridge Regression.\"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Add a column of ones to X for the intercept term\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Get the number of features including the intercept\n    n_features = X_b.shape[1]\n    \n    # Create the identity matrix of size (n_features x n_features)\n    I = np.eye(n_features)\n    \n    # Compute the Ridge Regression weights using the closed-form formula\n    w = np.linalg.inv(X_b.T @ X_b + reg_factor * I) @ X_b.T @ y\n    \n    # Round the weights to 4 decimal places\n    w_rounded = np.round(w, 4)\n    \n    # Return the weights as a list\n    return w_rounded.tolist()\n```\n\nThis function takes in a feature matrix `X`, a target vector `y`, and a regularization factor `reg_factor`. It adds a bias term to `X`, computes the Ridge Regression weights using the closed-form formula, rounds each coefficient to four decimal places, and returns the weights as a list."}
{"task_id": 339, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    \n    # Count the frequency of each element in y\n    frequency = Counter(y)\n    \n    # Find the maximum frequency\n    max_freq = max(frequency.values())\n    \n    # Iterate over y to find the first element with the maximum frequency\n    for label in y:\n        if frequency[label] == max_freq:\n            return label\n```\n\nThis function first checks if the input list `y` is empty and returns `None` if it is. It then uses the `Counter` class from the `collections` module to count the frequency of each element in the list. After determining the maximum frequency, it iterates over the list `y` again to find the first element that has this maximum frequency, ensuring that the element whose first appearance is earliest is returned in case of a tie."}
{"task_id": 340, "completion_id": 0, "completion": "To implement the single optimization step of the Adam algorithm, we need to follow the given update rules for the moments \\( m \\) and \\( v \\), and then use these to compute the updated parameter \\( \\theta' \\). Here's how you can do it:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Bias correction for the first moment estimate\n    m_hat_t = m_t / (1 - (beta1 ** t))\n    \n    # Bias correction for the second moment estimate\n    v_hat_t = v_t / (1 - (beta2 ** t))\n    \n    # Update the parameter\n    param_new = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Return the updated parameter and new moments, rounded to 8 decimal places\n    return (\n        [round(float(x), 8) for x in param_new.flatten()],\n        [round(float(x), 8) for x in m_t.flatten()],\n        [round(float(x), 8) for x in v_t.flatten()]\n    )\n```\n\n### Explanation:\n1. **First Moment Update (\\( m_t \\))**: This is computed using the running average of the gradients.\n2. **Second Moment Update (\\( v_t \\))**: This is computed using the running average of the squared gradients.\n3. **Bias Correction**: Since the initial moments are biased towards zero, we correct them by dividing by \\( 1 - \\beta_1^t \\) and \\( 1 - \\beta_2^t \\).\n4. **Parameter Update (\\( \\theta' \\))**: The parameter is updated using the corrected moments and the learning rate.\n\n### Notes:\n- The function returns the updated parameter and the new moments as lists, each element rounded to 8 decimal places.\n- The function handles multi-dimensional parameters by using NumPy operations, which are vectorized and efficient.\n\nThis implementation should meet the requirements specified in the task description."}
{"task_id": 342, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    \n    distance = sum(abs(a - b) for a, b in zip(x, y))\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3]\n# y = [4, 5, 6]\n# print(manhattan(x, y))  # Output: 9.0\n```\n\nThis function checks if the input vectors `x` and `y` have the same length. If they do not, it returns `-1`. Otherwise, it computes the Manhattan distance by summing the absolute differences of corresponding elements in the vectors and returns the result rounded to four decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the Cross-Entropy Method (CEM) parameter update, we need to follow these steps:\n\n1. **Sort the Samples**: Sort the parameter vectors (`theta_samples`) based on their corresponding rewards in descending order.\n2. **Select Top Samples**: Retain only the top `retain_prcnt` fraction of the sorted samples.\n3. **Compute Mean and Variance**: Calculate the mean and variance of the retained samples across each dimension.\n4. **Round the Results**: Round the computed mean and variance to four decimal places.\n\nHere's the implementation of the `cross_entropy_update` function:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Step 1: Sort the samples based on rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_samples = theta_samples[sorted_indices]\n    \n    # Step 2: Retain the top retain_prcnt fraction of samples\n    num_retain = int(retain_prcnt * len(sorted_samples))\n    elite_samples = sorted_samples[:num_retain]\n    \n    # Step 3: Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Step 4: Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\n### Explanation:\n\n- **Sorting**: We use `np.argsort(rewards)[::-1]` to get the indices that would sort the rewards in descending order. We then use these indices to sort the `theta_samples`.\n- **Retention**: We calculate the number of samples to retain using `int(retain_prcnt * len(sorted_samples))` and slice the sorted samples to get the elite samples.\n- **Mean and Variance**: We compute the mean and variance of the elite samples using `np.mean` and `np.var` respectively.\n- **Rounding**: We round the mean and variance values to four decimal places using a list comprehension.\n\nThis function will correctly update the parameter distribution based on the Cross-Entropy Method, retaining the best-performing samples and computing the new mean and variance for the next iteration."}
{"task_id": 344, "completion_id": 0, "completion": "```python\nimport heapq\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, frequency, token=\"\"):\n        self.frequency = frequency\n        self.token = token\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        # Compare nodes based on frequency, then by token for deterministic behavior\n        if self.frequency == other.frequency:\n            return self.token < other.token\n        return self.frequency < other.frequency\n\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n\n    # Calculate frequency of each token\n    frequency_dict = defaultdict(int)\n    for token in tokens:\n        frequency_dict[token] += 1\n\n    # Handle the case where there's only one unique token\n    if len(frequency_dict) == 1:\n        return {next(iter(frequency_dict)): \"0\"}\n\n    # Create a priority queue (min-heap) and insert all nodes\n    heap = [Node(freq, token) for token, freq in frequency_dict.items()]\n    heapq.heapify(heap)\n\n    # Build the Huffman tree\n    while len(heap) > 1:\n        left = heapq.heappop(heap)\n        right = heapq.heappop(heap)\n        merged = Node(left.frequency + right.frequency, \"\")\n        merged.left = left\n        merged.right = right\n        heapq.heappush(heap, merged)\n\n    # Generate Huffman codes\n    def generate_codes(node, current_code, codes):\n        if node is None:\n            return\n        if node.token:\n            codes[node.token] = current_code\n        generate_codes(node.left, current_code + \"0\", codes)\n        generate_codes(node.right, current_code + \"1\", codes)\n\n    root = heap[0]\n    codes = {}\n    generate_codes(root, \"\", codes)\n\n    return codes\n```\n\nThis implementation follows the steps outlined in the task description:\n\n1. **Frequency Calculation**: We first calculate the frequency of each token using a `defaultdict`.\n\n2. **Single Token Case**: If there's only one unique token, we directly return a dictionary mapping that token to \"0\".\n\n3. **Min-Heap Construction**: We create a min-heap using `heapq` to store nodes. Each node is initialized with a frequency and a token. The heap is ordered by frequency, and for nodes with the same frequency, by the lexical order of the token.\n\n4. **Huffman Tree Construction**: We repeatedly pop the two nodes with the smallest frequencies from the heap, merge them into a new parent node, and push this parent node back into the heap. This process continues until only one node remains, which is the root of the Huffman tree.\n\n5. **Code Generation**: We traverse the Huffman tree from the root to each leaf node, generating binary codes by appending '0' for left edges and '1' for right edges. The resulting codes are stored in a dictionary.\n\nThis implementation ensures that the generated Huffman codes are prefix-free and consist only of the characters '0' and '1'."}
{"task_id": 345, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    # Add intercept to training and test data\n    X_train_intercept = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_intercept = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Compute the posterior mean of the weight vector\n    X_train_T = X_train_intercept.T\n    S_n = X_train_T @ X_train_intercept + omega0\n    m_n = np.linalg.inv(S_n) @ (X_train_T @ y_train + omega0 @ mu0)\n\n    # Predictions for test data\n    predictions = X_test_intercept @ m_n\n\n    # Round predictions to four decimals and convert to list\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3]])\n# y_train = np.array([3, 5])\n# X_test = np.array([[3, 4]])\n# mu0 = np.array([0, 0, 0])\n# omega0 = np.eye(3)\n# predictions = bayesian_linear_regression_predict(X_train, y_train, X_test, mu0, omega0)\n# print(predictions)\n```\n\nThis implementation follows the steps outlined in the task description. It adds an intercept to both the training and test datasets, computes the posterior mean of the weight vector using the given formula, and returns the predictions for the test set rounded to four decimal places."}
{"task_id": 346, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    # Convert the input to a NumPy array for easier manipulation\n    y = np.array(y)\n    \n    # Calculate the frequency of each unique label\n    unique_labels, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities\n    probabilities = counts / len(y)\n    \n    # Calculate the entropy\n    entropy_value = -np.sum(probabilities * np.log2(probabilities))\n    \n    # Return the entropy rounded to 4 decimal places\n    return round(entropy_value, 4)\n```\n\nThis function calculates the Shannon entropy for a given set of class labels. It first converts the input into a NumPy array to facilitate operations. Then, it computes the frequency of each unique label, calculates the probabilities, and finally computes the entropy using the formula provided. The result is rounded to four decimal places before being returned."}
{"task_id": 347, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == \"G\":\n        # Generator loss\n        loss = -np.mean(Y_fake)\n    elif module == \"C\":\n        # Check if Y_real and gradInterp are provided\n        if Y_real is None or gradInterp is None:\n            raise ValueError(\"Y_real and gradInterp must be provided for critic loss.\")\n        \n        # Critic loss\n        loss_real = np.mean(Y_real)\n        loss_fake = np.mean(Y_fake)\n        \n        # Calculate the gradient penalty\n        gradNorms = np.linalg.norm(gradInterp, axis=1)\n        gradient_penalty = np.mean((gradNorms - 1)**2)\n        \n        loss += lambda_ * gradient_penalty\n    else:\n        raise ValueError(\"Invalid module. Use 'C' for critic or 'G' for generator.\")\n    \n    return round(loss, 4)\n```\n\nThis implementation defines the `wgan_gp_loss` function, which calculates the WGAN-GP loss for either the critic or the generator based on the provided arguments. The function checks for the necessary inputs when computing the critic loss and raises a `ValueError` if they are not provided. The losses are computed and returned rounded to four decimal places."}
{"task_id": 348, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if X.shape[0] != X.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric\n    if not np.allclose(X, X.T, atol=1e-8):\n        return False\n    \n    # Compute the eigenvalues of the symmetric matrix\n    eigenvalues = np.linalg.eigvalsh(X)\n    \n    # Check if all eigenvalues are greater than 1e-8\n    if np.any(eigenvalues <= 1e-8):\n        return False\n    \n    return True\n\n# Example usage:\n# X = np.array([[2, -1], [-1, 2]])\n# print(is_symmetric_positive_definite(X))  # Should return True\n```\n\nThis function first checks if the input matrix is square. Then, it verifies the symmetry of the matrix using `np.allclose` with a specified tolerance. If the matrix is symmetric, it computes the eigenvalues using `np.linalg.eigvalsh`, which is optimized for symmetric matrices. Finally, it checks if all eigenvalues are greater than a small threshold (`1e-8`) to confirm positive definiteness."}
{"task_id": 350, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_ridge_regression(X: list[float | int],\n                                y: list[float | int],\n                                degree: int,\n                                reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Build the design matrix\n    n_samples = len(X)\n    X_poly = np.ones((n_samples, degree + 1))\n    for i in range(1, degree + 1):\n        X_poly[:, i] = X ** i\n    \n    # Add regularization term to the diagonal of X_poly.T @ X_poly\n    I = np.eye(degree + 1)\n    regularization_term = reg_factor * I\n    \n    # Compute the closed-form solution for the weights\n    weights = np.linalg.inv(X_poly.T @ X_poly + regularization_term) @ X_poly.T @ y\n    \n    # Round the weights to 4 decimal places\n    weights_rounded = np.round(weights, 4)\n    \n    return weights_rounded.tolist()\n\n# Example usage:\n# X = [1, 2, 3, 4]\n# y = [2, 4, 6, 8]\n# degree = 2\n# reg_factor = 0.1\n# print(polynomial_ridge_regression(X, y, degree, reg_factor))\n```\n\nThis function implements polynomial ridge regression using the closed-form solution. It constructs the design matrix by expanding the input features to the specified degree, adds the regularization term to the diagonal of the Gram matrix, and then solves for the weights using matrix inversion. The resulting weights are rounded to four decimal places before being returned."}
{"task_id": 351, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    \n    # Calculate output dimensions\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    \n    # Initialize the output array\n    pooled = np.zeros((N, C, out_h, out_w))\n    \n    # Perform max pooling\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * stride\n                    h_end = h_start + p_h\n                    w_start = j * stride\n                    w_end = w_start + p_w\n                    pooled[n, c, i, j] = np.max(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Convert the result to a list and return\n    return pooled.tolist()\n```\n\nThis function implements the 2-D max-pooling operation as described. It iterates over each image in the batch and each channel, then over each possible pooling window position, extracts the window, computes the maximum value, and stores it in the output array. Finally, it converts the output array to a list and returns it."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the entropy\n    H = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        H -= probability * math.log2(probability)\n    \n    return round(H, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'c', 'a', 'b']\n# print(entropy(labels))  # Output should be 1.37095\n```\n\nThis function calculates the Shannon entropy of a given set of class labels. It first checks if the input is empty and returns 0.0 if it is. Then, it uses the `Counter` from the `collections` module to count the occurrences of each label. The entropy is computed by iterating over these counts, calculating the probability of each label, and applying the entropy formula. Finally, the result is rounded to five decimal places before being returned."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the im2col + GEMM strategy, we need to follow these steps:\n\n1. **Padding**: Apply the specified padding to the input images.\n2. **Im2Col**: Convert the padded images into a column format.\n3. **GEMM**: Perform matrix multiplication between the columnized images and the reshaped kernels.\n4. **Reshape**: Reshape the result back to the desired output shape.\n5. **Convert to List**: Convert the final NumPy array to a Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    # Unpack dimensions\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, str) and pad == 'same':\n        pad_top = dilation * (kernel_rows - 1) // 2\n        pad_bottom = dilation * (kernel_rows - 1) // 2\n        pad_left = dilation * (kernel_cols - 1) // 2\n        pad_right = dilation * (kernel_cols - 1) // 2\n        pad = (pad_top, pad_bottom, pad_left, pad_right)\n    \n    pad_top, pad_bottom, pad_left, pad_right = pad\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad_top + pad_bottom - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - dilation * (kernel_cols - 1) - 1) // stride + 1\n    \n    # Im2Col\n    i0 = np.repeat(np.arange(kernel_rows, dtype=np.int64), kernel_cols)\n    i0 = np.tile(i0 * dilation, (out_ch, in_ch, out_rows, out_cols))\n    i1 = stride * np.repeat(np.arange(out_rows, dtype=np.int64), out_cols)\n    i1 = np.tile(i1, (out_ch, in_ch, kernel_rows * kernel_cols))\n    i2 = stride * np.tile(np.arange(out_cols, dtype=np.int64), (out_ch, in_ch, kernel_rows * kernel_cols))\n    i = i0 + i1 + i2\n    j = np.repeat(np.arange(in_ch, dtype=np.int64), kernel_rows * kernel_cols * out_rows * out_cols).reshape((out_ch, in_ch, kernel_rows * kernel_cols, out_rows * out_cols))\n    k = np.repeat(np.arange(kernel_rows * kernel_cols, dtype=np.int64), out_rows * out_cols).reshape((1, 1, kernel_rows * kernel_cols, out_rows * out_cols)).repeat(out_ch, axis=0)\n    X_col = X_padded[:, i, j, k].reshape((n_ex, -1, out_rows * out_cols))\n    \n    # Reshape weights for GEMM\n    W_col = W.reshape((out_ch, -1))\n    \n    # GEMM\n    Y_col = np.matmul(W_col, X_col)\n    \n    # Reshape to output dimensions\n    Y = Y_col.reshape((n_ex, out_ch, out_rows, out_cols)).transpose(0, 2, 3, 1)\n    \n    # Convert to list\n    return Y.tolist()\n\n# Example usage:\n# X = np.random.rand(1, 32, 32, 3)\n# W = np.random.rand(3, 3, 3, 16)\n# result = conv2D(X, W, stride=1, pad='same')\n# print(result)\n```\n\nThis implementation follows the steps outlined above, ensuring that all operations are performed using NumPy only. The function handles different padding specifications and computes the convolution efficiently using the im2col + GEMM approach."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean_centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions\n    if solver == \"svd\":\n        U, S, Vt = np.linalg.svd(mean_centered_data, full_matrices=False)\n        directions = Vt.T\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(mean_centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        directions = directions[:, ::-1]  # Reverse to get descending order\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Sort the directions in descending order of their importance\n    # For SVD, the eigenvalues are the squares of the singular values\n    if solver == \"svd\":\n        eigenvalues = S ** 2\n    \n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    directions = directions[:, sorted_indices]\n    \n    # Step 4: Keep the first n_components of them\n    if n_components > directions.shape[1]:\n        n_components = directions.shape[1]\n    \n    directions = directions[:, :n_components]\n    \n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(directions.shape[1]):\n        if directions[:, i].nonzero()[0].size > 0:\n            first_non_zero_index = directions[:, i].nonzero()[0][0]\n            if directions[first_non_zero_index, i] < 0:\n                directions[:, i] *= -1\n    \n    # Step 6: Project the centred data onto the retained directions\n    scores = np.dot(mean_centered_data, directions)\n    \n    # Step 7: Calculate explained variance ratio\n    total_variance = np.sum(eigenvalues)\n    explained_variance = eigenvalues[:n_components]\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Round the final results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "To complete the `leaf_predict` function, we need to handle two cases based on whether the tree is a classification tree or a regression tree:\n\n1. **Classification Tree**: If `classifier` is `True`, the leaf contains an array of class membership probabilities. We need to return the index of the class with the highest probability. In case of a tie, `numpy.argmax` will resolve it by returning the smallest index.\n\n2. **Regression Tree**: If `classifier` is `False`, the leaf contains a scalar value representing the mean of the target values that fell into that region. We simply return this scalar value.\n\nHere's the implementation of the `leaf_predict` function:\n\n```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n```\n\n### Explanation:\n- **Classification Case**: We use `np.argmax(leaf.value)` to find the index of the highest probability in the list of class probabilities. This function automatically handles ties by returning the smallest index.\n- **Regression Case**: We simply return `leaf.value`, which is the scalar mean of the target values for that leaf node.\n\nThis function will correctly handle both classification and regression tasks based on the `classifier` flag."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0).reshape(1, -1)\n        return [centroid[0].tolist()]\n\n    # Initialize centroids with the first K samples\n    centroids = data[:K]\n\n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if len(data[labels == k]) > 0 else centroids[k]\n                                 for k in range(K)])\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n\n        centroids = new_centroids\n\n    # Sort centroids lexicographically\n    centroids = np.sort(centroids, axis=0)\n\n    # Round to four decimals and convert to list of lists\n    return [centroid.tolist() for centroid in centroids]\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis implementation of the K-Means clustering algorithm initializes the centroids with the first K samples, iteratively assigns samples to the nearest centroid, updates the centroids, and checks for convergence. The final centroids are sorted lexicographically and rounded to four decimal places before being returned as a list of lists."}
{"task_id": 358, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    # Check if the lengths of the two sequences are the same\n    if len(y_true) != len(y_pred):\n        return -1\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate the total number of predictions\n    total_predictions = len(y_true)\n    \n    # Calculate the accuracy\n    acc = correct_predictions / total_predictions\n    \n    # Return the accuracy rounded to four decimal places\n    return round(acc, 4)\n```\n\nThis function first checks if the input sequences `y_true` and `y_pred` have the same length. If they do not, it returns `-1`. If they do, it calculates the number of correct predictions by comparing each element in the sequences. It then computes the accuracy as the ratio of correct predictions to the total number of predictions and returns this value rounded to four decimal places."}
{"task_id": 359, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    # Add a small epsilon to avoid log(0)\n    eps = np.finfo(float).eps\n    y_pred_safe = y_pred + eps\n    \n    if not derivative:\n        # Compute the cross-entropy loss\n        loss = -np.sum(y * np.log(y_pred_safe))\n        return round(loss, 4)\n    else:\n        # Compute the gradient of the cross-entropy loss with respect to y_pred\n        gradient = (y_pred - y).tolist()\n        return [[round(val, 4) for val in row] for row in gradient]\n\n# Example usage:\n# y = np.array([[1, 0], [0, 1]])\n# y_pred = np.array([[0.7, 0.3], [0.2, 0.8]])\n# print(cross_entropy(y, y_pred))  # Should print the loss\n# print(cross_entropy(y, y_pred, derivative=True))  # Should print the gradient\n```\n\nThis implementation of the `cross_entropy` function computes the cross-entropy loss and its gradient as specified. The loss is calculated using the formula provided, and the gradient is computed as the difference between the predicted probabilities and the one-hot encoded true labels. Both the loss and the gradient are rounded to four decimal places as required."}
{"task_id": 360, "completion_id": 0, "completion": "Here's the implementation of the one-dimensional Discrete Cosine Transform of type II (DCT-II) in Python:\n\n```python\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    x = np.array(frame)\n    N = len(x)\n    \n    # Initialize the coefficients array\n    c = np.zeros(N)\n    \n    # Compute the DCT-II coefficients\n    for k in range(N):\n        sum_val = 0.0\n        for n in range(N):\n            sum_val += x[n] * np.cos(np.pi * k * (2 * n + 1) / (2 * N))\n        c[k] = 2 * sum_val\n    \n    # Apply orthonormal scaling if required\n    if orthonormal:\n        c[0] *= np.sqrt(1 / (4 * N))\n        c[1:] *= np.sqrt(1 / (2 * N))\n    \n    # Round the coefficients to 4 decimal places and convert to list\n    return np.round(c, 4).tolist()\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts either a NumPy array or a list of floats. It converts the input to a NumPy array if necessary.\n2. **DCT-II Calculation**: The function iterates over each coefficient \\( c_k \\) using the DCT-II formula. For each \\( k \\), it calculates the sum involving the cosine term and multiplies by 2.\n3. **Orthonormal Scaling**: If the `orthonormal` flag is set to `True`, the coefficients are scaled according to the orthonormalization rules:\n   - \\( c_0 \\) is scaled by \\( 2\\sqrt{\\frac{1}{4N}} \\).\n   - \\( c_k \\) for \\( k \\geq 1 \\) is scaled by \\( 2\\sqrt{\\frac{1}{2N}} \\).\n4. **Output**: The coefficients are rounded to four decimal places and returned as a Python list.\n\nThis implementation ensures that the DCT-II is computed correctly and optionally scaled for orthonormality, adhering to the constraints provided."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by dividing by its sum\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round the result to 4 decimal places\n    rounded_matrix = np.round(normalized_matrix, 4)\n    \n    # Convert the result back to a list of lists\n    return rounded_matrix.tolist()\n```\n\nThis function first converts the input data into a NumPy array of floats. It then calculates the sum of each row and checks if any row sum is zero, returning `-1` if so. Otherwise, it normalizes each row by dividing its elements by the row sum and rounds the results to four decimal places before converting the matrix back to a list of lists for the final output."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def check_continuous(space: Space, is_tuple: bool) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Discrete):\n            return False\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            if is_tuple:\n                return all(check_continuous(sub_space, True) for sub_space in space.spaces.values() if isinstance(space, Dict) else space.spaces)\n            else:\n                return False\n        else:\n            raise ValueError(f\"Unknown space type: {type(space)}\")\n    \n    cont_action = check_continuous(env.action_space, tuple_action)\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n```\n\nThis implementation defines a helper function `check_continuous` that recursively checks whether a given space is continuous based on the provided flags. The main function `is_continuous` uses this helper to determine the continuity of both the action and observation spaces and returns the results as a tuple."}
{"task_id": 364, "completion_id": 0, "completion": "```python\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n```"}
{"task_id": 366, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    # Calculate the difference matrix\n    diff_matrix = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    \n    # Compute the squared Euclidean distance\n    squared_diff = diff_matrix ** 2\n    \n    # Sum over the feature axis to get the distance matrix\n    distance_matrix = np.sum(squared_diff, axis=2)\n    \n    # Clamp negative values to 0 due to numerical precision errors\n    distance_matrix = np.maximum(distance_matrix, 0.0)\n    \n    # Ensure diagonal elements are exactly 0.0\n    np.fill_diagonal(distance_matrix, 0.0)\n    \n    # Convert the result to a list of lists\n    return distance_matrix.tolist()\n```\n\nThis function uses NumPy's broadcasting and vectorized operations to compute the pair-wise squared Euclidean distance matrix efficiently. It ensures that the diagonal elements are exactly zero and clamps any negative values resulting from numerical precision errors to zero. The result is returned as a list of lists of floats."}
{"task_id": 367, "completion_id": 0, "completion": "```python\nimport re\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get(\"hyperparameters\", {})\n        self.params.update({k: v for k, v in hp.items() if k != \"id\"})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {\"hyperparameters\": {\"id\": self.__class__.__name__, **self.params}}\n\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    \n    if isinstance(param, KernelBase):\n        return param\n    \n    if isinstance(param, str):\n        param = param.strip()\n        if param.lower() == \"linear\":\n            return LinearKernel()\n        \n        match = re.match(r'([a-zA-Z]+)\\(([^)]*)\\)', param)\n        if match:\n            kernel_name, args_str = match.groups()\n            kernel_name = kernel_name.capitalize()\n            \n            if kernel_name not in [\"LinearKernel\", \"PolynomialKernel\", \"RBFKernel\"]:\n                raise NotImplementedError(f\"Unknown kernel: {kernel_name}\")\n            \n            if not args_str:\n                return globals()[kernel_name]()\n            \n            args_dict = {}\n            for arg in args_str.split(','):\n                key, value = arg.split('=')\n                key = key.strip()\n                value = value.strip()\n                \n                try:\n                    value = eval(value)\n                except Exception as e:\n                    raise ValueError(f\"Invalid value for argument '{key}': {value}\") from e\n                \n                args_dict[key] = value\n            \n            return globals()[kernel_name](**args_dict)\n        \n        raise ValueError(f\"Invalid string representation of kernel: {param}\")\n    \n    if isinstance(param, dict):\n        if \"hyperparameters\" not in param:\n            raise ValueError(\"Dictionary must contain 'hyperparameters' key.\")\n        \n        hyperparams = param[\"hyperparameters\"]\n        if \"id\" not in hyperparams:\n            raise ValueError(\"'hyperparameters' dictionary must contain 'id' key.\")\n        \n        kernel_id = hyperparams[\"id\"].capitalize()\n        \n        if kernel_id not in [\"LinearKernel\", \"PolynomialKernel\", \"RBFKernel\"]:\n            raise NotImplementedError(f\"Unknown kernel: {kernel_id}\")\n        \n        del hyperparams[\"id\"]\n        return globals()[kernel_id](**hyperparams)\n    \n    raise TypeError(f\"Unsupported type for kernel initialization: {type(param)}\")\n```"}
{"task_id": 368, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or \u20111 when\n               input validation fails.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Validate that x and y have the same shape\n    if x.shape != y.shape:\n        return -1\n    \n    # Validate that p is strictly positive\n    if p <= 0:\n        return -1\n    \n    # Calculate the Minkowski distance\n    distance = np.sum(np.abs(x - y) ** p) ** (1 / p)\n    \n    # Round the result to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3]\n# y = [4, 5, 6]\n# p = 2\n# print(minkowski(x, y, p))  # Output should be 5.1962\n```\n\nThis implementation checks for the correct input shapes and ensures that `p` is positive. It then computes the Minkowski distance using NumPy operations and rounds the result to four decimal places before returning it."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the outputs of the trees\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        # Return the running prediction rounded to 4 decimals for regression\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities for classification\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        # Return the predicted class labels\n        return np.argmax(probabilities, axis=1)\n```\n\nThis function follows the specified requirements and correctly handles both regression and classification tasks using NumPy operations. The use of vectorization ensures that the function is efficient and avoids explicit Python loops over individual samples."}
{"task_id": 370, "completion_id": 0, "completion": "To implement the multivariate Gaussian density function, we need to follow these steps:\n\n1. Calculate the determinant of the covariance matrix `cov`.\n2. Compute the inverse of the covariance matrix `cov`.\n3. For each sample in `X`, compute the exponent term \\((x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\).\n4. Use the formula for the multivariate Gaussian density to compute the density for each sample.\n5. Round the results to 4 decimal places and return them as a list.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"\n    Computes the multivariate Gaussian density for each sample in X.\n\n    Parameters:\n    X (np.ndarray): A 2-D NumPy array of shape (m, n) where each row is an n-dimensional sample.\n    mu (np.ndarray): A 1-D array of length n containing the mean of the distribution.\n    cov (np.ndarray): An n\u00d7n positive-definite covariance matrix.\n\n    Returns:\n    list[float]: The density values of every sample in X under \ud835\udca9(\u03bc,\u03a3), rounded to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    densities = []\n    \n    for i in range(m):\n        x = X[i]\n        diff = x - mu\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        density = (1 / ((2 * np.pi) ** (n / 2) * det_cov ** 0.5)) * np.exp(exponent)\n        densities.append(round(density, 4))\n    \n    return densities\n```\n\n### Explanation:\n\n- **Determinant and Inverse**: We use `np.linalg.det` to get the determinant of the covariance matrix and `np.linalg.inv` to get its inverse.\n- **Exponent Calculation**: For each sample \\( x \\), we compute \\((x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\) using matrix multiplication.\n- **Density Calculation**: We plug the exponent into the Gaussian density formula.\n- **Rounding**: Each computed density is rounded to 4 decimal places before being added to the result list.\n\nThis function will correctly compute the multivariate Gaussian density for each sample in the input array `X`."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D convolution with the specified features, we need to handle several aspects:\n\n1. **Padding**: We need to handle different types of padding:\n   - A single integer for symmetric padding.\n   - A 2-tuple for asymmetric padding.\n   - The string \"same\" which calculates padding based on the output size.\n\n2. **Dilation**: This involves inserting zeros between the kernel elements.\n\n3. **Stride**: This determines how much the kernel moves across the input signal.\n\n4. **Multiple Channels**: Both the input and output can have multiple channels, which means we need to perform the convolution for each channel pair.\n\n5. **Batch Processing**: The input can have multiple examples, and we need to process each example separately.\n\nHere's the implementation of the `conv1D` function:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width considering dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Determine padding\n    if isinstance(pad, str) and pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Invalid padding type\")\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Initialize output\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform the convolution\n    for n in range(n_examples):\n        for o in range(out_channels):\n            for i in range(in_channels):\n                for j in range(output_length):\n                    start_idx = j * stride\n                    end_idx = start_idx + effective_kernel_width\n                    kernel_slice = W[:, i, o][::dilation+1]\n                    signal_slice = X_padded[n, start_idx:end_idx, i]\n                    output[n, j, o] += np.sum(kernel_slice * signal_slice)\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(10, 100, 3)  # 10 examples, 100 signal length, 3 input channels\n# W = np.random.rand(5, 3, 2)     # 5 kernel width, 3 input channels, 2 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n# print(result)\n```\n\n### Explanation:\n- **Padding Calculation**: If `pad` is \"same\", we calculate the total padding needed to ensure the output length matches the input length divided by the stride, rounded up.\n- **Effective Kernel Width**: This accounts for the dilation by inserting zeros between kernel elements.\n- **Convolution Loop**: We iterate over each example, output channel, input channel, and output position to compute the dot product of the kernel slice and the corresponding signal slice.\n- **Output**: The result is converted to a list using `tolist()` before returning."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef gini(y: Union[list[int], \"np.ndarray\"]) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert the input to a NumPy array for easier manipulation\n    y = np.array(y)\n    \n    # Calculate the frequency of each class\n    unique_classes, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the result rounded to 4 decimal places\n    return round(gini_impurity, 4)\n```\n\nThis function first checks if the input list or array is empty and returns `0.0` if it is. It then calculates the frequency of each class in the input, computes the Gini impurity using the formula provided, and returns the result rounded to four decimal places."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X @ theta + b\n        \n        # Compute gradients\n        dw = (2 / m) * X.T @ (y_pred - y)\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = [round(w, 4) for w in theta]\n    b_rounded = round(b, 4)\n    \n    return theta_rounded, b_rounded\n```\n\nThis function initializes the weights and bias, checks for consistency in the input data, and performs batch gradient descent to minimize the mean-squared error. The learned parameters are then rounded to four decimal places before being returned."}
{"task_id": 375, "completion_id": 0, "completion": "To solve the problem of computing the necessary padding for a \"same\" 2-D convolution, we need to follow these steps:\n\n1. **Calculate the effective filter size**: Given the kernel size and dilation factor, compute the effective filter size.\n2. **Determine the required padding**: Using the effective filter size, stride, and desired output dimensions, calculate the required padding on each side of the input tensor.\n3. **Ensure non-negative padding**: If the calculated padding is negative, raise a `ValueError` since it's not possible to achieve the desired output size.\n4. **Adjust for odd padding**: If the total padding is odd, ensure that the extra pixel is added to the bottom or right side, as per TensorFlow's behavior.\n\nHere's the implementation of the `calc_pad_dims_2D` function:\n\n```python\nimport numpy as np\n\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X_shape\n    out_rows, out_cols = out_dim\n    fr, fc = kernel_shape\n    \n    # Calculate effective filter size\n    _fr = fr * (dilation + 1) - dilation\n    _fc = fc * (dilation + 1) - dilation\n    \n    # Calculate required padding\n    pad_height = max(0, (out_rows - 1) * stride + _fr - in_rows)\n    pad_width = max(0, (out_cols - 1) * stride + _fc - in_cols)\n    \n    # Calculate top/bottom and left/right padding\n    top_pad = pad_height // 2\n    bottom_pad = pad_height - top_pad\n    left_pad = pad_width // 2\n    right_pad = pad_width - left_pad\n    \n    # Check if padding is valid\n    if pad_height < 0 or pad_width < 0:\n        raise ValueError(\"Requested output size is impossible with the given parameters.\")\n    \n    return (top_pad, bottom_pad, left_pad, right_pad)\n```\n\n### Explanation:\n\n1. **Effective Filter Size Calculation**:\n   - The effective filter size `_fr` and `_fc` are calculated using the formula:\n     \\[\n     _fr = fr \\cdot (dilation + 1) - dilation\n     \\]\n     \\[\n     _fc = fc \\cdot (dilation + 1) - dilation\n     \\]\n\n2. **Padding Calculation**:\n   - The required padding in height (`pad_height`) and width (`pad_width`) is calculated using:\n     \\[\n     pad\\_height = \\max(0, (out\\_rows - 1) \\cdot stride + _fr - in\\_rows)\n     \\]\n     \\[\n     pad\\_width = \\max(0, (out\\_cols - 1) \\cdot stride + _fc - in\\_cols)\n     \\]\n\n3. **Top/Bottom and Left/Right Padding**:\n   - The padding is split evenly between the top and bottom, and left and right. If the total padding is odd, the extra pixel is added to the bottom or right side.\n\n4. **Validation**:\n   - If either `pad_height` or `pad_width` is negative, a `ValueError` is raised, indicating that the requested output size is impossible with the given parameters.\n\nThis function ensures that the input tensor is padded correctly to achieve the desired output size for a 2-D convolution with the specified kernel, stride, and dilation."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Use NumPy's allclose to check if the matrix is equal to its transpose\n    return np.allclose(X_np, X_np.T)\n\n# Example usage:\n# matrix = [\n#     [1, 2, 3],\n#     [2, 5, 6],\n#     [3, 6, 9]\n# ]\n# print(is_symmetric(matrix))  # Output: True\n```\n\nThis function first checks if the input matrix is square by comparing the number of rows and columns. If it is not square, it returns `False`. Then, it uses NumPy's `allclose` function to determine if the matrix is equal to its transpose, allowing for small numerical differences due to floating-point arithmetic."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n\n    Returns:\n    list: A list of negative gradients g rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n\n    # Convert labels to {-1, 1}\n    y_prime = np.array([2 * label - 1 for label in y])\n    f_array = np.array(f)\n\n    # Calculate the negative gradient\n    gradient = y_prime / (1 + np.exp(y_prime * f_array))\n\n    # Round the results to 4 decimal places\n    return [round(g, 4) for g in gradient.tolist()]\n\n# Example usage:\n# y = [0, 1, 1, 0]\n# f = [0.1, 0.8, -0.5, 0.3]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis function first checks if all labels in the input list `y` are either 0 or 1. If not, it returns -1. Otherwise, it converts the labels to the set {-1, 1} and calculates the negative gradient of the logistic loss. The results are then rounded to four decimal places and returned as a list."}
{"task_id": 378, "completion_id": 0, "completion": "```python\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0\n```"}
{"task_id": 379, "completion_id": 0, "completion": "To solve this problem, we need to sort a list of nodes based on their `priority` and `entry_id` fields. The sorting should follow these rules:\n\n1. Nodes with a smaller `priority` value should come before nodes with a larger `priority` value.\n2. If two nodes have the same `priority`, the node with the smaller `entry_id` should come first.\n\nGiven these rules, we can use Python's built-in sorting capabilities to achieve this. Specifically, we can use the `sorted()` function with a custom sorting key.\n\nHere's how you can implement the `sort_priority_nodes` function:\n\n```python\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # Sort the nodes using a tuple (priority, entry_id) as the key\n    sorted_nodes = sorted(nodes, key=lambda node: (node['priority'], node['entry_id']))\n    \n    # Extract the 'key' from each sorted node and return as a list\n    return [node['key'] for node in sorted_nodes]\n```\n\n### Explanation:\n\n1. **Sorting Key**: We use a lambda function to create a sorting key for each node. The key is a tuple `(node['priority'], node['entry_id'])`. This ensures that the primary sorting criterion is `priority`, and the secondary criterion (in case of ties) is `entry_id`.\n\n2. **Sorting**: The `sorted()` function sorts the list of nodes based on the specified key. By default, `sorted()` sorts in ascending order, which aligns with our requirements (smaller `priority` and `entry_id` come first).\n\n3. **Extracting Keys**: After sorting, we use a list comprehension to extract the `key` field from each node in the sorted list.\n\n4. **Return**: Finally, we return the list of keys.\n\nThis approach ensures that the nodes are sorted correctly according to the given rules, and it does not modify the original input list."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function along with its first and second derivatives, we need to follow the mathematical definitions provided. Here's how you can do it:\n\n1. **SELU Function**: This is a scaled version of the ELU function.\n2. **First Derivative**: Compute the derivative of the SELU function.\n3. **Second Derivative**: Compute the second derivative of the SELU function.\n\nLet's implement this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array\n    x = np.array(x)\n    \n    if order == 0:\n        # SELU function\n        result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\nprint(selu([1, -1, 0], 0))  # SELU values\nprint(selu([1, -1, 0], 1))  # First derivatives\nprint(selu([1, -1, 0], 2))  # Second derivatives\n```\n\n### Explanation:\n- **SELU Function**: For `x > 0`, `SELU(x) = scale * x`. For `x <= 0`, `SELU(x) = scale * alpha * (exp(x) - 1)`.\n- **First Derivative**: For `x > 0`, the derivative is `scale * 1`. For `x <= 0`, the derivative is `scale * alpha * exp(x)`.\n- **Second Derivative**: For `x > 0`, the derivative is `0` (since the derivative of a constant is zero). For `x <= 0`, the derivative is `scale * alpha * exp(x)`.\n\nThis implementation handles both scalar and array inputs and returns the results rounded to four decimal places."}
{"task_id": 382, "completion_id": 0, "completion": "To implement the Gaussian Naive Bayes algorithm in a single function, we need to follow these steps:\n\n1. **Calculate the prior probabilities** for each class.\n2. **Compute the mean and variance** for each feature in each class.\n3. **Predict the class** for each sample in the test set using the Gaussian likelihood and the naive assumption.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    \n    # Step 1: Calculate prior probabilities\n    unique_classes, class_counts = np.unique(y_train, return_counts=True)\n    prior_probabilities = {c: count / len(y_train) for c, count in zip(unique_classes, class_counts)}\n    \n    # Step 2: Calculate mean and variance for each feature in each class\n    means = {}\n    variances = {}\n    \n    for c in unique_classes:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0)\n    \n    # Step 3: Predict the class for each sample in the test set\n    predictions = []\n    \n    for x in X_test:\n        posteriors = {}\n        for c in unique_classes:\n            prior = prior_probabilities[c]\n            likelihood = 1.0\n            epsilon = 1e-4\n            for i in range(len(x)):\n                mean = means[c][i]\n                variance = variances[c][i]\n                likelihood *= (1 / math.sqrt(2 * math.pi * variance + epsilon)) * \\\n                               math.exp(-(x[i] - mean) ** 2 / (2 * variance + epsilon))\n            posterior = prior * likelihood\n            posteriors[c] = posterior\n        \n        # Assign the class with the highest posterior probability\n        predicted_class = max(posteriors, key=posteriors.get)\n        predictions.append(predicted_class)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Prior Probabilities**: We calculate the prior probability for each class by dividing the number of samples in that class by the total number of samples.\n\n2. **Mean and Variance**: For each class, we compute the mean and variance of each feature. This is done by filtering the training data for each class and then applying `np.mean` and `np.var`.\n\n3. **Prediction**: For each sample in the test set, we calculate the posterior probability for each class using the Gaussian likelihood formula. The sample is assigned to the class with the highest posterior probability.\n\nThis implementation ensures that the predictions are returned as a regular Python list, following the constraints provided."}
{"task_id": 383, "completion_id": 0, "completion": "```python\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    \n    return [round(L, 4), round(H, 4)]\n```"}
{"task_id": 384, "completion_id": 0, "completion": "To solve this problem, we need to compute the eigenvectors corresponding to the smallest eigenvalues of a given Laplacian matrix \\( L \\). Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Check the Validity of \\( k \\)**: Ensure that \\( k \\) is not larger than the size of the matrix \\( L \\). If it is, return \\(-1\\).\n\n2. **Compute Eigenvalues and Eigenvectors**: Use a numerical library like NumPy to compute the eigenvalues and eigenvectors of the matrix \\( L \\).\n\n3. **Select the Smallest Eigenvalues and Their Corresponding Eigenvectors**: Sort the eigenvalues and select the smallest \\( k \\) eigenvalues. Retrieve the corresponding eigenvectors.\n\n4. **Normalize the Eigenvectors**: Ensure each eigenvector is normalized to have unit length.\n\n5. **Adjust Signs**: Flip each eigenvector so that the first non-zero entry is positive.\n\n6. **Round the Results**: Round each entry of the resulting eigenvectors to 4 decimal places.\n\n7. **Convert to List**: Convert the final NumPy array to a regular Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef get_eigvecs(L: list[list[int | float]], k: int) -> list[list[float]] | int:\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    # Convert the input list to a NumPy array\n    L = np.array(L)\n    \n    # Check if k is valid\n    n = L.shape[0]\n    if k > n:\n        return -1\n    \n    # Compute eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    \n    # Select the smallest k eigenvalues and their corresponding eigenvectors\n    smallest_indices = np.argsort(eigenvalues)[:k]\n    selected_eigenvectors = eigenvectors[:, smallest_indices]\n    \n    # Normalize each eigenvector to unit length\n    norms = np.linalg.norm(selected_eigenvectors, axis=0)\n    selected_eigenvectors /= norms\n    \n    # Adjust signs to ensure the first non-zero entry is positive\n    for i in range(k):\n        if selected_eigenvectors[0, i] < 0:\n            selected_eigenvectors[:, i] *= -1\n    \n    # Round each entry to 4 decimal places\n    selected_eigenvectors = np.round(selected_eigenvectors, 4)\n    \n    # Convert to a regular Python list\n    return selected_eigenvectors.tolist()\n\n# Example usage\nL = [[1, -1], [-1, 1]]\nk = 1\nprint(get_eigvecs(L, k))  # Output: [[0.7071], [0.7071]]\n```\n\n### Explanation:\n- **`np.linalg.eigh`**: This function is used to compute the eigenvalues and eigenvectors of a symmetric matrix efficiently.\n- **Normalization**: We normalize each eigenvector using its Euclidean norm (`np.linalg.norm`).\n- **Sign Adjustment**: We ensure the first non-zero element of each eigenvector is positive by checking the sign of the first element and flipping the entire vector if necessary.\n- **Rounding**: We use `np.round` to round each element to 4 decimal places before converting the result to a list.\n\nThis solution ensures that all requirements are met and provides the correct output format."}
{"task_id": 385, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Transforms the input dataset using Linear Discriminant Analysis (LDA) to project it onto the first k LDA components.\"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of samples and features\n    n_samples, n_features = X.shape\n    \n    # Number of classes\n    classes = np.unique(y)\n    c = len(classes)\n    \n    # If k is larger than c-1, use c-1 instead\n    k = min(k, c - 1)\n    \n    # Compute the overall mean\n    overall_mean = np.mean(X, axis=0)\n    \n    # Initialize within-class scatter matrix Sw and between-class scatter matrix Sb\n    Sw = np.zeros((n_features, n_features))\n    Sb = np.zeros((n_features, n_features))\n    \n    # Compute within-class scatter matrix Sw\n    for cls in classes:\n        X_c = X[y == cls]\n        mean_c = np.mean(X_c, axis=0)\n        Sw += np.dot((X_c - mean_c).T, (X_c - mean_c))\n    \n    # Compute between-class scatter matrix Sb\n    for cls in classes:\n        mean_c = np.mean(X[y == cls], axis=0)\n        n_c = X[y == cls].shape[0]\n        Sb += n_c * np.dot((mean_c - overall_mean).reshape(n_features, 1), (mean_c - overall_mean).reshape(1, n_features))\n    \n    # Solve the generalized eigenvalue problem S_w^-1 * S_b * w = lambda * w\n    # Use the Moore-Penrose pseudo-inverse if Sw is singular\n    eigvals, eigvecs = np.linalg.eig(np.linalg.pinv(Sw) @ Sb)\n    \n    # Sort the eigenvectors by descending eigenvalues\n    idx = eigvals.argsort()[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n    \n    # Pick the first k eigenvectors\n    W = eigvecs[:, :k]\n    \n    # Normalize each eigenvector to unit length\n    W = W / np.linalg.norm(W, axis=0)\n    \n    # Ensure the first element of every eigenvector is non-negative\n    for i in range(k):\n        if W[0, i] < 0:\n            W[:, i] *= -1\n    \n    # Project the data onto the LDA components\n    X_lda = np.dot(X, W)\n    \n    # Round to 4 decimal places and convert to a standard Python list\n    X_lda_rounded = np.round(X_lda, 4).tolist()\n    \n    return X_lda_rounded\n```"}
{"task_id": 386, "completion_id": 0, "completion": "Here's the implementation of the `binary_crossentropy` function as described:\n\n```python\nimport numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions to avoid log(0)\n    epsilon = 1e-15\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the BCE loss\n    bce_loss = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    \n    # Return the result rounded to 4 decimal places\n    return round(bce_loss, 4)\n```\n\n### Explanation:\n1. **Clipping Predictions**: The predictions `y_pred` are clipped to the interval `[epsilon, 1 - epsilon]` to ensure that we do not take the logarithm of zero, which would result in undefined behavior or numerical instability.\n\n2. **Computing BCE Loss**: The Binary Cross-Entropy loss is computed using the formula:\n   \\[\n   \\text{BCE}(\\mathbf y,\\hat{\\mathbf y})\\;=\\;-\\frac1n\\sum\\_{i=1}^{n}\\bigl[y\\_i\\,\\log(\\hat y\\_i)+(1-y\\_i)\\,\\log(1-\\hat y\\_i)\\bigr]\n   \\]\n   This is done element-wise for each sample and then averaged over all samples.\n\n3. **Rounding**: The final result is rounded to 4 decimal places to meet the output constraints."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the targets\n    predictions = np.full_like(y, y.mean())\n    \n    # Sort the data by x values\n    sorted_indices = np.argsort(x)\n    x_sorted = x[sorted_indices]\n    y_sorted = y[sorted_indices]\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_sorted - predictions[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        min_error = np.inf\n        \n        # Evaluate every possible split\n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] != x_sorted[i - 1]:  # Ensure different consecutive x values\n                t = (x_sorted[i] + x_sorted[i - 1]) / 2\n                left_residuals = residuals[x_sorted <= t]\n                right_residuals = residuals[x_sorted > t]\n                \n                # Calculate the sum of squared errors for this split\n                error = np.sum(left_residuals**2) + np.sum(right_residuals**2)\n                \n                if error < min_error:\n                    min_error = error\n                    best_split = t\n        \n        # If no valid split found, use the global mean residual\n        if best_split is None:\n            stump_predictions = np.full_like(residuals, residuals.mean())\n        else:\n            stump_predictions = np.where(x_sorted <= best_split, residuals[x_sorted <= best_split].mean(), residuals[x_sorted > best_split].mean())\n        \n        # Update predictions\n        predictions += learning_rate * stump_predictions\n    \n    # Round the final predictions to 4 decimal places and convert to a list\n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the described procedure for training a 1-D gradient boosting regressor using decision stumps. It iteratively computes residuals, finds the best split point, and updates the predictions based on the stump's output. The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 389, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    # Convert input to a NumPy array for easier manipulation\n    W = np.array(W)\n    \n    # Check if the matrix is square\n    if W.shape[0] != W.shape[1]:\n        return -1\n    \n    # Compute the degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Compute the Laplacian matrix L\n    L = D - W\n    \n    # Round the result to 4 decimal places and convert to a list of lists\n    return np.round(L, 4).tolist()\n\n# Example usage:\n# W = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]\n# print(compute_laplacian(W))\n```\n\nThis function first checks if the input matrix is square. If not, it returns `-1`. Otherwise, it computes the degree matrix by summing the rows of the adjacency matrix and placing these sums on the diagonal of a new matrix. It then calculates the Laplacian matrix by subtracting the adjacency matrix from the degree matrix. Finally, it rounds the resulting matrix to four decimal places and converts it to a list of lists before returning it."}
{"task_id": 391, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    # Round each query position to the nearest integer using NumPy's around\n    rounded_indices = np.round(t).astype(int)\n    \n    # Clip the indices to ensure they lie within the valid range [0, in_length-1]\n    clipped_indices = np.clip(rounded_indices, 0, X.shape[0] - 1)\n    \n    # Use advanced indexing to select the corresponding samples from X\n    interpolated_samples = X[clipped_indices]\n    \n    # Convert the result to a standard Python list\n    return interpolated_samples.tolist()\n```\n\nThis function performs nearest-neighbour interpolation on a 1-D multi-channel signal. It rounds each query position to the nearest integer index, clips the indices to ensure they are within the valid range, and then selects the corresponding samples from the input array `X`. Finally, it converts the result to a standard Python list and returns it."}
{"task_id": 392, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef preemphasis(x: \"list[float] | np.ndarray\", alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    # Ensure the input is a 1-D array\n    if isinstance(x, np.ndarray):\n        x = x.flatten()\n    else:\n        x = np.array(x).flatten()\n\n    # Initialize the filtered signal\n    filtered_signal = np.zeros_like(x, dtype=float)\n\n    # Apply the pre-emphasis filter\n    filtered_signal[0] = x[0]\n    for t in range(1, len(x)):\n        filtered_signal[t] = x[t] - alpha * x[t - 1]\n\n    # Round to four decimal places and convert to a list\n    return [round(value, 4) for value in filtered_signal]\n\n# Example usage:\n# signal = [1.0, 2.0, 3.0, 4.0, 5.0]\n# alpha = 0.97\n# print(preemphasis(signal, alpha))\n```\n\nThis function takes a 1-D signal and a pre-emphasis coefficient, applies the pre-emphasis filter, and returns the filtered signal as a list with each element rounded to four decimal places. The function handles both Python lists and NumPy arrays as input, ensuring the signal is flattened before processing."}
{"task_id": 394, "completion_id": 0, "completion": "Here's the implementation of the RMSprop update step in Python:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of squared gradients\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-8)\n    \n    # Round and convert to lists\n    w_next_rounded = [round(x, 4) for x in w_next.flatten()]\n    Eg_next_rounded = [round(x, 4) for x in Eg.flatten()]\n    \n    return w_next_rounded, Eg_next_rounded\n```\n\n### Explanation:\n1. **Initialization**: If `Eg` is `None`, we initialize it as a zero array with the same shape as the gradient `grad`.\n2. **Update Running Average**: We compute the new running average of squared gradients using the formula provided.\n3. **Parameter Update**: We update the parameters `w` using the RMSprop update rule.\n4. **Rounding and Conversion**: Both the updated parameters and the new running average are rounded to 4 decimal places and converted to regular Python lists before returning.\n\nThis function will correctly perform one update step of the RMSprop optimizer, adhering to the constraints provided."}
{"task_id": 395, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    return f\"**************************************************\\nBeta:\\n{str(beta)}\\nProbability of sequence: {b_prob}\"\n```"}
{"task_id": 396, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x_array = np.array(x)\n    \n    # Compute tanh(x)\n    tanh_x = np.tanh(x_array)\n    \n    # Compute the first derivative of tanh(x)\n    first_derivative = 1 - tanh_x**2\n    \n    # Compute the second derivative of tanh(x)\n    second_derivative = -2 * tanh_x * first_derivative\n    \n    # Round all results to 6 decimal places and convert to lists\n    tanh_x_rounded = [round(val, 6) for val in tanh_x]\n    first_derivative_rounded = [round(val, 6) for val in first_derivative]\n    second_derivative_rounded = [round(val, 6) for val in second_derivative]\n    \n    # Return the results as a list of lists\n    return [tanh_x_rounded, first_derivative_rounded, second_derivative_rounded]\n\n# Example usage:\n# result = tanh_with_derivatives([0, 1, 2])\n# print(result)\n```\n\nThis function computes the hyperbolic tangent (tanh) and its first and second derivatives for each element in the input list or NumPy array `x`. The results are rounded to six decimal places and returned as a list of three lists."}
{"task_id": 397, "completion_id": 0, "completion": "To generate a random one-hot encoded design matrix, we can follow these steps:\n\n1. **Initialize an Empty Matrix**: Start by creating an empty matrix of shape `(n_examples, n_classes)` filled with zeros.\n2. **Random Index Selection**: For each row, randomly select an index between 0 and `n_classes - 1`.\n3. **Set the Selected Index to 1**: For each selected index, set the corresponding element in the matrix to 1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    if n_examples == 0:\n        return np.empty((0, n_classes))\n    \n    # Create an empty matrix of shape (n_examples, n_classes) filled with zeros\n    one_hot_matrix = np.zeros((n_examples, n_classes))\n    \n    # Randomly select indices for each row\n    random_indices = np.random.randint(0, n_classes, size=n_examples)\n    \n    # Set the selected indices to 1\n    one_hot_matrix[np.arange(n_examples), random_indices] = 1\n    \n    return one_hot_matrix\n\n# Example usage\nnp.random.seed(0)\nprint(random_one_hot_matrix(5, 3))\n```\n\n### Explanation:\n- **Initialization**: We initialize an empty matrix `one_hot_matrix` with zeros using `np.zeros((n_examples, n_classes))`.\n- **Random Index Generation**: We use `np.random.randint(0, n_classes, size=n_examples)` to generate random indices for each row.\n- **Setting Elements to 1**: We use advanced indexing `one_hot_matrix[np.arange(n_examples), random_indices] = 1` to set the elements at the selected indices to 1.\n\nThis approach ensures that each row contains exactly one 1 and all other elements are 0, satisfying the one-hot encoding requirement."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array for efficient computation\n    x = np.array(x)\n    \n    # Compute ELU activation\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        result = np.where(x >= 0, 1, result + alpha)\n    \n    # Round the result to 4 decimal places and convert to list\n    return [round(val, 4) for val in result]\n\n# Example usage:\n# print(elu([1, -1, 2, -2], alpha=0.1))  # Activation\n# print(elu([1, -1, 2, -2], alpha=0.1, derivative=True))  # Gradient\n```\n\nThis function `elu` computes either the ELU activation or its gradient based on the input parameters. It uses NumPy for efficient computation and handles both positive and negative inputs according to the ELU definition. The results are rounded to four decimal places before being returned as a Python list."}
{"task_id": 399, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    # Check if both X and Y are 2D arrays\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    \n    # Check if both X and Y have the same number of columns\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the pairwise Euclidean distances\n    D = np.sqrt(np.sum((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) ** 2, axis=2))\n    \n    # Round the distances to four decimal places and convert to a list of lists\n    D_rounded = np.round(D, 4).tolist()\n    \n    return D_rounded\n```\n\nThis function first checks if the input arrays `X` and `Y` are both 2D and have the same number of columns. If these conditions are not met, it returns `-1`. Otherwise, it computes the pairwise Euclidean distances using broadcasting and vectorized operations, rounds the results to four decimal places, and converts the resulting NumPy array to a list of lists before returning it."}
{"task_id": 400, "completion_id": 0, "completion": "To implement the Gaussian Cumulative Distribution Function (CDF), we need to handle two cases based on the variance:\n\n1. **Non-zero Variance**: Use the error function (`erf`) to compute the CDF.\n2. **Zero Variance**: Handle the point mass at the mean.\n\nHere's the complete implementation:\n\n```python\nimport math\nfrom scipy.special import erf\n\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance == 0:\n        if x < mean:\n            return 0.0\n        elif x == mean:\n            return 0.5\n        else:\n            return 1.0\n    else:\n        std_dev = math.sqrt(variance)\n        z = (x - mean) / (std_dev * math.sqrt(2))\n        cdf_value = 0.5 * (1 + erf(z))\n        return round(cdf_value, 6)\n\n# Example usage:\n# print(gaussian_cdf(0, 0, 1))  # Should return 0.5\n# print(gaussian_cdf(1, 0, 1))  # Should return 0.841345\n# print(gaussian_cdf(0, 0, 0))  # Should return 0.5\n```\n\n### Explanation:\n\n- **Zero Variance Case**: \n  - If \\( x < \\mu \\), the probability is 0 because all the mass is concentrated at \\( \\mu \\).\n  - If \\( x = \\mu \\), the probability is 0.5 because half of the mass is on each side of \\( \\mu \\).\n  - If \\( x > \\mu \\), the probability is 1 because all the mass is concentrated at \\( \\mu \\).\n\n- **Non-zero Variance Case**:\n  - Compute the standard deviation \\( \\sigma \\) as the square root of the variance.\n  - Standardize the variable \\( x \\) to a standard normal variable \\( z \\) using the formula \\( z = \\frac{x - \\mu}{\\sigma \\sqrt{2}} \\).\n  - Use the error function `erf` from the `scipy.special` module to compute the CDF.\n  - Round the result to six decimal places before returning it.\n\nThis implementation ensures that the function handles both cases correctly and returns the probability rounded to six decimal places."}
{"task_id": 401, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    if y.ndim == 2 and y.shape[1] > 1 and np.allclose(np.sum(y, axis=1), 1):\n        # y is already one-hot encoded\n        return y.astype(float)\n\n    # Ensure y is 1-D\n    if y.ndim == 2:\n        y = y.flatten()\n\n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n\n    # Create the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=float)\n    one_hot_matrix[np.arange(y.size), y] = 1.0\n\n    return one_hot_matrix\n```\n\nThis function first checks if the input array `y` is already one-hot encoded by verifying if it is a 2-D array with more than one column and if each row sums to 1. If so, it returns a copy of `y` with dtype `float`.\n\nIf `y` is not already one-hot encoded, the function flattens it to ensure it is 1-D, determines the number of classes either from the maximum value in `y` or from the `num_classes` parameter, and then constructs the one-hot encoded matrix using NumPy's advanced indexing. The resulting matrix is returned as a `float` array containing only 0.0 and 1.0."}
{"task_id": 402, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float = 1e-6) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    # Number of training samples and features\n    N_train, M = X_train.shape\n    # Unique classes in the training set\n    classes = np.unique(y_train)\n    # Number of classes\n    K = len(classes)\n    \n    # Calculate class priors\n    class_priors = np.array([np.mean(y_train == c) for c in classes])\n    \n    # Initialize means and variances\n    means = np.zeros((K, M))\n    variances = np.zeros((K, M))\n    \n    # Estimate means and variances for each class\n    for i, c in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[i] = np.mean(X_c, axis=0)\n        variances[i] = np.var(X_c, axis=0) + eps\n    \n    # Function to calculate the log likelihood of a single feature given a class\n    def log_likelihood(x, mean, variance):\n        return -0.5 * (np.log(2 * np.pi * variance) + (x - mean)**2 / variance)\n    \n    # Predict labels for each test sample\n    predictions = []\n    for x in X_test:\n        log_posteriors = np.zeros(K)\n        for i, c in enumerate(classes):\n            # Sum of log likelihoods for all features\n            log_likelihoods = log_likelihood(x, means[i], variances[i])\n            log_posteriors[i] = np.sum(log_likelihoods) + np.log(class_priors[i])\n        # Predict the class with the highest log posterior\n        predicted_class = classes[np.argmax(log_posteriors)]\n        predictions.append(predicted_class)\n    \n    return np.array(predictions)\n```"}
{"task_id": 405, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport re\n\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    \n    if param is None or param.lower() == \"identity\":\n        result = x\n    elif param.lower() == \"relu\":\n        result = np.maximum(0, x)\n    elif param.lower() == \"tanh\":\n        result = np.tanh(x)\n    elif param.lower() == \"sigmoid\":\n        result = 1 / (1 + np.exp(-x))\n    elif param.lower().startswith(\"leaky relu\"):\n        match = re.search(r'leaky relu\\(alpha=([0-9.]+)\\)', param, re.IGNORECASE)\n        alpha = float(match.group(1)) if match else 0.01\n        result = np.where(x > 0, x, alpha * x)\n    elif param.lower().startswith(\"affine\"):\n        match = re.search(r'affine\\(slope=([0-9.]+), intercept=([0-9.]+)\\)', param, re.IGNORECASE)\n        slope = float(match.group(1))\n        intercept = float(match.group(2))\n        result = slope * x + intercept\n    else:\n        raise ValueError(f\"Unknown activation: {param}\")\n    \n    return np.round(result, 6).tolist()\n```\n\nThis implementation defines the `apply_activation` function, which applies various activation functions to an input vector `x` based on the `param` argument. The function handles different activation types, including identity, ReLU, tanh, sigmoid, Leaky ReLU, and affine transformations. It also includes error handling for unknown activation types and ensures that the results are rounded to six decimal places before being returned as a Python list."}
{"task_id": 406, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: \"np.ndarray\", y_train: \"np.ndarray\", X_test: \"np.ndarray\", k: int = 5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute the Euclidean distance from the test sample to all training samples\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        \n        # Get the indices of the k smallest distances\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n        \n        # Count the occurrences of each label and find the most common one\n        # In case of a tie, np.argmax will return the smallest label\n        predicted_label = np.argmax(np.bincount(nearest_labels))\n        \n        # Append the predicted label to the list\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis implementation follows the detailed steps provided in the task description. It calculates the Euclidean distance between each test sample and all training samples, selects the `k` nearest neighbors, and then uses majority voting to predict the class label for each test sample. The `np.bincount` function is used to count the occurrences of each label, and `np.argmax` is used to determine the most common label, handling ties by selecting the smallest label value."}
{"task_id": 410, "completion_id": 0, "completion": "To implement the `parse_activation` function, we need to handle different cases based on the input string format. We'll use regular expressions to match the patterns and extract the necessary parameters. Here's how you can implement this:\n\n```python\nimport re\n\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # Define regex patterns for each activation function\n    patterns = {\n        \"ReLU\": r\"^ReLU$\",\n        \"Sigmoid\": r\"^Sigmoid$\",\n        \"Tanh\": r\"^Tanh$\",\n        \"Affine\": r\"^Affine\\(slope=(-?\\d+(\\.\\d+)?), intercept=(-?\\d+(\\.\\d+)?)\\)$\",\n        \"Leaky ReLU\": r\"^Leaky ReLU\\(alpha=(-?\\d+(\\.\\d+)?)\\)$\"\n    }\n    \n    # Check each pattern\n    for act_type, pattern in patterns.items():\n        match = re.match(pattern, act_str)\n        if match:\n            result = {\"type\": act_type}\n            if act_type == \"Affine\":\n                result[\"slope\"] = float(match.group(1))\n                result[\"intercept\"] = float(match.group(3))\n            elif act_type == \"Leaky ReLU\":\n                result[\"alpha\"] = float(match.group(1))\n            return result\n    \n    # If no pattern matches, return -1\n    return -1\n\n# Example usage:\nprint(parse_activation(\"ReLU\"))  # {'type': 'ReLU'}\nprint(parse_activation(\"Affine(slope=2.5, intercept=-1)\"))  # {'type': 'Affine', 'slope': 2.5, 'intercept': -1.0}\nprint(parse_activation(\"Leaky ReLU(alpha=0.1)\"))  # {'type': 'Leaky ReLU', 'alpha': 0.1}\nprint(parse_activation(\"InvalidActivation\"))  # -1\n```\n\n### Explanation:\n1. **Regex Patterns**:\n   - `ReLU`, `Sigmoid`, and `Tanh` are straightforward and just need to match their exact string.\n   - `Affine` and `Leaky ReLU` require capturing groups to extract the numeric parameters (`slope`, `intercept`, and `alpha`).\n\n2. **Matching and Extraction**:\n   - For each activation type, we check if the input string matches the corresponding regex pattern.\n   - If a match is found, we construct a dictionary with the activation type and any extracted parameters converted to floats.\n\n3. **Return Value**:\n   - If the input string matches any valid pattern, the function returns the constructed dictionary.\n   - If no pattern matches, the function returns `-1`.\n\nThis implementation ensures that the function correctly parses the input string and handles both simple and parameterized activation functions."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def compute_stats(data_list):\n        # Check if any element is a tuple/list/array\n        tuple_data = any(isinstance(item, (list, tuple, np.ndarray)) for item in data_list)\n        \n        # Flatten the data if it's multi-dimensional\n        if tuple_data:\n            flattened_data = [item for sublist in data_list for item in sublist]\n        else:\n            flattened_data = data_list\n        \n        # Check for multidimensionality\n        multidim_data = tuple_data and len(data_list[0]) > 1\n        \n        # Check for continuous data\n        continuous_data = any(isinstance(item, float) and not item.is_integer() for item in flattened_data)\n        \n        # Get unique values and their counts per dimension\n        unique_values_per_dim = []\n        if multidim_data:\n            for dim in zip(*data_list):\n                unique_values_per_dim.append(len(set(dim)))\n        else:\n            unique_values_per_dim.append(len(set(flattened_data)))\n        \n        # Get sorted unique values per dimension\n        unique_ids_per_dim = []\n        if multidim_data:\n            for dim in zip(*data_list):\n                unique_ids_per_dim.append(sorted(set(dim)))\n        else:\n            unique_ids_per_dim.append(sorted(set(flattened_data)))\n        \n        return {\n            'tuple_data': tuple_data,\n            'multidim_data': multidim_data,\n            'continuous_data': continuous_data,\n            'n_per_dim': unique_values_per_dim,\n            'dim': len(data_list[0]) if multidim_data else 1,\n            'ids': unique_ids_per_dim\n        }\n    \n    actions_stats = compute_stats(actions)\n    observations_stats = compute_stats(observations)\n    \n    return {\n        'tuple_actions': actions_stats['tuple_data'],\n        'tuple_observations': observations_stats['tuple_data'],\n        'multidim_actions': actions_stats['multidim_data'],\n        'multidim_observations': observations_stats['multidim_data'],\n        'continuous_actions': actions_stats['continuous_data'],\n        'continuous_observations': observations_stats['continuous_data'],\n        'n_actions_per_dim': actions_stats['n_per_dim'],\n        'action_dim': actions_stats['dim'],\n        'n_obs_per_dim': observations_stats['n_per_dim'],\n        'obs_dim': observations_stats['dim'],\n        'action_ids': actions_stats['ids'],\n        'obs_ids': observations_stats['ids']\n    }\n```\n\nThis function `env_stats` computes various statistics about the given actions and observations, including whether they are multi-dimensional, whether they contain continuous values, and the unique values in each dimension. The function uses helper logic to determine these properties and returns them in a structured dictionary."}
{"task_id": 412, "completion_id": 0, "completion": "```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    \n    def accuracy(y_true, y_pred):\n        correct = sum(1 for t, p in zip(y_true, y_pred) if t == p)\n        total = len(y_true)\n        return round(correct / total, 4)\n\n    def precision(y_true, y_pred):\n        tp = sum(1 for t, p in zip(y_true, y_pred) if t == 1 and p == 1)\n        fp = sum(1 for t, p in zip(y_true, y_pred) if t == 0 and p == 1)\n        if tp + fp == 0:\n            return 0.0\n        return round(tp / (tp + fp), 4)\n\n    def recall(y_true, y_pred):\n        tp = sum(1 for t, p in zip(y_true, y_pred) if t == 1 and p == 1)\n        fn = sum(1 for t, p in zip(y_true, y_pred) if t == 1 and p == 0)\n        if tp + fn == 0:\n            return 0.0\n        return round(tp / (tp + fn), 4)\n\n    def f1(y_true, y_pred):\n        prec = precision(y_true, y_pred)\n        rec = recall(y_true, y_pred)\n        if prec + rec == 0:\n            return 0.0\n        return round(2 * (prec * rec) / (prec + rec), 4)\n\n    metrics = {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1\n    }\n    \n    return metrics.get(name, -1)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def split_data(X, y, feature_index, threshold):\n        left_indices = X[:, feature_index] <= threshold\n        right_indices = X[:, feature_index] > threshold\n        return X[left_indices], y[left_indices], X[right_indices], y[right_indices]\n    \n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_mse = np.inf\n        best_feature_index = None\n        best_threshold = None\n        \n        for feature_index in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                X_left, y_left, X_right, y_right = split_data(X, y, feature_index, threshold)\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                \n                current_mse = mse(y, np.concatenate([np.full_like(y_left, np.mean(y_left)), np.full_like(y_right, np.mean(y_right))]))\n                \n                if current_mse < best_mse:\n                    best_mse = current_mse\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n        \n        if best_feature_index is None:\n            return np.mean(y)\n        \n        X_left, y_left, X_right, y_right = split_data(X, y, best_feature_index, best_threshold)\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (best_feature_index, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(X, tree):\n        if isinstance(tree, np.float64):\n            return tree\n        feature_index, threshold, left_tree, right_tree = tree\n        if X[feature_index] <= threshold:\n            return predict_tree(X, left_tree)\n        else:\n            return predict_tree(X, right_tree)\n    \n    def predict_trees(X, trees):\n        return sum(predict_tree(X, tree) for tree in trees)\n    \n    # Initialize predictions with the mean of the training targets\n    predictions = np.full_like(y_train, np.mean(y_train))\n    \n    trees = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of the squared-error loss)\n        residuals = y_train - predictions\n        \n        # Fit a CART regression tree to the residuals\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        \n        # Update the running prediction\n        predictions += learning_rate * np.array([predict_tree(x, tree) for x in X_train])\n    \n    # Make predictions on the test set\n    test_predictions = np.array([predict_trees(x, trees) for x in X_test])\n    \n    # Round predictions to 4 decimal places and convert to a list\n    return [round(pred, 4) for pred in test_predictions]\n```"}
{"task_id": 414, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    # Validate inputs\n    if step < 0:\n        return -1\n    if stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n\n    # Calculate current stage\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n\n    # Calculate learning rate\n    lr = initial_lr * (decay ** curr_stage)\n\n    # Return rounded learning rate\n    return round(lr, 6)\n```\n\nThis function implements the exponential learning-rate scheduler as described. It checks for invalid inputs and calculates the learning rate based on whether a smooth or staircase decay is specified. The result is rounded to six decimal places before being returned."}
{"task_id": 415, "completion_id": 0, "completion": "To implement the one-dimensional Type-II Discrete Cosine Transform (DCT-II), we will follow the mathematical definition provided. The DCT-II is a widely used transform in signal processing, particularly in image compression algorithms like JPEG.\n\nHere's the implementation of the `dct2` function using NumPy:\n\n```python\nimport numpy as np\n\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Compute the un-normalised 1-D DCT-II of the input signal.\"\"\"\n    if not frame:\n        return []\n    \n    N = len(frame)\n    x = np.array(frame)\n    X = np.zeros(N)\n    \n    for k in range(N):\n        for n in range(N):\n            X[k] += x[n] * np.cos(np.pi / N * (n + 0.5) * k)\n    \n    # Round the coefficients to four decimal places\n    X_rounded = np.round(X, decimals=4)\n    \n    return X_rounded.tolist()\n\n# Example usage:\n# frame = [1, 2, 3, 4]\n# print(dct2(frame))\n```\n\n### Explanation:\n1. **Input Check**: The function first checks if the input list `frame` is empty. If it is, the function returns an empty list.\n2. **Initialization**: \n   - `N` is the length of the input list.\n   - `x` is a NumPy array of the input list.\n   - `X` is initialized as a zero array of the same length `N` to store the DCT-II coefficients.\n3. **Computation**:\n   - The nested loops compute the DCT-II coefficients using the formula provided.\n   - The outer loop iterates over `k` from 0 to `N-1`.\n   - The inner loop iterates over `n` from 0 to `N-1`.\n   - The cosine term is computed using `np.cos`, and the result is accumulated in `X[k]`.\n4. **Rounding**: The computed coefficients are rounded to four decimal places using `np.round`.\n5. **Return**: The rounded coefficients are converted back to a list and returned.\n\nThis implementation ensures that the DCT-II coefficients are computed correctly and rounded as required."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): Data points for which the PDF values are to be computed. Shape (n_samples, n_features).\n    mean (np.ndarray): Mean vector of the distribution. Length n_features.\n    cov (np.ndarray): Covariance matrix of the distribution. Shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    pdf_values = []\n    \n    for i in range(n_samples):\n        x_minus_mean = X[i] - mean\n        exponent = -0.5 * np.dot(x_minus_mean.T, np.dot(inv_cov, x_minus_mean))\n        pdf_value = (1 / (math.sqrt((2 * math.pi) ** n_features * det_cov))) * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n```\n\nThis implementation calculates the multivariate Gaussian PDF for each sample in `X` using the given `mean` and `cov`. It handles both 1D and 2D arrays for `X`, ensuring that the input is always treated as a 2D array with shape `(n_samples, n_features)`. The PDF values are computed using the formula provided and rounded to four decimal places before being returned as a list."}
{"task_id": 417, "completion_id": 0, "completion": "To implement the PCA dimensionality reduction with reconstruction using pure NumPy, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    # Step 1: Centre the data\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    \n    # Step 2: Build the unbiased covariance matrix\n    n_samples = data.shape[0]\n    covariance_matrix = np.cov(centered_data, rowvar=False, bias=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvectors by descending eigenvalue magnitude\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Keep the first k eigenvectors\n    if k >= data.shape[1]:\n        k = data.shape[1]\n    retained_eigenvectors = sorted_eigenvectors[:, :k]\n    \n    # Step 6: Enforce deterministic orientation\n    for i in range(k):\n        if retained_eigenvectors[0, i] < 0:\n            retained_eigenvectors[:, i] *= -1\n    \n    # Step 7: Project the centred data onto the selected eigenvectors\n    low_dim_representation = np.dot(centered_data, retained_eigenvectors)\n    \n    # Step 8: Reconstruct the data back in the original space\n    reconstructed_data = np.dot(low_dim_representation, retained_eigenvectors.T) + mean\n    \n    # Step 9: Round both matrices to 4 decimal places\n    low_dim_representation_rounded = np.round(low_dim_representation, decimals=4).tolist()\n    reconstructed_data_rounded = np.round(reconstructed_data, decimals=4).tolist()\n    \n    return low_dim_representation_rounded, reconstructed_data_rounded\n```\n\n### Explanation:\n1. **Centring the Data**: We subtract the mean of each column from the data to centre it.\n2. **Covariance Matrix**: We compute the unbiased covariance matrix of the centred data.\n3. **Eigen-Decomposition**: We perform eigen-decomposition on the covariance matrix to get eigenvalues and eigenvectors.\n4. **Sorting Eigenvectors**: We sort the eigenvectors based on the descending order of their corresponding eigenvalues.\n5. **Retaining Eigenvectors**: We select the top `k` eigenvectors.\n6. **Deterministic Orientation**: We ensure that the first non-zero component of each retained eigenvector is positive.\n7. **Projection**: We project the centred data onto the selected eigenvectors to get the low-dimensional representation.\n8. **Reconstruction**: We reconstruct the data back into the original space using the retained components and add the mean back.\n9. **Rounding**: Finally, we round both the low-dimensional representation and the reconstruction to 4 decimal places and convert them to Python lists.\n\nThis function should work correctly for any 2D NumPy array input and handle cases where `k` is greater than or equal to the number of features."}
{"task_id": 418, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Get the number of samples and features\n    n, d = X.shape\n    \n    # If the number of samples is less than 2, return a zero matrix\n    if n < 2:\n        return [[0.0] * d for _ in range(d)]\n    \n    # Calculate the sample mean of each feature\n    mean = np.mean(X, axis=0)\n    \n    # Center the data by subtracting the mean from each sample\n    centered_X = X - mean\n    \n    # Compute the covariance matrix\n    covariance_matrix = np.dot(centered_X.T, centered_X) / (n - 1)\n    \n    # Round the covariance matrix to 4 decimal places\n    covariance_matrix_rounded = np.round(covariance_matrix, 4)\n    \n    # Convert the covariance matrix to a nested Python list\n    return covariance_matrix_rounded.tolist()\n```\n\nThis function first checks if the input is a list and converts it to a NumPy array if necessary. It then calculates the sample mean for each feature, centers the data by subtracting the mean from each sample, and computes the covariance matrix using the formula provided. Finally, it rounds the elements of the covariance matrix to four decimal places and returns it as a nested Python list."}
{"task_id": 419, "completion_id": 0, "completion": "To implement Bayesian linear regression with a conjugate Gaussian prior and known observation variance, we need to follow these steps:\n\n1. **Add Intercept**: If `fit_intercept` is `True`, add a column of ones to the input matrices `X` and `X_new`.\n2. **Prior Setup**: Handle different forms of the prior covariance matrix `V` (scalar, diagonal, or full matrix).\n3. **Posterior Calculation**: Compute the posterior mean and covariance.\n4. **Predictive Mean**: Use the posterior mean to compute the MAP predictive mean for `X_new`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Step 1: Add intercept if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n\n    # Step 2: Handle different forms of the prior covariance matrix V\n    M = X.shape[1]\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(M)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Ensure V is symmetric and positive definite\n    assert np.allclose(V, V.T), \"V must be symmetric\"\n    assert np.linalg.det(V) > 0, \"V must be positive definite\"\n\n    # Step 3: Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    posterior_cov = np.linalg.inv(V_inv + X.T @ X)\n    posterior_mean = posterior_cov @ (V_inv @ mu + X.T @ y)\n\n    # Step 4: Compute the MAP predictive mean for X_new\n    y_pred = X_new @ posterior_mean\n\n    # Round every predicted value to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([5, 6])\n# X_new = np.array([[7, 8]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\n### Explanation:\n\n- **Intercept Handling**: We add a column of ones to `X` and `X_new` if `fit_intercept` is `True`.\n- **Prior Covariance Matrix `V`**: We handle different types of `V` (scalar, diagonal, or full matrix) and ensure it is symmetric and positive definite.\n- **Posterior Calculation**: We compute the posterior mean and covariance using the formulas provided.\n- **Predictive Mean**: We compute the MAP predictive mean for `X_new` using the posterior mean.\n- **Output**: We round the predictions to 4 decimal places and return them as a list.\n\nThis implementation ensures that the Bayesian linear regression is performed correctly according to the given specifications."}
{"task_id": 420, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    if column < 0 or column >= X.shape[1]:\n        return ([], [])\n\n    left_mask = (X[:, column] < value).tolist()\n    right_mask = (X[:, column] >= value).tolist()\n\n    return left_mask, right_mask\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# column = 0\n# value = 3\n# left_mask, right_mask = get_split_mask(X, column, value)\n# print(left_mask)  # Output: [True, False, False]\n# print(right_mask) # Output: [False, True, True]\n```\n\nThis function checks if the provided column index is within the valid range. If it is not, it returns two empty lists. Otherwise, it creates two boolean masks using NumPy's comparison operations and converts them to lists before returning."}
{"task_id": 421, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow these steps:\n\n1. **Identify Core Points**: A point is a core point if it has at least `min_samples` neighbors within a distance `eps`.\n2. **Expand Clusters**: For each core point, recursively find all points that are density-reachable from it.\n3. **Label Points**: Assign cluster labels to all points that are part of a cluster. Points that are not part of any cluster are labeled as noise (-1).\n\nHere's the implementation of the DBSCAN algorithm in Python:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n    def region_query(point_index):\n        \"\"\"Find all points within eps distance of the point at point_index.\"\"\"\n        distances = np.linalg.norm(data - data[point_index], axis=1)\n        return np.where(distances <= eps)[0]\n\n    def expand_cluster(point_index, cluster_label):\n        \"\"\"Expand the cluster starting from the point at point_index.\"\"\"\n        seeds = region_query(point_index)\n        if len(seeds) < min_samples:\n            visited[point_index] = True\n            return False\n        else:\n            labels[point_index] = cluster_label\n            visited[point_index] = True\n            seeds = set(seeds) - {point_index}\n            \n            for seed in seeds:\n                if not visited[seed]:\n                    visited[seed] = True\n                    new_seeds = region_query(seed)\n                    if len(new_seeds) >= min_samples:\n                        seeds.update(new_seeds)\n                if labels[seed] == -1:\n                    labels[seed] = cluster_label\n            return True\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    visited = [False] * n_samples\n    cluster_label = 0\n\n    for point_index in range(n_samples):\n        if not visited[point_index]:\n            if expand_cluster(point_index, cluster_label + 1):\n                cluster_label += 1\n\n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3],\n#                  [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **region_query**: This helper function finds all points within a distance `eps` of a given point.\n2. **expand_cluster**: This function expands a cluster starting from a core point. It marks all points reachable from the core point with the same cluster label.\n3. **Main Loop**: The main loop iterates through each point in the dataset. If a point hasn't been visited and is a core point, it starts a new cluster by calling `expand_cluster`.\n\nThis implementation ensures that points are labeled correctly according to the DBSCAN algorithm, with noise points labeled as `-1` and clusters labeled consecutively starting from `1`."}
{"task_id": 422, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.array(x)\n    \n    # Compute the SoftPlus function\n    def compute_softplus(x):\n        return np.log(1 + np.exp(x))\n    \n    # Compute the first derivative of SoftPlus\n    def compute_first_derivative(x):\n        return np.exp(x) / (1 + np.exp(x))\n    \n    # Compute the second derivative of SoftPlus\n    def compute_second_derivative(x):\n        exp_x = np.exp(x)\n        return exp_x / (1 + exp_x)**2\n    \n    # Determine which computation to perform based on the order\n    if order == 0:\n        result = compute_softplus(x)\n    elif order == 1:\n        result = compute_first_derivative(x)\n    elif order == 2:\n        result = compute_second_derivative(x)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places and convert to a list\n    result = np.round(result, 4).tolist()\n    \n    return result\n\n# Example usage:\n# print(softplus([0, 1, 2], order=0))  # Output: [0.6931, 1.3133, 2.1269]\n# print(softplus([0, 1, 2], order=1))  # Output: [0.5, 0.7311, 0.8808]\n# print(softplus([0, 1, 2], order=2))  # Output: [0.25, 0.1966, 0.1049]\n# print(softplus([0, 1, 2], order=3))  # Output: -1\n```\n\nThis implementation defines the `softplus` function, which computes the SoftPlus activation function and its first two derivatives based on the specified order. The function handles various input types and ensures the output is rounded to four decimal places and converted to a standard Python type."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    \n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all values in both lists are non-negative\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    sum_of_squares = sum((np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2 for i in range(n))\n    rmsle = np.sqrt(sum_of_squares / n)\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if the lengths of `actual` and `predicted` lists are equal. If not, it returns `-1`.\n   - It then checks if all elements in both lists are non-negative. If any element is negative, it returns `-1`.\n\n2. **RMSLE Calculation**:\n   - The function calculates the RMSLE using the formula provided. It uses `np.log1p` to compute the logarithm of `1 + x`, which is more numerically stable than `np.log(1 + x)` when `x` is close to zero.\n   - It computes the sum of squared differences between the logarithms of the predicted and actual values.\n   - Finally, it calculates the square root of the mean of these squared differences.\n\n3. **Output**:\n   - The result is rounded to four decimal places using `round(rmsle, 4)` before being returned."}
{"task_id": 424, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    # Count the frequency of each label\n    label_counts = Counter(y)\n    total_count = len(y)\n    \n    # Calculate the relative frequencies\n    probabilities = [count / total_count for count in label_counts.values()]\n    \n    # Calculate the entropy\n    entropy_value = -sum(p * np.log2(p) for p in probabilities)\n    \n    # Return the entropy rounded to 4 decimal places\n    return round(entropy_value, 4)\n\n# Example usage:\n# labels = [0, 0, 1, 1, 1, 2, 2, 2, 2]\n# print(entropy(labels))  # Output should be 1.5849\n```\n\nThis function calculates the Shannon entropy of a given list of class labels. It uses the `Counter` from the `collections` module to count the occurrences of each label, computes the relative frequencies, and then applies the entropy formula. The result is rounded to four decimal places using Python's built-in `round` function."}
{"task_id": 425, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy of a one-dimensional collection of non-negative integers.\n    \n    Parameters:\n    p (list[int] | np.ndarray): A list or NumPy array of non-negative integers.\n    \n    Returns:\n    float: The Shannon entropy rounded to 4 decimal places.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already\n    p = np.array(p)\n    \n    # Check if the input is empty\n    if p.size == 0:\n        return 0.0\n    \n    # Calculate the frequency of each unique value\n    unique_values, counts = np.unique(p, return_counts=True)\n    \n    # Calculate the probabilities\n    probabilities = counts / p.size\n    \n    # Handle the case where there is only one unique value\n    if len(unique_values) == 1:\n        return 0.0\n    \n    # Calculate the Shannon entropy\n    entropy = -np.sum(probabilities * np.log(probabilities))\n    \n    # Return the entropy rounded to 4 decimal places\n    return round(entropy, 4)\n\n# Example usage:\n# print(f_entropy([1, 2, 2, 3, 3, 3]))  # Output should be 1.4591\n```\n\nThis function first converts the input to a NumPy array to handle both list and NumPy array inputs. It then calculates the frequency of each unique value in the input array, computes the probabilities, and finally calculates the Shannon entropy using the natural logarithm. If the input contains only a single unique value, the function returns 0.0. The result is rounded to four decimal places before being returned."}
{"task_id": 426, "completion_id": 0, "completion": "```python\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # Check if inputs are valid\n    if len(y_true) != len(y_pred) or not y_true or not y_pred:\n        return -1.0\n    \n    # Calculate the number of correct predictions\n    correct_predictions = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    \n    # Calculate the total number of predictions\n    total_predictions = len(y_true)\n    \n    # Calculate the accuracy\n    accuracy = correct_predictions / total_predictions\n    \n    # Return the accuracy rounded to 4 decimal places\n    return round(accuracy, 4)\n```\n\nThis function first checks if the input lists `y_true` and `y_pred` are valid by ensuring they have the same length and are not empty. If either condition is not met, it returns `-1.0`. Otherwise, it calculates the number of correct predictions by iterating through both lists simultaneously and comparing the corresponding elements. It then computes the accuracy as the ratio of correct predictions to the total number of predictions and returns this value rounded to four decimal places."}
{"task_id": 427, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Convert input to a NumPy array\n    z_array = np.array(z)\n    \n    # Compute the identity activation (which is just the input itself)\n    activation = z_array\n    \n    # Compute the element-wise derivative, which is an array of ones\n    derivative = np.ones_like(z_array)\n    \n    # Convert the results back to Python lists\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    \n    # Return the results as a tuple of lists\n    return (activation_list, derivative_list)\n\n# Example usage:\n# result = identity_activation([1, 2, 3])\n# print(result)  # Output: ([1, 2, 3], [1, 1, 1])\n```\n\nThis function takes a 1-D or n-D numeric input, computes the identity activation (which is simply the input itself), and computes the element-wise derivative (an array of ones). The results are returned as a tuple of two Python lists."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    \n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)\n    \n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    \n    if not symmetric:\n        window = window[:-1]\n    \n    return [round(x, 4) for x in window]\n\n# Example usage:\n# print(hann(10, symmetric=True))  # Symmetric Hann window of length 10\n# print(hann(10, symmetric=False)) # Periodic Hann window of length 10\n```\n\nThis code defines the `hann` function, which generates a Hann window of a specified length. The function handles both symmetric and periodic windows, and it ensures that the window coefficients are rounded to four decimal places. The function also handles special cases where the window length is less than or equal to zero or exactly one."}
{"task_id": 429, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    # Check if the context is valid\n    if context.ndim != 1 or context.shape[0] != context_probs.shape[0]:\n        return (-1, -1)\n    if not np.all((context == 0) | (context == 1)):\n        return (-1, -1)\n    if np.sum(context) != 1:\n        return (-1, -1)\n    \n    # Find the index of the active context\n    active_context_index = np.argmax(context)\n    \n    # Get the probabilities for the active context\n    active_context_probs = context_probs[active_context_index]\n    \n    # Find the optimal arm and its reward\n    optimal_arm = np.argmax(active_context_probs)\n    optimal_rwd = np.round(active_context_probs[optimal_arm], 4)\n    \n    return (optimal_rwd, optimal_arm)\n```\n\nThis function first checks if the provided `context` is a valid one-hot vector. If it is not, the function returns `(-1, -1)`. If the context is valid, it identifies the active context, retrieves the corresponding probabilities for the arms, finds the arm with the highest probability of success, and returns the rounded expected reward and the index of that arm."}
{"task_id": 430, "completion_id": 0, "completion": "To solve the problem of finding a topological sort of a directed graph using a deterministic depth-first search (DFS), we need to follow these steps:\n\n1. **Graph Representation**: Represent the graph using an adjacency list. This will help us efficiently explore the neighbors of each vertex.\n2. **DFS Traversal**: Perform a DFS traversal starting from each unvisited vertex. During the traversal, keep track of visited vertices and vertices currently in the recursion stack to detect cycles.\n3. **Cycle Detection**: If during the DFS traversal, we encounter a vertex that is already in the recursion stack, it indicates the presence of a cycle.\n4. **Topological Order Construction**: If no cycle is detected, construct the topological order by appending vertices to the result list as they finish their DFS exploration.\n\nHere's the implementation of the `topological_sort` function:\n\n```python\nfrom typing import List, Dict, Set, Tuple\n\ndef topological_sort(vertices: List, edges: List[Tuple]) -> List | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    \n    # Step 1: Build the adjacency list\n    graph = {v: [] for v in vertices}\n    for u, v in edges:\n        graph[u].append(v)\n    \n    # Step 2: Initialize data structures\n    visited = set()\n    recursion_stack = set()\n    topological_order = []\n    \n    # Step 3: Define the DFS function\n    def dfs(vertex):\n        # Mark the current vertex as visited and add to recursion stack\n        visited.add(vertex)\n        recursion_stack.add(vertex)\n        \n        # Explore all neighbors\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                if dfs(neighbor) is False:\n                    return False\n            elif neighbor in recursion_stack:\n                # Cycle detected\n                return False\n        \n        # Remove the vertex from recursion stack\n        recursion_stack.remove(vertex)\n        # Append the vertex to topological order\n        topological_order.append(vertex)\n        return True\n    \n    # Step 4: Perform DFS for each vertex\n    for vertex in vertices:\n        if vertex not in visited:\n            if dfs(vertex) is False:\n                return None\n    \n    # Step 5: Return the topological order\n    return topological_order[::-1]\n\n# Example usage:\nvertices = ['A', 'B', 'C', 'D']\nedges = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('C', 'D')]\nprint(topological_sort(vertices, edges))  # Output: ['A', 'B', 'C', 'D']\n```\n\n### Explanation:\n- **Graph Representation**: We use a dictionary where each key is a vertex and the value is a list of its neighbors.\n- **DFS Function**: The `dfs` function marks vertices as visited and keeps track of vertices in the current recursion stack to detect cycles.\n- **Cycle Detection**: If a neighbor is found in the recursion stack, a cycle is detected, and the function returns `False`.\n- **Topological Order**: Vertices are appended to the `topological_order` list as they complete their DFS exploration. The list is reversed at the end to get the correct topological order.\n\nThis implementation ensures that the topological sort is deterministic by iterating over vertices and their neighbors in the order they appear in the input lists."}
{"task_id": 431, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    \n    # Check if the vectors have the same length\n    if len(x1) != len(x2):\n        return -1\n    \n    # Calculate the Euclidean distance\n    distance = np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    # Round the result to 4 decimal places and return\n    return round(distance, 4)\n\n# Example usage:\n# print(dist([1, 2, 3], [4, 5, 6]))  # Output: 5.1962\n# print(dist([1, 2], [3, 4, 5]))     # Output: -1\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # For other tensors, use the first two dimensions\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    \n    return (fan_in, fan_out)\n```\n\nThis function checks the dimensionality of the input shape and calculates the fan-in and fan-out accordingly. For 4-dimensional shapes, it assumes they represent a 2-D convolutional kernel and calculates the receptive field size. For other shapes, it directly uses the first two dimensions to determine fan-in and fan-out. The results are returned as a tuple of floats."}
{"task_id": 434, "completion_id": 0, "completion": "To implement a numerically stable softmax function, we need to follow these steps:\n\n1. **Subtract the Maximum**: For each row in the input array, subtract the maximum value from all elements in that row. This helps prevent overflow when computing the exponential of large numbers.\n\n2. **Compute Exponentials**: Compute the exponential of the adjusted values.\n\n3. **Normalize**: Divide each element by the sum of the exponentials in its row to get the softmax probabilities.\n\n4. **Round the Results**: Round each probability to 6 decimal places.\n\n5. **Return as List of Lists**: Convert the resulting NumPy array back to a list of lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax.\"\"\"\n    # Ensure logits is a 2D array\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    \n    # Subtract the max for numerical stability\n    max_values = np.max(logits, axis=1, keepdims=True)\n    logits_stable = logits - max_values\n    \n    # Compute the exponentials\n    exps = np.exp(logits_stable)\n    \n    # Compute the softmax probabilities\n    sums = np.sum(exps, axis=1, keepdims=True)\n    softmax_probs = exps / sums\n    \n    # Round to 6 decimal places\n    rounded_probs = np.round(softmax_probs, decimals=6)\n    \n    # Convert to list of lists\n    result = rounded_probs.tolist()\n    \n    return result\n\n# Example usage:\n# logits = np.array([[1.0, 2.0, 3.0], [1000.0, 1001.0, 1002.0]])\n# print(softmax(logits))\n```\n\n### Explanation:\n\n- **Reshape for 1D Input**: If the input is a 1D array, we reshape it to a 2D array with one row to handle it uniformly with 2D inputs.\n\n- **Subtracting the Maximum**: We use `np.max(logits, axis=1, keepdims=True)` to get the maximum value for each row and subtract it from the entire row. This ensures that the largest number in each row becomes zero, which helps in preventing overflow.\n\n- **Exponential and Normalization**: We compute the exponential of the adjusted values and then normalize by dividing by the sum of the exponentials in each row.\n\n- **Rounding**: We use `np.round` to round each probability to 6 decimal places.\n\n- **Conversion to List of Lists**: Finally, we convert the resulting NumPy array to a list of lists using `.tolist()` and return it.\n\nThis implementation ensures numerical stability and adheres to the constraints provided."}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case handling\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Repeat for t = 1 ... n_estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.column_stack((np.ones(len(X)), X))\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Round the final predictions to 4 decimal places and convert to a list\n    return [round(pred, 4) for pred in y_pred]\n```\n\nThis implementation follows the steps outlined in the task description. It uses NumPy for efficient array operations and leverages the least squares method to fit the linear regression models. The special cases where `n_estimators` is less than or equal to zero or `learning_rate` is zero are handled by returning a list filled with the mean of the target values. Each prediction is rounded to four decimal places before being returned as a list."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to a NumPy array for uniform processing\n    x_np = np.array(x)\n    \n    # Compute the sigmoid function value\n    sigma_x = 1 / (1 + np.exp(-x_np))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    \n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Convert back to the original type if it was a scalar\n    if isinstance(x, (int, float)):\n        return result_rounded.item()\n    else:\n        return result_rounded.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 0]]), order=2))  # Output: [[0.0625, 0.0313], [0.0313, 0.0625]]\n```\n\nThis implementation handles the computation of the logistic sigmoid function and its first and second derivatives. It ensures that the output is rounded to four decimal places and maintains the original input type (scalar or list/NumPy array). If an invalid `order` is provided, it returns `-1`."}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    if num_classes is None:\n        num_classes = max(y) + 1\n    \n    if num_classes < max(y) + 1:\n        return -1\n    \n    one_hot_matrix = np.eye(num_classes)[y]\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n\n# Test cases:\n# assert to_categorical([0, 1, 2]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# assert to_categorical([0, 1, 2], num_classes=5) == [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0]]\n# assert to_categorical([0, 1, 2], num_classes=2) == -1\n# assert to_categorical([0]) == [[1]]\n# assert to_categorical([]) == []\n```\n\nThis implementation of `to_categorical` follows the specified requirements:\n\n1. It accepts a 1-D list or NumPy array `y` containing non-negative integer class indices.\n2. If `num_classes` is `None`, it determines it automatically as `max(y) + 1`.\n3. If `num_classes` is provided but smaller than `max(y) + 1`, it returns `-1`.\n4. Otherwise, it builds a 2-D NumPy array where each row corresponds to a one-hot encoded label.\n5. Finally, it converts the result to a regular Python list of lists before returning it."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def get_support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(set(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if len(itemset1) == k - 2 and len(itemset2) == k - 2:\n                    if itemset1[:-1] == itemset2[:-1] and itemset1[-1] < itemset2[-1]:\n                        candidate = tuple(sorted(itemset1 + (itemset2[-1],)))\n                        if all(subset in frequent_itemsets for subset in itertools.combinations(candidate, k - 1)):\n                            candidates.add(candidate)\n        return candidates\n\n    # Step 1: Generate frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item not in item_counts:\n                item_counts[item] = 0\n            item_counts[item] += 1\n\n    frequent_itemsets = {frozenset([item]) for item, count in item_counts.items() if count / len(transactions) >= min_sup}\n\n    # Step 2: Generate larger frequent itemsets\n    k = 2\n    while frequent_itemsets:\n        candidates = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = {candidate for candidate in candidates if get_support(candidate) >= min_sup}\n        k += 1\n\n    # Convert frozensets to tuples and sort them\n    result = sorted((tuple(itemset) for itemset in frequent_itemsets), key=lambda x: (len(x), x))\n    return result\n```\n\nThis implementation follows the Apriori algorithm to find frequent itemsets. It starts with generating frequent 1-itemsets and then iteratively generates larger itemsets by joining and pruning candidates. The final result is sorted by the length of the itemsets and then lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the predictions to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the mean across the first axis (n_estimators) to get the average probabilities\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    \n    # Find the predicted class index by taking the argmax of the rounded probabilities\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n    \n    # Convert the NumPy arrays back to Python lists before returning\n    return rounded_probabilities.tolist(), predicted_classes.tolist()\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2]],\n#     [[0.1, 0.4, 0.5], [0.5, 0.3, 0.2]],\n#     [[0.3, 0.3, 0.4], [0.4, 0.4, 0.2]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis function takes a three-level nested list of probability predictions from multiple estimators, averages them, rounds to four decimal places, and determines the predicted class for each sample. The results are returned as specified."}
{"task_id": 441, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    if window_len == 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    # Calculate the symmetric Hamming window\n    n = np.arange(window_len)\n    N = window_len - 1\n    w_symmetric = 0.54 - 0.46 * np.cos(2 * np.pi * n / N)\n    \n    if symmetric:\n        return [round(val, 4) for val in w_symmetric]\n    else:\n        # Return the periodic variant by removing the last sample\n        return [round(val, 4) for val in w_symmetric[:-1]]\n\n# Example usage:\n# print(hamming(10, symmetric=True))\n# print(hamming(10, symmetric=False))\n```\n\nThis function generates a Hamming window of the specified length. It handles both the symmetric and periodic variants, and ensures that all values are rounded to four decimal places. The function also manages edge cases where the window length is zero or one."}
{"task_id": 442, "completion_id": 0, "completion": "To implement a k-Nearest Neighbors (k-NN) classifier using a KD-Tree for acceleration, we need to follow these steps:\n\n1. **Build a Balanced KD-Tree**: We will create a recursive function to build the KD-Tree from the training data. The tree will be represented as a nested tuple structure.\n\n2. **Query the KD-Tree**: For each test sample, we will traverse the KD-Tree to find the k nearest neighbors. We will use a priority queue (min-heap) to keep track of the k nearest neighbors.\n\n3. **Majority Vote**: After finding the k nearest neighbors for each test sample, we will predict the label by performing a majority vote on the labels of these neighbors.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport heapq\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a KD-Tree.\n\n    The function must build a KD-Tree from the training data, query the *k* nearest\n    neighbours for every sample in *X_test*, perform a majority vote on their\n    labels and return the sequence of predicted labels.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_train, n_features) with training\n                  samples.\n        y_train: 1-D NumPy integer array of shape (n_train,) containing the class\n                  label for every training sample.\n        X_test:  2-D NumPy array of shape (n_test, n_features) with samples to\n                  be classified.\n        k:       Number of nearest neighbours to use (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A Python *list* with the predicted label for every row in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def build_kd_tree(data, labels, depth=0):\n        if len(data) == 0:\n            return None\n        \n        axis = depth % data.shape[1]\n        sorted_indices = np.argsort(data[:, axis])\n        median_index = len(sorted_indices) // 2\n        \n        left_data = data[sorted_indices[:median_index]]\n        left_labels = labels[sorted_indices[:median_index]]\n        right_data = data[sorted_indices[median_index+1:]]\n        right_labels = labels[sorted_indices[median_index+1:]]\n        \n        return (\n            (data[sorted_indices[median_index]], labels[sorted_indices[median_index]]),\n            build_kd_tree(left_data, left_labels, depth + 1),\n            build_kd_tree(right_data, right_labels, depth + 1)\n        )\n    \n    def knn_search(node, point, k, depth=0):\n        if node is None:\n            return []\n        \n        current_point, current_label = node[0]\n        left_subtree = node[1]\n        right_subtree = node[2]\n        \n        axis = depth % point.shape[0]\n        distance = euclidean_distance(current_point, point)\n        \n        neighbors = [(distance, current_label)]\n        if len(neighbors) > k:\n            heapq.heappop(neighbors)\n        \n        if point[axis] < current_point[axis]:\n            neighbors.extend(knn_search(left_subtree, point, k, depth + 1))\n            if current_point[axis] - point[axis] <= neighbors[0][0]:\n                neighbors.extend(knn_search(right_subtree, point, k, depth + 1))\n        else:\n            neighbors.extend(knn_search(right_subtree, point, k, depth + 1))\n            if point[axis] - current_point[axis] <= neighbors[0][0]:\n                neighbors.extend(knn_search(left_subtree, point, k, depth + 1))\n        \n        neighbors.sort()\n        return neighbors[:k]\n    \n    # Build the KD-Tree\n    kd_tree = build_kd_tree(X_train, y_train)\n    \n    # Predict for each test sample\n    predictions = []\n    for test_point in X_test:\n        nearest_neighbors = knn_search(kd_tree, test_point, k)\n        labels = [label for _, label in nearest_neighbors]\n        predicted_label = np.argmax(np.bincount(labels))\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n\n1. **Euclidean Distance**: A helper function to compute the Euclidean distance between two points.\n\n2. **Build KD-Tree**: This function recursively builds the KD-Tree. It sorts the data along the current axis, selects the median as the root, and then builds the left and right subtrees recursively.\n\n3. **KNN Search**: This function traverses the KD-Tree to find the k nearest neighbors. It uses a min-heap to keep track of the k nearest neighbors found so far. It also checks the other subtree if the current split could potentially contain closer points.\n\n4. **Predictions**: For each test sample, we find the k nearest neighbors using the KD-Tree and perform a majority vote to determine the predicted label.\n\nThis implementation ensures that the KD-Tree is built efficiently and that the k-NN search is accelerated by leveraging the spatial partitioning provided by the tree."}
{"task_id": 443, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    if isinstance(threshold, (int, float)):\n        left_indices = X[:, feature_i] >= threshold\n    else:\n        left_indices = X[:, feature_i] == threshold\n\n    left_subset = X[left_indices]\n    right_subset = X[~left_indices]\n\n    return left_subset, right_subset\n```\n\nThis function `divide_on_feature` takes a 2-D NumPy array `X`, a column index `feature_i`, and a `threshold`. It splits the array into two subsets based on whether the values in the specified column match or exceed the threshold (for numeric thresholds) or match the threshold (for non-numeric thresholds). The function returns a tuple of two NumPy arrays representing the left and right subsets."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel, we need to follow these steps:\n\n1. **Input Validation**: Ensure that the feature dimensions of `X` and `Y` match. Also, validate the `sigma` parameter to ensure it is either a positive float, a list of positive floats with the same length as the number of features, or `None`.\n\n2. **Default Sigma Calculation**: If `sigma` is `None`, compute the default value as \\(\\sqrt{\\frac{C}{2}}\\), where \\(C\\) is the number of features.\n\n3. **Kernel Matrix Computation**: Compute the RBF kernel matrix using the formula provided. For each pair of vectors \\(x\\) and \\(y\\), calculate the kernel value using the squared Euclidean distance normalized by `sigma`.\n\n4. **Rounding**: Round all entries of the kernel matrix to 4 decimal places.\n\n5. **Return**: Return the kernel matrix as a nested Python list.\n\nHere's the implementation of the `rbf_kernel` function:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate sigma\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    elif sigma is None:\n        sigma = np.sqrt(C / 2)\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    kernel_matrix = np.zeros((X.shape[0], Y.shape[0]))\n    for i, x in enumerate(X):\n        for j, y in enumerate(Y):\n            diff = (x - y) / sigma\n            kernel_value = np.exp(-0.5 * np.sum(diff ** 2))\n            kernel_matrix[i, j] = kernel_value\n    \n    # Round to 4 decimal places and convert to list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n```\n\n### Explanation:\n\n- **Input Conversion**: We convert `X` and `Y` to NumPy arrays for efficient computation.\n- **Feature Dimension Check**: We ensure that the number of features in `X` matches the number of features in `Y`.\n- **Sigma Validation**: We handle different types of `sigma` inputs, ensuring they are valid and converting them to a NumPy array for uniform processing.\n- **Kernel Matrix Calculation**: We iterate over each pair of vectors in `X` and `Y`, compute the normalized squared Euclidean distance, and apply the RBF formula.\n- **Rounding and Output**: Finally, we round the kernel matrix values to 4 decimal places and return it as a nested Python list."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    def entropy(labels):\n        \"\"\"Compute the Shannon entropy of a list of labels.\"\"\"\n        if not labels:\n            return 0\n        counter = Counter(labels)\n        n = len(labels)\n        return -sum((count / n) * np.log2(count / n) for count in counter.values())\n\n    def majority_label(labels):\n        \"\"\"Return the majority label, breaking ties by choosing the smallest label.\"\"\"\n        if not labels:\n            return None\n        counter = Counter(labels)\n        return min(counter, key=lambda x: (-counter[x], x))\n\n    n_samples, n_features = len(X), len(X[0])\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    majority_label = majority_label(y)\n\n    for j in range(n_features):\n        # Sort the unique values in the feature column\n        unique_values = sorted(set(X[i][j] for i in range(n_samples)))\n        # Consider midpoints between successive values as potential thresholds\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        \n        for t in thresholds:\n            left_labels = [y[i] for i in range(n_samples) if X[i][j] <= t]\n            right_labels = [y[i] for i in range(n_samples) if X[i][j] > t]\n            \n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority = majority_label(left_labels)\n                right_majority = majority_label(right_labels)\n\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, left_majority, right_majority)\n```\n\nThis implementation defines a `decision_stump` function that computes the best single-level split for a decision tree based on information gain. It uses helper functions to calculate entropy and determine the majority label. The function iterates over each feature and considers midpoints between unique values as potential thresholds, calculating the information gain for each split. It keeps track of the split with the highest gain and returns the appropriate tuple. If no split improves the information gain, it returns a tuple indicating no split is beneficial."}
{"task_id": 447, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    # Create a NumPy array of ones with the given shape and dtype\n    array = np.ones(shape, **kwargs)\n    \n    # Convert the NumPy array to a Python list\n    result = array.tolist()\n    \n    return result\n```\n\nThis function uses NumPy's `ones` method to create an array filled with ones, specifying the desired shape and any additional keyword arguments like `dtype`. It then converts this NumPy array into a Python list using the `tolist()` method and returns it. This ensures that the returned object is a pure Python list, as required."}
{"task_id": 448, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if len(y_train) == 0:\n        return []\n    \n    mean_value = np.mean(y_train)\n    predictions = np.full(len(X_test), mean_value).round(4)\n    return predictions.tolist()\n```\n\nThis implementation follows the specified requirements:\n1. It checks if `y_train` is empty and returns an empty list if true.\n2. It computes the mean of `y_train`.\n3. It creates a predictions array filled with this mean value for each sample in `X_test`.\n4. It rounds each prediction to the nearest 4th decimal place.\n5. It returns the predictions as a plain Python list."}
{"task_id": 449, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    \n    # Separate the training data into two classes\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    \n    # Calculate the means of each class\n    Mu0 = np.mean(X0, axis=0)\n    Mu1 = np.mean(X1, axis=0)\n    \n    # Subtract the means from the respective classes\n    X_sub_Mu0 = X0 - Mu0\n    X_sub_Mu1 = X1 - Mu1\n    \n    # Concatenate the subtracted means\n    X_sub_Mu = np.vstack([X_sub_Mu0, X_sub_Mu1])\n    \n    # Calculate the covariance matrix\n    m = X_train.shape[1]  # Number of features\n    Sigma = (1.0 / m) * np.dot(X_sub_Mu.T, X_sub_Mu)\n    \n    # Calculate the normal vector\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec**2))\n    \n    # Weights and bias\n    w = normal_vec\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n    \n    # Determine the sign\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    \n    # Prediction rule\n    predictions = (np.dot(X_test, w) + b > 0).astype(int) * sign\n    \n    return predictions.tolist()\n```\n\nThis implementation follows the provided learning rule exactly and returns the predicted labels as a list of integers."}
{"task_id": 450, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    # Initialize an empty list to store the majority votes\n    majority_votes = []\n\n    # Iterate over each sample's predictions\n    for sample_preds in preds:\n        # Use np.bincount to count occurrences of each class label\n        counts = np.bincount(sample_preds)\n        # Find the index of the maximum count, which is the majority class\n        majority_class = np.argmax(counts)\n        # Append the majority class to the list\n        majority_votes.append(majority_class)\n\n    return majority_votes\n```\n\nThis function iterates over each row in the `preds` array, which represents the predictions for a single sample across all estimators. It uses `np.bincount` to count the occurrences of each class label for that sample and then finds the class with the highest count using `np.argmax`. If there is a tie, `np.argmax` naturally returns the smallest index, which corresponds to the smallest class label. The results are collected in a list and returned."}
{"task_id": 451, "completion_id": 0, "completion": "To implement the `knn_kdtree_predict` function, we need to follow these steps:\n\n1. **Check for Edge Cases**: If `X_train` is empty or `k` is less than or equal to 0, return an empty list.\n2. **Build the KD-Tree**: Use the `scipy.spatial.KDTree` to construct a KD-Tree from the training data `X_train`.\n3. **Query the KD-Tree**: For each point in `X_test`, use the KD-Tree to find the `k` nearest neighbors.\n4. **Determine the Class Label**: For each point in `X_test`, count the occurrences of each class label among the `k` nearest neighbors and choose the most frequent one. In case of a tie, choose the smallest label.\n5. **Return the Predictions**: Collect all the predicted labels and return them as a list.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\nfrom scipy.spatial import KDTree\n\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    list[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    if X_train.size == 0 or k <= 0:\n        return []\n\n    # Build the KD-Tree\n    kdtree = KDTree(X_train)\n\n    predictions = []\n    for test_point in X_test:\n        # Find the k nearest neighbors\n        distances, indices = kdtree.query(test_point, k=k)\n        \n        # Get the labels of the k nearest neighbors\n        neighbor_labels = [y_train[idx] for idx in indices]\n        \n        # Count the occurrences of each label\n        label_counts = Counter(neighbor_labels)\n        \n        # Find the most common label, breaking ties by choosing the smallest label\n        most_common_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        \n        predictions.append(most_common_label)\n\n    return predictions\n```\n\n### Explanation:\n\n- **Edge Case Handling**: The function first checks if `X_train` is empty or if `k` is less than or equal to 0. If either condition is true, it returns an empty list.\n- **KD-Tree Construction**: The `KDTree` from `scipy.spatial` is used to build a KD-Tree from the training data `X_train`.\n- **Querying the KD-Tree**: For each point in `X_test`, the `query` method of the KD-Tree is used to find the `k` nearest neighbors. This method returns both the distances and the indices of the nearest neighbors.\n- **Label Prediction**: The labels of the nearest neighbors are collected, and the `Counter` from the `collections` module is used to count the occurrences of each label. The `min` function is used to determine the most common label, with a custom key that ensures ties are broken by choosing the smallest label.\n- **Returning Predictions**: The predicted labels for all test points are collected in a list and returned.\n\nThis implementation efficiently classifies the test points using the k-NN algorithm with a KD-Tree, ensuring deterministic tie-breaking by choosing the smallest label when necessary."}
{"task_id": 452, "completion_id": 0, "completion": "To solve the problem of splitting a dataset based on a feature threshold, we need to handle both numeric and categorical thresholds. The function will iterate through the dataset, check each sample against the threshold, and partition the samples accordingly. Here's how you can implement this:\n\n```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    subset_1 = []\n    subset_2 = []\n\n    for sample in X:\n        if isinstance(sample, np.ndarray):\n            sample = sample.tolist()\n        \n        if isinstance(threshold, (int, float)):\n            if sample[feature_i] >= threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n        else:\n            if sample[feature_i] == threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n\n    return [subset_1, subset_2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts either a NumPy array or a list of lists. If the input is a NumPy array, it converts each sample to a list for uniform processing.\n2. **Threshold Check**:\n   - For numeric thresholds, it checks if the feature value is greater than or equal to the threshold.\n   - For categorical thresholds, it checks if the feature value is exactly equal to the threshold.\n3. **Partitioning**: Based on the threshold check, samples are added to `subset_1` or `subset_2`.\n4. **Return**: The function returns a list containing the two subsets, preserving their original order.\n\nThis implementation ensures that the dataset is split correctly based on the specified feature and threshold, while maintaining the order of samples."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if not (0 <= gamma <= 1):\n        return -1\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n\n    # Initialize the target Q values matrix\n    Q_target = Q.copy()\n\n    # Update the target Q values\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        Q_target[i, actions[i]] = target\n\n    # Round the results to 4 decimal places and convert to list of lists\n    Q_target_rounded = [[round(value, 4) for value in row] for row in Q_target]\n\n    return Q_target_rounded\n```\n\nThis function first checks if the inputs are valid, ensuring that the discount factor `gamma` is within the specified range and that all input lists have the same length. It then iterates over each sample in the batch, calculates the appropriate target value based on whether the next state is terminal, and updates the corresponding entry in the `Q_target` matrix. Finally, it rounds each value to four decimal places and converts the resulting NumPy array to a nested list before returning it."}
{"task_id": 454, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    # Calculate half of the batch size\n    half_batch = batch_size // 2\n    \n    # Create valid_half array where each row is [1, 0]\n    valid_half = np.ones((half_batch, 2), dtype=int)\n    valid_half[:, 1] = 0\n    \n    # Create fake_half array where each row is [0, 1]\n    fake_half = np.zeros((half_batch, 2), dtype=int)\n    fake_half[:, 1] = 1\n    \n    # Create valid_full array where each row is [1, 0]\n    valid_full = np.ones((batch_size, 2), dtype=int)\n    valid_full[:, 1] = 0\n    \n    # Convert the NumPy arrays to Python lists\n    valid_half_list = valid_half.tolist()\n    fake_half_list = fake_half.tolist()\n    valid_full_list = valid_full.tolist()\n    \n    # Return the lists as a tuple\n    return valid_half_list, fake_half_list, valid_full_list\n```\n\nThis function generates the required one-hot label arrays for training a DCGAN. It ensures that the labels are correctly formatted and converted to Python lists as specified in the task description."}
{"task_id": 455, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    return math.sqrt(sum((x1 - x2) ** 2 for x1, x2 in zip(point1, point2)))\n\ndef majority_vote(neighbors):\n    labels = [label for _, label in neighbors]\n    counter = Counter(labels)\n    most_common = counter.most_common()\n    if len(most_common) > 1 and most_common[0][1] == most_common[1][1]:\n        return min(most_common[0][0], most_common[1][0])\n    return most_common[0][0]\n\ndef knn_naive(X_train, y_train, X_query, k):\n    predictions = []\n    for query in X_query:\n        distances = [(euclidean_distance(query, train_point), label) for train_point, label in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        neighbors = distances[:k]\n        prediction = majority_vote(neighbors)\n        predictions.append(prediction)\n    return predictions\n\ndef knn_heap(X_train, y_train, X_query, k):\n    predictions = []\n    for query in X_query:\n        distances = []\n        for train_point, label in zip(X_train, y_train):\n            distance = euclidean_distance(query, train_point)\n            if len(distances) < k:\n                heapq.heappush(distances, (-distance, label))\n            else:\n                heapq.heappushpop(distances, (-distance, label))\n        neighbors = [(-dist, label) for dist, label in distances]\n        prediction = majority_vote(neighbors)\n        predictions.append(prediction)\n    return predictions\n\nclass KDTreeNode:\n    def __init__(self, point, label, left=None, right=None):\n        self.point = point\n        self.label = label\n        self.left = left\n        self.right = right\n\ndef build_kdtree(X_train, y_train, depth=0):\n    if not X_train:\n        return None\n    \n    n_features = len(X_train[0])\n    axis = depth % n_features\n    sorted_indices = np.argsort([point[axis] for point in X_train])\n    median_idx = len(sorted_indices) // 2\n    \n    root_point = X_train[sorted_indices[median_idx]]\n    root_label = y_train[sorted_indices[median_idx]]\n    \n    left_points = [X_train[i] for i in sorted_indices if i < median_idx]\n    left_labels = [y_train[i] for i in sorted_indices if i < median_idx]\n    right_points = [X_train[i] for i in sorted_indices if i > median_idx]\n    right_labels = [y_train[i] for i in sorted_indices if i > median_idx]\n    \n    root = KDTreeNode(root_point, root_label)\n    root.left = build_kdtree(left_points, left_labels, depth + 1)\n    root.right = build_kdtree(right_points, right_labels, depth + 1)\n    \n    return root\n\ndef knn_kdtree_search(node, query, k, heap, depth=0):\n    if node is None:\n        return\n    \n    n_features = len(query)\n    axis = depth % n_features\n    distance = euclidean_distance(query, node.point)\n    \n    if len(heap) < k:\n        heapq.heappush(heap, (-distance, node.label))\n    elif distance < -heap[0][0]:\n        heapq.heappushpop(heap, (-distance, node.label))\n    \n    next_axis = (depth + 1) % n_features\n    if query[axis] < node.point[axis]:\n        knn_kdtree_search(node.left, query, k, heap, depth + 1)\n        if abs(query[axis] - node.point[axis]) < -heap[0][0]:\n            knn_kdtree_search(node.right, query, k, heap, depth + 1)\n    else:\n        knn_kdtree_search(node.right, query, k, heap, depth + 1)\n        if abs(query[axis] - node.point[axis]) < -heap[0][0]:\n            knn_kdtree_search(node.left, query, k, heap, depth + 1)\n\ndef knn_kdtree(X_train, y_train, X_query, k):\n    predictions = []\n    kdtree = build_kdtree(X_train, y_train)\n    \n    for query in X_query:\n        heap = []\n        knn_kdtree_search(kdtree, query, k, heap)\n        neighbors = [(-dist, label) for dist, label in heap]\n        prediction = majority_vote(neighbors)\n        predictions.append(prediction)\n    \n    return predictions\n\ndef knn_classifier(X_train, y_train, X_query, k, method=\"naive\"):\n    if method == \"naive\":\n        return knn_naive(X_train, y_train, X_query, k)\n    elif method == \"heap\":\n        return knn_heap(X_train, y_train, X_query, k)\n    elif method == \"kdtree\":\n        return knn_kdtree(X_train, y_train, X_query, k)\n    else:\n        raise ValueError(\"Invalid method. Choose from 'naive', 'heap', or 'kdtree'.\")\n```\n\nThis implementation provides a k-Nearest Neighbors (k-NN) classifier with three different neighbor-search strategies: \"naive\", \"heap\", and \"kdtree\". Each strategy is implemented in a separate function, and the main `knn_classifier` function selects the appropriate strategy based on the input parameter. The KD-Tree implementation includes building the tree and performing a recursive best-first search to find the k nearest neighbors."}
{"task_id": 456, "completion_id": 0, "completion": "Here's a Python function that computes the unbiased sample covariance matrix given two data matrices \\( X \\) and \\( Y \\). The function follows the specified requirements and constraints:\n\n```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Check if X has fewer than two rows\n    if X.shape[0] < 2:\n        return -1\n    \n    # If Y is not provided, set Y to X\n    if Y is None:\n        Y = X\n    \n    # Check if Y has the same number of rows as X\n    if X.shape[0] != Y.shape[0]:\n        return -1\n    \n    # Calculate the means of X and Y\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    \n    # Center the data\n    centered_X = X - mean_X\n    centered_Y = Y - mean_Y\n    \n    # Compute the covariance matrix\n    covariance_matrix = np.dot(centered_X.T, centered_Y) / (X.shape[0] - 1)\n    \n    # Round the result to 4 decimal places\n    covariance_matrix_rounded = np.round(covariance_matrix, 4)\n    \n    # Convert to list of lists and return\n    return covariance_matrix_rounded.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# Y = np.array([[7, 8], [9, 10], [11, 12]])\n# print(calculate_covariance_matrix(X, Y))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if \\( X \\) has fewer than two rows or if \\( Y \\) (if provided) has a different number of rows than \\( X \\). If either condition is true, the function returns `-1`.\n\n2. **Handling Missing \\( Y \\)**: If \\( Y \\) is not provided, it defaults to \\( X \\).\n\n3. **Mean Calculation**: The means of \\( X \\) and \\( Y \\) are calculated along the rows.\n\n4. **Centering the Data**: Each data matrix is centered by subtracting its mean from each row.\n\n5. **Covariance Calculation**: The covariance matrix is computed using the formula \\(\\frac{1}{n-1}(X-\\bar X)^\\top(Y-\\bar Y)\\).\n\n6. **Rounding**: The resulting covariance matrix is rounded to 4 decimal places.\n\n7. **Conversion to List of Lists**: Finally, the covariance matrix is converted to a list of lists and returned."}
{"task_id": 457, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    # Validate alpha\n    if not 0 <= alpha <= 1:\n        return -1\n    \n    # Convert weights to a NumPy array for vectorized operations\n    w = np.array(weights)\n    \n    # Calculate the L2 norm component\n    l2_norm = 0.5 * np.sum(w ** 2)\n    \n    # Calculate the L1 norm component\n    l1_norm = np.sum(np.abs(w))\n    \n    # Compute the Elastic-Net penalty\n    penalty = alpha * l2_norm + (1 - alpha) * l1_norm\n    \n    # Return the penalty rounded to 4 decimal places\n    return round(penalty, 4)\n\n# Example usage:\n# weights = [1.0, -2.0, 3.0]\n# alpha = 0.5\n# print(elastic_net_penalty(weights, alpha))  # Output should be rounded to 4 decimal places\n```"}
{"task_id": 458, "completion_id": 0, "completion": "Here's the implementation of the `to_categorical` function based on your requirements:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels_array = np.asarray(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels_array) + 1\n    \n    # Check if num_classes is smaller than max(labels) + 1\n    if num_classes <= max(labels_array):\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels_array))]\n    \n    # Fill in the one-hot encoded matrix\n    for i, label in enumerate(labels_array):\n        one_hot_matrix[i][label] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 3]\n# print(to_categorical(labels))\n# Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if any label is negative. If so, it returns `-1`.\n   - It then checks if `num_classes` is provided. If not, it infers `num_classes` as `max(labels) + 1`.\n   - If `num_classes` is provided but is smaller than `max(labels) + 1`, it returns `-1`.\n\n2. **One-Hot Encoding**:\n   - The function initializes a list of lists (`one_hot_matrix`) with zeros.\n   - It iterates over the `labels` and sets the appropriate position to `1` for each label.\n\n3. **Output**:\n   - The function returns the one-hot encoded matrix as a list of lists of integers."}
{"task_id": 459, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport heapq\n\ndef knn_validate_heap(X_train: \"np.ndarray\",\n                      Y_train: \"np.ndarray\",\n                      X_val: \"np.ndarray\",\n                      Y_val: \"np.ndarray\",\n                      k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sum((x1 - x2) ** 2)\n\n    predicted_labels = []\n\n    for val_sample in X_val:\n        # Step 1: Compute Euclidean distance to every training sample\n        distances = []\n        for i, train_sample in enumerate(X_train):\n            dist = euclidean_distance(val_sample, train_sample)\n            distances.append((-dist, i))  # Use negative distance for max-heap behavior\n\n        # Step 2: Maintain a max-heap of at most k pairs (-distance, index)\n        heap = []\n        for dist, idx in distances:\n            if len(heap) < k:\n                heapq.heappush(heap, (dist, idx))\n            else:\n                if dist > heap[0][0]:  # If current distance is smaller than the largest in heap\n                    heapq.heapreplace(heap, (dist, idx))\n\n        # Step 3: Extract the labels of those k neighbours\n        k_nearest_labels = [Y_train[idx] for _, idx in heap]\n\n        # Take a majority vote\n        predicted_label = np.argmax(np.bincount(k_nearest_labels))\n        predicted_labels.append(predicted_label)\n\n    # Step 4: Compute the accuracy on the validation set\n    correct_predictions = sum(1 for true, pred in zip(Y_val, predicted_labels) if true == pred)\n    accuracy = correct_predictions / len(Y_val)\n\n    return round(accuracy, 4), predicted_labels\n```"}
{"task_id": 460, "completion_id": 0, "completion": "To solve this problem, we need to compute the Pearson correlation coefficient between the columns of two matrices \\(X\\) and \\(Y\\). The correlation coefficient is defined as:\n\n\\[ \\rho_{ij} = \\frac{\\operatorname{cov}(X_{:i}, Y_{:j})}{\\sigma_{X_i} \\cdot \\sigma_{Y_j}} \\]\n\nWhere:\n- \\(\\operatorname{cov}(x, y)\\) is the population covariance between two variables \\(x\\) and \\(y\\).\n- \\(\\sigma_x\\) is the population standard deviation of \\(x\\).\n\nThe steps to implement this are as follows:\n1. Compute the mean of each column in \\(X\\) and \\(Y\\).\n2. Compute the covariance between each pair of columns from \\(X\\) and \\(Y\\).\n3. Compute the standard deviation of each column in \\(X\\) and \\(Y\\).\n4. Calculate the correlation coefficient using the formula above.\n5. Round the results to four decimal places.\n6. Handle cases where the standard deviation is zero by returning -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    if Y is None:\n        Y = X\n    \n    n_samples = X.shape[0]\n    \n    if X.shape[0] != Y.shape[0]:\n        raise ValueError(\"X and Y must have the same number of rows.\")\n    \n    def mean(arr):\n        return np.sum(arr) / n_samples\n    \n    def covariance(x, y):\n        return np.sum((x - mean(x)) * (y - mean(y))) / n_samples\n    \n    def standard_deviation(arr):\n        return np.sqrt(np.sum((arr - mean(arr)) ** 2) / n_samples)\n    \n    n_features_X = X.shape[1]\n    n_features_Y = Y.shape[1]\n    \n    correlation_matrix = []\n    \n    for i in range(n_features_X):\n        row = []\n        for j in range(n_features_Y):\n            std_X_i = standard_deviation(X[:, i])\n            std_Y_j = standard_deviation(Y[:, j])\n            \n            if std_X_i == 0 or std_Y_j == 0:\n                return -1\n            \n            cov_Xi_Yj = covariance(X[:, i], Y[:, j])\n            rho_ij = cov_Xi_Yj / (std_X_i * std_Y_j)\n            row.append(round(rho_ij, 4))\n        \n        correlation_matrix.append(row)\n    \n    return correlation_matrix\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# Y = np.array([[7, 8], [9, 10], [11, 12]])\n# print(calculate_correlation_matrix(X, Y))\n```\n\nThis function first checks if \\(Y\\) is provided, and if not, it sets \\(Y\\) to be equal to \\(X\\). It then calculates the mean, covariance, and standard deviation for each column. If any standard deviation is zero, it returns -1. Otherwise, it computes the correlation matrix and rounds each element to four decimal places before returning it."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(x)\n\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        min_sse = float('inf')\n        best_split = None\n        best_vL = best_vR = None\n        \n        unique_x = np.unique(x[:-1])  # Exclude the greatest value to avoid empty right side\n        for t in unique_x:\n            left_indices = x <= t\n            right_indices = x > t\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            vL = np.mean(residuals[left_indices])\n            vR = np.mean(residuals[right_indices])\n            \n            sse = np.sum((residuals[left_indices] - vL) ** 2) + np.sum((residuals[right_indices] - vR) ** 2)\n            \n            if sse < min_sse:\n                min_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        \n        if best_split is None:\n            # No valid split found, predict the mean residual of the whole data\n            stump_predictions = np.full_like(residuals, np.mean(residuals))\n        else:\n            stump_predictions = np.where(x <= best_split, best_vL, best_vR)\n        \n        predictions += learning_rate * stump_predictions\n    \n    return np.round(predictions, 4).tolist()\n```\n\nThis implementation follows the described algorithm for gradient boosting with decision stumps for one-dimensional regression. It iteratively computes the residuals, finds the best split for each iteration, updates the predictions, and finally returns the rounded predictions."}
{"task_id": 462, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    if D <= 1:\n        return mfccs\n    \n    G, C = mfccs.shape\n    lifter_values = 1 + (D / 2) * np.sin(np.pi * np.arange(C) / D)\n    lifter_values = lifter_values.reshape(1, -1)  # Reshape to (1, C) for broadcasting\n    lifted_mfccs = mfccs * lifter_values\n    \n    return lifted_mfccs\n\n# Example usage:\n# mfccs = np.random.rand(10, 13)  # Example MFCC matrix with 10 frames and 13 coefficients\n# D = 22  # Example lifter parameter\n# lifted_mfccs = cepstral_lifter(mfccs, D)\n# print(lifted_mfccs)\n```\n\nThis implementation defines the `cepstral_lifter` function, which applies a sinusoidal cepstral lifter to a matrix of MFCC coefficients. The function checks if the lifter parameter \\( D \\) is less than or equal to 1, in which case it returns the input MFCCs unchanged. Otherwise, it computes the lifter values and applies them column-wise to the MFCC matrix using element-wise multiplication. The resulting liftered MFCCs are returned as a NumPy array with the same shape and data type as the input."}
{"task_id": 463, "completion_id": 0, "completion": "To solve this problem, we need to compute the radius of a Ball-tree node. The radius is defined as the maximum Euclidean distance between the node's centroid and any data point in the node. Here's how we can implement this:\n\n1. **Calculate the Euclidean Distance**: For each data point in the matrix `X`, calculate the Euclidean distance to the centroid.\n2. **Find the Maximum Distance**: Determine the maximum distance from the centroid to any data point.\n3. **Round the Result**: Round the maximum distance to the nearest 4th decimal place.\n\nHere's the implementation of the function:\n\n```python\nimport math\n\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    if not X:\n        return 0.0\n    \n    max_distance = 0.0\n    for point in X:\n        # Calculate the Euclidean distance between the centroid and the point\n        distance = math.sqrt(sum((c - p) ** 2 for c, p in zip(centroid, point)))\n        # Update the maximum distance if the current distance is greater\n        if distance > max_distance:\n            max_distance = distance\n    \n    # Return the maximum distance rounded to 4 decimal places\n    return round(max_distance, 4)\n```\n\n### Explanation:\n\n- **Empty Check**: If the data matrix `X` is empty, the function immediately returns `0.0` as specified.\n- **Distance Calculation**: For each point in `X`, the Euclidean distance to the centroid is calculated using the formula:\n  \\[\n  \\text{distance} = \\sqrt{\\sum_{i=1}^{n} (c_i - p_i)^2}\n  \\]\n  where \\( c_i \\) is the i-th component of the centroid and \\( p_i \\) is the i-th component of the point.\n- **Finding Maximum Distance**: We keep track of the maximum distance encountered during the iteration.\n- **Rounding**: Finally, the maximum distance is rounded to 4 decimal places before being returned.\n\nThis function efficiently computes the required radius and handles edge cases such as an empty data matrix."}
{"task_id": 464, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    \n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    predictions = []\n    \n    for val_sample in X_val:\n        distances = [euclidean_distance(val_sample, train_sample) for train_sample in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = Y_train[nearest_indices]\n        predicted_label = np.argmax(np.bincount(nearest_labels))\n        predictions.append(predicted_label)\n    \n    correct_predictions = sum(1 for pred, true in zip(predictions, Y_val) if pred == true)\n    accuracy = round(correct_predictions / len(Y_val), 4)\n    \n    return accuracy, predictions\n```\n\nThis implementation defines the `knn_validate` function, which calculates the Euclidean distance between each validation sample and all training samples, finds the k nearest neighbors, and predicts the label based on the majority vote of these neighbors. The accuracy is then computed by comparing the predicted labels with the true labels and rounding it to four decimal places."}
{"task_id": 465, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n    def f(x1, x2):\n        # Compute the Euclidean norm squared between x1 and x2\n        norm_squared = np.linalg.norm(np.array(x1) - np.array(x2)) ** 2\n        \n        # Compute the RBF kernel value\n        if gamma == 0:\n            # If gamma is 0, the result should always be 1 after rounding\n            return round(1.0, 4)\n        else:\n            # Otherwise, compute the exponential value\n            result = np.exp(-gamma * norm_squared)\n            return round(result, 4)\n    \n    return f\n```\n\nThis implementation defines the `rbf_kernel` function, which takes a `gamma` parameter and returns another function `f`. The function `f` computes the RBF kernel value for two input vectors `x1` and `x2`, rounding the result to four decimal places. If `gamma` is zero, the function ensures that the result is always 1 after rounding, as specified."}
{"task_id": 466, "completion_id": 0, "completion": "```python\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # Translate the line using the translation table to remove punctuation\n    no_punctuation = line.translate(_PUNC_TABLE)\n    # Strip leading and trailing whitespace\n    stripped_line = no_punctuation.strip()\n    return stripped_line\n```\n\nThis function uses the `translate` method with a translation table created by `str.maketrans` to remove all punctuation characters from the input string. It then strips any leading or trailing whitespace from the resulting string before returning it. If the input string contains only punctuation and/or whitespace, the function will return an empty string as expected."}
{"task_id": 467, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regularization(weights: list[float | int], C: float = 0.01, norm: str = \"l2\") -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if norm not in [\"l1\", \"l2\"]:\n        return -1, []\n\n    weights = np.array(weights)\n    \n    if norm == \"l1\":\n        penalty = C * np.sum(np.abs(weights))\n        gradient = C * np.sign(weights)\n    elif norm == \"l2\":\n        penalty = 0.5 * C * np.sum(weights ** 2)\n        gradient = C * weights\n    \n    # Round the results to 4 decimal places\n    penalty = round(penalty, 4)\n    gradient = [round(g, 4) for g in gradient]\n    \n    return penalty, gradient\n```\n\nThis function calculates the regularization penalty and its gradient for a given list of weights based on the specified norm (\"l1\" or \"l2\"). It uses NumPy for efficient computation and rounds the results to four decimal places as required. If an unsupported norm is provided, it returns -1."}
{"task_id": 468, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    \n    # Ensure y_train is in the correct shape\n    if y_train.ndim == 1:\n        y_train = y_train.reshape(-1, 1)\n    \n    # Add a bias term to X_train and X_test\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize parameters\n    m, n = X_train.shape\n    weights = np.zeros((n, 1))\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Gradient Descent\n    for _ in range(num_iters):\n        z = np.dot(X_train, weights)\n        h = sigmoid(z)\n        dW = np.dot(X_train.T, (h - y_train)) / m\n        weights -= learning_rate * dW\n    \n    # Predict on X_test\n    z_test = np.dot(X_test, weights)\n    h_test = sigmoid(z_test)\n    predictions = (h_test >= 0.5).astype(int).flatten().tolist()\n    \n    return predictions\n```"}
{"task_id": 469, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n    def f(x1, x2):\n        # Convert inputs to numpy arrays of float type\n        x1 = np.array(x1, dtype=float)\n        x2 = np.array(x2, dtype=float)\n        \n        # Check if the vectors have the same length\n        if x1.shape[0] != x2.shape[0]:\n            return -1\n        \n        # Compute and return the dot product\n        return np.inner(x1, x2).item()  # Use .item() to convert from numpy scalar to Python float\n    \n    return f\n```\n\nThis implementation defines the `linear_kernel` function as specified. It returns a callable `f` that takes two inputs, converts them to NumPy arrays, checks their lengths, and computes their dot product if they are of the same length. If the lengths differ, it returns `-1`. The result of the dot product is converted to a Python float using `.item()`."}
{"task_id": 470, "completion_id": 0, "completion": "To implement the `get_scriptdir` function, we need to follow these steps:\n\n1. Normalize the given path by resolving any symbolic links and removing redundant path segments.\n2. Extract the directory part of the normalized path.\n3. Ensure the returned path is an absolute path and does not end with a trailing separator, except when it is the root directory.\n\nHere's the implementation of the function:\n\n```python\nimport os\n\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # Resolve the absolute path and normalize it\n    abs_path = os.path.abspath(file_path)\n    # Get the canonical path by resolving symbolic links\n    canon_path = os.path.realpath(abs_path)\n    # Extract the directory part of the canonical path\n    dir_path = os.path.dirname(canon_path)\n    \n    # Ensure the directory path does not end with a trailing separator\n    if dir_path != '/' and dir_path.endswith(os.sep):\n        dir_path = dir_path.rstrip(os.sep)\n    \n    return dir_path\n\n# Example usage:\n# print(get_scriptdir(\"/some/path/to/file.txt\"))\n# print(get_scriptdir(\"~/relative/path/to/file.txt\"))\n# print(get_scriptdir(\"/path/with/symlink/file.txt\"))\n# print(get_scriptdir(\"/path/to/directory/\"))\n```\n\n### Explanation:\n\n- **`os.path.abspath(file_path)`**: Converts the given path to an absolute path.\n- **`os.path.realpath(abs_path)`**: Resolves any symbolic links in the path and removes redundant path segments like `.` and `..`.\n- **`os.path.dirname(canon_path)`**: Extracts the directory part of the canonical path.\n- **Trailing Separator Handling**: We check if the directory path is not the root directory (`'/'`) and ends with a path separator. If so, we strip the trailing separator using `rstrip(os.sep)`.\n\nThis function ensures that the returned path is always in the correct format as specified in the task description."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Calculate the expected value of Q[next_state]\n        max_q_next = max(q_table[next_state])\n        greedy_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_q_next]\n        num_greedy_actions = len(greedy_actions)\n        \n        expected_q_next = (1 - epsilon + epsilon / num_actions) * max_q_next\n        expected_q_next += sum((epsilon / num_actions) * q_table[next_state][a] for a in range(num_actions) if a not in greedy_actions)\n        \n        target = reward + gamma * expected_q_next\n    else:\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to 4 decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```"}
{"task_id": 472, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    def softmax_1d(arr):\n        max_val = max(arr)\n        exp_arr = [np.exp(a - max_val) for a in arr]\n        sum_exp = sum(exp_arr)\n        probabilities = [round(e / sum_exp, 4) for e in exp_arr]\n        gradient = [round(p * (1 - p), 4) for p in probabilities]\n        return probabilities, gradient\n\n    if isinstance(x[0], list):  # Two-dimensional case\n        probabilities = []\n        gradients = []\n        for row in x:\n            prob, grad = softmax_1d(row)\n            probabilities.append(prob)\n            gradients.append(grad)\n        return probabilities, gradients\n    else:  # One-dimensional case\n        return softmax_1d(x)\n\n# Example usage:\nx = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nprobabilities, gradient = softmax(x)\nprint(\"Probabilities:\", probabilities)\nprint(\"Gradient:\", gradient)\n```\n\nThis implementation defines a `softmax` function that handles both one-dimensional and two-dimensional inputs. It uses a helper function `softmax_1d` to compute the softmax probabilities and their gradients for a single row (or the entire input if it's one-dimensional). The results are rounded to four decimal places and returned as plain Python lists."}
{"task_id": 474, "completion_id": 0, "completion": "To address the task, we need to implement the `generate_data` function that creates a 2-D toy dataset suitable for binary classification. The dataset should have two classes, each arranged in a rectangular cluster. The first class (label -1) is located in the square [1, 9] \u00d7 [1, 9], and the second class (label +1) is shifted upward by the value of the parameter `interval` (in multiples of 10).\n\nHere's the complete implementation of the `generate_data` function:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the bounds for the x and y coordinates\n        x_min = np.floor(i / 2) * 10 + 0.1\n        x_max = x_min + 0.8\n        y_min = (i % 2) * interval * 10 + 0.1\n        y_max = y_min + 0.8\n\n        # Generate training samples\n        x_train_samples = np.random.uniform(x_min, x_max, n_train)\n        y_train_samples = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(np.column_stack((x_train_samples, y_train_samples)))\n        Y_train.extend([(i - 0.5) * 2] * n_train)\n\n        # Generate validation samples\n        x_val_samples = np.random.uniform(x_min, x_max, n_val)\n        y_val_samples = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(np.column_stack((x_val_samples, y_val_samples)))\n        Y_val.extend([(i - 0.5) * 2] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\n### Explanation:\n1. **Random Seed Handling**: If a seed is provided, both `random` and `numpy.random` are seeded to ensure reproducibility.\n2. **Parameter Calculation**: For each class `i`, the bounds for `x` and `y` coordinates are calculated based on the class index and the `interval`.\n3. **Sample Generation**: Training and validation samples are generated using `numpy.random.uniform` within the calculated bounds.\n4. **Label Assignment**: Labels are assigned based on the class index `i` using the formula `(i - 0.5) * 2`.\n5. **Rounding**: All coordinates are rounded to four decimal places using `np.round`.\n6. **Return Values**: The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`.\n\nThis implementation ensures that the data generator is reusable and correctly handles the generation of both training and validation datasets with appropriate labels."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update first moment estimate\n    m_new = b1 * m_prev + (1 - b1) * grad\n    \n    # Update second raw moment estimate\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - b1 ** t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # Should print approximately 0.999000001\n```"}
{"task_id": 477, "completion_id": 0, "completion": "Here's the implementation of the A* search algorithm on a 2-D grid:\n\n```python\nimport heapq\nfrom typing import List, Tuple\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right\n    start_row, start_col = start\n    dest_row, dest_col = dest\n    \n    # Priority queue to store (f, g, row, col)\n    pq = [(0, 0, start_row, start_col)]\n    # Dictionary to store the minimum cost to reach each cell\n    g_costs = {(start_row, start_col): 0}\n    \n    while pq:\n        f, g, row, col = heapq.heappop(pq)\n        \n        # If we reach the destination, return the cost\n        if (row, col) == (dest_row, dest_col):\n            return g\n        \n        # Explore neighbors\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            \n            # Check if the new position is within bounds and is a free cell\n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0:\n                new_g = g + 1\n                new_f = new_g + abs(new_row - dest_row) + abs(new_col - dest_col)\n                \n                # If this path to the new cell is better, update and add to the queue\n                if (new_row, new_col) not in g_costs or new_g < g_costs[(new_row, new_col)]:\n                    g_costs[(new_row, new_col)] = new_g\n                    heapq.heappush(pq, (new_f, new_g, new_row, new_col))\n    \n    # If the destination is not reachable\n    return -1\n```\n\n### Explanation:\n1. **Priority Queue**: We use a priority queue to always expand the least costly node first. Each entry in the queue is a tuple `(f, g, row, col)` where `f` is the total estimated cost, `g` is the cost from the start to the current cell, and `(row, col)` is the cell's coordinates.\n\n2. **Heuristic Function**: The heuristic `h` used is the Manhattan distance, which is the sum of the absolute differences in the row and column indices between the current cell and the destination.\n\n3. **Cost Dictionary**: We maintain a dictionary `g_costs` to keep track of the minimum cost to reach each cell. This helps in avoiding reprocessing cells with higher costs.\n\n4. **Exploration**: For each cell, we explore its 4-directional neighbors. If a neighbor is within bounds, is a free cell, and can be reached with a lower cost, we update its cost and add it to the priority queue.\n\n5. **Termination**: The algorithm terminates when the destination is reached, returning the cost. If the queue is exhausted without reaching the destination, it returns `-1`, indicating the destination is unreachable."}
{"task_id": 478, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    # Convert the input to a NumPy array of type float\n    X = np.array(X, dtype=float)\n    \n    # Check if the input is empty\n    if X.size == 0:\n        return []\n    \n    # Calculate the mean of each feature\n    means = np.mean(X, axis=0)\n    \n    # Calculate the population variance for each feature\n    variances = np.sum((X - means)**2, axis=0) / X.shape[0]\n    \n    # Calculate the population standard deviation\n    std_devs = np.sqrt(variances)\n    \n    # Round the results to 4 decimal places and convert to a list\n    return [round(std_dev, 4) for std_dev in std_devs]\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(calculate_std_dev(X))  # Output: [2.8868, 2.8868, 2.8868]\n```\n\nThis function first converts the input data into a NumPy array of type `float`. It then checks if the input is empty and returns an empty list if so. Next, it calculates the mean of each feature, computes the population variance using the given formula, and finally calculates the standard deviation by taking the square root of the variance. Each standard deviation value is rounded to four decimal places before being returned as a list."}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy algorithm for the multi-armed bandit problem, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Number of arms\n    N = len(rewards[0])\n    \n    # Initialize the estimated values and counters\n    estimates = [ev_prior] * N\n    counts = [0] * N\n    \n    # Iterate over each time-step\n    for t, reward_list in enumerate(rewards):\n        # Choose an arm\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the highest estimate\n            chosen_arm = np.argmax(estimates)\n        \n        # Get the reward for the chosen arm\n        reward = reward_list[chosen_arm]\n        \n        # Update the count for the chosen arm\n        counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm\n        C_i = counts[chosen_arm]\n        V_i = estimates[chosen_arm]\n        estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n    \n    # Return the final estimates rounded to 4 decimal places\n    return [round(estimate, 4) for estimate in estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 2.0, 3.0],\n#     [3.0, 2.0, 1.0],\n#     [2.0, 3.0, 1.0]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the estimated value (`estimates`) for each arm with `ev_prior` and set the count (`counts`) for each arm to zero.\n2. **Iteration**: For each time-step, we decide whether to explore (choose a random arm) or exploit (choose the arm with the highest estimate). This decision is made based on the exploration probability `epsilon`.\n3. **Reward Reception**: We receive the reward for the chosen arm.\n4. **Update Estimates**: We update the estimate for the chosen arm using the incremental sample mean formula.\n5. **Return Results**: Finally, we return the estimated values rounded to four decimal places.\n\nThis implementation ensures that the results are reproducible when a seed is provided, and it follows the \u03b5-greedy strategy as described."}
{"task_id": 480, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    \n    # Step 1: Pre-emphasis\n    x_preemphasized = x - alpha * np.pad(x, (1, 0), mode='constant')[1:]\n    \n    # Step 2: Framing\n    frame_width = round(window_duration * fs)\n    stride = round(stride_duration * fs)\n    \n    if center:\n        padding = frame_width // 2\n        x_padded = np.pad(x_preemphasized, (padding, padding), mode='symmetric')\n    else:\n        x_padded = x_preemphasized\n    \n    num_frames = 1 + (len(x_padded) - frame_width) // stride\n    frames = np.array([x_padded[i * stride:i * stride + frame_width] for i in range(num_frames)])\n    \n    # Step 3: Windowing\n    if window == \"hamming\":\n        win = np.hamming(frame_width)\n    elif window == \"hann\":\n        win = np.hanning(frame_width)\n    elif window == \"blackman_harris\":\n        win = np.blackman_harris(frame_width)\n    else:\n        raise ValueError(\"Unsupported window type\")\n    \n    framed_signal = frames * win\n    \n    # Step 4: Power Spectrum\n    N = frame_width\n    fft_size = N // 2 + 1\n    power_spectrum = np.abs(np.fft.rfft(framed_signal, axis=1))**2 / N\n    \n    # Step 5: Build Mel Filter Bank\n    def hz_to_mel(freq):\n        return 2595 * np.log10(1 + freq / 700.0)\n    \n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595.0) - 1)\n    \n    low_freq_mel = hz_to_mel(0)\n    high_freq_mel = hz_to_mel(fs / 2)\n    mel_points = np.linspace(low_freq_mel, high_freq_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    bin_indices = np.floor((N + 1) * hz_points / fs).astype(int)\n    \n    fbank = np.zeros((n_filters, fft_size))\n    for m in range(1, n_filters + 1):\n        f_m_minus_1 = bin_indices[m - 1]\n        f_m = bin_indices[m]\n        f_m_plus_1 = bin_indices[m + 1]\n        \n        for k in range(f_m_minus_1, f_m):\n            fbank[m - 1, k] = (k - f_m_minus_1) / (f_m - f_m_minus_1)\n        for k in range(f_m, f_m_plus_1):\n            fbank[m - 1, k] = (f_m_plus_1 - k) / (f_m_plus_1 - f_m)\n    \n    # Step 6: Project Power Spectra onto Filter Bank\n    filter_energies = np.dot(power_spectrum, fbank.T)\n    \n    # Step 7: Mean Normalization\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=0)\n    \n    # Step 8: Replace zeros with eps\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    \n    # Step 9: Calculate Energy per Frame\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n    \n    # Round and convert to lists\n    filter_energies_rounded = np.round(filter_energies, 4).tolist()\n    energy_per_frame_rounded = np.round(energy_per_frame, 4).tolist()\n    \n    return filter_energies_rounded, energy_per_frame_rounded\n```\n\nThis function implements the steps to generate a Mel spectrogram from a given 1-D NumPy signal, following the specified procedure and constraints."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index, eps):\n        neighbors = []\n        for i in range(data.shape[0]):\n            if euclidean_distance(data[i], data[point_index]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, cluster_id, neighbors):\n        cluster_labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if cluster_labels[neighbor_index] == -1:\n                cluster_labels[neighbor_index] = cluster_id\n            elif cluster_labels[neighbor_index] == 0:\n                cluster_labels[neighbor_index] = cluster_id\n                additional_neighbors = region_query(neighbor_index, eps)\n                if len(additional_neighbors) >= min_samples:\n                    neighbors.extend(additional_neighbors)\n            i += 1\n\n    cluster_labels = [0] * data.shape[0]\n    cluster_id = 0\n\n    for point_index in range(data.shape[0]):\n        if cluster_labels[point_index] != 0:\n            continue\n        neighbors = region_query(point_index, eps)\n        if len(neighbors) < min_samples:\n            cluster_labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, cluster_id, neighbors)\n\n    return cluster_labels\n```\n\nThis implementation of DBSCAN follows the rules you specified. It starts by defining helper functions to calculate Euclidean distance and to find all neighbors within a given radius (`eps`). The main function iterates over each point, checking if it has enough neighbors to form a core point. If so, it expands the cluster by adding reachable points. Points that don't meet the criteria for being part of a cluster are labeled as noise (`-1`)."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if num_classes <= 0:\n        raise ValueError(\"num_classes must be greater than 0\")\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"All labels must be in the range [0, num_classes - 1]\")\n    \n    # Create an empty matrix of zeros\n    one_hot_matrix = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Use numpy's advanced indexing to set the appropriate elements to 1\n    one_hot_matrix[np.arange(y.shape[0]), y] = 1\n    \n    return one_hot_matrix\n```\n\nThis implementation of `to_categorical` follows the specified requirements:\n\n- It converts a vector of integer class labels into a 2-D array of one-hot encoded vectors.\n- It supports an optional `num_classes` parameter, which determines the number of columns in the output matrix.\n- If `num_classes` is not provided, it defaults to `max(y) + 1`.\n- It raises a `ValueError` if any label is negative or not smaller than `num_classes`.\n- The returned array contains only integers (0s and 1s)."}
{"task_id": 483, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    one_hot_encoded = []\n    for label in labels:\n        one_hot_vector = [0] * num_classes\n        one_hot_vector[label] = 1\n        one_hot_encoded.append(one_hot_vector)\n    \n    return one_hot_encoded\n\n# Example usage:\nlabels = [0, 1, 2, 1]\nprint(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n\nlabels_with_num_classes = [0, 1, 2, 1]\nprint(to_categorical(labels_with_num_classes, num_classes=5))  # Output: [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]\n```\n\nThis function `to_categorical` takes a 1-D array-like object of non-negative integer labels and converts them into their one-hot encoded representation. If `num_classes` is not provided, it infers the number of classes as `max(labels) + 1`. The function returns a list of lists, where each inner list represents the one-hot encoded vector for a label."}
{"task_id": 484, "completion_id": 0, "completion": "To implement the Lasso regression via coordinate descent, we need to follow these steps:\n\n1. **Feature Expansion**: Convert the input data into polynomial features up to the specified degree.\n2. **Coordinate Descent**: Update each weight in the model iteratively using the provided update rules.\n3. **Prediction**: Use the learned weights to make predictions on the test data.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n    \n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Feature expansion\n    def polynomial_features(X, degree):\n        return np.vander(X, degree + 1, increasing=True)\n    \n    phi_train = polynomial_features(X_train, degree)\n    phi_test = polynomial_features(X_test, degree)\n    \n    # Initialize weights\n    n_features = phi_train.shape[1]\n    w = np.zeros(n_features)\n    \n    # Soft-thresholding operator\n    def soft_threshold(rho, lam):\n        return np.sign(rho) * np.maximum(np.abs(rho) - lam, 0)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        for j in range(n_features):\n            z_j = np.sum(phi_train[:, j]**2)\n            rho_j = np.sum(phi_train[:, j] * (y_train - np.dot(phi_train, w) + phi_train[:, j] * w[j]))\n            \n            if j == 0:\n                w[j] = rho_j / z_j\n            else:\n                w[j] = soft_threshold(rho_j, reg_factor) / z_j\n    \n    # Predictions\n    predictions = np.dot(phi_test, w)\n    \n    # Round predictions to 4 decimal places\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\n# X_train = [1, 2, 3]\n# y_train = [2, 4, 6]\n# X_test = [1.5, 2.5]\n# degree = 2\n# print(lasso_regression_predict(X_train, y_train, X_test, degree))\n```\n\n### Explanation:\n\n- **Feature Expansion**: We use `np.vander` to create a Vandermonde matrix, which represents the polynomial features.\n- **Coordinate Descent**: For each weight, we compute \\(z_j\\) and \\(\\rho_j\\) and update the weight using the soft-thresholding operator.\n- **Soft-thresholding**: This operator helps in applying the \\(\\ell_1\\) regularization.\n- **Predictions**: After learning the weights, we use them to predict the target values for the test data.\n\nThis implementation should work efficiently for the given task and constraints."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    if not X_train:\n        return []\n\n    def sse(y):\n        return np.sum((y - np.mean(y)) ** 2)\n\n    def split_data(X, y, split_point):\n        left_mask = np.array(X) < split_point\n        right_mask = ~left_mask\n        return X[left_mask], y[left_mask], X[right_mask], y[right_mask]\n\n    def find_best_split(X, y):\n        if len(X) < 2:\n            return None, None\n        best_sse = float('inf')\n        best_split = None\n        for i in range(1, len(X)):\n            split_point = (X[i - 1] + X[i]) / 2\n            _, y_left, _, y_right = split_data(X, y, split_point)\n            current_sse = sse(y_left) + sse(y_right)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = split_point\n        return best_split, best_sse\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        split_point, _ = find_best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        X_left, y_left, X_right, y_right = split_data(X, y, split_point)\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (split_point, left_tree, right_tree)\n\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_tree, right_tree = tree\n        if x < split_point:\n            return predict(left_tree, x)\n        else:\n            return predict(right_tree, x)\n\n    # Sort the training data by feature values\n    sorted_indices = np.argsort(X_train)\n    X_sorted = np.array(X_train)[sorted_indices]\n    y_sorted = np.array(y_train)[sorted_indices]\n\n    # Build the regression tree\n    tree = build_tree(X_sorted, y_sorted, 0)\n\n    # Make predictions for the test data\n    predictions = [predict(tree, x) for x in X_test]\n    return predictions\n```\n\nThis code implements a simple univariate regression tree using recursive greedy splitting to minimize the sum of squared errors (SSE). The tree is built by recursively selecting the best split point until the maximum depth is reached or the node contains fewer than two samples. Each leaf node is labeled with the mean of the target values in that leaf. The function then returns predictions for an arbitrary list of test points by traversing the tree."}
{"task_id": 486, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    # Check if inputs are of the same length and non-zero length\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    \n    # Convert inputs to NumPy arrays for element-wise operations\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the mean squared error\n    mse = np.mean((y_true - y_pred) ** 2)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse, 4)\n\n# Example usage:\n# y_true = [3, -0.5, 2, 7]\n# y_pred = [2.5, 0.0, 2, 8]\n# print(mean_squared_error(y_true, y_pred))  # Output: 0.375\n```"}
{"task_id": 487, "completion_id": 0, "completion": "Here's a complete implementation of the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    # Step 1: Initialize centroids\n    centroids = X[:k]\n\n    for _ in range(max_iters):\n        # Step 2: Assign samples to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        # Step 3: Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if len(X[labels == i]) > 0 else centroids[i] for i in range(k)])\n\n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < tol):\n            break\n\n        centroids = new_centroids\n\n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(k_means(X, k))\n```\n\n### Explanation:\n1. **Initialization**: The first `k` samples of `X` are used as the initial centroids.\n2. **Assignment Step**: For each sample, compute the Euclidean distance to each centroid and assign the sample to the nearest centroid.\n3. **Update Step**: Compute the new centroids as the mean of the samples assigned to each centroid. If a centroid has no samples assigned to it, it remains unchanged.\n4. **Convergence Check**: The algorithm checks if the change in centroids is smaller than the tolerance `tol`. If so, it converges.\n5. **Return**: The function returns a list of cluster indices for each sample.\n\nThis implementation ensures that the result is deterministic and easy to test due to the initial centroid selection strategy."}
{"task_id": 488, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Check if the input is empty or not 2-D\n    if X.size == 0 or len(X.shape) != 2:\n        return -1\n    \n    # Calculate the variance for each feature\n    variances = []\n    for i in range(X.shape[1]):\n        mean = np.mean(X[:, i])\n        variance = np.sum((X[:, i] - mean) ** 2) / X.shape[0]\n        variances.append(round(variance, 4))\n    \n    return variances\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(calculate_variance(X))  # Output: [6.6667, 6.6667, 6.6667]\n```\n\nThis function first checks if the input is valid (i.e., it is not empty and is a 2-D array). If the input is invalid, it returns `-1`. Otherwise, it calculates the population variance for each feature (column) in the dataset and returns the results as a list of floats, each rounded to four decimal places."}
{"task_id": 489, "completion_id": 0, "completion": "Here's the implementation of the `to_nominal` function that converts a batch of one-hot encoded vectors to nominal class labels:\n\n```python\nimport numpy as np\n\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    if not isinstance(one_hot, np.ndarray):\n        one_hot = np.array(one_hot)\n    \n    # Check if the input is a 2D array\n    if one_hot.ndim != 2:\n        return -1\n    \n    # Check each row to ensure it is a valid one-hot vector\n    for row in one_hot:\n        if np.sum(row) != 1 or np.any(row < 0) or np.any(row > 1):\n            return -1\n    \n    # Convert one-hot encoding to nominal labels\n    nominal_labels = [np.argmax(row) for row in one_hot]\n    \n    return nominal_labels\n```\n\n### Explanation:\n1. **Input Conversion**: The function first checks if the input is a NumPy array. If not, it converts it to a NumPy array for easier manipulation.\n2. **Dimension Check**: It ensures that the input is a 2-dimensional array. If not, it returns `-1`.\n3. **Validity Check**: For each row in the array, it checks:\n   - The sum of the row should be exactly 1 (indicating a single `1`).\n   - All elements should be either `0` or `1`.\n   If any row fails these checks, the function returns `-1`.\n4. **Conversion to Nominal Labels**: If all rows are valid, it uses `np.argmax` to find the index of the `1` in each row and constructs a list of these indices.\n\nThis function ensures that the input is properly validated and converted, adhering to the constraints provided."}
{"task_id": 490, "completion_id": 0, "completion": "To accomplish the task of converting a one-dimensional vector into a square diagonal matrix, we can follow these steps:\n\n1. **Check if the input is empty**: If the input vector is empty, return an empty list immediately.\n2. **Convert the input to a NumPy array**: This will allow us to easily manipulate the data and create the diagonal matrix.\n3. **Create a diagonal matrix using NumPy**: Use the `np.diag` function to create a diagonal matrix from the input vector.\n4. **Convert the resulting matrix to a list of lists**: Use the `tolist()` method to convert the NumPy array to a list of lists, which is the required output format.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Check if the input is empty\n    if not x:\n        return []\n    \n    # Convert the input to a NumPy array\n    x_array = np.array(x)\n    \n    # Create a diagonal matrix\n    diagonal_matrix = np.diag(x_array)\n    \n    # Convert the matrix to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# print(make_diagonal([1, 2, 3]))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n# print(make_diagonal((4, 5)))     # Output: [[4, 0], [0, 5]]\n# print(make_diagonal([]))         # Output: []\n```\n\n### Explanation:\n- **Empty Input Check**: The function first checks if the input `x` is empty. If it is, it returns an empty list.\n- **Conversion to NumPy Array**: The input is converted to a NumPy array to leverage NumPy's efficient array operations.\n- **Creating the Diagonal Matrix**: The `np.diag` function is used to create a diagonal matrix where the input vector's elements are placed on the main diagonal.\n- **Conversion to List of Lists**: Finally, the resulting diagonal matrix is converted to a list of lists using the `tolist()` method, which matches the required output format.\n\nThis approach ensures that the function handles different types of input (lists, tuples, and NumPy arrays) and produces the correct output format."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm for frequent item-set mining, we need to follow the two major stages outlined in the problem description. Below is the complete implementation of the `fp_growth` function:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Helper class to represent a node in the FP-tree\n    class FPNode:\n        def __init__(self, value, count=1, parent=None, children=None):\n            self.value = value\n            self.count = count\n            self.parent = parent\n            self.children = defaultdict(FPNode) if children is None else children\n        \n        def increment(self):\n            self.count += 1\n    \n    # Step 1: Build the FP-tree\n    def build_fp_tree(transactions, min_sup):\n        # Count the frequency of each item\n        item_counts = Counter(item for transaction in transactions for item in transaction)\n        # Filter out items below min_sup\n        filtered_transactions = [[item for item in transaction if item_counts[item] >= min_sup] for transaction in transactions]\n        \n        # Sort items by frequency (descending) and lexicographically (ascending)\n        sorted_items = sorted(filtered_transactions[0], key=lambda x: (-item_counts[x], x))\n        \n        # Create the root of the FP-tree\n        root = FPNode(None)\n        \n        # Insert each transaction into the FP-tree\n        for transaction in filtered_transactions:\n            current_node = root\n            for item in sorted_items:\n                if item in transaction:\n                    if item not in current_node.children:\n                        current_node.children[item] = FPNode(item, parent=current_node)\n                    current_node = current_node.children[item]\n                    current_node.increment()\n        \n        return root, item_counts\n    \n    # Step 2: Generate conditional pattern bases\n    def generate_conditional_pattern_bases(node, prefix, conditional_patterns):\n        if node.parent is not None:\n            conditional_patterns.append((prefix + (node.value,), node.count))\n            generate_conditional_pattern_bases(node.parent, prefix, conditional_patterns)\n    \n    # Step 3: Build conditional FP-tree\n    def build_conditional_fp_tree(conditional_patterns, min_sup):\n        # Create a new FP-tree from the conditional patterns\n        root = FPNode(None)\n        for pattern, count in conditional_patterns:\n            current_node = root\n            for item in pattern:\n                if item not in current_node.children:\n                    current_node.children[item] = FPNode(item, parent=current_node)\n                current_node = current_node.children[item]\n                current_node.increment()\n        return root\n    \n    # Step 4: Mine the conditional FP-tree\n    def mine_fp_tree(root, prefix, frequent_itemsets, min_sup):\n        # Collect all nodes in the tree in reverse order of their counts\n        nodes = []\n        for node in root.children.values():\n            nodes.extend(node.children.values())\n        nodes.sort(key=lambda x: (-x.count, x.value))\n        \n        # Enumerate all non-empty combinations of items on a single path\n        if len(nodes) == 1 and nodes[0].value is not None:\n            path = [(nodes[0].value,)]\n            while nodes[0].parent is not None:\n                path.append((nodes[0].parent.value,))\n                nodes[0] = nodes[0].parent\n            path.reverse()\n            for r in range(1, len(path) + 1):\n                for combination in itertools.combinations(path, r):\n                    frequent_itemsets.add(tuple(prefix) + tuple(combination))\n        \n        # Recursively mine the conditional FP-tree\n        for node in nodes:\n            if node.value is not None:\n                conditional_patterns = []\n                generate_conditional_pattern_bases(node, (), conditional_patterns)\n                if conditional_patterns:\n                    conditional_root = build_conditional_fp_tree(conditional_patterns, min_sup)\n                    mine_fp_tree(conditional_root, prefix + (node.value,), frequent_itemsets, min_sup)\n    \n    # Main execution\n    if not transactions or min_sup <= 0:\n        return []\n    \n    # Build the initial FP-tree\n    fp_tree, item_counts = build_fp_tree(transactions, min_sup)\n    \n    # Initialize the set to store frequent itemsets\n    frequent_itemsets = set()\n    \n    # Mine the FP-tree\n    mine_fp_tree(fp_tree, (), frequent_itemsets, min_sup)\n    \n    # Convert the set to a sorted list of tuples\n    result = sorted(frequent_itemsets, key=lambda x: (len(x), x))\n    \n    return result\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis implementation follows the FP-Growth algorithm as described. It constructs the FP-tree, generates conditional pattern bases, builds conditional FP-trees, and recursively mines the trees to find all frequent item-sets. The final result is sorted by length and lexicographically."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X_np = np.array(X)\n    n_samples, n_features = X_np.shape\n    result = []\n\n    for _ in range(n_samples):\n        result.append([1.0])  # Start with the degree-0 term\n\n    for d in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), d):\n            for i in range(n_samples):\n                term = 1.0\n                for index in combo:\n                    term *= X_np[i, index]\n                result[i].append(term)\n\n    return result\n```\n\nThis implementation follows the requirements by generating all possible monomials of the input features up to the specified degree. It uses `itertools.combinations_with_replacement` to generate the combinations of feature indices for each degree, ensuring that the terms are ordered by degree and lexicographically within the same degree. The resulting matrix is returned as a list of lists."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_value = np.mean(squared_diffs)\n    \n    return round(mse_value, 4)\n```\n\nThis function first checks if the input `y` is empty and returns `-1` if it is. Otherwise, it converts the input to a NumPy array, calculates the mean of the array, computes the squared differences from the mean, and then calculates the mean of these squared differences to get the MSE. Finally, it rounds the result to four decimal places before returning it."}
{"task_id": 494, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    # Convert preds to a NumPy array if it's not already\n    preds_array = np.array(preds)\n    \n    # Check if the input is valid\n    if preds_array.ndim != 2:\n        raise ValueError(\"Input must be a 2D array or list.\")\n    \n    # Initialize the result list\n    aggregated_preds = []\n    \n    # Iterate over each sample\n    for i in range(preds_array.shape[1]):\n        sample_preds = preds_array[:, i]\n        \n        if classifier:\n            # Majority voting for classification\n            unique, counts = np.unique(sample_preds, return_counts=True)\n            majority_vote = unique[np.argmax(counts)]\n            aggregated_preds.append(majority_vote)\n        else:\n            # Averaging for regression\n            average_pred = np.mean(sample_preds)\n            aggregated_preds.append(round(average_pred, 4))\n    \n    return aggregated_preds\n```\n\nThis function takes a 2D array or list of predictions from multiple models and aggregates them according to whether the task is classification or regression. For classification, it uses majority voting, and for regression, it calculates the arithmetic mean of the predictions, rounding to four decimal places."}
{"task_id": 495, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Compute the mean of each column\n    means = np.mean(X, axis=0)\n    \n    # Step 2: Compute the population standard deviation of each column\n    stds = np.std(X, axis=0, ddof=0)\n    \n    # Step 3: Standardize each column\n    standardized_X = np.zeros_like(X, dtype=float)\n    for i in range(X.shape[1]):\n        if stds[i] != 0:\n            standardized_X[:, i] = (X[:, i] - means[i]) / stds[i]\n        else:\n            standardized_X[:, i] = 0\n    \n    # Step 4: Round every element to 4 decimal places and convert to list\n    return np.round(standardized_X, decimals=4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# print(standardize(X))\n```\n\nThis function follows the steps outlined in the task description to standardize each column of the input 2-D NumPy array `X`. It computes the mean and standard deviation for each column, applies the standardization formula, and handles columns with zero variance by setting them to zero. Finally, it rounds the results to four decimal places and returns them as a Python list."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    # Apply the affine transformation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (constant for affine function)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (zero for affine function)\n    grad2 = np.zeros_like(x)\n    \n    # Round all results to 4 decimal places\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    \n    # Convert back to lists before returning\n    return y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist()\n\n# Example usage:\n# x = [1, 2, 3]\n# result = apply_affine(x, slope=2.0, intercept=3.0)\n# print(result)  # Output: ([5.0, 7.0, 9.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis function takes a 1-D list or NumPy array `x`, applies the affine transformation using the provided `slope` and `intercept`, and returns the transformed values along with their first and second derivatives. All results are rounded to four decimal places."}
{"task_id": 497, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to a NumPy array for easy computation\n    x_array = np.array(x)\n    \n    # Compute the exponential function\n    exp_x = np.exp(x_array)\n    \n    # If order is 1 or 2, the derivative is still exp_x\n    if order == 1 or order == 2:\n        result = exp_x\n    else:\n        result = exp_x\n    \n    # Round the result to 6 decimal places\n    result_rounded = np.round(result, 6)\n    \n    # Convert the result back to a list with the same shape as the input\n    return result_rounded.tolist()\n\n# Example usage:\ninput_data = [[0, 1], [2, -1]]\norder = 0\nprint(exponential_activation(input_data, order))\n```\n\nThis function `exponential_activation` computes the exponential activation function or its first two derivatives based on the specified `order`. It handles both nested lists and NumPy arrays, ensuring the output maintains the same shape as the input and rounds each numeric entry to six decimal places. If an invalid `order` is provided, it returns `-1`."}
{"task_id": 498, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float = 0.3, order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x_array = np.array(x)\n    \n    if order == 0:\n        # Compute the Leaky ReLU function value\n        result = np.where(x_array > 0, x_array, alpha * x_array)\n    elif order == 1:\n        # Compute the first derivative of Leaky ReLU\n        result = np.where(x_array > 0, 1, alpha)\n    elif order == 2:\n        # The second derivative is identically zero\n        result = np.zeros_like(x_array)\n    else:\n        # Invalid order, return an empty list\n        return []\n    \n    # Convert the result to a list and return\n    return result.tolist()\n```\n\nThis implementation of the `leaky_relu` function handles the computation of the Leaky ReLU activation function, its first derivative, and its second derivative based on the specified `order` parameter. The function ensures that the input is converted to a NumPy array for efficient computation and then returns the result as a Python list using the `tolist()` method."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Step 1: Standardise each feature\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    \n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)  # Population variance\n    std[std == 0] = 1  # Avoid division by zero for features with zero variance\n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, bias=True)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    projected_data = standardized_data @ sorted_eigenvectors[:, :k]\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(projected_data, 4).tolist()\n```\n\nThis implementation follows the steps outlined in the task description to perform PCA dimensionality reduction. It includes standardization of the data, computation of the covariance matrix, eigen-decomposition, sorting of eigenvalues and eigenvectors, fixing the sign of eigenvectors, and projecting the data onto the first `k` principal components. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the average of the training labels\n    F = np.mean(y_train)\n    \n    # Store the predictions of each stump\n    stump_predictions = []\n    \n    for m in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Initialize the best stump\n        best_stump = None\n        best_error = float('inf')\n        \n        # Iterate over each feature to find the best split\n        for feature_index in range(X_train.shape[1]):\n            unique_values = np.unique(X_train[:, feature_index])\n            \n            for threshold in unique_values:\n                # Split the data based on the threshold\n                left_indices = X_train[:, feature_index] <= threshold\n                right_indices = X_train[:, feature_index] > threshold\n                \n                # Calculate the predictions for the left and right sides\n                left_prediction = np.mean(residuals[left_indices])\n                right_prediction = np.mean(residuals[right_indices])\n                \n                # Calculate the total squared error for this split\n                error = np.sum((residuals[left_indices] - left_prediction) ** 2) + \\\n                        np.sum((residuals[right_indices] - right_prediction) ** 2)\n                \n                # Update the best stump if this one has a lower error\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_index, threshold, left_prediction, right_prediction)\n        \n        # Add the best stump's prediction to the ensemble\n        feature_index, threshold, left_prediction, right_prediction = best_stump\n        stump_predictions.append(best_stump)\n        \n        # Update the model with the best stump's contribution\n        stump_contribution = np.zeros_like(F)\n        stump_contribution[X_train[:, feature_index] <= threshold] = left_prediction\n        stump_contribution[X_train[:, feature_index] > threshold] = right_prediction\n        F += learning_rate * stump_contribution\n    \n    # Predict the class labels for the test set\n    F_test = np.full_like(y_train, F)\n    for feature_index, threshold, left_prediction, right_prediction in stump_predictions:\n        stump_contribution = np.zeros_like(F_test)\n        stump_contribution[X_test[:, feature_index] <= threshold] = left_prediction\n        stump_contribution[X_test[:, feature_index] > threshold] = right_prediction\n        F_test += learning_rate * stump_contribution\n    \n    # Threshold the final scores at 0.5 to get binary class labels\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X_train = [[0, 1], [1, 0], [1, 1], [0, 0]]\n# y_train = [0, 1, 1, 0]\n# X_test = [[0, 1], [1, 0]]\n# predictions = gradient_boosting_classifier(X_train, y_train, X_test)\n# print(predictions)  # Output: [0, 1]\n```\n\nThis implementation follows the guidelines provided and constructs a simple gradient boosting classifier using decision stumps. It iteratively fits stumps to the residuals of the current model, updating the model with each stump's contribution, and finally predicts class labels for the test set by thresholding the final regression scores."}
{"task_id": 501, "completion_id": 0, "completion": "```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr\n```"}
{"task_id": 502, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order == 0:\n        # Apply the Hard-Sigmoid activation function\n        result = np.where(z < -2.5, 0, np.where(z > 2.5, 1, 0.2 * z + 0.5))\n    elif order == 1:\n        # Apply the first derivative of the Hard-Sigmoid function\n        result = np.where((z >= -2.5) & (z <= 2.5), 0.2, 0)\n    elif order == 2:\n        # The second derivative is identically zero\n        result = np.zeros_like(z)\n    else:\n        # Return an empty list for unsupported order\n        return []\n\n    # Round the result to 4 decimal places and convert to a list\n    return np.round(result, 4).tolist()\n```\n\nThis implementation defines the `hard_sigmoid` function which computes the Hard-Sigmoid activation function and its first and second derivatives based on the `order` parameter. The function handles the input array `z` element-wise and returns the results rounded to four decimal places. If an unsupported `order` is provided, it returns an empty list."}
{"task_id": 503, "completion_id": 0, "completion": "To implement the `selective_update` function in a purely functional way, we need to ensure that the original hyperparameters dictionary is not modified. This can be achieved by creating a deep copy of the dictionary before making any updates. We will then iterate over the `updates` dictionary and apply the changes only to the keys that exist in the copied dictionary.\n\nHere's the implementation:\n\n```python\nfrom copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    \n    # Create a deep copy of the hyperparameters dictionary\n    hparams_copy = deepcopy(hparams)\n    \n    if updates is not None:\n        for key, value in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = value\n    \n    return hparams_copy\n\n# Example usage:\nhparams = {'lr': 0.1, 'momentum': 0.9}\nupdates = {'lr': 0.01, 'weight_decay': 0.0001}\nresult = selective_update(hparams, updates)\nprint(result)  # Output: {'lr': 0.01, 'momentum': 0.9}\n```\n\n### Explanation:\n1. **Check for `None` Input**: The function first checks if `hparams` is `None`. If it is, the function returns `-1` immediately.\n2. **Deep Copy**: A deep copy of `hparams` is created using `deepcopy` to ensure that the original dictionary is not modified.\n3. **Iterate and Update**: If `updates` is not `None`, the function iterates over each key-value pair in `updates`. For each key, it checks if the key exists in the copied dictionary (`hparams_copy`). If the key exists, the corresponding value in the copied dictionary is updated.\n4. **Return the Updated Dictionary**: Finally, the function returns the updated dictionary.\n\nThis approach ensures that the function behaves purely functionally, adhering to the constraints provided."}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Positive phase: compute hidden probabilities given visible data\n    m, n_v = X.shape\n    n_h = W.shape[1]\n    \n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Negative phase: run k Gibbs steps\n    v_k_prob = X\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round to 4 decimal places and convert to list of lists\n    W_new_rounded = np.round(W_new, decimals=4).tolist()\n\n    return W_new_rounded\n```\n\nThis implementation follows the steps outlined in the task description. It computes the positive phase hidden probabilities, runs `k` full Gibbs steps without stochastic sampling, calculates the positive and negative gradients, updates the weight matrix, and returns the updated matrix rounded to four decimal places as a list of lists."}
{"task_id": 508, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    return [value for key, value in params.items() if name in key]\n```\n\nThis solution iterates over the items of the dictionary while preserving the insertion order, checks if the given substring is present in each key, and collects the corresponding values into a list. If no keys contain the substring, it naturally returns an empty list."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the component-wise absolute differences\n    differences = np.abs(x - y)\n    \n    # Find the maximum difference\n    max_difference = np.max(differences)\n    \n    # Return the result rounded to four decimal places\n    return round(max_difference, 4)\n```\n\nThis function first checks if the input vectors have the same length. If they do not, it returns `-1`. Otherwise, it calculates the component-wise absolute differences between the vectors, finds the maximum of these differences, and returns the result rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the Variational Auto-Encoder (VAE) loss for Bernoulli visible units, we need to calculate both the reconstruction loss and the KL divergence, then sum them up and take the average over the mini-batch. Here's how you can do it:\n\n1. **Reconstruction Loss**: This is the element-wise binary cross-entropy between the true input `y` and the reconstruction `y_pred`. For binary data, the binary cross-entropy loss is given by:\n   \\[\n   \\text{Reconstruction Loss} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i) \\right]\n   \\]\n   where \\( N \\) is the number of samples in the batch.\n\n2. **KL Divergence**: This measures the difference between the approximate posterior \\( q(t|x) \\) and the prior \\( p(t) \\). For a Gaussian prior and a Gaussian approximate posterior, the KL divergence is:\n   \\[\n   \\text{KL Divergence} = -\\frac{1}{2} \\sum_{i=1}^{D} \\left[ 1 + \\log(\\sigma_i^2) - \\mu_i^2 - \\sigma_i^2 \\right]\n   \\]\n   where \\( D \\) is the dimensionality of the latent space.\n\n3. **Numerical Stability**: To ensure numerical stability, we clip the predicted values `y_pred` to be within the open interval \\((\\varepsilon, 1 - \\varepsilon)\\), where \\(\\varepsilon = \\text{np.finfo(float).eps}\\).\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n\n    # Reconstruction Loss: Binary Cross-Entropy\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n\n    # KL Divergence\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n\n    # Total VAE Loss\n    total_loss = reconstruction_loss + kl_divergence\n\n    # Return the loss rounded to 6 decimal places\n    return round(total_loss, 6)\n```\n\nThis function calculates the VAE loss for a mini-batch of data, ensuring numerical stability by clipping the predicted probabilities, and returns the average loss rounded to six decimal places."}
{"task_id": 511, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n    if n_arms < 1:\n        return []\n    \n    # Step 1: Draw n_arms independent samples from a uniform distribution on [0, 1)\n    samples = np.random.uniform(0, 1, n_arms)\n    \n    # Step 2: Normalize the samples so that they sum up to 1\n    probabilities = samples / np.sum(samples)\n    \n    # Step 3: Round each probability to 4 decimal places\n    rounded_probabilities = [round(p, 4) for p in probabilities]\n    \n    return rounded_probabilities\n\n# Example usage:\n# print(random_bernoulli_mab(5))\n```\n\nThis function `random_bernoulli_mab` generates a list of success probabilities for a Bernoulli multi-armed bandit environment. It ensures that the probabilities are valid by normalizing them and rounding them to four decimal places. If the number of arms is less than one, it returns an empty list."}
{"task_id": 512, "completion_id": 0, "completion": "```python\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    _, _, h, w = image_shape\n    k_h, k_w = pool_shape\n    s_h, s_w = stride\n\n    # Check if the kernel fits inside the input\n    if k_h > h or k_w > w:\n        return -1\n\n    # Calculate the output dimensions\n    out_h = (h - k_h) / s_h + 1\n    out_w = (w - k_w) / s_w + 1\n\n    # Check if the output dimensions are integers\n    if out_h.is_integer() and out_w.is_integer():\n        return int(out_h), int(out_w)\n    else:\n        return -1\n```"}
{"task_id": 513, "completion_id": 0, "completion": "To implement the Factorization Machine (FM) regression prediction, we need to follow the given formula and ensure that our implementation works efficiently for any number of samples, features, and latent factors. We'll use NumPy for numerical computations to handle the matrix operations effectively.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Initialize predictions with the global bias\n    predictions = np.full(n_samples, w0)\n    \n    # Add linear term to predictions\n    predictions += X @ w\n    \n    # Calculate the pairwise interaction term\n    V_times_X = X @ V\n    sum_of_squares = np.sum(V_times_X**2, axis=1)\n    square_of_sums = np.sum(V_times_X, axis=1)**2\n    interaction_term = 0.5 * (square_of_sums - sum_of_squares)\n    \n    # Add interaction term to predictions\n    predictions += interaction_term\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 0, 1], [0, 1, 1]]\n# w0 = 0.1\n# w = [0.5, 0.3, 0.2]\n# V = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\n# print(fm_predict(X, w0, w, V))\n```\n\n### Explanation:\n1. **Input Conversion**: We convert the input lists to NumPy arrays to leverage efficient matrix operations.\n2. **Global Bias**: We initialize the predictions with the global bias term `w0`.\n3. **Linear Term**: We compute the linear term by taking the dot product of the feature matrix `X` and the weight vector `w`.\n4. **Pairwise Interaction Term**:\n   - Compute `V_times_X`, which is the matrix product of `X` and `V`.\n   - Calculate the sum of squares of each row in `V_times_X`.\n   - Calculate the square of the sum of each row in `V_times_X`.\n   - The interaction term is then computed as `0.5 * (square_of_sums - sum_of_squares)`.\n5. **Final Predictions**: We add the interaction term to the linear term and round the results to 4 decimal places.\n6. **Return**: The function returns the predictions as a list of floats.\n\nThis implementation ensures that the FM prediction is computed efficiently for any number of samples, features, and latent factors."}
{"task_id": 514, "completion_id": 0, "completion": "Here's the implementation of the `switch_phase` function according to the specified rules:\n\n```python\ndef switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    # Validate the current phase\n    if current_phase not in [\"training\", \"testing\"]:\n        return -1\n    \n    # Check if both switches are provided\n    if set_train is not None and set_test is not None:\n        return -1\n    \n    # Update the phase based on the switches\n    if set_train is not None:\n        return \"training\" if set_train else \"testing\"\n    elif set_test is not None:\n        return \"testing\" if set_test else \"training\"\n    else:\n        # Toggle the phase\n        return \"testing\" if current_phase == \"training\" else \"training\"\n\n# Example usage:\nprint(switch_phase(\"training\"))  # Output: \"testing\"\nprint(switch_phase(\"testing\"))   # Output: \"training\"\nprint(switch_phase(\"training\", set_train=True))  # Output: \"training\"\nprint(switch_phase(\"training\", set_test=True))   # Output: \"testing\"\nprint(switch_phase(\"training\", set_train=False)) # Output: \"testing\"\nprint(switch_phase(\"training\", set_test=False))  # Output: \"training\"\nprint(switch_phase(\"invalid\", set_train=True))  # Output: -1\nprint(switch_phase(\"training\", set_train=True, set_test=False))  # Output: -1\n```\n\nThis function checks for invalid inputs and handles the phase switching logic as described in the task description."}
{"task_id": 515, "completion_id": 0, "completion": "To solve the problem of flattening a nested parameter dictionary, we need to recursively traverse the dictionary and construct a new dictionary with keys that represent the full path to each value using dots (`.`) to separate the levels.\n\nHere's the implementation of the `flatten_parameters` function:\n\n```python\nfrom typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    def _flatten(d: Dict[str, Any], parent_key: str = '') -> Dict[str, Any]:\n        \"\"\"Helper function to perform the recursive flattening.\"\"\"\n        items = {}\n        for k, v in d.items():\n            new_key = f\"{parent_key}.{k}\" if parent_key else k\n            if isinstance(v, dict):\n                items.update(_flatten(v, new_key))\n            else:\n                items[new_key] = v\n        return items\n\n    return _flatten(params)\n\n# Example usage:\nparams = {\n    \"optimizer\": {\n        \"type\": \"SGD\",\n        \"config\": {\n            \"lr\": 0.01,\n            \"momentum\": 0.9\n        }\n    },\n    \"epochs\": 25\n}\n\nflattened_params = flatten_parameters(params)\nprint(flattened_params)\n```\n\n### Explanation:\n\n1. **Helper Function `_flatten`:** This is a recursive helper function that takes a dictionary `d` and a `parent_key` string. The `parent_key` is used to build the full path for each key in the flattened dictionary.\n\n2. **Iterating Over Items:** We iterate over each key-value pair in the dictionary `d`.\n\n3. **Building New Key:** For each key `k`, we construct a new key `new_key` by appending `k` to `parent_key` with a dot separator. If `parent_key` is empty (i.e., we are at the top level), `new_key` is just `k`.\n\n4. **Recursive Flattening:** If the value `v` is a dictionary, we recursively call `_flatten` with `v` and `new_key` as the new `parent_key`. We update the `items` dictionary with the result of this recursive call.\n\n5. **Adding Non-Dict Values:** If `v` is not a dictionary, we directly add the key-value pair `(new_key, v)` to the `items` dictionary.\n\n6. **Returning the Result:** The `_flatten` function returns the `items` dictionary, which contains the flattened key-value pairs.\n\n7. **Main Function:** The `flatten_parameters` function simply calls the `_flatten` helper function with the input dictionary `params` and returns the result.\n\nThis approach ensures that the original dictionary is not mutated and a new flat dictionary is returned as required."}
{"task_id": 516, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    a = np.array(a)\n    b = np.array(b)\n    \n    # Check if the vectors have the same length\n    if a.size != b.size:\n        return -1\n    \n    # Compute the Euclidean distance\n    distance = np.sqrt(np.sum((a - b) ** 2))\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(euclidean_distance([1, 2, 3], [4, 5, 6]))  # Output: 5.1962\n# print(euclidean_distance([1, 2], [3, 4, 5]))     # Output: -1\n```\n\nThis function first converts the input vectors to NumPy arrays. It then checks if the vectors have the same length, returning `-1` if they do not. If they are of equal length, it calculates the Euclidean distance using the formula provided and returns the result rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the `sigmoid` function according to the specified requirements, we need to handle different types of inputs: scalars, lists/tuples, and NumPy arrays. Additionally, we must ensure numerical stability for very large or small values of `z`. Here's how you can achieve this:\n\n1. **Scalar Input**: If `z` is a scalar, compute the sigmoid directly and return the result rounded to four decimal places.\n2. **List/Tuple Input**: Convert the list or tuple to a NumPy array, compute the sigmoid, and then convert the result back to a list.\n3. **NumPy Array Input**: Compute the sigmoid directly on the array.\n4. **Numerical Stability**: Use the property that for large positive `z`, `sigmoid(z)` approaches 1, and for large negative `z`, it approaches 0. This can be handled using conditional checks.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Handle scalar input\n        if z > 700:\n            return 1.0\n        elif z < -700:\n            return 0.0\n        else:\n            return round(1 / (1 + np.exp(-z)), 4)\n    \n    # Convert list/tuple to numpy array\n    z_array = np.array(z)\n    \n    # Apply sigmoid function element-wise\n    sigmoid_values = 1 / (1 + np.exp(-z_array))\n    \n    # Round to four decimal places\n    sigmoid_values_rounded = np.round(sigmoid_values, 4)\n    \n    # Convert back to list if input was not a NumPy array\n    if isinstance(z, (list, tuple)):\n        return sigmoid_values_rounded.tolist()\n    \n    return sigmoid_values_rounded\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n- **Scalar Handling**: Direct computation with checks for large `z` values to avoid overflow.\n- **Array Handling**: Conversion to NumPy array for vectorized operations, followed by rounding and conversion back to list if necessary.\n- **Numerical Stability**: Special cases for `z > 700` and `z < -700` ensure that the function does not overflow and returns the correct limit values.\n\nThis implementation ensures that the function works correctly for all specified input types and maintains numerical stability."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        # Convert actual if it's one-hot encoded\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Convert predicted if it's one-hot encoded\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # If z is a scalar, compute the gradient and round it\n        return round(z * (1 - z), 4)\n    \n    # Convert the input to a NumPy array for element-wise operations\n    z_array = np.array(z)\n    \n    # Compute the gradient element-wise\n    gradient_array = z_array * (1 - z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_gradient_array = np.round(gradient_array, 4)\n    \n    # Convert the result back to the original type (list or tuple)\n    if isinstance(z, list):\n        # If the input was a list, convert the array back to a list\n        return rounded_gradient_array.tolist()\n    elif isinstance(z, tuple):\n        # If the input was a tuple, convert the array back to a tuple\n        return tuple(rounded_gradient_array.tolist())\n    \n    # If the input was a NumPy array, return the array directly\n    return rounded_gradient_array\n\n# Example usage:\nprint(sigmoid_grad(0.5))  # Output: 0.25\nprint(sigmoid_grad([0.1, 0.9]))  # Output: [0.09, 0.009]\nprint(sigmoid_grad(np.array([[0.2, 0.8], [0.3, 0.7]])))  # Output: [[0.16, 0.019999999999999996], [0.21, 0.02]]\n```\n\nThis function handles various types of inputs, including scalars, lists, and NumPy arrays, and returns the gradient of the sigmoid function rounded to four decimal places. It maintains the structure of the input, returning a float for scalars and a list or NumPy array for other types."}
{"task_id": 521, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    # Check if the input is a scalar\n    if isinstance(z, (int, float)) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        return 1 if z > 0 else 0\n    \n    # Convert input to a NumPy array if it's not already\n    z_array = np.array(z)\n    \n    # Compute the ReLU gradient using vectorized operations\n    grad = np.where(z_array > 0, 1, 0)\n    \n    # Convert the result back to a list to match the output format requirement\n    return grad.tolist()\n```\n\nThis implementation handles both scalar and array-like inputs. For scalar inputs, it directly returns `1` if the input is greater than `0`, otherwise `0`. For array-like inputs, it uses NumPy's `where` function to apply the ReLU gradient logic element-wise and then converts the result back to a list to ensure the output format matches the requirements."}
{"task_id": 522, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # Reset the NumPy random seed to 42 for reproducibility\n    np.random.seed(42)\n    \n    # Generate the tensor with the specified shape\n    tensor = np.random.randn(*weight_shape)\n    \n    # Round each element to 4 decimal places\n    rounded_tensor = np.round(tensor, decimals=4)\n    \n    # Convert the NumPy array to a Python list\n    python_list = rounded_tensor.tolist()\n    \n    return python_list\n```\n\nThis function ensures that the random numbers generated are reproducible by resetting the NumPy random seed to 42 each time the function is called. It then generates numbers from the standard normal distribution, rounds them to four decimal places, and converts the resulting NumPy array into a Python list before returning it."}
{"task_id": 523, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    # Determine the fan-in based on the shape\n    if len(weight_shape) == 2:\n        # Fully-connected / dense layer\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # Convolutional kernel\n        fan_in = np.prod(weight_shape[:3])\n    else:\n        # Treat as a 2-D tensor by default\n        fan_in = weight_shape[0]\n\n    # Calculate the standard deviation for the He normal distribution\n    std_dev = np.sqrt(2 / fan_in)\n\n    # Generate the weights from a normal distribution with mean 0 and calculated std_dev\n    weights = np.random.normal(loc=0, scale=std_dev, size=weight_shape)\n\n    # Round the weights to four decimal places and convert to a nested list\n    rounded_weights = np.round(weights, decimals=4).tolist()\n\n    return rounded_weights\n\n# Example usage:\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducibility\n    weight_shape = (2, 2)\n    print(he_normal(weight_shape))\n```\n\nThis code defines a function `he_normal` that initializes a weight tensor using the He normal distribution. It calculates the fan-in based on the provided shape, computes the standard deviation, generates the weights, rounds them to four decimal places, and returns them as a nested list. The example usage demonstrates how to use the function with a fixed random seed for reproducibility."}
{"task_id": 525, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    # Ensure y is a 1D array\n    if y.ndim == 2:\n        y = y.flatten()\n    \n    # Mean-center the data\n    x_mean = X.mean(axis=0)\n    y_mean = y.mean()\n    X_centered = X - x_mean\n    y_centered = y - y_mean\n    \n    # Add a column of ones to X_centered for the bias term\n    X_centered_with_bias = np.column_stack((np.ones(X_centered.shape[0]), X_centered))\n    \n    # Compute the optimal weights using the closed-form solution\n    identity_matrix = np.eye(X_centered_with_bias.shape[1])\n    lambda_identity = lambda_ * identity_matrix\n    try:\n        # Try to invert the matrix\n        w_optimal = np.linalg.inv(X_centered_with_bias.T @ X_centered_with_bias + lambda_identity) @ X_centered_with_bias.T @ y_centered\n    except np.linalg.LinAlgError:\n        # If the matrix is singular, use the Moore-Penrose pseudo-inverse\n        w_optimal = np.linalg.pinv(X_centered_with_bias.T @ X_centered_with_bias + lambda_identity) @ X_centered_with_bias.T @ y_centered\n    \n    # Extract the bias and weights\n    bias = w_optimal[0]\n    weights = w_optimal[1:].tolist()\n    \n    # Round the results to 4 decimal places\n    weights = [round(weight, 4) for weight in weights]\n    bias = round(bias, 4)\n    \n    return weights, bias\n```"}
{"task_id": 527, "completion_id": 0, "completion": "```python\nimport os\nfrom typing import List, Union\n\ndef extract_archive(file_path: str, path: str = '.', archive_format: Union[str, List[str], None] = 'auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    # Define the supported archive formats and their extensions\n    supported_formats = {\n        'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'],\n        'zip': ['.zip']\n    }\n\n    # Handle the 'auto' case\n    if archive_format == 'auto':\n        archive_format = ['tar', 'zip']\n\n    # If archive_format is None or an empty list, return False immediately\n    if archive_format is None or not archive_format:\n        return False\n\n    # Ensure archive_format is a list\n    if isinstance(archive_format, str):\n        archive_format = [archive_format]\n\n    # Extract the file extension from the file_path\n    _, ext = os.path.splitext(file_path)\n    ext = ext.lower()\n\n    # Check if the file extension matches any of the allowed formats\n    for format_type in archive_format:\n        if format_type in supported_formats:\n            if ext in supported_formats[format_type]:\n                return True\n\n    return False\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create two equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a mesh grid from these arrays\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier processing\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Calculate the decision boundary values\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back into a grid\n    labels_grid = labels_flat.reshape(grid_n, grid_n)\n    \n    # Convert the NumPy array to a Python list of lists\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis function generates a grid of predictions for a 2-D linear classifier using the provided weight vector `W`, bias `b`, and original data set `X`. The grid is created by first determining the range of the data in each dimension, then generating equally spaced points within these ranges. The classifier's decision boundary is evaluated at each grid point, and the results are stored in a 2-D list."}
{"task_id": 529, "completion_id": 0, "completion": "```python\nimport math\n\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        return f\"{current:7}/Unknown\"\n    \n    d = len(str(target))\n    current_str = f\"{current:{d}}\"\n    target_str = str(target)\n    \n    prog_width = int(width * current / target)\n    \n    if prog_width > 0:\n        bar = '=' * (prog_width - 1)\n        if current < target:\n            bar += '>'\n        else:\n            bar += '='\n    else:\n        bar = ''\n    \n    bar += '.' * (width - prog_width)\n    \n    return f\"{current_str}/{target_str} [{bar}]\"\n```\n\nThis function generates an ASCII progress bar based on the given parameters. It handles both cases where the target is known and unknown, formatting the output according to the specified rules."}
{"task_id": 530, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions to avoid log(0) which is undefined\n    y_pred_clipped = np.clip(y_pred, 1e-7, 1 - 1e-7)\n    \n    # Calculate the binary cross-entropy loss for each sample\n    loss = - (y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    \n    # Return the mean loss rounded to 4 decimal places\n    return round(np.mean(loss), 4)\n```\n\nThis function implements the mean binary cross-entropy loss calculation as described. It first clips the predicted probabilities to ensure numerical stability, then computes the loss for each sample using the formula provided, and finally returns the mean loss rounded to four decimal places."}
{"task_id": 531, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError(\"Window length must be strictly positive.\")\n    \n    if symmetric:\n        # Symmetric window: sample exactly L points from -pi to pi\n        theta = np.linspace(-np.pi, np.pi, window_len)\n    else:\n        # Periodic window: sample L+1 points from -pi to pi and discard the last one\n        theta = np.linspace(-np.pi, np.pi, window_len + 1)[:-1]\n    \n    window = np.zeros(window_len)\n    for k, a_k in enumerate(coefs):\n        window += a_k * np.cos(k * theta)\n    \n    return [round(value, 4) for value in window]\n\n# Example usage:\n# window = generalized_cosine(10, [0.42, -0.5, 0.08])\n# print(window)\n```\n\nThis function generates a generalized cosine window based on the provided coefficients and window length. It handles both symmetric and periodic cases as specified by the `symmetric` flag. The window values are rounded to four decimal places before being returned."}
{"task_id": 532, "completion_id": 0, "completion": "```python\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n\n    total_parameters = 0\n    for i in range(len(layers) - 1):\n        n_in = layers[i]\n        n_out = layers[i + 1]\n        weights = n_in * n_out\n        biases = n_out\n        total_parameters += weights + biases\n\n    return total_parameters\n```\n\nThis function iterates through the list of layer sizes, calculates the number of weights and biases for each pair of consecutive layers, and sums them up to get the total number of trainable parameters. If there are fewer than two layers, it returns 0, as no trainable parameters exist."}
{"task_id": 533, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x_array = np.array(x)\n    \n    # Calculate the PDF using the formula\n    pdf_values = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-(x_array - mean)**2 / (2 * sigma**2))\n    \n    # Round the values to 4 decimal places\n    rounded_pdf_values = np.round(pdf_values, 4)\n    \n    # Convert back to list if x was not a single number\n    if isinstance(x, (int, float)):\n        return float(rounded_pdf_values)\n    else:\n        return rounded_pdf_values.tolist()\n\n# Example usage:\n# print(gaussian_likelihood(0, 0, 1))  # Should return 0.3989\n# print(gaussian_likelihood([0, 1, 2], 0, 1))  # Should return [0.3989, 0.2419, 0.0539]\n```"}
{"task_id": 534, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    Z_array = np.array(Z)\n    \n    # Apply the sigmoid function element-wise\n    sigmoid_values = 1 / (1 + np.exp(-Z_array))\n    \n    # Round to 4 decimal places\n    rounded_values = np.round(sigmoid_values, 4)\n    \n    # Convert back to the original type if it was a scalar\n    if isinstance(Z, (int, float)):\n        return float(rounded_values)\n    \n    # Convert to a list to preserve the original shape\n    return rounded_values.tolist()\n\n# Example usage:\n# Scalar input\nprint(sigmoid_(0))  # Output: 0.5\n\n# 1-D list input\nprint(sigmoid_([1, -1, 0]))  # Output: [0.7311, 0.2689, 0.5]\n\n# 2-D list input\nprint(sigmoid_([[1, -1], [0, 2]]))  # Output: [[0.7311, 0.2689], [0.5, 0.8808]]\n```\n\nThis function `sigmoid_` handles both scalar and array-like inputs, applies the sigmoid transformation, rounds the results to four decimal places, and returns the appropriate type based on the input."}
{"task_id": 536, "completion_id": 0, "completion": "Here's the implementation of the `linear_regression` function that supports both the Normal Equation and Batch Gradient Descent methods:\n\n```python\nimport numpy as np\n\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    \n    # Step 1: Prepend a column of ones to X_train and X_test\n    X_train = np.c_[np.ones((X_train.shape[0], 1)), X_train]\n    X_test = np.c_[np.ones((X_test.shape[0], 1)), X_test]\n    \n    # Step 2: Learn the parameter vector \u03b8\n    if method == \"normal\":\n        # Using the Normal Equation\n        theta = np.linalg.inv(X_train.T @ X_train) @ X_train.T @ y_train\n    else:\n        # Using Batch Gradient Descent\n        m, n = X_train.shape\n        theta = np.zeros(n)\n        for _ in range(num_iter):\n            gradients = (1/m) * X_train.T @ (X_train @ theta - y_train)\n            theta -= alpha * gradients\n    \n    # Step 3: Predict the target values for X_test\n    predictions = X_test @ theta\n    \n    # Step 4: Return the predictions rounded to four decimal digits\n    return np.round(predictions, 4).tolist()\n```\n\n### Explanation:\n1. **Prepending Ones**: We add a column of ones to both `X_train` and `X_test` to account for the bias term in the linear model.\n2. **Learning Parameters**:\n   - **Normal Equation**: This method directly computes the optimal parameters using the formula \\(\\theta = (X^TX)^{-1}X^Ty\\).\n   - **Batch Gradient Descent**: This method iteratively updates the parameters using the formula \\(\\theta := \\theta - \\alpha/m \\cdot X^T(X\\theta - y)\\), where \\(\\alpha\\) is the learning rate and \\(m\\) is the number of samples.\n3. **Prediction**: Once the parameters are learned, we use them to predict the target values for `X_test`.\n4. **Rounding**: The predictions are rounded to four decimal places before returning.\n\nThis function can be used to perform linear regression using either the Normal Equation or Batch Gradient Descent, depending on the user's choice."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Training phase\n    # Separate the training data into two classes\n    X_class_0 = X_train[y_train == 0]\n    X_class_1 = X_train[y_train == 1]\n    \n    # Calculate means and standard deviations for each feature in both classes\n    mean_0 = np.mean(X_class_0, axis=0)\n    std_0 = np.std(X_class_0, axis=0) + epsilon\n    mean_1 = np.mean(X_class_1, axis=0)\n    std_1 = np.std(X_class_1, axis=0) + epsilon\n    \n    # Calculate class priors\n    prior_0 = len(X_class_0) / len(y_train)\n    prior_1 = len(X_class_1) / len(y_train)\n    \n    # Prediction phase\n    predictions = []\n    for x in X_test:\n        # Calculate the likelihood for each class\n        likelihood_0 = np.prod((1 / (np.sqrt(2 * np.pi) * std_0)) * \n                                np.exp(-0.5 * ((x - mean_0) ** 2 / std_0 ** 2)))\n        likelihood_1 = np.prod((1 / (np.sqrt(2 * np.pi) * std_1)) * \n                                np.exp(-0.5 * ((x - mean_1) ** 2 / std_1 ** 2)))\n        \n        # Calculate the posterior probabilities\n        posterior_0 = likelihood_0 * prior_0\n        posterior_1 = likelihood_1 * prior_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\nThis implementation of the Gaussian Naive Bayes classifier follows the steps outlined in the task description. It calculates the mean and standard deviation for each feature in both classes during the training phase and uses these parameters to compute the posterior probabilities for each test sample during the prediction phase. The class with the higher posterior probability is chosen as the predicted class for each sample."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for a binary classification problem.\n\n    Parameters:\n    AL (np.ndarray): The predicted probabilities of shape (1, m) or (m,).\n    Y (np.ndarray): The true binary labels of shape (1, m) or (m,).\n\n    Returns:\n    float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n\n    # Clip the probabilities to avoid numerical overflow\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n\n    # Calculate the cost\n    m = AL.shape[1]\n    cost = (-1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n\n    # Return the cost as a plain Python float\n    return float(np.round(cost, 4))\n```\n\nThis function `compute_cost` takes two NumPy arrays `AL` and `Y`, computes the binary cross-entropy cost using the provided formula, and returns the result as a plain Python float rounded to four decimal places. The clipping of probabilities ensures numerical stability by preventing values too close to zero or one from causing issues with the logarithm function."}
{"task_id": 540, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # Calculate the sigmoid function\n    sigma_z = 1 / (1 + np.exp(-Z))\n    \n    # Calculate the derivative of the sigmoid function\n    derivative = sigma_z * (1 - sigma_z)\n    \n    # Round to 4 decimal places and convert to a list\n    result = np.round(derivative, decimals=4).tolist()\n    \n    return result\n```\n\nThis function first calculates the sigmoid function for each element in the input array `Z`. Then, it computes the derivative of the sigmoid function using the formula provided. Finally, it rounds the results to four decimal places and converts the resulting NumPy array to a plain Python list before returning it."}
{"task_id": 541, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    y = np.array(y)\n    y_hat = np.array(y_hat)\n    \n    # Compute the gradient\n    gradient = y_hat - y\n    \n    # Round to 4 decimal places\n    gradient_rounded = np.round(gradient, decimals=4)\n    \n    # Convert the result to a list and return\n    return gradient_rounded.tolist()\n```\n\nThis function takes two inputs, `y` and `y_hat`, computes the gradient of the Binary Cross-Entropy loss with respect to the logits, rounds each element to four decimal places, and returns the result as a Python list."}
{"task_id": 542, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Perform a single step of RMSProp optimization.\n\n    Args:\n        params: List of parameter arrays to be updated.\n        grads: List of gradient arrays corresponding to the parameters.\n        s: List of running average arrays for the squared gradients. If None, initializes with zeros.\n        alpha: Learning rate.\n        beta: Decay rate for the running average of squared gradients.\n        epsilon: Small constant to prevent division by zero.\n\n    Returns:\n        A tuple containing the updated parameters and the updated running averages.\n    \"\"\"\n    if s is None:\n        s = [np.zeros_like(g) for g in grads]\n\n    new_params = []\n    new_s = []\n\n    for param, grad, s_val in zip(params, grads, s):\n        # Update the running average of squared gradients\n        s_new = beta * s_val + (1 - beta) * np.square(grad)\n        # Update the parameters\n        param_new = param - alpha * grad / (np.sqrt(s_new) + epsilon)\n        # Round the updated parameters to 6 decimal places\n        param_new_rounded = np.round(param_new, 6)\n        \n        new_params.append(param_new_rounded)\n        new_s.append(s_new)\n\n    return new_params, new_s\n```\n\nThis function implements the RMSProp optimization step as described. It updates the parameters based on the gradients and maintains the running average of squared gradients. The parameters are rounded to six decimal places as required."}
{"task_id": 543, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    \n    # Count the occurrences of each class label\n    label_counts = Counter(data)\n    total_samples = len(data)\n    \n    # Calculate the Gini index\n    gini_index = 1.0\n    for count in label_counts.values():\n        proportion = count / total_samples\n        gini_index -= proportion ** 2\n    \n    # Round the result to 4 decimal places\n    return round(gini_index, 4)\n```"}
{"task_id": 544, "completion_id": 0, "completion": "```python\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n\n    return set1, set2\n```\n\nThis function iterates over each sample in the provided data set, checks the value of the specified feature (`fea`) against the given threshold (`value`), and appends the sample to either `set1` or `set2` based on whether the feature value is greater than or equal to the threshold. The order of samples is preserved as they are processed in the order they appear in the original data."}
{"task_id": 545, "completion_id": 0, "completion": "To solve this problem, we need to traverse the binary decision tree and compute two statistics: the number of leaf nodes and the maximum depth of the tree. We'll achieve this by implementing a recursive function that visits each node in the tree exactly once, updating our statistics as it goes.\n\nHere's the complete implementation of the `tree_stats` function:\n\n```python\ndef tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    if root is None:\n        return 0, 0\n    \n    # If the current node is a leaf\n    if root.results is not None:\n        return 1, 1\n    \n    # Recursively calculate stats for the left and right subtrees\n    left_leaf_count, left_max_depth = tree_stats(root.left)\n    right_leaf_count, right_max_depth = tree_stats(root.right)\n    \n    # Total leaf count is the sum of leaf counts from both subtrees plus the current node if it's a leaf\n    total_leaf_count = left_leaf_count + right_leaf_count\n    \n    # Maximum depth is the greater of the depths of the two subtrees plus one for the current node\n    max_depth = max(left_max_depth, right_max_depth) + 1\n    \n    return total_leaf_count, max_depth\n```\n\n### Explanation:\n\n1. **Base Case**: If the `root` is `None`, the tree is empty, so we return `(0, 0)` indicating zero leaf nodes and zero depth.\n\n2. **Leaf Node Check**: If the current node is a leaf (i.e., `root.results` is not `None`), we return `(1, 1)` because this node is a leaf and its depth is 1.\n\n3. **Recursive Case**: If the current node is not a leaf, we recursively compute the statistics for both the left and right subtrees:\n   - `left_leaf_count, left_max_depth = tree_stats(root.left)`\n   - `right_leaf_count, right_max_depth = tree_stats(root.right)`\n\n4. **Combine Results**:\n   - The total number of leaf nodes (`total_leaf_count`) is the sum of the leaf counts from the left and right subtrees.\n   - The maximum depth (`max_depth`) is the greater of the depths of the left and right subtrees, incremented by 1 to account for the current node.\n\nThis approach ensures that we only traverse each node once, making the solution efficient even for unbalanced trees."}
{"task_id": 546, "completion_id": 0, "completion": "To implement the CART decision tree algorithm using the Gini impurity criterion, we need to follow these steps:\n\n1. **Calculate Gini Impurity**: Compute the Gini impurity for a given dataset.\n2. **Split Data**: For each feature and each unique value of that feature, split the dataset into two subsets.\n3. **Select Best Split**: Choose the split that maximizes the Gini gain.\n4. **Recursive Tree Building**: Recursively build the tree using the selected splits until no further improvement can be made.\n\nHere's the complete implementation of the `build_tree` function:\n\n```python\nfrom collections import Counter\nfrom typing import Any, Dict, List\n\ndef gini_impurity(data: List[List[Any]]) -> float:\n    \"\"\"Calculate the Gini impurity for a given dataset.\"\"\"\n    labels = [sample[-1] for sample in data]\n    label_counts = Counter(labels)\n    total_samples = len(labels)\n    impurity = 1.0\n    for count in label_counts.values():\n        probability = count / total_samples\n        impurity -= probability ** 2\n    return impurity\n\ndef gini_gain(data: List[List[Any]], left: List[List[Any]], right: List[List[Any]]) -> float:\n    \"\"\"Calculate the Gini gain after splitting the dataset.\"\"\"\n    p_left = len(left) / len(data)\n    p_right = len(right) / len(data)\n    return gini_impurity(data) - (p_left * gini_impurity(left) + p_right * gini_impurity(right))\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\"\"\"\n    if not data:\n        return {}\n\n    # Calculate the Gini impurity of the current node\n    current_impurity = gini_impurity(data)\n\n    best_gain = 0.0\n    best_feature = None\n    best_value = None\n    best_left = None\n    best_right = None\n\n    # Iterate over each feature\n    for feature_index in range(len(data[0]) - 1):\n        # Get unique values for the current feature\n        feature_values = set(sample[feature_index] for sample in data)\n        \n        # Iterate over each unique value of the current feature\n        for value in sorted(feature_values):\n            # Split the data based on the current feature and value\n            left = [sample for sample in data if sample[feature_index] == value]\n            right = [sample for sample in data if sample[feature_index] != value]\n            \n            # Ignore splits that leave one subset empty\n            if not left or not right:\n                continue\n            \n            # Calculate the Gini gain for the current split\n            gain = gini_gain(data, left, right)\n            \n            # Update the best split if the current split has a higher gain\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_value = value\n                best_left = left\n                best_right = right\n\n    # If no split yields a positive gain, create a leaf node\n    if best_gain <= 0:\n        labels = [sample[-1] for sample in data]\n        most_common_label = Counter(labels).most_common(1)[0][0]\n        return {\"label\": most_common_label}\n\n    # Otherwise, create an internal node and recurse\n    left_tree = build_tree(best_left)\n    right_tree = build_tree(best_right)\n    return {\n        \"feature\": best_feature,\n        \"value\": best_value,\n        \"left\": left_tree,\n        \"right\": right_tree\n    }\n\n# Example usage\ndata = [[1, \"Yes\"], [1, \"Yes\"], [0, \"No\"], [0, \"No\"]]\ntree = build_tree(data)\nprint(tree)\n```\n\n### Explanation:\n\n1. **Gini Impurity Calculation**: The `gini_impurity` function computes the Gini impurity for a given dataset by calculating the probability of each class and summing up the squared probabilities subtracted from 1.\n\n2. **Gini Gain Calculation**: The `gini_gain` function calculates the Gini gain after splitting the dataset into two subsets. It uses the Gini impurity of the parent node and the weighted Gini impurities of the child nodes.\n\n3. **Tree Building**: The `build_tree` function recursively builds the tree. It selects the split that maximizes the Gini gain. If no split yields a positive gain, it creates a leaf node with the majority class label. Otherwise, it creates an internal node and recurses on the two subsets.\n\nThis implementation ensures that the tree is built according to the CART algorithm using the Gini impurity as the splitting criterion."}
{"task_id": 547, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    S = np.array(S)\n    \n    # Check if the dimensions are consistent\n    n_states = A.shape[0]\n    if A.shape != (n_states, n_states):\n        return -1\n    if B.shape != (n_states, B.shape[1]):\n        return -1\n    if len(S) != n_states:\n        return -1\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= len(obs):\n        return -1\n    \n    # Initialize alpha_t\n    if t == 0:\n        alpha_t = S * B[:, obs[t]]\n    else:\n        alpha_prev = forward_step(A.tolist(), B.tolist(), S.tolist(), obs, t - 1)\n        if alpha_prev == -1:\n            return -1\n        alpha_t = (np.dot(alpha_prev, A)) * B[:, obs[t]]\n    \n    # Round the result to 4 decimal places\n    alpha_t_rounded = [round(prob, 4) for prob in alpha_t]\n    \n    return alpha_t_rounded\n```\n\nThis implementation checks for dimension consistency and valid time steps, then computes the forward probability vector using the provided recurrence relations. The result is rounded to four decimal places as required."}
{"task_id": 548, "completion_id": 0, "completion": "To solve this problem, we need to implement the computation of the \u03be matrix for a given time step \\( t \\) in a Hidden Markov Model (HMM). The \u03be matrix represents the joint probability of being in state \\( i \\) at time \\( t \\) and state \\( j \\) at time \\( t+1 \\), given the observation sequence \\( O \\) and the model parameters \\( \\lambda = (A, B, \\pi) \\).\n\nHere's a step-by-step breakdown of how to achieve this:\n\n1. **Forward Pass (\u03b1):**\n   - Compute the forward probabilities \\( \\alpha_t(i) \\), which represent the probability of being in state \\( i \\) at time \\( t \\) given the observations up to time \\( t \\).\n\n2. **Backward Pass (\u03b2):**\n   - Compute the backward probabilities \\( \\beta_t(i) \\), which represent the probability of the observations from time \\( t+1 \\) to the end of the sequence, given that the system is in state \\( i \\) at time \\( t \\).\n\n3. **Compute \u03be:**\n   - Use the forward and backward probabilities to compute the \u03be matrix:\n     \\[\n     \\xi_t(i,j) \\propto \\alpha_t(i) \\cdot A_{i,j} \\cdot B_j(O_{t+1}) \\cdot \\beta_{t+1}(j)\n     \\]\n   - Normalize the computed values to ensure they sum to 1 over all possible states \\( j \\).\n\n4. **Handle Edge Cases:**\n   - If the time index \\( t \\) is out of bounds, return \\(-1\\).\n\nHere's the implementation of the `compute_xi` function:\n\n```python\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    if t < 0 or t >= len(obs) - 1:\n        return -1\n    \n    N = len(pi)\n    M = len(B[0])\n    \n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    \n    # Forward pass\n    alpha = np.zeros((len(obs), N))\n    alpha[0] = pi * B[:, obs[0]]\n    for i in range(1, len(obs)):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, obs[i]]\n    \n    # Backward pass\n    beta = np.zeros((len(obs), N))\n    beta[-1] = np.ones(N)\n    for i in range(len(obs) - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, obs[i+1]] * beta[i+1])\n    \n    # Compute xi\n    xi = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            xi[i, j] = alpha[t, i] * A[i, j] * B[j, obs[t+1]] * beta[t+1, j]\n    \n    # Normalize xi\n    xi /= np.sum(xi)\n    \n    # Round to 4 decimals\n    xi = np.round(xi, 4)\n    \n    return xi.tolist()\n\n# Example usage:\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\n\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1]]\n\n\u03c0 = [0.6, 0.4]\n\nobs = [0, 1, 2]   # three observations\n\nt = 1\n\nprint(compute_xi(A, B, \u03c0, obs, t))\n```\n\nThis code will output the \u03be matrix for the given observation sequence and time index, rounded to four decimal places."}
{"task_id": 549, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape[0] != y.shape[0]:\n        return -1\n    \n    # Calculate the squared Euclidean distance\n    squared_distance = np.sum((x - y) ** 2)\n    \n    # Round the result to 4 decimal places\n    return round(squared_distance, 4)\n\n# Example usage:\n# print(cal_dis([1, 2, 3], [4, 5, 6]))  # Output: 27.0\n# print(cal_dis([1, 2], [3, 4, 5]))     # Output: -1\n```\n\nThis function first converts the input vectors to NumPy arrays to facilitate element-wise operations. It then checks if the vectors have the same length, returning `-1` if they do not. If the vectors are of equal length, it computes the squared Euclidean distance by summing the squared differences of corresponding elements. Finally, it rounds the result to four decimal places before returning it."}
{"task_id": 551, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that calculates the Gini impurity for each possible split of the dataset and finds the split that minimizes the weighted Gini impurity. Here's how we can achieve this:\n\n1. **Calculate the Gini Impurity**: For a given subset of samples, compute the Gini impurity using the formula:\n   \\[\n   Gini(S) = 1 - \\sum_{c} (p_c)^2\n   \\]\n   where \\( p_c \\) is the proportion of class \\( c \\) in the subset \\( S \\).\n\n2. **Evaluate Each Split**: For each feature and each unique value within that feature, split the dataset into two subsets: one where the feature equals the value and one where it does not. Calculate the weighted Gini impurity for this split.\n\n3. **Select the Best Split**: Track the split that results in the lowest weighted Gini impurity, provided it reduces the impurity by at least `epsilon` compared to the original Gini impurity of the dataset.\n\n4. **Handle Edge Cases**: If no valid split is found, return `(-1, None, parent_gini)`.\n\nHere's the implementation of the `best_gini_split` function:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef gini_impurity(labels: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity for a given set of labels.\"\"\"\n    n_samples = len(labels)\n    label_counts = Counter(labels)\n    gini = 1.0\n    for count in label_counts.values():\n        p_c = count / n_samples\n        gini -= p_c ** 2\n    return gini\n\ndef best_gini_split(X: np.ndarray,\n                    y: np.ndarray,\n                    epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\"\"\"\n    n_samples, n_features = X.shape\n    parent_gini = gini_impurity(y)\n    \n    best_feature = -1\n    best_value = None\n    best_gini = parent_gini\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for value in unique_values:\n            left_indices = np.where(X[:, feature_index] == value)[0]\n            right_indices = np.where(X[:, feature_index] != value)[0]\n            \n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            left_gini = gini_impurity(left_labels)\n            right_gini = gini_impurity(right_labels)\n            \n            weighted_gini = (len(left_indices) / n_samples) * left_gini + \\\n                            (len(right_indices) / n_samples) * right_gini\n            \n            if weighted_gini < best_gini - epsilon:\n                best_gini = weighted_gini\n                best_feature = feature_index\n                best_value = value\n    \n    return (best_feature, best_value, float(best_gini))\n\n# Example usage:\n# X = np.array([[1, 'a'], [2, 'b'], [1, 'b'], [2, 'a']])\n# y = np.array([0, 1, 0, 1])\n# print(best_gini_split(X, y))\n```\n\n### Explanation:\n- **Gini Impurity Calculation**: The `gini_impurity` function computes the Gini impurity for a given set of labels.\n- **Iterate Over Features and Values**: We iterate over each feature and each unique value within that feature to evaluate possible splits.\n- **Calculate Weighted Gini Impurity**: For each split, we calculate the weighted Gini impurity and check if it improves the parent node's impurity by at least `epsilon`.\n- **Return the Best Split**: If a valid split is found, we return its feature index, split value, and Gini impurity. If no valid split is found, we return `(-1, None, parent_gini)`.\n\nThis implementation ensures that the function works correctly for both numerical and categorical data types stored in the NumPy arrays."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    \n    # Extract HMM parameters\n    pi = hmm['pi']  # Initial state distribution\n    A = hmm['A']    # Transition matrix\n    B = hmm['B']    # Emission matrix\n    \n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= num_observations:\n        return []\n    \n    # Step 1: Compute forward probabilities \u03b1\n    alpha = np.zeros((num_observations, num_states))\n    \n    # Initialize \u03b1 for t=0\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Compute \u03b1 for t > 0\n    for time_step in range(1, num_observations):\n        alpha[time_step] = (alpha[time_step - 1].dot(A)) * B[:, observations[time_step]]\n    \n    # Step 2: Compute backward probabilities \u03b2\n    beta = np.zeros((num_observations, num_states))\n    \n    # Initialize \u03b2 for t=T-1\n    beta[-1] = np.ones(num_states)\n    \n    # Compute \u03b2 for t < T-1\n    for time_step in range(num_observations - 2, -1, -1):\n        beta[time_step] = (beta[time_step + 1] * B[:, observations[time_step + 1]]).dot(A.T)\n    \n    # Step 3: Compute \u03b3\u209c\n    gamma_t = (alpha[t] * beta[t]) / np.sum(alpha[t] * beta[t])\n    \n    # Round to four decimal places\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n    \n    return gamma_t_rounded\n```\n\nThis function implements the forward-backward algorithm to compute the posterior state distribution \\( \\gamma_t \\) for a given Hidden Markov Model (HMM), observation sequence, and time index \\( t \\). It ensures that the probabilities are rounded to four decimal places before returning them."}
{"task_id": 553, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    # Add a bias column to the training and test data\n    X_train = np.column_stack((np.ones(X_train.shape[0]), X_train))\n    X_test = np.column_stack((np.ones(X_test.shape[0]), X_test))\n    \n    # Initialize the weight vector with zeros\n    n_features = X_train.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Gradient descent loop\n    for _ in range(max_iter):\n        # Compute the predicted probabilities\n        z = np.dot(X_train, weights)\n        predictions = sigmoid(z)\n        \n        # Compute the gradient\n        gradient = np.dot(X_train.T, (y_train - predictions)) / X_train.shape[0]\n        \n        # Update the weights\n        weights += alpha * gradient\n    \n    # Predict on the test set\n    test_z = np.dot(X_test, weights)\n    test_predictions = sigmoid(test_z)\n    \n    # Convert probabilities to binary class labels\n    test_predictions_binary = [1 if p >= 0.5 else 0 for p in test_predictions]\n    \n    return test_predictions_binary\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbors(point_index, eps):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n\n    for point_index in range(n_samples):\n        if labels[point_index] != -1:  # Skip already labeled points\n            continue\n\n        neighbors = get_neighbors(point_index, eps)\n        if len(neighbors) < min_samples:\n            continue  # Point is noise\n\n        # Found a core point, start a new cluster\n        cluster_id += 1\n        labels[point_index] = cluster_id\n        queue = deque(neighbors)\n\n        while queue:\n            current_point_index = queue.popleft()\n            if labels[current_point_index] == -1:  # Unlabeled point\n                labels[current_point_index] = cluster_id\n                current_neighbors = get_neighbors(current_point_index, eps)\n                if len(current_neighbors) >= min_samples:\n                    queue.extend(current_neighbors)\n\n    return labels\n```\n\nThis implementation of the DBSCAN algorithm follows the steps outlined in the task description. It computes the Euclidean distance between points, builds neighborhood lists, identifies core points, and expands clusters using a breadth-first search (BFS). Points that are not part of any cluster are labeled as noise."}
{"task_id": 559, "completion_id": 0, "completion": "To solve the problem of collecting leaf values from a binary tree where only leaf nodes contain values, we can use a depth-first search (DFS) approach. This approach will allow us to traverse the tree and collect the values of the leaf nodes in the correct order.\n\nHere's the implementation of the `leaf_values` function:\n\n```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int] = None, right: 'Optional[Node]' = None,\n                 left: 'Optional[Node]' = None):\n        self.val = val\n        self.right = right\n        self.left = left\n\n\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    def dfs(node: Optional[Node], leaves: List[int]):\n        if node is None:\n            return\n        if node.left is None and node.right is None:\n            leaves.append(node.val)\n        dfs(node.left, leaves)\n        dfs(node.right, leaves)\n\n    leaves = []\n    dfs(root, leaves)\n    return leaves\n```\n\n### Explanation:\n\n1. **Node Class**: The `Node` class is defined with attributes `val`, `right`, and `left`. Only leaf nodes have a non-`None` value for `val`.\n\n2. **leaf_values Function**: This function takes the root of the binary tree as input and returns a list of leaf node values.\n\n3. **DFS Helper Function**: \n   - We define a helper function `dfs` that performs a depth-first search on the tree.\n   - The function takes a node and a list `leaves` to store the leaf values.\n   - If the current node is `None`, the function returns immediately.\n   - If the current node is a leaf (both `left` and `right` are `None`), its value is appended to the `leaves` list.\n   - The function recursively calls itself on the left and right children of the current node.\n\n4. **Initialization and Execution**:\n   - We initialize an empty list `leaves` to store the leaf values.\n   - We call the `dfs` function starting from the root node.\n   - Finally, we return the `leaves` list containing the leaf values in left-to-right order.\n\nThis approach ensures that we correctly collect all leaf values from the binary tree in the specified order."}
{"task_id": 560, "completion_id": 0, "completion": "To solve the problem of finding the k-nearest neighbors using a k-d tree, we need to follow these steps:\n\n1. **Build a Balanced k-d Tree**: We'll construct the k-d tree by recursively choosing the median of the points along the current axis as the root of the subtree. This ensures the tree is balanced.\n\n2. **Search the k-d Tree for k-Nearest Neighbors**: We'll perform a depth-first search on the tree, keeping track of the closest points found so far using a min-heap. We'll also consider the possibility of points in the opposite subtree being closer than the current best points.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport heapq\n\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n    \n    def squared_distance(p1, p2):\n        return sum((a - b) ** 2 for a, b in zip(p1, p2))\n    \n    def build_kd_tree(points, depth=0):\n        n = len(points)\n        if n == 0:\n            return None\n        \n        axis = depth % len(points[0])\n        sorted_points = sorted(enumerate(points), key=lambda x: x[1][axis])\n        median_idx = n // 2\n        \n        node = {\n            'index': sorted_points[median_idx][0],\n            'axis': axis,\n            'left': build_kd_tree([p for i, p in sorted_points[:median_idx]], depth + 1),\n            'right': build_kd_tree([p for i, p in sorted_points[median_idx + 1:]], depth + 1)\n        }\n        \n        return node\n    \n    def search_kd_tree(node, query, k, heap):\n        if node is None:\n            return\n        \n        point = points[node['index']]\n        dist = squared_distance(point, query)\n        if len(heap) < k:\n            heapq.heappush(heap, (-dist, -node['index']))\n        elif dist < -heap[0][0]:\n            heapq.heappushpop(heap, (-dist, -node['index']))\n        \n        axis = node['axis']\n        if query[axis] < point[axis]:\n            search_kd_tree(node['left'], query, k, heap)\n            if len(heap) < k or abs(query[axis] - point[axis]) < -heap[0][0]:\n                search_kd_tree(node['right'], query, k, heap)\n        else:\n            search_kd_tree(node['right'], query, k, heap)\n            if len(heap) < k or abs(query[axis] - point[axis]) < -heap[0][0]:\n                search_kd_tree(node['left'], query, k, heap)\n    \n    kd_tree = build_kd_tree(points)\n    heap = []\n    search_kd_tree(kd_tree, query, k, heap)\n    \n    result = [-h[1] for h in sorted(heap)]\n    return result\n\n# Example usage:\npoints = [[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]]\nquery = [9, 2]\nk = 2\nprint(k_nearest_neighbors(points, query, k))  # Output: [4, 5]\n```\n\n### Explanation:\n\n- **Squared Distance Calculation**: We use squared Euclidean distance to avoid unnecessary computation of square roots.\n- **Building the k-d Tree**: We recursively split the points based on the median along the current axis, ensuring a balanced tree.\n- **Searching the k-d Tree**: We perform a depth-first search, maintaining a min-heap of the k closest points. We explore both subtrees when necessary to ensure we find the true nearest neighbors.\n- **Result Construction**: The final result is constructed by sorting the indices from the heap, ensuring they are ordered by distance and then by index."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Gaussian Mixture Model (GMM) using the Expectation-Maximization (EM) algorithm, we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters of the Gaussian components, including the mixture weights, means, and covariance matrices.\n2. **Expectation (E) Step**: Compute the responsibilities, which represent the probability that each sample belongs to each Gaussian component.\n3. **Maximization (M) Step**: Update the parameters of the Gaussian components based on the responsibilities computed in the E step.\n4. **Convergence Check**: Repeat the E and M steps until the change in mixture weights is smaller than a prescribed tolerance or the maximum number of iterations is reached.\n5. **Assignment**: Assign each sample to the component with the highest posterior probability.\n6. **Deterministic Output**: Sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nHere's the implementation of the `gmm_em` function:\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: The maximum number of iterations for the EM algorithm.\n    - epsilon: The tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialization\n    # Randomly initialize mixture weights\n    weights = np.random.rand(k)\n    weights /= np.sum(weights)\n    \n    # Randomly initialize means\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    \n    # Randomly initialize full covariance matrices\n    covariances = [np.eye(n_features) for _ in range(k)]\n    \n    # Step 2: EM Algorithm\n    for _ in range(max_iter):\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((n_samples, k))\n        for j in range(k):\n            diff = data - means[j]\n            exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[j]) * diff, axis=1)\n            responsibilities[:, j] = weights[j] * np.exp(exponent) / np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[j]))\n        \n        # Normalize responsibilities\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.sum(axis=0) / n_samples\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True).T\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_sum = np.dot(responsibilities[:, j] * diff.T, diff)\n            new_covariances.append(weighted_sum / responsibilities[:, j].sum())\n        \n        # Check for convergence\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Step 3: Assignment\n    responsibilities = np.zeros((n_samples, k))\n    for j in range(k):\n        diff = data - means[j]\n        exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[j]) * diff, axis=1)\n        responsibilities[:, j] = weights[j] * np.exp(exponent) / np.sqrt((2 * np.pi) ** n_features * np.linalg.det(covariances[j]))\n    \n    # Assign each sample to the component with the highest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Deterministic Output\n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    label_map = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    labels = [label_map[label] for label in labels]\n    \n    return labels\n```\n\nThis implementation follows the described steps and ensures that the output is deterministic by sorting the components by their mean values. The function returns a list of cluster labels for each sample."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Step 1: Build the similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_dist_sq = np.sum(data[:, np.newaxis] - data[np.newaxis, :], axis=2) ** 2\n    W = np.exp(-gamma * pairwise_dist_sq)\n\n    # Step 2: Construct the un-normalized Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        # Step 2b: Construct the symmetric normalized Laplacian L_sym = D^(-1/2) * L * D^(-1/2)\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.sum(W, axis=1)))\n        L_sym = D_inv_sqrt @ L @ D_inv_sqrt\n        L = L_sym\n\n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    if method == 'normalized':\n        # Row-normalize the eigenvector matrix\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    X_transformed = eigenvectors[:, :n_cluster]\n\n    # Step 4: Run k-means in the eigenvector space\n    from sklearn.cluster import KMeans\n    kmeans = KMeans(n_clusters=n_cluster, init='k-means++', random_state=0)\n    kmeans.fit(X_transformed)\n    labels = kmeans.labels_\n\n    # Step 5: Relabel clusters so that the cluster containing the smallest original index gets label 0, etc.\n    unique_indices = np.unique(data, axis=0)\n    min_index_labels = []\n    for idx in unique_indices:\n        min_idx = np.argmin(np.linalg.norm(data - idx, axis=1))\n        min_index_labels.append(labels[min_idx])\n\n    relabeled_labels = np.array([min_index_labels.index(label) for label in labels])\n\n    return relabeled_labels.tolist()\n```\n\nThis implementation follows the steps outlined in the problem description. It constructs a similarity graph using a Gaussian kernel, computes the appropriate Laplacian matrix, finds the eigenvectors corresponding to the smallest eigenvalues, and then applies k-means clustering in the transformed eigenvector space. Finally, it relabels the clusters to ensure that the cluster containing the smallest original index is labeled as 0."}
{"task_id": 563, "completion_id": 0, "completion": "Here's the implementation of the dual-form Perceptron learning algorithm as described:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(X_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix\n    G = np.dot(X_data, X_data.T)\n    \n    converged = False\n    for _ in range(max_iter):\n        num_updates = 0\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                num_updates += 1\n        if num_updates == 0:\n            converged = True\n            break\n    \n    # Recover the weight vector\n    w = np.sum(alpha.reshape(-1, 1) * y_data.reshape(-1, 1) * X_data, axis=0)\n    \n    # Round the results\n    w = [round(weight, 4) for weight in w]\n    b = round(b, 4)\n    \n    return w, b\n```\n\n### Explanation:\n1. **Initialization**: We initialize `alpha` to a zero vector of size `N` (number of samples) and `b` to 0.\n2. **Gram Matrix**: We compute the Gram matrix `G` where each element `G[i, j]` is the dot product of `X_data[i]` and `X_data[j]`.\n3. **Training Loop**: We iterate over the data up to `max_iter` times. For each sample `i`, we compute the value `g` as the sum of `alpha[j] * y_data[j] * G[j, i]` for all `j`. If the condition `y_data[i] * (g + b) <= 0` is met, we update `alpha[i]` and `b`.\n4. **Convergence Check**: If no updates are made during a full pass over the data, the algorithm has converged, and we break out of the loop.\n5. **Weight Recovery**: After training, we recover the weight vector `w` using the formula `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62`.\n6. **Rounding**: Finally, we round each component of `w` and `b` to 4 decimal places before returning them.\n\nThis implementation ensures that the dual-form Perceptron algorithm is followed exactly as specified."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    def traverse(node):\n        if node.y is not None:\n            return node.y\n        \n        if task_type == 'classification':\n            feature_value = features[node.label]\n            for child in node.child:\n                if child.x == feature_value:\n                    return traverse(child)\n            # Default to the second child if no match is found\n            return traverse(node.child[1])\n        \n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                return traverse(node.child[0])\n            else:\n                return traverse(node.child[1])\n    \n    return traverse(root)\n```\n\nThis function `predict_sample` takes the root of a decision tree, a list or tuple of feature values, and the task type ('classification' or 'regression') as inputs. It traverses the tree according to the rules specified for classification and regression trees and returns the value stored in the reached leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the `choose_best_feature` function, we need to calculate the information gain for each feature and select the one that provides the highest gain. The information gain is calculated using the formula:\n\n\\[ IG(A) = H(y) - H(y|A) \\]\n\nWhere:\n- \\( H(y) \\) is the entropy of the entire dataset.\n- \\( H(y|A) \\) is the conditional entropy of the dataset given the feature \\( A \\).\n\nHere's the step-by-step implementation:\n\n1. **Calculate Entropy \\( H(y) \\)**:\n   - Entropy is a measure of the uncertainty in the dataset. It is calculated as:\n     \\[\n     H(y) = -\\sum_{i=0}^{C-1} p(c_i) \\log_2(p(c_i))\n     \\]\n     where \\( C \\) is the number of classes, and \\( p(c_i) \\) is the probability of class \\( c_i \\).\n\n2. **Calculate Conditional Entropy \\( H(y|A) \\)**:\n   - For each feature \\( A \\), split the dataset based on its values and calculate the entropy for each subset.\n   - The conditional entropy is then the weighted sum of these entropies:\n     \\[\n     H(y|A) = \\sum_{v} \\frac{|S_v|}{|S|} H(y|A=v)\n     \\]\n     where \\( S_v \\) is the subset of the dataset where feature \\( A \\) has value \\( v \\), and \\( |S| \\) is the total number of samples.\n\n3. **Calculate Information Gain**:\n   - For each feature, compute the information gain using the formula above and select the feature with the highest gain.\n\n4. **Return the Best Feature**:\n   - If multiple features have the same information gain, return the feature with the smallest index.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    n_samples, n_features = X.shape\n    best_feature_index = -1\n    max_information_gain = -float('inf')\n    \n    # Calculate the entropy of the target variable\n    H_y = entropy(y)\n    \n    for feature_index in range(n_features):\n        # Calculate the conditional entropy H(y|A)\n        H_y_given_A = 0.0\n        feature_values, feature_counts = np.unique(X[:, feature_index], return_counts=True)\n        \n        for value, count in zip(feature_values, feature_counts):\n            # Get the subset of labels for the current feature value\n            subset_labels = y[X[:, feature_index] == value]\n            # Calculate the entropy of the subset\n            H_y_given_A += (count / n_samples) * entropy(subset_labels)\n        \n        # Calculate the information gain\n        information_gain = H_y - H_y_given_A\n        \n        # Update the best feature if this one has a higher gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    # Return the best feature index and the maximum information gain rounded to 6 decimal places\n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 1, 1]])\n# y = np.array([0, 1, 0, 1])\n# print(choose_best_feature(X, y))  # Output: (0, 0.5)\n```\n\nThis function will correctly compute the information gain for each feature and return the feature with the highest gain, rounded to six decimal places. If there are ties, it will return the feature with the smallest index."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def path_length(x, node):\n        if node is None:\n            return 0\n        if len(node['data']) == 1:\n            return c(len(node['data']))\n        \n        feature = node['feature']\n        threshold = node['threshold']\n        \n        if x[feature] < threshold:\n            return 1 + path_length(x, node['left'])\n        else:\n            return 1 + path_length(x, node['right'])\n    \n    def build_tree(data, depth=0, height_limit=None):\n        if height_limit is None:\n            height_limit = math.ceil(math.log2(len(data)))\n        \n        if depth >= height_limit or len(data) <= 1:\n            return {'data': data}\n        \n        feature = np.random.randint(data.shape[1])\n        min_val = np.min(data[:, feature])\n        max_val = np.max(data[:, feature])\n        threshold = np.random.uniform(min_val, max_val)\n        \n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        \n        node = {\n            'feature': feature,\n            'threshold': threshold,\n            'left': build_tree(left_data, depth + 1, height_limit),\n            'right': build_tree(right_data, depth + 1, height_limit)\n        }\n        \n        return node\n    \n    n_samples = data.shape[0]\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    \n    scores = np.zeros(n_samples)\n    \n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[subsample_indices]\n        \n        tree = build_tree(subsample)\n        \n        for i in range(n_samples):\n            scores[i] += path_length(data[i], tree)\n    \n    scores /= n_trees\n    scores = 2 ** (-scores / phi)\n    \n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores >= threshold)[0].tolist()\n    outliers.sort()\n    \n    return outliers\n```\n\nThis implementation of the mini Isolation Forest for outlier detection follows the specified requirements. It includes the construction of random isolation trees, the computation of path lengths, and the conversion of these lengths into anomaly scores. The function returns the indices of the detected outliers, sorted in increasing order."}
{"task_id": 567, "completion_id": 0, "completion": "To solve the problem of ensemble majority voting, we need to process a 2D array where each row represents the predictions from a different tree, and each column represents the predictions for a specific sample. The goal is to determine the final class label for each sample by performing majority voting. If there is a tie, the smallest label should be chosen.\n\nHere's how we can implement this in Python:\n\n1. Iterate over each column (each sample).\n2. Count the occurrences of each label in that column.\n3. Determine the label with the highest count. In case of a tie, select the smallest label.\n4. Collect the results into a list.\n\nLet's write the function:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_labels = []\n\n    for sample_index in range(num_samples):\n        # Extract predictions for the current sample from all trees\n        sample_predictions = [predictions[tree_index][sample_index] for tree_index in range(len(predictions))]\n        \n        # Count the occurrences of each label\n        label_counts = Counter(sample_predictions)\n        \n        # Find the label with the highest count\n        max_count = max(label_counts.values())\n        # Collect all labels with the maximum count\n        candidates = [label for label, count in label_counts.items() if count == max_count]\n        \n        # Choose the smallest label in case of a tie\n        final_label = min(candidates)\n        \n        # Append the final label for this sample to the result list\n        final_labels.append(final_label)\n\n    return final_labels\n```\n\n### Explanation:\n\n- **Counter**: We use `collections.Counter` to count the occurrences of each label for a given sample.\n- **Finding the Mode**: We determine the label with the highest count. If there are multiple labels with the same highest count, we select the smallest one using `min(candidates)`.\n- **Iterating Over Samples**: We loop through each sample index, extract the predictions for that sample from all trees, and apply the majority voting logic.\n\nThis function will return a list of integers representing the final class labels for each sample after performing majority voting."}
{"task_id": 568, "completion_id": 0, "completion": "To implement the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow these steps:\n\n1. **Feature Extraction**: Identify all unique (feature_index, feature_value, label) pairs from the training data.\n2. **Empirical Distributions**: Compute the empirical distribution of each (feature_index, feature_value, label) pair.\n3. **Initial Weights**: Initialize weights for each (feature_index, feature_value, label) pair.\n4. **GIS Algorithm**: Iteratively update the weights until convergence or the maximum number of iterations is reached.\n5. **Prediction**: Use the learned weights to predict the most likely label for each sample in the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Extract all unique (feature_index, feature_value, label) pairs\n    feature_value_label_pairs = set()\n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            if v != 0:  # Treat feature as present only if it has a non-zero value\n                feature_value_label_pairs.add((i, v, y))\n    \n    # Step 2: Compute empirical distributions\n    empirical_counts = defaultdict(float)\n    total_counts = defaultdict(float)\n    \n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            if v != 0:\n                empirical_counts[(i, v, y)] += 1\n                total_counts[y] += 1\n    \n    empirical_dists = {pair: count / total_counts[y] for pair, count in empirical_counts.items()}\n    \n    # Step 3: Initialize weights\n    weights = {pair: 0.0 for pair in feature_value_label_pairs}\n    \n    # Step 4: GIS Algorithm\n    for _ in range(n_iter):\n        # Compute the current conditional probabilities\n        conditional_probs = defaultdict(lambda: defaultdict(float))\n        \n        for x, y in zip(X_train, y_train):\n            z_x = 0.0\n            for i, v in enumerate(x):\n                if v != 0:\n                    z_x += sum(math.exp(weights[(i, v, y)]) for y in set(y_train))\n            \n            for i, v in enumerate(x):\n                if v != 0:\n                    for y in set(y_train):\n                        conditional_probs[(x, y)][(i, v, y)] = math.exp(weights[(i, v, y)]) / z_x\n        \n        # Update weights\n        max_update = 0.0\n        for pair in feature_value_label_pairs:\n            i, v, y = pair\n            update = empirical_dists[pair] - sum(\n                conditional_probs[x][pair] for x in X_train if x[i] == v\n            )\n            weights[pair] += update\n            max_update = max(max_update, abs(update))\n        \n        if max_update < epsilon:\n            break\n    \n    # Step 5: Prediction\n    predictions = []\n    for x in X_test:\n        scores = defaultdict(float)\n        for i, v in enumerate(x):\n            if v != 0:\n                for y in set(y_train):\n                    scores[y] += weights[(i, v, y)]\n        \n        predicted_label = max(scores, key=scores.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n- **Feature Extraction**: We iterate over the training data to collect all unique (feature_index, feature_value, label) pairs.\n- **Empirical Distributions**: We compute the empirical distribution for each pair by counting how often each pair appears in the training data relative to the total occurrences of each label.\n- **Initial Weights**: We initialize all weights to zero.\n- **GIS Algorithm**: We iteratively update the weights by comparing the empirical distribution with the current conditional distribution. The update is based on the difference between these distributions.\n- **Prediction**: For each test sample, we compute the score for each label by summing the weights of the relevant feature-value-label pairs and choose the label with the highest score.\n\nThis implementation ensures that the Maximum Entropy Classifier is trained using the GIS algorithm and can predict labels for new samples."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_documents = len(data)\n    \n    # Initialize a counter for word occurrences\n    word_counter = Counter()\n    \n    # Initialize a set to track words present in each document\n    word_set = set()\n    \n    # Iterate over each document\n    for _, words in data:\n        # Update the word counter\n        word_counter.update(words)\n        # Add words to the set of words seen in this document\n        word_set.update(words)\n    \n    # Calculate the document-frequency ratio for each word\n    df_ratios = [(word, round(count / num_documents, 4)) for word, count in word_counter.items()]\n    \n    # Sort the list of (word, ratio) pairs by ratio in descending order\n    df_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the number of words to include in the set\n    if cut_off is None:\n        top_words = set(word for word, _ in df_ratios)\n    else:\n        top_words = set(word for word, _ in df_ratios[:cut_off])\n    \n    return df_ratios, top_words\n```\n\nThis implementation follows the requirements specified in the task description. It calculates the document-frequency ratio for each word across a collection of documents and returns both a sorted list of these ratios and a set of the most common words based on the `cut_off` parameter. The ratios are rounded to four decimal places as required."}
{"task_id": 570, "completion_id": 0, "completion": "Here's a complete implementation of the `naive_bayes_predict` function based on the provided description:\n\n```python\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    \n    # Step 1: Train the model\n    class_counts = defaultdict(int)\n    word_given_class = defaultdict(lambda: defaultdict(int))\n    \n    for label, tokens in train_data:\n        class_counts[label] += 1\n        for word in keywords:\n            if word in tokens:\n                word_given_class[word][label] += 1\n    \n    # Calculate conditional probabilities\n    conditional_probabilities = {}\n    for word in keywords:\n        conditional_probabilities[word] = {}\n        for label, count in word_given_class[word].items():\n            conditional_probabilities[word][label] = count / class_counts[label]\n    \n    # Step 2: Predict for test samples\n    predictions = []\n    \n    for tokens in test_samples:\n        label_likelihoods = {}\n        for label in class_counts:\n            likelihood = 1.0\n            for word in keywords:\n                if word in tokens:\n                    likelihood *= conditional_probabilities[word].get(label, 0)\n                else:\n                    likelihood *= (1 - conditional_probabilities[word].get(label, 0))\n            label_likelihoods[label] = likelihood\n        \n        # Find the label with the highest likelihood\n        predicted_label = max(label_likelihoods, key=label_likelihoods.get)\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage\ntrain_data = [\n    ('spam', ['cheap', 'offer']),\n    ('ham',  ['hello', 'friend']),\n    ('spam', ['buy', 'cheap'])\n]\nkeywords     = {'cheap', 'buy', 'hello'}\ntest_samples = [['cheap'], ['hello']]\n\nprint(naive_bayes_predict(train_data, keywords, test_samples))  # Output: ['spam', 'ham']\n```\n\n### Explanation:\n1. **Training Phase**:\n   - We count the occurrences of each keyword in each class using `word_given_class`.\n   - We also keep track of the number of documents for each class using `class_counts`.\n   - We compute the conditional probability `P(word|class)` for each keyword in each class.\n\n2. **Prediction Phase**:\n   - For each test sample, we calculate the likelihood of it belonging to each class by multiplying the appropriate conditional probabilities.\n   - We choose the class with the highest likelihood as the predicted label for that test sample.\n\nThis implementation ensures that the classifier operates according to the Bernoulli Naive Bayes model without smoothing and without using class priors."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Calculate the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Calculate the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the results to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis function calculates the weight vector `w` and the bias term `b` for a linear SVM using the given formulas. It then rounds these values to four decimal places and returns them as a tuple `(w_list, b)`. The weight vector `w` is converted to a Python list before returning."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm.\"\"\"\n    \n    # Step 1: Compute the full pairwise Euclidean distance matrix\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(data[i] - data[j])\n            distance_matrix[i, j] = dist\n            distance_matrix[j, i] = dist\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbors N_k(p)\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [[] for _ in range(n_samples)]\n    \n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances[i] = distances[sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k+1]\n    \n    # Step 3: Define the reachability distance between two points\n    def reach_dist_k(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Calculate the Local Reachability Density (LRD) of p\n    lrd = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        sum_reach_dist = sum(reach_dist_k(i, q) for q in k_neighbors[i])\n        lrd[i] = k / sum_reach_dist\n    \n    # Step 5: Calculate the Local Outlier Factor (LOF)\n    lof_scores = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        sum_lrd_ratio = sum(lrd[q] / lrd[i] for q in k_neighbors[i])\n        lof_scores[i] = sum_lrd_ratio / k\n    \n    # Round the LOF scores to 4 decimal places\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    \n    # Find the indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = [i for i, score in enumerate(lof_scores) if score > epsilon]\n    outlier_indices_sorted = sorted(outlier_indices)\n    \n    return lof_scores_rounded, outlier_indices_sorted\n```\n\nThis implementation follows the steps outlined in the problem description to compute the Local Outlier Factor (LOF) scores and identify outliers based on the given `epsilon` value. The code ensures that all necessary calculations are performed manually without relying on external libraries like `scipy` or `sklearn`."}
{"task_id": 573, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    m, n = X_train.shape\n    w = np.zeros(n)\n    b = 0.0\n    error_count_history = []\n\n    for _ in range(n_iter):\n        error_count = 0\n        for x_i, y_i in zip(X_train, y_train):\n            if y_i * (np.dot(w, x_i) + b) <= 0:\n                w += eta * y_i * x_i\n                b += eta * y_i\n                error_count += 1\n        error_count_history.append(error_count)\n        if error_count == 0:\n            break\n\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded, error_count_history\n```\n\nThis implementation follows the classical Rosenblatt Perceptron learning rule. It initializes the weights and bias to zero, iterates over the training data for a specified number of epochs, and updates the weights and bias based on misclassified examples. The function returns the learned weights, bias, and a history of the number of errors in each epoch. All numerical values are rounded to the nearest fourth decimal place."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.extend(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n        \n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.extend(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    y_train = np.array(y_train)\n    X_val = np.round(np.array(X_val), 4)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis function generates synthetic 2-D data for a specified number of classes (`m`), with each class having a specified number of training (`n_train`) and validation (`n_val`) points. The coordinates of the points are sampled from a uniform distribution within a specific range determined by the class label. The function ensures reproducibility by using a random seed if provided. The coordinates in the returned arrays are rounded to 4 decimal places."}
{"task_id": 577, "completion_id": 0, "completion": "To solve this problem, we need to generate synthetic 2-D data for a classification task. The data will be divided into training and validation sets, with each class having its own distribution of points. Here's how we can implement the `generate_data` function:\n\n1. **Set the Random Seed**: If a seed is provided, we initialize the random number generator to ensure reproducibility.\n2. **Initialize Arrays**: We'll create empty lists to store the training and validation data and their corresponding labels.\n3. **Generate Data for Each Class**: For each class `i`, we generate `n_train` training samples and `n_val` validation samples according to the specified distributions.\n4. **Round Coordinates**: Ensure that all coordinates are rounded to four decimal places.\n5. **Return the Data**: Convert the lists to NumPy arrays and return them.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function must create two NumPy arrays with coordinates and two with\n    labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    \n    for i in range(m):\n        # Calculate the ranges for the current class\n        x_min_train = round(((i // 2) + 0.1) * 10, 4)\n        x_max_train = round(((i // 2) + 0.9) * 10, 4)\n        y_min_train = round(((i % 2) * 0.5 + 0.1) * 10, 4)\n        y_max_train = round(((i % 2) * 0.5 + 0.9) * 10, 4)\n        \n        x_min_val = x_min_train\n        x_max_val = x_max_train\n        y_min_val = y_min_train\n        y_max_val = y_max_train\n        \n        # Generate training samples\n        for _ in range(n_train):\n            x = round(random.uniform(x_min_train, x_max_train), 4)\n            y = round(random.uniform(y_min_train, y_max_train), 4)\n            X_train.append([x, y])\n            y_train.append(round((i - 0.5) * 2, 4))\n        \n        # Generate validation samples\n        for _ in range(n_val):\n            x = round(random.uniform(x_min_val, x_max_val), 4)\n            y = round(random.uniform(y_min_val, y_max_val), 4)\n            X_val.append([x, y])\n            y_val.append(round((i - 0.5) * 2, 4))\n    \n    # Convert lists to NumPy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_val = np.array(X_val)\n    y_val = np.array(y_val)\n    \n    return X_train, X_val, y_train, y_val\n```\n\n### Explanation:\n- **Random Seed**: If a seed is provided, `random.seed(seed)` is called to ensure that the random numbers generated are the same across different runs.\n- **Data Generation**: For each class `i`, we calculate the ranges for `x` and `y` coordinates based on the class index. We then generate the required number of training and validation samples within these ranges.\n- **Rounding**: All coordinates and labels are rounded to four decimal places to ensure determinism.\n- **Conversion to NumPy Arrays**: Finally, the lists are converted to NumPy arrays before returning them.\n\nThis implementation ensures that the data is generated correctly according to the specified rules and constraints."}
{"task_id": 578, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    \n    pairs = [(corpus[i], corpus[i + 1]) for i in range(len(corpus) - 1)]\n    return pairs\n```\n\nThis function iterates over the `corpus` list and creates a list of tuples, where each tuple contains a pair of consecutive elements. If the length of the `corpus` is less than 2, it returns an empty list."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Initialize the first k points as the initial centers\n    centers = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assignment step: Assign each point to the nearest center\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centers, axis=1)\n            nearest_center_index = np.argmin(distances)\n            labels.append(nearest_center_index)\n        \n        # Update step: Recompute the centers\n        new_centers = np.zeros_like(centers)\n        counts = np.zeros(k, dtype=int)\n        \n        for i, label in enumerate(labels):\n            new_centers[label] += X[i]\n            counts[label] += 1\n        \n        # Avoid division by zero if a center has no points assigned to it\n        for i in range(k):\n            if counts[i] == 0:\n                continue\n            new_centers[i] /= counts[i]\n        \n        # Check for convergence\n        if np.allclose(centers, new_centers, atol=1e-9):\n            break\n        \n        centers = new_centers\n    \n    # Round the centers to 4 decimal places\n    centers = np.round(centers, 4).tolist()\n    \n    return labels, centers\n```\n\nThis implementation follows the classical K-Means algorithm as described. It initializes the centers using the first `k` points, then iteratively assigns points to the nearest center and updates the centers based on the mean of the assigned points. The process stops when the centers no longer change significantly or when the maximum number of iterations is reached. The centers are rounded to four decimal places before returning."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Initialize weights and bias\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    \n    # Check if learning rate or iterations are zero\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n    \n    # Perform gradient descent\n    for _ in range(iterations):\n        # Compute predictions\n        predictions = np.dot(X, weights) + bias\n        \n        # Compute residuals\n        residuals = y - predictions\n        \n        # Compute gradients\n        gradient_weights = -2 * np.dot(X.T, residuals) / m\n        gradient_bias = -2 * np.sum(residuals) / m\n        \n        # Add L1 and L2 penalties\n        gradient_weights += l1_penalty * np.sign(weights)\n        gradient_weights += 2 * l2_penalty * weights\n        \n        # Update weights and bias\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    \n    # Round the results to 4 decimal places\n    weights_rounded = [round(w, 4) for w in weights]\n    bias_rounded = round(bias, 4)\n    \n    return weights_rounded, bias_rounded\n```\n\nThis implementation of Elastic-Net Regression from scratch includes the initialization of weights and bias, checks for edge cases where the learning rate or number of iterations is zero, and performs the specified number of gradient descent iterations. The gradients are computed according to the provided formulas, including the L1 and L2 penalties. Finally, the results are rounded to four decimal places before being returned."}
{"task_id": 582, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X = np.array(X)\n    n_samples = X.shape[0]\n    \n    if n_samples == 1:\n        return [[0]]\n    \n    # Calculate k\n    k = min(int(np.sqrt(n_samples)), 10)\n    \n    # Compute the distance matrix\n    distance_matrix = np.linalg.norm(X[:, np.newaxis] - X, axis=2)\n    \n    # Initialize the adjacency matrix\n    W = np.zeros((n_samples, n_samples), dtype=int)\n    \n    # Find the k nearest neighbors for each point\n    for i in range(n_samples):\n        # Get the indices of the k nearest neighbors (excluding the point itself)\n        nearest_indices = np.argsort(distance_matrix[i])[1:k+1]\n        W[i, nearest_indices] = 1\n    \n    # Make the graph undirected\n    W = np.maximum(W, W.T)\n    \n    # Convert to list of lists\n    return W.tolist()\n```\n\nThis function first checks if there is only one sample, in which case it returns a single-element list containing a zero. It then calculates the value of \\( k \\) as the minimum of the square root of the number of samples rounded down and 10. The Euclidean distance matrix is computed using NumPy's broadcasting and norm functions. For each sample, the function finds the indices of the \\( k \\) nearest neighbors (excluding the sample itself) and sets the corresponding entries in the adjacency matrix to 1. Finally, the adjacency matrix is made undirected by taking the element-wise maximum with its transpose, and the result is converted to a list of lists before being returned."}
{"task_id": 584, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    frame_array = np.array(state)\n    \n    # Repeat the frame along a new axis to create a 3D array with shape (height, width, 4)\n    stacked_state = np.repeat(frame_array[:, :, np.newaxis], 4, axis=2)\n    \n    # Convert the resulting NumPy array back to a list of lists of lists\n    return stacked_state.tolist()\n```\n\nThis function takes a 2-D list representing a grayscale frame and stacks it four times along a new axis to form an initial state for a Deep Q-Learning agent. The result is returned as a regular Python nested list."}
{"task_id": 585, "completion_id": 0, "completion": "```python\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a > b:\n        return 1\n    elif a < b:\n        return -1\n    else:\n        return 0\n```\n\nThis implementation of the `cmp` function checks the relationship between the two input objects `a` and `b` using the standard comparison operators. It returns `1` if `a` is greater than `b`, `-1` if `a` is less than `b`, and `0` if they are equal. This mirrors the behavior of the Python 2 `cmp` function."}
{"task_id": 586, "completion_id": 0, "completion": "To implement the LOWESS (Locally Weighted Linear Regression) predictor as described, we need to follow these steps:\n\n1. **Normalization**: Normalize both `x` and `y` to the interval [0, 1].\n2. **Nearest Neighbors Selection**: Find the `window` nearest neighbors to the normalized `x_query`.\n3. **Tricubic Weights Calculation**: Compute the tricubic weights for these neighbors.\n4. **Weighted Linear Regression**: Fit a weighted linear regression model using the selected neighbors and their weights.\n5. **Prediction**: Predict the value at the normalized `x_query` and convert it back to the original scale.\n6. **Validation**: Ensure that the input arrays have the same length and that the window size is within the valid range.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised \u0177 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    \n    # Validate input\n    if len(x) != len(y):\n        raise ValueError(\"The length of x and y must be the same.\")\n    if not (2 <= window <= len(x)):\n        raise ValueError(\"Window size must be between 2 and the length of x.\")\n    \n    # Normalize x and y\n    x_norm = (x - np.min(x)) / (np.max(x) - np.min(x))\n    y_norm = (y - np.min(y)) / (np.max(y) - np.min(y))\n    \n    # Normalize x_query\n    x_query_norm = (x_query - np.min(x)) / (np.max(x) - np.min(x))\n    \n    # Find the indices of the nearest neighbors\n    distances = np.abs(x_norm - x_query_norm)\n    nearest_indices = np.argsort(distances)[:window]\n    \n    # Get the nearest neighbors\n    x_nearest = x_norm[nearest_indices]\n    y_nearest = y_norm[nearest_indices]\n    \n    # Calculate tricubic weights\n    d_max = np.max(distances[nearest_indices])\n    weights = np.where(distances[nearest_indices] / d_max <= 1, \n                      (1 - (distances[nearest_indices] / d_max)**3)**3, 0)\n    \n    # Fit a weighted linear regression\n    weights_sum = np.sum(weights)\n    if weights_sum == 0:\n        # If all weights are zero, return the mean of y_nearest\n        return np.mean(y_nearest) * (np.max(y) - np.min(y)) + np.min(y)\n    \n    weighted_x = np.sum(weights * x_nearest)\n    weighted_y = np.sum(weights * y_nearest)\n    weighted_xx = np.sum(weights * x_nearest**2)\n    weighted_xy = np.sum(weights * x_nearest * y_nearest)\n    \n    # Calculate slope (b) and intercept (a)\n    b = (weighted_xy - (weighted_x * weighted_y) / weights_sum) / \\\n        (weighted_xx - (weighted_x**2) / weights_sum)\n    a = (weighted_y - b * weighted_x) / weights_sum\n    \n    # Predict the value at x_query_norm\n    y_pred_norm = a + b * x_query_norm\n    \n    # Convert back to original scale\n    y_pred = y_pred_norm * (np.max(y) - np.min(y)) + np.min(y)\n    \n    # Return the prediction rounded to 4 decimal places\n    return np.round(y_pred, 4)\n\n# Example usage:\n# x = np.array([1, 2, 3, 4, 5])\n# y = np.array([2, 3, 5, 7, 11])\n# x_query = 3.5\n# window = 3\n# print(lowess_predict(x, y, x_query, window))\n```\n\nThis code implements the LOWESS predictor according to the specified requirements, including normalization, weight calculation, and handling edge cases like zero weights."}
{"task_id": 587, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Any, List, Tuple\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    replay_buffer = []\n    outputs = []\n    \n    # Set the random seed for deterministic behavior\n    random.seed(0)\n    \n    for op in operations:\n        if op[0] == 'append':\n            replay_buffer.append(op[1])\n        elif op[0] == 'pop':\n            if replay_buffer:\n                outputs.append(replay_buffer.pop())\n            else:\n                outputs.append(None)\n        elif op[0] == 'sample':\n            batch_size = op[1]\n            if batch_size > len(replay_buffer):\n                outputs.append([])\n            else:\n                outputs.append(random.sample(replay_buffer, batch_size))\n        elif op[0] == 'size':\n            outputs.append(len(replay_buffer))\n    \n    return outputs\n```\n\nThis function `manage_replay_memory` processes a list of operations on a replay buffer, maintaining the specified behavior for each operation type. It ensures reproducibility by setting the random seed to 0 at the start. The function handles appending, popping, sampling, and checking the size of the buffer, collecting and returning the results of operations that produce output."}
{"task_id": 588, "completion_id": 0, "completion": "To solve the problem of finding the maximum depth of a binary tree, we can use a recursive approach. The idea is to traverse the tree and compute the depth of each subtree, then take the maximum of these depths and add one to account for the current node.\n\nHere's the implementation of the `tree_max_depth` function:\n\n```python\nfrom typing import Optional\n\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    \n    # Recursively find the depth of the left and right subtrees\n    left_depth = tree_max_depth(root.left)\n    right_depth = tree_max_depth(root.right)\n    \n    # The maximum depth of the tree is the greater of the two depths plus one for the current node\n    return max(left_depth, right_depth) + 1\n```\n\n### Explanation:\n\n1. **Base Case**: If the `root` is `None`, the tree is empty, and we return `-1` as specified.\n\n2. **Recursive Case**: \n   - We recursively calculate the maximum depth of the left subtree (`left_depth`) and the right subtree (`right_depth`).\n   - The maximum depth of the current tree is the maximum of these two depths plus one, which accounts for the current node itself.\n\nThis approach ensures that we correctly compute the depth of the entire tree by considering the longest path from the root to any leaf node."}
{"task_id": 590, "completion_id": 0, "completion": "To solve the Minesweeper logic problem, we need to implement the `minesweeper_step` function that processes the given `ground` and `flags` matrices according to the specified rules. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Identify Revealed Squares**: We need to find all the squares in the `ground` matrix that have a numerical value (i.e., they are not `np.nan`).\n\n2. **Check Each Revealed Square**: For each revealed square, we will check its neighbors to determine if any of them can be safely revealed or must be flagged based on the rules provided.\n\n3. **Determine Neighbors**: For each square, we need to consider its 8-connected neighbors (up, down, left, right, and the four diagonals).\n\n4. **Apply Rules**:\n   - If the revealed square's value is `0`, all unexplored and unflagged neighbors can be revealed.\n   - If the revealed square's value is `8`, all unexplored and unflagged neighbors must be flagged.\n   - For other values, calculate the number of flagged neighbors (`bombs`) and unexplored neighbors (`unexplored`). Then:\n     - If `bombs == value`, all unexplored neighbors can be revealed.\n     - If `unexplored == value`, all unexplored neighbors must be flagged.\n\n5. **Collect Results**: Collect all the coordinates that can be revealed (`clicks`) and those that must be flagged (`new_flags`).\n\n6. **Return Sorted Lists**: Ensure that both `clicks` and `new_flags` are sorted in ascending lexicographical order.\n\nHere's the implementation of the `minesweeper_step` function:\n\n```python\nimport numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags: list[list[bool]]) -> tuple[list[tuple[int, int]],\n                                                    list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    rows, cols = len(ground), len(ground[0])\n    clicks = set()\n    new_flags = set()\n\n    # Define the 8-connected neighborhood offsets\n    directions = [(-1, -1), (-1, 0), (-1, 1),\n                  (0, -1),         (0, 1),\n                  (1, -1), (1, 0), (1, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            if not np.isnan(ground[r][c]) and not flags[r][c]:\n                value = ground[r][c]\n                bombs = 0\n                unexplored = 0\n                unexplored_coords = []\n\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        if flags[nr][nc]:\n                            bombs += 1\n                        elif np.isnan(ground[nr][nc]):\n                            unexplored += 1\n                            unexplored_coords.append((nr, nc))\n\n                if value == 0:\n                    clicks.update(unexplored_coords)\n                elif value == 8:\n                    new_flags.update(unexplored_coords)\n                else:\n                    if bombs == value:\n                        clicks.update(unexplored_coords)\n                    elif unexplored == value:\n                        new_flags.update(unexplored_coords)\n\n    return sorted(clicks), sorted(new_flags)\n\n# Example usage\nground = [[1, np.nan],\n          [np.nan, np.nan]]\nflags = [[False, True],\n          [False, False]]\n\nprint(minesweeper_step(ground, flags))  # Output: ([(1, 0), (1, 1)], [])\n```\n\nThis function processes the board in a single pass, applying the rules to determine which squares can be revealed or flagged, and returns the results as sorted lists."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    \n    def relu(x):\n        return np.maximum(0, x)\n    \n    # Add bias term to the input\n    current_input = np.array([1] + x)\n    \n    # Iterate over each layer\n    for L in range(len(weights)):\n        # Perform dot product with the weight matrix\n        next_input = np.dot(current_input, weights[L])\n        \n        # Apply ReLU activation if it's not the last layer\n        if L < len(weights) - 1:\n            next_input = relu(next_input)\n        \n        # Update current input\n        current_input = next_input\n    \n    # Round the final output to four decimal places\n    if len(current_input) == 1:\n        return round(float(current_input[0]), 4)\n    else:\n        return [round(float(val), 4) for val in current_input]\n```"}
{"task_id": 592, "completion_id": 0, "completion": "To solve this problem, we need to analyze the neighbors of a given cell in a Minesweeper-like grid. We'll use NumPy arrays to represent the grid states: `clicked` and `flags`. The function will return two things:\n\n1. A sorted list of coordinates of unopened neighboring cells.\n2. The count of neighboring cells that are flagged as mines.\n\nHere's how we can implement this:\n\n1. Define the possible relative positions of neighboring cells.\n2. Iterate over these positions to check if they are within bounds and if they are unopened.\n3. Count the number of flagged neighbors.\n4. Return the sorted list of unopened neighbors and the flagged count.\n\nLet's implement this in the provided function:\n\n```python\nimport numpy as np\n\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    # Possible relative positions of neighboring cells\n    directions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1),         (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n    \n    unopened_neighbours = []\n    flagged_count = 0\n    \n    for dr, dc in directions:\n        r, c = row + dr, col + dc\n        # Check if the neighbor is within bounds\n        if 0 <= r < clicked.shape[0] and 0 <= c < clicked.shape[1]:\n            if not clicked[r, c]:\n                unopened_neighbours.append((r, c))\n            if flags[r, c]:\n                flagged_count += 1\n    \n    # Sort the list of unopened neighbors\n    unopened_neighbours.sort()\n    \n    return unopened_neighbours, flagged_count\n\n# Example usage:\nclicked = np.array([\n    [True, False, False],\n    [False, True, False],\n    [False, False, True]\n])\n\nflags = np.array([\n    [False, False, False],\n    [False, False, True],\n    [False, True, False]\n])\n\nresult = analyze_cell(clicked, flags, 1, 1)\nprint(result)  # Output: ([(0, 0), (0, 2), (2, 0)], 2)\n```\n\n### Explanation:\n- **Directions**: We define the relative positions of the 8 possible neighbors using a list of tuples.\n- **Bounds Check**: For each direction, we calculate the new coordinates `(r, c)` and check if they are within the bounds of the array.\n- **Unopened Check**: If the neighbor is not opened (`clicked[r, c]` is `False`), we add its coordinates to the `unopened_neighbours` list.\n- **Flagged Count**: If the neighbor is flagged (`flags[r, c]` is `True`), we increment the `flagged_count`.\n- **Sorting**: Finally, we sort the list of unopened neighbors before returning it.\n\nThis function should work efficiently for any valid input within the constraints of the Minesweeper game."}
{"task_id": 593, "completion_id": 0, "completion": "To solve the Minesweeper Constraint Deduction problem, we need to implement a function that processes a list of constraints and applies a series of logical rules to deduce which cells are safe and which contain mines. Here's a step-by-step breakdown of how to achieve this:\n\n1. **Solved Constraints**: \n   - If a constraint has a value of 0, all its variables are safe.\n   - If a constraint has a value equal to the number of variables, all its variables are mines.\n\n2. **Propagation of Knowledge**:\n   - Once a variable is identified as a mine or safe, it should be removed from all other constraints.\n   - If a mine is removed from a constraint, the value of that constraint should be decremented by 1.\n\n3. **Subset Rule**:\n   - If one constraint is a subset of another, the larger constraint can be reduced by subtracting the smaller constraint.\n\n4. **Duplicate Removal**:\n   - Remove any duplicate constraints that have the same set of variables and the same value.\n\nWe will implement these rules in a loop until no further deductions can be made. Here's the complete implementation:\n\n```python\nfrom copy import deepcopy\n\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\"\"\"\n    safe = []\n    mines = []\n    \n    while True:\n        new_constraints = []\n        changed = False\n        \n        for vars, value in constraints:\n            # Rule 1: Solved constraints\n            if value == 0:\n                for var in vars:\n                    if var not in safe:\n                        safe.append(var)\n                        changed = True\n            elif value == len(vars):\n                for var in vars:\n                    if var not in mines:\n                        mines.append(var)\n                        changed = True\n            \n            # Rule 2: Propagation of knowledge\n            new_vars = [var for var in vars if var not in safe and var not in mines]\n            if new_vars:\n                new_constraints.append([new_vars, value])\n        \n        # Rule 3: Subset rule\n        for i in range(len(new_constraints)):\n            for j in range(len(new_constraints)):\n                if i != j:\n                    vars1, value1 = new_constraints[i]\n                    vars2, value2 = new_constraints[j]\n                    if set(vars1).issubset(set(vars2)):\n                        new_vars = [var for var in vars2 if var not in vars1]\n                        new_value = value2 - value1\n                        if new_vars:\n                            new_constraints.append([new_vars, new_value])\n                            changed = True\n        \n        # Rule 4: Duplicate removal\n        seen = set()\n        unique_constraints = []\n        for vars, value in new_constraints:\n            key = (tuple(sorted(vars)), value)\n            if key not in seen:\n                seen.add(key)\n                unique_constraints.append([vars, value])\n        \n        constraints = unique_constraints\n        \n        if not changed:\n            break\n    \n    # Sort the results\n    safe.sort()\n    mines.sort()\n    \n    return (safe, mines)\n```\n\n### Explanation:\n\n- **Solved Constraints**: We check each constraint to see if it is fully solved (either all variables are mines or all are safe) and update our `safe` and `mines` lists accordingly.\n  \n- **Propagation of Knowledge**: We remove any variables that are already known to be safe or mines from the remaining constraints and adjust the values accordingly.\n\n- **Subset Rule**: We iterate over pairs of constraints and apply the subset rule to reduce constraints where possible.\n\n- **Duplicate Removal**: We use a set to track seen constraints and ensure only unique constraints remain.\n\nThis implementation repeatedly applies these rules until no further changes can be made, ensuring that we deduce all possible safe and mined cells."}
{"task_id": 594, "completion_id": 0, "completion": "To solve the problem of converting a maze into an undirected graph represented as an adjacency list, we need to follow these steps:\n\n1. **Identify Open Cells**: Traverse the maze and identify all cells that contain `0`, which represent open cells.\n\n2. **Define Adjacency**: For each open cell, determine its orthogonally adjacent open cells (up, down, left, right).\n\n3. **Build the Graph**: Create a dictionary where each key is an open cell's coordinate, and the value is a sorted list of its adjacent open cells.\n\n4. **Return the Graph**: Ensure the adjacency lists are sorted in ascending lexicographic order and return the graph.\n\nHere's the implementation of the `maze_to_graph` function:\n\n```python\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    if not maze or not maze[0]:\n        return {}\n\n    rows, cols = len(maze), len(maze[0])\n    open_cells = []\n\n    # Step 1: Identify all open cells\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 0:\n                open_cells.append((r, c))\n\n    # Step 2: Define adjacency\n    def get_neighbors(cell):\n        r, c = cell\n        neighbors = []\n        # Check up\n        if r > 0 and maze[r-1][c] == 0:\n            neighbors.append((r-1, c))\n        # Check down\n        if r < rows - 1 and maze[r+1][c] == 0:\n            neighbors.append((r+1, c))\n        # Check left\n        if c > 0 and maze[r][c-1] == 0:\n            neighbors.append((r, c-1))\n        # Check right\n        if c < cols - 1 and maze[r][c+1] == 0:\n            neighbors.append((r, c+1))\n        return sorted(neighbors)\n\n    # Step 3: Build the graph\n    graph = {cell: get_neighbors(cell) for cell in open_cells}\n\n    return graph\n```\n\n### Explanation:\n\n- **Identifying Open Cells**: We iterate over each cell in the maze. If a cell contains `0`, we add its coordinates to the `open_cells` list.\n\n- **Defining Adjacency**: The `get_neighbors` function checks the four possible directions (up, down, left, right) from a given cell. If an adjacent cell is open (`0`), it is added to the list of neighbors.\n\n- **Building the Graph**: We use a dictionary comprehension to create the graph. Each key is an open cell, and its value is the sorted list of its neighboring open cells.\n\n- **Returning the Graph**: The function returns the constructed graph. If there are no open cells, the function returns an empty dictionary.\n\nThis solution ensures that the adjacency lists are sorted in ascending lexicographic order, as required."}
{"task_id": 595, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each sample to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Update each centroid to the mean of the assigned samples\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 5: Sort the centroids in ascending lexicographical order and round them to 4 decimal places\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = np.round(sorted_centroids, 4)\n    \n    return rounded_centroids.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\n### Explanation:\n\n1. **Initialization**: The centroids are initialized using the first `k` samples from the input data `X`.\n\n2. **Assignment Step**: For each sample in `X`, we calculate the squared Euclidean distance to each centroid and assign the sample to the nearest centroid.\n\n3. **Update Step**: We update each centroid to be the mean of all samples assigned to it. If a cluster becomes empty, the centroid remains unchanged.\n\n4. **Convergence Check**: We check if the centroids have moved less than `1e-4` in any direction. If so, we stop the iterations early.\n\n5. **Sorting and Rounding**: After convergence, we sort the centroids lexicographically and round each coordinate to four decimal places.\n\nThis implementation ensures that the centroids are computed correctly according to the given requirements."}
{"task_id": 596, "completion_id": 0, "completion": "To solve the problem of converting a binary maze into an adjacency list representation, we need to follow these steps:\n\n1. **Identify Free Blocks**: Traverse the maze and identify all cells that contain `1`, which represent free blocks.\n2. **Determine Adjacency**: For each free block, check its four possible neighbors (up, down, left, right) to see if they are also free blocks.\n3. **Build the Adjacency List**: Create a dictionary where each key is a coordinate of a free block, and the value is a sorted list of its adjacent free neighbors.\n\nHere's the implementation of the solution:\n\n```python\nimport numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    rows, cols = maze.shape\n    adjacency_list = {}\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Find all free blocks\n    free_blocks = [(r, c) for r in range(rows) for c in range(cols) if maze[r, c] == 1]\n\n    for block in free_blocks:\n        neighbors = []\n        for dr, dc in directions:\n            nr, nc = block[0] + dr, block[1] + dc\n            if 0 <= nr < rows and 0 <= nc < cols and maze[nr, nc] == 1:\n                neighbors.append((nr, nc))\n        adjacency_list[block] = sorted(neighbors)\n\n    return adjacency_list\n\n# Example usage:\nmaze = np.array([\n    [1, 0, 1],\n    [1, 1, 0],\n    [0, 1, 1]\n])\nprint(convert_maze_to_graph(maze))\n```\n\n### Explanation:\n\n- **Finding Free Blocks**: We use a list comprehension to collect all coordinates `(r, c)` where `maze[r, c] == 1`.\n- **Checking Neighbors**: For each free block, we check its potential neighbors using the `directions` list, which contains tuples representing the relative positions of the four possible neighbors (up, down, left, right).\n- **Building the Adjacency List**: For each free block, we gather its valid neighbors (those that are within bounds and are also free blocks) and store them in a sorted list. This sorted list is then added to the adjacency list dictionary.\n\nThis approach ensures that the adjacency list is correctly built and that all neighbor lists are sorted in lexicographic order."}
{"task_id": 597, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_mse = float('inf')\n    best_feature_index = -1\n    best_threshold = -1\n\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        for t in unique_values:\n            L_mask = X[:, j] <= t\n            R_mask = X[:, j] > t\n            if np.any(L_mask) and np.any(R_mask):\n                y_L = y[L_mask]\n                y_R = y[R_mask]\n                var_L = np.mean((y_L - np.mean(y_L)) ** 2)\n                var_R = np.mean((y_R - np.mean(y_R)) ** 2)\n                mse = (len(y_L) / n_samples) * var_L + (len(y_R) / n_samples) * var_R\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature_index = j\n                    best_threshold = t\n\n    return [best_feature_index, best_threshold, round(best_mse, 4)]\n```\n\nThis function iterates over each feature and each unique value within that feature to find the best split based on the weighted Mean Squared Error (MSE). It ensures that the split leaves both left and right parts non-empty before calculating the MSE. The function returns the feature index, the threshold, and the minimal weighted MSE rounded to four decimal places."}
{"task_id": 598, "completion_id": 0, "completion": "To solve the problem of feature-wise standardization in a given data matrix, we need to follow these steps:\n\n1. **Compute the Mean and Standard Deviation**: For each feature (column), calculate the mean and population standard deviation (using `ddof=0`).\n2. **Standardize the Feature Values**: Replace each value in the feature with the z-score formula `(x - mean) / std`.\n3. **Handle Edge Cases**: \n   - If the standard deviation (`std`) is 0 (indicating a constant feature), set all values in that feature to 0.\n   - Replace any `NaN` or `inf` values resulting from the division by 0 with 0.\n4. **Round the Results**: Ensure all values in the resulting matrix are rounded to 4 decimal places.\n5. **Return the Result**: Convert the standardized numpy array back to a regular Python list of lists.\n\nHere's the implementation of the `standardize` function:\n\n```python\nimport numpy as np\n\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    data_array = np.array(data, dtype=float)\n    \n    # Initialize an empty list to store the standardized data\n    standardized_data = []\n    \n    # Iterate over each feature (column)\n    for feature in data_array.T:\n        mean = np.mean(feature)\n        std = np.std(feature, ddof=0)\n        \n        if std == 0:\n            # If the standard deviation is 0, fill the feature with zeros\n            standardized_feature = np.zeros_like(feature)\n        else:\n            # Standardize the feature\n            standardized_feature = (feature - mean) / std\n        \n        # Replace any NaN or inf values with 0\n        standardized_feature = np.nan_to_num(standardized_feature, nan=0.0, posinf=0.0, neginf=0.0)\n        \n        # Append the standardized feature to the result list\n        standardized_data.append(standardized_feature)\n    \n    # Convert the standardized data back to a list of lists and round to 4 decimal places\n    standardized_data = [list(map(lambda x: round(x, 4), row)) for row in standardized_data.T]\n    \n    return standardized_data\n\n# Example usage:\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nstandardized = standardize(data)\nprint(standardized)\n```\n\n### Explanation:\n- **Numpy Array Conversion**: We convert the input list to a numpy array for efficient computation.\n- **Feature Iteration**: We iterate over each feature (column) of the data.\n- **Mean and Standard Deviation Calculation**: For each feature, we calculate the mean and standard deviation.\n- **Standardization**: We apply the z-score formula to standardize the feature values.\n- **Edge Case Handling**: We handle cases where the standard deviation is 0 and replace any `NaN` or `inf` values with 0.\n- **Rounding and Conversion**: Finally, we round the values to 4 decimal places and convert the result back to a list of lists.\n\nThis function ensures that the data is standardized correctly, handles edge cases appropriately, and returns the result in the required format."}
