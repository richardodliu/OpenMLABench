{"task_id": 0, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ridge Regression Closed-Form Solver\n# Description:\nImplement Ridge (L2-regularised) Linear Regression using its closed-form solution.  \nGiven an ndarray where the last column is the target $\\mathbf y$ and all preceding columns are the features $\\mathbf X$, add a bias (intercept) term, then compute the weight vector  \n\n$$\\hat\\mathbf w=(\\mathbf X^\\top\\mathbf X+\\alpha\\,\\mathbf I)^{-1}\\,\\mathbf X^\\top\\mathbf y,$$\n\nwhere $\\alpha\\ge 0$ is the regularisation strength and $\\mathbf I$ is the identity matrix with a size equal to the number of columns in $\\mathbf X$ (after adding the bias).  \n\nIf the matrix $(\\mathbf X^\\top\\mathbf X+\\alpha\\,\\mathbf I)$ is not invertible (numerical determinant equal to 0), return **-1**.  \n\nReturn the weight vector rounded to **4 decimal places** as a Python list.\n# Your code should start with:\n```python\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"Your docstring here.\"\"\"\n    pass\n```\n# Output Constraints:\nRound every coefficient to the nearest 4th decimal and return a Python list (not an ndarray).\n"}
{"task_id": 1, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Dual-Form Perceptron Learning\n# Description:\nImplement the dual-form perceptron learning algorithm.\n\nThe classic perceptron learns a linear classifier of the form  f(x)=sign(w\u00b7x+b).  In its **dual formulation** the weight vector w is expressed as a linear combination of training samples\n\n            w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62\n\nwhere \u03b1\u1d62 \u2265 0 are the dual parameters that are updated during training.  All computations that involve x appear only through the inner product K(x\u1d62,x\u2c7c)=x\u1d62\u00b7x\u2c7c (i.e. the **Gram matrix**), so the algorithm is a first step towards kernel methods.\n\nWrite a function `perceptron_dual` that, given a training set `X_train` (shape `(n_samples, n_features)`) and a label vector `y_train` (values must be **+1 or \u20111**), learns the classifier with the following rules:\n\n1. Initialise `\u03b1 = 0`,  `b = 0`.\n2. Scan the samples in the order 0 \u2026 n-1.\n3. For the i-th sample compute  \n      activation = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c K(x\u2c7c,x\u1d62)\n   and test the margin  y\u1d62 (activation + b).\n4. If the margin is \u2264 0 the sample is mis-classified \u2013 update  \n      \u03b1\u1d62 \u2190 \u03b1\u1d62 + \u03b7,\n      b   \u2190 b + \u03b7 y\u1d62,\n   then restart the scan from i = 0.\n5. Stop when an entire pass over the data finishes with **no** update or after `n_iter` updates (the latter prevents an infinite loop on inseparable data).\n6. After training compute the primal weight vector w from the final \u03b1.\n\nReturn the tuple `(w, b)` where  \u2022 `w` is returned as a Python list rounded to four decimals,  \u2022 `b` is a scalar rounded to four decimals.\n\nIf the data are linearly separable the algorithm is guaranteed to converge in finite time.\n# Your code should start with:\n```python\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every component of w as well as b to 4 decimal places before returning.\n"}
{"task_id": 2, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Standard GLM Link Functions\n# Description:\nIn Generalized Linear Models (GLMs) the relationship between the expected value of the response variable, \u03bc, and the linear predictor, \u03b7 = X\u03b2, is controlled by a *link* function g(\u00b7).\n\nFor the three most common GLM instances you will implement a small helper that returns numpy-aware callables for\n\u2022 the link\u2003\u2003\u2003\u2003\u2003  g(\u03bc)\n\u2022 its inverse \u2003\u2003\u2003\u2003g\u207b\u00b9(\u03b7)\n\u2022 the first derivative g\u2032(\u03bc).\n\nRequired links\n1. identity\u2003g(\u03bc)=\u03bc\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(for Gaussian family)\n2. log\u2003\u2003\u2003g(\u03bc)=log \u03bc\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 (for Poisson family)\n3. logit\u2003\u2003g(\u03bc)=log(\u03bc/(1-\u03bc))\u2003\u2003\u2003\u2003\u2003 (for Bernoulli / Binomial)\n\nThe function must return a dictionary that can be used like the snippet below:\n```\nlinks = glm_links()\nmu  = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n```\nAll returned functions have to work with numpy scalars **and** 1-D/2-D numpy arrays via element-wise operations.\n# Your code should start with:\n```python\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nRound every numerical output inside your examples and in the public test-cases to four decimal places when showing them, but the functions themselves must work with full floating-point precision.\n"}
{"task_id": 3, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Isolation Tree Path Lengths\n# Description:\nIn **Isolation Forests** each sample is isolated by recursively partitioning the data with random splits.  A single randomly\u2013grown binary tree that performs this procedure is called an *isolation tree*.\n\nGrow the following kind of isolation tree for a given data matrix `data` (each row is a sample, each column a feature):\n1. The node receives the set of row-indices that reach it.\n2. If fewer than three samples reach the node it becomes a *leaf* and stores the indices it contains.\n3. Otherwise pick a split as follows\n   \u2022 choose a feature index `f` uniformly at random from all available features;\n   \u2022 let `down = min(data[indices, f])` and `up = max(data[indices, f])`;\n   \u2022 draw a real number `v` uniformly from `[down, up]`.\n4. Send every sample whose feature value is `\u2264 v` to the *left* child, all others to the *right* child and continue recursively.\n\nAfter the tree has been built, traverse it and record, for every original sample, the *depth* (number of edges from the root) of the leaf in which the sample ends up.\n\n\u2022 Always invoke `numpy.random.seed(0)` **inside** the main function before any random call so the result is reproducible.\n\u2022 Return the depths as a Python `list` where the *i-th* element corresponds to the *i-th* row of the input matrix.\n\nExample\nInput\n    data = np.arange(5).reshape(-1, 1)\nOutput\n    [2, 2, 2, 1, 1]\nReasoning\n    The tree is built with the random seed fixed to 0.  The first split separates samples `[0,1,2]` from `[3,4]`.  The left side is split once more while the right side is already a leaf.  Hence the first three samples reach depth 2 while the last two stop at depth 1.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    # TODO: implement the function according to the specification\n    pass\n```\n# Output Constraints:\nReturn a Python list of non-negative integers whose length equals the number of rows in the input array.\n"}
{"task_id": 4, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Pair-wise Squared Euclidean Distance Matrix\n# Description:\nImplement a function that computes the pair-wise squared Euclidean (L2) distance matrix for a set of samples.\n\nYou are given a two-dimensional NumPy array X of shape (n_samples, n_features).  Each row of X represents a point in an n_features-dimensional space.  The goal is to return a matrix D of shape (n_samples, n_samples) where\n\n    D[i][j] = \u2211_k (X[i,k] \u2212 X[j,k])\u00b2\n\nfor every pair of samples (i, j).\n\nThe distance matrix must satisfy the following properties:\n\u2022 D is symmetric (D[i][j] == D[j][i]).\n\u2022 All elements are non-negative.\n\u2022 The main diagonal is all zeros.\n\nThe implementation has to be fully vectorised (i.e. no explicit Python loops over samples) and should run in O(n_samples\u00b2) time using the identity\n\n    \u2016x \u2212 y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2\u00b7x\u1d40y.\n\nIf X is empty (shape (0, n_features)), return an empty list.  Otherwise return the distance matrix rounded to 4 decimal places and converted to a standard Python nested list using ndarray.tolist().\n# Your code should start with:\n```python\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a list of lists representing the distance matrix.  All values must be rounded to 4 decimal places.\n"}
{"task_id": 6, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Aggregating XGBoost Tree Outputs\n# Description:\nGradient\u2013boosted decision-tree ensembles (such as XGBoost) sequentially add trees that predict the negative gradient of a loss function.  During inference the individual tree outputs must be **aggregated** and then converted into class labels.\n\nIn the original XGBoost implementation the raw score for every class is built as\n\n    score = 0 - learning_rate * \u03a3 tree_prediction\n\nfollowed by a softmax transformation that turns the raw score vector of each sample into a probability distribution.  The predicted class is finally the index of the highest probability.\n\nWrite a function that replicates this final aggregation step.\n\nGiven\n1. a list `predictions` where every element is a 2-D array (or nested list) returned by one tree and having shape `(n_samples, n_classes)`, and\n2. a positive float `learning_rate`,\n\nthe function must\n\u2022 accumulate the tree outputs as shown above,\n\u2022 apply the softmax row-wise, and\n\u2022 return a Python list containing the predicted class label (argmax of the soft-maxed probabilities) for every sample.\n\nYou may assume that `predictions` is **non-empty** and that all arrays have identical shapes.  If two or more classes share the same maximum probability, `numpy.argmax`\u2019s tie-breaking (the first maximal index) must be used.\n# Your code should start with:\n```python\nimport numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a plain Python list containing one integer per sample.\n"}
{"task_id": 7, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Frequent Itemset Mining\n# Description:\nIn market basket analysis one often needs to discover **all item combinations that occur frequently enough** in a transactional data set.  \nYour task is to write a function that, given a list of transactions and a minimum support threshold, returns every frequent itemset together with its absolute support (the number of transactions that contain the itemset).\n\nDefinitions\n1. A *transaction* is a list of hashable items (strings, numbers, \u2026).\n2. The *support* of an itemset is the number of transactions that contain **all** the items in the set (duplicates inside the same transaction are ignored).\n3. An itemset is *frequent* if  \n   support \\(\\ge\\lceil \\text{minsup}\\times N\\rceil\\) where \\(N\\) is the total number of transactions.\n\nRequirements\n\u2022 Return the result as a dictionary `dict[tuple, int]` where each key is the itemset written as a **tuple sorted in ascending order** and the value is its support count.  \n\u2022 If no itemset satisfies the threshold return the empty dictionary `{}`.  \n\u2022 The algorithm must work for any 0 < `minsup` \u2264 1.  \n\u2022 Do **not** use third-party libraries such as *pandas*, *sklearn*, *torch*, *tensorflow* \u2026 \u2013 only Python standard library modules are allowed.\n\nExample\nInput\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nOutput\n{\n ('bread',): 4,\n ('milk',): 4,\n ('diaper',): 4,\n ('beer',): 3,\n ('bread', 'milk'): 3,\n ('bread', 'diaper'): 3,\n ('diaper', 'milk'): 3,\n ('beer', 'diaper'): 3\n}\n\nReasoning\nThere are 5 transactions, so \\(\\lceil0.6\\times5\\rceil = 3\\).  \nAll single items that appear in at least three transactions are frequent.  \nLikewise, pairs such as (bread, milk) appear together in 3 transactions and are also frequent.  \nNo triplet reaches a support of 3, therefore none is returned.\n# Your code should start with:\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Write your code below\n    pass\n```\n"}
{"task_id": 8, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Logistic Regression From Scratch\n# Description:\nImplement binary Logistic Regression **without using any third-party ML libraries**. The function must (1) learn the model parameters on a training set by batch gradient descent, and (2) use the learned parameters to predict the class labels of a second data set.  \n\nThe decision rule is:\n    \u2022 Compute the linear score  z = w\u00b7x + b  (b is the intercept).\n    \u2022 Apply the sigmoid     \u03c3(z) = 1 / (1 + e^{\u2212z}).\n    \u2022 Convert the probability to a class by standard rounding \u2013 i.e.   \\[pred = int(round(\u03c3(z)))\\].\n\nThe algorithm should start with all parameters initialised to **0** and perform `n_iterations` full-batch updates using the learning rate `learning_rate`.\n\nReturn the predicted labels for the test samples as a Python `list` of 0s and 1s.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    # Write your code here...\n    pass\n```\n# Output Constraints:\nReturn a Python list containing only integers 0 or 1.\n"}
{"task_id": 10, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: First-Order Exponential Smoothing\n# Description:\nImplement an exponential (first-order) smoothing function.  At every time step the **smoothed value** \\(\\tilde{X}_t\\) is obtained from the previously smoothed value \\(\\tilde{X}_{t-1}\\), the current raw observation \\(X_t\\) and a smoothing factor (also called the _forgetting_ or _decay_ factor) \\(\\varepsilon\\) according to\n\n\\[\\tilde{X}_t = \\varepsilon\\,\\tilde{X}_{t-1} + (1-\\varepsilon)\\,X_t\\]\n\nThe parameter \\(\\varepsilon\\) must lie in the interval \\([0,1]\\).  Values close to **0** almost ignore the past (little smoothing) whereas values close to **1** put almost all weight on the past (heavy smoothing).\n\nYour task is to write a function `smooth` that\n1. accepts scalars or one-dimensional array-like inputs (`list`, `tuple`, or `numpy.ndarray`) for `prev`, `cur`, and `weight`.\n2. performs broadcasting so that any of the three inputs may be either a scalar or a vector of the same length.\n3. returns the smoothed result rounded to **four decimal places**; if every input is a scalar return a single `float`, otherwise return a standard Python `list`.\n\nIf an input vector is provided for `weight`, each component is applied to the corresponding element.\n\nExample\n-------\nInput:\n    prev = 10.0\n    cur  = 12.0\n    weight = 0.8\n\nOutput:\n    10.4\n\nReasoning:\n    0.8\u00b710.0 + 0.2\u00b712.0 = 10.4, which (already) equals the value rounded to four decimals.\n# Your code should start with:\n```python\nimport numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\(\\tilde{X}_{t-1}\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\(X_t\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\(\\varepsilon\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nRound every returned value to the nearest 4th decimal. If the inputs are vectors return a Python list (use ndarray.tolist()).\n"}
{"task_id": 11, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means Clustering from Scratch\n# Description:\nImplement the K-Means clustering algorithm **without relying on any external machine-learning library**.  \nThe function must repeatedly  \n1. choose initial cluster centres,  \n2. assign every sample to its nearest centre (using the squared Euclidean distance),  \n3. recompute each centre as the arithmetic mean of all samples currently assigned to it,  \n4. stop when the maximum change of any centre between two consecutive iterations becomes smaller than `epsilon` **or** when `max_iter` iterations have been executed.  \n\nRequirements\n\u2022   The initial centres are simply the first `k` samples of the input array (deterministic and therefore testable).  \n\u2022   If during the iterations a cluster becomes empty, immediately re-initialise its centre with a random sample from the dataset (use `np.random.randint`) so the algorithm can continue.  \n\u2022   After convergence round every coordinate of every centre to **4 decimal places** and return them together with the list of cluster labels for the samples.  \n\u2022   No object-oriented code (classes) or external ML libraries such as *scikit-learn* are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery coordinate of every returned centre must be rounded to 4 decimal places.\n"}
{"task_id": 12, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Power Spectrum of Audio Frames\n# Description:\nYou are given a real-valued signal that has already been split into overlapped or non-overlapped frames (rows of a 2-D array).  For every frame, compute the **power spectrum** using the real\u2013valued FFT (`numpy.fft.rfft`).  \n\nThe power spectrum is the squared magnitude of the discrete Fourier transform (DFT).  For a frame of length $N$ (samples) the real FFT returns $N/2+1$ non-redundant frequency components \u2013 the DC value, the positive frequencies and, when $N$ is even, the Nyquist component.  \n\nOptionally, the result must be scaled by the number of returned DFT bins ($N/2+1$) when the argument `scale` is set to `True`.\n\nImplement the function `power_spectrum` that\n1. works on a 2-D NumPy array `frames` of shape `(M, N)` where each row is a frame,\n2. returns a 2-D Python list (obtained with `.tolist()`) containing the power spectrum of each frame, rounded to the 4th decimal place,\n3. if `scale` is `True`, divides every value by `N/2+1`.\n\nIf the input already has the required shape and contains only real numbers there are no error conditions \u2013 you can assume the inputs are valid.\n# Your code should start with:\n```python\nimport numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every entry of the returned spectrum to the nearest 4th decimal place and return a regular Python list of lists (use NumPy\u2019s `.tolist()`).\n"}
{"task_id": 13, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Item-based k-NN Collaborative Filtering Recommender\n# Description:\nYou are asked to implement a *pure* Python / NumPy version of an **item\u2013based k-nearest neighbour (k-NN) collaborative filtering recommender**.\n\nGiven\n\u2022 a user\u2013item rating matrix `data` where each row represents a user and each column an item,\n\u2022 the index of an *active* user `user_ind`,\n\u2022 the number `k` of items that have to be proposed, and\n\u2022 a similarity measure `criterion` that can be either `\"cosine\"` (default) or `\"pearson\"`,\n\nwrite a function that returns the indices of at most **k** items that the active user has **not** yet rated but are predicted to be the most attractive to him / her.\n\nAlgorithm to follow  (exactly replicates the logic of the reference implementation shown in the original code snippet):\n1. Build an *item\u2013item similarity matrix* `S` of shape `(n_item, n_item)`.\n   \u2022 For every unordered pair of items `(i , j)` collect all users that rated **both** items (ratings > 0).\n   \u2022 If the intersection is empty set `S[i,j] = S[j,i] = 0`.\n   \u2022 Otherwise form the two rating vectors `v1 , v2`.\n        \u2013 If `criterion == \"cosine\"` first *mean centre* each vector **only** when its sample standard deviation is larger than `1e-3` and then compute the cosine similarity.\n        \u2013 If `criterion == \"pearson\"` compute the usual sample Pearson correlation (`np.corrcoef`).\n2. For the active user collect the indices of the items he / she has already rated (`r > 0`). Denote the ratings with the vector `r`.\n3. For every yet unrated item `t` compute the *predicted attractiveness*\n        score(t) = \u03a3\u1d62  r\u1d62 \u00b7 S[t,i]   /   \u03a3\u1d62 |S[t,i]|\n   where the summation runs over the rated items `i` only.  If the denominator is `0`, the score is defined to be `0`.\n4. Return a list with the at most **k** unseen items sorted by decreasing predicted score.  If two items obtain exactly the same score keep the one with the **smaller** column index first (Python\u2019s sort stability guarantees this when the dictionary is filled in ascending order).\n5. If the user has already rated *all* items return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list whose length is at most k and that is sorted according to the rules stated in the description.  No rounding of the scores is required (only the indices are returned).\n"}
{"task_id": 14, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Logistic Loss, Gradient and Hessian\n# Description:\nImplement the binary Logistic (cross-entropy) loss together with its first and second derivatives with respect to the model logits.  \n\nGiven\n1. the ground-truth binary labels $y\\in\\{0,1\\}^n$ and  \n2. the predicted logits (pre-sigmoid scores) $\\hat y\\in\\mathbb R^{n}$,\n\nyou must write a function that returns a **tuple** containing:\n\u2022 the mean Logistic loss,  \n\u2022 the gradient (\\(\\partial\\ell/\\partial \\hat y\\)) for every sample,  \n\u2022 the Hessian diagonal (\\(\\partial^2\\ell/\\partial \\hat y^2\\)) for every sample.\n\nMathematically\np = \u03c3(\\hat y) = 1/(1+e^{-\\hat y})  \n\u03b5 = 1e-15 (to avoid log(0))  \n\nloss_i = \u2212\\,[y_i\\,\\log p_i + (1\u2212y_i)\\,\\log(1\u2212p_i)]  \n\u2207_i   = p_i \u2212 y_i  \nH_i   = p_i\\,(1\u2212p_i)\n\nReturn the **mean** of the individual losses and round **all** returned numbers to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    # =======  Write your code below  =======\n    pass  # Replace this line with your implementation\n    # =======  End of your code  =======\n```\n# Output Constraints:\nRound every returned float (loss, each gradient element, each Hessian element) to 4 decimal places.\n"}
{"task_id": 16, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate Contiguous N-grams\n# Description:\nWrite a Python function that returns all contiguous N-grams of a given sequence.  An N-gram is a sliding window of length **N** taken from consecutive elements of the sequence.  For example, the 2-grams of `[1, 2, 3, 4]` are `[(1, 2), (2, 3), (3, 4)]`.\n\nThe function should:\n1. Accept any ordered sequence that supports slicing (e.g., list, tuple, string).\n2. Return the N-grams in the order they appear in the original sequence.\n3. Return an empty list when **N** is larger than the sequence length.\n4. Treat every element (or character, if the input is a string) as an atomic token; do **not** split strings into words automatically.\n\nAssume that **N \u2265 1**.  You may use Python\u2019s built-in functions but **must not** import third-party libraries.  The result must be a list of tuples, each tuple containing exactly **N** elements.\n# Your code should start with:\n```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n"}
{"task_id": 17, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Build a Tree from Parent List\n# Description:\nYou are given three parallel lists that describe the nodes of a rooted tree.\n\n\u2022 items   \u2013 a list of strings, the label (item) stored in each node\n\u2022 counts  \u2013 a list of positive integers, the frequency (count) stored in each node\n\u2022 parents \u2013 a list of integers, the index of the parent node in the lists (or \u20131 if the node is the root)\n\nThe i-th entry of every list refers to the same node.  Exactly one entry in parents is \u20131, identifying the tree\u2019s single root.  Every other entry is a valid index 0 \u2264 p < n, meaning \u201cthe parent of node i is node p\u201d.  The children of a node must appear in the output **in the same order as they first appear in the input lists**.\n\nYour task is to build the corresponding tree and return the root as a nested dictionary structure that follows the schema\n```\n{\n    'item'    : <string>,\n    'count'   : <int>,\n    'children': [ <child-dict 1>, <child-dict 2>, \u2026 ]\n}\n```\n\nNo classes, external libraries, or exception handling are allowed.\n\nIf the input lists are empty, return an empty dictionary `{}`.\n# Your code should start with:\n```python\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn the exact nested dictionary structure shown in the description.  Children must appear in the order the corresponding nodes appear in the input lists.\n"}
{"task_id": 18, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Zero Array Generator\n# Description:\nCreate a lightweight replacement for NumPy\u2019s built-in zeros constructor.\n\nWrite a function named `zero` that returns a NumPy array filled with zeros whose shape is specified by the first positional argument `shape`.\n\n1. `shape` can be either\n   \u2022 an int (to create a 1-D array of that length), or\n   \u2022 an iterable of ints (tuple/list) describing the desired multi-dimensional shape.\n2. The function must accept an optional keyword argument `dtype` that sets the data type of the resulting array.  If `dtype` is **not** supplied, default to Python\u2019s built-in `float` (equivalent to `np.float64`).\n3. The returned value must be a **NumPy ndarray**, not a plain Python list.\n\nYour implementation may rely on NumPy\u2019s public API (e.g. `np.zeros`).\n# Your code should start with:\n```python\nimport numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray whose dtype equals the optional dtype argument (default float).\n"}
{"task_id": 19, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Best Gain Split for Gradient-Boosting Tree\n# Description:\nGradient boosting trees evaluate candidate feature thresholds by how much they decrease the regularised loss function.  \n\nFor a leaf that contains a set of training instances \\(\\mathcal{I}\\) with first-order (gradient) statistics \\(g_i\\) and second-order (Hessian) statistics \\(h_i\\), the regularised objective of that leaf is  \n\\[\\mathcal{L}(\\mathcal{I})\\;=\\;-\\,\\frac{1}{2}\\,\\frac{\\big(\\sum_{i\\in\\mathcal{I}} g_i\\big)^2}{\\sum_{i\\in\\mathcal{I}} h_i\\; +\\;\\lambda}\\; +\\;\\gamma\\]  \nwhere \\(\\lambda\\) and \\(\\gamma\\) are regularisation hyper-parameters.\n\nIf a node is split into a left child \\(\\mathcal{I}_L\\) and a right child \\(\\mathcal{I}_R\\), the **gain** obtained from the split is  \n\\[\\text{gain}\\;=\\;\\mathcal{L}(\\mathcal{I})\\; -\\;\\mathcal{L}(\\mathcal{I}_L)\\; -\\;\\mathcal{L}(\\mathcal{I}_R).\\]\n\nA positive gain implies the split reduces the overall loss.\n\nWrite a function `best_split` that, given\n1. a feature matrix `X` (shape *n_samples \u00d7 n_features*),\n2. the corresponding first-order gradients `g`,\n3. the corresponding second-order gradients `h`,\n4. the regularisation constants `gamma` and `lam`,\n\nreturns the best split **(feature_index, threshold)** that maximises the gain.  \n\nRules:\n\u2022 Consider every unique value of every feature as a possible threshold.  \n\u2022 A valid split must leave **at least two** training instances on each side.  \n\u2022 If no split yields a strictly positive gain, return `None`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    # >>>>>>>>>>  Write your code here  <<<<<<<<<<\n    pass\n```\n# Output Constraints:\nReturn `None` or a tuple `(feature_index, threshold)`.\nIf a split exists, the tuple must correspond to the split with the largest positive gain.\n"}
{"task_id": 20, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Sigmoid Activation and Its Gradient\n# Description:\nThe sigmoid (logistic) activation function is widely used in neural networks where it maps any real-valued input into the interval (0,1).  Its derivative (gradient) is equally important during back-propagation.  \n\nWrite a function that takes a single numeric value, a Python list, or a NumPy array *x* and returns **both** the element-wise sigmoid values and their corresponding gradients.\n\nBehaviour requirements\n1. The function must work with:\n   \u2022 an `int`/`float` scalar  \n   \u2022 a 1-D/2-D NumPy array  \n   \u2022 a Python list (which you may internally convert to a NumPy array)\n2. The return type must be a tuple `(sigmoid_x, gradient_x)` where\n   \u2022 if the input is a scalar, both items are rounded `float`s  \n   \u2022 if the input is an array/list, both items are *Python lists* of the same shape and rounded element-wise.\n3. All results must be rounded to **4 decimal places**.\n4. Use only the standard library and **NumPy**.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every numeric result to 4 decimal places and, for non-scalar inputs, convert NumPy arrays to Python lists using `.tolist()`.\n"}
{"task_id": 21, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost with One-Dimensional Decision Stumps\n# Description:\nImplement a **from-scratch** version of the AdaBoost learning algorithm when the weak learner is a one\u2013dimensional decision stump.  \n\nThe decision stump (weak classifier) is defined by a pair `(d, \u03b8)` where  \n\u2022 `d = 0` means it predicts **+1** when the sample value is *\u2264 \u03b8* and **\u20131** otherwise  \n\u2022 `d = 1` means it predicts **+1** when the sample value is *> \u03b8* and **\u20131** otherwise  \n\nDuring training the algorithm must:  \n1.  Start with uniform sample weights.  \n2.  Enumerate every possible stump obtained by putting the threshold halfway between every two consecutive training points (after the data are sorted).  \n3.  Repeatedly pick the stump with the minimum weighted error, compute its coefficient  \n      \u03b1 = \u00bd\u00b7ln((1\u2013err)/err)  \n     (update rules are those of standard AdaBoost).  \n4.  Update the sample weights and normalise them.  \n5.  Stop when the **training** error of the current ensemble is not larger than the user supplied value `epsilon`.\n\nAfter training, the strong classifier\u2019s prediction for a point *x* is  \n             sign( \u03a3 \u03b1\u1d62 \u00b7 h\u1d62(x) )  \nwhere *h\u1d62* are the selected decision stumps.\n\nWrite a single function that trains the ensemble **and** returns the predictions for a given test set.\n\nIf several stumps reach exactly the same weighted error you may return any of them \u2013 results for the provided tests are unique anyway.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers, each element being either **1** or **-1**.\n"}
{"task_id": 22, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Random Tensor Generation with Optional Standardization\n# Description:\nImplement a utility that quickly produces synthetic data.\n\nWrite a Python function that creates a random real-valued tensor (NumPy array) of a given shape.  Each element of the tensor is generated as\n  offset  +  u ,\nwhere  offset  is drawn from a discrete uniform distribution on the integers \u2013300,\u2026,299 and  u  is drawn from a continuous uniform distribution on the half-open interval [0,1).\n\nIf the optional flag  standardize  is set to  True, the function must independently standardize every column (feature) of the tensor so that, up to numerical precision, each column has mean 0 and standard deviation 1.  A tiny constant \u03f5 = np.finfo(float).eps has to be added to the denominator while standardizing to avoid division by zero when the column\u2019s variance happens to be 0.\n\nThe function must return the created tensor as a NumPy ndarray.\n# Your code should start with:\n```python\nimport numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nWhen standardize=True every column of the returned array must have mean 0 and standard deviation 1 (up to an absolute numerical tolerance of 1e-10).\n"}
{"task_id": 24, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single-Step Nesterov Accelerated Gradient Optimiser\n# Description:\nImplement a single update step of the Nesterov Accelerated Gradient (NAG) optimisation algorithm. \n\nGiven the current parameter vector \\(w\\), the current velocity vector \\(v\\) (sometimes called the momentum term), a callable that returns the gradient of the objective function evaluated at an arbitrary point, a learning rate \\(\\eta\\) and a momentum coefficient \\(\\mu\\), your task is to compute the next values of both the parameters and the velocity according to the following rules:\n\n1. Look-ahead point (used to evaluate the gradient)\n   \\[\\tilde w = w - \\mu \\, v\\]\n2. Gradient evaluation (with element-wise clipping)\n   \\[g = \\text{clip}(\\nabla f(\\tilde w),\\; -1,\\; 1)\\]\n3. Velocity update\n   \\[v' = \\mu \\, v + \\eta \\, g\\]\n4. Parameter update (gradient descent direction)\n   \\[w' = w - v'\\]\n\nThe function must return the updated parameters \\(w'\\) and the updated velocity \\(v'\\) **both rounded to 4 decimal places and converted to ordinary Python lists**.\n\nIf the incoming velocity is an empty list (i.e. the very first call), treat it as a vector of zeros having the same shape as \\(w\\).\n# Your code should start with:\n```python\nimport numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n\u2022 Both the updated weights and the updated velocity must be rounded to the nearest 4th decimal.\n\u2022 Return the two rounded Python lists inside a tuple in the order (new_weights, new_velocity).\n"}
{"task_id": 25, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Kernel SVM Prediction\n# Description:\nYou are given everything that is already needed to make predictions with a pre-trained Support Vector Machine that uses a Gaussian (a.k.a. Radial Basis Function \u2013 RBF) kernel:\n1. X_train \u2013 the training samples used when the model was fitted (shape n\u00d7d)\n2. y_train \u2013 their binary class labels (only \u22121 or 1, length n)\n3. alpha \u2013 the final Lagrange multipliers returned by the training algorithm (length n)\n4. b \u2013 the bias (intercept) term\n5. gamma \u2013 the Gaussian kernel hyper-parameter\n6. X_test \u2013 samples whose classes have to be predicted (shape m\u00d7d)\n\nFor a test vector z the SVM decision function is\n    g(z) = \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 exp( \u2212\u03b3 \u00b7 ||x_i \u2212 z||\u00b2 )  +  b\nwhere ||\u00b7|| denotes the Euclidean norm.  The predicted class is sign(g(z)).  Implement a function that computes this value for every row in X_test and returns the corresponding predicted labels as a Python list of integers (each element must be either 1 or \u22121).\n\nThe implementation must work for arbitrary numbers of training and test samples, be fully vectorised (only NumPy, math are allowed) and must not rely on any external ML library. Do NOT raise exceptions; you may assume the inputs are valid.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers of length m, where m is the number of test samples. Each element must be exactly 1 or -1.\n"}
{"task_id": 26, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ReLU Activation and Gradient\n# Description:\nImplement the Rectified Linear Unit (ReLU) activation function together with its element-wise gradient.\n\nGiven an arbitrary-shaped numerical array \\(x\\), the ReLU activation is defined as\n\n    ReLU(x) = max(0, x)  (applied element-wise)\n\nThe corresponding gradient (sometimes called the derivative mask) is\n\n           1,  if  x \u2265 0\n    d/dx =\n           0,  otherwise\n\nWrite a single function that receives the input as a (possibly nested) Python list, applies the ReLU transformation, computes the gradient mask, and returns **both** results converted back to (nested) Python lists in **the same shape** as the input.\n\nHints\n1. Convert the input to a NumPy array for concise element-wise operations.\n2. Use `np.where` to avoid explicit Python loops.\n3. The derivative at exactly zero should be taken as **1** (as in the supplied code snippet).\n# Your code should start with:\n```python\nimport numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a *tuple* `(activation, gradient)` where both elements are Python lists that preserve the original shape.\n"}
{"task_id": 28, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Autoencoder Reconstruction\n# Description:\nAn autoencoder can be interpreted as a neural network that tries to reproduce its input at the output.  \nIf the network is linear and we only keep **k** latent dimensions, then the optimal reconstruction (with minimum squared error) is given by keeping the first **k** singular values/vectors of the data matrix \u2013 i.e. by a truncated Singular Value Decomposition (SVD).\n\nWrite a Python function that:\n1. Receives a two-dimensional list **X** (shape \\(m\\times n\\)) and an integer **k** (\\(1\\le k\\le \\min(m,n)\\)).  \n2. Computes the rank-\\(k\\) reconstruction \\(\\hat X\\) using the truncated SVD (this is equivalent to the best linear auto-encoder with **k** latent units).\n3. Returns a tuple `(X_hat, mse)` where  \n   \u2022 **X_hat** is the reconstructed matrix rounded to four decimals and converted back to a list of lists,  \n   \u2022 **mse** is the mean squared reconstruction error, also rounded to four decimals.\n\nIf **k** is smaller than 1 or greater than `min(m, n)` return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every reconstructed value and the MSE to the nearest 4th decimal.\n"}
{"task_id": 29, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Dimensional Gradient Boosting with Stumps\n# Description:\nYou are asked to implement a very small-scale gradient boosting regressor that only works on one-dimensional data and that uses decision stumps (a single split with a constant value on each side) as weak learners.  The algorithm is as follows:\n1. Sort the training samples by the single feature $x$ (a scalar).\n2. Candidate split points are the mid-points between every two consecutive feature values.\n3. While the residual sum of squares (RSS) of the current ensemble is larger than a tolerance $\\varepsilon$  \n   \u2022  For every candidate split **s**\n      \u2013 let $c_1$ be the mean of the current residuals whose feature values are $\\le s$  \n      \u2013 let $c_2$ be the mean of the current residuals whose feature values are $>  s$  \n      \u2013 compute the RSS that would be obtained by adding the stump defined by *(s, c1, c2)*  \n   \u2022  Add to the ensemble the stump that produces the smallest RSS.\n   \u2022  Update the residuals (real target minus current ensemble prediction).\n4. After the loop finishes, predictions for a new point *x* are obtained by summing the constant contributions of all learned stumps (add $c_1$ if *x* is on the left of the corresponding split, otherwise add $c_2$).\n\nWrite the function `predict_boosting_tree` that\n\u2022  receives the training feature list/array `x_train`, the training target list/array `y_train`, a query point `x_query`, and an optional tolerance `epsilon` (default $10^{-2}$),\n\u2022  trains the ensemble described above on the training data, and\n\u2022  returns the prediction for `x_query`.\n\nReturn value must be rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a single floating-point value rounded to 4 decimal places.\n"}
{"task_id": 32, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Input Sanitisation with a Decorator\n# Description:\nImplement a lightweight input\u2013sanitising helper that can be reused for binary numeric operations.\n\nThe file already contains a decorator called `validate_input`.  It expects a helper named `check_data` that receives the two positional arguments of the decorated function, cleans (or converts) them, and then returns the pair `(a, b)` to be passed on.\n\nYour tasks are:\n1. Write the function `check_data(a, b)` so that it\n   \u2022 accepts `int`, `float`, or **numeric strings** (strings that Python\u2019s built-in `float()` can parse);\n   \u2022 converts every string to the corresponding numeric value (use `float` for the conversion);\n   \u2022 leaves already\u2013numeric values unchanged;\n   \u2022 returns the two cleaned values as a tuple in the original left\u2013right order.\n2. Using the decorator, create a function `sum_numbers(a, b)` that simply returns their sum.  The decorator must be applied exactly once.\n\nIf either argument cannot be converted to a number, Python\u2019s own `float()` will raise a `ValueError`; no additional error handling is required.\n# Your code should start with:\n```python\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    # TODO: implement\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n\n    return wrapper\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    return a + b\n```\n# Output Constraints:\nReturn a normal Python `int` when the result is an integer, otherwise a `float`.\n"}
{"task_id": 34, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Random Binary Tensor Generator\n# Description:\nYou are asked to write a utility that produces a NumPy tensor filled with 0.0s and 1.0s.  The caller specifies the desired shape and a sparsity value (probability of generating a **1**).  Optionally a seed can be provided to obtain reproducible results.\n\nThe function must obey the following rules:\n1. \"sparsity\" is a real number in the closed interval \\([0,1]\\).\n2. Each entry of the returned tensor is 1.0 with probability equal to \"sparsity\" and 0.0 otherwise.\n3. If a seed is supplied, the procedure must first call ``np.random.seed(seed)`` so that the result is deterministic.\n4. When ``sparsity`` is outside the legal range the function must return **-1**.\n5. The output must be a ``numpy.ndarray`` whose ``dtype`` is a floating type (``0.0`` and ``1.0`` values only).\n\nExample behaviour (with seed for reproducibility):\nInput: ``shape = (2,3)``, ``sparsity = 0.3``, ``seed = 42``  \nRandom array produced by ``np.random.rand`` starts with\n[[0.3745 , 0.9507 , 0.7320 ],\n [0.5987 , 0.1560 , 0.1560 ]].  \nThe threshold is ``1 - 0.3 = 0.7`` so entries \\(\\ge 0.7\\) become 1.0, others 0.0, giving\n[[0.0, 1.0, 1.0],\n [0.0, 0.0, 0.0]].\n# Your code should start with:\n```python\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"TODO: Complete docstring and implement the function\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a NumPy array containing only the float values 0.0 and 1.0.\n"}
{"task_id": 35, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decision Tree Classification Traversal\n# Description:\nYou are given a very lightweight tree node class that is often used to represent decision trees.\n\nclass node:\n    def __init__(self, fea=-1, res=None, child=None):\n        self.fea = fea          # the feature index used to split at this node; -1 means this node is a leaf\n        self.res = res          # the label stored in the leaf; None for internal nodes\n        self.child = child      # dictionary that maps a feature value to the corresponding sub-tree\n\nImplement a function classify(root, sample) that walks through such a tree and returns the prediction for the given sample (a list of feature values).\n\nTraversal rules\n1. Start at the root node.\n2. While the current node is **not** a leaf (fea != -1):\n   \u2022 If the required feature index is outside the sample list, immediately return -1.\n   \u2022 Look up the feature value ( sample[current.fea] ). If this value is **not** present in current.child, immediately return -1.\n   \u2022 Otherwise move to the sub-tree stored in current.child[value].\n3. When a leaf node is reached (fea == -1) return its res field.\n\nIf any lookup fails during the traversal, the function must return -1.\n# Your code should start with:\n```python\nfrom typing import Any\nfrom typing import Any\n\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int = -1, res: Any | None = None, child: dict | None = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\n\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    # TODO: implement the traversal algorithm\n    pass\n```\n# Output Constraints:\nReturn -1 when the path required by the sample does not exist in the tree.\n"}
{"task_id": 36, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decision Tree Prediction\n# Description:\nYou are given a very small `Node` class that can be used to represent a binary decision tree.  Every non-leaf node stores the index of the feature to inspect (`feature`) and a numeric split value (`threshold`).  Its two children are stored in the attributes `left` and `right`.\n\nFor a leaf node both `left` and `right` are set to `None`; in this case the attribute `threshold` is **re-used** to hold the predicted value (class label or regression value) for that leaf, while `feature` is set to `None`.\n\nYour task is to write a function that runs the tree on a batch of samples and returns the corresponding list of predictions.\n\nThe decision rule is very simple:\n1.  Start from the root node.\n2.  If the node is a leaf (`node.left is None and node.right is None`) return its stored prediction (`node.threshold`).\n3.  Otherwise compare the requested feature with the stored threshold: if `sample[node.feature] \u2264 node.threshold` move to the *left* child, otherwise move to the *right* child.\n4.  Repeat the previous steps until a leaf is reached.\n\nYou must keep the relative order of the supplied samples and produce a list whose *i-th* element is the prediction for the *i-th* sample.\n\nIf the tree is empty (`root is None`) the function must return an empty list.\n# Your code should start with:\n```python\nfrom typing import List, Optional\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"TODO: implement this function following the task description.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python *list* of raw predictions (int or float) in the same order as the input samples.\n"}
{"task_id": 37, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: KD-Tree Construction\n# Description:\nA kd-tree (short for k-dimensional tree) is a space-partitioning data structure that is widely used for organising points in a k-dimensional space so that nearest-neighbour and range searches can be performed efficiently.\n\nWrite a Python function that builds a kd-tree from a NumPy array.  The input array contains *n* rows and *(m+1)* columns where:\n\u2022 columns **0 \u2026 m-1** hold the numerical feature values of each point (the point\u2019s coordinates)\n\u2022 the **last column** *(index m)* holds an arbitrary label or value that is associated with the point.\n\nThe tree must be returned as a **nested dictionary** in which each internal dictionary represents a node with the following keys:\n    \"point\" : a list of the m feature values of the point stored in this node,\n    \"label\" : the value found in the last column of the same row,\n    \"left\"  : the kd-tree that contains all points that lie *before* the median along the current splitting dimension (or `None` if empty),\n    \"right\" : the kd-tree that contains all points that lie *after* the median along the current splitting dimension (or `None` if empty).\n\nBuilding rules\n1. The splitting dimensions cycle through **0, 1, \u2026, m-1, 0, 1, \u2026** in that order.  A single global generator is used, therefore the dimension order continues across the whole build process (exactly as in the original kd-tree algorithm).\n2. For the current splitting dimension *d* the data must be **sorted** by column *d* and the element situated at index \u230an/2\u230b (integer division) is selected as the **median** and becomes the current node.\n3. All rows that appear *before* the median form the *left* subset, all rows that appear *after* the median form the *right* subset.  The construction then recurses on the two subsets.\n4. If the received subset is empty the recursion stops and `None` must be returned.\n\nReturn `None` when the original input array has zero rows.\n# Your code should start with:\n```python\nimport numpy as np\nfrom itertools import cycle\nimport numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn `None` for an empty input array.\n"}
{"task_id": 38, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: LinUCB Arm Selection\n# Description:\nImplement the arm-selection phase of the LinUCB algorithm for a **disjoint contextual linear bandit**.  \nGiven  \u2022 a context matrix that contains the feature vector of every arm for the current time-step,  \u2022 the per-arm Gram matrices $A_a\\;(D\\times D)$ and covariance vectors $\\mathbf b_a\\;(D)$ that summarise past interactions, and  \u2022 the exploration coefficient $\\alpha>0$,  \nyou must return the index of the arm that maximises the LinUCB upper confidence bound\n\n            p_a = \\hat\\theta_a^\\top\\mathbf c_a \n                  + \\alpha\\,\\sqrt{\\mathbf c_a^\\top A_a^{-1}\\,\\mathbf c_a},\n\nwhere $\\hat\\theta_a = A_a^{-1}\\,\\mathbf b_a$ and $\\mathbf c_a$ is the context column of arm *a*.\n\nThe input lists `A` and `b` always have the same length *(number of arms)* as the number of columns in `context`.  \nReturn the smallest index in the case of a tie (the behaviour of `numpy.argmax`).\n# Your code should start with:\n```python\nimport numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    # TODO: Implement the LinUCB arm-selection logic\n    pass\n```\n# Output Constraints:\nReturn **only** the integer index of the selected arm.\n"}
{"task_id": 39, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Median Split for KD-Tree Construction\n# Description:\nImplement a function that performs a median split on a dataset \u2013 the basic operation that underlies KD-Tree construction. For a given two-dimensional NumPy array `data` (shape `(n_samples, n_features)`) and a column index `d`, the function has to\na. find the sample whose value in column `d` is the median ( for even *n*, use position `n//2` )\nb. return its **row index** (in the original array)\nc. return the row indices of all samples that fall strictly to the *left* (smaller values) of the median and the row indices that fall strictly to the *right* (larger values).\nThe split must be executed in **O(n)** time by using `numpy.argpartition` (do **not** sort the whole column). The lists of indices in the result must be sorted increasingly to make the output deterministic.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # ===== write your code below =====\n    pass\n```\n# Output Constraints:\n\u2022 Return a 3-tuple (pivot, left, right)\n\u2022 `pivot` is an int, `left` and `right` are **Python lists** of ints\n\u2022 The two lists must be sorted increasingly\n"}
{"task_id": 40, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Overlapping Signal Framing\n# Description:\nImplement a NumPy-based utility that breaks a one-dimensional signal into overlapping frames.  Given a 1-D NumPy array `x`, a positive integer window length `frame_width`, and a positive hop length `stride`, the function must return a view on `x` with shape `(n_frames, frame_width)` such that consecutive rows are separated by `stride` samples.  The number of frames is defined as  \n\n    n_frames = (len(x) - frame_width) // stride + 1\n\nIf `(len(x) - frame_width) % stride != 0`, the trailing samples that cannot form a complete frame are dropped.  \n\nThe implementation **must** rely on low-level stride manipulation (i.e. `numpy.lib.stride_tricks.as_strided`) so that the result is a *view* on the original signal, not a copy.  A Boolean argument `writeable` controls whether the returned view can be written to.  When `writeable=False` the returned array must have `arr.flags.writeable == False`, otherwise it inherits the writability of the original array.\n\nReturn the resulting framed signal as a NumPy array.\n\nIf any of the following pre-conditions are violated the function should fail with an `AssertionError` (use `assert`):\n1. `x` is not one-dimensional.\n2. `stride < 1`.\n3. `len(x) < frame_width`.\n# Your code should start with:\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nThe function returns a NumPy ndarray view on the original data.  Its shape must be `(n_frames, frame_width)` as defined in the description.\n"}
{"task_id": 41, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours Classifier\n# Description:\nImplement a simple **k-Nearest Neighbours (k-NN) classifier**.\n\nYou are given a set of training samples `X_data` (each sample is a list of numerical features) together with their class labels `y_data`.  For every query sample in `X` you must return the predicted label obtained by majority voting among its `k` closest neighbours in the training set, where distance is measured with the ordinary Euclidean norm.\n\nRules for the vote:\n1. Use the *k* training samples with the **smallest** Euclidean distances to the query point (if *k* is larger than the training set size, use all samples).\n2. The class that appears most often among these neighbours wins.\n3. If several classes are tied for the highest count, return the **lexicographically smallest** one so the prediction is deterministic.\n\nThe function must work for any numeric feature dimension and for labels of any sortable type (e.g. `int`, `str`).\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a list whose i-th entry is the predicted label for the i-th query sample.\nIf several labels are tied after the vote pick the lexicographically smallest one.\n"}
{"task_id": 42, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Root Mean Squared Logarithmic Error (RMSLE)\n# Description:\nRoot Mean Squared Logarithmic Error (RMSLE) is a popular evaluation metric for regression models whose targets can span several orders of magnitude and cannot be negative (e-commerce prices, number of views, etc.).  \nGiven two equally-long sequences of non-negative numbers \u2013 the true (actual) targets and the model predictions \u2013 RMSLE is defined as\n\nRMSLE = \\sqrt{\\frac1n\\sum_{i=1}^{n}{\\bigl(\\ln(\\text{pred}_i+1)-\\ln(\\text{act}_i+1)\\bigr)^2}}.\n\nWrite a Python function that\n1. Validates the input: both lists must have the same non-zero length and all values must be **greater than or equal to 0**. If the validation fails the function must return **-1**.\n2. Computes RMSLE according to the above formula.\n3. Rounds the final result to **four decimal places** and returns it as a plain Python `float`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n```\n# Output Constraints:\nReturn a Python `float` rounded to the nearest 4th decimal place.\n"}
{"task_id": 44, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Tanh Activation and Gradient\n# Description:\nIn deep-learning libraries an *activation* function is applied element-wise to the linear output of each layer. One of the most popular nonlinearities is the hyperbolic tangent (tanh).\n\nWrite a function `tanh_activation` that takes a one-dimensional Python list (or NumPy 1-D array) `x` and a Boolean flag `derivative`.\n\n\u2022 If `derivative` is **False** the function must return the element-wise tanh values of `x` **without calling `np.tanh`**.\n\u2022 If `derivative` is **True** the function must return the element-wise gradient of tanh, i.e. $1-\\tanh^2(x)$.\n\nVectorised NumPy implementation is expected. The returned value must be a Python list rounded to 4 decimal places.\n\nFormula that must be used:\n$$\\tanh(x)=\\frac{2}{1+e^{-2x}}-1$$\n# Your code should start with:\n```python\nimport numpy as np\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list with every element rounded to the nearest 4th decimal.\n"}
{"task_id": 46, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: 1-D Autocorrelation\n# Description:\nImplement a Python function that computes the **one\u2013dimensional autocorrelation** of a finite real-valued signal.\nGiven a 1-D sequence `x = [x\u2080,x\u2081,\u2026,x_{N-1}]`, its autocorrelation for non-negative lags is defined as\n\n        a_k = \u03a3_{n=0}^{N-k-1} x_{n+k} \u00b7 x_n ,    for k = 0,1,\u2026,N-1\n\nThe function must:\n1. Accept a Python list or a 1-D NumPy array of numeric values (int or float).\n2. Return a Python list containing the `N` autocorrelation coefficients `[a\u2080,a\u2081,\u2026,a_{N-1}]`.\n3. Work in **O(N\u00b2)** time using the direct double-sum formulation (do **not** call `np.correlate`, `scipy`, or the FFT).\n4. Handle the corner case `N = 0` by returning an empty list.\n\nExample\n-------\nInput  : `x = np.array([1, 2, 3])`\nOutput : `[14, 8, 3]`\n\nReasoning\n---------\nFor `x = [1,2,3] (N = 3)`:\n\u2022 a\u2080 = 1\u00b71 + 2\u00b72 + 3\u00b73 = 1 + 4 + 9 = 14\n\u2022 a\u2081 = 2\u00b71 + 3\u00b72           = 2 + 6     = 8\n\u2022 a\u2082 = 3\u00b71                 = 3\nHence the returned list is `[14, 8, 3]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list (not a NumPy array). Do not round or modify the exact numerical values.\n"}
{"task_id": 48, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Validate Row-Stochastic Matrix\n# Description:\nA stochastic (probability) matrix is a two-dimensional array whose elements are valid probabilities (each element lies in the closed interval [0, 1]) and whose rows each sum to 1.  \n\nWrite a Python function that verifies whether a given matrix is row-stochastic.\n\nThe function must:\n1. Accept the matrix as a *list of lists* or a `numpy.ndarray` of numeric values.\n2. Return **True** if **all** of the following hold, otherwise return **False**:\n   \u2022 Every element is between 0 and 1 inclusive.  \n   \u2022 The matrix is two-dimensional.  \n   \u2022 Each row sums to 1 up to a numerical tolerance of `1e-8` (use `numpy.allclose`).\n\nNo exceptions should be raised by the function \u2013 just return the Boolean result.\n# Your code should start with:\n```python\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single Boolean value: True if the matrix is row-stochastic, otherwise False.\n"}
{"task_id": 49, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k Smallest Elements via Manual Heap\n# Description:\nImplement a function that returns the k smallest elements contained in a numeric list without sorting the whole list or using Python\u2019s built-in \u201cheapq\u201d module. \n\nThe idea is to **scan the list once** while maintaining an auxiliary **max-heap of at most _k_ elements** implemented \"by hand\" with a Python list and two helper procedures, `_move_up` and `_move_down`, that restore the heap property after insertions and deletions:\n1. When a new number is encountered:\n   \u2022 If the heap currently stores fewer than _k_ items, push the new number into the heap.\n   \u2022 Otherwise, compare the new number with the heap root (the largest of the stored numbers). If the new number is smaller, replace the root with the new number and move the new root down until the heap property is satisfied.\n2. After the scan ends, the heap holds exactly the _k_ smallest elements \u2013 but in arbitrary order. Sort the heap once and return it.\n\nReturn **-1** when _k_ is non-positive or greater than the length of the input list.\n# Your code should start with:\n```python\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list sorted in non-decreasing order. No rounding is required.\n"}
{"task_id": 51, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Newton\u2019s Method for 2-D Linear Regression\n# Description:\nImplement Newton\u2019s method to solve a **two\u2013variable linear least\u2013squares problem**.   \nGiven a data matrix `X\u2208\u211d^{n\u00d72}` (each row is a sample, each column a feature) and a target vector `y\u2208\u211d^{n\u00d71}`, we want the weight vector `w\u2208\u211d^{2\u00d71}` that minimises the mean\u2013squared error  \nMSE(w)=\\frac1n\u2016Xw\u2212y\u2016\u00b2.  \nAt every iteration Newton\u2019s method updates the current weights\n```\n w \u2190 w \u2212 H^{-1}\u2207\n```\nwhere\n```\n\u2207 = 2/n \u00b7 X\u1d40(Xw \u2212 y)               # gradient of the MSE\nH = 2/n \u00b7 X\u1d40X                      # Hessian of the MSE\n```\nStarting from `w=[1,1]\u1d40`, iterate until either  \n\u2022 the Euclidean norm (2-norm) of the gradient drops below `epsilon`, **or**  \n\u2022 the number of iterations reaches `max_iter`.\n\nReturn the final weight vector rounded to 4 decimal places **as a Python list of lists** (shape 2\u00d71).  \nIf the Hessian is singular use its Moore\u2013Penrose pseudo-inverse so that the algorithm still works for rank-deficient data matrices.\n# Your code should start with:\n```python\nimport numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n    \"\"\"Your task is to complete this function!\"\"\"\n```\n# Output Constraints:\nReturn a list of lists with each value rounded to the nearest 4th decimal.\n"}
{"task_id": 54, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Whitespace Tokenizer with Stop-word & Punctuation Filtering\n# Description:\nImplement a whitespace tokenizer that optionally converts text to lower-case, strips punctuation symbols and filters out common English stop-words. The function receives a text string and three boolean flags:\n\n1. lowercase (default=True) \u2013 if True, convert the whole string to lower-case before any other processing.\n2. filter_stopwords (default=True) \u2013 if True, remove tokens that appear in a predefined list of English stop-words.\n3. filter_punctuation (default=True) \u2013 if True, strip every ASCII punctuation character from the beginning and end of each token. If the resulting token becomes an empty string it must be discarded.\n\nThe function must always preserve the original token order, discard zero-length tokens, and return the final list of tokens. No third-party libraries are allowed \u2013 only the standard library may be used.\n# Your code should start with:\n```python\nimport string\ndef tokenize_whitespace(line: str, lowercase: bool = True, filter_stopwords: bool = True, filter_punctuation: bool = True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a list of strings in the original order after all requested filters are applied.\n"}
{"task_id": 55, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: RMSprop Optimiser for Linear Regression\n# Description:\nImplement the RMSprop optimisation algorithm for ordinary least-squares (OLS) linear regression.\n\nGiven a design matrix X\u2208\u211d^{n\u00d7d} (each row is a training sample and each column is a feature) and a target vector y\u2208\u211d^{n}, the goal is to find a weight vector w\u2208\u211d^{d} that minimises the mean\u2013squared error\n\n    L(w)=1/(2n)\u2016Xw\u2212y\u2016\u00b2.\n\nWrite a function rms_prop that starts from the all-zero weight vector and iteratively updates the parameters using the RMSprop rule\n\n    s   \u2190 \u03c1\u00b7s +(1\u2212\u03c1)\u00b7g\u00b2            (element-wise)\n    w   \u2190 w \u2212 \u03b7 \u00b7 g /(\u221as+\u03f5_station)\n\nwhere\n    g  = \u2207L(w) = (1/n)\u00b7X\u1d40(Xw\u2212y)\n    s  is the running average of squared gradients (initialised with zeros),\n    \u03c1  is the decay rate,\n    \u03b7  is the learning rate, and\n    \u03f5_station is a tiny constant to avoid division by zero.\n\nStop the optimisation **early** when the \u2113\u2082-norm of the gradient becomes smaller than epsilon or when the number of iterations reaches max_iter.\nReturn the final weight vector rounded to four decimal places and converted to a Python list.\n\nIf n<batch_size, simply use the full data set as one batch; otherwise process mini-batches by slicing successive blocks of rows (wrap around when the end of the matrix is reached).\n# Your code should start with:\n```python\nimport numpy as np\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the weight vector as a Python list with every element rounded to 4 decimal places.\n"}
{"task_id": 56, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: SoftPlus Activation with Gradient\n# Description:\nImplement the SoftPlus activation function that is widely used in deep-learning models.  \nThe SoftPlus of a real number $x$ is defined as  \nSoftPlus$(x)=\\log\\bigl(1+e^{x}\\bigr)$.  \nIts derivative with respect to $x$ is the logistic (sigmoid) function  \n$\\sigma(x)=\\dfrac{1}{1+e^{-x}}$.  \n\nWrite a Python function `softplus` that\n1. Accepts a scalar, Python list, or NumPy array `x` containing real values, and a Boolean flag `deriv` (default `False`).\n2. When `deriv=False` it returns **SoftPlus(x)** for every element of `x`.\n3. When `deriv=True` it returns the **gradient**, i.e. the element-wise sigmoid of `x`.\n4. Uses a numerically stable formulation so that very large positive or negative inputs do not overflow (hint: `log1p` and a piece-wise expression help).\n5. Rounds every resulting value to the nearest 4th decimal and returns the results as a Python list.  If a scalar is provided, return the rounded scalar **float**.\n# Your code should start with:\n```python\nimport numpy as np\ndef softplus(x, deriv: bool = False):\n    \"\"\"TODO: implement\"\"\"\n    pass\n```\n# Output Constraints:\nRound every value to the nearest 4th decimal.\nReturn a Python list (or a single float when the input is a scalar).\n"}
{"task_id": 58, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Unsmoothed Maximum-Likelihood N-gram Log-Probability\n# Description:\nImplement an unsmoothed, Maximum-Likelihood Estimation (MLE) N-gram language model.  \nGiven a training corpus (a list of word tokens), an integer order **N** (\u22651) and a target **sequence** (also a list of word tokens), write a function that returns the total log-probability (natural logarithm) of the sequence under the **N**-gram MLE model trained on the corpus.\n\nFor a fixed order **N** the probability of an N-gram `(w\u2081 \u2026 w_N)` is estimated by\n\n \u2022 N = 1 (unigram):\u2003P(w\u2081) = count(w\u2081) / |corpus|\n \u2022 N > 1           :\u2003P(w\u2081 \u2026 w_N) = count(w\u2081 \u2026 w_N) / count(w\u2081 \u2026 w_{N-1})\n\nThe log-probability of the whole sequence is the sum of the log-probabilities of every length-**N** sliding window inside the sequence:\n\n\u2003log P(sequence) = \u03a3 log P(sequence[i : i+N])\u2003for i = 0 \u2026 len(sequence)\u2212N\n\nIf at any point either the numerator or the denominator is zero (i.e. the n-gram or its prefix was not observed in the corpus) the function must return `float('-inf')`.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\nfrom collections import Counter\nimport numpy as np\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the log-probability rounded to 4 decimal places using `round(value, 4)`.  \nIf the probability is zero return `float('-inf')` (negative infinity) exactly.\n"}
{"task_id": 60, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Impurity Metrics for Decision Trees\n# Description:\nIn a decision-tree algorithm the quality of a candidate split is evaluated with an impurity (or loss) function.  The three most common choices are\n\n\u2022 Entropy \u2013 used by the ID3 / C4.5 algorithms for classification.\n\u2022 Gini index \u2013 used by the CART algorithm for classification.\n\u2022 Mean\u2013squared error (MSE) \u2013 used by CART for regression.\n\nWrite a single helper function that can compute any of the above metrics.  The function receives a one-dimensional NumPy array `y` containing the target values of the samples that end up in the same node and a string `criterion` that specifies which metric to return (`\"entropy\"`, `\"gini\"` or `\"mse\"`).\n\nReturn the result rounded to 4 decimal places.\n\nIf an empty array is supplied, the impurity is defined as 0.0.  For `criterion` values other than the three mentioned above the function must raise a `ValueError`.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single floating point number rounded to the nearest 4th decimal.\n"}
{"task_id": 61, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gradient of Mean Squared Error for Linear Regression\n# Description:\nIn ordinary-least-squares (OLS) linear regression the mean\u2013squared-error (MSE) cost function is usually written as\n\n    J(W) = 1/(2N) \u00b7 \u2016XW \u2013 y\u2016\u00b2\n\nwhere \u2022  X\u2208\u211d\u207f\u02e3\u1d48 is the design matrix (each row is a training example),\n      \u2022  y\u2208\u211d\u207f is the target vector and\n      \u2022  W\u2208\u211d\u1d48 are the model parameters.\n\nThe gradient of this cost with respect to the weight vector W is\n\n    \u2207J(W) = (X\u1d40 (XW \u2013 y)) / N\n\nWrite a function that returns this gradient.\n\nThe function must\n1. accept X, y and W as Python lists or NumPy arrays;\n2. automatically reshape one-dimensional y and/or W into column vectors;\n3. validate the dimensions (\u2022 X must be 2-D, \u2022 y must have the same number of rows as X, \u2022 W must have the same number of rows as X\\[0] columns). If any of these conditions is violated, return **-1**;\n4. compute the gradient using vectorised NumPy operations only;\n5. round every value in the resulting vector to 4 decimal places and return it as a nested Python list of shape (d, 1).\n# Your code should start with:\n```python\nimport numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to the nearest 4th decimal and return the result as a list of lists with shape (d, 1).  If the input dimensions are incompatible return -1.\n"}
{"task_id": 62, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Univariate Lasso Regression with Polynomial Features\n# Description:\nImplement a univariate Lasso regression learner that supports polynomial feature expansion. The implementation must use **coordinate descent** to minimise the following objective function  \n\n    1/2m * \\sum_{i=1}^{m} ( \\hat y_i- y_i )^2  + \\lambda * \\sum_{j=1}^{d} |w_j| ,\n\nwhere\n\u2022 m is the number of training examples,  \n\u2022 d is the chosen polynomial degree,  \n\u2022 w\u2080 is the bias (intercept) and is **not** regularised,  \n\u2022 w\u2c7c   ( j \u2265 1 ) are the coefficients of the j-th polynomial term x\u2c7c (x raised to power j),  \n\u2022 \u03bb is the supplied regularisation strength `reg_factor`.\n\nThe function must\n1. Accept one\u2013dimensional input `X`, target values `y`, a polynomial degree `degree`, a regularisation strength `reg_factor`, an optional maximum number of iterations `n_iterations`, and an optional tolerance `tol` used for early stopping.\n2. Build a design matrix that contains a column of ones followed by x\u00b9, x\u00b2 \u2026 x\u1d48. \n3. Optimise the weights with coordinate descent\n   \u2022 Update the bias exactly in every iteration:   \n     w\u2080 \u2190 mean( y \u2212 X_{\u00ac0}\u00b7w_{\u00ac0} )\n   \u2022 For every other coefficient compute  \n     \u03c1 = x\u2c7c\u1d40 (y \u2212 (X\u00b7w) + w\u2c7c x\u2c7c)  \n     w\u2c7c \u2190 soft_threshold(\u03c1 , \u03bb) / (x\u2c7c\u1d40x\u2c7c) ,  \n     where soft_threshold(\u03c1 , \u03bb) = sign(\u03c1)\u00b7max(|\u03c1|\u2212\u03bb, 0).\n4. Stop when the largest absolute weight change falls below `tol` or after `n_iterations` passes.  \n5. Return **all** coefficients `[w\u2080, w\u2081, \u2026, w_d]` rounded to 4 decimal places as a regular Python list.\n\nIf `reg_factor` is 0 the algorithm must converge to the ordinary least-squares solution.\n# Your code should start with:\n```python\nimport numpy as np\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the list of coefficients rounded to the nearest 4th decimal place.\n"}
{"task_id": 63, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hidden Markov Model \u2013 Backward Probability Vector\n# Description:\nIn a discrete Hidden Markov Model (HMM) the backward variable \\(\\beta_t(i)\\) expresses the probability of seeing the remaining observations from time \\(t+1\\) onward given that the system is in state \\(i\\) at time \\(t\\):\n\\[\n\\beta_t(i)=\\sum_{j=1}^{N}a_{ij}\\,b_j(o_{t+1})\\,\\beta_{t+1}(j)\\, ,\\qquad \\beta_{T-1}(i)=1\\,\\forall i.\n\\]\nHere\n\u2022 \\(a_{ij}\\) is the transition probability from state \\(i\\) to state \\(j\\),\n\u2022 \\(b_j(o_{t+1})\\) is the emission probability of observing symbol \\(o_{t+1}\\) in state \\(j\\),\n\u2022 \\(T\\) is the length of the observation sequence.\n\nWrite a function that returns the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\).\n\nThe function receives\n1. A \u2014 transition-probability matrix of shape (N, N),\n2. B \u2014 emission-probability matrix of shape (N, M),\n3. obs \u2014 list of observation indices (length T),\n4. t \u2014 integer time index (0 \u2264 t < T).\n\nIt must output a Python list containing the \\(N\\) backward probabilities rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"YOUR DOCSTRING HERE\"\"\"\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\n"}
{"task_id": 64, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Naive Discrete Fourier Transform (DFT)\n# Description:\nImplement a naive 1-D Discrete Fourier Transform (DFT).  Given a real or complex 1-D signal frame \\(x\\) of length \\(N\\), the DFT coefficient with index \\(k\\) is\n\\[\n      c_k = \\sum_{n=0}^{N-1} x_n\\,e^{-2\\pi i k n / N},\\qquad k=0,\\dots ,N-1.\n\\]\nThe function must:\n1. Construct the full spectrum `c` (length `N`).  Do **not** use `np.fft` (or any other FFT helper) \u2013 build it explicitly with matrix\u2013vector multiplication or nested loops; the intended complexity is \\(O(N^2)\\).\n2. If `positive_only` is `True`, return only the non-negative frequency terms, i.e. the first `N//2+1` coefficients; otherwise return the complete length-`N` spectrum.\n3. Round both the real and imaginary parts of every returned coefficient to four decimals and convert the result to a Python `list`.\n# Your code should start with:\n```python\nimport numpy as np\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound both real and imaginary parts of each coefficient to 4 decimal places and return a Python list.\n"}
{"task_id": 65, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hidden Markov Model \u2013 Backward Algorithm Probability\n# Description:\nIn a Hidden Markov Model (HMM) the probability that a particular observation sequence $O=(o_0,o_1,\\dots ,o_{T-1})$ is generated by the model $\\lambda=(\\pi ,A,B)$ can be computed efficiently with the backward algorithm.\n\nThe backward variables are defined as\n$$\n\\beta_t(i)=P(o_{t+1},o_{t+2},\\dots,o_{T-1}\\mid q_t=i,\\lambda),\\qquad t=T-1,\\dots ,0.\n$$\nThey can be calculated recursively\n$$\n\\beta_{T-1}(i)=1,\\qquad\n\\beta_t(i)=\\sum_{j=0}^{N-1}A_{ij}\\,B_{j,o_{t+1}}\\,\\beta_{t+1}(j) \\quad (t<T-1).\n$$\nFinally the sequence probability is\n$$\nP(O\\mid\\lambda)=\\sum_{i=0}^{N-1}\\pi_i\\,B_{i,o_0}\\,\\beta_0(i).\n$$\nWrite a function that receives the three HMM parameters and an observation sequence (as lists) and returns this probability using the backward algorithm.\n\nIf any of the input lists are empty you should return **0.0** because no valid probability can be computed.\n# Your code should start with:\n```python\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 6th decimal.\n"}
{"task_id": 67, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Simulating a Hidden Markov Model\n# Description:\nA Hidden Markov Model (HMM) is defined by three probability distributions:\n\u2022 the initial state distribution S\u2208\u211d\u207f (S[i] is the probability that the first hidden state equals i)\n\u2022 the state-transition matrix A\u2208\u211d\u207f\u02e3\u207f (A[i][j] is the probability of moving from hidden state i to j)\n\u2022 the emission matrix B\u2208\u211d\u207f\u02e3\u1d50 (B[i][k] is the probability that hidden state i emits observation k)\n\nWrite a Python function that simulates an HMM and produces a sequence of *n_sample* hidden states together with the corresponding observations.\n\nThe function must\n1. validate that every probability vector involved (S and every row of A and B) sums to 1 up to 1 \u00d7 10\u207b\u2078; if any distribution is invalid the function must immediately return **-1**;\n2. optionally accept an integer *seed*.  When *seed* is given the function must call **np.random.seed(seed)** so that identical inputs always lead to identical outputs (this makes testing reproducible);\n3. sample the first hidden state from S, then repeatedly\n   \u2022 sample the next hidden state from the current state\u2019s transition row of A,\n   \u2022 sample the observation from the current hidden state\u2019s emission row of B\n   until **n_sample** elements have been produced;\n4. return a tuple *(states, observations)* where both items are Python lists of length *n_sample* containing integers (0-based indices of the chosen states / observation symbols).\n# Your code should start with:\n```python\nimport numpy as np\nfrom itertools import accumulate\nimport numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a tuple *(states, observations)* where both are Python lists of integers.\n"}
{"task_id": 68, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Stochastic Gradient Descent with Momentum Update\n# Description:\nImplement Stochastic Gradient Descent (SGD) with momentum for a single optimisation step.  \nThe function receives the current parameter tensor **w**, the gradient of the loss with respect to **w**, a learning rate **learning_rate**, a momentum factor **momentum**, and the previous momentum update **prev_update** (also called velocity).  \nThe momentum update (velocity) \\(u_t\\) at step *t* is computed as\n\n\\[u_t = \\text{momentum} \\times u_{t-1} + (1-\\text{momentum}) \\times \\nabla_w\\]\n\nIf **prev_update** is *None*, treat it as a tensor of zeros having the same shape as **w**.  \nThe parameters are then updated by moving **against** the gradient using the newly computed velocity:\n\n\\[w_{t+1}=w_t-\\text{learning\\_rate} \\times u_t\\]\n\nReturn the updated parameters **and** the new velocity so that it can be reused in the next optimisation step.\n# Your code should start with:\n```python\nimport numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float = 0.01, momentum: float = 0.0, prev_update: np.ndarray | None = None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element in both returned arrays to 4 decimal places and convert them to plain Python lists.\n"}
{"task_id": 69, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hidden Markov Model \u2013 Forward Algorithm\n# Description:\nHidden Markov Models (HMMs) are widely used to model sequential data whose underlying system is assumed to be a Markov process with unobservable (hidden) states.  \n\nWrite a function that implements the *forward algorithm* to compute the likelihood of an observation sequence given an HMM.  \nThe model is fully specified by\n\u2022 the initial\u2010state probability vector S (length n),  \n\u2022 the state\u2013transition matrix A (n\u00d7n), and  \n\u2022 the emission matrix B (n\u00d7m) where B[i][k] is the probability of emitting observation symbol k from state i.  \n\nGiven S, A, B and a list of integer observations, return the probability that the model generates exactly that sequence.  \nThe function must:\n1. Validate the input dimensions.  \n2. Check that every observation index is in the valid range [0, m\u22121].  \n3. Return \u22121 when the input is invalid (dimension mismatch, empty sequence, or out-of-range index).  \n4. Otherwise implement the forward algorithm and return the result rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.  Use Python\u2019s built-in round(value, 4).\n"}
{"task_id": 70, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Frequent Pattern Growth (FP-Growth) Implementation\n# Description:\nWrite a Python function that discovers every frequent item-set that appears in a transactional data base using the **FP-Growth** algorithm (Han et al., 2000).  \nThe function receives  \n\u2022 `transactions` \u2013 a list whose elements are themselves lists; each inner list contains the items purchased in a single transaction.  \n\u2022 `min_support` \u2013 an integer \u2265 1 that states how many transactions an item-set has to appear in before it is considered frequent.\n\nThe algorithm must  \n1. Count the support of every single item and discard infrequent ones.  \n2. Build one FP-tree (a prefix tree in which every node stores *item name* and *support count*).  \n3. Recursively mine conditional FP-trees to obtain larger item-sets.  \n\nReturn a list of all frequent item-sets.  To make automatic testing possible the result has to be **deterministic**:\n\u2022 Inside every item-set the items must be sorted in lexicographic (alphabetical) order.  \n\u2022 The outer list must be sorted first by increasing item-set length and then lexicographically; in Python this is achieved with\n```python\nfrequent_itemsets.sort(key=lambda x: (len(x), x))\n```\nIf no item-set satisfies the support threshold return an empty list.\n# Your code should start with:\n```python\nfrom collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\n1. Each item inside an item-set must be sorted lexicographically.\n2. The returned list must be sorted by `(len(itemset), itemset)` so that calling `sort` with that key does **not** change the order.\n"}
{"task_id": 71, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Count Label Frequencies\n# Description:\nWrite a Python function that counts how many times each class label appears in a tabular data set.  The data set is provided as a list of samples, where every sample itself is a list and its last element is the class label (for example an integer or string).  The function must iterate once over the data set and return a dictionary whose keys are the distinct labels and whose values are their respective occurrence counts.\n\nIf the input list is empty the function must return an empty dictionary.\n# Your code should start with:\n```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a standard Python dict with labels as keys and their occurrence counts as integer values.  The order of keys in the dict is irrelevant.\n"}
{"task_id": 72, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Variance Reduction for Regression Tree Splits\n# Description:\nIn regression trees a split is evaluated by how much it reduces the total variance of the target values.  \nGiven the target vector **y** for the parent node and the two target vectors **y_left** and **y_right** that would go to the left- and right-child after a split, the variance reduction (VR) is defined as  \n\nVR = Var(y) \u2212 (n_left / n) \u00b7 Var(y_left) \u2212 (n_right / n) \u00b7 Var(y_right)\n\nwhere Var(\u00b7) denotes the (population) variance computed *feature-wise*, **n** is the number of samples in the parent node and **n_left**, **n_right** are the number of samples in the two children respectively.\n\nIf the target is multi-dimensional, the variance is first calculated for every column and then summed so that the function always returns a single floating-point value.\n\nWrite a function that implements this formula and returns the variance reduction obtained by the split.\n\nAssume that **y_left** and **y_right** are both non-empty.\n# Your code should start with:\n```python\nimport numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"Your docstring here.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 74, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Magnitude Spectrum of Frames\n# Description:\nWrite a Python function that computes the magnitude spectrum (absolute value of the Discrete Fourier Transform) for a batch of real-valued frames.  For each input frame of length $N$, only the non-redundant positive-frequency part of the spectrum (indices $0\\dots \\lfloor N/2\\rfloor$) must be returned, so every output frame has length $N//2+1$.\n\nIf the caller provides a one-dimensional array, treat it as a single frame.  Round every magnitude value to four decimal places and return the final result as a Python nested list (list of lists).\n\nAssumptions\n\u2022 All frames are real numbers.\n\u2022 The function must work for even or odd frame-lengths.\n\u2022 Use NumPy\u2019s real FFT (`numpy.fft.rfft`) to obtain the positive-frequency coefficients.\n# Your code should start with:\n```python\nimport numpy as np\ndef magnitude_spectrum(frames: \"np.ndarray\") -> \"list[list[float]]\":\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places and return the result with `tolist()`.\n"}
{"task_id": 75, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbour Classifier\n# Description:\nImplement a simple k-Nearest Neighbour (k-NN) classifier.\n\nGiven a labelled training set `(X_train, y_train)` and an unlabeled test set `X_test`, the classifier must assign a class to every test sample by majority voting among its **k** closest training samples (Euclidean distance).  \n\nRules:\n1. Distances are computed with the ordinary Euclidean metric (you may omit the square-root because it is monotone).  \n2. If several classes are tied for the highest vote, return the **smallest** class label among the tied ones.  \n3. If *k* is not a positive integer or *k* is larger than the number of training samples, return `-1`.\n\nThe function must return the predicted classes as a Python list of integers.\n# Your code should start with:\n```python\nimport numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a one-dimensional Python list of integers (not a NumPy array).\n"}
{"task_id": 76, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Categorical Cross-Entropy Loss\n# Description:\nImplement a function that calculates the (unnormalised) categorical cross-entropy loss for a batch of one-hot encoded targets.\n\nGiven  \n\u2022 y \u2013 the true class labels, encoded as a 2-D list/NumPy array of shape (n_samples, n_classes) where each row is one-hot (exactly one element equals 1, all others are 0);\n\u2022 y_pred \u2013 the predicted class probabilities, a 2-D list/NumPy array of the same shape produced by a soft-max layer (each row sums to 1).\n\nThe categorical cross-entropy loss for the whole batch is\n\n    L = -\u2211_{i=1}^{n_samples} \u2211_{j=1}^{n_classes} y_{ij}\u00b7log(y\u0302_{ij}+\u03b5)\n\nwhere \u03b5 (machine epsilon) is added for numerical stability so that log(0) never occurs.\n\nReturn L rounded to four decimal places as a Python float.\n\nIf the shapes of y and y_pred differ, or any probability in y_pred is negative or greater than 1, the behaviour is undefined (you may assume the input is valid).\n# Your code should start with:\n```python\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place.\n"}
{"task_id": 77, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Forward Propagation for an L-Layer Neural Network\n# Description:\nIn a fully-connected feed-forward neural network each layer performs the following two steps\n\n1. Linear step:          Z = W\u00b7A_prev + b\n2. Non-linear step:      A = g(Z)\n\nwhere A_prev is the activation coming from the previous layer (the input matrix X for the first layer), W and b are the layer\u2019s parameters and g is an activation function. In this task you have to implement the forward propagation for an L-layer network that\n\n\u2022 uses ReLU in every hidden layer (layers 1 \u2026 L-1)\n\u2022 uses the sigmoid function in the output layer (layer L)\n\nThe network parameters are stored in a dictionary\n    parameters = {\n        'W1': \u2026, 'b1': \u2026,\n        'W2': \u2026, 'b2': \u2026,\n        \u2026\n        'WL': \u2026, 'bL': \u2026\n    }\nwhere W\u1dab has shape (n\u1dab, n\u1dab\u207b\u00b9) and b\u1dab has shape (n\u1dab, 1).\n\nYour function must\n1. iterate through all layers, applying a linear step followed by the correct activation;\n2. collect a cache (you may store anything that is useful for a backward pass) for each layer in a list called caches;\n3. finally return a tuple (AL, caches) where AL is the activation produced by the last layer.\n\nFor grading we only inspect AL, but caches must still be produced so that the tuple structure is preserved.\n# Your code should start with:\n```python\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound the final activation matrix AL to 4 decimal places and convert it to a regular Python list via ndarray.tolist() before returning.\n"}
{"task_id": 78, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Step Adamax Optimizer\n# Description:\nAdamax is a variant of the popular Adam optimizer that replaces the exponential moving average of the squared gradients with an exponentially weighted infinity\u2013norm.  \n\nWrite a function that performs **one** Adamax update step for a set of parameters.\n\nGiven\n\u2022 current parameter vector `params`  \n\u2022 current gradient vector `grads`  \n\u2022 the first-moment estimates `m`  \n\u2022 the exponentially weighted infinity-norms `u`  \n\u2022 the current time-step counter `t`  \n(and the usual Adamax hyper-parameters)\n\nyour function must return the updated\n`(params, m, u, t)` **after the step is finished**.\n\nThe update equations are:\n```\nm_t   = \u03b2\u2081 \u00b7 m + (1 \u2212 \u03b2\u2081) \u00b7 grads\nu_t   = max(\u03b2\u2082 \u00b7 u , |grads|)\nstep  = \u03b7 / (1 \u2212 \u03b2\u2081\u1d57) \u00b7 m_t / (u_t + \u03b5)\nparams = params \u2212 step\nt      = t + 1\n```\nAll operations are element-wise; `max` is taken component-wise.\n\nIf the user supplies vectors, their lengths are guaranteed to match.\n\nReturn the **four-tuple**:\n```\n(updated_params, updated_m, updated_u, updated_t)\n```\nand round every floating point entry to **6 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nRound every floating point value in the returned lists to 6 decimal places.\n"}
{"task_id": 80, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Adadelta \u2013 First Update Step\n# Description:\nImplement a single update step of the Adadelta optimisation algorithm.\n\nAdadelta is an adaptive-learning-rate method that keeps two exponentially decaying running averages per parameter:\n1. E_grad \u2013 running average of the squared gradients\n2. E_delta \u2013 running average of the squared parameter updates (\u0394w)\n\nFor every weight element the update rules are\nE_grad   \u2190 \u03c1\u00b7E_grad + (1 \u2212 \u03c1)\u00b7g\u00b2\nRMS_grad = \u221a(E_grad + \u03b5)\nRMS_\u0394w   = \u221a(E_delta + \u03b5)\nadaptive_lr = RMS_\u0394w \u2044 RMS_grad\n\u0394w = adaptive_lr \u00b7 g\nE_delta \u2190 \u03c1\u00b7E_delta + (1 \u2212 \u03c1)\u00b7\u0394w\u00b2\nw_new = w \u2212 \u0394w\n\nWrite a function that receives a weight vector (or list) w and its gradient grad_w and returns the updated weights after **one** Adadelta step assuming the running averages are still zero (i.e. the very first optimisation step). The algorithm should work element-wise for any 1-D or n-D input.  Round the returned weights to 4 decimal places and convert them to a regular Python list.\n\nIf the gradient for a component is zero, that component must remain unchanged because \u0394w will be zero.\n\nDefault hyper-parameters:\n\u03c1 = 0.95,   \u03b5 = 1e-6\n\nExample illustrates the required behaviour.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list containing the updated weights rounded to exactly 4 decimal places (use numpy.round).\n"}
{"task_id": 81, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Cost Computation\n# Description:\nYou are given two NumPy arrays that come from the forward-propagation of a binary classifier.\n\n\u2022 A2 \u2013 predicted probabilities returned by the model.  \n\u2022 Y  \u2013 ground-truth binary labels (0 or 1).\n\nYour task is to write a function compute_cost that returns the binary cross-entropy (a.k.a. log-loss) between A2 and Y\n\n            1  m\n    J =  \u2013 \u2500 \u03a3  [ y\u1d62\u00b7ln(a\u1d62) + (1\u2013y\u1d62)\u00b7ln(1\u2013a\u1d62) ]\n            m i=1\n\nwhere m is the number of samples.  \nBecause taking log(0) is undefined, first clip every element of A2 to the interval [\u03b5, 1\u2013\u03b5] where \u03b5 = 1e-15.  \nReturn the final cost rounded to **six** decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to 6 decimal places.\n"}
{"task_id": 82, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement \u03b5-Soft Exploration Policy\n# Description:\nIn reinforcement-learning, an \u0003b5-soft (a.k.a. \u0003b5-greedy) exploration policy guarantees that every action has a non-zero probability of being selected while still favouring the greedy (best) action.  \n\nFor a set of Q\u2013values Q(s, a) that quantify how good each action a is in a state s, the \u0003b5-soft probabilities are defined as follows\n\n    let n = number of actions\n    let a* = argmax_a Q(s, a)                   # first occurrence in case of ties\n    p(a*)   = 1 - \u0003b5 + (\u0003b5 / n)\n    p(a\u2260a*) = \u0003b5 / n\n\nWrite a function `epsilon_soft` that, given a 1-D list/NumPy array of Q-values and a scalar 0 \u2264 \u0003b5 \u2264 1, returns the probability of choosing every action under the \u0003b5-soft policy.\n\nIf the greediest action is not unique, pick the first one (smallest index).\n\nAll returned probabilities must sum to 1 (within 1 \u00d7 10\u207b\u00b9\u00b2 numerical tolerance) and be rounded to 4 decimal places.\n\nExample:\n    Q   = [1.2, 0.3, 1.2, -0.1]\n    \u0003b5   = 0.1\n    n   = 4\n    greedy index = 0 (first maximum)\n    base = 0.1 / 4 = 0.025\n    output = [0.925, 0.025, 0.025, 0.025]\n# Your code should start with:\n```python\nimport numpy as np\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll probabilities must be rounded to 4 decimal places and their sum must equal 1 (within 1\u00d710\u207b\u00b9\u00b2).\n"}
{"task_id": 84, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Optimal Step Size for MSE Gradient Boosting\n# Description:\nIn gradient boosting with the mean-squared-error (MSE) objective we add a new base learner \\(h(x)\\) to the current prediction \\(\\hat y\\) using a step size (also called line\u2013search coefficient)\n\\[\n\\gamma = \\operatorname*{arg\\,min}_{\\gamma}\\; \\frac1n \\sum_{i=1}^{n}\\bigl(y_i- (\\hat y_i+\\gamma h_i)\\bigr)^2.\n\\]\nSetting the derivative with respect to \\(\\gamma\\) to zero gives the closed-form solution\n\\[\n\\gamma =\\frac{\\sum_{i=1}^{n}(y_i-\\hat y_i)h_i}{\\sum_{i=1}^{n}h_i^{2}}.\n\\]\nIf the denominator is zero (all \\(h_i=0\\)) the residuals are already perfectly fitted and the largest possible step size of **1** is taken by convention.\n\nWrite a Python function that receives the true targets \\(y\\), the current predictions \\(y\\_pred\\) and the new learner\u2019s predictions \\(h\\_pred\\) (all as NumPy arrays) and returns the optimal step size \\(\\gamma\\) rounded to four decimal places following the rule above.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    # TODO: implement the function following the description above\n    pass\n```\n# Output Constraints:\nReturn the step size as a Python float rounded to the nearest 4th decimal.\n"}
{"task_id": 85, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Step Softmax Regression Update\n# Description:\nImplement one gradient\u2013descent update for a multi-class Softmax (a.k.a. multinomial logistic) regression model.\n\nYou are given\n1. X \u2013 a 2-D NumPy array of shape (N, D) that stores N training samples with D features each,\n2. Y \u2013 a 2-D NumPy array of shape (N, C) holding the corresponding labels in **one-hot** form for C classes,\n3. W \u2013 the current weight matrix of shape (D, C), and\n4. lr \u2013 a positive learning-rate scalar.\n\nWrite a function `softmax_regression_step` that performs **one** parameter-update step using the cross-entropy loss:\n\u2022 Compute logits Z = X\u00b7W  \n\u2022 Apply the soft-max transformation row-wise to obtain predicted probabilities \u0176  \n\u2022 Compute the gradient of the average cross-entropy loss with respect to W  \n    grad = (X\u1d40 \u00b7 (\u0176 \u2212 Y)) / N\n\u2022 Update the weights with plain gradient descent  \n    W := W \u2212 lr \u00b7 grad\n\nReturn the updated weight matrix as a **Python list of lists** rounded to four decimal places.\n\nIf `lr` is 0 or `X` consists only of zeros the weight matrix must stay unchanged.\n\nExample\nInput\nX = np.array([[1, 2],\n              [3, 4]])\nY = np.array([[1, 0],\n              [0, 1]])\nW = np.array([[0.1, 0.2],\n              [0.3, 0.4]])\nlr = 0.1\n\nOutput\n[[0.079, 0.221],\n [0.2911, 0.4089]]\n\nReasoning\n1. Z = X\u00b7W = [[0.7, 1.0], [1.5, 2.2]]  \n2. \u0176 = softmax(Z) = [[0.4255, 0.5745], [0.3318, 0.6682]]  \n3. grad = (X\u1d40\u00b7(\u0176\u2212Y))/2 = [[0.2105, \u22120.2105], [0.0891, \u22120.0891]]  \n4. W_new = W \u2212 0.1\u00b7grad = [[0.079, 0.221], [0.2911, 0.4089]] (rounded to 4 dp)\n# Your code should start with:\n```python\nimport numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"TODO: Complete the function.\n\n    One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry of the updated weight matrix to 4 decimal places and return it as a Python list obtained via NumPy\u2019s `tolist()` method.\n"}
{"task_id": 86, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Random Forest Majority Vote Aggregator\n# Description:\nIn a Random Forest classifier each decision tree makes its own prediction for every input sample, and the forest\u2019s final prediction is obtained by taking a *majority vote* across all trees.  \n\nWrite a Python function that aggregates these individual predictions.\n\nThe function receives a two-dimensional list (or list of lists) **predictions** where:\n\u2022 Each inner list contains the predictions produced by **one** tree for **all** samples in the data set.  \n\u2022 All inner lists have the same length (equal to the number of samples).  \n\nThe task is to return a single list containing the forest\u2019s final prediction for every sample, obtained as follows:\n1. For every sample (i.e. for every column of the 2-D structure) count how many trees voted for every class label.\n2. Select the class label with the highest vote count.  \n3. If two or more class labels are tied for the highest count, break the tie by choosing the *smallest* label. For numeric labels choose the smaller numeric value, for string labels use standard lexicographic order.\n\nAssume that for any individual sample all votes have the same data type (all numbers or all strings).\n# Your code should start with:\n```python\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn the aggregated predictions as a Python list with the same length as the number of samples.\n"}
{"task_id": 87, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Determine Neural Network Layer Sizes\n# Description:\nIn a feed-forward neural network we often need to know how many neurons belong to each layer before we can initialize the parameters. \n\nWrite a function `layer_sizes` that receives two NumPy arrays:\n1. `X` \u2013 a matrix that contains the input data arranged **column-wise** (each column is one example). Therefore the number of rows equals the number of input features $n_x$.\n2. `Y` \u2013 a matrix that contains the desired outputs/labels, also arranged column-wise. Hence the number of rows equals the number of output units $n_y$.\n\nThe function must return a tuple `(n_x, n_h, n_y)` where\n\u2022 `n_x` is the number of input features (rows of `X`),\n\u2022 `n_h` is the **fixed** hidden\u2013layer size, which for this task is **10**, and\n\u2022 `n_y` is the number of output units (rows of `Y`).\n\nNo additional processing is required\u2014simply read the dimensions from the two matrices and return the tuple in the given order.\n# Your code should start with:\n```python\nimport numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    pass\n```\n"}
{"task_id": 88, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Softplus Activation Function\n# Description:\nThe **softplus** function is a smooth approximation of the ReLU activation that is widely used in neural-network libraries.  It is defined element-wise as\n\nsoftplus(z)=ln(1+e\u1dbb).\n\nA direct implementation with `np.exp` may overflow for very large positive numbers, while very small negative numbers need to stay accurate.  NumPy provides the numerically stable helper `np.logaddexp(a, b)` which computes ln(e\u1d43+e\u1d47) without overflow.\n\nWrite a Python function that\n1. Accepts a scalar, Python list, or NumPy `ndarray` `z` containing real values.\n2. Returns the element-wise softplus values rounded to **4 decimal places**.\n3. For any array or list input, the result must be converted to a *pure* Python list via NumPy\u2019s `tolist()` method.  For a scalar input, return a single `float`.\n\nYour implementation **must** rely on the numerically stable identity\n\nsoftplus(z)=np.logaddexp(0.0, z).\n\nExample\n-------\nInput\n    z = np.array([-1000, 0, 3])\n\nOutput\n    [0.0, 0.6931, 3.0486]\n\nReasoning\n---------\nsoftplus(\u22121000)\u2248ln(1+e^{-1000})\u22480.0 (underflow to 0 when rounded)\nsoftplus(0)=ln(1+e^{0})=ln(2)=0.693147\u2026\u21920.6931 (rounded)\nsoftplus(3)=ln(1+e^{3})=ln(1+20.085\u2026)\u22483.048587\u2026\u21923.0486 (rounded)\n# Your code should start with:\n```python\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    pass  # your code here\n```\n# Output Constraints:\nRound every value to 4 decimal places.  For array or list inputs, return a Python list (possibly nested) obtained with NumPy\u2019s `tolist()`; for scalar inputs, return a single `float`.\n"}
{"task_id": 89, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Layer Forward Propagation\n# Description:\nYou are building a tiny neural-network library from scratch.  A single forward-propagation step in one layer consists of a linear transformation followed by a non-linear activation function.  \n\nFor a given layer $l$ let  \n\u2022 $A_{\\text{prev}}\\in\\mathbb R^{n_{l-1}\\times m}$ be the activations coming **from the previous layer**, where $m$ is the number of training examples,  \n\u2022 $W\\in\\mathbb R^{n_{l}\\times n_{l-1}}$ be the **weight matrix** of the current layer,  \n\u2022 $b\\in\\mathbb R^{n_{l}\\times 1}$ be the **bias vector** (broadcasted to every example).\n\nThe linear part is  \n$Z=W\\,A_{\\text{prev}}+b$ (the bias must be added to every column).  \nAfterwards a non-linear activation is applied element-wise:\n\u2022 **ReLU** (\"relu\"):  $\\operatorname{ReLU}(z)=\\max(0,z)$  \n\u2022 **Sigmoid** (\"sigmoid\"):  $\\sigma(z)=\\dfrac1{1+e^{-z}}$\n\nImplement the function `linear_activation_forward` that performs these two steps and returns\n1. `A` \u2013 the resulting activations, **rounded to 4-decimal precision** and converted to a plain Python list,  \n2. `cache` \u2013 a tuple `(linear_cache, activation_cache)` where  \n   \u2022 `linear_cache` is `(A_prev, W, b)` and  \n   \u2022 `activation_cache` is the computed `Z`.\n\nIf `activation` is neither \"relu\" nor \"sigmoid\" the behaviour is unspecified.\n\nThe function must also verify that the shape of the output activation is `(W.shape[0], A_prev.shape[1])` (use an `assert`).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll numbers in the returned activation must be rounded to the nearest 4th decimal place and returned as a plain Python list (use ndarray.round(4).tolist()).\n"}
{"task_id": 90, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bandit Policy Mean-Squared Error\n# Description:\nIn a multi-armed bandit problem each arm has an (unknown) expected payout.  \nA policy tries to learn these expectations while interacting with the bandit.\n\nWrite a function `mse` that evaluates how good a policy\u2019s current estimates are by computing the **mean-squared error (MSE)** between\n1. the true expected payouts of every arm (provided by the bandit) and\n2. the policy\u2019s estimates of those expectations.\n\nInput objects\n\u2022 **bandit** \u2013 has a field/entry `arm_evs`, a list/tuple of real numbers.  `arm_evs[i]` is the true expected value of arm *i*.\n\u2022 **policy** \u2013 has a field/entry `ev_estimates`, a dictionary that maps an arm index to the policy\u2019s current estimate of that arm\u2019s expectation.\n\nThe function must\n1. return **`numpy.nan`** if the policy does not contain any estimates (attribute missing or empty dictionary);\n2. otherwise compute the squared error for every arm, average these values, round the result to 4 decimal places and return it.\n\nArm indices in `policy.ev_estimates` can come in any order \u2013 sort them before comparing so that the *i*-th estimate is matched with `arm_evs[i]`.\n\nExample\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nTrue vs. estimated expectations:\narm 0 \u2192 0.5 vs 0.4  \u27f9 (0.4 \u2212 0.5)\u00b2 = 0.01\narm 1 \u2192 0.2 vs 0.25 \u27f9 (0.25 \u2212 0.2)\u00b2 = 0.0025\narm 2 \u2192 0.9 vs 0.8  \u27f9 (0.8 \u2212 0.9)\u00b2 = 0.01\n\nMean-squared error = (0.01 + 0.0025 + 0.01)/3 = 0.0075\n\nHence `mse(bandit, policy)` returns **0.0075**.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a float rounded to the nearest 4th decimal place.\n"}
{"task_id": 91, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ReLU Backward Pass\n# Description:\nIn the forward pass of a neural network a Rectified Linear Unit (ReLU) activation is usually defined as\n\n    ReLU(z) = max(0, z)\n\nDuring back-propagation we need the gradient of the loss with respect to the pre-activation values *z* (often denoted by **dZ**).  \nIf **dA** is the upstream gradient coming from the next layer and **Z** is the cached vector/matrix of pre-activation values, the backward rule is very simple:\n\n    dZ = dA * 1(Z > 0)\n\nwhere 1(Z > 0) is an element-wise indicator function that equals 1 when the corresponding *z* is strictly positive and 0 otherwise (z \u2264 0, including z = 0).\n\nWrite a Python function that performs this computation.  The function must:\n1. Accept the upstream gradient **dA** and the cache **activation_cache = Z** as (nested) Python lists.  \n2. Convert the inputs to NumPy arrays for vectorised computation.  \n3. Produce **dZ** using the rule above, convert it back to a list of lists, and return it.\n\nIf the two inputs do not have the same shape the function should return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the result as a Python list of lists using NumPy\u2019s tolist() method.\n"}
{"task_id": 92, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numeric Type Validator\n# Description:\nWrite a Python function that determines whether a single input value is numeric. For this task, a numeric value is any instance of numbers.Number (e.g., int, float, complex, Fraction, Decimal, etc.) **excluding** boolean values (True and False). The function must return a Python boolean: True if the argument is numeric and False otherwise.\n# Your code should start with:\n```python\nimport numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    # TODO: Implement the function.\n    pass\n```\n# Output Constraints:\nReturn a Python bool (True or False).\n"}
{"task_id": 93, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ReLU Activation Function\n# Description:\nThe Rectified Linear Unit (ReLU) is one of the most widely-used activation functions in neural networks.  For any real-valued input $Z$, ReLU outputs\nA = max(0, Z)\nthat is, it keeps positive numbers unchanged and sets all negative numbers to zero.\n\nWrite a Python function that takes a NumPy array (or anything convertible to a NumPy array, including Python scalars and nested lists) and returns a **tuple (A, cache)** where\n\u2022 A is the element-wise ReLU of the input, and\n\u2022 cache is the original input (returned unchanged so it can be reused later in a back-propagation step).\n\nThe function must work for scalars, 1-D, 2-D or higher-dimensional arrays, and it must be fully vectorised (i.e. no explicit Python loops).\n# Your code should start with:\n```python\nimport numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    # Your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple `(A, cache)` where both elements are *Python lists* produced with NumPy\u2019s `tolist()` method so the result is JSON-serialisable.\n"}
{"task_id": 94, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-NN Majority Vote Aggregator\n# Description:\nIn the **k-Nearest Neighbours (k-NN)** algorithm a new sample is classified by a *majority vote* of the class labels of its *k* closest neighbours.  \n\nWrite a function that receives the list of neighbour labels and returns the label that occurs most frequently:\n\n1. Count how many times each label appears.\n2. Return the label with the highest frequency (i.e. the majority class).\n3. If several labels share the same highest frequency (a *tie*), return the **smallest label according to Python\u2019s default ordering** \u2013 numerical order for numbers and lexicographic order for strings.  \n\nThe function must work with any hashable, comparable label type (e.g. `int`, `str`).\n# Your code should start with:\n```python\nfrom collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nIf several labels share the highest frequency, return the smallest one according to Python\u2019s default ordering.\n"}
{"task_id": 96, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Additive-Smoothed N-gram Log-Probability\n# Description:\nImplement an N-gram language-model function that returns the additive-smoothed log\u2013probability of a sentence.\n\nGiven a training corpus (a list of sentences, each sentence is a white-space separated string) and a target sentence, the function must\n1. build all 1-,\u2026,N-gram frequency tables from the corpus,\n2. add an explicit \u201c<UNK>\u201d token to the vocabulary to handle unseen words,\n3. estimate the probability of every contiguous N-gram in the target sentence with additive (a.k.a. Lidstone/Laplace) smoothing\n   P(w_i|context) = (count(context\u25e6w_i)+K) / (count(context)+K\u00b7|V|),\n   where |V| is the vocabulary size **including** \u201c<UNK>\u201d,\n4. return the natural logarithm of the sentence probability (i.e. the sum of log-probabilities of all N-grams) rounded to 4 decimals.\n\nNotes\n\u2022  All words are kept exactly as they appear (no punctuation/stop-word filtering required).\n\u2022  Any word that never occurs in the training corpus is mapped to \u201c<UNK>\u201d.\n\u2022  If the sentence length is smaller than N, no N-grams exist\u037e in that case return 0.0.\n\u2022  Use only the libraries stated in the import section.\n# Your code should start with:\n```python\nimport math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # TODO: implement the function following the description\n    pass\n```\n# Output Constraints:\nReturn the natural logarithm rounded to 4 decimal places as a Python float.\n"}
{"task_id": 97, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Derivative of ReLU Activation\n# Description:\nRectified Linear Unit (ReLU) is one of the most frequently-used activation functions in neural networks, defined as  f(x)=max(0,x).  During back-propagation we need its derivative, which is 1 for strictly positive inputs and 0 elsewhere (the value at 0 itself is conventionally taken as 0).\n\nWrite a function that receives a scalar, 1-D list, nested lists, or a NumPy ndarray of real numbers and returns the element-wise derivative of ReLU, preserving the original shape:\n \u2022 For each element z \u00003e 0   \u2192 1\n \u2022 For each element z \u00003c= 0 \u2192 0\n\nThe returned object must have the same dimensional layout as the input:\n \u2022 If the input is a scalar, return a float.\n \u2022 Otherwise return a Python list produced with ndarray.tolist().\n# Your code should start with:\n```python\nimport numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn float values 0.0 or 1.0.  Return a Python list (via ndarray.tolist()) for non-scalar inputs.\n"}
{"task_id": 99, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ReLU Activation Function\n# Description:\nImplement the classical Rectified Linear Unit (ReLU) activation function.\n\nThe ReLU function is defined element-wise as  \n\u2003ReLU(x) = max(0, x)\n\nYour task is to write a function `relu_` that receives either\n\u2022 a scalar (int or float),\n\u2022 a one-dimensional list/NumPy array,\n\u2022 or a two-dimensional list-of-lists/NumPy array,\n\nand returns the ReLU-transformed data **with the same container type that was supplied**:\n\u2022 scalar in \u2192 scalar out,  \n\u2022 list / list-of-lists in \u2192 list / list-of-lists out,  \n\u2022 NumPy array in \u2192 NumPy array out.\n\nThe transformation must be fully vectorised (i.e. without explicit Python `for` loops over the individual elements).\n# Your code should start with:\n```python\nimport numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nThe output container type must match the input container type.\n"}
{"task_id": 100, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Classification Error Rate\n# Description:\nYou are provided with two sequences that represent the true class labels (`actual`) and the labels predicted by a model (`predicted`). Your task is to implement a function that computes the **classification error rate**, i.e. the proportion of incorrectly\u2010predicted samples.\n\nThe function must:\n1. Accept 1-dimensional Python lists, tuples or NumPy arrays of equal length.\n2. Convert the inputs to NumPy arrays for easy vectorised operations.\n3. Return **\u22121** if the two inputs do not have the same length.\n4. Otherwise return the ratio `(# of mismatches) / (total # of samples)` rounded to **four decimal places**.\n\nExample\n-------\nInput\n```\nactual    = np.array([0, 1, 2, 2, 1])\npredicted = np.array([0, 0, 2, 1, 1])\n```\n\nOutput\n```\n0.4\n```\n\nReasoning\n---------\nThere are 5 samples in total. Predictions differ from the true labels in positions 1 and 3 (0-based indexing), giving 2 mismatches. The error rate is therefore `2 / 5 = 0.4`, which is already at four-decimal precision.\n# Your code should start with:\n```python\nimport numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a float rounded to the nearest 4th decimal place. When input lengths differ return -1.\n"}
{"task_id": 101, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Softmax Activation \u2013 NumPy Implementation\n# Description:\nIn neural-network implementations the softmax activation function is widely used to convert raw scores (logits) into normalized probabilities.  \nWrite a Python function that behaves like the Keras backend implementation shown in the code snippet.  \nThe function must:\n\u2022 accept a NumPy ndarray `x` with **at least two dimensions** and an integer `axis` that specifies along which axis the softmax normalisation is carried out (negative values for `axis` are allowed and follow NumPy\u2019s convention);\n\u2022 apply the numerically-stable softmax\n  softmax(x)=exp(x\u2212max(x,axis,keepdims=True)) / sum(exp(x\u2212max),axis,keepdims=True)\n  along the given axis;\n\u2022 return the result rounded to 4 decimal places and converted to standard Python lists via `tolist()` so that the output contains only built-in Python types;\n\u2022 raise `ValueError(\"Cannot apply softmax to a tensor that is 1D\")` if `x.ndim == 1`.\n\nExample behaviour is illustrated below.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    # ======= Write your code below =======\n    pass\n```\n# Output Constraints:\nRound every probability to 4 decimal places before returning.\nReturn pure Python lists (use ndarray.tolist()).\n"}
{"task_id": 102, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Regression Prediction\n# Description:\nImplement a simple polynomial-regression helper.\n\nThe function receives four arguments:\n1. x \u2013 a list of floats/ints that contains the training inputs.\n2. y \u2013 a list of floats/ints of the same length that contains the training targets.\n3. degree \u2013 a non-negative integer that specifies the degree of the polynomial that will be fitted.\n4. x_pred \u2013 a list of floats/ints for which the fitted model must return predictions.\n\nThe function has to\n\u2022 build the design matrix that contains all powers of x from 0 up to the chosen degree (i.e. apply the so-called *polynomial feature transformation*);\n\u2022 find the weight vector that minimises the ordinary least-squares error (use NumPy\u2019s least-squares routine or the Moore\u00ad\u2013Penrose pseudo-inverse);\n\u2022 use the obtained weights to compute the predictions for every value in x_pred;\n\u2022 round every prediction to 4 decimal places and return them as a plain Python list.\n\nIf fitting is impossible \u2013 e.g. the lengths of x and y differ, no training data is supplied, the degree is negative, or the number of training samples is smaller than `degree + 1` \u2013 the function must return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every predicted value to 4 decimal places and return them as a Python list.\n"}
{"task_id": 104, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Information Gain Calculation\n# Description:\nYou are given a one\u2013dimensional NumPy array y that contains the class labels of a data set and a list of NumPy arrays splits where every element of splits holds the labels that fall into one child node after a particular split.  \n\nYour task is to implement the function information_gain that computes the information gain obtained by this split.  \n\nMathematically, information gain is defined as\n\nIG(y, splits) = H(y) - \u03a3_k |S_k|/|y| \u00b7 H(S_k),\n\nwhere H(\u00b7) is the entropy (base-2) of the label distribution, |\u00b7| denotes the number of samples and S_k is the k-th subset produced by the split.  \n\nThe function must\n1. work for any number of classes, \n2. accept an arbitrary number of child nodes, \n3. return the information gain rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to 4 decimal places.\n"}
{"task_id": 105, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Probability Density Function\n# Description:\nImplement the Gaussian (Normal) probability density function (PDF). The function receives a collection of real-valued observations x, together with the distribution parameters mean (\u03bc) and standard deviation sigma (\u03c3). It must\n1. Validate that \u03c3 is strictly positive. If \u03c3 \u2264 0, return -1.\n2. Compute the PDF for every value in x using the formula\n   f(x; \u03bc, \u03c3) = 1\u2044(\u221a(2\u03c0) \u03c3) \u00b7 exp(\u2212(x\u2212\u03bc)\u00b2 \u2044 (2\u03c3\u00b2)).\n3. Round each result to **five** decimal places and return them as a Python list.\n\nThe implementation must work for Python lists, tuples or NumPy arrays supplied as x and must also gracefully handle an empty input (returning an empty list).\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of floats rounded to 5 decimal places. If \u03c3 \u2264 0 return -1.\n"}
{"task_id": 107, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single-Step Adam Optimiser\n# Description:\nImplement a single optimization step of the Adam algorithm.  \nAdam (Adaptive Moment Estimation) keeps, for every parameter, an exponential moving average of the gradient (first moment \u2013 \\(m\\)) and of the squared gradient (second moment \u2013 \\(v\\)).  These biased moment estimates are then bias-corrected and used to compute the parameter update.\n\nGiven\n\u2022 current parameter vector \\(\\theta\\),  \n\u2022 its gradient \\(g\\),  \n\u2022 the previous first and second moment estimates (\\(m_{t-1}, v_{t-1}\\)),  \n\u2022 the current time step index \\(t\\) (1-based),\n\nwrite a function that returns the updated parameters and the new moment estimates after **one** Adam step.\n\nThe update rules are\n```\nm_t = \u03b21 * m_{t-1} + (1-\u03b21) * g\nv_t = \u03b22 * v_{t-1} + (1-\u03b22) * g**2\n\nm\u0302_t = m_t / (1-\u03b21**t)\nv\u0302_t = v_t / (1-\u03b22**t)\n\n\u03b8_new = \u03b8 - \u03b1 * m\u0302_t / (sqrt(v\u0302_t) + \u03b5)\n```\nThe function must also return the next step index \\(t+1\\).\n\nUse default hyper-parameters identical to the ones in the original paper:  \n\u2022 learning-rate `alpha = 0.01`  \n\u2022 `beta1 = 0.9`  \n\u2022 `beta2 = 0.99`  \n\u2022 `epsilon = 1e-9`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll floating values must be rounded to 6 decimal places before returning.\n"}
{"task_id": 108, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Regularised Alternating Least Squares Matrix Factorisation\n# Description:\nImplement the regularized Alternating Least Squares (ALS) algorithm to factorize a real-valued matrix.  \nGiven a data matrix X \u2208 \u211d^{N\u00d7M}, the goal is to find two low-rank factor matrices W \u2208 \u211d^{N\u00d7K} and H \u2208 \u211d^{K\u00d7M} that minimise the regularised Frobenius reconstruction loss\n\n\u2016X \u2212 WH\u2016\u00b2_F + \u03b1(\u2016W\u2016\u00b2_F + \u2016H\u2016\u00b2_F),\n\nwhere K is the desired latent rank and \u03b1 \u2265 0 is a Tikhonov (L2) regularisation weight.  \nALS optimises W and H in turn: keeping one fixed while solving a regularised least-squares problem for the other.  \nFor deterministic grading, the factor matrices must be initialised with a fixed random seed (0).  \nYour task is to write a function als_factorization that:\n1. Factorises X with the above objective using ALS.\n2. Stops when either the loss drops below tol or max_iter iterations have been executed.\n3. Returns the reconstructed matrix X\u0302 = WH rounded to 4 decimal places and converted to a standard Python list of lists.\n\nIf the algorithm does not converge within max_iter, simply return the best reconstruction obtained.\n# Your code should start with:\n```python\nimport numpy as np\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the reconstructed matrix rounded to the 4th decimal place and cast to a Python list of lists using ndarray.round(4).tolist().\n"}
{"task_id": 109, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means++ Clustering\n# Description:\nImplement the K-Means clustering algorithm with K-Means++ initialisation.\n\nWrite a function that receives a two-dimensional NumPy array X (shape = m\u00d7n) containing m samples with n features and an integer K representing the desired number of clusters.  \nThe algorithm must:\n1. Set both Python\u2019s `random` and NumPy\u2019s random generator with a provided `random_state` value (so that the results are reproducible).  \n2. Choose the initial centroids with the K-Means++ procedure.  \n3. Perform Lloyd\u2019s iterations (\"assign\u2013update\" steps) until either the cluster assignments stop changing or the maximum number of iterations `max_iter` is reached.  \n4. Return the final centroids **rounded to four decimal places**, sorted in ascending order by their first coordinate (use the complete centroid tuple as a secondary key to break ties).\n\nIf an empty cluster is produced during the update step, keep its centroid unchanged.\n\nExample behaviour (see the worked example below) must be reproduced when `random_state` is set to the same value.\n# Your code should start with:\n```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn a list of K centroids (each centroid is a list of floats) rounded to the nearest 4th decimal and sorted by their first coordinate.\n"}
{"task_id": 111, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Character-Level Sequence Encoding and Decoding\n# Description:\nIn many character-level sequence models we need a small helper routine that\n(1) converts a raw text string into a fixed-length list of integer token\nids, (2) feeds the encoded sequence to a neural model and finally\n(3) converts the model prediction back to a human-readable string.\n\nWrite three helper functions that accomplish exactly this:\n\n1. `string_to_int` \u2013 encodes every character of the input string\n   using a provided vocabulary (``dict[str, int]``). The encoded list\n   must have a **fixed length** ``TIME_STEPS``. If the input is shorter\n   than ``TIME_STEPS`` append the padding token ``0`` on the right; if it\n   is longer, truncate the sequence.\n   Any character that does **not** exist in the vocabulary is also\n   encoded as the padding token ``0``.\n\n2. `int_to_string` \u2013 converts a list/array of integer ids back to text\n   using an *inverse* vocabulary (``dict[int, str]``). Padding tokens\n   (``0``) must be ignored during decoding \u2013 they must **not** appear in\n   the returned string.\n\n3. `run_example` \u2013 puts everything together. It\n   \u2022 encodes the raw text with `string_to_int`,\n   \u2022 calls ``model.predict`` on the encoded batch (batch size 1),\n   \u2022 applies ``argmax`` over the last axis to obtain one predicted id per\n     time step, and finally\n   \u2022 decodes the ids with `int_to_string`.\n\nThe function returns the decoded prediction string.\n\nYou may **only** use NumPy; external libraries such as *TensorFlow* or\n*PyTorch* are **not** allowed.  The constant ``TIME_STEPS`` is fixed to\n``20``.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"TODO: implement\"\"\"\n    pass\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"TODO: implement\"\"\"\n    pass\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"TODO: implement\"\"\"\n    pass\n```\n# Output Constraints:\nReturn the decoded string predicted by the model. Padding tokens (id 0) must be omitted.\n"}
{"task_id": 112, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Word Frequency Tokens\n# Description:\nImplement a function that converts a raw text string into a list of Token objects containing the frequency of each distinct word. Words are sequences of English alphabetic characters (A\u2013Z & a\u2013z). The comparison is case\u2013insensitive, i.e., \u201cCat\u201d and \u201ccat\u201d are the same word. The returned list must obey the following ordering rules:\n1. Tokens are sorted in **descending** order of frequency (higher counts first).\n2. When two words have the same frequency, they are ordered **lexicographically** (alphabetical a\u2192z).\n\nIf the input contains no alphabetic words, the function must return an empty list. The Token class definition is provided below and **must be used** for the output objects.\n\nToken class (pre-defined)\n```\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n```\n# Your code should start with:\n```python\nimport re\nfrom collections import Counter\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    # Write your code below. Remove the pass statement.\n    pass\n```\n# Output Constraints:\nReturn a list of Token instances sorted by the specified rules. An empty input or a text with no words must yield an empty list.\n"}
{"task_id": 113, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Batch Example Runner\n# Description:\nIn many sequence-to-sequence or language\u2013generation projects you often want to try a trained model on several input strings and very quickly look at the produced predictions.  \n\nWrite a helper function `run_examples` that automates this small piece of workflow.  \n\nThe function receives four arguments:\n1. `model` \u2013 **a callable** that takes one string and returns another string (the model\u2019s prediction).  \n2. `input_vocabulary` \u2013 a dictionary that maps characters to integer indices (kept only for API compatibility; it is **not** used inside this utility).  \n3. `inv_output_vocabulary` \u2013 the inverse mapping from indices to characters (also kept for API compatibility; it is **not** used here either).  \n4. `examples` \u2013 an iterable of input strings.  If this argument is omitted the function must fall back to a global constant `EXAMPLES` that is assumed to exist in the user\u2019s environment.\n\nFor every example in `examples` the function must\n\u2022 call another helper `run_example(model, input_vocabulary, inv_output_vocabulary, example)` that is expected to return a list of characters representing the model\u2019s output,\n\u2022 concatenate the returned characters into a single string,  \n\u2022 print the pair\n```\ninput:  <the original string>\noutput: <the predicted string>\n```\n\u2022 collect the predicted string in a list.\n\nFinally, the list of all predictions (in the same order as the inputs) must be returned.\n\nYou do **not** have to implement `run_example`; you only have to rely on it being available in the runtime.\n# Your code should start with:\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a list containing the predicted strings in the same order as the supplied examples.\n"}
{"task_id": 114, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement SELU Activation Function\n# Description:\nImplement the Scaled Exponential Linear Unit (SELU) activation function, a self-normalising activation introduced in the paper \u201cSelf-Normalizing Neural Networks\u201d.  \nThe function must be able to work in two modes:\n1. Activation mode \u2013 return the SELU-transformed values.  \n2. Derivative mode \u2013 return the gradient of SELU with respect to the input values.\n\nMathematically, for a given element $x$ the SELU activation $\\operatorname{selu}(x)$ and its derivative $\\operatorname{selu}'(x)$ are defined as\n\n\\[\\operatorname{selu}(x)=\\lambda \\begin{cases}x,&x\\ge 0\\\\ \\alpha\\,(e^{x}-1),&x<0\\end{cases}\\]\n\\[\\operatorname{selu}'(x)=\\lambda \\begin{cases}1,&x\\ge 0\\\\ \\alpha\\,e^{x},&x<0\\end{cases}\\]\n\nwhere the predefined constants are\n\\n$\\alpha = 1.6732632423543772848170429916717$  \n$\\lambda = 1.0507009873554804934193349852946$.\n\nYour task is to write a single function that receives a NumPy array `x` and a Boolean flag `derivative`.\n\u2022 If `derivative == False` (default) the function returns `selu(x)`.\n\u2022 If `derivative == True` the function returns `selu'(x)`.\n\nAll returned values must be rounded to 6 decimal places and converted to ordinary Python `list`s so that the grading environment (which does not rely on NumPy) can compare results directly.\n\nIf the input is an *n*-dimensional NumPy array, preserve the original shape in the returned nested list structure.\n# Your code should start with:\n```python\nimport numpy as np\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numbers must be rounded to exactly 6 decimal places. Return standard Python lists (use NumPy\u2019s `tolist()`).\n"}
{"task_id": 115, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Loss & Gradient for Logistic Regression\n# Description:\nImplement a utility function that, given a feature matrix X, a binary target vector y and a weight vector w, computes both the average binary cross-entropy loss and its gradient with respect to w for logistic regression.\n\nFor a sample (x, y) the logistic model predicts the probability that the sample belongs to the positive class (y = 1) as\n\n    p = \u03c3(z) = 1 / (1 + e^(\u2013z)),   where z = x \u00b7 w.\n\nThe average binary cross-entropy loss over the whole dataset is\n\n    J(w) = \u2013 1/m \u00b7 \u03a3 [ y \u00b7 ln(p) + (1 \u2013 y) \u00b7 ln(1 \u2013 p) ],\n\nwhere m is the number of samples.  The gradient of the loss with respect to the weights is\n\n    \u2207J(w) = 1/m \u00b7 X\u1d40 (p \u2013 y).\n\nYour task is to write a function logistic_loss_and_gradient that returns\n1. the loss rounded to 4 decimals and\n2. the gradient rounded to 4 decimals and converted to a (nested) Python list via ndarray.tolist().\n\nIf any predicted probability becomes exactly 0 or 1, replace it by a small constant \u03b5 = 1e-20 before using it inside the logarithm to avoid numerical issues.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a tuple where\n1. the first element is the loss rounded to the 4th decimal place (type float)\n2. the second element is the gradient rounded to the 4th decimal place and converted to a (nested) Python list, e.g. [[0.1234], [-0.5678]]\n"}
{"task_id": 116, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean-Squared-Error Split Criterion\n# Description:\nIn a regression decision tree, a candidate split is evaluated by how much it reduces the target variance (mean-squared error, MSE).  \nGiven the parent target vector y and a list of target vectors produced by a split, implement a function that **returns the MSE reduction** obtained by that split.\n\nFor a parent node containing N samples with targets y the parent MSE is  \nMSE_parent = mean((y \u2212 mean(y))\u00b2).\n\nAfter splitting y into K subsets S\u2081 \u2026 S_K the weighted child MSE is  \nMSE_children = \u03a3\u1d62 (|S\u1d62| / N) \u00b7 mean((S\u1d62 \u2212 mean(S\u1d62))\u00b2).\n\nThe criterion value is then  \n\u0394MSE = MSE_parent \u2212 MSE_children.\n\nA larger \u0394MSE indicates a better split.  \nReturn the value rounded to **4 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 118, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost with Decision Stumps\n# Description:\nImplement the AdaBoost (Adaptive Boosting) algorithm **from scratch** using decision stumps (one\u2013level decision trees) as weak learners.  \nThe function must:\n1. Take a training set `(X_train, y_train)` where `X_train` is a 2-D NumPy array of shape `(m, n)` and `y_train` is a 1-D NumPy array of length `m` whose elements are **only** `-1` or `1`.\n2. Re-weight training examples iteratively and build `n_clf` decision stumps, each time choosing the stump that minimises the weighted classification error.\n3. Store each stump\u2019s weight (often denoted as $\\alpha_t$) computed as  \n$\\alpha_t = \\frac12 \\ln\\!\\left(\\frac{1-\\varepsilon_t}{\\varepsilon_t}\\right)$, where $\\varepsilon_t$ is the stump\u2019s weighted error.\n4. For every sample in `X_test` aggregate all stump votes by the sign of the weighted sum $\\sum_{t=1}^{n_{clf}} \\alpha_t h_t(\\mathbf x)$ and output `-1` or `1` accordingly.\n\nReturn a Python **list** of predicted labels for the given `X_test`.  \nIf `n_clf` is smaller than 1, treat it as 1.\n# Your code should start with:\n```python\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list with each element being either -1 or 1.\n"}
{"task_id": 119, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Stochastic Gradient Descent (SGD) Update\n# Description:\nStochastic Gradient Descent (SGD) is the most basic optimization algorithm used to train neural networks.  In its simplest form, SGD updates a model parameter \\(\\theta\\) by subtracting the gradient of the loss \\(\\nabla_\\theta L\\) multiplied by a learning-rate (step size) \\(\\alpha\\):\n\\[\\theta \\leftarrow \\theta - \\alpha\\,\\nabla_\\theta L\\]\n\nWrite a function that performs one SGD step for an arbitrary list of parameters.  Each parameter as well as its corresponding gradient is supplied as a NumPy array.  The function must return a *new* list with the updated parameters \u2013 **do not modify the input arrays in\u2013place**.\n\nIf either `params` or `grads` is empty, or if their lengths differ, return an empty list `[]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numbers must be rounded to the nearest 4th decimal using `numpy.round(\u2026, 4)` before converting to Python lists.\n"}
{"task_id": 120, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gradient Descent Linear Regression\n# Description:\nImplement a simple Linear Regression learner that uses batch gradient descent to minimize the mean-squared error (MSE).\n\nThe function must  \n1. Accept a training design matrix X (without the bias column) and a target vector y.  \n2. Insert a constant \u20181\u2019 column to X so the first returned weight corresponds to the bias term.  \n3. Randomly initialise the weight vector w \u2208 \u211d^(n_features+1) from the uniform interval [\u22121/\u221aN , 1/\u221aN], where N is the number of (augmented) features.  \n4. For the specified number of iterations perform batch gradient descent with learning-rate \u03b7 to update the weights:\n       w \u2190 w \u2212 \u03b7 \u00b7 (1/m)\u00b7X\u1d40(Xw \u2212 y)  \n   where m is the number of training samples.\n5. Return the final weight vector rounded to four decimal places and converted to a regular Python list (bias weight first).\n\nIf the shapes of X and y are incompatible (different number of rows) return -1.\n# Your code should start with:\n```python\nimport math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned weights must be rounded to the nearest 4th decimal and provided as a Python list.\n"}
{"task_id": 122, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Least-Squares Linear Regression Weights\n# Description:\nImplement a simple **ordinary least-squares Linear Regression** solver.  \nGiven a design matrix `X` (each inner list is a sample, each column a feature) and a target vector `y`, you must learn the weight vector **w** that minimises the square error\n\n            w* = argmin ||X_w \u2212 y||\u00b2\n\nwhere X_ is the augmented matrix `[1, X]` obtained by inserting a column of ones that represents the intercept term.  \n\nThe function has to:\n1. Convert the Python lists to NumPy arrays.\n2. Augment `X` with a leading column of ones.\n3. Compute the optimal weights with the Moore-Penrose pseudo\u2013inverse (this gives a valid solution even when `X\u1d40X` is not invertible).\n4. Round every weight to the nearest 4th decimal place and return them as a (flat) Python list.\n\nAll calculations must use only NumPy; do **not** rely on any external machine-learning libraries.\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every weight to the nearest 4th decimal place and return them as a Python list.\n"}
{"task_id": 123, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding Without External Libraries\n# Description:\nWrite a Python function that converts a one-dimensional vector of categorical values (either integers or strings) into its one-hot encoded representation **without using any third-party machine-learning libraries**.  The distinct categories must be detected automatically, sorted in ascending/alphabetical order, and each sample is then represented by a binary row vector whose length equals the number of unique categories.  A position in the row is **1** if the sample belongs to the corresponding category and **0** otherwise.  The function must return a plain Python list of lists containing only 0s and 1s.\n# Your code should start with:\n```python\nimport numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list (not a NumPy array); every element must be either int 0 or int 1.\n"}
{"task_id": 126, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Kernel Gram Matrix\n# Description:\nImplement the polynomial kernel, one of the most commonly-used kernels in kernel methods such as Support Vector Machines (SVMs).\n\nGiven two data matrices X\u2208\u211d^{N\u00d7C} and Y\u2208\u211d^{M\u00d7C} (each row represents one sample with C features), the degree-d polynomial kernel is defined as\n\n    k(x, y) = (\u03b3 \u00b7 x^T y + c\u2080)^d\n\nfor every pair of samples x from X and y from Y.  The function must build the full Gram matrix K\u2208\u211d^{N\u00d7M} where K[i][j]=k(X[i],Y[j]).\n\nBehaviour\n\u2022 If Y is omitted (or None) you must use Y = X.\n\u2022 If \u03b3 is None, use 1/C (C is the number of columns/features).\n\u2022 Inputs are plain Python lists; the result has to be returned as a (nested) Python list rounded to 4 decimals.\n\nExamples, edge-cases and a homogeneous kernel (c\u2080 = 0) are checked in the test-suite.  All arithmetic must be performed with NumPy for speed and clarity.\n# Your code should start with:\n```python\nimport numpy as np\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\nReturn python list after reshaping by using NumPy\u2019s tolist() method.\n"}
{"task_id": 127, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Confusion Matrix Implementation\n# Description:\nImplement from scratch the classical *confusion matrix* utility routinely used to evaluate a classification model.\n\nGiven two equally-long one-dimensional sequences \u2013\n\u2022 `y_true`: the ground-truth class labels, and\n\u2022 `y_pred`: the labels predicted by a model \u2013\nyou must build a square 2-D matrix **M** of size *C \u00d7 C*, where *C* is the number of distinct classes occurring in either `y_true` or `y_pred` (classes are identified by their **sorted** unique values).\n\nThe entry `M[i][j]` is the number of samples whose true label is the *i-th* class and whose predicted label is the *j-th* class.  The rows therefore sum to the number of elements belonging to the corresponding true class, while the columns sum to the number of elements predicted for that class.\n\nIf the input sequences do not have the same length the function must return **-1** (this follows the convention that the evaluation cannot be performed).\n\nReturn the matrix as a list of lists of integers (not a NumPy array).\n# Your code should start with:\n```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    # TODO: write your solution here\n    pass\n```\n# Output Constraints:\nReturn a regular Python *list* of *lists*, **not** a NumPy array.\n"}
{"task_id": 128, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Multi-class Linear Discriminant Analysis (LDA) Transformation\n# Description:\nImplement the classical Fisher\u2019s Linear Discriminant Analysis (LDA) for the multi-class case.  \nThe goal is to find a linear projection that maximises the between\u2013class scatter while simultaneously minimising the within\u2013class scatter.  \nGiven a data matrix X\u2208\u211d^{m\u00d7d} (m samples, d features) and the corresponding label vector y, compute the projection matrix W whose columns are the eigenvectors corresponding to the largest eigen-values of S_W^{-1}S_B ( S_W \u2013 within-class scatter, S_B \u2013 between-class scatter).  \nReturn the data projected on the first ``n_components`` discriminant directions.\n\nSpecifically you must:\n1. Compute the within-class scatter matrix   S_W = \u03a3_c \u03a3_{x\u2208c} (x\u2212\u03bc_c)(x\u2212\u03bc_c)^T.\n2. Compute the between-class scatter matrix  S_B = \u03a3_c N_c (\u03bc_c\u2212\u03bc)(\u03bc_c\u2212\u03bc)^T, where \u03bc is the global mean and N_c the number of samples in class c.\n3. Form the matrix A = pinv(S_W)\u00b7S_B (use the Moore\u2013Penrose pseudo-inverse to stay numerically stable when S_W is singular).\n4. Perform eigen-decomposition of A (use ``numpy.linalg.eigh`` because A is symmetric) and sort the eigen-pairs in descending order of the eigen-values.\n5. (Deterministic sign) For every chosen eigenvector flip its sign if the first non-zero element is negative.  \n   This removes the sign ambiguity and makes the results deterministic across different machines.\n6. Project X on the first ``n_components`` eigenvectors and round every element to four decimal places.\n7. Return the projected data as a Python *list of lists* obtained via ``ndarray.tolist()``.\n\nIf ``n_components`` equals the number of original features, the full projection is returned.  \nAll inputs are assumed to be valid.\n\nIn case you could not compute any eigen-vector (e.g. ``n_components`` is 0) return an empty list.\n\nExample\n-------\nInput\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\n\nOutput\n[[1.4142], [2.1213], [2.1213], [2.8284], [11.3137], [12.0208], [12.0208], [12.7279]]\n\nReasoning\nThe algorithm first builds the scatter matrices, then solves the generalised eigen-value problem S_W^{-1}S_B w = \u03bb w.  \nThe dominant eigen-vector (after the deterministic sign fix) is [0.7071, 0.7071].  \nProjecting every sample on this vector and rounding to four decimals gives the shown result.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nEvery element of the returned list must be rounded to 4 decimal places.\n"}
{"task_id": 129, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Cycling Through a Sequence \u2013 First N Samples\n# Description:\nIn deep-learning libraries like *Keras*, the method `SequenceEnqueuer.get()` is expected to provide an **infinite stream** of data obtained by repeatedly looping over a finite dataset (the *sequence*).  \nYour task is to write a helper function that mimics this behaviour for simple Python lists or tuples.\n\nGiven a finite sequence and a positive integer `samples`, return the first `samples` elements that would be produced by endlessly cycling through the sequence in order.  \nIf either the sequence is empty or `samples` is not positive, return an empty list.\n# Your code should start with:\n```python\nfrom itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nThe function must:\n\u2022 Return a standard Python list.\n\u2022 Never raise an exception for empty sequences or non-positive `samples` \u2013 just return an empty list.\n"}
{"task_id": 130, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Empirical Outcome Probabilities in a Tabular Environment Model\n# Description:\nIn a tabular (finite) Markov-Decision-Process an *experience tuple* is commonly written  `(state, action, reward, next_state)`.  By collecting many such tuples we can form an **empirical environment model**: for every `(state, action)` pair we simply count how often every possible `next_state` occurred.  \n\nWrite a function that, given a list of experience tuples and a query `(state , action)` pair, returns the empirical probability distribution over the next states produced by that pair.  If the pair never occurred, return an empty list.\n\nThe returned distribution must be a list of two-element lists `[next_state, probability]` sorted by `next_state` in ascending order.  Probabilities have to be rounded to the nearest 4th decimal.\n\nFor example, from the samples\n```\n[(0,'left',  -1, 1),\n (0,'left',  -1, 1),\n (0,'left',  -1, 2),\n (0,'right',  0, 3)]\n```\nwe observe the pair `(0,'left')` three times: it led to state `1` twice and to state `2` once, therefore\n```\nnext_state 1 : 2 / 3 \u2248 0.6667\nnext_state 2 : 1 / 3 \u2248 0.3333\n```\nso the function should return `[[1, 0.6667], [2, 0.3333]]`.\n# Your code should start with:\n```python\nfrom collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # TODO: complete the implementation\n    pass\n```\n# Output Constraints:\nProbabilities must be rounded to 4 decimal places and the list must be sorted by next_state in ascending order.\n"}
{"task_id": 131, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Shared Sequence Element Retrieval\n# Description:\nYou are given a shared container that stores multiple independent sequences so that several processes (for example, training and validation procedures) can access different sequences without overwriting each other.\n\nThe container is provided as a module-level list named `_SHARED_SEQUENCES`, where the element at position `uid` is the sequence that belongs to that identifier. Every individual sequence behaves like a normal Python list, so it supports indexing with non-negative and negative indices.\n\nWrite a helper function `get_index` that returns the element stored at position `i` of the sequence identified by `uid`.\n\nIf one of the following situations occurs, the function must return `None` instead of raising an exception:\n1. `uid` is **not** a valid index for `_SHARED_SEQUENCES` (negative or beyond the current number of stored sequences).\n2. `i` is out of range for the chosen sequence (after normalising negative indices in the usual Python way).\n\nThe function must leave the global list unchanged.\n# Your code should start with:\n```python\ndef get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn the element itself if it exists, otherwise return None.\n"}
{"task_id": 132, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Activation Function\n# Description:\nImplement the linear (identity) activation function that is frequently used in neural-network libraries. The function receives a single argument z and must return the *unchanged* value of z.\n\nInput types that must be handled:\n1. A scalar (int or float) \u2013 return the same scalar.\n2. A Python list or tuple of numeric values (any depth) \u2013 convert it to a NumPy ndarray and return that array.\n3. A NumPy ndarray \u2013 return the same ndarray object (no copy, no modification).\n\nThe implementation must *not* change the data contained in z and must not allocate a new NumPy array when z is already an ndarray. If z is a list/tuple you **must** convert it to an ndarray before returning so that callers always obtain a NumPy object for non-scalar inputs.\n\nIn summary, the function behaves as the mathematical identity: f(z) = z, while guaranteeing a uniform NumPy output for non-scalars.\n# Your code should start with:\n```python\nimport numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\n\u2022 If the input is a scalar (int/float) return the same scalar.\n\u2022 If the input is a list/tuple/ndarray return a NumPy ndarray that is *exactly* equal to the input values.\n\u2022 Do not modify the original ndarray when one is passed in.\n"}
{"task_id": 133, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding for RNN Targets\n# Description:\nIn many sequence-to-sequence or language\u2013modeling tasks, the training labels (targets) are required in a 3-D one-hot encoded format of shape \\((m,\\;\\text{time\\_steps},\\;\\text{vocab\\_length})\\).  \n\nGiven a batch of integer-encoded sequences `X_train` (each element is a token index in the range \\([0,\\;\\text{vocab\\_length}-1]\\)) write a function that converts this 2-D array into its corresponding one-hot representation `Y_train`.\n\nIf any token index is negative or is greater than or equal to `vocab_length`, the function must return **-1**.\n\nThe resulting structure has to be a pure Python nested list that can be passed directly to deep-learning libraries (e.g. Keras) after calling `np.array` on it.\n# Your code should start with:\n```python\nimport numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the result as a Python list (use `.tolist()` if you rely on NumPy).\n"}
{"task_id": 134, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Identify the Optimal Arm in a Bernoulli Bandit\n# Description:\nIn a Bernoulli multi-armed bandit every arm (action) returns a binary reward (1 or 0).  \nThe probability of getting a reward from arm k is denoted by p_k.  \nGiven the list of reward probabilities for all K arms, implement a function that finds the arm with the highest expected reward and returns both this maximum expected reward and the corresponding arm index.\n\nSpecial rules\n1. Probabilities must satisfy 0 \u2264 p \u2264 1. If any value violates this constraint or the list is empty, the function must return the tuple **(-1.0, -1)**.\n2. If several arms share the same highest probability, return the **smallest** index among them.\n\nExample\nInput: payoff_probs = [0.15, 0.6, 0.35]  \nOutput: (0.6, 1)\n\nExplanation: Arm 1 (0-based indexing) has the largest success probability 0.6, so the maximum expected reward is 0.6 and its index is 1.\n# Your code should start with:\n```python\nimport numpy as np\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a tuple: (max_expected_reward : float, best_arm_index : int).  \nmax_expected_reward should be a Python float (not rounded).\n"}
{"task_id": 135, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ordinary Least Squares Linear Regression\n# Description:\nImplement Ordinary Least Squares (OLS) linear regression from scratch using the normal equation.  \n\nWrite a function that\n1. Learns the regression coefficients (including the intercept term) from a training set `(X_train, y_train)`.\n2. Uses the learned coefficients to predict the target values for a test set `X_test`.\n3. Returns the list of predictions rounded to **4 decimal places**.\n\nIf the matrix $(X^{\\top}X)$ is **singular** (i.e. non-invertible) the function must return **-1** instead of attempting to fit a model.\n\nNotes\n\u2022 An intercept term must always be fitted (prepend a column of ones to the feature matrix).  \n\u2022 All inputs are guaranteed to be non-empty and of compatible sizes.  \n\u2022 Do not use any third-party ML libraries \u2013 rely only on NumPy\u2019s linear-algebra utilities.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Your task is to complete this function!\"\"\"\n```\n# Output Constraints:\nReturn a Python list of floats where each value is rounded to 4 decimal places.\n"}
{"task_id": 136, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numerically-Stable Softmax\n# Description:\nImplement the numerically\u2013stable softmax activation function.\n\nGiven an $n$-dimensional NumPy array $z$, the softmax converts the raw scores in $z$ to a probability distribution along a chosen axis:\n\n$$\\text{softmax}(z_i)=\\frac{e^{z_i}}{\\sum_j e^{z_j}}.$$\n\nDirectly exponentiating large or very small numbers is prone to overflow/underflow.  An equivalent, stable formulation subtracts the maximum value from every element before exponentiation:\n\n$$\\text{softmax}(z_i)=\\frac{e^{\\,(z_i-\\max(z))}}{\\sum_j e^{\\,(z_j-\\max(z))}}.$$\n\nWrite a function that\n1. Accepts any NumPy array `z` and an integer `axis` (default `-1`).\n2. Computes the softmax along the specified axis **using the numerically\u2013stable version above**.\n3. Returns the result as a regular Python list produced by `numpy.ndarray.tolist()`.\n4. Rounds every probability to **four decimal places**.\n\nIf `axis` equals `-1`, the last axis is used (matching NumPy\u2019s default).  The shape of the output must match the shape of the input.\n\nExample\n-------\nInput\n```\nz = np.array([1.0, 2.0, 3.0])\naxis = 0\n```\n\nOutput\n```\n[0.0900, 0.2447, 0.6652]\n```\n\nReasoning\n----------\n1. Subtract the maximum value (3) from every entry \u2192 `[-2, \u20111, 0]`.\n2. Exponentiate \u2192 `[e^{-2}, e^{-1}, 1] \u2248 [0.1353, 0.3679, 1]`.\n3. Normalise by their sum (\u22481.5032) \u2192 `[0.0900, 0.2447, 0.6652]` (rounded to four decimals).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nRound every element to the nearest 4th decimal before returning.\nReturn a regular Python list using ndarray.tolist().\n"}
{"task_id": 138, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Classification Accuracy\n# Description:\nImplement a simple evaluation metric widely used in classification tasks \u2013 **accuracy**.  \nGiven two equally-long sequences:\n1. `y_true` \u2013 the ground-truth labels.\n2. `y_pred` \u2013 the predicted labels produced by a model.\n\nThe accuracy is the proportion of elements that are identical in the same positions of both sequences.  \nFormally, if the sequences have length $n$, then  \naccuracy = (number of indices \\(i\\) such that \\(y\\_true[i] = y\\_pred[i]\\))/\\(n\\).\n\nYour task is to write a function that:\n\u2022 Validates that `y_true` and `y_pred` have the same non-zero length \u2013 otherwise it must return **-1**.  \n\u2022 Computes the accuracy as a floating-point number rounded to four decimal places.  \nThe function should work with numerical labels, strings, or booleans.\n# Your code should start with:\n```python\nimport numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a native Python float rounded to the nearest 4th decimal.  \nReturn -1 when the inputs are empty or have different lengths.\n"}
{"task_id": 139, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hyperbolic Tangent (tanh) Activation Function\n# Description:\nImplement the hyperbolic tangent (tanh) activation function. Your function must accept a one-dimensional iterable (Python list or NumPy array) of numeric values and return a Python list containing the tanh of each element, rounded to **four** decimal places. \n\nThe hyperbolic tangent of a real number $z$ is defined as\n\n$$\\tanh(z)=\\frac{e^{z}-e^{-z}}{e^{z}+e^{-z}}$$\n\nA numerically stable alternative that you should use is\n\n$$\\tanh(z)=\\frac{2}{1+e^{-2z}}-1$$\n\nReturn the results in the same order as the input. You are **not** allowed to call `numpy.tanh`; compute the value manually with the equations above. If the input is an empty list, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned values must be rounded to the nearest 4th decimal and delivered as a Python list.\n"}
{"task_id": 140, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Escape from Fire Maze\n# Description:\nYou are given an \\(n\\times n\\) maze.  Each row of the maze is represented by a string that only contains the following characters:\n\n* \".\" \u2014 free cell, both the agent and fire can enter it;\n* \"#\" \u2014 wall (obstacle), neither the agent nor the fire can enter it;\n* \"F\" \u2014 a cell that is on fire at time \\(t = 0\\).\n\nThe agent starts in the upper-left corner, i.e. at cell \\((0,0)\\), and wants to reach the lower-right corner \\((n-1,n-1)\\).  Both the agent and the fire can move to the four neighbouring cells (up, down, left, right) in one minute.  The fire spreads first, **then** the agent moves.  The agent may enter a free cell only if that cell is **not** on fire at the moment the agent arrives. \n\nYour task is to write a function that returns the minimum number of minutes the agent needs to reach the goal while staying safe.  If it is impossible to reach the goal, return **-1**.\n\nImportant notes\n1. The start or the goal cell may already be on fire \u2013 in that case the answer is immediately **-1**.\n2. If the maze has size 1\u00d71 and the single cell is \"\\.\" the answer is **0** (the agent is already at the goal).\n3. There can be several initial fire sources \u2013 every cell marked with \"F\" burns at time 0.\n# Your code should start with:\n```python\nfrom collections import deque\nimport math\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn an integer \u2013 the minimum number of moves (minutes) needed to reach the goal, or -1 if it is impossible.\n"}
{"task_id": 141, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbors Classifier\n# Description:\nImplement the **k-Nearest Neighbors (k-NN) classifier** as a single function.  \nGiven a labelled training set `(X_train, y_train)` and an unlabeled test set `X_test`, the function must:\n1. Compute the distance between each test sample and every training sample using one of the three metrics:\n   \u2022 `'euclidean'`   \u2013 \u2113\u2082 distance  \n   \u2022 `'manhattan'`   \u2013 \u2113\u2081 distance  \n   \u2022 `'cosine'`      \u2013 cosine distance ( 1 \u2212 cosine-similarity )\n2. For every test sample find the *k* training samples with the smallest distance.\n3. Predict the class by majority vote among those k neighbours. In case of a tie return the smallest label value.\n4. If an unknown metric string is supplied, fall back to the Euclidean metric.\n\nReturn a **1-D NumPy array** of the predicted labels.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n```\n# Output Constraints:\nReturn a 1-D NumPy array containing the predicted labels.\n"}
{"task_id": 143, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Leaky ReLU Activation Function\n# Description:\nImplement the Leaky ReLU activation function that is widely used in deep-learning models.\n\nGiven an input array `x`, Leaky ReLU is defined element-wise as\n\n\u2003\u2003f(x) = x          if x \u2265 0\n\u2003\u2003f(x) = \u03b1\u00b7x       if x < 0\n\nwhere `\u03b1` (alpha) is a small positive slope (default 0.2) used on the negative part to avoid zero gradients.  \n\nBesides the forward activation, frameworks often need the derivative with respect to the input in order to perform back-propagation:\n\n\u2003\u2003f\u2032(x) = 1          if x \u2265 0\n\u2003\u2003f\u2032(x) = \u03b1         if x < 0\n\nWrite a single function `leaky_relu` that can return either the activated values or the derivative:\n\n\u2022 When `derivative=False` (default) return f(x).  \n\u2022 When `derivative=True` return f\u2032(x).\n\nThe function must work for an arbitrary-shaped NumPy array, keep the original shape, and use only vectorised NumPy operations (no Python loops).\n\nIf the caller passes a standard Python list or tuple instead of a NumPy array, first convert it with `np.asarray`.\n# Your code should start with:\n```python\nimport numpy as np\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray that has exactly the same shape as the input.\n"}
{"task_id": 144, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Absolute Error (MAE) Calculator\n# Description:\nThe Mean Absolute Error (MAE) is one of the most commonly used regression error metrics. It is defined as the average of the absolute differences between the actual (true) values and the predicted values.\n\nWrite a Python function that receives two equal-length sequences (Python lists, tuples or NumPy arrays) containing numeric values and returns the Mean Absolute Error between them.\n\nIf the two input sequences do not have the same shape/length, the function must return **-1**.\n\nAll numeric calculations must be carried out with NumPy. The final MAE must be rounded to **4 decimal places** before being returned.\n# Your code should start with:\n```python\nimport numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place.\n"}
{"task_id": 146, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours (k-NN) Classifier\n# Description:\nImplement the classic k-Nearest Neighbours (k-NN) classifier from scratch.  \nYour function must accept a training set (features and labels), a test set, a neighbourhood size k, and one of three distance metrics \u2013  \n\u2022 **euclidean**: $\\sqrt{\\sum_i (x_i-\\hat x_i)^2}$  \n\u2022 **manhattan**: $\\sum_i |x_i-\\hat x_i|$  \n\u2022 **cosine**: $1-\\dfrac{\\mathbf x\\cdot \\hat{\\mathbf x}}{\\|\\mathbf x\\|\\,\\|\\hat{\\mathbf x}\\|}$ (use an $\\varepsilon=10^{-12}$ to avoid division by zero).\n\nFor every test sample you must  \n1. compute its distance to every training sample with the chosen metric,  \n2. pick the *k* closest neighbours (if *k* exceeds the number of training samples, use all samples),  \n3. perform a majority vote on their labels (in case of a tie return the **smallest** label),  \n4. return the predicted labels for all test samples.\n\nDo **not** use any third-party machine-learning libraries such as *scikit-learn* \u2013 only basic packages like **NumPy** are allowed.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    # TODO: complete the implementation\n    pass\n```\n# Output Constraints:\nReturn a plain Python list obtained via NumPy\u2019s `.tolist()` method; the list length must equal the number of test samples.\n"}
{"task_id": 147, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Logistic Regression from Scratch\n# Description:\nImplement binary Logistic Regression **from scratch** using batch gradient descent.\n\nWrite a function that\n1. Learns a set of weights \\(\\mathbf w\\in\\mathbb R^{d}\\) and an intercept \\(b\\in\\mathbb R\\) by minimising the negative log-likelihood (equivalently, maximising the likelihood) on a training set \\((\\mathbf x_i,y_i)\\_{i=1}^{n}\\) where every label \\(y_i\\in\\{0,1\\}.\\)\n2. Uses the learned parameters to predict the class labels of an unseen test set.\n\nThe optimisation must be performed **only with NumPy** \u2013 no high-level ML libraries are allowed.  Use the standard logistic (sigmoid) function and batch (full) gradient descent.\n\nSpecial case: if the training set contains a single class, simply predict that class for every test example.\n\nExample\n-------\nInput\n```\nX_train = np.array([[-2,-1],[-3,-2],[-1,-2],[-2,-3],\n                    [ 2, 1],[ 3, 2],[ 1, 2],[ 2, 3]])\ny_train = np.array([0,0,0,0,1,1,1,1])\nX_test  = np.array([[-2,-2],[ 2, 2]])\n```\nOutput\n```\n[0, 1]\n```\nReasoning\n---------\nThe two classes are clearly linearly separable.  Gradient descent quickly finds a weight vector that assigns high sigmoid probabilities to the cluster centred at (2,2) and low probabilities to the cluster centred at (-2,-2).  Thresholding at 0.5 therefore yields the labels `[0, 1]` for the two test instances.\n# Your code should start with:\n```python\nimport numpy as np\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a Python *list* of integers containing only 0 or 1.  The list length must equal the number of rows in `X_test`.\n"}
{"task_id": 148, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Exponential Smoothing (EMA)\n# Description:\nYou are given a sequence of numerical observations (e.g., episode rewards) and a smoothing factor \\(\\alpha\\in[0,1]\\).  Implement exponential smoothing (also called the Exponential Moving Average, EMA).\n\nFor a sequence \\(x_0,x_1,\\dots ,x_{n-1}\\) the smoothed value \\(s_k\\) is defined recursively as\n\u2022 \\(s_0 = x_0\\)\n\u2022 \\(s_k = (1-\\alpha)\\,s_{k-1} + \\alpha\\,x_k\\quad (k\\ge1)\\)\n\nReturn the list `[s_0, s_1, \u2026, s_{n-1}]`, each rounded to four decimal places.\n\nSpecial cases\n1. If `alpha` is **outside** the closed interval `[0,1]`, or the input list is empty, return **-1**.\n2. When `alpha` is 0 the output is a list where every element equals the first observation.\n3. When `alpha` is 1 the output equals the original sequence.\n# Your code should start with:\n```python\nfrom typing import List\nfrom typing import List\n\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list of floats with every element rounded to 4 decimal places.\n"}
{"task_id": 150, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: A* Shortest Path in a Grid\n# Description:\nYou are given a two-dimensional maze represented by a rectangular list of lists. Each cell can be either\n\n\u2022 0 \u2013 free space you can step on\n\u2022 1 \u2013 a wall / blocked cell you cannot enter\n\nYou always start in the upper-left corner (row 0, column 0) and want to reach the lower-right corner (row m\u22121, column n\u22121). Movement is allowed only in the four cardinal directions (up, down, left, right) and costs **1** per step.\n\nWrite a function that uses the A* search algorithm with the Manhattan-distance heuristic to find any *shortest* path from the start to the goal.\n\nIf a path exists, return it as a list of `(row, column)` tuples **including** the start and goal positions. If no path exists (because the start or the goal is blocked, or they are not connected) return **-1**.\n\nNotes\n1. The maze is guaranteed to contain at least one row and one column.\n2. The Manhattan heuristic `h(p) = |p.row \u2013 goal.row| + |p.col \u2013 goal.col|` is admissible for this cost model, so the path returned by A* is guaranteed to be optimal.\n3. You may assume 0 \u2264 maze size \u2264 200\u00d7200 so an `O(m\u00b7n log(m\u00b7n))` implementation easily fits in time limits.\n# Your code should start with:\n```python\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\nfrom heapq import heappush, heappop\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nIf a path exists return a list of (row, column) tuples; otherwise return -1.\n"}
{"task_id": 151, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Common Activation Functions and Their Gradients\n# Description:\nIn almost every neural-network library each non-linear layer is implemented through two very small routines: one that **applies** the activation function during the forward pass and another one that **returns its element-wise derivative** during the backward pass.  \n\nWrite a collection of NumPy based functions that cover the four most frequently used activations \u2013 `sigmoid`, `tanh`, `relu`, and `softmax` \u2013 and their derivatives.  \n\nYou must then wrap them in a single helper `activation_forward_backward` that produces, in one call, the activated output **and** the local gradient that is ready to be multiplied with the upstream gradient flowing from the layer above.\n\nRules\n1. `sigmoid`, `tanh`, `relu`, `softmax` must work on an **arbitrary shaped** `np.ndarray`.  \n2. `softmax` must be evaluated along the **last axis** and implemented in a numerically stable manner (subtract the maximum before taking the exponential).  \n3. The derivative helpers receive the **already computed activation output** (not the raw input).  \n   \u2022 For `softmax` \u2013 which is almost always placed as the final layer \u2013 return an array of ones having the same shape as the output (because the true Jacobian is applied together with the loss; at this point it acts as an identity when multiplied element-wise with the upstream gradient).  \n4. All returned values (both the activated output and the gradient) must be rounded to **4 decimal places** using `np.round`.  \n5. No third-party libraries other than NumPy are allowed.\n\nFunction contract\nactivation_forward_backward(X, activation, upstream_grad) -> tuple[ndarray, ndarray]\n  \u2022 X              \u2013 raw pre-activation values  \n  \u2022 activation     \u2013 one of the four supported names (string, lower-case)  \n  \u2022 upstream_grad  \u2013 gradient coming from the layer above (same shape as X)  \n\nReturns `(A, grad)` where  \n  \u2022 A     \u2013 activation(X)  \n  \u2022 grad  \u2013 upstream_grad * activation_gradient(A)\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as\n        `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                      derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    # TODO: implement the function following the task description\n    pass\n```\n# Output Constraints:\nBoth the activated output and the gradient must be rounded to 4 decimal places.\n"}
{"task_id": 152, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Accuracy Score Implementation\n# Description:\nIn supervised learning we often need a quick way to evaluate how well a classifier performs.  One of the simplest evaluation metrics is the *accuracy score*, i.e. the proportion of correctly classified samples.\n\nWrite a Python function that replicates the behaviour of ``sklearn.metrics.accuracy_score`` using **only NumPy**.  The function must take two 1-dimensional arrays (or Python lists) ``y_true`` and ``y_pred`` containing the ground-truth labels and the predicted labels respectively and return the classification accuracy rounded to four decimal places.\n\nSpecial cases\n1. If ``y_true`` and ``y_pred`` do not have the same length, or either of them is empty, return **-1**.\n2. The function has to work with both Python lists and NumPy ``ndarray`` inputs.\n\nExample:\n>>> y_true = [1, 0, 2, 2, 1]\n>>> y_pred = [1, 0, 1, 2, 0]\n>>> accuracy_score(y_true, y_pred)\n0.6\nBecause 3 out of 5 predictions are correct (indices 0, 1 and 3), the accuracy is 3 / 5 = 0.6.\n# Your code should start with:\n```python\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound the returned value to the nearest 4th decimal using Python\u2019s built-in round function.\n"}
{"task_id": 154, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Radial Basis Function (RBF) Kernel Matrix\n# Description:\nImplement the Radial Basis Function (RBF) kernel matrix. Given two sets of vectors X\u2208\u211d^{n\u00d7d} and Y\u2208\u211d^{m\u00d7d}, the element K_{ij} of the RBF kernel matrix K is defined as  \n\n            K_{ij}=\\exp\\big(-\\gamma\\;||x_i-y_j||_2^2\\big)  \n\nwhere \u03b3>0 is a user-defined parameter that controls how rapidly the similarity decays with distance.  \n\nYour task is to write a function rbf_kernel that  \n1. Accepts two NumPy arrays X and Y (each can be 1- or 2-dimensional; treat 1-D as one sample).  \n2. Computes the pair-wise squared Euclidean distances without using any library outside NumPy.  \n3. Applies the above formula to obtain the kernel matrix.  \n4. Rounds every entry to 6 decimal places and returns the result as a standard Python nested list (use NumPy\u2019s tolist method).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 6th decimal and returned as nested python lists using numpy's tolist() method.\n"}
{"task_id": 155, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Forward Pass of an Actor Network\n# Description:\nIn many reinforcement-learning (RL) algorithms an *actor* network converts an environment state into an action.  A very common architecture is a fully-connected network with two hidden layers followed by a tanh output layer (tanh keeps the actions inside the range [\u22121,1]).  In this exercise you will write the **forward pass** of such a network using nothing more than NumPy.\n\nThe network topology is\nstate  \u2192  Linear(W1,b1) \u2192 ReLU \u2192 Linear(W2,b2) \u2192 ReLU \u2192 Linear(W3,b3) \u2192 tanh \u2192  action\n\nThe parameters (weight matrices and bias vectors) are supplied through a dictionary that has the following keys:\n\u2022  \"W1\" \u2013 first-layer weight matrix of shape (state_dim, hidden1)\n\u2022  \"b1\" \u2013 first-layer bias vector of shape (hidden1,)\n\u2022  \"W2\" \u2013 second-layer weight matrix of shape (hidden1, hidden2)\n\u2022  \"b2\" \u2013 second-layer bias vector of shape (hidden2,)\n\u2022  \"W3\" \u2013 output-layer weight matrix of shape (hidden2, action_dim)\n\u2022  \"b3\" \u2013 output-layer bias vector of shape (action_dim,)\n\nYour task is to implement a function that\n1.  accepts a one-dimensional state vector and the parameter dictionary,\n2.  performs the three affine transformations and the two nonlinearities (ReLU and tanh),\n3.  returns the resulting action vector as a Python list rounded to **four decimal places**.\n\nIf the input dimensions do not agree with the provided weight shapes, simply let NumPy raise an error (no explicit error handling is required).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\n"}
{"task_id": 157, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement Classification Accuracy Score\n# Description:\nImplement the classic *accuracy score* metric that is widely used to evaluate classification models.  \nThe function receives two equally-long 1-dimensional containers \u2013 the true class labels and the predicted class labels \u2013 and must return the proportion of correct predictions, i.e.  \n\u2003accuracy\u2004=\u2004(number of matches) \u2044 (total samples)\n\nSpecial cases\n1. If the containers have different lengths the function must return **-1**.\n2. If both containers are empty the function must return **0** (no samples \u21d2 no correct predictions).\n\nThe result has to be rounded to **4 decimal places**.\n\nYou may assume that the elements inside the containers are *hashable* (ints, strings, bools \u2026) and that no additional third-party libraries such as *scikit-learn* are available.\n# Your code should start with:\n```python\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `float` rounded to the nearest 4th decimal.\n"}
{"task_id": 158, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Closed-Form Ridge Regression\n# Description:\nImplement the closed-form solution of Ridge Regression (also known as Tikhonov regularisation).\n\nGiven a data matrix X\u2208\u211d^{N\u00d7M} (N samples, M features), a target vector y\u2208\u211d^{N}, a non-negative regularisation strength \u03b1 and a boolean flag fit_intercept, write a function that returns the ridge regression weight vector \u03b2 that minimises\n\n    ||y \u2212 X\u03b2||\u00b2  +  \u03b1||\u03b2||\u00b2.\n\nIf fit_intercept is True you must augment X with a leading column of ones so that \u03b2\u2080 becomes the intercept term.  This intercept term must NOT be regularised \u2013 in other words, when fit_intercept is True the first diagonal element of the regularisation matrix must be set to 0, while the remaining diagonal elements are set to \u03b1.\n\nThe estimator has the closed-form solution\n\n    \u03b2\u0302 = (X\u1d40X + A)^{-1} X\u1d40 y ,\n\nwhere A = \u03b1I (with A\u2080\u2080 = 0 when fit_intercept is True).\n\nReturn \u03b2\u0302 rounded to four decimal places as a Python list.\n\nIn all test cases \u03b1 \u2265 0 and (X\u1d40X + A) is guaranteed to be invertible.\n# Your code should start with:\n```python\nimport numpy as np\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every coefficient to the nearest 4th decimal before returning.\n"}
{"task_id": 159, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Log Probability Density of a Multivariate Gaussian\n# Description:\nIn multivariate statistics and many machine-learning algorithms we often need the log\u2013likelihood of a data point under a multivariate normal (Gaussian) distribution.  \n\nGiven\n\u2022 a d-dimensional sample vector x\\_i,  \n\u2022 the mean vector \u00b5 (same length d) and  \n\u2022 the positive\u2013definite d\u00d7d covariance matrix \u03a3,  \nwrite a function that returns\n\nlog N(x\\_i | \u00b5, \u03a3) = \u2212\u00bd[ d ln(2\u03c0) + ln det \u03a3 + (x\\_i \u2212 \u00b5)\u1d40 \u03a3\u207b\u00b9(x\\_i \u2212 \u00b5) ].\n\nFor numerical stability use numpy.linalg.slogdet to obtain ln det \u03a3 and numpy.linalg.solve to compute \u03a3\u207b\u00b9(x\\_i \u2212 \u00b5) without forming the explicit inverse.  \n\nThe function must return the result rounded to four decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    # =====   Write your code below this line   =====\n    pass\n```\n# Output Constraints:\nReturn the log probability (float) rounded to the nearest 4th decimal.\n"}
{"task_id": 160, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Lasso Regression via Coordinate Descent\n# Description:\nImplement **Lasso regression** (L1-regularised linear regression) using the **coordinate\u2013descent** optimisation strategy.\n\nGiven a design matrix $X\\;(m\\times n)$ and a target vector $\\mathbf y\\;(m)$, Lasso learns weight vector $\\mathbf w$ and optional intercept $b$ that minimise\n\\[\n\\frac1m\\sum_{i=1}^{m}\\bigl(y_i-(b+\\mathbf w^\\top\\mathbf x_i)\\bigr)^2+\\lambda\\,\\|\\mathbf w\\|_1,\n\\]\nwhere $\\|\\mathbf w\\|_1$ is the L1-norm and $\\lambda\\ge 0$ the regularisation strength.\n\nUse the following steps.\n1. If `fit_intercept=True` add an all-ones column to $X$; otherwise add an all-zeros column so that the first coordinate is always the intercept and is **not** included in the L1 penalty.\n2. Initialise all parameters to zero and, if an intercept is fitted, recompute it in every outer loop as the mean residual.\n3. For `max_iters` iterations repeat a **coordinate loop** over every weight (excluding the intercept):  \n   \u2022 Temporarily set the current weight to 0,  \n   \u2022 compute the partial residual $r_j=y-Xw_{\\neg j}$,  \n   \u2022 update weight $w_j$ with the *soft-thresholding* operator\n     \\[ w_j\\leftarrow S\\!\\bigl(\\langle x_j,r_j\\rangle,\\;\\lambda m\\bigr)\\;/\\;\\sum_i x_{ij}^2 \\]\n     where\n     \\[ S(a,\\tau)=\\text{sign}(a)\\cdot\\max(|a|-\\tau,0). \\]\n4. After finishing all iterations, return the final intercept and weight vector.\n\nIf the algorithm converges correctly the resulting model should give a low mean-squared error on the provided data.\n\nThe function must **only use NumPy** (no scikit-learn or other libraries).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple (**weights_list, bias_float**) where weights_list is rounded to 4 decimals.\n"}
{"task_id": 161, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Factorization Machine Binary Prediction\n# Description:\nFactorization Machines (FM) are a general-purpose predictor that model not only individual feature effects but also pair\u2013wise feature interactions.  \n\nFor a feature vector $\\mathbf x\\in\\mathbb R^{n}$ the **second\u2013order FM** prediction is  \n$s(\\mathbf x)=w_0+\\sum\\limits_{i=1}^{n}w_i x_i+\\frac12\\sum\\limits_{i=1}^{n}\\sum\\limits_{j=i+1}^{n}\\langle\\mathbf v_i,\\mathbf v_j\\rangle x_i x_j$  \nwhere $w_0\\in\\mathbb R$ is a global bias, $\\mathbf w\\in\\mathbb R^{n}$ are linear weights and $\\mathbf V\\in\\mathbb R^{n\\times k}$ holds the latent vectors $\\mathbf v_i\\in\\mathbb R^{k}$ of length *k* for every feature.  \n\nUsing the well-known computational trick\n$\\displaystyle \\frac12\\sum_{f=1}^{k}\\big((\\mathbf x\\mathbf V)_{f}^{2}-(\\mathbf x^{2}\\mathbf V^{2})_{f}\\big)$\nthis prediction can be evaluated in $\\mathcal O(nk)$ instead of $\\mathcal O(n^{2}k)$.\n\nWrite a function that receives\n\u2022 X \u2013 a 2-D NumPy array of shape `(m, n)` containing *m* samples with *n* features each,\n\u2022 w0 \u2013 a scalar global bias,\n\u2022 w \u2013 a 1-D NumPy array of length *n* with linear weights,\n\u2022 V \u2013 a 2-D NumPy array of shape `(n, k)` with latent factors\nand returns **binary class labels** `1` or `-1` for every sample, where the rule\n`label = 1`  if `score \u2265 0`, else `label = -1`\nshould be applied.\n# Your code should start with:\n```python\nimport numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"Your task is to complete this function!\"\"\"\n```\n# Output Constraints:\nReturn a Python `list` of length `m` whose elements are either `1` or `-1`.  No zeros must appear in the output.\n"}
{"task_id": 162, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Cross-Entropy Loss & Gradient\n# Description:\nImplement the cross-entropy loss that is widely used for training neural networks in multi-class classification problems.\n\nGiven a batch of model predictions \\(\\hat{Y}\\) (already passed through a soft-max layer, so every row sums to one) and the corresponding one-hot encoded labels \\(Y\\), write a function that\n1. computes the average cross-entropy loss of the batch, and\n2. computes the gradient of the loss with respect to the soft-max output (this is the quantity that is back-propagated to the previous layer).\n\nThe mathematical definitions are\n\\[\n\\text{loss} = -\\frac{1}{m}\\sum_{i=1}^{m}\\sum_{c=1}^{C} y_{ic}\\,\\log(\\hat y_{ic}),\\qquad\n\\nabla_{\\hat Y}=\\frac{1}{m}(\\hat Y- Y),\n\\]\nwhere \\(m\\) is the batch size and \\(C\\) is the number of classes.\n\nBecause the soft-max output can be exactly zero, add a small number \\(\\varepsilon\\) (default $1\\times10^{-20}$) before taking the logarithm to avoid numerical problems.  Finally, round the loss and every entry of the gradient to four decimal places and return them as a tuple **(loss, gradient)**.\nIf the shapes of *Y* and *Y_hat* do not match, the function should raise an `AssertionError` (use Python\u2019s built-in `assert`).\n# Your code should start with:\n```python\nimport numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float = 1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound the loss **and** every element of the gradient to exactly 4 decimal places before returning.\n"}
{"task_id": 163, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Elastic Net Regression with Polynomial Features\n# Description:\nImplement Elastic Net regression from scratch for a single real-valued feature and an arbitrary polynomial degree.\n\nGiven two equal-length Python lists X and y that contain the input values and the corresponding target values, write a function that\n1. expands X into a polynomial feature matrix up to the given degree (include the bias term $x^0=1$),\n2. fits the coefficients $\\beta$ by minimising the Elastic Net cost\n   $$J(\\beta)=\\frac{1}{n}\\sum_{i=1}^{n}(\\hat y_i-y_i)^2+\\lambda\\Bigl[\\alpha\\,\\lVert\\beta_{1:}\\rVert_1+\\frac{1-\\alpha}{2}\\,\\lVert\\beta_{1:}\\rVert_2^2\\Bigr],$$\n   where $\\lambda \\ge 0$ is `reg_factor` and $\\alpha\\in[0,1]$ is `l1_ratio`.\n   \u2022 If `l1_ratio` is 0 (pure Ridge) **solve the problem analytically** using the normal equations with a diagonal Tikhonov term that does **not** penalise the bias coefficient.\n   \u2022 Otherwise use batch gradient descent for `n_iterations` steps with the supplied `learning_rate`.  Use the sub-gradient `sign(\\beta_j)` for the L1 part (take 0 when the coefficient is exactly 0).\n3. returns the model\u2019s predictions on the original X as a list of floats rounded to 4 decimal places.\n\nDo not use any third-party machine-learning libraries \u2013 only NumPy is allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of floats rounded to 4 decimal places.\n"}
{"task_id": 164, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Classification Log-Loss\n# Description:\nWrite a Python function that computes the binary classification log-loss (also called cross-entropy loss).  \nGiven two equally-long sequences \u2013 the ground-truth labels *actual* (each element is 0 or 1) and the predicted probabilities *predicted* (each element is a real number in the interval \\([0,1]\\)) \u2013 the log-loss is defined as\n\n\\[\n  \\text{LogLoss}=\\,-\\frac{1}{N}\\sum_{i=1}^{N}\\bigl[\\,y_i\\log(p_i)\\; +\\; (1-y_i)\\log(1-p_i)\\bigr]\\, ,\n\\]\nwhere $N$ is the total number of samples, $y_i$ the true label, and $p_i$ the model\u2019s predicted probability for the positive class.\n\nBecause the logarithm is undefined at 0 and 1, first **clip** every probability into the closed interval \\([\\varepsilon,1-\\varepsilon]\\) with $\\varepsilon = 10^{-15}$.  \nReturn the average log-loss rounded to **six decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"Your docstring here\"\"\"\n    pass\n```\n# Output Constraints:\nReturn the average log-loss rounded to 6 decimal places (use Python\u2019s round(\u2026, 6)).\n"}
{"task_id": 165, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Normalized Hamming Distance\n# Description:\nHamming distance is a simple yet powerful distance metric that counts how many positions two equal-length sequences differ. It is widely used in information theory, coding theory, and many data-science applications (e.g., comparing binary hash codes).\n\nWrite a Python function that computes the normalized Hamming distance between two 1-D integer vectors.  The distance is defined as\n\n    d(x, y) = (1 / N) * \u03a3 \ud835\udfd9[x_i \u2260 y_i]\n\nwhere N is the common length of the vectors, and \ud835\udfd9 is the indicator function that equals 1 when the two elements differ and 0 otherwise.\n\nThe function must satisfy the following requirements:\n1. Accept either Python lists or NumPy `ndarray`s containing integers.\n2. If the two vectors have different lengths, immediately return **-1**.\n3. Otherwise, return the Hamming distance rounded to **4 decimal places**.\n\nIn cases where all corresponding elements are identical, the distance is 0. When all elements differ, the distance is 1.\n# Your code should start with:\n```python\nimport numpy as np\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a float rounded to 4 decimal places. If the input vectors do not share the same length return -1.\n"}
{"task_id": 166, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Perceptron Binary Classifier\n# Description:\nImplement the classic binary Perceptron learning algorithm from scratch.  \nThe function receives a training matrix X_train whose rows are samples and whose columns are features, a label vector y_train that contains only the values +1 and -1, and a test matrix X_test.  \nThe task is to learn a separating hyper-plane using the Perceptron update rule (learning-rate = 1) and, after at most max_iter sweeps over the training set, return the predictions for all samples in X_test.  \nAlgorithm outline:\n1. Initialise the weight vector w (one entry per feature) and the bias term b to 0.\n2. For at most max_iter iterations    \n   \u2022 iterate through the training samples sequentially.    \n   \u2022 for every sample (x_i , y_i) compute the signed margin m = y_i * (w\u00b7x_i + b).    \n   \u2022 if m \u2264 0 the sample is misclassified \u2013 update the parameters        \n        w \u2190 w + y_i * x_i        \n        b \u2190 b + y_i    \n   \u2022 keep track of the number of updates (errors) during the current sweep.\n3. If one complete sweep finishes with zero errors the algorithm has converged \u2013 stop early.\n4. After training, compute the raw score s = X_test\u00b7w + b for every test sample and return sign(s).  \n   When the score is exactly 0, treat the prediction as +1.\n\nReturn a Python list with the predicted labels for the test samples.\n# Your code should start with:\n```python\nimport numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int = 1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nAll elements of the returned list must be either 1 or -1.\n"}
{"task_id": 167, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross Entropy Loss & Gradient\n# Description:\nImplement the Binary Cross Entropy (BCE) loss that is widely used for training binary classifiers such as logistic regression and the output layer of neural networks.\n\nGiven a vector of model predictions y_hat (each element must lie in [0,1]) and the corresponding ground-truth binary labels y (each element is 0 or 1), complete the function so that it:\n1. Clips y_hat into the interval [\u03b5,\u20061 \u2212 \u03b5] using a small constant \u03b5 (default 1 \u00d7 10\u207b\u00b9\u2070) to avoid the undefined log(0).\n2. Computes the mean BCE loss\n   L = \u2212 1/m * \u03a3 [ y\u00b7log(y_hat) + (1\u2212y)\u00b7log(1\u2212y_hat) ]\n   where m is the number of samples.\n3. Computes the gradient of the loss with respect to y_hat\n   \u2202L/\u2202y_hat = (y_hat \u2212 y) / m.\n4. Rounds the loss and every element of the gradient to the nearest 4-th decimal place and returns a tuple (loss, gradient_list).\n\nIf the input arrays have different lengths or contain values outside their valid ranges, the behaviour is undefined and is **not** part of the grading.\n# Your code should start with:\n```python\nimport numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # TODO: implement the function following the task description\n    pass\n```\n# Output Constraints:\nRound the scalar loss and each gradient component to 4 decimal places. Return the gradient as a Python list (not a NumPy array).\n"}
{"task_id": 168, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Naive Bayes from Scratch\n# Description:\nImplement a Gaussian Naive Bayes classifier from scratch.\n\nGiven a training set `X_train` (a 2-D list where each inner list is a feature vector) and its corresponding labels `y_train`, you must learn the parameters of a Gaussian Naive Bayes model:\n1. For every class `c`, compute the mean and variance of every feature assuming the feature values are normally distributed within the class.\n2. For an unseen sample `x` you must compute the (log-)probability of the sample under each class assuming feature independence:\n   log P(c | x) \u221d log P(c) + \u03a3\u1d62 log \ud835\udca9(x\u1d62 ; \u03bc_{ci}, \u03c3\u00b2_{ci})\n   where \ud835\udca9 is the Gaussian density.\n3. Predict the class with the highest posterior probability for every sample in `X_test` and return all predictions as a Python list.\n\nA very small value (e.g. `1e-6`) must be added to every variance to avoid numerical problems when a variance becomes zero.\n\nThe function must only use NumPy (no scikit-learn or any other ML libraries) and return the predicted labels as integers.\n\nIn the provided example the first four vectors form class **0** (small numbers) and the last three vectors form class **1** (large numbers). The two test vectors lie near the centers of their respective classes, so the classifier should return `[0, 1]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a **Python list** of integer class labels having the same length as `X_test`.\n"}
{"task_id": 169, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Window Function Generator\n# Description:\nIn digital signal-processing many algorithms start by tapering the input data with a window function.  Implement a utility that can directly generate the most common symmetric windows.\n\nWrite a function `generate_window` that creates a list containing **N** window coefficients for one of the following window types\n\n\u2022 \"hamming\" \u2003(Hamming window)\n\u2022 \"hann\" \u2003\u2003 (Hann window)\n\u2022 \"blackman_harris\" (4-term Blackman\u2013Harris window)\n\u2022 \"generalized_cosine\" (arbitrary even cosine series)\n\nThe mathematical definitions are\n\nHamming              :  w[n] = 0.54 \u2212 0.46 cos(2\u03c0n/(N\u22121))\nHann                 :  w[n] = 0.5  \u2212 0.5  cos(2\u03c0n/(N\u22121))\nBlackman\u2013Harris :  w[n] = a\u2080 \u2212 a\u2081 cos(2\u03c0n/(N\u22121)) + a\u2082 cos(4\u03c0n/(N\u22121)) \u2212 a\u2083 cos(6\u03c0n/(N\u22121))\n                        with a\u2080 = 0.35875, a\u2081 = 0.48829, a\u2082 = 0.14128, a\u2083 = 0.01168\nGeneralized cosine :  w[n] = \u2211\u2096 a\u2096 cos(2\u03c0kn/(N\u22121)),  where the list *coefficients* supplies a\u2096.\n\nIf `window == \"generalized_cosine\"` the caller **must** supply the list `coefficients` that contains the series coefficients a\u2080 \u2026 a_M. For all other window types that argument is ignored.\n\nSpecial cases\n1. N must be a positive integer; otherwise raise `ValueError`.\n2. For N = 1 every window reduces to a single value 1.0 (the conventional definition for one-sample windows).\n3. If an unknown window name is passed raise `ValueError`.\n\nAll coefficients have to be rounded to **4 decimal places** and the function must return a Python `list` (not a NumPy array).\n# Your code should start with:\n```python\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every coefficient to the nearest 4th decimal before returning and return a regular Python list.\n"}
{"task_id": 171, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Logistic Regression \u2013 Mini-Batch Gradient Descent\n# Description:\nImplement a binary Logistic Regression classifier **from scratch** using mini-batch Gradient Descent.  \nThe function must:  \n1. Accept a training set `(X_train, y_train)` and a test set `X_test`.  \n2. Automatically add an intercept term (bias) to the data.  \n3. Work with any two distinct numeric labels (e.g. `{-1,1}`, `{0,1}`, `{3,7}`); internally map them to `{0,1}` and map predictions back to the original labels before returning.  \n4. Train the weight vector by minimizing the negative log-likelihood (cross-entropy) loss with mini-batch Gradient Descent.  \n5. Return a Python `list` with the predicted labels (same label set as `y_train`) for every sample in `X_test` using a decision threshold of **0.5** on the estimated probability of the positive class.  \n6. Handle the special case where all training labels are identical by skipping training and simply predicting that unique label for every test sample.  \n\nIf the algorithm is implemented correctly it will separate linearly-separable data and give reasonable predictions on simple toy problems.\n# Your code should start with:\n```python\nimport numpy as np\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    pass  # implement your solution here\n```\n# Output Constraints:\nReturn a Python list of integers having the same two distinct values that appear in `y_train`.\n"}
{"task_id": 172, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Derivative of tanh\n# Description:\nImplement the derivative of the hyper-bolic tangent (tanh) activation function.\n\nFor a real number $z$ the tanh function is defined as\n\ntanh$(z)= \\dfrac{e^{z}-e^{-z}}{e^{z}+e^{-z}}$.  \nIts derivative can be written in terms of tanh itself:\n\ng'(z)=1-\\text{tanh}^2(z).\n\nWrite a function that takes a scalar, Python list or NumPy array containing one or more real numbers and returns the derivative of tanh computed element-wise using the above formula.\n\nRules\n1. Use NumPy for all numerical operations.  \n2. The result must be rounded to **four** decimal places.  \n3. If the original argument is a scalar, return a `float`; otherwise return a Python `list` obtained from the NumPy array\u2019s `tolist()` method.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places.  Return a Python `list` for non-scalar input.\n"}
{"task_id": 173, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Alphabetical Distance Fitness\n# Description:\nIn many evolutionary-algorithm toy problems, the \u2018fitness\u2019 of a candidate string is measured by how close it is to a desired target string. One simple way to quantify this closeness is to add up the alphabetical (ASCII) distance between the corresponding characters of the two strings.\n\nWrite a Python function that takes two strings \u2013 a candidate and a target \u2013 and returns their total alphabetical distance.  \n\nAlphabetical distance is defined as the sum of the absolute differences of the ASCII (Unicode code-point) values of each pair of characters in the same position:\n\n    distance(\"HELLO\", \"WORLD\") = |ord('H')-ord('W')| + |ord('E')-ord('O')| + \u2026\n\nRules\n1. The two strings must have exactly the same length. If they do not, return **-1**.\n2. An empty pair of strings counts as distance **0** (because there are no differing characters).\n# Your code should start with:\n```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a non-negative integer (or \u20111 when the strings differ in length).\n"}
{"task_id": 174, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Categorical Cross-Entropy Loss & Accuracy for GAN Discriminator\n# Description:\nIn Generative Adversarial Networks (GANs) the discriminator is trained as a multi-class classifier (\"real\" versus \"fake\").  \nGiven the discriminator\u2019s soft-max output probabilities and the corresponding one-hot encoded target labels, write a function that returns \n1. the average categorical cross-entropy loss and \n2. the classification accuracy for an entire mini-batch.\n\nBoth returned values have to be rounded to the nearest 4th decimal.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # TODO: Implement the function following the specification above.\n    pass\n```\n# Output Constraints:\nReturn a tuple `(loss, accuracy)` where each element is a Python `float` rounded to 4 decimal places.\n"}
{"task_id": 175, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement L2 Regularization Penalty\n# Description:\nRegularization techniques add a penalty term to the loss function in order to discourage overly complex models.  The most common choice is L2 (a.k.a. ridge) regularization, which penalizes the squared magnitude of each weight.\n\nWrite a Python function that computes the L2 regularization penalty for a given set of weights.  For a weight vector $\\mathbf{w}=[w_1,\\dots,w_n]$ and a non-negative regularization strength $C$, the L2 penalty is defined as\n\n                penalty = C * \\sum_{i=1}^{n} w_i^2.\n\nThe function must:\n\u2022 accept the weights as either a Python list or a 1-D NumPy array,\n\u2022 accept the scalar coefficient C,\n\u2022 return the penalty rounded to 4 decimal places,\n\u2022 work for empty or all-zero weight vectors (in these cases the penalty is 0).\n# Your code should start with:\n```python\nimport numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place.\n"}
{"task_id": 176, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost with Decision Stumps From Scratch\n# Description:\nImplement the AdaBoost ensemble algorithm from scratch using decision stumps (one-level decision trees) as weak learners.\n\nThe function must:\n1. Accept a training set (feature matrix X_train and label vector y_train) whose labels are \u201c0\u201d for the negative class and \u201c1\u201d for the positive class.\n2. Train *n_estimators* decision stumps, updating the sample weights after every round according to AdaBoost (Freund & Schapire, 1997).\n3. Produce predictions for an arbitrary test-set X_test by aggregating the weak learners\u2019 weighted votes and converting the aggregated sign back to class labels {0,1}.\n\nA decision stump is defined by\n\u2022 feature_index \u2013 which column is used,\n\u2022 threshold \u2013 the cut value,\n\u2022 polarity \u2013 whether the class *1* is predicted for values **smaller** than the threshold (polarity = 1) or for values **greater or equal** to the threshold (polarity = \u20131).\n\nIn every boosting round the stump with the smallest *weighted* classification error must be selected (ties are broken by the smallest feature index, then the smallest threshold, then polarity 1 before \u20131, in order to keep the behaviour deterministic).  \nIf a perfect stump is found (weighted error = 0) the training may stop early.\n\nReturn the predictions for *X_test* as a plain Python list of integers (0 or 1).\n\nHint: use the standard AdaBoost weight and vote update rules:\n    error_t      = \u03a3_i w_i * [y_i \u2260 h_t(x_i)]\n    \u03b1_t          = \u00bd \u00b7 ln((1 \u2013 error_t) / (error_t + 1e-10))\n    w_i \u2190 w_i \u00b7 exp(\u2013\u03b1_t \u00b7 y_i \u00b7 h_t(x_i))  (with y_i, h_t(x_i) \u2208 {\u20131,1})\n    normalise w so that \u03a3 w_i = 1\n# Your code should start with:\n```python\nimport numpy as np\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n```\n# Output Constraints:\nReturn a Python list of integers \u2013 *not* a NumPy array.\n"}
{"task_id": 177, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hyperbolic Tangent Activation Function\n# Description:\nIn neural-network libraries the hyperbolic tangent (tanh) is one of the most frequently used activation functions.  For any real value z it is defined as  \n\ntanh(z) = (e^z \u2212 e^(\u2212z)) / (e^z + e^(\u2212z)).\n\nWrite a Python function that computes the tanh activation **without using `numpy.tanh`**.  The function must work with\n\u2022 a single scalar (int or float)\n\u2022 a Python list / nested list of numerical values\n\u2022 a NumPy array of any shape\n\nThe result has to be rounded to **4 decimal places**. \nReturn rules:\n\u2013 If the input is a scalar, return a scalar `float` rounded to 4 decimals.\n\u2013 Otherwise convert the NumPy result back to a regular Python `list` by calling `.tolist()` and return it.\n# Your code should start with:\n```python\nimport numpy as np\nfrom typing import Union\nimport numpy as np\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll numerical results must be rounded to the nearest 4th decimal.\n"}
{"task_id": 178, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Particle Swarm Optimisation of the Sphere Function\n# Description:\nImplement Particle Swarm Optimization (PSO) from scratch to minimise the Sphere function  \n\n        f(\\mathbf x) = \\sum_{i=1}^{n} x_i^2,\\qquad -1 \\le x_i \\le 1.\n\nThe algorithm keeps a swarm of particles, each with a position \\(\\mathbf x\\), a velocity \\(\\mathbf v\\), its own best known position (personal best) and the globally best known position (global best).  \nAt every iteration the velocity and the position of every particle are updated as follows  \n\n        v \\leftarrow w v + c_1 r_1 (p_{best} - x) + c_2 r_2 (g_{best} - x)  \n        x \\leftarrow \\operatorname{clip}(x + v,\\; \\text{lower\\_bound},\\; \\text{upper\\_bound})\n\nwhere  \n\u2022 *w*  \u2013 inertia weight (0.5)  \n\u2022 *c\u2081* \u2013 cognitive weight (1.5)  \n\u2022 *c\u2082* \u2013 social weight   (1.5)  \n\u2022 *r\u2081,r\u2082* \u2013 independent uniform random numbers in \\([0,1]\\).  \n\nThe function must be fully deterministic with respect to *seed*; use `numpy.random.default_rng(seed)` for all random numbers.\n\nArguments\nn_dims          (int)   \u2013 dimensionality of the search space (>0)  \nnum_particles   (int)   \u2013 size of the swarm  (>0)  \nnum_iterations  (int)   \u2013 optimisation steps   (>0)  \nseed            (int)   \u2013 RNG seed (default 1)\n\nReturn value  \nThe best Sphere-function value encountered, rounded to four decimals.\n\nIf any argument is non-positive, return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the best value rounded to the nearest 4th decimal.   \nReturn -1 if *n_dims*, *num_particles* or *num_iterations* are not positive integers.\n"}
{"task_id": 179, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Character-Level Tokeniser\n# Description:\nWrite a Python function that splits a text string into a list of individual characters (character\u2013level tokenisation). Before splitting, the function should be able to\na) convert the text to lower-case and/or \nb) remove all standard ASCII punctuation marks.\n\nAfter the optional preprocessing steps, all runs of two or more consecutive spaces must be collapsed into a single space and leading/trailing spaces must be removed. The function finally returns the list of characters that remain.\n\nIf the given string becomes empty after preprocessing, or if the input is `None`, the function must return an empty list.\n# Your code should start with:\n```python\nimport re\nimport string\ndef tokenize_chars(line: str, lowercase: bool = True, filter_punctuation: bool = True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list containing one-character strings in their original order after preprocessing.\n"}
{"task_id": 180, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours Predictor\n# Description:\nImplement a pure-function version of the k-Nearest Neighbours (k-NN) algorithm that can work both as a classifier (majority vote) and as a regressor (average). The function receives a training feature matrix, the corresponding target vector, a test feature matrix, the integer k and a string that specifies the task type (\"classification\" or \"regression\").\n\nRules & details\n1. Use the Euclidean distance.\n2. If k is 0 or larger than the number of training samples, use all training samples.\n3. For classification, return the most frequent label among the k neighbours. In case of a tie, return the smallest label according to standard Python ordering (this works for both numeric and string labels).\n4. For regression, return the arithmetic mean of the neighbours\u2019 target values rounded to 4 decimal places.\n5. Preserve the order of the test samples when producing the output.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nFor regression, each predicted numeric value must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 181, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours (kNN) Prediction\n# Description:\nImplement the k-Nearest Neighbours (kNN) algorithm from scratch.\n\nWrite a Python function that predicts the targets of a set of query samples using their *k* closest neighbours from a labelled training set.\n\nThe function must work in **two modes**:\n1. ``problem='classify'`` \u2013 the function returns, for every query point, the most common label among its *k* nearest training neighbours (majority vote). In case of a tie, return the label that is smallest when the set of tied labels is sorted (this works for both numeric and string labels).\n2. ``problem='regress'`` \u2013 the function returns, for every query point, the arithmetic mean of the target values of its *k* nearest training neighbours (rounded to 4 decimal places).\n\nAlways use the **Euclidean distance**. If *k* is larger than the number of training samples, use all available samples instead.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nFor regression, round every predicted value to the nearest 4th decimal.\n"}
{"task_id": 182, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Kernel Matrix\n# Description:\nIn many machine-learning algorithms (e.g., Support Vector Machines) we often replace the ordinary dot product \u27e8x , y\u27e9 by a kernel function \u03ba(x , y).  A popular choice is the *polynomial kernel*\n\n\u03ba(x , y) = (\u27e8x , y\u27e9)\u1d48 ,\n\nwhere d \u2265 1 is the polynomial degree.  Given two data matrices X \u2208 R^{n\u00d7p} and Y \u2208 R^{m\u00d7p}, the corresponding **kernel (Gram) matrix** K \u2208 R^{n\u00d7m} is defined element-wise by\n\nK_{ij} = \u03ba(X_i , Y_j) = (X_i \u00b7 Y_j)\u1d48 ,  0 \u2264 i < n, 0 \u2264 j < m.\n\nWrite a function that\n1. accepts two 2-D Python lists or NumPy arrays `X` and `Y`, and an integer `degree` (default 2),\n2. validates that\n   \u2022 each input is two-dimensional,\n   \u2022 the numbers of features (columns) match,\n   \u2022 the degree is a positive integer (\u2265 1),\n   otherwise returns **-1**,\n3. computes the polynomial kernel matrix `(X @ Y.T) ** degree`,\n4. rounds every entry to **four decimal places**,\n5. returns the result as a plain nested Python list (use `tolist()`).\n# Your code should start with:\n```python\nimport numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"TODO: Complete the function documentation and implementation.\"\"\"\n    pass\n```\n# Output Constraints:\nAll elements must be rounded to the nearest 4th decimal and the final result returned as a Python list (not a NumPy array).\n"}
{"task_id": 183, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: He Uniform Initialisation\n# Description:\nIn neural-network training, the initial scale of the weights strongly influences how well the gradients flow through the network.  One of the most popular choices for layers followed by a ReLU activation is **He (Kaiming) uniform initialisation**.  For a weight tensor $W$ with *fan-in* (number of incoming connections) equal to \\(n_{in}\\), every entry is drawn independently from the uniform distribution  \n\n\\[\n\\mathcal U\\!\\bigl[-\\text{limit},\\;\\text{limit}\\bigr], \\qquad \\text{limit}=\\sqrt{\\tfrac{6}{n_{in}}}.\\]\n\nThe definition of $n_{in}$ depends on the layer type:\n\u2022 Fully-connected / dense layer: the weight matrix has shape `(n_in , n_out)`, so \\(n_{in}\\) is the first dimension.\n\u2022 2-D convolutional layer: a filter tensor has shape `(fW , fH , in_channels , out_channels)`.  The fan-in is the product `fW * fH * in_channels` (spatial size times input depth).\n\nWrite a function `he_uniform` that\n1. takes a tuple or list `weight_shape` describing the desired tensor shape,\n2. computes the correct `fan_in`,\n3. returns a NumPy `ndarray` of the requested shape with values sampled from the He uniform distribution.\n\nIf the shape has two dimensions it is treated as a dense layer; if it has four dimensions it is treated as a convolutional kernel.  All other dimensionalities are **out of scope for this task** and will not be used in the tests.\n\nExample (with a fixed seed for reproducibility)\n```\nimport numpy as np\nnp.random.seed(42)\nweights = he_uniform((2, 2))\nprint(np.round(weights, 4))\n```\nOutput\n```\n[[-0.4347  1.5613]\n [ 0.8037  0.3418]]\n```\nReasoning: `fan_in = 2`, so `limit = sqrt(6 / 2) = sqrt(3) \u2248 1.7321`.  All four entries are uniformly sampled inside this interval.\n\nWrite clean, commented code that follows the specification exactly.\n# Your code should start with:\n```python\nimport numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray with the same shape as `weight_shape`.  Values must lie in the interval [\u2212limit, limit].\n"}
{"task_id": 184, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: CART Decision Tree Classifier (from Scratch)\n# Description:\nImplement a binary decision-tree classifier (CART algorithm) **from scratch**, using Gini impurity and recursive binary splitting.  \nThe function receives three NumPy arrays:\n1. `X_train` \u2013 shape `(n_samples, n_features)` containing the training features (real numbers).\n2. `y_train` \u2013 shape `(n_samples,)` containing integer class labels starting from **0**.\n3. `X_test`  \u2013 shape `(m_samples, n_features)` containing the unseen samples.\n\nYour task is to build a decision tree on `(X_train, y_train)` and return the predicted class label for every row in `X_test`.\n\nStopping criteria:\n\u2022 If all labels at a node are identical \u2013 create a leaf with that label.  \n\u2022 If `max_depth` is reached (when supplied, otherwise unlimited) \u2013 create a leaf with the majority class of the node.  \n\u2022 If a split produces an empty child \u2013 also create a leaf with the majority class.\n\nSplitting rule:\n\u2022 For each feature sort the samples, evaluate every mid-point lying between two consecutive, different feature values.  \n\u2022 Pick the (feature, threshold) pair with the largest Gini-gain (parent Gini \u2013 weighted children Gini).  \n\u2022 In case no gain can be achieved return a leaf with the majority class.\n\nThe final model must make deterministic predictions purely based on the above rules (no randomness).\n# Your code should start with:\n```python\nimport numpy as np\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a **Python list** of integers, one label per test sample.\n"}
{"task_id": 185, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Dataset Shape Extraction\n# Description:\nIn many machine\u2013learning libraries estimators begin by checking that the input data have a valid shape and by converting any array-like objects to NumPy ndarrays.  \n\nYour task is to implement the same shape-inspection logic of the `_setup_input` method shown in the snippet, but **without using classes**.  \n\nWrite a function `dataset_shape` that receives a feature matrix **X** (any array-like object) and returns a tuple `(n_samples, n_features)` computed as follows:\n\n1. Convert **X** to `np.ndarray` if it is not already one.\n2. If **X** is empty (`X.size == 0`) raise `ValueError(\"Got an empty matrix.\")`.\n3. \u2022 If **X** is one-dimensional (`X.ndim == 1`) treat it as a *single* sample:  \n   `n_samples = 1` and `n_features = len(X)`.\n   \u2022 Otherwise (`X.ndim >= 2`) let the first axis store samples.  \n   In that case `n_samples = X.shape[0]` and `n_features = np.prod(X.shape[1:])` \u2013 the product of all remaining axes.\n\nReturn the pair `(n_samples, n_features)` as a Python tuple of integers.\n\nDo **not** modify **X** in-place and do **not** print anything.\n# Your code should start with:\n```python\nimport numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a Python tuple `(n_samples, n_features)` where both elements are integers.\n"}
{"task_id": 186, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Baseline Mean Regressor\n# Description:\nIn many regression problems a first simple model (often called a *baseline* or *initial* estimator) is to always predict the average of the training targets. Although extremely simple it is useful because it provides a reference score that any reasonable model should beat.  \n\nWrite a function that implements this baseline regressor.\n\nThe function must\n1. receive the training feature matrix `X_train`, the training target vector `y_train`, and the feature matrix of the samples that have to be predicted `X_test`;\n2. ignore the content of `X_train` (it is only present for API compatibility) and compute the arithmetic mean of `y_train`;\n3. return that mean **repeated** for every row contained in `X_test`;\n4. round every predicted value to **four** decimal places;\n5. return the predictions as a Python `list` of floats.\n\nIf `X_test` is empty (i.e. it contains no rows) the function must return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery number in the returned list must be rounded to exactly 4 decimal places.\n"}
{"task_id": 188, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Exponential \u03b5-Decay Scheduler\n# Description:\nIn many on-policy and off-policy reinforcement-learning algorithms \u2013 such as the Deep Q-Network (DQN) shown in the given code snippet \u2013 action selection is often carried out by an \u03b5-greedy policy.  To guarantee sufficient exploration at the beginning of learning while gradually shifting towards exploitation, \u03b5 (epsilon) is decayed over time.\n\nWrite a Python function that implements the **exponential \u03b5-decay schedule**\n\n\u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) \u00b7 e^(\u2212\u03bb \u00b7 t),\n\nwhere\n\u2022 \u03b5_max  \u2013 exploration rate at the beginning of training (t = 0)\n\u2022 \u03b5_min  \u2013 lower bound that \u03b5 must never fall below\n\u2022 \u03bb      \u2013 positive decay rate that controls how fast \u03b5 decreases\n\u2022 t      \u2013 current time-step (non-negative integer)\n\nThe function must\n1. Validate its inputs.\n   \u2013 0 \u2264 \u03b5_min < \u03b5_max, \u03bb > 0, t \u2265 0.\n   \u2013 If the parameters are invalid **return \u22121**.\n2. Compute \u03b5(t) according to the formula above.\n3. Clip the result so that numerical underflow can never push it below \u03b5_min.\n4. Return the value **rounded to 4 decimal places**.\n\nThis scheduler is a core component inside a DQN\u2019s training loop where the agent\u2019s exploration rate is updated after every environment interaction.\n# Your code should start with:\n```python\nimport math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn the decayed exploration rate rounded to 4 decimal places.\n"}
{"task_id": 189, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Batch Image Resampling\n# Description:\nGiven a mini-batch of images stored in a 4-D NumPy array **X** of shape `(n_ex, in_rows, in_cols, in_channels)`, implement a function that resamples \n(upsamples or downsamples) every image in the batch to a new spatial resolution `(out_rows, out_cols)`.\n\nThe function must support two interpolation strategies:\n1. **bilinear**  \u2013 continuous bilinear interpolation (default)\n2. **neighbor** \u2013 discrete nearest\u2013neighbour interpolation\n\nThe returned tensor has to keep the batch and channel dimensions in the same order, i.e. the **output shape must be** `(n_ex, out_rows, out_cols, in_channels)`.\n\nAll numerical results have to be rounded to the nearest 4\u1d57\u02b0 decimal place using `np.round(... , 4)` before returning.\n\nIf `mode` is anything except the two strings shown above, raise `NotImplementedError` with the message\n`\"Unrecognized resampling mode: <mode>\"`.\n# Your code should start with:\n```python\nimport numpy as np\ndef batch_resample(X, new_dim, mode=\"bilinear\"):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray whose elements are rounded to 4 decimal digits.\n"}
{"task_id": 190, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Best Gini Split Finder\n# Description:\nThe Gini impurity is one of the most popular criteria for choosing a split in a decision\u2013tree classifier.  \n\nWrite a Python function that, given a numerical feature matrix X (shape n_samples \u00d7 n_features) and the corresponding class labels y, finds the **single best binary split** of the data that minimises the weighted Gini impurity.\n\nFor every feature `j` and every unique value `v` appearing in that feature, form the split\n```\nleft  =  samples with X[i, j] \u2264 v\nright =  samples with X[i, j] > v\n```\nSkip a candidate split if either child node is empty.  Compute the weighted Gini impurity\n```\nG_split = (n_left / n_total) * G(left) + (n_right / n_total) * G(right)\n```\nwhere\n```\nG(node) = 1 \u2212 \u03a3_k p_k\u00b2\n```\nand `p_k` is the proportion of class *k* in the node.\n\nReturn a three-tuple\n```\n(best_feature_index, best_threshold_value, best_gini)\n```\ncontaining the index (0-based) of the feature that yields the minimum `G_split`, the corresponding threshold value `v`, and the split\u2019s Gini impurity rounded to **4 decimal places**.\n\nTie-breaking rules\n1. Prefer the split with the strictly smaller `G_split`.\n2. If the impurities are equal (difference < 1e-12), choose the smaller feature index.\n3. If the feature index is also equal, choose the smaller threshold value.\n\nIf no valid split exists (e.g. every feature takes a constant value or all labels belong to one class) return\n```\n(-1, None, round(G_whole_dataset, 4))\n```\nwhere `G_whole_dataset` is the Gini impurity of the whole, unsplit data.\n# Your code should start with:\n```python\nimport numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn exactly a tuple `(feature_index, threshold, gini)` with `gini` rounded to 4 decimal places.\n"}
{"task_id": 191, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Distance Metric Factory with Validation\n# Description:\nYou are asked to build a very small factory that delivers several classical distance (or dissimilarity) measures.  \n\nImplement the function **metric** that receives a string *name* and returns a callable *d*.  The callable *d* must accept **exactly two** one-dimensional numeric vectors (list, tuple or NumPy array) and compute the corresponding distance, rounded to four decimal places.\n\nSupported metric names and their definitions (for vectors \\(\\mathbf{x},\\mathbf{y}\\) of equal length \\(n\\)):\n\n1. **euclidean** \u2013 \\(\\sqrt{\\sum_{i=1}^{n}(x_i-y_i)^2}\\)\n2. **manhattan** \u2013 \\(\\sum_{i=1}^{n}|x_i-y_i|\\)\n3. **chebyshev** \u2013 \\(\\max_{i}|x_i-y_i|\\)\n4. **cosine** \u2013 cosine **distance**, i.e. \\(1-\\dfrac{\\mathbf{x}\\cdot\\mathbf{y}}{\\|\\mathbf{x}\\|\\,\\|\\mathbf{y}\\|}\\)\n\nBefore the requested value is returned, the vectors have to be validated:\n\u2022 both arguments must be lists, tuples or NumPy arrays that can be converted to `float`\n\u2022 vectors must be one-dimensional, of the **same** length and non-empty\n\u2022 for the cosine metric the two norms must be non-zero\n\nIf either the metric name is not supported or the input validation fails, the callable must return **-1**.\n\nExample call:\n```\nmetric('euclidean')([1, 2, 3], [4, 5, 6]) \u279e 5.1962\n```\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nRound every valid numeric result to the nearest 4th decimal; return -1 otherwise.\n"}
{"task_id": 193, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Softsign Activation Function\n# Description:\nImplement the Softsign activation function that is frequently used in neural networks as a smooth alternative to the hyperbolic tangent. The Softsign function is defined as\n\nSoftsign(z) = z / (1 + |z|)\n\nWrite a Python function that takes either\n1. a single real number (int or float), or\n2. a one-dimensional list/NumPy array of real numbers\n\nand returns the Softsign activation applied element-wise.\n\n\u2022 For a scalar input, return a single float rounded to **4 decimal places**.\n\u2022 For an array-like input, return a Python list of floats \u2013 preserving the original shape \u2013 where each element is rounded to **4 decimal places**.\n\nIf the input is an empty list/array, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numerical results must be rounded to 4 decimal places. For array-like inputs the function must return a Python list (not a NumPy array).\n"}
{"task_id": 194, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement an Adagrad Optimisation Step\n# Description:\nImplement a single Adagrad optimisation step.\n\nAdagrad (Adaptive Gradient Algorithm) adjusts the learning rate for each model parameter according to the historical magnitude of its gradients.  For a parameter vector $\\mathbf w$ and its current gradient $\\nabla\\_w\\mathcal L$ the Adagrad update is defined as\n\n1. Accumulate the squared gradients:  \\(\\mathbf G \\leftarrow \\mathbf G + (\\nabla\\_w\\mathcal L)^2\\)\n2. Update the parameters:\n   \\[\\mathbf w\\_{new}=\\mathbf w-\\eta\\,\\frac{\\nabla\\_w\\mathcal L}{\\sqrt{\\mathbf G+\\varepsilon}}\\]\n   where \\(\\eta\\) is the learning rate and \\(\\varepsilon\\) is a very small constant that prevents division by zero.\n\nWrite a function that receives\n\u2022 the current parameter vector (weights),\n\u2022 the current gradient vector,\n\u2022 the running sum of squared gradients G (or **None** if it is the first iteration),\n\u2022 the learning rate \u03b7 (default 0.01), and\n\u2022 the numerical stability term \u03b5 (default 1 \u00d7 10\u207b\u2078),\n\nand returns a **tuple** containing the updated parameter vector and the updated running sum of squared gradients.  Round every returned value to 6 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn (new_weights, new_G) as two Python lists rounded to 6 decimals.\n"}
{"task_id": 197, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Action Space Statistics\n# Description:\nIn Reinforcement Learning (RL) it is common to work with a variety of action\u2013space types (continuous vs. discrete, single\u2013 vs. multi\u2013dimensional).  \nWrite a function `action_stats` that, given an environment object `env` and two Boolean indicators \u2013 `md_action` (multi-dimensional action space?) and `cont_action` (continuous action space?) \u2013 returns basic statistics about the environment\u2019s action space.\n\nThe function must\n1. distinguish between continuous and discrete spaces,\n2. handle both single\u2013 and multi\u2013dimensional cases, and\n3. summarise the space with the following values:\n   \u2022 `n_actions_per_dim` \u2013 a list whose *i-th* element is the number of distinct actions in dimension *i*; use `math.inf` (or `numpy.inf`) for continuous dimensions,\n   \u2022 `action_ids` \u2013 a list containing every valid discrete action (cartesian product of all dimensions) **or** `None` when at least one dimension is continuous,\n   \u2022 `action_dim` \u2013 the total number of action dimensions.\n\nThe environment is assumed to expose its action space in a way that mimics OpenAI Gym:\n\u2022 `env.action_space.n` \u2013 number of actions for a 1-D discrete space,\n\u2022 `env.action_space.shape` \u2013 tuple whose first element is the dimensionality of a continuous space,\n\u2022 `env.action_space.spaces` \u2013 list-like container holding each sub-space for a multi-dimensional space.  \nEvery sub-space again carries either the attribute `n` (discrete) **or** `shape` (continuous).\n\nReturn the three values **in the above order**. The function must not mutate its inputs.\n\nIf the action space is continuous in *any* dimension the function should:  \n\u2022 set the corresponding entries in `n_actions_per_dim` to `numpy.inf`,  \n\u2022 return `action_ids = None` (because there are infinitely many actions).\n\nWhen the space is fully discrete and multi-dimensional, `action_ids` must contain **all** possible actions represented as tuples, obtained via the cartesian product of the ranges for each dimension.\n# Your code should start with:\n```python\nimport numpy as np\nfrom itertools import product\nfrom itertools import product\nimport numpy as np\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    pass\n```\n"}
{"task_id": 198, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Updating the Word\u2013Topic Matrix \u03b2 in Latent Dirichlet Allocation\n# Description:\nIn Latent Dirichlet Allocation (LDA) the word\u2013topic matrix $\\beta\\in\\mathbb{R}^{V\\times T}$ (sometimes also called *topic\u2013word distribution*) stores, for every vocabulary term $v\\in\\{0,\\dots ,V-1\\}$ and every topic $t\\in\\{0,\\dots ,T-1\\}$, the probability $p(w=v\\mid z=t)$.  \n\nDuring the variational M-step the maximum\u2013likelihood estimate of $\\beta$ is obtained from the current variational parameter $\\varphi$ (here denoted **phi**) via\n\n$$\n\\beta_{v,t}\\;\\propto\\;\\sum_{d=0}^{D-1}\\sum_{n=0}^{N_d-1}\\;\\varphi^{(d)}_{n,t}\\,[\\,w^{(d)}_n=v\\,],\n$$\nwhere $[\\,w^{(d)}_n=v\\,]$ is an indicator that the $n$-th token of document $d$ is the word $v$.  After the proportionality is computed the columns of $\\beta$ are normalised so that, for every topic $t$, $\\sum_{v=0}^{V-1}\\beta_{v,t}=1$ holds.\n\nYour task is to implement this **\u03b2-maximisation step**.\n\nFunction requirements\n1. `phi`\u2003\u2013 list of `numpy.ndarray`s.  The *d*-th element has shape `(N_d, T)` and stores the current values of the variational parameter $\\varphi^{(d)}$ for document *d*.\n2. `corpus` \u2013 list of documents.  The *d*-th document is a list of length `N_d` containing integer word indices.\n3. `V`\u2003 \u2013 size of the vocabulary (the number of rows of the returned matrix).\n\nReturn the updated $\\beta$ *as a Python list of lists* such that every column sums to one and every entry is **rounded to 4 decimal places**.\n\nIf a word index from `0 \u2026 V-1` never occurs in the corpus the corresponding row in $\\beta$ must contain only zeros (but columns must still sum to one after normalisation of the non-zero rows).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # ===== write your code below =====\n    pass\n```\n# Output Constraints:\nEach inner list corresponds to one vocabulary word and each column to a topic.\nEvery column must sum to exactly 1 (up to 1e-4 rounding error).\nAll returned numbers must be rounded to 4 decimal places.\n"}
{"task_id": 199, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Threshold-Based Label Splitter\n# Description:\nYou are given a one\u2013dimensional feature vector X and its corresponding label vector y, both stored as NumPy arrays of equal length.  \nYour task is to write a function that splits the label vector y into two parts based on a threshold *value* applied to X:\n1. y_left \u2013 the labels whose corresponding feature in X is strictly smaller than *value*.\n2. y_right \u2013 the labels whose corresponding feature in X is greater than or equal to *value*.\n\nThe function must return a tuple containing (y_left, y_right) **as regular Python lists**.  \nIf either side of the split is empty, the function should return an empty list for that side.\n\nThis tiny routine is an essential building block for algorithms such as decision-tree learning, where data have to be partitioned repeatedly according to feature thresholds.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    # TODO: Implement the function\n    pass\n```\n# Output Constraints:\nReturn a tuple of two Python lists (not NumPy arrays).  The first list contains the left partition labels, the second list contains the right partition labels.  Preserve the original order of appearance from y.\n"}
{"task_id": 200, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: L1 Regularization Penalty\n# Description:\nImplement the L1 regularization penalty.\n\nIn many optimization and machine-learning algorithms a penalty term is added to the loss function in order to discourage large weights and reduce over-fitting.  In L1 (\"lasso\") regularization the penalty is directly proportional to the sum of the absolute values of the model weights.\n\nWrite a function that takes\n1. `weights` \u2013 any Python sequence (nested lists) or a NumPy array of real numbers representing model parameters of arbitrary dimension and\n2. `C` \u2013 a non-negative regularization strength (float),\n\nand returns the L1 penalty defined by\n\n            L1 = C \u00b7 \u03a3 |w\u1d62|\n\nwhere the sum runs over **all** elements in `weights`.\n\nIf `weights` is empty the function must return `0.0`.\n\nThe returned value has to be rounded to **4 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn result as a Python float rounded to the nearest 4th decimal.\n"}
{"task_id": 201, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Max-Norm Weight Clipping\n# Description:\nIn many deep-learning libraries a *max-norm* constraint is used to keep the Euclidean (\u2016\u00b7\u2016\u2082) norm of weight vectors below a fixed threshold.  \nImplement a function that receives a NumPy array `p`, a positive real number `m`, and an `axis` argument.  Along the chosen axis the vector norms must be clipped to **at most** `m` while keeping every other dimension unchanged.\n\nMore formally, let \ud835\udc91 be the original tensor and let \ud835\udc91\u1d62 be the slice extracted by fixing the chosen axis to index *i*.  The function returns a tensor \ud835\udc91\u0302 whose slices are\n\n\ud835\udc91\u0302\u1d62 = \ud835\udc91\u1d62 \u00b7 min(1, m / (\u2016\ud835\udc91\u1d62\u2016\u2082 + \u03b5))\n\nwhere \u03b5 = 1 \u00d7 10\u207b\u00b9\u00b2 ensures numerical stability when \u2016\ud835\udc91\u1d62\u2016\u2082 = 0.\n\nThe returned tensor must keep the original shape and be rounded to four decimal places before being converted to (nested) Python lists.\n\nIf the chosen axis is `None`, the whole tensor is treated as a single vector.\n# Your code should start with:\n```python\nimport numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numbers must be rounded to the nearest 4th decimal using `numpy.round` before returning.\nReturn the result as ordinary Python (nested) lists via `.tolist()`.\n"}
{"task_id": 202, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Partitioning Around Medoids (PAM) Clustering\n# Description:\nImplement the Partitioning Around Medoids (PAM) clustering algorithm.\n\nGiven a data matrix X\u2208\u211d^{n\u00d7d} (n samples, d features) and an integer k (1\u2264k\u2264n), your task is to group the samples into k clusters by iteratively improving a set of representative points called medoids.  \n\nThe algorithm you must follow is strictly deterministic so that the returned result can be tested:\n1. Initialise the medoids as the first k samples of X (i.e. the samples with indices 0,\u2026,k\u22121).\n2. Repeatedly attempt to reduce the total clustering cost \u2013 defined as the sum of the Euclidean distances between every sample and the medoid of the cluster it belongs to \u2013 by swapping any current medoid with any non-medoid sample.  Perform the swap that gives the largest cost reduction in the current iteration, but only accept it if the cost is strictly lower than before the swap.  When no swap can further decrease the cost, stop.\n3. After convergence assign each sample the label of the closest medoid (if two medoids are at exactly the same distance, choose the one that appears first in the current medoid list).\n4. Return the cluster labels as a Python list of integers starting at 0.\n\nExample\n-------\nInput\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]]), k = 2\n\nOutput\n[0, 0, 0, 1, 1, 1]\n\nReasoning\nInitial medoids are the first two samples: [0,0] and [1,0].  Swapping the second medoid with the fourth sample [5,5] reduces the total distance from 21.89 to 4.0, which cannot be further improved by any other possible swap.  Finally every sample is assigned to the nearer of the two medoids \u2013 the first three samples to [0,0] (label 0) and the last three samples to [5,5] (label 1).\n# Your code should start with:\n```python\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of length n where each element is an integer label in the range 0 \u2026 k\u22121.\n"}
{"task_id": 203, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Alias Method: Building Tables for Constant-Time Discrete Sampling\n# Description:\nYou are asked to implement the **alias method** (also called *Vose\u2019s algorithm*) that allows drawing samples from a discrete probability distribution in constant time after an O(N) preprocessing step.  \n\nWrite a function `build_alias_table` that, given a list or NumPy 1-D array `probs` of length `N` (positive values that sum to one), builds two tables:\n\n1. `prob_table` \u2013 a floating-point array of length `N`. Each entry is the adjusted probability of staying with the index produced by the first random lookup.\n2. `alias_table` \u2013 an integer array of length `N`. Each entry is a fall-back index used when the first lookup is rejected.\n\nThe construction **must follow exactly** the steps below so that everyone obtains identical tables:\n\n1. Multiply every probability by `N`, producing `scaled_probs`.\n2. Put the indices whose corresponding value in `scaled_probs` is **< 1** in a Python list called `small` (preserving the natural ascending order). Put the remaining indices in a list called `large` (also in ascending order).\n3. While both `small` and `large` are non\u2013empty, repeatedly:\n   \u2022 pop the *last* element from `small` into `l`, and the *last* element from `large` into `g`.\n   \u2022 set `alias_table[l] = g` and `prob_table[l] = scaled_probs[l]`.\n   \u2022 update `scaled_probs[g] = scaled_probs[g] + scaled_probs[l] \u2212 1`.\n   \u2022 if the updated `scaled_probs[g]` is now < 1, append `g` to `small`; otherwise append `g` to `large`.\n4. When the previous loop finishes, set the entries that remain in `large` to 1 in `prob_table`, and those that remain in `small` to 1 in `prob_table`.\n\nIf the given probabilities are not a NumPy array, convert them with `np.array`.  \nIf any probability is negative, or if the probabilities do not sum to one within an absolute tolerance of `1e-12`, the function must return **-1**.\n\nReturn the two tables **as Python lists** rounded to four decimal places.\n\nExample\n-------\nInput\n```\nprobs = [0.1, 0.2, 0.7]\n```\nOutput\n```\n([0.3, 0.6, 1.0], [2, 2, 0])\n```\nReasoning\n---------\n\u2022 N = 3, so `scaled_probs = [0.3, 0.6, 2.1]`.  \n\u2022 `small = [0,1]`, `large = [2]`.  \n\u2022 Pop `l=1`, `g=2`: `prob_table[1]=0.6`, `alias_table[1]=2`, `scaled_probs[2]=1.7` \u2192 append `2` to `large`.  \n\u2022 Pop `l=0`, `g=2`: `prob_table[0]=0.3`, `alias_table[0]=2`, `scaled_probs[2]=1.0` \u2192 append `2` to `large`.  \n\u2022 `small` is empty; set the remaining entry of `large` (index 2) to 1 in `prob_table`.  \nThe final tables are therefore `[0.3, 0.6, 1.0]` and `[2, 2, 0]`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    # Your code goes here\n    pass\n```\n# Output Constraints:\nReturn a **tuple** `(prob_table, alias_table)` where both members are *Python lists*.\nAll floats must be rounded to the nearest 4th decimal.\n"}
{"task_id": 204, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Count Missing Values\n# Description:\nWrite a Python function that counts how many elements are *missing* in a one-dimensional data container.\n\nAn element is considered **missing** if it is either `None` or the special floating-point value **NaN** (Not-a-Number).  Strings such as `'nan'` or `'NaN'` are *not* treated as missing.\n\nThe function must work with any iterable that can be converted to a list (e.g. Python lists, tuples, NumPy 1-D arrays).  Do **not** use the `pandas` library \u2013 rely only on the Python standard library and **NumPy**.\n\nReturn a single integer equal to the number of missing elements.  If the input sequence is empty, return `0`.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a plain built-in `int`.\n"}
{"task_id": 205, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Extract Unique Environment IDs\n# Description:\nIn many reinforcement-learning libraries (e.g., OpenAI Gym) every environment description contains an **id** that uniquely identifies it.   \nWrite a Python function that takes a *registry* \u2013 represented as a list whose items may or may not be dictionaries \u2013 and returns a list with every distinct value associated with the key **\"id\"**.\n\nRules\n1. Only consider those items that are dictionaries and contain the key **\"id\"**.\n2. If an **id** value appears more than once, keep only its first occurrence (i.e. preserve the original appearance order).\n3. The function must return the resulting ids as a plain Python list.  \n4. If the *registry* does not contain any valid ids, return an empty list.\n# Your code should start with:\n```python\ndef get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list that preserves the left-to-right order of the first appearance of every distinct id.\n"}
{"task_id": 206, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Absolute Error (MAE) Calculator\n# Description:\nImplement a function that calculates the Mean Absolute Error (MAE) between two sequences of numbers. The MAE is defined as the average of the absolute differences between corresponding elements of the actual and predicted sequences. Your function must:\n\n1. Accept either Python lists/tuples or NumPy arrays containing numerical values (int or float).\n2. Validate that both inputs are one-dimensional and of equal length. If the validation fails, return **-1**.\n3. Compute the absolute difference for each element pair, average these differences, and round the result to the 4th decimal place.\n\nThe function should be efficient, making use of NumPy operations whenever possible.\n# Your code should start with:\n```python\nimport numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place. If inputs are invalid (different lengths or not one-dimensional), return -1.\n"}
{"task_id": 207, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Convolution Output Size\n# Description:\nIn convolutional neural networks (CNNs) the spatial size of the feature-map produced by a 2-D convolution layer is fully determined by five hyper-parameters:\n\u2022 input image height (H) and width (W)\n\u2022 kernel / filter height (KH) and width (KW)\n\u2022 stride along the height (SH) and width (SW)\n\u2022 zero-padding applied to the height (PH) and width (PW)\n\nFor a **valid** configuration the output height (OH) and width (OW) are given by\n\n    OH = (H + 2\u00b7PH \u2013 KH)/SH + 1\n    OW = (W + 2\u00b7PW \u2013 KW)/SW + 1\n\nBoth OH and OW must be positive integers; otherwise the convolution setting is impossible.\n\nWrite a function that:\n1. receives the five parameters, grouped as follows\n   \u2022 `img_height`, `img_width`                          (int)\n   \u2022 `filter_shape`  (tuple[int, int]) \u2192 `(KH, KW)`\n   \u2022 `stride`        (tuple[int, int]) \u2192 `(SH, SW)`\n   \u2022 `padding`       (tuple[int, int]) \u2192 `(PH, PW)`\n2. computes OH and OW using the above formula,\n3. returns a 2-tuple `(OH, OW)` when both dimensions are positive integers,\n4. returns **-1** when the configuration is invalid (non-integer or non-positive output size, non-positive stride, etc.).\n# Your code should start with:\n```python\ndef convolution_shape(img_height: int,\n                      img_width: int,\n                      filter_shape: tuple[int, int],\n                      stride: tuple[int, int],\n                      padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    # TODO: implement the function following the instructions in the task\n    pass\n```\n# Output Constraints:\nReturn a 2-tuple of positive integers (OH, OW).\nReturn -1 if the configuration is invalid.\n"}
{"task_id": 208, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding of Categorical Labels\n# Description:\nIn many machine\u2013learning workflows all symbolic / categorical features must be converted into a numeric representation before they can be used by algorithms. A very common strategy is one-hot (or 1-of-K) encoding.\n\nWrite a function that converts a list of categorical labels into their one-hot encoded representation.\n\nFunction requirements\n1. If the optional argument `categories` is supplied, it defines the complete set and the order of possible categories.\n2. If `categories` is **not** supplied, the function must deduce it from the data **preserving the order of first appearance** of every distinct label.\n3. If any label in `labels` is **not** present in the provided `categories`, the function must return **-1**.\n4. The function must return the encoding as a Python `list` of `list`s obtained from a NumPy array (i.e. use `array.tolist()`).\n\nThe shape of the returned matrix is `(N, C)` where `N = len(labels)` and `C = len(categories)`.\n\nExample\nlabels = ['red', 'green', 'blue', 'green']\ncategories = ['red', 'green', 'blue']\n\nthe function returns\n[[1, 0, 0],\n [0, 1, 0],\n [0, 0, 1],\n [0, 1, 0]]\n# Your code should start with:\n```python\nimport numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists with integer values (0 or 1).\n"}
{"task_id": 209, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Expected Value Analysis of a Multi-Armed Bandit\n# Description:\nYou are given the payoff table of a stochastic multi-armed bandit.  The bandit has $K$ arms, and arm $k\\,(0\\le k<K)$ can return one of several discrete payoff values.  Each payoff value has an associated probability.  Your task is to write a function that  \n1. validates the supplied probability distributions,  \n2. computes the expected payoff (mean reward) of every arm,  \n3. finds the arm with the highest expected payoff, and  \n4. returns the results.\n\nValidation rules  \n\u2022 **Probability length match** \u2013 the list of payoff values and the list of probabilities for the same arm must be of equal length.  \n\u2022 **Probability sum** \u2013 the probabilities of every arm must sum to 1 (tolerance $10^{-8}$).  \nIf any rule is violated the function must immediately return **-1**.\n\nReturn value  \nOn success the function must return a 3-tuple  \n```\n(expected_values, best_arm, best_ev)\n```\nwhere  \n\u2022 `expected_values` is a list of the arms\u2019 expected payoffs rounded to 4 decimals,  \n\u2022 `best_arm`        is the index (0-based) of the arm with the largest expected payoff,  \n\u2022 `best_ev`         is the corresponding expected payoff rounded to 4 decimals.\n\nIf several arms share the same (rounded) maximum expected payoff, return the **smallest** index among them.\n# Your code should start with:\n```python\nimport numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll returned floating-point numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 210, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decorator Decorator: doublewrap\n# Description:\nIn Python a decorator is itself just a callable that receives another callable and returns a (usually) wrapped version of it.  \n\nUnfortunately a regular decorator can only be used _without_ extra parameters:\n\n```\n@decorator            # \u2714 works\n@decorator()          # \u2718 TypeError\n@decorator(x=1)       # \u2718 TypeError\n```\n\nTo have a decorator that also accepts its own optional parameters you are forced to write an additional layer of nesting which makes the code clumsy to read and write.  \n\nThe utility **doublewrap** solves this inconvenience.  When applied to a decorator factory it allows the resulting decorator to be used **both** with and without parentheses while all its parameters stay optional.\n\nTask\n-----\nWrite a function `doublewrap` that takes a _decorator function_ (`decorator_func`) and returns a new decorator with the following behaviour:\n1. If the returned decorator is used _without_ parentheses (e.g. `@my_deco`) it must work as a normal decorator and directly wrap the function below it.\n2. If the returned decorator is called _with_ its own optional arguments (e.g. `@my_deco(a=10)` or `@my_deco(3, 4)`) it must return the proper decorator that will later receive and wrap the target function.\n3. The metadata of the original decorator (its `__name__`, `__doc__`, \u2026) must be preserved \u2013 use `functools.wraps` for that.\n\nExample\n-------\n```python\n@doublewrap\ndef repeat(func, times: int = 2):\n    \"\"\"Repeat the return value *times* times.\"\"\"\n    def inner(*args, **kwargs):\n        return func(*args, **kwargs) * times\n    return inner\n\n@repeat                   # used without arguments, default times = 2\ndef greet():\n    return \"Hi\"\n\n@repeat(times=3)          # used with keyword argument\ndef excited():\n    return \"Wow\"\n\nprint(greet())   # \u279e \"HiHi\"\nprint(excited()) # \u279e \"WowWowWow\"\n```\n\nInput\n-----\nA regular callable `decorator_func` that expects **the function to wrap as its first positional argument**, followed by *only optional* positional/keyword parameters.\n\nOutput\n------\nA new decorator that enables dual usage of `decorator_func`.\n\nReasoning (Example Above)\n-------------------------\n`@repeat` without arguments calls the wrapper returned by `doublewrap` with `greet` as its single positional argument \u2013 the utility recognises this pattern and immediately invokes `repeat(greet)` producing the wrapped version.\n\n`@repeat(times=3)` calls the wrapper with no positional argument that is a callable, so `doublewrap` instead returns a `real_decorator` waiting for the function; once `excited` appears that decorator is executed as `repeat(excited, times=3)`.\n\nimport_code\n-----------\nimport functools\n\noutput_constrains\n-----------------\nThe returned decorator must:\n\u2022 Correctly wrap functions in both usage styles.\n\u2022 Preserve the original decorator\u2019s metadata (verified via `__name__`).\n\nentry_point\n-----------\ndoublewrap\n\nstarter_code\n------------\n```python\nimport functools\nfrom typing import Callable, Any\n\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    # WRITE YOUR CODE HERE\n```\n# Your code should start with:\n```python\nimport functools\nimport functools\nfrom typing import Callable, Any\n\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    # WRITE YOUR CODE HERE\n```\n# Output Constraints:\nThe returned decorator must behave identically in both usage styles and preserve the metadata of the original decorator.\n"}
{"task_id": 211, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Classification Accuracy\n# Description:\nIn supervised classification problems it is common to evaluate a model by **accuracy**, i.e. the proportion of correctly predicted labels.  Accuracy is closely related to **classification error**, which is the proportion of misclassified samples (error = 1 \u2212 accuracy).\n\nWrite a function that receives two equally-long sequences \u2013 `actual` labels and `predicted` labels \u2013 and returns the classification **accuracy** rounded to four decimal places.\n\nRules\n1. If the two input sequences have different lengths **or** are empty, the function must return **-1**.\n2. Otherwise first compute the classification error\n   `classification_error = (# of mismatches) / total_samples`\n   and then return `1 \u2212 classification_error`, rounded to the 4-th decimal.\n\nYou are provided the skeleton of the required function:\n```\n# Name\naccuracy\n\ndef accuracy(actual, predicted):\n    return 1.0 - classification_error(actual, predicted)\n```\nYour task is to complete the implementation by writing an internal helper function `classification_error` (or any other logic you prefer) so that `accuracy` fulfils the specification above.\n# Your code should start with:\n```python\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.  If the inputs are invalid return -1.\n"}
{"task_id": 212, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Extracting the Realtime Sub-Model\n# Description:\nIn many neural-network libraries a *model* can be viewed as a directed acyclic graph (DAG) whose vertices are layers and whose edges describe the flow of tensors.  \nFor the purpose of unit-testing, we will represent such a model only by its adjacency list: a Python dict that maps each layer\u2019s **name** to a list with the names of every layer that immediately receives this layer\u2019s output.  \n\nWrite a function `extract_realtime_model` that, given such an adjacency list, extracts the **minimal sub-graph that starts at layer `\"input\"` and ends at layer `\"output_realtime\"`.**  \nThe function must return a *list* with the names of the layers that lie on **one** shortest path from `\"input\"` to `\"output_realtime\"`, ordered from the first layer to the last layer.  \n\n\u2022  If several shortest paths exist, return the one that is lexicographically smallest (compare the complete lists).  \n\u2022  If `\"output_realtime\"` is not reachable from `\"input\"`, return an empty list.  \n\nThe input graph is guaranteed to have no self-loops, but it can contain cycles or multiple outgoing branches; therefore your algorithm must avoid infinite loops.\n# Your code should start with:\n```python\nfrom collections import deque\nfrom collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a **list of layer names** in the exact visiting order.\nReturn an empty list when no path exists.\n"}
{"task_id": 213, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: He Normal Weight Initialiser\n# Description:\nIn modern deep\u2013learning frameworks different **weight initialisation** strategies are used to speed\u2013up the training process. One of the most popular ones is *He Normal* (also called *Kaiming Normal*).\n\nFor a weight tensor **W** with an arbitrary shape the He Normal initialiser draws each entry from a normal distribution with\n\n\u2003\u2003mean = 0,\n\u2003\u2003standard deviation = \u221a(2 \u2044 fan_in),\n\nwhere  `fan_in` denotes the number of incoming connections to the neurons the weights belong to.\n\n`fan_in` (and its companion `fan_out`) are computed from the tensor\u2019s shape in the following way (this is the convention used by most libraries such as PyTorch & TensorFlow):\n\u2022 len(shape) == 1\u2003\u2192\u2003`fan_in` = `fan_out` = shape[0]\n\u2022 len(shape) == 2\u2003\u2192\u2003`fan_in` = shape[0] (input units),   `fan_out` = shape[1] (output units)\n\u2022 len(shape) \u2265 3\u2003\u2192\u2003the first two dimensions correspond to **out_channels** and **in_channels**, all remaining dimensions form the *receptive field* (kernel height, width, \u2026)\n\u2003\u2003receptive_field_size = product(shape[2:])\n\u2003\u2003`fan_in`  = in_channels \u00d7 receptive_field_size\n\u2003\u2003`fan_out` = out_channels \u00d7 receptive_field_size\n\nYour task is to implement the weight\u2013initialisation routine `he_normal`.  The function must:\n1. take a tensor shape (tuple of positive integers) as input,\n2. compute `fan_in` and `fan_out` following the rules above,\n3. draw the weights from *\ud835\udca9(0, \u221a(2 \u2044 fan_in))* **using NumPy\u2019s random generator with a fixed seed of 42** so the result is reproducible,\n4. return the initialised weights as a Python (nested) list by calling `tolist()` on the generated NumPy array.\n\nIf `fan_in` turns out to be 0 (which would only happen for an empty shape containing a zero) the function should return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nResults must be returned as a Python list by calling `.tolist()` on the NumPy array.  The function must be deterministic (seed = 42).\n"}
{"task_id": 214, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Squared Error (MSE) Calculator\n# Description:\nImplement a function that computes the **Mean Squared Error (MSE)** between two equally-sized numerical sequences.  \nGiven two sequences `actual` (ground-truth values) and `predicted` (model outputs), the MSE is defined as  \n$$\\text{MSE}=\\frac1n\\sum_{i=1}^{n}(a_i-p_i)^2$$  \nwhere $n$ is the number of elements, $a_i$ is the *i-th* actual value and $p_i$ is the corresponding predicted value.\n\nRequirements\n1. If the two sequences do **not** have the same shape/length the function must return **-1**.\n2. The result has to be **rounded to 4 decimal places** using `numpy.round`.\n3. The function must work with Python lists as well as NumPy arrays.\n# Your code should start with:\n```python\nimport numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\nReturn -1 when the input sequences have different lengths.\n"}
{"task_id": 216, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Elastic Net Regression from Scratch\n# Description:\nImplement Elastic Net linear regression from scratch using batch gradient descent. The model must be able to 1) generate optional polynomial features of the given degree, 2) standard-score (zero-mean / unit-variance) every non-bias feature, 3) learn the weight vector by minimising the mean\u2013squared error augmented with an Elastic-Net penalty (combined L1 and L2 regularisation) and 4) return predictions for an unseen set of samples.  \n\nWrite a single function `elastic_net_regression` that receives a training design matrix `x_train`, its corresponding target vector `y_train`, and a matrix `x_test` whose targets are to be predicted.  Hyper-parameters controlling the regression are passed with the same names that appear in the signature.  The function must \n\u2022 build the feature matrix (bias term included), \n\u2022 train the model for exactly `n_iterations` passes of batch gradient descent,\n\u2022 regularise every weight except the bias term, and\n\u2022 return the predictions for `x_test`, rounded to four decimals.  \n\nFor the L1 part use the sub-gradient `sign(w_j)` (with `sign(0)=0`).\n\nIf the shapes of `x_train` and `x_test` are incompatible, or if `n_iterations` is smaller than 1, return `-1`.\n# Your code should start with:\n```python\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a python list rounded to 4 decimal places (use numpy.round(arr,4).tolist()).\n"}
{"task_id": 217, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Logistic Loss \u2013 Gradient, Hessian & Sigmoid\n# Description:\nImplement three core components of the logistic (sigmoid) loss that are widely used in binary-classification algorithms such as Gradient Boosting and Newton based optimisation.\n\nWrite a Python function that receives two equally-sized one-dimensional containers \u2013 ``actual`` and ``predicted`` \u2013 and returns a tuple containing three lists:\n1. the first list is the gradient of the logistic loss for every observation,\n2. the second list is the Hessian (second derivative) of the logistic loss for every observation,\n3. the third list is the probability obtained by applying the logistic (sigmoid) transformation to every element of ``predicted``.\n\nDefinitions (for every observation *i*):\n    sigmoid(z) = 1 / (1 + e^(\u2212z))\n    grad_i      = actual_i * sigmoid( \u2212 actual_i * predicted_i )\n    hess_i      = sigmoid(predicted_i) * ( 1 \u2212 sigmoid(predicted_i) )\n    prob_i      = sigmoid(predicted_i)\n\nThe labels in ``actual`` are expected to be either +1 or \u22121 (standard representation for logistic loss). The function must:\n\u2022 work with Python lists, tuples, *or* NumPy arrays;\n\u2022 convert the inputs to ``numpy.ndarray`` for vectorised computation;\n\u2022 round every return value to **six (6) decimal places**; and\n\u2022 finally convert the NumPy results back to plain Python lists before returning.\n# Your code should start with:\n```python\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to exactly 6 decimal places.\n"}
{"task_id": 218, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Blackjack Hand Outcome Evaluation\n# Description:\nIn the casino game *Blackjack* the pay-off for a finished round is determined by very simple rules.  \nYou will write a function `blackjack_outcome` that receives the **final** hands of the player and the dealer and has to return the reward for the player according to the rules below.\n\nCard encoding  \n\u2022 All cards are encoded by an integer in the closed range **1 \u2026 10**.  \n\u2003\u2013 1 represents an **Ace**.  \n\u2003\u2013 2 \u2026 9 keep their numeric value.  \n\u2003\u2013 10 represents the card \u201c10\u201d and all face cards (Jack, Queen, King).  \n\u2022 A hand is a Python `list[int]` of such integers.\n\nHand value  \n\u2022 The value of a hand is the sum of its cards.  \n\u2022 If the hand contains at least one Ace and the sum +10 is **\u2264 21**, exactly one Ace can be counted as 11 instead of 1 (this is called **usable ace**).  \n\u2022 The highest legal value not larger than 21 is the hand\u2019s score.\n\nSpecial terms  \n\u2022 **Bust** \u2013 a hand whose score is larger than 21.  \n\u2022 **Natural blackjack** \u2013 a two-card hand that consists of one Ace (1) and one 10-value card (10).  \n\nReward rules  \n1. If the player busts the reward is **-1** (player loses immediately).\n2. If the dealer busts (and the player did not) the reward is **+1** (player wins).\n3. Otherwise compare both scores:  \n\u2003\u2022 higher score wins (**+1** for player, **-1** for dealer)  \n\u2003\u2022 equal scores lead to a draw (**0**)\n4. A player who wins with a *natural blackjack* is paid **+1.5** instead of +1.  \n   (No extra bonus is given for a drawn natural blackjack.)\n\nYou may assume the lists always contain at least two cards and only valid integers.\n# Your code should start with:\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    # TODO: Implement your solution here\n    pass\n```\n# Output Constraints:\nReturn a Python `float`. Use the exact values -1, 0, 1 or 1.5.\n"}
{"task_id": 220, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Estimate LDA Distributions with Dirichlet Smoothing\n# Description:\nIn Latent Dirichlet Allocation (LDA) two probability distributions are of central interest:\n\n\u2022 \u03d5 (phi) \u2013 the word-topic distribution. \u03d5[v,t] is the probability of word v being generated from topic t.\n\u2022 \u03b8 (theta) \u2013 the document-topic distribution. \u03b8[d,t] is the probability of topic t appearing in document d.\n\nAfter running a collapsed Gibbs sampler we only have **count matrices**\nC_wt (word\u2013topic counts) and C_dt (document\u2013topic counts). \u03d5 and \u03b8 are obtained from these counts using Dirichlet smoothing:\n    \u03d5[v,t]  = (C_wt[v,t] + \u03b2) /( \u03a3_v C_wt[v,t] + V\u00b7\u03b2 )\n    \u03b8[d,t]  = (C_dt[d,t] + \u03b1) /( \u03a3_t C_dt[d,t] + T\u00b7\u03b1 )\nwhere\n    \u2022 V \u2013 vocabulary size (number of rows of C_wt)\n    \u2022 T \u2013 number of topics (number of columns of C_wt / C_dt)\n    \u2022 \u03b1 \u2013 symmetric Dirichlet prior on \u03b8\n    \u2022 \u03b2 \u2013 symmetric Dirichlet prior on \u03d5\n\nWrite a function that receives the two count matrices together with scalar hyper-parameters \u03b1 and \u03b2 and returns the smoothed estimates of \u03d5 and \u03b8.  The result has to be rounded to four decimal places and returned as (phi, theta) \u2013 two (nested-list) matrices.\n\nIf either of the count matrices is empty return an empty list for the corresponding distribution.\n# Your code should start with:\n```python\nimport numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery entry in \u03d5 and \u03b8 must be rounded to 4 decimal places.\nReturn two matrices as Python nested-lists in the order (phi, theta).\n"}
{"task_id": 221, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Squared Logarithmic Error (MSLE) Implementation\n# Description:\nIn supervised learning projects it is common to evaluate a regression model with the **Mean Squared Logarithmic Error (MSLE)**.  Given two equal-length sequences (lists, tuples or NumPy arrays) \u2013 the *actual* target values and the *predicted* values produced by a model \u2013 the MSLE is defined as  \n\nMSLE = mean\\_i \\[ log(1 + actual\\_i) \u2212 log(1 + predicted\\_i) \\]^2.  \n\nYour task is to implement this metric.\n\nRequirements\n1. Implement a helper function `squared_log_error(actual, predicted)` that returns a NumPy array containing the element-wise squared logarithmic errors.  \n2. Implement the main function `mean_squared_log_error(actual, predicted)` that calls the helper and returns the average of those squared errors, **rounded to 4 decimal places** (as a regular Python `float`).  \n3. Input validation:  \n   \u2022 The two inputs must have the same shape/length.  \n   \u2022 All values must be non-negative (MSLE is undefined for negatives).  \n   If any check fails, the function must return **-1**.\n\nExample\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    pass\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place.  Return -1 when the input validation fails.\n"}
{"task_id": 222, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sigmoid Activation Function\n# Description:\nImplement the **sigmoid (logistic)** activation function.  The function must accept either a single numeric value (int or float), a Python list of numbers, or a NumPy array of numbers and return the value(s) after applying the sigmoid transformation\n\n                         1\n  sigmoid(z) = ------------------------\n                 1 + exp(-z)\n\nYour implementation has two additional requirements:\n1. It **must work element-wise** for any 1-D or 2-D array-like input (vectorised implementation).\n2. It **must remain numerically stable** for very large positive or negative numbers (e.g. \u00b11000).  A common trick is to compute the expression differently for `z \u2265 0` and `z < 0`.\n\nReturn type rules\n\u2022 If the input is a single scalar, return a single `float` rounded to 4 decimal places.\n\u2022 If the input is a list/NumPy array, return a **Python list** with the same nested structure, every element rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nRound every value to the nearest 4th decimal place.  For lists/arrays convert the final NumPy array back to a Python list via `.tolist()`.\n"}
{"task_id": 224, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Leaky ReLU Activation Function\n# Description:\nIn neural networks the Leaky ReLU activation is often preferred to the ordinary ReLU because it avoids \"dying\" neurons by allowing a small, non-zero gradient when the unit is not active.  \n\nWrite a Python function that applies the Leaky ReLU activation to every element of an input tensor.  \n\nDefinition  \nFor a slope parameter \\(a\\;\\in\\;[0,1)\\) the activation is defined element-wise as\n\n\\[\\operatorname{LeakyReLU}(x)=\\begin{cases}x,&x\\ge 0\\\\a\\,x,&x<0\\end{cases}\\]\n\nThe function must\n1. accept the input `z` as either a Python scalar, a (nested) list, or a `numpy.ndarray` of arbitrary dimension,\n2. accept an optional positive float `a` (default **0.01**),\n3. return the activated values **with the same shape** as `z`, converted to a plain Python list with `numpy.ndarray.tolist()` when necessary.\n\nNo other behaviour is required.\n# Your code should start with:\n```python\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list containing the activated values.  The returned list must have the same nested structure as the input.\n"}
{"task_id": 225, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Frequency to Mel Scale Conversion\n# Description:\nIn speech and audio processing it is common to express frequency in the perceptually-motivated *mel* scale instead of the linear Hertz (Hz) scale.  Two different but widely used conversion formulas coexist:\n\n1. **HTK formula**  (Hidden-Markov-Toolkit, O\u2019Shaughnessy 1987)\n   mel = 2595 * log10(1 + hz / 700)\n2. **Slaney formula**  (Auditory Toolbox, Slaney 1998)\n   mel = 1127 * ln(1 + hz / 700)\n\nWrite a function that converts an arbitrary shaped array or Python list of frequencies from Hz to the mel scale using one of the two formulas.  The function must\n\u2022 accept a one- or multi-dimensional *array-like* `hz`\n\u2022 accept the keyword `formula` (\"htk\" or \"slaney\", default \"htk\")\n\u2022 return the converted mel values **rounded to 4 decimal places** and **converted to a Python list** that keeps the original shape\n\u2022 raise an `AssertionError` if `formula` is not one of the two supported strings\n\nExample\n-------\nInput :  hz = np.array([0, 6300]), formula = \"htk\"\nOutput:  [0.0, 2595.0]\n\nReasoning\n---------\nFor 6300 Hz the HTK formula gives\n2595\u00b7log10(1 + 6300/700) = 2595\u00b7log10(10) = 2595 \u2192 rounded to 4 decimals: 2595.0\n# Your code should start with:\n```python\nimport numpy as np\ndef hz2mel(hz, formula: str = \"htk\") -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nResults must be rounded to the nearest 4th decimal and returned as a (possibly nested) Python list, obtained via NumPy\u2019s `tolist()` method.\n"}
{"task_id": 226, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost with Decision Stumps\n# Description:\nImplement the AdaBoost ensemble algorithm from scratch using decision stumps (one\u2013level decision trees) as weak learners.\\n\\nThe function must\\n1. Train *n_clf* decision stumps on a binary labelled training set *(X_train, y_train)* where the labels are **-1** and **1**.\\n2. Use the trained ensemble to predict the labels of an unseen data matrix *X_test*.\\n\\nFor every boosting round you have to:\\n\u2022 choose the stump that minimises the weighted classification error; the stump is described by a tuple *(feature_index, threshold, polarity)* where\\n    \u2013 *feature_index* is the column in **X_train** that is inspected,\\n    \u2013 *threshold* is the value that splits the data,\\n    \u2013 *polarity* \\(either 1 or \u22121\\) tells whether values lower than the threshold are classified as **-1** (*polarity*\u2006=\u20061) or **1** (*polarity*\u2006=\u2006\u22121).\\n\u2022 compute the learner weight (``alpha``)\\n    alpha = 0.5 * ln((1 \u2212 error) / (error + 1e-10))\\n\u2022 update the sample weights so that misclassified samples receive higher weights.\\n\\nAt prediction time your ensemble must output the sign of the weighted sum of stump decisions. The returned predictions have to be a **list** of integers each being either **-1** or **1**.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python **list** of ints consisting solely of -1 and 1.\n"}
{"task_id": 227, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Two-Hidden-Layer Value Network Forward Pass\n# Description:\nImplement a **two\u2013hidden-layer value network forward pass** completely in NumPy.  The network architecture is identical to the one sketched in the given code snippet but expressed functionally (no classes, no third-party deep-learning libraries):\n\n    state  \u2192  H\u2081 (tanh)  \u2192  H\u2082 (tanh)  \u2192  value (linear)\n\nwhere\n\u2022 state is a 1-D vector \ud835\udc60\u2208\u211d\u1d3a  \n\u2022 W\u2081\u2208\u211d\u1d3a\u00d7H1 , W\u2082\u2208\u211d\u1d34\u00b9\u00d7H2 and W\u2083\u2208\u211d\u1d34\u00b2\u00d71 are weight matrices supplied by the user  \n\u2022 \u2018tanh\u2019 is the hyper-bolic tangent applied element-wise.\n\nWrite a function that\n1. Validates the matrix dimensions (see below).  \n2. Performs the forward pass\n      h\u2081 = tanh( s \u00b7 W\u2081 )  \n      h\u2082 = tanh( h\u2081 \u00b7 W\u2082 )  \n      v  = h\u2082 \u00b7 W\u2083         \n3. Rounds the scalar value *v* to 4 decimal places and returns it as a Python ``float``.\n4. If *any* dimension check fails, returns **\u22121**.\n\nDimension rules\n\u2022 ``len(state)   = N``            \n\u2022 ``W1`` shape   : ``(N,  H1)``   \n\u2022 ``W2`` shape   : ``(H1, H2)``   \n\u2022 ``W3`` shape   : ``(H2, 1)`` **or** ``(H2,)``\n# Your code should start with:\n```python\nimport numpy as np\ndef value_network_forward(state: list[float],\n                          W1: list[list[float]],\n                          W2: list[list[float]],\n                          W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single ``float`` rounded to 4 decimal places.\nReturn **\u22121** if any of the supplied matrices have incompatible shapes.\n"}
{"task_id": 228, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Pairwise Euclidean Distance Matrix\n# Description:\nGiven two sets of vectors, write a function that returns the matrix of pairwise Euclidean (L2) distances between every row-vector in the first set and every row-vector in the second set.\n\nFormally, let \ud835\udc4b\u2208\u211d\u1d3a\u02e3\u1d9c (N rows, C columns) and \ud835\udc4c\u2208\u211d\u1d39\u02e3\u1d9c (M rows, C columns).  The (i,j)-th entry of the distance matrix \ud835\udc37 must be\n\n\ud835\udc37[i,j] = \u221a\u2211\u2096 (X[i,k] \u2212 Y[j,k])\u00b2.\n\nIf **Y is omitted or equals None**, compute the pairwise distances inside **X** itself (i.e. set Y = X).  The result has to be rounded to **4 decimal places** and returned as a Python list of lists.\n\nYou are encouraged to implement the formula in a fully vectorised fashion (no Python \"for\" loops) using the identity\n\n\u2016x \u2212 y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2\u00b7x\u1d40y,\n\nbut any correct implementation will be accepted.\n# Your code should start with:\n```python\nimport numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll distances must be rounded to 4 decimal places and returned as a nested Python list (not a NumPy array).\n"}
{"task_id": 230, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Naive Bayes from Scratch (Binary)\n# Description:\nImplement the Gaussian Naive Bayes algorithm **from scratch** for a binary-classification problem (labels 0 and 1).\n\nYour function must:\n1. Receive three NumPy arrays:\n   \u2022 `X_train` \u2013 shape `(n_samples, n_features)`\n   \u2022 `y_train` \u2013 shape `(n_samples,)`, each element is 0 or 1\n   \u2022 `X_test`  \u2013 shape `(m_samples, n_features)`\n2. Estimate for every class c \u2208 {0,1} and every feature j:\n   \u2022 the mean \u03bc\u208dc,j\u208e of that feature over the training samples belonging to class *c*;\n   \u2022 the (population) variance \u03c3\u00b2\u208dc,j\u208e.\n3. Estimate the class priors  P(c)  as the relative class frequencies in the training set.\n4. For every test sample **x** compute the (log) posterior probability\n        log P(c) + \u03a3\u2c7c log \ud835\udca9(x\u2c7c; \u03bc\u208dc,j\u208e, \u03c3\u00b2\u208dc,j\u208e)\n   where \ud835\udca9(\u00b7) is the univariate Gaussian pdf. Assign the label with the larger posterior.\n   \u2022 To avoid division-by-zero when a variance is 0, add a small constant \u03b5 = 1e-9 to every variance.\n5. Return the predicted labels for **all** test samples as a Python list of integers.\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"Write your code here.\"\"\"\n```\n# Output Constraints:\nReturn a **Python list** of integers; each element must be either 0 or 1.\n"}
{"task_id": 231, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Detecting a Natural Blackjack\n# Description:\nIn the game of Blackjack a *natural* (or *blackjack*) is a two-card hand that consists of an Ace and any ten-valued card (10, Jack, Queen or King \u2013 each counted as 10 points).\n\nWrite a function `is_natural` that receives a list of integers `hand` representing the ranks of the cards (Ace is encoded as **1**; every ten-valued card is encoded as **10**).  \nThe function must return **True** if and only if the hand contains **exactly two cards** and those two cards are an Ace (1) and a ten-valued card (10) \u2013 order does not matter.  \nFor every other situation the function must return **False**.\n# Your code should start with:\n```python\ndef is_natural(hand: list[int]) -> bool:\n    \"\"\"Your docstring here.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn the boolean literal True or False.\n"}
{"task_id": 232, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Matrix Validator\n# Description:\nOne-hot encoding is a widely used technique for representing categorical variables. A **valid one-hot matrix** must satisfy three simple rules:\n1. It must be two-dimensional.\n2. Every element must be either `0` or `1` (binary).\n3. Each row must contain *exactly one* `1`.\n\nWrite a Python function that checks whether a given NumPy array is a valid one-hot matrix.\n\nIf all three rules are satisfied the function must return `True`; otherwise it must return `False`. Do **not** raise any exceptions.\n\nExample:\n    >>> x = np.array([[0, 1, 0],\n    ...               [1, 0, 0],\n    ...               [0, 0, 1]])\n    >>> is_one_hot(x)\n    True\n# Your code should start with:\n```python\nimport numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn exactly the Python boolean value True or False.\n"}
{"task_id": 234, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Task\n# Description:\nImplement single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\nYou are given two equally-long lists, `successes` and `failures`, where the *i-th* element of each list contains, respectively, the number of successes and failures that have been observed so far from arm *i* of a K-armed bandit.\n\nAssume a Beta prior with parameters `(prior_alpha, prior_beta)` is placed **independently** on every arm\u2019s success-probability \u03b8\u1d62.  After observing data the posterior of arm *i* is\n\n    \u03b8\u1d62 | data  ~  Beta(prior_alpha + successes[i],\n                        prior_beta  + failures[i])\n\nA single round of Thompson sampling draws one sample \u03b8\u0302\u1d62 from every posterior distribution and returns the index of the arm that obtained the highest sample value.  If several arms tie, choose the arm with the **smallest** index (the behaviour of `numpy.argmax`).\n\nThe function must also take an optional integer argument `seed`.  If `seed` is not `None`, set the NumPy random seed inside the function so that the sampling becomes deterministic and therefore reproducible.\n\nIf the input lists are empty, or their lengths differ, the function must return `-1`.\n# Your code should start with:\n```python\nimport numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures: list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta:  float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn an `int` \u2013 the index of the selected arm, or `-1` for invalid input.\n"}
{"task_id": 235, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding of Class Labels\n# Description:\nImplement a function that converts a 1-dimensional NumPy array of integer class labels into a one-hot encoded 2-D NumPy array.\n\nGiven a label vector of length N, the function must create an N\u00d7C matrix where C is the number of classes.  Each row contains all zeros except a single 1 placed at the column index corresponding to the label value.\n\n\u2022 If n_classes is **None**, set C to `max(labels)+1` so that every class present in the data obtains a dedicated column.\n\u2022 If n_classes is provided, use it as C.  In this case `n_classes` must be **at least** `max(labels)+1`; otherwise raise `ValueError`.\n\u2022 The input array must be 1-D.  Any array with `ndim!=1` should raise `ValueError`.\n\nThe returned array must have dtype *float* (so the 1s are 1.0) and preserve the original sample order.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    # TODO: Implement the function\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray (tests convert it to list for comparison).\n"}
{"task_id": 236, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mini-batch Index Generator\n# Description:\nImplement a utility function that splits a data set into mini-batch indices.  \nGiven a NumPy array `X` whose first axis corresponds to the number of samples *(N)*, the function must build a generator that yields the indices belonging to each mini-batch.  \nThe user can decide the batch size and whether the samples should be shuffled before the split.  \nThe function must also return the total number of mini-batches `n_batches = ceil(N / batchsize)`.\n\nBehaviour details\n1. If `shuffle` is `True`, first randomly permute the indices `0 \u2026 N-1` **in-place** using `numpy.random.shuffle`.\n2. Consecutive slices of length `batchsize` are yielded by the inner generator. The last slice may contain fewer than `batchsize` elements when `N` is not an exact multiple of the batch size.\n3. The returned generator must be **single\u2013pass** (after it is exhausted it should raise `StopIteration`).\n# Your code should start with:\n```python\nimport numpy as np\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nThe function must return a 2-tuple: (generator, int).  The generator yields NumPy arrays of type int64 containing the indices of each mini-batch, in the order they must be processed.\n"}
{"task_id": 237, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Blackjack Hand Scoring\n# Description:\nImplement the Blackjack hand evaluator.  A Blackjack hand is a collection of playing cards where each card has the following nominal value:\n\n\u2022 Numeric cards \u20182\u2019\u2013\u201810\u2019 are worth their face value.\n\u2022 The face cards \u2018J\u2019, \u2018Q\u2019, and \u2018K\u2019 are worth 10 points each.\n\u2022 The Ace \u2018A\u2019 is special \u2013 it can be worth either 11 or 1.  When more than one Ace appears their values are chosen so that the hand\u2019s total score is as large as possible without exceeding 21.\n\nThe task is to write a function `score` that receives a hand (a list of card labels as strings) and returns the total Blackjack score of the hand.  If the best possible total exceeds 21 the hand is **bust** and the function must return 0.\n\nYou may assume every element in the input list is one of the strings: `'2'\u2013'10'`, `'J'`, `'Q'`, `'K'`, `'A'`.\n# Your code should start with:\n```python\nfrom typing import List\n\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single integer in the range 0\u201321 (inclusive).  Return 0 if the hand is bust.\n"}
{"task_id": 239, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Padding for \"same\" and \"valid\" 2-D Convolutions\n# Description:\nIn many convolutional-neural-network (CNN) frameworks you can choose whether a 2-D convolution should keep the spatial resolution of the input (\"same\" convolution) or should be performed without any zero-padding at all (\"valid\" convolution).  \n\nWrite a function `determine_padding` that, given the filter size and the requested output shape, returns how many zeros have to be added to every border of the input image.\n\n\u2022 For `output_shape == \"valid\"` no padding is required \u2013 return `((0, 0), (0, 0))`.  \n\u2022 For `output_shape == \"same\"` compute the padding needed **for a stride of one** so that the output height and width equal the input height and width.  \n  If the required amount of padding is odd, put the smaller part at the \"top/left\" side and the larger part at the \"bottom/right\" side, **i.e.** use `\u230a(f-1)/2\u230b` zeros on the top/left and `\u2308(f-1)/2\u2309` zeros on the bottom/right where *f* is the filter size in the corresponding dimension.\n\nReturn the result as a tuple of tuples:\n\n```\n((pad_top, pad_bottom), (pad_left, pad_right))\n```\n\nThe function does **not** have to handle strides other than one or any output_shape value different from \"same\" or \"valid\".\n# Your code should start with:\n```python\nimport math\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str = \"same\") -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n```\n# Output Constraints:\nReturn a tuple in the form ((pad_top, pad_bottom), (pad_left, pad_right)) containing only integers.\n"}
{"task_id": 240, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Build Symbol\u2013Number Encoding Dictionaries\n# Description:\nIn many reinforcement-learning libraries each unique observation or action has to be mapped to a single integer so that tables, tensors or neural-network outputs can be indexed efficiently.  \n\nWrite a function `create_encoding_dicts` that receives the lists `obs_ids` (all possible observations) and `action_ids` (all possible actions) and **optionally** two pre-defined encoders `obs_encoder` and `act_encoder`. The function must build four dictionaries that translate from symbols to numbers and back:\n\n\u2022 **obs2num** \u2013 maps every observation identifier to a unique integer.  \n\u2022 **num2obs** \u2013 the inverse of *obs2num*.  \n\u2022 **act2num** \u2013 maps every action identifier to a unique integer.  \n\u2022 **num2act** \u2013 the inverse of *act2num*.\n\nIf an explicit encoder (`obs_encoder` / `act_encoder`) is supplied it has to be used. Otherwise the mapping is obtained by enumerating the identifiers in the order they appear in the corresponding list.  \n\nThe function returns a single dictionary containing the four mappings.\n\nSpecial cases\n1. If a list is empty **and** no explicit encoder is supplied, the two dictionaries that refer to this list must be empty.  \n2. The inverse dictionaries *must* be the exact inverse of their forward counterparts (i.e. `num2obs[obs2num[x]] == x` and the same for actions).\n\nYou may assume that all identifiers inside a list (or an explicit encoder) are unique.\n\nExample\n-------\nInput\n```\nobs_ids    = ['left', 'right', 'front', 'back']\naction_ids = ['move', 'turn']\n```\nOutput\n```\n{\n  'obs2num':  {'left': 0, 'right': 1, 'front': 2, 'back': 3},\n  'num2obs':  {0: 'left', 1: 'right', 2: 'front', 3: 'back'},\n  'act2num':  {'move': 0, 'turn': 1},\n  'num2act':  {0: 'move', 1: 'turn'}\n}\n```\nReasoning\n---------\nBecause no explicit encoders are provided, the function enumerates every identifier in the order it appears. For example, `'left'` becomes `0`, `'right'` becomes `1`, and so on. Inverse dictionaries are obtained by swapping the key\u2013value pairs of the forward dictionaries.\n# Your code should start with:\n```python\nimport numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nThe four dictionaries **must** be internally consistent:\n1. `num2obs[obs2num[x]] == x` for every observation identifier `x`.\n2. `num2act[act2num[a]] == a` for every action identifier `a`.\n"}
{"task_id": 241, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Orthogonal Weight Initialiser\n# Description:\nIn many deep\u2013learning libraries the weights of a layer are initialised with an **orthogonal matrix** because an orthogonal weight-matrix keeps the activations from shrinking or exploding at the beginning of training.\n\nWrite a function that returns an orthogonally initialised NumPy array with a user specified shape.  The algorithm you have to reproduce is the one popularised by Saxe et al. (2014):\n\n1.  Let the requested tensor shape be `(d0, d1, \u2026, dn)` with `len(shape) \u2265 2`.\n2.  Create a 2-D matrix  `A \u2208 \u211d^{d0\u00d7(d1\u22efdn)}` filled with i.i.d. samples from the standard normal distribution.\n3.  Compute the singular value decomposition (SVD) of `A`\n      \u2003`A = U \u03a3 V\u1d40`  with `U \u2208 \u211d^{d0\u00d7k}` and `V\u1d40 \u2208 \u211d^{k\u00d7(d1\u22efdn)}` where `k = min(d0 , d1\u22efdn)`.\n4.  Choose the SVD factor that has the same size as `A`:\n      \u2003`Q = U`\u2003if `U.shape == A.shape`  *else*  `Q = V\u1d40`.\n5.  Reshape `Q` back to the requested tensor `shape` and multiply it by `scale`.\n\nThe returned tensor must fulfil the orthogonality condition\n```\nflat = result.reshape(shape[0], -1)\nif shape[0] <= flat.shape[1]:\n    flat @ flat.T \u2248 scale**2 \u22c5 I_d0\nelse:\n    flat.T @ flat \u2248 scale**2 \u22c5 I_{d1\u22efdn}\n```\n(i.e. its rows or its columns \u2013 whichever are fewer \u2013 form an orthonormal set up to the given scaling factor).\n\nIf `len(shape) < 2` the function should return `-1`.\n\nExample (fixed random seed)\nInput:  `np.random.seed(0); shape = (2, 2); scale = 0.5`\nOutput:\n```\n[[0.259 , 0.426 ],\n [0.426 ,-0.260 ]]\n```\nReasoning:  with the given seed the algorithm first draws the 2\u00d72 matrix\n`[[1.7641, 0.4002],[0.9787, 2.2409]]`, its left singular vectors form the orthogonal matrix `Q`; after reshaping and scaling by `0.5` we obtain the shown result, whose rows are orthonormal up to the factor `0.5`.\n# Your code should start with:\n```python\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturned value must be a python list (use ndarray.tolist()) and satisfy the orthogonality condition described above (within an absolute tolerance of 1e-6).\n"}
{"task_id": 242, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: UCB1 Arm Selection\n# Description:\nImplement the arm\u2013selection rule of the Upper-Confidence-Bound algorithm UCB1 for the stochastic multi-armed bandit problem.\n\nThe function receives the current information maintained by the learning agent:\n1. ev_estimates \u2013 a list containing the current empirical mean reward (expected value) for each arm;\n2. pull_counts \u2013 a list containing how many times each arm has been pulled so far;\n3. current_step \u2013 an integer denoting the time-step that is *about to* be executed (the very first decision corresponds to current_step == 0);\n4. C \u2013 a positive real number (default 1.0) that scales the exploration term (larger values encourage more exploration).\n\nIt must return the index (0-based) of the arm that UCB1 would choose next.  The policy is defined as follows:\n\u2022  If at least one arm has never been pulled (its pull count is 0), the algorithm immediately returns the first such arm (this guarantees that every arm is tried at least once).\n\u2022  Otherwise, for every arm \\(a\\) the UCB score is computed as\n\n    score(a)  =  ev_estimates[a]  +  C * \\sqrt{ \\dfrac{2 \\ln (current\\_step + 1)}{pull\\_counts[a]} }.\n\n  The arm with the largest score is returned.  When several arms share the maximum score, the one with the smallest index must be chosen (Python\u2019s built-in max/argmax already has this behaviour when iterating from the first to the last element).\n\nThe function must work for any number of arms (\u2265 1) and for any valid, positive current_step value.  The output is the integer index of the selected arm.\n# Your code should start with:\n```python\nimport math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn only the integer index (0-based) of the selected arm.\n"}
{"task_id": 243, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feed-Forward Actor\u2013Critic Forward Pass\n# Description:\nIn many Actor\u2013Critic agents the policy (actor) and the state-value function (critic) share the same feature extractor while having two separate output heads.  In this task you will implement the forward pass of a very small fully-connected Actor\u2013Critic network using nothing more than basic NumPy operations.\n\nNetwork architecture (all layers are fully\u2013connected):\n1. Dense-1 : input \u2192 4 neurons, ReLU activation\n2. Dense-2 : 4 \u2192 4 neurons, ReLU activation\n3. Dense-3 : 4 \u2192 4 neurons, ReLU activation\n4. Actor head  : 4 \u2192 3 neurons, Softmax activation (yields action probabilities)\n5. Critic head : 4 \u2192 1 neuron  (yields a single state value, no activation)\n\nWeights and biases are fixed and **identical to one** (all weights = 1.0, all biases = 0.0).  Because of this choice the network behaves deterministically and its output can be calculated exactly for any input state *s = [s\u2080, s\u2081, s\u2082]* of length 3:\n\u2022 z\u2081 = ReLU(s  \u00b7 W\u2081 + b\u2081)  \u2013 every component equals  max(0, s\u2080+s\u2081+s\u2082)\n\u2022 z\u2082 = ReLU(z\u2081 \u00b7 W\u2082 + b\u2082)  \u2013 every component equals  4\u00b7z\u2081\n\u2022 z\u2083 = ReLU(z\u2082 \u00b7 W\u2083 + b\u2083)  \u2013 every component equals  4\u00b7z\u2082 = 16\u00b7z\u2081\n\u2022 logits = z\u2083 \u00b7 W\u2090 + b\u2090     \u2013 every component equals  4\u00b7z\u2083 = 64\u00b7z\u2081\n\u2022 action_probs = Softmax(logits) \u2013 because all logits are identical the probability of each of the three actions is 1\u20443\n\u2022 state_value  = (z\u2083 \u00b7 W_c + b_c)[0] = 4\u00b7z\u2083 = 64\u00b7z\u2081  \n\nWrite a function that receives a state vector, performs the above computations, and returns \u2013 rounded to four decimals \u2013\n1. a list of the 3 action probabilities, and\n2. the scalar state value.\n# Your code should start with:\n```python\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every action probability and the state value to 4 decimal places.\n"}
{"task_id": 244, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Random Binary Tensor Generator\n# Description:\nWrite a Python function that generates a random *binary* tensor of a given shape.  Every element of the tensor must independently be `1.0` with probability equal to the input parameter `sparsity` and `0.0` otherwise.\n\nThe function must\n1. validate its arguments and return **-1** if any of the following is true\n   \u2022 `shape` is **not** a tuple of positive integers,\n   \u2022 `sparsity` is **not** a real number in the closed interval **[0,\u20061]**.\n2. use `numpy.random.rand` to draw the random numbers.\n3. return the result as a *nested* Python list obtained with NumPy\u2019s `tolist()` method (the list therefore contains only the floats `0.0` and `1.0`).\n\nExample (assume `np.random.seed(0)` has been executed beforehand):\nInput  : `shape = (2, 3)`, `sparsity = 0.5`\nOutput : `[[1.0, 1.0, 1.0], [1.0, 0.0, 1.0]]`\n\nReasoning\nThe first six random numbers produced after seeding with **0** are\n```\n0.5488, 0.7152, 0.6028, 0.5449, 0.4237, 0.6459\n```\nWith `sparsity = 0.5`, the decision threshold is `1 \u2212 sparsity = 0.5`.  All draws that are **\u2265 0.5** are converted to `1.0`; the others become `0.0`, leading to the matrix above.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Write your code here...\n    pass\n```\n# Output Constraints:\nReturn a regular nested Python list containing only the floats 0.0 and 1.0.\n"}
{"task_id": 247, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Bandit Oracle\n# Description:\nIn a stochastic multi-armed bandit each arm k\\in\\{0,1,\\dots ,K-1\\} pays a random reward. \nIn a Gaussian bandit the reward of arm k is generated as\n    R_k = 0                 with probability (1- p_k)\n    R_k ~ \ud835\udca9(\u03bc_k , \u03c3_k^2 )    with probability p_k\nwhere \u03bc_k is the mean, \u03c3_k^2 the variance (\u03c3_k^2>0) of the Gaussian distribution and p_k\\in[0,1] is the probability that the arm actually pays out.\n\nFor a single pull of arm k the expected reward is therefore\n    \ud835\udd3c[R_k] = p_k \u00b7 \u03bc_k.\n\nWrite a function that receives\n  \u2022 payoff_dists \u2013 a list of K tuples (\u03bc_k , \u03c3_k^2)\n  \u2022 payoff_probs \u2013 a list of the corresponding pay-out probabilities p_k\nand returns a tuple (best_ev, best_arm) where\n  \u2022 best_ev   \u2013 the maximum expected reward among all arms, rounded to 4 decimals\n  \u2022 best_arm  \u2013 the index (0-based) of the arm that achieves that maximum (if several arms tie, return the smallest index).\n\nInput validation\n 1. Both lists must be of the same non\u2013zero length; otherwise return -1.\n 2. Every variance must be strictly positive and every probability must lie in the closed interval [0,1]; if not, return -1.\n\nAll calculations should be performed with NumPy but the final best_ev has to be rounded to 4 decimal places using round(x, 4).\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nbest_ev must be rounded to the nearest 4th decimal\n"}
{"task_id": 248, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Baseline Class-Probability Predictor\n# Description:\nImplement a very simple baseline classifier that always predicts the same probability for every example: the empirical proportion of the positive class observed in the training labels.  \n\nThe function must work with binary labels encoded as 0 (negative) and 1 (positive).\n\nSteps the function has to perform\n1. Compute the positive-class probability as  \n   p = (number of ones in y_train) / (length of y_train).\n2. Create a NumPy array whose length equals the number of rows in X_test and fill it with p.\n3. Round every probability to four decimal places.\n4. Return the predictions as a regular Python list.\n\nIf `X_test` contains zero rows the function must return an empty list (``[]``).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nRound the constant probability to 4 decimal places and return it in a Python list having the same length as `X_test`.\n"}
{"task_id": 249, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Actor\u2013Critic Forward Pass\n# Description:\nIn many reinforcement-learning algorithms the policy (actor) and the state-value estimator (critic) share a large part of the neural network.  A very common layout is three fully\u2013connected layers with ReLU activations followed by two independent output heads:\n\u2022 an \u201cactor head\u201d that converts the last hidden representation into a vector of action scores and then a probability distribution by means of the soft-max function;\n\u2022 a \u201ccritic head\u201d that converts the same hidden representation into a single scalar \u2013 the estimated value of the current state.\n\nYour task is to reproduce the forward pass of such an Actor\u2013Critic network using nothing but NumPy.  All network parameters (weights and biases) are provided in a dictionary.\n\nImplement a function `actor_critic_forward` that\n1. takes the current environment state (a 1-D list of floats) and a dictionary that stores\n   W1, b1, W2, b2, W3, b3  \u2013 the three shared dense layers,\n   Wa, ba               \u2013 actor head,\n   Wc, bc               \u2013 critic head;\n2. performs three affine transformations followed by ReLU on the shared part;\n3. feeds the final hidden vector into the actor head and converts the resulting raw scores into a probability distribution with the soft-max function;\n4. feeds the same hidden vector into the critic head to obtain the scalar state value;\n5. rounds the action probabilities and the state value to four decimal places and returns them.\n\nIf the numerical result is exactly 0 or 1, keep the single decimal place (e.g. `1.0`, `0.0`).\n# Your code should start with:\n```python\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # WRITE YOUR CODE HERE\n    pass\n```\n# Output Constraints:\nRound every probability and the state value to 4 decimal places before returning.\n"}
{"task_id": 251, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Activation Function Lookup\n# Description:\nImplement five of the most widely\u2013used activation functions in neural-networks (sigmoid, tanh, relu, leaky_relu and softmax) together with a helper called get_activation.  \n\nThe helper get_activation(name) must return **the Python callable** that implements the requested activation.  The mapping between names and functions is fixed as follows:\n\u2022 \"sigmoid\" \u2192 element-wise logistic sigmoid  \n\u2022 \"tanh\" \u2192 element-wise hyperbolic tangent  \n\u2022 \"relu\" \u2192 element-wise Rectified Linear Unit  \n\u2022 \"leaky_relu\" \u2192 element-wise Leaky-ReLU with slope 0.01 for negative inputs  \n\u2022 \"softmax\" \u2192 Softmax computed on a one-dimensional array (or list)\n\nAll activation functions have to work with any of the following input types:\n1. a Python scalar (int or float)  \n2. a Python list/tuple  \n3. a 1-D NumPy array\n\nThe returned value must keep the same structure (scalar in \u2192 scalar out, vector in \u2192 1-D NumPy array out).  Every numeric entry in the output has to be rounded to **4 decimal places** for determinism.  \n\nIf get_activation is called with an unknown name it must raise `ValueError('Invalid activation function.')`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"TODO: implement element-wise logistic sigmoid.\"\"\"\n    pass\n\ndef tanh(x):\n    \"\"\"TODO: implement element-wise hyperbolic tangent.\"\"\"\n    pass\n\ndef relu(x):\n    \"\"\"TODO: implement element-wise Rectified Linear Unit.\"\"\"\n    pass\n\ndef leaky_relu(x, alpha: float = 0.01):\n    \"\"\"TODO: implement element-wise Leaky-ReLU with slope *alpha* for x<0.\"\"\"\n    pass\n\ndef softmax(x):\n    \"\"\"TODO: implement numerically stable softmax over a 1-D input.\"\"\"\n    pass\n\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    # >>> YOUR CODE HERE <<<\n    pass\n```\n# Output Constraints:\nEach numerical element in the returned object must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 252, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Least-Squares Loss: Gradient and Hessian\n# Description:\nImplement a Python function that computes both the gradient and the (diagonal) Hessian of the least-squares loss \n\n    L(actual, predicted) = 0.5 * || actual \u2212 predicted ||\u00b2\n\nfor a vector of targets ``actual`` and model outputs ``predicted``.  \nFor the least-squares loss the gradient with respect to the prediction is\n\n    \u2207L = actual \u2212 predicted\n\nand the second derivative (Hessian) with respect to each prediction coordinate is constant and equal to 1.  \nThe function must return a tuple ``(grad, hess)`` where\n\u2022 ``grad`` is a list whose *i-th* element is ``actual[i] \u2013 predicted[i]``  \n\u2022 ``hess`` is a list of ones having the same length as ``actual``.\n\nAssume ``actual`` and ``predicted`` are NumPy 1-D arrays of equal length.  \nIf their shapes differ, behaviour is unspecified (you do not need to handle errors).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    # ======= YOUR CODE HERE =======\n    # Replace the NotImplementedError with your implementation.\n    # Remember to convert the NumPy arrays to Python lists before returning.\n    raise NotImplementedError\n```\n# Output Constraints:\nReturn a tuple (grad, hess) where grad and hess are Python lists, not NumPy arrays.\n"}
{"task_id": 253, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Elastic-Net Penalty and Gradient\n# Description:\nElastic-Net is a convex combination of L1 and L2 regularisation that is widely used to reduce model complexity and prevent over-fitting.  \nWrite a function that can compute both the Elastic-Net penalty value and its analytical gradient for a given weight vector.\n\nThe penalty is defined as\n\n    R(w) = \u03b1 \u00b7 [ \u03bb\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006\u2006 \u00b7 ||w||\u2082 + (1\u2212\u03bb)\u00b70.5\u00b7w\u1d40w ],\n\nwhere\n  \u2022 w is the weight vector,  \n  \u2022 \u03b1 (alpha) is the overall regularisation strength (\u03b1 \u2265 0),  \n  \u2022 \u03bb (lambda) is the L1 ratio (0 \u2264 \u03bb \u2264 1).\n\nThe gradient with respect to w is\n\n    \u2207R(w) = \u03b1 \u00b7 [ \u03bb \u00b7 sign(w) + (1\u2212\u03bb) \u00b7 w ].\n\nImplement a single function `elastic_net_regularization` that\n1. accepts a weight vector (list or 1-D NumPy array), `alpha`, `l1_ratio`, and a Boolean flag `gradient`,\n2. when `gradient=False` (default) returns the scalar penalty value, rounded to 4 decimals, and\n3. when `gradient=True` returns the gradient as a Python list rounded element-wise to 4 decimals.\n# Your code should start with:\n```python\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound the returned float or every element of the returned list to 4 decimal places.\n"}
{"task_id": 255, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Blackjack Usable Ace Checker\n# Description:\nIn a game of Blackjack an ace can be counted as either **1** or **11**.  A hand is said to have a *usable ace* when it contains at least one ace that can be worth **11** without the total hand value exceeding **21** (i.e. busting).  For example, the hand `[1, 7]` has a usable ace because the ace can be treated as **11**, giving a hand value of `18` (11 + 7) which is still \u2264 21.  Conversely, `[1, 10, 10]` does **not** have a usable ace because counting any ace as **11** would make the hand value `31` (> 21).\n\nWrite a Python function that receives a list of integers representing card values in a Blackjack hand and returns **True** if the hand contains a usable ace and **False** otherwise.\n# Your code should start with:\n```python\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a boolean value: True if the hand has a usable ace, otherwise False.\n"}
{"task_id": 256, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numerical Gradient Check for a Vanilla RNN Parameter\n# Description:\nGradient checking is a simple but extremely useful debugging technique.  When we implement back-propagation we usually derive the analytical gradients (produced by the chain rule) by hand and then code them.  A tiny typo in the algebra or in the code is enough to ruin the whole learning process.  \n\nIn this exercise you will implement a numerical gradient checker for a (vanilla) Recurrent Neural Network (RNN) using the centred finite-difference formula.  The function must work with every trainable parameter stored in the model\u2019s **parameters** dictionary.\n\nGiven\n1. a model that provides\n   \u2022 `model.parameters` \u2013 a dict that maps a parameter name to a NumPy array,\n   \u2022 `model.forward(X_t)` \u2013 performs the forward pass for one time\u2013step and returns the current prediction,\n   \u2022 `model.flush_gradients()` \u2013 resets every internally stored gradient (a no-op in many toy models),\n2. a loss function that takes the list of predictions obtained over all time-steps and returns a scalar loss,\n3. the name of the parameter that has to be checked,\n4. a 3-D input array `X` of shape **(batch, input_dim, n_t)**,\n5. the number of time-steps `n_t`,\n6. a small perturbation `\u03b5`,\n\nyou have to:\n\u2022 iterate over every element of the chosen parameter,\n\u2022 perturb it by **+\u03b5** and **\u2013\u03b5**,\n\u2022 run the forward loop `n_t` times for each perturbation, collect the predictions and evaluate the loss,\n\u2022 approximate the partial derivative with\n\n        \u2202L/\u2202\u03b8\u1d62 \u2248 ( L(\u03b8\u1d62+\u03b5) \u2013 L(\u03b8\u1d62\u2013\u03b5) ) / (2\u03b5)\n\n\u2022 store the numerical gradient in `grads` **at the same index but finally return `grads.T` (transpose of the accumulated array)**.\n\nSpecial cases\n\u2022 If `param_name` is \"Ba\" or \"Bx\" the real key stored in the dictionary is the lower-case variant (\"ba\" or \"bx\") \u2013 handle this automatically.\n\u2022 If `param_name` is \"X\" or \"y\" the function should immediately return `None` \u2013 those are not trainable parameters.\n\nKeep every intermediate tensor in `float64` to avoid unnecessary numerical noise.\n# Your code should start with:\n```python\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a NumPy array with the same shape as the chosen parameter (but transposed) and dtype float64.\n"}
{"task_id": 257, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost with Decision Stumps\n# Description:\nImplement the AdaBoost (Adaptive Boosting) algorithm **from scratch** using decision stumps (one\u2013level decision trees) as weak learners.  \nThe function must:\n1. Take a training set `(X_train, y_train)` where `X_train` is a 2-D NumPy array of shape `(m, n)` and `y_train` is a 1-D NumPy array of length `m` whose elements are **only** `-1` or `1`.\n2. Re-weight training examples iteratively and build `n_clf` decision stumps, each time choosing the stump that minimises the weighted classification error.\n3. Store each stump\u2019s weight (often denoted as $\\alpha_t$) computed as  \n$\\alpha_t = \\frac12 \\ln\\!\\left(\\frac{1-\\varepsilon_t}{\\varepsilon_t}\\right)$, where $\\varepsilon_t$ is the stump\u2019s weighted error.\n4. For every sample in `X_test` aggregate all stump votes by the sign of the weighted sum $\\sum_{t=1}^{n_{clf}} \\alpha_t h_t(\\mathbf x)$ and output `-1` or `1` accordingly.\n\nReturn a Python **list** of predicted labels for the given `X_test`.  \nIf `n_clf` is smaller than 1, treat it as 1.\n# Your code should start with:\n```python\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list with each element being either -1 or 1.\n"}
{"task_id": 258, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hinge Loss\n# Description:\nImplement the hinge-loss function that is commonly used when training a linear Support Vector Machine (SVM).\n\nGiven two equally\u2013sized one-dimensional arrays (or Python lists)\n  \u2022 actual \u2013 the ground-truth class labels, encoded as \u20131 or 1\n  \u2022 predicted \u2013 the real-valued prediction scores produced by a model\n\nthe (per-sample) hinge loss is defined as\n    L_i = max(0 , 1 \u2013 y_i * \\hat{y}_i)\nwhere y_i is the i-th true label and \\hat{y}_i is the corresponding predicted score.  \nThe overall hinge loss is the arithmetic mean of these per-sample losses.\n\nWrite a function that\n1. converts the supplied inputs to NumPy arrays,\n2. computes the per-sample losses with vectorised operations,\n3. returns the mean loss rounded to four decimal places.\n\nIf the two inputs do not have the same length the function must return \u20131.\n# Your code should start with:\n```python\nimport numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float that is rounded to the nearest 4th decimal place.\n"}
{"task_id": 259, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Deterministic Experience Replay Sampler\n# Description:\nIn many reinforcement-learning algorithms an **experience replay buffer** is used to store past transitions so that they can later be sampled at random and re-used for training.  \nA transition can be any Python object (tuple, list, number, dict, \u2026).  For simplicity we will represent the buffer itself as a normal Python `list`.  \n\nYour task is to implement a helper function `sample_replay_memory` that\n1. receives the replay buffer (a list) and an integer `batch_size`,\n2. deterministically selects `batch_size` *different* transitions from that buffer using the random number generator seeded with the value **42**, and\n3. returns the selected items **in the order they are produced by `random.sample`.**  \n\nIf `batch_size` exceeds the current buffer length the function must return **-1**.\n# Your code should start with:\n```python\nimport random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a standard Python list whose elements are the sampled transitions.\n"}
{"task_id": 260, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Wrapping Tile Coding Indices\n# Description:\nIn many Reinforcement Learning algorithms a *tile coder* is used to discretise continuous state\u2013variables.  The idea is to overlay several offset grids (*tilings*) on top of the continuous space and to look-up, for every tiling, the discrete \u2018tile\u2019 that covers the current point.  The returned list of tile indices can then be used as non-overlapping features.\n\nA slightly more advanced variant, called **wrapping tile coding**, allows selected dimensions to wrap around after a fixed width (e.g. angles that repeat after 2\u03c0).  In this task you will implement a light-weight version of Sutton\u2019s `tileswrap` routine.\n\nWrite a function `tileswrap` that, for a set of floating input variables and (optional) integer variables, returns the indices of the active tiles for **each** of the `numtilings` tilings.\n\nHow the indices are produced\n1.  Quantise every float:  `q_i = floor(f_i * numtilings)`.\n2.  For every tiling `t = 0 \u2026 numtilings-1`  \n    a. start the coordinate list with the tiling number: `coords = [t]`.  \n    b. let `b = t`. For every `q_i` (and its corresponding `wrapwidth_i`) compute  \n       `c = (q_i + (b % numtilings)) // numtilings`  \n       and append `c % wrapwidth_i` **if** `wrapwidth_i` is a positive integer, otherwise append `c` unchanged.  After each float coordinate update `b += t*2`.  \n    c. finally append all extra integer variables `ints`.\n3.  Hash the resulting integer coordinate list into the interval `[0, ihtORsize-1]` with the following **deterministic** polynomial hash:\n   \n   `index = 0;   for coord in coords: index = (index*31 + coord) % ihtORsize`.\n4.  Return the list of the `numtilings` indices.\n\nIf `readonly` is `True` the behaviour is identical \u2013 the flag is included only for API compatibility.  You may assume that `ihtORsize` is always a positive integer (i.e. no external IHT class is supplied).\n\nExample\nInput\n    ihtORsize = 32\n    numtilings = 2\n    floats      = [0.1]\n    wrapwidths  = [5]\nOutput\n    [0, 31]\nReasoning\n \u2022 Quantised float: q = floor(0.1\u00b72) = 0.\n \u2022 Tiling 0 \u2192 coords = [0, 0] \u2192 hash \u2192 0.\n \u2022 Tiling 1 \u2192 coords = [1, 0] \u2192 hash \u2192 31 (mod 32).\nHence the routine returns [0, 31].\n# Your code should start with:\n```python\nfrom itertools import zip_longest\nfrom math import floor\nfrom itertools import zip_longest\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nAll returned indices must be integers in the half-open range [0, ihtORsize).\n"}
{"task_id": 261, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Glorot Xavier Normal Initialisation\n# Description:\nImplement the Glorot (also called Xavier) normal weight-initialisation function that is widely used when training neural networks.  For a requested tensor shape, the function has to\n\n1. compute the so-called *fan in* and *fan out* values\n   \u2022  For a 2-D shape ``(fan_in, fan_out)`` (e.g. a fully\u2013connected layer\u2019s weight\n      matrix) the numbers are given directly by the two dimensions.\n   \u2022  For a shape with more than two dimensions (e.g. convolutional kernels\n      ``(out_channels, in_channels, k1, k2, \u2026)``) the receptive-field size is the\n      product of all dimensions **after** the first two.  In this case\n      ``fan_in  = in_channels  \u00d7 receptive_field_size`` and\n      ``fan_out = out_channels \u00d7 receptive_field_size``.\n2. calculate the standard deviation\n              s = sqrt( 2 / (fan_in + fan_out) ).\n3. return a NumPy array whose elements are independently drawn from a normal\n   distribution with mean 0 and standard deviation ``s``.\n\nThe function must not modify the global NumPy random state apart from using it\nfor sampling.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturned NumPy array must have the exact requested shape and dtype float.  The sample mean should be very close to 0 and the sample standard deviation should be close to the theoretical value \u221a[2/(fan_in+fan_out)].\n"}
{"task_id": 263, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Forward Pass of a Fully-Connected Neural Network\n# Description:\nYou are given the weight matrices of a fully\u2013connected feed-forward neural network, a list that specifies which activation function is used in every layer, and one input example \\(\\mathbf x\\).  All bias weights are stored explicitly as the first column of every weight matrix.  The task is to implement a **single forward pass** and return the network output.\n\nLet\n\u2022  \\(L\\) be the number of layers (including the output layer),\n\u2022  \\(W^{(\\ell)}\\in\\mathbb R^{n_\\ell\\times(1+n_{\\ell-1})}\\) the weight matrix of layer \\(\\ell\\) (the first column holds the bias weights),\n\u2022  \\(g^{(\\ell)}\\) the activation function of layer \\(\\ell\\) chosen from  \"sigmoid\", \"relu\" or \"linear\".\n\nThe forward pass is carried out as follows:\n1. Initialise the activations of the (non-biased) input layer by \\(\\mathbf a^{(0)}=\\mathbf x\\).\n2. For every layer \\(\\ell\\in\\{1,\\dots,L\\}\\)\n   a) prepend the bias term: \\(\\tilde{\\mathbf a}^{(\\ell-1)}=[1,\\;\\mathbf a^{(\\ell-1)}]^T\\),\n   b) compute the pre-activation \\(\\mathbf z^{(\\ell)} = W^{(\\ell)}\\,\\tilde{\\mathbf a}^{(\\ell-1)}\\),\n   c) apply the activation function: \\(\\mathbf a^{(\\ell)} = g^{(\\ell)}\\big(\\mathbf z^{(\\ell)}\\big)\\).\n3. Return \\(\\mathbf a^{(L)}\\) rounded to four decimals.  When the network has a single output neuron, return the scalar instead of a one-element list.\n\nActivation functions:\n\u2022 sigmoid: \\(\\sigma(z)=\\frac1{1+e^{-z}}\\)\n\u2022 relu:    \\(\\max(0,z)\\)\n\u2022 linear:  identity function\n\nIn every test case the length of the ``activations`` list equals ``len(weights)``, and each weight matrix has compatible dimensions.  You can assume all numeric inputs are valid.\n# Your code should start with:\n```python\nimport numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every number in the final result to 4 decimal places using numpy.round(..., 4).\n"}
{"task_id": 265, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: King\u2019s Piece-wise Loss Function\n# Description:\nThe so-called *King\u2019s loss* is defined as a simple piece-wise linear/constant function that is frequently used to approximate more complex cost curves.  Implement a Python function that evaluates this loss for a single scalar input.\n\nThe loss $L(x)$ is given by\n\n\u2022 if $x \\le 250$:     $L(x)= -0.25\\,x + 82.50372665317208$\n\n\u2022 if $250 < x \\le 600$: $L(x)= 20.00372665317208$\n\n\u2022 if $600 < x \\le 700$: $L(x)= -0.2\\,x + 140.00372665317207$\n\n\u2022 if $x > 700$:         $L(x)= 0.003726653172066108$\n\nYour task is to write the function `king_loss_fn` that,\n1. chooses the correct branch according to the given rules, \n2. computes the value of the branch expression, and\n3. returns the result rounded to **four** decimal places.\n\nIn cases where the input is exactly on a boundary (e.g. `x == 250` or `x == 600`), follow the branch specification above strictly.\n# Your code should start with:\n```python\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    # TODO: implement the function following the specification above\n    pass\n```\n# Output Constraints:\nReturn a native Python `float` rounded to the nearest 4th decimal place (use `round(value, 4)`).\n"}
{"task_id": 266, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Build Adjacency List for an Undirected Graph\n# Description:\nWrite a Python function that converts an undirected, un-weighted graph given by its vertex list `V` and edge list `E` into an adjacency\u2013list representation.\n\nYou are provided\n1. a list `V` containing **unique** vertex identifiers (vertices can be of any hashable type, e.g. `int`, `str`).  The order in `V` must be preserved in the returned structure.\n2. a list `E` where each element is a 2-tuple `(u, v)` that denotes an (undirected) edge connecting vertices `u` and `v`.\n\nYour task is to return a *list of lists* `G` so that\n\u2022 `G[i]` contains all vertices adjacent to `V[i]`.\n\u2022 Every neighbour appears **exactly once** (remove parallel or duplicated edges).\n\u2022 The neighbours inside each `G[i]` must be sorted according to their order of appearance in `V` (this keeps the output deterministic and easy to test).\n\nIf a vertex has no neighbours, its entry must be the empty list `[]`.\n\nExample explanation, detailed constraints, starter code and tests are given below.\n# Your code should start with:\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # TODO: Write your code here\n    pass\n```\n# Output Constraints:\nReturn a list of lists. Order of outer list must follow `V`; order inside each inner list must follow `V` as well. No duplicate neighbours allowed.\n"}
{"task_id": 267, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Weighted Decision Stump Learning\n# Description:\nA decision stump is the simplest possible decision tree \u2013 it makes its prediction by comparing a single feature to a threshold and optionally flipping the sign (polarity).  In boosting algorithms such as AdaBoost the stump is **learnt with respect to a weight distribution** over the training samples: mis-classified examples with large weights should influence the choice of threshold much more than correctly classified examples with very small weights.\n\nWrite a function that **finds the optimal weighted decision stump** for a binary classification task with class labels \u22121 and 1.\n\nGiven\n1. a data matrix `X \\in \\mathbb{R}^{n\\times d}` (`n` samples, `d` features),\n2. a label vector `y \\in \\{-1,1\\}^n`, and\n3. a non-negative weight vector `w \\in \\mathbb{R}_{\\ge 0}^{n}` (`\\sum_i w_i = 1` is *not* required),\n\nthe function has to examine **all features** and **all unique feature values** as candidate thresholds and return the stump that minimises the **weighted classification error**\n\n    err = \\sum_{i=1}^{n} w_i  \u00b7  \\mathbb{1}[ \\hat y_i \\neq y_i ]\n\nwhere the prediction of a stump is defined as\n\n    \\hat y_i =  \\begin{cases}\n                 \\phantom{-}1  &\\text{if }\\; (x_{ij} <  \u03b8)           \\text{ and } p =  1\\\\\n                 -1            &\\text{if }\\; (x_{ij} \\ge \u03b8)          \\text{ and } p =  1\\\\[4pt]\n                 -1            &\\text{if }\\; (x_{ij} <  \u03b8)           \\text{ and } p = -1\\\\\n                 \\phantom{-}1  &\\text{if }\\; (x_{ij} \\ge \u03b8)          \\text{ and } p = -1\n               \\end{cases}\n\n`p\u2208{1,\u22121}` is the polarity of the stump.\n\nReturn a dictionary with the keys\n```\n{\n    \"feature_index\" : int,   # best feature (0-based)\n    \"threshold\"     : float, # optimal threshold, rounded to 4 decimals\n    \"polarity\"      : int,   # either 1 or -1 as defined above\n    \"weighted_error\": float  # minimal weighted error (rounded to 4 decimals)\n}\n```\nIf several stumps achieve the same minimal error, **any one of them may be returned**.\n# Your code should start with:\n```python\nimport numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound the returned \u201cthreshold\u201d and \u201cweighted_error\u201d to the nearest 4th decimal place.\n"}
{"task_id": 268, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate an Erd\u0151s\u2013R\u00e9nyi Random Graph\n# Description:\nImplement the Erd\u0151s\u2013R\u00e9nyi $G(n,p)$ model.\n\nWrite a Python function that builds an un-weighted random graph with a given number of vertices `n_vertices` and independent edge\u2013formation probability `edge_prob`.\n\n\u2022 Every possible edge (ordered pair if the graph is *directed*, unordered pair otherwise) is considered exactly once.\n\u2022 If the value returned by `numpy.random.rand()` is **less than or equal to** `edge_prob`, the edge is added to the graph.\n\u2022 No self-loops are allowed; therefore vertices are always different inside an edge.\n\u2022 The function must return the graph as a **nested Python list** \u2013 the adjacency matrix of size `n_vertices \u00d7 n_vertices` where entry `[i][j]` equals `1` if there is an edge from vertex *i* to vertex *j* and `0` otherwise.\n\u2022 In the undirected case the matrix has to be symmetric (whenever edge *i\u2013j* appears, edge *j\u2013i* must be stored as well).\n\nThe global NumPy random state is used, so results can be made reproducible by the caller via `numpy.random.seed()`.\nIn all situations values inside the returned matrix must be the integers `0` or `1`.\nReturn an *empty* $1\\times1$ matrix `[[0]]` for `n_vertices == 1`.\n# Your code should start with:\n```python\nimport numpy as np\nfrom itertools import combinations, permutations\nfrom itertools import combinations, permutations\nimport numpy as np\n\ndef random_unweighted_graph(n_vertices: int,                       edge_prob: float = 0.5,                       directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nReturn a nested Python list whose elements are the integers 0 or 1 \u2013 the adjacency matrix of the generated graph.\n"}
{"task_id": 269, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Count Trainable Parameters of a Two-Layer DQN\n# Description:\nIn many reinforcement-learning applications a Deep Q-Network (DQN) is used to estimate the state\u2013action values (Q-values).  A simplified DQN architecture is shown below (adapted from the given code snippet):\n\n\u2022 A first fully-connected (dense) layer that maps the input state vector (length = state_dimensions) to 164 hidden neurons.\n\u2022 A ReLU activation (which contains no parameters).\n\u2022 A second fully-connected layer that maps those 164 hidden activations to the number of possible actions (length = action_dimensions).\n\nFor a fully-connected layer the number of trainable parameters equals\n    weights + biases = (in_features \u00d7 out_features) + out_features.\n\nWrite a function that receives the two integers state_dimensions and action_dimensions and returns **the total number of trainable parameters** of the network described above.  No input validation is required; assume the two arguments are positive integers.\n# Your code should start with:\n```python\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # TODO: Implement the parameter count formula described in the task.\n    pass\n```\n# Output Constraints:\nReturn a single integer (no rounding needed).\n"}
{"task_id": 270, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Oracle Payoff for a Contextual Linear Bandit\n# Description:\nIn a contextual linear multi-armed bandit each arm k is associated with a D-dimensional context vector x_{t,k}.  The expected reward of arm k at time t is the inner product of this context with an (unknown) parameter vector \u03b8_k\n\n    E[r_{t,k}|x_{t,k}] = x_{t,k}^T \u03b8_k\n\nGiven the complete context matrix X \u2208 \u211d^{D\u00d7K} (one column per arm) and the parameter matrix \u0398 \u2208 \u211d^{D\u00d7K} (one column per arm), the *oracle* \u2013 an ideal agent that knows \u0398 \u2013 always chooses the arm with the largest expected reward.\n\nWrite a function that receives X and \u0398 and returns\n1. the optimal expected reward rounded to four decimal places and\n2. the index (0-based) of the arm that attains this reward.  \nIf several arms share the same (rounded) reward, return the smallest index.\n\nExample  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nInput\n    context = np.array([[0.5, 1.0],\n                        [1.5, 0.2]])\n    thetas  = np.array([[0.1, 0.3],\n                        [0.4, 0.2]])\n\nOutput\n    (0.65, 0)\n\nReasoning\n    Expected reward arm 0  : 0.5\u00b70.1 + 1.5\u00b70.4 = 0.05 + 0.60 = 0.65\n    Expected reward arm 1  : 1.0\u00b70.3 + 0.2\u00b70.2 = 0.30 + 0.04 = 0.34\n    Best reward (rounded)  : 0.65 provided by arm 0 \u2192 (0.65, 0)\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nRound the optimal expected reward to the nearest 4th decimal.\n"}
{"task_id": 271, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: XGBoost Split Gain for Squared-Error Loss\n# Description:\nIn gradient boosting libraries such as XGBoost, the quality of a prospective split is measured by the *gain* obtained if the data are divided into two subsets (\"left\" and \"right\").  \n\nFor the **squared-error** loss ($L=\\tfrac12(y_{\\text{true}}-y_{\\text{pred}})^2$) the first- and second-order derivatives with respect to the prediction $y_{\\text{pred}}$ are\n\u2022 gradient  $g_i = y_{\\text{pred},i}-y_{\\text{true},i}$  \n\u2022 hessian   $h_i = 1$\n\nIf $G=\\sum g_i$ and $H=\\sum h_i$ for any node, its *score* is  \n$\\text{score}=\\dfrac{G^2}{H}$.\n\nGiven a parent node that is split into a left and a right child the **gain** is\n\n$\\displaystyle \\text{gain}=\\tfrac12\\Bigl(\\frac{G_L^2}{H_L}+\\frac{G_R^2}{H_R}-\\frac{G_P^2}{H_P}\\Bigr)$\n\nwhere the subscripts $L,R,P$ denote \"left\", \"right\", and \"parent\" (the parent being the union of left and right).\n\nWrite a function `xgboost_split_gain` that\n1. takes the true targets and the current predictions for the left and right part of a prospective split,\n2. computes the gain according to the above formula, and\n3. returns the result rounded to 4 decimal places.\n\nIf the gain is exactly 0 the function must return **0.0** (not `-0.0`).\n# Your code should start with:\n```python\nimport numpy as np\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python `float` rounded to the nearest 4-th decimal place.\n"}
{"task_id": 273, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Optimal Numerical Threshold Selection for a Decision-Tree Split\n# Description:\nIn a (binary or multi-class) classification decision tree every internal node splits the training data on a single numerical attribute.  For a one\u2013dimensional feature vector X=[x1,\u2026,xn] a candidate split point is chosen exactly half-way between two consecutive **distinct** sorted values of X.\n\nFor every candidate threshold t the dataset is divided into two parts\n  \u2022  Left  = {i | xi < t}\n  \u2022  Right = {i | xi \u2265 t}\n\nThe quality of the split is measured with **information gain**\n\n        IG(t) = H(parent) \u2212 (|L|/n)\u00b7H(L) \u2212 (|R|/n)\u00b7H(R)\n\nwhere H(\u00b7) is the Shannon entropy of the class labels contained in the corresponding subset.\n\nWrite a function best_split that\n1. receives\n   \u2022 feature \u2013 a list (or 1-D NumPy array) of ints/floats,\n   \u2022 target  \u2013 a list (or 1-D NumPy array) of integer class labels,\n2. evaluates every legal threshold and returns the one that maximises the information gain together with the gain itself.\n\nIf several thresholds yield exactly the same (maximal) information gain, return the **smallest** threshold.  If\n \u2022 there are no legal thresholds (all feature values identical), or\n \u2022 no threshold provides a positive information gain (e.g. all labels belong to the same class),\nreturn (None, 0.0).\n\nBoth the chosen threshold and the information gain must be rounded to 4 decimal places with Python\u2019s built-in round function before being returned.\n# Your code should start with:\n```python\nimport math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple (threshold, information_gain) where\n\u2022 threshold is either a float rounded to 4 decimal places or None,\n\u2022 information_gain is a float rounded to 4 decimal places.\n"}
{"task_id": 274, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Vector Clipping to a Fixed Range\n# Description:\nImplement a clipping function that limits every element of a numeric vector to the interval \\([-5,5]\\). Any value smaller than \\(-5\\) must become \\(-5\\) and any value larger than \\(5\\) must become \\(5\\). The original ordering and dimensionality must be preserved.\n\nThe function receives either a Python list or a one-dimensional NumPy array and must return a Python list containing the clipped numbers.\n# Your code should start with:\n```python\nimport numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    # TODO: Implement the clipping logic here.\n    pass\n```\n# Output Constraints:\nReturn a Python list with the same length as the input.\n"}
{"task_id": 276, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Additive N-gram Language-Model Log-Probability\n# Description:\nYou are asked to implement a very small additive-smoothing (also called **Lidstone** or **Laplace**) $N$-gram language model from scratch.\n\nGiven a **training corpus** (a list of sentences) and a **target sentence**, your function must\n\n1.   build all $N$-gram counts (with sentence padding) from the corpus;\n2.   compute the additive\u2013smoothed probability of **each** $N$-gram that appears when the target sentence is padded in the same way;\n3.   return the *base-10* **logarithm of the whole sentence probability** (the sum of the logarithms of the individual $N$-gram probabilities).\n\nDetailed rules\n\u2022  Sentences are converted to lower-case and tokenised by a simple white-space split.\n\u2022  All leading / trailing punctuation characters are removed from every token. Punctuation that is inside a token (e.g. \"re-enter\") is **kept**.\n\u2022  Every sentence is padded with a **<bol>** (\"begin-of-line\") token at the beginning and a **<eol>** (\"end-of-line\") token at the end **before** any $N$-grams are generated.\n\u2022  If the optional parameter `unk` is **True** (default), a special token **<unk>** is *permanently* added to the vocabulary **before** training.  All tokens that do **not** occur in the training corpus are mapped to **<unk>** when the target sentence is processed.\n\u2022  Additive smoothing parameter `k` (normally written $\\alpha$ or $K$) is a strictly positive float (default 1.0).  For every $N$-gram $(h,w)$, where $h$ denotes the history (prefix) and $w$ the next word, the probability is\n\n            count(h, w) + k\n    P(w|h) = ---------------------\n             count(h) + k\u00b7|V|\n\n  For the **unigram** case ($N=1$) the denominator is `total_tokens + k\u00b7|V|`.\n\n\u2022  All computations **must** use `math.log10`.\n\u2022  The final result has to be rounded to **4** decimal places.\n\nReturn the rounded number (a single `float`).\n# Your code should start with:\n```python\nimport math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float = 1.0, unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\n\n    The model is trained on *corpus* using the given *N* and *k* (smoothing\n    parameter).  All details of tokenisation, padding, vocabulary construction\n    and probability estimation are described in the task specification.\n\n    Args:\n        corpus: List of training sentences.\n        sentence: The sentence whose probability needs to be computed.\n        N: Order of the model (1 for unigram, 2 for bigram, etc.).\n        k: Additive smoothing parameter (default 1.0).\n        unk: If True, unseen tokens are mapped to a special <unk> symbol.\n\n    Returns:\n        A single float, rounded to 4 decimal places, representing the base-10\n        logarithm of the sentence probability.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to 4 decimal digits.\n"}
{"task_id": 277, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Detect Composite Environment Spaces\n# Description:\nIn reinforcement-learning libraries such as OpenAI Gym, an **environment** exposes two special objects: `action_space` and `observation_space`. These objects describe the structure of the data the agent must send to \u2013 and will receive from \u2013 the environment.\n\nIn many tasks the spaces themselves can be *composite*: they aggregate several sub-spaces and are therefore represented as a **tuple** (ordered collection) or a **dictionary** (key\u2013value collection).  For the purposes of this exercise we treat a built-in Python `tuple` or `dict` as a *composite* space.\n\nWrite a function `is_tuple` that, given an *environment* represented by a plain Python dictionary with the keys `\"action_space\"` and `\"observation_space\"`, returns two booleans:\n\n1. `tuple_action` \u2013 `True` if `env[\"action_space\"]` is either a `tuple` or a `dict`, otherwise `False`.\n2. `tuple_obs` \u2013 `True` if `env[\"observation_space\"]` is either a `tuple` or a `dict`, otherwise `False`.\n\nThe function must return these two booleans in this exact order as a 2-element tuple.\n# Your code should start with:\n```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n"}
{"task_id": 278, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Traverse a Decision Tree\n# Description:\nYou are given a binary decision tree represented by nested Python dictionaries.  Each **internal node** of the dictionary has the following keys:\n\nfeature_i   \u2013 index (int) of the feature to test\nthreshold   \u2013 threshold value (float) to compare the chosen feature against\ntrue_branch \u2013 another node (dict) that is taken when the test succeeds\nfalse_branch\u2013 another node (dict) that is taken when the test fails\n\nA **leaf node** contains only one key\n\nvalue \u2013 the class label (or regression value) returned when the leaf is reached.\n\nThe rule for branching is:\nIf sample[feature_i] \u2264 threshold  \u2192 go to *true_branch*\nelse                              \u2192 go to *false_branch*\n\nWrite a function that traverses such a tree for a single input sample and returns the predicted value found at the reached leaf.\n# Your code should start with:\n```python\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    pass\n```\n"}
{"task_id": 279, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Squared Error Loss Function\n# Description:\nImplement the most widely-used regression loss \u2013 Mean Squared Error (MSE).\n\nWrite a Python function that receives the ground\u2013truth labels *y_true* and the model predictions *y_pred*. The function has to return three things:\n\n1. the Mean Squared Error value\n2. the analytic gradient of the MSE w.r.t the predictions ( \\(\\nabla_{\\hat y}\\;\\text{MSE}= \\frac{2}{N}(\\hat y-y) \\) )\n3. the **classification** accuracy that would be obtained if every prediction were converted into a binary class with a 0.5 decision threshold (values \u22650.5 are mapped to class 1, values <0.5 to class 0).\n\nAll three results must be rounded to four decimal places and the gradient has to be returned as a regular Python *list* (not a NumPy array).\n\nIf *y_true* and *y_pred* are of unequal length you may assume the inputs are invalid \u2013 such a situation will not be tested.\n# Your code should start with:\n```python\nimport numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    # WRITE YOUR CODE HERE\n    pass\n```\n# Output Constraints:\nAll scalar values as well as every entry of the returned gradient list must be rounded to 4 decimal places.\n"}
{"task_id": 280, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute L2 Regularization Term and Gradient\n# Description:\nImplement the L2 (ridge) regularization term that is widely used to penalize large model parameters in linear models, neural networks, and many other machine\u2013learning algorithms.  \n\nWrite a function `l2_regularization` that takes a weight vector or weight matrix `w`, a non-negative regularization coefficient `alpha`, and a Boolean flag `return_grad`.  \n\n1. **Regularization value** \u2013 If `return_grad` is **False** (default) the function must return the scalar value\n                0.5 \u00b7 alpha \u00b7 \u2211 w\u1d62\u00b2\n   where the summation runs over **all** elements of `w`.\n2. **Gradient** \u2013 If `return_grad` is **True**, the function must instead return the gradient of the above expression with respect to `w`, namely\n                alpha \u00b7 w\n   preserving the exact same `ndarray` shape as the input.\n\nThe implementation must work for weight objects of arbitrary shape (1-D vector, 2-D matrix, \u2026).  In every case the output must be either a Python `float` (loss value) or a NumPy `ndarray` (gradient) whose elements are rounded to four decimal places.\n\nIf `alpha` is zero the function should still return the correctly-shaped zero value/gradient.\n\nExample:\n```python\nw     = np.array([1.0, -2.0, 3.0])\nalpha = 0.1\n\nl2_regularization(w, alpha)            # \u279c 0.7\nl2_regularization(w, alpha, True)      # \u279c array([ 0.1, -0.2,  0.3])\n```\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a Python float when `return_grad` is False.\nReturn a NumPy ndarray with shape identical to `w` when `return_grad` is True.\nRound every scalar or ndarray element to the nearest 4th decimal.\n"}
{"task_id": 281, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement L1 Regularisation (Lasso Penalty)\n# Description:\nImplement the L1 regularisation (also called Lasso penalty) that is widely used to combat over-fitting in linear models.  \n\nCreate a class **L1Regularization** which behaves like a callable object.  The constructor receives a single positive floating point number **alpha (\\alpha)** that controls the strength of the regularisation.  For a weight vector **w** the class must provide two public behaviours:\n\n1. **__call__(w)** \u2013 returns the L1 penalty value  \n   \\[ J\\_{L1}(w)=\\alpha\\;\\|w\\|\\_1 = \\alpha\\sum_{i}|w\\_i| \\]\n2. **grad(w)** \u2013 returns the gradient of the penalty with respect to **w**  \n   \\[ \\nabla J\\_{L1}(w)=\\alpha\\;\\operatorname{sign}(w) \\]\n   where *sign(0)=0*.\n\nBoth methods must work for an arbitrary-shaped NumPy array **w** (vector, matrix, \u2026); the L1 norm is always taken over **all** elements.\n\nIf **alpha = 0** the penalty and gradient must both be zero.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a Python float from __call__ and a NumPy array with the same shape as w from grad.\n"}
{"task_id": 282, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Online Mean, Variance and Standard Deviation\n# Description:\nIn many real-time analytics or reinforcement learning scenarios you only see one data point at a time, yet you still need an accurate estimate of the mean, variance and standard deviation of all the data that has appeared so far.  Re-computing these quantities from scratch each time is wasteful and, for very long streams, numerically unstable.\n\nYour task is to write a function `running_stats` that processes a sequence of scalar observations *once* and returns the **sample** mean, variance and standard deviation of the whole sequence.  The function **must** work in a single pass, i.e. you are not allowed to compute the mean or the variance by calling `sum`, `numpy.mean`, `numpy.var` or any other routine that needs to see the entire data set at once.  Instead implement the well-known *Welford* (or equivalent) online algorithm:\n\n1. Maintain a running counter `n` (the number of samples seen so far),\n2. Maintain a running mean `m`,\n3. Maintain a running \"sum of squares of differences from the current mean\" `s`.\n\nUpdating rules for a newly arrived value `x` are\n\n    n  \u2190 n + 1\n    delta  = x \u2212 m\n    m  \u2190 m + delta / n\n    s  \u2190 s + delta * (x \u2212 m)\n\nAfter all data have been processed the **sample** variance is `s / (n-1)` if `n > 1` (otherwise 0), and the standard deviation is the square root of that variance.\n\nReturn the three numbers rounded to 4 decimal places in the order `(mean, variance, std)`.\n\nThe function must work for any non-empty list of `int` or `float` values.\nIn case the input list is empty return `(0.0, 0.0, 0.0)`.\n# Your code should start with:\n```python\nimport math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll three returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 283, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Leaf Value and Gain\n# Description:\nIn gradient\u2013boosting algorithms every new tree is fitted to the negative gradient (first-order derivative) of a chosen loss function, and the value stored in a leaf is usually the *approximate* solution of a Newton step that also uses the Hessian (second-order derivative).  \n\nFor the binary classification case the most frequently used loss is the **binary cross-entropy (logistic) loss** defined for every sample i\n\n    L_i = \u2013[y_i\u00b7log p_i + (1\u2013y_i)\u00b7log (1\u2013p_i)],\n\nwhere y_i\u2208{0,1} is the true label, p_i is the predicted probability and the raw model score f_i is linked to the probability by the sigmoid function\n\n    p_i = 1 /(1+e^(\u2013f_i)).\n\nFor a given vector of true labels `actual` and raw scores `predicted`, let\n\n    g_i = \u2202L_i/\u2202f_i   (gradient)\n    h_i = \u2202\u00b2L_i/\u2202f_i\u00b2 (Hessian)\n\nFor the logistic loss these derivatives are\n\n    g_i = p_i \u2013 y_i\n    h_i = p_i\u00b7(1\u2013p_i).\n\nThe *approximate leaf value* and the *split gain* used in tree construction are then\n\n    leaf_value = \u03a3g_i / (\u03a3h_i + \u03bb)\n    gain       = 0.5\u00b7(\u03a3g_i)\u00b2 / (\u03a3h_i + \u03bb),\n\nwhere \u03bb\u22650 is the L2-regularisation term.\n\nWrite a function that receives `actual`, `predicted` and `regularization`, computes the above quantities, rounds them to 4 decimal places and returns them as a two-element list `[leaf_value, gain]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound both results to the nearest 4th decimal place and return them as a list `[leaf_value, gain]`.\n"}
{"task_id": 284, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Collision-Tolerant Index Hash Table\n# Description:\nIn Reinforcement Learning, **tile-coding** uses a small hash table, often called an *Index Hash Table* (IHT), to map arbitrary objects (mostly tuples that describe a state) to compact, consecutive integer indices.  \n\nThe table has a fixed capacity `size`.  \n\u2022 While the table is **not yet full** every new, unknown object is assigned the next free index `0,1,2, \u2026`.  \n\u2022 As soon as the table *is* full, no new entries can be stored.  Instead, the function must still return a valid index for the requested object by allowing *collisions*: it hashes the object with Python\u2019s built-in `hash` function and returns `hash(obj) % size`.  Every such collision increases a counter called `overfull_count`.  \n\u2022 If the caller sets the flag `readonly=True`, no insertion or collision is allowed \u2013 unknown objects simply return `None`.  \n\nYour task is to implement this behaviour in a single function `iht_get_index`.  The function operates **without using classes**. All information that has to survive between successive calls (the current mapping and the number of collisions) is supplied by the caller.  Because the mapping is mutated *in place*, the caller will usually keep a reference to it and reuse it for later calls.\n\nFunction signature\n    def iht_get_index(\n        obj: object,\n        size: int,\n        table: dict,\n        overfull_count: list[int],\n        readonly: bool = False,\n    ) -> int | None:\n\nParameters\nobj              \u2013 any hashable Python object that shall be mapped to an integer index.\nsize             \u2013 the fixed capacity of the index table (a positive integer).\ntable            \u2013 a dictionary that stores the mapping **object \u2192 index**; it is mutated in place.\noverfull_count   \u2013 a one-element list (e.g. `[0]`) keeping the current number of collisions; the single integer is mutated in place so that the caller can observe the change.\nreadonly         \u2013 if set to `True`, the function must never change either `table` or `overfull_count`.\n\nReturn value\n\u2022 The integer index that corresponds to `obj`, or `None` if `readonly` is `True` and the object is not yet in `table`.\n\nImportant details\n1. When the table is full (i.e. `len(table) >= size`), **do not** insert the new object.  Return `hash(obj) % size` and increment `overfull_count[0]` by one.\n2. Before the table is full, insert the new object with the index equal to the current table size (this keeps the indices consecutive starting at 0).\n3. If the object is already present in the table, always return the stored index (no side effects, no matter whether the table is full or `readonly` is `True`).\n# Your code should start with:\n```python\ndef iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturned value must be an int or None.  No other type is accepted.\n"}
{"task_id": 285, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Kernel Function\n# Description:\nImplement a function that computes the linear kernel (Gram matrix) between two data sets.\n\nFor two real-valued matrices \ud835\udc4b\u2208\u211d^{n\\_x\u00d7d} and \ud835\udc4c\u2208\u211d^{n\\_y\u00d7d}, the linear kernel is defined as\n\n\u2003\u2003K(\ud835\udc4b, \ud835\udc4c)=\ud835\udc4b \ud835\udc4c\u1d40.\n\nThe function must accept two NumPy arrays `x` and `y`, which can be either one-dimensional (a single sample) or two-dimensional (multiple samples). If either input is one-dimensional it should be reshaped to a row vector.\n\nRequirements\n1. If the feature dimensions (the second dimension after reshaping) of `x` and `y` differ, return **-1**.\n2. Otherwise compute the matrix product `x @ y.T` and return it as a Python list of lists using `tolist()`.\n\nExample\nInput  : x = np.array([[1, 2], [3, 4]]),\n         y = np.array([[5, 6], [7, 8]])\nOutput : [[17, 23], [39, 53]]\nReason  : The dot product matrix is [[1\u00b75+2\u00b76, 1\u00b77+2\u00b78], [3\u00b75+4\u00b76, 3\u00b77+4\u00b78]] = [[17,23],[39,53]].\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn the result as a nested Python list obtained via NumPy\u2019s `tolist()` method.\nReturn -1 when the feature dimensions of `x` and `y` do not match.\n"}
{"task_id": 286, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Dynamic Weight Initializer Retrieval\n# Description:\nIn many deep-learning and numerical libraries the user can specify the **name** of a weight-initialisation routine (e.g. \"zeros\", \"ones\", \"uniform\") and let the framework map that string to the actual Python function that creates the tensor.  \n\nYour task is to implement such a utility.\n\nImplement the function `get_initializer(name)` that receives a string and returns the corresponding *callable* weight-initializer that lives in the module\u2019s **global namespace**.\n\nThe module already contains three simple initializer functions:\n\u2022 `zeros_init(shape)`\u2003\u2013\u2002returns a matrix of zeros of a given shape (tuple `(rows, cols)`).\n\u2022 `ones_init(shape)`\u2003\u2013\u2002returns a matrix of ones of a given shape.\n\u2022 `random_uniform_init(shape, low = 0.0, high = 1.0, seed = 42)` \u2013 returns a matrix whose elements are drawn uniformly from the interval `[low , high]` (the default seed keeps the result deterministic).\n\n`get_initializer` must:\n1. Look for an object whose **name** matches the supplied string inside `globals()`.\n2. Make sure that the found object is *callable*.\n3. Return the callable if it exists.\n4. Otherwise raise a `ValueError` with the exact message:\n   \n   ``Invalid initialization function.``\n\nExample\n-------\nInput:\nname = \"ones_init\"  \nshape = (2, 2)\n\nExecution:\n```\ninit_fn = get_initializer(name)      # returns the function ones_init\noutput  = init_fn(shape)             # [[1.0, 1.0], [1.0, 1.0]]\n```\n\nOutput: \n``[[1.0, 1.0], [1.0, 1.0]]``\n# Your code should start with:\n```python\nimport random\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    # TODO: complete implementation in the reference solution\n    pass\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    # TODO: complete implementation in the reference solution\n    pass\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    # TODO: complete implementation in the reference solution\n    pass\n\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nThe returned object must be a callable. When this callable is executed it should strictly follow the behaviour described for each initializer.\n"}
{"task_id": 287, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement 2-D Average Pooling Forward & Backward Pass\n# Description:\nIn convolutional neural networks, **average pooling** downsamples an input feature map by sliding a fixed-size window over it and replacing every window with the arithmetic mean of its elements. During back-propagation the gradient that arrives at the pooled output must be distributed _equally_ to every element that took part in each average.\n\nWrite a function that performs **both** the forward and the backward pass of a 2-D average-pooling layer.\n\nForward pass\n  \u2022 Input  X \u2013 a 4-D NumPy array with shape (N, C, H, W) where N is the batch size, C the number of channels, and H\u00d7W the spatial dimensions.\n  \u2022 A pooling window size  pool_shape = (p_h, p_w).\n  \u2022 A stride  stride = (s_h, s_w).\n\nBackward pass\n  \u2022 accum_grad \u2013 a NumPy array with shape identical to the forward output. It stores the gradient of the loss with respect to every pooled value.\n\nYour function must\n 1. Compute the pooled output.\n 2. Propagate the gradient back to the input, i.e. return an array `grad_input` that has the same shape as **X** and whose entries are the sum of all gradients that flow through them.\n 3. Round **both** returned arrays to the nearest 4-th decimal and convert them to Python lists with `tolist()`.\n\nIf the provided shapes do not match (for instance the window does not fit when stepping with the given stride) you may assume that inputs are always valid (no need for error handling).\n# Your code should start with:\n```python\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry of the returned NumPy arrays to the nearest 4-th decimal and convert them to Python lists using `tolist()`. The function must return a **tuple** `(output, grad_input)`.\n"}
{"task_id": 288, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Squared Error Calculator\n# Description:\nThe **Mean Squared Error (MSE)** is one of the most widely\u2013used regression loss functions.  \nWrite a Python function that computes the MSE between two equally-sized numeric sequences, or the squared error between two individual numbers.\n\nFunction requirements\n1. The function receives two arguments (`actual` and `predicted`). Each argument can be\n   \u2022 a single number (int or float) \u2013\u2013\u2013> return the squared difference `(actual-predicted)^2`  \n   \u2022 a one-dimensional iterable (Python list / tuple or NumPy 1-D array) \u2013\u2013\u2013> return `mean((actual_i \u2013 predicted_i)^2)`.\n2. If the inputs are iterables they must have identical length (>0).  \n   \u2022 If the lengths differ or either iterable is empty, return **-1**.  \n3. The final result has to be rounded to the nearest 4th decimal place using Python\u2019s `round` (e.g. `round(value, 4)`).\n# Your code should start with:\n```python\nimport numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 289, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Format Field Entries\n# Description:\nYou are given a list called entries. Each element of entries is a 2-tuple where the first item is a field name (a string) and the second item is the field\u2019s value (also a string).\n\nWrite a function that formats every pair following the pattern\n\n    field: \"value\"\n\nand returns one single string that contains all the formatted pairs separated by a newline (\"\\n\").\n\n\u2022 If entries is empty, return the empty string \"\".\n\u2022 Do NOT add an extra newline after the last pair.\n\nExample\n-------\nInput\n    entries = [(\"username\", \"john_doe\"), (\"password\", \"s3cr3t\")]\n\nOutput\n    username: \"john_doe\"\n    password: \"s3cr3t\"\n# Your code should start with:\n```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    # Write your solution here\n    ...\n```\n# Output Constraints:\nReturn a single string with every pair on its own line separated by an exact single newline character (\"\\n\"). Do not print anything and do not add an extra newline at the end of the string.\n"}
{"task_id": 290, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compare Two Decision Trees\n# Description:\nYou are given two binary decision trees that are built from the following very small internal representation:\n\n1. Node \u2013 an internal (non-terminal) node that contains\n   \u2022 feature (int): the index of the feature to test\n   \u2022 threshold (float): the threshold that splits the data\n   \u2022 left  (Node | Leaf): the left child (samples with feature value < threshold)\n   \u2022 right (Node | Leaf): the right child (samples with feature value \u2265 threshold)\n\n2. Leaf \u2013 a terminal node that contains\n   \u2022 value (int | float | np.ndarray | list[float]):  the prediction produced by the tree in that region\n\nTwo trees are considered *equivalent* when\n\u2022 they have exactly the same shape (internal nodes at the same places, leaves at the same places),\n\u2022 all internal nodes use the same feature index, and their thresholds are numerically equal up to a tolerance of 1 \u00d7 10\u207b\u2078,\n\u2022 all leaf values are equal within the same tolerance (use numpy.allclose).\n\nWrite a function `compare_trees(tree_a, tree_b)` that returns **True** if the two trees are equivalent and **False** otherwise.  You may assume that `tree_a` and `tree_b` are composed only of the classes `Node` and `Leaf` given in the starter code.\n\nYou must solve the task **recursively** \u2013 do not use any global variables, loops, or external libraries other than *numpy* and *dataclasses*.\n# Your code should start with:\n```python\nimport numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn the boolean built-in objects *True* or *False* only (not 0/1, strings, etc.).\n"}
{"task_id": 291, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Principal Component Analysis \u2013 first n component projection\n# Description:\nPrincipal Component Analysis (PCA) is a popular technique for linear dimensionality reduction.  In this task you must write a function that projects a data matrix X onto the first n principal components.\n\nThe algorithm to implement is the classical (non-standardised) PCA:\n1. Let X be an m\u00d7d NumPy array where m is the number of samples and d the number of features.\n2. Compute the d\u00d7d sample covariance matrix \u03a3 of X (use `np.cov` with `rowvar=False`).\n3. Find the eigenvalues \u03bb and corresponding eigenvectors v of \u03a3 with `np.linalg.eig`.\n4. Order the eigenpairs from the largest to the smallest eigenvalue.\n5. Keep the first n eigenvectors (n principal components).  For a deterministic sign, multiply an eigenvector by \u22121 whenever its first element is negative.\n6. Return X projected on the selected components, i.e. `X @ V`, rounded to 4 decimal places and converted to a regular Python `list` (use `tolist()`).\n\nInput validation rules\n\u2022 If `n_components` is not in the interval `[1, d]` return **-1**.\n\nThe function must not rely on any third-party libraries other than NumPy.\n# Your code should start with:\n```python\nimport numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal using `np.round(array, 4)` and the final result must be a Python list (use the NumPy `tolist()` method).\n"}
{"task_id": 292, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single-Point Column Crossover for Neural-Network Weights\n# Description:\nIn many evolutionary and genetic-algorithm based neuro-evolution systems, the weights of two parent neural networks are mixed to create new offspring.  A very common operator is the single\u2013point column crossover: a random cut\u2013off column is drawn and all columns **after** that cut-off are swapped between the two parents.\n\nWrite a Python function that performs this single-point column crossover for a single layer\u2019s weight matrix.\n\nThe function must\n1. accept two 2-D weight matrices (``parent1`` and ``parent2``) of identical shape and an integer ``cutoff``,\n2. validate that the two parent matrices have the same shape; if not, return **-1**,\n3. create two new children matrices:\n   \u2022 every column **before** ``cutoff`` is copied from its own parent,\n   \u2022 every column **from** ``cutoff`` (inclusive) to the end is copied from the **other** parent,\n4. return a tuple ``(child1, child2)`` where each child is provided as a nested Python list obtained with NumPy\u2019s ``tolist`` method.\n\nNotes\n\u2022 ``cutoff`` is allowed to be ``0`` (swap all columns) or equal to the number of columns (swap none).\n\u2022 Use NumPy for fast slicing but make sure to convert the final results back to ordinary Python lists.\n\u2022 Do **not** modify the input parents in-place.\n# Your code should start with:\n```python\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple whose two elements are the children matrices represented as ordinary Python lists.\n"}
{"task_id": 293, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: RL Agent Environment Mapper\n# Description:\nYou are given the abbreviated name of a reinforcement-learning (RL) agent.  Different agents are traditionally trained on different OpenAI-Gym environments as shown in the table below (taken from the `RLApplication` code of the prompt).\n\nAgent name (case\u2013insensitive) | Environment | Access type\n----------------------------- | ----------- | -----------\n`dqn`                         | `CartPole-v0` | `unwrapped`\n`ddpg`                        | `Pendulum-v0` | `env`\n`a3c`                         | `Pendulum-v0` | `unwrapped`\n`a2c`                         | `CartPole-v0` | `env`\n`a2c_multi`                   | `CartPole-v0` | `raw`\n`trpo`                        | `Pendulum-v0` | `unwrapped`\n\nWrite a function that, given an agent name, returns a tuple *(environment_name, access_type)* that indicates which environment should be created for that agent and which attribute (if any) should be accessed afterwards.\n\nIf the supplied name does not match any of the agents above, return **-1** instead of a tuple.\n\nThe function must ignore leading/trailing spaces and be case-insensitive.\n# Your code should start with:\n```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple `(environment_name, access_type)` for valid agents; return -1 for unknown agents.\n"}
{"task_id": 294, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Convert Custom Graph to Adjacency Dictionary\n# Description:\nIn many projects graphs are stored in specialised classes or nested containers, but sometimes you have to export them to a plain-Python structure that can easily be serialised or inspected.  \n\nThe custom graph that we want to convert is represented by a **dictionary** `G` with the following fields:\n  * `G['is_directed']` \u2013 a Boolean flag that is **True** when the graph is directed.\n  * `G['_V2I']` \u2013 a dictionary that maps every vertex label to a unique, consecutive integer index starting from **0**.\n  * `G['_G']` \u2013 a list whose *i-th* element stores all outgoing edges of the vertex whose label is the *i-th* key of `G['_V2I']`.  Each edge is a tuple `(source_label, target_label, weight)`.\n\nYour task is to write a function `to_networkx` that converts such a graph into a plain adjacency dictionary `adj` with the following properties:\n  * Every key of `adj` is a vertex label.\n  * `adj[u]` is a list of tuples `(v, w)` describing an edge **u \u2192 v** with weight **w**.\n  * If the input graph is **undirected** every edge must appear **exactly once in each direction** even when the internal storage already contains both copies.\n  * The neighbour lists have to be **sorted alphabetically** by the neighbour label to make the output deterministic.\n  * Vertices without incident edges must still occur in the resulting dictionary with an empty list.\n\nReturn the resulting adjacency dictionary.  An empty dictionary should be returned for a graph with no vertices.\n# Your code should start with:\n```python\nfrom typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nNeighbour lists must be sorted in lexicographical order by the neighbour label.\n"}
{"task_id": 296, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Array Validator\n# Description:\nGiven a NumPy array `x`, write a function that verifies whether **all** elements of `x` are binary (only `0` or `1`). The function must return `True` if the array is binary and `False` otherwise. The function has to work for integer, float, or boolean arrays of any shape.\n\nA value is considered *binary* if it is numerically equal to either `0` or `1`. For boolean arrays, both `True` and `False` are acceptable since they correspond to `1` and `0`, respectively.\n# Your code should start with:\n```python\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn the Python built-in `bool` value `True` or `False` only.\n"}
{"task_id": 297, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Min\u2013Max Scaling\n# Description:\nMin\u2013Max scaling (also called normalisation) linearly rescales every feature column of a data set so that the minimum value of each column becomes the lower bound of a user\u2013defined interval and the maximum value becomes the upper bound.  For an original value $x$ in column $j$ the rescaled value $x_{scaled}$ is computed as  \n\n$$x_{scaled}=\\bigl(\\frac{x-\\min_j}{\\max_j-\\min_j}\\bigr)\\times (b-a)+a,$$\n\nwhere $a$ and $b$ are respectively the desired minimum and maximum of the new scale.\n\nWrite a function that performs Min\u2013Max scaling on a 2-D numerical data set.\n\nRequirements\n1. The input data are provided as a (nested) Python list where each inner list is a sample and each column represents a feature.\n2. The argument `feature_range` is a tuple `(a,b)` with the desired lower (`a`) and upper (`b`) bounds.  If `a \\ge b` the function must immediately return **-1**.\n3. If a feature column is constant (i.e. `max == min`) treat its range as `1` so every value in that column becomes the lower bound `a`.\n4. Before returning, round every element to four decimal places and convert the NumPy result back to a plain Python list via `tolist()`.\n5. Any `nan`, `inf` or `-inf` that might appear during the computation must be replaced with `0.0` (use `numpy.nan_to_num`).\n# Your code should start with:\n```python\nimport numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a Python list (not a NumPy array) whose elements are rounded to 4 decimal places.\n"}
{"task_id": 298, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Maximum Likelihood N-gram Log-Probability Calculator\n# Description:\nImplement a function that trains a Maximum-Likelihood-Estimation (MLE) N-gram language model on a small corpus and then returns the total log-probability of a query sentence.\n\nGiven\n1. a corpus \u2013 a list whose elements are individual sentences (strings),\n2. a query \u2013 the sentence whose probability you want to evaluate, and\n3. an integer N (\u2265 1) \u2013 the order of the N-gram model to build,\n\nthe function must\n\u2022 split every sentence on white-space to obtain tokens;\n\u2022 for N > 1 pad each token sequence with N\u22121 special tokens \u201c<bol>\u201d at the beginning and one \u201c<eol>\u201d at the end; no padding is used for unigrams;\n\u2022 count N-grams as well as their (N\u22121)-gram prefixes over the whole corpus;\n\u2022 compute the MLE conditional probability\n      P(w_N | w_1\u2026w_{N\u22121}) = count(w_1\u2026w_N) / count(w_1\u2026w_{N\u22121})\n  (for unigrams the denominator is the total number of tokens);\n\u2022 return the sum of natural logarithms of these probabilities for every consecutive N-gram in the *padded* query sentence, rounded to 4 decimal places;\n\u2022 return float('-inf') (negative infinity) if any N-gram needed for the query has zero probability (unseen in the corpus) or if the query is too short for the requested N.\n\nExample\nCorpus: [\"a b a\", \"b a b\"]\nQuery : \"a b\"\nN     : 1\n\nToken counts \u2192 a:3, b:3, total:6\nP(a) = 3/6, P(b) = 3/6\nlog-probability = ln(0.5)+ln(0.5) = \u20131.3863 (rounded)\n\nHence the function returns \u20131.3863.\n# Your code should start with:\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound the final log-probability to 4 decimal places. If the probability is zero, return float('-inf').\n"}
{"task_id": 299, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means Clustering from Scratch\n# Description:\nImplement the K\u2013Means clustering algorithm **from scratch**.  \nGiven a data set `X \\in \\mathbb{R}^{m\\times n}` (a 2-D NumPy array containing `m` samples and `n` features) and an integer `k`, form *k* clusters by repeatedly\n1. assigning every sample to the closest centroid (Euclidean distance) and\n2. recomputing each centroid as the mean of all samples that currently belong to that cluster.\n\nThe algorithm must\n\u2022 initialise the centroids with the **first** `k` samples of `X` (to keep the results deterministic);\n\u2022 stop when the centroids no longer change or when `max_iterations` iterations have been performed (default `500`);\n\u2022 return a Python `list` of length `m` whose *i*-th element is the cluster index (an `int` in the range `[0,k-1]`) assigned to the *i*-th sample.\n\nIn cases where a cluster becomes empty, keep its centroid unchanged for the rest of the algorithm (this avoids division-by-zero problems and keeps the output deterministic).\n# Your code should start with:\n```python\nimport numpy as np\nfrom __future__ import annotations\n\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a plain Python list of ints whose length equals the number of rows of `X`.\n"}
{"task_id": 300, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bounded Top-k Elements via Heap\n# Description:\nGiven a list of numerical values that arrives as a stream, write a function that continuously keeps only the top-k elements according to their magnitude.\n\nYour task is to implement a function top_k_elements(sequence, k, order=\"largest\") that scans the input list exactly once and returns the k largest or k smallest elements (depending on order). The algorithm must use a binary heap from Python\u2019s built-in heapq module so that the memory footprint never exceeds O(k) and each push/pop operation costs O(log k).\n\nRules\n1. order can be either \"largest\" or \"smallest\".\n2. When order == \"largest\" the returned list has to be sorted in non-increasing order (largest \u2192 smallest).\n3. When order == \"smallest\" the returned list has to be sorted in non-decreasing order (smallest \u2192 largest).\n4. If k \u2264 0 or the input sequence is empty return an empty list.\n5. If k \u2265 len(sequence) simply return the whole sequence sorted according to the chosen order.\n# Your code should start with:\n```python\nimport heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str = \"largest\") -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    # TODO: Implement the function here\n    pass\n```\n# Output Constraints:\nThe returned list must contain at most k numbers sorted according to the chosen order (see Rules 2-3).\n"}
{"task_id": 301, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Search Tree In-order Traversal of Node Objects\n# Description:\nYou are given the definition of a Node object whose comparison operators (>, >=, <, <=) are implemented on the stored numeric value (attribute `val`).  \n\nYour task is to write a function that receives a list of `(key, value)` pairs, builds a binary search tree (BST) out of **Node** objects ordered by `value`, and finally returns the keys obtained from an *in-order* traversal of that tree.\n\nRules for building the BST\n1. The very first pair forms the root of the tree.\n2. For every subsequent pair you must create a `Node` and insert it\n   \u2022 go left if the new node is **strictly smaller** than the current node.\n   \u2022 otherwise ( `>=` ) go right.  \n3. The provided comparison operators of **Node** must be used (do **not** compare the raw numbers directly).\n\nThe in-order traversal visits nodes in strictly non-decreasing order of their stored values, so the resulting list of keys must also appear in this order.\n\nIf the input list is empty, return an empty list.\n# Your code should start with:\n```python\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of keys in the order they are visited during in-order traversal.  Do not print anything.\n"}
{"task_id": 302, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Spectral Clustering from Scratch\n# Description:\nImplement the Spectral Clustering algorithm from scratch.  The function receives a set of data points X\u2208\u211d^{n\u00d7d} and the desired number of clusters k.  The algorithm should:\n1. Build a weighted adjacency matrix W where the weight between two points is defined as  w_{ij}=1/(1+\u2016x_i\u2212x_j\u2016_2)  (the diagonal must be 0 so a point is not connected to itself).\n2. Compute the (unnormalised) graph Laplacian  L=D\u2212W,  where  D  is the diagonal degree matrix  D_{ii}=\u2211_j w_{ij}.\n3. Obtain the first k eigenvectors (those associated with the k smallest eigen-values) of L and stack them column-wise into the projection matrix E\u2208\u211d^{n\u00d7k}.\n4. Run k-means on the rows of E using the very first k rows of E as the initial centroids (this keeps the implementation deterministic).  Use Euclidean distance, iterate until the assignments stop changing or a maximum of 100 iterations is reached.  If a cluster becomes empty, re-initialise its centroid with a random row of E.\n5. Return the resulting cluster labels as a Python list (not a NumPy array).\n\nAll intermediate steps must be implemented manually; external libraries such as scikit-learn, TensorFlow, PyTorch, etc. are not allowed.  Only NumPy may be used for numerical operations.\n# Your code should start with:\n```python\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n```\n# Output Constraints:\nReturn a Python list whose length equals the number of samples in X and whose values are integers in the range [0,k\u22121].\n"}
{"task_id": 303, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Error Message Formatter\n# Description:\nYou are given a list called `params` that stores tuples of the form `(mine, label)` where\n  \u2022 `mine`  \u2013 your program\u2019s current output for this label\n  \u2022 `label` \u2013 a unique identifier for the current test case  \nYou are also given a dictionary called `golds` that maps each `label` to the **expected** (gold-standard) output, an integer `ix` that tells you which element of `params` you want to inspect, and an optional string `warn_str` that can contain an additional warning message.\n\nWrite a function that produces a single, well-formatted, multi-line debugging string with the following exact layout:\n\n```\n------------------------- DEBUG -------------------------   <- 25 dashes on both sides\nMine (prev) [<prev_label>]:\n<prev_mine>\n\nTheirs (prev) [<prev_label>]:\n<golds[prev_label]>\n\nMine [<curr_label>]:\n<curr_mine>\n\nTheirs [<curr_label>]:\n<golds[curr_label]><warn_str>\n----------------------- END DEBUG -----------------------   <- 23 dashes on both sides\n```\n\nwhere\n\u2022 `prev_label`, `prev_mine` refer to the element at index `max(ix-1, 0)` in `params` (so for `ix = 0` the *previous* element is the first element itself).\n\u2022 `curr_label`, `curr_mine` refer to the element at index `ix`.\n\u2022 `warn_str` is appended **exactly as it is passed** (it may start with a new-line or not).\n\nReturn the final string.  No other text, spacing, or line breaks are permitted.\n# Your code should start with:\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nThe output must match the required format **exactly**, including:\n\u2022 precise number of dashes (25 and 23)\n\u2022 all line breaks (`\\n`)\n\u2022 no extra spaces\n\u2022 `warn_str` must appear exactly as provided.\n"}
{"task_id": 304, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Posterior Mean of Bayesian Linear Regression Coefficients\n# Description:\nImplement a function that computes the posterior mean (i.e., the Maximum\u2013A-Posteriori estimate) of the regression coefficients in Bayesian linear regression with an unknown noise variance. \n\nThe model assumes\n\u2022 a normal\u2013inverse-gamma conjugate prior on the coefficients **b** and the noise variance \u03c3\u00b2  \n\u2022 a Gaussian likelihood with identity noise covariance.\n\nPrior\n    \u03c3\u00b2  ~  InverseGamma(\u03b1, \u03b2)  \n    b | \u03c3\u00b2 ~  \ud835\udca9(\u03bc , \u03c3\u00b2 V)\n\nGiven a training design matrix X (with N samples and M features), a target vector y and the hyper-parameters (\u03b1, \u03b2, \u03bc, V), the closed-form posterior parameters are\n    V\u207b\u00b9     =  (V)\u207b\u00b9                      (if V is a scalar or a diagonal list, convert accordingly)\n    \u03a3_b     =  (V\u207b\u00b9 + X\u1d40X)\u207b\u00b9             (posterior covariance up to \u03c3\u00b2)\n    \u03bc_b     =  \u03a3_b ( V\u207b\u00b9 \u03bc + X\u1d40y )        (posterior mean of the coefficients)\n\nBecause \u03c3\u00b2 is unknown, its exact value is not required to obtain \u03bc_b \u2013 it cancels in the MAP estimate.  \nReturn \u03bc_b rounded to 4 decimal places.  \nThe function must optionally add an intercept column to X when `fit_intercept=True` and must work with the following accepted prior specifications:\n\u2022 V omitted \u2192 identity  \n\u2022 V given as scalar \u2192 scalar\u00d7identity  \n\u2022 V given as list/tuple \u2192 treated as a diagonal  \n\u2022 \u03bc given as scalar \u2192 broadcast to a vector of length M (or M+1 when an intercept is fitted)\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nRound every returned coefficient to the nearest 4th decimal.\n"}
{"task_id": 305, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numerically Stable Sigmoid Function\n# Description:\nImplement the numerically-stable logistic sigmoid activation function that is widely used in neural networks such as the Restricted Boltzmann Machine shown in the code snippet.  \n\nThe function must accept a scalar, list, tuple or NumPy array containing real numbers and return a Python **list** with the element-wise sigmoid values rounded to **4 decimal places**.\n\nFor a real number $x$ the sigmoid is defined as  \n$\\displaystyle\\sigma(x)=\\frac{1}{1+e^{-x}}$.  \nWhen $|x|$ is large na\u00efvely evaluating $e^{-x}$ may overflow.  To avoid this, use the following stable formulation:\n\u2022 If *x \u2265 0*:  $\\sigma(x)=\\dfrac{1}{1+e^{-x}}$ (safe because $e^{-x}$ is not huge)  \n\u2022 If *x < 0*:   $\\sigma(x)=\\dfrac{e^{x}}{1+e^{x}}$ (safe because $e^{x}$ is very small)\n\nReturn the values as a **Python list** after rounding.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places and return a Python list.\n"}
{"task_id": 307, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bootstrap Sampling\n# Description:\nIn many ensemble algorithms\u2014most notably Bagging and Random Forests\u2014individual learners are trained on **bootstrap samples**: data sets created by drawing, *with replacement*, from the original data.  \n\nWrite a function that generates one such bootstrap sample.  Given a feature matrix `X` (NumPy array of shape `(n_samples, \u2026)`) and the associated target vector `y` (NumPy array of shape `(n_samples,)`), the function must:\n\n1. Draw `n_samples` indices uniformly at random **with replacement** from the set `{0,\u2026,n_samples\u22121}`.\n2. Return `X[idxs]` and `y[idxs]`, where `idxs` is the index array created in step&nbsp;1.\n\nThe two returned arrays **must keep exactly the same shapes** as the inputs.\n\nIf `np.random.seed` is set before calling the function the result has to be reproducible (because the implementation must rely solely on NumPy\u2019s global RNG).\n# Your code should start with:\n```python\nimport numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nThe two returned objects must be NumPy arrays having the same shapes as `X` and `y`.\n"}
{"task_id": 308, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mel Filterbank Matrix Construction\n# Description:\nIn speech and audio processing a spectrogram is usually first converted into so\u2013called Mel\u2013frequency bands.  \nA Mel filterbank is a **non\u2013linear set of triangular filters** that are laid out on the Mel scale \u2013 a perceptual scale that gives high resolution to low frequencies and low resolution to high frequencies.  \nGiven a discrete Fourier transform (DFT) length `N`, the function must create the complete transformation matrix *F* so that a power spectrum vector `P` (length `N//2+1`) can be converted into Mel band energies with a simple matrix multiplication `M = F @ P`.\n\nThe function has to work exactly like the reference implementation below and must obey the following specification:\n\n\u2022 Convert limits expressed in Hertz to the Mel scale and generate `n_filters+2` equally\u2013spaced values on the Mel axis.  \n\u2022 Convert those Mel values back to Hertz \u2013 these are the (n_filters+2) corner frequencies of the triangular filters.  \n\u2022 For every DFT bin `k` (whose centre frequency is `k*fs/N`) and every Mel filter `i` compute the left\u2010hand and right\u2010hand slopes of the triangle and keep the *positive* minimum of both \u2013 this is the weight for filter `i` and bin `k`.  \n\u2022 If `normalize` is true scale every filter by\n$$w_i\\;\\leftarrow\\;\\frac{2}{f_{i+2}-f_{i}}\\;w_i$$\nso that its area in Mel space equals 1.  \n\u2022 Return the complete filterbank as a plain Python list whose shape is `(n_filters,\\;N//2+1)`.\n\nIf `max_freq` is omitted it must default to the Nyquist frequency `fs/2`.\n\nThe helper conversions are\n```text\nmel = 2595 * log10(1 + f/700)            # Hz \u2192 Mel\nf   = 700 * (10**(mel/2595) - 1)          # Mel \u2192 Hz\n```\n\nWhen the job is done you will be able to reproduce the filterbank that packages such as LibROSA compute.\n# Your code should start with:\n```python\nimport numpy as np\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list (not a NumPy array).  Every element must be rounded to 4 decimal places.\n"}
{"task_id": 309, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Factorization Machine Prediction\n# Description:\nFactorization Machines (FM) are a general-purpose supervised learning model that combines a linear model with efficient modelling of pair-wise feature interactions.  For a data matrix $X\\in\\mathbb{R}^{m\\times n}$, a bias $w_0\\in\\mathbb{R}$, a linear weight vector $w\\in\\mathbb{R}^n$ and a factor matrix $V\\in\\mathbb{R}^{n\\times k}$ the FM prediction for every sample $x\\_i$ (row of $X$) is given by  \n$$\\hat y\\_i\\;=\\;w_0\\; +\\;\\langle w,\\,x\\_i\\rangle\\; +\\;\\frac12\\sum\\_{f=1}^{k}\\Big((x\\_i^T v\\_{\\*f})^2- (x\\_i^{\\odot 2})^T v\\_{\\*f}^{\\odot 2}\\Big),$$  \nwhere $v\\_{\\*f}$ denotes the $f$-th column of $V$ and $\\odot$ is the element-wise product.  \nYour task is to implement this prediction formula.\n\nThe function must  \n1. accept a NumPy feature matrix `X`, a scalar bias `w0`, a NumPy 1-D array `w`, and a NumPy 2-D array `v`;  \n2. return a Python `list` containing the FM prediction for every sample;  \n3. round every predicted value to **four** decimal places before returning.\n\nIf the input shapes are inconsistent (i.e. the number of columns of `X` does not match the length of `w` or the first dimension of `v`) you may assume that the inputs are always valid and do **not** need to handle errors.\n# Your code should start with:\n```python\nimport numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a ``list`` of floats rounded to 4 decimal places.\n"}
{"task_id": 310, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Root Mean Squared Error Calculation\n# Description:\nRoot Mean Squared Error (RMSE) is one of the most common metrics used to measure the difference between values predicted by a model and the values actually observed.  Your task is to write a Python function that computes the RMSE between two equally\u2013sized numeric sequences.\n\nThe function must:\n1. Accept two arguments \u2013 `actual` and `predicted` \u2013 each a one-dimensional list (or NumPy array) of integers/floats.\n2. Validate that the two inputs have the **same non-zero length**.  If this condition is violated, return **-1**.\n3. Compute the RMSE using the formula\n   \n   RMSE = \\(\\sqrt{\\dfrac{1}{n}\\sum_{i=1}^{n}(y_i-\\hat{y}_i)^2}\\)\n4. Round the resulting value to **4 decimal places** and return it as a Python float.\n\nDo **not** use any third-party libraries such as *scikit-learn*; rely only on NumPy for numerical work.\n# Your code should start with:\n```python\nimport numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single Python float rounded to the nearest 4th decimal.\n"}
{"task_id": 311, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Clip Negative Values to Zero\n# Description:\nImplement a function that forces every element in a numeric container to be non-negative.  The function must take either a Python list (possibly nested to represent an N-dimensional tensor) or a NumPy array and replace every strictly negative value with 0.0.  The return value must be a **Python list** with the same nested structure and element order as the input.\n\nThe task mimics the behaviour of the `clip` method in the given code snippet but asks you to provide a functional (non-OOP) solution that works for arbitrary dimensions.\n\nNotes\n1. The function must perform the replacement in vectorised form using NumPy \u2013 do **not** use explicit Python loops.\n2. The output list must contain floating-point numbers (even if all inputs are integers).\n3. The original input must **not** be modified in-place when it is a NumPy array; instead create a copy, apply the clipping, and return the clipped copy as a list.\n# Your code should start with:\n```python\nimport numpy as np\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    # Write your solution here\n    pass\n```\n# Output Constraints:\nReturn a Python list (obtained with NumPy\u2019s `tolist()` method) containing only floating-point numbers.\n"}
{"task_id": 312, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Blackman\u2013Harris Window Generator\n# Description:\nWrite a Python function that generates a Blackman\u2013Harris window of arbitrary length.\n\nA window function is often multiplied with a finite-length signal before an FFT is taken in order to reduce spectral leakage.  The Blackman\u2013Harris window is a popular member of the cosine-sum family (here with K = 3).  Given a desired window length $L$ in samples, its samples are defined by\n\n$$\n\\operatorname{BH}(n)=a_0-a_1\\cos\\left(\\frac{2\\pi n}{N}\\right)\n           +a_2\\cos\\left(\\frac{4\\pi n}{N}\\right)\n           -a_3\\cos\\left(\\frac{6\\pi n}{N}\\right),\\qquad n=0,1,\\dots,L-1,\\quad N=L-1,\n$$\nwhere the fixed coefficients are\n\n$a_0=0.35875\\;,\\;a_1=0.48829\\;,\\;a_2=0.14128\\;,\\;a_3=0.01168.$\n\nTwo slightly different variants are common:\n\u2022 Symmetric\u2003(used for FIR filter design.)  \n\u2022 Periodic\u2003  (used for FFT-based spectral analysis.)\n\nFor the periodic form the window is conceptually generated with length $L+1$ and the last value discarded; this makes the first and last value identical so the window tiles seamlessly when wrapped for an $L$-point FFT.\n\nYour task is to implement a function\n\nblackman_harris(window_len: int, symmetric: bool = False) -> list[float]\n\nthat produces the requested variant and returns the window as a Python list rounded to 4 decimals.\n\nSpecial cases\n\u2022 If window_len \u2264 0\u2003\u2192\u2003return an empty list.  \n\u2022 For window_len == 1\u2003\u2192\u2003return [1.0] whatever the variant.\n# Your code should start with:\n```python\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # TODO: implement the function here\n```\n# Output Constraints:\nAll values must be rounded to the nearest 4th decimal place and the result returned as a Python list.\n"}
{"task_id": 313, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Expected Logarithm of Dirichlet Components\n# Description:\nIn Bayesian models that use Dirichlet\u2013multinomial components (for example in Latent Dirichlet Allocation) the quantity \ud835\udd3c[log X\u209c] frequently appears, where X follows a Dirichlet distribution with parameters \u03b3 (often noted \"gamma\").  When \u03b3 is represented as a 2-D matrix, the element \u03b3[d,t] corresponds to the *t*-th component of the *d*-th sample (or document).\n\nFor a Dirichlet random variable X \u223c Dir(\u03b3[d,:]) the expectation of the logarithm of its *t*-th component is\n\n    \ud835\udd3c[log X\u209c] = \u03c8(\u03b3[d,t]) \u2212 \u03c8( \u2211\u2096 \u03b3[d,k] ) ,\n\nwhere \u03c8(\u00b7) is the digamma (first derivative of log-Gamma) function.\n\nWrite a function that\n1. accepts\n   \u2022 gamma \u2013 a 2-D list or NumPy array containing the Dirichlet parameters (all positive numbers)\n   \u2022 d     \u2013 the row index (0-based)\n   \u2022 t     \u2013 the column index (0-based)\n2. computes the above expectation using the formula above,\n3. rounds the result to four (4) decimal places and returns it as a Python float.\n\nBecause external scientific libraries are not allowed, you must implement the digamma function yourself.  A simple and accurate strategy is:\n\u2022 Use the recursion \u03c8(x) = \u03c8(x+1) \u2212 1/x to shift small x up to a moderate value (e.g. 6).\n\u2022 Apply the asymptotic expansion\n     \u03c8(x) \u2248 ln x \u2212 1/(2x) \u2212 1/(12x\u00b2) + 1/(120x\u2074) \u2212 1/(252x\u2076)\n  to obtain a good approximation for the remaining (now large) x.\n\nIf the provided indices are outside the matrix dimensions your code may assume no call will be made (no need to handle this explicitly).\n# Your code should start with:\n```python\nimport math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # =====  Write your code below this line  =====\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 315, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Retrieve Standard Loss Functions\n# Description:\nImplement a helper that returns **ready-to-use loss functions by name**.  \nThe system must support three widely\u2013used losses:\n1. Mean Absolute Error (MAE)\n2. Mean Squared Error (MSE)\n3. Binary Cross Entropy (also called *log-loss*)\n\nThe rules that **get_loss** has to follow:\n\u2022 The search is *case\u2013insensitive* and ignores extra underscores, so strings like \"MAE\", \"mean_absolute_error\" or \"MeanAbsoluteError\" must all resolve to the very same MAE routine.  \n\u2022 Accepted aliases are:\n    \u2013 MAE  \u2192 \"mae\", \"mean_absolute_error\"  \n    \u2013 MSE  \u2192 \"mse\", \"mean_squared_error\"  \n    \u2013 Cross Entropy \u2192 \"cross_entropy\", \"log_loss\", \"ce\"  \n\u2022 When the requested name cannot be resolved the function must raise **ValueError** with the message exactly equal to `\"Invalid loss function.\"` (note: the reference solution accomplishes this by simply looking the canonicalised name up in a dictionary).\n\nEvery loss routine returned by **get_loss** is itself a callable expecting two equally-sized 1-D containers (Python lists or NumPy arrays) `y_true` and `y_pred` and must return a `float` that is **rounded to four decimal places**:\n\u2022 MAE   \u2192  mean(|y_true \u2013 y_pred|)  \n\u2022 MSE   \u2192  mean((y_true \u2013 y_pred)\u00b2)  \n\u2022 CE    \u2192  \u2212mean(y\u00b7log(p) + (1\u2212y)\u00b7log(1\u2212p)), with predictions clipped to `[1e-15, 1-1e-15]` to avoid log(0).\n\nYou are allowed to use only the standard library and NumPy.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 316, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Euclidean Distance Between Vectors\n# Description:\nImplement a Python function that computes the Euclidean (L2) distance between two real vectors.  The function should work with either Python lists/tuples or 1-D NumPy arrays containing numeric values.  If the two vectors do not have the same length, the function must return **-1**.  Otherwise, convert the inputs to NumPy arrays, evaluate\n\nd(\ud835\udc31,\ud835\udc32)=\u221a\u2211\u1d62(x\u1d62\u2212y\u1d62)\u00b2\n\nand return the result rounded to four decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 317, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Formatted Debug-Error Report\n# Description:\nYou are given three inputs that together describe the result of an automatic evaluation of predictions made by a program.\n\n1. `params` \u2013 a list of 2-tuples where each tuple has the form `(prediction, label)`.   \n   \u2022 `prediction` is the text produced by *your* program (\"Mine\").   \n   \u2022 `label` is an identifier that is also present in `golds`.\n2. `golds` \u2013 a dictionary that maps every possible label to the *gold* / *expected* text (\"Theirs\").\n3. `ix` \u2013 an integer index that points to the item in `params` on which you want to build a detailed, readable error report.\n4. `warn_str` \u2013 an **optional** extra message that should be appended to the report (for instance a special warning such as \" (WARNING: mismatch)\").  The default value is the empty string.\n\nThe task is to write a function `err_fmt` that returns a multi-line string with the following exact format:\n\n```\n------------------------- DEBUG -------------------------\nMine (prev) [<prev_label>]:\n<prev_prediction>\n\nTheirs (prev) [<prev_label>]:\n<prev_gold>\n\nMine [<curr_label>]:\n<curr_prediction>\n\nTheirs [<curr_label>]:\n<curr_gold><warn_str>\n----------------------- END DEBUG -----------------------\n```\n\nDetails\n\u2022 The header line consists of 25 dashes, the word **DEBUG** surrounded by single spaces, followed by another 25 dashes and a newline.  \n\u2022 \"prev\" refers to the element situated at index `max(ix \u2212 1, 0)` \u2013 i.e. index 0 if `ix` is already 0.  \n\u2022 After the (prev) block there are two blank lines, then the current block, then `warn_str` (if any), then **one** newline and the footer.  \n\u2022 The footer line consists of 23 dashes, the text **END DEBUG** with surrounding spaces, and another 23 dashes.\n\nReturn the resulting string **exactly** \u2013 including every dash and newline \u2013 so that it can be used directly for logging or debugging.\n\nIf the format is respected, there are no other corner-cases to handle, and no exceptions need to be raised.\n# Your code should start with:\n```python\nfrom typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn **exactly** the formatted multi-line string (str).  All newlines and dashes must be preserved.\n"}
{"task_id": 318, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: AdaBoost From Scratch \u2013 Decision-Stump Ensemble\n# Description:\nImplement the AdaBoost.M1 algorithm **from scratch** using decision stumps (one\u2013level decision trees) as weak learners.  \nThe function must:\n1. Train an AdaBoost classifier on the given training set `(X_train, y_train)` for exactly `n_estimators` boosting rounds.  \n2. Each weak learner is a decision stump that splits the data on a single feature `j` using a threshold `t` and a polarity `p \\in \\{-1,1\\}`:\n   \u2022 prediction $h(x)=p\\;\\text{sign}(x_j-t)$ where `sign(z) = -1` if `z < 0`, `+1` otherwise.  \n3. After training, predict the labels of `X_test` with the final boosted classifier\n   \\[F(x)=\\text{sign}\\Big(\\sum_{m=1}^M\\alpha_m\\,h_m(x)\\Big)\\Big],\\qquad \\alpha_m = \\frac12\\ln\\frac{1-\\epsilon_m}{\\epsilon_m}\\]\n   where $\\epsilon_m$ is the weighted classification error of the *m*-th stump.  \n4. Return the predictions as a **Python list** of `-1` and `1`.\n\nAll training labels are guaranteed to be either `-1` or `1`.  Use only the standard libraries `math` and `numpy` \u2013 **no third-party machine-learning libraries are allowed**.\n# Your code should start with:\n```python\nimport math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a **list** whose elements are either `-1` or `1` (integers).\n"}
{"task_id": 319, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Stochastic Gradient Descent for Linear Regression\n# Description:\nImplement linear regression with Stochastic Gradient Descent (SGD).\n\nYou are given a feature matrix X (m\u00d7n) and a target vector y (m, ).  Implement a function stochastic_gradient_descent that learns the weight vector \u03b8 for the linear model\n\n    h_\u03b8(x) = \u03b8\u2080 + \u03b8\u2081x\u2081 + \u2026 + \u03b8_nx_n\n\nusing the following SGD protocol:\n\n1.  Add a bias column of ones to X so that the bias term \u03b8\u2080 can be learned jointly with the remaining weights.\n2.  Initialise \u03b8 with **all zeros** (shape (n+1, )).\n3.  For `epochs` passes over the data (default 1000):\n       For each training pair (x\u1da6 , y\u1da6 ) in the original order\n           \u2022 compute the prediction  \\(\\hat y = \u03b8\u00b7x\u1da6\\)\n           \u2022 compute the error          \\(e = \\hat y - y\u1da6\\)\n           \u2022 update the weights         \\(\u03b8 \u2190 \u03b8 \u2212 lr\u00b7e\u00b7x\u1da6\\)\n4.  After training, return \u03b8 rounded to four decimal places **as a standard Python list** `[\u03b8\u2080, \u03b8\u2081, \u2026 , \u03b8_n]`.\n\nThe function must work for any number of features \u22651 provided that the data are numerically compatible with a linear model.\n\nIf the input is already a `list[list]]` or Python list, convert it to `numpy.ndarray` internally.\n# Your code should start with:\n```python\nimport numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float = 0.01, epochs: int = 1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn the fitted weight vector (including the bias \u03b8\u2080) as a Python list rounded to 4 decimal places.\n"}
{"task_id": 321, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Genetic Algorithm String Evolver\n# Description:\nImplement a simplified Genetic Algorithm (GA) that evolves a population of candidate strings toward a user-defined target string.  \n\nThe algorithm you write must follow the classic GA cycle:\n1. **Population initialisation** \u2013 create `population_size` individuals, each being a random string of the same length as the `target`.\n2. **Fitness evaluation** \u2013 for every individual compute a fitness score\n   \\[\\text{fitness}=\\dfrac{1}{\\displaystyle\\sum_{i=1}^{L}|p_i-t_i|+10^{-6}}\\]\n   where `L` is the string length, `p_i` is the *alphabetical index* (space = 0, \"a\" = 1, \u2026, \"z\" = 26, \"A\" = 27, \u2026, \"Z\" = 52) of the **i-th** character of the individual, and `t_i` is the index of the corresponding character in the target string.  The closer an individual is to the goal, the higher its fitness.\n3. **Selection** \u2013 choose parents using roulette\u2013wheel (fitness-proportionate) sampling **without replacement**.\n4. **Crossover** \u2013 produce two children from two parents by choosing a random crossover point and exchanging the suffixes.\n5. **Mutation** \u2013 with probability `mutation_rate` replace every gene (character) in every newly created child by a randomly chosen valid character.\n6. **Replacement** \u2013 the newly produced children form the next generation.\n7. Repeat steps 2\u20136 for `iterations` epochs **or** stop early if the target string is discovered.\n\nThe function must finally return the best (highest-fitness) individual that existed during the run.  For reproducibility set `np.random.seed(42)` once at the beginning of the function.\n\nYou are *not* asked to print anything.  Simply return the best string.\n# Your code should start with:\n```python\nimport numpy as np\nimport string\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nReturn exactly the best evolved string (no leading/trailing spaces).\n"}
{"task_id": 322, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Loss\n# Description:\nImplement the binary cross-entropy (BCE) loss function.\n\nGiven two equally-shaped NumPy arrays \u2013  \n\u2022 actual \u2013 the ground-truth binary labels (each entry is 0 or 1)  \n\u2022 predicted \u2013 the model\u2019s predicted probabilities (each entry is in the closed interval [0,1]) \u2013  \nwrite a function that returns the mean BCE value\n\n            L = \u2212 1\\N * \u03a3\\_{i=1..N} [ y\\_i \u00b7 ln(p\\_i) + (1\u2212y\\_i) \u00b7 ln(1\u2212p\\_i) ]\n\nTo avoid numerical problems when `predicted` contains exact 0 or 1, first clip every probability *p* to the interval [\u03b5, 1\u2212\u03b5] where \u03b5 = 1 \u00d7 10\u207b\u00b9\u2075.\n\nFinally, round the loss to 4 decimal places and return it as a Python `float`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place.\n"}
{"task_id": 324, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bilinear Interpolation for Image Sampling\n# Description:\nImplement bilinear interpolation for arbitrary (x, y) positions in a 2-D image.  \nGiven an image `X` stored as a 3-D NumPy array with shape `(rows, cols, channels)` and two equal-length Python lists `x` and `y` that contain floating-point coordinates, compute the pixel values at each `(x\u1d62, y\u1d62)` by classic bilinear interpolation.  \nThe function must\n\u2022 treat `X` as samples taken on an equally-spaced integer grid where the integer coordinate `(c, r)` corresponds to `X[r, c]`,  \n\u2022 clip any coordinate that falls outside the image so that it is inside the valid range before the interpolation takes place,  \n\u2022 work for any number of channels (e.g. grayscale \u21d2 `channels = 1`, RGB \u21d2 `channels = 3`),  \n\u2022 return the interpolated values as a Python *list of lists* with outer length equal to `len(x)` and inner length equal to `channels`,  \n\u2022 round every returned number to the nearest 4-th decimal place.\n\nIf `x` and `y` do not have the same length, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to 4 decimal places and the overall result must be a plain Python list generated with `.tolist()`.\n"}
{"task_id": 326, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Support Vector Machine Decision Function\n# Description:\nDuring the training phase of a Support Vector Machine (SVM) the optimizer returns the following quantities:  \n\u2022 the support vectors $x_i$  \n\u2022 their labels $y_i\\in\\{-1,1\\}$  \n\u2022 the corresponding non-zero Lagrange multipliers $\\alpha_i>0$  \n\u2022 the intercept (bias) term $b$  \n\nFor any unseen sample $x$ the SVM decision function is  \n$$f(x)=\\sum_{i=1}^{m}\\alpha_i\\,y_i\\,K(x_i,\\,x)+b$$  \nwhere $K$ is a user\u2013chosen kernel.\n\nWrite a function `svm_predict` that implements this decision function for the three most common kernels.\n\nKernels\n1. linear\u2003\u2003\u2003\u2003\u2002$K(u,v)=u^\\top v$\n2. polynomial\u2003 $K(u,v)=\\bigl(\\gamma\\,u^\\top v+\\text{coef}\\bigr)^{\\text{power}}$\n3. rbf\u2003\u2003\u2003\u2003\u2003\u2002$K(u,v)=\\exp\\bigl(-\\gamma\\lVert u-v\\rVert_2^2\\bigr)$\n\nAdditional requirements\n\u2022 `gamma` defaults to $1/\\text{n_features}$ when it is not supplied.  \n\u2022 The function must return a list containing the predicted class labels (\u22121 or 1). In the rare event the raw decision value equals 0 the label 1 should be returned.  \n\u2022 Use only `numpy` \u2013 no external optimisation libraries are needed because the training phase is **not** part of this task.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a python `list[int]` of the same length as `X`, containing only -1 or 1.\n"}
{"task_id": 328, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: First Capitalized Word\n# Description:\nWrite a Python function that scans through a list of words (the *corpus*) and returns a one\u2013element list that contains the **first** word whose first character is an uppercase letter. If the corpus does **not** contain any such word, the function must return an empty list.\n\nA word is considered \"capitalized\" when its very first character satisfies `str.isupper()`. There are no other restrictions on the remaining characters.\n\nYour task is to implement this behaviour. The solution must work for an empty corpus as well as for corpora that contain no capitalized words.\n# Your code should start with:\n```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    # TODO: implement the function body below\n    pass\n```\n# Output Constraints:\nReturn an empty list when no capitalized word is found.\n"}
{"task_id": 329, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Frequency Bins of a DFT\n# Description:\nIn a discrete Fourier transform (DFT) the *k*-th spectrum coefficient corresponds to a sinusoid whose frequency\nis\n    f\u2096 = k \u00b7 (f\u209b / N)  for k = 0,1,\u2026,N\u22121\nwhere N is the number of DFT coefficients and f\u209b is the sampling frequency in Hz.\n\nFor real-valued signals one often needs only the non\u2013negative (\"positive\") part of the spectrum (indices 0 \u2026 \u230aN/2\u230b).\n\nWrite a function that returns the centre frequency (in Hz) of every DFT bin.\nThe function must work in two modes:\n1. **positive_only = True**  \u2013 return the non-negative frequencies (length \u230aN/2\u230b+1)\n2. **positive_only = False** \u2013 return the full list of N bin centres arranged exactly as NumPy\u2019s `fftfreq` does:\n   `[0, 1\u00b7\u0394f, \u2026, (\u2308N/2\u2309\u22121)\u00b7\u0394f, \u2212\u230aN/2\u230b\u00b7\u0394f, \u2026, \u2212\u0394f]`\n\nAll returned numbers have to be rounded to 4 decimal places and handed back as a regular Python list (use NumPy\u2019s\n`tolist()`).\n\nIf either `N` or `fs` is not strictly positive, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list with every element rounded to the nearest 4th decimal place.\n"}
{"task_id": 330, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Kernel Settings Update\n# Description:\nIn kernel-based machine-learning libraries, the parameters (learned values) and hyperparameters (user-defined settings) of a kernel object are usually stored in two separate dictionaries named `parameters` and `hyperparameters`.  During model selection it is often necessary to update these dictionaries with values coming from a *summary dictionary* that may itself contain nested dictionaries.\n\nWrite a function `update_kernel_settings` that performs this update.\n\nThe function receives three arguments:\n1. `parameters`        \u2013 a dictionary that stores the current kernel parameters.\n2. `hyperparameters` \u2013 a dictionary that stores the current kernel hyperparameters.\n3. `summary_dict`    \u2013 a dictionary produced elsewhere in the code.  It can have any combination of the following:\n   \u2022 a key `\"parameters\"` whose value is a dictionary of parameter updates\n   \u2022 a key `\"hyperparameters\"` whose value is a dictionary of hyperparameter updates\n   \u2022 any number of top-level key\u2013value pairs that should also be considered updates\n\nThe function must\n\u2022 create **new** dictionaries (do not mutate the originals),\n\u2022 \"flatten\" `summary_dict` by **merging** the nested `\"parameters\"` and `\"hyperparameters\"` sub-dictionaries into the top level, removing the two keys in the process, and\n\u2022 overwrite the corresponding entries in the new `parameters` and/or `hyperparameters` dictionaries whenever an update is present.\n\nKeys that are *not* found in the original dictionaries are ignored.\n\nReturn the pair `(new_parameters, new_hyperparameters)`.\n\nExample\n-------\nInput\n```\nparameters      = {\"sigma\": 1, \"gamma\": 0.5}\nhyperparameters = {\"id\": \"RBF\", \"trainable\": True}\nsummary_dict    = {\n    \"parameters\":      {\"sigma\": 2},\n    \"hyperparameters\": {\"trainable\": False},\n    \"extra\": 123                      # <- ignored\n}\n```\nOutput\n```\n({\"sigma\": 2, \"gamma\": 0.5}, {\"id\": \"RBF\", \"trainable\": False})\n```\nReasoning\n~~~~~~~~~\nAfter flattening, the effective updates are `{\"sigma\": 2, \"trainable\": False}`.  The key `\"sigma\"` lives in `parameters`, so it is updated there; `\"trainable\"` lives in `hyperparameters`, so it is updated there. The key `\"extra\"` is ignored because it exists in neither dictionary.\n# Your code should start with:\n```python\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn a *tuple* `(new_parameters, new_hyperparameters)` where both elements are plain Python dictionaries.\n"}
{"task_id": 331, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Out-of-Bag MSE for Random Forest Regression\n# Description:\nIn a Random Forest each tree is trained on a bootstrap sample of the original data.  For any training sample the trees **not** containing that sample (so-called *out-of-bag* trees) can be used to obtain an unbiased performance estimate.  \n\nWrite a function that computes the *out-of-bag mean squared error* (OOB-MSE) for a Random Forest **regressor**.\n\nThe function receives three arguments:\n1. `y_true` \u2013 the true target values, shape `(n_samples,)`.\n2. `predictions` \u2013 the raw predictions of every tree, shape `(n_samples, n_estimators)`, where element `(i, j)` is the prediction of the *j-th* tree for the *i-th* sample.\n3. `oob_mask` \u2013 a boolean/\u200bbinary matrix of the same shape whose element `(i, j)` is `True` (or `1`) **iff** sample *i* was *out of bag* for tree *j*.\n\nFor every sample that has at least one OOB prediction you must:\n\u2022 average all its OOB predictions,\n\u2022 compute the squared error between this average and the true value.\n\nThe OOB-MSE is the mean of those squared errors taken over **only** the samples that own at least one OOB prediction.  \nIf *no* sample has an OOB prediction, return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a **float** rounded to the nearest 4th decimal place.\n"}
{"task_id": 332, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: FP-Tree Construction Without Classes\n# Description:\nGiven a set of transactions and a minimum support threshold, construct the **Frequent-Pattern Tree (FP-Tree)** without using any classes.  \n\nThe tree is represented as a nested dictionary where every node stores two keys:\n1. \"support\"   \u2013 the number of transactions that share the path ending in this node.\n2. \"children\"  \u2013 another dictionary that holds the node\u2019s direct descendants.\n\nThe root node is an empty placeholder with support 0.\n\nBuilding rules\n1. Compute the support (occurrence in distinct transactions) for every item.\n2. Discard the items whose support is smaller than `min_support`.\n3. Create a global ordering of the remaining items \u2013 first by **decreasing support**, then **alphabetically** to break ties.\n4. For every transaction\n   \u2022 remove duplicates, keep only frequent items, and reorder them according to the global ordering;\n   \u2022 walk from the root and update/extend the path, increasing the *support* of every visited node by 1.\n\nReturn the root node of the final FP-Tree.\n\nExample tree format\n{\"support\":0,\n \"children\":{\n     \"a\":{\"support\":3,\n           \"children\":{\n               \"b\":{\"support\":2,\n                     \"children\":{\n                         \"c\":{\"support\":1,\"children\":{}}}},\n               \"c\":{\"support\":1,\"children\":{}}}}}}\n# Your code should start with:\n```python\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    pass\n```\n"}
{"task_id": 333, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Logistic Regression \u2014 Training with Batch Gradient Descent\n# Description:\nImplement a logistic regression classifier **from scratch** using gradient descent.\n\nYour function must:\n1. Accept a feature matrix `X` (NumPy 2-D array) and the corresponding binary class labels `y` (NumPy 1-D array containing only 0s and 1s).\n2. Standardise every feature column by subtracting its mean and dividing by its standard deviation (z-score normalisation).  Use a small constant `1e-8` to avoid division by zero.\n3. Augment the normalised matrix with a bias column of ones.\n4. Initialise all model parameters (\\(\\theta\\)) with zeros and optimise them by **batch gradient descent** for the specified number of iterations.\n   \u00b7 Hypothesis\u2003\\(h_\\theta(x)=\\sigma(\\theta^\\top x)\\) where \\(\\sigma(z)=1/(1+e^{-z})\\).\n   \u00b7 Update rule\u2003\\(\\theta := \\theta-\\alpha\\frac1m X^T(h_\\theta(X)-y)\\) where \\(m\\) is the number of samples.\n5. After training, compute the class probabilities for every training sample and convert them to class labels with a 0.5 cut-off.\n6. Return those predicted labels **as a standard Python list** (not a NumPy array).\n\nIf your implementation is correct, it will correctly classify the linearly separable test cases provided below.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float = 0.1, num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    # >>>>>  YOUR CODE GOES HERE  <<<<<\n    pass\n```\n# Output Constraints:\nReturn a **Python list** of integers (0 or 1) with the same length and order as `y`.\n"}
{"task_id": 334, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Noam Learning-Rate Scheduler\n# Description:\nImplement the *Noam* learning-rate schedule that is widely used for training Transformer models.  \nFor a given optimization **step** the learning-rate is computed as  \n    lr = scale_factor \\* (model_dim^{\u20120.5}) \\* min(step^{\u20120.5},\\; step \\* warmup_steps^{\u20121.5})  \nwhere  \n\u2022 **model_dim** \u2013 hidden size of the model (d<sub>model</sub>)  \n\u2022 **scale_factor** \u2013 additional multiplicative constant  \n\u2022 **warmup_steps** \u2013 number of warm-up steps during which the learning-rate grows linearly.  \n\nDuring the first *warmup_steps* updates the learning-rate rises linearly; afterwards it decays proportionally to step^{\u20120.5}.  \nIf the supplied **step** is smaller than 1 the function must return 0.  \n\nRound the returned learning-rate to **9 decimal places** so that the public tests can compare the value by exact equality.\n# Your code should start with:\n```python\nimport math\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python *float* rounded with ``round(lr, 9)``.\n"}
{"task_id": 335, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Weight Initializer Factory\n# Description:\nIn many deep\u2013learning frameworks every layer keeps its own set of trainable parameters, and those parameters must be **initialised** before training starts.  A common design is to ask a small *factory* function for an *initialiser* (i.e. a callable that really performs the initialisation).\n\nWrite the function `get_initializer` that receives the name of an initialisation strategy and returns the corresponding **callable**.  The callable must have the following signature:\n    initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\nand must create an array of the requested `shape` filled according to the strategy.\n\nSupported strategies\n1. \"zeros\"             \u2013 all zeros (the `scale` argument is ignored).\n2. \"ones\"              \u2013 all ones multiplied by `scale`.\n3. \"normal\"            \u2013 i.i.d. draws from \ud835\udca9(0, `scale`).\n4. \"glorot_uniform\"    \u2013 Glorot/Xavier uniform initialisation:\n       limit = scale \u00b7 \u221a(6 / (fan_in + fan_out))\n       weights \u223c \ud835\udcb0[ \u2212limit , limit ]\n   where `fan_in = shape[0]` and `fan_out = shape[1]`.  For one\u2013dimensional shapes the function must raise `ValueError`.\n\nIf an unsupported name is supplied the function must raise `ValueError`.\n\nReturn type\nThe returned callable **must** output a `numpy.ndarray` of exactly the requested shape.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    # YOUR CODE HERE\n```\n# Output Constraints:\nThe returned object is a numpy.ndarray having the exact shape requested.\n"}
{"task_id": 336, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Kernel Matrix\n# Description:\nIn many kernel-based machine-learning algorithms (e.g. Support Vector Machines, Gaussian Processes) the similarity between two input vectors x and y is measured by a kernel function k(x,y).  One of the simplest and most frequently used kernels is the linear kernel\n\n    k(x, y) = x \u00b7 y + c\u2080,\n\nwhere x \u00b7 y is the dot product between the two vectors and c\u2080 is an optional constant that shifts the similarities (for c\u2080 = 0 the kernel is said to be homogeneous).\n\nWrite a function that receives two collections of input vectors X and Y and returns the complete kernel matrix K whose (i,j) entry equals k(X[i], Y[j]).  If Y is omitted (or set to None) the function must assume Y = X and therefore return a square, symmetric matrix.\n\nInput vectors can be passed either as built-in Python lists or as NumPy arrays; your function must treat both in the same way.  All numerical operations must be performed with floating-point precision.\n\nValidation rules\n1. X has shape (N, C) and Y has shape (M, C).  If the number of columns (C) differs, the function must return -1.\n2. An empty X (i.e. N = 0) is allowed and should return an empty list.\n\nReturn value\n\u2022 A list of lists of floats containing the kernel matrix, rounded to 4 decimal places.\n\u2022 Return -1 when the input dimensions are incompatible (rule 1).\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nAll numbers in the returned kernel matrix must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 337, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Nearest-Neighbour Interpolation on a 2-D Grid\n# Description:\nGiven a 3-D NumPy array that represents a 2-D image (rows \u00d7 columns \u00d7 channels), implement the Nearest-Neighbour interpolation rule and return the pixel values that correspond to an arbitrary list of floating-point coordinates.  \n\nFor each pair (x\u1d62 , y\u1d62):\n1. Round x\u1d62 and y\u1d62 to the nearest integer grid position using NumPy\u2019s `np.around` (banker\u2019s rounding: .5 goes to the nearest even integer).\n2. Clip the rounded indices so that they never fall outside the image: x \u2208 [0, in_cols-1] and y \u2208 [0, in_rows-1].\n3. Fetch the pixel located at (row=y\u1d62, column=x\u1d62) for **all** channels.\n\nThe function must finally return the collected pixels as a Python list (use NumPy\u2019s `tolist`).  If the coordinate lists `x` and `y` are empty, simply return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the result as a Python list by calling the ndarray\u2019s `.tolist()` method.\n"}
{"task_id": 338, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Closed-Form Ridge Regression\n# Description:\nImplement the closed-form solution of Ridge Regression (i.e. L2-regularised linear regression).\n\nGiven a design matrix X\u2208\u211d^{n\u00d7d} and a target vector y\u2208\u211d^{n}, the Ridge Regression weight vector w\u2208\u211d^{d+1} (the extra dimension is an automatically added bias/intercept term) is obtained analytically by\n\n    w = (X\u0304^T X\u0304 + \u03b1 I)^{-1} X\u0304^T y ,\n\nwhere X\u0304 is X with a leading column of ones, I is the (d+1)\u00d7(d+1) identity matrix and \u03b1>0 is the regularisation factor. (If \u03b1=0 the formula reduces to ordinary least squares.)\n\nWrite a function that:\n1. Accepts the feature matrix X (as a NumPy 2-D array or a list of lists), the target vector y (NumPy 1-D array or list) and the regularisation factor reg_factor (float \u22650).\n2. Automatically appends the bias term to X.\n3. Computes the weights with the formula above (regularising the bias as well for simplicity).\n4. Rounds every coefficient to 4 decimal places and returns them as a Python list.\n\nIf X has d columns the returned list must have length d+1 (bias first).\n# Your code should start with:\n```python\nimport numpy as np\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"Your task is to finish this function!\"\"\"\n    pass\n```\n# Output Constraints:\nRound every coefficient to the nearest 4th decimal place before returning.\n"}
{"task_id": 339, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Most Frequent Label Finder\n# Description:\nWrite a Python function that returns the label (element) that occurs most frequently in a given iterable `y`.  \n\nSpecific requirements\n1. If `y` is empty, return `None`.\n2. If more than one label shares the highest frequency (a **tie**), return the one whose **first appearance** occurs earliest in the original iterable.\n3. The input may contain any hash-able Python objects (strings, numbers, booleans, etc.).\n# Your code should start with:\n```python\nfrom collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n```\n# Output Constraints:\nThe function should return exactly one element (or `None` if the iterable is empty), without any additional formatting.\n"}
{"task_id": 340, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single\u2013Step Adam Optimiser\n# Description:\nImplement a single optimisation step of the Adam (Adaptive Moment Estimation) algorithm.  \nThe function receives the current value of a parameter *\u03b8*, its gradient *g*, the time-step *t* (starting from **1**), and the two running moment estimates *m* (first moment / mean) and *v* (second moment / un-centred variance).  \nUsing the standard Adam update rule\n\n    m\u209c   = \u03b2\u2081\u22c5m + (1\u2212\u03b2\u2081)\u22c5g\n    v\u209c   = \u03b2\u2082\u22c5v + (1\u2212\u03b2\u2082)\u22c5g\u00b2\n    m\u0302\u209c  = m\u209c / (1\u2212\u03b2\u2081\u1d57)\n    v\u0302\u209c  = v\u209c / (1\u2212\u03b2\u2082\u1d57)\n    \u03b8\u2032   = \u03b8 \u2212 \u03b1 \u00b7 m\u0302\u209c /(\u221av\u0302\u209c+\u03b5)\n\nreturn the **updated parameter \u03b8\u2032 together with the new moment estimates m\u209c and v\u209c**.  \nThe function must work with multi-dimensional parameters (any NumPy array shape) and should be fully vectorised.\n\nIf the gradient is exactly zero the parameter must stay unchanged and the moment estimates must still be updated according to the above equations.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nReturn a tuple of three python lists rounded to **8** decimal places:  \n(updated_param, new_m, new_v)\n"}
{"task_id": 342, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Manhattan Distance Computation\n# Description:\nGiven two real-valued vectors of equal length, compute their Manhattan (also called L1) distance:\n          d(x, y) = \u03a3 |x\u1d62 \u2212 y\u1d62|.\nThe function must:\n1. Accept the vectors as Python lists (ints and/or floats).\n2. Return the distance rounded to the nearest 4-th decimal as a float.\n3. If the vectors are of unequal length, return -1.\n# Your code should start with:\n```python\nimport numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal. If the input vectors have different lengths return -1.\n"}
{"task_id": 343, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Cross-Entropy Parameter Update\n# Description:\nImplement the core numerical step of the Cross-Entropy Method (CEM) that is often used to search for good policy parameters in Reinforcement Learning.\n\nYou are given\n1. `theta_samples`: an $N\\times D$ NumPy array whose rows are the $N$ different parameter vectors (\\theta) that were evaluated in the current episode.\n2. `rewards`: a one-dimensional array-like object of length $N$ containing the total return obtained with each corresponding parameter vector.\n3. `retain_prcnt`: a float in the open interval $(0,1]$ indicating which fraction of the best\u2010scoring samples should be kept when updating the sampling distribution.\n\nYour task is to write a function that\n\u2022 keeps the top `retain_prcnt` fraction of `theta_samples` according to `rewards`,  \n\u2022 computes the **mean** and the **per-dimension variance** of those retained samples,  \n\u2022 returns the two vectors (mean, variance) as Python lists rounded to four decimal places.\n\nIf `retain_prcnt * N` is not an integer, use `int(retain_prcnt * N)` (the floor of the product) to decide how many samples to retain.  \nThe input is always valid (there will always be at least one sample to retain).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 344, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Huffman Coding Encoder\n# Description:\nImplement the Huffman coding algorithm for a list of tokens.  The function must analyse the frequency of every unique token, build the optimal (minimum-expected-length) prefix-free binary tree \u2013 the Huffman tree \u2013 and then generate a binary code for each token by walking the tree (use \u20180\u2019 for a left edge and \u20181\u2019 for a right edge).\n\nIf the input list is empty, return an empty dictionary.  If the list contains only one unique token, assign the single token the code \u201c0\u201d.  For all other cases use the classical bottom-up Huffman construction:\n1.  Create a min-heap that stores nodes ordered first by frequency, then (for deterministic behaviour) by the lexical order of the token\u2019s string representation, treating an internal node\u2019s key as an empty string \"\".\n2.  Repeatedly pop the two nodes with the smallest frequencies, merge them into a new parent node whose frequency is the sum of its children\u2019s frequencies, and push this parent back into the heap.\n3.  When one node remains, traverse the tree from the root to every leaf to obtain the code words.\n\nThe returned dictionary must map every unique token to its Huffman code, which is a string consisting solely of the characters \u20180\u2019 and \u20181\u2019.\n# Your code should start with:\n```python\nimport heapq\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nEach code consists only of the characters \u20180\u2019 and \u20181\u2019 and the set of codes is prefix-free.\n"}
{"task_id": 345, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bayesian Linear Regression \u2013 Posterior Mean Prediction\n# Description:\nImplement Bayesian linear regression with a conjugate Normal prior for the weights.  \nThe function must:  \n1. Automatically add an intercept (bias) column of ones to the training and test design matrices.  \n2. Compute the posterior mean of the weight vector analytically (no sampling) using  \n   \u03bc\u2099 = (X\u1d40X + \u03a9\u2080)\u207b\u00b9 (X\u1d40y + \u03a9\u2080\u03bc\u2080)  \n   where \u03a9\u2080 is the prior precision matrix and \u03bc\u2080 the prior mean.  \n3. Return the predictions for all test samples *using this posterior mean*, rounded to four decimals and converted to a standard Python list.  \nAssume the user always supplies \u03bc\u2080 and \u03a9\u2080 with shapes compatible with \u201cnumber of features + 1\u201d (because of the added intercept).\n# Your code should start with:\n```python\nimport numpy as np\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every predicted value to the nearest 4th decimal and return a Python list.\n"}
{"task_id": 346, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Shannon Entropy\n# Description:\nShannon\u2019s entropy is widely used in decision-tree learning and many other Machine-Learning algorithms to measure the impurity (unpredictability) of a discrete distribution.   \n\nWrite a function that receives a one-dimensional iterable (Python list or NumPy array) of non-negative integers representing class labels and returns the base-2 Shannon entropy of the empirical label distribution.  \n\nEntropy is defined as\n\n        H(Y) = -\u03a3 p_i \u00b7 log\u2082(p_i)\n\nwhere p_i is the proportion of samples that belong to class i.  \n\nBehaviour requirements\n1. The input may contain any non-negative integer values (they do **not** have to start at 0 or be contiguous).  \n2. If the sample contains only one unique label, the entropy is 0.0.  \n3. Return the result rounded to the nearest 4th decimal place (use round(x, 4)).\n# Your code should start with:\n```python\nimport numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single Python float rounded to 4 decimal places.\n"}
{"task_id": 347, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement WGAN-GP Loss Function\n# Description:\nIn the Wasserstein\u2013GAN with Gradient Penalty (WGAN-GP) the objective used to train the critic (also called the discriminator) as well as the generator is strictly based on expectations that can be written in closed form when only the critic outputs are available.\n\nFor a mini-batch the critic and generator losses are\n\ncritic :  L_C =  E_{x_fake}[D(x_fake)] - E_{x_real}[D(x_real)] + \u03bb \u00b7 E_{x_interp}[(\u2016\u2207_{x_interp}D(x_interp)\u2016\u2082 \u2212 1)\u00b2]\n\ngenerator :  L_G = \u2212E_{x_fake}[D(x_fake)]\n\nwhere \u03bb \u2265 0 is the gradient\u2013penalty coefficient and x_interp = \u03b1\u00b7x_real + (1\u2212\u03b1)\u00b7x_fake with \u03b1\u223cU(0,1).\n\nWrite a function that implements both losses.  The function must\n1. receive the critic scores for the fake samples (Y_fake),\n2. know for which network the loss should be computed (module \u2208 {\"C\",\"G\"}),\n3. and, if the critic loss is requested (module == \"C\"), also receive the critic scores for the real samples (Y_real) together with the gradients of the critic output with respect to the interpolated samples (gradInterp).\n\nReturn the corresponding scalar loss rounded to four decimal places.\nIf the critic loss is requested but Y_real or gradInterp is None, the function must raise a ValueError.\n# Your code should start with:\n```python\nimport numpy as np\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to **4** decimals.\n"}
{"task_id": 348, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Symmetric Positive-Definite Matrix Check\n# Description:\nImplement a function that determines whether a given real square matrix is both symmetric and positive-definite.\n\nDefinitions\n1. A real matrix $X\\in\\mathbb R^{n\\times n}$ is **symmetric** if $X=X^T$.\n2. A symmetric matrix is **positive-definite (PD)** if all its eigenvalues are strictly positive.\n\nTask\nWrite a function `is_symmetric_positive_definite` that\n\u2022 receives a NumPy 2-D array `X` of arbitrary shape;\n\u2022 first verifies that `X` is a square matrix;\n\u2022 checks if the matrix is symmetric within a numerical tolerance of `1e-8` (use `np.allclose`);\n\u2022 if it is symmetric, computes the eigenvalues with `np.linalg.eigvalsh` (especially efficient for symmetric matrices) and confirms that every eigenvalue is greater than `1e-8`.\nThe function should return `True` when **both** conditions (symmetry and positive-definiteness) hold and `False` otherwise.\n# Your code should start with:\n```python\nimport numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a single boolean value: True if `X` is symmetric and positive-definite, otherwise False.\n"}
{"task_id": 350, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Ridge Regression (Closed-Form)\n# Description:\nImplement polynomial ridge regression from scratch.\n\nWrite a Python function that takes\n1. a 1-dimensional training feature vector `X` (list of numbers),\n2. a training target vector `y` (same length as `X`),\n3. an integer `degree` \u2265 0 deciding to which power the feature should be expanded, and\n4. a non\u2013negative regularisation factor `reg_factor` (\u03bb)\n\nand returns the list of regression coefficients obtained with ridge (L2) regularisation.\n\nThe design matrix is built as\n    [1, x, x\u00b2, \u2026, x\u1d48]\nfor every training sample.  The closed\u2013form solution for the weight vector **w** is\n\n    w = (X\u1d40\u00b7X + \u03bbI)\u207b\u00b9 \u00b7 X\u1d40\u00b7y ,\n\nwhere I is the (d+1)\u00d7(d+1) identity matrix and \u03bb = `reg_factor`.\n\nReturn the (degree+1) coefficients `[w\u2080, w\u2081, \u2026, w_d]` **rounded to 4 decimal places**.\n\nIf `degree = 0`, the model degenerates to estimating a single constant.\n\nAssume all inputs are valid; you do not have to perform any argument checking.\n# Your code should start with:\n```python\nimport numpy as np\ndef polynomial_ridge_regression(X: list[float | int],\n                                y: list[float | int],\n                                degree: int,\n                                reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned coefficients must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 351, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement 2-D Max Pooling\n# Description:\nImplement a 2-D max-pooling operation that is routinely used in Convolutional Neural Networks (CNNs).\n\nGiven a 4-D NumPy array X whose shape is (N, C, H, W)\n  \u2022 N \u2013 batch size (number of images)\n  \u2022 C \u2013 number of channels\n  \u2022 H \u2013 image height\n  \u2022 W \u2013 image width\nand two additional hyper-parameters\n  \u2022 pool_shape \u2013 a tuple (p_h, p_w) that specifies the height and width of the pooling window\n  \u2022 stride \u2013 the step size (in both vertical and horizontal direction) with which the window is moved,\nwrite a function that returns the **max-pooled** result of X.\n\nFor every (non-overlapping) window of size p_h \u00d7 p_w that is shifted by \"stride\" pixels, the function must keep **only the maximum value** inside that window. The operation is applied independently to every channel and every image in the batch.\n\nThe spatial output dimensions are determined by\n  out_h = (H \u2212 p_h) // stride + 1\n  out_w = (W \u2212 p_w) // stride + 1\nIt is guaranteed that the given hyper-parameters always lead to integer output dimensions, i.e. the pooling window never steps outside the image.\n\nThe function has to:\n1. perform the pooling completely in NumPy (no Python image libraries allowed);\n2. return the pooled tensor as a Python list obtained via NumPy\u2019s tolist() method;\n3. **not** modify its input argument in-place.\n# Your code should start with:\n```python\nimport numpy as np\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the pooled tensor as a Python (nested) list using NumPy\u2019s tolist() method.\n"}
{"task_id": 353, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Shannon Entropy of Class Labels\n# Description:\nIn a decision\u2013tree learning algorithm the **Shannon entropy** is used to measure the impurity (disorder) of a set of class labels.  \n\nWrite a Python function `entropy` that receives a one-dimensional sequence of class labels (either a Python list, a NumPy array or any iterable) and returns the base-2 Shannon entropy of the label distribution.\n\nDefinition\nEntropy \\(H\\) of a discrete distribution with probabilities \\(p_i\\) is defined as  \n\\[H = -\\sum_i p_i \\log_2 p_i\\]\\\nBy convention the contribution of a label that never occurs (\\(p_i = 0\\)) is taken as \\(0\\), because \\(\\lim_{p \\to 0^+} p\\log p = 0\\).\n\nSpecial cases\n1. If the input is empty, return **0.0**.\n2. If all labels are identical, the entropy is **0.0**.\n\nReturn value\nReturn the entropy rounded to **5 decimal places**.\n# Your code should start with:\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nRound the final entropy to the nearest 5th decimal place using `round(value, 5)` before returning.\n"}
{"task_id": 354, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Fast 2-D Convolution via im2col\n# Description:\nImplement a high-level routine that performs the 2-D convolution (technically, cross-correlation) between a batch of images and a bank of kernels by means of the classic *im2col + GEMM* strategy.\n\nThe function must accept\n1. a 4-D NumPy array X of shape `(n_ex, in_rows, in_cols, in_ch)` containing *n_ex* examples, each with *in_ch* input channels,\n2. a 4-D NumPy array W of shape `(kernel_rows, kernel_cols, in_ch, out_ch)` \u2013 one kernel per output channel,\n3. an integer **stride** `s`,\n4. a padding specification **pad** that can be one of the following:\n   \u2022 an integer \u2192 the same number of zero rows/columns is added on every side,\n   \u2022 a 2-tuple `(pr, pc)` \u2192 `pr` rows are added to both the top and bottom and `pc` columns to both the left and right,\n   \u2022 a 4-tuple `(pr1, pr2, pc1, pc2)` \u2192 rows/columns are added individually to the top, bottom, left and right,\n   \u2022 the string `'same'` \u2192 the smallest symmetric padding that makes the spatial output size identical to the input size,\n5. an optional integer **dilation** `d` that specifies how many empty pixels have to be inserted between the kernel elements (`d = 0` \u21d2 normal convolution).\n\nThe routine must return the convolution result as a NumPy array of shape `(n_ex, out_rows, out_cols, out_ch)` **converted to a (deep) Python list via** `tolist()`.\n\nAll computations must be carried out with NumPy only \u2013 **no third-party deep-learning libraries are allowed**.  If the padding specification is invalid the function behaviour is undefined (no need to raise an exception).\n# Your code should start with:\n```python\nimport numpy as np\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the final NumPy array as a pure Python (nested) list using ndarray.tolist().\n"}
{"task_id": 355, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: PCA with Deterministic Sign Fix\n# Description:\nImplement Principal Component Analysis (PCA) with two possible solvers (``svd`` \u2013 singular value decomposition, and ``eigen`` \u2013 eigen-decomposition of the covariance matrix).  \nYour function must:\n1. Standardise the data by subtracting the feature-wise mean (mean centring).\n2. Depending on the chosen solver, obtain the principal directions (eigen-vectors) \u2013  \n   \u2022 ``svd``  : use *numpy.linalg.svd* on the centred data.  \n   \u2022 ``eigen``: compute the sample covariance matrix *(rowvar=False, ddof=1)* and run *numpy.linalg.eigh* (because the matrix is symmetric) on it.\n3. Sort the directions in descending order of their importance (variance they explain) and keep the first ``n_components`` of them.\n4. Make the sign of every kept direction deterministic: if the first non-zero loading of a direction is negative, multiply the whole direction by \u22121 (and do the same with the corresponding column of the projected data).  \n   This removes the usual PCA sign ambiguity and guarantees identical results on every run \u2013 which is essential for the unit tests.\n5. Project the centred data onto the retained directions (the score matrix).\n6. Return a tuple ``(scores, explained_variance_ratio)`` where  \n   \u2022 *scores* is the projection matrix rounded to 4 decimals and converted to a *list of lists*;  \n   \u2022 *explained_variance_ratio* is a *list* containing the fraction of total variance explained by each selected component, rounded to 4 decimals.\n\nIf *n_components* is larger than the original feature dimension, simply keep all available components.\n\nIn every step round only the final results (not the intermediate calculations).\n# Your code should start with:\n```python\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every numeric entry to the nearest 4th decimal before converting to Python built-ins.\n"}
{"task_id": 356, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Leaf Node Prediction\n# Description:\nIn many tree-based learning algorithms, every terminal (leaf) node stores the outcome that should be returned once a sample reaches that node.  \n\n\u2022 For a **classification** tree, the leaf usually keeps an array *p* of class\u2013membership probabilities.  The predicted class is the index of the largest probability in *p* (ties are resolved in favour of the smaller index, just as `numpy.argmax` would do).  \n\u2022 For a **regression** tree, the leaf simply stores the scalar mean of the target values that fell into that region of the space.\n\nYour task is to finish the helper function `leaf_predict` that extracts the correct prediction from a `Leaf` instance.\n\nIf `classifier` is `True` you must return the class index (an `int`).  Otherwise return the raw scalar (a `float` or `int`).\n# Your code should start with:\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nReturn an `int` when `classifier` is `True`; otherwise return the number stored in the leaf (no rounding necessary).\n"}
{"task_id": 357, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means Clustering\n# Description:\nImplement the K\u2013Means clustering algorithm from scratch.  \nGiven a 2-D (or higher) NumPy array **data** containing *n* samples (rows) and *d* features (columns) together with an integer **K**, partition the samples into **K** clusters so that each sample belongs to the cluster with the nearest (Euclidean) centroid.  \nThe procedure is as follows:\n1. Initialise the *K* centroids with the first **K** samples in the data matrix (this makes the algorithm fully deterministic and easy to test).\n2. Repeat at most **max_iters**=100 times:\n   \u2022 Assign every sample to the closest centroid (use the ordinary Euclidean distance).\n   \u2022 Recompute every centroid as the mean of the samples currently assigned to it. If a centroid loses all its samples, keep it unchanged for that iteration.\n   \u2022 Stop early if none of the centroids changes any more (within a tolerance of 1 \u00d7 10\u207b\u2076).\n3. Sort the final centroids lexicographically (by the first feature, then the second, etc.), round every coordinate to four decimals, and return them as a plain Python *list of lists*.\n\nIf **K** equals 1 the single centroid is simply the mean of the complete data set.  \nThe function must work for any dimensionality \u2265 1.\n\nExample\n=======\nInput\n```\ndata  = np.array([[1, 1],\n                  [1, 2],\n                  [2, 1],\n                  [8, 8],\n                  [9, 8],\n                  [8, 9]])\nK     = 2\n```\n\nOutput\n```\n[[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\nReasoning\n---------\nThe first two rows `[[1,1],[1,2]]` are used as the initial centroids.  \nAfter two iterations the samples `[1,1]`, `[1,2]`, `[2,1]` form one cluster with centroid `(4/3, 4/3) = (1.3333, 1.3333)` and the samples `[8,8]`, `[9,8]`, `[8,9]` form the other cluster with centroid `(25/3, 25/3) = (8.3333, 8.3333)`.  \nNo centroid moves any further, so the algorithm stops and the centroids (already sorted) are returned.\n# Your code should start with:\n```python\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Write your code below. Remove the pass statement.\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists.  All coordinates must be rounded to the nearest 4th decimal.  Centroids must be sorted lexicographically.\n"}
{"task_id": 358, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Classification Accuracy Metric\n# Description:\nIn supervised classification problems, **accuracy** is one of the simplest yet most common evaluation metrics.  \nAccuracy is defined as the proportion of predictions that exactly match the true labels:\n\naccuracy = (number of correct predictions) / (total number of predictions)\n\nWrite a Python function `accuracy` that takes two equal-length sequences `y_true` and `y_pred` (either Python lists or NumPy arrays) containing the true classes and the predicted classes, and returns the classification accuracy as a float rounded to four decimal places.  \nIf the input sequences have different lengths, return -1.\n# Your code should start with:\n```python\nimport numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `float` rounded to the nearest 4th decimal place.\n"}
{"task_id": 359, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Cross-Entropy Loss & Gradient\n# Description:\nImplement a utility that computes the cross-entropy loss (sum over all samples, **not** the mean) between one-hot encoded targets `y` and the corresponding predicted class probabilities `y_pred`.  \n\nThe same function must also be able to return the analytical gradient of the loss with respect to the *soft-max output* when requested.  \n\nFunctional requirements\n1. When called with `derivative = False` (the default) the function returns the scalar loss value.\n2. When called with `derivative = True` it returns the gradient matrix (as a Python list of lists) computed as `y_pred \u2212 y`.\n3. A tiny positive constant `eps = np.finfo(float).eps` must be added inside the logarithm to avoid numerical issues with `log(0)`.\n4. All returned numerical values (loss or gradient) have to be rounded to **4 decimal places**.\n\nMathematical background\nFor one training batch containing `n` samples and `m` classes the loss is  \n\n        L = \u2212\u2211_{i=1..n} \u2211_{j=1..m} y_{ij} \u00b7 log( y\u0302_{ij} + eps )\n\nBecause `y` is one-hot encoded only the log-probability of the correct class contributes for every sample.  \n\nIf we denote the soft-max output of the network by `y_pred = softmax(z)`, the gradient that is propagated through the soft-max layer is simply  \n\n        \u2202L/\u2202z = y_pred \u2212 y\n# Your code should start with:\n```python\nimport numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility (starter code).\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    # TODO: implement the function body\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 360, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Na\u00efve Discrete Cosine Transform (1-D DCT-II)\n# Description:\nImplement a Python function that computes the one-dimensional \nDiscrete Cosine Transform of type II (DCT-II).  \nGiven a real\u2013valued signal frame \\(\\mathbf x=[x_0,\\dots ,x_{N-1}]\\) of length \\(N\\),\nits \\(k\\)-th DCT-II coefficient is defined as\n\n\\[\n\\;c_k = 2\\,\\sum_{n=0}^{N-1} x_n \\cos\\!\\left(\\frac{\\pi k(2n+1)}{2N}\\right),\\qquad k=0,\\dots ,N-1.\\]\n\nIf the keyword argument `orthonormal` is set to **True** (default), the\ncoefficients must be additionally scaled so the resulting transform matrix is\northonormal, i.e.\n\n\\[\n c_k \\leftarrow \\begin{cases}\n      2\\sqrt{\\dfrac{1}{4N}}\\;c_k, & k=0,\\\\[4pt]\n      2\\sqrt{\\dfrac{1}{2N}}\\;c_k, & k\\ge 1.\n \\end{cases}\n\\]\n\nReturn the coefficients rounded to four decimal places as a Python `list`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    # TODO: write your solution here\n    pass\n```\n# Output Constraints:\nRound every coefficient to 4 decimal places and return the result via ndarray\u2019s `tolist()` method.\n"}
{"task_id": 362, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Row-wise Stochastic Matrix Normalisation\n# Description:\nIn many probabilistic and numerical applications you need a stochastic matrix \u2013 a matrix whose rows each sum to 1.  \nWrite a Python function that converts an arbitrary 2-D list (or NumPy array) of non\u2013negative numbers into a row-stochastic matrix.  \nThe function must:\n\n1. Accept the data structure and convert it to a float NumPy array.\n2. Compute the sum of every row.\n3. If *any* row sums to 0 (making normalisation impossible) return **-1**.\n4. Otherwise divide every element in a row by that row\u2019s sum.\n5. Round every entry of the resulting matrix to **4 decimal places** and return it as a native Python list using ``tolist()``.\n# Your code should start with:\n```python\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll values must be rounded to the nearest 4th decimal and the result returned as a Python list of lists (not a NumPy array).\n"}
{"task_id": 363, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Detect Continuity of RL Spaces\n# Description:\nIn many reinforcement-learning (RL) libraries (e.g., OpenAI Gym) environments expose two special attributes: `env.action_space` and `env.observation_space`.  \nEach of those *spaces* describes the kind of data the agent will send (actions) or receive (observations).  \nFor the purposes of this task we consider four toy space types that mimic the most common Gym classes:\n\n\u2022 `Box`      \u2013 **continuous** (vector of floats)\n\u2022 `Discrete` \u2013 **non-continuous** (single integer)\n\u2022 `Tuple`    \u2013 an ordered collection of other spaces\n\u2022 `Dict`     \u2013 a mapping whose values are spaces\n\nImplement a helper function `is_continuous` that, given an environment object and two Boolean flags, decides whether each space is continuous:\n\n\u2022 `tuple_action` is `True` when `env.action_space` is known to be a `Tuple` **or** a `Dict`.  In that case the action space is considered continuous *only if **every** sub-space is a `Box`*.\n\u2022 `tuple_obs`   is `True` when `env.observation_space` is known to be a `Tuple` **or** a `Dict`.  In that case the observation space is continuous only if every sub-space is a `Box`.\n\u2022 When the corresponding flag is `False` we simply check whether the space itself is a `Box`.\n\nReturn a pair `(cont_action, cont_obs)` where each element is a Boolean.\n\nA tiny, self-contained imitation of Gym\u2019s space classes (`Box`, `Discrete`, `Tuple`, `Dict`) and a minimal `Env` wrapper are provided in the starter code so **no external libraries are needed**.\n# Your code should start with:\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a *tuple* `(cont_action, cont_obs)` consisting of two booleans.\n"}
{"task_id": 364, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sign Function Implementation\n# Description:\nImplement the mathematical sign (or signum) function.\n\nGiven a single real number \\(x\\), the function should return:\n\u2022 **1** if \\(x > 0\\)\n\u2022 **-1** if \\(x < 0\\)\n\u2022 **0** if \\(x = 0\\)\n\nThe implementation must work for both integers and floating-point numbers. No external libraries are required.\n# Your code should start with:\n```python\ndef sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn an integer: -1, 0, or 1.\n"}
{"task_id": 366, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Pair-wise Squared Euclidean Distance Matrix\n# Description:\nImplement a function that computes the pair-wise squared Euclidean (\u2113\u2082) distance matrix for a set of samples.\n\nGiven a two\u2013dimensional NumPy array X with shape (n_samples, n_features), each row represents one sample in an n_features-dimensional space.  For every pair of samples (i, j) you must calculate the squared Euclidean distance\n\n            d(i,j) = \u2211_k (X[i,k] \u2212 X[j,k])\u00b2\n\nand return the complete n\u00d7n distance matrix D where D[i][j] = d(i,j).\n\nRequirements\n\u2022 The implementation has to be fully vectorised (no Python loops over samples).\n\u2022 Numerical precision errors can make some values slightly negative (\u2248 \u22121e-15).  Clamp such values to 0 before returning the matrix.\n\u2022 All diagonal entries must be exactly 0.0.\n\nIf the input contains a single sample, simply return [[0.0]].\n# Your code should start with:\n```python\nimport numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the distance matrix as a list of lists of floats. Do NOT round the values; preserve full precision. The diagonal must be 0.0 exactly.\n"}
{"task_id": 367, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Kernel Initialization Factory Function\n# Description:\nIn many machine-learning libraries a *kernel* is an interchangeable object that can be selected by the user through a variety of representations (a Python object, a short text description, or a dictionary produced by the kernel itself).  \n\nYour task is to write a small **factory function** `initialize_kernel` that converts any of the following inputs into an instance of one of the three supported kernels  \n\u2022 LinearKernel  \n\u2022 PolynomialKernel  \n\u2022 RBFKernel  \n\nAccepted representations for the parameter `param` are:\n1. **None** \u2013 return a default `LinearKernel`.\n2. **Kernel object** \u2013 return the object unchanged.\n3. **String** \u2013 a case\u2013insensitive textual description, e.g.  \n   \u2022 \"linear\"  \n   \u2022 \"RBF(gamma=0.5)\"  \n   \u2022 \"Polynomial(degree=4, coef0=2)\"  \n   Keyword arguments inside parentheses must be read, converted to the correct numeric / boolean / string type, and forwarded to the kernel constructor.\n4. **Dictionary** \u2013 a dictionary that contains the entry `\"hyperparameters\"` whose value is itself a dictionary holding at least the key `\"id\"` whose value is one of `\"LinearKernel\"`, `\"PolynomialKernel\"`, or `\"RBFKernel\"`.  Any remaining key\u2013value pairs have to be passed to the constructor of the chosen kernel.\n\nIf the specification refers to an unknown kernel you must raise `NotImplementedError`; if the dictionary form misses the required `\"hyperparameters\"` key raise `ValueError`.\n\nThe helper classes `KernelBase`, `LinearKernel`, `PolynomialKernel`, and `RBFKernel` required to solve the task are provided in the starter code \u2013 **do not modify them**.\n\nThe function has to return a *kernel object* (instance of `KernelBase` or one of its subclasses).  For demonstration the example below shows the content of the object via its `summary()` method.\n# Your code should start with:\n```python\nimport re\nimport re\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get(\"hyperparameters\", {})\n        self.params.update({k: v for k, v in hp.items() if k != \"id\"})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {\"hyperparameters\": {\"id\": self.__class__.__name__, **self.params}}\n\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    # Write your code below this line\n\n    \n    # Write your code above this line\n```\n# Output Constraints:\nReturn an object that is an instance of `KernelBase` (or one of its subclasses).\n"}
{"task_id": 368, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Minkowski Distance Calculator\n# Description:\nImplement the Minkowski distance between two real-valued vectors.\n\nGiven two one-dimensional NumPy arrays (or Python lists that can be converted to NumPy arrays) **x** and **y** of the same length and a real number **p** (> 0), the Minkowski-p distance is defined as  \n\n  d(x, y) = ( \u03a3\u1d62 |x\u1d62 \u2212 y\u1d62|\u1d56 )\u00b9\u141f\u1d56.\n\nYour task is to complete the function `minkowski` that\n1. Validates that **x** and **y** have identical shapes and that **p** is strictly positive. If either condition fails, return **-1**.\n2. Computes the Minkowski distance according to the formula above.\n3. Rounds the result to **four** decimal places before returning it.\n\nThe function must work with arbitrary positive `p` (e.g. 1, 2, 3, 1.5, \u2026).\n# Your code should start with:\n```python\nimport numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or \u20111 when\n               input validation fails.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the distance rounded to the nearest 4th decimal.\n"}
{"task_id": 369, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gradient Boosting Prediction Aggregation\n# Description:\nGradient Boosting models aggregate the outputs of many weak learners (usually decision trees) by adding the learners\u2019 outputs to an ever-improving **running prediction**.  During *inference* the running prediction starts at 0 and each tree\u2019s output is **subtracted** after being scaled by a constant learning rate. \n\nFor **regression** this running prediction is the final numerical output.  \nFor **classification** (multi-class) the running prediction is interpreted as un-normalised log-probabilities (logits).  These logits are first converted to a probability distribution with the soft-max function and then turned into the final class labels via `argmax`.\n\nWrite a function `gradient_boosting_predict` that reproduces this aggregation behaviour.\n\nFunction requirements\n1. `updates` \u2013 *list* of NumPy arrays produced by the individual trees.  All arrays have the same shape:  \n   \u2022 regression\u2003shape = `(n_samples,)`  \n   \u2022 classification\u2003shape = `(n_samples, n_classes)`\n2. `learning_rate` \u2013 positive float that scales every tree\u2019s output.\n3. `regression` \u2013 boolean.  If `True` perform regression, otherwise multi-class classification.\n\nComputation rules\n\u2022 Start with a running prediction filled with zeros having the same shape as a single update array.  \n\u2022 For every tree update `u` do `running_pred -= learning_rate * u`.  \n\u2022 After all updates\n  \u2013 Regression\u2003\u2192\u2003return `running_pred`, rounded to 4 decimals.  \n  \u2013 Classification\u2003\u2192\u2003apply the soft-max row-wise to obtain class probabilities, then return the vector of predicted class indices (`argmax`).\n\nThe function must be fully vectorised (no Python loops over individual samples) and must only rely on NumPy.\n# Your code should start with:\n```python\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n\u2022 For regression return a 1-D NumPy array of floats rounded to 4 decimal places.\n\u2022 For classification return a 1-D NumPy array (or list) of integers (predicted class labels).\n"}
{"task_id": 370, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Multivariate Gaussian Density Function\n# Description:\nImplement the multivariate normal (Gaussian) probability density function.\n\nGiven:\n\u2022 X \u2013 a 2-D NumPy array of shape (m, n) where each row is an n\u2013dimensional sample.\n\u2022 mu \u2013 a 1-D array of length n containing the mean of the distribution.\n\u2022 cov \u2013 an n\u00d7n positive\u2013definite covariance matrix.\n\nWrite a function that returns the density value of every sample in X under \ud835\udca9(\u03bc,\u03a3).\nFor an n\u2013dimensional point x the density is\n\n            1\nf(x)= \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 exp( \u2212\u00bd (x\u2212\u03bc)\u1d40\u03a3\u207b\u00b9(x\u2212\u03bc) )\n        (2\u03c0)^{n/2}|\u03a3|^{1/2}\n\nReturn the results as a Python list rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"TODO: implement\"\"\"\n```\n# Output Constraints:\nRound every density to the nearest 4th decimal.\n"}
{"task_id": 371, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: 1-D Convolution with Stride, Padding and Dilation\n# Description:\nImplement a 1-D cross-correlation (commonly referred to as a convolution in Deep-Learning literature) between a batch of 1-D, multi-channel signals and a bank of kernels.\n\nThe function has to support\n\u2022 batches of examples\n\u2022 an arbitrary number of input and output channels\n\u2022 strides\n\u2022 zero padding that can be supplied as\n  \u2013 a single integer (add the same amount left and right)\n  \u2013 a 2-tuple (\\(p_{left}, p_{right}\\))\n  \u2013 the string \"same\" that mimics TensorFlow\u2019s **SAME** rule, i.e.\\[1\\]\n      out_len = ceil(l_in / stride)\n      total_pad = max(0, (out_len \u2212 1)\u00b7stride + effective_kernel \u2212 l_in)\n      p_left = \u230atotal_pad / 2\u230b , p_right = total_pad \u2212 p_left\n\u2022 dilation (number of zeros inserted between kernel elements \u2013 give 0 for the usual convolution)\n\nThe operation to perform is a *cross-correlation*, **not** a mathematical convolution, i.e. the kernel is **not** reversed.\n\nReturn the resulting 3-D volume as a regular Python list (use ndarray.tolist()).\n# Your code should start with:\n```python\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the result as a (nested) Python list via ndarray.tolist().\n"}
{"task_id": 373, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gini Impurity Calculation\n# Description:\nWrite a Python function that calculates the Gini impurity of a discrete label sequence.  \nThe Gini impurity is a measure used in decision-tree learning to quantify how often a randomly chosen element from the set would be incorrectly labelled if it were randomly labelled according to the distribution of labels in the subset.  \nFor a label vector $y\\,(y_1,\\dots,y_N)$ that contains integer class indices, the Gini impurity is defined as\n$$\nGini = 1-\\sum_{c=0}^{C-1} p_c^{\\,2},\n$$\nwhere $p_c = \\frac{n_c}{N}$ is the relative frequency of class $c$, $n_c$ is the number of samples having class $c$, $C$ is the number of distinct classes, and $N$ is the total number of samples.  \nIf the input sequence is empty, return $0.0$ by convention.\n# Your code should start with:\n```python\nimport numpy as np\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place.\n"}
{"task_id": 374, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Regression with Batch Gradient Descent\n# Description:\nWrite a Python function that trains a **multiple linear regression** model with *batch gradient descent*.  \nGiven a feature matrix X\u2208\u211d^{m\u00d7n} and a target vector y\u2208\u211d^{m}, the goal is to minimize the mean-squared error\n\n\u2003\u2003MSE(\u03b8,b)=1\u2044m\u2006\u2211_{i=1}^{m}(y\u0302_i\u2212y_i)^2,\n\nwhere y\u0302 = X\u03b8+b\u00b71 and \u03b8 is the weight vector, b is the bias (intercept).\n\nThe function must:\n1. Initialise \u03b8 (n zeros) and b (0).\n2. For *n_iterations* steps perform the gradient descent updates\n\u2003\u2003dw = 2/m \u00b7 X\u1d40\u00b7(y\u0302\u2212y),   db = 2/m \u00b7 \u03a3(y\u0302\u2212y)  \n\u2003\u2003\u03b8  \u2190 \u03b8  \u2212 learning_rate\u00b7dw  \n\u2003\u2003b  \u2190 b  \u2212 learning_rate\u00b7db\n3. Return the learned parameters rounded to 4 decimal places.\n\nIf the input data are inconsistent (different number of samples in X and y) return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple (weights_list, bias).  \nAll returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 375, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Padding for \u201cSame\u201d 2-D Convolution\n# Description:\nIn many deep-learning libraries (TensorFlow, PyTorch, JAX \u2026) a so-called \u201c*same* convolution\u201d is implemented by automatically padding the input tensor so that the spatial size of the output matches a user-requested value.  \n\nWrite a function `calc_pad_dims_2D` that **computes the amount of zero-padding that has to be added on each side of a 4-D input tensor** so that a 2-D convolution with a given kernel, stride and dilation produces an output of the desired spatial size.\n\nMore formally, let the input tensor `X` have shape `(n_ex, in_rows, in_cols, in_ch)` and let the convolution kernel have shape `(fr, fc)`.  The *effective* filter size when a dilation factor `d` is used is\n\n    _fr = fr\u00b7(d+1) \u2013 d\n    _fc = fc\u00b7(d+1) \u2013 d\n\nIf the output height/width requested by the user is `(out_rows, out_cols)` and the stride is `s`, we want to find the smallest non-negative integers\n\n    up_pad,  down_pad   (padding added to the top / bottom)\n    left_pad, right_pad (padding added to the left / right)\n\nsuch that the usual convolution size formulas are satisfied:\n\n    out_rows = 1 + (in_rows + up_pad + down_pad \u2013 _fr) // s\n    out_cols = 1 + (in_cols + left_pad + right_pad \u2013 _fc) // s\n\n`calc_pad_dims_2D` must return a 4-tuple `(up_pad, down_pad, left_pad, right_pad)` **organised as `(top, bottom, left, right)`** (keep the order used in the implementation below).  When the required total padding is odd, place the extra pixel to the *bottom* or *right* side (this is what TensorFlow does).\n\nThe function must raise a `ValueError` if any of the supplied arguments has a wrong type or if the required padding would be negative (which means the requested output size is impossible).\n# Your code should start with:\n```python\nimport numpy as np\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    # TODO: complete the implementation\n    pass\n```\n# Output Constraints:\nReturn a 4-tuple of non-negative integers `(top, bottom, left, right)`.\n"}
{"task_id": 376, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Symmetry Check for Square Matrices\n# Description:\nWrite a Python function that determines whether a given 2-D numeric array is symmetric with respect to its main diagonal.  The array is considered symmetric if it is square and the entry at row i and column j is equal to the entry at row j and column i for every valid index pair (i, j).  Because floating-point numbers can suffer from rounding errors, treat two numbers *a* and *b* as equal if their absolute difference does not exceed 1 \u00d7 10\u207b\u2078 (use NumPy\u2019s `allclose`).\n\nIf the input array is not square the function must return **False**.\n# Your code should start with:\n```python\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a built-in Python boolean (`True` or `False`).\n"}
{"task_id": 377, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Negative Gradient for Logistic Loss\n# Description:\nImplement the negative gradient that Gradient Boosting uses when optimizing the logistic (binomial deviance) loss for binary classification.\n\nFor every sample the true label y\u1d62 is encoded as 0 or 1 while the current model prediction f\u1d62 can be any real number.  Gradient Boosting internally converts the labels to the set {\u22121, 1} using the rule y\u2032 = 2y \u2212 1 and minimises the logistic loss\n\n    L(y\u2032, f) = log(1 + exp(\u22122 y\u2032 f)).\n\nThe **negative** gradient of L with respect to f (the value added to the residuals in the next boosting iteration) is\n\n    g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62)).\n\nWrite a function that receives two one-dimensional arrays (or Python lists)\n    \u2022 y \u2013 binary class labels (0 or 1)\n    \u2022 f \u2013 current prediction scores (floats)\n\nand returns the list of negative gradients g rounded to four decimal places.\n\nIf the label array contains values other than 0 or 1, return -1.\n# Your code should start with:\n```python\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"YOUR DOCSTRING HERE\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list with each value rounded to the nearest 4th decimal.\n"}
{"task_id": 378, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Indicator Function\n# Description:\nWrite a Python function that works as a simple indicator (also called a unit or Kronecker delta) function.  \nGiven an integer flag, return 1 if the flag equals 1 and 0 for any other value.\n# Your code should start with:\n```python\ndef indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn the integer 1 when flag == 1, otherwise return the integer 0.\n"}
{"task_id": 379, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sort Priority Queue Nodes\n# Description:\nYou are given a list of nodes that conceptually correspond to the entries kept in a priority queue implementation.  Each node is represented by a dictionary with the following mandatory keys:\n\n\u2022 key \u2013 an identifier that can be returned as-is,\n\u2022 val \u2013 an arbitrary value stored in the queue (irrelevant for ordering),\n\u2022 priority \u2013 an integer or float that decides the importance of the node,\n\u2022 entry_id \u2013 an integer that behaves as a tie-breaker when two nodes share the same priority.\n\nTwo nodes must be ordered with the exact rule implemented inside the `PQNode` class shown above:\n1. The node with the *smaller* `priority` value ranks ahead of a node with a larger `priority` value.\n2. When the `priority` values are equal, the node with the *smaller* `entry_id` ranks first.\n\nWrite a function `sort_priority_nodes` that receives a list of such node dictionaries and returns a **new list containing only the nodes' `key` fields in their correct order** according to the rule above.  If the input list is empty the function must return an empty list.\n# Your code should start with:\n```python\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a list whose elements are exactly the `key` values of the nodes in the required order.  Do not modify the original input list.\n"}
{"task_id": 380, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement SELU Activation and Derivatives\n# Description:\nImplement the Scaled Exponential Linear Unit (SELU) activation together with its first and second analytical derivatives.\n\nThe SELU function is defined as\n\nSELU(x) = scale \u00b7 ELU(x, \u03b1)\n\nwhere ELU(x, \u03b1) = x                if x > 0\n                               \u03b1(e\u02e3 \u2013 1)  otherwise\n\nThe recommended constants (from the original paper) are\n\u03b1 = 1.6732632423543772848170429916717\nscale = 1.0507009873554804934193349852946\n\nFor a given numeric input or NumPy array *x* and an integer *order*, your task is to return:\n\u2022 order = 0  \u2192  SELU(x)\n\u2022 order = 1  \u2192  \u2202SELU/\u2202x (first derivative)\n\u2022 order = 2  \u2192  \u2202\u00b2SELU/\u2202x\u00b2 (second derivative)\n\nThe function must work for scalars, 1-D or multi-D arrays and always preserve the input shape.  All results have to be rounded to the nearest 4\u1d57\u02b0 decimal and converted to built-in Python lists via NumPy\u2019s `tolist()` method.\n# Your code should start with:\n```python\nimport numpy as np\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places and return the result via NumPy\u2019s `tolist()` method.\n"}
{"task_id": 382, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Naive Bayes Predictor\n# Description:\nImplement the Gaussian Naive Bayes algorithm in a **single function**.  The function has to learn the parameters (mean and variance for every feature in every class) from the training data and then predict the label of each sample in a separate test set.\n\nFormulae you have to use\n1.  Prior of a class  \\(c\\):  \\(\\;P(Y=c)= \\frac{\\#\\text{samples of }c}{\\#\\text{total samples}}\\)\n2.  Gaussian likelihood of a single feature value  \\(x\\)\n   \\[\n        P(x\\mid Y=c) = \\frac{1}{\\sqrt{2\\pi\\,\\sigma^2+\\varepsilon}} \\; \\exp\\!\\Bigl(\\! -\\frac{(x-\\mu)^2}{2\\sigma^2+\\varepsilon}\\Bigr)\n   \\]\n   where \\(\\mu\\) and \\(\\sigma^2\\) are respectively the mean and variance of that feature inside class \\(c\\);  \\(\\varepsilon=10^{-4}\\) is a small constant added to avoid division by zero.\n3.  Because the features are assumed to be independent (the \u201cnaive\u201d assumption) the joint likelihood is the product of the per-feature likelihoods.  The posterior for a class is therefore\n   \\[\n        P(Y=c\\mid X)=P(Y=c)\\;\\prod_{i=1}^{d} P(X_i\\mid Y=c)\n   \\]\n   The sample is assigned to the class with the largest posterior probability.\n\nIf several classes share the same largest posterior, return the first one according to `np.unique` order (this behaviour follows naturally from `np.argmax`).\n\nReturn the predicted class labels **as a regular Python list**.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a `list` of predicted labels having the same order as the rows in `X_test`.\n"}
{"task_id": 383, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Task\n# Description:\nIn the Sequential Minimal Optimization (SMO) algorithm for training Support Vector Machines (SVMs), each iteration adjusts two Lagrange multipliers (also called \"alphas\").  \nGiven the labels of two training instances (y\u1d62, y\u2c7c \u2208 {\u22121, 1}), their current alpha values (\u03b1\u1d62, \u03b1\u2c7c) and the regularisation constant C, the algorithm first computes the feasible interval [L, H] for the new value of \u03b1\u2c7c.  \nWrite a Python function `find_bounds` that returns this interval.\n\nThe rules are:  \n\u2022 If y\u1d62 \u2260 y\u2c7c:  \n\u2003L = max(0, \u03b1\u2c7c \u2212 \u03b1\u1d62)  \n\u2003H = min(C, C \u2212 \u03b1\u1d62 + \u03b1\u2c7c)  \n\u2022 If y\u1d62 = y\u2c7c:  \n\u2003L = max(0, \u03b1\u1d62 + \u03b1\u2c7c \u2212 C)  \n\u2003H = min(C, \u03b1\u1d62 + \u03b1\u2c7c)\n\nThe function must return the pair (L, H) rounded to four decimal places.\n# Your code should start with:\n```python\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the two bounds as a Python list [L, H] rounded to 4 decimal places.\n"}
{"task_id": 384, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Smallest Laplacian Eigenvectors\n# Description:\nIn spectral algorithms it is often necessary to work with a few eigenvectors that correspond to the smallest eigenvalues of a graph Laplacian.  \n\nWrite a function `get_eigvecs` that receives  \n\u2022 a real square matrix `L` (the Laplacian) and  \n\u2022 a positive integer `k` (the wanted number of eigenvectors)  \n\nand returns the **k eigenvectors associated with the k smallest eigenvalues**.\n\nRequirements\n1. If `k` is larger than the number of rows/columns in `L`, return **-1**.\n2. Use the real part of the eigenvalues and eigenvectors (numerical routines may return negligible imaginary parts).\n3. Each selected eigenvector must be L2-normalised to unit length.\n4. To obtain deterministic signs, flip every eigenvector so that the first non\u2013zero entry is **positive**.\n5. Round every entry of the resulting matrix to **4 decimal places** and return it as a regular Python list obtained with `tolist()` \u2013 each column in this list represents one eigenvector.\n\nExample\nInput\nL = [[1, -1],\n     [-1, 1]]\n\nk = 1\n\nOutput\n[[0.7071],\n [0.7071]]\n\nReasoning\nThe Laplacian above has eigenvalues 0 and 2. The eigenvector belonging to the smallest eigenvalue 0 is `[1, 1]`. After normalising to unit length we get `[0.7071, 0.7071]`, which is returned as the single column of the result matrix.\n# Your code should start with:\n```python\nimport numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry to 4 decimal places and convert the final NumPy array to a regular Python list with `tolist()`.\n"}
{"task_id": 385, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Discriminant Analysis (LDA) Dimensionality Reduction\n# Description:\nImplement Linear Discriminant Analysis (LDA) for dimensionality reduction.\n\nYour task is to write a function that projects a labelled data set onto its first **k** Linear Discriminant components.  The data set is given as a two\u2013dimensional list (or NumPy array) **X** with shape *(n_samples, n_features)* together with a one\u2013dimensional list/array **y** that contains the class label of each sample.  \n\nFor **c** different classes LDA can provide at most *(c \u2212 1)* meaningful projection directions.  Each direction maximises the ratio of the *between\u2013class* scatter to the *within\u2013class* scatter and therefore separates the classes as well as possible.  Your implementation must:\n\n1. compute the within-class scatter matrix $S_w$ and the between-class scatter matrix $S_b$;\n2. solve the generalised eigenvalue problem $S_w^{-1}S_b\\,\\mathbf{w}=\\lambda\\,\\mathbf{w}$ (use the Moore\u2013Penrose pseudo-inverse if $S_w$ is singular);\n3. sort the eigenvectors by descending eigenvalues;\n4. pick the first **k** eigenvectors, normalise each to unit length and, **for deterministic orientation**, make the first element of every eigenvector non-negative;\n5. return the data matrix projected onto those **k** directions, rounded to **4** decimal places and converted to a (nested) Python list.\n\nIf **k** is larger than *(c \u2212 1)* your function should silently use *(c \u2212 1)* instead.\n# Your code should start with:\n```python\nimport numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Your task is to complete this function!\"\"\"\n```\n# Output Constraints:\nRound every projected value to the nearest 4th decimal and return a standard Python list (use ndarray.tolist()).\n"}
{"task_id": 386, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Loss\n# Description:\nImplement the Binary Cross-Entropy (BCE) loss that is widely used to train binary classifiers such as logistic regression and neural networks.  \nThe BCE between the ground-truth labels $y\\_i\\in\\{0,1\\}$ and the predicted probabilities $\\hat y\\_i\\in(0,1)$ is defined as  \n\\[\\text{BCE}(\\mathbf y,\\hat{\\mathbf y})\\;=\\;-\\frac1n\\sum\\_{i=1}^{n}\\bigl[y\\_i\\,\\log(\\hat y\\_i)+(1-y\\_i)\\,\\log(1-\\hat y\\_i)\\bigr],\\]  \nwhere $n$ is the number of samples.\n\nWrite a function `binary_crossentropy` that\n1. Clips the predictions to the interval $[\\varepsilon,1-\\varepsilon]$ with $\\varepsilon=1\\times10^{-15}$ to avoid taking the logarithm of 0.\n2. Computes the average BCE as defined above.\n3. Returns the result rounded to **4** decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # TODO: Implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place.\n"}
{"task_id": 387, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gradient Boosting with One-Dimensional Stumps\n# Description:\nImplement a very small sized Gradient Boosting Regressor that works on ONE numerical feature only.  \n\nFor every boosting round the algorithm must build a decision **stump** (a depth-1 regression tree): it chooses one split\u2010point on the x\u2013axis that minimises the **sum of squared residuals** on both sides of the split.  The procedure for a data set (x,\u2006y) containing N samples is as follows:\n\n1. Let the current prediction for every sample be the mean of the targets, y\u0302\u207d\u2070\u207e\n2. Repeat `n_estimators` times\n   \u2022 Compute the residuals r\u1d62 = y\u1d62 \u2212 y\u0302\u1d62 (these are the negative gradients of the squared-error loss).\n   \u2022 Sort the samples by their x value and evaluate every possible split that lies halfway between two **different** consecutive x values.  For each candidate split t define the stump prediction\n        r\u0302\u1d62(t) = \\begin{cases} \\bar r_L & \\text{if } x\u1d62 \\le t \\\\ \\bar r_R & \\text{otherwise}\\end{cases}\n     where \\bar r_L and \\bar r_R are the mean residuals on the left and right side of the split.  Choose the t that yields the smallest sum of squared errors.\n   \u2022 If all feature values are identical (no valid split) the stump predicts the **global** mean residual for every point.\n   \u2022 Update the running prediction\n        y\u0302\u1d62 \u2190 y\u0302\u1d62 + learning_rate \u00d7 r\u0302\u1d62(t\\*)\n3. Return the final y\u0302 rounded to four decimals and as a Python list.\n\nYou only need `numpy`; no external ML libraries are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `list`, rounding every entry to 4 decimal places (use `numpy.round(pred, 4)`).\n"}
{"task_id": 389, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Graph Laplacian Matrix\n# Description:\nGiven the weighted adjacency matrix $\\mathbf W\\in\\mathbb R^{n\\times n}$ of an **undirected** graph, the (unnormalised) graph Laplacian is defined as\n\n$$\\mathbf L = \\mathbf D-\\mathbf W,$$\n\nwhere $\\mathbf D$ is the *degree matrix*, i.e. the diagonal matrix whose $i$-th diagonal entry equals the sum of the $i$-th row of $\\mathbf W$.\n\nWrite a Python function that\n1. Validates that the supplied matrix is square (same number of rows and columns). If it is **not** square, the function must return **-1**.\n2. Computes the degree matrix $\\mathbf D$.\n3. Returns the Laplacian matrix $\\mathbf L = \\mathbf D-\\mathbf W$.\n\nThe result must be rounded to 4 decimal places and returned as a (nested) Python list using NumPy\u2019s `tolist()` method.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numeric values must be rounded to the nearest 4th decimal.\nReturn the result as a list of lists (use `.tolist()`).\n"}
{"task_id": 391, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Nearest-Neighbour Interpolation for 1-D Signals\n# Description:\nImplement a function that performs **nearest-neighbour interpolation** on a one-dimensional, possibly multi-channel, signal.  \nGiven an input array `X` of shape `(in_length, in_channels)` and a list of (possibly non-integer) query positions `t`, the function must:\n1. Round every coordinate in `t` to its nearest integer index (NumPy\u2019s `around` behaviour must be used \u2013 ties go to the even integer).\n2. Clip all indices so that they lie in the valid range `[0, in_length-1]`.\n3. Return the samples of `X` located at those indices.  \nThe result has shape `(len(t), in_channels)` and must be returned as a plain Python list (use `tolist()`).\n# Your code should start with:\n```python\nimport numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the result as a standard Python list obtained via NumPy\u2019s `tolist()` method.  No additional rounding of the sample values themselves is required.\n"}
{"task_id": 392, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Pre-emphasis Filter for 1-D Signals\n# Description:\nImplement a Python function that applies a pre-emphasis filter to a 1-D signal.  \n\nPre-emphasis is a simple first-order finite-impulse-response (FIR) filter widely used in speech and audio processing to boost high-frequency components and attenuate low-frequency ones before further analysis (e.g.\nMFCC extraction).  The filtered signal \\( \\hat x \\) is obtained from the original signal \\( x \\) through the recurrence\n\n  \\[\\hat x_t = x_t - \\alpha\\, x_{t-1},\\qquad 0 \\le \\alpha < 1\\]\\\n\nwhere \\(\\alpha\\) is the pre-emphasis coefficient.  When \\(\\alpha = 0\\) the signal is left unchanged; larger values of \\(\\alpha\\) produce stronger high-frequency boosting.\n\nYour task is to write a function that\n1. Accepts a 1-D numeric sequence (Python list or NumPy array) and a float \\(\\alpha\\) in \\([0,1)\\).\n2. Applies the pre-emphasis equation to every sample, treating the first sample specially (it is kept unchanged).\n3. Returns the filtered signal **rounded to four decimal places and converted to a Python list**.\n\nIf the input contains more than one dimension, first flatten it so the filter is applied to the raw sample sequence.\n# Your code should start with:\n```python\nimport numpy as np\ndef preemphasis(x: \"list[float] | np.ndarray\", alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list.  Every element must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 394, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement RMSprop Optimiser Update Step\n# Description:\nRMSprop is one of the most popular adaptive-learning-rate optimisation algorithms used when training neural networks.  \nIn a single update step the algorithm keeps a running (exponentially decaying) average of the squared gradients and scales the learning rate of every parameter by the inverse square-root of this average.  \n\nGiven the current parameter vector $w$, its gradient $g=\\nabla_w\\mathcal{L}$, the previous running average $E_g$ (which may be `None` if it has not been initialised yet), a learning rate $\\alpha$ and the decay rate $\\rho$, implement one RMSprop update step.\n\nMathematically the update is:\n\n\\[\nE_g^{(t)} = \\rho\\,E_g^{(t-1)} + (1-\\rho)\\,g^{2},\\quad\nw^{(t)} = w^{(t-1)} - \\frac{\\alpha\\,g}{\\sqrt{E_g^{(t)} + \\varepsilon}},\n\\]\n\nwhere $\\varepsilon$ is a small constant (here fixed to $10^{-8}$) added for numerical stability.\n\nYour function must:\n1. Initialise `E_g` with zeros (same shape as the gradient) if it is `None`.\n2. Perform the update exactly as specified above.\n3. Round both the updated parameter vector and the new running average to **4 decimal places** and convert them to regular Python lists before returning.\n\nReturn both the updated parameters **and** the updated running average.\n\nIf the gradient is a multi-dimensional array the operation is applied element-wise.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nBoth returned arrays must be rounded to 4 decimal places and converted to regular Python lists.\n"}
{"task_id": 395, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Backward Algorithm Result Formatter\n# Description:\nHidden Markov Models (HMMs) often use the Backward Algorithm to compute the probability of an observation sequence.  After finishing the numerical computation it is convenient to present the resulting \u03b2-matrix together with the final probability in a clear, uniform format.  \n\nWrite a function that receives  \n\u2022 a 2-D NumPy array `beta` containing the \u03b2-values  \n\u2022 a floating number `b_prob` containing the probability of the given observation sequence  \n\nand RETURNS a single, nicely formatted multi-line string (do **not** print inside the function).  The required layout is\n```\n**************************************************\nBeta:\n<beta as produced by str(beta)>\nProbability of sequence: <b_prob>\n```\nExactly 50 asterisks (*) must be printed in the first line, followed by a newline.  Use Python\u2019s default `str()` representation of both the NumPy array and the floating number.  No additional spaces or newlines are allowed.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    # Write your code below this line\n    pass\n```\n# Output Constraints:\nReturn **one** string strictly following the required layout.\n"}
{"task_id": 396, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Tanh Activation \u2013 First and Second Derivatives\n# Description:\nImplement the hyper-bolic tangent (tanh) activation together with its first and second analytical derivatives.\n\nGiven a 1-D list or NumPy array x, the function must return a 3-element list:\n1. tanh(x)\n2. First derivative  d/dx tanh(x) = 1 \u2212 tanh(x)\u0002\n3. Second derivative d\u00b2/dx\u00b2 tanh(x) = \u22122\u00b7tanh(x)\u00b7(1 \u2212 tanh(x)\u0002)\n\nAll three arrays must be rounded to six (6) decimal places and converted to plain Python lists before returning.\n# Your code should start with:\n```python\nimport numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nRound every numeric value to 6 decimal places and return three Python lists enclosed in a single list.\n"}
{"task_id": 397, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate a Random One-Hot Matrix\n# Description:\nImplement a function that builds a random one-hot encoded design matrix.\n\nA one-hot matrix has exactly one element equal to **1** in every row; all other elements are **0**.  The function receives the desired number of rows (`n_examples`) and the total number of distinct classes (`n_classes`).  It must return a NumPy array of shape (`n_examples`, `n_classes`) where every row is a valid one-hot vector chosen **uniformly at random with replacement** from the `n_classes` possible class indices.\n\nYou may assume `n_classes > 0` and `n_examples \u2265 0`.  If `n_examples == 0`, return an empty array with shape `(0, n_classes)`.\n\nExample (with a fixed random seed so the result is repeatable here):\n```\n>>> import numpy as np\n>>> np.random.seed(0)\n>>> random_one_hot_matrix(5, 3)\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [1., 0., 0.],\n       [0., 1., 0.],\n       [0., 1., 0.]])\n```\nAll rows sum to 1 and the returned shape is `(5, 3)`.\n# Your code should start with:\n```python\nimport numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n\u2022 The returned value must be a NumPy `ndarray` of shape `(n_examples, n_classes)`.\n\u2022 Every element must be either 0 or 1.\n\u2022 Each row must contain exactly one 1 (i.e., the row sum equals 1).\n"}
{"task_id": 398, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ELU Activation and Gradient\n# Description:\nImplement the Exponential Linear Unit (ELU) activation function and its gradient.\n\nThe Exponential Linear Unit is widely used in deep-learning models because it helps the network converge faster and reduces the vanishing-gradient problem.  For a given input $x$ and hyper-parameter $\\alpha>0$\n\nELU(x, \u03b1) = { x,                            if x \u2265 0  \n             { \u03b1( e\u02e3 \u2212 1 ),                if x < 0\n\nThe element-wise derivative is\n\nELU\u2032(x, \u03b1) = { 1,                    if x \u2265 0  \n              { ELU(x, \u03b1) + \u03b1,       if x < 0\n\nWrite a single Python function that\n1. Accepts a one-dimensional Python list or NumPy array of numeric values `x`, a float `alpha` (default 0.1) and a boolean flag `derivative` (default `False`).\n2. When `derivative` is `False` it returns the ELU activation for every element.\n3. When `derivative` is `True` it returns the element-wise gradient.\n\nReturn the result as a Python list with every value rounded to the 4\u1d57\u02b0 decimal place.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places and return the result as a Python list.\n"}
{"task_id": 399, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Pairwise Euclidean Distance Matrix\n# Description:\nImplement a function that computes the full pair-wise Euclidean distance matrix between two sets of vectors.\n\nGiven two 2-D NumPy arrays X\u2208\u211d^{m\u00d7d} and Y\u2208\u211d^{n\u00d7d}, where every row represents a d-dimensional point, create the matrix D\u2208\u211d^{m\u00d7n} such that\n    D[i , j] = ||X_i \u2212 Y_j||_2 .\nIf either array is not two-dimensional or their numbers of columns differ, return **-1**.\n\nThe returned matrix must be rounded to four decimal places and converted to a regular Python *list of lists*.\n# Your code should start with:\n```python\nimport numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry to the nearest 4th decimal; return a Python list of lists.\n"}
{"task_id": 400, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Cumulative Distribution Function\n# Description:\nComplete the implementation of the cumulative distribution function (CDF) of a univariate Gaussian (normal) random variable.\n\nYour task is to write a function `gaussian_cdf` that, for a given value `x`, mean `\u03bc`, and variance `\u03c3\u00b2`, returns the probability   \nP(X \u2264 x) where X ~ \ud835\udca9(\u03bc, \u03c3\u00b2).\n\nThe CDF of a normal distribution with positive variance is given analytically by\n\n    \u03a6(x; \u03bc, \u03c3\u00b2) = 0.5 * [1 + erf((x - \u03bc) / (\u221a2 \u03c3))]\n\nwhere `erf` denotes the error function.  When the variance is zero the distribution collapses to a point mass at `\u03bc` and\n\n    \u03a6(x; \u03bc, 0) = 0     if x < \u03bc\n                = 0.5  if x = \u03bc\n                = 1     if x > \u03bc\n\nReturn the result rounded to **six** decimal places.\n# Your code should start with:\n```python\nimport math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nRound the returned probability to exactly 6 decimal places using round(probability, 6).\n"}
{"task_id": 401, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding Utility\n# Description:\nImplement a utility function that converts a vector of integer class labels into a one-hot encoded NumPy matrix.\n\nIn many machine-learning algorithms (neural networks, gradient boosting, etc.) class labels must be represented in *one-hot* form: for **N** samples and **C** classes the labels are stored in an **(N, C)** matrix that contains a 1 at the column corresponding to the class and 0 elsewhere.\n\nWrite a function `to_one_hot` that takes a NumPy array `y` and an optional integer `num_classes` and returns the one-hot encoded representation of `y` following the rules below:\n\n1. `y` can be:\n   \u2022 a 1-D array with shape `(N,)`, e.g. `array([2, 0, 1])`, or\n   \u2022 a 2-D array with shape `(N, 1)`, e.g. `array([[2], [0], [1]])`, or\n   \u2022 an array that is **already** one-hot encoded (shape `(N, C)` with every row summing to 1). In that case return `y` unchanged.\n2. If `num_classes` is provided, it specifies the width **C** of the output matrix. Otherwise **C = max(y) + 1`**.\n3. The output must be a `float` array that contains only 0.0 and 1.0.\n\nReturn the encoded matrix without modifying the contents of the input array.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a NumPy `float` array of shape `(N, C)` containing only 0.0 and 1.0.\n"}
{"task_id": 402, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Naive Bayes Classifier\n# Description:\nImplement Gaussian Naive Bayes (GNB) classification from scratch.  \nThe Gaussian Naive Bayes model assumes that, conditioned on the class label, every feature is independent and follows a normal distribution.  For each class \\(c\\) and feature index \\(j\\) we estimate\n\u2022 mean: \\(\\mu_{c,j} = \\frac1{N_c}\\sum_{i:y_i=c} x_{i,j}\\)\n\u2022 variance: \\(\\sigma^2_{c,j} = \\frac1{N_c}\\sum_{i:y_i=c}(x_{i,j}-\\mu_{c,j})^2 + \\varepsilon\\)\nwhere \\(N_c\\) is the number of training samples belonging to class \\(c\\) and \\(\\varepsilon\\) is a small constant that prevents numerical errors when a variance is 0.\n\nFor a test example \\(\\mathbf x\\) and every class \\(c\\) we compute the un-normalised log\u2013posterior\n\\[\\log P(y=c\\mid \\mathbf x) \\propto \\log P(y=c)+\\sum_{j=1}^{M}\\log\\mathcal N\\bigl(x_j\\mid\\mu_{c,j},\\sigma^2_{c,j}\\bigr)\\]\nwhere the feature-wise Gaussian log-likelihood is\n\\[\\log\\mathcal N(x\\mid \\mu,\\sigma^2)=-\\tfrac12\\bigl[\\log(2\\pi\\sigma^2)+\\tfrac{(x-\\mu)^2}{\\sigma^2}\\bigr].\\]\nThe predicted label for \\(\\mathbf x\\) is the class with the largest log-posterior probability.\n\nWrite a function that\n1. receives a training set (features **X_train**, labels **y_train**), a test set (**X_test**), and an optional *eps* (default 1 e-6);\n2. estimates class priors, means and variances from the training set;\n3. returns a NumPy array containing the predicted labels for every row in **X_test**.\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float = 1e-6) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a NumPy 1-D array of predicted labels.\n"}
{"task_id": 405, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Activation-Function Factory\n# Description:\nImplement a small **activation-function factory**.  The goal is to write a function `apply_activation` that receives a numeric vector `x` (Python list or NumPy array) and a second argument `param` describing which activation must be applied.  The function must return the element-wise result as a **Python list**.\n\nAccepted values for `param` (case\u2013insensitive)\n1. `None` or `\"identity\"` \u2013> Identity  \ud835\udc53(x)=x.\n2. `\"relu\"` \u2013> Rectified Linear Unit  \ud835\udc53(x)=max(0,x).\n3. `\"tanh\"` \u2013> Hyperbolic tangent  \ud835\udc53(x)=tanh(x).\n4. `\"sigmoid\"` \u2013> Logistic sigmoid  \ud835\udc53(x)=1/(1+e^{\u2212x}).\n5. `\"leaky relu(alpha=<float>)\"` \u2013> Leaky-ReLU with leak coefficient *alpha*:  \ud835\udc53(x)=x if x>0 else \u03b1\u00b7x.  If the string is given without the parenthesised part the default \u03b1 = 0.01 must be used.\n6. `\"affine(slope=<float>, intercept=<float>)\"` \u2013> General affine transformation  \ud835\udc53(x)=slope\u00b7x+intercept.\n\nFor any other value of `param` the function must raise `ValueError(\"Unknown activation: <param>\")`.\n\nThe computation has to work on scalars as well as on N-dimensional NumPy arrays.  The returned list must be **rounded to 6 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\nimport re\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nAll numerical results must be rounded to 6 decimal places before being converted to a Python list via NumPy\u2019s `tolist()` method.\n"}
{"task_id": 406, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbors Prediction\n# Description:\nImplement the k-Nearest Neighbors (k-NN) prediction algorithm.\n\nGiven a set of training samples (``X_train``) with their corresponding class labels (``y_train``) and an array of samples to be classified (``X_test``), write a function that predicts the class of every test sample by majority voting among its *k* closest training samples, where closeness is measured with the Euclidean distance.\n\nDetailed steps\n1. For every test sample compute the Euclidean distance to **all** training samples.\n2. Select the indices of the *k* training samples with the smallest distances (if *k* is larger than the number of training samples, use all available samples).\n3. Retrieve the labels of these *k* nearest neighbours.\n4. Count how many times each label appears and assign the label with the highest count.  In case of a tie, choose the smallest label value (this naturally happens when ``numpy.bincount`` followed by ``argmax`` is used).\n5. Repeat the procedure for every sample in ``X_test`` and return a Python ``list`` with the predicted labels in the original order of ``X_test``.\n# Your code should start with:\n```python\nimport numpy as np\ndef knn_predict(X_train: \"np.ndarray\", y_train: \"np.ndarray\", X_test: \"np.ndarray\", k: int = 5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a plain Python list with one integer label per test sample. No rounding is required.\n"}
{"task_id": 410, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Activation Function Parser\n# Description:\nImplement a parser that converts a textual description of a neural-network activation function into a structured Python dictionary.\n\nThe description string can be in one of the following canonical forms (no surrounding spaces unless shown):\n\n1. \"ReLU\"\n2. \"Sigmoid\"\n3. \"Tanh\"\n4. \"Affine(slope=<number>, intercept=<number>)\"\n5. \"Leaky ReLU(alpha=<number>)\"\n\nThe task is to write a function that\n\u2022 returns a dictionary whose key \"type\" stores the activation name exactly as it appears in the above list;\n\u2022 for the two parameterised activations, also stores the associated numeric parameters as floats;\n\u2022 returns \u20131 when the input does not match any valid pattern.\n\nValid numeric literals can be written as integers (e.g. 3, \u20132) or floating-point numbers (e.g. 0.5, \u2013.75).\n# Your code should start with:\n```python\nimport re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nAll numeric parameters in the returned dictionary must be of Python float type.\n"}
{"task_id": 411, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Environment Statistics Summary\n# Description:\nIn many reinforcement\u2013learning tutorials we collect **trajectories** \u2013 sequences of actions that were taken and observations that were produced by the environment.  \nFor a quick sanity check it is often useful to look at simple statistics such as\n\u2022 whether the data are multi-dimensional or not,  \n\u2022 whether the values are discrete (integers only) or continuous (contain real numbers),  \n\u2022 how many different values appear in every dimension, etc.\n\nWrite a function `env_stats` that receives two Python lists \u2013 a list with **actions** and a list with **observations** \u2013 and returns an exhaustive dictionary with the statistics listed below.\n\nEach element in the two input lists may be  \n\u2022 a scalar (e.g. `3` or `0.25`) \u2013 meaning a 1-D space, or  \n\u2022 an iterable of scalars (list / tuple / numpy array) \u2013 meaning a multi-dimensional value.\n\nAssume that all elements belonging to the same list have the same dimensionality.\n\nReturned dictionary keys\n\u2022 `tuple_actions` & `tuple_observations` \u2013 `True` if at least one element of the corresponding list is an iterable (list/tuple/numpy array).  \n\u2022 `multidim_actions` & `multidim_observations` \u2013 `True` when the corresponding values have more than one dimension (i.e. length > 1).  \n\u2022 `continuous_actions` & `continuous_observations` \u2013 `True` when at least one value in the flattened collection is a **non-integer float** (e.g. `1.2`).  \n\u2022 `n_actions_per_dim`, `n_obs_per_dim` \u2013 list with the number of **unique** values that appear in every dimension (the order of dimensions is preserved).  \n\u2022 `action_dim`, `obs_dim` \u2013 dimensionality of the action / observation space.  \n\u2022 `action_ids`, `obs_ids` \u2013 in every dimension the sorted list of unique values.\n\nExample\nInput\nactions = [(0, 1), (1, 0), (1, 1)]  \nobservations = [10.0, 11.5, 12.0]\n\nOutput\n{\n  'tuple_actions': True,\n  'tuple_observations': False,\n  'multidim_actions': True,\n  'multidim_observations': False,\n  'continuous_actions': False,\n  'continuous_observations': True,\n  'n_actions_per_dim': [2, 2],\n  'action_dim': 2,\n  'n_obs_per_dim': [3],\n  'obs_dim': 1,\n  'action_ids': [[0, 1], [0, 1]],\n  'obs_ids': [[10.0, 11.5, 12.0]]\n}\n\nReasoning\n\u2022 Every action is a 2-tuple \u21d2 `tuple_actions=True`, `multidim_actions=True`, `action_dim=2`.  \n\u2022 Each observation is a single float \u21d2 `tuple_observations=False`, `multidim_observations=False`, `obs_dim=1`.  \n\u2022 Action values are integers only \u21d2 `continuous_actions=False`.  \n\u2022 Observations contain non-integer floats \u21d2 `continuous_observations=True`.  \n\u2022 In the 1st as well as the 2nd action dimension the unique values are `{0,1}` \u21d2 two unique values per dimension.  \n\u2022 Observation dimension has the unique values `{10.0, 11.5, 12.0}` \u21d2 3 unique values in that dimension.\n# Your code should start with:\n```python\nimport numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a dictionary **exactly** with the keys listed above \u2013 the order of keys does not matter.\n"}
{"task_id": 412, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Classification Metrics Retrieval\n# Description:\nYou are given to implement four common evaluation metrics for binary-classification and a helper function that retrieves those metrics by name.\n\nSupported metrics\n1. accuracy \u2013 ratio of correct predictions to total predictions.\n2. precision \u2013 TP / (TP + FP). If the denominator is 0, return 0.\n3. recall \u2013 TP / (TP + FN). If the denominator is 0, return 0.\n4. f1 \u2013 harmonic mean of precision and recall. If both precision and recall are 0, return 0.\n\nAll metric results have to be rounded to exactly 4 decimal places using the built-in round(number, 4) and returned as Python floats.\n\nFunction get_metric(name) must return the corresponding metric function when a valid name is supplied; otherwise it must return -1.\n\nThe returned metric functions must accept two equal-length iterables consisting solely of 0s and 1s (y_true first, y_pred second) and return the computed score.\n\nNo exception handling (try/except) or OOP is allowed in the solution.\n# Your code should start with:\n```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n```\n# Output Constraints:\nAll metric results must be rounded to 4 decimal places.\n"}
{"task_id": 413, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Simplified Gradient Boosting Regression Trees\n# Description:\nImplement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch.  The function must:  \n1. Start with an initial prediction equal to the mean of the training targets.  \n2. For each boosting iteration, compute the residuals (negative gradients of the squared\u2013error loss), fit a CART regression tree of limited depth to those residuals, and update the running prediction by adding the tree\u2019s output multiplied by the learning rate.  \n3. After *n_estimators* iterations, return the final prediction for every sample in *X_test*.  \nThe internal regression trees may be implemented only with NumPy (no external libraries).  For simplicity the tree may be binary-splitting, use mean\u2013squared-error as the split criterion, and stop growing when *max_depth* is reached or no further reduction in error is possible.  All returned numbers must be rounded to 4 decimal places and converted to regular Python lists.\n# Your code should start with:\n```python\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every predicted value to the nearest 4th decimal and return a Python list.\n"}
{"task_id": 414, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Exponential Learning-Rate Scheduler\n# Description:\nImplement an exponential learning-rate scheduler.\n\nIn many optimisation routines (especially stochastic gradient descent used in Deep-Learning) the learning rate (LR) is decreased during training so that the parameter updates become smaller the longer the optimisation runs.  A popular schedule is the **exponential decay**\n\n    lr(step) = initial_lr \u00b7 decay^(curr_stage)\n\nwhere the *stage* counter depends on the current optimisation step and the chosen *stage_length*:\n\n\u2022 Smooth decay  (staircase = False)\n      curr_stage = step / stage_length\n\n\u2022 Stair-case decay  (staircase = True)\n      curr_stage = \u230astep / stage_length\u230b\n\nYour task is to write a function `exponential_scheduler` that returns the learning-rate for a given `step`.\n\nIf one of the following invalid situations is detected the function must return **-1** instead of a learning rate:\n\u2022 `step` is negative\n\u2022 `stage_length` is not a positive integer\n\u2022 `decay` is not positive\n\nThe returned learning-rate has to be rounded to **6 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a float rounded to 6 decimal places.\n"}
{"task_id": 415, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement 1-D Discrete Cosine Transform Type-II\n# Description:\nImplement the one\u2013dimensional Type-II Discrete Cosine Transform (DCT-II).  For an input signal (frame) \ud835\udc65 of length N the un-normalised DCT-II coefficients are defined as  \n\n\ud835\udc4b\u2096 = \u03a3\u2099\u208c\u2080^{N\u22121}  \ud835\udc65\u2099 \u00b7 cos[ \u03c0/N \u00b7 (n + 0.5) \u00b7 k ] ,  \u2003k = 0,1,\u2026,N\u22121.\n\nWrite a function that\n1. accepts a list of real numbers (ints or floats),\n2. returns a list of the same length containing the DCT-II coefficients rounded to four decimal places,\n3. uses only NumPy for numerical work (no ``scipy``, ``sklearn`` \u2026).\n\nIf the given list is empty the function must return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"TODO:  implement the un-normalised 1-D DCT-II described in the task.\"\"\"\n    pass\n```\n# Output Constraints:\nAll coefficients have to be rounded to the nearest 4th decimal place before returning.\n"}
{"task_id": 416, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Multivariate Gaussian PDF Implementation\n# Description:\nImplement the probability density function (PDF) of a multivariate Gaussian (Normal) distribution without using any third-party libraries such as SciPy.  \n\nGiven\n\u2022 X \u2013 a NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated;  \n\u2022 mean \u2013 the mean vector of the distribution (length n_features);  \n\u2022 cov \u2013 the covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible),  \n\nyou have to return a Python list whose *i-th* element is the PDF value for *X[i]* rounded to four decimal places.  \n\nMathematically the multivariate Gaussian PDF is defined as  \n\n  \\[ p(x) = \\frac{1}{\\sqrt{(2\\pi)^d\\det(\\Sigma)}}\\;\\exp\\Bigl( -\\tfrac12 (x-\\mu)^\\top\\Sigma^{-1}(x-\\mu) \\Bigr) \\]  \n\nwhere *d* is the dimensionality, \\(\\mu\\) is the mean vector and \\(\\Sigma\\) is the covariance matrix.  \n\nIf *X* is provided as a one-dimensional array it must be treated as (n_samples, 1).\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"YOUR DOCSTRING HERE\"\"\"\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nReturn a Python list with every element rounded to the nearest 4th decimal.\n"}
{"task_id": 417, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: PCA Dimensionality Reduction with Reconstruction\n# Description:\nPrincipal Component Analysis (PCA) is a classical technique used to project a high-dimensional data set onto a lower-dimensional sub-space while preserving as much variance as possible.  \n\nWrite a **pure NumPy** function that:\n1. centres the data by subtracting the column\u2013wise mean,\n2. builds the unbiased covariance matrix,\n3. performs an eigen-decomposition of the covariance matrix,\n4. sorts the eigenvectors by descending eigenvalue magnitude and keeps the first **k** eigenvectors,\n5. enforces a deterministic orientation for every retained eigenvector (flip the sign so that the first non-zero component is positive),\n6. projects the centred data onto the selected eigenvectors (\"low-dimensional representation\"),\n7. reconstructs the data back in the original space using the retained components,\n8. rounds both the low-dimensional representation and the reconstruction to **4 decimal places**, and\n9. returns the two rounded matrices as Python lists.\n\nIf *k* \u2265 the original number of features the algorithm should still work (it will simply keep all eigenvectors).\n# Your code should start with:\n```python\nimport numpy as np\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 418, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Covariance Matrix Computation\n# Description:\nYou are given a data matrix X whose rows represent samples and whose columns represent features. Your task is to write a function that returns the sample covariance matrix of X. The sample covariance between two features x and y is defined as:\n\ncov(x, y) = \u03a3\u1d62 (x\u1d62 - \ud835\udf07\u2093)(y\u1d62 - \ud835\udf07\u1d67) /(n - 1)\n\nwhere \ud835\udf07\u2093 and \ud835\udf07\u1d67 are the sample means of the two features and n is the number of samples.  \n\nRequirements\n1. If the data are provided as a Python list, convert them to a NumPy array.\n2. If the number of samples n is smaller than 2, return a square zero-matrix of size d \u00d7 d, where d is the number of features.\n3. Round every element of the resulting covariance matrix to 4 decimal places and return it as a (nested) Python list via NumPy\u2019s `tolist()`.\n\nThe function will later be used by a PCA routine like the one you saw in the code snippet, therefore make sure to follow the sample covariance definition (divide by n \u2212 1, not n).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\n"}
{"task_id": 419, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Bayesian Linear Regression \u2013 MAP Prediction\n# Description:\nImplement Bayesian linear regression with a conjugate Gaussian prior and **known** observation variance.  \n\nGiven a training set `X \u2208 \u211d^{N\u00d7M}` and targets `y \u2208 \u211d^{N}` you must:  \n1. (Optional) add an intercept column of ones to `X` (**and to every `X_new`**) when `fit_intercept=True`.  \n2. Treat the prior on the parameter vector `\u03b2` as  \n   \u03b2 ~ \ud835\udca9( \u03bc, \u03c3\u00b2 V ) where  \n   \u2022 `\u03bc` can be either a scalar (replicated to every dimension) or a vector of length *M* (\u2006*M + 1* when an intercept is fitted).  \n   \u2022 `V` may be  \n     \u2013 a scalar (interpreted as the multiple of the identity),  \n     \u2013 a 1-D array (its values form the diagonal of `V`), or  \n     \u2013 a full, symmetric, positive-definite square matrix.  \n   If `V` is `None` assume the identity matrix.  \n3. Compute the posterior distribution  \n   \u03a3\u209a = ( V\u207b\u00b9 + X\u1d40 X )\u207b\u00b9  \n   \u03bc\u209a = \u03a3\u209a ( V\u207b\u00b9 \u03bc + X\u1d40 y ).  \n   (The observation variance \u03c3\u00b2 cancels out in the MAP estimate, so `\u03c3` is ignored here.)  \n4. For a new design matrix `X_new` return the **MAP predictive mean**  \n   \u0177 = X_new \u03bc\u209a.  \n\nRound every predicted value to **4 decimal places** and return them as a regular Python `list` (not a NumPy array).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `list` where every element is rounded to **4 decimal places**.\n"}
{"task_id": 420, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate Boolean Split Masks\n# Description:\nIn many tree-based machine-learning algorithms (e.g., CART, Random Forest, Gradient Boosting) the training data are recursively divided into two subsets using a feature column and a numeric threshold.  \n\nWrite a Python function that, for a given 2-D NumPy array `X`, a column index `column`, and a split value `value`, returns two Boolean masks:\n1. `left_mask` \u2013 `True` for the rows whose `column` value is strictly smaller than `value`.\n2. `right_mask` \u2013 `True` for the rows whose `column` value is **greater than or equal to** `value`.\n\nIf the supplied `column` index is outside the range `[0, X.shape[1) )`, both masks must be returned as empty Python lists.\n\nThe function must **not** modify the original array and must return Python lists (obtained via NumPy\u2019s `tolist` method) so that they can be easily consumed by code that does not expect NumPy objects.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn *two* Python lists of equal length consisting only of `True` and `False`.\n"}
{"task_id": 421, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: DBSCAN Clustering From Scratch\n# Description:\nDensity-Based Spatial Clustering of Applications with Noise (DBSCAN) is a popular clustering algorithm that groups together points that are closely packed and marks points that lie alone in low-density regions as noise.  \n\nWrite a Python function that performs DBSCAN **from scratch** without using any implementation provided by external libraries such as *scikit-learn*.  \n\nThe function must accept\n1. a NumPy array `data` of shape `(n_samples, n_features)` containing the data points to be clustered,\n2. a floating-point number `eps` \u2013 the maximum distance two points can be apart to be considered neighbours, and\n3. an integer `min_samples` \u2013 the minimum number of points required to form a dense region (core point).\n\nThe algorithm should\n\u2022 iterate through the points in the order they appear in `data`,\n\u2022 label each **core point** and all points that are density-reachable from it with consecutive positive integers starting at **1**, and\n\u2022 label every point that is **not** density-reachable from any core point with **-1** (noise).\n\nReturn the labels as a `list[int]` of length `n_samples`.\n\nYou may only use NumPy for numerical operations; no third-party ML libraries are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nNoise points must be labelled -1.  \nClusters must be numbered 1, 2, 3, \u2026 in the order they are first discovered when scanning the data from index 0 to n-1.\n"}
{"task_id": 422, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: SoftPlus Activation and Its Derivatives\n# Description:\nImplement the SoftPlus activation function and its first two derivatives.  \nThe SoftPlus function is a smooth approximation of the ReLU function and is defined as  \nSoftPlus(x) = ln(1 + e\u02e3).\n\nYour task is to write a Python function that\n1. Accepts a NumPy array (or Python list/tuple that can be converted to a NumPy array) `x` and an integer `order`.\n2. Returns the _SoftPlus_ value (when `order == 0`), the first derivative (when `order == 1`), or the second derivative (when `order == 2`).\n3. For any other `order`, return `-1`.\n\nFormulas  \n\u2022 SoftPlus(x)            = ln(1 + e\u02e3)  \n\u2022 SoftPlus'(x)           = e\u02e3 / (1 + e\u02e3)                          (the logistic sigmoid)  \n\u2022 SoftPlus''(x)          = e\u02e3 / (1 + e\u02e3)\u00b2\n\nAll returned values must be rounded to 4 decimal places and converted to regular Python types (float or nested lists produced with `tolist()`).\n# Your code should start with:\n```python\nimport numpy as np\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every element of the result to the nearest 4th decimal and convert the final NumPy array to standard Python types using `.tolist()` before returning.\n"}
{"task_id": 423, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Root Mean Squared Logarithmic Error Calculator\n# Description:\nRoot Mean Squared Logarithmic Error (RMSLE) is a common regression evaluation metric that penalizes the ratio between the predicted and the actual target instead of their absolute difference.  Given two equally-sized sequences of non-negative numbers \u2013 the ground-truth values (`actual`) and the model predictions (`predicted`) \u2013 RMSLE is defined as\n\nRMSLE = \u221a( (1/n) \u00b7 \u03a3 ( log(1 + predicted\u1d62) \u2212 log(1 + actual\u1d62) )\u00b2 ).\n\nWrite a Python function that\n1. validates that both inputs have the same length and contain only non-negative numbers; if not, **return -1**;\n2. computes the RMSLE according to the formula above;  \n3. returns the result rounded to **four decimal places** (use `round(value, 4)`).\n# Your code should start with:\n```python\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 424, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Shannon Entropy of a Label Sequence\n# Description:\nIn information theory, the Shannon entropy measures the amount of uncertainty (or \"information\") contained in a random variable.  In the context of classification, it is often applied to a sequence of class labels to quantify the impurity of a node when building decision-trees or other models.\n\nWrite a Python function that takes a **non-empty** list of non-negative integers representing class labels and returns the Shannon entropy (in bits) of that label sequence.  The entropy \\(H\\) is defined as\n\n\\[\nH = -\\sum_{i=1}^{k} p_i\\,\\log_2 p_i,\n\\]\n\nwhere \\(p_i\\) is the relative frequency of label *i* and the summation runs over all distinct labels.  \n\nReturn the result rounded to the 4th decimal place.  Use `numpy` for any numerical operations you need.\n# Your code should start with:\n```python\nimport numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn the entropy rounded to the nearest 4th decimal.\n"}
{"task_id": 425, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Shannon Entropy of Discrete Data\n# Description:\nImplement a function that calculates the (natural-log) Shannon entropy of a one-dimensional collection of non-negative integers.  \n\nFor an array $x$ that contains the symbols $\\{v_1, v_2, \\ldots , v_k\\}$ with corresponding relative frequencies (probabilities) $p_1, p_2, \\ldots , p_k$, the Shannon entropy is defined as\n\\[\\displaystyle H(x) = -\\sum_{i=1}^{k} p_i\\,\\ln p_i.\\]\n\nThe function must:\n1. Convert the input sequence to a probability distribution.\n2. Compute the entropy using the natural logarithm.\n3. Return the value rounded to **4 decimal places**.\n4. If the input contains only a single unique value the entropy is defined as **0.0**.\n\nThe input may be either a Python list or a NumPy array of non-negative integers; the function must work for both.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"Your docstring here\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place.\n"}
{"task_id": 426, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Classification Accuracy Metric\n# Description:\nWrite a Python function that measures the predictive performance of a classification model by computing the **accuracy score**.\n\nGiven two equal-length sequences\n1. `y_true` \u2013 the true class labels, and\n2. `y_pred` \u2013 the labels predicted by a model,\nthe accuracy score is defined as the fraction of labels that are predicted correctly:\n\naccuracy = (number of correct predictions) / (total number of predictions)\n\nThe function must\n\u2022 return the accuracy rounded to 4 decimal places;\n\u2022 return **-1** when the two input sequences do not have the same length or when either of them is empty.\n\nDo **not** use any third-party machine-learning libraries such as `sklearn`.\n# Your code should start with:\n```python\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a single `float` rounded to the nearest 4th decimal place. Return **-1** when the inputs are invalid as described above.\n"}
{"task_id": 427, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Identity Activation Function\n# Description:\nIn artificial neural networks, an activation function transforms the aggregated input a neuron receives before passing it to the next layer.  The simplest activation is the *identity* (or *linear*) activation\n\nf(\ud835\udc67) = \ud835\udc67,\u2003\u2003f\u2032(\ud835\udc67) = 1\n\nwhere the derivative is constant 1 for every element in the input tensor.\n\nWrite a Python function that\n1. Accepts a 1-D or n-D numeric input (Python list, tuple, or NumPy ndarray).\n2. Computes the identity activation (which simply returns the input unchanged).\n3. Computes the element-wise derivative (an array of ones having the same shape as the input).\n4. Returns a **tuple** consisting of two Python lists:  \n   \u2022 the activation result  \n   \u2022 the derivative result\n\nIf the argument is a sequence (e.g., list) convert it internally to a NumPy array to leverage vectorised operations.  The final results must be converted back to regular Python lists via NumPy\u2019s `tolist()` method before returning.\n# Your code should start with:\n```python\nimport numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a **tuple of two Python lists** in the form `(activation, derivative)`.\nDo **not** return NumPy ndarrays.\n"}
{"task_id": 428, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hann Window Generator\n# Description:\nCreate a Python function that generates a Hann window (also called the Hanning window) of a specified length.  The Hann window is widely used in digital signal-processing tasks such as short-time Fourier transforms and spectral analysis because its end points smoothly reach zero, reducing spectral leakage.\n\nMathematically, the samples of a symmetric Hann window of length $N$ are\n\nhann(n) = 0.5 - 0.5 * cos( 2 * \u03c0 * n / (N-1) ),   0 \u2264 n < N.\n\nWhen a *periodic* window is required (the case typically used before an FFT), one extra symmetric sample is computed and the last sample is discarded, ensuring continuity between successive, adjacent windows.  This behaviour is controlled by the boolean argument *symmetric*:\n\n\u2022 symmetric = True  \u2192  return a strictly symmetric window of length *window_len*.\n\u2022 symmetric = False \u2192  return a periodic window of length *window_len* (produced by building a symmetric window of length *window_len*+1 and dropping its last entry).\n\nSpecial cases:\n\u2022 If *window_len* \u2264 0  \u2192 return an empty list.\n\u2022 If *window_len* = 1  \u2192 return [1.0] for either value of *symmetric*.\n\nAll numbers in the returned list must be rounded to the nearest 4th decimal place.\n# Your code should start with:\n```python\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    pass  # Write your code here\n```\n# Output Constraints:\nRound every window coefficient to 4 decimal places and convert the final NumPy array to a regular Python list before returning.\n"}
{"task_id": 429, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Contextual Bernoulli Bandit Oracle\n# Description:\nIn the contextual (or feature\u2010based) multi-armed bandit setting each context (state) possesses its own Bernoulli payoff distribution for every arm.  \n\nImplement a helper function that plays the role of an *oracle*: given  \n\u2022 a probability matrix `context_probs` of shape `(D, K)` whose entry `(i, j)` contains the probability of getting a reward **1** when arm `j` is pulled under context `i`, and  \n\u2022 a one-hot encoded context vector `context` of length `D` identifying the current context,  \nreturn\n1. `optimal_rwd` \u2013 the largest expected reward that can be obtained in that context, rounded to four decimal places, and\n2. `optimal_arm` \u2013 the index (column) of the arm that achieves this maximal expected reward (if several arms attain the same probability, choose the smallest index).\n\nIf the supplied `context` is *not* a valid one-hot vector (i.e. it is not one-dimensional, does not have the same length as `context_probs.shape[0]`, or contains more/less than a single 1) the function must return the tuple `(-1, -1)`.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\n`optimal_rwd` must be rounded to the nearest 4th decimal using `numpy.round`.\n"}
{"task_id": 430, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Deterministic Topological Sort of a Directed Graph\n# Description:\nYou are given a set of vertices and a set of **directed** edges.  Implement a function that\n\n1. returns a *topological ordering* of the vertices when the directed graph is a **Directed Acyclic Graph (DAG)**;\n2. returns **None** when the graph contains at least one directed cycle.\n\nA *topological ordering* is a linear ordering of the vertices such that for every directed edge \n`u \u2192 v`, vertex `u` comes before vertex `v` in the ordering.\n\nThe ordering produced by your function **must be deterministic**:\n\u2022 iterate over the `vertices` list from left to right;\n\u2022 for every vertex, explore its outgoing neighbours in the same left\u2013to-right order induced by `vertices`.\n\nThis deterministic depth-first search (DFS) guarantees a unique answer for the provided test cases.\n# Your code should start with:\n```python\nfrom typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n\u2022 Return a Python list containing the vertices in topological order.\n\u2022 Return the Python value `None` if the graph is not acyclic.\n"}
{"task_id": 431, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Euclidean Distance Between Vectors\n# Description:\nWrite a Python function that returns the Euclidean (L2) distance between two numeric vectors.\n\nThe function must:\n1. Accept each vector either as a Python list/tuple (of `int`/`float`) or a 1-D NumPy array.\n2. Validate that both vectors have the same length. If they differ in length, return **-1**.\n3. Compute the L2 distance  $\\sqrt{\\sum_{i=1}^{n}(x_{1i}-x_{2i})^{2}}$.\n4. Round the final distance to **4** decimal places and return it as a Python `float`.\n# Your code should start with:\n```python\nimport numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numeric results must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 433, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Xavier Fan-in and Fan-out Calculator\n# Description:\nIn many neural-network initialization schemes (e.g. Xavier/Glorot), two quantities called *fan-in* and *fan-out* are required.  \n\u2022 **fan-in** \u2013 the number of input connections that feed into a weight tensor.  \n\u2022 **fan-out** \u2013 the number of output connections produced by that tensor.  \n\nWrite a function `glorot_fan` that receives a weight-tensor shape (a tuple or list of integers, length \u2265 2) and returns `fan_in` and `fan_out` as **float** values.\n\nRules\n1. If the shape has exactly 4 dimensions it is assumed to be a 2-D convolutional kernel with layout `(out_channels, in_channels, kernel_height, kernel_width)`.\n   \u2022 `receptive_field_size = kernel_height \u00d7 kernel_width` (product of the last two dimensions).\n   \u2022 `fan_in  = in_channels  \u00d7 receptive_field_size`.\n   \u2022 `fan_out = out_channels \u00d7 receptive_field_size`.\n2. For every other tensor (dense layer, embedding matrix, higher-dimensional tensor, \u2026) take the **first** two dimensions directly: `fan_in, fan_out = shape[0], shape[1]`.\n\nReturn the two numbers as a tuple `(fan_in, fan_out)` containing floats.\nIf the supplied shape has fewer than two dimensions the program behaviour is undefined (you may assume the tests always obey the rule).\n# Your code should start with:\n```python\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    pass\n```\n# Output Constraints:\nReturn a tuple containing two floats: (fan_in, fan_out).\n"}
{"task_id": 434, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numerically Stable Softmax\n# Description:\nImplement the numerically-stable softmax function.\n\nThe softmax operation is widely used in deep-learning models to convert raw prediction scores (called *logits*) into a probability distribution.  Given a row vector $\\mathbf z = [z_1,\\;z_2,\\;\\dots,\\;z_n]$, the softmax of the $i$-th component is defined as\n$$\n\\operatorname{softmax}(\\mathbf z)_i \n    = \\frac{e^{z_i}}{\\sum_{j=1}^{n} e^{z_j}}.\n$$\n\nA direct implementation can overflow when some logits are very large or underflow when they are very negative.  A common trick to avoid this is to subtract the row-wise maximum before computing the exponentials:\n$$\n\\operatorname{softmax}(\\mathbf z)_i \n    = \\frac{e^{z_i - \\max(\\mathbf z)}}{\\sum_{j=1}^{n} e^{z_j - \\max(\\mathbf z)}}.\n$$\n\nWrite a function that takes a NumPy array *logits* of shape `(m, n)` (or a 1-D array of shape `(n,)`), computes the softmax **row-wise**, rounds every probability to 6 decimal places, and returns a Python `list` of lists containing the probabilities.  When a 1-D array is given, treat it as a single row and still return a list of lists.\n# Your code should start with:\n```python\nimport numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"TODO: Compute a row-wise numerically stable softmax.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list (of lists) in which every probability is rounded to 6 decimal places.\n"}
{"task_id": 435, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Tiny Gradient Boosting Regressor\n# Description:\nImplement a very small-scale version of the Gradient Boosting Regressor that uses ordinary least\u2013squares (OLS) linear regression as the weak learner and the squared error as the loss function.  \n\nGiven a training matrix X\u2208\u211d^{m\u00d7d} (m samples, d features) and a target vector y\u2208\u211d^{m}, the procedure works as follows:\n1. Convert X and y to NumPy arrays of type float.\n2. Initialise the current prediction \\(\\hat y^{(0)}\\) with the mean of *y*.\n3. Repeat for *t* = 1 \u2026 *n_estimators*:\n   \u2022 Compute the residuals \\(r^{(t)} = y - \\hat y^{(t-1)}\\).\n   \u2022 Fit an OLS linear model (including an intercept) that predicts the residuals from X.\n   \u2022 Obtain the weak-learner prediction \\(h^{(t)}(X)\\).\n   \u2022 Update the overall prediction\n     \\[\\hat y^{(t)} = \\hat y^{(t-1)} + \\text{learning\\_rate}\\; h^{(t)}(X).\\]\n4. Return the final prediction vector rounded to 4 decimal places and converted to a regular Python list.\n\nSpecial cases\n\u2022 If *n_estimators* \u2264 0 or *learning_rate* = 0, simply return a vector filled with the target mean.\n\nThe task is restricted to the Python standard library plus NumPy.  No classes, exception handling or third-party libraries may be used.\n# Your code should start with:\n```python\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every predicted value to the nearest 4th decimal and return a regular Python list.\n"}
{"task_id": 437, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Logistic Sigmoid Function & Derivatives\n# Description:\nImplement a single Python function that evaluates the logistic sigmoid activation function and, optionally, its first or second derivative for every element of the supplied input. The function must work with a scalar, a Python list, or a NumPy ``ndarray``.  \n\nGiven an ``order`` parameter:\n\u2022 ``order = 0`` \u2013 return \\(\\sigma(x) = \\frac{1}{1+e^{-x}}\\).\n\u2022 ``order = 1`` \u2013 return the first derivative \\(\\sigma(x)(1-\\sigma(x))\\).\n\u2022 ``order = 2`` \u2013 return the second derivative \\(\\sigma(x)(1-\\sigma(x))(1-2\\sigma(x))\\).\n\nIf an ``order`` other than 0, 1, or 2 is supplied the function must return **-1**.\n\nThe result has to keep the original shape, be rounded to **four decimal places**, and be returned as:\n\u2022 a Python ``float`` when the input is a single scalar,\n\u2022 a Python ``list`` (via ``tolist()``) when the input is a list or ``ndarray``.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every value to the nearest 4th decimal.\nReturn a Python float for scalar input, otherwise return a Python list using ``tolist()``.\n"}
{"task_id": 438, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding Helper \u2013 to_categorical\n# Description:\nImplement a simple version of the famous *to_categorical* helper that converts a vector of class labels into a one-hot (dummy/indicator) matrix.\n\nThe function must accept a 1-D list or NumPy array **y** containing non-negative integer class indices and an optional **num_classes** argument.  \n1. If **num_classes** is *None*, determine it automatically as `max(y) + 1`.  \n2. If **num_classes** is provided but smaller than `max(y) + 1`, return **-1** to indicate that one-hot encoding is impossible.  \n3. Otherwise build a 2-D NumPy array whose *i-th* row is all zeros except for a single 1 at the column that corresponds to the *i-th* label in **y**.  \n4. Finally convert the result to a regular Python list of lists (using ``tolist()``) before returning it.\n\nExamples, constraints and test cases below describe the expected behaviour in detail.\n# Your code should start with:\n```python\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nThe returned value must be a Python *list of lists* containing only integers 0 or 1.  Each inner list must sum to 1 unless the function returns -1 to signal an error.\n"}
{"task_id": 439, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Apriori Frequent Itemset Mining\n# Description:\nImplement the Apriori algorithm to discover all frequent itemsets in a transactional database.\n\nGiven a list of transactions (each transaction itself being a list of hashable items) and a minimum support threshold `min_sup` (expressed as a fraction in the range `(0, 1]`), write a function that returns **every** itemset whose empirical support is at least `min_sup`.\n\nThe empirical support of an itemset is defined as\n\n```\n#transactions that contain the itemset / total #transactions\n```\n\nThe implementation must follow the classical **Apriori** breadth-first strategy:\n1. Start with all single-item candidates and keep only those that are frequent.\n2. Repeatedly generate size-`k` candidates by self-joining the frequent itemsets of size `k-1` and pruning any candidate that contains an infrequent subset.\n3. Stop when no new frequent itemsets are found.\n\nReturn the resulting collection of frequent itemsets as a list of tuples.  Inside every tuple the items must appear in **ascending (lexicographic) order**, and the list itself must be ordered first by the length of the itemsets (1-item, 2-item, \u2026) and then lexicographically inside each length block.\n\nIn all situations the function must work with any hashable items (integers, strings, etc.).\n# Your code should start with:\n```python\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # TODO: implement the algorithm\n    pass\n```\n# Output Constraints:\nReturn frequent itemsets as a list of tuples ordered by length and then lexicographically. Each tuple must be in ascending order.\n"}
{"task_id": 440, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Average Ensemble Probabilities\n# Description:\nIn many ensemble learners such as Random Forest classifiers, each tree (estimator) returns a probability distribution over the classes for every sample.  The overall prediction is obtained by averaging these per-tree probability vectors and then taking the class with the highest average probability.\n\nWrite a function that performs this aggregation.\n\nGiven a three-level nested list `predictions` with shape `(n_estimators, n_samples, n_classes)` where each innermost list represents a valid probability distribution (it sums to 1.0), the function must:\n1. Average the probability vectors over all estimators for every sample.\n2. Round every averaged probability to four decimal places.\n3. Return both the averaged probability matrix **and** the final predicted class label (index of the maximal probability) for every sample.\n\nIf two or more classes share the same maximal probability after rounding, break the tie by returning the smallest index (the default behaviour of `numpy.argmax`).\n# Your code should start with:\n```python\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n1. All probabilities must be rounded to the nearest 4th decimal place.\n2. Return regular python lists (not NumPy arrays).\n"}
{"task_id": 441, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hamming Window Generator\n# Description:\nIn digital signal processing the Hamming window is widely used to taper a finite length sequence so that spectral leakage is reduced when the data is transformed to the frequency domain.  \n\nWrite a Python function that generates the one-dimensional **Hamming window** of a given length.\n\nMathematically the symmetric Hamming window of length $N$ is defined as  \n$$\n w(n)=0.54-0.46\\cos\\left(\\frac{2\\pi n}{N-1}\\right),\\qquad n=0,1,\\dots ,N-1.\n$$\n\nTwo slightly different variants are required:\n1. **symmetric=True** \u2013 the formula above is used directly.  Such a window is typically chosen for FIR-filter design.\n2. **symmetric=False** \u2013 a *periodic* window is returned.  The periodic variant contains exactly *window_len* samples of the length-$N+1$ symmetric window with its last sample removed.  This choice makes successive frames match continuously when an FFT is taken.\n\nEdge cases\n* If *window_len* is 0 return an empty list.\n* If *window_len* is 1 return `[1.0]` (the only sample has no tapering).\n\nThe function must return a Python list whose elements are the window samples rounded to **4 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list with every value rounded to the nearest 4th decimal.\n"}
{"task_id": 442, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours with KD-Tree Acceleration\n# Description:\nImplement a k-Nearest Neighbors (k-NN) classifier that uses a self-written KD-Tree to speed-up neighbour queries.  \nThe function must\n1. Build a balanced KD-Tree from the training data (without using any external KD-Tree implementation).\n2. For every query sample in `X_test`, find its *k* nearest neighbours with the tree (Euclidean distance).\n3. Predict the label by majority vote (use `numpy.argmax(numpy.bincount(labels))` so the smallest class index is chosen in case of ties).\n4. Return the list of predicted class labels for the whole test set.\n\nNotes\n\u2022 The algorithm works for an arbitrary feature dimension d \u2265 1.  \n\u2022 The tree may be represented in any non-object, immutable structure (e.g. nested tuples) \u2013 **do not define classes**.  \n\u2022 Assume `1 \u2264 k \u2264 |X_train|`.  \n\u2022 All inputs are guaranteed to be valid NumPy arrays of type `float` for `X_*` and of integer type for `y_*`.\n# Your code should start with:\n```python\nimport numpy as np\nimport heapq\nimport numpy as np\nimport heapq\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a KD-Tree.\n\n    The function must build a KD-Tree from the training data, query the *k* nearest\n    neighbours for every sample in *X_test*, perform a majority vote on their\n    labels and return the sequence of predicted labels.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_train, n_features) with training\n                  samples.\n        y_train: 1-D NumPy integer array of shape (n_train,) containing the class\n                  label for every training sample.\n        X_test:  2-D NumPy array of shape (n_test, n_features) with samples to\n                  be classified.\n        k:       Number of nearest neighbours to use (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A Python *list* with the predicted label for every row in *X_test*.\n    \"\"\"\n    # --------------------- YOUR CODE HERE ---------------------\n    pass  # Remove and implement\n    # --------------------- YOUR CODE HERE ---------------------\n```\n"}
{"task_id": 443, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Dataset Split Helper \u2013 divide_on_feature\n# Description:\nIn many decision-tree algorithms the training data has to be **partitioned** again and again. A very common helper routine therefore receives the complete data matrix `X`, a column index (`feature_i`) and a `threshold` and returns two sub-matrices: one that contains every row whose value in the chosen column *matches or exceeds* the threshold (left branch) and one that contains all remaining rows (right branch).\n\nWrite a function `divide_on_feature` that performs exactly this split.  \n\u2022 If `threshold` is a number (`int` or `float`), rows with\n`X[row, feature_i] >= threshold` go to the **left** subset.  \n\u2022 Otherwise (`str`, `bool`, \u2026), rows with\n`X[row, feature_i] == threshold` go to the **left** subset.\n\nBoth results have to be returned as **NumPy** arrays with the same column order as the input.  \nIf no row satisfies the condition, the corresponding array must have shape `(0, X.shape[1])` (i.e. zero rows but the correct number of columns).\n# Your code should start with:\n```python\nimport numpy as np\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    pass\n```\n"}
{"task_id": 444, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Radial Basis Function (RBF) Kernel Matrix\n# Description:\nImplement the Radial Basis Function (RBF) kernel that is frequently used in kernel methods such as Gaussian Processes and Support Vector Machines.\n\nGiven two collections of N-dimensional vectors X (shape N\u00d7C) and Y (shape M\u00d7C), the RBF kernel between two vectors x and y is\n\n    k(x, y) = exp\\{ -0.5 *  \u03a3_j  ((x_j \u2212 y_j)/\u03c3_j)^2 \\}\n\nwhere \u03c3 is a **scale (band-width) parameter**:\n\u2022 If \u03c3 is a single positive float, the same value is used for every feature (isotropic kernel).\n\u2022 If \u03c3 is a list/1-D array of length **C**, each feature j is scaled by its own positive \u03c3_j (anisotropic kernel).\n\u2022 If \u03c3 is None, use the conventional default value  \u221a(C/2).\n\nThe task is to write a function that\n1. Validates the inputs (matching feature dimensions, valid \u03c3).\n2. Computes the full kernel matrix of shape (N, M) (or (N, N) if Y is omitted).\n3. Rounds all entries to **4 decimal places** and returns the result as a (nested) Python list.\n\nReturn **\u22121** in any of the following cases:\n\u2022 \u03c3 is non-positive.\n\u2022 \u03c3 is a list whose length \u2260 number of features.\n\u2022 Feature dimensions of X and Y do not match.\n\nExample:\nInput\n    X = [[1, 0], [0, 1]]\n    Y = [[1, 0], [0, 1]]\n    \u03c3 = 1.0\nOutput\n    [[1.0, 0.3679],\n     [0.3679, 1.0]]\nReasoning\n    The squared Euclidean distance between identical vectors is 0 \u21d2 exp(0)=1.\n    Between (1,0) and (0,1) the squared distance is 2 \u21d2 exp(\u22120.5\u00b72)=exp(\u22121)=0.3679.\n# Your code should start with:\n```python\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll numbers must be rounded to the nearest 4th decimal. Return a Python list (not a NumPy array).\n"}
{"task_id": 446, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Information-Gain Decision Stump\n# Description:\nYou have been provided with a small utility that is needed when building **decision trees for classification**.  \nYour task is to implement a function `decision_stump` that, given a feature matrix `X` (only continuous numerical features are allowed) and a corresponding 1-D label vector `y`, finds the **best single-level split** (also called a *decision stump*) according to *information gain* (i.e. decrease in entropy).\n\nA split is defined by:\n1. a feature index `j`,\n2. a threshold `t` \u2013 every sample for which `X[i, j] \u2264 t` goes to the left child, the others to the right child.\n\nFor each candidate split you must compute the information gain\n```\nGain = H(parent) \u2212 p_left * H(left) \u2212 p_right * H(right)\n```\nwhere `H(\u00b7)` is the Shannon entropy of the class labels in the corresponding node and `p_left`, `p_right` are the proportions of samples that go to the left and right child.  \nOnly **mid-points between two successive distinct sorted values** in a column are considered as possible thresholds.\n\nThe function has to return a 4-tuple:\n```\n(best_feature_index, best_threshold, left_majority_label, right_majority_label)\n```\n\u2022 `left_majority_label` is the label that occurs most often among the samples sent to the left child; the same definition holds for `right_majority_label`.\n\nTies must be resolved as follows:\n1. If several splits yield the same highest information gain, pick the one with the **smallest feature index**.\n2. If several thresholds of this feature give the same gain, pick the **smallest threshold** among them.\n\nIf **no split can increase the information gain** (this happens when all samples share the same label), return:\n```\n(-1, None, majority_label, majority_label)\n```\nwhere `majority_label` is simply the label that appears most frequently in `y` (if there is still a tie, pick the smallest label value).\n# Your code should start with:\n```python\nimport numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    pass  # TODO: implement this function\n```\n# Output Constraints:\n\u2022 `best_threshold` must be rounded to **4 decimal places** (use `round(thr, 4)`).\n\u2022 The returned tuple must follow exactly the described order and types.\n"}
{"task_id": 447, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate Ones Array\n# Description:\nImplement a utility function that mimics the core behaviour of NumPy\u2019s `ones`.  \nThe function receives a single positional argument `shape` that can be either an `int` or a tuple/list of `int` values.  \nIt must return a multidimensional Python *list* whose elements are all equal to `1`.\n\nAdditional keyword arguments (e.g. `dtype`) should be forwarded to `numpy.ones` so that users can control the resulting data type when necessary.  \nIf `dtype` is omitted, the default NumPy data type (`float64`) is used, which appears in regular Python lists as ordinary `float` values (e.g. `1.0`).\n\nThe returned object **must** be a pure Python list obtained via NumPy\u2019s `tolist()` method \u2013 *never* return the NumPy array itself.\n\nIn every situation where NumPy would raise an error (for instance, a negative dimension), allow the error to propagate \u2013 do **not** wrap the call inside a `try/except` block.\n# Your code should start with:\n```python\nimport numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    pass  # Write your code here\n```\n# Output Constraints:\nThe returned data structure must be a built-in Python list (potentially nested) produced with NumPy\u2019s `tolist()` method.\n"}
{"task_id": 448, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Baseline Regressor\n# Description:\nImplement a simple baseline regressor that always predicts the mean of the training targets.  \n\nGiven a training feature matrix `X_train` (only its first dimension \u2013 the number of samples \u2013 is relevant), a one-dimensional target array `y_train`, and a test feature matrix `X_test`, your task is to write a function that:\n1. Computes the arithmetic mean of `y_train`.\n2. Creates a one-dimensional NumPy array whose length equals the number of rows in `X_test` and fills it with that mean value.\n3. Rounds every prediction to the nearest 4\u1d57\u02b0 decimal.\n4. Returns the predictions as a plain Python list.\n\nSpecial rule\n\u2022 If `y_train` is empty, return an empty list (because no meaningful mean can be computed).\n# Your code should start with:\n```python\nimport numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n```\n# Output Constraints:\nReturn a Python list of floats where every element is rounded to the nearest 4th decimal.\n"}
{"task_id": 449, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Discriminant Analysis (GDA) \u2013 Binary Classification\n# Description:\nImplement a simplified binary Gaussian Discriminant Analysis (GDA) learner/predictor.\n\nThe function has to\n1. learn the model parameters from a *training* set `X_train , y_train`, and\n2. immediately use the learned parameters to predict the labels of a *test* set `X_test`.\n\nThe learning rule you must follow is **exactly** the one in the code fragment shown below (it is *not* the classical LDA rule \u2013 follow it verbatim):\n\n```\nX0, X1           = X_train[y_train==0] , X_train[y_train==1]\nMu0, Mu1         = mean(X0) , mean(X1)                       # class means\nX_sub_Mu         = vstack([X0-Mu0 , X1-Mu1])\nSigma            = (1.0/ m) * dot(X_sub_Mu.T , X_sub_Mu)     # m = n_features (unused later)\nnormal_vec       = Mu1 - Mu0\nnormal_vec       = normal_vec / sqrt(sum(normal_vec**2))     # unit vector\nw                = normal_vec\nb                = - dot(w.T , (Mu0 + Mu1)/2)\nsign             = int( dot(w.T , Mu1) + b > 0 )            # 1 if class\u20131 is on the positive half-space\nprediction rule:  (dot(X , w) + b > 0).astype(int) * sign\n```\n\nReturn the predicted labels as a Python `list` of integers (each element `0` or `1`).\n\nIf the training set already places the class-1 mean on the positive side of the separating hyper-plane the factor `sign` will be `1`; otherwise it will be `0` and every prediction is forced to `0`.  **Do not change this behaviour.**\n# Your code should start with:\n```python\nimport numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `list` whose elements are `int`, either `0` or `1`.\n"}
{"task_id": 450, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Majority Voting for Ensemble Predictions\n# Description:\nIn a Random Forest (and many other ensemble methods) each individual classifier makes its own prediction. The final class for every sample is obtained by a *majority vote* over those individual predictions.  \n\nWrite a Python function that performs this majority voting. The function receives a 2-D NumPy array `preds` of shape `(n_samples, n_estimators)` that contains the class label predicted by every estimator for every sample. It must return a flat Python list containing the final class chosen for each sample.  \n\nRules for the vote:  \n1. The class that appears **most often** among the estimators wins.  \n2. If two or more classes are tied for the highest count, return the **smallest class label** (this is exactly what NumPy's `argmax` on the output of `np.bincount` does).\n# Your code should start with:\n```python\nimport numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a standard Python `list` (not a NumPy array) of length `n_samples`.\n"}
{"task_id": 451, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: KD-Tree based k-Nearest Neighbours Classifier\n# Description:\nImplement a purely functional k-nearest neighbours (k-NN) classifier accelerated with a KD-Tree.\n\nYour task is to write a function knn_kdtree_predict that receives\n\n1. X_train \u2013 a 2-D NumPy array of shape (n_samples, n_features) containing the coordinates of the training points,\n2. y_train \u2013 a 1-D array-like object of length n_samples with the corresponding integer class labels,\n3. X_test \u2013 a 2-D NumPy array of shape (m_samples, n_features) with points that must be classified,\n4. k \u2013 a positive integer stating how many nearest neighbours have to be considered,\n\nand returns a Python list with the predicted label for every row of X_test.\n\nThe function has to build a KD-Tree from the training set and answer each query with an exact k-nearest-neighbour search (Euclidean distance).  When several labels occur equally often among the k neighbours, return the smallest label (deterministic tie-breaking).\n\nIf X_train is empty or k \u2264 0, return an empty list.\n# Your code should start with:\n```python\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    list[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list containing one integer per test sample.\n"}
{"task_id": 452, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Split Data Set by Feature Threshold\n# Description:\nGiven a data set X (either a Python list of samples or a NumPy 2-D array), write a function that partitions the samples into two subsets according to a single feature and a threshold.\n\nFor a numeric threshold (int or float) the first subset must contain every sample whose value at column feature_i is greater than or equal to the threshold; the second subset must contain all remaining samples.  \nFor a non-numeric (categorical) threshold the first subset must contain every sample whose value at column feature_i is exactly equal to the threshold; the second subset must again contain all remaining samples.\n\nBoth subsets have to be returned in **their original order** and converted to regular Python lists (use ndarray.tolist()).\nIf one of the subsets is empty simply return an empty list for this position.\n\nExample behaviour (numeric split):\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0, threshold = 3  \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nExample behaviour (categorical split):\nX = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i = 1, threshold = \"A\"  \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n\nReturn a *list* holding the two resulting lists and keep the sample order unchanged.\n# Your code should start with:\n```python\nimport numpy as np\nfrom typing import List\n\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # ======  Write your code below this line  ======\n    pass  # Remove this line when implementing your solution.\n```\n# Output Constraints:\nReturn a Python list of length 2 where each element is itself a list produced with ndarray.tolist().  Preserve the order of the original samples.\n"}
{"task_id": 453, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Target Q-Value Update for Deep Q-Networks\n# Description:\nIn Deep Q-Networks (DQN) the neural network is trained with targets that depend on the agent\u2019s **current** Q-value estimates and the **next-state** Q-value estimates.  \nGiven\n\u2022 `Q` \u2013 the network\u2019s Q-value predictions for a batch of states (shape **b \u00d7 n_actions**),  \n\u2022 `Q_next` \u2013 the network\u2019s Q-value predictions for the *next* states of the same batch,  \n\u2022 `actions` \u2013 the action actually taken in each state,  \n\u2022 `rewards` \u2013 the immediate reward received after each action,  \n\u2022 `dones` \u2013 boolean flags telling whether the next state is terminal,  \n\u2022 `gamma` \u2013 the discount factor (0 \u2264 \u03b3 \u2264 1),  \nwrite a function that returns the **training targets** `y` used in DQN.\n\nFor every sample `i` in the batch\n```\nif dones[i]:\n    target = rewards[i]\nelse:\n    target = rewards[i] + gamma * max(Q_next[i])\n```\nYou must copy the original `Q[i]`, replace *only* the entry that corresponds to `actions[i]` by `target`, and finally return the whole updated matrix rounded to four decimal places.\n\nIf the input arrays/lists have inconsistent lengths, or if `gamma` is outside the interval [0, 1], return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every number to the nearest 4th decimal.\nReturn the result as a nested Python list, **not** a NumPy array.\n"}
{"task_id": 454, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate One-Hot Label Arrays for DCGAN Training\n# Description:\nIn the training loop of a Deep Convolutional Generative Adversarial Network (DCGAN) the discriminator and generator are trained with fixed one-hot targets.  The real images are labelled as class 0 \u2013 i.e. one-hot vector [1, 0] \u2013 while the generated (fake) images are labelled as class 1 \u2013 i.e. one-hot vector [0, 1].  \n\nWrite a function that, given an even batch size n, creates three NumPy arrays that are used every iteration of a standard DCGAN training procedure:\n\n1. **valid_half** \u2013 labels for half of the batch that contains only real images; shape (n//2, 2) and every row is [1, 0].\n2. **fake_half** \u2013 labels for the other half that contains only generated images; shape (n//2, 2) and every row is [0, 1].\n3. **valid_full** \u2013 labels for a full batch that the generator tries to fool the discriminator with; shape (n, 2) and every row is [1, 0].\n\nReturn the three arrays in the order *(valid_half, fake_half, valid_full)* as Python lists (use NumPy\u2019s tolist method).\n\nAssume the provided batch size is a positive even integer (\u2265 2).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    # Write your code below this line\n    pass\n```\n# Output Constraints:\nAll returned arrays must be converted to Python lists via ndarray.tolist().\n"}
{"task_id": 455, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours Classifier with Three Search Strategies\n# Description:\nImplement a k-Nearest Neighbors (k-NN) classifier that supports three different neighbour\u2013search strategies:\n1. \"naive\"  \u2013 compare the query with every training point.\n2. \"heap\"   \u2013 compute all distances once and use a heap/partial sort so only the k closest distances are kept.\n3. \"kdtree\" \u2013 build a KD-Tree from the training data and perform a recursive best-first search to obtain the k nearest neighbours.\n\nThe function must\n\u2022 take the training set (features and integer labels), a query set, the desired number of neighbours k and a strategy string (one of the three above);\n\u2022 return the predicted label for every query sample (majority vote, ties are broken by picking the smallest label value).\n\nHints for the KD-Tree branch\n\u2022 Recursively split the set of points by the axis with the largest variance (or simply by cycling the coordinate axes). Use the median point on that axis as the pivot so the resulting tree is roughly balanced.\n\u2022 During search always visit the subtree that contains the query point first. Visit the opposite branch only if it can still contain a closer point than the farthest point currently kept in the k-heap.\n\nYou may only rely on the Python standard library together with NumPy. No external ML libraries are permitted.\n# Your code should start with:\n```python\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\ndef knn_classifier(X_train, y_train, X_query, k, method=\"naive\"):\n    \"\"\"k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, default \"naive\"\n        Neighbour search strategy: \"naive\", \"heap\" or \"kdtree\".\n\n    Returns\n    -------\n    list[int]\n        Predicted label for each query sample.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers with one entry per query sample.\n"}
{"task_id": 456, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Covariance Matrix from Scratch\n# Description:\nIn statistics and data analysis the covariance matrix is used to measure how much each pair of features in a dataset vary together.  \n\nWrite a Python function that computes the (un-biased) sample covariance matrix given two data matrices **X** and **Y**.  \n\u2022  **X** must be an $n\\times p$ NumPy array, where *n* is the number of observations (rows) and *p* is the number of features (columns).  \n\u2022  **Y** is optional. If it is **None** the function must return the covariance matrix of **X** (i.e. *Y = X*). Otherwise **Y** must have the same number of rows as **X** and the function must return the cross-covariance matrix $\\;\\frac{1}{n-1}(X-\\bar X)^\\top(Y-\\bar Y)\\;$.\n\nValidity rules  \n1. If **X** has fewer than two rows, or  \n2. If **Y** is provided but its number of rows differs from **X**,  \nreturn **-1**.\n\nThe resulting matrix has to be rounded to **4** decimal places and returned as a regular Python *list of lists* (use NumPy\u2019s `tolist()` method).\n# Your code should start with:\n```python\nimport numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to 4 decimal places before returning.\n"}
{"task_id": 457, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Elastic-Net Penalty Calculator\n# Description:\nImplement the Elastic-Net penalty (a linear combination of L1 and L2 norms).\n\nGiven a list/tuple or NumPy array of weights $w=[w_1,\\ldots,w_n]$ and a mixing hyper-parameter $\\alpha\\in[0,1]$, the Elastic-Net penalty is defined as\n\n$$\\text{penalty}(w,\\alpha)=\\frac{1}{2}\\,\\alpha\\sum_{i=1}^{n}w_i^2\\; +\\; (1-\\alpha)\\sum_{i=1}^{n}|w_i|.$$\n\nWrite a function that\n1. validates that $\\alpha$ lies in the closed interval $[0,1]$ (if not, return **-1**),\n2. computes the above penalty for the given weights,\n3. rounds the result to **4 decimal places** and returns it as a Python ``float``.\n\nYou may freely convert the input ``weights`` to a NumPy array for vectorised computation. No other third-party libraries are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python ``float`` rounded to the nearest 4th decimal.\n"}
{"task_id": 458, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding of Integer Labels\n# Description:\nIn many machine-learning workflows class labels are represented as integers (e.g. 0, 1, 2 \u2026).  Neural-network libraries, however, usually expect those labels in **one-hot (categorical) form** \u2014 a binary matrix in which every row contains a single *1* at the index that corresponds to the original class label.\n\nWrite a function `to_categorical` that converts a one-dimensional array-like object of non-negative integer labels into a two-dimensional one-hot encoded matrix.\n\nFunction requirements\n1. Parameters\n   \u2022 `labels` \u2013 a Python `list`, `tuple`, or `numpy.ndarray` containing non-negative integers.\n   \u2022 `num_classes` *(optional)* \u2013 the total number of distinct classes.  When omitted (`None`) this value must be inferred as `max(labels) + 1`.\n\n2. Behaviour\n   \u2022 The returned object must be a **Python list of lists** whose shape is `(len(labels), num_classes)`.\n   \u2022 Every row must consist solely of `0`\u2019s except for a single `1` located at the index that matches the original label.\n   \u2022 If `num_classes` is supplied but is **smaller** than `max(labels) + 1`, or if any label is negative, the function must return **-1**.\n\n3. Results must contain integers (`int`, *not* floats or booleans).\n# Your code should start with:\n```python\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists of **ints** (0/1).  Do not return a NumPy array.\n"}
{"task_id": 459, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours Validation with Heap Optimization\n# Description:\nImplement the k-Nearest Neighbours (k-NN) classifier that uses a fixed-size max-heap to keep only the *k* closest training samples while scanning the distance list.  \n\nThe function receives a training set `(X_train, Y_train)`, a validation set `(X_val, Y_val)` and an integer `k` (1 \u2264 k \u2264 |X_train|).  For every validation sample it must\n1. compute the Euclidean distance to every training sample,\n2. maintain a max-heap of at most *k* pairs `(-distance, index)` so that the heap always contains the *k* smallest distances seen so far,\n3. extract the labels of those *k* neighbours, take a majority vote (use `numpy.bincount` + `argmax`; in case of ties the smallest label ID wins automatically),\n4. append the predicted label to a list.\n\nAfter all samples have been classified, compute the accuracy on the validation set and round it to four decimal places.  \n\nReturn a tuple `(accuracy, predicted_labels)` where `predicted_labels` is a **list** of ints.\n# Your code should start with:\n```python\nimport numpy as np\nimport heapq\ndef knn_validate_heap(X_train: \"np.ndarray\",\n                      Y_train: \"np.ndarray\",\n                      X_val: \"np.ndarray\",\n                      Y_val: \"np.ndarray\",\n                      k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    pass\n```\n# Output Constraints:\n\u2022 `accuracy` must be rounded to the 4th decimal place.\n\u2022 `predicted_labels` must be returned as a Python list (not a NumPy array).\n"}
{"task_id": 460, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Correlation Matrix Computation\n# Description:\nIn descriptive statistics the **Pearson correlation coefficient** measures the linear relationship between two random variables.  For two data matrices $X\\in\\mathbb{R}^{n\\times p}$ and $Y\\in\\mathbb{R}^{n\\times q}$ (each row is a sample, each column a variable) the correlation between the $i$-th variable of $X$ and the $j$-th variable of $Y$ is defined as \n\n$$\\rho_{ij}=\\frac{\\operatorname{cov}(X_{:i},\\,Y_{:j})}{\\sigma_{X_i}\\,\\sigma_{Y_j}},$$\n\nwhere the **population** covariance and standard deviation are used\n\n$$\\operatorname{cov}(x,y)=\\frac1n\\sum_{k=1}^{n}(x_k-\\bar x)(y_k-\\bar y),\\qquad \\sigma_x=\\sqrt{\\tfrac1n\\sum_{k=1}^{n}(x_k-\\bar x)^2}.$$\n\nYour task is to write a Python function that \u2013 **without calling `numpy.corrcoef` or any other high-level helper** \u2013 computes the full correlation matrix\n\n\u2022 $\\rho(X,X)$ when no second matrix is supplied,\n\u2022 $\\rho(X,Y)$ when a second data matrix `Y` **of the same number of rows** is provided.\n\nIf **any** column of `X` or `Y` has zero standard deviation the correlation is undefined; in that case the function must return **`-1`**.\n\nAll returned correlation values have to be **rounded to four decimal places** and converted to a regular Python list of lists.\n# Your code should start with:\n```python\nimport numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry of the correlation matrix to the nearest 4th decimal and return it as a Python list of lists.  Return **-1** instead of a matrix if a standard deviation of zero is encountered.\n"}
{"task_id": 461, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Light-weight Gradient Boosting Regressor (1-D)\n# Description:\nIn the original library snippet a class called ``GradientBoostingRegressor`` is just a very thin wrapper around a generic ``GradientBoosting`` implementation.  \n\nIn this task you will recreate **the essential idea of gradient boosting for one\u2013dimensional regression data, but purely with functions (no classes)**.  \n\nImplement a function that fits an ensemble of *decision stumps* (depth-1 regression trees) to the given training points by **gradient boosting** and then returns the final predictions for the same training inputs.\n\nAlgorithm to implement (Square-loss boosting with stumps)\n1.  Let the current prediction be the mean of the targets \\(\\bar y\\).  \n2.  Repeat **n_estimators** times (or stop early if the residuals become all zeros).  \n   a.  Compute the residuals \\(r_i = y_i-\\hat y_i\\).  \n   b.  For every possible split value *t* chosen from the *unique x values except the greatest one*, split the training set into:\n      \u2022 left:  \\(x_i\\le t\\)  \n      \u2022 right: \\(x_i>t\\)  \n      Ignore a split if either side is empty.  \n   c.  For each split compute the **sum of squared errors (SSE)** obtained by predicting the mean residual of its side.  \n   d.  Pick the split with the smallest SSE (first one in case of ties).  Let \\(v_L\\) and \\(v_R\\) be the mean residuals on the left and right.  \n   e.  The stump predicts\n      \\[\\tilde r_i = \\begin{cases}v_L,&x_i\\le t\\\\v_R,&x_i>t\\end{cases}\\]\n   f.  Update the ensemble prediction:  \\(\\hat y_i \\leftarrow \\hat y_i + \\text{learning\\_rate}\\times\\tilde r_i\\).\n3.  Return the final \\(\\hat y\\) values **rounded to 4 decimal places** as a Python list.\n\nSpecial cases\n\u2022 If *n_estimators* is 0 or negative, simply return the mean target for every sample.  \n\u2022 If no valid split exists, set the stump prediction to the mean residual of the whole data (this keeps the algorithm working when all \\(x\\) are identical).\n\nYou may only use ``numpy`` and the Python standard library.\n# Your code should start with:\n```python\nimport numpy as np\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal; use ``np.round(arr, 4).tolist()``.\n"}
{"task_id": 462, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sinusoidal Cepstral Lifter\n# Description:\nImplement a sinusoidal cepstral lifter that post-processes a matrix of Mel-Frequency Cepstral Coefficients (MFCCs).  Liftering smooths the spectral envelope by attenuating higher-order coefficients while leaving the lower ones nearly unchanged.  For a lifter parameter $D\\;(D\\ge 0)$ and an MFCC matrix $X\\in\\mathbb R^{G\\times C}$ (G frames, C coefficients) the lifter is defined column-wise as\n\nlifter($n$) = $1+\\dfrac{D}{2}\\sin\\left(\\dfrac{\\pi n}{D}\\right)$  ,  $n=0,1,\\dots ,C-1$\n\nThe output matrix is obtained by element-wise multiplication of every column $n$ of $X$ with lifter($n$).  When $D=0$ (or $D=1$, because $\\sin(\\pi n)=0$ for integer $n$) the input must be returned unchanged.\n# Your code should start with:\n```python\nimport numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray whose shape and dtype are identical to the input matrix.\n"}
{"task_id": 463, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ball-Tree Node Radius\n# Description:\nImplement a function that computes the radius of a Ball-tree node.  The radius of a node is defined as the largest Euclidean distance between its centroid and any data point stored in the node.  The function receives (1) the centroid as a one-dimensional list of floats/ints and (2) the data matrix **X** as a two-dimensional list where every sub-list is a point in the same space as the centroid.  \n\nThe function should return the node radius rounded to the nearest 4th decimal.  If **X** is empty, the radius is defined to be **0.0**.\n# Your code should start with:\n```python\nimport math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"TODO: Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 464, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbours (k-NN) Validation Helper\n# Description:\nImplement the most basic form of the k-Nearest Neighbours (k-NN) classifier.  \nYour task is to write a function knn_validate that, given a set of training samples with their labels, predicts the labels of a validation set using the majority vote of the k closest training points (Euclidean distance).  \nThe function must return a tuple consisting of the classification accuracy and a list with all predicted labels.\n\nRules\n1. All labels are non-negative integers (0, 1, 2, \u2026).\n2. If several labels are tied for the majority vote, return the smallest label (this behaviour is automatically obtained with numpy.argmax on the bincount result).\n3. The accuracy must be rounded to 4 decimal places.\n4. Do not use any third-party libraries except NumPy.\n\nExample\nTraining set:\nX_train = [[0,0], [1,1], [0,1], [1,0]]\nY_train = [0,0,1,1]\n\nValidation set:\nX_val = [[0.9,0.9], [0.2,0.8]]\nY_val = [1,0]\n\nWith k = 3 the predicted labels are [1,0]. 2 out of 2 samples are classified correctly, therefore the accuracy is 1.0.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nAccuracy must be rounded to the nearest 4th decimal.\n"}
{"task_id": 465, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian RBF Kernel Function\n# Description:\nThe **Radial Basis Function (RBF) kernel** (also called the Gaussian kernel) is one of the most popular similarity measures used in kernel-based learning algorithms such as Support Vector Machines (SVM).  \n\nImplement a higher-order function `rbf_kernel` that receives a non-negative real number `gamma` and returns another function `f`.  The returned function must take two vectors `x1` and `x2` (1-D NumPy arrays or array-like sequences of equal length) and compute their RBF similarity\n\n                f(x1, x2) = exp( -gamma * ||x1 \u2212 x2||\u00b2 )\n\nwhere `|| \u00b7 ||` denotes the Euclidean norm.  \n\nThe value produced by `f` has to be rounded to **four decimal places** before being returned.  No other output formatting is required.\n\nIf `gamma` is 0 the similarity should always be 1 after rounding, because the exponential\u2019s exponent becomes 0 for all input vectors.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n    # ========  Write your code below ========\n\n\n    # ========  End of your code ========\n```\n# Output Constraints:\nReturn the kernel value rounded to the nearest 4th decimal.\n"}
{"task_id": 466, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Punctuation Stripper\n# Description:\nWrite a Python function that removes every punctuation character from a given string. Punctuation characters are defined by the constant ``string.punctuation`` (i.e. ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``). After removing the punctuation, the function must also strip any leading and trailing whitespace from the resulting string.\n\nIf the input string contains only punctuation and/or whitespace, the function should return an empty string.\n# Your code should start with:\n```python\nimport string\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # TODO: implement the function logic below\n    pass\n```\n# Output Constraints:\nReturn a plain Python ``str`` value with all punctuation removed and leading/trailing whitespace stripped.\n"}
{"task_id": 467, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement L1 and L2 Regularization\n# Description:\nRegularization is a common technique used in optimisation and machine-learning algorithms to prevent over-fitting by penalising large model weights.  Two of the most popular penalties are the L1\u2013norm (also called *lasso*) and the L2\u2013norm (also called *ridge*).\n\nWrite a function that, for a given list of weights, returns **both** the regularisation penalty and its analytical gradient.\n\n \u2022 If `norm == \"l1\"`, use the formula\n      penalty = C \u00b7 \u03a3 |w\u1d62|\n      gradient\u1d62 = C \u00b7 sign(w\u1d62)\n   where  sign(x) = \u22121 if x < 0, 1 if x > 0 and 0 if x = 0.\n\n \u2022 If `norm == \"l2\"`, use the formula\n      penalty = \u00bd \u00b7 C \u00b7 \u03a3 w\u1d62\u00b2\n      gradient\u1d62 = C \u00b7 w\u1d62\n\nIn every other case (e.g. an unsupported `norm`) return **\u22121**.\n\nBoth the penalty and every element of the gradient must be rounded to the nearest 4th decimal.\n# Your code should start with:\n```python\nimport numpy as np\ndef regularization(weights: list[float | int], C: float = 0.01, norm: str = \"l2\") -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound the penalty and each gradient element to 4 decimal places.\n"}
{"task_id": 468, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Logistic Regression From Scratch\n# Description:\nImplement binary logistic regression **from scratch** using NumPy and gradient-descent optimisation.\n\nThe function must\n1. learn the model parameters (weights and bias) from the training set `(X_train , y_train)` by minimising the binary cross-entropy loss,\n2. use the learned parameters to predict the class labels for `X_test`, and\n3. return those predictions as a Python `list` of `int`s (0 or 1).\n\nLearning details\n\u2022 Append a bias term (column of 1s) to every design matrix you build so the bias can be learned together with the feature weights.\n\u2022 Initialise **all** parameters to `0.0` (this keeps the algorithm fully deterministic).\n\u2022 At every iteration update the parameters with standard (batch) gradient descent:\n  W  \u2190  W  \u2013  learning_rate \u00d7 dW ,\n  where `dW = X\u1d40\u00b7(h \u2212 y)/m`,  `m = len(X_train)` and `h = sigmoid(X\u00b7W)`.\n\u2022 Use exactly the logistic sigmoid `sigmoid(z) = 1/(1+exp(-z))`.\n\u2022 After the final update, compute the probabilities for `X_test`; assign class **1** if probability \u2265 0.5, otherwise **0**.\n\nThe function signature and default hyper-parameters are fixed and must not be changed.\n\nIf the input label array is one-dimensional convert it to the column shape `(m,1)` internally. No other error handling is required.\n# Your code should start with:\n```python\nimport numpy as np\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python `list` containing only 0s and 1s in the same order as the rows of `X_test`.\n"}
{"task_id": 469, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Kernel Factory\n# Description:\nIn kernel-based machine learning algorithms (e.g., Support Vector Machines) the *linear kernel* is simply the dot product between two input vectors. Conventionally, kernel functions are written as small factory helpers that may accept (possibly unused) hyper-parameters and return a **callable** that actually computes the kernel value.   \n\nWrite the factory function `linear_kernel` that behaves as follows:\n1. The function signature must be `def linear_kernel(**kwargs) -> callable:` \u2013 it may accept any keyword arguments but must ignore them (this keeps the signature compatible with other, more complex kernels).\n2. The function returns an inner function `f(x1, x2)` which\n   \u2022 accepts two inputs that can be 1-D Python lists or NumPy arrays;\n   \u2022 converts the inputs to `np.ndarray` of `float` type;\n   \u2022 if the two vectors do not have the same length, *immediately* return **-1**; do **not** raise an exception;\n   \u2022 otherwise compute and return their dot product (i.e., the linear kernel value) using `np.inner`.\n\nIf the inputs are valid, the result is a single Python `float` (not a NumPy scalar).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nThe function must return a built-in Python float.  If the two vectors have different lengths, return the integer \u20111.\n"}
{"task_id": 470, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Canonical Script Directory Extraction\n# Description:\nImplement a function that, given a path to a file (the path may be relative, absolute, contain symbolic links, \"..\" or \".\" segments, or trailing separators), returns the absolute, canonical directory in which that file resides.  The function must:\n1. Convert the supplied path to its canonical absolute form (i.e., resolve symbolic links and remove any \"..\" / \".\" segments).\n2. Return only the directory part of this canonical path (equivalent to what the Unix utility `dirname` produces).\n3. Never add a trailing path separator (except when the directory itself is the root directory \"/\").\n\nIn other words, for any input path that points *to a file*, the function should behave exactly like\n```\nos.path.dirname(os.path.realpath(path))\n```\nbut without relying on any external libraries other than Python\u2019s standard `os` module.  If the given path already ends with a separator (i.e., it actually denotes a directory instead of a file), the function should still return the parent directory of that directory, because the last path component is considered to be the \"file\" in question.\n# Your code should start with:\n```python\nimport os\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nThe returned path must be an absolute path, use the operating-system's default path separator, and contain no trailing separator (except when the result is the root directory \"/\").\n"}
{"task_id": 471, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Expected SARSA TD(0) Q-Table Update\n# Description:\nImplement one step of the on-policy TD(0) Expected\u2013SARSA algorithm for a tabular setting.\n\nYou are given\n1. a Q\u2013table as a (row-major) Python list of lists, where each row corresponds to a state and each column corresponds to an action,\n2. the indices (state, action) of the transition that has just been taken,\n3. the immediate reward obtained from the environment,\n4. the next state\u02bcs index (or ``None`` if the transition terminates the episode), and\n5. the usual Expected\u2013SARSA hyper-parameters \u2013 exploration rate ``epsilon``, learning rate ``lr`` and discount factor ``gamma``.\n\nFor a non-terminal next state ``s'`` the Expected\u2013SARSA TD target is\n\n    target = r + gamma * \ud835\udc38[Q[s', a'] | s']\n\nwhere the expectation is taken w.r.t. the \u03b5-soft policy derived from the current Q\u2013table:\n\n    \u03c0(a|s') = 1 \u2212 \u03b5 + \u03b5/|A|    if a is greedy\n    \u03c0(a|s') = \u03b5/|A|             otherwise\n\n``|A|`` is the number of actions (the length of a row of the Q-table) and *greedy* means the action with the maximum Q-value in ``s'`` (ties are resolved by taking the first such action).\n\nIf ``next_state`` is ``None`` the expectation term is treated as 0.\n\nFinally, update the Q entry ``Q[state][action]`` using\n\n    Q[state][action] += lr * (target \u2212 Q[state][action])\n\nand return the **entire** updated Q-table.  Every number in the returned table must be rounded to four decimal places.\nIn cases where there is no next state (i.e. a terminal transition) treat the expected future value as 0.\n# Your code should start with:\n```python\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every entry of the returned Q-table to 4 decimal places.\n"}
{"task_id": 472, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Numerically Stable Softmax with Gradient\n# Description:\nImplement the numerically-stable **softmax** transformation together with its element-wise gradient.\n\nGiven a one- or two-dimensional numeric input (Python list or nested list), the softmax function converts raw scores into a valid probability distribution along the last axis:\n\nsoftmax(x_i) = exp(x_i \u2212 max(x)) / \u03a3_j exp(x_j \u2212 max(x))\n\nSubtracting the maximum keeps the exponentials in a safe numeric range.  \nFor the same input, the (diagonal) gradient of the softmax with respect to every element is\n\ngrad_i = softmax(x_i) \u00b7 (1 \u2212 softmax(x_i))\n\nWrite a function that\n1. accepts *x* (list or list of lists),\n2. returns a *tuple* **(probabilities, gradient)** where both items keep the original shape, are rounded to four decimals and are plain Python lists.\n\nIf *x* is two-dimensional the transformation must be applied **row-wise** (along the last axis).\n# Your code should start with:\n```python\nimport numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nResults must be rounded to 4 decimal places and returned as Python lists (not NumPy arrays).\n"}
{"task_id": 474, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate a 2-D Toy Data Set\n# Description:\nYou are given the broken helper _GenerateData that should create a very simple, perfectly separable two\u2013dimensional data set suitable for a binary-classification toy problem.  Each class is arranged in a rectangular cluster:  the first class (label \u20131) lives roughly in the square [1,9]\u00d7[1,9] while the second class (label +1) is shifted upward by the value of the parameter interval (in multiples of 10).  The original code has two problems:\n1.  It hard-codes the parameters and therefore is not reusable.\n2.  It generates **no labels for the validation set** (the second argument passed to the helper is wrong).\n\nWrite a function that fixes these issues and makes the data generator reusable.  The function must\n\u2022 accept the parameters listed below,\n\u2022 optionally take a random seed so that the produced data are reproducible,\n\u2022 round every coordinate to four decimal places,\n\u2022 return four NumPy arrays: `X_train`, `X_val`, `Y_train`, `Y_val`.\n\nPoint generation rule for any class index `i` (starting at 0):\n    x  ~  U([(\u230ai/2\u230b+0.1)\u00b710 , (\u230ai/2\u230b+0.9)\u00b710])\n    y  ~  U([((i mod 2)*interval+0.1)\u00b710 , ((i mod 2)*interval+0.9)\u00b710])\n    label = (i \u2013 0.5)\u00b72   (\u2192 \u20131 for the first class, +1 for the second)\n\nParameters\nm         \u2013 number of classes (\u22652)\nn_train   \u2013 samples per class for the training set\nn_val     \u2013 samples per class for the validation set\ninterval  \u2013 vertical distance (in units of 10) between the two rows of clusters\nseed      \u2013 optional integer; if given, call `random.seed(seed)` before sampling\n\nReturn value (all rounded to 4 decimals)\nX_train : shape (m\u00b7n_train , 2)\nX_val   : shape (m\u00b7n_val   , 2)\nY_train : shape (m\u00b7n_train ,)\nY_val   : shape (m\u00b7n_val   ,)\n# Your code should start with:\n```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nAll coordinates must be rounded to the nearest 4\u1d57\u02b0 decimal place.\n"}
{"task_id": 475, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single-step Adam Update\n# Description:\nImplement the core mathematics of the Adam optimiser.  \n\nAdam keeps two moving averages of the gradients \u2013 the first moment (mean) and the second moment (uncentred variance).  After every mini-batch it produces *bias\u2013corrected* versions of those moments and uses them to shift the parameters.\n\nWrite a function that performs **one** Adam update step.\n\nGiven\n\u2022 current parameters `w` (scalar or NumPy array)\n\u2022 current gradient `grad` (same shape as `w`)\n\u2022 previous first moment `m_prev`\n\u2022 previous second moment `v_prev`\n\u2022 time step `t` (an integer that starts at 1 and increases by one each call)\n\u2022 the Adam hyper-parameters\n\nreturn a tuple `(w_new, m_new, v_new)` containing the updated parameters and the new moment estimates.\n\nIf `m_prev` or `v_prev` is **None** treat it as an array of zeros having the same shape as `grad`.\n\nFormulae  \n    m_t = \u03b2\u2081 \u00b7 m_{t\u22121} + (1\u2212\u03b2\u2081) \u00b7 grad  \n    v_t = \u03b2\u2082 \u00b7 v_{t\u22121} + (1\u2212\u03b2\u2082) \u00b7 grad\u00b2  \n    m\u0302_t = m_t / (1\u2212\u03b2\u2081\u1d57)          (bias correction)  \n    v\u0302_t = v_t / (1\u2212\u03b2\u2082\u1d57)          (bias correction)  \n    w_new = w \u2212 \u03b1 \u00b7 m\u0302_t / (\u221av\u0302_t + \u03b5)\n\nwhere \u03b1 is the learning rate.\n\nExample call (with the default hyper-parameters)  \n    >>> w_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)  \n    >>> round(w_new, 9)  # \u2248 0.999000001\n\nA correct implementation must work for scalars and arbitrary-shaped NumPy arrays.\n# Your code should start with:\n```python\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn **three** objects: (updated_w, new_m, new_v).\n\u2022 They must have the same shapes as the corresponding inputs.\n\u2022 Floating results should be accurate to at least 1 \u00d7 10\u207b\u2078.\n"}
{"task_id": 477, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: A* Search on a Grid\n# Description:\nImplement the A* (A-star) search algorithm on a 2-D grid that consists of free cells (0) and obstacles (1).\n\nGiven a rectangular grid, a start coordinate and a destination coordinate, the function must find the length of the shortest path from start to destination using 4-directional movement (up, down, left, right).  Each move to an adjacent free cell costs **1**.  If the destination cannot be reached, the function must return **-1**.\n\nTo guide the search use the Manhattan distance as the heuristic:\n    h(r,c) = |r \u2212 r_dest| + |c \u2212 c_dest|\n\nThe A* priority for a cell is therefore\n    f = g + h\nwhere g is the cost of the path from the start to the cell so far.\n\nDo not modify the input grid and do not rely on any external libraries other than the Python standard library.\n# Your code should start with:\n```python\nimport heapq\nfrom typing import List, Tuple\nimport heapq\n\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the minimum number of moves as an **int**.  Return **-1** when no valid path exists.\n"}
{"task_id": 478, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feature-wise Standard Deviation\n# Description:\nWrite a Python function that returns the feature-wise (column-wise) population standard deviation of a 2-D numerical data set.  The data set may be provided either as a list of lists or as a NumPy array, where each row represents a sample and each column represents a feature.\n\nThe function must:\n1. Convert the input to a NumPy array of type *float* for easy numeric manipulation.\n2. Compute the population variance of each feature:  \\(\\sigma^2 = \\frac{1}{n}\\sum_{i=1}^{n}(x_i-\\bar x)^2\\), where \\(n\\) is the number of samples.\n3. Take the square root of each variance value to obtain the population standard deviation.\n4. Round every resulting value to **4 decimal places**.\n5. Return the result as a regular Python list (not a NumPy array).\n\nEdge-case rules\n\u2022 If the input data set is empty (i.e., `[]` or an array of size `0`), return an empty list `[]`.\n\u2022 If a feature is constant (all values identical) its standard deviation is `0.0`.\n\nDo **not** use `numpy.std` or `numpy.var` directly; compute the variance formula explicitly (you may still use basic NumPy arithmetic).\n# Your code should start with:\n```python\nimport numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned values must be rounded to 4 decimal places and packed into a standard Python list.\n"}
{"task_id": 479, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Epsilon-Greedy Multi-Armed Bandit Simulation\n# Description:\nImplement a simple \u03b5-greedy algorithm for the stationary multi-armed bandit problem.\n\nYou are given a matrix ``rewards`` where each inner list represents the rewards that **could** be obtained at one time-step if a particular arm were pulled.  The i-th element of the inner list corresponds to the reward for arm *i* at that step.  Your task is to simulate one run of the \u03b5-greedy strategy and return the final estimates of the expected reward for every arm.\n\nAlgorithm\n1.  Let *N* be the number of arms (length of the first inner list).\n2.  Initialise the estimated value of every arm with the constant ``ev_prior`` and set all pull counters to 0.\n3.  For each time-step *t* (row in ``rewards``):\n    \u2022 With probability ``epsilon`` choose an arm uniformly at random.\n    \u2022 Otherwise choose the arm that currently has the largest estimated value (break ties by the smallest index).\n    \u2022 Receive the reward that corresponds to the chosen arm at this time-step.\n    \u2022 Update the chosen arm\u2019s estimate using the incremental sample mean\n      \n      V\u1d62 \u2190 V\u1d62 + (r \u2212 V\u1d62) / C\u1d62\n      \n      where V\u1d62 is the estimate for arm *i*, r is the observed reward and C\u1d62 is the number of times arm *i* has been selected so far (after incrementing it for this pull).\n4.  After the last time-step return the list of arm value estimates rounded to 4 decimal places.\n\nWhen an optional integer ``seed`` is provided, use it to seed NumPy\u2019s random number generator so that results become reproducible.\n\nIf ``epsilon`` is 0 the strategy acts greedily; if it is 1 the strategy acts completely at random.\n# Your code should start with:\n```python\nimport numpy as np\nfrom typing import List, Optional\nimport numpy as np\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list where each element is rounded to the nearest 4th decimal place.\n"}
{"task_id": 480, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mel Spectrogram Generation\n# Description:\nIn speech and general-audio tasks one usually represents a raw waveform with its Mel spectrogram \u2013 the power that falls inside a small set of Mel-spaced band-pass filters.  \nWrite a function that turns a 1-D NumPy signal into its Mel spectrogram.\n\nThe procedure is the following.\n1. (optional) Pre-emphasis \u2013 replace every sample   x[n]   with   y[n] = x[n]-\u03b1\u00b7x[n-1].\n2. Frame the signal into overlapping windows\n        frame_width  = round(window_duration\u00b7fs)\n        stride       = round(stride_duration\u00b7fs)\n   If  center=True  pad the signal symmetrically with  frame_width//2  samples before framing so that every frame is centred on its time stamp.\n3. Multiply every frame by the selected window function. The function must understand\n        \"hamming\", \"hann\", \"blackman_harris\"          (default: \"hamming\").\n4. Power spectrum \u2013 for every window compute the real valued vector\n        P[k] = |FFT(frame)[k]|\u00b2 / N ,   k = 0 \u2026 N/2\n   where  N  is the frame length and only the non-redundant first N/2+1 bins are kept.\n5. Build the Mel filter bank ( n_filters  triangular filters):\n   \u2022 Convert the frequency range   [0 , fs/2]   to the Mel scale\n   \u2022 Take  n_filters+2  equally spaced Mel points and convert them back to Hertz\n   \u2022 Convert those corner frequencies to FFT-bin indices\n   \u2022 Create a triangular filter that rises linearly from 0 to 1 and falls back to 0 between every three consecutive corner frequencies.\n6. Project the power spectra onto the filter bank\n        filter_energies = power_spectrum  @  fbank\u1d40\n7. If  mean_normalize=True  subtract the mean of every column.\n8. Any exact zeros that survive must be replaced with   np.finfo(float).eps   to avoid log problems downstream.\n\nReturn the pair  (filter_energies , energy_per_frame)  where\n        energy_per_frame[g] = \u03a3_k power_spectrum[g,k]\nBoth arrays must be **rounded to four decimals** and finally converted to Python lists.\n\nThe implementation may only use NumPy \u2013 no external DSP libraries are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    # \u2193\u2193\u2193 Write your code here \u2193\u2193\u2193\n    pass\n```\n# Output Constraints:\nRound every returned value to 4 decimal places and convert the NumPy arrays to Python lists before returning.\n"}
{"task_id": 481, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: DBSCAN Clustering From Scratch\n# Description:\nDensity-Based Spatial Clustering of Applications with Noise (DBSCAN) is an unsupervised learning algorithm that groups together points that are closely packed (points with many nearby neighbors) and marks as outliers points that lie alone in low-density regions.  \n\nWrite a Python function that implements DBSCAN **from scratch** (do **not** use `sklearn` or any other external ML library).  \n\nGiven:  \n\u2022 a two-dimensional NumPy array `data` whose rows are samples and columns are features,  \n\u2022 a distance threshold `eps` (all neighbors within this Euclidean radius are considered reachable) and  \n\u2022 an integer `min_samples` (the minimum number of points required to form a dense region),  \nreturn a list of cluster labels for every sample.\n\nLabeling rules\n1. Core points (points that have at least `min_samples` points, **including itself**, within `eps`) start new clusters or expand existing ones.  \n2. Border points (non-core but reachable from a core point) receive the cluster id of that core region.  \n3. Noise points that are not reachable from any core point are labeled **\u22121**.  \n4. Clusters are indexed `0, 1, 2, \u2026` **in the order in which they are discovered while scanning the data from index `0` upward**.  \n\nIf `data` is empty, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nCluster labels must be integers where noise points are marked exactly with -1 and cluster ids start from 0 and increase consecutively in discovery order.\n"}
{"task_id": 482, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding (to_categorical)\n# Description:\nImplement the classical **one-hot encoding** routine that converts a vector of integer class labels into a 2-D array whose rows are the one-hot representations of those labels (also called *categorical* representation).\n\nThe function must support an optional parameter `num_classes`.\n\u2022 If `num_classes` is omitted or set to `None`, treat the number of classes as *max(label) + 1*.\n\u2022 If `num_classes` is provided, create that many columns; the function must raise a `ValueError` if any label is negative or not smaller than `num_classes`.\n\nAll returned values must be integers (0 or 1).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a NumPy ndarray containing only 0s and 1s (dtype=int).\n"}
{"task_id": 483, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot Encoding\n# Description:\nIn many machine\u2013learning pipelines class labels are expected to be provided in *one-hot* format \u2013 a binary vector that contains a single 1 marking the class index and 0s everywhere else.  \nWrite a Python function that converts a 1-D array-like object of non-negative integer labels into their one-hot encoded representation.  \nThe function must behave like Keras\u2019 `to_categorical`:\n1. If `num_classes` is **not** supplied, it should be inferred as `max(label)+1`.\n2. If `num_classes` *is* supplied, the returned vectors must have this length. (Assume the argument is always large enough; you don\u2019t need to add extra checks.)\n3. The function should always return a Python *list of lists* (not a NumPy array) whose elements are 0/1 integers.\n# Your code should start with:\n```python\nimport numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a *list of lists* containing only 0s and 1s.\n"}
{"task_id": 484, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Lasso Regression via Coordinate Descent\n# Description:\nImplement Lasso regression (linear regression with \\(\\ell_1\\)-regularisation) for one\u2013dimensional input data and an arbitrary polynomial feature expansion.\n\nYour task is to write a function that\n1. receives one-dimensional training samples `X_train`, their targets `y_train`, and a (possibly different) array `X_test` on which the fitted model has to be evaluated;\n2. expands all inputs to polynomial features of the requested degree (including the bias column of ones);\n3. learns the weight vector **w** by *coordinate descent* \u2013 in every iteration each weight is updated while all others are kept fixed.  For weight\n   \\(w_j\\)\n\n        z_j = \\sum_i \\phi_{ij}^2\n        \\rho_j = \\sum_i \\phi_{ij}\\Big(y_i - \\sum_k \\phi_{ik}w_k + \\phi_{ij}w_j\\Big)\n\n   where \\(\\phi\\) is the design matrix.  The soft\u2013thresholding operator\n\n        S(\u03c1, \u03bb) = sign(\u03c1)\u00b7max(|\u03c1| - \u03bb, 0)\n\n   gives the update rule\n\n        if j == 0 (bias):\u2003w_0 = \u03c1_0 / z_0               (no regularisation)\n        else:\u2003\u2003\u2003\u2003\u2003w_j = S(\u03c1_j, \u03bb) / z_j\n\n   The procedure is repeated `n_iterations` times (or can obviously be stopped early once the weights stabilise).\n4. returns the predictions on `X_test` rounded to four decimal places.\n\nAssume that all inputs are valid and that `len(X_train) == len(y_train)`.\n# Your code should start with:\n```python\nimport numpy as np\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of floats, each rounded to the nearest 4th decimal.\n"}
{"task_id": 485, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Univariate Regression Tree\n# Description:\nImplement a very small version of the CART regression-tree algorithm for *one* numerical input feature.  The function must\n1. build a binary tree by **recursive greedy splitting** on the single feature, selecting the split\u2010point that minimises the **sum of squared errors (SSE)** of the two children,\n2. stop recursing when the current depth equals the user supplied **max_depth** or when a node contains fewer than **two** training samples,\n3. label every leaf with the **mean** of the target values stored in that leaf,\n4. return the predictions for an arbitrary list of test points by traversing the tree.\n\nOnly the feature values and targets are given \u2013 no external libraries such as *scikit-learn* may be used.  The whole task therefore fits in one function: build the tree and immediately use it to predict.\n\nIf the training set is empty the function must return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a python list of floats; **do not** round the values.\n"}
{"task_id": 486, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean Squared Error (MSE) Calculator\n# Description:\nWrite a Python function that computes the Mean Squared Error (MSE) between two equally-sized numeric sequences.\n\nThe Mean Squared Error is a common regression loss metric defined as:\n\nMSE = (1/n) * \u03a3\u1d62 (y_true\u1d62 \u2212 y_pred\u1d62)\u00b2\n\nwhere n is the number of observations, y_true is the ground-truth target vector, and y_pred is the predicted target vector.\n\nRequirements\n1. The function must accept either Python lists/tuples of numbers or NumPy arrays.\n2. If the two inputs are not of the same length or contain no elements, return **-1**.\n3. Otherwise, return the MSE rounded to **4 decimal places** (as a Python `float`).\n# Your code should start with:\n```python\nimport numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal place.\n"}
{"task_id": 487, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means Clustering from Scratch\n# Description:\nImplement the classical K-Means clustering algorithm from scratch.\n\nGiven a two\u2013dimensional NumPy array `X` with shape `(n_samples, n_features)` and a positive integer `k` (number of clusters), write a function `k_means` that returns a Python list of length `n_samples` whose *i-th* element is the integer index (`0 \u2026 k-1`) of the cluster to which sample *i* is assigned.\n\nAlgorithmic requirements\n1. Initialisation \u2013 use the **first** `k` samples of `X` as the initial centroids (this makes the result deterministic and easy to test).\n2. Iteratively repeat until convergence or until `max_iters = 300` iterations have been executed:\n   \u2022 Assign every sample to the nearest centroid using Euclidean distance.\n   \u2022 Update every centroid to the mean of the samples currently assigned to it.\n3. Convergence is reached when the Euclidean distance between the old and the updated centroids is less than `tol = 1 e-4`.\n4. If a centroid loses all its members during an iteration, leave it unchanged for that iteration.\n\nReturn value\nA `list[int]` containing the cluster index of every sample in its original order.\n\nAssume the inputs are valid (i.e. `1 \u2264 k \u2264 n_samples`).\n# Your code should start with:\n```python\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a plain Python list of integers with length equal to the number of samples.\n"}
{"task_id": 488, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feature-wise Variance Calculation\n# Description:\nIn many data-preprocessing workflows you first want to understand how much each feature (column) varies across the available samples (rows).  \n\nWrite a Python function that takes a **two-dimensional** data set `X` (given either as a list of lists or a NumPy array) and returns the *population* variance of every feature.  The population variance of a single feature $x$ with $n$ samples is defined as  \n$$\\sigma^2 = \\frac1n\\sum_{i=1}^{n}(x_i-\\bar x)^2,$$  \nwhere $\\bar x$ is the mean of that feature.  \n\nRules\n1. If the data set is empty, has fewer than one sample, or is not 2-D, return **-1**.\n2. The result must be **rounded to 4 decimal places** and returned as a regular Python list (not a NumPy array).\n\nExamples (see below) follow these rules.\n# Your code should start with:\n```python\nimport numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every variance to 4 decimal places and return them in a Python list.\n"}
{"task_id": 489, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: One-Hot to Nominal Conversion\n# Description:\nIn many machine-learning pipelines categorical class labels are represented as **one-hot encoded** vectors.  Each sample is a 1-D vector that is all zeros except for a single 1 that marks the class index.  Your task is to write a function that converts a batch of one-hot encoded samples back into their nominal (integer) class labels.\n\nThe function must:\n1. Accept either a Python list of lists or a NumPy 2-D array whose shape is `(n_samples, n_classes)`.\n2. Verify that every row is a valid one-hot vector \u2013 i.e., it contains **exactly one** element equal to 1 and all other elements equal to 0.\n3. If every row is valid, return a Python `list[int]` where the *i*-th integer is the index of the 1 in the *i*-th row.\n4. If **any** row is invalid, immediately return **-1** (integer) instead of a list.\n\nExample\nInput  : one_hot = [[0, 1, 0],\n                     [1, 0, 0],\n                     [0, 0, 1]]\nOutput : [1, 0, 2]\nReason  : Row-wise indices of the single 1 are 1, 0 and 2, respectively.\n# Your code should start with:\n```python\nimport numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a plain Python list of integers.  If the input fails the one-hot validity check return the integer \u20111.\n"}
{"task_id": 490, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Vector to Diagonal Matrix Converter\n# Description:\nWrite a Python function that converts a one-dimensional vector into a square diagonal matrix. The input can be a Python list, tuple, or one-dimensional NumPy array containing numeric values (int or float). The function must place the elements of the vector on the principal diagonal of the resulting matrix and fill all off-diagonal positions with zeros. If the input vector is empty, return an empty list.\n\nThe function must return the resulting matrix as a list of lists (use NumPy\u2019s `tolist()` method for easy conversion).\n# Your code should start with:\n```python\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists. Do not round or modify input values.\n"}
{"task_id": 491, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Frequent Item-set Mining with FP-Growth\n# Description:\nImplement the FP-Growth algorithm to mine **all** frequent item-sets that appear in a collection of transactions at least *min_sup* times.\n\nFP-Growth works in two major stages:\n1. **FP-tree construction** \u2013 Scan the transaction database once to count item frequencies.  Remove items that do not reach the minimum support and order the remaining items in each transaction by descending global frequency.  Insert each ordered transaction into an FP-tree so that identical prefixes share the same path.  Maintain a header table that links every node that contains the same item label.\n2. **Recursive mining** \u2013 Repeatedly generate conditional pattern bases from the header table, build conditional FP-trees, and append discovered single-items to the current prefix to create larger frequent item-sets.  If a conditional tree consists of a single path, enumerate all non-empty combinations of the items on that path and add them to the result in one shot; otherwise, continue mining the conditional tree recursively.\n\nYour function must\n\u2022 take a two-dimensional `list`/`numpy.ndarray` of hashable items (`str`, `int`, \u2026) and an `int` *min_sup* (>0);\n\u2022 return a **sorted** `list` of `tuple`s.  Inside every tuple the items must be given in lexicographically ascending order.  The outer list must be sorted first by tuple length and then lexicographically (this makes grading deterministic).\n\nExample (taken from the original FP-Growth paper):\nTransactions =\n    [ [\"A\",\"B\",\"D\",\"E\"],\n      [\"B\",\"C\",\"E\"],\n      [\"A\",\"B\",\"D\",\"E\"],\n      [\"A\",\"B\",\"C\",\"E\"],\n      [\"A\",\"B\",\"C\",\"D\",\"E\"],\n      [\"B\",\"C\",\"D\"] ]\n\nWith *min_sup* = 3 the algorithm must output\n[('A',), ('B',), ('C',), ('D',), ('E',), ('A','B'), ('A','D'), ('A','E'),\n ('B','C'), ('B','D'), ('B','E'), ('C','E'), ('D','E'),\n ('A','B','D'), ('A','B','E'), ('A','D','E'), ('B','C','E'), ('B','D','E'),\n ('A','B','D','E')]\n\nWhy?  Every set above occurs in at least three transactions, whereas no superset of the largest listed set does.\n# Your code should start with:\n```python\nfrom collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a list of tuples sorted 1) by tuple length, 2) lexicographically.  Inside each tuple the items must be in lexicographical order.\n"}
{"task_id": 492, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Polynomial Feature Expansion\n# Description:\nIn many machine-learning models we need to enrich the original feature space with non-linear (polynomial) combinations of the existing features.  \nYour task is to implement a function that, for a given data matrix X (shape: n_samples \u00d7 n_features) and an integer degree d \u2265 0, returns a new matrix that contains **all monomials of the original features whose total degree does not exceed d**.\n\nMore formally, for every sample x = [x\u2080, x\u2081, \u2026, x_{m-1}] the resulting row should contain the products\nx\u2080^{k\u2080} x\u2081^{k\u2081} \u2026 x_{m-1}^{k_{m-1}}\nfor all non-negative integer tuples (k\u2080, \u2026, k_{m-1}) such that k\u2080+\u2026+k_{m-1} \u2264 d, arranged in the following order:\n1. Ascending total degree (0, then 1, \u2026, d).\n2. Within the same degree, lexicographic order of the indices as produced by `itertools.combinations_with_replacement`.\n\nThe very first column therefore consists of 1\u2019s (the degree-0 term).\n\nReturn the resulting matrix as a list of lists (use `ndarray.tolist()`).  If *degree* is negative return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists.  No rounding is required.\n"}
{"task_id": 493, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mean-Squared Error of a Sample\n# Description:\nThe mean-squared-error (MSE) that regression trees (and many other algorithms) use to decide on the best split is simply the average squared distance of every target value from the average of those targets.  \nFormally, given a non-empty one-dimensional sample of real numbers $y=[y_1,\\dots,y_n]$, the MSE is\n$$\n\\text{MSE}(y)=\\frac1n\\sum_{i=1}^n\\bigl(y_i-\\bar y\\bigr)^2,\\qquad\\bar y=\\frac1n\\sum_{i=1}^n y_i.\n$$\nWrite a function that receives the sample either as a Python list or a 1-D NumPy array and returns the MSE rounded to four decimal places.  \nIf the input sequence is empty, return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 494, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ensemble Prediction Aggregator\n# Description:\nIn an ensemble such as a Random Forest or Bagging model, each base learner produces a prediction for every sample.  \nGiven a 2-D array (or nested list) **preds** whose shape is `(n_models, n_samples)`, write a function that aggregates these individual predictions into one final prediction per sample.  \nThe aggregation rule depends on the task type:\n\n1. **Classification (`classifier=True`)** \u2013 use *majority voting*: the class label predicted by most models becomes the final label for that sample. In the event of a tie choose the smallest label (this is what `numpy.argmax` / `numpy.bincount` naturally do).\n2. **Regression (`classifier=False`)** \u2013 use *averaging*: the final prediction is the arithmetic mean of the model predictions for that sample.\n\nReturn the aggregated predictions as a Python list. For the regression case, round every averaged value to 4 decimal places.\n\nIf **preds** is given as a Python list, you may convert it to a NumPy array to simplify computation.\n# Your code should start with:\n```python\nimport numpy as np\nfrom typing import List, Union\nimport numpy as np\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nFor regression (`classifier=False`) round every averaged prediction to 4 decimal places.\n"}
{"task_id": 495, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feature Standardization\n# Description:\nStandardization (also called Z-score normalization) rescales each feature so that it has zero mean and unit variance.  \nWrite a Python function that standardizes every column of a 2-D NumPy array X.\n\nAlgorithm\n1. Compute the mean of each column.\n2. Compute the population standard deviation of each column (use NumPy\u2019s default `ddof=0`).\n3. For every column i\n   \u2022 If its standard deviation is **non-zero**, replace each entry x by `(x \u2212 mean_i) / std_i`.\n   \u2022 If its standard deviation is **zero** (all values are identical), replace every entry by 0.\n4. The original input array **must not be modified in-place**; create and return a new array.\n5. Round every element of the result to **4 decimal places** and return it as a regular Python list via `tolist()`.\n# Your code should start with:\n```python\nimport numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll numbers must be rounded to the nearest 4th decimal place.  The returned value must be a Python list (not a NumPy array).\n"}
{"task_id": 496, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Affine Activation and Its Derivatives\n# Description:\nIn neural-network literature an affine (sometimes called **linear**) activation is defined as  \\(f(x)=\\text{slope}\\cdot x+\\text{intercept}\\).  \n\nWrite a function that simultaneously returns\n1. the value of the affine activation applied element-wise to the input vector,\n2. the first derivative evaluated element-wise,\n3. the second derivative evaluated element-wise.\n\nThe function must\n\u2022 accept a 1-D Python list **x** (or a NumPy array) and two optional scalars *slope* (default 1) and *intercept* (default 0);\n\u2022 return a **tuple of three lists** `(y, grad, grad2)` where  \n  \u2013 `y[i]  =  slope * x[i] + intercept`  \n  \u2013 `grad[i]  =  slope`  \n  \u2013 `grad2[i] = 0`  \n\u2022 round every element of the three lists to 4 decimal places.\n\nIf the input is a scalar it should be treated as a length-one vector.\n# Your code should start with:\n```python\nimport numpy as np\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal.\n"}
{"task_id": 497, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Exponential Activation and Derivatives\n# Description:\nIn neural networks the Exponential activation function is occasionally used because of its simplicity: it maps every input $x$ to $e^x$.  A convenient property of the exponential function is that **all** of its higher-order derivatives are the function itself:\n\n$$\n\\forall n\\ge 0 \\; , \\; \\frac{d^n}{dx^n}e^{x}=e^{x}\n$$\n\nYour task is to implement a helper function that, given a batch of inputs, can return the value of the activation function **or** one of its first two derivatives on every element.\n\nSpecifications\n1. The function receives two arguments:\n   \u2022 `x` \u2013 a (possibly nested) Python list or a `numpy.ndarray` containing real numbers (ints or floats).\n   \u2022 `order` \u2013 an integer that specifies what to compute:\n        * `0`  \u2192 the activation itself $e^{x}$ (default)\n        * `1`  \u2192 the first derivative  $e^{x}$\n        * `2`  \u2192 the second derivative $e^{x}$\n2. For any other value of `order` return `-1`.\n3. The result must keep **the same shape** as the input and be returned as a *Python list* (use `tolist()` on a NumPy array).\n4. Each numeric entry in the output list must be rounded to **6 decimal places**.\n\nIf the input is `[[0, 1], [2, -1]]` and `order = 0` the function should return `[[1.0, 2.718282], [7.389056, 0.367879]]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery numeric entry must be rounded to 6 decimal places and the final result returned as a Python list with the same nesting structure as the input.\n"}
{"task_id": 498, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Leaky ReLU Activation and Derivatives\n# Description:\nImplement the leaky rectified linear unit (Leaky ReLU) activation that is widely used in deep\u2010learning models.  \n\nWrite a single function that is able to return either the activation value itself, its first derivative, or its second derivative for every element in the supplied input tensor.\n\nFor an element \\(x_i\\) and a fixed slope \\(\\alpha\\;(0<\\alpha<1)\\)\n\nLeaky ReLU\n\u2022 0-th order (function value)\n  \\[\\;f(x_i)=\\begin{cases}x_i,&x_i>0\\\\ \\alpha x_i,&x_i\\le 0\\end{cases}\\]\n\u2022 1-st order (first derivative)\n  \\[\\;f'(x_i)=\\begin{cases}1,&x_i>0\\\\ \\alpha,&x_i\\le 0\\end{cases}\\]\n\u2022 2-nd order (second derivative) is identically zero.\n\nThe function signature is fixed as:\n\n```\nleaky_relu(x: np.ndarray | list | int | float,\n           alpha: float = 0.3,\n           order: int = 0) -> list\n```\n\nParameters\nx      A NumPy array, Python list, or scalar containing the values on which to apply Leaky ReLU.\nalpha  Slope used when the argument is non-positive (default **0.3**).\norder  0, 1, or 2 \u2013 respectively return the function value, the first derivative, or the second derivative.\n\nReturn value\nA Python list with the same shape as *x* (scalars are returned inside a one-element list) that contains the requested quantity.  Any intermediate calculation should use NumPy but the final answer **must** be converted with ``tolist()``.\n\nNotes\n\u2022 The input must **not** be modified in-place.\n\u2022 If *order* is not 0, 1, or 2 return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float = 0.3, order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAlways return a Python list obtained with NumPy\u2019s tolist() method (or an empty list for an invalid order).\n"}
{"task_id": 499, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: PCA Dimensionality Reduction\n# Description:\nImplement a Principal Component Analysis (PCA) **dimensionality-reduction** routine from scratch.\n\nGiven a 2-D NumPy array `data` \u2013 where each row is a sample and each column is a feature \u2013 and a positive integer `k`, return the projection of the data onto the first `k` principal components.\n\nThe steps are:\n1. Standardise each feature (zero mean, unit *population* variance).  \n   \u2022  If a feature has zero variance, leave it unchanged (all zeros after centring).\n2. Compute the sample covariance matrix of the standardised data (use Bessel\u2019s correction, i.e. divide by *n \u2212 1*).\n3. Perform an eigen-decomposition of the covariance matrix.\n4. Sort eigenvalues in **descending** order and arrange the corresponding eigenvectors accordingly.\n5. Fix the sign of every eigenvector so that its entry with the largest absolute value is **positive** (this removes the sign ambiguity of eigenvectors and makes the output deterministic).\n6. Project the standardised data on the first `k` eigenvectors.\n\nReturn the projected matrix rounded to four decimal places and converted to a regular (nested-list) Python list.\n\nIf `k` is not in the interval `1 \u2026 n_features`, return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every number to 4 decimal places and return a Python list (use NumPy\u2019s `round(..., 4)` followed by `.tolist()`).\n"}
{"task_id": 500, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Tiny Gradient Boosting Binary Classifier\n# Description:\nImplement a very small-scale Gradient Boosting **binary** classifier that uses decision stumps (one\u2013dimensional splits) as weak learners and the squared\u2013error loss (regression view of the labels).\\n\\nThe function must:\\n1. Receive a training set `X_train` (list of samples \u2013 each sample is a list of numerical features), the associated binary labels `y_train` (list of 0/1 ints) and a test set `X_test`.\\n2. Build an additive model `F(x)=c+\\sum_{m=1}^{M}\\eta\u00b7h_m(x)` where\\n   \u2022 `c` is the average of the training labels.\\n   \u2022 each `h_m` is a decision stump that predicts a constant value for *left* samples (feature value `<=` threshold) and another constant value for *right* samples.\\n   \u2022 `M=n_estimators` and `\u03b7=learning_rate`.\\n   \u2022 At every stage residuals `r_i=y_i-F(x_i)` are computed and the next stump is fitted to these residuals by minimising the total squared error.\\n3. After the ensemble is built, return the **predicted class labels** (0/1) for every sample in `X_test`, obtained by thresholding the final score `F(x)` at 0.5.\\n\\nAssume the data are perfectly clean (no missing values) and that `y_train` only contains 0 or 1.\\nReturn the predictions as a Python `list` of integers.\n# Your code should start with:\n```python\nimport numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a list containing only 0 or 1 integers and having exactly the same length as `X_test`.\n"}
{"task_id": 501, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Constant Learning-Rate Scheduler\n# Description:\nIn many optimization algorithms (e.g., stochastic gradient descent) the learning rate is sometimes kept constant for the whole training process.  \n\nWrite a simple utility function that **always returns the same learning rate regardless of the current training step**.  \n\nThe function must accept two arguments:\n1. `initial_lr` (float) \u2013 the desired fixed learning-rate value.\n2. `step` (int) \u2013 the current optimization step / iteration counter (this input is present only for API compatibility and **must not influence the result**).\n\nYour task is to implement this constant scheduler.\n\nIf the provided `initial_lr` is negative you should still return it unchanged (no validation is required).\n# Your code should start with:\n```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    # Write your code below this line\n    pass\n```\n# Output Constraints:\nReturn a float that is numerically identical to `initial_lr` (no extra rounding or formatting is required).\n"}
{"task_id": 502, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hard-Sigmoid Activation Function\n# Description:\nImplement the Hard-Sigmoid activation function and its first and second derivatives.\n\nThe Hard-Sigmoid is a piece-wise linear approximation of the logistic sigmoid frequently used in deep-learning models because it is computationally cheaper while still introducing non-linearity.\n\nMathematically it is defined as:\n\nHardSigmoid(z) = \u23a7 0                   if z < \u22122.5\n                 \u23a8 0.2\u00b7z + 0.5         if \u22122.5 \u2264 z \u2264 2.5\n                 \u23a9 1                   if z > 2.5\n\nIts first derivative is\n\nHardSigmoid\u2032(z) = \u23a7 0.2  if \u22122.5 \u2264 z \u2264 2.5\n                  \u23a9 0    otherwise\n\nThe second derivative is identically 0 everywhere.\n\nWrite a function hard_sigmoid that receives a NumPy array z and an optional integer order. Depending on order it must return:\n\u2022 order = 0 (default) \u2013 the activation values  HardSigmoid(z)\n\u2022 order = 1 \u2013 the first derivative HardSigmoid\u2032(z)\n\u2022 order = 2 \u2013 the second derivative (array of zeros)\n\nThe function must work element-wise on the input array and return the result as a Python list rounded to 4 decimal places.\nIf order is any value other than 0, 1 or 2, simply return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    # TODO: Implement this function following the documentation\n    pass\n```\n# Output Constraints:\nResults must be rounded to the nearest 4th decimal using numpy.round and returned via ndarray.tolist().\n"}
{"task_id": 503, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Selective Hyperparameter Update\n# Description:\nIn many machine\u2013learning libraries a *scheduler* object keeps a dictionary called **hyperparameters** that stores values such as the current learning\u2010rate, weight\u2013decay, etc.  \nA common utility method called `set_params` receives another dictionary **updates** and changes only those keys that are already present in **hyperparameters** \u2013 all other keys are silently ignored.  \nYour task is to implement the same behaviour in a purely functional way.\n\nWrite a function `selective_update` that behaves as follows:\n1. It takes two arguments:\n   \u2022 **hparams** \u2013 the original hyper-parameter dictionary (may contain nested structures).\n   \u2022 **updates** \u2013 a dictionary with new values or `None`.\n2. If **hparams** is `None`, return **\u22121**.\n3. Create a deep copy of **hparams** so the original input is never modified.\n4. If **updates** is not `None`, loop through its key/value pairs and overwrite the corresponding entries *only if the key already exists in the copied dictionary*.\n5. Return the copied (and possibly updated) dictionary.\n\nExample\n-------\nInput:\n```\nhparams = {'lr': 0.1, 'momentum': 0.9}\nupdates = {'lr': 0.01, 'weight_decay': 0.0001}\n```\nOutput:\n```\n{'lr': 0.01, 'momentum': 0.9}\n```\nReasoning: Only key ``'lr'`` is shared by both dictionaries, therefore it is the sole value that gets updated.  The new key ``'weight_decay'`` is ignored.\n# Your code should start with:\n```python\nfrom copy import deepcopy\nfrom copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn \u22121 when the first argument is None.\n"}
{"task_id": 505, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Contrastive Divergence Update for RBM\n# Description:\nIn this task you will implement a single weight\u2013update step for a binary Restricted Boltzmann Machine (RBM) using the Contrastive Divergence (CD-k) algorithm.  \n\nThe function receives\n1. a mini-batch of visible vectors `X` (shape **m \u00d7 n_v**, `m` samples, `n_v` visible units),\n2. the current weight matrix `W` (shape **n_v \u00d7 n_h**),\n3. visible and hidden bias vectors `vbias` (length `n_v`) and `hbias` (length `n_h`),\n4. the learning rate `learning_rate`,\n5. the number of Gibbs sampling steps `k`.\n\nYou must\n\u2022 compute the positive phase hidden probabilities,\n\u2022 run `k` full Gibbs steps (hidden \u2192 visible \u2192 hidden) **without stochastic sampling \u2013 use the probabilities directly**,  \n\u2022 compute positive and negative gradients\n    \u2022 positive\u2003`pos_grad = X\u1d40 \u00b7 h0_prob`\n    \u2022 negative `neg_grad = v_k_prob\u1d40 \u00b7 h_k_prob`,\n\u2022 update the weight matrix with\n```\nW_new = W + learning_rate \u00b7 (pos_grad \u2212 neg_grad) / m\n```\n\u2022 return the updated weight matrix rounded to 4 decimal places and converted to a plain Python `list[list[float]]`.\n\nIf the mini-batch is empty return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the weight matrix as a list of lists.\nEach value must be rounded to the nearest 4th decimal.\n"}
{"task_id": 508, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Get Dictionary Values by Key Substring\n# Description:\nYou are given a dictionary that stores model parameters where the dictionary keys are the parameter names (strings) and the values are the parameter objects (the objects can be of any Python data type).  \n\nWrite a function that returns **only the values** whose keys contain a given substring.  The function must **preserve the original insertion order** of the dictionary.\n\nIf no key contains the substring, return an empty list.\n\nThe search is case-sensitive, meaning the substring `'weight'` will match `'weight1'` but **not** `'Weight1'`.\n# Your code should start with:\n```python\nfrom typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn a Python list that keeps the same order as the matching keys appear in the original dictionary.\n"}
{"task_id": 509, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Chebyshev Distance Calculator\n# Description:\nWrite a Python function that computes the Chebyshev (also called \\(L_{\\infty}\\) or maximum) distance between two real-valued vectors.  The Chebyshev distance between vectors \\(\\mathbf{x}=(x_{1},x_{2},\\dots ,x_{n})\\) and \\(\\mathbf{y}=(y_{1},y_{2},\\dots ,y_{n})\\) is defined as\n\n\\[\n\\;\\;d(\\mathbf{x},\\mathbf{y})\\;=\\;\\max_{i}\\, |x_{i}-y_{i}| .\\]\n\nThe function must:\n1. Accept the two vectors as Python lists or NumPy 1-D arrays containing integers and/or floats.\n2. Verify that the two vectors have the same length; if not, return **-1**.\n3. Return the distance rounded to **four** decimal places as a standard Python *float* (not a NumPy scalar).\n\nExample\n-------\nInput\n```\nx = [1, 2, 3]\ny = [2, 4, 6]\n```\nOutput\n```\n3.0\n```\nReasoning: The component-wise absolute differences are |1-2|=1, |2-4|=2, |3-6|=3.  The maximum of these values is 3, so the Chebyshev distance is 3.0.\n# Your code should start with:\n```python\nimport numpy as np\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal.\n"}
{"task_id": 510, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Variational Auto-Encoder Loss\n# Description:\nImplement the Variational Auto-Encoder (VAE) variational lower bound (also called **VAE loss**) for Bernoulli visible units.\n\nFor a mini-batch of reconstructed samples the loss is defined as\n\n    Loss = Reconstruction Loss  +  KL Divergence\n\nwhere\n\n1. Reconstruction Loss is the element-wise binary cross-entropy between the true input $\\mathbf y$ and the reconstruction $\\hat{\\mathbf y}$.\n2. KL Divergence is the analytical Kullback-Leibler divergence between the approximate posterior $q(t\\,|\\,x)=\\mathcal N(\\mu,\\operatorname{diag}(\\sigma^2))$ and the unit Gaussian prior $p(t)=\\mathcal N(0, I)$.  With mean vector $\\mu$ (``t_mean``) and log-variance vector $\\log\\sigma^{2}$ (``t_log_var``) this term is\n\n    KL = -\\tfrac12 \\sum\\bigl(1 + \\log\\sigma^{2} - \\mu^{2} - \\sigma^{2}\\bigr).\n\nFor numerical stability clip each element of *y_pred* into the open interval $(\\varepsilon,1-\\varepsilon)$ with  `\\varepsilon = np.finfo(float).eps` before taking a logarithm.\n\nThe function must return the mini-batch **average** of *Reconstruction Loss + KL Divergence* **rounded to six decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to exactly 6 decimal places.\n"}
{"task_id": 511, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Random Bernoulli Multi-Armed Bandit Generator\n# Description:\nIn a Bernoulli multi-armed bandit (MAB) each arm, when pulled, produces a binary reward (success = 1, failure = 0) with a certain success probability.  \n\nWrite a function that builds a *random* Bernoulli MAB environment by returning the list of success probabilities for all arms.  \n\nSteps to follow\n1. Draw *n_arms* independent samples from a continuous uniform distribution on [0,1).\n2. Normalise the drawn numbers by their sum so that the resulting probabilities form a valid distribution (they add up to 1 while still lying in [0,1]).  \n3. Round every probability to 4 decimal places and return the list.\n\nIf *n_arms* is smaller than 1 the function must return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n    \"\"\"TODO: implement\"\"\"\n```\n# Output Constraints:\nReturn a Python list whose elements are floats rounded to the nearest 4th decimal.\n"}
{"task_id": 512, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Pooling Layer Output Shape\n# Description:\nIn many deep-learning frameworks you very often need to know the spatial size (height and width) of the feature-maps that leave a pooling layer so that the following layers can be built correctly.  \nAssume a **2-D pooling** layer that is applied independently on every channel, **without any padding**, and with potentially different kernel sizes and strides in the vertical and horizontal directions.  \nGiven  \n\u2022 `pool_shape = (k_h, k_w)` \u2013 kernel (window) height and width,  \n\u2022 `image_shape = (n_images, n_channels, h, w)` \u2013 mini-batch size, number of channels and spatial size of the incoming tensor,  \n\u2022 `stride = (s_h, s_w)` \u2013 vertical and horizontal stride,  \nyou have to compute the output spatial dimensions `(out_h, out_w)` produced by the pooling layer.\n\nThe mathematical formula (when no padding is used) is  \n    out_h = (h \u2212 k_h) / s_h + 1  \n    out_w = (w \u2212 k_w) / s_w + 1\n\nThe output is **valid only if**\n1. `k_h \u2264 h` **and** `k_w \u2264 w`, and\n2. both divisions above are integers (i.e. `(h \u2212 k_h)` is exactly divisible by `s_h`, and the same for the width).\n\nIf the configuration is invalid return **-1**.\n# Your code should start with:\n```python\ndef pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple of two integers `(out_h, out_w)`.\nIf the pooling configuration is impossible, return the integer `-1`.\n"}
{"task_id": 513, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Factorization Machine Regression \u2013 Prediction\n# Description:\nA Factorization Machine (FM) is a supervised learning model that combines linear regression with pair-wise feature interactions. For a sample **x**\u2208R\u207f the FM prediction in the regression setting is\n\n\u0177 = w\u2080 + \u03a3\u2c7c w\u2c7c x\u2c7c + \u00bd \u03a3_{f=1}^{k} [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n\nwhere\n\u2022 w\u2080 is a scalar bias,\n\u2022 **w** is the vector of linear weights (length n),\n\u2022 **V**\u2208R^{n\u00d7k} contains the latent factors that model pair-wise interactions,\n\u2022 k is the number of latent factors (columns of **V**).\n\nWrite a Python function that implements this formula and returns the predicted values for **all** samples in the design matrix **X**.\n\nRequirements\n1. The function must work for an arbitrary number of samples (rows of **X**), features (columns of **X**) and latent factors (columns of **V**).\n2. The result has to be rounded to 4 decimal places.\n3. Use only ``numpy`` for numerical computations.\n\nIf the input dimensions are inconsistent (e.g. lengths of **w** and **V** do not match the number of columns in **X**) assume the inputs are well-formed \u2013 no explicit error handling is required.\n# Your code should start with:\n```python\nimport numpy as np\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\n"}
{"task_id": 514, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Training / Testing Phase Switch\n# Description:\nIn many machine-learning workflows you often want to keep track of whether a component is in *training* mode (where parameters are updated) or in *testing* / *inference* mode (where parameters are frozen).  \n\nWrite a function that updates the current phase according to two optional Boolean switches that mimic the behaviour of the setters `is_training` and `is_testing` shown in the code snippet above.\n\nRules\n1. `current_phase` is a string that is either **\"training\"** or **\"testing\"**.\n2. At most one of the keyword arguments `set_train` and `set_test` can be supplied (i.e. be different from `None`).\n3. \u2022 If `set_train` is provided, the new phase is **\"training\"** if `set_train` is `True`, otherwise **\"testing\"**.  \n   \u2022 If `set_test` is provided, the new phase is **\"testing\"** if `set_test` is `True`, otherwise **\"training\"**.\n4. If neither switch is supplied, simply toggle the phase (\"training\" \u2192 \"testing\", \"testing\" \u2192 \"training\").\n5. For any invalid input (wrong phase string, both switches supplied, or non-Boolean switch values) return **-1**.\n# Your code should start with:\n```python\ndef switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nReturn exactly the strings \"training\" or \"testing\".  \nReturn -1 when the input is invalid.\n"}
{"task_id": 515, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Flatten Parameter Dictionary\n# Description:\nIn many machine-learning and deep-learning libraries a model (or any object that mixes in `ParamMixin`) stores its hyper-parameters in a nested dictionary called `_params`.  For logging, grid-search or command-line interfaces it is often useful to convert such a nested dictionary into a *flat* one whose keys are the full path to each value separated by dots.\n\nWrite a **recursive** Python function that receives a parameter dictionary and returns its flattened representation.\n\nThe flattening rule is:\n1. If the value corresponding to a key is itself a dictionary, recursively flatten it.\n2. Concatenate the current key with the sub-key using a dot (`.`) to build the flattened key.\n3. All non-dictionary values (numbers, strings, lists, tuples, etc.) stay unchanged.\n4. The returned dictionary must be a **new** object (the original input must not be mutated).\n\nIf the input dictionary is empty, simply return an empty dictionary.\n\nExample:\n```\nparams = {\n    \"optimizer\": {\n        \"type\": \"SGD\",\n        \"config\": {\n            \"lr\": 0.01,\n            \"momentum\": 0.9\n        }\n    },\n    \"epochs\": 25\n}\n```\n`flatten_parameters(params)` should return\n```\n{\n    \"optimizer.type\": \"SGD\",\n    \"optimizer.config.lr\": 0.01,\n    \"optimizer.config.momentum\": 0.9,\n    \"epochs\": 25\n}\n```\n# Your code should start with:\n```python\nfrom typing import Any, Dict\nfrom typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nReturn a new flat dictionary that contains the same values as the input. Do NOT mutate the input dictionary.\n"}
{"task_id": 516, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Euclidean Distance Between Two Vectors\n# Description:\nImplement a function that computes the Euclidean distance between two vectors.\n\nThe function must accept each vector as either a Python list or a NumPy array containing numeric values (ints or floats).  \nIf the two vectors have different total numbers of elements, the function must return **-1**.  \nOtherwise it should:\n1. Convert the inputs to one-dimensional NumPy arrays.\n2. Compute the ordinary Euclidean (\u21132) distance:  \n   \\[ d(\\mathbf a,\\mathbf b)=\\sqrt{\\sum_{i=1}^{n}(a_i-b_i)^2} \\]\n3. Round the answer to 4 decimal places and return it as a Python float.\n\nExamples illustrating the required behaviour are given below.\n# Your code should start with:\n```python\nimport math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place.\n"}
{"task_id": 517, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sigmoid Activation Function\n# Description:\nThe sigmoid (or logistic) activation function is one of the most widely-used non-linearities in neural networks.  Mathematically it is defined as\n\ng(z) = 1 / (1 + e^(\u2212z))\n\nWrite a Python function named `sigmoid` that:\n1. Accepts a single input `z`, which can be a\n   \u2022 Python scalar (int or float)\n   \u2022 list/tuple of numbers, or\n   \u2022 NumPy `ndarray` of arbitrary shape.\n2. Computes the element-wise sigmoid of the input.\n3. Returns the result rounded to **four decimal places**.\n4. Is numerically stable for very large positive or negative values of *z* (i.e. must not overflow for |z| > 700).\n5. Preserves the input structure:\n   \u2022 If `z` is a scalar, return a float.\n   \u2022 Otherwise return a (nested) Python list produced via NumPy\u2019s `tolist()` method.\n\nIf every step is implemented correctly, calling `sigmoid([-1, 0, 1])` should return `[0.2689, 0.5, 0.7311]`.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal.\n"}
{"task_id": 518, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Automatic One-Hot Decoding Decorator\n# Description:\nIn many machine-learning workflows classification labels are sometimes stored as one-hot encoded matrices (each row contains a single 1 indicating the class).  \nMost metric functions, however, expect the labels as plain one-dimensional integer arrays.  \nWrite a decorator called `unhot` that automatically converts any one-hot encoded **NumPy** array that is passed to the wrapped metric into its corresponding integer label representation before the metric is evaluated.\n\nBehaviour details\n1. The decorator receives a metric function that takes exactly two positional arguments `(actual, predicted)`, both being NumPy arrays of identical length.\n2. Inside the wrapper:\n   \u2022 If `actual` is two-dimensional **and** its second dimension is larger than one, treat it as one-hot and replace it with `actual.argmax(axis=1)`.\n   \u2022 Perform the same check and conversion for `predicted`.\n   \u2022 Arrays that are already one-dimensional (shape `(n,)`) or whose shape is `(n,1)` must stay unchanged.\n3. After the optional conversion the original metric is called with the processed arrays, and its return value is passed back to the caller **unmodified**.\n\nExample usage\n```\nimport numpy as np\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\nHere `accuracy` receives one-hot matrices but internally works with the 1-D label arrays `[1,0,2]` and `[1,1,2]`, giving an accuracy of `2/3 = 0.6667`.\n# Your code should start with:\n```python\nimport numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n\n    # =======  End of your code  =======\n    \n    return wrapper\n```\n# Output Constraints:\nReturn the result exactly as produced by the wrapped metric \u2013 the decorator must not alter it.\n"}
{"task_id": 520, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sigmoid Gradient\n# Description:\nIn neural-network back-propagation we often need the derivative of the sigmoid activation function.  \nGiven the value of the sigmoid function $g(z)=\\dfrac{1}{1+e^{-z}}$ ( **not** the pre\u2013activation $z$ itself), the derivative is\n\\[g'(z)=g(z)\\,[1-g(z)].\\]\nWrite a Python function that returns this gradient for a scalar, 1-D or 2-D input that already contains sigmoid outputs.  \nThe function must:\n\u2022 accept Python scalars or (nested) lists, or NumPy arrays containing floats in the closed interval $[0,1]$;  \n\u2022 compute the element-wise value $x(1-x)$;  \n\u2022 round every result to 4 decimal places;  \n\u2022 return a **Python object of the same rank**: for a scalar input return a float, otherwise return a (nested) list with the same shape as the input.\nIf the input is an empty list, return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nAll numeric results must be rounded to the nearest 4th decimal using numpy.round(x,4).\n"}
{"task_id": 521, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gradient of ReLU Activation\n# Description:\nImplement the gradient (derivative) of the Rectified Linear Unit (ReLU) activation function.\n\nFor an input $z$ the ReLU activation is defined as $g(z)=\\max(0,z)$.  Its derivative is\n\n            g'(z)=\\begin{cases}\n                0 & \\text{if } z\\le 0,\\\\\n                1 & \\text{if } z>0.\n            \\end{cases}\n\nWrite a Python function `relu_grad` that takes either a scalar, a (nested) Python list, or a NumPy `ndarray` and returns the element-wise ReLU gradient:\n\u2022 Every positive value is replaced by `1`.\n\u2022 Every zero or negative value is replaced by `0`.\n\nReturn format\n\u2022 If the input is a scalar (Python `int`/`float` or 0-d `ndarray`), return a single `int` (either `0` or `1`).\n\u2022 Otherwise return a Python list (use `tolist()` on any NumPy result) whose shape matches the input.\n\nNo other third-party libraries are allowed.\n# Your code should start with:\n```python\nimport numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nFor non-scalar inputs return a Python list of `0`/`1` having exactly the same shape as the input.\n"}
{"task_id": 522, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Standard Normal Weight Initialisation\n# Description:\nWeight initialisation is a crucial step when designing and training neural-network models.  \nWrite a function that returns a tensor whose elements are drawn from the **standard normal distribution** (mean = 0, variance = 1).\n\nRequirements\n1. The desired tensor shape is given through the argument `weight_shape`. It can be an `int`, `tuple`, or `list` containing positive integers (e.g. `3`, `(2,3)`, `[4,5]`).  \n2. For the sake of a reproducible result **the NumPy random seed must be reset to `42` every time the function is called**.  \n3. Each generated number has to be rounded to **4 decimal places**.  \n4. The returned value must be a pure Python nested list (use NumPy\u2019s `tolist()` method).\n\nIf the above steps are implemented correctly the same call will always return the same numbers, which makes automated testing possible.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nReturn a Python list (not a NumPy array).  All numeric values must be rounded to the nearest 4th decimal.\n"}
{"task_id": 523, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: He Normal Weight Initialisation\n# Description:\nIn neural-network training the initial values of the weights strongly influence how fast a model converges.  One of the most widely used initialisation schemes for layers followed by a ReLU (or any of its variants) is the **He normal initialiser** (sometimes called *Kaiming normal*).\n\nFor a weight tensor $W$ with fan-in (number of input units) $n_{in}$, the He normal distribution is the normal distribution with\n    mean $\\;\\mu = 0\\;$ and standard deviation $\\;\\sigma = \\sqrt{\\dfrac{2}{n_{in}}}.$\n\nYour task is to write a function that, given the *shape* of a weight tensor, returns a NumPy array whose elements are drawn from the He normal distribution and finally returns the result as a Python list of lists (or nested lists for tensors of higher rank) with every element rounded to four decimal places.\n\nHow to compute the fan-in:\n\u2022   Fully-connected / dense layer (2-D matrix of shape *(n_in, n_out)*):  fan-in is the first dimension *(n_in)*.\n\u2022   Convolutional kernel (4-D tensor of shape *(kernel_h, kernel_w, in_channels, out_channels)*):  fan-in is the product *kernel_h \u00d7 kernel_w \u00d7 in_channels* (the output channels do **not** contribute).\n\nIf the shape does not correspond to either a 2-D or a 4-D tensor you may assume it is a 2-D tensor and treat the first dimension as *n_in*.\n\nExample (with the random seed fixed to 0 for demonstration):\nInput:  weight_shape = (2, 2)\nOutput: [[1.7641, 0.4002], [0.9787, 2.2409]]\nReasoning:  Here fan-in = 2, hence \u03c3 = \u221a(2/2) = 1.  With NumPy\u2019s RNG seeded to 0 the first four draws from \ud835\udca9(0,1) are 1.76405235, 0.40015721, 0.97873798 and 2.2408932, which after rounding become the matrix shown above.\n# Your code should start with:\n```python\nimport numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n```\n# Output Constraints:\nReturn the weights as a (nested) Python list with every element rounded to 4 decimal places.\n"}
{"task_id": 525, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ridge Regression (Closed-Form Solution)\n# Description:\nImplement Ridge (L2-regularised) linear regression **without using any third-party ML library**.  \nThe function receives a design matrix `X\u2208\u211d^{m\u00d7n}` (each row is a sample, each column a feature), a target vector `y\u2208\u211d^m`, and a non\u2013negative regularisation factor `\u03bb`.\n\nThe model is  \n\u2003\u2003\u0177 = X\u00b7w + b,  \nwhere `w\u2208\u211d^n` are the weights and `b\u2208\u211d` is the bias (intercept).\n\nTo avoid dealing with learning-rate schedules and convergence criteria, train the model in **closed form**.  \nA convenient way that leaves the bias term unpenalised is:\n\n1. Mean-centre the data\n   \u2022 `x_i  \u2190  x_i \u2212 x\u0304` for every sample `x_i` (operate column-wise)\n   \u2022 `y_i  \u2190  y_i \u2212 \u0233`\n\n2. Solve for the optimal weights\n   \u2022 `w = ( X\u1d40X + \u03bbI )\u207b\u00b9 X\u1d40 y`\n\n3. Recover the bias\n   \u2022 `b = \u0233 \u2212 x\u0304\u00b7w`\n\nReturn the pair `(weights, bias)` rounded to 4 decimal digits.\n\nIf the matrix to be inverted happens to be singular, use the Moore\u2013Penrose pseudo-inverse instead \u2013 this always exists and coincides with the inverse whenever the matrix is non-singular.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n```\n# Output Constraints:\nRound each weight and the bias to 4 decimal places before returning.\n"}
{"task_id": 527, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Archive Format Checker\n# Description:\nImplement a simplified version of a popular helper that decides whether a file **should** be extracted according to the file name extension and the user-supplied *archive_format* parameter.  \nThe function must NOT really extract anything from the disk.  Instead, it simply inspects the file name (the *file_path* argument) and returns a Boolean:\n\u2022 **True**  \u2013 the file extension matches at least one of the permitted archive formats and therefore *could* be extracted.  \n\u2022 **False** \u2013 no match is found or the caller explicitly disabled every format.\n\nSupported formats\n1. **tar** \u2013 recognise the extensions:  \n   \".tar\", \".tar.gz\", \".tgz\", \".tar.bz\", \".tar.bz2\", \".tbz\"  (case\u2013insensitive).\n2. **zip** \u2013 recognise the extension \".zip\" (case\u2013insensitive).\n\nParameter *archive_format* behaves as follows (exactly like in the original Keras helper):\n\u2022 `'auto'` \u2013 equivalent to `['tar', 'zip']` (both formats allowed).\n\u2022 a single string (e.g. `'tar'` or `'zip'`) \u2013 only this format is allowed.\n\u2022 a list of strings \u2013 only the listed formats are allowed.\n\u2022 `None` or an **empty** list \u2013 no format is allowed \u2011> function must immediately return **False**.\n\nThe function must:\n1. Never raise exceptions.\n2. Never import non-standard libraries \u2013 only `os` and `typing` are permitted.\n3. Perform a **case-insensitive** comparison when checking file name extensions.\n\nReturn value\nBoolean \u2013 *True* if the file name matches one of the allowed formats, *False* otherwise.\n# Your code should start with:\n```python\nimport os\nfrom typing import List, Union\nimport os\n\ndef extract_archive(file_path: str, path: str = '.', archive_format: Union[str, List[str], None] = 'auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n"}
{"task_id": 528, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decision Boundary Grid Generation\n# Description:\nIn many machine-learning visualisations we first build a dense, rectangular grid that spans the training data and then ask a classifier to label every grid point.  The resulting matrix of labels can afterwards be used to draw decision boundaries with a contour plot.\n\nWrite a function that builds such a grid for a very simple **linear** classifier working in two dimensions.  The classifier is fully defined by a weight vector `W = [w\u2081 , w\u2082]` and a bias `b`.  A point x = (x\u2081 , x\u2082) is classified by the rule\n\n\u2003\u2003sign( w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b ) ,\n\nwhere `sign(z)` returns **1** when *z* \u2265 0 and **-1** otherwise.\n\nGiven:\n1. `X` \u2013 the original 2-D data set (shape *n\u00d72*) that should determine how wide the grid has to be,\n2. `W` \u2013 the length-2 list or tuple containing the classifier\u2019s weights,\n3. `b` \u2013 the bias term (a single number),\n4. `grid_n` \u2013 the desired resolution of the grid (default 100),\n\nyou must\n\u2022 build two equally spaced 1-D arrays `x1_plot` and `x2_plot`, each of length `grid_n`, that range from the minimum to the maximum value of the corresponding column of `X`,\n\u2022 create a mesh-grid from those arrays,\n\u2022 classify every grid point with the rule above and store the labels (-1 or 1) in a 2-D Python list having shape `grid_n \u00d7 grid_n`.\n\nReturn this list.  Do **not** use any third-party machine-learning libraries; only NumPy is allowed.\n\nIf either component of `W` is 0 the rule still works \u2013 implement it exactly as stated.\n# Your code should start with:\n```python\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nThe function must return a Python list of lists consisting solely of the integers 1 and -1.\n"}
{"task_id": 529, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ASCII Progress Bar Generation\n# Description:\nIn many command-line applications it is helpful to visualise the advance of a long running loop with an ASCII progress bar.  In this task you will implement a helper function that builds the textual representation of such a bar using (almost) the same rules as the *Progbar* utility in Keras.\n\nThe function receives the **current** step that has just finished, the total number of steps (**target**) \u2013 which can be `None` if the total length is unknown \u2013 and the desired bar **width** (the number of characters that form the bar itself, i.e. the group that consists of `=` / `>` / `.` between the square brackets).\n\nFormatting rules (the outcome must match these rules exactly):\n1. If *target* is **known** (not `None`)\n   \u2022 Let `d` be the amount of digits needed to print *target* ( e.g. 20 \u2192 d = 2, 100 \u2192 d = 3 ).  Use right alignment so that the counter field always occupies *d* characters.\n   \u2022 Start the output with `current/target [` (where *current* is printed in a field of width *d*).\n   \u2022 The filled length of the bar is `prog_width = int(width * current/target)`.\n   \u2022 If `prog_width > 0` append `prog_width\u22121` copies of `=`.  \n     \u2013 If *current* < *target* add the progress arrow `>` afterwards.  \n     \u2013 Otherwise (the job is finished) add a single `=` instead.\n   \u2022 Append `width \u2212 prog_width` dots `.` to fill the bar and close it with a right bracket `]`.\n2. If *target* is **unknown** (`None`)\n   \u2022 Return exactly a 7-character, right-aligned decimal representation of *current* followed by `/Unknown` (no bar is drawn in this case).\n\nThe function **must not print anything** \u2013 it only returns the constructed string.\n\nIn all cases the string has to be produced **identically** to the description above (including every space, bracket and dot).\n# Your code should start with:\n```python\nimport math\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nThe returned string must exactly match the format described above (including spaces).\n"}
{"task_id": 530, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Loss\n# Description:\nBinary Cross-Entropy (BCE) is the most common loss used to train a binary classifier or the discriminator component of a Generative Adversarial Network (GAN).  \n\nWrite a Python function that computes the mean binary cross-entropy loss for a batch of predictions.  The function receives two NumPy arrays of identical shape:\n1. y_true \u2013 the ground-truth binary labels (0 or 1)\n2. y_pred \u2013 the corresponding predicted probabilities produced by a model (expected to be in the open interval (0,1))\n\nFor numerical stability your implementation must clip y_pred to the range [1e-7, 1 \u2212 1e-7] before taking the logarithm.  The loss for one sample is defined as\n\n    \u2113 = \u2212[ y \u00b7 log(p) + (1 \u2212 y) \u00b7 log(1 \u2212 p) ]\n\nReturn the average loss over all samples, rounded to 4 decimal places.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a single float rounded to the nearest 4th decimal.\n"}
{"task_id": 531, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generalized Cosine Window Generator\n# Description:\nIn signal processing, window functions shape a finite-length signal before applying the Discrete Fourier Transform (DFT) or designing digital filters.  A very flexible family of windows \u2013 the **generalized cosine windows** \u2013 is obtained by adding together cosine terms with user\u2013defined weights.\n\nFor a desired window length $L$ (in samples) and a list of real coefficients $a_0,a_1,\\dots ,a_K$, the generalized cosine window $w[n]$ is defined as\n\n$$\n\\boxed{\\;w[n]\\;=\\;\\sum_{k=0}^{K} a_k\\cos\\!\\left(k\\,\\theta_n\\right)\\;}\\qquad\\text{for}\\;n=0,1,\\dots ,L-1\n$$\nwhere the phase variable $\\theta_n$ depends on the chosen convention:\n\u2022 **periodic window** (used together with an FFT): sample $L+1$ equally\u2013spaced points from $-\\pi$ to $\\pi$ (inclusive) and discard the last value.  \n\u2022 **symmetric window** (used in FIR filter design): sample exactly $L$ equally\u2013spaced points from $-\\pi$ to $\\pi$.\n\nWrite a function that, given the window length, the list of coefficients and the `symmetric` flag, returns the corresponding generalized cosine window rounded to four decimal places.\n\nIf `symmetric` is `False`, build the *periodic* window; otherwise build the *symmetric* version.\n# Your code should start with:\n```python\nimport numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll values must be rounded to the nearest 4th decimal and returned inside a Python list.\n"}
{"task_id": 532, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Count Trainable Parameters in a Fully-Connected Network\n# Description:\nWhen designing a fully-connected (dense) neural network the bulk of the memory footprint comes from the trainable parameters \u2013 the weights that connect every pair of neurons in two consecutive layers and the bias attached to every neuron in the next layer.\n\nFor two consecutive layers with $n_{in}$ and $n_{out}$ neurons, respectively, the parameter count is\n\n    weights  = n_in \\times n_out\n    biases   = n_out\n\nThe network\u2019s total parameter count is the sum of these values for every adjacent layer pair.\n\nWrite a function that receives a list of integers, **layers**, that contains the sizes of all layers in order (input layer first, output layer last) and returns the total number of trainable parameters.  \nIf **layers** contains fewer than two elements, no trainable parameters exist and the function must return 0.\n# Your code should start with:\n```python\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nReturn a single non-negative integer.\n"}
{"task_id": 533, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Likelihood Function\n# Description:\nWrite a Python function that returns the value of the probability\u2013density function (PDF) of a normal (Gaussian) distribution at one or several points.\n\nThe PDF of a normal distribution with mean \u00b5 and standard deviation \u03c3 is given by\n\n            f(x; \u00b5, \u03c3) = 1 / (\u03c3\u221a(2\u03c0)) \u00b7 exp(\u2212(x \u2212 \u00b5)\u00b2 / (2\u03c3\u00b2)).\n\nThe function must\n1. accept **x**, **mean** (\u00b5) and **sigma** (\u03c3) as positional arguments;\n2. work whether **x** is a single number (int or float) or a one-dimensional list/NumPy array of numbers;\n3. return the PDF value(s) rounded to **four** decimal places;\n4. when **x** is scalar, return a single float; otherwise return a Python list with the same ordering as the input points.\n\nIf \u03c3\u22640 the mathematical expression is undefined, but for this task you may assume the caller always supplies \u03c3>0.\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound every value to the nearest 4th decimal. For list/array inputs return a Python list via NumPy\u2019s tolist() method.\n"}
{"task_id": 534, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Element-wise Sigmoid Activation\n# Description:\nThe logistic sigmoid function is one of the most frequently used activation functions in neural-network models.  Given a real-valued input $z$, the sigmoid function is defined as\n\n$$\\sigma(z)=\\frac{1}{1+e^{-z}}.$$\n\nWrite a Python function that computes the sigmoid activation **element-wise** for a scalar, a 1-D list/NumPy array, or a 2-D list/NumPy array.  The function must:\n\n1. Work for ordinary Python scalars (`int` or `float`) as well as for nested Python lists and NumPy arrays.\n2. Preserve the original shape of the input.\n3. Round every result to **4 decimal places**.\n4. For non-scalar inputs return a Python list produced with NumPy\u2019s `tolist()` method; for scalar inputs return a Python `float`.\n\nYou may use only the standard library and **NumPy**.\n# Your code should start with:\n```python\nimport numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to the nearest 4th decimal place.\nReturn a Python float for scalar input, otherwise return a Python list (use `.tolist()`).\n"}
{"task_id": 536, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Linear Regression via Normal Equation and Gradient Descent\n# Description:\nImplement linear regression from scratch without relying on any third-party ML library. The function must support two training strategies: (1) the closed-form Normal Equation and (2) batch Gradient Descent (BGD).\n\nGiven a training feature matrix X (shape m\u00d7n) and a target vector y (length m), the function has to\n1. prepend a column of ones to X in order to learn the bias term,\n2. learn the parameter vector \u03b8 either with the Normal Equation or with BGD according to the user-supplied argument method,\n3. predict the target values for a second matrix X_test, and\n4. return the predictions rounded to four decimal digits.\n\nFor BGD the learning rate \u03b1 and the number of iterations num_iter are also provided. Initialise \u03b8 with zeros and update it according to\n    \u03b8 \u2190 \u03b8 \u2212 \u03b1/m \u00b7 X\u1d40(X\u03b8 \u2212 y).\n\nIf method == \"normal\" simply use the closed-form solution \u03b8 = (X\u1d40X)\u207b\u00b9X\u1d40y. You may assume X\u1d40X is always invertible for the test data.\n\nThe function must be named linear_regression and must not use any class, try/except, or external ML library.\n# Your code should start with:\n```python\nimport numpy as np\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nAll returned numbers must be rounded to the nearest 4th decimal using numpy.round(x, 4).\n"}
{"task_id": 537, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Naive Bayes Classifier from Scratch\n# Description:\nImplement a simple Gaussian Naive Bayes classifier from scratch. The function must\\n1. Learn the parameters (mean and standard deviation) of each feature for every class using the training data.\\n2. Compute class priors as the relative frequency of each class in the training set.\\n3. For every sample in `X_test`, calculate the posterior probability of the two classes under the Naive Bayes independence assumption and a Gaussian likelihood model.  \n   The likelihood of observing feature value $x$ given class $c$ is  \n   $$\\mathcal N(x\\mid\\mu_{c},\\sigma_{c}^2)=\\frac{1}{\\sqrt{2\\pi}\\,\\sigma_{c}}\\exp\\Bigl(\\!-\\,\\frac{(x-\\mu_{c})^2}{2\\sigma_{c}^2}\\Bigr).$$  \n4. Predict the label with the larger posterior probability for each test sample.  \n5. To avoid division by zero, add a very small constant $\\varepsilon=10^{-9}$ to every standard deviation.  \nThe function must return a Python list of integers where each element is either 0 or 1.\n# Your code should start with:\n```python\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers (0 or 1) with the same length as `X_test`.\n"}
{"task_id": 539, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross-Entropy Cost\n# Description:\nIn binary-classification neural networks the last layer usually outputs a vector A\u1d38 of probabilities (values in the open interval (0,1)).  \nGiven the ground-truth label vector Y (0 or 1 for every sample) the **binary cross-entropy** (also called log-loss) is defined as  \n\n               J = \u2212 1\u2044m \u00b7 \u03a3 [ y\u00b7ln(a) + (1\u2212y)\u00b7ln(1\u2212a) ]\n\nwhere m is the number of training examples, a\u2208A\u1d38 and y\u2208Y.  \nWrite a function that implements this formula.\nThe function must:\n\u2022 accept two NumPy arrays AL and Y of identical shape (1,m) or (m,) holding the model probabilities and true labels;\n\u2022 return the scalar cost as a built-in Python float, not as a NumPy array;\n\u2022 internally clip the probabilities to the range [1 \u00d7 10\u207b\u00b9\u2075, 1 \u2212 1 \u00d7 10\u207b\u00b9\u2075] before taking the logarithm to avoid numerical overflow.\n# Your code should start with:\n```python\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"TODO: Write the implementation.\"\"\"\n```\n# Output Constraints:\nReturn a plain Python float rounded to 4 decimal places when printed (internal precision can be higher).\n"}
{"task_id": 540, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Sigmoid Derivative\n# Description:\nIn neural networks the sigmoid activation function is defined as:\n\n\u03c3(z) = 1 / (1 + e^(\u2212z))\n\nIts derivative, which is frequently required during back-propagation, can be expressed very compactly in terms of \u03c3(z) itself:\n\n\u03c3\u2032(z) = \u03c3(z) \u00b7 (1 \u2212 \u03c3(z))\n\nWrite a Python function that receives a NumPy array Z (any shape) and returns the element-wise derivative of the sigmoid function, rounded to four decimal places.  The returned value must keep the same shape as the input but has to be converted to a plain Python list using NumPy\u2019s `tolist()` method.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nMake sure all results are rounded to the nearest 4th decimal and returned as a Python list using the ndarray.tolist() method.\n"}
{"task_id": 541, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Cross Entropy Input Gradient\n# Description:\nIn a standard Generative Adversarial Network (GAN) the discriminator is trained with the Binary Cross-Entropy (BCE) loss.  During the generator\u2019s update step we need the gradient of this loss **with respect to the discriminator\u2019s inputs (logits)** so that the gradient can be passed further back through the generator.\n\nFor BCE loss the gradient w.r.t. each individual logit \\(z\\) (the value **before** the sigmoid) turns out to be a very simple closed-form expression:\n\n\\[\\n\\frac{\\partial\\;\\text{BCE}(y, \\hat y)}{\\partial z}= \\hat y - y,\\n\\]\n\nwhere\n* \\(y\\)        \u2013 the ground-truth label (0 or 1)\n* \\(\\hat y\\) \u2013 the predicted probability after the sigmoid ( \\(\\hat y = \\sigma(z)\\) ).\n\nWrite a function that implements this formula for arbitrary-shaped inputs (scalars, 1-D or 2-D arrays).  The function must:\n1. Accept the true labels `y` and the predicted probabilities `y_hat` (both list-like or NumPy arrays with identical shape).\n2. Compute the element-wise gradient `y_hat \u2013 y`.\n3. Round every entry of the gradient to **4 decimal places**.\n4. Return the result as a regular Python list (use `numpy.ndarray.tolist()`).\n# Your code should start with:\n```python\nimport numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nRound every element to the nearest 4th decimal and return a Python list (use ndarray.tolist()).\n"}
{"task_id": 542, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Implement a Single-Step RMSProp Optimiser\n# Description:\nImplement a single optimization step of the RMSProp algorithm.\n\nRMSProp is an adaptive learning-rate method that maintains an exponentially decaying average of past squared gradients and uses this information to scale the current gradient before performing the parameter update.\n\nFor a parameter vector (or matrix, tensor, \u2026) $\\theta$ and its gradient $g$ the running average $s$ and the update rule are  \n$s \\;\\leftarrow\\; \\beta\\,s + (1-\\beta)\\,g^{2}$  \n$\\theta \\;\\leftarrow\\; \\theta - \\alpha\\,\\dfrac{g}{\\sqrt{s}+\\varepsilon}$\n\nWrite a function that performs this update for a list of parameter arrays.  If the running averages list `s` is not provided (or is empty/`None`) it must be created internally and initialised with zeros having the same shapes as the corresponding gradients.\n\nReturn the tuple `(new_params, new_s)` where\n\u2022 `new_params` is a list of NumPy arrays containing the updated parameters rounded to **6** decimal places;  \n\u2022 `new_s` is the list of the updated running averages.\n\nThe function must work for scalars, vectors, matrices or higher-rank tensors and for an arbitrary number of parameter tensors.\n# Your code should start with:\n```python\nimport numpy as np\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"TODO: implement RMSProp optimisation step.\"\"\"\n```\n# Output Constraints:\nAll updated parameters must be rounded to the nearest 6th decimal place (use `np.round(x, 6)`). The running-average tensors `s` need **not** be rounded.\n"}
{"task_id": 543, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gini Impurity of a Label List\n# Description:\nThe Gini index (also called Gini impurity) is a measure that indicates how often a randomly chosen element from the set would be mis-classified if it was randomly labeled according to the class distribution in the set.  \n\nWrite a function that receives a list of class labels and returns the Gini index of this list.\n\nFormula  \nLet $D$ be a data set containing $N$ samples that fall into $m$ different classes.  \nIf $p_i$ is the proportion of samples that belong to class $i$ ($i = 1,\\dots ,m$), the Gini index of $D$ is defined as\n\n$$\n\\text{Gini}(D)=1-\\sum_{i=1}^{m} p_i^2.\n$$\n\nTask requirements\n1. When the input list is empty, return **0.0**.  \n2. Round the final result to **4 decimal places**.  \n3. Only the standard library is allowed.\n# Your code should start with:\n```python\nfrom collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nThe returned float must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 544, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Binary Threshold Split of a Data Set\n# Description:\nWrite a Python function that partitions a tabular data set into two subsets using a single \u201cgreater-than-or-equal\u201d test, exactly the way many decision-tree algorithms split data before creating their child nodes.\n\nYou are given:\n1. data \u2013 a list of samples.  Each sample is itself a list (or tuple) representing the feature values of that sample.\n2. fea \u2013 an integer index pointing to the feature (column) that will be examined.\n3. value \u2013 the numeric threshold that decides on which side of the split an individual sample belongs.\n\nThe task is to return **two lists** `(set1, set2)` where\n\u2022 `set1` contains every sample whose value in column `fea` is **greater than or equal to** `value`.\n\u2022 `set2` contains every remaining sample (those with a value **strictly smaller** than `value`).\n\nAdditional requirements\n\u2022 The order of samples inside each output list must follow the order in which they appeared in the original data.\n\u2022 The original `data` list must not be modified.\n\u2022 If `data` is empty, return two empty lists.\n# Your code should start with:\n```python\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple `(set1, set2)` where both elements are lists of samples that preserve the original ordering.\n"}
{"task_id": 545, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decision-Tree Statistics\n# Description:\nYou are given the root of a binary decision tree.  Each node in the tree is created from the class shown below\n\n```\nclass node:\n    \"\"\"Tree node used for decision-tree structures.\n    \n    Attributes\n    ----------\n    fea : int\n        Index of the feature used for splitting (-1 for a leaf).\n    value : Any\n        Split value used at this node (unused for a leaf).\n    results : Any | None\n        Label (or label distribution) for a leaf node.  A non-None value\n        indicates that the node is a **leaf**.\n    right : node | None\n        Right-hand child.\n    left  : node | None\n        Left-hand child.\n    \"\"\"\n    def __init__(self, fea=-1, value=None, results=None, right=None, left=None):\n        self.fea = fea\n        self.value = value\n        self.results = results\n        self.right = right\n        self.left = left\n```\n\nImplement a function `tree_stats` that returns two simple statistics about the tree:\n\n1. **leaf_count** \u2013 the total number of leaf nodes (nodes whose `results` attribute is *not* `None`).\n2. **max_depth** \u2013 the maximum depth of the tree.  A single root node has depth `1`; an empty tree (i.e. `root is None`) has depth `0`.\n\nThe function must return a tuple `(leaf_count, max_depth)`.\n\nConstraints\n\u2022 The tree can be empty (`root is None`).\n\u2022 The tree may be highly unbalanced.\n\u2022 Both statistics must be computed using a single recursive traversal (i.e. do not perform two separate full traversals).\n# Your code should start with:\n```python\ndef tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    pass\n```\n"}
{"task_id": 546, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: CART Decision Tree Construction\n# Description:\nImplement the CART (Classification And Regression Tree) induction algorithm for classification tasks that use the Gini impurity as the splitting criterion.\n\nYou must write a function `build_tree` that receives a training set represented as a list of samples.  Each sample itself is a list in which\n\u2022 the first *n-1* elements are feature values (categorical or numerical \u2013 they will always be compared by simple equality) and\n\u2022 the last element is the class label.\n\nThe function must recursively build a binary decision tree:\n1.  Compute the current node\u2019s Gini impurity.\n2.  For every feature index and every **unique** value that feature takes in the current subset, try to split the data into two subsets:  \n   \u2013 **left**  \u2013 all samples whose value at that feature equals the split value  \n   \u2013 **right** \u2013 the remaining samples.  \n   Ignore splits that leave one subset empty.\n3.  Select the split that maximises the impurity reduction (\"Gini gain\").  In case of ties choose the split that appears first when   \n   \u2013 iterating over feature indices in increasing order and   \n   \u2013 iterating over the sorted list of that feature\u2019s unique values.\n4.  If no split yields a **positive** gain, create a leaf whose label is the majority class of the current subset (in case of a tie, the class that appears first in the data wins).\n5.  Otherwise create an internal node and recurse on the two subsets.\n\nTree representation\n\u2022 A **leaf** is a dictionary `{\"label\": <class_label>}`.  \n\u2022 An **internal** node is a dictionary having the keys  \n  \u2013 `\"feature\"`  \u2013 index of the feature used for the split,  \n  \u2013 `\"value\"`    \u2013 value of that feature that defines the left branch,  \n  \u2013 `\"left\"`     \u2013 subtree for samples **equal** to `value`,  \n  \u2013 `\"right\"`    \u2013 subtree for samples **not equal** to `value`.\n\nReturn the root of this nested\u2013dictionary tree.  If the input list is empty return the empty dictionary `{}`.\n\nExample\nInput:\n    data = [[1, \"Yes\"], [1, \"Yes\"], [0, \"No\"], [0, \"No\"]]\n\nOutput:\n    {\"feature\": 0,\n     \"value\": 0,\n     \"left\":  {\"label\": \"No\"},\n     \"right\": {\"label\": \"Yes\"}}\n\nReasoning:\nThe original Gini impurity is 0.5.  Splitting on feature 0 with value 0 separates the samples into two pure subsets, lowering the weighted impurity to 0 and giving the largest gain (0.5).  Both subsets are pure, therefore both become leaves labelled \"No\" and \"Yes\" respectively.\n# Your code should start with:\n```python\nfrom collections import Counter\nfrom collections import Counter\nfrom typing import Any, Dict, List\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\n\n    The *data* argument is a list where every inner list represents a training\n    sample.  All but the last elements of each sample are feature values; the\n    last element is the class label.\n\n    The function should return the root of the generated tree expressed as a\n    nested dictionary:\n        Leaf   -> {\"label\": class_label}\n        Branch -> {\"feature\": index,\n                    \"value\":   split_value,\n                    \"left\":    <subtree for samples with feature == value>,\n                    \"right\":   <subtree for samples with feature != value>}\n\n    If *data* is empty return the empty dictionary.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n"}
{"task_id": 547, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hidden Markov Model \u2013 Forward Probability (Single Step)\n# Description:\nIn a Hidden Markov Model (HMM) the *forward probability* \\(\\alpha_t(i)\\) represents the probability of being in state \\(i\\) **after having produced the first** \\(t+1\\) **observations**.  \n\nMore formally, given  \n\u2022 a state\u2013transition matrix \\(A\\in\\mathbb R^{n\\times n}\\), where \\(A_{ij}=P(q_{t+1}=j\\mid q_t=i)\\)  \n\u2022 an emission matrix \\(B\\in\\mathbb R^{n\\times m}\\), where \\(B_{ik}=P(o_t=k\\mid q_t=i)\\)  \n\u2022 an initial state distribution \\(\\mathbf S\\in\\mathbb R^{n}\\), where \\(S_i=P(q_0=i)\\)  \n\u2022 an observation sequence **obs** (each element is an integer index of the emitted symbol)  \n\nyou must compute the vector \\(\\boldsymbol\\alpha_t\\) for a given non-negative integer *t* (0-based).  \n\nThe recurrence relation is  \n\\[ \\alpha_0 = \\mathbf S\\odot B_{:,\\;obs_0},\\qquad \\alpha_{t}=\\bigl(\\alpha_{t-1}^{\\top}A\\bigr)\\odot B_{:,\\;obs_t}\\; (t\\ge1) \\]  \nwhere \\(\\odot\\) denotes element-wise multiplication.\n\nImplement a function that returns \\(\\boldsymbol\\alpha_t\\) as a Python list rounded to **4 decimal places**.  \nIf *t* is outside the range *0 \u2026 len(obs) \u2212 1* or the matrix dimensions are inconsistent, return **-1**.\n# Your code should start with:\n```python\nimport numpy as np\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list whose length equals the number of states.  All numbers must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 548, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Xi Matrix in Hidden Markov Models\n# Description:\nIn a discrete Hidden Markov Model (HMM) the quantity\n\n    \u03be_t(i,j)=P(q_t=i,q_{t+1}=j | O,\u03bb)\n\nis the probability of being in state i at time t and in state j at time t+1,\nconditioned on the whole observation sequence O and the model parameters \u03bb=(A,B,\u03c0).\nIt plays a central role in the Baum-Welch (EM) learning algorithm.\n\nWrite a function that\n    \u2022 receives the three HMM parameter matrices A (state\u2013transition),\n      B (emission) and \u03c0 (initial state distribution),\n    \u2022 receives an observation sequence encoded as a list of integers and a time\n      index t (0\u2264t<|O|\u22121),\n    \u2022 returns the \u03be matrix for that single time step t, rounded to 4 decimals.\n\nFor invalid indices (t<0 or t\u2265|O|\u22121) return **\u22121**.\n\nThe model is assumed to be fully connected (all probabilities \u22650 and rows of A,\nB and \u03c0 each sum to 1).\n\nExample\n-------\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\n\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1]]\n\n\u03c0 = [0.6, 0.4]\n\nobs = [0, 1, 2]   # three observations\n\nt = 1\n\ncompute_xi(A, B, \u03c0, obs, t) \u279c  [[0.5748, 0.0493],\n                                 [0.2892, 0.0868]]\n\nReasoning (sketch)\n------------------\n1. Forward pass (\u03b1):\n   \u03b1_0 = \u03c0 * B[:,obs[0]] = [0.06, 0.24]\n   \u03b1_1 = (\u03b1_0 A) * B[:,obs[1]] = [0.0552, 0.0486]\n2. Backward pass (\u03b2):\n   \u03b2_2 = [1,1]\n3. \u03be_1(i,j)\u221d\u03b1_1(i)\u00b7A[i,j]\u00b7B[j,obs[2]]\u00b7\u03b2_2(j)\n   After normalisation and rounding the matrix shown above is obtained.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery entry must be rounded to the nearest 4th decimal using numpy.round(..., 4). Return a regular Python list of lists.\n"}
{"task_id": 549, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Squared Euclidean Distance\n# Description:\nImplement a function that computes the **squared Euclidean distance** between two numerical vectors.  \nGiven two one-dimensional vectors (lists or NumPy arrays) **x** and **y** of equal length, the squared Euclidean distance is defined as  \n$$\\lVert x-y \\rVert^2 = \\sum_{i=1}^{n} (x_i-y_i)^2.$$\n\nSpecifications\n1. If the two vectors are not of the same length, the function must return **-1**.\n2. The result must be **rounded to four decimal places**.\n3. The function may accept lists, tuples, or NumPy arrays; internally convert them to NumPy arrays for convenience.\n# Your code should start with:\n```python\nimport numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python `float` rounded to the nearest 4th decimal.\n"}
{"task_id": 551, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Best Gini Split for a Categorical CART Node\n# Description:\nYou are given a small categorical data set stored in two NumPy arrays:\n\u2022 X \u2013 a 2-D array of shape (n_samples, n_features) that contains the feature values (numbers or strings).  \n\u2022 y \u2013 a 1-D array of length n_samples that contains the class labels.\n\nFor every possible split of the form\n    X[:, feature_index] == split_value\nwe create two subsets:\n    left  \u2013 samples that satisfy the equality,\n    right \u2013 the remaining samples.\n\nThe quality of a split is measured with the weighted Gini impurity\n    G(split) = |left|/N * Gini(left) + |right|/N * Gini(right) ,\nwhere N is the total number of samples and\n    Gini(S) = 1 \u2212 \u03a3_c (p_c)^2 ,   p_c = proportion of class c in set S.\n\nImplement a function best_gini_split that\n1. Searches through **all** possible (feature_index, split_value) pairs.\n2. Finds the split that minimises the weighted Gini impurity.\n3. Returns a tuple (best_feature, best_value, best_gini).\n4. If the best split does **not** reduce the impurity by at least *epsilon* (default 1 e-3) compared with the impurity of the parent node, or if no valid split exists, return (-1, None, parent_gini).\n\nNotes\n\u2022 Only equality (==) tests are considered, exactly as used in a typical CART implementation for categorical attributes.\n\u2022 The function must work with numerical as well as string (object) data stored inside the NumPy array.\n\u2022 Do *not* use any third-party libraries such as scikit-learn \u2013 only NumPy and the Python standard library are allowed.\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import Counter\nfrom collections import Counter\nimport numpy as np\n\ndef best_gini_split(X: np.ndarray,\n                    y: np.ndarray,\n                    epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple (feature_index, split_value, gini_value).  \n\u2022 feature_index must be -1 when no valid split is found.  \n\u2022 gini_value must be returned as a native Python float (not a NumPy scalar).\n"}
{"task_id": 552, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Hidden Markov Model \u2013 Posterior State Distribution (\u03b3)\n# Description:\nIn a discrete Hidden Markov Model (HMM) the value  \n\u03b3\u209c(i)=P(q\u209c=s\u1d62 | O, \u03bb)  \nrepresents the posterior probability of being in state s\u1d62 at time step t after the complete observation sequence O has been seen (\u03bb denotes the HMM parameters).  \n\nDevelop a function that, for a given HMM (initial distribution, transition matrix and emission matrix), an observation sequence and a time index t, returns the vector \u03b3\u209c.  \n\nThe function must \u2013\n1. compute the forward probabilities \u03b1 (probability of the partial observation sequence up to t and state i at t),\n2. compute the backward probabilities \u03b2 (probability of the remaining observation sequence from t+1 given state i at t),\n3. combine them to obtain \u03b3\u209c(i)=\u03b1\u209c(i)\u03b2\u209c(i)/\u2211\u2c7c\u03b1\u209c(j)\u03b2\u209c(j),\n4. round every component of \u03b3\u209c to four decimal places and return the result as a Python list.\n\nIf t lies outside the range [0, len(observations) \u2212 1], return an empty list.\n# Your code should start with:\n```python\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Write your code below\n    pass\n```\n# Output Constraints:\nRound every value to the nearest 4th decimal.\n"}
{"task_id": 553, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Logistic Regression via Batch Gradient Descent\n# Description:\nImplement a very small-scale Logistic Regression (LR) learner using batch gradient descent (BGD).\n\nThe function receives a training set `(X_train, y_train)` and a test set `X_test`.\n\u2022  `X_train` \u2013 2-D NumPy array of shape `(n_samples, n_features)` containing the training patterns.\n\u2022  `y_train` \u2013 1-D NumPy array of binary class labels (0 or 1) having length `n_samples`.\n\u2022  `X_test`  \u2013 2-D NumPy array whose rows have the same number of features as `X_train`.\n\u2022  Optional hyper-parameters `alpha` (learning rate) and `max_iter` (maximum number of gradient steps) may be supplied.\n\nYour task is to learn the weight vector (including a bias term) that minimises the log-loss of the LR model using BGD and then use these weights to classify every row in `X_test`.\n\nAlgorithmic details\n1. Add a bias column of ones to all design matrices so that a separate bias weight is learned.\n2. Initialise the weight vector with zeros.\n3. Repeat `max_iter` times\n   w \u2190 w + \u03b1 \u00b7 X\u1d40 (y \u2212 \u03c3(Xw)) / n_samples ,  where \u03c3(z)=1/(1+e^(\u2212z)).\n4. After training, compute the probability for each test example and output **1** if the probability \u2265 0.5, otherwise **0**.\n\nReturn the predictions as a standard Python list of integers.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    # ========================  Write your code below  ========================\n    pass\n    # =======================================================================\n```\n# Output Constraints:\nReturn a standard Python list containing only 0 and 1 (no NumPy types).\n"}
{"task_id": 555, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Density-Based Spatial Clustering (DBSCAN)\n# Description:\nImplement the Density-Based Spatial Clustering of Applications with Noise (DBSCAN) algorithm from scratch.  \nThe function must group points that are densely packed together (points with many nearby neighbors) and mark as *noise* the points that lie alone in low-density regions.  \nFor a point to start (or expand) a cluster it has to be a *core* point \u2013 i.e. the number of points (including the point itself) inside an \\(\\varepsilon\\)-radius neighborhood is at least *min_samples*.  \nTwo points are considered to belong to the same cluster when they are density-reachable, meaning a chain of neighboring **core** points exists that links them.  \nYour task is to:\n1. Compute every pairwise Euclidean distance.\n2. Build the neighborhood list for each sample using the supplied \\(\\varepsilon\\).\n3. Identify *core* points (|neighborhood| \u2265 *min_samples*).\n4. Starting with the first unlabeled core point, expand a cluster with a breadth-first search (BFS):\n   \u2022 label the core point,\n   \u2022 put it into a queue,\n   \u2022 pop points from the queue and add every unlabeled neighbor to the current cluster; whenever a neighbor is itself a core point push it into the queue so the cluster can keep growing.\n5. After all core points are visited, every still-unlabeled point is *noise* and must receive the label \u22121.\n\nThe routine must return a list whose *i-th* value is the cluster id of the *i-th* sample (clusters are numbered 1,2,3,\u2026 in the order they are discovered; noise = \u22121).\n# Your code should start with:\n```python\nimport numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers where cluster ids start from 1; noise points must be labelled -1.\n"}
{"task_id": 559, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Collect Leaf Values of a Binary Tree\n# Description:\nYou are given a binary tree whose nodes are instances of the class `Node`.\n\n```\nclass Node:\n    def __init__(self, val=None, right=None, left=None):\n        self.val = val      # Only **leaf** nodes store a value\n        self.right = right  # Right child (may be None)\n        self.left = left    # Left  child (may be None)\n```\n\nThe tree follows one special rule: **only leaf nodes (nodes that have no children) contain a value in the `val` field**.  Every internal node has `val == None`.\n\nWrite a function `leaf_values` that collects **all** leaf\u2010node values from left-to-right and returns them as a Python list.\n\nIf the tree is empty (`root is None`) the function must return an empty list `[]`.\n\nExample construction\n```\n#      \u25cf\n#     / \\\n#    1   \u25cf\n#       / \\\n#      2   3\nroot = Node(\n    left=Node(val=1),\n    right=Node(\n        left=Node(val=2),\n        right=Node(val=3)\n    )\n)\n```\nCalling `leaf_values(root)` on the above tree should return `[1, 2, 3]`.\n# Your code should start with:\n```python\nfrom typing import List, Optional\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int] = None, right: 'Optional[Node]' = None,\n                 left: 'Optional[Node]' = None):\n        self.val = val\n        self.right = right\n        self.left = left\n\n\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n    # TODO: Implement the function\n    pass\n```\n# Output Constraints:\nReturn a Python list containing the values of all leaf nodes in **left-to-right order**.\n"}
{"task_id": 560, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: k-Nearest Neighbour Search with a k-d Tree\n# Description:\nYou are given a set of points in an arbitrary \u2013 but fixed \u2013 number of dimensions.  Your task is to build a balanced k-d tree for those points and use it to answer one k-nearest-neighbour (k-NN) query.\n\nImplement a function `k_nearest_neighbors(points, query, k)` that:\n1.  Builds a balanced k-d tree **without employing any classes or other OOP features**.  A tree node must be represented by a plain `dict` that stores\n    \u2022 the index of the point stored in the node,\n    \u2022 the splitting axis,\n    \u2022 references to the *left* and *right* sub-trees (which can be `None`).\n2.  Searches the tree for the `k` points that are closest to the `query` point in Euclidean distance (squared distance is sufficient for all comparisons).\n3.  Returns **only the indices** of these `k` points, sorted\n    \u2022 by ascending distance to the query and, in case of a tie,\n    \u2022 by ascending index.\n\nIf `k` is larger than the number of points, return the indices of **all** points in the above order.\n\nThe algorithm must work for any dimensionality \u2265 1.\n\nExample\n-------\nInput\n```\npoints = [[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]]\nquery  = [9, 2]\nk      = 2\n```\nOutput\n```\n[4, 5]\n```\nReasoning\n---------\nSquared distances to the query point `[9, 2]` are\n* point 4 `[8,1]`  \u2192  2\n* point 5 `[7,2]`  \u2192  4\n* point 2 `[9,6]`  \u2192 16\n* point 1 `[5,4]`  \u2192 20\n* points 0, 3      \u2192 50\nThe two smallest distances correspond to indices 4 and 5, hence the result `[4, 5]`.\n# Your code should start with:\n```python\nimport math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a `list[int]` containing exactly `k` indices (or all indices if `k` exceeds the number of points) sorted by ascending distance to the query, breaking ties with the smaller index.\n"}
{"task_id": 561, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Gaussian Mixture Model via Expectation\u2013Maximization\n# Description:\nImplement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\nGiven a 2-D NumPy array containing N samples with D features and an integer K (number of Gaussian components), write a function that:\n1. Randomly initializes the parameters of K Gaussian components (mixture weights, means, full covariance matrices).\n2. Repeatedly performs the Expectation (E) and Maximization (M) steps until either the maximum number of iterations is reached or the change in mixture weights is smaller than a prescribed tolerance.\n3. After convergence assigns every sample to the component with the largest posterior probability (responsibility).\n4. Makes the output deterministic by sorting the components by the first coordinate of their mean in ascending order and **re-labelling** the cluster indices accordingly (left-most component \u21d2 label 0, next \u21d2 1, \u2026).\n\nReturn a Python list of length N containing the final cluster label of each sample.\n\nIf K = 1, all samples belong to the single component and the function must return a list filled with zeros.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"Your docstring here.\"\"\"\n    pass\n```\n# Output Constraints:\nReturned list must\n\u2022 have the same length as the number of input samples;\n\u2022 contain only the integers 0 \u2026 K\u22121 with no gaps;\n\u2022 be deterministic for identical inputs (the internal component ordering must not influence the external labels).\n"}
{"task_id": 562, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Spectral Clustering\n# Description:\nImplement the Spectral Clustering algorithm without using any third-party machine-learning libraries.  \n\nGiven a set of points in a NumPy array `data` (shape `(N, d)` \u2013 `N` samples, `d` features) and the desired number of clusters `n_cluster`, the function must:  \n1. Build a fully\u2013connected similarity graph using the Gaussian kernel\n   \u2022 pairwise squared distance: $\\|x_i-x_j\\|^2$  \n   \u2022 similarity: $w_{ij}=\\exp(-\\gamma\\,\\|x_i-x_j\\|^2)$  (_`gamma` is a positive float, default 2.0_)  \n2. Construct the un-normalised Laplacian $L=D-W$ where $D$ is the degree diagonal.  \n   If `method=='normalized'`, use the symmetric normalized Laplacian  \n   $L_{sym}=D^{-1/2}LD^{-1/2}$.  \n3. Compute the eigenvectors that correspond to the `n_cluster` smallest eigen-values.  \n   If the normalized variant is chosen, row-normalise the eigenvector matrix.\n4. Run k-means in the eigenvector space to obtain final cluster labels.  \n   \u2022 Use a deterministic k-means that always picks the first `n_cluster` samples as the initial centroids.  \n   \u2022 After convergence, relabel clusters so that the cluster containing the smallest original index gets label 0, the next one 1, etc.  \n5. Return the labels as a Python list of length `N` with integers in `[0, n_cluster-1]`.\n\nIf `n_cluster` is 1 simply return a list of 0s.\n# Your code should start with:\n```python\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a standard Python `list` of integers, no additional formatting.\n"}
{"task_id": 563, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Dual-form Perceptron Learning\n# Description:\nImplement the Dual-form Perceptron learning algorithm.\n\nThe classical (primal) perceptron updates a weight vector **w** directly.  In the dual formulation the algorithm keeps a coefficient (\"alpha\") for every training example and performs the update in the feature\u2013space inner-product only.  When the algorithm converges the weight vector can be recovered as\n\nw = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62\n\nwhere x\u1d62 and y\u1d62 are the feature vector and class label (\u00b11) of the i-th training sample.\n\nTask\n-----\nWrite a function `perceptron_dual_train` that\n1. takes a 2-D NumPy array `X_data` (shape = *N \u00d7 d*) and a 1-D NumPy array `y_data` (length = *N*, containing only \u22121 or 1) plus an optional learning rate `eta` (default 1.0) and an optional `max_iter` (default 1000),\n2. trains a dual-form perceptron exactly as described below,\n3. returns a tuple consisting of the learned weight vector **w** (*list* of floats) and the bias term *b* (float).\n\nAlgorithm (must be followed literally)\n--------------------------------------\n1. Let `alpha = np.zeros(N)`, `b = 0`.\n2. Build the Gram matrix `G` where `G[i, j] = X_data[i]\u00b7X_data[j]`.\n3. Repeat until either\n   \u2022 an entire pass over the training set produces **no** update, **or**\n   \u2022 the number of complete passes reaches `max_iter`.\n   For every sample i (in the given order 0 \u2026 N\u22121):\n   \u2022 compute  g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n   \u2022 if  y\u1d62 ( g + b ) \u2264 0  then\n       \u2013 \u03b1\u1d62 \u2190 \u03b1\u1d62 + \u03b7\n       \u2013 b   \u2190 b + \u03b7 y\u1d62\n4. After finishing the loop, recover the weight vector through\n   w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62\n5. Round every component of **w** and *b* to **4 decimal places** and return them as `(w.tolist(), b)`.\n\nIf the algorithm reaches the iteration limit without converging you should still return the weights obtained so far.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple (w, b) where w is a Python list.  Round every number to 4 decimal places.\n"}
{"task_id": 564, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Decision-Tree Prediction\n# Description:\nYou are given the definition of a very small helper class called `Node` that is typically produced by a decision\u2013tree learning algorithm.  Every `Node` instance can store one of the following pieces of information:\n\u2022 `label` \u2013 an integer index of the feature that has to be inspected in the current sample (internal nodes only).\n\u2022 `x`     \u2013 the value associated with the edge that leads from the parent to this child (classification trees only).\n\u2022 `s`     \u2013 a numerical split-point (regression trees only).\n\u2022 `y`     \u2013 the value kept in the leaf (class label or real number, *already* the prediction).\n\u2022 `child` \u2013 a list that contains all children of the current node (either 2 children for regression, or 1-plus children for classification).\n\nYour task is to write a single function `predict_sample` that, given the **root** of such a tree, a list/tuple of feature values describing one sample, and the string `task_type`, returns the prediction stored in the appropriate leaf.\n\nThe traversal rules are fixed and must be implemented exactly as follows.\n\nClassification tree (`task_type == 'classification'`)\n1. If the current node already stores `y` (i.e., it is a leaf), return that value.\n2. Otherwise, inspect the feature with index `node.label`.\n3. Among the children of the current node choose the first child whose `x` attribute equals the inspected feature value and continue recursively.\n4. If no child matches, **default** to the second child in the list (`node.child[1]`).\n\nRegression tree (`task_type == 'regression'`)\n1. If the current node already stores `y` (leaf), return it.\n2. Otherwise, inspect the feature with index `node.label`.\n3. If the feature value is **less than or equal to** `node.s`, continue with the first child (`node.child[0]`); otherwise continue with the second child (`node.child[1]`).\n\nYou may assume that\n\u2022 the tree is well-formed and every internal node has exactly the number of children required by its type,\n\u2022 `task_type` is either `'classification'` or `'regression'`.\n\nReturn the value found in the reached leaf **unchanged** \u2013 do not perform any rounding or type conversion.\n# Your code should start with:\n```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n```\n# Output Constraints:\nReturn the leaf value exactly as stored in the tree.\n"}
{"task_id": 565, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: ID3 Feature Selection \u2013 Choose the Best Feature for Maximum Information Gain\n# Description:\nImplement a utility function used in the ID3 decision-tree learning algorithm.  \nGiven a data matrix X (instances \u00d7 features) whose values are **discrete non-negative integers starting from 0** and a 1-D label vector y (also non-negative integers starting from 0), the task is to select the feature that maximises the **information gain** with respect to the class label.\n\nInformation gain of a feature A is defined as  \nIG(A)=H(y)\u2212H(y|A)  \nwhere H(y) is the entropy of the label distribution and H(y|A) is the conditional entropy obtained after splitting by the values of A.  \nIf two or more features obtain the same (maximal) information gain, the smallest column index must be returned.\n\nThe function must return a tuple `(best_feature_index, max_information_gain)` where the gain is rounded to **6 decimal places**.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple `(int, float)` where the float (information gain) is rounded to 6 decimal places.\n"}
{"task_id": 566, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Mini Isolation Forest for Outlier Detection\n# Description:\nImplement a very small-scale version of the Isolation Forest algorithm for anomaly detection.\n\nGiven a data matrix **data** (NumPy array of shape *(n_samples, n_features)*), build *n_trees* random isolation trees, compute the average path length for every observation and convert it to an anomaly score\n\n             s(x)=2^{ -(\\bar h(x)/\u03c6)}\n\nwhere \\(\\bar h(x)\\) is the mean path length of *x* over all trees and\n\n             \u03c6 = 2\u00b7ln(n\u22121) \u2212 2\u00b7(n\u22121)/n.\n\nAn object is an outlier when its score is among the largest *\u03b5*\u00b7100 % of all scores. The function must return the (zero-based) indices of the detected outliers, **sorted increasingly**.\n\nThe isolation tree that you must use is a *purely random binary tree* built as follows:\n1. Draw a subsample of *sample_size* distinct rows (when *sample_size \u2265 n_samples* use the complete data).\n2. Recursively split the subsample until either\n   \u2022 the current depth reaches *height_limit = \u2308log\u2082(sample_size)\u2309*  \n   \u2022 or the split contains at most one sample.\n3. A split is performed by choosing a **random feature** and a **random threshold** uniformly inside the interval [min, max] of that feature in the current node.\n\nThe path length of an observation is the number of edges it traverses before it reaches a leaf. When a leaf that contains *n* samples is reached, the path length is corrected by *c(n)*, an approximation of the expected path length of unsuccessful searches in a binary search tree:\n\n             c(1)=0,          c(n)=2\u00b7ln(n\u22121)+0.5772156649\u22122\u00b7(n\u22121)/n for n>1.\n\nBecause the algorithm relies on randomness you must set a global seed (``np.random.seed(42)``) so that the function is perfectly reproducible and the tests are deterministic.\n\nIf *\u03b5 = 0* the function must return an empty list because no object is allowed to be classified as an outlier.\n\nYou are NOT allowed to use any third-party implementation of Isolation Forest \u2013 build the trees and compute the scores exactly as specified above.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list sorted in ascending order.\n"}
{"task_id": 567, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Ensemble Majority Voting\n# Description:\nIn an ensemble such as a Random Forest, every individual decision tree returns its own prediction for each sample.  The final class label for a sample is obtained by **majority voting** over all trees.  \n\nWrite a function that performs this voting.  The function receives a two-dimensional array-like object `predictions` whose\nrows correspond to trees and whose columns correspond to the samples that must be classified.  Each element is the class label predicted by the corresponding tree for the corresponding sample.\n\nYour task is to return a one-dimensional list containing the final label of every sample.  For every column you must:\n1. Count how many times each label appears in that column.\n2. Select the label with the highest count (the _mode_).\n3. In case of a tie, return the **smallest** label.\n\nReturn the result as a Python `list` of `int` values.\n# Your code should start with:\n```python\nimport numpy as np\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nReturn a Python list of integers having length equal to the number of samples (number of columns in the input).\n"}
{"task_id": 568, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Maximum Entropy Classifier with Generalised Iterative Scaling\n# Description:\nImplement a **Maximum Entropy (MaxEnt)** classifier that uses the Generalized Iterative Scaling (GIS) algorithm to learn the weight of every (feature-value, label) pair from categorical training data. Your function must\n\n1. build the empirical distributions that GIS needs,\n2. iteratively update the weight vector until the largest absolute update is smaller than `epsilon` or the number of iterations reaches `n_iter`,\n3. return the predicted label (the one with the highest conditional probability) for every sample in the test set.\n\nA feature is treated as *present* when the column takes on a specific value.  The model\u2019s conditional distribution is\n\nP(y|x) = exp( \u03a3_j w_j\u00b7f_j(x,y) ) / Z(x)\n\nwhere every f_j(x,y) is a binary indicator for one concrete tuple *(feature_index, feature_value, y)*.\n\nYour task is to complete the function `maxent_predict`.  The function takes the training samples `X_train`, training labels `y_train`, the samples to classify `X_test`, and two optimiser hyper-parameters (`epsilon` and `n_iter`).  It must return a list containing the predicted label for every row in `X_test`.\n\nThe implementation must **only** use the standard library together with `numpy` and `math`.\n# Your code should start with:\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Fill in here.\"\"\"\n    pass\n```\n# Output Constraints:\nReturn a `list[int]` whose length equals the number of rows in `X_test`.\n"}
{"task_id": 569, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Document-Frequency Keyword Statistics\n# Description:\nWrite a Python function that analyses a small collection of text documents and produces two results: (1) a list of all distinct words together with the fraction of documents in which each word appears (document-frequency ratio) ordered from the most common to the least common word, and (2) a set that contains only the *k* most common words (where *k* is supplied by the user through the parameter `cut_off`).\n\nEach document is represented by a tuple `(label, words)` where `label` can be ignored by your function and `words` is an **iterable** (list, set, tuple, etc.) of strings. If `cut_off` is `None` the set must contain **all** words. When two words have the same document-frequency ratio, their relative order in the returned list is not important.\n\nAfter counting the documents, divide every count by the total number of documents so that every ratio falls in the closed interval `[0, 1]`. Finally, round every ratio to 4 decimal places.\n\nIf `cut_off` is larger than the number of distinct words simply return all words in the set; if `cut_off` is `0` return an empty set.\n# Your code should start with:\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nAll frequency ratios must be rounded to 4 decimal places.\n"}
{"task_id": 570, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Keyword-Based Bernoulli Naive Bayes Classifier\n# Description:\nImplement a very small-scale Bernoulli Naive Bayes text classifier.\n\nYou are given\n1. a training set ``train_data`` \u2013 a list of tuples ``(label, tokens)``, where ``label`` is the class name (string) and ``tokens`` is a list of the pre-processed words that occur in that document,\n2. a set ``keywords`` \u2013 the only words that should be treated as binary features of the documents, and\n3. a list ``test_samples`` \u2013 each element is again a list of tokens that form one unseen document.\n\nYour task is to write a function ``naive_bayes_predict`` that learns the necessary probabilities from ``train_data`` **without any smoothing** (exactly as shown in the code snippet) and then predicts the most likely label for every document in ``test_samples``.\n\nTraining phase (what you have to reproduce)\n\u2022  For every class ``c`` and every keyword ``w`` count how often ``w`` appears in documents of class ``c``.\n\u2022  Let ``N_c`` be the number of training documents whose class is ``c``.  The conditional probability is\n   ``P(w|c) = count_c(w) / N_c``.\n  If the word never appeared for that class the probability is ``0``.\n\nPrediction phase (Bernoulli model, no priors used)\nFor one unseen document with token set ``T`` the (unnormalised) likelihood for a class ``c`` is\n                \u220f_{w in keywords & w in T} P(w|c)\n        \u00d7       \u220f_{w in keywords & w\u2209T} (1 \u2212 P(w|c))\nThe label with the largest likelihood is returned for that document.  Repeat this for all documents in ``test_samples`` and return the list of predicted labels in the same order.\n\nExample\n---------\nInput\ntrain_data = [\n    ('spam', ['cheap', 'offer']),\n    ('ham',  ['hello', 'friend']),\n    ('spam', ['buy', 'cheap'])\n]\nkeywords     = {'cheap', 'buy', 'hello'}\ntest_samples = [['cheap'], ['hello']]\n\nOutput\n['spam', 'ham']\n\nReasoning\nFor class *spam* (2 documents):\n    P(cheap|spam) = 2/2 = 1,\n    P(buy|spam)   = 1/2 = 0.5,\n    P(hello|spam) = 0/2 = 0.\nFor class *ham*  (1 document):\n    P(cheap|ham)  = 0/1 = 0,\n    P(buy|ham)    = 0/1 = 0,\n    P(hello|ham)  = 1/1 = 1.\n\nDocument ['cheap']  \u2794  likelihood(spam)=1\u00b70.5\u00b71=0.5, likelihood(ham)=0, so label *spam*.\nDocument ['hello'] \u2794  likelihood(spam)=0, likelihood(ham)=1, so label *ham*.\n\nReturn the list ``['spam', 'ham']``.\n# Your code should start with:\n```python\nfrom collections import defaultdict\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nReturn the predicted labels in a python list, preserving the order of the test samples.\n"}
{"task_id": 571, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Compute Linear SVM Parameters from Lagrange Multipliers\n# Description:\nIn the Sequential Minimal Optimization (SMO) algorithm for training a (soft-margin) linear Support Vector Machine, once the optimal Lagrange multipliers $\\alpha\\_i$ have been found, the separating hyper-plane is recovered with the following formulas:\n\n\u2022 Weight vector\u2003$\\displaystyle \\mathbf w = \\sum\\_{i=1}^{n}\\alpha\\_i y\\_i \\mathbf x\\_i = X^\\top(\\boldsymbol\\alpha\\odot\\mathbf y)$\n\n\u2022 Bias\u2003$\\displaystyle b = \\frac{1}{n}\\sum\\_{i=1}^{n}\\bigl(y\\_i-\\mathbf w^{\\top}\\mathbf x\\_i\\bigr)$\n\nwhere $X\\in\\mathbb R^{n\\times d}$ is the training matrix, $\\mathbf y\\in\\{\\!-1,1\\}^n$ the label vector and $\\boldsymbol\\alpha\\in\\mathbb R^{n}$ the multiplier vector.\n\nWrite a function compute_svm_parameters that receives X, y and alpha (all NumPy arrays), computes the weight vector w and the bias term b using the formulas above, rounds every value to 4 decimal places and returns them as a tuple (w_list, b).\n\nIf X contains only one feature, w should still be returned as a one-dimensional Python list.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nRound all elements of the weight vector and the bias term to 4 decimal places.\n"}
{"task_id": 572, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Local Outlier Factor (LOF) Detection\n# Description:\nThe Local Outlier Factor (LOF) algorithm is a popular density\u2013based method used to detect anomalous samples in a data set.  \nA sample is considered an **outlier** if its local density is significantly lower than the density of its neighbours.\n\nYou have to implement the core steps of the algorithm from scratch (do **NOT** rely on `scipy`, `sklearn`, etc.):  \n1. Compute the full pair\u2013wise Euclidean distance matrix.  \n2. For every sample *p* obtain its *k-distance* \u2013 the distance to its *k*-th nearest neighbour \u2013 and the index list of those *k* nearest neighbours *N<sub>k</sub>(p)*.  \n3. Define the reachability distance between two points as  \n   reach-dist<sub>k</sub>(p,q)=max(k-distance(q),\u2006dist(p,q)).  \n4. The Local Reachability Density (LRD) of *p* is  \n   LRD<sub>k</sub>(p)=k / \u03a3<sub>q\u2208N<sub>k</sub>(p)</sub> reach-dist<sub>k</sub>(p,q).  \n5. Finally the Local Outlier Factor is  \n   LOF<sub>k</sub>(p)= (\u03a3<sub>q\u2208N<sub>k</sub>(p)</sub> LRD<sub>k</sub>(q) / k) / LRD<sub>k</sub>(p).  \n\nReturn a tuple consisting of the list of LOF scores rounded to four decimals and the ascending list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n\nConstraints\n\u2022 `1 \u2264 k < n` where `n` is the number of samples.  \n\u2022 Round every LOF score to the **nearest 4th decimal place** using `numpy.round`.\n# Your code should start with:\n```python\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Your task is to implement this function!\"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple: (list_of_scores, list_of_outlier_indices)\nAll scores must be rounded to 4 decimals.\n"}
{"task_id": 573, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Perceptron Learning Algorithm\n# Description:\nImplement the classical Rosenblatt Perceptron learning rule for linearly-separable binary classification.\n\nWrite a pure function that receives a training set `X_train` (array-like of shape `(m, n)`), the corresponding label vector `y_train` (array-like of length `m`, each label must be either `1` or `-1`), the learning-rate `eta`, and the maximum number of training epochs `n_iter`.\n\nThe algorithm must:\n1. Initialise the weight vector **w** with zeros and the bias **b** with zero.\n2. Repeat for at most `n_iter` epochs:\u2003\n   \u2022 set `error_count = 0`\u2003\n   \u2022 for every training pair `(x\u1d62 , y\u1d62)` in the given order:\u2003\n     \u2013 if `y\u1d62 \u00b7 (w\u00b7x\u1d62 + b) \u2264 0`, update the parameters\n       w \u2190 w + \u03b7 \u00b7 y\u1d62 \u00b7 x\u1d62\u2003and\u2003b \u2190 b + \u03b7 \u00b7 y\u1d62\u2003and increment `error_count`.\n   \u2022 append the epoch\u2019s `error_count` to the history list.\n   \u2022 if `error_count == 0` the algorithm has converged \u2013 stop the outer loop early.\n3. Round every component of **w** as well as **b** to the nearest 4\u1d57\u02b0 decimal and return:\n   (weights_as_python_list, bias_as_float, error_count_history_as_list_of_int).\n\nDo NOT use any object-oriented code, external ML libraries, or exception handling.\n\nIf the data are not linearly separable the routine simply finishes after `n_iter` epochs and returns the last parameters.\n# Your code should start with:\n```python\nimport numpy as np\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    # TODO: complete this function\n    pass\n```\n# Output Constraints:\nAll returned real numbers must be rounded to the nearest 4th decimal place.\n"}
{"task_id": 574, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Synthetic 2-D Data Generator\n# Description:\nImplement a function that creates a simple 2-D synthetic data-set that is often used for quick experiments or visualisations. \nFor every class label c\u2208{0,\u2026,m\u22121} the function must generate two groups of points:\n \u2022 n_train training points that will be stored in X_train and whose labels (the value c) will be stored in y_train.\n \u2022 n_val validation points that will be stored in X_val and whose labels (again the value c) will be stored in y_val.\n\nThe coordinates of all points for a given class are sampled independently from the continuous uniform distribution on a square that is 8 units wide and centred 10\u00b7\u230ac/2\u230b+5 on both axes, i.e.\n         base = 10\u00b7\u230ac/2\u230b\n         x ~ U(base+1 , base+9)\n         y ~ U(base+1 , base+9)\n\nIf a seed is supplied the function has to call random.seed(seed) so that two successive calls with the same seed return exactly the same arrays.  All coordinates in the returned arrays must be rounded to **4 decimal places** so that the output is compact and deterministic.\n\nThe function returns a tuple of four NumPy arrays:\n(X_train  (m\u00b7n_train, 2),\n X_val    (m\u00b7n_val  , 2),\n y_train  (m\u00b7n_train,),\n y_val    (m\u00b7n_val  ,))\n# Your code should start with:\n```python\nimport numpy as np\nimport random\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nEvery coordinate must be rounded to 4 decimal places.\n"}
{"task_id": 577, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Synthetic 2-D Data Generator\n# Description:\nYou are given a buggy helper that is supposed to build a tiny synthetic data set for a binary (or multi-class) classification toy problem. Unfortunately, when the validation part of the data is generated the labels are added to the wrong container, leaving Y_val empty.\n\nWrite a function `generate_data` that creates the data completely **from scratch** (do **not** try to patch the original helper) and returns four NumPy arrays\n\n    X_train, X_val, y_train, y_val\n\nwith the following properties:\n\n1.  The data are two-dimensional points. For every class index `i\u2208{0,\u2026,m\u22121}`\n        x  ~  U( ((i//2)+0.1)\u00b710 , ((i//2)+0.9)\u00b710 )\n        y  ~  U( ((i%2)*0.5+0.1)\u00b710 , ((i%2)*0.5+0.9)\u00b710 )\n   are sampled independently.\n2.  The label for class `i` is `(i-0.5)*2`.  For the default `m=2` this gives the usual labels `-1` and `1`.\n3.  Exactly `n_train` samples per class go into the training set and `n_val` samples per class into the validation set.\n4.  All coordinates in the returned arrays must be rounded to **four** decimal places so the results are deterministic and easy to read.\n5.  The function must take an optional argument `seed`; if it is not `None`, call `random.seed(seed)` so that repeated invocations with the same seed yield identical results.\n\nThe function must **not** perform any plotting and must **not** leave `y_val` empty.\n\nExample\n-------\nInput\n    m = 2,\n    n_train = 2,\n    n_val = 1,\n    seed = 42\n\nOutput\n    X_train = [[6.1154, 1.2001],\n               [3.2002, 2.7857],\n               [8.1374, 6.6955],\n               [4.3754, 6.2384]]\n    X_val   = [[6.8918, 6.4136],\n               [2.7488,10.0424]]\n    y_train = [-1, -1, 1, 1]\n    y_val   = [-1,  1]\n\nReasoning\n---------\nWith `seed = 42` the default Python RNG first produces the sequence\n0.6394, 0.0250, 0.2750, 0.2232, \u2026\nFeeding these numbers into the formulas of rule 1 and rounding to four decimals gives the coordinates above.  Labels follow directly from rule 2.\n# Your code should start with:\n```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function must create two NumPy arrays with coordinates and two with\n    labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    # TODO: implement the function\n    pass\n```\n# Output Constraints:\nCoordinates must be rounded to exactly 4 decimal places (use `round(x, 4)`).\n"}
{"task_id": 578, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Generate Consecutive Pairs\n# Description:\nWrite a Python function that returns every consecutive pair (also known as bigrams) that can be formed from the given list `corpus`.  \n\nFormally, for a list `corpus = [w0, w1, w2, \u2026, wn]` you must return a new list  \n`[(w0, w1), (w1, w2), \u2026, (wn-1, wn)]`.  \n\n\u2022 If the length of `corpus` is smaller than 2 the result is an empty list.  \n\u2022 The order of the pairs must follow the original order of elements in `corpus`.  \n\u2022 The function must **return** a list of tuples (not a generator).\n# Your code should start with:\n```python\nfrom typing import List, Tuple\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a standard Python list of tuples. Do not use any external third-party libraries.\n"}
{"task_id": 579, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Deterministic K-Means Clustering\n# Description:\nImplement the classical (Lloyd-style) **K-Means** clustering algorithm from scratch.  \n\nGiven a set of *m* d-dimensional points X and a desired number of clusters *k*, the algorithm must\n\n1. **Initialisation** \u2013 take the **first** *k* points in the order they appear in *X* as the initial cluster centres (this makes the result deterministic and therefore testable).\n2. **Assignment step** \u2013 for every point, compute the Euclidean distance to each centre and assign the point to the nearest one.  In the event of a tie, choose the centre with the smaller index.\n3. **Update step** \u2013 recompute every centre as the arithmetic mean of all points currently assigned to that centre.  If a centre loses all its points, keep it unchanged.\n4. Repeat steps 2-3 until the assignments stop changing or until `max_iters` iterations have been performed.\n\nReturn the final point labels *and* the final cluster centres.\n\nAll coordinates of the returned centres must be rounded to **4 decimal places** so that the results are easily comparable.\n\nYou are **not** allowed to use any implementation that already exists in external libraries such as `scikit-learn`; only base Python and NumPy may be used.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # TODO: write your code here\n    pass\n```\n# Output Constraints:\nEvery coordinate of the returned centres must be rounded to the nearest 4th decimal.\n"}
{"task_id": 581, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Elastic-Net Regression from Scratch\n# Description:\nImplement Elastic-Net regularised linear regression trained with batch gradient descent.\n\nGiven\n\u2022 a 2-D NumPy array X of shape (m, n) that stores m training samples and n features,\n\u2022 a 1-D NumPy array y of length m that stores the corresponding target values,\n\u2022 a learning rate \u03b1,\n\u2022 the number of gradient-descent iterations,\n\u2022 two non-negative hyper-parameters \u03bb\u2081 (the L1 penalty) and \u03bb\u2082 (the L2 penalty),\n\nyou must start with all weights w\u2081 \u2026 w\u2099 and the bias term b equal to 0 and perform \u201citerations\u201d rounds of simultaneous parameter updates.\n\nFor every iteration compute the predictions y\u0302 = X\u00b7w + b and the residual r = y \u2013 y\u0302.  The gradients for every weight j and the bias are\n    \u2202L/\u2202w\u2c7c = \u22122\u00b7X[:, j]\u1d40\u00b7r + \u03bb\u2081\u00b7sign(w\u2c7c) + 2\u00b7\u03bb\u2082\u00b7w\u2c7c\n    \u2202L/\u2202b   = \u22122\u00b7\u03a3 r\nwhere sign(0) is defined as \u22121 so that the first update for each weight uses \u2212\u03bb\u2081 (this reproduces the behaviour in the given code).  Divide every gradient by m (the data set size) to obtain the mean gradient and update the parameters with learning rate \u03b1:\n    w\u2c7c \u2190 w\u2c7c \u2212 \u03b1\u00b7(\u2202L/\u2202w\u2c7c) / m\n    b  \u2190 b  \u2212 \u03b1\u00b7(\u2202L/\u2202b)  / m\n\nAfter all iterations finish return the learned weight vector and the bias rounded to four decimal places.\n\nIf either the learning rate is 0 or the number of iterations is 0 simply return the initial parameters ([0.0 \u2026 0.0], 0.0).\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a tuple (weights, bias) where\n\u2022 weights is a Python list of length n,\n\u2022 every number in the tuple is rounded to 4 decimal places.\n"}
{"task_id": 582, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Undirected k-Nearest-Neighbour Graph\n# Description:\nGiven a set of $n$ points in a Euclidean space, the *$k$-nearest-neighbour (k-NN) graph* is an undirected graph that connects every point to its $k$ closest neighbours.\n\nWrite a Python function that receives a 2-D array-like object **X** (shape $n\\times d$ \u2013 $n$ samples, $d$ features) and returns the **adjacency matrix** $W$ (shape $n\\times n$) of the undirected $k$-NN graph constructed as follows:\n\n1. Let $k=\\min\\left(\\lfloor\\sqrt{n}\\rfloor,\\,10\\right)$.\n2. For every point, compute the Euclidean distance to all other points.\n3. For each point $i$, create a directed edge $i\\rightarrow j$ if $j$ is among the $k$ closest *distinct* points to $i$ (ties are resolved by the index order produced by `numpy.argsort`).\n4. Convert the directed graph into an **undirected** one: an (undirected) edge $(i,j)$ exists if either $i\\rightarrow j$ *or* $j\\rightarrow i$ exists.\n5. Return the adjacency matrix $W$ where\n   \u2022 $W_{ij}=1$ if an undirected edge $(i,j)$ exists, otherwise $W_{ij}=0$.\n\nIf $n=1$ the function must return `[[0]]`.\n\nThe output has to be a standard Python *list of lists* containing only integers 0 or 1.\n\nExample\n-------\nInput\n    X = [[0, 0], [1, 0], [0, 1], [10, 10]]\nOutput\n    [[0, 1, 1, 0],\n     [1, 0, 1, 1],\n     [1, 1, 0, 1],\n     [0, 1, 1, 0]]\nReasoning\n    n = 4 \u2192 k = \u230a\u221a4\u230b = 2.\n    \u2022 Point 0 \u2192 nearest: 1 and 2 \u2192 edges (0,1) and (0,2)\n    \u2022 Point 1 \u2192 nearest: 0 and 2 \u2192 edges (1,0) and (1,2)\n    \u2022 Point 2 \u2192 nearest: 0 and 1 \u2192 edges (2,0) and (2,1)\n    \u2022 Point 3 \u2192 nearest: 1 and 2 \u2192 edges (3,1) and (3,2)\n    After symmetrisation the undirected edges are (0,1),(0,2),(1,2),(1,3),(2,3), which produces the above adjacency matrix.\n# Your code should start with:\n```python\nimport numpy as np\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    # Your code here\n    pass\n```\n# Output Constraints:\nReturn a *list of lists* of integers (0 or 1). Do **not** return a NumPy array.\n"}
{"task_id": 584, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Stacking Initial Atari Frame\n# Description:\nIn many Deep Q-Learning Atari agents the agent receives as input a stack of the last four game frames so it can infer motion. Right after the environment is reset, however, only a single frame is available, so the same frame is simply repeated four times.\n\nWrite a function that imitates this behaviour.  \nGiven one 2-D frame (a matrix of numbers) create the initial 3-D state tensor by copying the frame four times along a new last axis.\n\nThe function must accept the frame as a list of lists (each inner list is a row) and return the stacked state as a list of lists of lists produced with NumPy (i.e. call `.tolist()` before returning).\n# Your code should start with:\n```python\nimport numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn the stacked tensor as a regular Python nested list produced with NumPy\u2019s tolist() method.\n"}
{"task_id": 585, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Replicating the cmp Function\n# Description:\nReplicate the behavior of Python 2\u2019s built-in **cmp** function. The function receives two comparable Python objects and must return an integer that indicates their ordering:\n\u2022  Return **1** if the first argument is greater than the second.\n\u2022  Return **0** if both arguments are equal.\n\u2022  Return **-1** if the first argument is less than the second.\n\nThe implementation has to work with any pair of objects that support the standard comparison operators `<`, `>`, and `==` (e.g., numbers, strings, tuples, lists, etc.).\n# Your code should start with:\n```python\ndef cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    # TODO: implement this function\n    pass\n```\n# Output Constraints:\nThe function must return only one of the three integers: -1, 0, or 1.\n"}
{"task_id": 586, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: LOWESS Single-Point Prediction\n# Description:\nImplement a single-point LOWESS (Locally Weighted Linear Regression) predictor.\n\nGiven a one-dimensional training set (x, y) and a query point x_query, the function should:\n1. Normalise x and y independently to the interval [0,1].\n2. Select the *window* nearest neighbours to x_query (measured on the normalised x axis).\n3. Compute tricubic weights for the chosen neighbours:\n      w_i = (1 \u2212 |d_i / d_max|\u00b3)\u00b3   if |d_i / d_max| \u2264 1,\n      w_i = 0                       otherwise,\n   where d_i is the distance of the i-th neighbour to x_query and d_max is the largest of those distances.\n4. Fit a weighted straight line y = a + b\u00b7x on the selected neighbours (using the weights from step 3).\n5. Predict the normalised y\u0302 at the normalised query point and convert it back to the original scale.\n6. Return the prediction rounded to 4 decimal places.\n\nThe function must also perform basic validation:\n\u2022 |x| must equal |y|.\n\u2022 2 \u2264 window \u2264 |x|.\n\nIf the weighted denominator that determines the slope is zero (this happens e.g. when all selected points share the same x or all weights but one are 0), treat the slope as 0 and return the (weighted) mean of the selected y-values.\n# Your code should start with:\n```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    # TODO: Implement the function following the specification\n    pass\n```\n# Output Constraints:\nReturn a Python float rounded to the nearest 4th decimal place (use numpy.round(value, 4)).\n"}
{"task_id": 587, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Replay Memory Buffer Operations\n# Description:\nIn many reinforcement-learning algorithms the agent keeps a *replay memory* (also called an experience buffer) that stores past transitions so that it can be sampled later when updating the model.  \n\nYour job is to write a single function `manage_replay_memory` that executes a sequence of operations on an initially empty replay-memory buffer and returns the results produced by the operations that have an output.\n\nThe replay memory itself can be implemented as a plain Python list \u2013 **no classes or external libraries besides `random` are allowed**.\n\nSupported operations (each operation is represented as a tuple and the first element determines the command):\n\n1. `('append', transition)` \u2013 store `transition` at the end of the buffer, produces no output.\n2. `('pop',)` \u2013 remove and return the most recently added transition (LIFO order). If the buffer is empty, return `None`.\n3. `('sample', batch_size)` \u2013 return `batch_size` distinct elements chosen uniformly at random from the buffer without removing them. If `batch_size` is larger than the current buffer size, return an empty list `[]`.\n4. `('size',)` \u2013 return the current number of elements in the buffer.\n\nFor **deterministic and automatically testable behaviour**, the function **must call `random.seed(0)` exactly once \u2013 at the beginning of the function**. After that, use `random.sample` to perform sampling.\n\nThe function has to accumulate the outputs generated by any `pop`, `sample`, or `size` command (in the order in which those commands appear) and finally return the list of all collected outputs.\n\nExample\n-------\nInput  :\n    operations = [('append', 1),\n                  ('append', 2),\n                  ('sample', 1),\n                  ('pop',),\n                  ('size',)]\n\nOutput :\n    [[2], 2, 1]\n\nReasoning\n---------\n1. Two elements (1 and 2) are added to the buffer.\n2. `sample` chooses one element. With the internal seed fixed to 0, `random.sample([1, 2], 1)` deterministically returns `[2]`.\n3. `pop` removes and returns the last stored element, which is `2`.\n4. `size` reports that a single element (`1`) is still stored, therefore it returns `1`.\n\nThe list of all outputs produced by the operations is thus `[[2], 2, 1]`.\n# Your code should start with:\n```python\nimport random\nfrom typing import Any, List, Tuple\nimport random\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nThe function must return a Python list that contains the outputs of all operations that generate a result (in their original order). Sampling has to be reproducible \u2013 call `random.seed(0)` once at the beginning of the function.\n"}
{"task_id": 588, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Maximum Depth of a Binary Tree\n# Description:\nYou are provided with a very small helper class called `Node` that can be used to build a simple **binary tree**.  Each `Node` instance stores a data value and has references to its left and right children.\n\nYour task is to complete the function `tree_max_depth` that finds the **maximum depth** of the binary tree rooted at `root`.\n\nDefinition of depth in this task\n1. The depth of the *root* node is **0**.\n2. For any other node, its depth is the depth of its parent plus 1.\n3. The depth of an **empty tree** (i.e. `root is None`) is defined to be **\u22121**.\n\nTherefore the maximum depth of a tree is the largest depth among all its nodes.\n\nYou must *not* rely on the value stored in the `depth` attribute that may or may not be correct.  Instead, compute the depth purely from the tree structure.\n\nReturn the depth as an `int`.\n\nExamples\nExample-1 (single node)\nInput tree:   7\nOutput: 0\nReasoning: The tree contains only the root node whose depth is 0, hence the maximum depth is 0.\n\nExample-2 (balanced)\nInput tree:\n        10\n       /  \\\n      5    20\n          /  \\\n        15    25\nOutput: 2\nReasoning: The deepest nodes (15 and 25) are two edges away from the root, so the maximum depth is 2.\n# Your code should start with:\n```python\nfrom typing import Optional\nfrom typing import Optional\n\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    # TODO: Implement this function\n    pass\n```\n# Output Constraints:\nReturn an integer.  For an empty tree return -1.\n"}
{"task_id": 590, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Single-Pass Minesweeper Logic\n# Description:\nMinesweeper can be (partly) solved by applying a few simple logical rules to the board that is already visible.  \nYou are given two 2-D Python lists of equal size:\n1. **ground** \u2013 a matrix that contains either the integer clue shown on a revealed square (0\u20138) or **np.nan** for every still\u2013hidden square.\n2. **flags** \u2013 a Boolean matrix that is **True** exactly on the coordinates the player already marked as bombs and **False** everywhere else.\n\nWrite a function **minesweeper_step** that performs **one** pass over the board and decides which still-hidden squares can be safely revealed (clicked) and which must be bombs (flagged) according to the following well-known rules (the very same ones used in the code snippet you saw):\n\nFor every revealed square `(r, c)`   (i.e. `not np.isnan(ground[r][c])`) that is **not** itself flagged\n\n\u2022 If its value is `0`  \u2192  every still-hidden and un-flagged neighbour can be revealed.\n\n\u2022 If its value is `8`  \u2192  every still-hidden and un-flagged neighbour must be a bomb and therefore has to be flagged.\n\n\u2022 Otherwise let  \n    `bombs = number of neighbouring squares that are already flagged`  \n    `unexplored = number of neighbouring squares that are still hidden *and* not flagged`\n    \n    \u2013 If `bombs == value`   \u2192  all **unexplored** neighbours can be revealed.  \n    \u2013 Else if `unexplored == value`   \u2192  every **unexplored** neighbour must be a bomb and therefore has to be flagged.\n\nNeighbourhood is the usual 8-connected (up, down, left, right and the four diagonals).  \n\nThe function has to return **two** lists:\n1. `clicks` \u2013 all coordinates that can be safely revealed,  \n2. `new_flags` \u2013 all coordinates that must be flagged.\n\nBoth lists must contain *unique* `(row, column)` tuples and be sorted in ascending lexicographical order so the results can be compared directly.\n\nIf during this pass no square can be decided upon, simply return two empty lists.\n\nExample\n-------\nInput\n```\nimport numpy as np\n\nground = [[1, np.nan],\n          [np.nan, np.nan]]\nflags  = [[False, True],\n          [False, False]]\n```\nOutput\n```\n([(1, 0), (1, 1)], [])\n```\nReasoning\n```\nThe only revealed square is (0,0) with value 1.\nExactly one of its adjacent squares \u2013 namely (0,1) \u2013 is already flagged, so\nbombs == value == 1.  Every other still-hidden and un-flagged neighbour\n((1,0) and (1,1)) can therefore be safely revealed.\n```\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags: list[list[bool]]) -> tuple[list[tuple[int, int]],\n                                                    list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    # TODO: implement\n    pass\n```\n# Output Constraints:\nBoth returned lists must contain unique (row, column) tuples sorted in ascending order.\n"}
{"task_id": 591, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feed-Forward Neural Network Prediction\n# Description:\nYou are given a fully-connected feed-forward neural network whose parameters (i.e. the weight matrices) are already known. Every hidden layer uses the ReLU activation function and the last layer uses a linear (identity) activation, so the network can be employed for regression.  \n\nThe weight matrices are stored in a nested python list with the following convention:\n1. ``weights[L]`` is the weight matrix of layer ``L`` (``L = 0, \u2026 , n_layers-1``).\n2. Each element of ``weights[L]`` represents one neuron and therefore is itself a list containing that neuron\u2019s weights.\n3. The first weight of every neuron is the **bias weight**; the remaining weights are the connection weights coming from the previous layer.\n4. The size of a neuron\u2019s weight list is therefore ``previous_layer_size + 1``.\n\nFor a single input vector ``x`` (which does **not** contain the bias term) you have to compute the network\u2019s output by successively\n\u2022 adding the bias input ``1`` to the current input,\n\u2022 performing a dot product with the corresponding weight matrix, and\n\u2022 applying ReLU to all layers except the last one (the last layer is linear).\n\nReturn the network\u2019s prediction rounded to four decimals.  \nIf the network has exactly one output neuron, return a single ``float``.  \nIf it has more than one output neuron, return a list of ``float`` s in the same order as the neurons appear in the last layer.\n\nYou may **not** modify the given weights in-place and you may **only** use the standard library together with NumPy.\n# Your code should start with:\n```python\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nRound the final numeric result(s) to the nearest 4th decimal before returning.\n"}
{"task_id": 592, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Minesweeper Neighbour Analysis\n# Description:\nIn the game Minesweeper every cell (square) has up to eight neighbours \u2013 the cells that touch it horizontally, vertically or diagonally.  \nGiven two NumPy boolean arrays of identical shape\n\u2022 clicked \u2013 ``True`` if the cell has already been opened (revealed)\n\u2022 flags   \u2013 ``True`` if the player has already marked the cell as containing a mine  \nwrite a function that, for a specific cell (row, col), returns\n1. a **sorted** list with the coordinates of all neighbouring cells that are still *un-opened* (``clicked`` is ``False`` for those neighbours) and\n2. an integer with the number of neighbouring cells that are already flagged as mines.\n\nNeighbour coordinates must be returned as ``(row, col)`` tuples sorted first by row, then by column (ascending).\n\nIf the board has only one cell, the list is empty and the counter is 0.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    # TODO: implement your solution here\n    pass\n```\n# Output Constraints:\nNeighbour list must be sorted in ascending lexicographic order (row, then column).\n"}
{"task_id": 593, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Minesweeper Constraint Deduction\n# Description:\nIn the game of Minesweeper every revealed numbered square supplies a constraint of the form\n\n    neighbours_of_square = k\n\nwhich means: *exactly k out of the listed neighbour cells hide a mine*.\nWith a little bit of propositional logic those constraints can be simplified and sometimes already\nprove that certain cells are safe (contain no mine) or certainly contain a mine.\n\nYou are given a list of such constraints.  Each constraint is represented as a two-element list\n\n    [variables, value]\n\nwhere \u2022 `variables` is a list of hashable identifiers (usually single capital\nletters) and \u2022 `value` is a non-negative integer.  The task is to implement a\nfunction that applies the following logical rules repeatedly until no more new\ninformation can be obtained.\n\nRules to apply (in the given order)\n1. **Solved constraints**\n   \u2022 If `value == 0` every variable in the constraint is safe (cannot be a mine).\n   \u2022 If `value == len(variables)` every variable in the constraint is a mine.\n2. **Propagation of knowledge**\n   Once a variable is proved to be a mine or safe it must be removed from every\n   remaining constraint.  When a mine is removed, the corresponding `value` has\n   to be decreased by one.\n3. **Subset rule**\n   Let `C1 = (S1, v1)` and `C2 = (S2, v2)` be two different constraints with\n   sets `S1`, `S2` of variables.  If `S1 \u2282 S2`, then `C2` can be replaced by the\n   logically equivalent constraint `(S2 \\ S1, v2 \u2212 v1)`.\n4. **Duplicate removal**\n   Duplicate constraints (identical variable set **and** identical value) are\n   removed.\n\nYour function must return **two** sorted lists:\n\u2022 a list with all variables that are certainly safe, followed by\n\u2022 a list with all variables that are certainly mines.\n\nIf no information can be deduced one or both lists can be empty.\n# Your code should start with:\n```python\nfrom copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function must apply the logical rules described in the task statement\n    (solved constraints, propagation, subset rule, duplicate removal) until no\n    new information can be obtained.\n\n    The result is a tuple (safe, mines) of two **alphabetically sorted** lists.\n    The first element contains all variables that are certainly safe, the second\n    one all variables that are certainly mines.  If nothing can be deduced an\n    empty list must be returned instead.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nReturn a tuple `(safe, mines)` where both elements are alphabetically sorted lists.\n"}
{"task_id": 594, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Maze to Graph Conversion\n# Description:\nYou are given a rectangular 2-D maze represented as a list of lists that only contains the integers 0 and 1.  \n\u2022 0 \u2013 walkable (open) cell.  \n\u2022 1 \u2013 wall (blocked) cell.\n\nCells are connected orthogonally (up, down, left, right).  Diagonal movement is **not** allowed.\n\nYour task is to write a function that converts this maze into an **undirected graph** expressed as an adjacency list.  Every open cell becomes a node, denoted by its coordinate tuple **(row, column)**.  For each open cell you must list all orthogonally adjacent open cells, returned as a *sorted* list of coordinate tuples so that the output is deterministic.\n\nIf the maze contains no open cells the function must return an empty dictionary.\n# Your code should start with:\n```python\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nThe neighbor lists associated with every key must be sorted in ascending lexicographic order (first by row, then by column).\n"}
{"task_id": 595, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: K-Means Clustering \u2013 Compute Centroids Only\n# Description:\nImplement the K-Means clustering algorithm **from scratch** (no third-party ML libraries).  \nThe function receives a 2-D NumPy array `X` (shape: *n_samples \u00d7 n_features*) and an integer `k` \u2013 the number of clusters.  \n\nAlgorithm requirements\n1. Initialise the centroids with the **first** `k` samples in `X` (guarantees deterministic results).\n2. Repeat for at most `max_iters` iterations (default = 100):\n   \u2022 Assign every sample to the nearest centroid using the squared Euclidean distance.\n   \u2022 Update each centroid to the arithmetic mean of the samples currently assigned to it.  \n3. Stop early if all centroids move less than `1e-4` in a full iteration.\n4. If a cluster becomes empty during an update, keep its centroid unchanged.\n5. After convergence, sort the centroids in ascending lexicographical order (first feature, then second, \u2026) and round every coordinate to **4 decimal places**.\n\nReturn the list of sorted, rounded centroids.\n# Your code should start with:\n```python\nimport numpy as np\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"  \n    pass\n```\n# Output Constraints:\nReturn a Python **list of lists** (not NumPy array) where each inner list is a centroid rounded to 4 decimals.\n"}
{"task_id": 596, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Maze to Graph Conversion\n# Description:\nYou are given a binary maze represented as a 2-D NumPy array.  A cell that contains `1` represents a free block that can be visited, while a cell containing `0` represents a wall that cannot be entered.\n\nTwo free blocks are considered *adjacent* if they share a common edge (up, down, left, or right \u2013 **no diagonals**).  Your task is to convert the maze into an **undirected, un-weighted graph** expressed as an adjacency list.\n\nThe returned adjacency list must be a Python dictionary that maps the coordinate pair `(row, column)` of every free block (all cells whose value is `1`) to a *sorted* list of the coordinate pairs of all its adjacent free neighbours.  If a free block has no neighbour, it should still appear in the dictionary with an empty list.\n\nExample maze (3\u00d73):\n\n1 0 1\n1 1 0\n0 1 1\n\nCoordinates that contain `1` are\n(0,0), (0,2), (1,0), (1,1), (2,1), (2,2).\nTheir adjacency relationships are\n(0,0) \u2192 [(1,0)]\n(0,2) \u2192 []\n(1,0) \u2192 [(0,0), (1,1)]\n(1,1) \u2192 [(1,0), (2,1)]\n(2,1) \u2192 [(1,1), (2,2)]\n(2,2) \u2192 [(2,1)]\n\nso the function should return\n{(0,0): [(1,0)], (0,2): [], (1,0): [(0,0),(1,1)],\n (1,1): [(1,0),(2,1)], (2,1): [(1,1),(2,2)], (2,2): [(2,1)]}\n\nIf the maze has **no** free blocks, the function must return an empty dictionary.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    # Write your code here\n    pass\n```\n# Output Constraints:\nAll neighbour lists must be **sorted in ascending lexicographic order**, e.g. `(0,0)` comes before `(0,2)` which comes before `(1,0)`.\n"}
{"task_id": 597, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Best Univariate Split for Regression Tree\n# Description:\nIn a regression\u2010type decision tree the quality of a split is often measured with the Mean Squared Error (MSE).  \nFor every possible threshold t of every feature j we split the training set into two subsets  \n    L(j,t)=\\{(\\mathbf x_i,y_i)\\mid x_{ij}\\le t\\},\u2003R(j,t)=\\{(\\mathbf x_i,y_i)\\mid x_{ij}>t\\}  \nand compute the weighted MSE\n    MSE(j,t)=\\frac{|L|}{n}\\operatorname{Var}(y_L)+\\frac{|R|}{n}\\operatorname{Var}(y_R),\nwhere Var denotes the population variance (mean of the squared deviations from the subset mean).  \nThe best univariate split is the pair (j*,t*) that minimises this score.\n\nWrite a function best_split_mse that receives\n\u2022 X \u2013 a two-dimensional structure (list-of-lists or NumPy array) containing only numerical features,\n\u2022 y \u2013 a one-dimensional structure (list or NumPy array) with the target values,\n\nand returns a list [best_feature_index, best_threshold, best_mse] where\n\u2022 best_feature_index is the 0-based index of the feature yielding the smallest weighted MSE,\n\u2022 best_threshold is the value of that feature used for the split (one of the values that actually occur in the data),\n\u2022 best_mse is the minimal weighted MSE, rounded to the nearest 4th decimal.\n\nIf several (feature, threshold) pairs give the same minimal score, return the one whose feature index is smallest; if the same feature still has several equally good thresholds, return the smallest such threshold.\n\nAssume that the data set contains at least two different observations and that at least one valid split (a split leaving a non-empty left and right part) exists.\n# Your code should start with:\n```python\nimport numpy as np\nimport numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    # =======  Write your code below  =======\n    pass  # Remove this line when you start coding\n```\n# Output Constraints:\nReturn a Python list [feature_index, threshold, mse] where mse is rounded to the nearest 4th decimal.\n"}
{"task_id": 598, "prompt": "You are an expert Python programmer, and here is your task:\n# Task: Feature-wise Standard Scaler\n# Description:\nIn many machine-learning pipelines every feature is first rescaled so that it has zero mean and unit variance (the so-called *z-score* standardisation).  \n\nWrite a function that performs this transformation for an entire data matrix.  The input is a two-dimensional list ( **n_samples \u00d7 n_features** ) containing numeric values.  For every feature the function must  \n1. compute its mean \u00b5 and population standard deviation \u03c3 (i.e. **ddof = 0**),  \n2. replace the feature value *x* by *(x \u2212 \u00b5) \u2044 \u03c3*.  \n\nCorner cases  \n\u2022 If \u03c3 equals 0 (the feature is constant) the corresponding standardised values must be **0**.  \n\u2022 Any *nan* or infinite values that may appear after the division (for instance because of division by 0) must be replaced by 0.  \n\nThe function returns the standardised matrix **rounded to 4 decimal places** as a regular (nested) Python list.\n# Your code should start with:\n```python\nimport numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    pass\n```\n# Output Constraints:\nReturn a Python list of lists with every element rounded to 4 decimals.\nThe returned list must not contain NaN or inf values.\n"}
