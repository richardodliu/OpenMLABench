{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the weight vector for Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Args:\n    - data (np.ndarray): Input data where the last column is the target y and all preceding columns are the features X.\n    - alpha (float, optional): Regularisation strength. Defaults to 0.0.\n\n    Returns:\n    - list[float]: Weight vector rounded to 4 decimal places. Returns -1 if the matrix is not invertible.\n    \"\"\"\n    X = np.hstack((np.ones((data.shape[0], 1)), data[:, :-1]))\n    y = data[:, -1]\n    XTX = np.dot(X.T, X) + alpha * np.eye(X.shape[1])\n    if np.linalg.det(XTX) == 0:\n        return -1\n    w = np.dot(np.linalg.inv(XTX), np.dot(X.T, y))\n    return [round(coeff, 4) for coeff in w]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0\n    gram_matrix = np.dot(X_train, X_train.T)\n    iteration = 0\n    while iteration < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                iteration += 1\n                break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    w = w.tolist()\n    w = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    links['identity'] = {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}\n    links['log'] = {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}\n    links['logit'] = {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices, depth):\n        if len(indices) < 3:\n            return (indices, depth)\n        feature_idx = np.random.randint(0, data.shape[1])\n        down = np.min(data[indices, feature_idx])\n        up = np.max(data[indices, feature_idx])\n        split_value = np.random.uniform(down, up)\n        left_indices = indices[data[indices, feature_idx] <= split_value]\n        right_indices = indices[data[indices, feature_idx] > split_value]\n        (left_leaf, left_depth) = build_tree(left_indices, depth + 1)\n        (right_leaf, right_depth) = build_tree(right_indices, depth + 1)\n        return (left_leaf + right_leaf, max(left_depth, right_depth))\n    root_indices = np.arange(data.shape[0])\n    (leaf_indices, max_depth) = build_tree(root_indices, 0)\n    depth_dict = {}\n    for (idx, depth) in zip(leaf_indices, [max_depth] * len(leaf_indices)):\n        depth_dict[idx] = depth\n    output = [depth_dict[i] for i in range(data.shape[0])]\n    return output"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    norms = np.sum(X ** 2, axis=1)\n    dot_product = np.dot(X, X.T)\n    distance_matrix = norms[:, np.newaxis] + norms[np.newaxis, :] - 2 * dot_product\n    distance_matrix = np.round(distance_matrix, 4).tolist()\n    return distance_matrix"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    predictions_array = np.stack(predictions)\n    ensemble_score = -learning_rate * np.sum(predictions_array, axis=0)\n    probabilities = np.exp(ensemble_score) / np.sum(np.exp(ensemble_score), axis=1, keepdims=True)\n    predicted_classes = np.argmax(probabilities, axis=1)\n    return predicted_classes.tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    min_support_count = math.ceil(minsup * len(transactions))\n    frequent_itemsets = {}\n    for k in range(1, len(max(transactions, key=len)) + 1):\n        itemsets = set()\n        for transaction in transactions:\n            itemsets.update(combinations(sorted(transaction), k))\n        itemset_counts = Counter()\n        for transaction in transactions:\n            for itemset in itemsets:\n                if set(itemset).issubset(set(transaction)):\n                    itemset_counts[itemset] += 1\n        for (itemset, count) in itemset_counts.items():\n            if count >= min_support_count:\n                frequent_itemsets[itemset] = count\n    return frequent_itemsets"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef sigmoid(z: float) -> float:\n    \"\"\"The sigmoid function.\"\"\"\n    return 1 / (1 + math.exp(-z))\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.zeros(n_features)\n    intercept = 0\n    for _ in range(n_iterations):\n        linear_scores = np.dot(X_train, weights) + intercept\n        probabilities = np.array([sigmoid(z) for z in linear_scores])\n        weights_gradients = np.dot(X_train.T, probabilities - y_train) / n_samples\n        intercept_gradient = np.mean(probabilities - y_train)\n        weights -= learning_rate * weights_gradients\n        intercept -= learning_rate * intercept_gradient\n    test_linear_scores = np.dot(X_test, weights) + intercept\n    test_probabilities = np.array([sigmoid(z) for z in test_linear_scores])\n    predicted_labels = [int(round(p)) for p in test_probabilities]\n    return predicted_labels"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (\\\\(\tilde{X}_{t-1}\\\\)).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (\\\\(X_t\\\\)).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \\\\(\\x0barepsilon\\\\), 0 <= weight <= 1.  Scalars or one-\n        dimensional vectors are supported; vectors are used element-wise.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places.  A scalar is returned\n        if all inputs are scalars; otherwise a list is returned.\n    \"\"\"\n    prev = np.asarray(prev)\n    cur = np.asarray(cur)\n    weight = np.asarray(weight)\n    if np.any(weight < 0) or np.any(weight > 1):\n        raise ValueError('Weight must be within [0, 1]')\n    smoothed = weight * prev + (1 - weight) * cur\n    smoothed = np.round(smoothed, 4)\n    if smoothed.ndim == 0:\n        return smoothed.item()\n    else:\n        return smoothed.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    labels = np.zeros(data.shape[0], dtype=int)\n    for _ in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = np.linalg.norm(sample - centres, axis=1) ** 2\n            labels[i] = np.argmin(distances)\n        new_centres = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(0, data.shape[0])] for i in range(k)])\n        if np.all(np.linalg.norm(centres - new_centres, axis=1) < epsilon):\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (centres, labels.tolist())"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef power_spectrum(frames: np.ndarray, scale: bool=False) -> list[list[float]]:\n    \"\"\"Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n    \"\"\"\n    fft_frames = np.fft.rfft(frames)\n    power_frames = np.abs(fft_frames) ** 2\n    if scale:\n        N = frames.shape[1]\n        power_frames /= N // 2 + 1\n    power_spectrum_list = np.round(power_frames, 4).tolist()\n    return power_spectrum_list"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    v1 = v1 - np.mean(v1)\n                    v2 = v2 - np.mean(v2)\n                    if np.std(v1) > 0.001:\n                        v1 = v1 / np.std(v1)\n                    if np.std(v2) > 0.001:\n                        v2 = v2 / np.std(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator > 0:\n                scores[t] = numerator / denominator\n    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    return [t for (t, _) in sorted_scores[:k]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    p = 1 / (1 + np.exp(-y_pred))\n    epsilon = 1e-15\n    p = np.clip(p, epsilon, 1 - epsilon)\n    losses = -y * np.log(p) - (1 - y) * np.log(1 - p)\n    mean_loss = np.mean(losses)\n    gradient = p - y\n    hessian = p * (1 - p)\n    mean_loss = round(mean_loss, 4)\n    gradient = [round(g, 4) for g in gradient]\n    hessian = [round(h, 4) for h in hessian]\n    return (mean_loss, gradient, hessian)"}
{"task_id": 16, "completion_id": 0, "solution": "from typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    if N > len(sequence):\n        return []\n    ngrams_list = []\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        ngrams_list.append(ngram)"}
{"task_id": 17, "completion_id": 0, "solution": "def build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n    \"\"\"Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n    \"\"\"\n    if not items:\n        return {}\n    nodes = [{'item': item, 'count': count, 'children': []} for (item, count) in zip(items, counts)]\n    root_index = parents.index(-1)\n    root = nodes[root_index]\n    for (i, parent_index) in enumerate(parents):\n        if parent_index != -1:\n            nodes[parent_index]['children'].append(nodes[i])\n    return root"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int,...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.get('dtype', float)\n    return np.zeros(shape, dtype=dtype)"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_split = None\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    for feature_idx in range(n_features):\n        thresholds = np.unique(X[:, feature_idx])\n        for threshold in thresholds:\n            left_mask = X[:, feature_idx] < threshold\n            right_mask = ~left_mask\n            left_g = np.sum(g[left_mask])\n            left_h = np.sum(h[left_mask])\n            right_g = total_g - left_g\n            right_h = total_h - left_h\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n            gain = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n            gain -= -0.5 * left_g ** 2 / (left_h + lam) + gamma\n            gain -= -0.5 * right_g ** 2 / (right_h + lam) + gamma\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_idx, threshold)\n    return best_split if best_gain > 0 else None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.asarray(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if x.ndim > 0:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    else:\n        sigmoid_x = sigmoid_x.item()\n        gradient_x = gradient_x.item()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    sample_weights = np.array([1.0 / len(x_train)] * len(x_train))\n    sorted_idx = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_idx]\n    y_train_sorted = np.array(y_train)[sorted_idx]\n    ensemble = []\n    ensemble_errors = []\n    while True:\n        stumps = []\n        for i in range(len(x_train_sorted) - 1):\n            theta = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stumps.append((d, theta))\n        best_stump = None\n        best_error = float('inf')\n        for stump in stumps:\n            (d, theta) = stump\n            predictions = np.ones(len(x_train_sorted))\n            if d == 0:\n                predictions[x_train_sorted > theta] = -1\n            else:\n                predictions[x_train_sorted <= theta] = -1\n            errors = np.where(predictions != y_train_sorted, 1, 0)\n            weighted_error = np.dot(sample_weights[sorted_idx], errors)\n            if weighted_error < best_error:\n                best_error = weighted_error\n                best_stump = stump\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        predictions = np.ones(len(x_train_sorted))\n        if best_stump[0] == 0:\n            predictions[x_train_sorted > best_stump[1]] = -1\n        else:\n            predictions[x_train_sorted <= best_stump[1]] = -1\n        errors = np.where(predictions != y_train_sorted, 1, 0)\n        sample_weights[sorted_idx] *= np.exp(-alpha * (1 - 2 * errors))\n        sample_weights /= np.sum(sample_weights)\n        ensemble.append((alpha, best_stump))\n        ensemble_errors.append(best_error)\n        predictions = np.zeros(len(x_train))\n        for (alpha, stump) in ensemble:\n            (d, theta) = stump\n            if d == 0:\n                predictions[x_train > theta] -= alpha\n                predictions[x_train <= theta] += alpha\n            else:\n                predictions[x_train > theta] += alpha\n                predictions[x_train <= theta] -= alpha\n        predictions = np.sign(predictions)\n        training_error = np.mean(predictions != y_train)\n        if training_error <= epsilon:\n            break\n    predictions = np.zeros(len(x_test))\n    for (alpha, stump) in ensemble:\n        (d, theta) = stump\n        if d == 0:\n            predictions[x_test > theta] -= alpha\n            predictions[x_test <= theta] += alpha\n        else:\n            predictions[x_test > theta] += alpha\n            predictions[x_test <= theta] -= alpha\n    predictions = np.sign(predictions).astype(int)\n    return predictions.tolist()"}
{"task_id": 22, "completion_id": 0, "solution": "import numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each column is shifted to mean 0 and scaled to\n            unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    offset = np.random.randint(-300, 300, size=shape)\n    u = np.random.rand(*shape)\n    tensor = offset + u\n    if standardize:\n        tensor = tensor - tensor.mean(axis=0, keepdims=True)\n        tensor = tensor / np.maximum(tensor.std(axis=0, keepdims=True), np.finfo(float).eps)\n    return tensor"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    w = np.array(w)\n    if not velocity:\n        velocity = np.zeros_like(w)\n    else:\n        velocity = np.array(velocity)\n    look_ahead = w - momentum * velocity\n    gradient = np.clip(grad_func(look_ahead), -1, 1)\n    new_velocity = momentum * velocity + learning_rate * gradient\n    new_weights = w - new_velocity\n    new_weights = [round(x, 4) for x in new_weights]\n    new_velocity = [round(x, 4) for x in new_velocity]\n    return (new_weights, new_velocity)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    dist_matrix = np.sum(X_test ** 2, axis=1)[:, np.newaxis] + np.sum(X_train ** 2, axis=1) - 2 * np.dot(X_test, X_train.T)\n    kernel_values = np.exp(-gamma * dist_matrix)\n    decision_values = np.dot(kernel_values, alpha * y_train) + b\n    return [1 if val >= 0 else -1 for val in decision_values]"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: list[list[int | float]] | list[int | float]) -> tuple[list, list]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    x_array = np.array(x)\n    activation_array = np.where(x_array >= 0, x_array, 0)\n    gradient_array = np.where(x_array >= 0, 1, 0)\n    activation_list = activation_array.tolist()\n    gradient_list = gradient_array.tolist()\n    return (activation_list, gradient_list)"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_array = np.array(X)\n    (m, n) = X_array.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vh) = np.linalg.svd(X_array, full_matrices=False)\n    Uk = U[:, :k]\n    sk = s[:k]\n    Vhk = Vh[:k, :]\n    X_hat_array = Uk @ np.diag(sk) @ Vhk\n    mse = np.mean((X_array - X_hat_array) ** 2)\n    X_hat = np.round(X_hat_array, 4).tolist()\n    mse = np.round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    idx = np.argsort(x_train)\n    x_train = x_train[idx]\n    y_train = y_train[idx]\n    residuals = y_train.copy()\n    prediction = np.zeros_like(y_train)\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    while np.sum(residuals ** 2) > epsilon:\n        best_split = None\n        best_rss = np.inf\n        for split in split_points:\n            left_idx = x_train <= split\n            right_idx = ~left_idx\n            left_mean = np.mean(residuals[left_idx])\n            right_mean = np.mean(residuals[right_idx])\n            rss = np.sum((residuals[left_idx] - left_mean) ** 2) + np.sum((residuals[right_idx] - right_mean) ** 2)\n            if rss < best_rss:\n                best_split = split\n                best_rss = rss\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        prediction[x_train <= best_split] += best_left_mean\n        prediction[x_train > best_split] += best_right_mean\n        residuals = y_train - prediction\n    prediction_query = 0\n    for split in split_points:\n        if x_query <= split:\n            prediction_query += best_left_mean\n        else:\n            prediction_query += best_right_mean\n    return round(prediction_query, 4)"}
{"task_id": 32, "completion_id": 0, "solution": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings.  Any string\n    should be converted with `float()`; existing numeric values stay as they\n    are.  The pair `(a, b)` must then be returned.\n    \"\"\"\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise ValueError('Both inputs must be numeric')\n    return (a, b)\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    result = a + b\n    return int(result) if result.is_integer() else result"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generate a random binary tensor with the specified shape and sparsity.\n\n    Args:\n        shape: The shape of the tensor to generate.\n        sparsity: The probability of generating a 1.0 (default: 0.5).\n        seed: An optional seed for reproducibility (default: None).\n\n    Returns:\n        A NumPy array containing only 0.0 and 1.0 values, with the specified shape and sparsity.\n        Returns -1 if sparsity is outside the legal range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_array = (random_array >= 1 - sparsity).astype(np.float64)\n    return binary_array"}
{"task_id": 35, "completion_id": 0, "solution": "from typing import Any\nclass node:\n    \"\"\"A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n    \"\"\"\n\n    def __init__(self, fea: int=-1, res: Any | None=None, child: dict | None=None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\ndef classify(root: node, sample: list[Any]) -> Any:\n    \"\"\"Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n    \"\"\"\n    current = root\n    while current.fea != -1:\n        if current.fea >= len(sample):\n            return -1\n        value = sample[current.fea]\n        if value not in current.child:\n            return -1\n        current = current.child[value]\n    return current.res"}
{"task_id": 36, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Run the decision tree on a batch of samples and return the corresponding list of predictions.\"\"\"\n    if root is None:\n        return []\n    predictions = []\n    for sample in X:\n        node = root\n        while node.left is not None and node.right is not None:\n            if sample[node.feature] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        predictions.append(node.threshold)\n    return predictions"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1).  The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n\n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty.  Each dictionary has the keys 'point', 'label', 'left',\n        and 'right' as explained in the task description.\n    \"\"\"\n    if data.size == 0:\n        return None\n    dims = cycle(range(data.shape[1] - 1))\n\n    def build_tree(data, dim):\n        if data.size == 0:\n            return None\n        sorted_data = data[np.argsort(data[:, dim])]\n        median_idx = sorted_data.shape[0] // 2\n        median_point = sorted_data[median_idx]\n        node = {'point': median_point[:-1].tolist(), 'label': median_point[-1], 'left': None, 'right': None}\n        next_dim = next(dims)\n        node['left'] = build_tree(sorted_data[:median_idx], next_dim)\n        node['right'] = build_tree(sorted_data[median_idx + 1:], next_dim)\n        return node\n    return build_tree(data, next(dims))"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef linucb_select_arm(context: np.ndarray, A: list[list[list[float]]], b: list[list[float]], alpha: float) -> int:\n    \"\"\"Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n    \"\"\"\n    n_arms = context.shape[1]\n    scores = np.zeros(n_arms)\n    for a in range(n_arms):\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        c_a = context[:, a]\n        theta_a = np.linalg.solve(A_a, b_a)\n        score = np.dot(theta_a, c_a) + alpha * np.sqrt(np.dot(c_a, np.linalg.solve(A_a, c_a)))\n        scores[a] = score\n    return np.argmax(scores)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_idx = n_samples // 2\n    partitioned_idx = np.argpartition(data[:, d], median_idx)\n    pivot = partitioned_idx[median_idx]\n    left = sorted(partitioned_idx[:median_idx])\n    right = sorted(partitioned_idx[median_idx + 1:])\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Input signal must be at least as long as the frame width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    framed_x = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n    if not writeable:\n        framed_x.flags.writeable = False\n    return framed_x"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    X_data = np.array(X_data)\n    X = np.array(X)\n    predicted_labels = []\n    for query in X:\n        distances = np.linalg.norm(X_data - query, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_labels = [y_data[i] for i in k_indices]\n        label_counts = Counter(k_labels)\n        predicted_label = min([label for (label, count) in label_counts.items() if count == max(label_counts.values())])\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1.0\n    if any((val < 0 for val in actual)) or any((val < 0 for val in predicted)):\n        return -1.0\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    rmsle = np.sqrt(np.mean((np.log(predicted + 1) - np.log(actual + 1)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    if derivative:\n        tanh_x = 2 / (1 + np.exp(-2 * x)) - 1\n        result = 1 - tanh_x ** 2\n    else:\n        result = 2 / (1 + np.exp(-2 * x)) - 1\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length *N* (N \u2265 0).\n\n    Returns:\n        A list of length *N* where the *k*-th element is the autocorrelation\n        coefficient a_k.\n    \"\"\"\n    N = len(x)\n    autocorrelation = [0] * N\n    for k in range(N):\n        for n in range(N - k):\n            autocorrelation[k] += x[n + k] * x[n]\n    return autocorrelation"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), 1):\n        return False\n    return True"}
{"task_id": 49, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    if k <= 0 or k > len(nums):\n        return -1\n    max_heap = []\n\n    def _move_up(heap, index):\n        \"\"\"Move the element at index up the heap to maintain the heap property.\"\"\"\n        parent_index = (index - 1) // 2\n        if index > 0 and heap[parent_index] < heap[index]:\n            (heap[parent_index], heap[index]) = (heap[index], heap[parent_index])\n            _move_up(heap, parent_index)\n\n    def _move_down(heap, index):\n        \"\"\"Move the element at index down the heap to maintain the heap property.\"\"\"\n        left_child_index = 2 * index + 1\n        right_child_index = 2 * index + 2\n        largest_index = index\n        if left_child_index < len(heap) and heap[left_child_index] > heap[largest_index]:\n            largest_index = left_child_index\n        if right_child_index < len(heap) and heap[right_child_index] > heap[largest_index]:\n            largest_index = right_child_index\n        if largest_index != index:\n            (heap[largest_index], heap[index]) = (heap[index], heap[largest_index])\n            _move_down(heap, largest_index)\n    for num in nums:\n        if len(max_heap) < k:\n            max_heap.append(num)\n            _move_up(max_heap, len(max_heap) - 1)\n        elif num < max_heap[0]:\n            max_heap[0] = num\n            _move_down(max_heap, 0)\n    return sorted(max_heap)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float=1e-06, max_iter: int=1000) -> list[list[float]]:\n    \"\"\"\n    Newton's method for 2-D linear regression.\n\n    Parameters:\n    X (np.ndarray): Data matrix (n x 2)\n    y (np.ndarray): Target vector (n x 1)\n    epsilon (float, optional): Convergence threshold (default=1e-6)\n    max_iter (int, optional): Maximum number of iterations (default=1000)\n\n    Returns:\n    list[list[float]]: Final weight vector (2 x 1) rounded to 4 decimal places\n    \"\"\"\n    n = X.shape[0]\n    w = np.array([[1.0], [1.0]])\n    for _ in range(max_iter):\n        grad = 2 / n * X.T @ (X @ w - y)\n        hess = 2 / n * X.T @ X\n        if np.linalg.norm(grad) < epsilon:\n            break\n        try:\n            w -= np.linalg.inv(hess) @ grad\n        except np.linalg.LinAlgError:\n            w -= np.linalg.pinv(hess) @ grad\n    return [[round(val, 4)] for val in w.flatten()]"}
{"task_id": 54, "completion_id": 0, "solution": "import string\nSTOP_WORDS = {'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'in', 'out', 'on', 'at', 'by', 'from', 'they', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now'}\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    if lowercase:\n        line = line.lower()\n    tokens = line.split()\n    filtered_tokens = []\n    for token in tokens:\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n        if not token:\n            continue\n        if filter_stopwords and token in STOP_WORDS:\n            continue\n        filtered_tokens.append(token)\n    return filtered_tokens"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    iter_num = 0\n    while iter_num < max_iter:\n        batch_idx = np.arange(iter_num * batch_size, (iter_num + 1) * batch_size)\n        batch_idx %= n\n        X_batch = X[batch_idx]\n        y_batch = y[batch_idx]\n        g = 1 / batch_size * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n        iter_num += 1\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    SoftPlus activation function with gradient.\n\n    Parameters:\n    x (scalar, list, or NumPy array): Input values.\n    deriv (bool, optional): Whether to compute the gradient. Defaults to False.\n\n    Returns:\n    list or float: SoftPlus(x) or sigmoid(x) values, rounded to 4th decimal.\n    \"\"\"\n    x = np.asarray(x)\n    if deriv:\n        sigmoid_x = np.where(x < 0, np.exp(x) / (1 + np.exp(x)), 1 / (1 + np.exp(-x)))\n        result = sigmoid_x\n    else:\n        softplus_x = np.where(x < 0, np.log1p(np.exp(x)), x + np.log1p(np.exp(-x)))\n        result = softplus_x\n    result = np.round(result, 4)\n    if result.size == 1:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    ngram_counts = {}\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i + N])\n        if ngram not in ngram_counts:\n            ngram_counts[ngram] = 0\n        ngram_counts[ngram] += 1\n    if N > 1:\n        prefix_counts = {}\n        for i in range(len(corpus) - N + 1):\n            prefix = tuple(corpus[i:i + N - 1])\n            if prefix not in prefix_counts:\n                prefix_counts[prefix] = 0\n            prefix_counts[prefix] += 1\n    else:\n        prefix_counts = None\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if ngram not in ngram_counts:\n            return float('-inf')\n        count = ngram_counts[ngram]\n        if N == 1:\n            prob = count / len(corpus)\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            if prefix not in prefix_counts:\n                return float('-inf')\n            prob = count / prefix_counts[prefix]\n        log_prob += np.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    if criterion not in ['entropy', 'gini', 'mse']:\n        raise ValueError(\"Invalid criterion. Choose from 'entropy', 'gini', or 'mse'.\")\n    if criterion == 'entropy':\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / len(y)\n        entropy = -np.sum(probabilities * np.log2(probabilities))\n        return round(entropy, 4)\n    elif criterion == 'gini':\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / len(y)\n        gini = 1 - np.sum(np.square(probabilities))\n        return round(gini, 4)\n    elif criterion == 'mse':\n        mean = np.mean(y)\n        mse = np.mean((y - mean) ** 2)\n        return round(mse, 4)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef grad(X, y, W):\n    \"\"\"Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    W = np.array(W)\n    if X.ndim != 2:\n        return -1\n    if y.ndim == 1:\n        y = y[:, np.newaxis]\n    if W.ndim == 1:\n        W = W[:, np.newaxis]\n    if X.shape[0] != y.shape[0]:\n        return -1\n    if X.shape[1] != W.shape[0]:\n        return -1\n    grad = X.T @ (X @ W - y) / X.shape[0]\n    return [[round(val, 4)] for val in grad.flatten()]"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    X_poly = np.vstack([np.ones_like(X), *[X ** i for i in range(1, degree + 1)]]).T\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        w[0] = np.mean(y - np.dot(X_poly[:, 1:], w[1:]))\n        for j in range(1, degree + 1):\n            x_j = X_poly[:, j]\n            rho = np.dot(x_j, y - np.dot(X_poly, w) + w[j] * x_j)\n            w[j] = np.sign(rho) * np.maximum(np.abs(rho) - reg_factor, 0) / np.dot(x_j, x_j)\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time index t.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N)\n    B (list[list[float]]): Emission-probability matrix of shape (N, M)\n    obs (list[int]): List of observation indices (length T)\n    t (int): Integer time index (0 \u2264 t < T)\n\n    Returns:\n    list[float]: Backward probability vector beta_t with N elements, rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    (N, _) = A.shape\n    T = len(obs)\n    beta_Tm1 = np.ones(N)\n    for i in range(T - 1, t, -1):\n        emission_probs = B[:, obs[i]]\n        beta_i = np.dot(A, emission_probs * beta_Tm1)\n        beta_Tm1 = beta_i\n    return np.round(beta_Tm1, 4).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first *N//2+1* coefficients).  Defaults to ``True``.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        *N//2+1* when *positive_only* is ``True`` and *N* otherwise.\n    \"\"\"\n    N = len(frame)\n    c = np.zeros(N, dtype=np.complex128)\n    for k in range(N):\n        for n in range(N):\n            c[k] += frame[n] * np.exp(-2j * np.pi * k * n / N)\n    c = np.round(c.real, 4) + 1j * np.round(c.imag, 4)\n    if positive_only:\n        c = c[:N // 2 + 1]\n    return c.tolist()"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    (N, _) = A.shape\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import accumulate\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]]:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function must return **-1**.\n    \"\"\"\n    if not all((np.isclose(sum(dist), 1, atol=1e-08) for dist in [S] + A + B)):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    states = []\n    observations = []\n    state = np.random.choice(len(S), p=S)\n    states.append(state)\n    for _ in range(n_sample - 1):\n        observation = np.random.choice(len(B[0]), p=B[state])\n        observations.append(observation)\n        state = np.random.choice(len(A[0]), p=A[state])\n        states.append(state)\n    observation = np.random.choice(len(B[0]), p=B[state])\n    observations.append(observation)\n    return (states, observations)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1 - momentum) * grad\n    updated_w = w - learning_rate * new_update\n    updated_w = np.round(updated_w, 4).tolist()\n    new_update = np.round(new_update, 4).tolist()\n    return (updated_w, new_update)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0])\n    if len(A) != n or len(A[0]) != n:\n        return -1\n    if len(B) != n or len(observations) == 0:\n        return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    alpha = np.zeros((len(observations), n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        alpha[t] = np.dot(alpha[t - 1], A) * B[:, observations[t]]\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    fp_tree = defaultdict(lambda : defaultdict(int))\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort()\n        current_node = fp_tree\n        for item in transaction:\n            current_node = current_node[item]\n            current_node['support'] += 1\n\n    def mine_fp_tree(fp_tree, prefix):\n        frequent_itemsets = []\n        for item in fp_tree:\n            if item != 'support':\n                new_prefix = prefix + [item]\n                new_fp_tree = defaultdict(lambda : defaultdict(int))\n                for transaction in fp_tree[item]:\n                    if transaction != 'support':\n                        new_fp_tree[transaction][item] = fp_tree[item][transaction]\n                new_fp_tree['support'] = fp_tree[item]['support']\n                frequent_itemsets.extend(mine_fp_tree(new_fp_tree, new_prefix))\n        if fp_tree['support'] >= min_support:\n            frequent_itemsets.append(prefix)\n        return frequent_itemsets\n    frequent_itemsets = mine_fp_tree(fp_tree, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 71, "completion_id": 0, "solution": "def label_uniq_cnt(data: list[list]) -> dict:\n    \"\"\"Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n    \"\"\"\n    label_counts = {}\n    for sample in data:\n        label = sample[-1]\n        label_counts[label] = label_counts.get(label, 0) + 1\n    return label_counts"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Compute the variance reduction obtained by splitting the target vector y into y_left and y_right.\n\n    Parameters:\n    y (np.ndarray): Target vector for the parent node.\n    y_left (np.ndarray): Target vector for the left child.\n    y_right (np.ndarray): Target vector for the right child.\n\n    Returns:\n    float: Variance reduction obtained by the split, rounded to the nearest 4th decimal.\n    \"\"\"\n    var_y = np.var(y, axis=0).sum()\n    var_y_left = np.var(y_left, axis=0).sum()\n    var_y_right = np.var(y_right, axis=0).sum()\n    n = len(y)\n    n_left = len(y_left)\n    n_right = len(y_right)\n    vr = var_y - n_left / n * var_y_left - n_right / n * var_y_right\n    return round(vr, 4)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef magnitude_spectrum(frames: 'np.ndarray') -> 'list[list[float]]':\n    \"\"\"Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n    \"\"\"\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]\n    spectra = np.abs(np.fft.rfft(frames))\n    spectra = np.round(spectra, 4)\n    result = spectra.tolist()\n    return result"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_labels = y_train[k_indices]\n        predicted_label = np.min(np.bincount(k_labels).argmax())\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(Z, 0)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[np.ndarray, list[dict[str, np.ndarray]]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[np.ndarray, list[dict[str, np.ndarray]]]\n        A tuple containing the final activation AL and the cache for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        if l == L:\n            A = sigmoid(Z)\n        else:\n            A = relu(Z)\n        cache = {'Z': Z, 'A': A, 'W': W, 'b': b, 'A_prev': A_prev if l > 1 else X}\n        caches.append(cache)\n        A_prev = A\n    AL = A.round(4).tolist()\n    return (AL, caches)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    params = np.array(params)\n    grads = np.array(grads)\n    m = np.array(m)\n    u = np.array(u)\n    new_m = beta1 * m + (1 - beta1) * grads\n    new_u = np.maximum(beta2 * u, np.abs(grads))\n    step = learning_rate / (1 - beta1 ** t) * new_m / (new_u + epsilon)\n    new_params = params - step\n    new_t = t + 1\n    new_params = np.round(new_params, 6).tolist()\n    new_m = np.round(new_m, 6).tolist()\n    new_u = np.round(new_u, 6).tolist()\n    return (new_params, new_m, new_u, new_t)"}
{"task_id": 80, "completion_id": 0, "solution": "import numpy as np\ndef adadelta_update(w: list[float] | np.ndarray, grad_w: list[float] | np.ndarray, rho: float=0.95, eps: float=1e-06) -> list[float]:\n    \"\"\"Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n    \"\"\"\n    w = np.asarray(w)\n    grad_w = np.asarray(grad_w)\n    squared_grads = grad_w ** 2\n    E_grad = (1 - rho) * squared_grads\n    RMS_grad = np.sqrt(E_grad + eps)\n    adaptive_lr = eps / RMS_grad\n    delta_w = adaptive_lr * grad_w\n    new_w = w - delta_w\n    new_w = np.round(new_w, 4).tolist()\n    return new_w"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0] if A2.ndim == 1 else A2.shape[1]\n    cost = -(1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    greedy_idx = np.argmax(Q)\n    n = len(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    probs = np.full(n, base_prob)\n    probs[greedy_idx] = greedy_prob\n    probs = np.round(probs, 4)\n    assert np.isclose(np.sum(probs), 1, atol=1e-12)\n    return probs.tolist()"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    numerator = np.sum(residuals * h_pred)\n    denominator = np.sum(h_pred ** 2)\n    if denominator == 0:\n        return 1.0\n    gamma = numerator / denominator\n    return round(gamma, 4)"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef softmax_regression_step(X: np.ndarray, Y: np.ndarray, W: np.ndarray, lr: float) -> list[list[float]]:\n    \"\"\"\n    One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Training samples of shape (N, D).\n    Y : np.ndarray\n        One-hot encoded labels of shape (N, C).\n    W : np.ndarray\n        Current weights of shape (D, C).\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix rounded to 4 decimal places.\n    \"\"\"\n    if lr == 0 or np.all(X == 0):\n        return W.tolist()\n    Z = np.dot(X, W)\n    \u0176 = np.exp(Z) / np.sum(np.exp(Z), axis=1, keepdims=True)\n    grad = np.dot(X.T, \u0176 - Y) / X.shape[0]\n    W_new = W - lr * grad\n    return np.round(W_new, 4).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for sample_predictions in zip(*predictions):\n        vote_counts = Counter(sample_predictions)\n        max_votes = max(vote_counts.values())\n        top_labels = [label for (label, count) in vote_counts.items() if count == max_votes]\n        final_prediction = min(top_labels)\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, 4)\n    if result.size == 1:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == 'relu':\n        A = np.maximum(Z, 0)\n    elif activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-Z))\n    else:\n        raise ValueError('Invalid activation function')\n    assert A.shape == (W.shape[0], A_prev.shape[1])\n    A = A.round(4).tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A, cache)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    estimates = sorted(policy.ev_estimates.items())\n    squared_errors = [(est - true_evs[i]) ** 2 for (i, est) in estimates]\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 91, "completion_id": 0, "solution": "import numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    dA_array = np.array(dA)\n    activation_cache_array = np.array(activation_cache)\n    if dA_array.shape != activation_cache_array.shape:\n        return -1\n    dZ_array = dA_array * (activation_cache_array > 0).astype(int)\n    return dZ_array.tolist()"}
{"task_id": 92, "completion_id": 0, "solution": "import numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_array = np.asarray(Z)\n    A = np.maximum(0, Z_array)\n    A_list = A.tolist()\n    cache = Z_array.tolist()\n    return (A_list, cache)"}
{"task_id": 94, "completion_id": 0, "solution": "from collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    label_counts = Counter(neighbors_targets)\n    max_count = max(label_counts.values())\n    majority_labels = [label for (label, count) in label_counts.items() if count == max_count]\n    return min(majority_labels)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split()\n        vocab.update(words)\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i + n])\n                ngram_counts[n - 1][ngram] += 1\n    vocab.add('<UNK>')\n    sequence_words = sequence.split()\n    if len(sequence_words) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple(sequence_words[i:i + N])\n        ngram = tuple((word if word in vocab else '<UNK>' for word in ngram))\n        context = ngram[:-1]\n        word = ngram[-1]\n        context_count = ngram_counts[N - 2][context]\n        word_count = ngram_counts[N - 1][ngram]\n        vocab_size = len(vocab)\n        prob = (word_count + K) / (context_count + K * vocab_size)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 97, "completion_id": 0, "solution": "import numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    Z = np.asarray(Z)\n    dZ = np.where(Z > 0, 1.0, 0.0)\n    if Z.ndim == 0:\n        return dZ.item()\n    return dZ.tolist()"}
{"task_id": 99, "completion_id": 0, "solution": "import numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, (int, float)):\n        return max(0, Z)\n    elif isinstance(Z, list):\n        return [max(0, z) for z in Z] if not any((isinstance(z, list) for z in Z)) else [[max(0, zz) for zz in z] for z in Z]\n    elif isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    else:\n        raise ValueError('Unsupported input type')"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if len(actual) != len(predicted):\n        return -1\n    mismatches = np.sum(actual != predicted)\n    error_rate = mismatches / len(actual)\n    error_rate = round(error_rate, 4)\n    return error_rate"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function must reproduce the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output should be a\n    Python list and every probability must be rounded to four decimal places.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    max_x = np.max(x, axis=axis, keepdims=True)\n    exp_x = np.exp(x - max_x)\n    sum_exp_x = np.sum(exp_x, axis=axis, keepdims=True)\n    softmax_x = exp_x / sum_exp_x\n    softmax_x = np.round(softmax_x, 4)\n    return softmax_x.tolist()"}
{"task_id": 102, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places, or -1 if the\n        model cannot be fitted (e.g. not enough data, inconsistent input).\n    \"\"\"\n    if len(x) != len(y) or len(x) < degree + 1 or degree < 0:\n        return -1\n    X = np.array([x ** i for i in range(degree + 1)]).T\n    weights = np.linalg.lstsq(X, y, rcond=None)[0]\n    X_pred = np.array([x_pred ** i for i in range(degree + 1)]).T\n    predictions = np.dot(X_pred, weights)\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n    \"\"\"\n    parent_entropy = entropy(y)\n    child_entropies = [entropy(split) * len(split) / len(y) for split in splits]\n    child_entropy_sum = sum(child_entropies)\n    ig = parent_entropy - child_entropy_sum\n    return round(ig, 4)\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculates the entropy (base-2) of a label distribution.\n\n    Args:\n        labels: 1-D NumPy array containing class labels.\n\n    Returns:\n        Entropy of the label distribution.\n    \"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    entropy = -sum((prob * math.log2(prob) for prob in probabilities))\n    return entropy"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function must return -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    x = np.asarray(x)\n    pdf = 1 / (np.sqrt(2 * np.pi) * sigma) * np.exp(-(x - mean) ** 2 / (2 * sigma ** 2))\n    return np.round(pdf, 5).tolist()"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    m_new = beta1 * m_prev + (1 - beta1) * grad\n    v_new = beta2 * v_prev + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    theta_new = np.round(theta_new, 6)\n    m_new = np.round(m_new, 6)\n    v_new = np.round(v_new, 6)\n    theta_new = theta_new.tolist()\n    m_new = m_new.tolist()\n    v_new = v_new.tolist()\n    return (theta_new, m_new, v_new, t + 1)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    loss = np.inf\n    iter_count = 0\n    while iter_count < max_iter and loss > tol:\n        W_new = np.linalg.solve(H @ H.T + alpha * np.eye(K), X @ H.T)\n        H_new = np.linalg.solve(W_new.T @ W_new + alpha * np.eye(K), W_new.T @ X)\n        W = W_new\n        H = H_new\n        loss = np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        iter_count += 1\n    X_hat = W @ H\n    X_hat = X_hat.round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = initialize_centroids(X, K)\n    for _ in range(max_iter):\n        labels = assign_clusters(X, centroids)\n        new_centroids = update_centroids(X, labels, K)\n        if np.array_equal(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(np.round(centroid, 4)) for centroid in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids\ndef initialize_centroids(X: np.ndarray, K: int) -> np.ndarray:\n    \"\"\"Choose the initial centroids with the K-Means++ procedure.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n\n    Returns\n    -------\n    np.ndarray\n        A 2-D array with shape (K, n) where each row is a centroid.\n    \"\"\"\n    centroids = [X[np.random.choice(X.shape[0], 1, replace=False)][0]]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = np.random.rand()\n        for (j, p) in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    return np.array(centroids)\ndef assign_clusters(X: np.ndarray, centroids: np.ndarray) -> np.ndarray:\n    \"\"\"Assign each sample to the closest centroid.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    centroids : np.ndarray\n        2-D array with shape (K, n) where each row is a centroid.\n\n    Returns\n    -------\n    np.ndarray\n        A 1-D array with shape (m,) where each element is the index of the closest\n        centroid.\n    \"\"\"\n    return np.argmin(np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2)), axis=0)\ndef update_centroids(X: np.ndarray, labels: np.ndarray, K: int) -> np.ndarray:\n    \"\"\"Update centroids as the mean of all samples assigned to each cluster.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    labels : np.ndarray\n        A 1-D array with shape (m,) where each element is the index of the closest\n        centroid.\n    K : int\n        The number of clusters to form.\n\n    Returns\n    -------\n    np.ndarray\n        A 2-D array with shape (K, n) where each row is a centroid.\n    \"\"\"\n    centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else X[np.random.choice(X.shape[0], 1, replace=False)][0] for i in range(K)])\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode a raw text string into a fixed-length list of integer token ids.\n\n    :param text: The input text string.\n    :param time_steps: The fixed length of the output sequence.\n    :param vocabulary: A dictionary mapping characters to integer token ids.\n    :return: A list of integer token ids with length `time_steps`.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Convert a list of integer token ids back to a human-readable string.\n\n    :param indices: A list of integer token ids.\n    :param inverse_vocab: A dictionary mapping integer token ids to characters.\n    :return: The decoded string.\n    \"\"\"\n    return ''.join((inverse_vocab[idx] for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Run a character-level sequence model on a raw text input and return the decoded prediction string.\n\n    :param model: A neural model that takes a batch of encoded sequences and returns a batch of predictions.\n    :param input_vocabulary: A dictionary mapping characters to integer token ids for the input sequence.\n    :param inv_output_vocabulary: A dictionary mapping integer token ids to characters for the output sequence.\n    :param text: The raw text input string.\n    :return: The decoded prediction string.\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array([encoded_input])\n    predictions = model.predict(encoded_input)\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 112, "completion_id": 0, "solution": "import re\nfrom collections import Counter\nclass Token:\n\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        return \"Token(word='{}', count={})\".format(self.word, self.count)\ndef tokenize_and_count(text: str) -> list[Token]:\n    \"\"\"Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g., \"Cat\" == \"cat\").\n      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n    \"\"\"\n    words = re.findall('\\\\b[a-zA-Z]+\\\\b', text.lower())\n    word_counts = Counter(words)\n    tokens = [Token(word) for word in word_counts]\n    for token in tokens:\n        token.count = word_counts[token.word]\n    tokens.sort(key=lambda token: (-token.count, token.word))\n    return tokens"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_string}')\n        predictions.append(output_string)\n    return predictions"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef selu(x: np.ndarray, derivative: bool=False) -> list:\n    \"\"\"Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    lambda_ = 1.0507009873554805\n    if derivative:\n        result = np.where(x >= 0, lambda_, lambda_ * alpha * np.exp(x))\n    else:\n        result = np.where(x >= 0, lambda_ * x, lambda_ * alpha * (np.exp(x) - 1))\n    result = np.round(result, 6).tolist()\n    return result"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    X = np.atleast_2d(X)\n    y = np.atleast_2d(y).T\n    w = np.atleast_2d(w).T\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = X.shape[0]\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / m\n    loss = round(loss, 4)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 116, "completion_id": 0, "solution": "import numpy as np\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n    \"\"\"Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n    \"\"\"\n    parent_mean = np.mean(y)\n    parent_mse = np.mean((y - parent_mean) ** 2)\n    child_mse = 0\n    for split in splits:\n        child_mean = np.mean(split)\n        child_mse += len(split) / len(y) * np.mean((split - child_mean) ** 2)\n    mse_reduction = parent_mse - child_mse\n    return round(mse_reduction, 4)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        (best_stump, best_error) = find_best_stump(X_train, y_train, weights)\n        stump_weight = 0.5 * np.log((1 - best_error) / best_error)\n        weights = update_weights(weights, y_train, best_stump, stump_weight)\n        stumps.append(best_stump)\n        stump_weights.append(stump_weight)\n    predictions = predict(X_test, stumps, stump_weights)\n    return predictions\ndef find_best_stump(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray) -> tuple:\n    \"\"\"Find the best decision stump for the given weights.\"\"\"\n    (m, n) = X_train.shape\n    best_stump = None\n    best_error = 1.0\n    for feature_idx in range(n):\n        thresholds = np.unique(X_train[:, feature_idx])\n        for threshold in thresholds:\n            stump = (feature_idx, threshold)\n            error = compute_error(X_train, y_train, weights, stump)\n            if error < best_error:\n                best_stump = stump\n                best_error = error\n    return (best_stump, best_error)\ndef compute_error(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray, stump: tuple) -> float:\n    \"\"\"Compute the weighted error of a decision stump.\"\"\"\n    (feature_idx, threshold) = stump\n    predictions = np.where(X_train[:, feature_idx] < threshold, -1, 1)\n    errors = np.where(predictions != y_train, 1, 0)\n    return np.dot(weights, errors)\ndef update_weights(weights: np.ndarray, y_train: np.ndarray, stump: tuple, stump_weight: float) -> np.ndarray:\n    \"\"\"Update the weights of the training examples.\"\"\"\n    (feature_idx, threshold) = stump\n    predictions = np.where(X_train[:, feature_idx] < threshold, -1, 1)\n    errors = np.where(predictions != y_train, 1, 0)\n    weights *= np.exp(-stump_weight * (1 - 2 * errors))\n    weights /= np.sum(weights)\n    return weights\ndef predict(X_test: np.ndarray, stumps: list, stump_weights: list) -> list[int]:\n    \"\"\"Predict labels for X_test using the decision stumps.\"\"\"\n    predictions = []\n    for x in X_test:\n        score = 0.0\n        for (stump, stump_weight) in zip(stumps, stump_weights):\n            (feature_idx, threshold) = stump\n            score += stump_weight * (1 if x[feature_idx] < threshold else -1)\n        predictions.append(1 if score > 0 else -1)\n    return predictions"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef sgd_update(params: list, grads: list, alpha: float=0.01) -> list:\n    \"\"\"One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n    \"\"\"\n    if len(params) != len(grads) or not params or (not grads):\n        return []\n    updated_params = []\n    for (param, grad) in zip(params, grads):\n        updated_param = param - alpha * grad\n        updated_params.append(np.round(updated_param, 4).tolist())\n    return updated_params"}
{"task_id": 120, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    X = np.array(X)\n    y = np.array(y)\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n_features = X.shape[1]\n    w = np.random.uniform(-1 / math.sqrt(n_features), 1 / math.sqrt(n_features), n_features)\n    for _ in range(n_iterations):\n        gradient = 1 / len(X) * X.T.dot(X.dot(w) - y)\n        w -= learning_rate * gradient\n    return [round(weight, 4) for weight in w]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector `[w0, w1, ..., wd]` rounded to 4 decimal places, where\n        `w0` is the intercept term.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_aug = np.hstack((np.ones((X.shape[0], 1)), X))\n    w = np.linalg.pinv(X_aug) @ y\n    return [round(weight, 4) for weight in w]"}
{"task_id": 123, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    categories = sorted(set(y))\n    one_hot = [[0] * len(categories) for _ in range(len(y))]\n    for (i, value) in enumerate(y):\n        category_index = categories.index(value)\n        one_hot[i][category_index] = 1\n    return one_hot"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if gamma is None:\n        gamma = 1 / X.shape[1]\n    K = (gamma * np.dot(X, Y.T) + c0) ** d\n    K = np.round(K, 4).tolist()\n    return K"}
{"task_id": 127, "completion_id": 0, "solution": "def confusion_matrix(y_true: list, y_pred: list) -> list:\n    \"\"\"Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    classes = sorted(set(y_true + y_pred))\n    matrix = [[0 for _ in range(len(classes))] for _ in range(len(classes))]\n    for (true_label, pred_label) in zip(y_true, y_pred):\n        true_index = classes.index(true_label)\n        pred_index = classes.index(pred_label)\n        matrix[true_index][pred_index] += 1\n    return matrix"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for label in np.unique(y):\n        class_mask = y == label\n        class_mean = np.mean(X[class_mask], axis=0)\n        S_W += np.cov(X[class_mask].T, bias=True) * np.sum(class_mask)\n        S_B += np.outer(class_mean - global_mean, class_mean - global_mean) * np.sum(class_mask)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[eigen_vectors[:, i] != 0, i][0] < 0:\n            eigen_vectors[:, i] *= -1\n    projected_X = X @ eigen_vectors[:, :n_components]\n    projected_X = np.round(projected_X, 4)\n    return projected_X.tolist()"}
{"task_id": 129, "completion_id": 0, "solution": "from itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if not sequence or samples <= 0:\n        return []\n    infinite_cycle = cycle(sequence)\n    result = list(islice(infinite_cycle, samples))\n    return result"}
{"task_id": 130, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    relevant_transitions = [(s, a, r, ns) for (s, a, r, ns) in transitions if s == state and a == action]\n    if not relevant_transitions:\n        return []\n    next_state_counts = Counter((ns for (_, _, _, ns) in relevant_transitions))\n    total_occurrences = sum(next_state_counts.values())\n    probabilities = [[ns, round(count / total_occurrences, 4)] for (ns, count) in next_state_counts.items()]\n    probabilities.sort(key=lambda x: x[0])\n    return probabilities"}
{"task_id": 131, "completion_id": 0, "solution": "def get_index(uid: int, i: int):\n    \"\"\"Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function must return *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n    \"\"\"\n    if uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n    sequence = _SHARED_SEQUENCES[uid]\n    if i < -len(sequence) or i >= len(sequence):\n        return None\n    return sequence[i]"}
{"task_id": 132, "completion_id": 0, "solution": "import numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar, list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars are returned unchanged.\n            \u2022 Non-scalar inputs are returned as a NumPy ndarray.\n    \"\"\"\n    if np.isscalar(z):\n        return z\n    elif isinstance(z, (list, tuple)):\n        return np.asarray(z)\n    elif isinstance(z, np.ndarray):\n        return z\n    else:\n        raise ValueError('Unsupported input type. Only scalars, lists, tuples, and NumPy ndarrays are allowed.')"}
{"task_id": 133, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    for sequence in X_train:\n        for token_index in sequence:\n            if token_index < 0 or token_index >= vocab_length:\n                return -1\n    one_hot_targets = [[[0 for _ in range(vocab_length)] for _ in range(len(sequence))] for sequence in X_train]\n    for (i, sequence) in enumerate(X_train):\n        for (j, token_index) in enumerate(sequence):\n            one_hot_targets[i][j][token_index] = 1\n    return one_hot_targets"}
{"task_id": 134, "completion_id": 0, "solution": "import numpy as np\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n    \"\"\"Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0 or >1), the function must return\n        (-1.0, -1).\n    \"\"\"\n    if not payoff_probs:\n        return (-1.0, -1)\n    if not all((0 <= p <= 1 for p in payoff_probs)):\n        return (-1.0, -1)\n    max_expected_reward = max(payoff_probs)\n    best_arm_index = payoff_probs.index(max_expected_reward)\n    return (max_expected_reward, best_arm_index)"}
{"task_id": 135, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Ordinary Least Squares (OLS) linear regression from scratch using the normal equation.\n\n    Args:\n    X_train (list[list[int | float]]): Training feature matrix.\n    y_train (list[int | float]): Training target values.\n    X_test (list[list[int | float]]): Test feature matrix.\n\n    Returns:\n    list[float]: Predicted target values for the test set, rounded to 4 decimal places.\n    \"\"\"\n    X_train = np.c_[np.ones(len(X_train)), X_train]\n    X_test = np.c_[np.ones(len(X_test)), X_test]\n    XTX = np.dot(X_train.T, X_train)\n    if np.linalg.det(XTX) == 0:\n        return -1\n    coefficients = np.dot(np.linalg.inv(XTX), np.dot(X_train.T, y_train))\n    predictions = np.dot(X_test, coefficients)\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 136, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function should:\n    1. Subtract the maximum value along *axis* from every element of *z*.\n    2. Exponentiate the shifted values.\n    3. Divide by the sum of exponentials along the same axis.\n    4. Round the result to four decimal places.\n    5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: \u20111).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    max_values = np.max(z, axis=axis, keepdims=True)\n    shifted_z = z - max_values\n    exp_z = np.exp(shifted_z)\n    sum_exp_z = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_z = exp_z / sum_exp_z\n    rounded_softmax_z = np.round(softmax_z, decimals=4)\n    return rounded_softmax_z.tolist()"}
{"task_id": 138, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    matches = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n    accuracy = matches / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 139, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    z = np.asarray(z)\n    tanh_z = 2 / (1 + np.exp(-2 * z)) - 1\n    result = [round(val, 4) for val in tanh_z]\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])\n    fire_visited = set()\n    agent_visited = set((0, 0))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_visited.add((i, j))\n    while agent_queue:\n        while fire_queue and fire_queue[0][2] <= agent_queue[0][2]:\n            (x, y, time) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and ((nx, ny) not in fire_visited):\n                    fire_queue.append((nx, ny, time + 1))\n                    fire_visited.add((nx, ny))\n        (x, y, time) = agent_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return time\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and ((nx, ny) not in agent_visited) and ((nx, ny) not in fire_visited):\n                agent_queue.append((nx, ny, time + 1))\n                agent_visited.add((nx, ny))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors Classifier.\n\n    Parameters:\n    X_train (np.ndarray): Labelled training set features.\n    y_train (np.ndarray): Labelled training set target variable.\n    X_test (np.ndarray): Unlabeled test set features.\n    k (int): Number of nearest neighbors to consider.\n    metric (str, optional): Distance metric. Defaults to 'euclidean'.\n\n    Returns:\n    np.ndarray: Predicted labels for the test set.\n\n    Raises:\n    ValueError: If the metric is not one of 'euclidean', 'manhattan', or 'cosine'.\n    \"\"\"\n    metrics = {'euclidean': distance.euclidean, 'manhattan': distance.cityblock, 'cosine': distance.cosine}\n    if metric not in metrics:\n        metric = 'euclidean'\n    y_pred = []\n    for test_sample in X_test:\n        distances = [metrics[metric](test_sample, train_sample) for train_sample in X_train]\n        k_indices = np.argsort(distances)[:k]\n        k_labels = y_train[k_indices]\n        predicted_label = np.bincount(k_labels).argmax()\n        if np.sum(k_labels == predicted_label) != k:\n            predicted_label = np.min(k_labels)\n        y_pred.append(predicted_label)\n    return np.array(y_pred)"}
{"task_id": 143, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x, alpha: float=0.2, derivative: bool=False):\n    \"\"\"Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n    \"\"\"\n    x = np.asarray(x)\n    if derivative:\n        return np.where(x >= 0, 1, alpha)\n    else:\n        return np.where(x >= 0, x, alpha * x)"}
{"task_id": 144, "completion_id": 0, "solution": "import numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise \u20111.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    abs_diffs = np.abs(actual - predicted)\n    mae = np.mean(abs_diffs)\n    mae = round(mae, 4)\n    return mae"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        epsilon = 1e-12\n        return 1 - dot_product / (norm_x1 * norm_x2 + epsilon)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    predicted_labels = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        k_indices = np.argsort(distances)[:min(k, len(distances))]\n        k_labels = [y[i] for i in k_indices]\n        predicted_label = np.bincount(k_labels).argmax()\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 147, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * X_test.shape[0]\n    w = np.zeros(X_train.shape[1])\n    b = 0\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    for _ in range(epochs):\n        z = np.dot(X_train, w) + b\n        predictions = sigmoid(z)\n        dw = np.dot(X_train.T, predictions - y_train)\n        db = np.sum(predictions - y_train)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    z_test = np.dot(X_test, w) + b\n    predictions_test = sigmoid(z_test)\n    labels_test = (predictions_test >= 0.5).astype(int)\n    return labels_test.tolist()"}
{"task_id": 148, "completion_id": 0, "solution": "from typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    smoothed = [data[0]]\n    for x in data[1:]:\n        smoothed.append((1 - alpha) * smoothed[-1] + alpha * x)\n    smoothed = [round(s, 4) for s in smoothed]\n    return smoothed"}
{"task_id": 150, "completion_id": 0, "solution": "from heapq import heappush, heappop\nfrom typing import List, Tuple, Union\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    The maze is described by a 2-D list where 0 denotes a free cell and 1 denotes\n    a blocked cell. The function must use the A* algorithm with the Manhattan\n    heuristic to return *one* optimal path.\n\n    Args:\n        grid: Rectangular 2-D list of integers (0 or 1).\n\n    Returns:\n        \u2022 A list of (row, column) tuples that represents a shortest path\n          including the start (0,0) and goal (m-1,n-1) positions.\n        \u2022 -1 if no such path exists.\n    \"\"\"\n    (rows, cols) = (len(grid), len(grid[0]))\n    if grid[0][0] == 1 or grid[rows - 1][cols - 1] == 1:\n        return -1\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def heuristic(row: int, col: int) -> int:\n        return abs(row - rows + 1) + abs(col - cols + 1)\n    queue = [(0, 0, 0, [])]\n    visited = set((0, 0))\n    while queue:\n        (cost, row, col, path) = heappop(queue)\n        path = path + [(row, col)]\n        if row == rows - 1 and col == cols - 1:\n            return path\n        for (dr, dc) in movements:\n            (nr, nc) = (row + dr, col + dc)\n            if 0 <= nr < rows and 0 <= nc < cols and (grid[nr][nc] == 0) and ((nr, nc) not in visited):\n                new_cost = cost + 1 + heuristic(nr, nc)\n                heappush(queue, (new_cost, nr, nc, path))\n                visited.add((nr, nc))\n    return -1"}
{"task_id": 151, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(X: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-X))\ndef sigmoid_derivative(A: np.ndarray) -> np.ndarray:\n    \"\"\"Derivative of the sigmoid activation function.\"\"\"\n    return A * (1 - A)\ndef tanh(X: np.ndarray) -> np.ndarray:\n    \"\"\"Tanh activation function.\"\"\"\n    return np.tanh(X)\ndef tanh_derivative(A: np.ndarray) -> np.ndarray:\n    \"\"\"Derivative of the tanh activation function.\"\"\"\n    return 1 - A ** 2\ndef relu(X: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(X, 0)\ndef relu_derivative(A: np.ndarray) -> np.ndarray:\n    \"\"\"Derivative of the ReLU activation function.\"\"\"\n    return (A > 0).astype(np.float32)\ndef softmax(X: np.ndarray) -> np.ndarray:\n    \"\"\"Softmax activation function (evaluated along the last axis).\"\"\"\n    X_max = np.max(X, axis=-1, keepdims=True)\n    exp_X = np.exp(X - X_max)\n    return exp_X / np.sum(exp_X, axis=-1, keepdims=True)\ndef softmax_derivative(A: np.ndarray) -> np.ndarray:\n    \"\"\"Derivative of the softmax activation function (returns an array of ones).\"\"\"\n    return np.ones_like(A)\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as\n        `X`).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple `(A, grad)` where:\n          \u2022 `A`    \u2013 the activation applied to `X`.\n          \u2022 `grad` \u2013 the element-wise product of `upstream_grad` and the local\n                      derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    activations = {'sigmoid': sigmoid, 'tanh': tanh, 'relu': relu, 'softmax': softmax}\n    derivatives = {'sigmoid': sigmoid_derivative, 'tanh': tanh_derivative, 'relu': relu_derivative, 'softmax': softmax_derivative}\n    A = activations[activation](X)\n    A = np.round(A, 4)\n    grad = upstream_grad * derivatives[activation](A)\n    grad = np.round(grad, 4)\n    return (A, grad)"}
{"task_id": 152, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 154, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    (n_samples_X, n_features) = X.shape\n    (m_samples_Y, _) = Y.shape\n    distances = np.zeros((n_samples_X, m_samples_Y))\n    for i in range(n_samples_X):\n        for j in range(m_samples_Y):\n            distances[i, j] = np.sum((X[i] - Y[j]) ** 2)\n    kernel_matrix = np.exp(-gamma * distances)\n    kernel_matrix = np.round(kernel_matrix, 6).tolist()\n    return kernel_matrix"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.asarray(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(hidden1, 0)\n    hidden2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(hidden2, 0)\n    action = np.dot(hidden2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return np.round(action, 4).tolist()"}
{"task_id": 157, "completion_id": 0, "solution": "def accuracy_score(y_true, y_pred):\n    \"\"\"Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    if not y_true and (not y_pred):\n        return 0\n    matches = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n    accuracy = matches / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 158, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    XTX = X.T @ X\n    A = alpha * np.eye(XTX.shape[0])\n    if fit_intercept:\n        A[0, 0] = 0\n    inv_XTX_A = np.linalg.inv(XTX + A)\n    XTy = X.T @ y\n    beta_hat = inv_XTX_A @ XTy\n    beta_hat = np.round(beta_hat, 4)\n    return beta_hat.tolist()"}
{"task_id": 159, "completion_id": 0, "solution": "import numpy as np\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n    \"\"\"Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n    \"\"\"\n    d = x_i.shape[0]\n    ln_det_sigma = np.linalg.slogdet(sigma)[1]\n    quadratic_form = np.dot(x_i - mu, np.linalg.solve(sigma, x_i - mu))\n    log_prob = -0.5 * (d * np.log(2 * np.pi) + ln_det_sigma + quadratic_form)\n    return round(log_prob, 4)"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - np.dot(X[:, 1:], w[1:]))\n        for j in range(1, n + 1):\n            r_j = y - np.dot(X, w) + X[:, j] * w[j]\n            w[j] = soft_thresholding(np.dot(X[:, j], r_j), lambda_param * m) / np.sum(X[:, j] ** 2)\n    weights = [round(x, 4) for x in w[1:]]\n    bias = round(w[0], 4)\n    return (weights, bias)\ndef soft_thresholding(a: float, tau: float) -> float:\n    \"\"\"Soft-thresholding operator.\"\"\"\n    return np.sign(a) * np.maximum(np.abs(a) - tau, 0)"}
{"task_id": 161, "completion_id": 0, "solution": "import numpy as np\ndef factorization_machine_predict(X, w0, w, V):\n    \"\"\"\n    Predict binary class labels using a Factorization Machine.\n\n    Parameters:\n    X (2D NumPy array): Input data with shape (m, n), where m is the number of samples and n is the number of features.\n    w0 (scalar): Global bias.\n    w (1D NumPy array): Linear weights of length n.\n    V (2D NumPy array): Latent factors with shape (n, k).\n\n    Returns:\n    list: Binary class labels (1 or -1) for every sample.\n    \"\"\"\n    linear_term = np.dot(X, w)\n    quadratic_term = 0.5 * (np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2)).sum(axis=1)\n    scores = w0 + linear_term + quadratic_term\n    labels = np.where(scores >= 0, 1, -1).tolist()\n    return labels"}
{"task_id": 162, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, 'Shapes of Y_hat and Y do not match'\n    loss = -np.mean(np.sum(Y * np.log(Y_hat + epsilon), axis=1))\n    gradient = (Y_hat - Y) / Y_hat.shape[0]\n    loss = round(loss, 4)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 163, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    poly_features = np.vander(X, degree + 1, increasing=True)\n    if l1_ratio == 0:\n        gram_matrix = poly_features.T @ poly_features\n        tikhonov_term = reg_factor * np.eye(degree + 1)\n        tikhonov_term[0, 0] = 0\n        coefficients = np.linalg.solve(gram_matrix + tikhonov_term, poly_features.T @ y)\n    else:\n        coefficients = np.random.rand(degree + 1)\n        for _ in range(n_iterations):\n            predictions = poly_features @ coefficients\n            errors = predictions - y\n            gradient = 2 / len(X) * poly_features.T @ errors\n            l1_penalty = reg_factor * l1_ratio * np.sign(coefficients)\n            l2_penalty = reg_factor * (1 - l1_ratio) * coefficients\n            l1_penalty[0] = 0\n            l2_penalty[0] = 0\n            gradient += l1_penalty + l2_penalty\n            coefficients -= learning_rate * gradient\n    predictions = poly_features @ coefficients\n    return predictions.round(4).tolist()"}
{"task_id": 164, "completion_id": 0, "solution": "import numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Compute the binary classification log-loss (cross-entropy loss).\n\n    Parameters:\n    actual (numpy array): Ground-truth labels (0 or 1)\n    predicted (numpy array): Predicted probabilities (in [0, 1])\n\n    Returns:\n    float: Average log-loss rounded to 6 decimal places\n    \"\"\"\n    epsilon = 1e-15\n    predicted = np.clip(predicted, epsilon, 1 - epsilon)\n    log_loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    return round(log_loss, 6)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if len(x) != len(y):\n        return -1\n    distance = np.mean(x != y)\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 166, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    w = np.zeros(X_train.shape[1])\n    b = 0\n    for _ in range(max_iter):\n        errors = 0\n        for (x_i, y_i) in zip(X_train, y_train):\n            m = y_i * (np.dot(w, x_i) + b)\n            if m <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        if errors == 0:\n            break\n    scores = np.dot(X_test, w) + b\n    return [1 if score >= 0 else -1 for score in scores]"}
{"task_id": 167, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    gradient = (y_hat_clipped - y) / len(y)\n    loss = round(loss, 4)\n    gradient = [round(g, 4) for g in gradient]\n    return (loss, gradient)"}
{"task_id": 168, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    num_classes = len(np.unique(y_train))\n    num_features = X_train.shape[1]\n    means = np.zeros((num_classes, num_features))\n    variances = np.zeros((num_classes, num_features))\n    for c in range(num_classes):\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + 1e-06\n    prior_probabilities = np.array([np.mean(y_train == c) for c in range(num_classes)])\n    predicted_labels = np.zeros(len(X_test), dtype=int)\n    for (i, x) in enumerate(X_test):\n        log_probabilities = np.zeros(num_classes)\n        for c in range(num_classes):\n            log_probabilities[c] = np.log(prior_probabilities[c]) + np.sum(-0.5 * np.log(2 * np.pi * variances[c]) - 0.5 * (x - means[c]) ** 2 / variances[c])\n        predicted_labels[i] = np.argmax(log_probabilities)\n    return predicted_labels.tolist()"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided for generalized_cosine window')\n        w = np.zeros(N)\n        for (k, coeff) in enumerate(coefficients):\n            w += coeff * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(val, 4) for val in w.tolist()]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    label_mapping = {label: i for (i, label) in enumerate(np.unique(y_train))}\n    y_train_mapped = np.array([label_mapping[label] for label in y_train])\n    X_train = np.c_[np.ones(len(X_train)), X_train]\n    X_test = np.c_[np.ones(len(X_test)), X_test]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        indices = np.arange(len(X_train))\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, len(X_train_shuffled), batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            logits = np.dot(X_batch, weights)\n            probabilities = 1 / (1 + np.exp(-logits))\n            gradient = np.dot(X_batch.T, probabilities - y_batch) / len(X_batch)\n            weights -= learning_rate * gradient\n    logits = np.dot(X_test, weights)\n    probabilities = 1 / (1 + np.exp(-logits))\n    predictions = (probabilities >= 0.5).astype(int)\n    reverse_label_mapping = {v: k for (k, v) in label_mapping.items()}\n    predictions = [reverse_label_mapping[label] for label in predictions]\n    return predictions"}
{"task_id": 172, "completion_id": 0, "solution": "import numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    z = np.asarray(z)\n    tanh_z = np.tanh(z)\n    grad = 1 - tanh_z ** 2\n    grad = np.round(grad, 4)\n    if np.isscalar(z):\n        return grad.item()\n    else:\n        return grad.tolist()"}
{"task_id": 173, "completion_id": 0, "solution": "def alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    distance = sum((abs(ord(c) - ord(t)) for (c, t) in zip(candidate, target)))\n    return distance"}
{"task_id": 174, "completion_id": 0, "solution": "import numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    loss = -np.mean(labels * np.log(np.clip(predictions, epsilon, 1 - epsilon)))\n    predicted_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    accuracy = np.mean(predicted_classes == true_classes)\n    loss = round(loss, 4)\n    accuracy = round(accuracy, 4)\n    return (loss, accuracy)"}
{"task_id": 175, "completion_id": 0, "solution": "import numpy as np\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n    \"\"\"Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n    \"\"\"\n    weights = np.asarray(weights)\n    squared_weights = weights ** 2\n    sum_squared_weights = np.sum(squared_weights)\n    penalty = C * sum_squared_weights\n    return round(penalty, 4)"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Implement the AdaBoost ensemble algorithm from scratch using decision stumps \n    (one-level decision trees) as weak learners.\n\n    Args:\n    X_train (list[list[int | float]]): The training set feature matrix.\n    y_train (list[int]): The training set label vector.\n    X_test (list[list[int | float]]): The test set feature matrix.\n    n_estimators (int, optional): The number of decision stumps to train. Defaults to 10.\n\n    Returns:\n    list[int]: A list of predicted class labels for X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    sample_weights = np.full(len(y_train), 1 / len(y_train))\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = 1\n        for feature_index in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature_index]):\n                for polarity in [-1, 1]:\n                    predictions = X_train[:, feature_index] >= threshold if polarity == -1 else X_train[:, feature_index] < threshold\n                    predictions = predictions.astype(int)\n                    error = np.sum(sample_weights[y_train != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        if best_error == 0:\n            break\n        (feature_index, threshold, polarity) = best_stump\n        predictions = X_train[:, feature_index] >= threshold if polarity == -1 else X_train[:, feature_index] < threshold\n        predictions = predictions.astype(int) * 2 - 1\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        sample_weights *= np.exp(-alpha * (y_train * 2 - 1) * predictions)\n        sample_weights /= np.sum(sample_weights)\n        weak_learners.append((best_stump, alpha))\n    predictions = np.zeros(len(X_test))\n    for ((feature_index, threshold, polarity), alpha) in weak_learners:\n        predictions += alpha * (X_test[:, feature_index] >= threshold if polarity == -1 else X_test[:, feature_index] < threshold)\n    predictions = (predictions >= 0).astype(int)\n    return predictions.tolist()"}
{"task_id": 177, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n    \"\"\"Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n    \"\"\"\n    z = np.asarray(z, dtype=np.float64)\n    result = (np.exp(z) - np.exp(-z)) / (np.exp(z) + np.exp(-z))\n    result = np.round(result, 4)\n    if result.size == 1:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    x = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    v = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    p_best = x.copy()\n    g_best = x[np.argmin(np.sum(x ** 2, axis=1))]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        r2 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n        x = np.clip(x + v, -1, 1)\n        p_best = np.where(np.sum(x ** 2, axis=1) < np.sum(p_best ** 2, axis=1))[:, None] * x + np.where(np.sum(x ** 2, axis=1) >= np.sum(p_best ** 2, axis=1))[:, None] * p_best\n        g_best = x[np.argmin(np.sum(x ** 2, axis=1))]\n    return round(np.sum(g_best ** 2), 4)"}
{"task_id": 179, "completion_id": 0, "solution": "import re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    if lowercase:\n        line = line.lower()\n    if filter_punctuation:\n        line = re.sub('[' + string.punctuation + ']', '', line)\n    line = re.sub('\\\\s+', ' ', line).strip()\n    chars = list(line)\n    return chars"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    k = min(k, len(X_train)) if k > 0 else len(X_train)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_neighbours = y_train[k_indices]\n        if task == 'classification':\n            prediction = Counter(k_neighbours).most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(np.mean(k_neighbours), 4)\n        else:\n            raise ValueError(\"Invalid task type. Must be 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 181, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_neighbours = y_train[k_indices]\n        if problem == 'classify':\n            prediction = Counter(k_neighbours).most_common(1)[0][0]\n        elif problem == 'regress':\n            prediction = round(np.mean(k_neighbours), 4)\n        else:\n            raise ValueError(\"Invalid problem type. Choose 'classify' or 'regress'.\")\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 182, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X, Y, degree=2):\n    \"\"\"\n    Compute the polynomial kernel matrix between two data matrices X and Y.\n\n    Parameters:\n    X (2D list or NumPy array): Data matrix with shape (n, p)\n    Y (2D list or NumPy array): Data matrix with shape (m, p)\n    degree (int, optional): Polynomial degree (default: 2)\n\n    Returns:\n    list: Polynomial kernel matrix with shape (n, m) as a nested Python list\n\n    Raises:\n    ValueError: If input validation fails\n    \"\"\"\n    if not (isinstance(X, (list, np.ndarray)) and isinstance(Y, (list, np.ndarray))):\n        return -1\n    (X, Y) = (np.array(X), np.array(Y))\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n    kernel_matrix = (X @ Y.T) ** degree\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 183, "completion_id": 0, "solution": "import numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    if len(weight_shape) not in [2, 4]:\n        raise ValueError('Invalid weight shape. Must be 2D or 4D.')\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    else:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    limit = np.sqrt(6 / fan_in)\n    weights = np.random.uniform(-limit, limit, size=weight_shape)\n    return weights"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y: np.ndarray) -> float:\n        \"\"\"Calculate Gini impurity for a given set of labels.\"\"\"\n        p = np.array([np.mean(y == c) for c in np.unique(y)])\n        return 1 - np.sum(p ** 2)\n\n    def find_best_split(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n        \"\"\"Find the best split for a given set of features and labels.\"\"\"\n        best_feature = -1\n        best_threshold = -1\n        best_gini_gain = -1\n        for feature_idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_idx])\n            for i in range(len(thresholds) - 1):\n                threshold = (thresholds[i] + thresholds[i + 1]) / 2\n                left_y = y[X[:, feature_idx] < threshold]\n                right_y = y[X[:, feature_idx] >= threshold]\n                left_gini = gini_impurity(left_y)\n                right_gini = gini_impurity(right_y)\n                gini_gain = gini_impurity(y) - len(left_y) / len(y) * left_gini - len(right_y) / len(y) * right_gini\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int=0) -> dict:\n        \"\"\"Build a decision tree recursively.\"\"\"\n        if max_depth is not None and depth >= max_depth:\n            return {'leaf': np.bincount(y).argmax()}\n        if len(np.unique(y)) == 1:\n            return {'leaf': y[0]}\n        (feature_idx, threshold) = find_best_split(X, y)\n        if feature_idx == -1:\n            return {'leaf': np.bincount(y).argmax()}\n        left_X = X[X[:, feature_idx] < threshold]\n        left_y = y[X[:, feature_idx] < threshold]\n        right_X = X[X[:, feature_idx] >= threshold]\n        right_y = y[X[:, feature_idx] >= threshold]\n        if len(left_y) == 0 or len(right_y) == 0:\n            return {'leaf': np.bincount(y).argmax()}\n        return {'feature': feature_idx, 'threshold': threshold, 'left': build_tree(left_X, left_y, depth + 1), 'right': build_tree(right_X, right_y, depth + 1)}\n    tree = build_tree(X_train, y_train)\n\n    def predict(X: np.ndarray, tree: dict) -> int:\n        \"\"\"Make a prediction for a given sample.\"\"\"\n        if 'leaf' in tree:\n            return tree['leaf']\n        feature_idx = tree['feature']\n        threshold = tree['threshold']\n        if X[feature_idx] < threshold:\n            return predict(X, tree['left'])\n        else:\n            return predict(X, tree['right'])\n    predictions = [predict(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 185, "completion_id": 0, "solution": "import numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    X = np.asarray(X)\n    if X.size == 0:\n        raise ValueError('Got an empty matrix.')\n    if X.ndim == 1:\n        n_samples = 1\n        n_features = len(X)\n    else:\n        n_samples = X.shape[0]\n        n_features = np.prod(X.shape[1:])\n    return (n_samples, n_features)"}
{"task_id": 186, "completion_id": 0, "solution": "import numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    mean_y_train = np.mean(y_train)\n    predictions = [round(mean_y_train, 4)] * len(X_test)\n    return predictions"}
{"task_id": 188, "completion_id": 0, "solution": "import math\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n    \"\"\"Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function must implement the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    and respect the constraints described in the task description.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places, or \u22121 if\n               the input parameters are invalid.\n    \"\"\"\n    if not 0 <= min_epsilon < max_epsilon:\n        return -1\n    if decay_rate <= 0:\n        return -1\n    if step < 0:\n        return -1\n    epsilon = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n    epsilon = max(epsilon, min_epsilon)\n    epsilon = round(epsilon, 4)\n    return epsilon"}
{"task_id": 189, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.ndimage import interpolation\ndef batch_resample(X, new_dim, mode='bilinear'):\n    \"\"\"Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension ``(out_rows, out_cols)``.\n    mode : {\"bilinear\", \"neighbor\"}, default=\"bilinear\"\n        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n    \"\"\"\n    if mode not in ['bilinear', 'neighbor']:\n        raise NotImplementedError(f'Unrecognized resampling mode: {mode}')\n    (n_ex, in_rows, in_cols, in_channels) = X.shape\n    (out_rows, out_cols) = new_dim\n    resampled_batch = np.zeros((n_ex, out_rows, out_cols, in_channels))\n    for i in range(n_ex):\n        for c in range(in_channels):\n            if mode == 'bilinear':\n                resampled_batch[i, :, :, c] = interpolation.zoom(X[i, :, :, c], (out_rows / in_rows, out_cols / in_cols), order=1)\n            elif mode == 'neighbor':\n                resampled_batch[i, :, :, c] = interpolation.zoom(X[i, :, :, c], (out_rows / in_rows, out_cols / in_cols), order=0)\n    return np.round(resampled_batch, 4)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    p_k = counts / len(y)\n    G_whole_dataset = 1 - np.sum(p_k ** 2)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = G_whole_dataset\n    for feature_index in range(X.shape[1]):\n        values = np.unique(X[:, feature_index])\n        for threshold_value in values:\n            left_mask = X[:, feature_index] <= threshold_value\n            right_mask = ~left_mask\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            left_y = y[left_mask]\n            (left_classes, left_counts) = np.unique(left_y, return_counts=True)\n            left_p_k = left_counts / len(left_y)\n            G_left = 1 - np.sum(left_p_k ** 2)\n            right_y = y[right_mask]\n            (right_classes, right_counts) = np.unique(right_y, return_counts=True)\n            right_p_k = right_counts / len(right_y)\n            G_right = 1 - np.sum(right_p_k ** 2)\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            n_total = len(y)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini - 1e-12:\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n                best_gini = G_split\n            elif np.abs(G_split - best_gini) < 1e-12:\n                if feature_index < best_feature_index:\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold_value\n                    best_gini = G_split\n                elif feature_index == best_feature_index and threshold_value < best_threshold_value:\n                    best_threshold_value = threshold_value\n                    best_gini = G_split\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((x - y) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(x - y)), 'chebyshev': lambda x, y: np.max(np.abs(x - y)), 'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n\n    def validate_and_compute(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray)) and (len(x) == len(y)) and (len(x) > 0)):\n            return -1\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return -1\n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return -1\n        distance = supported_metrics[name](x, y)\n        return round(distance, 4)\n    if name not in supported_metrics:\n        return lambda x, y: -1\n    return validate_and_compute"}
{"task_id": 193, "completion_id": 0, "solution": "import numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(z / (1 + abs(z)), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        return [round(i / (1 + abs(i)), 4) for i in z]\n    else:\n        raise ValueError('Input must be a scalar or a list/NumPy array.')"}
{"task_id": 194, "completion_id": 0, "solution": "import numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    weights = np.array(weights)\n    gradients = np.array(gradients)\n    if G is None:\n        G = np.zeros_like(weights)\n    G += gradients ** 2\n    update_step = learning_rate * gradients / np.sqrt(G + eps)\n    new_weights = weights - update_step\n    new_weights = np.round(new_weights, 6).tolist()\n    new_G = np.round(G, 6).tolist()\n    return (new_weights, new_G)"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        sub_spaces = env.action_space.spaces\n        n_actions_per_dim = []\n        action_ids = None\n        for sub_space in sub_spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n        if action_ids is not None:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        action_dim = len(sub_spaces)\n    else:\n        if cont_action:\n            n_actions_per_dim = [np.inf]\n            action_ids = None\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = list(range(env.action_space.n))\n        action_dim = 1\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            phi_dn = phi[d][n]\n            beta[word] += phi_dn\n    beta /= beta.sum(axis=0, keepdims=True)\n    beta = np.round(beta, 4)\n    beta = beta.tolist()\n    return beta"}
{"task_id": 199, "completion_id": 0, "solution": "import numpy as np\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n    \"\"\"Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n    \"\"\"\n    mask = X < value\n    y_left = y[mask].tolist()\n    y_right = y[~mask].tolist()\n    return (y_left, y_right)"}
{"task_id": 200, "completion_id": 0, "solution": "import numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    weights = np.asarray(weights)\n    if weights.size == 0:\n        return 0.0\n    l1_penalty = C * np.sum(np.abs(weights))\n    l1_penalty = round(l1_penalty, 4)\n    return l1_penalty"}
{"task_id": 201, "completion_id": 0, "solution": "import numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-12\n    if axis is None:\n        norm = np.linalg.norm(p)\n        scale = min(1, m / (norm + epsilon))\n        result = p * scale\n    else:\n        norm = np.linalg.norm(p, axis=axis, keepdims=True)\n        scale = np.minimum(1, m / (norm + epsilon))\n        result = p * scale\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids = X[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    costs = np.full(n_samples, np.inf)\n    while True:\n        for (i, sample) in enumerate(X):\n            dists = np.linalg.norm(sample - medoids, axis=1)\n            labels[i] = np.argmin(dists)\n            costs[i] = dists[labels[i]]\n        best_swap = None\n        best_cost_reduction = 0\n        for i in range(k):\n            for j in range(k, n_samples):\n                new_medoids = medoids.copy()\n                new_medoids[i] = X[j]\n                new_costs = np.full(n_samples, np.inf)\n                for (idx, sample) in enumerate(X):\n                    dists = np.linalg.norm(sample - new_medoids, axis=1)\n                    new_costs[idx] = dists[np.argmin(dists)]\n                cost_reduction = np.sum(costs) - np.sum(new_costs)\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (i, j)\n                    best_cost_reduction = cost_reduction\n        if best_swap is None:\n            break\n        medoids[best_swap[0]] = X[best_swap[1]]\n    for (i, sample) in enumerate(X):\n        dists = np.linalg.norm(sample - medoids, axis=1)\n        labels[i] = np.argmin(dists)\n    return labels.tolist()"}
{"task_id": 203, "completion_id": 0, "solution": "import numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    probs = np.array(probs)\n    if np.any(probs < 0) or np.abs(np.sum(probs) - 1) > 1e-12:\n        return -1\n    N = len(probs)\n    scaled_probs = probs * N\n    small = np.where(scaled_probs < 1)[0].tolist()\n    large = np.where(scaled_probs >= 1)[0].tolist()\n    prob_table = [0.0] * N\n    alias_table = [0] * N\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        prob_table[l] = scaled_probs[l]\n        alias_table[l] = g\n        scaled_probs[g] = scaled_probs[g] + scaled_probs[l] - 1\n        if scaled_probs[g] < 1:\n            small.append(g)\n        else:\n            large.append(g)\n    for g in large:\n        prob_table[g] = 1.0\n    for l in small:\n        prob_table[l] = 1.0\n    prob_table = [round(p, 4) for p in prob_table]\n    return (prob_table, alias_table)\nprobs = [0.1, 0.2, 0.7]"}
{"task_id": 204, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    arr = np.asarray(data)\n    missing_count = np.sum(np.isnan(arr) | (arr == None))\n    return int(missing_count)"}
{"task_id": 205, "completion_id": 0, "solution": "def get_gym_environs(registry: list) -> list:\n    \"\"\"Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the key \"id\", the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n    \"\"\"\n    seen = set()\n    unique_ids = []\n    for item in registry:\n        if isinstance(item, dict) and 'id' in item:\n            id_value = item['id']\n            if id_value not in seen:\n                seen.add(id_value)\n                unique_ids.append(id_value)\n    return unique_ids"}
{"task_id": 206, "completion_id": 0, "solution": "import numpy as np\ndef absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.ndim != 1 or predicted.ndim != 1:\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    absolute_diff = np.abs(actual - predicted)\n    mae = np.mean(absolute_diff)\n    mae = round(mae, 4)\n    return mae"}
{"task_id": 207, "completion_id": 0, "solution": "def convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    (kernel_height, kernel_width) = filter_shape\n    (stride_height, stride_width) = stride\n    (pad_height, pad_width) = padding\n    output_height = (img_height + 2 * pad_height - kernel_height) / stride_height + 1\n    output_width = (img_width + 2 * pad_width - kernel_width) / stride_width + 1\n    if output_height.is_integer() and output_height > 0 and output_width.is_integer() and (output_width > 0) and (stride_height > 0) and (stride_width > 0):\n        return (int(output_height), int(output_width))\n    else:\n        return -1"}
{"task_id": 208, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length *N*.\n        categories: Optional complete list of unique categories of length *C*.\n            If *None*, the set of categories is inferred from *labels* in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where *C* is the number of categories. If an unknown label is\n        found when *categories* is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        categories = list(dict.fromkeys(labels))\n    if not all((label in categories for label in labels)):\n        return -1\n    encoding = np.zeros((len(labels), len(categories)), dtype=int)\n    for (i, label) in enumerate(labels):\n        encoding[i, categories.index(label)] = 1\n    return encoding.tolist()"}
{"task_id": 209, "completion_id": 0, "solution": "import numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    if len(payoffs) != len(payoff_probs):\n        return -1\n    expected_values = []\n    for k in range(len(payoffs)):\n        if len(payoffs[k]) != len(payoff_probs[k]):\n            return -1\n        if abs(sum(payoff_probs[k]) - 1) > 1e-08:\n            return -1\n        expected_value = np.round(np.sum(np.multiply(payoffs[k], payoff_probs[k])), 4)\n        expected_values.append(expected_value)\n    best_arm = np.argmax(expected_values)\n    best_ev = expected_values[best_arm]\n    return (expected_values, best_arm, best_ev)"}
{"task_id": 210, "completion_id": 0, "solution": "import functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n\n    @functools.wraps(decorator_func)\n    def wrapper(*args, **kwargs):\n        if len(args) == 1 and callable(args[0]):\n            return decorator_func(*args, **kwargs)\n        else:\n\n            def real_decorator(func):\n                return decorator_func(func, *args, **kwargs)\n            return real_decorator\n    return wrapper"}
{"task_id": 211, "completion_id": 0, "solution": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n\n    def classification_error(actual, predicted):\n        \"\"\"Compute the classification error between two sequences of labels.\"\"\"\n        if len(actual) != len(predicted) or len(actual) == 0:\n            return 1.0\n        mismatches = sum((1 for (a, p) in zip(actual, predicted) if a != p))\n        return mismatches / len(actual)\n    error = classification_error(actual, predicted)\n    if error == 1.0:\n        return -1.0\n    return round(1.0 - error, 4)"}
{"task_id": 212, "completion_id": 0, "solution": "from collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  When no\n    path exists an empty list is returned.\n\n    Parameters\n    ----------\n    graph : dict[str, list[str]]\n        Adjacency list of the directed graph.\n\n    Returns\n    -------\n    list[str]\n        Ordered list of layer names on the desired path or an empty list.\n    \"\"\"\n    queue = deque([('input', ['input'])])\n    visited = set()\n    shortest_path = []\n    while queue:\n        (node, path) = queue.popleft()\n        if node in visited:\n            continue\n        visited.add(node)\n        if node == 'output_realtime':\n            if not shortest_path or len(path) < len(shortest_path):\n                shortest_path = path\n            elif len(path) == len(shortest_path) and path < shortest_path:\n                shortest_path = path\n        for neighbor in graph.get(node, []):\n            queue.append((neighbor, path + [neighbor]))\n    return shortest_path"}
{"task_id": 213, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n    \"\"\"\n    if len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    if fan_in == 0:\n        return []\n    np.random.seed(42)\n    std_dev = np.sqrt(2 / fan_in)\n    weights = np.random.normal(loc=0, scale=std_dev, size=shape)\n    return weights.tolist()"}
{"task_id": 214, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function must return -1 if the two input sequences do not share the\n    same length. Otherwise, it should return the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays have to be supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    mse = np.mean((actual - predicted) ** 2)\n    mse = np.round(mse, 4)\n    return mse"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if len(x_train[0]) != len(x_test[0]) or n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    x_train_poly = np.hstack([np.ones((x_train.shape[0], 1)), np.power(x_train, np.arange(1, degree + 1))])\n    x_test_poly = np.hstack([np.ones((x_test.shape[0], 1)), np.power(x_test, np.arange(1, degree + 1))])\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - np.mean(x_train_poly[:, 1:], axis=0)) / np.std(x_train_poly[:, 1:], axis=0)\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - np.mean(x_train_poly[:, 1:], axis=0)) / np.std(x_train_poly[:, 1:], axis=0)\n    weights = np.zeros(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        gradients = np.dot(x_train_poly.T, errors) / x_train_poly.shape[0]\n        gradients[1:] += reg_factor * (l1_ratio * np.sign(weights[1:]) + (1 - l1_ratio) * weights[1:])\n        weights -= learning_rate * gradients\n    predictions = np.dot(x_test_poly, weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    prob = 1 / (1 + np.exp(-predicted))\n    grad = actual * (1 / (1 + np.exp(actual * predicted)))\n    hess = prob * (1 - prob)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    grad_list = grad.tolist()\n    hess_list = hess.tolist()\n    prob_list = prob.tolist()\n    return (grad_list, hess_list, prob_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a Blackjack hand.\n\n        If the hand contains an Ace and the sum + 10 is \u2264 21, exactly one Ace can be counted as 11 instead of 1.\n\n        Args:\n            hand: List of integers (1\u201310) representing a Blackjack hand.\n\n        Returns:\n            The highest legal score of the hand not larger than 21.\n        \"\"\"\n        total = sum(hand)\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return min(total, 21)\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        if len(player) == 2 and 1 in player and (10 in player):\n            return 1.5\n        else:\n            return 1\n    if player_score > dealer_score:\n        if len(player) == 2 and 1 in player and (10 in player):\n            return 1.5\n        else:\n            return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 220, "completion_id": 0, "solution": "import numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    if C_wt.size == 0:\n        phi = []\n    else:\n        (V, T) = C_wt.shape\n        phi = (C_wt + beta) / (np.sum(C_wt, axis=0, keepdims=True) + V * beta)\n        phi = np.round(phi, 4).tolist()\n    if C_dt.size == 0:\n        theta = []\n    else:\n        (D, T) = C_dt.shape\n        theta = (C_dt + alpha) / (np.sum(C_dt, axis=1, keepdims=True) + T * alpha)\n        theta = np.round(theta, 4).tolist()\n    return (phi, theta)"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if np.any(np.array(actual) < 0) or np.any(np.array(predicted) < 0):\n        return -1\n    squared_errors = squared_log_error(np.array(actual), np.array(predicted))\n    msle = np.mean(squared_errors)\n    return round(msle, 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.asarray(z)\n    sigmoid_z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_z = np.round(sigmoid_z, 4)\n    if sigmoid_z.size == 1:\n        return sigmoid_z.item()\n    else:\n        return sigmoid_z.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z = np.asarray(z)\n    activated = np.where(z >= 0, z, a * z)\n    result = activated.tolist()\n    return result"}
{"task_id": 225, "completion_id": 0, "solution": "import numpy as np\ndef hz2mel(hz, formula: str='htk') -> list:\n    \"\"\"Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula : {\"htk\", \"slaney\"}, optional\n        Conversion formula to use. \"htk\" corresponds to the formula used in\n        the Hidden Markov Model Toolkit, while \"slaney\" corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n        \"htk\".\n\n    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n    \"\"\"\n    assert formula in ['htk', 'slaney'], \"Invalid formula. Supported formulas are 'htk' and 'slaney'.\"\n    hz = np.asarray(hz)\n    if formula == 'htk':\n        mel = 2595 * np.log10(1 + hz / 700)\n    elif formula == 'slaney':\n        mel = 1127 * np.log(1 + hz / 700)\n    mel = np.round(mel, 4)\n    return mel.tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    ensemble = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = 1.0\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature_index] < threshold] = -1\n                    predictions *= polarity\n                    errors = np.where(predictions != y_train, 1, 0)\n                    error = np.dot(weights, errors)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_stump[0]] < best_stump[1]] = -1\n        predictions *= best_stump[2]\n        errors = np.where(predictions != y_train, 1, 0)\n        weights *= np.exp(-alpha * (1 - 2 * errors))\n        weights /= np.sum(weights)\n        ensemble.append((best_stump, alpha))\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in ensemble:\n        (feature_index, threshold, polarity) = stump\n        predictions += alpha * np.where(X_test[:, feature_index] < threshold, -1, 1) * polarity\n    return [int(np.sign(prediction)) for prediction in predictions]"}
{"task_id": 227, "completion_id": 0, "solution": "import numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    state = np.array(state)\n    W1 = np.array(W1)\n    W2 = np.array(W2)\n    W3 = np.array(W3)\n    (N,) = state.shape\n    if W1.shape != (N, W1.shape[1]):\n        return -1\n    (H1,) = (W1.shape[1],)\n    if W2.shape != (H1, W2.shape[1]):\n        return -1\n    (H2,) = (W2.shape[1],)\n    if W3.ndim == 2 and W3.shape != (H2, 1):\n        return -1\n    if W3.ndim == 1 and W3.shape != (H2,):\n        return -1\n    h1 = np.tanh(np.dot(state, W1))\n    h2 = np.tanh(np.dot(h1, W2))\n    v = np.dot(h2, W3)\n    return round(v.item(), 4)"}
{"task_id": 228, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is ``None`` the function should compute the distances inside *X* itself.\n    All distances must be rounded to four decimal places and the function must\n    return a plain Python nested list (use ``tolist()`` if needed).\n\n    Args:\n        X: NumPy array with shape (N, C).\n        Y: NumPy array with shape (M, C) or ``None``.  Default is ``None``.\n\n    Returns:\n        Nested list representing the N \u00d7 M matrix of Euclidean distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    x_norms = np.sum(X ** 2, axis=1, keepdims=True)\n    y_norms = np.sum(Y ** 2, axis=1)\n    dot_product = np.dot(X, Y.T)\n    distances = x_norms + y_norms - 2 * dot_product\n    distances = np.sqrt(distances).round(4)\n    return distances.tolist()"}
{"task_id": 230, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Gaussian Naive Bayes from scratch for binary classification.\n\n    Parameters:\n    X_train (numpy array): shape (n_samples, n_features)\n    y_train (numpy array): shape (n_samples,), each element is 0 or 1\n    X_test (numpy array): shape (m_samples, n_features)\n\n    Returns:\n    predicted_labels (list): list of integers, each element is 0 or 1\n    \"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    class_priors = np.array([np.mean(y_train == 0), np.mean(y_train == 1)])\n    means = np.zeros((2, n_features))\n    variances = np.zeros((2, n_features))\n    for c in [0, 1]:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + 1e-09\n    log_posteriors = np.zeros((X_test.shape[0], 2))\n    for (i, x) in enumerate(X_test):\n        for c in [0, 1]:\n            log_posterior = np.log(class_priors[c])\n            for j in range(n_features):\n                log_posterior += -0.5 * np.log(2 * np.pi * variances[c, j]) - 0.5 * (x[j] - means[c, j]) ** 2 / variances[c, j]\n            log_posteriors[i, c] = log_posterior\n    predicted_labels = np.argmax(log_posteriors, axis=1).tolist()\n    return predicted_labels"}
{"task_id": 231, "completion_id": 0, "solution": "def is_natural(hand: list[int]) -> bool:\n    \"\"\"\n    Detects if a given Blackjack hand is a natural (Ace and a ten-valued card).\n\n    Args:\n        hand (list[int]): A list of integers representing the ranks of the cards.\n            Ace is encoded as 1, and every ten-valued card is encoded as 10.\n\n    Returns:\n        bool: True if the hand is a natural, False otherwise.\n    \"\"\"\n    return len(hand) == 2 and (1 in hand and 10 in hand)"}
{"task_id": 232, "completion_id": 0, "solution": "import numpy as np\ndef is_one_hot(x: np.ndarray) -> bool:\n    \"\"\"Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n    \"\"\"\n    if x.ndim != 2:\n        return False\n    if not np.issubdtype(x.dtype, np.integer) or np.any(x < 0) or np.any(x > 1):\n        return False\n    if not np.all(np.sum(x, axis=1) == 1):\n        return False\n    return True"}
{"task_id": 234, "completion_id": 0, "solution": "import numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    posterior_alphas = np.array([prior_alpha + s for s in successes])\n    posterior_betas = np.array([prior_beta + f for f in failures])\n    samples = np.random.beta(posterior_alphas, posterior_betas)\n    return np.argmax(samples)"}
{"task_id": 235, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes.  If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes.  Each row is a\n        one-hot vector corresponding to the associated label.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError('Input array must be 1-D')\n    if n_classes is None:\n        n_classes = labels.max() + 1\n    elif n_classes < labels.max() + 1:\n        raise ValueError('n_classes must be at least max(labels) + 1')\n    one_hot = np.zeros((len(labels), n_classes), dtype=float)\n    one_hot[np.arange(len(labels)), labels] = 1.0\n    return one_hot"}
{"task_id": 236, "completion_id": 0, "solution": "import numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    n_batches = int(np.ceil(N / batchsize))\n    indices = np.arange(N, dtype=np.int64)\n    if shuffle:\n        np.random.shuffle(indices)\n\n    def mb_generator():\n        for i in range(n_batches):\n            start = i * batchsize\n            end = min(start + batchsize, N)\n            yield indices[start:end]\n    return (mb_generator(), n_batches)"}
{"task_id": 237, "completion_id": 0, "solution": "from typing import List\ndef score(hand: List[str]) -> int:\n    \"\"\"Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive).  If every possible value of\n        the hand exceeds 21 the function returns 0.\n    \"\"\"\n    score = 0\n    aces = 0\n    for card in hand:\n        if card == 'A':\n            aces += 1\n            score += 11\n        elif card in ['J', 'Q', 'K']:\n            score += 10\n        else:\n            score += int(card)\n    while score > 21 and aces:\n        score -= 10\n        aces -= 1\n    if score > 21:\n        return 0\n    return score"}
{"task_id": 239, "completion_id": 0, "solution": "import math\ndef determine_padding(filter_shape: tuple[int, int], output_shape: str='same') -> tuple[tuple[int, int], tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    (filter_height, filter_width) = filter_shape\n    pad_top = math.floor((filter_height - 1) / 2)\n    pad_bottom = math.ceil((filter_height - 1) / 2)\n    pad_left = math.floor((filter_width - 1) / 2)\n    pad_right = math.ceil((filter_width - 1) / 2)\n    return ((pad_top, pad_bottom), (pad_left, pad_right))"}
{"task_id": 240, "completion_id": 0, "solution": "import numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    encoding_dicts = {'obs2num': {}, 'num2obs': {}, 'act2num': {}, 'num2act': {}}\n    if obs_encoder is not None:\n        encoding_dicts['obs2num'] = obs_encoder\n        encoding_dicts['num2obs'] = {v: k for (k, v) in obs_encoder.items()}\n    elif obs_ids:\n        encoding_dicts['obs2num'] = {obs: i for (i, obs) in enumerate(obs_ids)}\n        encoding_dicts['num2obs'] = {i: obs for (i, obs) in enumerate(obs_ids)}\n    if act_encoder is not None:\n        encoding_dicts['act2num'] = act_encoder\n        encoding_dicts['num2act'] = {v: k for (k, v) in act_encoder.items()}\n    elif action_ids:\n        encoding_dicts['act2num'] = {act: i for (i, act) in enumerate(action_ids)}\n        encoding_dicts['num2act'] = {i: act for (i, act) in enumerate(action_ids)}\n    return encoding_dicts"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    result = (Q.reshape(shape) * scale).tolist()\n    return result"}
{"task_id": 242, "completion_id": 0, "solution": "import math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    unpulled_arms = [i for (i, count) in enumerate(pull_counts) if count == 0]\n    if unpulled_arms:\n        return unpulled_arms[0]\n    scores = []\n    for (ev, count) in zip(ev_estimates, pull_counts):\n        score = ev + C * math.sqrt(2 * math.log(current_step + 1) / count)\n        scores.append(score)\n    return scores.index(max(scores))"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = np.full(3, 1 / 3)\n    state_value = 4 * z3\n    action_probs = np.round(action_probs, 4).tolist()\n    state_value = np.round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 244, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple) or not all((isinstance(x, int) and x > 0 for x in shape)):\n        return -1\n    if not isinstance(sparsity, (int, float)) or sparsity < 0 or sparsity > 1:\n        return -1\n    random_numbers = np.random.rand(*shape)\n    binary_tensor = (random_numbers >= 1 - sparsity).astype(float)\n    result = binary_tensor.tolist()\n    return result"}
{"task_id": 247, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function must compute the expected reward for each arm (p_k * \u03bc_k) and\n    return a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  If\n    the input is invalid (see task description) the function should return -1.\n    \"\"\"\n    if len(payoff_dists) != len(payoff_probs) or len(payoff_dists) == 0:\n        return -1\n    payoff_dists = np.array(payoff_dists)\n    payoff_probs = np.array(payoff_probs)\n    if np.any(payoff_dists[:, 1] <= 0) or np.any((payoff_probs < 0) | (payoff_probs > 1)):\n        return -1\n    expected_rewards = payoff_probs * payoff_dists[:, 0]\n    best_arm = np.argmax(expected_rewards)\n    best_ev = round(expected_rewards[best_arm], 4)\n    return (best_ev, best_arm)"}
{"task_id": 248, "completion_id": 0, "solution": "import numpy as np\ndef baseline_prob_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[float]:\n    \"\"\"Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n    \"\"\"\n    p = np.mean(y_train)\n    predictions = np.full(X_test.shape[0], p)\n    predictions = np.round(predictions, 4)\n    predictions = predictions.tolist()\n    return predictions"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.maximum(np.dot(state, params['W1']) + params['b1'], 0)\n    hidden2 = np.maximum(np.dot(hidden1, params['W2']) + params['b2'], 0)\n    hidden3 = np.maximum(np.dot(hidden2, params['W3']) + params['b3'], 0)\n    scores = np.dot(hidden3, params['Wa']) + params['ba']\n    probabilities = np.exp(scores) / np.sum(np.exp(scores))\n    probabilities = np.round(probabilities, 4)\n    value = np.dot(hidden3, params['Wc']) + params['bc']\n    value = np.round(value, 4)\n    return (probabilities.tolist(), value.item())"}
{"task_id": 251, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Element-wise logistic sigmoid.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(1 / (1 + np.exp(-x)), 4)\n    elif isinstance(x, (list, tuple)):\n        return np.round(1 / (1 + np.exp(-np.array(x))), 4)\n    elif isinstance(x, np.ndarray):\n        return np.round(1 / (1 + np.exp(-x)), 4)\n    else:\n        raise ValueError('Invalid input type')\ndef tanh(x):\n    \"\"\"Element-wise hyperbolic tangent.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(np.tanh(x), 4)\n    elif isinstance(x, (list, tuple)):\n        return np.round(np.tanh(np.array(x)), 4)\n    elif isinstance(x, np.ndarray):\n        return np.round(np.tanh(x), 4)\n    else:\n        raise ValueError('Invalid input type')\ndef relu(x):\n    \"\"\"Element-wise Rectified Linear Unit.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(max(0, x), 4)\n    elif isinstance(x, (list, tuple)):\n        return np.round(np.maximum(0, np.array(x)), 4)\n    elif isinstance(x, np.ndarray):\n        return np.round(np.maximum(0, x), 4)\n    else:\n        raise ValueError('Invalid input type')\ndef leaky_relu(x, alpha: float=0.01):\n    \"\"\"Element-wise Leaky-ReLU with slope *alpha* for x<0.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(max(alpha * x, x), 4)\n    elif isinstance(x, (list, tuple)):\n        return np.round(np.where(np.array(x) < 0, alpha * np.array(x), np.array(x)), 4)\n    elif isinstance(x, np.ndarray):\n        return np.round(np.where(x < 0, alpha * x, x), 4)\n    else:\n        raise ValueError('Invalid input type')\ndef softmax(x):\n    \"\"\"Numerically stable softmax over a 1-D input.\"\"\"\n    if isinstance(x, (int, float)):\n        return round(np.exp(x) / np.sum(np.exp(x)), 4)\n    elif isinstance(x, (list, tuple)):\n        x = np.array(x)\n        e_x = np.exp(x - np.max(x))\n        return np.round(e_x / np.sum(e_x), 4)\n    elif isinstance(x, np.ndarray):\n        e_x = np.exp(x - np.max(x))\n        return np.round(e_x / np.sum(e_x), 4)\n    else:\n        raise ValueError('Invalid input type')\ndef get_activation(name):\n    \"\"\"Return the activation function by *name*.\n\n    Args:\n        name (str): One of {\"sigmoid\", \"tanh\", \"relu\", \"leaky_relu\", \"softmax\"}\n\n    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n    \"\"\"\n    activations = {'sigmoid': sigmoid, 'tanh': tanh, 'relu': relu, 'leaky_relu': leaky_relu, 'softmax': softmax}\n    if name not in activations:\n        raise ValueError('Invalid activation function.')\n    return activations[name]"}
{"task_id": 252, "completion_id": 0, "solution": "import numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad = (actual - predicted).tolist()\n    hess = [1.0] * len(actual)\n    return (grad, hess)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    l2_term = 0.5 * (1 - l1_ratio) * np.dot(w, w)\n    l1_term = l1_ratio * np.sum(np.abs(w))\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(grad, 4).tolist()\n    else:\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)"}
{"task_id": 255, "completion_id": 0, "solution": "def usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    total_value = sum(hand)\n    if 1 in hand:\n        total_value_with_ace = total_value + 10\n        if total_value_with_ace <= 21:\n            return True\n    return False"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n    for i in range(param.size):\n        idx = np.unravel_index(i, param_shape)\n        param_plus_epsilon = deepcopy(param)\n        param_plus_epsilon[idx] += epsilon\n        param_minus_epsilon = deepcopy(param)\n        param_minus_epsilon[idx] -= epsilon\n        predictions_plus_epsilon = []\n        predictions_minus_epsilon = []\n        for t in range(n_t):\n            model.parameters[param_name] = param_plus_epsilon\n            predictions_plus_epsilon.append(model.forward(X[:, :, t]))\n            model.parameters[param_name] = param_minus_epsilon\n            predictions_minus_epsilon.append(model.forward(X[:, :, t]))\n        loss_plus_epsilon = loss_func(predictions_plus_epsilon)\n        loss_minus_epsilon = loss_func(predictions_minus_epsilon)\n        grads[idx] = (loss_plus_epsilon - loss_minus_epsilon) / (2 * epsilon)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        (best_stump, best_error) = find_best_stump(X_train, y_train, weights)\n        stump_weight = 0.5 * np.log((1 - best_error) / best_error)\n        weights = update_weights(weights, y_train, best_stump, stump_weight)\n        stumps.append(best_stump)\n        stump_weights.append(stump_weight)\n    predictions = predict(X_test, stumps, stump_weights)\n    return predictions\ndef find_best_stump(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray) -> tuple:\n    \"\"\"Find the best decision stump for the given weights.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        weights: 1-D NumPy array of length m containing the weights of the training examples.\n\n    Returns:\n        A tuple containing the best decision stump and its weighted error.\n    \"\"\"\n    (m, n) = X_train.shape\n    best_stump = None\n    best_error = 1\n    for feature_idx in range(n):\n        thresholds = np.unique(X_train[:, feature_idx])\n        for threshold in thresholds:\n            stump = (feature_idx, threshold)\n            error = compute_error(X_train, y_train, weights, stump)\n            if error < best_error:\n                best_stump = stump\n                best_error = error\n    return (best_stump, best_error)\ndef compute_error(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray, stump: tuple) -> float:\n    \"\"\"Compute the weighted error of a decision stump.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        weights: 1-D NumPy array of length m containing the weights of the training examples.\n        stump: A tuple containing the feature index and threshold of the decision stump.\n\n    Returns:\n        The weighted error of the decision stump.\n    \"\"\"\n    (feature_idx, threshold) = stump\n    predictions = np.where(X_train[:, feature_idx] < threshold, -1, 1)\n    errors = np.where(predictions != y_train, 1, 0)\n    return np.sum(weights * errors)\ndef update_weights(weights: np.ndarray, y_train: np.ndarray, stump: tuple, stump_weight: float) -> np.ndarray:\n    \"\"\"Update the weights of the training examples.\n\n    Args:\n        weights: 1-D NumPy array of length m containing the weights of the training examples.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        stump: A tuple containing the feature index and threshold of the decision stump.\n        stump_weight: The weight of the decision stump.\n\n    Returns:\n        The updated weights of the training examples.\n    \"\"\"\n    (feature_idx, threshold) = stump\n    predictions = np.where(X_train[:, feature_idx] < threshold, -1, 1)\n    errors = np.where(predictions != y_train, 1, 0)\n    return weights * np.exp(-stump_weight * (1 - 2 * errors))\ndef predict(X_test: np.ndarray, stumps: list, stump_weights: list) -> list:\n    \"\"\"Predict labels for X_test using the decision stumps.\n\n    Args:\n        X_test: 2-D NumPy array of shape (k, n) containing the test features.\n        stumps: A list of tuples containing the feature index and threshold of each decision stump.\n        stump_weights: A list of floats containing the weights of each decision stump.\n\n    Returns:\n        A list of predicted labels for X_test.\n    \"\"\"\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, stump_weight) in zip(stumps, stump_weights):\n        (feature_idx, threshold) = stump\n        predictions += stump_weight * np.where(X_test[:, feature_idx] < threshold, -1, 1)\n    return np.sign(predictions).astype(int).tolist()"}
{"task_id": 258, "completion_id": 0, "solution": "import numpy as np\ndef hinge_loss(actual, predicted):\n    \"\"\"Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    losses = np.maximum(0, 1 - actual * predicted)\n    mean_loss = np.mean(losses).round(4)\n    return mean_loss"}
{"task_id": 259, "completion_id": 0, "solution": "import random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    random.seed(42)\n    sampled_transitions = random.sample(memory, batch_size)\n    return sampled_transitions"}
{"task_id": 260, "completion_id": 0, "solution": "from itertools import zip_longest\nfrom math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\n\n    The implementation must follow Sutton's original algorithm with the\n    modifications described in the task description (deterministic hash and\n    integer table size).\n\n    Args:\n        ihtORsize (int): Size of the hash table (positive integer).\n        numtilings (int): Number of tilings.\n        floats (list[float]): Continuous variables.\n        wrapwidths (list[int | None]): Optional wrap width for every float.  If\n            `None` or 0 no wrapping is applied.\n        ints (list[int] | None): Additional integer variables to include in the\n            coordinate list.\n        readonly (bool): Ignored \u2013 present for API compatibility.\n\n    Returns:\n        list[int]: Indices of the active tiles, one per tiling.\n    \"\"\"\n    quantised_floats = [floor(f * numtilings) for f in floats]\n    indices = []\n    for t in range(numtilings):\n        coords = [t]\n        b = t\n        for (q, wrapwidth) in zip_longest(quantised_floats, wrapwidths):\n            c = (q + b % numtilings) // numtilings\n            if wrapwidth is not None and wrapwidth > 0:\n                c %= wrapwidth\n            coords.append(c)\n            b += t * 2\n        if ints is not None:\n            coords.extend(ints)\n        index = 0\n        for coord in coords:\n            index = (index * 31 + coord) % ihtORsize\n        indices.append(index)\n    return indices"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    rng = np.random.default_rng()\n    array = rng.normal(loc=0, scale=std_dev, size=shape)\n    return array.astype(np.float32)"}
{"task_id": 263, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Sigmoid activation function\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef relu(z):\n    \"\"\"ReLU activation function\"\"\"\n    return np.maximum(0, z)\ndef linear(z):\n    \"\"\"Linear activation function (identity)\"\"\"\n    return z\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    a = np.array(x)\n    for (W, activation) in zip(weights, activations):\n        a = np.concatenate(([1], a))\n        z = np.dot(W, a)\n        if activation == 'sigmoid':\n            a = sigmoid(z)\n        elif activation == 'relu':\n            a = relu(z)\n        elif activation == 'linear':\n            a = linear(z)\n        else:\n            raise ValueError('Invalid activation function')\n    output = np.round(a, 4)\n    if len(output) == 1:\n        return output.item()\n    else:\n        return output.tolist()"}
{"task_id": 265, "completion_id": 0, "solution": "def king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:   L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:  L(x) = 0.003726653172066108\n\n    The result must be rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        loss = -0.25 * x + 82.50372665317208\n    elif 250 < x <= 600:\n        loss = 20.00372665317208\n    elif 600 < x <= 700:\n        loss = -0.2 * x + 140.00372665317207\n    else:\n        loss = 0.003726653172066108\n    return round(loss, 4)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        i = V.index(u)\n        j = V.index(v)\n        if v not in G[i]:\n            G[i].append(v)\n        if u not in G[j]:\n            G[j].append(u)\n    for i in range(len(G)):\n        G[i] = sorted(G[i], key=V.index)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': -1, 'threshold': 0.0, 'polarity': 1, 'weighted_error': np.inf}\n    for feature_idx in range(n_features):\n        (thresholds, classes) = zip(*sorted(zip(X[:, feature_idx], y)))\n        num_pos = np.sum(sample_weights[y == 1])\n        num_neg = np.sum(sample_weights[y == -1])\n        weighted_error = np.inf\n        for i in range(n_samples):\n            if i > 0 and thresholds[i] == thresholds[i - 1]:\n                continue\n            left_neg = np.sum(sample_weights[classes[:i] == -1])\n            left_pos = np.sum(sample_weights[classes[:i] == 1])\n            right_neg = num_neg - left_neg\n            right_pos = num_pos - left_pos\n            error_left = left_pos + right_neg\n            error_right = left_neg + right_pos\n            if error_left < weighted_error:\n                weighted_error = error_left\n                best_stump['feature_index'] = feature_idx\n                best_stump['threshold'] = thresholds[i]\n                best_stump['polarity'] = 1\n                best_stump['weighted_error'] = weighted_error\n            if error_right < weighted_error:\n                weighted_error = error_right\n                best_stump['feature_index'] = feature_idx\n                best_stump['threshold'] = thresholds[i]\n                best_stump['polarity'] = -1\n                best_stump['weighted_error'] = weighted_error\n    best_stump['threshold'] = round(best_stump['threshold'], 4)\n    best_stump['weighted_error'] = round(best_stump['weighted_error'], 4)\n    return best_stump"}
{"task_id": 268, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations, permutations\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    adj_matrix = [[0] * n_vertices for _ in range(n_vertices)]\n    if n_vertices == 1:\n        return adj_matrix\n    if directed:\n        edges = list(permutations(range(n_vertices), 2))\n    else:\n        edges = list(combinations(range(n_vertices), 2))\n    for edge in edges:\n        rand_num = np.random.rand()\n        if rand_num <= edge_prob:\n            adj_matrix[edge[0]][edge[1]] = 1\n            if not directed:\n                adj_matrix[edge[1]][edge[0]] = 1\n    return adj_matrix"}
{"task_id": 269, "completion_id": 0, "solution": "def count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    first_layer_weights = state_dimensions * 164\n    first_layer_biases = 164\n    first_layer_params = first_layer_weights + first_layer_biases\n    second_layer_weights = 164 * action_dimensions\n    second_layer_biases = action_dimensions\n    second_layer_params = second_layer_weights + second_layer_biases\n    total_params = first_layer_params + second_layer_params\n    return total_params"}
{"task_id": 270, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n    \"\"\"Determine the best arm for a contextual linear bandit.\n\n    Each column *k* of *context* (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column *k* of *thetas*  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm *k* is x_k^T \u03b8_k.\n\n    The function must return the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  If more\n    than one arm attains the maximal reward (after rounding), return the\n    smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n    \"\"\"\n    rewards = np.sum(context * thetas, axis=0)\n    rounded_rewards = np.round(rewards, 4)\n    best_arm = np.argmax(rounded_rewards)\n    best_reward = rounded_rewards[best_arm]\n    return (best_reward, best_arm)"}
{"task_id": 271, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    left_grad = np.array(left_pred) - np.array(left_true)\n    left_hess = np.ones_like(left_grad)\n    right_grad = np.array(right_pred) - np.array(right_true)\n    right_hess = np.ones_like(right_grad)\n    G_left = np.sum(left_grad)\n    H_left = np.sum(left_hess)\n    G_right = np.sum(right_grad)\n    H_right = np.sum(right_hess)\n    G_parent = G_left + G_right\n    H_parent = H_left + H_right\n    score_left = G_left ** 2 / H_left\n    score_right = G_right ** 2 / H_right\n    score_parent = G_parent ** 2 / H_parent\n    gain = 0.5 * (score_left + score_right - score_parent)\n    return round(gain, 4)"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    parent_entropy = entropy(target)\n    sorted_feature = sorted(set(feature))\n    if len(sorted_feature) == 1:\n        return (None, 0.0)\n    best_threshold = None\n    best_gain = 0.0\n    for i in range(len(sorted_feature) - 1):\n        threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n        left_target = [t for (f, t) in zip(feature, target) if f < threshold]\n        right_target = [t for (f, t) in zip(feature, target) if f >= threshold]\n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n        gain = parent_entropy - len(left_target) / len(target) * left_entropy - len(right_target) / len(target) * right_entropy\n        if gain > best_gain:\n            best_threshold = threshold\n            best_gain = gain\n    if best_gain <= 0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_gain, 4))\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    label_counts = Counter(labels)\n    total = sum(label_counts.values())\n    entropy = 0.0\n    for count in label_counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return entropy"}
{"task_id": 274, "completion_id": 0, "solution": "import numpy as np\ndef small_norm_clip(values):\n    \"\"\"Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n    \"\"\"\n    arr = np.asarray(values)\n    clipped_arr = np.clip(arr, -5, 5)\n    clipped_list = clipped_arr.tolist()\n    return clipped_list"}
{"task_id": 276, "completion_id": 0, "solution": "import math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\n\n    The model is trained on *corpus* using the given *N* and *k* (smoothing\n    parameter).  All details of tokenisation, padding, vocabulary construction\n    and probability estimation are described in the task specification.\n\n    Args:\n        corpus: List of training sentences.\n        sentence: The sentence whose probability needs to be computed.\n        N: Order of the model (1 for unigram, 2 for bigram, etc.).\n        k: Additive smoothing parameter (default 1.0).\n        unk: If True, unseen tokens are mapped to a special <unk> symbol.\n\n    Returns:\n        A single float, rounded to 4 decimal places, representing the base-10\n        logarithm of the sentence probability.\n    \"\"\"\n    corpus = ['<bol> ' + s + ' <eol>' for s in corpus]\n    sentence = '<bol> ' + sentence + ' <eol>'\n    corpus_tokens = [token.strip(string.punctuation) for s in corpus for token in s.split()]\n    sentence_tokens = [token.strip(string.punctuation) for token in sentence.split()]\n    vocab = set(corpus_tokens)\n    if unk:\n        vocab.add('<unk>')\n    oov_words = set(sentence_tokens) - vocab\n    if unk:\n        sentence_tokens = ['<unk>' if token in oov_words else token for token in sentence_tokens]\n    ngram_counts = Counter()\n    for s in corpus:\n        tokens = [token.strip(string.punctuation) for token in s.split()]\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram] += 1\n    total_tokens = len(corpus_tokens)\n    vocab_size = len(vocab)\n    log_prob = 0.0\n    for i in range(len(sentence_tokens) - N + 1):\n        ngram = tuple(sentence_tokens[i:i + N])\n        history = ngram[:-1]\n        word = ngram[-1]\n        history_count = sum((count for (ngram, count) in ngram_counts.items() if ngram[:-1] == history))\n        if N == 1:\n            prob = (ngram_counts[ngram] + k) / (total_tokens + k * vocab_size)\n        else:\n            prob = (ngram_counts[ngram] + k) / (history_count + k * vocab_size)\n        log_prob += math.log10(prob)\n    return round(log_prob, 4)"}
{"task_id": 277, "completion_id": 0, "solution": "def is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    tuple_action = isinstance(env['action_space'], (tuple, dict))\n    tuple_obs = isinstance(env['observation_space'], (tuple, dict))\n    return (tuple_action, tuple_obs)"}
{"task_id": 278, "completion_id": 0, "solution": "def evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    if 'value' in tree:\n        return tree['value']\n    feature_i = tree['feature_i']\n    threshold = tree['threshold']\n    if sample[feature_i] <= threshold:\n        return evaluate_decision_tree(tree['true_branch'], sample)\n    else:\n        return evaluate_decision_tree(tree['false_branch'], sample)"}
{"task_id": 279, "completion_id": 0, "solution": "import numpy as np\ndef mse_loss(y_true, y_pred):\n    \"\"\"Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    mse = np.mean((y_pred - y_true) ** 2)\n    gradient = 2 / len(y_true) * (y_pred - y_true)\n    gradient = [round(x, 4) for x in gradient]\n    binary_pred = (y_pred >= 0.5).astype(int)\n    accuracy = np.mean(binary_pred == y_true)\n    mse = round(mse, 4)\n    accuracy = round(accuracy, 4)\n    return (mse, gradient, accuracy)"}
{"task_id": 280, "completion_id": 0, "solution": "import numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError('alpha must be non-negative')\n    if return_grad:\n        grad = alpha * w\n        return np.round(grad, 4)\n    else:\n        reg_value = 0.5 * alpha * np.sum(w ** 2)\n        return round(reg_value, 4)"}
{"task_id": 281, "completion_id": 0, "solution": "import numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n\n    class L1RegularizationImpl:\n\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w: np.ndarray) -> float:\n            \"\"\"Return the L1 penalty value\"\"\"\n            return self.alpha * np.sum(np.abs(w))\n\n        def grad(self, w: np.ndarray) -> np.ndarray:\n            \"\"\"Return the gradient of the penalty\"\"\"\n            return self.alpha * np.sign(w)\n    return L1RegularizationImpl(alpha)"}
{"task_id": 282, "completion_id": 0, "solution": "import math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation must be *online*: iterate over the data once while\n    keeping only a constant amount of memory (do not call numpy.mean,\n    numpy.var, statistics.mean, etc.).  Implement Welford's method as\n    explained in the task description.  All three returned numbers must\n    be rounded to 4 decimal places.  If the input list is empty return\n    (0.0, 0.0, 0.0).\n    \"\"\"\n    n = 0\n    m = 0.0\n    s = 0.0\n    for x in data:\n        n += 1\n        delta = x - m\n        m += delta / n\n        s += delta * (x - m)\n    if n > 1:\n        variance = s / (n - 1)\n    else:\n        variance = 0.0\n    std = math.sqrt(variance)\n    return (round(m, 4), round(variance, 4), round(std, 4))"}
{"task_id": 283, "completion_id": 0, "solution": "import numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    probabilities = 1 / (1 + np.exp(-predicted))\n    gradients = probabilities - actual\n    hessians = probabilities * (1 - probabilities)\n    sum_gradients = np.sum(gradients)\n    sum_hessians = np.sum(hessians)\n    leaf_value = sum_gradients / (sum_hessians + regularization)\n    gain = 0.5 * sum_gradients ** 2 / (sum_hessians + regularization)\n    return [round(leaf_value, 4), round(gain, 4)]"}
{"task_id": 284, "completion_id": 0, "solution": "def iht_get_index(obj: object, size: int, table: dict, overfull_count: list[int], readonly: bool=False) -> int | None:\n    \"\"\"Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n    \"\"\"\n    if obj in table:\n        return table[obj]\n    if len(table) >= size:\n        if not readonly:\n            overfull_count[0] += 1\n        return hash(obj) % size\n    if not readonly:\n        table[obj] = len(table)\n        return table[obj]\n    return None"}
{"task_id": 285, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    x = np.atleast_2d(x)\n    y = np.atleast_2d(y)\n    if x.shape[1] != y.shape[1]:\n        return -1\n    kernel_matrix = x @ y.T\n    result = kernel_matrix.tolist()\n    return result"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is None or not callable(initializer):\n        raise ValueError('Invalid initialization function.')\n    return initializer\nname = 'ones_init'"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_h = (H - p_h) // s_h + 1\n    output_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, output_h, output_w))\n    for i in range(output_h):\n        for j in range(output_w):\n            h_start = i * s_h\n            h_end = h_start + p_h\n            w_start = j * s_w\n            w_end = w_start + p_w\n            pooled_output[:, :, i, j] = np.mean(X[:, :, h_start:h_end, w_start:w_end], axis=(2, 3))\n    grad_input = np.zeros_like(X)\n    for i in range(output_h):\n        for j in range(output_w):\n            h_start = i * s_h\n            h_end = h_start + p_h\n            w_start = j * s_w\n            w_end = w_start + p_w\n            grad_input[:, :, h_start:h_end, w_start:w_end] += accum_grad[:, :, i, j] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 288, "completion_id": 0, "solution": "import numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars, return the squared difference.\n    If they are one-dimensional iterables (same length), return the mean squared\n    error.  Return -1 for length mismatches or empty iterables.\n\n    All results must be rounded to 4 decimal places.\n    \"\"\"\n    if np.isscalar(actual) and np.isscalar(predicted):\n        return round((actual - predicted) ** 2, 4)\n    if hasattr(actual, '__len__') and hasattr(predicted, '__len__'):\n        if len(actual) != len(predicted) or len(actual) == 0:\n            return -1\n        mse = np.mean((np.array(actual) - np.array(predicted)) ** 2)\n        return round(mse, 4)\n    raise ValueError('Inputs must be scalars or one-dimensional iterables')"}
{"task_id": 289, "completion_id": 0, "solution": "def format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    formatted_entries = [f'{field}: \"{value}\"' for (field, value) in entries]\n    result = '\\n'.join(formatted_entries)\n    return result"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Leaf) or isinstance(tree_b, Leaf):\n        return False\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 291, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function must return -1.\n    \"\"\"\n    if not 1 <= n_components <= X.shape[1]:\n        return -1\n    cov_matrix = np.cov(X, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :n_components]\n    for i in range(n_components):\n        if principal_components[0, i] < 0:\n            principal_components[:, i] *= -1\n    transformed_X = X @ principal_components\n    result = np.round(transformed_X, 4).tolist()\n    return result"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    if parent1_array.shape != parent2_array.shape:\n        return -1\n    num_columns = parent1_array.shape[1]\n    if cutoff < 0 or cutoff > num_columns:\n        raise ValueError('Cutoff must be within the range [0, num_columns]')\n    child1_array = np.concatenate((parent1_array[:, :cutoff], parent2_array[:, cutoff:]), axis=1)\n    child2_array = np.concatenate((parent2_array[:, :cutoff], parent1_array[:, cutoff:]), axis=1)\n    child1 = child1_array.tolist()\n    child2 = child2_array.tolist()\n    return (child1, child2)"}
{"task_id": 293, "completion_id": 0, "solution": "def map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    agent_env_map = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    agent_name = agent_name.strip().lower()\n    env_info = agent_env_map.get(agent_name)\n    if env_info is None:\n        return -1\n    return env_info"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {vertex: [] for vertex in G['_V2I']}\n    for edges in G['_G']:\n        for edge in edges:\n            (source, target, weight) = edge\n            adj[source].append((target, weight))\n            if not G['is_directed'] and source != target:\n                adj[target].append((source, weight))\n    for vertex in adj:\n        adj[vertex] = sorted(adj[vertex])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 297, "completion_id": 0, "solution": "import numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    if feature_range[0] >= feature_range[1]:\n        return -1\n    data_array = np.array(data, dtype=float)\n    min_values = np.min(data_array, axis=0)\n    max_values = np.max(data_array, axis=0)\n    constant_columns = np.where(min_values == max_values)[0]\n    max_values[constant_columns] += 1\n    scaled_data = (data_array - min_values) / (max_values - min_values)\n    scaled_data = scaled_data * (feature_range[1] - feature_range[0]) + feature_range[0]\n    scaled_data = np.nan_to_num(scaled_data)\n    scaled_data = np.round(scaled_data, 4).tolist()\n    return scaled_data"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    tokens = []\n    for sentence in corpus:\n        sentence_tokens = sentence.split()\n        if N > 1:\n            sentence_tokens = ['<bol>'] * (N - 1) + sentence_tokens + ['<eol>']\n        tokens.extend(sentence_tokens)\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    for i in range(len(tokens) - N + 1):\n        ngram = tuple(tokens[i:i + N])\n        prefix = ngram[:-1]\n        ngram_counts[ngram] += 1\n        prefix_counts[prefix] += 1\n    probabilities = defaultdict(float)\n    for (ngram, count) in ngram_counts.items():\n        prefix = ngram[:-1]\n        probabilities[ngram] = count / prefix_counts[prefix]\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if ngram not in probabilities:\n            return float('-inf')\n        log_prob += math.log(probabilities[ngram])\n    log_prob = round(log_prob, 4)\n    return log_prob"}
{"task_id": 299, "completion_id": 0, "solution": "import numpy as np\nfrom __future__ import annotations\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    centroids = X[:k, :]\n    cluster_assignments = [0] * X.shape[0]\n    for _ in range(max_iterations):\n        for (i, sample) in enumerate(X):\n            distances = np.linalg.norm(sample - centroids, axis=1)\n            cluster_assignments[i] = np.argmin(distances)\n        new_centroids = np.array([X[cluster_assignments == i].mean(axis=0) if np.any(cluster_assignments == i) else centroids[i] for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return cluster_assignments"}
{"task_id": 300, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Union\nNumber = Union[int, float]\ndef top_k_elements(sequence: List[Number], k: int, order: str='largest') -> List[Number]:\n    \"\"\"Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order: \"largest\" to retain the k biggest values, \"smallest\" to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n    \"\"\"\n    if k <= 0 or not sequence:\n        return []\n    if k >= len(sequence):\n        return sorted(sequence, reverse=order == 'largest')\n    heap = sequence[:k]\n    heapq.heapify(heap)\n    for num in sequence[k:]:\n        if order == 'largest':\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n        elif num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return sorted(heap, reverse=order == 'largest')"}
{"task_id": 301, "completion_id": 0, "solution": "class Node:\n\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.val < other.val\n\n    def __le__(self, other):\n        return self.val <= other.val\n\n    def __gt__(self, other):\n        return self.val > other.val\n\n    def __ge__(self, other):\n        return self.val >= other.val\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n    root = Node(pairs[0][0], pairs[0][1])\n    for (key, val) in pairs[1:]:\n        node = Node(key, val)\n        insert_node(root, node)\n    return inorder_traversal(root)\ndef inorder_traversal(root):\n    \"\"\"Perform an in-order traversal of the binary search tree and return the keys.\"\"\"\n    keys = []\n    if root:\n        keys = inorder_traversal(root.left)\n        keys.append(root.key)\n        keys += inorder_traversal(root.right)\n    return keys"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + dist)\n            W[j, i] = W[i, j]\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]\n    centroids = E[:k, :]\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        prev_labels = labels.copy()\n        for i in range(n_samples):\n            dists = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(dists)\n        for j in range(k):\n            points_in_cluster = E[labels == j]\n            if len(points_in_cluster) == 0:\n                centroids[j] = E[np.random.randint(n_samples)]\n            else:\n                centroids[j] = np.mean(points_in_cluster, axis=0)\n        if np.all(labels == prev_labels):\n            break\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = '-' * 25 + ' DEBUG ' + '-' * 25 + f'\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n-' * 23 + ' END DEBUG ' + '-' * 23\n    return debug_str"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V_inv = np.eye(X.shape[1]) / V\n    elif len(V.shape) == 1:\n        V_inv = np.diag(1 / V)\n    else:\n        V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    mu_b = np.round(mu_b, 4)\n    return mu_b.tolist()"}
{"task_id": 305, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    x = np.asarray(x)\n    output = np.empty_like(x, dtype=float)\n    output[x >= 0] = 1 / (1 + np.exp(-x[x >= 0]))\n    output[x < 0] = np.exp(x[x < 0]) / (1 + np.exp(x[x < 0]))\n    return np.round(output, 4).tolist()"}
{"task_id": 307, "completion_id": 0, "solution": "import numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target vector (or array) of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        ``(X_sample, y_sample)`` where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    n_samples = X.shape[0]\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    return (X[idxs], y[idxs])"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    mel_values = np.linspace(min_mel, max_mel, n_filters + 2)\n    freq_values = 700 * (10 ** (mel_values / 2595) - 1)\n    filterbank = [[0.0] * (N // 2 + 1) for _ in range(n_filters)]\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            left_slope = (freq_values[i + 1] - freq_values[i]) / (freq_values[i + 1] - freq_values[i - 1])\n            right_slope = (freq_values[i + 2] - freq_values[i + 1]) / (freq_values[i + 2] - freq_values[i])\n            centre_freq = k * fs / N\n            weight = max(0, min(left_slope * (centre_freq - freq_values[i - 1]), right_slope * (freq_values[i + 2] - centre_freq)))\n            filterbank[i][k] = weight\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] = [w * 2 / (freq_values[i + 2] - freq_values[i]) for w in filterbank[i]]\n    filterbank = [[round(w, 4) for w in row] for row in filterbank]\n    return filterbank"}
{"task_id": 309, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n    \"\"\"Return Factorization Machine predictions for all samples in *X*.\n\n    The function must implement the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v* and return a Python list\n    of floats rounded to four decimal places.\n    \"\"\"\n    linear_term = np.dot(X, w)\n    k = v.shape[1]\n    quadratic_term = 0.5 * np.sum(np.dot(X, v) ** 2 - (X ** 2).dot(v ** 2), axis=1)\n    predictions = w0 + linear_term + quadratic_term\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 310, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns ``-1`` if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or ``-1`` on invalid\n        input.\n    \"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    squared_diffs = (actual - predicted) ** 2\n    mean_squared_diff = np.mean(squared_diffs)\n    rmse = np.sqrt(mean_squared_diff)\n    return round(rmse, 4)"}
{"task_id": 311, "completion_id": 0, "solution": "import numpy as np\ndef clip_non_negative(arr):\n    \"\"\"Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n    \"\"\"\n    arr = np.asarray(arr, dtype=np.float64)\n    clipped_arr = np.clip(arr, a_min=0.0, a_max=None)\n    clipped_list = clipped_arr.tolist()\n    return clipped_list"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    n = np.arange(window_len)\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return np.round(window, 4).tolist()"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        return digamma(x) - 1 / x\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_sum = sum(gamma[d])\n    digamma_gamma_dt = digamma(gamma[d][t])\n    digamma_gamma_sum = digamma(gamma_sum)\n    expectation = digamma_gamma_dt - digamma_gamma_sum\n    return round(expectation, 4)"}
{"task_id": 315, "completion_id": 0, "solution": "import numpy as np\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n\n    def mae(y_true, y_pred):\n        return np.mean(np.abs(np.array(y_true) - np.array(y_pred)))\n\n    def mse(y_true, y_pred):\n        return np.mean((np.array(y_true) - np.array(y_pred)) ** 2)\n\n    def binary_cross_entropy(y_true, y_pred):\n        y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)\n        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    losses = {'mae': mae, 'mean_absolute_error': mae, 'mse': mse, 'mean_squared_error': mse, 'cross_entropy': binary_cross_entropy, 'log_loss': binary_cross_entropy, 'ce': binary_cross_entropy}\n    name = name.replace('_', '').lower()\n    if name in losses:\n        return lambda y_true, y_pred: round(losses[name](y_true, y_pred), 4)\n    else:\n        raise ValueError('Invalid loss function.')"}
{"task_id": 316, "completion_id": 0, "solution": "import numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x = np.asarray(x)\n    y = np.asarray(y)\n    distance = np.sqrt(np.sum((x - y) ** 2))\n    return round(distance, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_prediction) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_label, curr_prediction) = params[ix]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return report"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    ensemble = []\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = 1.0\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    predictions = np.sign(X_train[:, j] - t) * p\n                    errors = np.where(predictions != y_train, 1, 0)\n                    error = np.dot(weights, errors)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (j, t, p)\n        (j, t, p) = best_stump\n        predictions = np.sign(X_train[:, j] - t) * p\n        errors = np.where(predictions != y_train, 1, 0)\n        weights *= np.exp(errors * np.log((1 - best_error) / best_error))\n        weights /= np.sum(weights)\n        ensemble.append((best_stump, 0.5 * np.log((1 - best_error) / best_error)))\n    predictions = []\n    for x in X_test:\n        score = 0\n        for (stump, alpha) in ensemble:\n            (j, t, p) = stump\n            score += alpha * np.sign(x[j] - t) * p\n        predictions.append(int(np.sign(score)))\n    return predictions"}
{"task_id": 319, "completion_id": 0, "solution": "import numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X = np.c_[np.ones(X.shape[0]), X]\n    theta = np.zeros(X.shape[1])\n    for _ in range(epochs):\n        for (x_i, y_i) in zip(X, y):\n            prediction = np.dot(theta, x_i)\n            error = prediction - y_i\n            theta -= learning_rate * error * x_i\n    return [round(t, 4) for t in theta]"}
{"task_id": 321, "completion_id": 0, "solution": "import numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    np.random.seed(42)\n    alphabet = string.ascii_letters + ' '\n    indices = {char: i for (i, char) in enumerate(alphabet)}\n    population = [''.join(np.random.choice(list(alphabet), size=len(target))) for _ in range(population_size)]\n    best_individual = population[0]\n    best_fitness = 0\n    for _ in range(iterations):\n        fitnesses = []\n        for individual in population:\n            fitness = 1 / (sum((abs(indices[individual[i]] - indices[target[i]]) for i in range(len(target)))) + 1e-06)\n            fitnesses.append(fitness)\n            if fitness > best_fitness:\n                best_individual = individual\n                best_fitness = fitness\n        parents = np.random.choice(population, size=population_size, replace=False, p=np.array(fitnesses) / sum(fitnesses))\n        children = []\n        for i in range(0, population_size, 2):\n            (parent1, parent2) = (parents[i], parents[i + 1])\n            crossover_point = np.random.randint(1, len(target))\n            child1 = parent1[:crossover_point] + parent2[crossover_point:]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:]\n            children.extend([child1, child2])\n        for (i, child) in enumerate(children):\n            for (j, char) in enumerate(child):\n                if np.random.rand() < mutation_rate:\n                    children[i] = child[:j] + np.random.choice(list(alphabet)) + child[j + 1:]\n        population = children\n        if target in population:\n            return target\n    return best_individual"}
{"task_id": 322, "completion_id": 0, "solution": "import numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    predicted = np.clip(predicted, EPS, 1 - EPS)\n    loss = -np.mean(actual * np.log(predicted) + (1 - actual) * np.log(1 - predicted))\n    loss = round(loss, 4)\n    return loss"}
{"task_id": 324, "completion_id": 0, "solution": "import numpy as np\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n    \"\"\"Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function must return an empty\n        list.\n    \"\"\"\n    if len(x) != len(y):\n        return []\n    (rows, cols, channels) = X.shape\n    result = []\n    for (x_i, y_i) in zip(x, y):\n        x_i = max(0, min(x_i, cols - 1))\n        y_i = max(0, min(y_i, rows - 1))\n        (x0, y0) = (int(np.floor(x_i)), int(np.floor(y_i)))\n        (x1, y1) = (min(x0 + 1, cols - 1), min(y0 + 1, rows - 1))\n        (wx1, wx0) = (x_i - x0, x1 - x_i)\n        (wy1, wy0) = (y_i - y0, y1 - y_i)\n        interpolated_value = wx0 * wy0 * X[y0, x0] + wx1 * wy0 * X[y0, x1] + wx0 * wy1 * X[y1, x0] + wx1 * wy1 * X[y1, x1]\n        result.append([round(val, 4) for val in interpolated_value.tolist()])\n    return result"}
{"task_id": 326, "completion_id": 0, "solution": "import numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    X = np.array(X)\n    support_vectors = np.array(support_vectors)\n    lagr_multipliers = np.array(lagr_multipliers)\n    support_vector_labels = np.array(support_vector_labels)\n    if gamma is None:\n        gamma = 1 / X.shape[1]\n\n    def linear_kernel(u, v):\n        return np.dot(u, v)\n\n    def polynomial_kernel(u, v):\n        return (gamma * np.dot(u, v) + coef) ** power\n\n    def rbf_kernel(u, v):\n        return np.exp(-gamma * np.linalg.norm(u - v) ** 2)\n    kernel_func = {'linear': linear_kernel, 'polynomial': polynomial_kernel, 'rbf': rbf_kernel}[kernel]\n    decision_values = np.zeros(X.shape[0])\n    for (i, x) in enumerate(X):\n        for (j, support_vector) in enumerate(support_vectors):\n            decision_values[i] += lagr_multipliers[j] * support_vector_labels[j] * kernel_func(support_vector, x)\n        decision_values[i] += intercept\n    predicted_labels = np.where(decision_values >= 0, 1, -1)\n    return predicted_labels.tolist()"}
{"task_id": 328, "completion_id": 0, "solution": "from typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        freqs = np.arange(N // 2 + 1) * delta_f\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    return np.round(freqs, 4).tolist()"}
{"task_id": 330, "completion_id": 0, "solution": "def update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n    \"\"\"Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries.  It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n            \"parameters\" and/or \"hyperparameters\" whose values are dictionaries\n            of updates.  Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n    \"\"\"\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n    flattened_summary = {}\n    if 'parameters' in summary_dict:\n        flattened_summary.update(summary_dict['parameters'])\n    if 'hyperparameters' in summary_dict:\n        flattened_summary.update(summary_dict['hyperparameters'])\n    flattened_summary.update({k: v for (k, v) in summary_dict.items() if k not in ['parameters', 'hyperparameters']})\n    for (key, value) in flattened_summary.items():\n        if key in new_parameters:\n            new_parameters[key] = value\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = value\n    return (new_parameters, new_hyperparameters)"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype='bool')\n    (n_samples, n_estimators) = predictions.shape\n    oob_predictions = np.zeros(n_samples)\n    n_oob_samples = 0\n    for i in range(n_samples):\n        oob_preds = predictions[i, oob_mask[i]]\n        if len(oob_preds) > 0:\n            oob_predictions[i] = np.mean(oob_preds)\n            n_oob_samples += 1\n    if n_oob_samples == 0:\n        return -1\n    squared_errors = (oob_predictions - y_true) ** 2\n    oob_mse = np.mean(squared_errors[oob_predictions != 0])\n    return round(oob_mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in set(transaction)))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda item: (-frequent_items[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = sorted(set(transaction) & set(frequent_items), key=lambda item: (-frequent_items[item], item))\n        node = root\n        for item in transaction:\n            node['support'] += 1\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node = node['children'][item]\n        node['support'] += 1\n    return root"}
{"task_id": 333, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    means = np.mean(X, axis=0)\n    stds = np.std(X, axis=0) + 1e-08\n    X_std = (X - means) / stds\n    X_aug = np.hstack((np.ones((X.shape[0], 1)), X_std))\n    theta = np.zeros(X_aug.shape[1])\n    for _ in range(num_iter):\n        z = np.dot(X_aug, theta)\n        h_theta = 1 / (1 + np.exp(-z))\n        grad = np.dot(X_aug.T, h_theta - y) / X.shape[0]\n        theta -= alpha * grad\n    z = np.dot(X_aug, theta)\n    h_theta = 1 / (1 + np.exp(-z))\n    predicted_labels = (h_theta >= 0.5).astype(int).tolist()\n    return predicted_labels"}
{"task_id": 334, "completion_id": 0, "solution": "import math\ndef noam_learning_rate(step: int, model_dim: int=512, scale_factor: float=1.0, warmup_steps: int=4000) -> float:\n    \"\"\"Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n    \"\"\"\n    if step < 1:\n        return 0.0\n    model_dim_factor = model_dim ** (-0.5)\n    warmup_factor = min(step ** (-0.5), step * warmup_steps ** (-1.5))\n    lr = scale_factor * model_dim_factor * warmup_factor\n    return round(lr, 9)"}
{"task_id": 335, "completion_id": 0, "solution": "import numpy as np\ndef get_initializer(name: str):\n    \"\"\"Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int,...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        - \"zeros\"\n        - \"ones\"\n        - \"normal\"\n        - \"glorot_uniform\"\n\n    If *name* is not recognised the function must raise `ValueError`.\n    \"\"\"\n    name = name.lower()\n    if name == 'zeros':\n\n        def zeros_initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.zeros(shape)\n        return zeros_initializer\n    elif name == 'ones':\n\n        def ones_initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.ones(shape) * scale\n        return ones_initializer\n    elif name == 'normal':\n\n        def normal_initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            return np.random.normal(0, scale, shape)\n        return normal_initializer\n    elif name == 'glorot_uniform':\n\n        def glorot_uniform_initializer(shape: tuple[int, ...], scale: float=1.0) -> np.ndarray:\n            if len(shape) != 2:\n                raise ValueError('Glorot uniform initialization requires 2D shape')\n            (fan_in, fan_out) = shape\n            limit = scale * np.sqrt(6 / (fan_in + fan_out))\n            return np.random.uniform(-limit, limit, shape)\n        return glorot_uniform_initializer\n    else:\n        raise ValueError(f'Unsupported initializer name: {name}')"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    kernel_matrix = np.dot(X, Y.T) + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    kernel_matrix = kernel_matrix.tolist()\n    return kernel_matrix"}
{"task_id": 337, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    if not x or not y:\n        return []\n    x_rounded = np.around(x).astype(int)\n    y_rounded = np.around(y).astype(int)\n    x_clipped = np.clip(x_rounded, 0, X.shape[1] - 1)\n    y_clipped = np.clip(y_rounded, 0, X.shape[0] - 1)\n    pixels = X[y_clipped, x_clipped, :]\n    return pixels.tolist()"}
{"task_id": 338, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X, y, reg_factor):\n    \"\"\"\n    Closed-form Ridge Regression (L2-regularised linear regression) implementation.\n\n    Parameters:\n    X (NumPy 2-D array or list of lists): Feature matrix\n    y (NumPy 1-D array or list): Target vector\n    reg_factor (float >= 0): Regularisation factor\n\n    Returns:\n    list: Ridge Regression weights (bias first) rounded to 4 decimal places\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_bias = np.hstack((np.ones((X.shape[0], 1)), X))\n    weights = np.linalg.inv(X_bias.T @ X_bias + reg_factor * np.eye(X_bias.shape[1])) @ X_bias.T @ y\n    return [round(coeff, 4) for coeff in weights]"}
{"task_id": 339, "completion_id": 0, "solution": "from collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    counter = Counter(y)\n    max_count = max(counter.values())\n    most_common = next((label for (label, count) in counter.items() if count == max_count))\n    return most_common"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    new_m = beta1 * m + (1 - beta1) * grad\n    new_v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = new_m / (1 - beta1 ** t)\n    v_hat = new_v / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param = [round(x, 8) for x in updated_param.flatten()]\n    new_m = [round(x, 8) for x in new_m.flatten()]\n    new_v = [round(x, 8) for x in new_v.flatten()]\n    return (updated_param, new_m, new_v)"}
{"task_id": 342, "completion_id": 0, "solution": "import numpy as np\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n    \"\"\"Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    distance = np.sum(np.abs(np.array(x) - np.array(y)))\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * len(rewards))\n    top_indices = np.argsort(rewards)[-num_retain:]\n    top_samples = theta_samples[top_indices]\n    mean = np.mean(top_samples, axis=0)\n    variance = np.var(top_samples, axis=0)\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    return (mean, variance)"}
{"task_id": 344, "completion_id": 0, "solution": "import heapq\nfrom collections import defaultdict\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n    if len(set(tokens)) == 1:\n        return {tokens[0]: '0'}\n    frequencies = defaultdict(int)\n    for token in tokens:\n        frequencies[token] += 1\n    heap = []\n    for (token, frequency) in frequencies.items():\n        node = (frequency, token, None, None)\n        heapq.heappush(heap, node)\n    while len(heap) > 1:\n        (freq1, token1, left1, right1) = heapq.heappop(heap)\n        (freq2, token2, left2, right2) = heapq.heappop(heap)\n        parent_freq = freq1 + freq2\n        parent_node = (parent_freq, '', left1 or token1, right2 or token2)\n        heapq.heappush(heap, parent_node)\n    root = heap[0]\n    codes = {}\n\n    def traverse(node, code):\n        if node[1]:\n            codes[node[1]] = code\n        if node[2]:\n            traverse(node[2], code + '0')\n        if node[3]:\n            traverse(node[3], code + '1')\n    traverse(root, '')\n    return codes"}
{"task_id": 345, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    posterior_mean = np.linalg.solve(X_train.T @ X_train + omega0, X_train.T @ y_train + omega0 @ mu0)\n    predictions = X_test @ posterior_mean\n    predictions = [round(pred, 4) for pred in predictions]\n    return predictions"}
{"task_id": 346, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y):\n    \"\"\"Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    (labels, counts) = np.unique(y, return_counts=True)\n    proportions = counts / len(y)\n    entropy_value = -np.sum(proportions * np.log2(proportions))\n    return round(entropy_value, 4)"}
{"task_id": 347, "completion_id": 0, "solution": "import numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    if module == 'C':\n        if Y_real is None or gradInterp is None:\n            raise ValueError('Y_real and gradInterp are required for critic loss')\n        loss = np.mean(Y_fake) - np.mean(Y_real)\n        grad_penalty = lambda_ * np.mean((np.linalg.norm(gradInterp, axis=1) - 1) ** 2)\n        loss += grad_penalty\n    elif module == 'G':\n        loss = -np.mean(Y_fake)\n    else:\n        raise ValueError(\"Invalid module. Must be 'C' or 'G'\")\n    return round(loss, 4)"}
{"task_id": 348, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n    \"\"\"Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n    \"\"\"\n    if X.ndim != 2 or X.shape[0] != X.shape[1]:\n        return False\n    if not np.allclose(X, X.T, atol=1e-08):\n        return False\n    eigenvalues = np.linalg.eigvalsh(X)\n    if not np.all(eigenvalues > 1e-08):\n        return False\n    return True"}
{"task_id": 350, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_ridge_regression(X: list[float | int], y: list[float | int], degree: int, reg_factor: float) -> list[float]:\n    \"\"\"Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    xtx = design_matrix.T @ design_matrix\n    xtx_reg = xtx + reg_factor * np.eye(degree + 1)\n    xty = design_matrix.T @ y\n    w = np.linalg.solve(xtx_reg, xty)\n    coefficients = np.round(w, 4).tolist()\n    return coefficients"}
{"task_id": 351, "completion_id": 0, "solution": "import numpy as np\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    pooled = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * stride\n                    h_end = h_start + p_h\n                    w_start = w * stride\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    max_val = np.max(window)\n                    pooled[n, c, h, w] = max_val\n    return pooled.tolist()"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    entropy_value = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, (kernel_rows - 1) // 2, (kernel_cols - 1) // 2, (kernel_cols - 1) // 2)\n    else:\n        assert len(pad) == 4, 'Invalid padding specification'\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    X_col = np.zeros((n_ex, out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            patch = X_padded[:, i * stride:i * stride + kernel_rows, j * stride:j * stride + kernel_cols, :]\n            patch = patch.reshape((n_ex, -1))\n            X_col[:, i * out_cols + j, :] = patch\n    if dilation > 0:\n        kernel_rows_dilated = kernel_rows + (kernel_rows - 1) * dilation\n        kernel_cols_dilated = kernel_cols + (kernel_cols - 1) * dilation\n        W_dilated = np.zeros((kernel_rows_dilated, kernel_cols_dilated, in_ch, out_ch))\n        for i in range(kernel_rows):\n            for j in range(kernel_cols):\n                W_dilated[i * (dilation + 1), j * (dilation + 1), :, :] = W[i, j, :, :]\n        W = W_dilated\n    W_flat = W.reshape((-1, out_ch))\n    result = np.dot(X_col, W_flat)\n    result = result.reshape((n_ex, out_rows, out_cols, out_ch)).tolist()\n    return result"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centred_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        idx = np.argsort(s)[::-1]\n        Vt = Vt[idx]\n        s = s[idx]\n    elif solver == 'eigen':\n        cov = np.cov(centred_data, rowvar=False, ddof=1)\n        (s, V) = np.linalg.eigh(cov)\n        idx = np.argsort(s)[::-1]\n        V = V[:, idx]\n        s = s[idx]\n        Vt = V.T\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    Vt = Vt[:n_components]\n    s = s[:n_components]\n    for i in range(Vt.shape[0]):\n        if Vt[i, np.argmax(np.abs(Vt[i]))] < 0:\n            Vt[i] = -Vt[i]\n    scores = np.dot(centred_data, Vt.T)\n    explained_variance_ratio = s ** 2 / np.sum(s ** 2)\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0).tolist()\n        return [centroid]\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.sort(centroids, axis=0).tolist()\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n    return centroids"}
{"task_id": 358, "completion_id": 0, "solution": "import numpy as np\ndef accuracy(y_true, y_pred):\n    \"\"\"Compute the classification accuracy between two equal-length sequences.\n\n    The function should return the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, return -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        return -1\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 359, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as *y*.\n    derivative : bool, default False\n        If *True* return the gradient, else return the loss.\n\n    Returns\n    -------\n    float | list[list[float]]\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    if derivative:\n        gradient = y_pred - y\n        gradient = np.round(gradient, 4).tolist()\n        return gradient\n    else:\n        loss = -np.sum(y * np.log(y_pred + eps))\n        loss = round(loss, 4)\n        return loss"}
{"task_id": 360, "completion_id": 0, "solution": "import numpy as np\ndef dct(frame: np.ndarray | list[float], orthonormal: bool=True) -> list[float]:\n    \"\"\"Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n    \"\"\"\n    frame = np.asarray(frame)\n    N = len(frame)\n    coefficients = np.zeros(N)\n    for k in range(N):\n        coefficients[k] = 2 * np.sum(frame * np.cos(np.pi * k * (2 * np.arange(N) + 1) / (2 * N)))\n    if orthonormal:\n        coefficients[0] *= np.sqrt(1 / (4 * N))\n        coefficients[1:] *= np.sqrt(1 / (2 * N))\n    return np.round(coefficients, 4).tolist()"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_arr = arr / row_sums[:, np.newaxis]\n    result = normalized_arr.round(4).tolist()\n    return result"}
{"task_id": 363, "completion_id": 0, "solution": "def is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> PyTuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space, is_composite: bool) -> bool:\n        \"\"\"Check if a space is continuous.\"\"\"\n        if not is_composite:\n            return isinstance(space, Box)\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                sub_spaces = space.spaces\n            else:\n                sub_spaces = space.spaces.values()\n            return all((isinstance(sub_space, Box) for sub_space in sub_spaces))\n        else:\n            raise ValueError('Composite space must be Tuple or Dict')\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 364, "completion_id": 0, "solution": "def sign(x: int | float) -> int:\n    \"\"\"Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n    \"\"\"\n    if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0"}
{"task_id": 366, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    X_squared = np.sum(X ** 2, axis=1, keepdims=True)\n    cross_product = np.dot(X, X.T)\n    distance_matrix = X_squared + X_squared.T - 2 * cross_product\n    distance_matrix = np.maximum(distance_matrix, 0)\n    np.fill_diagonal(distance_matrix, 0.0)\n    distance_matrix = distance_matrix.tolist()\n    return distance_matrix"}
{"task_id": 367, "completion_id": 0, "solution": "import re\nfrom typing import Any, Dict, Optional\nclass KernelBase:\n    \"\"\"Minimal base class for all kernels.  Do NOT modify this class.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n        \"\"\"(Re)sets parameters from a previously stored summary dict.\"\"\"\n        hp = state.get('hyperparameters', {})\n        self.params.update({k: v for (k, v) in hp.items() if k != 'id'})\n        return self\n\n    def summary(self) -> Dict[str, Any]:\n        \"\"\"Dictionary description that can be fed back to *initialize_kernel*.\"\"\"\n        return {'hyperparameters': {'id': self.__class__.__name__, **self.params}}\nclass LinearKernel(KernelBase):\n\n    def __init__(self):\n        super().__init__()\nclass PolynomialKernel(KernelBase):\n\n    def __init__(self, degree: int=3, coef0: float=1.0):\n        super().__init__(degree=degree, coef0=coef0)\nclass RBFKernel(KernelBase):\n\n    def __init__(self, gamma: float=1.0):\n        super().__init__(gamma=gamma)\ndef initialize_kernel(param: Optional[Any]=None) -> KernelBase:\n    \"\"\"Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n    \"\"\"\n    if param is None:\n        return LinearKernel()\n    if isinstance(param, KernelBase):\n        return param\n    if isinstance(param, str):\n        match = re.match('(\\\\w+)\\\\((.*)\\\\)', param)\n        if match:\n            kernel_name = match.group(1).lower()\n            params = {}\n            for pair in match.group(2).split(','):\n                (key, value) = pair.split('=')\n                params[key.strip()] = convert_value(value.strip())\n            return create_kernel(kernel_name, params)\n        else:\n            kernel_name = param.lower()\n            return create_kernel(kernel_name)\n    if isinstance(param, dict):\n        if 'hyperparameters' not in param:\n            raise ValueError(\"Missing 'hyperparameters' key in dictionary\")\n        hp = param['hyperparameters']\n        kernel_name = hp['id']\n        params = {k: v for (k, v) in hp.items() if k != 'id'}\n        return create_kernel(kernel_name, params)\n    raise NotImplementedError('Unsupported kernel representation')\ndef create_kernel(kernel_name: str, params: Dict[str, Any]={}) -> KernelBase:\n    kernels = {'linearkernel': LinearKernel, 'polynomialkernel': PolynomialKernel, 'rbfkernel': RBFKernel}\n    kernel_name = kernel_name.lower()\n    if kernel_name not in kernels:\n        raise NotImplementedError(f'Unsupported kernel: {kernel_name}')\n    return kernels[kernel_name](**params)\ndef convert_value(value: str) -> Any:\n    try:\n        return int(value)\n    except ValueError:\n        pass\n    try:\n        return float(value)\n    except ValueError:\n        pass\n    if value.lower() == 'true':\n        return True\n    if value.lower() == 'false':\n        return False\n    return value"}
{"task_id": 368, "completion_id": 0, "solution": "import numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or \u20111 when\n               input validation fails.\n    \"\"\"\n    if len(x) != len(y) or p <= 0:\n        return -1\n    x = np.asarray(x)\n    y = np.asarray(y)\n    distance = np.sum(np.abs(x - y) ** p) ** (1 / p)\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 370, "completion_id": 0, "solution": "import numpy as np\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n    \"\"\"\n    Compute the multivariate Gaussian density function for each sample in X.\n\n    Parameters:\n    X (np.ndarray): 2D array of shape (m, n) where each row is an n-dimensional sample.\n    mu (np.ndarray): 1D array of length n containing the mean of the distribution.\n    cov (np.ndarray): n x n positive-definite covariance matrix.\n\n    Returns:\n    list[float]: Density values of every sample in X under N(mu, cov).\n    \"\"\"\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    const_term = 1 / (np.power(2 * np.pi, X.shape[1] / 2) * np.sqrt(det_cov))\n    densities = []\n    for x in X:\n        quad_term = -0.5 * np.dot((x - mu).T, np.dot(inv_cov, x - mu))\n        density = const_term * np.exp(quad_term)\n        densities.append(round(density, 4))\n    return densities"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple):\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        out_len = int(np.ceil(X.shape[1] / stride))\n        effective_kernel = (W.shape[0] - 1) * dilation + 1\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - X.shape[1])\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError('Invalid padding specification')\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n    out_shape = (X.shape[0], (X_padded.shape[1] - (W.shape[0] - 1) * dilation - 1) // stride + 1, W.shape[2])\n    out = np.zeros(out_shape)\n    for i in range(out_shape[1]):\n        for j in range(W.shape[2]):\n            for k in range(W.shape[0]):\n                out[:, i, j] += X_padded[:, i * stride + k * dilation, :] * W[k, :, j]\n    return out.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.asarray(y)\n    if len(y) == 0:\n        return 0.0\n    C = len(np.unique(y))\n    N = len(y)\n    p_c = np.array([np.sum(y == c) / N for c in np.unique(y)])\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    X (np.ndarray): Feature matrix (m x n)\n    y (np.ndarray): Target vector (m)\n    learning_rate (float, optional): Learning rate for gradient descent (default=0.01)\n    n_iterations (int, optional): Number of iterations for gradient descent (default=10000)\n\n    Returns:\n    tuple[list[float], float]: A tuple containing the learned weights (list of floats) and bias (float)\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    n_features = X.shape[1]\n    weights = np.zeros(n_features)\n    bias = 0.0\n    for _ in range(n_iterations):\n        predictions = np.dot(X, weights) + bias\n        dw = 2 / X.shape[0] * np.dot(X.T, predictions - y)\n        db = 2 / X.shape[0] * np.sum(predictions - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 375, "completion_id": 0, "solution": "import numpy as np\ndef calc_pad_dims_2D(X_shape: tuple, out_dim: tuple, kernel_shape: tuple, stride: int, dilation: int=0) -> tuple:\n    \"\"\"Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n    \"\"\"\n    if not isinstance(X_shape, tuple) or len(X_shape) != 4:\n        raise ValueError('X_shape must be a tuple of length 4')\n    if not isinstance(out_dim, tuple) or len(out_dim) != 2:\n        raise ValueError('out_dim must be a tuple of length 2')\n    if not isinstance(kernel_shape, tuple) or len(kernel_shape) != 2:\n        raise ValueError('kernel_shape must be a tuple of length 2')\n    if not isinstance(stride, int) or stride <= 0:\n        raise ValueError('stride must be a positive integer')\n    if not isinstance(dilation, int) or dilation < 0:\n        raise ValueError('dilation must be a non-negative integer')\n    (fr, fc) = kernel_shape\n    _fr = fr * (dilation + 1) - dilation\n    _fc = fc * (dilation + 1) - dilation\n    (in_rows, in_cols) = (X_shape[1], X_shape[2])\n    (out_rows, out_cols) = out_dim\n    up_pad = max(0, (_fr - 1) // 2 + (out_rows - 1) * stride - in_rows + _fr)\n    down_pad = max(0, (_fr - 1) // 2 + (out_rows - 1) * stride - in_rows)\n    left_pad = max(0, (_fc - 1) // 2 + (out_cols - 1) * stride - in_cols + _fc)\n    right_pad = max(0, (_fc - 1) // 2 + (out_cols - 1) * stride - in_cols)\n    if (up_pad + down_pad) % 2 != 0:\n        down_pad += 1\n    if (left_pad + right_pad) % 2 != 0:\n        right_pad += 1\n    return (up_pad, down_pad, left_pad, right_pad)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_array = np.array(X)\n    if X_array.shape[0] != X_array.shape[1]:\n        return False\n    return np.allclose(X_array, X_array.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n\n    Returns:\n    list: Negative gradients g rounded to four decimal places\n\n    Raises:\n    ValueError: If the label array contains values other than 0 or 1\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array([2 * label - 1 for label in y])\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    g = np.round(g, 4)\n    return g.tolist()"}
{"task_id": 378, "completion_id": 0, "solution": "def indicator(flag: int) -> int:\n    \"\"\"Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n    \"\"\"\n    return 1 if flag == 1 else 0"}
{"task_id": 379, "completion_id": 0, "solution": "def sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n                fields ``'key'``, ``'val'``, ``'priority'`` and\n                ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    sorted_nodes = sorted(nodes, key=lambda node: (node['priority'], node['entry_id']))\n    sorted_keys = [node['key'] for node in sorted_nodes]\n    return sorted_keys"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Invalid order. Must be 0, 1, or 2.')\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 382, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_naive_bayes_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list:\n    \"\"\"Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n    \"\"\"\n    (classes, class_counts) = np.unique(y_train, return_counts=True)\n    priors = class_counts / len(y_train)\n    means = np.zeros((len(classes), X_train.shape[1]))\n    variances = np.zeros((len(classes), X_train.shape[1]))\n    for (i, c) in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[i] = np.mean(X_c, axis=0)\n        variances[i] = np.var(X_c, axis=0)\n    variances += 0.0001\n    predicted_labels = []\n    for x in X_test:\n        posteriors = np.zeros(len(classes))\n        for (i, c) in enumerate(classes):\n            posterior = priors[i]\n            for j in range(X_train.shape[1]):\n                posterior *= 1 / np.sqrt(2 * np.pi * variances[i, j]) * np.exp(-(x[j] - means[i, j]) ** 2 / (2 * variances[i, j]))\n            posteriors[i] = posterior\n        predicted_label = classes[np.argmax(posteriors)]\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 383, "completion_id": 0, "solution": "def find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]"}
{"task_id": 384, "completion_id": 0, "solution": "import numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    L = np.array(L)\n    if k > L.shape[0]:\n        return -1\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    idx = np.argsort(np.real(eigenvalues))\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    selected_eigenvectors = eigenvectors[:, :k]\n    selected_eigenvectors = selected_eigenvectors / np.linalg.norm(selected_eigenvectors, axis=0)\n    for i in range(k):\n        if np.any(selected_eigenvectors[:, i] != 0):\n            idx = np.where(selected_eigenvectors[:, i] != 0)[0][0]\n            if selected_eigenvectors[idx, i] < 0:\n                selected_eigenvectors[:, i] *= -1\n    result = np.real(selected_eigenvectors).round(4).tolist()\n    return result"}
{"task_id": 385, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import eigh, pinv\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"\n    Projects a labelled data set onto its first k Linear Discriminant components.\n\n    Args:\n    X (list[list[int | float]]): The data set with shape (n_samples, n_features).\n    y (list[int]): The class label of each sample.\n    k (int): The number of Linear Discriminant components to project onto.\n\n    Returns:\n    list[list[float]]: The data matrix projected onto the first k Linear Discriminant components.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    classes = np.unique(y)\n    c = len(classes)\n    k = min(k, c - 1)\n    S_w = np.zeros((X.shape[1], X.shape[1]))\n    for i in classes:\n        X_i = X[y == i]\n        S_w += (X_i - X_i.mean(axis=0)).T @ (X_i - X_i.mean(axis=0))\n    S_b = np.zeros((X.shape[1], X.shape[1]))\n    X_mean = X.mean(axis=0)\n    for i in classes:\n        X_i = X[y == i]\n        S_b += len(X_i) * (X_i.mean(axis=0) - X_mean).reshape(-1, 1) @ (X_i.mean(axis=0) - X_mean).reshape(1, -1)\n    S_w_inv = pinv(S_w)\n    (eigenvalues, eigenvectors) = eigh(S_w_inv @ S_b)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors = eigenvectors[:, :k]\n    eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)\n    eigenvectors = np.sign(eigenvectors[0, :]) * eigenvectors\n    X_projected = X @ eigenvectors\n    X_projected = np.round(X_projected, 4).tolist()\n    return X_projected"}
{"task_id": 386, "completion_id": 0, "solution": "import numpy as np\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    bce = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    return round(bce, 4)"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sorted_idx = np.argsort(x)\n        x_sorted = x[sorted_idx]\n        residuals_sorted = residuals[sorted_idx]\n        split_points = (x_sorted[:-1] + x_sorted[1:]) / 2\n        if len(split_points) == 0:\n            stump_predictions = np.full(n_samples, np.mean(residuals))\n        else:\n            stump_predictions = np.full(n_samples, np.mean(residuals))\n            best_split_idx = -1\n            best_sse = np.inf\n            for (i, split) in enumerate(split_points):\n                left_residuals = residuals_sorted[:i + 1]\n                right_residuals = residuals_sorted[i + 1:]\n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n                sse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n                if sse < best_sse:\n                    best_split_idx = i\n                    best_sse = sse\n                    stump_predictions[sorted_idx[:i + 1]] = left_mean\n                    stump_predictions[sorted_idx[i + 1:]] = right_mean\n        predictions += learning_rate * stump_predictions\n    return np.round(predictions, 4).tolist()"}
{"task_id": 389, "completion_id": 0, "solution": "import numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    W = np.array(W)\n    if W.shape[0] != W.shape[1]:\n        return -1\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    L = np.round(L, 4).tolist()\n    return L"}
{"task_id": 391, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    indices = np.around(t).astype(int)\n    indices = np.clip(indices, 0, X.shape[0] - 1)\n    interpolated_samples = X[indices]\n    result = interpolated_samples.tolist()\n    return result"}
{"task_id": 392, "completion_id": 0, "solution": "import numpy as np\ndef preemphasis(x: 'list[float] | np.ndarray', alpha: float) -> list[float]:\n    \"\"\"Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval ``[0, 1)``.\n\n    Returns:\n        The filtered signal as a Python ``list`` with every element rounded to\n        four decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    x = x.flatten()\n    if not 0 <= alpha < 1:\n        raise ValueError('Alpha must be in the range [0, 1)')\n    emphasized_x = np.empty_like(x)\n    emphasized_x[0] = x[0]\n    emphasized_x[1:] = x[1:] - alpha * x[:-1]\n    return [round(val, 4) for val in emphasized_x]"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + 1e-08)\n    w_next = np.round(w_next, 4).tolist()\n    Eg_next = np.round(Eg_next, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 395, "completion_id": 0, "solution": "import numpy as np\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    result = '*' * 50 + '\\n'\n    result += 'Beta:\\n'\n    result += str(beta) + '\\n'\n    result += f'Probability of sequence: {b_prob}'\n    return result"}
{"task_id": 396, "completion_id": 0, "solution": "import numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result must be rounded to 6 decimal places.\n    \u2022 The input must *not* be modified in-place.\n    \"\"\"\n    x = np.asarray(x)\n    tanh_x = np.tanh(x)\n    first_derivative = 1 - tanh_x ** 2\n    second_derivative = -2 * tanh_x * first_derivative\n    tanh_x = np.round(tanh_x, 6).tolist()\n    first_derivative = np.round(first_derivative, 6).tolist()\n    second_derivative = np.round(second_derivative, 6).tolist()\n    return [tanh_x, first_derivative, second_derivative]"}
{"task_id": 397, "completion_id": 0, "solution": "import numpy as np\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n    \"\"\"Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n    \"\"\"\n    class_indices = np.random.randint(0, n_classes, size=n_examples)\n    one_hot_matrix = np.zeros((n_examples, n_classes))\n    one_hot_matrix[np.arange(n_examples), class_indices] = 1\n    return one_hot_matrix"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.asarray(x)\n    result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    if derivative:\n        result = np.where(x >= 0, 1, result + alpha)\n    return [round(val, 4) for val in result]"}
{"task_id": 399, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    distances = np.linalg.norm(X[:, np.newaxis] - Y, axis=2)\n    distances = np.round(distances, 4).tolist()\n    return distances"}
{"task_id": 400, "completion_id": 0, "solution": "import math\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n    \"\"\"Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n    \"\"\"\n    if variance < 0:\n        raise ValueError('Variance must be non-negative')\n    if variance == 0:\n        if x < mean:\n            return 0.0\n        elif x == mean:\n            return 0.5\n        else:\n            return 1.0\n    std_dev = math.sqrt(variance)\n    erf_value = math.erf((x - mean) / (math.sqrt(2) * std_dev))\n    cdf_value = 0.5 * (1 + erf_value)\n    return round(cdf_value, 6)"}
{"task_id": 401, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(y: np.ndarray, num_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function should return a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If ``None`` the number is inferred from ``y``.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype ``float``.\n    \"\"\"\n    if len(y.shape) == 2 and np.allclose(np.sum(y, axis=1), 1):\n        return y.astype(np.float32).copy()\n    y = y.flatten()\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    one_hot = np.zeros((len(y), num_classes), dtype=np.float32)\n    one_hot[np.arange(len(y)), y] = 1.0\n    return one_hot"}
{"task_id": 402, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_nb_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, eps: float=1e-06) -> np.ndarray:\n    \"\"\"Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n    \"\"\"\n    num_classes = np.unique(y_train).size\n    num_features = X_train.shape[1]\n    class_priors = np.bincount(y_train) / y_train.size\n    means = np.zeros((num_classes, num_features))\n    variances = np.zeros((num_classes, num_features))\n    for c in range(num_classes):\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        variances[c] = np.var(X_c, axis=0) + eps\n    log_posteriors = np.zeros((X_test.shape[0], num_classes))\n    for (i, x) in enumerate(X_test):\n        for c in range(num_classes):\n            log_posterior = np.log(class_priors[c])\n            for j in range(num_features):\n                log_posterior += -0.5 * (np.log(2 * np.pi * variances[c, j]) + (x[j] - means[c, j]) ** 2 / variances[c, j])\n            log_posteriors[i, c] = log_posterior\n    predicted_labels = np.argmax(log_posteriors, axis=1)\n    return predicted_labels"}
{"task_id": 405, "completion_id": 0, "solution": "import numpy as np\nimport re\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    x = np.asarray(x, dtype=np.float64)\n    activations = {None: lambda x: x, 'identity': lambda x: x, 'relu': lambda x: np.maximum(x, 0), 'tanh': np.tanh, 'sigmoid': lambda x: 1 / (1 + np.exp(-x))}\n    if param and param.lower().startswith('leaky relu'):\n        match = re.search('alpha=([0-9\\\\.]+)', param)\n        alpha = 0.01 if match is None else float(match.group(1))\n        activation = lambda x: np.where(x > 0, x, alpha * x)\n    elif param and param.lower().startswith('affine'):\n        match = re.search('slope=([0-9\\\\.]+), intercept=([0-9\\\\.]+)', param)\n        if match is None:\n            raise ValueError('Invalid affine transformation parameters')\n        (slope, intercept) = (float(match.group(1)), float(match.group(2)))\n        activation = lambda x: slope * x + intercept\n    elif param in activations:\n        activation = activations[param]\n    else:\n        raise ValueError(f'Unknown activation: {param}')\n    result = activation(x)\n    result = np.round(result, 6)\n    return result.tolist()"}
{"task_id": 406, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int=5) -> list[int]:\n    \"\"\"k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n    \"\"\"\n    predicted_labels = []\n    for test_sample in X_test:\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_labels = y_train[k_indices]\n        predicted_label = np.bincount(k_labels).argmax()\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 410, "completion_id": 0, "solution": "import re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    patterns = {'^ReLU$': lambda : {'type': 'ReLU'}, '^Sigmoid$': lambda : {'type': 'Sigmoid'}, '^Tanh$': lambda : {'type': 'Tanh'}, '^Affine\\\\(slope=([+-]?\\\\d{1,3}\\\\.\\\\d+|[+-]?\\\\d+), intercept=([+-]?\\\\d{1,3}\\\\.\\\\d+|[+-]?\\\\d+)\\\\)$': lambda match: {'type': 'Affine', 'slope': float(match.group(1)), 'intercept': float(match.group(2))}, '^Leaky ReLU\\\\(alpha=([+-]?\\\\d{1,3}\\\\.\\\\d+|[+-]?\\\\d+)\\\\)$': lambda match: {'type': 'Leaky ReLU', 'alpha': float(match.group(1))}}\n    for (pattern, func) in patterns.items():\n        match = re.match(pattern, act_str)\n        if match:\n            return func(match)\n    return -1"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    result = {}\n    result['tuple_actions'] = any((isinstance(a, (list, tuple, np.ndarray)) for a in actions))\n    result['tuple_observations'] = any((isinstance(o, (list, tuple, np.ndarray)) for o in observations))\n    if result['tuple_actions']:\n        action_dim = len(actions[0])\n    else:\n        action_dim = 1\n    if result['tuple_observations']:\n        obs_dim = len(observations[0])\n    else:\n        obs_dim = 1\n    result['multidim_actions'] = action_dim > 1\n    result['multidim_observations'] = obs_dim > 1\n    result['action_dim'] = action_dim\n    result['obs_dim'] = obs_dim\n    flat_actions = [a for a in actions if isinstance(a, (list, tuple, np.ndarray)) for a in a] + [a for a in actions if not isinstance(a, (list, tuple, np.ndarray))]\n    flat_observations = [o for o in observations if isinstance(o, (list, tuple, np.ndarray)) for o in o] + [o for o in observations if not isinstance(o, (list, tuple, np.ndarray))]\n    result['continuous_actions'] = any((isinstance(a, float) and a % 1 != 0 for a in flat_actions))\n    result['continuous_observations'] = any((isinstance(o, float) and o % 1 != 0 for o in flat_observations))\n    if result['tuple_actions']:\n        action_ids = [sorted(set((a[i] for a in actions))) for i in range(action_dim)]\n    else:\n        action_ids = [sorted(set(actions))]\n    if result['tuple_observations']:\n        obs_ids = [sorted(set((o[i] for o in observations))) for i in range(obs_dim)]\n    else:\n        obs_ids = [sorted(set(observations))]\n    result['n_actions_per_dim'] = [len(ids) for ids in action_ids]\n    result['n_obs_per_dim'] = [len(ids) for ids in obs_ids]\n    result['action_ids'] = action_ids\n    result['obs_ids'] = obs_ids\n    return result"}
{"task_id": 412, "completion_id": 0, "solution": "def get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n\n    def accuracy(y_true, y_pred):\n        \"\"\"Accuracy metric: ratio of correct predictions to total predictions.\"\"\"\n        correct = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n        total = len(y_true)\n        return round(correct / total, 4)\n\n    def precision(y_true, y_pred):\n        \"\"\"Precision metric: TP / (TP + FP).\"\"\"\n        tp = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 1))\n        fp = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 0 and yp == 1))\n        denominator = tp + fp\n        return round(tp / denominator, 4) if denominator != 0 else 0.0\n\n    def recall(y_true, y_pred):\n        \"\"\"Recall metric: TP / (TP + FN).\"\"\"\n        tp = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 1))\n        fn = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 0))\n        denominator = tp + fn\n        return round(tp / denominator, 4) if denominator != 0 else 0.0\n\n    def f1(y_true, y_pred):\n        \"\"\"F1 metric: harmonic mean of precision and recall.\"\"\"\n        p = precision(y_true, y_pred)\n        r = recall(y_true, y_pred)\n        denominator = p + r\n        return round(2 * p * r / denominator, 4) if denominator != 0 else 0.0\n    metrics = {'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1}\n    return metrics.get(name, -1)"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.full((X_test.shape[0],), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - np.mean(y_train)\n        tree = _build_tree(X_train, residuals, max_depth)\n        y_pred += learning_rate * _predict_tree(X_test, tree)\n        y_train -= learning_rate * _predict_tree(X_train, tree)\n    return [round(pred, 4) for pred in y_pred]\ndef _build_tree(X: np.ndarray, y: np.ndarray, max_depth: int) -> dict:\n    \"\"\"Build a CART regression tree.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    max_depth : int\n        Maximum depth of the tree.\n\n    Returns\n    -------\n    dict\n        The built tree, represented as a dictionary.\n    \"\"\"\n    if max_depth == 0 or len(np.unique(y)) == 1:\n        return {'value': np.mean(y)}\n    feature_idx = _select_feature(X, y)\n    (X_left, X_right, y_left, y_right) = _split_data(X, y, feature_idx)\n    left_tree = _build_tree(X_left, y_left, max_depth - 1)\n    right_tree = _build_tree(X_right, y_right, max_depth - 1)\n    return {'feature': feature_idx, 'left': left_tree, 'right': right_tree}\ndef _select_feature(X: np.ndarray, y: np.ndarray) -> int:\n    \"\"\"Select the feature to split on.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y : np.ndarray\n        1-D array of length n_samples containing the training targets.\n\n    Returns\n    -------\n    int\n        The index of the selected feature.\n    \"\"\"\n    mse = np.mean((X - np.mean(X, axis=0)) ** 2, axis=0)\n    return np.argmax(mse)\ndef _split_data(X: np.ndarray, y: np.ndarray, feature_idx: int) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Split the data based on the selected feature.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    feature_idx : int\n        The index of the selected feature.\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]\n        The split data, represented as a tuple of four arrays.\n    \"\"\"\n    median = np.median(X[:, feature_idx])\n    X_left = X[X[:, feature_idx] < median]\n    X_right = X[X[:, feature_idx] >= median]\n    y_left = y[X[:, feature_idx] < median]\n    y_right = y[X[:, feature_idx] >= median]\n    return (X_left, X_right, y_left, y_right)\ndef _predict_tree(X: np.ndarray, tree: dict) -> np.ndarray:\n    \"\"\"Predict the targets for the given input data using the built tree.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the input\n        features.\n    tree : dict\n        The built tree, represented as a dictionary.\n\n    Returns\n    -------\n    np.ndarray\n        The predicted targets.\n    \"\"\"\n    if 'value' in tree:\n        return np.full((X.shape[0],), tree['value'])\n    X_left = X[X[:, tree['feature']] < np.median(X[:, tree['feature']])]\n    X_right = X[X[:, tree['feature']] >= np.median(X[:, tree['feature']])]\n    y_left = _predict_tree(X_left, tree['left'])\n    y_right = _predict_tree(X_right, tree['right'])\n    y_pred = np.zeros((X.shape[0],))\n    y_pred[X[:, tree['feature']] < np.median(X[:, tree['feature']])] = y_left\n    y_pred[X[:, tree['feature']] >= np.median(X[:, tree['feature']])] = y_right\n    return y_pred"}
{"task_id": 414, "completion_id": 0, "solution": "import numpy as np\ndef exponential_scheduler(step: int, initial_lr: float=0.01, stage_length: int=500, staircase: bool=False, decay: float=0.1) -> float:\n    \"\"\"Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n    \"\"\"\n    if step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n    lr = initial_lr * decay ** curr_stage\n    lr = round(lr, 6)\n    return lr"}
{"task_id": 415, "completion_id": 0, "solution": "import numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"\n    Computes the un-normalised 1-D Discrete Cosine Transform Type-II (DCT-II) of a given input signal.\n\n    Args:\n        frame (list[int | float]): The input signal.\n\n    Returns:\n        list[float]: The DCT-II coefficients, rounded to four decimal places.\n    \"\"\"\n    N = len(frame)\n    if N == 0:\n        return []\n    n = np.arange(N)\n    k = np.arange(N)\n    cos_matrix = np.cos(np.pi / N * (n + 0.5)[:, None] * k[None, :])\n    X = np.dot(frame, cos_matrix)\n    return np.round(X, 4).tolist()"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (numpy array): Data points for which the PDF values must be evaluated.\n                     Shape: (n_samples, n_features)\n    mean (numpy array): Mean vector of the distribution.\n                        Shape: (n_features,)\n    cov (numpy array): Covariance matrix of the distribution.\n                       Shape: (n_features, n_features)\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    n_features = X.shape[1]\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueError('Covariance matrix is not positive-definite.')\n    inv_cov = np.linalg.inv(cov)\n    constant_term = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for x in X:\n        quadratic_term = -0.5 * np.dot((x - mean).T, np.dot(inv_cov, x - mean))\n        pdf_value = constant_term * math.exp(quadratic_term)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 417, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    centred_data = data - np.mean(data, axis=0)\n    cov_matrix = np.cov(centred_data, rowvar=False, bias=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = np.argsort(-np.abs(eigenvalues))\n    eigenvectors = eigenvectors[:, idx[:k]]\n    for i in range(k):\n        if np.sign(eigenvectors[0, i]) == -1:\n            eigenvectors[:, i] *= -1\n    low_dim_data = np.dot(centred_data, eigenvectors)\n    reconstructed_data = np.dot(low_dim_data, eigenvectors.T) + np.mean(data, axis=0)\n    low_dim_data = np.round(low_dim_data, 4)\n    reconstructed_data = np.round(reconstructed_data, 4)\n    return (low_dim_data.tolist(), reconstructed_data.tolist())"}
{"task_id": 418, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(X: np.ndarray | list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n    \"\"\"\n    X = np.array(X)\n    (n, d) = X.shape\n    if n < 2:\n        return np.zeros((d, d)).tolist()\n    mean_X = np.mean(X, axis=0)\n    centered_X = X - mean_X\n    cov_matrix = np.dot(centered_X.T, centered_X) / (n - 1)\n    cov_matrix = np.round(cov_matrix, 4)\n    cov_matrix = cov_matrix.tolist()\n    return cov_matrix"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = np.eye(X.shape[1]) * V\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 420, "completion_id": 0, "solution": "import numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n    \"\"\"\n    if column < 0 or column >= X.shape[1]:\n        return ([], [])\n    left_mask = (X[:, column] < value).tolist()\n    right_mask = (X[:, column] >= value).tolist()\n    return (left_mask, right_mask)"}
{"task_id": 421, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function should assign a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points must be labelled **-1**, while\n        clusters must be numbered 1, 2, 3, \u2026 in the order they are discovered\n        during the scan over the data set.\n    \"\"\"\n    labels = [-1] * len(data)\n    cluster_label = 1\n    for i in range(len(data)):\n        if labels[i] != -1:\n            continue\n        neighbors = np.where(np.linalg.norm(data - data[i], axis=1) <= eps)[0]\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        labels[i] = cluster_label\n        for neighbor in neighbors:\n            if labels[neighbor] != -1:\n                continue\n            labels[neighbor] = cluster_label\n            neighbor_neighbors = np.where(np.linalg.norm(data - data[neighbor], axis=1) <= eps)[0]\n            if len(neighbor_neighbors) >= min_samples:\n                for nn in neighbor_neighbors:\n                    if labels[nn] == -1:\n                        labels[nn] = cluster_label\n                        neighbors = np.append(neighbors, nn)\n        cluster_label += 1\n    return labels"}
{"task_id": 422, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    x = np.asarray(x)\n    if order == 0:\n        result = np.log(1 + np.exp(x))\n    elif order == 1:\n        result = np.exp(x) / (1 + np.exp(x))\n    elif order == 2:\n        result = np.exp(x) / (1 + np.exp(x)) ** 2\n    else:\n        return -1\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Compute the Root Mean Squared Logarithmic Error (RMSLE) between two lists of numbers.\n\n    Args:\n        actual (list[float]): Ground-truth values.\n        predicted (list[float]): Model predictions.\n\n    Returns:\n        float: RMSLE value rounded to four decimal places.\n    \"\"\"\n    if len(actual) != len(predicted) or any((x < 0 for x in actual + predicted)):\n        return -1\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    rmsle = np.sqrt(np.mean((np.log1p(predicted_array) - np.log1p(actual_array)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 424, "completion_id": 0, "solution": "import numpy as np\ndef entropy(y: list[int]) -> float:\n    \"\"\"Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n    \"\"\"\n    (labels, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return round(entropy, 4)"}
{"task_id": 425, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import Counter\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy of a one-dimensional collection of non-negative integers.\n\n    Parameters:\n    p (list[int] | np.ndarray): Input sequence of non-negative integers.\n\n    Returns:\n    float: The Shannon entropy of the input sequence, rounded to 4 decimal places.\n    \"\"\"\n    p = np.asarray(p)\n    counts = Counter(p)\n    total = sum(counts.values())\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / total\n        entropy -= prob * math.log(prob)\n    if len(counts) == 1:\n        return 0.0\n    return round(entropy, 4)"}
{"task_id": 426, "completion_id": 0, "solution": "def classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    if len(y_true) != len(y_pred) or not y_true or (not y_pred):\n        return -1\n    correct_predictions = 0\n    for (true_label, pred_label) in zip(y_true, y_pred):\n        if true_label == pred_label:\n            correct_predictions += 1\n    accuracy = correct_predictions / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 427, "completion_id": 0, "solution": "import numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    z_array = np.asarray(z)\n    activation = z_array\n    derivative = np.ones_like(z_array)\n    activation_list = activation.tolist()\n    derivative_list = derivative.tolist()\n    return (activation_list, derivative_list)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)\n    hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 + (not symmetric)))\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return np.round(hann_window, 4).tolist()"}
{"task_id": 429, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm.  Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it.  If the\n        input context is invalid the function returns (-1, \u20111).\n    \"\"\"\n    if context.ndim != 1 or context.shape[0] != context_probs.shape[0] or np.sum(context) != 1 or (np.any(context != 0) and np.any(context != 1)):\n        return (-1, -1)\n    context_idx = np.argmax(context)\n    arm_probs = context_probs[context_idx, :]\n    optimal_arm = np.argmax(arm_probs)\n    optimal_rwd = np.round(arm_probs[optimal_arm], 4)\n    return (optimal_rwd, optimal_arm)"}
{"task_id": 430, "completion_id": 0, "solution": "from typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    graph: Dict[any, List[any]] = {v: [] for v in vertices}\n    for (u, v) in edges:\n        graph[u].append(v)\n    visited: Set[any] = set()\n    recursion_stack: Set[any] = set()\n    topological_order: List[any] = []\n\n    def dfs(vertex: any) -> bool:\n        \"\"\"Perform a depth-first search from the given vertex.\n\n        Returns:\n            \u2022 ``True`` if a cycle is detected.\n            \u2022 ``False`` otherwise.\n        \"\"\"\n        visited.add(vertex)\n        recursion_stack.add(vertex)\n        for neighbour in graph[vertex]:\n            if neighbour not in visited:\n                if dfs(neighbour):\n                    return True\n            elif neighbour in recursion_stack:\n                return True\n        recursion_stack.remove(vertex)\n        topological_order.append(vertex)\n        return False\n    for vertex in vertices:\n        if vertex not in visited:\n            if dfs(vertex):\n                return None\n    return topological_order[::-1]"}
{"task_id": 431, "completion_id": 0, "solution": "import numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function must return -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    x1 = np.asarray(x1)\n    x2 = np.asarray(x2)\n    if len(x1) != len(x2):\n        return -1\n    distance = np.sqrt(np.sum((x1 - x2) ** 2))\n    return round(distance, 4)"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 434, "completion_id": 0, "solution": "import numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"\n    Compute a row-wise numerically stable softmax.\n\n    Args:\n    logits (np.ndarray): A 2D NumPy array of shape (m, n) or a 1D array of shape (n,).\n\n    Returns:\n    list[list[float]]: A Python list of lists containing the probabilities, rounded to 6 decimal places.\n    \"\"\"\n    if len(logits.shape) == 1:\n        logits = logits[np.newaxis, :]\n    max_logits = np.max(logits, axis=1, keepdims=True)\n    exp_logits = np.exp(logits - max_logits)\n    sum_exp_logits = np.sum(exp_logits, axis=1, keepdims=True)\n    probabilities = exp_logits / sum_exp_logits\n    return [[round(p, 6) for p in row] for row in probabilities]"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_hat = np.mean(y) * np.ones_like(y)\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        coefficients = np.linalg.lstsq(np.hstack((np.ones((X.shape[0], 1)), X)), residuals, rcond=None)[0]\n        h = np.dot(np.hstack((np.ones((X.shape[0], 1)), X)), coefficients)\n        y_hat += learning_rate * h\n    return [round(val, 4) for val in y_hat]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.asarray(x)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if result.size == 1:\n        result = result.item()\n    else:\n        result = result.tolist()\n    return result"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom typing import Hashable\ndef apriori_frequent_itemsets(transactions: list[list[Hashable]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    frequent_items = {item for (item, count) in item_counts.items() if count / len(transactions) >= min_sup}\n    result = [(item,) for item in sorted(frequent_items)]\n    k = 2\n    while True:\n        candidates = set()\n        for itemset in result:\n            if len(itemset) == k - 1:\n                for item in frequent_items:\n                    if item > itemset[-1]:\n                        candidates.add(itemset + (item,))\n        pruned_candidates = set()\n        for candidate in candidates:\n            for subset in itertools.combinations(candidate, k - 1):\n                if subset not in result:\n                    break\n            else:\n                pruned_candidates.add(candidate)\n        candidate_counts = {}\n        for transaction in transactions:\n            for candidate in pruned_candidates:\n                if set(candidate).issubset(transaction):\n                    candidate_counts[candidate] = candidate_counts.get(candidate, 0) + 1\n        frequent_candidates = [candidate for (candidate, count) in candidate_counts.items() if count / len(transactions) >= min_sup]\n        if not frequent_candidates:\n            break\n        result.extend(frequent_candidates)\n        k += 1\n    return result"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities = np.round(averaged_probabilities, decimals=4)\n    predicted_classes = np.argmax(averaged_probabilities, axis=1)\n    averaged_probabilities_list = averaged_probabilities.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 441, "completion_id": 0, "solution": "import numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    if window_len == 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.54 - 0.46 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len)\n        window = 0.54 - 0.46 * np.cos(2 * np.pi * n / window_len)\n    return [round(val, 4) for val in window]"}
{"task_id": 442, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"k-Nearest Neighbours classification accelerated by a KD-Tree.\n\n    The function must build a KD-Tree from the training data, query the *k* nearest\n    neighbours for every sample in *X_test*, perform a majority vote on their\n    labels and return the sequence of predicted labels.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_train, n_features) with training\n                  samples.\n        y_train: 1-D NumPy integer array of shape (n_train,) containing the class\n                  label for every training sample.\n        X_test:  2-D NumPy array of shape (n_test, n_features) with samples to\n                  be classified.\n        k:       Number of nearest neighbours to use (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A Python *list* with the predicted label for every row in *X_test*.\n    \"\"\"\n    tree = build_kdtree(X_train, y_train)\n    predictions = []\n    for x in X_test:\n        nearest_neighbors = query_kdtree(tree, x, k)\n        labels = [y_train[i] for i in nearest_neighbors]\n        prediction = np.argmax(np.bincount(labels))\n        predictions.append(prediction)\n    return predictions\ndef build_kdtree(X: np.ndarray, y: np.ndarray) -> tuple:\n    \"\"\"Build a balanced KD-Tree from the training data.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) with training samples.\n        y: 1-D NumPy integer array of shape (n_samples,) containing the class labels.\n\n    Returns:\n        A tuple representing the root node of the KD-Tree.\n    \"\"\"\n    if len(X) == 0:\n        return None\n    feature_idx = np.argmax(np.var(X, axis=0))\n    median = np.median(X[:, feature_idx])\n    left_idx = X[:, feature_idx] < median\n    right_idx = ~left_idx\n    left_tree = build_kdtree(X[left_idx], y[left_idx])\n    right_tree = build_kdtree(X[right_idx], y[right_idx])\n    node = (feature_idx, median, left_tree, right_tree)\n    return node\ndef query_kdtree(tree: tuple, x: np.ndarray, k: int) -> list[int]:\n    \"\"\"Query the k nearest neighbours for a given sample.\n\n    Args:\n        tree: The root node of the KD-Tree.\n        x: The sample to query.\n        k: The number of nearest neighbours to return.\n\n    Returns:\n        A list of indices of the k nearest neighbours.\n    \"\"\"\n    if tree is None:\n        return []\n    (feature_idx, median, left_tree, right_tree) = tree\n    if x[feature_idx] < median:\n        nearest_neighbors = query_kdtree(left_tree, x, k)\n    else:\n        nearest_neighbors = query_kdtree(right_tree, x, k)\n    if len(nearest_neighbors) < k:\n        if x[feature_idx] < median:\n            nearest_neighbors += query_kdtree(right_tree, x, k - len(nearest_neighbors))\n        else:\n            nearest_neighbors += query_kdtree(left_tree, x, k - len(nearest_neighbors))\n    distances = [np.linalg.norm(X_train[i] - x) for i in nearest_neighbors]\n    heap = []\n    for (i, dist) in zip(nearest_neighbors, distances):\n        if len(heap) < k:\n            heapq.heappush(heap, (dist, i))\n        else:\n            heapq.heappushpop(heap, (dist, i))\n    return [i for (_, i) in heap]"}
{"task_id": 443, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n    \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n    \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*.\n    \"\"\"\n    is_numeric = isinstance(threshold, (int, float))\n    if is_numeric:\n        mask = X[:, feature_i] >= threshold\n    else:\n        mask = X[:, feature_i] == threshold\n    left_subset = X[mask]\n    right_subset = X[~mask]\n    if left_subset.size == 0:\n        left_subset = np.zeros((0, X.shape[1]))\n    if right_subset.size == 0:\n        right_subset = np.zeros((0, X.shape[1]))\n    return (left_subset, right_subset)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        sigma = np.array(sigma)\n        if np.any(sigma <= 0):\n            return -1\n    dist_sq = np.sum((X[:, np.newaxis] - Y) ** 2 / sigma ** 2, axis=2)\n    kernel_matrix = np.exp(-0.5 * dist_sq)\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    initial_entropy = entropy(y)\n    best_feature_index = -1\n    best_threshold = None\n    best_gain = 0\n    left_majority_label = None\n    right_majority_label = None\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            (left_y, right_y) = split_data(X[:, feature_index], y, threshold)\n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            gain = initial_entropy - len(left_y) / len(y) * left_entropy - len(right_y) / len(y) * right_entropy\n            if gain > best_gain:\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                best_gain = gain\n                left_majority_label = Counter(left_y).most_common(1)[0][0]\n                right_majority_label = Counter(right_y).most_common(1)[0][0]\n    if best_feature_index == -1:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the Shannon entropy of a label vector.\"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return -np.sum(probabilities * np.log2(probabilities))\ndef split_data(X: np.ndarray, y: np.ndarray, threshold: float) -> tuple:\n    \"\"\"Split the data into two parts based on the threshold.\"\"\"\n    left_y = y[X <= threshold]\n    right_y = y[X > threshold]\n    return (left_y, right_y)"}
{"task_id": 447, "completion_id": 0, "solution": "import numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int,...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    arr = np.ones(shape, **kwargs)\n    result = arr.tolist()\n    return result"}
{"task_id": 448, "completion_id": 0, "solution": "import numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if len(y_train) == 0:\n        return []\n    mean_value = np.mean(y_train)\n    predictions = np.full(X_test.shape[0], mean_value)\n    predictions = np.round(predictions, 4)\n    predictions = predictions.tolist()\n    return predictions"}
{"task_id": 449, "completion_id": 0, "solution": "import numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    (X0, X1) = (X_train[y_train == 0], X_train[y_train == 1])\n    (Mu0, Mu1) = (np.mean(X0, axis=0), np.mean(X1, axis=0))\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    Sigma = 1.0 / X_train.shape[1] * np.dot(X_sub_Mu.T, X_sub_Mu)\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec ** 2))\n    w = normal_vec\n    b = -np.dot(w.T, (Mu0 + Mu1) / 2)\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    predictions = (np.dot(X_test, w) + b > 0).astype(int) * sign\n    return predictions.tolist()"}
{"task_id": 450, "completion_id": 0, "solution": "import numpy as np\ndef majority_vote(preds: np.ndarray) -> list[int]:\n    \"\"\"Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n    \"\"\"\n    counts = np.apply_along_axis(np.bincount, 1, preds)\n    majority_class = np.argmax(counts, axis=1)\n    return majority_class.tolist()"}
{"task_id": 451, "completion_id": 0, "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\nclass KDNode:\n    \"\"\"A node in the KD-Tree.\"\"\"\n\n    def __init__(self, point: np.ndarray, label: int, axis: int, left=None, right=None):\n        self.point = point\n        self.label = label\n        self.axis = axis\n        self.left = left\n        self.right = right\ndef build_kdtree(X_train: np.ndarray, y_train: np.ndarray, depth: int=0) -> Optional[KDNode]:\n    \"\"\"Build a KD-Tree from the training set.\"\"\"\n    if not X_train.size:\n        return None\n    axis = depth % X_train.shape[1]\n    sorted_indices = np.argsort(X_train[:, axis])\n    X_train = X_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    mid = X_train.shape[0] // 2\n    return KDNode(X_train[mid], y_train[mid], axis, build_kdtree(X_train[:mid], y_train[:mid], depth + 1), build_kdtree(X_train[mid + 1:], y_train[mid + 1:], depth + 1))\ndef euclidean_distance(point1: np.ndarray, point2: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return math.sqrt(np.sum((point1 - point2) ** 2))\ndef kdtree_knn_search(root: KDNode, point: np.ndarray, k: int, max_distance: float=float('inf')) -> List[Tuple[float, int]]:\n    \"\"\"Perform an exact k-nearest-neighbour search in the KD-Tree.\"\"\"\n    if root is None:\n        return []\n    axis_distance = point[root.axis] - root.point[root.axis]\n    plane_distance = euclidean_distance(point, root.point)\n    opposite_branch = root.left if axis_distance < 0 else root.right\n    same_branch = root.right if axis_distance < 0 else root.left\n    if plane_distance < max_distance:\n        max_distance = plane_distance\n    results = kdtree_knn_search(same_branch, point, k, max_distance)\n    if len(results) < k or abs(axis_distance) < max_distance:\n        results += kdtree_knn_search(opposite_branch, point, k, max_distance)\n    results.append((plane_distance, root.label))\n    return heapq.nsmallest(k, results)\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\"\"\"\n    if not X_train.size or k <= 0:\n        return []\n    kdtree_root = build_kdtree(X_train, y_train)\n    predictions = []\n    for point in X_test:\n        distances_and_labels = kdtree_knn_search(kdtree_root, point, k)\n        labels = [label for (_, label) in distances_and_labels]\n        counter = Counter(labels)\n        predicted_label = min([label for (label, _) in counter.most_common()], key=lambda x: (counter[x], x))\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    if isinstance(threshold, (int, float)):\n        subset1 = X[X[:, feature_i] >= threshold]\n        subset2 = X[X[:, feature_i] < threshold]\n    else:\n        subset1 = X[X[:, feature_i] == threshold]\n        subset2 = X[X[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    (b, n_actions) = Q.shape\n    if Q_next.shape != (b, n_actions) or len(actions) != b or len(rewards) != b or (len(dones) != b):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    targets = Q.copy()\n    for i in range(b):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n    targets = np.round(targets, 4).tolist()\n    return targets"}
{"task_id": 454, "completion_id": 0, "solution": "import numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    half_batch_size = batch_size // 2\n    valid_half = np.tile([1, 0], (half_batch_size, 1)).tolist()\n    fake_half = np.tile([0, 1], (half_batch_size, 1)).tolist()\n    valid_full = np.tile([1, 0], (batch_size, 1)).tolist()\n    return (valid_half, fake_half, valid_full)"}
{"task_id": 455, "completion_id": 0, "solution": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter\ndef knn_classifier(X_train, y_train, X_query, k, method='naive'):\n    \"\"\"k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, default \"naive\"\n        Neighbour search strategy: \"naive\", \"heap\" or \"kdtree\".\n\n    Returns\n    -------\n    list[int]\n        Predicted label for each query sample.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_query = np.array(X_query)\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def majority_vote(labels):\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        majority_labels = [label for (label, count) in counts.items() if count == max_count]\n        return min(majority_labels)\n    if method == 'naive':\n        predictions = []\n        for query in X_query:\n            distances = [euclidean_distance(query, x) for x in X_train]\n            indices = np.argsort(distances)[:k]\n            labels = y_train[indices]\n            prediction = majority_vote(labels)\n            predictions.append(prediction)\n        return predictions\n    elif method == 'heap':\n        predictions = []\n        for query in X_query:\n            distances = [(euclidean_distance(query, x), i) for (i, x) in enumerate(X_train)]\n            k_nearest = heapq.nsmallest(k, distances)\n            indices = [i for (_, i) in k_nearest]\n            labels = y_train[indices]\n            prediction = majority_vote(labels)\n            predictions.append(prediction)\n        return predictions\n    elif method == 'kdtree':\n\n        class KDTreeNode:\n\n            def __init__(self, x, y, axis, left=None, right=None):\n                self.x = x\n                self.y = y\n                self.axis = axis\n                self.left = left\n                self.right = right\n\n        def build_kdtree(X, y, depth=0):\n            if not X.size:\n                return None\n            axis = depth % X.shape[1]\n            idx = np.argsort(X[:, axis])[X.shape[0] // 2]\n            x = X[idx]\n            y_val = y[idx]\n            left_X = X[X[:, axis] < x[axis]]\n            left_y = y[X[:, axis] < x[axis]]\n            right_X = X[X[:, axis] >= x[axis]]\n            right_y = y[X[:, axis] >= x[axis]]\n            left = build_kdtree(left_X, left_y, depth + 1)\n            right = build_kdtree(right_X, right_y, depth + 1)\n            return KDTreeNode(x, y_val, axis, left, right)\n\n        def search_kdtree(node, query, k, heap):\n            if node is None:\n                return\n            axis = node.axis\n            opposite_child = node.right if query[axis] < node.x[axis] else node.left\n            same_child = node.left if query[axis] < node.x[axis] else node.right\n            search_kdtree(same_child, query, k, heap)\n            dist = euclidean_distance(query, node.x)\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, node.y))\n            elif dist < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-dist, node.y))\n            if opposite_child is not None and len(heap) < k or abs(query[axis] - node.x[axis]) < -heap[0][0]:\n                search_kdtree(opposite_child, query, k, heap)\n        kdtree = build_kdtree(X_train, y_train)\n        predictions = []\n        for query in X_query:\n            heap = []\n            search_kdtree(kdtree, query, k, heap)\n            labels = [y for (_, y) in heap]\n            prediction = majority_vote(labels)\n            predictions.append(prediction)\n        return predictions\n    else:\n        raise ValueError(\"Invalid method. Choose from 'naive', 'heap', or 'kdtree'.\")"}
{"task_id": 456, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]]\n        The covariance matrix rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if X.shape[0] < 2:\n        return -1\n    if Y is not None and X.shape[0] != Y.shape[0]:\n        return -1\n    if Y is None:\n        Y = X\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    centered_X = X - mean_X\n    centered_Y = Y - mean_Y\n    covariance_matrix = centered_X.T @ centered_Y / (X.shape[0] - 1)\n    covariance_matrix = np.round(covariance_matrix, 4).tolist()\n    return covariance_matrix"}
{"task_id": 457, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    if not 0 <= alpha <= 1:\n        return -1\n    weights = np.asarray(weights)\n    l2_norm = np.sum(weights ** 2)\n    l1_norm = np.sum(np.abs(weights))\n    penalty = 0.5 * alpha * l2_norm + (1 - alpha) * l1_norm\n    penalty = round(penalty, 4)\n    return penalty"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is not None and num_classes < max(labels) + 1:\n        return -1\n    if any((label < 0 for label in labels)):\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    one_hot_labels = [[1 if i == label else 0 for i in range(num_classes)] for label in labels]\n    return one_hot_labels"}
{"task_id": 459, "completion_id": 0, "solution": "import numpy as np\nimport heapq\ndef knn_validate_heap(X_train: 'np.ndarray', Y_train: 'np.ndarray', X_val: 'np.ndarray', Y_val: 'np.ndarray', k: int) -> tuple[float, list[int]]:\n    \"\"\"Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n    \"\"\"\n    n_val = X_val.shape[0]\n    predicted_labels = []\n    for i in range(n_val):\n        distances = np.linalg.norm(X_train - X_val[i], axis=1)\n        heap = []\n        for (j, dist) in enumerate(distances):\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, j))\n            else:\n                heapq.heappushpop(heap, (-dist, j))\n        neighbour_labels = [Y_train[j] for (_, j) in heap]\n        predicted_label = np.argmax(np.bincount(neighbour_labels))\n        predicted_labels.append(predicted_label)\n    accuracy = np.mean(np.array(predicted_labels) == Y_val)\n    accuracy = round(accuracy, 4)\n    return (accuracy, predicted_labels)"}
{"task_id": 460, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None=None) -> list | int:\n    \"\"\"Compute the Pearson correlation matrix between the columns of *X* and *Y*.\n\n    The function falls back to \u03c1(X, X) when *Y* is omitted.  Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    must then return `-1`.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or `-1` if the computation is not possible.\n    \"\"\"\n    if Y is None:\n        Y = X\n    if X.shape[0] != Y.shape[0]:\n        raise ValueError('X and Y must have the same number of rows')\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    dev_X = X - mean_X\n    dev_Y = Y - mean_Y\n    cov = np.dot(dev_X.T, dev_Y) / X.shape[0]\n    std_X = np.sqrt(np.sum(dev_X ** 2, axis=0) / X.shape[0])\n    std_Y = np.sqrt(np.sum(dev_Y ** 2, axis=0) / Y.shape[0])\n    if np.any(std_X == 0) or np.any(std_Y == 0):\n        return -1\n    corr = cov / (std_X[:, None] * std_Y[None, :])\n    corr = np.round(corr, 4).tolist()\n    return corr"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if n_estimators <= 0:\n        return np.round(np.mean(y) * np.ones_like(y), 4).tolist()\n    predictions = np.mean(y) * np.ones_like(y)\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        split_values = np.unique(x)[:-1]\n        best_split = None\n        best_sse = np.inf\n        for split in split_values:\n            left_mask = x <= split\n            right_mask = ~left_mask\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            left_mean = np.mean(residuals[left_mask])\n            right_mean = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - left_mean) ** 2) + np.sum((residuals[right_mask] - right_mean) ** 2)\n            if sse < best_sse:\n                best_split = split\n                best_sse = sse\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            stump_predictions = np.mean(residuals) * np.ones_like(residuals)\n        else:\n            stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        predictions += learning_rate * stump_predictions\n        if np.allclose(residuals, 0):\n            break\n    return np.round(predictions, 4).tolist()"}
{"task_id": 462, "completion_id": 0, "solution": "import numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter.  A value of 0 (or 1) should\n            return the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    if D == 0 or D == 1:\n        return mfccs\n    n = np.arange(mfccs.shape[1])\n    lifter = 1 + D / 2 * np.sin(np.pi * n / D)\n    liftered_mfccs = mfccs * lifter[np.newaxis, :]\n    return liftered_mfccs"}
{"task_id": 463, "completion_id": 0, "solution": "import math\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n    \"\"\"Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals.\n    \"\"\"\n    if not X:\n        return 0.0\n    max_distance = 0.0\n    for point in X:\n        distance = math.sqrt(sum(((a - b) ** 2 for (a, b) in zip(centroid, point))))\n        max_distance = max(max_distance, distance)\n    return round(max_distance, 4)"}
{"task_id": 464, "completion_id": 0, "solution": "import numpy as np\ndef knn_validate(X_train: np.ndarray, Y_train: np.ndarray, X_val: np.ndarray, Y_val: np.ndarray, k: int) -> tuple[float, list[int]]:\n    \"\"\"k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n\n    Args:\n        X_train: NumPy array of shape (n_train, n_features) containing the\n            training feature vectors.\n        Y_train: 1-D NumPy array with the corresponding integer class labels.\n        X_val: NumPy array of shape (n_val, n_features) with validation\n            samples.\n        Y_val: 1-D NumPy array with the true class labels for *X_val*.\n        k: The number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns:\n        A tuple (accuracy, predictions) where\n          \u2022 accuracy is the fraction of correctly classified validation\n            samples, rounded to 4 decimals.\n          \u2022 predictions is a list containing the predicted integer labels for\n            each sample in *X_val*.\n    \"\"\"\n    distances = np.linalg.norm(X_val[:, np.newaxis] - X_train, axis=2)\n    k_indices = np.argsort(distances, axis=1)[:, :k]\n    k_labels = Y_train[k_indices]\n    predictions = [np.argmax(np.bincount(labels)) for labels in k_labels]\n    accuracy = np.mean(np.array(predictions) == Y_val)\n    accuracy = round(accuracy, 4)\n    return (accuracy, predictions)"}
{"task_id": 465, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(gamma: float, **kwargs):\n    \"\"\"Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                   (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n    \"\"\"\n\n    def f(x1, x2):\n        norm_diff = np.linalg.norm(np.array(x1) - np.array(x2))\n        similarity = np.exp(-gamma * norm_diff ** 2)\n        return round(similarity, 4)\n    return f"}
{"task_id": 466, "completion_id": 0, "solution": "import string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    no_punct = line.translate(_PUNC_TABLE)\n    result = no_punct.strip()\n    return result"}
{"task_id": 467, "completion_id": 0, "solution": "import numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]]:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    if norm not in ['l1', 'l2']:\n        return -1\n    weights = np.array(weights)\n    if norm == 'l1':\n        penalty = C * np.sum(np.abs(weights))\n        gradient = C * np.sign(weights)\n    elif norm == 'l2':\n        penalty = 0.5 * C * np.sum(weights ** 2)\n        gradient = C * weights\n    penalty = round(penalty, 4)\n    gradient = [round(g, 4) for g in gradient]\n    return (penalty, gradient)"}
{"task_id": 468, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, num_iters: int=10000) -> list[int]:\n    \"\"\"Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n    \"\"\"\n    if y_train.ndim == 1:\n        y_train = y_train[:, np.newaxis]\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    W = np.zeros((X_train.shape[1], 1))\n    for _ in range(num_iters):\n        h = 1 / (1 + np.exp(-np.dot(X_train, W)))\n        dW = np.dot(X_train.T, h - y_train) / X_train.shape[0]\n        W -= learning_rate * dW\n    h_test = 1 / (1 + np.exp(-np.dot(X_test, W)))\n    predictions = (h_test >= 0.5).astype(int).flatten().tolist()\n    return predictions"}
{"task_id": 469, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n\n    def inner(x1, x2):\n        x1 = np.asarray(x1, dtype=np.float64)\n        x2 = np.asarray(x2, dtype=np.float64)\n        if len(x1) != len(x2):\n            return -1\n        return np.inner(x1, x2).item()\n    return inner"}
{"task_id": 470, "completion_id": 0, "solution": "import os\nimport stat\ndef resolve_symlinks(path):\n    \"\"\"Recursively resolve symbolic links in a path.\"\"\"\n    if not os.path.exists(path):\n        return path\n    path_stat = os.lstat(path)\n    if stat.S_ISLNK(path_stat.st_mode):\n        link_target = os.readlink(path)\n        if os.path.isabs(link_target):\n            return resolve_symlinks(link_target)\n        else:\n            return resolve_symlinks(os.path.join(os.path.dirname(path), link_target))\n    else:\n        return path\ndef normalize_path(path):\n    \"\"\"Normalize a path by removing any redundant separators or parent directory references.\"\"\"\n    components = path.split(os.sep)\n    normalized_components = []\n    for component in components:\n        if component == '..':\n            if normalized_components:\n                normalized_components.pop()\n        elif component not in ['', '.']:\n            normalized_components.append(component)\n    normalized_path = os.sep.join(normalized_components)\n    if path.startswith(os.sep):\n        normalized_path = os.sep + normalized_path\n    return normalized_path\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                    relative and may contain symlinks or redundant path\n                    elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    abs_path = os.path.abspath(file_path)\n    real_path = resolve_symlinks(abs_path)\n    normalized_path = normalize_path(real_path)\n    script_dir = os.path.dirname(normalized_path)\n    return script_dir"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        greedy_action = np.argmax(q_table[next_state])\n        expected_value = (1 - epsilon + epsilon / num_actions) * q_table[next_state][greedy_action] + epsilon / num_actions * sum((q_table[next_state][a] for a in range(num_actions) if a != greedy_action))\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 472, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x: list | list[list]):\n    \"\"\"Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(probabilities, gradient)`` where both elements keep the same\n        shape as *x* and are rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    max_x = np.max(x, axis=-1, keepdims=True)\n    exp_x = np.exp(x - max_x)\n    sum_exp_x = np.sum(exp_x, axis=-1, keepdims=True)\n    probabilities = exp_x / sum_exp_x\n    gradient = probabilities * (1 - probabilities)\n    probabilities = np.round(probabilities, 4).tolist()\n    gradient = np.round(gradient, 4).tolist()\n    return (probabilities, gradient)"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    Y_train = np.zeros(m * n_train)\n    Y_val = np.zeros(m * n_val)\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        for j in range(n_train):\n            X_train[i * n_train + j, 0] = round(random.uniform(x_min, x_max), 4)\n            X_train[i * n_train + j, 1] = round(random.uniform(y_min, y_max), 4)\n            Y_train[i * n_train + j] = label\n        for j in range(n_val):\n            X_val[i * n_val + j, 0] = round(random.uniform(x_min, x_max), 4)\n            X_val[i * n_val + j, 1] = round(random.uniform(y_min, y_max), 4)\n            Y_val[i * n_val + j] = label\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 477, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def heuristic(cell: Tuple[int, int]) -> int:\n        return abs(cell[0] - dest[0]) + abs(cell[1] - dest[1])\n    queue = [(0, start)]\n    cost = {start: 0}\n    prev = {}\n    while queue:\n        (f, cell) = heapq.heappop(queue)\n        if cell == dest:\n            return cost[cell]\n        for movement in movements:\n            (row, col) = (cell[0] + movement[0], cell[1] + movement[1])\n            if row < 0 or row >= len(grid) or col < 0 or (col >= len(grid[0])) or (grid[row][col] == 1):\n                continue\n            tentative_cost = cost[cell] + 1\n            if (row, col) not in cost or tentative_cost < cost[row, col]:\n                cost[row, col] = tentative_cost\n                prev[row, col] = cell\n                f_value = tentative_cost + heuristic((row, col))\n                heapq.heappush(queue, (f_value, (row, col)))\n    return -1"}
{"task_id": 478, "completion_id": 0, "solution": "import numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if X.size == 0:\n        return []\n    mean = np.mean(X, axis=0)\n    variance = np.sum((X - mean) ** 2, axis=0) / X.shape[0]\n    std_dev = np.sqrt(variance)\n    std_dev = [round(val, 4) for val in std_dev]\n    return std_dev"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    pull_counters = [0] * num_arms\n    for rewards_at_t in rewards:\n        if np.random.rand() < epsilon:\n            arm_idx = np.random.choice(num_arms)\n        else:\n            arm_idx = np.argmax(estimated_values)\n        reward = rewards_at_t[arm_idx]\n        pull_counters[arm_idx] += 1\n        estimated_values[arm_idx] += (reward - estimated_values[arm_idx]) / pull_counters[arm_idx]\n    return [round(ev, 4) for ev in estimated_values]"}
{"task_id": 480, "completion_id": 0, "solution": "import numpy as np\ndef mel_spectrogram(x: 'np.ndarray', window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    if alpha != 0:\n        x = np.append(x[0], x[1:] - alpha * x[:-1])\n    frame_width = int(round(window_duration * fs))\n    stride = int(round(stride_duration * fs))\n    if center:\n        x = np.pad(x, (frame_width // 2, frame_width // 2), mode='reflect')\n    frames = np.lib.stride_tricks.as_strided(x, shape=(int(np.ceil((len(x) - frame_width) / stride)) + 1, frame_width), strides=(stride * x.itemsize, x.itemsize))\n    if window == 'hamming':\n        window_func = np.hamming(frame_width)\n    elif window == 'hann':\n        window_func = np.hanning(frame_width)\n    elif window == 'blackman_harris':\n        window_func = np.blackman(frame_width)\n    else:\n        raise ValueError('Invalid window function')\n    frames *= window_func\n    fft_out = np.fft.rfft(frames)\n    power_spectrum = np.abs(fft_out) ** 2 / frame_width\n    mel_min = 0\n    mel_max = 2595 * np.log10(1 + fs / 2 / 700)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = 700 * (10 ** (mel_points / 2595) - 1)\n    bin_indices = np.floor(hz_points * frame_width / fs).astype(int)\n    fbank = np.zeros((n_filters, int(frame_width // 2 + 1)))\n    for i in range(n_filters):\n        fbank[i, bin_indices[i]:bin_indices[i + 1]] = np.linspace(0, 1, bin_indices[i + 1] - bin_indices[i])\n        fbank[i, bin_indices[i + 1]:bin_indices[i + 2]] = np.linspace(1, 0, bin_indices[i + 2] - bin_indices[i + 1])\n    filter_energies = np.dot(power_spectrum, fbank.T)\n    if mean_normalize:\n        filter_energies -= np.mean(filter_energies, axis=0)\n    filter_energies[filter_energies == 0] = np.finfo(float).eps\n    energy_per_frame = np.sum(power_spectrum, axis=1)\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    return (filter_energies, energy_per_frame)"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if not data.size:\n        return []\n    num_samples = data.shape[0]\n    labels = [-1] * num_samples\n    cluster_id = 0\n    for i in range(num_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = get_neighbors(data, i, eps)\n        if len(neighbors) < min_samples:\n            continue\n        labels[i] = cluster_id\n        expand_cluster(data, labels, neighbors, cluster_id, eps, min_samples)\n        cluster_id += 1\n    return labels\ndef get_neighbors(data: np.ndarray, index: int, eps: float) -> list[int]:\n    \"\"\"Get indices of points within eps radius of the point at *index*.\"\"\"\n    distances = np.linalg.norm(data - data[index], axis=1)\n    return np.where(distances <= eps)[0].tolist()"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Invalid label values. Labels must be non-negative and smaller than num_classes.')\n    categorical = np.zeros((len(y), num_classes), dtype=int)\n    categorical[np.arange(len(y)), y] = 1\n    return categorical"}
{"task_id": 483, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    one_hot_labels = []\n    for label in labels:\n        one_hot_label = [0] * num_classes\n        one_hot_label[label] = 1\n        one_hot_labels.append(one_hot_label)\n    return one_hot_labels"}
{"task_id": 484, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], degree: int, reg_factor: float=0.1, n_iterations: int=1000) -> list[float]:\n    \"\"\"Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n    \"\"\"\n    X_train_poly = np.array([np.power(X_train, i) for i in range(degree + 1)]).T\n    X_test_poly = np.array([np.power(X_test, i) for i in range(degree + 1)]).T\n    X_train_poly = np.hstack((np.ones((len(X_train), 1)), X_train_poly))\n    X_test_poly = np.hstack((np.ones((len(X_test), 1)), X_test_poly))\n    w = np.zeros(degree + 2)\n    for _ in range(n_iterations):\n        for j in range(degree + 2):\n            z_j = np.sum(X_train_poly[:, j] ** 2)\n            rho_j = np.sum(X_train_poly[:, j] * (y_train - np.dot(X_train_poly, w) + X_train_poly[:, j] * w[j]))\n            if j == 0:\n                w[j] = rho_j / z_j\n            else:\n                w[j] = np.sign(rho_j) * np.maximum(np.abs(rho_j) - reg_factor, 0) / z_j\n    predictions = np.dot(X_test_poly, w)\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n    train_data = list(zip(X_train, y_train))\n\n    def recursive_predict(test_value, data, depth):\n        if depth == max_depth or len(data) < 2:\n            return sum((target for (_, target) in data)) / len(data)\n        best_split = None\n        best_sse = float('inf')\n        for i in range(len(data) - 1):\n            split_point = (data[i][0] + data[i + 1][0]) / 2\n            left_data = [x for x in data if x[0] < split_point]\n            right_data = [x for x in data if x[0] >= split_point]\n            left_mean = sum((target for (_, target) in left_data)) / len(left_data) if left_data else 0\n            right_mean = sum((target for (_, target) in right_data)) / len(right_data) if right_data else 0\n            left_sse = sum(((target - left_mean) ** 2 for (_, target) in left_data))\n            right_sse = sum(((target - right_mean) ** 2 for (_, target) in right_data))\n            total_sse = left_sse + right_sse\n            if total_sse < best_sse:\n                best_split = split_point\n                best_sse = total_sse\n        if test_value < best_split:\n            left_data = [x for x in data if x[0] < best_split]\n            return recursive_predict(test_value, left_data, depth + 1)\n        else:\n            right_data = [x for x in data if x[0] >= best_split]\n            return recursive_predict(test_value, right_data, depth + 1)\n    return [recursive_predict(test_value, train_data, 0) for test_value in X_test]"}
{"task_id": 486, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n    \"\"\"\n    if len(y_true) != len(y_pred) or len(y_true) == 0:\n        return -1\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    mse = np.mean((y_true - y_pred) ** 2)\n    return round(mse, 4)"}
{"task_id": 487, "completion_id": 0, "solution": "import numpy as np\ndef k_means(X: np.ndarray, k: int, max_iters: int=300, tol: float=0.0001) -> list[int]:\n    \"\"\"Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    cluster_assignments = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iters):\n        for (i, sample) in enumerate(X):\n            distances = np.linalg.norm(sample - centroids, axis=1)\n            cluster_assignments[i] = np.argmin(distances)\n        new_centroids = np.array([X[cluster_assignments == i].mean(axis=0) for i in range(k)])\n        if np.linalg.norm(centroids - new_centroids) < tol:\n            break\n        centroids = new_centroids\n        for i in range(k):\n            if np.sum(cluster_assignments == i) == 0:\n                centroids[i] = new_centroids[i]\n    return cluster_assignments.tolist()"}
{"task_id": 488, "completion_id": 0, "solution": "import numpy as np\ndef calculate_variance(X):\n    \"\"\"Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n    \"\"\"\n    if not X or not all((isinstance(row, list) for row in X)) or (not all((len(row) == len(X[0]) for row in X))):\n        return -1\n    X = np.array(X)\n    mean = np.mean(X, axis=0)\n    variance = np.mean((X - mean) ** 2, axis=0)\n    return [round(var, 4) for var in variance]"}
{"task_id": 489, "completion_id": 0, "solution": "import numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    one_hot = np.asarray(one_hot)\n    if not np.all(np.sum(one_hot, axis=1) == 1):\n        return -1\n    nominal_labels = np.argmax(one_hot, axis=1)\n    return nominal_labels.tolist()"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.asarray(x)\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    sorted_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    sorted_transactions = [sorted(transaction, key=lambda item: frequent_items[item], reverse=True) for transaction in sorted_transactions]\n    fp_tree = FPtree()\n    for transaction in sorted_transactions:\n        fp_tree.insert(transaction)\n    frequent_itemsets = []\n    for item in fp_tree.header_table:\n        conditional_pattern_base = fp_tree.get_conditional_pattern_base(item)\n        conditional_fp_tree = FPtree()\n        for transaction in conditional_pattern_base:\n            conditional_fp_tree.insert(transaction)\n        if conditional_fp_tree.is_single_path():\n            path_items = conditional_fp_tree.get_path_items()\n            for r in range(1, len(path_items) + 1):\n                for combination in itertools.combinations(path_items, r):\n                    frequent_itemsets.append(tuple(sorted(combination)))\n        else:\n            recursive_itemsets = fp_growth(conditional_pattern_base, min_sup)\n            frequent_itemsets.extend(recursive_itemsets)\n    frequent_itemsets.extend([(item,) for item in frequent_items])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\nclass FPtree:\n\n    def __init__(self):\n        self.root = Node()\n        self.header_table = {}\n\n    def insert(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = Node()\n                current_node.children[item] = new_node\n                self.header_table.setdefault(item, []).append(new_node)\n            current_node = current_node.children[item]\n        current_node.count += 1\n\n    def get_conditional_pattern_base(self, item):\n        pattern_base = []\n        for node in self.header_table[item]:\n            transaction = []\n            current_node = node.parent\n            while current_node is not self.root:\n                transaction.append(current_node.item)\n                current_node = current_node.parent\n            transaction.reverse()\n            pattern_base.append(transaction)\n        return pattern_base\n\n    def is_single_path(self):\n        return len(self.root.children) == 1 and all((len(child.children) <= 1 for child in self.root.children.values()))\n\n    def get_path_items(self):\n        path_items = []\n        current_node = self.root\n        while current_node.children:\n            item = next(iter(current_node.children))\n            path_items.append(item)\n            current_node = current_node.children[item]\n        return path_items\nclass Node:\n\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n        self.parent = None\n        self.item = None"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0])\n    result = [[1.0] * n_samples for _ in range(1 + sum((combinations_with_replacement(range(n_features), r) for r in range(1, degree + 1))))]\n    index = 1\n    for d in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), d):\n            for i in range(n_samples):\n                value = 1.0\n                for j in combo:\n                    value *= X[i][j]\n                result[index][i] = value\n            index += 1\n    result = list(map(list, zip(*result)))\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.asarray(y)\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse_value = np.mean(squared_diffs)\n    mse_value = round(mse_value, 4)\n    return mse_value"}
{"task_id": 494, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    preds = np.array(preds)\n    if classifier:\n        aggregated_preds = np.apply_along_axis(lambda x: np.bincount(x).argmax(), 0, preds)\n    else:\n        aggregated_preds = np.mean(preds, axis=0).round(4)\n    return aggregated_preds.tolist()"}
{"task_id": 495, "completion_id": 0, "solution": "import numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    mean = np.mean(X, axis=0)\n    std = np.std(X, axis=0, ddof=0)\n    standardized_X = X.copy()\n    for i in range(X.shape[1]):\n        if std[i] != 0:\n            standardized_X[:, i] = (X[:, i] - mean[i]) / std[i]\n        else:\n            standardized_X[:, i] = 0\n    return np.round(standardized_X, 4).tolist()"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n    y = y.tolist()\n    grad = grad.tolist()\n    grad2 = grad2.tolist()\n    return (y, grad, grad2)"}
{"task_id": 497, "completion_id": 0, "solution": "import numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array(x)\n    result = np.exp(x)\n    result = np.round(result, 6)\n    result = result.tolist()\n    return result"}
{"task_id": 498, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n    \"\"\"\n    x = np.asarray(x)\n    if order not in [0, 1, 2]:\n        return []\n    if order == 0:\n        result = np.where(x > 0, x, alpha * x)\n    elif order == 1:\n        result = np.where(x > 0, 1, alpha)\n    else:\n        result = np.zeros_like(x)\n    return result.tolist()"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_features = data.shape[1]\n    if k < 1 or k > n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)\n    std[std == 0] = 1\n    standardised_data = (data - mean) / std\n    cov_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        eigenvectors[:, i] *= np.sign(eigenvectors[:, i].max())\n    projected_data = np.dot(standardised_data, eigenvectors[:, :k])\n    projected_data = np.round(projected_data, 4).tolist()\n    return projected_data"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    c = np.mean(y_train)\n    F = np.full_like(y_train, c)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_feature, best_threshold, best_left_value, best_right_value) = find_best_stump(X_train, residuals)\n        h = np.where(X_train[:, best_feature] <= best_threshold, best_left_value, best_right_value)\n        F += learning_rate * h\n    predictions = np.where(F > 0.5, 1, 0)\n    return predictions.tolist()\ndef find_best_stump(X: np.ndarray, residuals: np.ndarray) -> tuple[int, float, float, float]:\n    \"\"\"Find the best decision stump for the given residuals.\n\n    Args:\n        X: Feature matrix.\n        residuals: Residuals to fit.\n\n    Returns:\n        A tuple containing the best feature, threshold, left value, and right value.\n    \"\"\"\n    best_feature = -1\n    best_threshold = -1\n    best_left_value = -1\n    best_right_value = -1\n    best_error = np.inf\n    for feature in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            left_value = np.mean(residuals[X[:, feature] <= threshold])\n            right_value = np.mean(residuals[X[:, feature] > threshold])\n            error = np.sum((residuals - np.where(X[:, feature] <= threshold, left_value, right_value)) ** 2)\n            if error < best_error:\n                best_feature = feature\n                best_threshold = threshold\n                best_left_value = left_value\n                best_right_value = right_value\n                best_error = error\n    return (best_feature, best_threshold, best_left_value, best_right_value)"}
{"task_id": 501, "completion_id": 0, "solution": "def constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr"}
{"task_id": 502, "completion_id": 0, "solution": "import numpy as np\ndef hard_sigmoid(z: np.ndarray, order: int=0) -> list[float]:\n    \"\"\"Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return []\n    if order == 0:\n        result = np.where(z < -2.5, 0, np.where(z > 2.5, 1, 0.2 * z + 0.5))\n    elif order == 1:\n        result = np.where((z >= -2.5) & (z <= 2.5), 0.2, 0)\n    else:\n        result = np.zeros_like(z)\n    return np.round(result, 4).tolist()"}
{"task_id": 503, "completion_id": 0, "solution": "from copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    hparams_copy = deepcopy(hparams)\n    if updates is not None:\n        for (key, value) in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = value\n    return hparams_copy"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_prob = X\n    h_prob = h0_prob\n    for _ in range(k):\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    W_new = np.round(W_new, 4).tolist()\n    return W_new\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"Element-wise sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 508, "completion_id": 0, "solution": "from typing import Any, Dict, List\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n    \"\"\"Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n    \"\"\"\n    return [value for (key, value) in params.items() if name in key]"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x = np.asarray(x)\n    y = np.asarray(y)\n    differences = np.abs(x - y)\n    distance = np.max(differences)\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 511, "completion_id": 0, "solution": "import numpy as np\ndef random_bernoulli_mab(n_arms: int=10) -> list[float]:\n    \"\"\"\n    Generate a random Bernoulli multi-armed bandit environment.\n\n    Args:\n    n_arms (int): Number of arms in the bandit environment. Defaults to 10.\n\n    Returns:\n    list[float]: A list of success probabilities for each arm, rounded to 4 decimal places.\n    \"\"\"\n    if n_arms < 1:\n        return []\n    samples = np.random.uniform(0, 1, size=n_arms)\n    probabilities = samples / samples.sum()\n    rounded_probabilities = [round(p, 4) for p in probabilities]\n    return rounded_probabilities"}
{"task_id": 512, "completion_id": 0, "solution": "def pooling_shape(pool_shape: tuple[int, int], image_shape: tuple[int, int, int, int], stride: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n    \"\"\"\n    (k_h, k_w) = pool_shape\n    (_, _, h, w) = image_shape\n    (s_h, s_w) = stride\n    if k_h > h or k_w > w:\n        return -1\n    out_h = (h - k_h) // s_h + 1\n    out_w = (w - k_w) // s_w + 1\n    if (h - k_h) % s_h != 0 or (w - k_w) % s_w != 0:\n        return -1\n    return (out_h, out_w)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = np.dot(X, w)\n    interaction_term = 0.5 * (np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2).sum(axis=1, keepdims=True))\n    predictions = w0 + linear_term + interaction_term.sum(axis=1)\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 514, "completion_id": 0, "solution": "def switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    if current_phase not in ['training', 'testing']:\n        return -1\n    if set_train is not None and set_test is not None:\n        return -1\n    if set_train is not None and (not isinstance(set_train, bool)) or (set_test is not None and (not isinstance(set_test, bool))):\n        return -1\n    if set_train is not None:\n        return 'training' if set_train else 'testing'\n    elif set_test is not None:\n        return 'testing' if set_test else 'training'\n    else:\n        return 'testing' if current_phase == 'training' else 'training'"}
{"task_id": 515, "completion_id": 0, "solution": "from typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n\n    def _flatten(params: Dict[str, Any], prefix: str='') -> Dict[str, Any]:\n        flat_params = {}\n        for (key, value) in params.items():\n            new_key = prefix + key if prefix else key\n            if isinstance(value, dict):\n                flat_params.update(_flatten(value, new_key + '.'))\n            else:\n                flat_params[new_key] = value\n        return flat_params\n    return _flatten(params)"}
{"task_id": 516, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats.  If the vectors have different numbers of total\n    elements, the function must return -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    a = np.asarray(a)\n    b = np.asarray(b)\n    if len(a) != len(b):\n        return -1\n    distance = np.sqrt(np.sum((a - b) ** 2))\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.asarray(z)\n    sigmoid_z = 0.5 * (1 + np.tanh(z / 2))\n    sigmoid_z = np.round(sigmoid_z, 4)\n    if np.isscalar(z):\n        return sigmoid_z.item()\n    else:\n        return sigmoid_z.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> np.ndarray:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        if any((isinstance(i, list) for i in z)):\n            return [sigmoid_grad(i) for i in z]\n        else:\n            return [round(i * (1 - i), 4) for i in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4).tolist()\n    elif z == []:\n        return []\n    else:\n        raise ValueError('Invalid input type. Expected scalar, list or NumPy array.')"}
{"task_id": 521, "completion_id": 0, "solution": "import numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function should return 0 for every entry that is less than or equal to\n    zero and 1 for every entry that is strictly greater than zero.  Scalars\n    must yield a single integer; arrays/lists must yield a list of identical\n    shape.\n    \"\"\"\n    if isinstance(z, (int, float)) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        return 1 if z > 0 else 0\n    if isinstance(z, np.ndarray):\n        result = np.where(z > 0, 1, 0)\n        return result.tolist()\n    result = []\n    for elem in z:\n        if isinstance(elem, list):\n            result.append(relu_grad(elem))\n        else:\n            result.append(1 if elem > 0 else 0)\n    return result"}
{"task_id": 522, "completion_id": 0, "solution": "import numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int,...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    np.random.seed(42)\n    weights = np.random.standard_normal(weight_shape)\n    weights = np.round(weights, 4)\n    weights = weights.tolist()\n    return weights"}
{"task_id": 523, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        fan_in = weight_shape[0]\n    std_dev = np.sqrt(2 / fan_in)\n    weights = np.random.normal(loc=0, scale=std_dev, size=weight_shape)\n    weights = weights.round(4).tolist()\n    return weights\nweight_shape = (2, 2)"}
{"task_id": 525, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: np.ndarray, y: np.ndarray, lambda_: float=0.0) -> tuple[list[float], float]:\n    \"\"\"Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n    \"\"\"\n    if len(y.shape) == 1:\n        y = y[:, np.newaxis]\n    x_mean = np.mean(X, axis=0)\n    y_mean = np.mean(y, axis=0)\n    X_centred = X - x_mean\n    y_centred = y - y_mean\n    XTX = np.dot(X_centred.T, X_centred)\n    XTy = np.dot(X_centred.T, y_centred)\n    I = np.eye(X.shape[1])\n    weights = np.linalg.lstsq(XTX + lambda_ * I, XTy, rcond=None)[0].flatten()\n    bias = y_mean - np.dot(x_mean, weights)\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 527, "completion_id": 0, "solution": "import os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    if archive_format is None or archive_format == []:\n        return False\n    elif isinstance(archive_format, str):\n        if archive_format == 'auto':\n            archive_format = ['tar', 'zip']\n        else:\n            archive_format = [archive_format]\n    elif not isinstance(archive_format, list):\n        return False\n    file_ext = os.path.splitext(file_path)[1].lower()\n    tar_formats = ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz']\n    zip_format = ['.zip']\n    for fmt in archive_format:\n        if fmt == 'tar' and file_ext in tar_formats:\n            return True\n        elif fmt == 'zip' and file_ext in zip_format:\n            return True\n    return False"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081, x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081, x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081, w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_array = np.array(X)\n    (x1_min, x1_max) = (np.min(X_array[:, 0]), np.max(X_array[:, 0]))\n    (x2_min, x2_max) = (np.min(X_array[:, 1]), np.max(X_array[:, 1]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    predictions = np.sign(W[0] * x1_grid + W[1] * x2_grid + b)\n    predictions_list = predictions.astype(int).tolist()\n    return predictions_list"}
{"task_id": 529, "completion_id": 0, "solution": "import math\ndef generate_progress_bar(current: int, target: int | None, width: int=30) -> str:\n    \"\"\"Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n    \"\"\"\n    if target is None:\n        return f'{current:>7}/Unknown'\n    digits = math.floor(math.log10(target)) + 1\n    prog_width = int(width * current / target)\n    bar = f'{current:>{digits}}/{target} ['\n    if prog_width > 0:\n        bar += '=' * (prog_width - 1)\n        if current < target:\n            bar += '>'\n        else:\n            bar += '='\n    bar += '.' * (width - prog_width)\n    bar += ']'\n    return bar"}
{"task_id": 530, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-07\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.mean(y_true * np.log(y_pred_clipped) + (1 - y_true) * np.log(1 - y_pred_clipped))\n    return round(loss, 4)"}
{"task_id": 531, "completion_id": 0, "solution": "import numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError('Window length must be strictly positive')\n    if symmetric:\n        theta = np.linspace(-np.pi, np.pi, window_len)\n    else:\n        theta = np.linspace(-np.pi, np.pi, window_len + 1)[:-1]\n    window = np.zeros(window_len)\n    for (k, coef) in enumerate(coefs):\n        window += coef * np.cos(k * theta)\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 532, "completion_id": 0, "solution": "def count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total_params = 0\n    for i in range(len(layers) - 1):\n        (n_in, n_out) = (layers[i], layers[i + 1])\n        weights = n_in * n_out\n        biases = n_out\n        total_params += weights + biases\n    return total_params"}
{"task_id": 533, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    x = np.asarray(x)\n    likelihood = np.exp(-(x - mean) ** 2 / (2 * sigma ** 2)) / (sigma * np.sqrt(2 * np.pi))\n    likelihood = np.round(likelihood, 4)\n    if likelihood.size == 1:\n        return likelihood.item()\n    else:\n        return likelihood.tolist()"}
{"task_id": 534, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals.  Returns a float for\n        scalar input; otherwise returns a Python list preserving the input\n        shape.\n    \"\"\"\n    Z = np.asarray(Z)\n    sigmoid_Z = 1 / (1 + np.exp(-Z))\n    sigmoid_Z = np.round(sigmoid_Z, 4)\n    if Z.ndim == 0:\n        return sigmoid_Z.item()\n    else:\n        return sigmoid_Z.tolist()"}
{"task_id": 536, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression(X_train, y_train, X_test, method='normal', alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    if method == 'normal':\n        theta = np.linalg.inv(X_train.T @ X_train) @ X_train.T @ y_train\n    else:\n        theta = np.zeros(X_train.shape[1])\n        for _ in range(num_iter):\n            theta -= alpha / X_train.shape[0] * X_train.T @ (X_train @ theta - y_train)\n    predictions = X_test @ theta\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    class_priors = np.array([np.mean(y_train == 0), np.mean(y_train == 1)])\n    n_features = X_train.shape[1]\n    means = np.zeros((2, n_features))\n    stds = np.zeros((2, n_features))\n    for c in [0, 1]:\n        X_c = X_train[y_train == c]\n        means[c] = np.mean(X_c, axis=0)\n        stds[c] = np.std(X_c, axis=0) + 1e-09\n    posterior_probs = np.zeros((X_test.shape[0], 2))\n    for (i, x) in enumerate(X_test):\n        for c in [0, 1]:\n            likelihood = np.prod(np.exp(-(x - means[c]) ** 2 / (2 * stds[c] ** 2)) / (np.sqrt(2 * np.pi) * stds[c]))\n            posterior_probs[i, c] = likelihood * class_priors[c]\n    posterior_probs /= np.sum(posterior_probs, axis=1, keepdims=True)\n    predicted_labels = np.argmax(posterior_probs, axis=1)\n    return predicted_labels.tolist()"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Model probabilities (shape (1,m) or (m,))\n    Y (np.ndarray): True labels (shape (1,m) or (m,))\n\n    Returns:\n    float: Binary cross-entropy cost\n    \"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    m = AL.shape[0] if AL.ndim == 1 else AL.shape[1]\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))"}
{"task_id": 540, "completion_id": 0, "solution": "import numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    sigmoid_Z = 1 / (1 + np.exp(-Z))\n    derivative = sigmoid_Z * (1 - sigmoid_Z)\n    rounded_derivative = np.round(derivative, 4)\n    result = rounded_derivative.tolist()\n    return result"}
{"task_id": 541, "completion_id": 0, "solution": "import numpy as np\ndef return_input_grads(y, y_hat):\n    \"\"\"Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n    \"\"\"\n    y = np.asarray(y)\n    y_hat = np.asarray(y_hat)\n    grads = y_hat - y\n    grads = np.round(grads, 4)\n    grads = grads.tolist()\n    return grads"}
{"task_id": 542, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"\n    Performs a single optimization step of the RMSProp algorithm.\n\n    Args:\n    - params: A list of NumPy arrays containing the model parameters.\n    - grads: A list of NumPy arrays containing the gradients of the loss with respect to the model parameters.\n    - s: A list of NumPy arrays containing the running averages of past squared gradients. If None, it will be created internally.\n    - alpha: The learning rate.\n    - beta: The decay rate of the running averages.\n    - epsilon: A small value added to the denominator for numerical stability.\n\n    Returns:\n    - new_params: A list of NumPy arrays containing the updated model parameters.\n    - new_s: A list of NumPy arrays containing the updated running averages.\n    \"\"\"\n    if s is None or len(s) == 0:\n        s = [np.zeros_like(g) for g in grads]\n    new_s = [beta * si + (1 - beta) * g ** 2 for (si, g) in zip(s, grads)]\n    new_params = [p - alpha * g / (np.sqrt(si) + epsilon) for (p, g, si) in zip(params, grads, new_s)]\n    new_params = [np.round(p, 6) for p in new_params]\n    return (new_params, new_s)"}
{"task_id": 543, "completion_id": 0, "solution": "from collections import Counter\ndef cal_gini_index(data: list) -> float:\n    \"\"\"Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n    \"\"\"\n    if not data:\n        return 0.0\n    label_counts = Counter(data)\n    total = sum(label_counts.values())\n    proportions = [count / total for count in label_counts.values()]\n    gini_index = 1 - sum([p ** 2 for p in proportions])\n    return round(gini_index, 4)"}
{"task_id": 544, "completion_id": 0, "solution": "def split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)"}
{"task_id": 545, "completion_id": 0, "solution": "def tree_stats(root: 'node | None') -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n\n    def _tree_stats(node, depth):\n        if node is None:\n            return (0, 0)\n        if node.results is not None:\n            return (1, depth)\n        (left_leaf_count, left_max_depth) = _tree_stats(node.left, depth + 1)\n        (right_leaf_count, right_max_depth) = _tree_stats(node.right, depth + 1)\n        return (left_leaf_count + right_leaf_count, max(left_max_depth, right_max_depth))\n    if root is None:\n        return (0, 0)\n    return _tree_stats(root, 1)"}
{"task_id": 546, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, Dict, List\ndef gini_impurity(class_labels: List[Any]) -> float:\n    \"\"\"Compute the Gini impurity of a set of class labels.\"\"\"\n    label_counts = Counter(class_labels)\n    total = sum(label_counts.values())\n    return 1 - sum(((count / total) ** 2 for count in label_counts.values()))\ndef gini_gain(parent_impurity: float, left_labels: List[Any], right_labels: List[Any]) -> float:\n    \"\"\"Compute the Gini gain of a split.\"\"\"\n    left_impurity = gini_impurity(left_labels)\n    right_impurity = gini_impurity(right_labels)\n    left_weight = len(left_labels) / (len(left_labels) + len(right_labels))\n    right_weight = 1 - left_weight\n    return parent_impurity - left_weight * left_impurity - right_weight * right_impurity\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n    \"\"\"Build a CART decision tree using the Gini impurity criterion.\"\"\"\n    if not data:\n        return {}\n    class_labels = [sample[-1] for sample in data]\n    current_impurity = gini_impurity(class_labels)\n    best_feature = None\n    best_value = None\n    best_gain = 0\n    for feature_idx in range(len(data[0]) - 1):\n        feature_values = [sample[feature_idx] for sample in data]\n        unique_values = sorted(set(feature_values))\n        for value in unique_values:\n            left_samples = [sample for sample in data if sample[feature_idx] == value]\n            right_samples = [sample for sample in data if sample[feature_idx] != value]\n            if not left_samples or not right_samples:\n                continue\n            left_labels = [sample[-1] for sample in left_samples]\n            right_labels = [sample[-1] for sample in right_samples]\n            gain = gini_gain(current_impurity, left_labels, right_labels)\n            if gain > best_gain:\n                best_feature = feature_idx\n                best_value = value\n                best_gain = gain\n    if best_gain <= 0:\n        label_counts = Counter(class_labels)\n        majority_label = max(label_counts, key=label_counts.get)\n        return {'label': majority_label}\n    left_data = [sample for sample in data if sample[best_feature] == best_value]\n    right_data = [sample for sample in data if sample[best_feature] != best_value]\n    return {'feature': best_feature, 'value': best_value, 'left': build_tree(left_data), 'right': build_tree(right_data)}"}
{"task_id": 547, "completion_id": 0, "solution": "import numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n\n    Args:\n        A (list[list[float]]): State-transition matrix (n\u00d7n).\n        B (list[list[float]]): Emission probability matrix (n\u00d7m).\n        S (list[float]):       Initial state distribution (length n).\n        obs (list[int]):       Observation sequence (symbol indices).\n        t (int):               Desired time step (0-based).\n\n    Returns:\n        list[float] | int: \u03b1_t as a list or -1 on error.\n    \"\"\"\n    n = len(S)\n    if len(A) != n or len(A[0]) != n:\n        return -1\n    if len(B) != n or len(B[0]) != max(obs) + 1:\n        return -1\n    if t < 0 or t >= len(obs):\n        return -1\n    A = np.array(A)\n    B = np.array(B)\n    S = np.array(S)\n    obs = np.array(obs)\n    alpha = S * B[:, obs[0]]\n    for i in range(1, t + 1):\n        alpha = alpha.T @ A * B[:, obs[i]]\n    return np.round(alpha, 4).tolist()"}
{"task_id": 548, "completion_id": 0, "solution": "import numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function must implement the forward\u2013backward equations internally and\n    compute\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    for the requested time index t.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence encoded as integers.\n        t: Time index (0 \u2264 t < len(obs)\u22121).\n\n    Returns:\n        The \u03be matrix as a list of lists rounded to 4 decimals, or \u22121 for an\n        invalid t.\n    \"\"\"\n    if t < 0 or t >= len(obs) - 1:\n        return -1\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    alpha = np.zeros((len(obs), len(pi)))\n    alpha[0] = pi * B[:, obs[0]]\n    for i in range(1, len(obs)):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, obs[i]]\n    beta = np.ones((len(obs), len(pi)))\n    for i in range(len(obs) - 2, -1, -1):\n        beta[i] = np.dot(A, beta[i + 1] * B[:, obs[i + 1]])\n    xi = np.zeros((len(pi), len(pi)))\n    for i in range(len(pi)):\n        for j in range(len(pi)):\n            xi[i, j] = alpha[t, i] * A[i, j] * B[j, obs[t + 1]] * beta[t + 1, j]\n    xi /= np.sum(xi)\n    xi = np.round(xi, 4).tolist()\n    return xi"}
{"task_id": 549, "completion_id": 0, "solution": "import numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if len(x) != len(y):\n        return -1\n    dist = np.sum((x - y) ** 2)\n    dist = round(dist, 4)\n    return dist"}
{"task_id": 551, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function must return (-1, None, parent_gini).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    parent_gini = gini(y)\n    best_feature = -1\n    best_value = None\n    best_gini = parent_gini\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for split_value in unique_values:\n            left_mask = feature_values == split_value\n            left_y = y[left_mask]\n            right_y = y[~left_mask]\n            left_gini = gini(left_y)\n            right_gini = gini(right_y)\n            weighted_gini = left_mask.sum() / n_samples * left_gini + (~left_mask).sum() / n_samples * right_gini\n            if weighted_gini < best_gini - epsilon:\n                best_feature = feature_index\n                best_value = split_value\n                best_gini = weighted_gini\n    if best_feature == -1:\n        return (-1, None, parent_gini)\n    else:\n        return (best_feature, best_value, float(best_gini))\ndef gini(y: np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a set of class labels.\"\"\"\n    counter = Counter(y)\n    total = sum(counter.values())\n    gini = 1.0\n    for count in counter.values():\n        p = count / total\n        gini -= p ** 2\n    return gini"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    alpha = np.zeros((len(observations), len(pi)))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, len(observations)):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((len(observations), len(pi)))\n    beta[-1] = np.ones(len(pi))\n    for i in range(len(observations) - 2, -1, -1):\n        beta[i] = np.dot(A, beta[i + 1] * B[:, observations[i + 1]])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    return np.round(gamma_t, 4).tolist()"}
{"task_id": 553, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    w = np.zeros(X_train.shape[1])\n    for _ in range(max_iter):\n        z = np.dot(X_train, w)\n        sigma_z = 1 / (1 + np.exp(-z))\n        gradient = np.dot(X_train.T, y_train - sigma_z) / X_train.shape[0]\n        w += alpha * gradient\n    z_test = np.dot(X_test, w)\n    sigma_z_test = 1 / (1 + np.exp(-z_test))\n    predictions = [1 if p >= 0.5 else 0 for p in sigma_z_test]\n    return predictions"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    visited = [False] * n_samples\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n    core_points = [i for (i, neighbors) in enumerate(neighborhoods) if len(neighbors) >= min_samples]\n    cluster_id = 1\n    for point in core_points:\n        if not visited[point]:\n            visited[point] = True\n            labels[point] = cluster_id\n            queue = deque([point])\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        labels[neighbor] = cluster_id\n                        if len(neighborhoods[neighbor]) >= min_samples:\n                            queue.append(neighbor)\n            cluster_id += 1\n    return labels"}
{"task_id": 559, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n    \"\"\"\n\n    def __init__(self, val: Optional[int]=None, right: 'Optional[Node]'=None, left: 'Optional[Node]'=None):\n        self.val = val\n        self.right = right\n        self.left = left\ndef leaf_values(root: Optional[Node]) -> List[int]:\n    \"\"\"Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n    \"\"\"\n\n    def traverse(node: Optional[Node]) -> List[int]:\n        \"\"\"Recursively traverse the tree and collect leaf values.\"\"\"\n        if node is None:\n            return []\n        if node.left is None and node.right is None:\n            return [node.val]\n        return traverse(node.left) + traverse(node.right)\n    return traverse(root)"}
{"task_id": 560, "completion_id": 0, "solution": "import math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n\n    def build_kd_tree(points, depth=0):\n        if not points:\n            return None\n        axis = depth % len(points[0])\n        sorted_points = sorted(points, key=lambda x: x[axis])\n        mid = len(sorted_points) // 2\n        node = {'index': sorted_points[mid], 'axis': axis, 'left': build_kd_tree(sorted_points[:mid], depth + 1), 'right': build_kd_tree(sorted_points[mid + 1:], depth + 1)}\n        return node\n\n    def distance(point1, point2):\n        return sum(((a - b) ** 2 for (a, b) in zip(point1, point2)))\n\n    def search_kd_tree(node, query, k, heap):\n        if node is None:\n            return\n        dist = distance(node['index'], query)\n        heapq.heappush(heap, (dist, node['index']))\n        if len(heap) > k:\n            heapq.heappop(heap)\n        axis = node['axis']\n        if query[axis] < node['index'][axis]:\n            search_kd_tree(node['left'], query, k, heap)\n            if len(heap) < k or heap[0][0] > (query[axis] - node['index'][axis]) ** 2:\n                search_kd_tree(node['right'], query, k, heap)\n        else:\n            search_kd_tree(node['right'], query, k, heap)\n            if len(heap) < k or heap[0][0] > (query[axis] - node['index'][axis]) ** 2:\n                search_kd_tree(node['left'], query, k, heap)\n    kd_tree = build_kd_tree(points)\n    heap = []\n    search_kd_tree(kd_tree, query, k, heap)\n    return [points.index(point) for (dist, point) in sorted(heap)]\npoints = [[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]]\nquery = [9, 2]\nk = 2"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Gaussian Mixture Model via Expectation-Maximization algorithm.\n\n    Parameters:\n    data (np.ndarray): 2-D array containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int, optional): Maximum number of iterations. Defaults to 200.\n    epsilon (float, optional): Tolerance for convergence. Defaults to 1e-4.\n\n    Returns:\n    list[int]: List of length N containing the final cluster label of each sample.\n    \"\"\"\n    if k == 1:\n        return [0] * len(data)\n    (n_samples, n_features) = data.shape\n    weights = np.random.rand(k)\n    weights /= weights.sum()\n    means = np.random.rand(k, n_features)\n    covariances = np.array([np.eye(n_features) for _ in range(k)])\n    for _ in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[i]) * diff, axis=1)\n            responsibilities[:, i] = weights[i] * np.exp(exponent) / np.sqrt(np.linalg.det(covariances[i]))\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        new_weights = responsibilities.mean(axis=0)\n        new_means = responsibilities.T @ data / responsibilities.sum(axis=0, keepdims=True).T\n        new_covariances = np.array([(responsibilities[:, i, None] * (data - new_means[i]) @ (data - new_means[i]).T).sum(axis=0) / responsibilities.sum(axis=0)[i] for i in range(k)])\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    label_mapping = {old: new for (old, new) in zip(sorted_indices, range(k))}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    dist_sq = np.sum((data[:, np.newaxis] - data) ** 2, axis=2)\n    similarity = np.exp(-gamma * dist_sq)\n    degree = np.diag(np.sum(similarity, axis=1))\n    laplacian = degree - similarity\n    if method == 'normalized':\n        inv_sqrt_degree = np.linalg.inv(np.sqrt(degree))\n        laplacian = inv_sqrt_degree @ laplacian @ inv_sqrt_degree\n    (eigen_values, eigen_vectors) = np.linalg.eigh(laplacian)\n    eigen_vectors = eigen_vectors[:, :n_cluster]\n    if method == 'normalized':\n        eigen_vectors = eigen_vectors / np.linalg.norm(eigen_vectors, axis=1, keepdims=True)\n    centroids = eigen_vectors[:n_cluster]\n    labels = np.argmin(np.linalg.norm(eigen_vectors[:, np.newaxis] - centroids, axis=2), axis=1)\n    labels = np.argsort(np.min(np.where(labels[:, np.newaxis] == np.arange(n_cluster), np.arange(len(data)), np.inf), axis=0))[labels]\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    raise ValueError(\"Invalid task_type. Must be 'classification' or 'regression'.\")"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    label_entropy = entropy(y)\n    best_feature_index = 0\n    max_information_gain = 0.0\n    for feature_index in range(X.shape[1]):\n        conditional_entropy = conditional_entropy_after_split(X[:, feature_index], y)\n        information_gain = label_entropy - conditional_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label distribution.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    float\n        The entropy of the label distribution.\n    \"\"\"\n    label_probabilities = np.bincount(labels) / len(labels)\n    entropy = -np.sum(label_probabilities * np.log2(label_probabilities))\n    return entropy\ndef conditional_entropy_after_split(feature_values: np.ndarray, labels: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy after splitting by the values of a feature.\n\n    Parameters\n    ----------\n    feature_values : np.ndarray\n        1-D array of shape (n_samples,) containing discrete feature values\n        encoded as non-negative integers starting from 0.\n    labels : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    float\n        The conditional entropy after splitting by the values of the feature.\n    \"\"\"\n    feature_probabilities = np.bincount(feature_values) / len(feature_values)\n    conditional_entropy = 0.0\n    for feature_value in np.unique(feature_values):\n        labels_after_split = labels[feature_values == feature_value]\n        entropy_after_split = entropy(labels_after_split)\n        conditional_entropy += feature_probabilities[feature_value] * entropy_after_split\n    return conditional_entropy"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(X):\n        if X.shape[0] <= 1 or (X.shape[0] == sample_size and height_limit == 0):\n            return LeafNode(X)\n        else:\n            feature_idx = np.random.randint(0, n_features)\n            threshold = np.random.uniform(X[:, feature_idx].min(), X[:, feature_idx].max())\n            left_child = X[X[:, feature_idx] < threshold]\n            right_child = X[X[:, feature_idx] >= threshold]\n            return InternalNode(feature_idx, threshold, build_tree(left_child), build_tree(right_child))\n\n    def path_length(x, tree):\n        if isinstance(tree, LeafNode):\n            return c(tree.samples.shape[0])\n        elif x[tree.feature_idx] < tree.threshold:\n            return 1 + path_length(x, tree.left_child)\n        else:\n            return 1 + path_length(x, tree.right_child)\n\n    class LeafNode:\n\n        def __init__(self, samples):\n            self.samples = samples\n\n    class InternalNode:\n\n        def __init__(self, feature_idx, threshold, left_child, right_child):\n            self.feature_idx = feature_idx\n            self.threshold = threshold\n            self.left_child = left_child\n            self.right_child = right_child\n    trees = []\n    for _ in range(n_trees):\n        subsample_idx = np.random.choice(n_samples, sample_size, replace=False)\n        subsample = data[subsample_idx]\n        tree = build_tree(subsample)\n        trees.append(tree)\n    path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        x = data[i]\n        path_lengths[i] = np.mean([path_length(x, tree) for tree in trees])\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    scores = 2 ** (-path_lengths / phi)\n    if epsilon == 0:\n        return []\n    else:\n        threshold = np.percentile(scores, 100 * (1 - epsilon))\n        outlier_idx = np.where(scores > threshold)[0]\n        return sorted(outlier_idx.tolist())"}
{"task_id": 567, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef majority_vote(predictions: list[list[int | float]]) -> list[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    predictions = np.array(predictions)\n    final_labels = []\n    for column in predictions.T:\n        label = stats.mode(column)[0][0]\n        final_labels.append(int(label))\n    return final_labels"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Maximum Entropy Classifier with Generalised Iterative Scaling.\n\n    Parameters:\n    X_train (np.ndarray): Training samples.\n    y_train (np.ndarray): Training labels.\n    X_test (np.ndarray): Samples to classify.\n    epsilon (float, optional): Convergence threshold. Defaults to 1e-3.\n    n_iter (int, optional): Maximum number of iterations. Defaults to 100.\n\n    Returns:\n    list[int]: Predicted labels for every row in X_test.\n    \"\"\"\n    n_features = X_train.shape[1]\n    n_labels = len(set(y_train))\n    n_test = X_test.shape[0]\n    weights = np.zeros((n_features, n_labels))\n    empirical_distributions = defaultdict(lambda : defaultdict(int))\n    for (x, y) in zip(X_train, y_train):\n        for (feature_index, feature_value) in enumerate(x):\n            empirical_distributions[feature_index, feature_value][y] += 1\n    for (feature_index, feature_value) in empirical_distributions:\n        total = sum(empirical_distributions[feature_index, feature_value].values())\n        for label in empirical_distributions[feature_index, feature_value]:\n            empirical_distributions[feature_index, feature_value][label] /= total\n    for _ in range(n_iter):\n        max_update = 0\n        for feature_index in range(n_features):\n            for label in range(n_labels):\n                update = 0\n                for (x, y) in zip(X_train, y_train):\n                    if x[feature_index] == 1 and y == label:\n                        update += 1 / len(X_train)\n                update -= empirical_distributions[feature_index, 1][label]\n                weights[feature_index, label] += update\n                max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    predicted_labels = []\n    for x in X_test:\n        label_scores = np.zeros(n_labels)\n        for (feature_index, feature_value) in enumerate(x):\n            for label in range(n_labels):\n                label_scores[label] += weights[feature_index, label] * feature_value\n        predicted_labels.append(np.argmax(label_scores))\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_docs = Counter((word for (_, words) in data for word in set(words)))\n    total_docs = len(data)\n    word_ratios = [(word, round(count / total_docs, 4)) for (word, count) in word_docs.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = set((word for (word, _) in word_ratios))\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = set((word for (word, _) in word_ratios[:cut_off]))\n    return (word_ratios, top_words)"}
{"task_id": 570, "completion_id": 0, "solution": "from collections import defaultdict\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]], keywords: set[str], test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    keyword_counts = defaultdict(lambda : defaultdict(int))\n    class_counts = defaultdict(int)\n    for (label, tokens) in train_data:\n        class_counts[label] += 1\n        for token in tokens:\n            if token in keywords:\n                keyword_counts[label][token] += 1\n    keyword_probabilities = defaultdict(dict)\n    for (label, token_counts) in keyword_counts.items():\n        for (token, count) in token_counts.items():\n            keyword_probabilities[label][token] = count / class_counts[label]\n    predicted_labels = []\n    for tokens in test_samples:\n        likelihoods = defaultdict(float)\n        for label in class_counts:\n            likelihood = 1.0\n            for token in keywords:\n                if token in tokens:\n                    likelihood *= keyword_probabilities[label].get(token, 0)\n                else:\n                    likelihood *= 1 - keyword_probabilities[label].get(token, 0)\n            likelihoods[label] = likelihood\n        predicted_label = max(likelihoods, key=likelihoods.get)\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    b = np.mean(y - np.dot(X, w))\n    w = np.round(w, 4)\n    b = np.round(b, 4)\n    w_list = w.tolist()\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute Local Outlier Factor (LOF) scores and detect outliers.\n\n    Parameters:\n    - data (numpy array): input data\n    - k (int): number of nearest neighbors\n    - epsilon (float, optional): threshold for outlier detection (default=1.5)\n\n    Returns:\n    - lof_scores (list): LOF scores rounded to 4 decimals\n    - outlier_indices (list): indices of samples with LOF score > epsilon\n    \"\"\"\n    n = data.shape[0]\n    dist_matrix = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n    k_distances = np.sort(dist_matrix, axis=1)[:, k]\n    k_neighbors = np.argsort(dist_matrix, axis=1)[:, :k]\n    reach_dist = np.maximum(k_distances[:, np.newaxis], dist_matrix)\n    lrd = k / np.sum(reach_dist, axis=1)\n    lof = np.sum(lrd[k_neighbors], axis=1) / (k * lrd)\n    lof_scores = np.round(lof, 4).tolist()\n    outlier_indices = np.where(lof > epsilon)[0].tolist()\n    return (lof_scores, outlier_indices)"}
{"task_id": 573, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.zeros(n)\n    b = 0.0\n    error_count_history = []\n    for _ in range(n_iter):\n        error_count = 0\n        for (x, y) in zip(X_train, y_train):\n            if y * (np.dot(w, x) + b) <= 0:\n                w += eta * y * x\n                b += eta * y\n                error_count += 1\n        error_count_history.append(error_count)\n        if error_count == 0:\n            break\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w, b, error_count_history)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    y_train = np.zeros(m * n_train, dtype=int)\n    y_val = np.zeros(m * n_val, dtype=int)\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        (x_low, x_high) = (base + 1, base + 9)\n        (y_low, y_high) = (base + 1, base + 9)\n        for i in range(n_train):\n            X_train[c * n_train + i, 0] = round(random.uniform(x_low, x_high), 4)\n            X_train[c * n_train + i, 1] = round(random.uniform(y_low, y_high), 4)\n            y_train[c * n_train + i] = c\n        for i in range(n_val):\n            X_val[c * n_val + i, 0] = round(random.uniform(x_low, x_high), 4)\n            X_val[c * n_val + i, 1] = round(random.uniform(y_low, y_high), 4)\n            y_val[c * n_val + i] = c\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 577, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n\n    The function must create two NumPy arrays with coordinates and two with\n    labels using the rules explained in the task description.\n\n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n\n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for i in range(m):\n        for _ in range(n_train):\n            x = round(random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4)\n            y = round(random.uniform((i % 2 * 0.5 + 0.1) * 10, (i % 2 * 0.5 + 0.9) * 10), 4)\n            X_train.append([x, y])\n            y_train.append((i - 0.5) * 2)\n        for _ in range(n_val):\n            x = round(random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4)\n            y = round(random.uniform((i % 2 * 0.5 + 0.1) * 10, (i % 2 * 0.5 + 0.9) * 10), 4)\n            X_val.append([x, y])\n            y_val.append((i - 0.5) * 2)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 578, "completion_id": 0, "solution": "from typing import List, Tuple\ndef make_pairs(corpus: List) -> List[Tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    return list(zip(corpus, corpus[1:]))\ncorpus = [1]"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    labels = np.zeros(X.shape[0], dtype=int)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(X[:, np.newaxis] - centres, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            points_in_cluster = X[labels == i]\n            if points_in_cluster.size:\n                centres[i] = np.mean(points_in_cluster, axis=0)\n    centres = np.round(centres, 4).tolist()\n    return (labels.tolist(), centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residual = y - predictions\n        weight_gradients = -2 * np.dot(X.T, residual) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        bias_gradient = -2 * np.sum(residual) / m\n        weights -= learning_rate * weight_gradients\n        bias -= learning_rate * bias_gradient\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 582, "completion_id": 0, "solution": "import numpy as np\ndef nearest_neighbor_graph(X):\n    \"\"\"Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n    \"\"\"\n    X = np.array(X)\n    (n_samples, _) = X.shape\n    if n_samples == 1:\n        return [[0]]\n    k = min(int(np.sqrt(n_samples)), 10)\n    distances = np.linalg.norm(X[:, np.newaxis] - X, axis=2)\n    nearest_neighbors = np.argsort(distances, axis=1)[:, 1:k + 1]\n    adjacency_matrix = np.zeros((n_samples, n_samples), dtype=int)\n    for i in range(n_samples):\n        for j in nearest_neighbors[i]:\n            adjacency_matrix[i, j] = 1\n            adjacency_matrix[j, i] = 1\n    adjacency_matrix = adjacency_matrix.tolist()\n    return adjacency_matrix"}
{"task_id": 584, "completion_id": 0, "solution": "import numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    frame = np.array(state)\n    stacked_state = np.stack([frame] * 4, axis=-1)\n    return stacked_state.tolist()"}
{"task_id": 585, "completion_id": 0, "solution": "def cmp(a: object, b: object) -> int:\n    \"\"\"Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n    \"\"\"\n    if a < b:\n        return -1\n    elif a > b:\n        return 1\n    else:\n        return 0"}
{"task_id": 586, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 587, "completion_id": 0, "solution": "import random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    random.seed(0)\n    buffer = []\n    outputs = []\n    for op in operations:\n        if op[0] == 'append':\n            buffer.append(op[1])\n        elif op[0] == 'pop':\n            output = buffer.pop() if buffer else None\n            outputs.append(output)\n        elif op[0] == 'sample':\n            batch_size = op[1]\n            output = random.sample(buffer, batch_size) if batch_size <= len(buffer) else []\n            outputs.append(output)\n        elif op[0] == 'size':\n            output = len(buffer)\n            outputs.append(output)\n    return outputs"}
{"task_id": 588, "completion_id": 0, "solution": "from typing import Optional\nclass Node:\n    \"\"\"A simple binary tree node.\"\"\"\n\n    def __init__(self, data=None, split_variable=None, split_variable_value=None, left: Optional['Node']=None, right: Optional['Node']=None, depth: int=0, criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\ndef tree_max_depth(root: Optional[Node]) -> int:\n    \"\"\"Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n    \"\"\"\n    if root is None:\n        return -1\n    else:\n        left_depth = tree_max_depth(root.left)\n        right_depth = tree_max_depth(root.right)\n        return 1 + max(left_depth, right_depth) - 1"}
{"task_id": 590, "completion_id": 0, "solution": "import numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    The function receives the currently visible part of the board (```ground```)\n    and the already placed flags (```flags```). It must return two *sorted* lists:\n\n    1. **clicks** \u2013 every square that can be safely revealed.\n    2. **new_flags** \u2013 every square that must be a bomb according to the rules\n       described in the task description.\n\n    Notes:\n        * ``ground`` and ``flags`` have identical dimensions.\n        * Hidden squares are represented by ``np.nan`` inside ``ground``.\n        * Neighbourhood is the 8-connected Moore neighbourhood.\n    \"\"\"\n    (rows, cols) = (len(ground), len(ground[0]))\n    (clicks, new_flags) = (set(), set())\n\n    def neighbours(r, c):\n        \"\"\"Generate all 8-connected neighbours of a square.\"\"\"\n        for dr in [-1, 0, 1]:\n            for dc in [-1, 0, 1]:\n                if dr == 0 and dc == 0:\n                    continue\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    yield (nr, nc)\n    for r in range(rows):\n        for c in range(cols):\n            if not np.isnan(ground[r][c]) and (not flags[r][c]):\n                value = ground[r][c]\n                if value == 0:\n                    for (nr, nc) in neighbours(r, c):\n                        if np.isnan(ground[nr][nc]) and (not flags[nr][nc]):\n                            clicks.add((nr, nc))\n                elif value == 8:\n                    for (nr, nc) in neighbours(r, c):\n                        if np.isnan(ground[nr][nc]) and (not flags[nr][nc]):\n                            new_flags.add((nr, nc))\n                else:\n                    bombs = sum((1 for (nr, nc) in neighbours(r, c) if flags[nr][nc]))\n                    unexplored = sum((1 for (nr, nc) in neighbours(r, c) if np.isnan(ground[nr][nc]) and (not flags[nr][nc])))\n                    if bombs == value:\n                        for (nr, nc) in neighbours(r, c):\n                            if np.isnan(ground[nr][nc]) and (not flags[nr][nc]):\n                                clicks.add((nr, nc))\n                    elif unexplored == value:\n                        for (nr, nc) in neighbours(r, c):\n                            if np.isnan(ground[nr][nc]) and (not flags[nr][nc]):\n                                new_flags.add((nr, nc))\n    return (sorted(list(clicks)), sorted(list(new_flags)))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for (i, layer_weights) in enumerate(weights):\n        x = np.concatenate((np.array([1]), x))\n        x = np.dot(x, np.array(layer_weights).T)\n        if i < len(weights) - 1:\n            x = np.maximum(x, 0)\n    output = np.round(x, 4)\n    if len(output) == 1:\n        return output.item()\n    else:\n        return output.tolist()"}
{"task_id": 592, "completion_id": 0, "solution": "import numpy as np\ndef analyze_cell(clicked: np.ndarray, flags: np.ndarray, row: int, col: int) -> tuple[list[tuple[int, int]], int]:\n    \"\"\"Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                  already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n    \"\"\"\n    (rows, cols) = clicked.shape\n    unopened_neighbours = []\n    flagged_count = 0\n    for r in range(max(0, row - 1), min(rows, row + 2)):\n        for c in range(max(0, col - 1), min(cols, col + 2)):\n            if r == row and c == col:\n                continue\n            if not clicked[r, c]:\n                unopened_neighbours.append((r, c))\n            if flags[r, c]:\n                flagged_count += 1\n    unopened_neighbours.sort()\n    return (unopened_neighbours, flagged_count)"}
{"task_id": 593, "completion_id": 0, "solution": "from copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function must apply the logical rules described in the task statement\n    (solved constraints, propagation, subset rule, duplicate removal) until no\n    new information can be obtained.\n\n    The result is a tuple (safe, mines) of two **alphabetically sorted** lists.\n    The first element contains all variables that are certainly safe, the second\n    one all variables that are certainly mines.  If nothing can be deduced an\n    empty list must be returned instead.\n    \"\"\"\n    constraints = deepcopy(constraints)\n    safe = set()\n    mines = set()\n    while True:\n        for (variables, value) in constraints[:]:\n            if value == 0:\n                safe.update(variables)\n                constraints.remove([variables, value])\n            elif value == len(variables):\n                mines.update(variables)\n                constraints.remove([variables, value])\n        for (variables, value) in constraints:\n            variables = [v for v in variables if v not in safe and v not in mines]\n            value -= len([v for v in variables if v in mines])\n            if variables:\n                constraints[constraints.index([variables, value])] = [variables, value]\n            else:\n                constraints.remove([variables, value])\n        for (i, (variables1, value1)) in enumerate(constraints):\n            for (j, (variables2, value2)) in enumerate(constraints):\n                if i != j and set(variables1).issubset(set(variables2)):\n                    variables2 = [v for v in variables2 if v not in variables1]\n                    value2 -= value1\n                    constraints[j] = [variables2, value2]\n        constraints = [list(x) for x in set((tuple(x) for x in constraints))]\n        if not (safe or mines):\n            break\n    return (sorted(list(safe)), sorted(list(mines)))"}
{"task_id": 594, "completion_id": 0, "solution": "def maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n    \"\"\"Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n    \"\"\"\n    graph = {}\n    (rows, cols) = (len(maze), len(maze[0]))\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for row in range(rows):\n        for col in range(cols):\n            if maze[row][col] == 0:\n                neighbors = []\n                for (dr, dc) in directions:\n                    (r, c) = (row + dr, col + dc)\n                    if 0 <= r < rows and 0 <= c < cols and (maze[r][c] == 0):\n                        neighbors.append((r, c))\n                graph[row, col] = sorted(neighbors)\n    return graph"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: np.ndarray, k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Compute K-Means clustering centroids.\n\n    Args:\n    X (np.ndarray): Input data points (n_samples \u00d7 n_features).\n    k (int): Number of clusters.\n    max_iters (int, optional): Maximum number of iterations. Defaults to 100.\n\n    Returns:\n    list[list[float]]: Sorted, rounded centroids.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) ** 2, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(centroids - new_centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = sorted_centroids.round(4).tolist()\n    return rounded_centroids"}
{"task_id": 596, "completion_id": 0, "solution": "import numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function must return a dictionary that maps each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, return an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    graph = {}\n    for row in range(maze.shape[0]):\n        for col in range(maze.shape[1]):\n            if maze[row, col] == 1:\n                neighbours = []\n                for (dr, dc) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (r, c) = (row + dr, col + dc)\n                    if 0 <= r < maze.shape[0] and 0 <= c < maze.shape[1]:\n                        if maze[r, c] == 1:\n                            neighbours.append((r, c))\n                neighbours.sort()\n                graph[row, col] = neighbours\n    return graph"}
{"task_id": 597, "completion_id": 0, "solution": "import numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n\n    Parameters\n    ----------\n    X : list | np.ndarray\n        Feature matrix with shape (n_samples, n_features). Only numerical\n        values are allowed.\n    y : list | np.ndarray\n        Target vector with shape (n_samples,).\n\n    Returns\n    -------\n    list\n        [index_of_best_feature, value_of_best_threshold, minimal_weighted_mse]\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    best_feature_index = None\n    best_threshold = None\n    best_mse = np.inf\n    for feature_index in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = ~left_mask\n            left_var = np.var(y[left_mask])\n            right_var = np.var(y[right_mask])\n            mse = np.sum(left_mask) / len(y) * left_var + np.sum(right_mask) / len(y) * right_var\n            if mse < best_mse:\n                best_feature_index = feature_index\n                best_threshold = threshold\n                best_mse = mse\n    best_mse = round(best_mse, 4)\n    return [best_feature_index, best_threshold, best_mse]"}
{"task_id": 598, "completion_id": 0, "solution": "import numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    mean = np.mean(arr, axis=0)\n    std = np.std(arr, axis=0, ddof=0)\n    std[std == 0] = 1e-08\n    standardized = (arr - mean) / std\n    standardized = np.nan_to_num(standardized, posinf=0, neginf=0)\n    standardized = np.round(standardized, 4)\n    result = standardized.tolist()\n    return result"}
