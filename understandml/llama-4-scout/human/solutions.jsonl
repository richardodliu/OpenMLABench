{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the dot product of a matrix and a vector.\n\n    Args:\n    a (list[list[int|float]]): The input matrix.\n    b (list[int|float]): The input vector.\n\n    Returns:\n    list[int|float]: The resulting vector if the operation is valid, or -1 if the matrix and vector dimensions are incompatible.\n    \"\"\"\n    if not a:\n        return -1\n    num_cols = len(a[0])\n    if not all((len(row) == num_cols for row in a)):\n        raise ValueError('All rows in the matrix must have the same number of columns')\n    if num_cols != len(b):\n        return -1\n    result = [sum((row[i] * b[i] for i in range(num_cols))) for row in a]\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    This function computes the transpose of a given matrix.\n\n    Args:\n        a (list[list[int|float]]): The input matrix.\n\n    Returns:\n        list[list[int|float]]: The transpose of the input matrix.\n    \"\"\"\n    if not a:\n        return []\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes a given matrix into a specified shape.\n\n    Args:\n    a (list[list[int|float]]): The input matrix.\n    new_shape (tuple[int, int]): The desired shape of the output matrix.\n\n    Returns:\n    list[list[int|float]]: The reshaped matrix if possible, otherwise an empty list.\n    \"\"\"\n    arr = np.array(a)\n    if arr.size != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_arr = arr.reshape(new_shape)\n    return reshaped_arr.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n\n    Args:\n        matrix (list[list[float]]): A 2D list of numbers.\n        mode (str): 'row' or 'column' to specify the calculation mode.\n\n    Returns:\n        list[float]: A list of means according to the specified mode.\n\n    Raises:\n        ValueError: If the mode is neither 'row' nor 'column'.\n    \"\"\"\n    if not matrix:\n        return []\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be either 'row' or 'column'.\")\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    else:\n        transposed_matrix = list(map(list, zip(*matrix)))\n        return [sum(col) / len(col) for col in transposed_matrix]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    This function multiplies a given matrix by a scalar value.\n\n    Args:\n    matrix (list[list[int|float]]): A 2D list representing the matrix.\n    scalar (int|float): The scalar value to multiply the matrix by.\n\n    Returns:\n    list[list[int|float]]: The resulting matrix after scalar multiplication.\n    \"\"\"\n    if not matrix:\n        return []\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    result = [[0 for _ in range(num_cols)] for _ in range(num_rows)]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result[i][j] = matrix[i][j] * scalar\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": ""}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    This function transforms a given matrix A using the operation T^{-1}AS, \n    where T and S are invertible matrices.\n\n    Args:\n        A (list[list[int|float]]): The matrix to be transformed.\n        T (list[list[int|float]]): The invertible matrix T.\n        S (list[list[int|float]]): The invertible matrix S.\n\n    Returns:\n        list[list[int|float]]: The transformed matrix A. Returns -1 if T or S is not invertible.\n    \"\"\"\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    T_inv = np.linalg.inv(T)\n    transformed_A = np.dot(np.dot(T_inv, A), S)\n    transformed_A = np.round(transformed_A, 4).tolist()\n    return transformed_A"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n\n    Args:\n    matrix (list[list[float]]): A 2x2 matrix represented as a list of lists.\n\n    Returns:\n    list[list[float]]: The inverse of the input matrix, or None if the matrix is not invertible.\n    \"\"\"\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Input matrix must be a 2x2 matrix')\n    (a, b) = (matrix[0][0], matrix[0][1])\n    (c, d) = (matrix[1][0], matrix[1][1])\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    This function multiplies two matrices a and b.\n    \n    Args:\n    a (list[list[int | float]]): The first matrix.\n    b (list[list[int | float]]): The second matrix.\n    \n    Returns:\n    list[list[int | float]]: The product of matrices a and b if they can be multiplied; otherwise, -1.\n    \"\"\"\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)\n    cols_b = len(b[0])\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n\n    Args:\n    vectors (List[List[float]]): A list of lists, where each inner list represents a feature with its observations.\n\n    Returns:\n    List[List[float]]: A covariance matrix as a list of lists.\n    \"\"\"\n    array = np.array(vectors)\n    mean = np.mean(array, axis=1, keepdims=True)\n    centered_array = array - mean\n    covariance_matrix = np.cov(array, rowvar=False)\n    covariance_matrix = covariance_matrix.tolist()\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solve a system of linear equations using the Jacobi method.\n\n    Parameters:\n    A (np.ndarray): A square matrix representing the coefficients of the linear equations.\n    b (np.ndarray): A column vector representing the constants on the right-hand side of the equations.\n    n (int): The number of iterations.\n\n    Returns:\n    list: The approximate solution x after n iterations.\n    \"\"\"\n    num_equations = len(b)\n    x = np.zeros(num_equations)\n    for _ in range(n):\n        x_new = np.zeros(num_equations)\n        for i in range(num_equations):\n            s = sum((A[i, j] * x[j] for j in range(num_equations) if j != i))\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return np.round(x, 4).tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Singular Value Decomposition (SVD) of a 2x2 matrix using the Jacobian method.\n\n    Args:\n    A (np.ndarray): A 2x2 matrix.\n\n    Returns:\n    tuple: A tuple containing the U, \u03a3, and V matrices.\n    \"\"\"\n    assert A.shape == (2, 2), 'Input matrix must be 2x2'\n    A_T_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    U = np.dot(A, eigenvectors) / singular_values\n    U[:, 0] = U[:, 0] / np.linalg.norm(U[:, 0])\n    U[:, 1] = U[:, 1] / np.linalg.norm(U[:, 1])\n    \u03a3 = np.diag(singular_values)\n    V = eigenvectors.T\n    U = np.round(U, 4)\n    \u03a3 = np.round(\u03a3, 4)\n    V = np.round(V, 4)\n    return (U, \u03a3, V)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's Expansion.\n\n    Args:\n    matrix: A 4x4 matrix represented as a list of lists.\n\n    Returns:\n    The determinant of the matrix.\n\n    Raises:\n    ValueError: If the input matrix is not a 4x4 matrix.\n    \"\"\"\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Input matrix must be a 4x4 matrix')\n    if len(matrix) == 1:\n        return matrix[0][0]\n    det = 0\n    for i in range(len(matrix)):\n        minor = [row[:i] + row[i + 1:] for row in matrix[1:]]\n        det_minor = determinant_3x3(minor)\n        det += (-1) ** i * matrix[0][i] * det_minor\n    return det\ndef determinant_3x3(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 3x3 matrix using Laplace's Expansion.\n\n    Args:\n    matrix: A 3x3 matrix represented as a list of lists.\n\n    Returns:\n    The determinant of the matrix.\n\n    Raises:\n    ValueError: If the input matrix is not a 3x3 matrix.\n    \"\"\"\n    if len(matrix) != 3 or any((len(row) != 3 for row in matrix)):\n        raise ValueError('Input matrix must be a 3x3 matrix')\n    det = 0\n    for i in range(len(matrix)):\n        minor = [row[:i] + row[i + 1:] for row in matrix[1:]]\n        det_minor = determinant_2x2(minor)\n        det += (-1) ** i * matrix[0][i] * det_minor\n    return det\ndef determinant_2x2(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 2x2 matrix.\n\n    Args:\n    matrix: A 2x2 matrix represented as a list of lists.\n\n    Returns:\n    The determinant of the matrix.\n\n    Raises:\n    ValueError: If the input matrix is not a 2x2 matrix.\n    \"\"\"\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        raise ValueError('Input matrix must be a 2x2 matrix')\n    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_array = np.array(X)\n    y_array = np.array(y)\n    X_pseudo_inverse = np.linalg.pinv(X_array)\n    theta = np.dot(X_pseudo_inverse, y_array)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    \"\"\"\n    This function performs linear regression using gradient descent.\n\n    Parameters:\n    X (np.ndarray): Features with a column of ones for the intercept.\n    y (np.ndarray): Target variable.\n    alpha (float): Learning rate.\n    iterations (int): Number of iterations.\n\n    Returns:\n    list: Coefficients of the linear regression model.\n    \"\"\"\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        errors = predictions - y\n        gradient = 2 / len(y) * np.dot(X.T, errors)\n        theta = theta - alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    This function performs feature scaling on a dataset using both standardization and min-max normalization.\n\n    Args:\n    data (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature.\n\n    Returns:\n    tuple[list[list[float]], list[list[float]]]: Two 2D lists, one scaled by standardization and one by min-max normalization.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    min_values = np.min(data, axis=0)\n    max_values = np.max(data, axis=0)\n    normalized_data = (data - min_values) / (max_values - min_values)\n    standardized_scaled_data = np.round(standardized_data, 4).tolist()\n    normalized_scaled_data = np.round(normalized_data, 4).tolist()\n    return (standardized_scaled_data, normalized_scaled_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Performs k-Means clustering on a given set of points.\n\n    Args:\n    points (list[tuple[float, float]]): A list of points, where each point is a tuple of coordinates.\n    k (int): The number of clusters to form.\n    initial_centroids (list[tuple[float, float]]): A list of initial centroid points, each a tuple of coordinates.\n    max_iterations (int): The maximum number of iterations to perform.\n\n    Returns:\n    list[tuple[float, float]]: A list of the final centroids of the clusters, where each centroid is rounded to the nearest fourth decimal.\n    \"\"\"\n    points = np.array(points)\n    initial_centroids = np.array(initial_centroids)\n    centroids = initial_centroids\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return [tuple(np.round(centroid, 4)) for centroid in centroids]"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Args:\n    - X (np.ndarray): The feature dataset.\n    - y (np.ndarray): The target variable.\n    - k (int, optional): The number of folds. Defaults to 5.\n    - shuffle (bool, optional): Whether to shuffle the data before splitting. Defaults to True.\n    - random_seed (int, optional): The random seed for shuffling. Defaults to None.\n\n    Returns:\n    - list: A list of tuples, where each tuple contains the train and test indices for a fold.\n    \"\"\"\n    if len(X) != len(y):\n        raise ValueError('The feature dataset and target variable must have the same length.')\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = len(X)\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    folds = []\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start = 0\n    for i in range(k):\n        end = start + fold_size + (1 if i < remainder else 0)\n        test_indices = indices[start:end]\n        train_indices = np.concatenate((indices[:start], indices[end:]))\n        folds.append((train_indices, test_indices))\n        start = end\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Performs Principal Component Analysis (PCA) from scratch.\n\n    Args:\n    - data (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature.\n    - k (int): The number of principal components to return.\n\n    Returns:\n    - list[list[float]]: A list of the k principal components, each represented as a list of floats.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    std_dev = np.std(standardized_data, axis=0)\n    standardized_data = standardized_data / std_dev\n    cov_matrix = np.cov(standardized_data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(-eigenvalues)\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = eigenvectors[:, :k].tolist()\n    principal_components = [[round(val, 4) for val in component] for component in principal_components]\n    return principal_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learn a decision tree from a list of examples.\n\n    Args:\n    - examples (list[dict]): A list of examples, where each example is a dict of attribute-value pairs.\n    - attributes (list[str]): A list of attribute names.\n    - target_attr (str): The name of the target attribute.\n\n    Returns:\n    - A nested dictionary representing the decision tree.\n    \"\"\"\n    if not examples:\n        return None\n    target_values = [example[target_attr] for example in examples]\n    if len(set(target_values)) == 1:\n        return {target_attr: target_values[0]}\n    if not attributes:\n        most_common_target = Counter(target_values).most_common(1)[0][0]\n        return {target_attr: most_common_target}\n    best_attr = max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n    tree = {best_attr: {}}\n    attr_values = set((example[best_attr] for example in examples))\n    for value in attr_values:\n        value_examples = [example for example in examples if example[best_attr] == value]\n        if len(value_examples) == 0:\n            most_common_target = Counter(target_values).most_common(1)[0][0]\n            tree[best_attr][value] = {target_attr: most_common_target}\n        else:\n            remaining_attributes = [attr for attr in attributes if attr != best_attr]\n            subtree = learn_decision_tree(value_examples, remaining_attributes, target_attr)\n            tree[best_attr][value] = subtree\n    return tree\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"\n    Calculate the entropy of a list of examples.\n\n    Args:\n    - examples (list[dict]): A list of examples, where each example is a dict of attribute-value pairs.\n    - target_attr (str): The name of the target attribute.\n\n    Returns:\n    - The entropy of the list of examples.\n    \"\"\"\n    target_values = [example[target_attr] for example in examples]\n    probabilities = [target_values.count(value) / len(target_values) for value in set(target_values)]\n    entropy = -sum((prob * math.log2(prob) for prob in probabilities))\n    return entropy\ndef information_gain(examples: list[dict], attr: str, target_attr: str) -> float:\n    \"\"\"\n    Calculate the information gain of an attribute.\n\n    Args:\n    - examples (list[dict]): A list of examples, where each example is a dict of attribute-value pairs.\n    - attr (str): The name of the attribute.\n    - target_attr (str): The name of the target attribute.\n\n    Returns:\n    - The information gain of the attribute.\n    \"\"\"\n    total_entropy = entropy(examples, target_attr)\n    attr_values = set((example[attr] for example in examples))\n    attr_entropy = 0\n    for value in attr_values:\n        value_examples = [example for example in examples if example[attr] == value]\n        prob = len(value_examples) / len(examples)\n        value_entropy = entropy(value_examples, target_attr)\n        attr_entropy += prob * value_entropy\n    gain = total_entropy - attr_entropy\n    return gain"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    This function implements a deterministic version of the Pegasos algorithm to train a kernel SVM classifier.\n\n    Parameters:\n    - data (np.ndarray): A 2D NumPy array where each row represents a data sample and each column represents a feature.\n    - labels (np.ndarray): A 1D NumPy array where each entry corresponds to the label of the sample.\n    - kernel (str): The choice of kernel. Defaults to 'linear'. Options: 'linear', 'rbf'.\n    - lambda_val (float): The regularization parameter. Defaults to 0.01.\n    - iterations (int): The number of iterations. Defaults to 100.\n    - sigma (float): The standard deviation for the RBF kernel. Defaults to 1.0.\n\n    Returns:\n    - alpha (list): The model's alpha coefficients.\n    - b (float): The model's bias.\n    \"\"\"\n    n_samples = data.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n\n    def linear_kernel(x, y):\n        return np.dot(x, y)\n\n    def rbf_kernel(x, y):\n        return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))\n    if kernel == 'linear':\n        kernel_func = linear_kernel\n    elif kernel == 'rbf':\n        kernel_func = rbf_kernel\n    else:\n        raise ValueError(\"Invalid kernel. Options: 'linear', 'rbf'.\")\n    for _ in range(iterations):\n        prediction = np.zeros(n_samples)\n        for i in range(n_samples):\n            for j in range(n_samples):\n                prediction[i] += alpha[j] * labels[j] * kernel_func(data[i], data[j])\n            prediction[i] += b\n        for i in range(n_samples):\n            if labels[i] * prediction[i] < 1:\n                alpha[i] += 1 - lambda_val * alpha[i]\n            else:\n                alpha[i] *= 1 - lambda_val\n        b = np.mean(labels - prediction)\n    alpha = np.round(alpha, 4).tolist()\n    b = round(b, 4)\n    return (alpha, b)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid activation function given an input value z.\n\n    Args:\n        z (float): The input value.\n\n    Returns:\n        float: The output of the sigmoid function rounded to four decimal places.\n    \"\"\"\n    sigmoid_output = 1 / (1 + math.exp(-z))\n    return round(sigmoid_output, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Computes the softmax activation for a given list of scores.\n\n    Args:\n    scores (list[float]): A list of scores.\n\n    Returns:\n    list[float]: A list of softmax values, each rounded to four decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [exp_score / sum_exp_scores for exp_score in exp_scores]\n    softmax_values = [round(value, 4) for value in softmax_values]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n\n    Args:\n    - features (list[list[float]]): A list of feature vectors, each representing multiple features for an example.\n    - labels (list[int]): A list of true binary labels associated with the feature vectors.\n    - weights (list[float]): A list of weights, one for each feature.\n    - bias (float): The bias of the neuron.\n\n    Returns:\n    - predicted_probabilities (list[float]): A list of predicted probabilities after sigmoid activation, rounded to four decimal places.\n    - mean_squared_error (float): The mean squared error between the predicted probabilities and the true labels, rounded to four decimal places.\n    \"\"\"\n    features = np.array(features)\n    labels = np.array(labels)\n    weights = np.array(weights)\n    weighted_sum = np.dot(features, weights) + bias\n    predicted_probabilities = 1 / (1 + np.exp(-weighted_sum))\n    predicted_probabilities = predicted_probabilities.tolist()\n    mean_squared_error = np.mean((predicted_probabilities - labels) ** 2)\n    mean_squared_error = round(mean_squared_error, 4)\n    return (predicted_probabilities, mean_squared_error)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"The sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    \"\"\"\n    Simulates a single neuron with sigmoid activation and implements backpropagation to update the neuron's weights and bias.\n\n    Args:\n    - features (np.ndarray): A 2D array of feature vectors.\n    - labels (np.ndarray): A 1D array of true binary labels.\n    - initial_weights (np.ndarray): A 1D array of initial weights.\n    - initial_bias (float): The initial bias.\n    - learning_rate (float): The learning rate for gradient descent.\n    - epochs (int): The number of epochs.\n\n    Returns:\n    - updated_weights (np.ndarray): The updated weights.\n    - updated_bias (float): The updated bias.\n    - mse_values (list[float]): A list of MSE values for each epoch.\n    \"\"\"\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        output = sigmoid(np.dot(features, weights) + bias)\n        mse = np.mean((output - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        d_output = 2 * (output - labels) * output * (1 - output)\n        d_weights = np.dot(features.T, d_output)\n        d_bias = np.sum(d_output)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    updated_weights = np.round(weights, 4)\n    updated_bias = round(bias, 4)\n    mse_values = [round(mse, 4) for mse in mse_values]\n    return (updated_weights, updated_bias, mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        \"\"\"\n        Initialize a Value object.\n\n        Args:\n        - data (float): The value of the object.\n        - _children (tuple, optional): The children of the object. Defaults to ().\n        - _op (str, optional): The operation that created the object. Defaults to ''.\n        \"\"\"\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def _add(self, other):\n        \"\"\"\n        Add two Value objects.\n\n        Args:\n        - other (Value): The other Value object.\n\n        Returns:\n        - Value: A new Value object representing the sum.\n        \"\"\"\n        out = Value(self.data + other.data, _children=(self, other), _op='+')\n        self._backward = lambda : self._add_grad(other)\n        other._backward = lambda : other._add_grad(self)\n        out._backward = lambda : self._backward() or other._backward()\n        return out\n\n    def _add_grad(self, other):\n        \"\"\"\n        Compute the gradient for addition.\n\n        Args:\n        - other (Value): The other Value object.\n        \"\"\"\n        self.grad += 1\n        other.grad += 1\n\n    def _mul(self, other):\n        \"\"\"\n        Multiply two Value objects.\n\n        Args:\n        - other (Value): The other Value object.\n\n        Returns:\n        - Value: A new Value object representing the product.\n        \"\"\"\n        out = Value(self.data * other.data, _children=(self, other), _op='*')\n        self._backward = lambda : self._mul_grad(other)\n        other._backward = lambda : other._mul_grad(self)\n        out._backward = lambda : self._backward() or other._backward()\n        return out\n\n    def _mul_grad(self, other):\n        \"\"\"\n        Compute the gradient for multiplication.\n\n        Args:\n        - other (Value): The other Value object.\n        \"\"\"\n        self.grad += other.data\n        other.grad += self.data\n\n    def relu(self):\n        \"\"\"\n        Apply the ReLU activation function.\n\n        Returns:\n        - Value: A new Value object representing the ReLU output.\n        \"\"\"\n        out = Value(max(0, self.data), _children=(self,), _op='relu')\n        out._backward = lambda : self._relu_grad()\n        return out\n\n    def _relu_grad(self):\n        \"\"\"\n        Compute the gradient for ReLU.\n        \"\"\"\n        if self.data > 0:\n            self.grad += 1\n\n    def backward(self):\n        \"\"\"\n        Perform backward pass to compute gradients.\n        \"\"\"\n        self._backward()\n\n    def _backward(self):\n        pass"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix P from basis B to C.\n\n    Args:\n    B (list[list[int]]): Basis vectors in basis B.\n    C (list[list[int]]): Basis vectors in basis C.\n\n    Returns:\n    list[list[float]]: Transformation matrix P from basis B to C.\n    \"\"\"\n    B = np.array(B)\n    C = np.array(C)\n    P = np.linalg.inv(B) @ C\n    P = np.round(P, 4)\n    return P.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 0], [1, 0, 1], [0, 1, 1]]\nP = transform_basis(B, C)"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Singular Value Decomposition (SVD) of a 2x2 matrix A.\n\n    Args:\n    A (np.ndarray): A 2x2 matrix.\n\n    Returns:\n    tuple: A tuple containing the matrices U, S, and V such that A = U * S * V.\n    \"\"\"\n    A = np.array(A)\n    assert A.shape == (2, 2), 'Input matrix must be 2x2'\n    A_T_A = np.dot(A.T, A)\n    (eigen_values, eigen_vectors) = np.linalg.eig(A_T_A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    singular_values = np.sqrt(eigen_values)\n    S = np.diag(singular_values)\n    U = np.dot(A, eigen_vectors) / singular_values\n    U[:, 1] = np.cross(U[:, 0], [0, 0, 1])[:2]\n    U = U / np.linalg.norm(U, axis=0)\n    V = eigen_vectors.T\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    U = U.tolist()\n    S = S.tolist()\n    V = V.tolist()\n    return (U, S, V)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffles the samples in two numpy arrays, X and y, \n    while maintaining the corresponding order between them.\n\n    Args:\n    - X (numpy array): Feature data\n    - y (numpy array): Target data\n    - seed (int, optional): Seed for the random number generator. Defaults to None.\n\n    Returns:\n    - list: A list of two numpy arrays, X and y, after shuffling and reshaping.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    pairs = np.column_stack((X, y))\n    np.random.shuffle(pairs)\n    (X_shuffled, y_shuffled) = (pairs[:, :-1], pairs[:, -1])\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Batch iterable function that samples from a numpy array X and an optional numpy array y.\n\n    Args:\n        X (numpy array): The input data.\n        y (numpy array, optional): The target data. Defaults to None.\n        batch_size (int, optional): The size of each batch. Defaults to 64.\n\n    Yields:\n        tuple or numpy array: Batches of (X, y) pairs if y is provided; otherwise, batches of X only.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise ValueError('X must be a numpy array')\n    if y is not None and (not isinstance(y, np.ndarray)):\n        raise ValueError('y must be a numpy array or None')\n    if not isinstance(batch_size, int) or batch_size <= 0:\n        raise ValueError('batch_size must be a positive integer')\n    if y is not None and X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples')\n    num_batches = int(np.ceil(X.shape[0] / batch_size))\n    for i in range(num_batches):\n        start_idx = i * batch_size\n        end_idx = min((i + 1) * batch_size, X.shape[0])\n        batch_X = X[start_idx:end_idx]\n        batch_y = y[start_idx:end_idx] if y is not None else None\n        if batch_y is not None:\n            yield (batch_X.tolist(), batch_y.tolist())\n        else:\n            yield batch_X.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for a given dataset.\n\n    Parameters:\n    X (numpy array): 2D numpy array of shape (n_samples, n_features)\n    degree (int): Degree of polynomial features to generate\n\n    Returns:\n    list: A list of polynomial features\n    \"\"\"\n    n_features = X.shape[1]\n    poly_features = []\n    for r in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), r):\n            feature = np.ones(X.shape[0])\n            for index in combo:\n                feature *= X[:, index]\n            poly_features.append(feature)\n    poly_features = np.stack(poly_features, axis=1)\n    return poly_features.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    X (numpy.ndarray): 2D numpy array representing the dataset features.\n    y (numpy.ndarray): 1D numpy array representing the dataset labels.\n    n_subsets (int): Number of random subsets to generate.\n    replacements (bool, optional): Whether to create subsets with replacements. Defaults to True.\n    seed (int, optional): Random seed for reproducibility. Defaults to 42.\n\n    Returns:\n    list: List of n_subsets random subsets of the dataset, where each subset is a tuple of (X_subset, y_subset).\n    \"\"\"\n    np.random.seed(seed)\n    if replacements:\n        indices = np.random.randint(0, len(X), size=(n_subsets, len(X)))\n    else:\n        indices = np.random.choice(len(X), size=(n_subsets, len(X)), replace=False)\n    subsets = []\n    for idx in indices:\n        X_subset = X[idx]\n        y_subset = y[idx]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    One-hot encoding of nominal values.\n\n    Args:\n    - x (numpy.ndarray): A 1D numpy array of integer values.\n    - n_col (int, optional): The number of columns for the one-hot encoded array. Defaults to None.\n\n    Returns:\n    - list: A python list representing the one-hot encoded array.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise ValueError('Input must be a numpy array')\n    if len(x.shape) != 1:\n        raise ValueError('Input array must be 1D')\n    if n_col is None:\n        n_col = np.max(x) + 1\n    encoded = np.eye(n_col)[x]\n    return encoded.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n\n    Args:\n        x (numpy.ndarray): A 1D numpy array.\n\n    Returns:\n        list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    x = np.asarray(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be a 1D numpy array')\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n\n    Args:\n    - y_true (numpy array): 1D array containing the true labels.\n    - y_pred (numpy array): 1D array containing the predicted labels.\n\n    Returns:\n    - accuracy (float): The accuracy score rounded to the nearest 4th decimal.\n\n    Raises:\n    - ValueError: If y_true and y_pred are not of the same length.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length')\n    correct_predictions = np.sum(y_true == y_pred)\n    accuracy = correct_predictions / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n\n    Args:\n    - X (2D numpy array): The input dataset.\n    - Y (2D numpy array, optional): The second dataset for correlation calculation. Defaults to None.\n\n    Returns:\n    - list: The correlation matrix as a 2D list, rounded to the nearest 4th decimal.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or len(X.shape) != 2:\n        raise ValueError('X must be a 2D numpy array')\n    if Y is None:\n        correlation_matrix = np.corrcoef(X.T)\n    else:\n        if not isinstance(Y, np.ndarray) or len(Y.shape) != 2:\n            raise ValueError('Y must be a 2D numpy array')\n        if X.shape[0] != Y.shape[0]:\n            raise ValueError('X and Y must have the same number of rows')\n        correlation_matrix = np.corrcoef(X.T, Y.T)[:X.shape[1], X.shape[1]:]\n    correlation_matrix = np.round(correlation_matrix, 4).tolist()\n    return correlation_matrix"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Implements the fit method for an AdaBoost classifier.\n\n    Parameters:\n    - X (numpy array): 2D array of shape (n_samples, n_features) representing the dataset.\n    - y (numpy array): 1D array of shape (n_samples,) representing the labels.\n    - n_clf (int): The number of classifiers.\n\n    Returns:\n    - A list of classifiers with their parameters.\n    \"\"\"\n    n_samples = X.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_error = np.inf\n        best_classifier = None\n        for feature in range(X.shape[1]):\n            feature_values = X[:, feature]\n            sorted_indices = np.argsort(feature_values)\n            sorted_feature_values = feature_values[sorted_indices]\n            sorted_labels = y[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n            sum_pos_weights = np.sum(sorted_weights[sorted_labels == 1])\n            sum_neg_weights = np.sum(sorted_weights[sorted_labels == -1])\n            best_threshold_feature = None\n            best_error_feature = np.inf\n            for i in range(1, len(sorted_feature_values)):\n                threshold = (sorted_feature_values[i - 1] + sorted_feature_values[i]) / 2\n                error = sum_pos_weights * (sorted_feature_values[i - 1] < threshold) + sum_neg_weights * (sorted_feature_values[i - 1] >= threshold)\n                if error < best_error_feature:\n                    best_error_feature = error\n                    best_threshold_feature = threshold\n                if sorted_labels[i - 1] == 1:\n                    sum_pos_weights -= sorted_weights[i - 1]\n                else:\n                    sum_neg_weights -= sorted_weights[i - 1]\n            if best_error_feature < best_error:\n                best_error = best_error_feature\n                best_feature = feature\n                best_threshold = best_threshold_feature\n                best_classifier = (best_feature, best_threshold)\n        classifiers.append(best_classifier)\n        predictions = np.where(X[:, best_classifier[0]] < best_classifier[1], 1, -1)\n        error = np.sum(weights * (predictions != y))\n        alpha = 0.5 * math.log((1 - error) / error)\n        weights *= np.exp(-alpha * y * predictions)\n        weights /= np.sum(weights)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list) -> list:\n    \"\"\"\n    Compute the log-softmax of a given 1D array of scores.\n\n    Args:\n    scores (list): A list of scores.\n\n    Returns:\n    list: A list representing the log-softmax of the input scores, rounded to 4 decimal places.\n    \"\"\"\n    scores = np.array(scores)\n    log_softmax_scores = scores - np.log(np.sum(np.exp(scores)))\n    log_softmax_scores = np.round(log_softmax_scores - np.max(log_softmax_scores), 4).tolist()\n    log_softmax_scores = [x - np.log(np.sum(np.exp(np.array(log_softmax_scores)))) + np.log(np.sum(np.exp(scores - np.max(scores)))) for x in log_softmax_scores]\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    log_softmax_scores = scores - max_score - np.log(np.sum(np.exp(scores - max_score)))\n    return np.round(log_softmax_scores, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer:\n\n    def __init__(self):\n        pass\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        \"\"\"\n        Initializes the Dense layer.\n\n        Args:\n        - n_units (int): The number of units (neurons) in the layer.\n        - input_shape (tuple, optional): The input shape to the layer. Defaults to None.\n        \"\"\"\n        super().__init__()\n        self.n_units = n_units\n        self.input_shape = input_shape\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n\n    def initialize(self):\n        \"\"\"\n        Initializes the weights and biases for the layer.\n        \"\"\"\n        if self.input_shape is not None:\n            limit = 1 / math.sqrt(self.input_shape[0])"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Applies a 2D convolutional layer to the input matrix using the specified kernel, padding, and stride.\n\n    Args:\n    - input_matrix (np.ndarray): The input matrix to be convolved.\n    - kernel (np.ndarray): The convolutional kernel.\n    - padding (int): The amount of padding to apply to the input matrix.\n    - stride (int): The stride of the convolution operation.\n\n    Returns:\n    - A list representing the output of the convolutional layer, rounded to the nearest 4th decimal.\n    \"\"\"\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    output = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            region = padded_input[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    This function implements the Rectified Linear Unit (ReLU) activation function.\n\n    Args:\n        z (float): The input value.\n\n    Returns:\n        float: The value after applying the ReLU function.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Computes the Ridge Regression loss function.\n\n    Parameters:\n    X (np.ndarray): 2D array representing the feature matrix.\n    w (np.ndarray): 1D array representing the coefficients.\n    y_true (np.ndarray): 1D array representing the true labels.\n    alpha (float): Regularization parameter.\n\n    Returns:\n    float: The Ridge loss.\n    \"\"\"\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_pred - y_true) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss = mse + reg_term\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Applies the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Args:\n    z (float): The input value.\n    alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n    float|int: The value after applying the Leaky ReLU function.\n    \"\"\"\n    if z >= 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors.\n\n    Args:\n        x1 (numpy.ndarray): The first input vector.\n        x2 (numpy.ndarray): The second input vector.\n\n    Returns:\n        float: The linear kernel value.\n\n    Raises:\n        ValueError: If the input vectors are not of the same length.\n    \"\"\"\n    x1 = np.asarray(x1)\n    x2 = np.asarray(x2)\n    if len(x1) != len(x2):\n        raise ValueError('Input vectors must be of the same length')\n    kernel_value = np.dot(x1, x2)\n    return kernel_value"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric given two numpy arrays: y_true and y_pred.\n\n    Parameters:\n    y_true (numpy array): The true binary labels.\n    y_pred (numpy array): The predicted binary labels.\n\n    Returns:\n    float: The precision metric.\n\n    Raises:\n    ValueError: If the input arrays are not of the same shape.\n    ZeroDivisionError: If the denominator of the precision calculation is zero.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape')\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        raise ZeroDivisionError('Cannot calculate precision with zero true positives and false positives')\n    precision_metric = tp / (tp + fp)\n    return precision_metric"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Performs Gradient Descent Variants (SGD, Batch GD, Mini-Batch GD) with MSE Loss.\n\n    Args:\n    - X (numpy array): Feature matrix.\n    - y (numpy array): Target vector.\n    - weights (numpy array): Initial model weights.\n    - learning_rate (float): Learning rate for gradient descent.\n    - n_iterations (int): Number of iterations for gradient descent.\n    - batch_size (int, optional): Batch size for mini-batch gradient descent. Defaults to 1.\n    - method (str, optional): Gradient descent variant. Options: 'stochastic', 'batch', 'mini-batch'. Defaults to 'batch'.\n\n    Returns:\n    - list: A list of weights after each iteration, rounded to 4 decimal places.\n    \"\"\"\n    if method not in ['stochastic', 'batch', 'mini-batch']:\n        raise ValueError(\"Invalid method. Choose from 'stochastic', 'batch', or 'mini-batch'.\")\n    weights_history = [weights.tolist()]\n    for _ in range(n_iterations):\n        if method == 'stochastic':\n            for i in range(len(y)):\n                prediction = np.dot(X[i], weights)\n                error = prediction - y[i]\n                weights -= learning_rate * error * X[i]\n        elif method == 'batch':\n            predictions = np.dot(X, weights)\n            errors = predictions - y\n            weights -= learning_rate * (2 * np.dot(X.T, errors) / len(y))\n        elif method == 'mini-batch':\n            n_samples = len(y)\n            for i in range(0, n_samples, batch_size):\n                batch_X = X[i:i + batch_size]\n                batch_y = y[i:i + batch_size]\n                predictions = np.dot(batch_X, weights)\n                errors = predictions - batch_y\n                weights -= learning_rate * (2 * np.dot(batch_X.T, errors) / batch_size)\n        weights_history.append(np.round(weights, 4).tolist())\n    return weights_history"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Compute the Reduced Row Echelon Form (RREF) of a given matrix.\n\n    Args:\n    matrix (list of lists or numpy array): Input matrix.\n\n    Returns:\n    list of lists: RREF of the input matrix.\n    \"\"\"\n    matrix = np.array(matrix, dtype=float)\n    (num_rows, num_cols) = matrix.shape\n    current_row = 0\n    current_col = 0\n    while current_row < num_rows and current_col < num_cols:\n        max_row = np.argmax(np.abs(matrix[current_row:, current_col])) + current_row\n        if matrix[max_row, current_col] == 0:\n            current_col += 1\n            continue\n        matrix[[current_row, max_row]] = matrix[[max_row, current_row]]\n        matrix[current_row] = matrix[current_row] / matrix[current_row, current_col]\n        for row in range(num_rows):\n            if row != current_row:\n                matrix[row] = matrix[row] - matrix[row, current_col] * matrix[current_row]\n        current_row += 1\n        current_col += 1\n    return matrix.tolist()\nmatrix = [[2, 1, -1, 8], [-3, -1, 2, -11], [-2, 1, 2, -3]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Optimizes the objective function using the Adam algorithm.\n\n    Parameters:\n    f (function): The objective function to be optimized.\n    grad (function): A function that computes the gradient of `f`.\n    x0 (numpy array): Initial parameter values.\n    learning_rate (float, optional): The step size. Defaults to 0.001.\n    beta1 (float, optional): Exponential decay rate for the first moment estimates. Defaults to 0.9.\n    beta2 (float, optional): Exponential decay rate for the second moment estimates. Defaults to 0.999.\n    epsilon (float, optional): A small constant for numerical stability. Defaults to 1e-8.\n    num_iterations (int, optional): Number of iterations to run the optimizer. Defaults to 1000.\n\n    Returns:\n    list: The optimized parameters.\n    \"\"\"\n    x = x0\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 0\n    for _ in range(num_iterations):\n        g = grad(x)\n        t += 1\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()\nx0 = np.array([1.0, 2.0])"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Lasso Regression using Gradient Descent.\n\n    Args:\n    - X (np.array): Feature matrix.\n    - y (np.array): Target vector.\n    - alpha (float, optional): Regularization parameter. Defaults to 0.1.\n    - learning_rate (float, optional): Learning rate for gradient descent. Defaults to 0.01.\n    - max_iter (int, optional): Maximum number of iterations. Defaults to 1000.\n    - tol (float, optional): Tolerance for convergence. Defaults to 1e-4.\n\n    Returns:\n    - tuple: A tuple containing the optimized weights and bias.\n    \"\"\"\n    n_features = X.shape[1]\n    weights = np.zeros(n_features)\n    bias = 0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = -1 / X.shape[0] * np.dot(X.T, y - y_pred) + alpha / X.shape[0] * np.sign(weights)\n        db = -1 / X.shape[0] * np.sum(y - y_pred)\n        new_weights = weights - learning_rate * dw\n        new_bias = bias - learning_rate * db\n        if np.linalg.norm(weights - new_weights) < tol and np.abs(bias - new_bias) < tol:\n            weights = new_weights\n            bias = new_bias\n            break\n        weights = new_weights\n        bias = new_bias\n    return (np.round(weights, 4).tolist(), np.round(bias, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two given strings.\n\n    Args:\n    source (str): The source string.\n    target (str): The target string.\n\n    Returns:\n    int: The minimum number of edits needed to convert the source string into the target string.\n    \"\"\"\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i, 0] = i\n    for j in range(n + 1):\n        dp[0, j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i, j] = min(dp[i - 1, j] + 1, dp[i, j - 1] + 1, dp[i - 1, j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i, j] = min(dp[i, j], dp[i - 2, j - 2] + 1)\n    return dp[m, n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric in a binary classification setting.\n\n    Parameters:\n    y_true (list): A list of true binary labels (0 or 1) for the dataset.\n    y_pred (list): A list of predicted binary labels (0 or 1) from the model.\n\n    Returns:\n    float: The recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = tp + fn\n    if denominator == 0:\n        return 0.0\n    recall_value = tp / denominator\n    return round(recall_value, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Computes self-attention output.\n\n    Parameters:\n    - X (numpy array): Input sequence of shape (n, d)\n    - W_q (numpy array): Weight matrix for query projection of shape (d, d)\n    - W_k (numpy array): Weight matrix for key projection of shape (d, d)\n    - W_v (numpy array): Weight matrix for value projection of shape (d, d)\n\n    Returns:\n    - Self-attention output as a numpy array, reshaped and converted to a list.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T) / np.sqrt(Q.shape[1])\n    attention_weights = np.softmax(attention_scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    output = np.round(output, 4)\n    output = output.tolist()\n    return output"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    This function implements a simple Recurrent Neural Network (RNN) cell.\n    \n    Args:\n    input_sequence (list[list[float]]): A sequence of input vectors.\n    initial_hidden_state (list[float]): The initial hidden state.\n    Wx (list[list[float]]): The weight matrix for input-to-hidden connections.\n    Wh (list[list[float]]): The weight matrix for hidden-to-hidden connections.\n    b (list[float]): The bias vector.\n    \n    Returns:\n    list[float]: The final hidden state after processing the entire sequence, rounded to four decimal places.\n    \"\"\"\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for input_vector in input_sequence:\n        hidden_state_update = np.tanh(np.dot(Wx, input_vector) + np.dot(Wh, hidden_state) + b)\n        hidden_state = hidden_state_update\n    return np.round(hidden_state, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a set of points.\n\n    Args:\n    points (list): A list of [x, y] coordinates.\n    tx (float): The translation distance in the x direction.\n    ty (float): The translation distance in the y direction.\n\n    Returns:\n    list: A new list of points after applying the translation matrix.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_array, np.ones((len(points_array), 1))))\n    translated_points = np.dot(translation_matrix, homogeneous_points.T).T\n    return translated_points[:, :2].tolist()\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 2\nty = 3"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the Kullback-Leibler (KL) divergence between two normal distributions.\n\n    Parameters:\n    mu_p (float): Mean of the first normal distribution.\n    sigma_p (float): Standard deviation of the first normal distribution.\n    mu_q (float): Mean of the second normal distribution.\n    sigma_q (float): Standard deviation of the second normal distribution.\n\n    Returns:\n    float: The KL divergence between the two normal distributions.\n    \"\"\"\n    kl_divergence = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Implement the Gauss-Seidel method for solving a system of linear equations (Ax = b).\n\n    Args:\n    - A (numpy array): A square matrix of coefficients.\n    - b (numpy array): The right-hand side vector.\n    - n (int): The number of iterations.\n    - x_ini (numpy array, optional): An initial guess for the solution vector (x). Defaults to a vector of zeros.\n\n    Returns:\n    - list: The approximated solution vector (x) after performing the specified number of iterations.\n    \"\"\"\n    m = len(A)\n    if any((len(row) != m for row in A)):\n        raise ValueError('Matrix A must be a square matrix')\n    if len(b) != m:\n        raise ValueError('Vector b must have the same length as the number of rows in A')\n    if x_ini is None:\n        x = np.zeros(m)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(m):\n            s = sum((A[i, j] * x[j] for j in range(m) if j != i))\n            x[i] = (b[i] - s) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Gaussian Elimination with partial pivoting to solve the system Ax = b.\n\n    Args:\n    A (numpy array): Coefficient matrix.\n    b (numpy array): Constant matrix.\n\n    Returns:\n    list: Solution vector x.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:\n        raise ValueError('Incompatible matrix shapes')\n    n = A.shape[0]\n    aug_matrix = np.column_stack((A, b))\n    for i in range(n - 1):\n        max_row = np.argmax(np.abs(aug_matrix[i:, i])) + i\n        aug_matrix[[i, max_row]] = aug_matrix[[max_row, i]]\n        pivot = aug_matrix[i, i]\n        aug_matrix[i] = aug_matrix[i] / pivot\n        for j in range(i + 1, n):\n            factor = aug_matrix[j, i]\n            aug_matrix[j] = aug_matrix[j] - factor * aug_matrix[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = aug_matrix[i, -1] - np.dot(aug_matrix[i, :-1], x)\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        hidden_states = []\n        cell_states = []\n        current_hidden_state = initial_hidden_state\n        current_cell_state = initial_cell_state\n        for input_t in x:\n            concat = np.concatenate((input_t, current_hidden_state), axis=0)\n            forget_gate = sigmoid(np.dot(self.Wf, concat) + self.bf)\n            input_gate = sigmoid(np.dot(self.Wi, concat) + self.bi)\n            candidate_cell_state = np.tanh(np.dot(self.Wc, concat) + self.bc)\n            output_gate = sigmoid(np.dot(self.Wo, concat) + self.bo)\n            current_cell_state = forget_gate * current_cell_state + input_gate * candidate_cell_state\n            current_hidden_state = output_gate * np.tanh(current_cell_state)\n            hidden_states.append(current_hidden_state.reshape(-1, 1).tolist())\n            cell_states.append(current_cell_state.reshape(-1, 1).tolist())\n        hidden_states = np.round(np.array(hidden_states), 4).tolist()\n        cell_states = np.round(np.array(cell_states), 4).tolist()\n        return (hidden_states, current_hidden_state.reshape(-1, 1).tolist(), current_cell_state.reshape(-1, 1).tolist())\ndef sigmoid(x):\n    \"\"\"\n    Computes the sigmoid of x.\n    \"\"\"\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute TF-IDF scores for a query against a given corpus of documents.\n\n    Args:\n    - corpus (list): A list of documents, where each document is a list of words.\n    - query (list): A list of words for which you want to compute the TF-IDF scores.\n\n    Returns:\n    - list: A list of lists containing the TF-IDF scores for the query words in each document.\n    \"\"\"\n    if not corpus:\n        return []\n    df = {}\n    for document in corpus:\n        unique_terms = set(document)\n        for term in unique_terms:\n            df[term] = df.get(term, 0) + 1\n    total_documents = len(corpus)\n    idf = {}\n    for term in df:\n        idf[term] = math.log((total_documents + 1) / (df[term] + 1)) + 1\n    tf_idf_scores = []\n    for document in corpus:\n        tf = Counter(document)\n        document_scores = []\n        for term in query:\n            tf_score = tf.get(term, 0) / len(document) if document else 0\n            idf_score = idf.get(term, 0)\n            tf_idf_score = tf_score * idf_score\n            document_scores.append(round(tf_idf_score, 5))\n        tf_idf_scores.append(document_scores)\n    tf_idf_scores = np.array(tf_idf_scores).tolist()\n    return tf_idf_scores\ncorpus = [['this', 'is', 'a', 'test'], ['this', 'test', 'is', 'only', 'a', 'test'], ['is', 'this', 'a']]\nquery = ['this', 'is', 'a', 'test']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    fp = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    fn = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp != 0 else 0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if precision + recall != 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.W_xh = None\n        self.W_hh = None\n        self.W_hy = None\n        self.b_h = None\n        self.b_y = None\n        self.initialize_weights(input_size, hidden_size, output_size)\n\n    def initialize_weights(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with weights set to random values multiplied by 0.01 and biases set to zero.\n\n        Args:\n            input_size (int): The size of the input.\n            hidden_size (int): The size of the hidden state.\n            output_size (int): The size of the output.\n        \"\"\"\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns the output, the last inputs and the hidden states.\n\n        Args:\n            W_xh (numpy array): Weights from input to hidden state.\n            W_hh (numpy array): Weights from hidden state to hidden state.\n            W_hy (numpy array): Weights from hidden state to output.\n            b_h (numpy array): Bias for hidden state.\n            b_y (numpy array): Bias for output.\n            hidden_size (int): The size of the hidden state.\n            input_sequence (numpy array): A sequence of inputs.\n\n        Returns:\n            outputs (list): A list of outputs at each time step.\n            last_inputs (numpy array): The last input.\n            last_hiddens (numpy array): The last hidden state.\n        \"\"\"\n        h = np.zeros((hidden_size, 1))\n        outputs = []\n        for x in input_sequence:\n            h = np.tanh(np.dot(W_xh, x) + np.dot(W_hh, h) + b_h)\n            y = np.dot(W_hy, h) + b_y\n            outputs.append(y)\n        last_hiddens = h\n        last_inputs = input_sequence[-1]\n        return (outputs, last_inputs, last_hiddens)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n\n        Args:\n            W_xh (numpy array): Weights from input to hidden state.\n            W_hh (numpy array): Weights from hidden state to hidden state.\n            W_hy (numpy array): Weights from hidden state to output.\n            b_h (numpy array): Bias for hidden state.\n            b_y (numpy array): Bias for output.\n            hidden_size (int): The size of the hidden state.\n            input_sequence (numpy array): A sequence of inputs.\n            expected_output (numpy array): The expected output sequence.\n            outputs (list): A list of outputs at each time step.\n            last_inputs (numpy array): The last input.\n            last_hiddens (numpy array): The last hidden state.\n            learning_rate (float): The learning rate for weight updates.\n\n        Returns:\n            W_xh (numpy array): Updated weights from input to hidden state.\n            W_hh (numpy array): Updated weights from hidden state to hidden state.\n            W_hy (numpy array): Updated weights from hidden state to output.\n            b_h (numpy array): Updated bias for hidden state.\n            b_y (numpy array): Updated bias for output.\n        \"\"\"\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        h = np.zeros((hidden_size, 1))\n        error = 0\n        for i in range(len(input_sequence) - 1, -1, -1):\n            x = input_sequence[i].reshape(-1, 1)\n            y = outputs[i]\n            expected_y = expected_output[i].reshape(-1, 1)\n            error += 0.5 * np.mean((y - expected_y) ** 2)\n            dy = y - expected_y\n            dh = np.dot(W_hy.T, dy) * (1 - np.tanh(np.dot(W_hh, h) + np.dot(W_xh, x) + b_h) ** 2)\n            dW_hy += np.dot(dy, h.T)\n            db_y += dy\n            if i > 0:\n                dW_hh += np.dot(dh, h.T)\n                dW_xh += np.dot(dh, x.T)\n                db_h += dh\n            h = np.tanh(np.dot(W_hh, h) + np.dot(W_xh, x) + b_h)\n        W_xh -= learning_rate * dW_xh\n        W_hh -= learning_rate * dW_hh\n        W_hy -= learning_rate * dW_hy\n        b_h -= learning_rate * db_h\n        b_y -= learning_rate * db_y\n        return (W_xh, W_hh, W_hy, b_h, b_y)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    (m, _) = A.shape\n    if x0 is None:\n        x0 = np.zeros(m)\n    x = x0.copy()\n    r = b - np.dot(A, x)\n    if np.linalg.norm(r) < tol:\n        return np.round(x, 8).tolist()\n    p = r.copy()\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = np.dot(r, r) / np.dot(p, Ap)\n        x = x + alpha * p\n        r_new = r - alpha * Ap\n        if np.linalg.norm(r_new) < tol:\n            return np.round(x, 8).tolist()\n        beta = np.dot(r_new, r_new) / np.dot(r, r)\n        p = r_new + beta * p\n        r = r_new\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (classes, counts) = np.unique(y, return_counts=True)\n    total_samples = len(y)\n    probabilities = counts / total_samples\n    gini = 1 - np.sum(np.square(probabilities))\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        non_zero_elements = [(i, val) for (i, val) in enumerate(row) if val != 0]\n        values.extend([val for (_, val) in non_zero_elements])\n        col_indices = col_indices + [i for (i, _) in non_zero_elements]\n        row_pointers.append(len(values))\n    values_array = values\n    column_indices_array = col_indices\n    row_pointer_array = row_pointers[1:]\n    return (values_array, column_indices_array, row_pointer_array)"}
{"task_id": 66, "completion_id": 0, "solution": "import math\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((x * y for (x, y) in zip(v, L)))\n    L_magnitude_squared = sum((x ** 2 for x in L))\n    if L_magnitude_squared == 0:\n        return [0] * len(v)\n    scalar = dot_product / L_magnitude_squared\n    projection = [scalar * x for x in L]\n    projection = [round(x, 3) for x in projection]\n    return projection\nv = [2, 3]\nL = [1, 1]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0] * (num_cols + 1)\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                column_pointer[col + 1] += 1\n    for col in range(num_cols):\n        column_pointer[col + 1] += column_pointer[col]\n    for row in range(num_rows):\n        for col in range(num_cols):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space of a given matrix A.\n\n    Parameters:\n    A (numpy.ndarray): Input matrix.\n\n    Returns:\n    list: A list of basis vectors that span the column space of A.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (A_rref, pivots) = row_echelon_form(A)\n    basis_vectors = A[:, pivots]\n    basis_vectors = np.round(basis_vectors, 8).tolist()\n    return basis_vectors\ndef row_echelon_form(A):\n    \"\"\"\n    Compute the row echelon form of a given matrix A.\n\n    Parameters:\n    A (numpy.ndarray): Input matrix.\n\n    Returns:\n    tuple: A tuple containing the row echelon form of A and the pivot column indices.\n    \"\"\"\n    (num_rows, num_cols) = A.shape\n    current_row = 0\n    pivots = []\n    A = np.copy(A)\n    for j in range(num_cols):\n        if current_row >= num_rows:\n            break\n        max_el = abs(A[current_row, j])\n        max_row = current_row\n        for i in range(current_row + 1, num_rows):\n            if abs(A[i, j]) > max_el:\n                max_el = abs(A[i, j])\n                max_row = i\n        if max_el == 0:\n            continue\n        A[[current_row, max_row]] = A[[max_row, current_row]]\n        A[current_row] = A[current_row] / A[current_row, j]\n        pivots.append(j)\n        for i in range(num_rows):\n            if i != current_row:\n                A[i] = A[i] - A[i, j] * A[current_row]\n        current_row += 1\n    return (A, pivots)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Compute the R-squared value for regression analysis.\n\n    Parameters:\n    y_true (array-like): Array of true values.\n    y_pred (array-like): Array of predicted values.\n\n    Returns:\n    float: The R-squared value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    mean_y_true = np.mean(y_true)\n    sst = np.sum((y_true - mean_y_true) ** 2)\n    sse = np.sum((y_true - y_pred) ** 2)\n    if sst == 0:\n        return 1.0\n    r2 = 1 - sse / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculate the average brightness of a grayscale image.\n\n    Args:\n    img (list): A 2D list representing the image, where each element is a pixel value.\n\n    Returns:\n    float: The average brightness of the image, rounded to two decimal places.\n    If the image is empty, has inconsistent row lengths, or contains invalid pixel values, returns -1.\n    \"\"\"\n    if not img:\n        return -1\n    row_lengths = [len(row) for row in img]\n    if len(set(row_lengths)) != 1:\n        return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n\n    Args:\n        y_true (array-like): Array of actual values.\n        y_pred (array-like): Array of predicted values.\n\n    Returns:\n        float: RMSE value rounded to three decimal places.\n\n    Raises:\n        ValueError: If input arrays have mismatched shapes or are empty.\n        TypeError: If input types are invalid.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except Exception as e:\n        raise TypeError('Invalid input type. Both inputs must be array-like.') from e\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    n = y_true.size\n    differences = y_true - y_pred\n    mse = np.mean(differences ** 2)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n\n    Parameters:\n    y_true (array-like): Ground truth target values.\n    y_pred (array-like): Estimated targets as returned by a classifier.\n\n    Returns:\n    float: Jaccard Index\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('Inputs must be of the same length.')\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 1.0\n    jaccard_idx = intersection / union\n    return round(jaccard_idx, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 1.0\n    else:\n        dice = 2 * intersection / (sum_true + sum_pred)\n        return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a given dataset row using Hyperdimensional Computing (HDC).\n\n    Parameters:\n    - row (dict): A dictionary representing a dataset row, where keys are feature names and values are their corresponding values.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary where keys are feature names and values are seeds to ensure reproducibility of hypervectors.\n\n    Returns:\n    - composite_hv (list): A composite hypervector representing the entire row.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        np.random.seed(random_seeds[feature])\n        feature_hv = np.random.choice([-1, 1], size=dim)\n        if isinstance(value, str):\n            value_hv = np.random.choice([-1, 1], size=dim)\n        else:\n            quantized_value = np.zeros(dim)\n            index = int(value / (max(row.values()) + 1) * dim)\n            quantized_value[index] = 1\n            value_hv = np.where(quantized_value == 1, 1, -1)\n        bound_hv = np.multiply(feature_hv, value_hv)\n        composite_hv = np.add(composite_hv, bound_hv)\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a confusion matrix for a binary classification problem.\n\n    Args:\n    - data (list): A list of lists, where each inner list represents a pair [y_true, y_pred] for one observation.\n\n    Returns:\n    - A 2x2 confusion matrix represented as a list of lists.\n    \"\"\"\n    matrix = [[0, 0], [0, 0]]\n    counts = Counter((tuple(pair) for pair in data))\n    matrix[0][0] = counts.get((0, 0), 0)\n    matrix[0][1] = counts.get((0, 1), 0)\n    matrix[1][0] = counts.get((1, 0), 0)\n    matrix[1][1] = counts.get((1, 1), 0)\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n\n    Args:\n    - v1 (numpy array): The first input vector.\n    - v2 (numpy array): The second input vector.\n\n    Returns:\n    - A float representing the cosine similarity, rounded to three decimal places.\n\n    Raises:\n    - ValueError: If the input vectors have different shapes, are empty, or have zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape')\n    if len(v1) == 0 or len(v2) == 0:\n        raise ValueError('Input vectors cannot be empty')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude')\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import f1_score\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Computes various performance metrics for a binary classification problem.\n\n    Args:\n    - actual (list[int]): The actual class labels (1 for positive, 0 for negative).\n    - predicted (list[int]): The predicted class labels from the model.\n\n    Returns:\n    - tuple: A tuple containing the confusion matrix, accuracy, F1 score, specificity, and negative predictive value.\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('Both lists must have the same length')\n    if not all((label in [0, 1] for label in actual + predicted)):\n        raise ValueError('All elements in the lists must be either 0 or 1')\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = round((tp + tn) / len(actual), 3)\n    f1 = f1_score(actual, predicted, zero_division=0)\n    f1_score = round(f1, 3)\n    specificity = round(tn / (tn + fp) if tn + fp != 0 else 0, 3)\n    npv = tn / (tn + fn) if tn + fn != 0 else 0\n    negative_predictive_value = round(npv, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics metrics for a given dataset.\n\n    Args:\n    data (list or np.ndarray): A list or NumPy array of numerical values.\n\n    Returns:\n    dict: A dictionary containing mean, median, mode, variance, standard deviation,\n          percentiles (25th, 50th, 75th), and interquartile range (IQR).\n    \"\"\"\n    data = np.asarray(data)\n    if data.size == 0:\n        raise ValueError('Input data is empty')\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = np.subtract(*np.percentile(data, [75, 25]))\n    output = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentiles[0], 4), '50th_percentile': round(percentiles[1], 4), '75th_percentile': round(percentiles[2], 4), 'interquartile_range': round(iqr, 4)}\n    return output"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coefficient = math.comb(n, k)\n    probability = binomial_coefficient * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    if std_dev <= 0:\n        raise ValueError('Standard deviation must be greater than zero.')\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf = coefficient * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: The probability of observing exactly k events\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError('k must be a non-negative integer')\n    if lam < 0:\n        raise ValueError('lam must be a non-negative number')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \n    Returns:\n        int: The contrast of the grayscale image.\n    \n    Raises:\n        ValueError: If the input image is not a 2D numpy array or if pixel values are not between 0 and 255.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or len(img.shape) != 2:\n        raise ValueError('Input image must be a 2D numpy array')\n    if np.any(img < 0) or np.any(img > 255):\n        raise ValueError('Pixel values must be between 0 and 255')\n    contrast = np.max(img) - np.min(img)\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n\n    Returns:\n        float: The dot product of the two input vectors.\n\n    Raises:\n        ValueError: If either of the input vectors is not a 1D NumPy array.\n        ValueError: If the input vectors have different lengths.\n    \"\"\"\n    if not (isinstance(vec1, np.ndarray) and isinstance(vec2, np.ndarray)):\n        raise ValueError('Both inputs must be NumPy arrays.')\n    if len(vec1.shape) != 1 or len(vec2.shape) != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if len(vec1) != len(vec2):\n        raise ValueError('Input vectors must have the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\nimport itertools\ndef phi_transform(data: list[list[float]], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[list[float]]): A list of numerical values to transform, where each inner list represents a data point.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n\n    def generate_polynomial_features(x, degree):\n        n = len(x)\n        features = []\n        for powers in itertools.product(range(degree + 1), repeat=n):\n            if sum(powers) <= degree:\n                feature = 1\n                for i in range(n):\n                    feature *= x[i] ** powers[i]\n                features.append(round(feature, 8))\n        return features\n    transformed_data = []\n    for x in data:\n        transformed_x = generate_polynomial_features(x, degree)\n        transformed_data.append(transformed_x)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Calculate positional encodings for a sequence length and model dimensionality.\n\n    Args:\n    position (int): The sequence length.\n    d_model (int): The model dimensionality.\n\n    Returns:\n    list: A list of positional encodings of dtype np.float16.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            pe[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model))\n            if i + 1 < d_model:\n                pe[pos, i + 1] = np.cos(pos / 10000 ** (2 * i / d_model))\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1' (Overfitting), '-1' (Underfitting), or '0' (Good fit).\n    \"\"\"\n    if not 0 <= training_accuracy <= 1 or not 0 <= test_accuracy <= 1:\n        raise ValueError('Accuracy values must be between 0 and 1')\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m_hat = beta1 * m + (1 - beta1) * grad\n    v_hat = beta2 * v + (1 - beta2) * np.square(grad)\n    m_bias_corrected = m_hat / (1 - np.power(beta1, t))\n    v_bias_corrected = v_hat / (1 - np.power(beta2, t))\n    updated_parameter = parameter - learning_rate * m_bias_corrected / (np.sqrt(v_bias_corrected) + epsilon)\n    updated_m = m_hat\n    updated_v = v_hat\n    updated_parameter = np.round(updated_parameter, 5).tolist()\n    updated_m = np.round(updated_m, 5).tolist()\n    updated_v = np.round(updated_v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12, 'n_embd': 10, 'n_layer': 1, 'd_ff': 20}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [{'attn': {'c_attn': np.random.rand(10, 3 * 10), 'c_proj': np.random.rand(10, 10), 'attn_dropout': np.random.rand(), 'resid_dropout': np.random.rand()}, 'mlp': {'c_fc': np.random.rand(10, 20), 'c_proj': np.random.rand(20, 10), 'dropout': np.random.rand()}, 'ln_1': {'g': np.ones(10), 'b': np.zeros(10)}, 'ln_2': {'g': np.ones(10), 'b': np.zeros(10)}}], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef multi_head_attention(q, k, v, hparams, params):\n    n_head = hparams['n_head']\n    n_embd = hparams['n_embd']\n    q = np.reshape(q, (q.shape[0], q.shape[1], n_head, n_embd // n_head))\n    k = np.reshape(k, (k.shape[0], k.shape[1], n_head, n_embd // n_head))\n    v = np.reshape(v, (v.shape[0], v.shape[1], n_head, n_embd // n_head))\n    scores = np.matmul(q, k.transpose((0, 2, 3, 1))) / np.sqrt(n_embd // n_head)\n    attention_weights = np.softmax(scores, axis=-1)\n    attention_output = np.matmul(attention_weights, v)\n    attention_output = np.reshape(attention_output, (attention_output.shape[0], attention_output.shape[1], n_embd))\n    projection_output = np.matmul(attention_output, params['blocks'][0]['attn']['c_proj'])\n    return projection_output\ndef feed_forward_network(x, hparams, params):\n    output = np.matmul(x, params['blocks'][0]['mlp']['c_fc'])\n    output = np.tanh(output)\n    output = np.matmul(output, params['blocks'][0]['mlp']['c_proj'])\n    return output\ndef layer_normalization(x, params, layer):\n    output = x * params['ln_' + layer]['g'] + params['ln_' + layer]['b']\n    return output\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    np.random.seed(42)\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    prompt_tokens = encoder.encode(prompt)\n    generated_tokens = prompt_tokens[:]\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][np.array(generated_tokens)]\n        positional_embeddings = params['wpe'][np.arange(len(generated_tokens))]\n        input_embeddings = token_embeddings + positional_embeddings\n        block_output = input_embeddings\n        block_output = layer_normalization(block_output, params, '1')\n        q = np.matmul(block_output, params['blocks'][0]['attn']['c_attn'][:, :hparams['n_embd']])\n        k = np.matmul(block_output, params['blocks'][0]['attn']['c_attn'][:, hparams['n_embd']:2 * hparams['n_embd']])\n        v = np.matmul(block_output, params['blocks'][0]['attn']['c_attn'][:, 2 * hparams['n_embd']:])\n        attention_output = multi_head_attention(q, k, v, hparams, params)\n        block_output = block_output + attention_output\n        block_output = layer_normalization(block_output, params, '2')\n        ffn_output = feed_forward_network(block_output, hparams, params)\n        block_output = block_output + ffn_output\n        final_output = layer_normalization(block_output, params, 'f')\n        next_token_logits = np.matmul(final_output[-1], params['wte'].T)\n        next_token = np.argmax(next_token_logits)\n        generated_tokens.append(next_token)\n    generated_text = encoder.decode(generated_tokens[len(prompt_tokens):])\n    return generated_text\nprompt = 'hello world'\nn_tokens_to_generate = 10\ngenerated_text = gen_text(prompt, n_tokens_to_generate)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n    \"\"\"\n    Implements a simplified self-attention mechanism to analyze crystal relationships.\n\n    Args:\n    n (int): The number of crystals.\n    crystal_values (list): A list of unique numeric values for each crystal.\n    dimension (int): The dimension of the crystal values.\n\n    Returns:\n    list: A list of floats representing the final weighted pattern for each crystal, rounded to the 4th decimal place.\n    \"\"\"\n\n    def softmax(values):\n        \"\"\"\n        Computes the softmax of a given list of values.\n\n        Args:\n        values (list): A list of values.\n\n        Returns:\n        list: A list of softmax values.\n        \"\"\"\n        exp_values = [np.exp(value) for value in values]\n        sum_exp_values = sum(exp_values)\n        return [exp_value / sum_exp_values for exp_value in exp_values]\n    query_matrix = np.random.rand(n, dimension)\n    key_matrix = np.random.rand(n, dimension)\n    value_matrix = np.array(crystal_values).reshape(n, dimension)\n    attention_scores = np.dot(query_matrix, key_matrix.T) / np.sqrt(dimension)\n    attention_weights = softmax([score for row in attention_scores for score in row])\n    attention_weights = np.array(attention_weights).reshape(n, n)\n    weighted_pattern = np.dot(attention_weights, value_matrix)\n    return [round(float(value), 4) for row in weighted_pattern for value in row]\nn = 3\ndimension = 1"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for a query across a corpus of documents.\n\n    Args:\n    - corpus (list of lists): A list of documents, where each document is a list of terms.\n    - query (list): A list of terms in the query.\n    - k1 (float, optional): The term frequency saturation parameter. Defaults to 1.5.\n    - b (float, optional): The document length normalization parameter. Defaults to 0.75.\n\n    Returns:\n    - list: A list of BM25 scores, one for each document in the corpus, rounded to three decimal places.\n    \"\"\"\n    num_docs = len(corpus)\n    avg_doc_len = sum((len(doc) for doc in corpus)) / num_docs\n    term_freqs = {}\n    for doc in corpus:\n        term_counts = Counter(doc)\n        for (term, count) in term_counts.items():\n            if term not in term_freqs:\n                term_freqs[term] = 0\n            term_freqs[term] += 1\n    idf = {}\n    for term in set((term for doc in corpus for term in doc)):\n        idf[term] = np.log((num_docs + 1) / (term_freqs.get(term, 1) + 1)) + 1\n    bm25_scores = [0.0] * num_docs\n    for (i, doc) in enumerate(corpus):\n        doc_len = len(doc)\n        term_counts = Counter(doc)\n        for term in query:\n            if term in term_counts:\n                tf = term_counts[term]\n                bm25_score = idf[term] * (tf * (k1 + 1)) / (tf + k1 * (1 - b + b * doc_len / avg_doc_len))\n                bm25_scores[i] += bm25_score\n    return [round(score, 3) for score in bm25_scores]\ncorpus = [['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog'], ['the', 'sun', 'is', 'shining', 'brightly', 'in', 'the', 'clear', 'blue', 'sky'], ['the', 'big', 'red', 'car', 'is', 'driving', 'down', 'the', 'street']]\nquery = ['the', 'quick', 'fox']"}
{"task_id": 91, "completion_id": 0, "solution": ""}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for (i, consumption) in enumerate(consumption_data, start=1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption - fluctuation)\n    days = np.arange(1, len(consumption_data) + 1).reshape(-1, 1)\n    detrended_data = np.array(detrended_data)\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15 = np.array([[15]])\n    base_consumption_day_15 = model.predict(day_15)[0]\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    safety_margin = consumption_day_15 * 0.05\n    final_consumption = math.ceil(consumption_day_15 + safety_margin)\n    return final_consumption\nconsumption_data = [100 + 10 * math.sin(2 * PI * i / 10) + 5 * i for i in range(1, 11)]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Query (Q), Key (K), and Value (V) matrices.\n\n    Args:\n    - X (np.ndarray): Input matrix.\n    - W_q (np.ndarray): Weight matrix for Query.\n    - W_k (np.ndarray): Weight matrix for Key.\n    - W_v (np.ndarray): Weight matrix for Value.\n\n    Returns:\n    - Q (np.ndarray): Query matrix.\n    - K (np.ndarray): Key matrix.\n    - V (np.ndarray): Value matrix.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention output.\n\n    Args:\n    - Q (np.ndarray): Query matrix.\n    - K (np.ndarray): Key matrix.\n    - V (np.ndarray): Value matrix.\n\n    Returns:\n    - Output (np.ndarray): Self-attention output.\n    \"\"\"\n    attention_scores = np.dot(Q, K.T) / np.sqrt(Q.shape[-1])\n    attention_weights = np.softmax(attention_scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute the multi-head attention output.\n\n    Args:\n    - X (np.ndarray): Input matrix.\n    - W_q (np.ndarray): Weight matrix for Query.\n    - W_k (np.ndarray): Weight matrix for Key.\n    - W_v (np.ndarray): Weight matrix for Value.\n    - n_heads (int): Number of attention heads.\n\n    Returns:\n    - Output (list): Multi-head attention output.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q = np.reshape(Q, (Q.shape[0], n_heads, -1))\n    K = np.reshape(K, (K.shape[0], n_heads, -1))\n    V = np.reshape(V, (V.shape[0], n_heads, -1))\n    outputs = []\n    for i in range(n_heads):\n        Q_head = Q[:, i, :]\n        K_head = K[:, i, :]\n        V_head = V[:, i, :]\n        output = self_attention(Q_head, K_head, V_head)\n        outputs.append(output)\n    outputs = np.array(outputs).transpose((1, 0, 2))\n    outputs = np.reshape(outputs, (-1, outputs.shape[-1])).round(4).tolist()\n    return outputs"}
{"task_id": 95, "completion_id": 0, "solution": "import math\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Lists x and y must be of the same length')\n    n11 = 0\n    n10 = 0\n    n01 = 0\n    n00 = 0\n    for i in range(len(x)):\n        if x[i] == 1 and y[i] == 1:\n            n11 += 1\n        elif x[i] == 1 and y[i] == 0:\n            n10 += 1\n        elif x[i] == 0 and y[i] == 1:\n            n01 += 1\n        else:\n            n00 += 1\n    numerator = n11 * n00 - n10 * n01\n    denominator = math.sqrt((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01))\n    if denominator == 0:\n        return 0\n    else:\n        phi = numerator / denominator\n        return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif -2.5 <= x <= 2.5:\n        return 0.2 * x + 0.5\n    else:\n        return 1.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x >= 100:\n        return x\n    if x <= -100:\n        return math.exp(x)\n    result = math.log(1 + math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    rhos_clipped = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    objective = np.minimum(rhos * A, rhos_clipped * A)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective = np.mean(objective) - beta * kl_divergence\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x: float) -> float:\n    \"\"\"\n    Computes the sigmoid of x.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The sigmoid value\n    \"\"\"\n    return 1 / (1 + math.exp(-x))\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x * sigmoid(x), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        selu_value = scale * x\n    else:\n        selu_value = scale * alpha * (math.exp(x) - 1)\n    return round(selu_value, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    C = np.max(y) + 1\n    M = X.shape[1]\n    B = np.zeros((C, M))\n    losses = []\n    for _ in range(iterations):\n        scores = np.dot(X, B.T)\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        one_hot_y = np.eye(C)[y]\n        dB = np.dot(X.T, probs - one_hot_y) / X.shape[0]\n        B -= learning_rate * dB\n        loss = -np.mean(np.sum(one_hot_y * np.log(probs), axis=1))\n        losses.append(round(loss, 4))\n    B = np.round(B, 4).tolist()\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the sigmoid of z.\n\n    Args:\n    z (np.ndarray): Input array.\n\n    Returns:\n    np.ndarray: Sigmoid of z.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n\n    Args:\n    X (np.ndarray): Feature matrix of shape (n_samples, n_features).\n    y (np.ndarray): Target vector of shape (n_samples,).\n    learning_rate (float): Learning rate for gradient descent.\n    iterations (int): Number of iterations for gradient descent.\n\n    Returns:\n    tuple[list[float], list[float]]: A tuple containing the optimized coefficients and collected loss values.\n    \"\"\"\n    n_features = X.shape[1]\n    coefficients = np.zeros(n_features)\n    intercept = 0\n    loss_history = []\n    for _ in range(iterations):\n        z = np.dot(X, coefficients) + intercept\n        predictions = sigmoid(z)\n        gradient_coefficients = np.dot(X.T, predictions - y) / len(y)\n        gradient_intercept = np.mean(predictions - y)\n        coefficients -= learning_rate * gradient_coefficients\n        intercept -= learning_rate * gradient_intercept\n        loss = -np.mean(y * np.log(predictions) + (1 - y) * np.log(1 - predictions))\n        loss_history.append(round(loss, 4))\n    coefficients = np.round(coefficients, 4).tolist()\n    intercept = round(intercept, 4)\n    return (coefficients, [intercept] + loss_history)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n\n    Args:\n    - Q (np.ndarray): Query matrix.\n    - K (np.ndarray): Key matrix.\n    - V (np.ndarray): Value matrix.\n    - mask (np.ndarray): Attention mask.\n\n    Returns:\n    - output (np.ndarray): Masked self-attention output.\n    \"\"\"\n    attention_scores = np.dot(Q, K.T) / np.sqrt(K.shape[-1])\n    attention_scores = np.where(mask == 0, -1000000000.0, attention_scores)\n    attention_weights = np.softmax(attention_scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n\n    Args:\n    apples (list): A list of integers representing apple colors.\n\n    Returns:\n    float: A measure of disorder in the apple colors, rounded to 4 decimal places.\n    \"\"\"\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Applies layer normalization to the input tensor X.\n\n    Args:\n    - X (np.ndarray): A 3D array of shape (batch_size, sequence_length, feature_dim).\n    - gamma (np.ndarray): A 1D array of shape (feature_dim,) for scaling.\n    - beta (np.ndarray): A 1D array of shape (feature_dim,) for shifting.\n    - epsilon (float, optional): A small value for numerical stability. Defaults to 1e-5.\n\n    Returns:\n    - list: The normalized X as a list, rounded to 5 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    normalized_X = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * normalized_X + beta\n    output = np.round(output, 5).tolist()\n    return output"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score for evaluating machine translation quality.\n\n    Args:\n    - reference (list): The reference translation.\n    - candidate (list): The candidate translation.\n    - alpha (float, optional): The weight for precision. Defaults to 0.9.\n    - beta (float, optional): The weight for recall. Defaults to 3.\n    - gamma (float, optional): The weight for penalty. Defaults to 0.5.\n\n    Returns:\n    - float: The METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_counts = Counter(reference)\n    cand_counts = Counter(candidate)\n    matches = sum((min(ref_counts[word], cand_counts[word]) for word in ref_counts.keys() & cand_counts.keys()))\n    precision = matches / len(candidate) if candidate else 0\n    recall = matches / len(reference) if reference else 0\n    f_mean = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if precision + recall > 0 else 0\n    aligned = []\n    for (i, word) in enumerate(candidate):\n        if word in ref_counts and ref_counts[word] > 0:\n            aligned.append(1)\n            ref_counts[word] -= 1\n        else:\n            aligned.append(0)\n    chunks = []\n    current_chunk = []\n    for is_aligned in aligned:\n        if is_aligned:\n            current_chunk.append(is_aligned)\n        elif current_chunk:\n            chunks.append(current_chunk)\n            current_chunk = []\n    if current_chunk:\n        chunks.append(current_chunk)\n    penalty = gamma * len(chunks) / len(candidate) if candidate else 0\n    meteor = alpha * f_mean + (1 - alpha) * penalty\n    meteor = max(0, meteor)\n    return round(meteor, 3)\nreference = ['This', 'is', 'a', 'reference', 'translation']\ncandidate = ['This', 'is', 'a', 'candidate', 'translation']"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n\n    Parameters:\n    joint_counts (int): The joint occurrence count of two events.\n    total_counts_x (int): The total count of event X.\n    total_counts_y (int): The total count of event Y.\n    total_samples (int): The total number of samples.\n\n    Returns:\n    float: The computed PMI value rounded to 3 decimal places.\n    \"\"\"\n    if joint_counts == 0:\n        return 0.0\n    prob_xy = joint_counts / total_samples\n    prob_x = total_counts_x / total_samples\n    prob_y = total_counts_y / total_samples\n    if prob_x == 0 or prob_y == 0:\n        return 0.0\n    pmi = np.log2(prob_xy / (prob_x * prob_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    This function performs Min-Max Normalization on a list of integers.\n    \n    Args:\n    x (list[int]): A list of integers to be normalized.\n    \n    Returns:\n    list[float]: A list of floats representing the normalized values, rounded to 4 decimal places.\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(i - min_val) / (max_val - min_val) for i in x]\n    normalized = [round(val, 4) for val in normalized]\n    return normalized"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    \"\"\"\n    Creates a simple residual block with a shortcut connection.\n\n    Args:\n    - x (np.ndarray): 1D input array.\n    - w1 (np.ndarray): Weight matrix for the first layer.\n    - w2 (np.ndarray): Weight matrix for the second layer.\n\n    Returns:\n    - list: The output of the residual block rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    w1 = np.asarray(w1)\n    w2 = np.asarray(w2)\n    assert len(x.shape) == 1, 'Input must be a 1D array'\n    assert len(w1.shape) == 2 and len(w2.shape) == 2, 'Weights must be 2D arrays'\n    assert w1.shape[1] == x.shape[0], 'Number of columns in w1 must match the number of elements in x'\n    assert w2.shape[0] == w1.shape[0], 'Number of rows in w2 must match the number of rows in w1'\n    z1 = np.matmul(w1, x)\n    a1 = np.maximum(z1, 0)\n    z2 = np.matmul(w2, a1)\n    a2 = np.maximum(z2, 0)\n    output = np.maximum(x + a2, 0)\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs Global Average Pooling on a 3D NumPy array.\n\n    Args:\n    x (np.ndarray): A 3D NumPy array of shape (height, width, channels) representing feature maps.\n\n    Returns:\n    np.ndarray: A 1D NumPy array of shape (channels,) where each element is the average of all values in the corresponding feature map.\n\n    Raises:\n    ValueError: If the input array is not of shape (height, width, channels).\n    \"\"\"\n    if len(x.shape) != 3:\n        raise ValueError('Input array must be of shape (height, width, channels)')\n    avg_pool = np.mean(x, axis=(0, 1))\n    return avg_pool"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Applies batch normalization to a 4D NumPy array in BCHW format.\n\n    Args:\n    - X (np.ndarray): Input array in BCHW format.\n    - gamma (np.ndarray): Scale parameter.\n    - beta (np.ndarray): Shift parameter.\n    - epsilon (float, optional): Small value for numerical stability. Defaults to 1e-5.\n\n    Returns:\n    - list: Normalized output.\n    \"\"\"\n    (batch_size, num_channels, height, width) = X.shape\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    normalized_X = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * normalized_X + beta\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    This function computes the derivative of a polynomial term of the form c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the polynomial term.\n    x (float): The point at which the derivative is evaluated.\n    n (float): The exponent of the polynomial term.\n    \n    Returns:\n    float: The value of the derivative of the polynomial term at x, rounded to 4 decimal places.\n    \"\"\"\n    if n == 0:\n        derivative = 0.0\n    else:\n        derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by a list of 2D vectors.\n\n    Args:\n    - vectors (list[list[float]]): A list of 2D vectors.\n    - tol (float, optional): Tolerance value to determine linear independence. Defaults to 1e-10.\n\n    Returns:\n    - list[list[float]]: A list of orthonormal vectors that span the same subspace.\n    \"\"\"\n    vectors = np.array(vectors)\n    basis = []\n    for v in vectors:\n        v = np.array(v)\n        if basis:\n            proj = np.sum((np.dot(v, b) * b for b in basis))\n            v = v - proj\n            if np.linalg.norm(v) > tol:\n                v = v / np.linalg.norm(v)\n                basis.append(v)\n        elif np.linalg.norm(v) > tol:\n            v = v / np.linalg.norm(v)\n            basis.append(v)\n    basis = [b.round(4).tolist() for b in basis]\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3-dimensional vectors.\n\n    Args:\n        a (list or numpy.ndarray): The first 3D vector.\n        b (list or numpy.ndarray): The second 3D vector.\n\n    Returns:\n        list: The cross product of vectors a and b, rounded to 4 decimal places.\n\n    Raises:\n        ValueError: If either vector a or b is not a 3D vector.\n    \"\"\"\n    a = np.asarray(a)\n    b = np.asarray(b)\n    if a.shape != (3,) or b.shape != (3,):\n        raise ValueError('Both inputs must be 3D vectors')\n    cross_product = np.cross(a, b)\n    result = cross_product.round(4).tolist()\n    return result"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations Ax = b using Cramer's Rule.\n\n    Args:\n    A (numpy.ndarray): A square coefficient matrix.\n    b (numpy.ndarray): A constant vector.\n\n    Returns:\n    list: The solution vector x if a unique solution exists, otherwise -1.\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be a square matrix')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('The number of equations must match the number of variables')\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = np.zeros_like(b)\n    for i in range(A.shape[0]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    sum_sqrt = 0\n    for i in range(len(p)):\n        if p[i] < 0 or q[i] < 0:\n            return 0.0\n        sum_sqrt += np.sqrt(p[i] * q[i])\n    if sum_sqrt == 0:\n        return 0.0\n    else:\n        db = -np.log(sum_sqrt)\n        return round(db, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the element-wise sum of two vectors.\n\n    Args:\n    a (list[int|float]): The first vector.\n    b (list[int|float]): The second vector.\n\n    Returns:\n    list[int|float]: A new vector representing the element-wise sum of a and b if they have the same length, -1 otherwise.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Compute the policy gradient using REINFORCE algorithm.\n\n    Args:\n    theta (np.ndarray): A 2D NumPy array of shape (num_states, num_actions) parameterizing the policy.\n    episodes (list[list[tuple[int, int, float]]]): A list of episodes, where each episode is a list of (state, action, reward) tuples.\n\n    Returns:\n    list: The policy gradient.\n    \"\"\"\n\n    def compute_policy(theta):\n        exp_theta = np.exp(theta)\n        policy = exp_theta / np.sum(exp_theta, axis=1, keepdims=True)\n        return policy\n    policy = compute_policy(theta)\n    policy_gradient = np.zeros_like(theta)\n    for episode in episodes:\n        rewards = [reward for (_, _, reward) in episode]\n        returns = []\n        cumulative_reward = 0\n        for reward in reversed(rewards):\n            cumulative_reward += reward\n            returns.append(cumulative_reward)\n        returns = list(reversed(returns))\n        for (t, (state, action, _)) in enumerate(episode):\n            log_policy = np.log(policy[state])\n            gradient = np.zeros_like(theta)\n            gradient[state] = np.exp(log_policy) / policy[state]\n            gradient[state, action] -= 1\n            gradient *= returns[t]\n            policy_gradient += gradient\n    policy_gradient /= len(episodes)\n    policy_gradient = np.round(policy_gradient, 4)\n    return policy_gradient.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of an MoE layer compared to a dense layer.\n\n    Args:\n    - n_experts (int): The total number of experts in the MoE layer.\n    - k_active (int): The number of active experts in the MoE layer.\n    - d_in (int): The input dimension of the layer.\n    - d_out (int): The output dimension of the layer.\n\n    Returns:\n    - flops_dense (float): The floating-point operations for a dense layer.\n    - flops_moe (float): The floating-point operations for an MoE layer.\n    - savings_percentage (float): The computational cost savings percentage of the MoE layer.\n\n    \"\"\"\n    flops_dense = d_in * d_out\n    flops_moe = k_active * (d_in * d_out // n_experts + d_out)\n    savings_percentage = (flops_dense - flops_moe) / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return (flops_dense, flops_moe, savings_percentage)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Noisy Top-K gating mechanism used in Mixture-of-Experts (MoE) models.\n\n    Args:\n    - X (np.ndarray): Input matrix.\n    - W_g (np.ndarray): Weight matrix for gating.\n    - W_noise (np.ndarray): Pre-sampled noise weight matrix.\n    - N (np.ndarray): Pre-sampled noise.\n    - k (int): Sparsity constraint.\n\n    Returns:\n    - A list of gating probabilities for each expert, rounded to 4 decimal places.\n    \"\"\"\n    logits = np.dot(X, W_g.T)\n    noisy_logits = logits + np.dot(N, W_noise.T)\n    top_k_indices = np.argsort(noisy_logits, axis=1)[:, -k:]\n    mask = np.zeros_like(noisy_logits)\n    mask[np.arange(mask.shape[0])[:, None], top_k_indices] = 1\n    gating_probabilities = np.exp(noisy_logits * mask) / np.sum(np.exp(noisy_logits * mask), axis=1, keepdims=True)\n    return gating_probabilities.round(4).tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Compute the output of a Sparse Mixture of Experts (MoE) layer.\n\n    Parameters:\n    - x (np.ndarray): Input tensor of shape (batch_size, input_dim)\n    - We (np.ndarray): Stack of expert weight matrices of shape (n_experts, output_dim, input_dim)\n    - Wg (np.ndarray): Gating weight matrix of shape (n_experts, input_dim)\n    - n_experts (int): Number of experts\n    - top_k (int): Number of top experts to select per token\n\n    Returns:\n    - list: MoE output reshaped to a list, rounded to the nearest 4th decimal\n    \"\"\"\n    gating_logits = np.matmul(Wg, x.T)\n    gating_probs = np.softmax(gating_logits, axis=0)\n    top_k_indices = np.argsort(gating_probs, axis=0)[:-top_k - 1:-1]\n    top_k_probs = gating_probs[top_k_indices, np.arange(gating_probs.shape[1])]\n    expert_outputs = []\n    for i in range(n_experts):\n        expert_output = np.matmul(We[i], x.T)\n        expert_outputs.append(expert_output)\n    moE_output = np.zeros((We.shape[1], x.shape[0]))\n    for k in range(top_k):\n        expert_output = expert_outputs[top_k_indices[k]]\n        moE_output += expert_output * top_k_probs[k]\n    moE_output = np.round(moE_output.T, 4).tolist()\n    return moE_output"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Applies group normalization to a 4D input tensor.\n\n    Args:\n    - X (np.ndarray): Input tensor with shape (B, C, H, W)\n    - gamma (np.ndarray): Learnable scale parameter\n    - beta (np.ndarray): Learnable shift parameter\n    - num_groups (int): Number of groups for normalization\n    - epsilon (float, optional): Small value for numerical stability. Defaults to 1e-5.\n\n    Returns:\n    - list: Normalized tensor as a list, rounded to 4 decimal places\n    \"\"\"\n    (B, C, H, W) = X.shape\n    channels_per_group = C // num_groups\n    X = X.reshape((B, num_groups, channels_per_group, H, W))\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    normalized_X = (X - mean) / np.sqrt(var + epsilon)\n    normalized_X = normalized_X.reshape((B, C, H, W))\n    output = gamma * normalized_X + beta\n    return np.round(output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Find the value of x where f(x) = x^4 - 3x^3 + 2 reaches its minimum using gradient descent.\n\n    Args:\n    - start_x (float): The initial position.\n    - learning_rate (float, optional): The learning rate for gradient descent. Defaults to 0.1.\n    - tolerance (float, optional): The tolerance for convergence. Defaults to 1e-6.\n    - max_iters (int, optional): The maximum number of iterations. Defaults to 10000.\n\n    Returns:\n    - float: The value of x where f(x) reaches its minimum, rounded to 4 decimal places.\n    \"\"\"\n\n    def f(x: float) -> float:\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x: float) -> float:\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        x_new = x - learning_rate * gradient\n        if abs(x_new - x) < tolerance:\n            return round(x_new, 4)\n        x = x_new\n    return round(x, 4)\nstart_x = 1.0"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function, a normalization-free transformation inspired by the Tanh function.\n\n    Args:\n    - x (np.ndarray): Input array.\n    - alpha (float): Scaling factor.\n    - gamma (float): Shift factor.\n    - beta (float): Additional scaling factor.\n\n    Returns:\n    - list[float]: DyT transformed values as a list, rounded to the nearest 4th decimal.\n    \"\"\"\n    dyt = np.tanh(alpha * (x + gamma)) * beta\n    dyt = np.round(dyt, 4)\n    result = dyt.tolist()\n    return result"}
