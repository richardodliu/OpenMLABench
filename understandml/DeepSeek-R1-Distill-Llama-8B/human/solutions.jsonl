{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b:\n        return -1\n    n_cols = len(a[0])\n    if n_cols != len(b):\n        return -1\n    for row in a:\n        if len(row) != n_cols:\n            return -1\n    result = []\n    for row in a:\n        dot_product = 0.0\n        for i in range(n_cols):\n            dot_product += row[i] * b[i]\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    a_np = np.array(a)\n    if not a or not a[0]:\n        total = 0\n    else:\n        total = len(a) * len(a[0])\n    new_total = new_shape[0] * new_shape[1]\n    if total != new_total:\n        return []\n    try:\n        a_reshaped = a_np.reshape(new_shape)\n    except:\n        return []\n    result = a_reshaped.tolist()\n    return result"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        means = []\n        for row in matrix:\n            mean = sum(row) / len(row)\n            means.append(mean)\n        return means\n    elif mode == 'column':\n        if not matrix:\n            return []\n        num_rows = len(matrix)\n        num_cols = len(matrix[0]) if num_rows > 0 else 0\n        means = []\n        for col in range(num_cols):\n            total = 0.0\n            for row in matrix:\n                total += row[col]\n            mean = total / num_rows\n            means.append(mean)\n        return means\n    else:\n        raise ValueError('Invalid mode provided.')"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    lambda1 = (trace + sqrt_discriminant) / 2\n    lambda2 = (trace - sqrt_discriminant) / 2\n    eigenvalues = [lambda1, lambda2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        t_matrix = np.array(T)\n        s_matrix = np.array(S)\n        a_matrix = np.array(A)\n    except:\n        return -1\n    if t_matrix.shape[0] != t_matrix.shape[1]:\n        return -1\n    try:\n        det_t = np.linalg.det(t_matrix)\n    except np.linalg.LinAlgError:\n        return -1\n    if abs(det_t) < 1e-06:\n        return -1\n    try:\n        t_inv = np.linalg.inv(t_matrix)\n    except np.linalg.LinAlgError:\n        return -1\n    if a_matrix.shape[0] != t_matrix.shape[0]:\n        return -1\n    if a_matrix.shape[1] != s_matrix.shape[0]:\n        return -1\n    try:\n        result1 = np.dot(t_inv, a_matrix)\n    except:\n        return -1\n    try:\n        result2 = np.dot(result1, s_matrix)\n    except:\n        return -1\n    result_list = result2.tolist()\n    rounded_result = []\n    for row in result_list:\n        rounded_row = [round(x, 4) for x in row]\n        rounded_result.append(rounded_row)\n    return rounded_result"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    else:\n        new_a = d / det\n        new_b = -b / det\n        new_c = -c / det\n        new_d = a / det\n        return [[new_a, new_b], [new_c, new_d]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not b:\n        return -1\n    n_cols_a = len(a[0])\n    for row in a:\n        if len(row) != n_cols_a:\n            return -1\n    n_cols_b = len(b[0])\n    for row in b:\n        if len(row) != n_cols_b:\n            return -1\n    if n_cols_a != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        new_row = []\n        for j in range(len(b[0])):\n            sum_val = 0.0\n            for k in range(len(a[i])):\n                sum_val += a[i][k] * b[k][j]\n            new_row.append(sum_val)\n        result.append(new_row)\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    if not vectors:\n        return []\n    n = len(vectors)\n    if n == 0:\n        return []\n    n_features = len(vectors[0])\n    means = [sum((v[i] for v in vectors)) / n for i in range(n_features)]\n    cov_matrix = []\n    for i in range(n_features):\n        row = []\n        for j in range(n_features):\n            if i == j:\n                sum_sq_diff = sum(((x - means[i]) ** 2 for x in vectors[i]))\n                if n == 1:\n                    var = 0.0\n                else:\n                    var = sum_sq_diff / (n - 1)\n                row.append(var)\n            else:\n                sum_product = 0.0\n                for k in range(n):\n                    x_i = vectors[k][i]\n                    x_j = vectors[k][j]\n                    sum_product += (x_i - means[i]) * (x_j - means[j])\n                if n == 1:\n                    cov = 0.0\n                else:\n                    cov = sum_product / (n - 1)\n                row.append(cov)\n        cov_matrix.append(row)\n    return cov_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b)\n    for _ in range(n):\n        residual = b - A @ x\n        D_inv = np.linalg.inv(np.diag(A))\n        new_x = np.dot(D_inv, residual)\n        x = np.round(new_x, 4)\n    return x.tolist()"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant(matrix):\n        n = len(matrix)\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n        det = 0\n        for j in range(n):\n            minor = [row[:j] + row[j + 1:] for row in matrix[1:]]\n            sign = (-1) ** (0 + j)\n            det += matrix[0][j] * sign * determinant(minor)\n        return det\n    return determinant(matrix)"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_transpose_X = np.dot(X.T, X)\n    X_transpose_y = np.dot(X.T, y)\n    inv_XTX = np.linalg.inv(X_transpose_X)\n    beta = np.dot(inv_XTX, X_transpose_y)\n    beta_rounded = round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    N = X.shape[0]\n    K = X.shape[1] - 1\n    w = np.zeros(K, dtype=np.float64)\n    for _ in range(iterations):\n        y_hat = np.dot(X, w)\n        error = y - y_hat\n        gradients = X.T @ error / N\n        w -= alpha * gradients\n    rounded_w = [round(coeff, 4) for coeff in w]\n    return rounded_w"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = data.mean(axis=0)\n    std = data.std(axis=0)\n    std_data = (data - mean) / std\n    min_val = data.min(axis=0)\n    max_val = data.max(axis=0)\n    range_ = max_val - min_val\n    min_max_data = (data - min_val) / range_\n    std_list = [[round(x, 4) for x in row] for row in std_data]\n    min_max_list = [[round(x, 4) for x in row] for row in min_max_data]\n    return (std_list, min_max_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    current_centroids = list(initial_centroids)\n    prev_assignment = None\n    for _ in range(max_iterations):\n        sorted_centroids = sorted(current_centroids, key=lambda c: (c[0], c[1]))\n        distances = []\n        for point in points:\n            dists = []\n            for centroid in sorted_centroids:\n                dx = point[0] - centroid[0]\n                dy = point[1] - centroid[1]\n                dist = np.sqrt(dx ** 2 + dy ** 2)\n                dists.append(dist)\n            distances.append(dists)\n        assignment = [0] * len(points)\n        for (i, point) in enumerate(points):\n            min_dist = float('inf')\n            cluster = 0\n            for (j, dist) in enumerate(distances[i]):\n                if dist < min_dist:\n                    min_dist = dist\n                    cluster = j\n            assignment[i] = cluster\n        if prev_assignment is not None and assignment == prev_assignment:\n            break\n        new_centroids = []\n        for cluster in range(k):\n            cluster_points = [points[i] for i in range(len(points)) if assignment[i] == cluster]\n            x = np.mean([p[0] for p in cluster_points])\n            y = np.mean([p[1] for p in cluster_points])\n            new_centroids.append((x, y))\n        if all((np.abs(new_centroids[i] - current_centroids[i]) < 1e-06 for i in range(k))):\n            break\n        current_centroids = new_centroids\n        current_centroids = sorted(current_centroids, key=lambda c: (c[0], c[1]))\n        prev_assignment = assignment\n    rounded_centroids = [(round(x, 4), round(y, 4)) for (x, y) in current_centroids]\n    return rounded_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    n = len(X)\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    all_indices = np.arange(n)\n    if shuffle:\n        all_indices = np.random.permutation(all_indices)\n    folds = np.split(all_indices, k)\n    result = []\n    for (i, fold) in enumerate(folds):\n        start = i * (n // k)\n        end = start + len(fold)\n        train = np.concatenate([all_indices[0:start], all_indices[end:]])\n        result.append((train, fold))\n    return result"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    (n_samples, n_features) = data.shape\n    mean = np.mean(data, axis=1)\n    std = np.std(data, axis=1)\n    std_data = (data - mean[:, np.newaxis]) / std[:, np.newaxis]\n    cov_matrix = np.cov(std_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    n_features = data.shape[1]\n    k = min(k, n_features)\n    sorted_indices = np.argsort(-eigenvalues)\n    top_k_indices = sorted_indices[:k]\n    principal_components = eigenvectors[top_k_indices]\n    rounded_components = [[round(v, 4) for v in pc] for pc in principal_components]\n    return rounded_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    if not examples:\n        return None\n    target_values = list({example[target_attr] for example in examples})\n    if len(target_values) == 1:\n        return target_values[0]\n    if not attributes:\n        return target_values[0]\n\n    def compute_entropy(subset):\n        counts = Counter(subset[target_attr])\n        entropy = 0\n        for count in counts.values():\n            prob = count / len(subset)\n            entropy -= prob * math.log2(prob)\n        return entropy\n\n    def compute_information_gain(subset, attribute):\n        current_entropy = compute_entropy(subset)\n        if current_entropy == 0:\n            return 0\n        groups = group_by_attribute(subset, attribute)\n        group_entropies = [compute_entropy(group) for group in groups.values()]\n        avg_entropy = sum(group_entropies) / len(groups)\n        return current_entropy - avg_entropy\n\n    def group_by_attribute(subset, attribute):\n        groups = {}\n        for example in subset:\n            value = example[attribute]\n            if value not in groups:\n                groups[value] = []\n            groups[value].append(example)\n        return groups\n    best_attr = None\n    max_gain = -1\n    for attr in attributes:\n        gain = compute_information_gain(examples, attr)\n        if gain > max_gain:\n            max_gain = gain\n            best_attr = attr\n    groups = group_by_attribute(examples, best_attr)\n    children = {}\n    for (value, group) in groups.items():\n        child = build_tree(group)\n        children[value] = child\n    return {best_attr: children}\ndef build_tree(subset, attributes, target_attr):\n    if not subset:\n        return None\n    target_values = list({example[target_attr] for example in subset})\n    if len(target_values) == 1:\n        return {'target': target_values[0]}\n    if not attributes:\n        return {'target': target_values[0]}\n    current_entropy = compute_entropy(subset)\n    max_gain = -1\n    best_attr = None\n    for attr in attributes:\n        gain = compute_information_gain(subset, attr)\n        if gain > max_gain:\n            max_gain = gain\n            best_attr = attr\n    groups = group_by_attribute(subset, best_attr)\n    children = {}\n    for (value, group) in groups.items():\n        child = build_tree(group, attributes, target_attr)\n        children[value] = child\n    return {best_attr: children}\ndef compute_information_gain(subset, attribute):\n    current_entropy = compute_entropy(subset)\n    if current_entropy == 0:\n        return 0\n    groups = group_by_attribute(subset, attribute)\n    group_entropies = [compute_entropy(group) for group in groups.values()]\n    avg_entropy = sum(group_entropies) / len(groups)\n    return current_entropy - avg_entropy\ndef group_by_attribute(subset, attribute):\n    groups = {}\n    for example in subset:\n        value = example[attribute]\n        if value not in groups:\n            groups[value] = []\n        groups[value].append(example)\n    return groups"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n = data.shape[0]\n    y = labels\n    alpha = np.zeros(n, dtype=np.float64)\n    b = 0.0\n    if kernel == 'linear':\n        K = data @ data.T\n    else:\n        K = np.exp(-sigma ** 2 * np.linalg.norm(data[:, :] - data[:, :], axis=1) ** 2)\n    for _ in range(iterations):\n        dec = np.dot(alpha.reshape(-1, 1), K) + b.reshape(-1, 1)\n        g = y * data - lambda_val * (1 - y * dec) / (1 + np.linalg.norm(data, axis=1) ** 2)\n        avg_g = np.mean(g)\n        alpha -= lambda_val * avg_g\n        g_b = -y * (1 - y * dec) / (1 + np.linalg.norm(data, axis=1) ** 2)\n        avg_g_b = np.mean(g_b)\n        b -= lambda_val * avg_g_b\n    alpha_rounded = np.round(alpha, 4)\n    b_rounded = np.round(b, 4)\n    return alpha_rounded.tolist() + [b_rounded]"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    exp_term = math.exp(-z)\n    return round(1 / (1 + exp_term), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    sum_exp = sum((math.exp(s) for s in scores))\n    if sum_exp == 0:\n        return [0.0 for _ in scores]\n    softmax_values = [math.exp(s) / sum_exp for s in scores]\n    return [round(val, 4) for val in softmax_values]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predictions = []\n    for i in range(len(features)):\n        fv = features[i]\n        sum_weights = 0.0\n        for j in range(len(fv)):\n            sum_weights += fv[j] * weights[j]\n        sum_weights += bias\n        prediction = 1.0 / (1.0 + math.exp(-sum_weights))\n        predictions.append(prediction)\n    mse = 0.0\n    for (p, l) in zip(predictions, labels):\n        mse += (p - float(l)) ** 2\n    mse /= len(labels)\n    rounded_predictions = [round(p, 4) for p in predictions]\n    rounded_mse = round(mse, 4)\n    return (rounded_predictions, rounded_mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    w = initial_weights.copy()\n    b = initial_bias\n    n_samples = features.shape[0]\n    mse_list = []\n    for epoch in range(epochs):\n        z = np.dot(w, features) + b\n        a = np.sigmoid(z)\n        loss = np.mean((a - labels) ** 2)\n        mse_list.append(round(loss, 4))\n        delta = a - labels\n        dw = np.dot(delta, features)\n        db = delta\n        dw_avg = np.mean(dw, axis=0)\n        db_avg = np.mean(db)\n        w -= learning_rate * dw_avg\n        b -= learning_rate * db_avg\n    return (w, b, mse_list)"}
{"task_id": 26, "completion_id": 0, "solution": ""}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_np = np.array(B, dtype=np.float64)\n    C_np = np.array(C, dtype=np.float64)\n    A = B_np\n    M = np.zeros((3, 3))\n    for i in range(3):\n        c = C_np[i]\n        x = np.linalg.solve(A, c)\n        M[:, i] = x\n    P = np.linalg.inv(M)\n    P_rounded = [[round(element, 4) for element in row] for row in P]\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    AtA = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eig(AtA)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    singular_values = np.sqrt(sorted_eigenvalues)\n    V = []\n    for v in sorted_eigenvectors:\n        norm = np.linalg.norm(v)\n        if norm == 0:\n            v = 0\n        else:\n            v = v / norm\n        V.append(v)\n    V = np.array(V)\n    U = []\n    for i in range(len(singular_values)):\n        av = A @ V[i]\n        norm = np.linalg.norm(av)\n        if norm == 0:\n            u = 0\n        else:\n            u = av / norm\n        U.append(u)\n    U = np.array(U)\n    U = U.reshape(2, 2)\n    S = np.diag(singular_values)\n    U = np.round(U, 4).tolist()\n    S = np.round(S, 4).tolist()\n    V = np.round(V, 4).tolist()\n    return (U, S, V)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.arange(len(X))\n    perm = np.random.permutation(indices)\n    X_shuffled = X[perm]\n    y_shuffled = y[perm]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    n = len(X)\n    for i in range(0, n, batch_size):\n        X_batch = X[i:i + batch_size]\n        if y is not None:\n            y_batch = y[i:i + batch_size]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    feature = X[:, feature_i]\n    condition = np.where(feature >= threshold, True, False)\n    true_part = X[condition]\n    false_part = X[~condition]\n    true_list = true_part.tolist()\n    false_list = false_part.tolist()\n    return [true_list, false_list]"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree < 0:\n        raise ValueError('Degree must be non-negative')\n    n_cols = X.shape[1]\n    polynomials = []\n    for col in X:\n        powers = [col ** i for i in range(degree + 1)]\n        polynomials.append(powers)\n    result = np.vstack(polynomials)\n    return result.tolist()"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.unique(x).size\n    result = np.zeros((len(x), n_col), dtype=np.int64)\n    for i in range(len(x)):\n        result[i, x[i]] = 1\n    return result.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    return np.diag(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    y_true = np.asarray(y_true, dtype=np.int64)\n    y_pred = np.asarray(y_pred, dtype=np.int64)\n    mask = np.equal(y_pred, y_true)\n    count = np.sum(mask)\n    accuracy = count / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    corr_matrix = np.corrcoef(X, Y)\n    rounded_corr = np.round(corr_matrix, 4)\n    return rounded_corr.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    if n_samples == 0:\n        return []\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = 0\n        best_t = 0.0\n        for j in range(n_features):\n            X_j = X[:, j]\n            y_j = y\n            t_values = np.linspace(0, 1, 100)\n            current_min_error = float('inf')\n            best_t_j = None\n            for t in t_values:\n                error = 0\n                for i in range(n_samples):\n                    if X_j[i] >= t and y_j[i] == 1 or (X_j[i] < t and y_j[i] == 0):\n                        error += 1\n                if error < current_min_error:\n                    current_min_error = error\n                    best_t_j = t\n            if current_min_error < min_error:\n                min_error = current_min_error\n                best_feature = j\n                best_t = best_t_j\n        best_t = round(best_t, 4)\n        classifier = (best_feature, best_t)\n        classifiers.append(classifier)\n        overall_error = min_error / n_samples\n        exp_term = math.exp(-overall_error)\n        for i in range(n_samples):\n            if X[:, best_feature][i] >= best_t and y[i] == 1 or (X[:, best_feature][i] < best_t and y[i] == 0):\n                weights[i] *= exp_term\n        weights = weights / weights.sum()\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    exp_scores = np.exp(scores)\n    sum_exp = np.sum(exp_scores)\n    log_sum = math.log(sum_exp)\n    log_softmax = scores - log_sum\n    result = log_softmax.tolist()\n    rounded_result = [round(x, 4) for x in result]\n    return rounded_result"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        super().__init__()\n        self.set_input_shape(input_shape)\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = self._create_optimizer(0.01)\n        self.optimizer_w0 = self._create_optimizer(0.01)\n\n    def _create_optimizer(self, lr=0.01):\n\n        def optimizer(param, grad):\n            param -= lr * grad\n            return param\n        return optimizer\n\n    def initialize(self):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be provided.')\n        n_input = self.input_shape[0]\n        self.W = np.random.uniform(-1.0 / np.sqrt(n_input), 1.0 / np.sqrt(n_input), (n_input, self.n_units))\n        self.w0 = np.zeros(self.n_units)\n\n    def parameters(self):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be provided.')\n        n_input = self.input_shape[0]\n        n_units = self.n_units\n        return n_input * n_units + n_units\n\n    def forward_pass(self, X, training):\n        if not self.trainable:\n            return X\n        output = X.dot(self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        if not self.trainable:\n            return None\n        dW = accum_grad.dot(self.W.T)\n        dw0 = np.mean(accum_grad, axis=0)\n        self.W = self.optimizer_W(self.W, dW)\n        self.w0 = self.optimizer_w0(self.w0, dw0)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_input = np.pad(input_matrix, ((0, 0), (0, 0)), mode='constant', constant_values=0)\n    kernel_rows = kernel.shape[0]\n    kernel_cols = kernel.shape[1]\n    conv_result = np.convolve2d(padded_input, kernel, mode='full')\n    output_rows = conv_result.shape[0] // stride\n    output_cols = conv_result.shape[1] // stride\n    output = conv_result[::stride, ::stride]\n    output_list = output.tolist()\n    rounded_output = np.round(output_list * 10000) / 10000\n    return rounded_output"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    if z > 0:\n        return z\n    else:\n        return 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X.dot(w)\n    squared_errors = (y_true - y_pred) ** 2\n    mse = np.mean(squared_errors)\n    regularization = alpha / 2 * np.sum(w ** 2)\n    total_loss = mse + regularization\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    if z >= 0:\n        return z\n    else:\n        return -alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum(y_true * y_pred)\n    fp = np.sum((1 - y_true) * y_pred)\n    total = tp + fp\n    if total == 0:\n        return 0.0\n    else:\n        return tp / total"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    N = X.shape[0]\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights)\n        error = y_pred - y\n        full_gradient = np.dot(X.T, error) / N\n        if method == 'sgd':\n            i = np.random.randint(N)\n            sample_gradient = full_gradient[i, :]\n            weights -= learning_rate * sample_gradient\n        elif method == 'batch':\n            weights -= learning_rate * full_gradient\n        elif method == 'mini-batch':\n            scaled_gradient = full_gradient * (batch_size / N)\n            weights -= learning_rate * scaled_gradient\n    return np.round(weights.tolist(), 4)"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0, dtype=np.float64)\n    m1 = np.zeros_like(x)\n    m2 = np.zeros_like(x)\n    for _ in range(num_iterations):\n        g = grad(x)\n        m1 = beta1 * m1 + (1 - beta1) * g\n        m2 = beta2 * m2 + (1 - beta2) * g ** 2\n        step = learning_rate * (m1 / (m2 + epsilon))\n        x += step\n    return x.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    n = X.shape[0]\n    p = X.shape[1]\n    w = np.zeros(p)\n    b = 0.0\n    prev_w = None\n    prev_b = None\n    for iter in range(max_iter):\n        hat_y = np.dot(X, w) + b\n        error = y - hat_y\n        dw_loss = 1 / n * np.dot(X.T, error)\n        db_loss = 1 / n * np.sum(error)\n        dw_penalty = alpha * np.sign(w)\n        dw = dw_loss + dw_penalty\n        w -= learning_rate * dw\n        b -= learning_rate * db_loss\n        if iter > 0:\n            diff_w = np.abs(w - prev_w)\n            diff_b = np.abs(b - prev_b)\n            if np.max(diff_w) < tol and np.max(diff_b) < tol:\n                break\n        prev_w = w.copy()\n        prev_b = b.copy()\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    return (w_rounded.tolist(), b_rounded.tolist())"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_s1 = len(source)\n    len_s2 = len(target)\n    dp = np.full((len_s1 + 1, len_s2 + 1), float('inf'))\n    dp[0][0] = 0\n    for i in range(len_s1 + 1):\n        for j in range(len_s2 + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            else:\n                if dp[i][j - 1] + 1 < dp[i + 1][j]:\n                    dp[i + 1][j] = dp[i][j - 1] + 1\n                if dp[i - 1][j] + 1 < dp[i][j + 1]:\n                    dp[i][j + 1] = dp[i - 1][j] + 1\n                if dp[i - 1][j - 1] + 1 < dp[i][j + 1]:\n                    dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j - 1] + 1)\n                if i < len_s1 - 1 and j < len_s2 - 1 and (source[i] != target[j]):\n                    if dp[i - 1][j - 1] + 1 < dp[i][j + 1]:\n                        dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j - 1] + 1)\n    return dp[len_s1][len_s2]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    total_positives = np.sum(y_true)\n    if total_positives == 0:\n        return 0.0\n    correct_positives = np.sum(y_pred * (y_true == 1))\n    recall_value = correct_positives / total_positives\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    (batch_size, seq_len, embed_dim) = X.shape\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    Q = Q.reshape(seq_len, embed_dim)\n    K = K.reshape(seq_len, embed_dim)\n    V = V.reshape(seq_len, embed_dim)\n    QK = Q @ K.T\n    att_weights = np.softmax(QK, axis=-1)\n    output = Q * att_weights + K * att_weights + V * att_weights\n    output = np.round(output, 4)\n    output = output.tolist()\n    return output"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    current_h = np.array(initial_hidden_state)\n    for input_vec in input_sequence:\n        input_vec = np.array(input_vec)\n        pre_activation = np.dot(input_vec, Wx) + b\n        current_h = np.tanh(pre_activation)\n    final_h = round(current_h, 4)\n    return final_h.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_np = np.array(points)\n    translated_np = points_np + np.array([tx, ty])\n    return translated_np.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import math\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    log_term = math.log(sigma_q / sigma_p)\n    term2 = sigma_p ** 2 / (2 * sigma_q ** 2)\n    kl = log_term + term2 - 0.5\n    return kl"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    if x_ini is None:\n        x = np.zeros(len(b))\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(len(x)):\n            sum_val = np.dot(A[i], x)\n            x_i = (b[i] - sum_val) / A[i][i]\n            x[i] = x_i\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        (batch_size, sequence_length, input_size) = x.shape\n        hidden_size = self.hidden_size\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(sequence_length):\n            x_t = x[:, t, :]\n            forget = np.dot(self.Wf, x_t) + self.bf\n            input_gate = np.dot(self.Wi, x_t) + self.bi\n            cell_candidate = np.dot(self.Wc, x_t) + self.bc\n            output_gate = np.dot(self.Wo, x_t) + self.bo\n            new_cell = np.multiply(cell_candidate, input_gate)\n            new_cell = np.add(new_cell, np.multiply(c, forget))\n            new_h = np.multiply(h, forget)\n            new_h = np.add(new_h, np.multiply(c, input_gate))\n            h = new_h\n            c = new_cell\n            hidden_states.append(h)\n        rounded_hidden_states = [np.round(h, 4).tolist() for h in hidden_states]\n        rounded_h = np.round(h, 4).tolist()\n        rounded_c = np.round(c, 4).tolist()\n        return (rounded_hidden_states, rounded_h, rounded_c)"}
{"task_id": 60, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    df_dict = defaultdict(int)\n    for doc in corpus:\n        unique_words = set(doc)\n        for word in unique_words:\n            df_dict[word] += 1\n    N = len(corpus)\n    query_words = set(query)\n    idf_scores = {}\n    for word in query_words:\n        df = df_dict.get(word, 0)\n        idf = math.log((N + 1) / (df + 1))\n        idf_scores[word] = idf\n    result = []\n    for doc in corpus:\n        word_counts = defaultdict(int)\n        for word in doc:\n            word_counts[word] += 1\n        tfidf_scores = []\n        for word in query:\n            count = word_counts.get(word, 0)\n            idf = idf_scores.get(word, 0.0)\n            tfidf = count * idf\n            tfidf_scores.append(tfidf)\n        rounded_scores = [round(x, 5) for x in tfidf_scores]\n        result.append(rounded_scores)\n    return result"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    tn = np.sum((y_true == 0) & (y_pred == 0))\n    precision = np.where(tp + fp != 0, tp / (tp + fp), 0.0)\n    recall = np.where(tp + fn != 0, tp / (tp + fn), 0.0)\n    numerator = (1 + beta) * precision * recall\n    denominator = beta * precision + recall\n    f = numerator / denominator\n    f = np.where(denominator == 0, 0.0, f)\n    return round(f, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns:\n            outputs: The output predictions for each time step.\n            last_inputs: The last input(s) in the sequence.\n            hidden_states: The hidden states at each time step.\n        \"\"\"\n        T = len(x)\n        hidden_states = np.zeros((T, self.hidden_size))\n        outputs = np.zeros((T, self.output_size))\n        last_hiddens = np.zeros((1, self.hidden_size))\n        for t in range(T):\n            x_t = x[t]\n            h_t = last_hiddens\n            next_h = self.W_hh.dot(h_t) + self.b_h\n            next_h = next_h.reshape(1, self.hidden_size)\n            output = self.W_hy.dot(h_t) + self.b_y\n            outputs[t] = output\n            hidden_states[t] = h_t\n            last_hiddens = next_h\n        last_inputs = x\n        return (outputs, last_inputs, hidden_states)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Backward pass through the RNN using BPTT.\n        Returns:\n            None\n        \"\"\"\n        T = len(input_sequence)\n        loss = 0\n        for t in range(T):\n            loss += 0.5 * np.mean((outputs[t] - expected_output[t]) ** 2)\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        for t in reversed(range(T)):\n            h_t = last_hiddens[t]\n            x_t = last_inputs[t]\n            delta3_t = (expected_output[t] - outputs[t]) * W_hy.T\n            delta2_t = delta3_t.dot(h_t)\n            delta1_t = delta2_t.dot(W_hh.T)\n            delta0_t = delta1_t.dot(x_t)\n            dW_hy += delta3_t\n            dW_hh += delta2_t\n            dW_xh += delta0_t\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        d_b_h = np.zeros_like(self.b_h)\n        d_b_y = np.zeros_like(self.b_y)\n        for t in reversed(range(T)):\n            d_b_h += delta2_t.sum(axis=0)\n        for t in reversed(range(T)):\n            d_b_y += delta3_t.sum(axis=0)\n        self.b_h -= learning_rate * d_b_h\n        self.b_y -= learning_rate * d_b_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros(A.shape[0], dtype=np.float64)\n    r0 = b - A @ x0\n    d0 = r0.copy()\n    for _ in range(n):\n        r0T_r0 = np.dot(r0, r0)\n        r0T_d0 = np.dot(r0, d0)\n        if r0T_d0 == 0:\n            break\n        alpha = r0T_r0 / r0T_d0\n        x1 = x0 + alpha * d0\n        r1 = r0 - A @ (alpha * d0)\n        A_d0 = A @ d0\n        r1T_d0 = np.dot(r1, d0)\n        if r1T_d0 == 0:\n            break\n        factor = r0T_d0 / r1T_d0\n        d1 = d0 - A_d0 * factor\n        norm_r1 = np.linalg.norm(r1)\n        if norm_r1 < tol:\n            break\n        x0 = x1\n        r0 = r1\n        d0 = d1\n    solution = np.round(x0, 8).tolist()\n    return solution"}
{"task_id": 64, "completion_id": 0, "solution": "from collections import Counter\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    counts = Counter(y)\n    max_freq = max(counts.values())\n    total = len(y)\n    correct = max_freq\n    g = 2 * (1 - correct / total) * (1 - max_freq / total)\n    return round(g, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    columns = []\n    row_pointers = []\n    total_non_zeros = 0\n    for (row_index, row) in enumerate(dense_matrix):\n        current_non_zeros = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                columns.append(col_index)\n                current_non_zeros += 1\n        row_pointers.append(total_non_zeros)\n        total_non_zeros += current_non_zeros\n    return (values, columns, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((v[i] * L[i] for i in range(len(v))))\n    squared_L = sum((L[i] ** 2 for i in range(len(L))))\n    if squared_L == 0:\n        return [0.0] * len(v)\n    scalar = dot_product / squared_L\n    projection = [L[i] * scalar for i in range(len(L))]\n    projection = [round(component, 3) for component in projection]\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix:\n        return ([], [], [])\n    rows = len(dense_matrix)\n    cols = len(dense_matrix[0]) if rows > 0 else 0\n    values = []\n    row_indices = []\n    column_pointer = []\n    for j in range(cols):\n        start = len(values)\n        column_pointer.append(start)\n        for i in range(rows):\n            if dense_matrix[i][j] != 0:\n                values.append(dense_matrix[i][j])\n                row_indices.append(i)\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    R = A.copy()\n    n_rows = R.shape[0]\n    n_cols = R.shape[1]\n    for i in range(n_rows):\n        p = None\n        for j in range(i, n_cols):\n            if abs(R[i, j]) > 1e-08:\n                p = j\n                break\n        if p is None:\n            continue\n        (R[i, :], R[p, :]) = (R[p, :], R[i, :])\n        for j in range(i + 1, n_rows):\n            factor = R[j, p]\n            R[j, :] = R[j, :] - factor * R[i, :]\n            R[j, :] = np.where(np.abs(R[j, :]) < 1e-08, 0, R[j, :])\n    pivot_cols = []\n    for i in range(n_rows):\n        for j in range(n_cols):\n            if abs(R[i, j]) > 1e-08:\n                if j not in pivot_cols:\n                    pivot_cols.append(j)\n                break\n    basis_matrix = np.zeros((len(pivot_cols), n_cols))\n    for j in range(len(pivot_cols)):\n        col = A[:, pivot_cols[j]]\n        basis_matrix[:, j] = col\n    rounded_basis = np.round(basis_matrix, 8)\n    result = rounded_basis.tolist()\n    return result"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y = np.mean(y_true)\n    sum_errors = np.sum((y_pred - y_true) ** 2)\n    sum_total = np.sum((y_true - mean_y) ** 2)\n    if sum_total == 0:\n        return 1.0\n    else:\n        r_squared = 1 - sum_errors / sum_total\n        return round(r_squared, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total = sum((pixel for row in img for pixel in row))\n    total_pixels = len(img) * len(img[0])\n    if total_pixels == 0:\n        return -1\n    average = total / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Input must be numpy arrays')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Arrays must have the same shape')\n    if len(y_true) == 0:\n        raise ValueError('Arrays must not be empty')\n    residuals = y_true - y_pred\n    squared_diffs = residuals ** 2\n    mean_sq = squared_diffs.mean()\n    rmse_val = np.sqrt(mean_sq)\n    return round(rmse_val, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    product = y_true * y_pred\n    intersection = np.sum(product)\n    union = np.sum(y_true) + np.sum(y_pred) - intersection\n    if union == 0:\n        return 0.0\n    else:\n        jaccard = intersection / union\n        return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    true_positives = np.sum(y_true)\n    pred_positives = np.sum(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    numerator = 2 * intersection\n    denominator = true_positives + pred_positives\n    if denominator == 0:\n        return 0.0\n    score = numerator / denominator\n    return round(score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = []\n    for (feature_name, _) in row.items():\n        seed = random_seeds[feature_name]\n        np.random.seed(seed)\n        hv = np.random.rand(dim)\n        composite_hv.append(hv.tolist())\n    return composite_hv"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    counter = Counter()\n    for (y_true, y_pred) in data:\n        counter[y_true, y_pred] += 1\n    order = [(0, 0), (0, 1), (1, 0), (1, 1)]\n    return [[counter[t] for t in order[:2]], [counter[t] for t in order[2:4]]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    dot = np.dot(v1, v2)\n    mag_v1 = np.linalg.norm(v1)\n    mag_v2 = np.linalg.norm(v2)\n    cos_sim = dot / (mag_v1 * mag_v2)\n    return round(cos_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    counts = Counter(zip(actual, predicted))\n    tp = counts.get((1, 1), 0)\n    fp = counts.get((0, 1), 0)\n    fn = counts.get((1, 0), 0)\n    tn = counts.get((0, 0), 0)\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    total = len(actual)\n    if total == 0:\n        return (confusion_matrix, 0.0, 0.0, 0.0, 0.0)\n    accuracy = (tp + tn) / total\n    if tp + fp != 0:\n        precision = tp / (tp + fp)\n    else:\n        precision = 0.0\n    if tp + fn != 0:\n        recall = tp / (tp + fn)\n    else:\n        recall = 0.0\n    if precision + recall != 0:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    else:\n        f1 = 0.0\n    if tn + fn != 0:\n        specificity = tn / (tn + fn)\n        negative_predictive_value = tn / (tn + fn)\n    else:\n        specificity = 0.0\n        negative_predictive_value = 0.0\n    accuracy = round(accuracy, 3)\n    f1 = round(f1, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef descriptive_statistics(data):\n    if not data:\n        return {}\n    data = np.asarray(data)\n    mean = np.mean(data)\n    result = {'mean': mean}\n    median = np.median(data)\n    result['median'] = median\n    freq = defaultdict(int)\n    for num in data:\n        freq[num] += 1\n    mode = None\n    max_freq = 0\n    for (num, count) in freq.items():\n        if count > max_freq:\n            max_freq = count\n            mode = num\n        elif count == max_freq:\n            if num < mode:\n                mode = num\n    result['mode'] = mode\n    variance = np.var(data)\n    result['variance'] = round(variance, 4)\n    standard_deviation = np.std(data)\n    result['standard_deviation'] = round(standard_deviation, 4)\n    result['25th_percentile'] = round(np.percentile(data, 25), 4)\n    result['50th_percentile'] = round(np.percentile(data, 50), 4)\n    result['75th_percentile'] = round(np.percentile(data, 75), 4)\n    iqr = result['75th_percentile'] - result['25th_percentile']\n    result['interquartile_range'] = round(iqr, 4)\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places.\n    \"\"\"\n    combination = math.comb(n, k)\n    prob = combination * p ** k * (1 - p) ** (n - k)\n    return round(prob, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = (x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf = 1.0 / (std_dev * math.sqrt(2 * math.pi)) * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, computed as max - min.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    return max_val - min_val"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "def phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    result = []\n    for data_point in data:\n        terms = [round(data_point ** i, 8) for i in range(degree + 1)]\n        result.append(terms)\n    return result"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    encoded_prompt = encoder.encode(prompt)\n    context = encoded_prompt\n    generated = []\n    for _ in range(n_tokens_to_generate):\n        if not context:\n            new_token = np.random.randint(params['wte'].shape[1])\n            generated_token_embedding = params['wte'][new_token]\n        else:\n            window_size = hparams['n_ctx']\n            attention_scores = compute_attention_scores(context, window_size)\n            attention_output = apply_multi_head_attention(attention_scores, context, params)\n            ff_output = apply_feed_forward(attention_output, params)\n            normalized_output = apply_layer_norm(ff_output, params['ln_f'])\n            new_token = np.argmax(normalized_output)\n            generated_token_embedding = params['wte'][new_token]\n        generated.append(new_token)\n        context = context[1:] + [generated_token_embedding]\n        if len(context) > hparams['n_ctx']:\n            context = context[-hparams['n_ctx']:]\n    generated_text = encoder.decode(generated)\n    return generated_text\ndef compute_attention_scores(context, window_size):\n    n_tokens = len(context)\n    attention_scores = []\n    for i in range(n_tokens):\n        score = np.random.uniform(0, 1)\n        attention_scores.append(score)\n    return attention_scores\ndef apply_multi_head_attention(attention_scores, context, params):\n    n_heads = params['n_head']\n    n_tokens = len(context)\n    attention_output = []\n    for i in range(n_tokens):\n        attention_output.append(np.sum(attention_scores[i] * context[i]))\n    return attention_output\ndef apply_feed_forward(input_, params):\n    layer = params['blocks'][0]\n    output = input_.dot(layer['w']) + layer['b']\n    return output\ndef apply_layer_norm(input_, params):\n    return input_"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        sum_values = np.sum(values)\n        if sum_values == 0:\n            return np.zeros_like(values)\n        exp_values = np.exp(values)\n        return exp_values / sum_values\n    attention_score = np.dot(crystal_values, crystal_values.T)\n    result = []\n    for i in range(n):\n        row = attention_score[i]\n        sum_row = np.sum(row)\n        if sum_row == 0:\n            weights = np.zeros(n)\n        else:\n            weights = row / sum_row\n        pattern = 0.0\n        for j in range(n):\n            if j != i:\n                pattern += weights[j] * crystal_values[j]\n        result.append(round(pattern, 4))\n    return result"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    query_terms = query.split()\n    if not query_terms:\n        return [0.0]\n    global_freq = {}\n    for doc in corpus:\n        terms = doc.split()\n        unique_terms = set(terms)\n        for term in unique_terms:\n            if term in global_freq:\n                global_freq[term] += 1\n            else:\n                global_freq[term] = 1\n    scores = []\n    total_documents = len(corpus)\n    for doc in corpus:\n        terms = doc.split()\n        count = Counter(terms)\n        total_words = len(terms)\n        score_sum = 0.0\n        for term in query_terms:\n            if term in count:\n                tf = (k1 + 1) * count[term] / total_words\n                if tf > 1:\n                    tf = 1.0\n                idf = global_freq[term] / total_documents\n                score_sum += tf * idf\n        if total_words == 0:\n            norm = 1.0\n        else:\n            norm = (1 + total_words * (1 - b)) ** (-b)\n        score = score_sum * norm\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "from collections import Counter\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if not y_true or not y_pred:\n        return 0.0\n    true_counter = Counter(y_true)\n    pred_counter = Counter(y_pred)\n    unique_classes = set(y_true)\n    total_f1 = 0.0\n    for class_ in unique_classes:\n        true_count = true_counter[class_]\n        pred_count = pred_counter.get(class_, 0)\n        if true_count == 0 or pred_count == 0:\n            continue\n        correct = (true_counter & pred_counter)[class_]\n        precision = correct / pred_count\n        recall = correct / true_count\n        f1 = 2 * (precision * recall) / (precision + recall)\n        total_f1 += f1\n    if not unique_classes:\n        return 0.0\n    average_f1 = total_f1 / len(unique_classes)\n    return round(average_f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended = []\n    for i in range(10):\n        day = i + 1\n        fluctuation = 10 * math.sin(2 * PI * day / 10)\n        detrended.append(consumption_data[i] - fluctuation)\n    sum_x = 55\n    sum_y = sum(detrended)\n    sum_xy = 0\n    sum_x2 = 0\n    for (x, y) in zip(range(1, 11), detrended):\n        sum_xy += x * y\n        sum_x2 += x ** 2\n    n = 10\n    mean_x = sum_x / n\n    mean_y = sum_y / n\n    covariance = (sum_xy - sum_x * sum_y / n) / n\n    variance_x = (sum_x2 - sum_x ** 2 / n) / n\n    if variance_x == 0:\n        slope = 0\n    else:\n        slope = covariance / variance_x\n    intercept = mean_y - slope * mean_x\n    y_pred = intercept + slope * 15\n    total = y_pred\n    total_with_margin = total * 1.05\n    rounded_total = round(total_with_margin)\n    return rounded_total"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return round(np.mean(np.abs(y_true - y_pred)), 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> tuple:\n    qkv = [W_q[i] for i in range(n_heads)]\n    kv = [W_k[i] for i in range(n_heads)]\n    vv = [W_v[i] for i in range(n_heads)]\n    Q = []\n    K = []\n    V = []\n    for i in range(n_heads):\n        w_q = qkv[i]\n        w_k = kv[i]\n        w_v = vv[i]\n        q = X @ w_q\n        k = X @ w_k\n        v = X @ w_v\n        Q.append(q)\n        K.append(k)\n        V.append(v)\n    Q = np.stack([q[:, :, i] for i in range(n_heads)], axis=1)\n    K = np.stack([k[:, :, i] for i in range(n_heads)], axis=1)\n    V = np.stack([v[:, :, i] for i in range(n_heads)], axis=1)\n    return (Q, K, V)\ndef self_attention(queries: np.ndarray, keys: np.ndarray, values: np.ndarray, n_heads: int) -> np.ndarray:\n    d = queries.shape[-1]\n    inv_sqrt_d = 1.0 / np.sqrt(d)\n    QK = queries @ keys.T\n    QK_scaled = QK * inv_sqrt_d\n    attention_weights = np.softmax(QK_scaled, axis=-1)\n    output = attention_weights @ values\n    output = np.round(output, 4)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v, n_heads)\n    output = self_attention(Q, K, V, n_heads)\n    output_reshaped = output.reshape(n_heads, -1)\n    result = []\n    for i in range(n_heads):\n        result.append(output_reshaped[i])\n    return result"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value, rounded to 4 decimal places.\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(-x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to four decimal places.\n    \"\"\"\n    return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "import math\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places.\n    \"\"\"\n    value = (math.exp(x) - 1) / (math.exp(x) + 1)\n    return round(value, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value, rounded to the nearest 6th decimal.\n    \"\"\"\n    clipped_A = np.clip(np.array(A), -epsilon, epsilon)\n    sum_A = np.sum(rhos * A)\n    sum_clipped = np.sum(rhos * clipped_A)\n    kl = np.sum(pi_theta_old * np.log(pi_theta_ref))\n    objective = sum_A - sum_clipped - beta * kl\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to four decimal places.\n    \"\"\"\n    sigmoid_x = math.sigmoid(x)\n    sigmoid_1x = math.sigmoid(1 - x)\n    swish_value = x * sigmoid_x - x * sigmoid_1x\n    return round(swish_value, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = X.dot(weights) + bias\n    probabilities = np.sigmoid(z)\n    predictions = np.where(probabilities >= 0.5, 1, 0)\n    return predictions.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = {}\n    for apple in apples:\n        color_counts[apple] = color_counts.get(apple, 0) + 1\n    total = len(apples)\n    entropy = 0.0\n    for (color, count) in color_counts.items():\n        probability = count / total\n        entropy += probability * math.log(1 / probability, 2)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=2)\n    variance = X.var(axis=2)\n    sqrt_variance = np.sqrt(variance + epsilon)\n    normalized = (X - mean) / sqrt_variance\n    normalized = normalized * gamma\n    normalized = normalized + beta\n    normalized = np.round(normalized, 5).tolist()\n    return normalized"}
