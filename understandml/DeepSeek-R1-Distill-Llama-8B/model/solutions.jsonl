{"task_id": 0, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples, dtype=np.float64)\n    b = 0.0\n    max_iter = n_iter\n    for _ in range(max_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = 0.0\n            for j in range(n_samples):\n                x_j = X_train[j]\n                y_j = y_train[j]\n                x_i = X_train[i]\n                k = np.dot(x_j, x_i)\n                activation += alpha[j] * y_j * k\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.zeros(n_samples, dtype=np.float64)\n    for j in range(n_samples):\n        yj = y_train[j]\n        xj = X_train[j]\n        w += alpha[j] * yj * xj\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    links['identity'] = {'link': lambda x: x, 'inv_link': lambda x: x, 'derivative': lambda x: 1}\n    links['log'] = {'link': lambda x: np.log(x), 'inv_link': lambda x: np.exp(x), 'derivative': lambda x: 1.0 / x}\n    links['logit'] = {'link': lambda x: np.log(x / (1 - x)), 'inv_link': lambda x: np.log(x / (1 - x)), 'derivative': lambda x: 1.0 / (x * (1 - x))}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    N = len(transactions)\n    required_support = math.ceil(minsup * N)\n    transactions_sets = [set(t) for t in transactions]\n    all_items = set()\n    for t in transactions:\n        all_items.update(t)\n    all_items = list(all_items)\n    result = {}\n    for k in range(1, len(all_items) + 1):\n        for combo in combinations(all_items, k):\n            count = 0\n            for t_set in transactions_sets:\n                if all((item in t_set for item in combo)):\n                    count += 1\n            if count >= required_support:\n                sorted_combo = tuple(sorted(combo))\n                result[sorted_combo] = count\n    return result"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_samples:\n        raise ValueError('k must be between 1 and the number of samples')\n    old_centers = data[:k]\n    for _ in range(max_iter):\n        clusters = np.zeros(len(data), dtype=int)\n        for (i, sample) in enumerate(data):\n            min_dist = float('inf')\n            min_center = 0\n            for (j, center) in enumerate(old_centers):\n                dist = np.sum((sample - center) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    min_center = j\n            clusters[i] = min_center\n        empty_clusters = []\n        for j in range(k):\n            if clusters.count(j) == 0:\n                empty_clusters.append(j)\n        for j in empty_clusters:\n            idx = np.random.randint(len(data))\n            old_centers[j] = data[idx]\n        new_centers = []\n        for j in range(k):\n            cluster_samples = data[clusters == j]\n            new_centers.append(np.mean(cluster_samples, axis=0))\n        max_diff = 0\n        for i in range(k):\n            diff = np.abs(old_centers[i] - new_centers[i])\n            if diff > max_diff:\n                max_diff = diff\n        if max_diff < epsilon:\n            break\n        old_centers = new_centers\n    rounded_centers = [[round(c, 4) for c in center] for center in old_centers]\n    cluster_labels = clusters\n    return (rounded_centers, cluster_labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    if n_user == 0:\n        return []\n    item_users = [set() for _ in range(n_item)]\n    for user in range(n_user):\n        for i in range(n_item):\n            if data[user, i] > 0:\n                item_users[i].add(user)\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = item_users[i].intersection(item_users[j])\n            if not common_users:\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n            else:\n                v1 = [data[u, i] for u in common_users]\n                v2 = [data[u, j] for u in common_users]\n                if criterion == 'cosine':\n                    mean_v1 = np.mean(v1)\n                    mean_v2 = np.mean(v2)\n                    if np.std(v1) > 0.001:\n                        v1_centered = v1 - mean_v1\n                    else:\n                        v1_centered = v1\n                    if np.std(v2) > 0.001:\n                        v2_centered = v2 - mean_v2\n                    else:\n                        v2_centered = v2\n                    dot = np.dot(v1_centered, v2_centered)\n                    len_v1 = np.linalg.norm(v1_centered)\n                    len_v2 = np.linalg.norm(v2_centered)\n                    if len_v1 == 0 or len_v2 == 0:\n                        sim = 0.0\n                    else:\n                        sim = dot / (len_v1 * len_v2)\n                    S[i, j] = sim\n                    S[j, i] = sim\n                elif criterion == 'pearson':\n                    correlation = np.corrcoef(v1, v2)[0, 0]\n                    S[i, j] = correlation\n                    S[j, i] = correlation\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    if len(rated_items) == n_item:\n        return []\n    r = data[user_ind, rated_items]\n    unrated_items = [t for t in range(n_item) if t not in rated_items]\n    scores = []\n    for t in unrated_items:\n        sum_product = 0.0\n        sum_abs = 0.0\n        for i in rated_items:\n            sum_product += r[i] * S[t, i]\n            sum_abs += abs(S[t, i])\n        if sum_abs == 0:\n            score = 0.0\n        else:\n            score = sum_product / sum_abs\n        scores.append((score, t))\n    scores.sort(key=lambda x: (-x[0], x[1]))\n    result = [t for (score, t) in scores[:k]]\n    return result"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.asarray(x)\n    sig_x = 1 / (1 + np.exp(-x))\n    grad_x = sig_x * (1 - sig_x)\n    rounded_sig = np.round(sig_x, 4)\n    rounded_grad = np.round(grad_x, 4)\n    if x.ndim == 0:\n        return (rounded_sig.item(), rounded_grad.item())\n    else:\n        return (rounded_sig.tolist(), rounded_grad.tolist())"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters:\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns:\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly 1 or -1.\n    \"\"\"\n    kernel = np.exp(-gamma * (X_train - X_test) @ (X_train - X_test).T)\n    scores = alpha * y_train @ kernel + b\n    predicted_labels = np.sign(scores).astype(int)\n    return predicted_labels.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns (-1, -1).\n    \"\"\"\n    m = len(X)\n    if m == 0:\n        return (-1, -1)\n    n = len(X[0])\n    if k < 1 or k > min(m, n):\n        return (-1, -1)\n    X_array = np.array(X)\n    (U, S, V) = np.svd(X_array)\n    U_k = U[:, :k]\n    S_k = S[:k, :]\n    V_k = V\n    X_hat = np.dot(U_k, np.dot(S_k, V.T))\n    mse = np.mean(np.square(X_array - X_hat))\n    X_hat_rounded = np.round(X_hat, 4)\n    mse_rounded = np.round(mse, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x = np.array(x_train)\n    y = np.array(y_train)\n    sorted_indices = np.argsort(x)\n    sorted_x = x[sorted_indices]\n    sorted_y = y[sorted_indices]\n    candidate_splits = []\n    for i in range(len(sorted_x) - 1):\n        s = (sorted_x[i] + sorted_x[i + 1]) / 2\n        candidate_splits.append(s)\n    residuals = sorted_y.copy()\n    ensemble = []\n    while True:\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n        for s in candidate_splits:\n            c1 = 0.0\n            c2 = 0.0\n            for i in range(len(sorted_x)):\n                if sorted_x[i] <= s:\n                    c1 += residuals[i]\n                else:\n                    c2 += residuals[i]\n            new_residuals = []\n            for i in range(len(sorted_x)):\n                if sorted_x[i] <= s:\n                    new_r = residuals[i] - c1\n                else:\n                    new_r = residuals[i] - c2\n                new_residuals.append(new_r)\n            rss = np.sum(new_residuals ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble.append((best_split, best_c1, best_c2))\n        residuals = new_residuals\n        current_rss = np.sum(residuals ** 2)\n        if current_rss <= epsilon:\n            break\n    prediction = 0.0\n    for (split, c1, c2) in ensemble:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Generate a binary tensor with 0.0 and 1.0 values based on the given shape and sparsity.\n\n    Parameters:\n        shape (tuple[int, ...]): The shape of the output tensor.\n        sparsity (float, optional): Probability of generating 1.0. Must be in [0, 1]. Default is 0.5.\n        seed (int, optional): Seed for reproducibility. If provided, np.random.seed is called. Default is None.\n\n    Returns:\n        numpy.ndarray: A tensor of float dtype with 0.0 and 1.0 values. If sparsity is invalid, returns a float array with -1.0 in the same shape.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return np.full(shape, -1.0, dtype=np.float64)\n    if seed is not None:\n        np.random.seed(seed)\n    rand_arr = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_arr = np.where(rand_arr >= threshold, 1.0, 0.0)\n    return binary_arr"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n    \"\"\"\n    n = data.shape[0]\n    sorted_indices = np.argpartition(data[:, d])\n    median_value = data[sorted_indices[n // 2]]\n    pivot = sorted_indices[n // 2]\n    left = []\n    right = []\n    for i in range(n):\n        if data[i][d] < median_value:\n            left.append(i)\n        elif data[i][d] > median_value:\n            right.append(i)\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if x.ndim != 1:\n        raise AssertionError('x must be 1-D')\n    if stride < 1:\n        raise AssertionError('stride must be >= 1')\n    if x.size < frame_width:\n        raise AssertionError('x must be at least frame_width in length')\n    n_frames = (x.size - frame_width) // stride + 1\n    view = as_strided(x, shape=(n_frames, frame_width), strides=(stride, 1))\n    view.flags.writeable = writeable\n    return view"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        if X.ndim < 2:\n            return False\n        if not np.all((X >= 0) & (X <= 1)):\n            return False\n        row_sums = np.sum(X, axis=1)\n        if not np.all(np.abs(row_sums - 1) < 1e-08):\n            return False\n        return True\n    else:\n        if not all((isinstance(row, list) for row in X)):\n            return False\n        row_length = len(X[0])\n        for row in X:\n            if len(row) != row_length:\n                return False\n        if len(X) == 0:\n            return False\n        try:\n            X_np = np.array(X)\n        except:\n            return False\n        if not np.issubdtype(X_np.dtype, np.floating):\n            return False\n        if not np.all((X_np >= 0) & (X_np <= 1)):\n            return False\n        row_sums = np.sum(X_np, axis=1)\n        if not np.all(np.abs(row_sums - 1) < 1e-08):\n            return False\n        return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n = X.shape[0]\n    d = X.shape[1]\n    w = np.zeros(d, dtype=np.float64)\n    s = np.zeros(d, dtype=np.float64)\n    current_pos = 0\n    for iteration in range(max_iter):\n        if n < batch_size:\n            batch_x = X\n            batch_y = y\n        else:\n            start = current_pos\n            end = start + batch_size\n            if end > n:\n                take_end = n - start\n                take_start = batch_size - take_end\n                if take_start < 0:\n                    take_start = 0\n                batch_x = X[start:start + take_end] + X[:take_start]\n                batch_y = y[start:start + take_end] + y[:take_start]\n            else:\n                batch_x = X[start:end]\n                batch_y = y[start:end]\n            current_pos = end % n\n        Xw = batch_x @ w\n        residuals = Xw - batch_y\n        g = 1.0 / n * np.dot(X.T, residuals)\n        g_squared = g ** 2\n        s = rho * s + (1 - rho) * g_squared\n        sqrt_s = np.sqrt(s)\n        denominator = sqrt_s + eps_station\n        w = w - eta * g / denominator\n        norm_g = np.linalg.norm(g)\n        if norm_g < epsilon:\n            break\n        if iteration == max_iter - 1:\n            break\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function and its derivative (sigmoid).\"\"\"\n    if isinstance(x, (int, float)):\n        if deriv:\n            return round(1.0 / (1 + np.exp(-x)), 4)\n        elif x > 0:\n            return round(x + np.log(1 + np.exp(-x)), 4)\n        else:\n            return round(np.log(1 + np.exp(x)), 4)\n    else:\n        x = np.array(x)\n        if deriv:\n            sig = 1 / (1 + np.exp(-x))\n            sig_rounded = np.round(sig, 4)\n            return sig_rounded.tolist()\n        else:\n            exp_x = np.exp(x)\n            log_val = np.where(x > 0, x + np.log(1 + np.exp(-x)), np.log(1 + exp_x))\n            log_val_rounded = np.round(log_val, 4)\n            return log_val_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The function builds an N-gram count table from the *corpus* and returns the total log-probability\n    of the *sequence* under the resulting unsmoothed language model. If any required count is zero,\n    it returns ``float('-inf')``.\n\n    Args:\n        corpus: List of word tokens.\n        sequence: List of word tokens to compute the log-probability for.\n        N: Order of the N-gram model.\n\n    Returns:\n        The total log-probability rounded to 4 decimal places, or ``float('-inf')`` if any required count is zero.\n    \"\"\"\n    if N == 0:\n        return float('-inf')\n    if N == 1:\n        ngram_counts = defaultdict(int)\n        for word in corpus:\n            ngram_counts[word] += 1\n    else:\n        ngram_counts = defaultdict(lambda : defaultdict(int))\n        for i in range(len(corpus) - N + 1):\n            current_gram = tuple(corpus[i:i + N])\n            prefix = tuple(corpus[i:i + N - 1])\n            ngram_counts[prefix][current_gram] += 1\n    total = 0.0\n    if N == 1:\n        total_words = len(corpus)\n        for word in sequence:\n            if word not in ngram_counts or ngram_counts[word] == 0:\n                return float('-inf')\n            prob = math.log(ngram_counts[word] / total_words)\n            total += prob\n    else:\n        for i in range(len(sequence) - N + 1):\n            window = tuple(sequence[i:i + N])\n            prefix = tuple(sequence[i:i + N - 1])\n            if prefix not in ngram_counts or window not in ngram_counts[prefix]:\n                return float('-inf')\n            count_window = ngram_counts[prefix][window]\n            count_prefix = sum(ngram_counts[prefix].values())\n            if count_window == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = math.log(count_window / count_prefix)\n            total += prob\n    return round(total, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\"\"\"\n    m = len(X)\n    if len(y) != m:\n        raise ValueError('X and y must have the same length.')\n    design_matrix = np.zeros((m, degree + 1))\n    design_matrix[:, 0] = 1.0\n    for j in range(1, degree + 1):\n        design_matrix[:, j] = np.array([x ** j for x in X], dtype=np.float64)\n    current_weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        max_change = 0.0\n        X_without_w0 = design_matrix[:, 1:]\n        residual_without_w0 = y - X_without_w0 @ current_weights\n        w0_new = np.mean(residual_without_w0)\n        change_w0 = abs(w0_new - current_weights[0])\n        max_change = max(max_change, change_w0)\n        current_weights[0] = w0_new\n        for j in range(1, degree + 1):\n            xj = design_matrix[:, j]\n            residual_j = y - design_matrix @ current_weights + current_weights[j] * xj\n            rho = xj.T @ residual_j\n            denominator = xj.T @ xj\n            if denominator == 0:\n                new_wj = 0.0\n            else:\n                if rho == 0:\n                    new_wj = 0.0\n                else:\n                    sign_rho = np.sign(rho)\n                    abs_rho = np.abs(rho)\n                    threshold = max(abs_rho - reg_factor, 0.0)\n                    new_wj = sign_rho * threshold\n                new_wj = new_wj / denominator\n            change = abs(new_wj - current_weights[j])\n            if change > max_change:\n                max_change = change\n            current_weights[j] = new_wj\n        if max_change < tol:\n            break\n    return [round(coeff, 4) for coeff in current_weights]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to the nearest 6th decimal.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    if T == 0:\n        return 0.0\n    beta_prev = [1.0 for _ in range(N)]\n    for t in range(T - 2, -1, -1):\n        current_obs = obs[t + 1]\n        beta_current = [0.0 for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                beta_current[i] += A[i][j] * B[j][current_obs] * beta_prev[j]\n        beta_prev = beta_current\n    result = 0.0\n    for i in range(N):\n        result += pi[i] * B[i][obs[0]] * beta_prev[i]\n    return round(result, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    if len(B) != n:\n        return -1\n    m = len(B[0]) if B else 0\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if not isinstance(obs, int):\n            return -1\n        if obs < 0 or obs >= m:\n            return -1\n    if len(observations) == 0:\n        return -1\n    current_state = np.array(S, dtype=np.float64)\n    for obs in observations:\n        current_state = current_state.dot(A)\n        current_state = current_state.dot(B)\n    total_probability = np.sum(current_state)\n    return round(total_probability, 4)"}
{"task_id": 75, "completion_id": 0, "solution": "def knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    if len(X_train) == 0:\n        return -1\n    result = []\n    for x_test in X_test:\n        distances = []\n        for (x_train, y) in zip(X_train, y_train):\n            dist = sum(((x_test[i] - x_train[i]) ** 2 for i in range(len(x_test))))\n            distances.append((dist, y))\n        distances.sort()\n        k_neighbors = distances[:k]\n        y_values = [y for (d, y) in k_neighbors]\n        freq = {}\n        for y in y_values:\n            freq[y] = freq.get(y, 0) + 1\n        max_freq = max(freq.values())\n        candidates = [y for y in freq if freq[y] == max_freq]\n        prediction = min(candidates)\n        result.append(prediction)\n    return result"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-10\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    sum_loss = np.sum(y * np.log(y_pred + epsilon))\n    L = -sum_loss\n    return round(L, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    L = len(parameters) // 2\n    A_prev = X\n    caches = []\n    for i in range(1, L + 1):\n        W = parameters[f'W{i}']\n        b = parameters[f'b{i}']\n        Z = np.dot(W, A_prev) + b\n        if i < L:\n            A = np.maximum(0, Z)\n            caches.append((Z, 'ReLU'))\n        else:\n            A = 1 / (1 + np.exp(-Z))\n            caches.append((Z, 'sigmoid'))\n        A_prev = A\n    AL = np.round(A, 4)\n    return AL.tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    \u03b5 = 1e-15\n    A2_clipped = np.clip(A2, \u03b5, 1 - \u03b5)\n    y_part = Y * np.log(A2_clipped)\n    one_minus_y_part = (1 - Y) * np.log(1 - A2_clipped)\n    cost = np.sum(y_part + one_minus_y_part)\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": ""}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    num_samples = len(predictions[0])\n    result = []\n    for i in range(num_samples):\n        sample = [tree[i] for tree in predictions]\n        label_type = type(sample[0])\n        counts = {}\n        for label in sample:\n            counts[label] = counts.get(label, 0) + 1\n        max_count = max(counts.values())\n        tied_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n        if len(tied_labels) == 1:\n            chosen_label = tied_labels[0]\n        else:\n            if isinstance(label_type, (int, float)):\n                sorted_labels = sorted(tied_labels, key=lambda x: float(x))\n            else:\n                sorted_labels = sorted(tied_labels)\n            chosen_label = sorted_labels[0]\n        result.append(chosen_label)\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        result = np.logaddexp(0.0, z)\n        return round(result, 4)\n    else:\n        z_array = np.asarray(z)\n        result = np.logaddexp(0.0, z_array)\n        rounded = np.round(result, 4)\n        return rounded.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to the nearest 4th decimal place. If the policy\n        does not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    true_values = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    if not isinstance(estimates, dict) or len(estimates) == 0:\n        return np.nan\n    sorted_indices = sorted(estimates.keys())\n    squared_errors = []\n    for idx in sorted_indices:\n        true_val = true_values[idx]\n        est_val = estimates[idx]\n        squared_errors.append((est_val - true_val) ** 2)\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    K = int(K)\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    X_hat_initial = W @ H\n    initial_loss = np.sum((X - X_hat_initial) ** 2) + alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n    best_loss = initial_loss\n    best_W = W.copy()\n    best_H = H.copy()\n    for iteration in range(max_iter):\n        A = H @ H.T + alpha * np.identity(K)\n        b = X @ H.T\n        W_new = np.linalg.lstsq(A, b, rcond=None)[0]\n        A = W @ W.T + alpha * np.identity(K)\n        b = W @ X\n        H_new = np.linalg.lstsq(A, b, rcond=None)[0]\n        X_hat = W_new @ H_new\n        new_loss = np.sum((X - X_hat) ** 2) + alpha * (np.sum(W_new ** 2) + np.sum(H_new ** 2))\n        if new_loss < best_loss:\n            best_loss = new_loss\n            best_W = W_new\n            best_H = H_new\n            if best_loss < tol:\n                break\n        else:\n            W = W_new\n            H = H_new\n    X_hat = best_W @ best_H\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    return X_hat_rounded"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = []\n    for _ in range(K):\n        if not centroids:\n            distances = np.linalg.norm(X - X[0], axis=1)\n            selected = np.argmax(distances)\n        else:\n            distances = np.linalg.norm(X - centroids, axis=1)\n            selected = np.argmax(distances)\n        centroids.append(X[selected, :])\n    previous_assignments = None\n    for _ in range(max_iter):\n        distances = np.linalg.norm(X - centroids, axis=1)\n        assignments = np.argmin(distances, axis=0)\n        if previous_assignments is not None:\n            if np.array_equal(assignments, previous_assignments):\n                break\n        previous_assignments = assignments\n        new_centroids = []\n        for j in range(K):\n            mask = assignments == j\n            if np.sum(mask) == 0:\n                new_centroids.append(centroids[j])\n            else:\n                selected_samples = X[mask]\n                new_centroid = np.mean(selected_samples, axis=0)\n                new_centroids.append(new_centroid)\n        if np.array_equal(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    rounded = [list(np.round(centroid, 4)) for centroid in centroids]\n    rounded.sort(key=lambda x: x)\n    return rounded"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to text, ignoring padding tokens (0).\"\"\"\n    filtered_indices = [i for i in indices if i != 0]\n    return ''.join([inverse_vocab[i] for i in filtered_indices])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs the model on the input text and returns the decoded prediction.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_array = np.array(encoded, dtype=np.int64).reshape(1, -1)\n    predicted = model.predict(encoded_array)\n    predicted_ids = np.argmax(predicted, axis=1)\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    outputs = []\n    for example in examples:\n        prediction_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction = ''.join(prediction_chars)\n        print(f'input: {example}')\n        print(f'output: {prediction}')\n        outputs.append(prediction)\n    return outputs"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    log_p = np.log(p)\n    log_1m_p = np.log(1 - p)\n    loss = -1 / m * np.sum(y * log_p + (1 - y) * log_1m_p)\n    gradient = X.T.dot(p - y) / m\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.reshape(-1, 1).tolist()\n    return (loss_rounded, gradient_list)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    if m == 0:\n        return []\n    n = X_train.shape[1]\n    weights = np.ones(m) / m\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = -1\n        best_split = 0\n        for j in range(n):\n            sorted_indices = np.argsort(X_train[:, j])\n            sorted_weights = [weights[i] for i in sorted_indices]\n            min_error_j = float('inf')\n            best_split_j = 0\n            for i in range(len(sorted_weights) - 1):\n                left_y = y_train[sorted_indices[:i + 1]]\n                left_weights = sorted_weights[:i + 1]\n                right_y = y_train[sorted_indices[i + 1:]]\n                right_weights = sorted_weights[i + 1:]\n                error = 0.0\n                for k in range(i + 1):\n                    if left_y[k] == 1:\n                        error += left_weights[k]\n                for k in range(len(right_weights)):\n                    if right_y[k] == -1:\n                        error += right_weights[k]\n                if error < min_error_j:\n                    min_error_j = error\n                    best_split_j = i + 1\n            if min_error_j < min_error:\n                min_error = min_error_j\n                best_feature = j\n                best_split = best_split_j\n        threshold = X_train[sorted_indices[best_split - 1], best_feature]\n        epsilon_t = min_error\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        classifiers.append((alpha_t, threshold))\n        for i in range(m):\n            if (X_train[i, best_feature] >= threshold) != y_train[i]:\n                weights[i] *= np.exp(2 * alpha_t)\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (alpha, threshold) in classifiers:\n            if x >= threshold:\n                total += alpha\n            else:\n                total -= alpha\n        if total >= 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (m, d) = X.shape\n    if d == 0:\n        return []\n    mu = np.mean(X, axis=0)\n    S_W = np.zeros((d, d), dtype=np.float64)\n    for c in np.unique(y):\n        mask = y == c\n        mu_c = np.mean(X[mask], axis=0)\n        sum_ww = np.cov(X[mask], rowvar=False)\n        S_W += sum_ww\n    S_B = np.zeros((d, d), dtype=np.float64)\n    for c in np.unique(y):\n        mask = y == c\n        mu_c = np.mean(X[mask], axis=0)\n        n_c = np.sum(mask)\n        diff = mu_c - mu\n        S_B += n_c * (diff[:, np.newaxis] @ diff[:, np.newaxis].T)\n    try:\n        A = np.linalg.pinv(S_W) @ S_B\n    except np.linalg.LinAlgError:\n        A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    eigenvalues = eigenvalues[::-1]\n    eigenvectors = eigenvectors[::-1]\n    for i in range(len(eigenvectors)):\n        vec = eigenvectors[i]\n        first_non_zero = np.argmax(np.abs(vec) > 1e-09)\n        if first_non_zero != 0:\n            if vec[first_non_zero] < 0:\n                eigenvectors[i] = -vec\n    W = eigenvectors[:n_components]\n    projected = X @ W\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    fire_time = [[float('inf')] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (i, j) = q.popleft()\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if 0 <= ni < n and 0 <= nj < n:\n                if fire_time[ni][nj] > fire_time[i][j] + 1:\n                    fire_time[ni][nj] = fire_time[i][j] + 1\n                    q.append((ni, nj))\n    visited = [[float('inf')] * n for _ in range(n)]\n    visited[0][0] = 0\n    q = deque()\n    q.append((0, 0, 0))\n    while q:\n        (x, y, t) = q.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t:\n                    new_t = t + 1\n                    if new_t < visited[nx][ny]:\n                        visited[nx][ny] = new_t\n                        q.append((nx, ny, new_t))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    predicted_labels = []\n    for x in X_test:\n        dists = []\n        for x_train in X_train:\n            if metric == 'manhattan':\n                dist = np.linalg.norm(x - x_train, ord=1)\n            elif metric == 'cosine':\n                dot = np.dot(x, x_train)\n                norm_x = np.linalg.norm(x, ord=2)\n                norm_train = np.linalg.norm(x_train, ord=2)\n                if norm_x == 0:\n                    cosine_sim = 0.0\n                else:\n                    cosine_sim = dot / (norm_x * norm_train)\n                dist = 1 - cosine_sim\n            else:\n                dist = np.linalg.norm(x - x_train, ord=2)\n            dists.append(dist)\n        paired = list(zip(dists, range(len(X_train))))\n        paired.sort()\n        top_k = paired[:k]\n        indices = [idx for (d, idx) in top_k]\n        labels = y_train[indices]\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        candidates = [label for (label, count) in counts.items() if count == max_count]\n        candidates.sort()\n        predicted_label = candidates[0]\n        predicted_labels.append(predicted_label)\n    return np.array(predicted_labels)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_samples = X.shape[0]\n    m_samples = X_test.shape[0]\n    predicted = []\n    for x_test in X_test:\n        if metric == 'euclidean':\n            distances = np.linalg.norm(x_test - X, axis=0)\n        elif metric == 'manhattan':\n            x_test_reshaped = x_test.reshape(1, -1)\n            manhattan_distances = np.sum(np.abs(x_test_reshaped - X), axis=1)\n            distances = manhattan_distances\n        elif metric == 'cosine':\n            dot = np.dot(x_test, X)\n            norm_x = np.linalg.norm(x_test, axis=0)\n            norm_X = np.linalg.norm(X, axis=0)\n            denominator = norm_x * norm_X + 1e-12\n            distances = 1 - dot / denominator\n        else:\n            raise ValueError('Invalid metric')\n        indices = np.arange(n_samples)\n        dist_indices = sorted(zip(distances, indices), key=lambda x: x[0])\n        n = min(k, n_samples)\n        top_k = dist_indices[:n]\n        labels = [y[i] for (i, d) in top_k]\n        counts = defaultdict(int)\n        for label in labels:\n            counts[label] += 1\n        if not counts:\n            predicted_label = None\n        else:\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            if len(candidates) == 1:\n                predicted_label = candidates[0]\n            else:\n                predicted_label = min(candidates)\n        predicted.append(predicted_label)\n    return predicted"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    output1 = np.dot(state, weights['W1']) + weights['b1']\n    output1 = np.relu(output1)\n    output2 = np.dot(output1, weights['W2']) + weights['b2']\n    output2 = np.relu(output2)\n    action_before_tanh = np.dot(output2, weights['W3']) + weights['b3']\n    action = np.tanh(action_before_tanh)\n    action = [round(x, 4) for x in action]\n    return action"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if isinstance(x, list) else x\n    y = np.array(y) if isinstance(y, list) else y\n    if x.size != y.size:\n        return -1\n    if x.size == 0:\n        return 0.0\n    diffs = x != y\n    sum_diffs = np.sum(diffs)\n    distance = sum_diffs / x.size\n    return round(distance, 4)"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.utils import shuffle\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    if len(set(y_train)) == 1:\n        unique_label = min(y_train)\n        return [unique_label] * len(X_test)\n    original_labels = sorted(list(set(y_train)))\n    label_map = {v: i for (i, v) in enumerate(original_labels)}\n    n_classes = len(original_labels)\n    X_train = np.array([np.append(x, 1) for x in X_train])\n    X_test = np.array([np.append(x, 1) for x in X_test])\n    n_features = X_train.shape[1] - 1\n    weights = np.random.randn(n_features + 1, 1) * 0.01\n    for epoch in range(epochs):\n        shuffled_indices = shuffle(range(len(X_train)))\n        X_batch = X_train[shuffled_indices]\n        y_batch = y_train[shuffled_indices]\n        for batch_idx in range(0, len(X_train), batch_size):\n            X_batch = X_batch[batch_idx:batch_idx + batch_size]\n            y_batch = y_batch[batch_idx:batch_idx + batch_size]\n            a = np.sigmoid(weights.dot(X_batch))\n            gradient = (a - y_batch[:, np.newaxis]) * X_batch\n            weights -= learning_rate * gradient\n            loss = -np.mean(np.log(a + 1e-15) - np.log(1 - a + 1e-15) * (1 - y_batch))\n            if epoch % 100 == 0:\n                print(f'Epoch {epoch}, Loss: {loss}')\n    a_pred = np.sigmoid(weights.dot(X_test))\n    y_pred = np.zeros_like(a_pred)\n    y_pred[a_pred >= 0.5] = label_map[1]\n    y_pred[a_pred < 0.5] = label_map[0]\n    return y_pred.tolist()"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (isinstance(n_dims, int) and isinstance(num_particles, int) and isinstance(num_iterations, int)):\n        return -1\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    x = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    v = np.zeros_like(x)\n    p_best = x.copy()\n    f_val = np.sum(x ** 2)\n    g_best = f_val\n    current_min = f_val\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, size=num_particles)\n        r2 = rng.uniform(0, 1, size=num_particles)\n        v_new = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n        x_new = x + v_new\n        x_new = np.clip(x_new, -1, 1)\n        f_new = np.sum(x_new ** 2)\n        for i in range(num_particles):\n            if f_new[i] < p_best[i]:\n                p_best[i] = x_new[i]\n        g_best = np.min(p_best)\n        current_min = g_best\n        x = x_new\n        v = v_new\n    return round(current_min, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0:\n        effective_k = len(y_train)\n    else:\n        effective_k = min(k, len(y_train))\n    X_train_np = np.array(X_train)\n    predictions = []\n    for test_sample in X_test:\n        test_sample_np = np.array(test_sample)\n        distances = np.linalg.norm(X_train_np - test_sample_np, axis=1)\n        dist_indices = list(zip(distances, np.arange(len(X_train))))\n        sorted_pairs = sorted(dist_indices, key=lambda x: x[0])\n        nearest = sorted_pairs[:effective_k]\n        nearest_indices = [pair[1] for pair in nearest]\n        targets = [y_train[i] for i in nearest_indices]\n        if task == 'classification':\n            counts = Counter(targets)\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            candidates.sort()\n            prediction = candidates[0]\n        else:\n            avg = np.mean(targets)\n            prediction = round(avg, 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def build_tree(samples, labels, max_depth, current_depth):\n        if np.unique(labels).size == 1:\n            return {'majority_label': labels[0]}\n        if max_depth is not None and current_depth >= max_depth:\n            return {'majority_label': mode(labels)}\n        (best_feature, best_threshold) = find_best_split(samples, labels)\n        (left_samples, left_labels, right_samples, right_labels) = split(samples, labels, best_feature, best_threshold)\n        if len(left_samples) == 0 or len(right_samples) == 0:\n            return {'majority_label': mode(labels)}\n        left_child = build_tree(left_samples, left_labels, max_depth, current_depth + 1)\n        right_child = build_tree(right_samples, right_labels, max_depth, current_depth + 1)\n        majority_label = mode(labels)\n        return {'feature': best_feature, 'threshold': best_threshold, 'left': left_child, 'right': right_child, 'majority_label': majority_label}\n\n    def find_best_split(samples, labels):\n        n_samples = len(samples)\n        if n_samples == 0:\n            return (None, None)\n        n_features = len(samples[0])\n        best_gain = -1\n        best_feature = None\n        best_threshold = None\n        for feature in range(n_features):\n            feature_values = samples[:, feature]\n            sorted_values = np.sort(feature_values)\n            unique_values = np.unique(sorted_values)\n            midpoints = []\n            for i in range(len(unique_values) - 1):\n                mid = (unique_values[i] + unique_values[i + 1]) / 2\n                midpoints.append(mid)\n            for midpoint in midpoints:\n                (left_samples, left_labels, right_samples, right_labels) = split(samples, labels, feature, midpoint)\n                left_impurity = 0 if np.unique(left_labels).size == 1 else 1\n                right_impurity = 0 if np.unique(right_labels).size == 1 else 1\n                gain = 1 - (left_impurity * len(left_samples) + right_impurity * len(right_samples)) / n_samples\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = midpoint\n        return (best_feature, best_threshold)\n\n    def split(samples, labels, feature, threshold):\n        feature_values = samples[:, feature]\n        split_index = np.where(feature_values <= threshold)[0]\n        left_samples = samples[:, :split_index + 1]\n        left_labels = labels[:split_index + 1]\n        right_samples = samples[:, split_index + 1:]\n        right_labels = labels[split_index + 1:]\n        return (left_samples, left_labels, right_samples, right_labels)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = len(y)\n    class_counts = np.unique(y, return_counts=True)[1]\n    sum_p_sq = sum(((count / n_total) ** 2 for count in class_counts))\n    G_whole = 1 - sum_p_sq\n    best_g = G_whole\n    best_feature = -1\n    best_threshold = None\n    for j in range(n_features):\n        unique_v = np.unique(X[:, j])\n        for v in unique_v:\n            mask_left = X[:, j] <= v\n            left = X[mask_left]\n            right = X[~mask_left]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            class_counts_left = np.unique(left[:, 0], return_counts=True)[1]\n            sum_p_sq_left = sum(((count / len(left)) ** 2 for count in class_counts_left))\n            G_left = 1 - sum_p_sq_left\n            class_counts_right = np.unique(right[:, 0], return_counts=True)[1]\n            sum_p_sq_right = sum(((count / len(right)) ** 2 for count in class_counts_right))\n            G_right = 1 - sum_p_sq_right\n            n_left = len(left)\n            n_right = len(right)\n            g_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if g_split < best_g:\n                best_g = g_split\n                best_feature = j\n                best_threshold = v\n            elif g_split == best_g:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = v\n                elif j == best_feature:\n                    if v < best_threshold:\n                        best_threshold = v\n    if best_feature == -1:\n        return (-1, None, round(G_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_g, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n\n        def d(x, y):\n            return -1\n        return d\n\n    def d(x, y):\n        try:\n            x_arr = np.asarray(x)\n            y_arr = np.asarray(y)\n        except:\n            return -1\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return -1\n        if len(x_arr) != len(y_arr):\n            return -1\n        if len(x_arr) == 0 or len(y_arr) == 0:\n            return -1\n        for element in x_arr:\n            if not isinstance(element, (int, float)):\n                return -1\n        for element in y_arr:\n            if not isinstance(element, (int, float)):\n                return -1\n        if name == 'cosine':\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            if x_norm == 0 or y_norm == 0:\n                return -1\n        if name == 'euclidean':\n            diff = x_arr - y_arr\n            distance = np.sqrt(np.sum(diff ** 2))\n        elif name == 'manhattan':\n            distance = np.sum(np.abs(x_arr - y_arr))\n        elif name == 'chebyshev':\n            distance = np.max(np.abs(x_arr - y_arr))\n        elif name == 'cosine':\n            dot_product = np.dot(x_arr, y_arr)\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            distance = 1 - dot_product / (x_norm * y_norm)\n        else:\n            return -1\n        distance = round(distance, 4)\n        return distance\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    is_continuous = False\n    action_dim = 0\n    if hasattr(env.action_space, 'spaces'):\n        action_dim = len(env.action_space.spaces)\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'shape'):\n                is_continuous = True\n                break\n    elif hasattr(env.action_space, 'shape'):\n        is_continuous = True\n    else:\n        action_dim = 1\n    if is_continuous:\n        n_actions_per_dim = [np.inf] * action_dim\n        action_ids = None\n    elif hasattr(env.action_space, 'spaces'):\n        possible_actions = []\n        for sub_space in env.action_space.spaces:\n            possible_actions.append(list(range(sub_space.n)))\n        action_ids = list(product(*possible_actions))\n        n_actions_per_dim = [sub_space.n for sub_space in env.action_space.spaces]\n    else:\n        n_actions = env.action_space.n\n        n_actions_per_dim = [n_actions]\n        action_ids = list(range(n_actions))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    if k == 0:\n        return []\n    medoid_indices = set(range(k))\n    current_medoids = [X[i] for i in medoid_indices]\n    current_cost = 0\n    for sample in X:\n        min_dist = float('inf')\n        min_medoid_idx = -1\n        for (medoid_idx, medoid) in enumerate(current_medoids):\n            dist = np.linalg.norm(medoid - sample)\n            if dist < min_dist:\n                min_dist = dist\n                min_medoid_idx = medoid_idx\n        current_cost += min_dist\n    while True:\n        best_delta = 0\n        best_swap = None\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoid_indices:\n                    new_medoids = current_medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_cost = 0\n                    for sample in X:\n                        min_dist = float('inf')\n                        min_medoid_idx = -1\n                        for (medoid_idx, medoid) in enumerate(new_medoids):\n                            dist = np.linalg.norm(medoid - sample)\n                            if dist < min_dist:\n                                min_dist = dist\n                                min_medoid_idx = medoid_idx\n                        new_cost += min_dist\n                    delta = new_cost - current_cost\n                    if delta < 0:\n                        if delta > best_delta:\n                            best_delta = delta\n                            best_swap = (i, j)\n        if best_swap is not None:\n            (i, j) = best_swap\n            new_medoids = current_medoids.copy()\n            new_medoids[i] = X[j]\n            current_medoids = new_medoids\n            medoid_indices.discard(i)\n            medoid_indices.add(j)\n            current_cost = new_cost\n        else:\n            break\n    labels = []\n    for sample in X:\n        min_dist = float('inf')\n        min_label = 0\n        for (label, medoid) in enumerate(current_medoids):\n            dist = np.linalg.norm(medoid - sample)\n            if dist < min_dist:\n                min_dist = dist\n                min_label = label\n        labels.append(min_label)\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if not (isinstance(x_train, (np.ndarray, list)) and isinstance(y_train, (np.ndarray, list)) and isinstance(x_test, (np.ndarray, list))):\n        return -1\n    m_train = x_train.shape[0] if isinstance(x_train, np.ndarray) else len(x_train)\n    m_test = x_test.shape[0] if isinstance(x_test, np.ndarray) else len(x_test)\n    if m_train != m_test:\n        return -1\n    if isinstance(x_train, np.ndarray) and x_train.ndim != 2:\n        return -1\n    if isinstance(x_test, np.ndarray) and x_test.ndim != 2:\n        return -1\n    k_train = x_train.shape[1] if isinstance(x_train, np.ndarray) else len(x_train[0])\n    k_test = x_test.shape[1] if isinstance(x_test, np.ndarray) else len(x_test[0])\n    if k_train == 0 or k_test == 0:\n        return -1\n    if n_iterations < 1:\n        return -1\n    expanded_features_train = []\n    for feature in x_train:\n        poly = [np.ones(degree + 1)]\n        for d in range(degree):\n            poly.append(feature[d])\n        expanded_features_train.append(poly)\n    expanded_features_train = np.array(expanded_features_train)\n    feature_matrix = np.hstack((expanded_features_train, np.ones((m_train, 1))))\n    if isinstance(x_test, np.ndarray) and x_test.shape[1] != feature_matrix.shape[1]:\n        return -1\n    if not isinstance(x_test, np.ndarray) and len(x_test[0]) != feature_matrix.shape[1]:\n        return -1\n    X = feature_matrix[:, :-1]\n    X_mean = np.mean(X, axis=0)\n    X_std = np.std(X, axis=0)\n    standardized_X = (X - X_mean) / X_std\n    feature_matrix = np.hstack((standardized_X, np.ones((m_train, 1))))\n    n_features = feature_matrix.shape[1]\n    weights = np.zeros(n_features, 1)\n    for _ in range(n_iterations):\n        y_pred = feature_matrix @ weights\n        errors = y_train - y_pred\n        y_pred_mean = np.mean(y_pred)\n        y_mean = np.mean(y_train)\n        grad_bias = y_pred_mean - y_mean\n        X = feature_matrix[:, :-1]\n        grad_non_bias = errors @ X / m_train\n        sum_w2 = np.sum(weights ** 2)\n        sum_w1 = np.sum(np.abs(weights[:-1]))\n        penalty = (1 - l1_ratio) * sum_w2 + l1_ratio * sum_w1\n        grad_non_bias_with_penalty = grad_non_bias + (1 - l1_ratio) * weights + l1_ratio * np.sign(weights)\n        grad = np.concatenate([grad_non_bias_with_penalty, np.array([grad_bias])])\n        weights -= learning_rate * grad\n    y_pred_test = feature_matrix @ weights\n    predictions = np.round(y_pred_test, 4).tolist()\n    return predictions"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    z = -actual * predicted\n    sigmoid_z = np.sigmoid(z)\n    grad = actual * sigmoid_z\n    sigmoid_p = np.sigmoid(predicted)\n    hessian = sigmoid_p * (1 - sigmoid_p)\n    prob = sigmoid_p\n    grad_rounded = np.round(grad, 6)\n    hessian_rounded = np.round(hessian, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    prob_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, prob_list)"}
{"task_id": 221, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    log_diff = math.log(1 + a) - math.log(1 + p)\n    squared = np.square(log_diff)\n    return squared\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    if a.shape != p.shape:\n        return -1\n    if np.any(a < 0) or np.any(p < 0):\n        return -1\n    squared_errors = squared_log_error(a, p)\n    mean = np.mean(squared_errors)\n    return round(mean, 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if np.isscalar(z):\n        z = np.array([z])\n    else:\n        z = np.asarray(z)\n    e_z = math.exp(z)\n    sigmoid_z = 1 - 1 / (1 + e_z)\n    if z.ndim == 0:\n        return round(sigmoid_z[0], 4)\n    else:\n        return np.round(sigmoid_z, 4).tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(elem, a) for elem in z]\n    elif z >= 0:\n        return z\n    else:\n        return a * z"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.randn(*shape)\n    (U, sigma, V) = np.svd(A)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = V.T\n    Q_reshaped = Q.T.reshape(shape)\n    result = Q_reshaped * scale\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    sum_state = sum(state)\n    z1 = sum_state\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = [1 / 3, 1 / 3, 1 / 3]\n    state_value = 4 * z3\n    return (round(action_probs, 4), round(state_value, 4))"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    W1 = params['W1']\n    b1 = params['b1']\n    W2 = params['W2']\n    b2 = params['b2']\n    W3 = params['W3']\n    b3 = params['b3']\n    Wa = params['Wa']\n    ba = params['ba']\n    Wc = params['Wc']\n    bc = params['bc']\n    state = np.array(state)\n    z1 = np.dot(state, W1) + b1\n    a1 = np.relu(z1)\n    z2 = np.dot(a1, W2) + b2\n    a2 = np.relu(z2)\n    z3 = np.dot(a2, W3) + b3\n    a3 = np.relu(z3)\n    action_scores = np.dot(a3, Wa) + ba\n    probabilities = np.softmax(action_scores)\n    value = np.dot(a3, Wc) + bc\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n    probabilities_list = probabilities.tolist()\n    value_list = value\n    return (probabilities_list, value_list)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w) if isinstance(w, list) else w\n    norm_w = np.linalg.norm(w, ord=2)\n    sum_squares = np.sum(w ** 2)\n    penalty = alpha * (l1_ratio * norm_w + (1 - l1_ratio) * 0.5 * sum_squares)\n    if not gradient:\n        return round(penalty, 4)\n    else:\n        sign_w = np.sign(w)\n        gradient = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        gradient = np.round(gradient, 4)\n        return gradient.tolist()"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    m = X_train.shape[0]\n    n = X_train.shape[1]\n    weights = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_j = -1\n        for j in range(n):\n            sorted_samples = sorted(zip(X_train[:, j], y_train, weights), key=lambda x: x[0])\n            sorted_weights = [s[2] for s in sorted_samples]\n            cumulative = np.cumsum(sorted_weights)\n            total_weight = sum(weights)\n            half = total_weight / 2\n            split_index = np.argmax(cumulative <= half)\n            error = 0.0\n            for i in range(split_index):\n                if sorted_samples[i][1] == 1:\n                    error += sorted_samples[i][2]\n            for i in range(split_index, len(sorted_samples)):\n                if sorted_samples[i][1] == -1:\n                    error += sorted_samples[i][2]\n            if error < min_error:\n                min_error = error\n                best_j = j\n        if best_j == -1:\n            continue\n        sorted_samples = sorted(zip(X_train[:, best_j], y_train, weights), key=lambda x: x[0])\n        sorted_weights = [s[2] for s in sorted_samples]\n        cumulative = np.cumsum(sorted_weights)\n        total_weight = sum(weights)\n        half = total_weight / 2\n        split_index = np.argmax(cumulative <= half)\n        threshold = sorted_samples[split_index][0]\n        alpha_t = 0.5 * np.log((1 - min_error) / min_error)\n        stumps.append((alpha_t, threshold))\n        new_weights = []\n        for i in range(m):\n            if sorted_samples[i][1] == 1:\n                if i < split_index:\n                    new_weights.append(sorted_samples[i][2] * min_error)\n                else:\n                    new_weights.append(sorted_samples[i][2] * (1 - min_error))\n            elif i < split_index:\n                new_weights.append(sorted_samples[i][2] * min_error)\n            else:\n                new_weights.append(sorted_samples[i][2] * (1 - min_error))\n        weights = np.array(new_weights)\n    predicted_labels = []\n    for x in X_test:\n        total = 0.0\n        for (alpha, threshold) in stumps:\n            if x >= threshold:\n                total += alpha\n            else:\n                total -= alpha\n        if total > 0:\n            predicted_labels.append(1)\n        else:\n            predicted_labels.append(-1)\n    return predicted_labels"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of unique vertex identifiers. The order in this list must be preserved.\n    E : List[Tuple[Any, Any]]\n        A list of edges, where each edge is a tuple (u, v) representing an undirected edge.\n\n    Returns\n    -------\n    List[List[Any]]\n        The adjacency list where each G[i] contains all vertices adjacent to V[i], sorted by their appearance in V.\n    \"\"\"\n    adj = {v: [] for v in V}\n    processed_edges = set()\n    for edge in E:\n        (u, v) = edge\n        edge_frozen = frozenset((u, v))\n        if edge_frozen not in processed_edges:\n            processed_edges.add(edge_frozen)\n            adj[u].append(v)\n            adj[v].append(u)\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    for u in V:\n        adj[u].sort(key=lambda x: vertex_to_index[x])\n    result = []\n    for u in V:\n        result.append(adj[u])\n    return result"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport bisect\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if not feature or not target:\n        return (None, 0.0)\n    if isinstance(feature, np.ndarray):\n        feature = feature.tolist()\n    if isinstance(target, np.ndarray):\n        target = target.tolist()\n    combined = list(zip(feature, target))\n    combined.sort(key=lambda x: x[0])\n    sorted_features = [x[0] for x in combined]\n    sorted_target = [x[1] for x in combined]\n    if len(set(sorted_features)) == 1:\n        return (None, 0.0)\n    unique_features = []\n    prev = None\n    for f in sorted_features:\n        if f != prev:\n            unique_features.append(f)\n            prev = f\n    if len(unique_features) < 2:\n        return (None, 0.0)\n    midpoints = []\n    for i in range(len(unique_features) - 1):\n        mid = (unique_features[i] + unique_features[i + 1]) / 2\n        midpoints.append(mid)\n\n    def compute_entropy(subset):\n        if not subset:\n            return 0.0\n        counts = Counter(subset)\n        n = len(subset)\n        entropy = 0.0\n        for count in counts.values():\n            prob = count / n\n            entropy -= prob * math.log2(prob)\n        return entropy\n    n = len(sorted_target)\n    max_ig = -1\n    best_t = None\n    for t in midpoints:\n        split_index = bisect.bisect_left(sorted_features, t)\n        L = sorted_target[:split_index]\n        R = sorted_target[split_index:]\n        H_parent = compute_entropy(sorted_target)\n        H_L = compute_entropy(L)\n        H_R = compute_entropy(R)\n        ig = H_parent - len(L) / n * H_L - len(R) / n * H_R\n        if ig > max_ig:\n            max_ig = ig\n            best_t = t\n        elif ig == max_ig:\n            if t < best_t:\n                best_t = t\n    if max_ig <= 0:\n        return (None, 0.0)\n    else:\n        rounded_t = round(best_t, 4)\n        rounded_ig = round(max_ig, 4)\n        return (rounded_t, rounded_ig)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    for (key, value) in globals().items():\n        if key == name and callable(value):\n            return value\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n\n    def compare_leaf(a, b):\n        if type(a) != type(b):\n            return False\n        if isinstance(a, np.ndarray):\n            return np.allclose(a, b, atol=1e-08)\n        else:\n            return a == b\n\n    def compare_node(a, b):\n        if a.feature != b.feature:\n            return False\n        if abs(a.threshold - b.threshold) > 1e-08:\n            return False\n        return compare_trees(a.left, b.left) and compare_trees(a.right, b.right)\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return compare_leaf(tree_a.value, tree_b.value)\n    else:\n        if tree_a.feature != tree_b.feature:\n            return False\n        if abs(tree_a.threshold - tree_b.threshold) > 1e-08:\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    if parent1_array.shape != parent2_array.shape:\n        return -1\n    num_columns = parent1_array.shape[1]\n    child1 = np.column_stack((parent1_array[:, :cutoff], parent2_array[:, cutoff:])).tolist()\n    child2 = np.column_stack((parent2_array[:, :cutoff], parent1_array[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict, Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        return float('-inf')\n    ngrams_counter = defaultdict(int)\n    n_minus_1_grams_counter = defaultdict(int)\n    total_tokens = 0\n    if N == 1:\n        total_tokens = sum((len(sentence.split()) for sentence in corpus))\n    else:\n        for sentence in corpus:\n            tokens = sentence.split()\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n            for i in range(len(padded_tokens) - (N - 1) + 1):\n                gram = ' '.join(padded_tokens[i:i + (N - 1)])\n                n_minus_1_grams_counter[gram] += 1\n            for i in range(len(padded_tokens) - N + 1):\n                gram = ' '.join(padded_tokens[i:i + N])\n                ngrams_counter[gram] += 1\n    query_tokens = query.split()\n    if N > 1:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    if len(padded_query) < N:\n        return float('-inf')\n    total_log = 0.0\n    for i in range(len(padded_query) - N + 1):\n        current_gram = ' '.join(padded_query[i:i + N])\n        if current_gram not in ngrams_counter:\n            return float('-inf')\n        if N > 1:\n            prefix = ' '.join(padded_query[i:i + (N - 1)])\n            if prefix not in n_minus_1_grams_counter:\n                return float('-inf')\n        if N == 1:\n            prob = ngrams_counter[current_gram] / total_tokens\n        else:\n            prob = ngrams_counter[current_gram] / n_minus_1_grams_counter[prefix]\n        total_log += math.log(prob)\n    return round(total_log, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    if n == 0:\n        return []\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                W[i][j] = 0\n            else:\n                dx = X[i] - X[j]\n                distance = np.linalg.norm(dx)\n                W[i][j] = 1 / (1 + distance)\n    D = np.zeros_like(W)\n    for i in range(n):\n        D[i][i] = np.sum(W[i])\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    eigenvalues.sort()\n    selected_eigenvalues = eigenvalues[:k]\n    selected_eigenvectors = eigenvectors[:, :k]\n    E = selected_eigenvectors.T\n    centroids = E[:k].copy()\n    assignments = None\n    for iter in range(100):\n        distances = np.zeros((n, k))\n        for i in range(n):\n            for j in range(k):\n                distances[i][j] = np.linalg.norm(E[i] - centroids[j])\n        current_assignments = np.argmin(distances, axis=1)\n        empty_indices = np.where(current_assignments == -1)[0]\n        if len(empty_indices) > 0:\n            for idx in empty_indices:\n                centroids[idx] = E[np.random.randint(n)]\n            distances = np.zeros((n, k))\n            for i in range(n):\n                for j in range(k):\n                    distances[i][j] = np.linalg.norm(E[i] - centroids[j])\n            current_assignments = np.argmin(distances, axis=1)\n        if assignments is not None:\n            if np.array_equal(current_assignments, assignments):\n                break\n        else:\n            assignments = current_assignments.copy()\n        for j in range(k):\n            mask = current_assignments == j\n            centroids[j] = np.mean(E[mask], axis=0)\n    else:\n        pass\n    return current_assignments.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_index = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_index]\n    (curr_mine, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    top_border = '------------------------- DEBUG -------------------------'\n    bottom_border = '----------------------- END DEBUG -----------------------'\n    line2 = f'Mine (prev) [{prev_label}]: {prev_mine}'\n    line3 = f'Theirs (prev) [{prev_label}]: {prev_gold}'\n    line4 = f'Mine [{curr_label}]: {curr_mine}'\n    line5 = f'Theirs [{curr_label}]: {curr_gold}{warn_str}'\n    lines = [top_border, line2, line3, line4, line5, bottom_border]\n    return '\\n'.join(lines)"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        intercept = np.ones(X.shape[0], dtype=np.float64)\n        X = np.hstack((intercept.reshape(-1, 1), X))\n    size_b = X.shape[1]\n    if V is None:\n        V_inv = np.identity(size_b)\n    elif isinstance(V, (int, float)):\n        V_inv = np.identity(size_b) * V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.identity(size_b)\n        for i in range(len(V)):\n            V_inv[i, i] = V[i]\n    else:\n        if V.shape != (size_b, size_b):\n            raise ValueError('V must be a square matrix of size (M+1) if fit_intercept is True, else (M, M).')\n        V_inv = V\n    XtX = X.T @ X\n    sum_matrix = V_inv + XtX\n    try:\n        \u03a3_b = np.linalg.inv(sum_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError('sum_matrix is not invertible. This could be due to a degenerate design matrix.')\n    prior_mean = V_inv @ mu\n    xty = X.T @ y\n    sum_terms = prior_mean + xty\n    mu_b = \u03a3_b @ sum_terms\n    mu_b_rounded = [round(coeff, 4) for coeff in mu_b]\n    return mu_b_rounded"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    f_points = 700 * (10 ** (mel_points / 2595) - 1)\n    filterbank = []\n    for i in range(n_filters):\n        if i == 0:\n            f_i_center = f_points[0]\n            f_i_low = 0\n            f_i_high = f_points[1]\n        elif i == n_filters - 1:\n            f_i_center = f_points[-1]\n            f_i_low = f_points[-2]\n            f_i_high = fs / 2\n        else:\n            f_i_center = f_points[i]\n            f_i_low = f_points[i - 1]\n            f_i_high = f_points[i + 1]\n        row = []\n        for k in range(N // 2 + 1):\n            k_center = k * fs / N\n            if k_center < f_i_low or k_center > f_i_high:\n                weight = 0.0\n            else:\n                left_dist = f_i_center - f_i_low\n                right_dist = f_i_high - f_i_center\n                left_slope = left_dist / (f_i_center - k_center)\n                right_slope = right_dist / (k_center - f_i_center)\n                left_slope = max(left_slope, 0)\n                right_slope = max(right_slope, 0)\n                weight = min(left_slope, right_slope)\n            row.append(weight)\n        if normalize:\n            total_width = f_i_high - f_i_low\n            if total_width == 0:\n                normalized_row = [0.0 for _ in row]\n            else:\n                scaling = 2.0 / total_width\n                normalized_row = [w * scaling for w in row]\n        else:\n            normalized_row = row\n        filterbank.append(normalized_row)\n    rounded_filterbank = []\n    for row in filterbank:\n        rounded_row = [round(w, 4) for w in row]\n        rounded_filterbank.append(rounded_row)\n    return rounded_filterbank"}
{"task_id": 312, "completion_id": 0, "solution": "import math\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    window = []\n    for n in range(window_len):\n        angle1 = 2 * math.pi * n / N\n        angle2 = 4 * math.pi * n / N\n        angle3 = 6 * math.pi * n / N\n        cos1 = math.cos(angle1)\n        cos2 = math.cos(angle2)\n        cos3 = math.cos(angle3)\n        value = a0 - a1 * cos1 + a2 * cos2 - a3 * cos3\n        window.append(round(value, 4))\n    return window"}
{"task_id": 313, "completion_id": 0, "solution": "import math\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        if x <= 1:\n            return 0.0\n        elif x <= 6:\n            return sum((1.0 / k for k in range(1, x)))\n        else:\n            ln_x = math.log(x)\n            term1 = ln_x\n            term2 = -1.0 / (2 * x)\n            term3 = -1.0 / (12 * x ** 2)\n            term4 = 1.0 / (120 * x ** 4)\n            term5 = -1.0 / (252 * x ** 6)\n            return term1 + term2 + term3 + term4 + term5\n    sum_gamma = sum(gamma[d])\n    gamma_val = gamma[d][t]\n    psi_g = digamma(gamma_val)\n    psi_sum = digamma(sum_gamma)\n    result = psi_g - psi_sum\n    return round(result, 4)"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\"\"\"\n    n_samples = y_true.shape[0]\n    n_estimators = predictions.shape[1]\n    total_error = 0.0\n    count = 0\n    for i in range(n_samples):\n        oob_preds = []\n        for j in range(n_estimators):\n            if oob_mask[i][j]:\n                oob_preds.append(predictions[i][j])\n        if oob_preds:\n            avg_pred = np.mean(oob_preds)\n            error = (avg_pred - y_true[i]) ** 2\n            total_error += error\n            count += 1\n    if count == 0:\n        return -1\n    else:\n        mean_error = total_error / count\n        return round(mean_error, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\"\"\"\n    if not transactions:\n        return {'support': 0, 'children': {}}\n    frequency = Counter()\n    for trans in transactions:\n        for item in trans:\n            frequency[item] += 1\n    items = [item for item in frequency if frequency[item] >= min_support]\n    if not items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(items, key=lambda x: (-frequency[x], x))\n    root = {'support': 0, 'children': {}}\n    for trans in transactions:\n        unique_items = list(set(trans))\n        filtered = [item for item in unique_items if frequency[item] >= min_support]\n        sorted_trans = sorted(filtered, key=lambda x: (-frequency[x], x))\n        current = root\n        for item in sorted_trans:\n            if item in current['children']:\n                current = current['children'][item]\n                current['support'] += 1\n            else:\n                new_node = {'support': 1, 'children': {}}\n                current['children'][item] = new_node\n                current = new_node\n                current['support'] += 1\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if not X:\n        return []\n    if Y is None:\n        Y = X\n    if isinstance(X, np.ndarray):\n        cols_X = X.shape[1]\n    else:\n        cols_X = len(X[0]) if X else 0\n    if isinstance(Y, np.ndarray):\n        cols_Y = Y.shape[1]\n    else:\n        cols_Y = len(Y[0]) if Y else 0\n    if cols_X != cols_Y:\n        return -1\n    X_arr = np.array(X) if not isinstance(X, np.ndarray) else X\n    Y_arr = np.array(Y) if not isinstance(Y, np.ndarray) else Y\n    K = X_arr.dot(Y_arr) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to **8** decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    if np.all(grad == 0):\n        new_theta = param\n    else:\n        new_theta = param - lr * m_hat / np.sqrt(v_hat + eps)\n    new_m = m_t\n    new_v = v_t\n    new_theta_rounded = np.round(new_theta, 8).tolist()\n    new_m_rounded = np.round(new_m, 8).tolist()\n    new_v_rounded = np.round(new_v, 8).tolist()\n    return (new_theta_rounded, new_m_rounded, new_v_rounded)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = len(theta_samples)\n    K = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)\n    top_indices = sorted_indices[-K:]\n    top_samples = theta_samples[top_indices]\n    mean = np.mean(top_samples, axis=0)\n    var = np.var(top_samples, axis=0)\n    rounded_mean = np.round(mean, 4)\n    rounded_var = np.round(var, 4)\n    return (rounded_mean.tolist(), rounded_var.tolist())"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    if len(counts) == 1:\n        return 0.0\n    total = len(labels)\n    entropy_sum = 0.0\n    for p in counts.values():\n        entropy_sum += p * math.log2(p)\n    entropy = -entropy_sum\n    return round(entropy, 5)"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_data = data - np.mean(data, axis=1)\n    n_components = min(n_components, data.shape[1])\n    if solver == 'svd':\n        svd = np.linalg.svd(mean_data)\n        directions = svd[1][:, :n_components]\n        singular_values = svd[0][:n_components]\n        projection_matrix = directions / singular_values\n        components = sorted(zip(singular_values, directions), key=lambda x: -x[0])\n        sorted_directions = [d for (_, d) in components]\n        for (i, direction) in enumerate(sorted_directions):\n            if np.any(direction < 0):\n                first_non_zero = np.argmax(direction)\n                if direction[first_non_zero] < 0:\n                    direction *= -1\n                    projection_matrix[:, i] *= -1\n        scores = mean_data @ projection_matrix\n    else:\n        cov = np.linalg.covariance(mean_data, rowvar=False, ddof=1)\n        eig = np.linalg.eigh(cov)\n        directions = eig[1][:, :n_components]\n        eigenvalues = eig[0][:n_components]\n        projection_matrix = directions / eigenvalues\n        components = sorted(zip(eigenvalues, directions), key=lambda x: -x[0])\n        sorted_directions = [d for (_, d) in components]\n        for (i, direction) in enumerate(sorted_directions):\n            if np.any(direction < 0):\n                first_non_zero = np.argmax(direction)\n                if direction[first_non_zero] < 0:\n                    direction *= -1\n                    projection_matrix[:, i] *= -1\n        scores = mean_data @ projection_matrix\n    if solver == 'svd':\n        total_variance = np.sum(singular_values)\n        ratios = []\n        cumulative = 0.0\n        for i in range(n_components):\n            cumulative += singular_values[i]\n            ratio = cumulative / total_variance\n            ratios.append(round(ratio, 4))\n    else:\n        total_variance = np.sum(eigenvalues)\n        ratios = []\n        cumulative = 0.0\n        for i in range(n_components):\n            cumulative += eigenvalues[i]\n            ratio = cumulative / total_variance\n            ratios.append(round(ratio, 4))\n    rounded_scores = np.round(scores, 4)\n    scores_list = [list(row) for row in rounded_scores]\n    return (scores_list, ratios)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        prob_list = leaf.value\n        max_prob = max(prob_list)\n        return prob_list.index(max_prob)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 0:\n        return []\n    if K == 1:\n        centroids = np.mean(data, axis=0)\n    else:\n        centroids = data[:K]\n    for _ in range(max_iters):\n        distances = np.array([np.linalg.norm(sample - c) for (sample, c) in zip(data, centroids)])\n        closest_indices = np.argmin(distances, axis=1)\n        new_centroids = []\n        for i in range(K):\n            mask = closest_indices == i\n            samples = data[mask]\n            if len(samples) == 0:\n                new_c = centroids[i]\n            else:\n                new_c = np.mean(samples, axis=0)\n            new_centroids.append(new_c)\n        if np.max(np.abs(centroids - new_centroids)) < 1e-06:\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded = [[round(x, 4) for x in c] for c in sorted_centroids]\n    return rounded"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=np.float64)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_data = data / row_sums\n    rounded_data = np.round(normalized_data, 4)\n    result = rounded_data.tolist()\n    return result"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_space(space, is_tuple_or_dict):\n        if is_tuple_or_dict:\n            if not isinstance(space, (Tuple, Dict)):\n                return False\n            if isinstance(space, Tuple):\n                subs = space.spaces\n            else:\n                subs = space.spaces.values()\n            for s in subs:\n                if not isinstance(s, Box):\n                    return False\n            return True\n        else:\n            return isinstance(space, Box)\n    cont_action = is_continuous_space(env.action_space, tuple_action)\n    cont_obs = is_continuous_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        if regression:\n            return np.array([], dtype=np.float64)\n        else:\n            return np.array([], dtype=np.int64)\n    update_shape = updates[0].shape\n    n_samples = update_shape[0]\n    n_classes = update_shape[1] if not regression else 0\n    running_pred = np.zeros_like(updates[0])\n    summed_updates = np.sum(updates, axis=0)\n    running_pred = -learning_rate * summed_updates\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1)\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    if isinstance(y, list):\n        y = np.array(y)\n    unique_y = np.unique(y)\n    counts = {}\n    for c in unique_y:\n        counts[c] = np.count_nonzero(y == c)\n    N = len(y)\n    sum_p_sq = 0.0\n    for c in counts:\n        p = counts[c] / N\n        sum_p_sq += p ** 2\n    gini_impurity = 1 - sum_p_sq\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    m = X.shape[0]\n    if m != y.shape[0] or m == 0:\n        return -1\n    n = X.shape[1]\n    \u03b8 = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, \u03b8) + b\n        residuals = y_hat - y\n        sum_res = np.sum(residuals)\n        db = 2.0 / m * sum_res\n        dw = 2.0 / m * np.dot(X.T, residuals)\n        \u03b8 -= learning_rate * dw\n        b -= learning_rate * db\n    \u03b8 = np.round(\u03b8, 4)\n    b = np.round(b, 4)\n    weights = \u03b8.tolist()\n    return (weights, b)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if not X:\n        return True\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    X_np = np.array(X)\n    X_trans = X_np.T\n    return np.allclose(X_np, X_trans, atol=1e-08)"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\"\"\"\n    \u03b1 = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        mask = x > 0\n        elu = np.where(mask, x, \u03b1 * (np.exp(x) - 1))\n        result = elu * scale\n    elif order == 1:\n        mask = x > 0\n        derivative = np.where(mask, scale, scale * \u03b1 * np.exp(x))\n        result = derivative\n    elif order == 2:\n        mask = x > 0\n        second_derivative = np.where(mask, 0, scale * \u03b1 * np.exp(x))\n        result = second_derivative\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    current_y_hat = np.mean(y)\n    for _ in range(n_estimators):\n        r = y - current_y_hat\n        sorted_points = sorted(zip(x, r), key=lambda p: p[0])\n        (sorted_x, sorted_r) = zip(*sorted_points)\n        sorted_x = list(sorted_x)\n        sorted_r = list(sorted_r)\n        if len(set(sorted_x)) == 1:\n            mean_r = np.mean(sorted_r)\n            current_y_hat += learning_rate * mean_r\n            continue\n        possible_ts = []\n        for i in range(len(sorted_x) - 1):\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2\n            possible_ts.append(t)\n        best_t = None\n        min_total_error = float('inf')\n        for t in possible_ts:\n            split_idx = np.argwhere(sorted_x <= t).size\n            left_r = sorted_r[:split_idx]\n            right_r = sorted_r[split_idx:]\n            left_mean = np.mean(left_r)\n            right_mean = np.mean(right_r)\n            total_error = np.sum((left_r - left_mean) ** 2) + np.sum((right_r - right_mean) ** 2)\n            if total_error < min_total_error:\n                min_total_error = total_error\n                best_t = t\n        split_idx = np.argwhere(sorted_x <= best_t).size\n        left_mean = np.mean(sorted_r[:split_idx])\n        right_mean = np.mean(sorted_r[split_idx:])\n        new_residual = []\n        for (xi, ri) in zip(x, r):\n            if xi <= best_t:\n                new_residual.append(left_mean)\n            else:\n                new_residual.append(right_mean)\n        current_y_hat += learning_rate * np.array(new_residual)\n    return np.round(current_y_hat, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    g_sq = grad ** 2\n    new_Eg = rho * Eg + (1 - rho) * g_sq\n    denominator = np.sqrt(new_Eg + 1e-08)\n    w_next = w - learning_rate * grad / denominator\n    w_next_rounded = np.round(w_next, 4)\n    new_Eg_rounded = np.round(new_Eg, 4)\n    w_next_list = [float(x) for x in w_next_rounded.tolist()]\n    new_Eg_list = [float(x) for x in new_Eg_rounded.tolist()]\n    return (w_next_list, new_Eg_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    result = []\n    for xi in x:\n        if derivative:\n            if xi >= 0:\n                deriv = 1.0\n            else:\n                act = alpha * (np.exp(xi) - 1)\n                deriv = act + alpha\n        elif xi >= 0:\n            act = xi\n        else:\n            act = alpha * (np.exp(xi) - 1)\n        rounded = round(deriv, 4) if derivative else round(act, 4)\n        result.append(rounded)\n    return result"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    tuple_actions = any((isinstance(action, (list, tuple, np.ndarray)) for action in actions))\n    multidim_actions = False\n    if actions:\n        first_action = actions[0]\n        if isinstance(first_action, np.ndarray):\n            shape = np.array(first_action).shape\n            multidim_actions = len(shape) > 1\n        elif isinstance(first_action, (list, tuple)):\n            multidim_actions = len(first_action) > 1\n        else:\n            multidim_actions = False\n    if not actions:\n        action_dim = 0\n    else:\n        first_action = actions[0]\n        if isinstance(first_action, np.ndarray):\n            shape = np.array(first_action).shape\n            action_dim = len(shape)\n        elif isinstance(first_action, (list, tuple)):\n            action_dim = len(first_action)\n        else:\n            action_dim = 0\n    dims_actions = []\n    for action in actions:\n        if isinstance(action, np.ndarray):\n            shape = action.shape\n            if len(shape) == 0:\n                dim_values = [action]\n            else:\n                dim_values = [action[i] for i in range(len(shape))]\n        elif isinstance(action, (list, tuple)):\n            dim_values = list(action)\n        else:\n            dim_values = [action]\n        while len(dim_values) < action_dim:\n            dim_values.append(None)\n        dims_actions.append(tuple(dim_values))\n    continuous_actions = False\n    for action in actions:\n        for dim in dims_actions:\n            for value in dim:\n                if isinstance(value, float) and (not isinstance(value, int)):\n                    continuous_actions = True\n                    break\n            if continuous_actions:\n                break\n        if continuous_actions:\n            break\n    tuple_observations = any((isinstance(obs, (list, tuple, np.ndarray)) for obs in observations))\n    multidim_observations = False\n    if observations:\n        first_obs = observations[0]\n        if isinstance(first_obs, np.ndarray):\n            shape = np.array(first_obs).shape\n            multidim_observations = len(shape) > 1\n        elif isinstance(first_obs, (list, tuple)):\n            multidim_observations = len(first_obs) > 1\n        else:\n            multidim_observations = False\n    if not observations:\n        obs_dim = 0\n    else:\n        first_obs = observations[0]\n        if isinstance(first_obs, np.ndarray):\n            shape = np.array(first_obs).shape\n            obs_dim = len(shape)\n        elif isinstance(first_obs, (list, tuple)):\n            obs_dim = len(first_obs)\n        else:\n            obs_dim = 0\n    dims_observations = []\n    for obs in observations:\n        if isinstance(obs, np.ndarray):\n            shape = obs.shape\n            if len(shape) == 0:\n                dim_values = [obs]\n            else:\n                dim_values = [obs[i] for i in range(len(shape))]\n        elif isinstance(obs, (list, tuple)):\n            dim_values = list(obs)\n        else:\n            dim_values = [obs]\n        while len(dim_values) < obs_dim:\n            dim_values.append(None)\n        dims_observations.append(tuple(dim_values))\n    continuous_observations = False\n    for obs in observations:\n        for dim in dims_observations:\n            for value in dim:\n                if isinstance(value, float) and (not isinstance(value, int)):\n                    continuous_observations = True\n                    break\n            if continuous_observations:\n                break\n        if continuous_observations:\n            break\n    action_ids = []\n    for dim_idx in range(action_dim):\n        values = []\n        for action_dims in dims_actions:\n            value = action_dims[dim_idx]\n            if value is not None:\n                values.append(value)\n        unique = sorted(list(set(values)))\n        action_ids.append(unique)\n    obs_ids = []\n    for dim_idx in range(obs_dim):\n        values = []\n        for obs_dims in dims_observations:\n            value = obs_dims[dim_idx]\n            if value is not None:\n                values.append(value)\n        unique = sorted(list(set(values)))\n        obs_ids.append(unique)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': [len(dim) for dim in action_ids], 'action_dim': action_dim, 'n_obs_per_dim': [len(dim) for dim in obs_ids], 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n\n    def build_tree(X, residual, max_depth):\n        if max_depth == 0:\n            return np.mean(residual)\n        n_samples = X.shape[0]\n        best_mse = float('inf')\n        best_feature = None\n        best_split_point = None\n        for j in range(X.shape[1]):\n            sorted_data = sorted(zip(X[:, j], residual), key=lambda x: x[0])\n            X_sorted = sorted_data[:, 0]\n            residual_sorted = sorted_data[:, 1]\n            for k in range(1, n_samples):\n                left_X = X_sorted[:k]\n                left_residual = residual_sorted[:k]\n                right_X = X_sorted[k:]\n                right_residual = residual_sorted[k:]\n                mse_left = np.mean((left_residual - np.mean(left_residual)) ** 2)\n                mse_right = np.mean((right_residual - np.mean(right_residual)) ** 2)\n                total_mse = mse_left + mse_right\n                if total_mse < best_mse:\n                    best_mse = total_mse\n                    best_feature = j\n                    best_split_point = k\n        if best_feature is None:\n            return np.mean(residual)\n        feature = best_feature\n        split_point = best_split_point\n        X_left = X[X_sorted[:split_point]]\n        residual_left = residual_sorted[:split_point]\n        X_right = X[X_sorted[split_point:]]\n        residual_right = residual_sorted[split_point:]\n        X_left_sorted = sorted(X_left, key=lambda x: x[feature])\n        residual_left_sorted = sorted(residual_left, key=lambda x: x[feature])\n        left_pred = build_tree(X_left_sorted, residual_left_sorted, max_depth - 1)\n        X_right_sorted = sorted(X_right, key=lambda x: x[feature])\n        residual_right_sorted = sorted(residual_right, key=lambda x: x[feature])\n        right_pred = build_tree(X_right_sorted, residual_right_sorted, max_depth - 1)\n        split_value = X_sorted[split_point - 1]\n        predicted_residual = []\n        for i in range(n_samples):\n            if X[i, feature] <= split_value:\n                predicted_residual.append(left_pred[i])\n            else:\n                predicted_residual.append(right_pred[i])\n        return np.array(predicted_residual)\n    y_pred = np.mean(y_train)\n    for _ in range(n_estimators):\n        residual = 2 * (y_train - y_pred)\n        tree_output = build_tree(X_train, residual, max_depth)\n        y_pred += learning_rate * tree_output\n    return [round(x, 4) for x in y_pred]"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        intercept = np.ones((1, X.shape[1]))\n        X = np.hstack((intercept, X))\n        intercept_new = np.ones((1, X_new.shape[1]))\n        X_new = np.hstack((intercept_new, X_new))\n    N = X.shape[0]\n    M = X.shape[1]\n    size_beta = M + 1 if fit_intercept else M\n    if V is None:\n        V_matrix = np.identity(size_beta)\n    elif isinstance(V, (float, int)):\n        V_matrix = V * np.identity(size_beta)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            if len(V) == size_beta:\n                V_matrix = np.diag(V)\n            else:\n                raise ValueError('V must be a 1D array of length size_beta')\n        elif V.shape == (size_beta, size_beta):\n            V_matrix = V\n        else:\n            raise ValueError('V must be a square matrix of size_beta x size_beta')\n    else:\n        raise ValueError('V must be a scalar, 1D array, or 2D array')\n    XtX = X.T.dot(X)\n    try:\n        V_inv = np.linalg.inv(V_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError('V must be invertible')\n    Sigma_posterior = np.linalg.inv(V_inv + XtX)\n    if isinstance(mu, (float, int)):\n        term1 = V_inv * mu\n    else:\n        term1 = V_inv.dot(mu)\n    term2 = X.T.dot(y)\n    sum_terms = term1 + term2\n    mu_posterior = sum_terms.dot(Sigma_posterior)\n    preds = X_new.dot(mu_posterior)\n    preds_rounded = [round(p, 4) for p in preds]\n    return preds_rounded"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error between two lists.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((y < 0 for y in predicted)):\n        return -1\n    if len(actual) == 0:\n        return -1\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    diffs = np.log(1 + predicted_np) - np.log(1 + actual_np)\n    squared_diffs = diffs ** 2\n    mean = np.mean(squared_diffs)\n    rmsle = np.sqrt(mean)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    window = []\n    for n in range(N):\n        angle = 2 * math.pi * n / (N - 1)\n        value = 0.5 - 0.5 * math.cos(angle)\n        window.append(value)\n    if not symmetric:\n        window = window[:window_len]\n    rounded_window = [round(val, 4) for val in window]\n    return rounded_window"}
{"task_id": 433, "completion_id": 0, "solution": "def glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        kernel_height = shape[2]\n        kernel_width = shape[3]\n        receptive_field = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to the nearest 4th decimal and packed into a plain\n    Python list.\n    \"\"\"\n    m = len(y)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * m\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    mean_y = np.mean(y_np)\n    hat_y = np.array([mean_y] * m, dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y_np - hat_y\n        (w, b) = np.linalg.lstsq(X_np, residuals, rcond=None)\n        h_t = b + np.dot(X_np, w)\n        hat_y += learning_rate * h_t\n    rounded_hat_y = np.round(hat_y, 4)\n    return rounded_hat_y.tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.asarray(x)\n    e_x = np.exp(-x)\n    sig = 1 / (1 + e_x)\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    rounded_result = np.round(result, 4)\n    if rounded_result.ndim == 0:\n        return rounded_result.item()\n    else:\n        return rounded_result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y_array = np.array(y)\n    else:\n        y_array = y\n    if len(y_array) == 0:\n        return [-1]\n    if num_classes is None:\n        num_classes = max(y_array) + 1\n    elif num_classes < max(y_array) + 1:\n        return [-1]\n    n = len(y_array)\n    matrix = np.zeros((n, num_classes), dtype=int)\n    for i in range(n):\n        label = y_array[i]\n        matrix[i, label] = 1\n    result = matrix.tolist()\n    return result"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    n_estimators = len(predictions)\n    if n_estimators == 0:\n        return ([], [])\n    n_samples = len(predictions[0])\n    n_classes = len(predictions[0][0])\n    averaged_probs = []\n    predicted_labels = []\n    for sample_idx in range(n_samples):\n        prob_vectors = []\n        for est_idx in range(n_estimators):\n            prob_vector = predictions[est_idx][sample_idx]\n            prob_vectors.append(prob_vector)\n        avg_vector = np.average(prob_vectors, axis=0)\n        rounded = [round(v, 4) for v in avg_vector]\n        max_idx = np.argmax(rounded)\n        averaged_probs.append(rounded)\n        predicted_labels.append(max_idx)\n    return (averaged_probs, predicted_labels)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if len(X) == 0 or (Y is not None and len(Y) == 0):\n        return -1\n    if any((len(row) != len(X[0]) for row in X)):\n        return -1\n    if Y is not None:\n        if any((len(row) != len(Y[0]) for row in Y)):\n            return -1\n        if len(Y[0]) != len(X[0]):\n            return -1\n    C = len(X[0])\n    if sigma is None:\n        sigma_list = [np.sqrt(C / 2)] * C\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        for s in sigma:\n            if not isinstance(s, (int, float)):\n                return -1\n            if s <= 0:\n                return -1\n        sigma_list = sigma\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        if C != 1:\n            return -1\n        sigma_list = [sigma]\n    else:\n        return -1\n    n = len(X)\n    m = len(Y) if Y is not None else n\n    kernel = []\n    for i in range(n):\n        x_i = X[i]\n        row = []\n        for j in range(m):\n            if Y is not None:\n                y_j = Y[j]\n            else:\n                y_j = x_i\n            sum_sq = 0.0\n            for k in range(C):\n                dx = x_i[k] - y_j[k]\n                sum_sq += dx * dx / sigma_list[k]\n            kernel_val = np.exp(-0.5 * sum_sq)\n            kernel_val = round(kernel_val, 4)\n            row.append(kernel_val)\n        kernel.append(row)\n    return kernel"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    first_subset = []\n    second_subset = []\n    for row in X:\n        value = row[feature_i]\n        if isinstance(threshold, (int, float)):\n            if value >= threshold:\n                first_subset.append(row.tolist())\n            else:\n                second_subset.append(row.tolist())\n        elif value == threshold:\n            first_subset.append(row.tolist())\n        else:\n            second_subset.append(row.tolist())\n    return [first_subset, second_subset]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(rewards)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            max_next_q = np.max(Q_next[i])\n            target = rewards[i] + gamma * max_next_q\n        y[i][actions[i]] = target\n    y_rounded = []\n    for row in y:\n        rounded_row = [round(x, 4) for x in row]\n        y_rounded.append(rounded_row)\n    return y_rounded"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        current_pred = np.mean(y)\n        return np.round(current_pred, 4).tolist()\n    x = np.array(x)\n    y = np.array(y)\n    current_pred = np.mean(y)\n    for _ in range(n_estimators):\n        residuals = y - current_pred\n        sorted_x = np.sort(x)\n        unique_x = np.unique(sorted_x)\n        split_points = unique_x[:-1]\n        if not split_points:\n            residuals = np.mean(residuals)\n        else:\n            best_t = None\n            min_sse = float('inf')\n            for t in split_points:\n                mask_left = x <= t\n                mask_right = x > t\n                if not (np.any(mask_left) and np.any(mask_right)):\n                    continue\n                left_residuals = residuals[mask_left]\n                v_L = np.mean(left_residuals)\n                right_residuals = residuals[mask_right]\n                v_R = np.mean(right_residuals)\n                sse = v_L ** 2 * len(left_residuals) + v_R ** 2 * len(right_residuals)\n                if sse < min_sse:\n                    min_sse = sse\n                    best_t = t\n            if best_t is None:\n                residuals = np.mean(residuals)\n            else:\n                mask_left = x <= best_t\n                mask_right = x > best_t\n                left_residuals = residuals[mask_left]\n                v_L = np.mean(left_residuals)\n                right_residuals = residuals[mask_right]\n                v_R = np.mean(right_residuals)\n                new_residuals = np.where(mask_left, v_L, v_R)\n                current_pred += learning_rate * new_residuals\n    return np.round(current_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "def expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    new_q_table = [row.copy() for row in q_table]\n    if next_state is None:\n        target = reward\n    else:\n        s_prime = next_state\n        current_q_values = new_q_table[s_prime]\n        num_actions = len(current_q_values)\n        max_q = max(current_q_values)\n        greedy_actions = [a for a in range(num_actions) if current_q_values[a] == max_q]\n        greedy_action = greedy_actions[0] if greedy_actions else None\n        prob = []\n        for a in range(num_actions):\n            if a == greedy_action:\n                p = 1 - epsilon + epsilon / num_actions\n            else:\n                p = epsilon / num_actions\n            prob.append(p)\n        expectation = sum((prob[a] * current_q_values[a] for a in range(num_actions)))\n        target = reward + gamma * expectation\n    current_q = new_q_table[state][action]\n    delta = lr * (target - current_q)\n    new_q_table[state][action] = current_q + delta\n    rounded_q_table = []\n    for row in new_q_table:\n        rounded_row = [round(val, 4) for val in row]\n        rounded_q_table.append(rounded_row)\n    return rounded_q_table"}
