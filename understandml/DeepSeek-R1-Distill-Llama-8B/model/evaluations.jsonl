{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name 'ridge_regression' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (4,) (2,) (4,) ", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples, dtype=np.float64)\n    b = 0.0\n    max_iter = n_iter\n    for _ in range(max_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = 0.0\n            for j in range(n_samples):\n                x_j = X_train[j]\n                y_j = y_train[j]\n                x_i = X_train[i]\n                k = np.dot(x_j, x_i)\n                activation += alpha[j] * y_j * k\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.zeros(n_samples, dtype=np.float64)\n    for j in range(n_samples):\n        yj = y_train[j]\n        xj = X_train[j]\n        w += alpha[j] * yj * xj\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: 'link_prime'", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    links['identity'] = {'link': lambda x: x, 'inv_link': lambda x: x, 'derivative': lambda x: 1}\n    links['log'] = {'link': lambda x: np.log(x), 'inv_link': lambda x: np.exp(x), 'derivative': lambda x: 1.0 / x}\n    links['logit'] = {'link': lambda x: np.log(x / (1 - x)), 'inv_link': lambda x: np.log(x / (1 - x)), 'derivative': lambda x: 1.0 / (x * (1 - x))}\n    return links\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 3, "completion_id": 0, "passed": false, "result": "failed: name 'isolation_tree_path_length' is not defined", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nassert isolation_tree_path_length(np.arange(1).reshape(-1, 1)) == [0], \"test case failed: n=1\"\nassert isolation_tree_path_length(np.arange(2).reshape(-1, 1)) == [0, 0], \"test case failed: n=2\"\nassert isolation_tree_path_length(np.arange(3).reshape(-1, 1)) == [1, 1, 1], \"test case failed: n=3\"\nassert isolation_tree_path_length(np.arange(4).reshape(-1, 1)) == [1, 1, 1, 1], \"test case failed: n=4\"\nassert isolation_tree_path_length(np.arange(5).reshape(-1, 1)) == [2, 2, 2, 1, 1], \"test case failed: n=5\"\nassert isolation_tree_path_length(np.arange(6).reshape(-1, 1)) == [2, 2, 2, 2, 2, 2], \"test case failed: n=6\"\nassert isolation_tree_path_length(np.arange(7).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2], \"test case failed: n=7\"\nassert isolation_tree_path_length(np.arange(8).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2], \"test case failed: n=8\"\nassert isolation_tree_path_length(np.arange(9).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2, 2], \"test case failed: n=9\"\nassert isolation_tree_path_length(np.arange(10).reshape(-1, 1)) == [3, 3, 3, 2, 2, 3, 3, 3, 2, 2], \"test case failed: n=10\""}
{"task_id": 7, "completion_id": 0, "passed": false, "result": "failed: name 'Hashable' is not defined", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    N = len(transactions)\n    required_support = math.ceil(minsup * N)\n    transactions_sets = [set(t) for t in transactions]\n    all_items = set()\n    for t in transactions:\n        all_items.update(t)\n    all_items = list(all_items)\n    result = {}\n    for k in range(1, len(all_items) + 1):\n        for combo in combinations(all_items, k):\n            count = 0\n            for t_set in transactions_sets:\n                if all((item in t_set for item in combo)):\n                    count += 1\n            if count >= required_support:\n                sorted_combo = tuple(sorted(combo))\n                result[sorted_combo] = count\n    return result\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object has no attribute 'count'", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_samples:\n        raise ValueError('k must be between 1 and the number of samples')\n    old_centers = data[:k]\n    for _ in range(max_iter):\n        clusters = np.zeros(len(data), dtype=int)\n        for (i, sample) in enumerate(data):\n            min_dist = float('inf')\n            min_center = 0\n            for (j, center) in enumerate(old_centers):\n                dist = np.sum((sample - center) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    min_center = j\n            clusters[i] = min_center\n        empty_clusters = []\n        for j in range(k):\n            if clusters.count(j) == 0:\n                empty_clusters.append(j)\n        for j in empty_clusters:\n            idx = np.random.randint(len(data))\n            old_centers[j] = data[idx]\n        new_centers = []\n        for j in range(k):\n            cluster_samples = data[clusters == j]\n            new_centers.append(np.mean(cluster_samples, axis=0))\n        max_diff = 0\n        for i in range(k):\n            diff = np.abs(old_centers[i] - new_centers[i])\n            if diff > max_diff:\n                max_diff = diff\n        if max_diff < epsilon:\n            break\n        old_centers = new_centers\n    rounded_centers = [[round(c, 4) for c in center] for center in old_centers]\n    cluster_labels = clusters\n    return (rounded_centers, cluster_labels)\nassert kmeans(np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]), 2) == ([[5.5, 1.0], [5.5, 4.0]], [0, 1, 0, 0, 1, 0]), \"test case failed: basic two-cluster example\"\nassert kmeans(np.array([[0, 0], [0, 2], [10, 0], [10, 2]]), 2) == ([[5.0, 0.0], [5.0, 2.0]], [0, 1, 0, 1]), \"test case failed: symmetric rectangle\"\nassert kmeans(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[3.0, 4.0]], [0, 0, 0]), \"test case failed: single cluster mean\"\nassert kmeans(np.array([[0, 0], [1, 1], [2, 2]]), 3) == ([[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]], [0, 1, 2]), \"test case failed: k equals number of samples\"\nassert kmeans(np.array([[0], [10]]), 2) == ([[0.0], [10.0]], [0, 1]), \"test case failed: one-dimensional data\"\nassert kmeans(np.zeros((3, 2)), 1) == ([[0.0, 0.0]], [0, 0, 0]), \"test case failed: all identical samples\"\nassert kmeans(np.array([[0, 0], [10, 10], [20, 20]]), 3) == ([[0.0, 0.0], [10.0, 10.0], [20.0, 20.0]], [0, 1, 2]), \"test case failed: three isolated samples\"\nassert kmeans(np.array([[0, 0], [1, 0], [0, 1], [1, 1]]), 1) == ([[0.5, 0.5]], [0, 0, 0, 0]), \"test case failed: square to single centre\"\nassert kmeans(np.array([[2, 2], [2, 2], [2, 2]]), 1) == ([[2.0, 2.0]], [0, 0, 0]), \"test case failed: duplicate points single centre\"\nassert kmeans(np.array([[0, 0], [1, 1], [0, 0], [1, 1]]), 2) == ([[0.0, 0.0], [1.0, 1.0]], [0, 1, 0, 1]), \"test case failed: duplicates two centres\""}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'D1' is not defined", "solution": "import numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    if n_user == 0:\n        return []\n    item_users = [set() for _ in range(n_item)]\n    for user in range(n_user):\n        for i in range(n_item):\n            if data[user, i] > 0:\n                item_users[i].add(user)\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = item_users[i].intersection(item_users[j])\n            if not common_users:\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n            else:\n                v1 = [data[u, i] for u in common_users]\n                v2 = [data[u, j] for u in common_users]\n                if criterion == 'cosine':\n                    mean_v1 = np.mean(v1)\n                    mean_v2 = np.mean(v2)\n                    if np.std(v1) > 0.001:\n                        v1_centered = v1 - mean_v1\n                    else:\n                        v1_centered = v1\n                    if np.std(v2) > 0.001:\n                        v2_centered = v2 - mean_v2\n                    else:\n                        v2_centered = v2\n                    dot = np.dot(v1_centered, v2_centered)\n                    len_v1 = np.linalg.norm(v1_centered)\n                    len_v2 = np.linalg.norm(v2_centered)\n                    if len_v1 == 0 or len_v2 == 0:\n                        sim = 0.0\n                    else:\n                        sim = dot / (len_v1 * len_v2)\n                    S[i, j] = sim\n                    S[j, i] = sim\n                elif criterion == 'pearson':\n                    correlation = np.corrcoef(v1, v2)[0, 0]\n                    S[i, j] = correlation\n                    S[j, i] = correlation\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    if len(rated_items) == n_item:\n        return []\n    r = data[user_ind, rated_items]\n    unrated_items = [t for t in range(n_item) if t not in rated_items]\n    scores = []\n    for t in unrated_items:\n        sum_product = 0.0\n        sum_abs = 0.0\n        for i in rated_items:\n            sum_product += r[i] * S[t, i]\n            sum_abs += abs(S[t, i])\n        if sum_abs == 0:\n            score = 0.0\n        else:\n            score = sum_product / sum_abs\n        scores.append((score, t))\n    scores.sort(key=lambda x: (-x[0], x[1]))\n    result = [t for (score, t) in scores[:k]]\n    return result\nassert knn_recommend(D1, 0, 1) == [1], \"failed: knn_recommend(D1,0,1)\"\nassert knn_recommend(D1, 2, 1) == [0], \"failed: knn_recommend(D1,2,1)\"\nassert knn_recommend(D1, 0, 1, 'pearson') == [1], \"failed: pearson D1 user0\"\nassert knn_recommend(D1, 1, 1) == [1], \"failed: knn_recommend(D1,1,1)\"\nassert knn_recommend(D1, 3, 1) == [0], \"failed: knn_recommend(D1,3,1)\"\nassert knn_recommend(D1, 0, 2) == [1], \"failed: k larger than unrated items\"\nassert knn_recommend(D2, 0, 1) == [0], \"failed: knn_recommend(D2,0,1)\"\nassert knn_recommend(D2, 1, 1) == [1], \"failed: knn_recommend(D2,1,1)\"\nassert knn_recommend(D2, 2, 1) == [2], \"failed: knn_recommend(D2,2,1)\"\nassert knn_recommend(D3, 0, 1) == [0], \"failed: knn_recommend(D3,0,1)\""}
{"task_id": 20, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.asarray(x)\n    sig_x = 1 / (1 + np.exp(-x))\n    grad_x = sig_x * (1 - sig_x)\n    rounded_sig = np.round(sig_x, 4)\n    rounded_grad = np.round(grad_x, 4)\n    if x.ndim == 0:\n        return (rounded_sig.item(), rounded_grad.item())\n    else:\n        return (rounded_sig.tolist(), rounded_grad.tolist())\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: Failed on single test sample.", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters:\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns:\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly 1 or -1.\n    \"\"\"\n    kernel = np.exp(-gamma * (X_train - X_test) @ (X_train - X_test).T)\n    scores = alpha * y_train @ kernel + b\n    predicted_labels = np.sign(scores).astype(int)\n    return predicted_labels.tolist()\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns (-1, -1).\n    \"\"\"\n    m = len(X)\n    if m == 0:\n        return (-1, -1)\n    n = len(X[0])\n    if k < 1 or k > min(m, n):\n        return (-1, -1)\n    X_array = np.array(X)\n    (U, S, V) = np.svd(X_array)\n    U_k = U[:, :k]\n    S_k = S[:k, :]\n    V_k = V\n    X_hat = np.dot(U_k, np.dot(S_k, V.T))\n    mse = np.mean(np.square(X_array - X_hat))\n    X_hat_rounded = np.round(X_hat, 4)\n    mse_rounded = np.round(mse, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    return (X_hat_list, mse_rounded)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for ** or pow(): 'list' and 'int'", "solution": "import numpy as np\nimport numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x = np.array(x_train)\n    y = np.array(y_train)\n    sorted_indices = np.argsort(x)\n    sorted_x = x[sorted_indices]\n    sorted_y = y[sorted_indices]\n    candidate_splits = []\n    for i in range(len(sorted_x) - 1):\n        s = (sorted_x[i] + sorted_x[i + 1]) / 2\n        candidate_splits.append(s)\n    residuals = sorted_y.copy()\n    ensemble = []\n    while True:\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n        for s in candidate_splits:\n            c1 = 0.0\n            c2 = 0.0\n            for i in range(len(sorted_x)):\n                if sorted_x[i] <= s:\n                    c1 += residuals[i]\n                else:\n                    c2 += residuals[i]\n            new_residuals = []\n            for i in range(len(sorted_x)):\n                if sorted_x[i] <= s:\n                    new_r = residuals[i] - c1\n                else:\n                    new_r = residuals[i] - c2\n                new_residuals.append(new_r)\n            rss = np.sum(new_residuals ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble.append((best_split, best_c1, best_c2))\n        residuals = new_residuals\n        current_rss = np.sum(residuals ** 2)\n        if current_rss <= epsilon:\n            break\n    prediction = 0.0\n    for (split, c1, c2) in ensemble:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],3)==3.5, \"failed: piece-wise constant right side\"\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],2)==1.5, \"failed: piece-wise constant left side\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],5)==4.0, \"failed: split at 3.0, right prediction\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],2)==2.0, \"failed: split at 3.0, left prediction\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],6)==20.0, \"failed: right side prediction 20\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],2)==10.0, \"failed: left side prediction 10\"\nassert predict_boosting_tree([1,2,3,4],[0,0,0,0],3)==0.0, \"failed: all zeros\"\nassert predict_boosting_tree([1,1.5,2],[2,2,2],1.2)==2.0, \"failed: identical targets\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],4)==2.0, \"failed: two-segment data, right\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],2)==1.0, \"failed: two-segment data, left\""}
{"task_id": 34, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Generate a binary tensor with 0.0 and 1.0 values based on the given shape and sparsity.\n\n    Parameters:\n        shape (tuple[int, ...]): The shape of the output tensor.\n        sparsity (float, optional): Probability of generating 1.0. Must be in [0, 1]. Default is 0.5.\n        seed (int, optional): Seed for reproducibility. If provided, np.random.seed is called. Default is None.\n\n    Returns:\n        numpy.ndarray: A tensor of float dtype with 0.0 and 1.0 values. If sparsity is invalid, returns a float array with -1.0 in the same shape.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return np.full(shape, -1.0, dtype=np.float64)\n    if seed is not None:\n        np.random.seed(seed)\n    rand_arr = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_arr = np.where(rand_arr >= threshold, 1.0, 0.0)\n    return binary_arr\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 39, "completion_id": 0, "passed": false, "result": "failed: argpartition() missing 1 required positional argument: 'kth'", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n    \"\"\"\n    n = data.shape[0]\n    sorted_indices = np.argpartition(data[:, d])\n    median_value = data[sorted_indices[n // 2]]\n    pivot = sorted_indices[n // 2]\n    left = []\n    right = []\n    for i in range(n):\n        if data[i][d] < median_value:\n            left.append(i)\n        elif data[i][d] > median_value:\n            right.append(i)\n    return (pivot, left, right)\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: test case failed: to_frames(np.arange(6),5,1)", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    if x.ndim != 1:\n        raise AssertionError('x must be 1-D')\n    if stride < 1:\n        raise AssertionError('stride must be >= 1')\n    if x.size < frame_width:\n        raise AssertionError('x must be at least frame_width in length')\n    n_frames = (x.size - frame_width) // stride + 1\n    view = as_strided(x, shape=(n_frames, frame_width), strides=(stride, 1))\n    view.flags.writeable = writeable\n    return view\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        if X.ndim < 2:\n            return False\n        if not np.all((X >= 0) & (X <= 1)):\n            return False\n        row_sums = np.sum(X, axis=1)\n        if not np.all(np.abs(row_sums - 1) < 1e-08):\n            return False\n        return True\n    else:\n        if not all((isinstance(row, list) for row in X)):\n            return False\n        row_length = len(X[0])\n        for row in X:\n            if len(row) != row_length:\n                return False\n        if len(X) == 0:\n            return False\n        try:\n            X_np = np.array(X)\n        except:\n            return False\n        if not np.issubdtype(X_np.dtype, np.floating):\n            return False\n        if not np.all((X_np >= 0) & (X_np <= 1)):\n            return False\n        row_sums = np.sum(X_np, axis=1)\n        if not np.all(np.abs(row_sums - 1) < 1e-08):\n            return False\n        return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n = X.shape[0]\n    d = X.shape[1]\n    w = np.zeros(d, dtype=np.float64)\n    s = np.zeros(d, dtype=np.float64)\n    current_pos = 0\n    for iteration in range(max_iter):\n        if n < batch_size:\n            batch_x = X\n            batch_y = y\n        else:\n            start = current_pos\n            end = start + batch_size\n            if end > n:\n                take_end = n - start\n                take_start = batch_size - take_end\n                if take_start < 0:\n                    take_start = 0\n                batch_x = X[start:start + take_end] + X[:take_start]\n                batch_y = y[start:start + take_end] + y[:take_start]\n            else:\n                batch_x = X[start:end]\n                batch_y = y[start:end]\n            current_pos = end % n\n        Xw = batch_x @ w\n        residuals = Xw - batch_y\n        g = 1.0 / n * np.dot(X.T, residuals)\n        g_squared = g ** 2\n        s = rho * s + (1 - rho) * g_squared\n        sqrt_s = np.sqrt(s)\n        denominator = sqrt_s + eps_station\n        w = w - eta * g / denominator\n        norm_g = np.linalg.norm(g)\n        if norm_g < epsilon:\n            break\n        if iteration == max_iter - 1:\n            break\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()\nimport numpy as np\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([1,3,5,7],float)),[1,2])), \"Failed on y = 1+2x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3],[1,4]],float),np.array([3,7,11,15,19],float)),[3,4])), \"Failed on y = 3+4x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2]],float),np.array([5,5,5],float)),[5,0])), \"Failed on constant function\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([10,8,6,4],float)),[10,-2])), \"Failed on y = 10-2x\"\nX8=np.array([[1,-1],[1,0],[1,1],[1,2]],float);y8=np.array([4,5,6,7],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X8,y8),[5,1])), \"Failed on negative to positive x\"\nX9=np.array([[1,2],[1,4],[1,6],[1,8]],float);y9=np.array([5,9,13,17],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X9,y9),[1,2])), \"Failed on even x\"\nX10=np.array([[1,3],[1,6],[1,9]],float);y10=np.array([2,4,6],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X10,y10),[0,0.6667])), \"Failed on small sample 10\""}
{"task_id": 56, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function and its derivative (sigmoid).\"\"\"\n    if isinstance(x, (int, float)):\n        if deriv:\n            return round(1.0 / (1 + np.exp(-x)), 4)\n        elif x > 0:\n            return round(x + np.log(1 + np.exp(-x)), 4)\n        else:\n            return round(np.log(1 + np.exp(x)), 4)\n    else:\n        x = np.array(x)\n        if deriv:\n            sig = 1 / (1 + np.exp(-x))\n            sig_rounded = np.round(sig, 4)\n            return sig_rounded.tolist()\n        else:\n            exp_x = np.exp(x)\n            log_val = np.where(x > 0, x + np.log(1 + np.exp(-x)), np.log(1 + exp_x))\n            log_val_rounded = np.round(log_val, 4)\n            return log_val_rounded.tolist()\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: failed test 2", "solution": "import numpy as np\nfrom collections import Counter\nimport math\nfrom collections import defaultdict\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The function builds an N-gram count table from the *corpus* and returns the total log-probability\n    of the *sequence* under the resulting unsmoothed language model. If any required count is zero,\n    it returns ``float('-inf')``.\n\n    Args:\n        corpus: List of word tokens.\n        sequence: List of word tokens to compute the log-probability for.\n        N: Order of the N-gram model.\n\n    Returns:\n        The total log-probability rounded to 4 decimal places, or ``float('-inf')`` if any required count is zero.\n    \"\"\"\n    if N == 0:\n        return float('-inf')\n    if N == 1:\n        ngram_counts = defaultdict(int)\n        for word in corpus:\n            ngram_counts[word] += 1\n    else:\n        ngram_counts = defaultdict(lambda : defaultdict(int))\n        for i in range(len(corpus) - N + 1):\n            current_gram = tuple(corpus[i:i + N])\n            prefix = tuple(corpus[i:i + N - 1])\n            ngram_counts[prefix][current_gram] += 1\n    total = 0.0\n    if N == 1:\n        total_words = len(corpus)\n        for word in sequence:\n            if word not in ngram_counts or ngram_counts[word] == 0:\n                return float('-inf')\n            prob = math.log(ngram_counts[word] / total_words)\n            total += prob\n    else:\n        for i in range(len(sequence) - N + 1):\n            window = tuple(sequence[i:i + N])\n            prefix = tuple(sequence[i:i + N - 1])\n            if prefix not in ngram_counts or window not in ngram_counts[prefix]:\n                return float('-inf')\n            count_window = ngram_counts[prefix][window]\n            count_prefix = sum(ngram_counts[prefix].values())\n            if count_window == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = math.log(count_window / count_prefix)\n            total += prob\n    return round(total, 4)\nassert unsmoothed_ngram_log_prob([\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"],[\"the\",\"lazy\",\"dog\"],2)==-0.6931, \"failed test 1\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],2)==-0.4055, \"failed test 2\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"a\",\"b\"],2)==-0.4055, \"failed test 3\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"c\"],2)==float('-inf'), \"failed test 4\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],1)==-1.4271, \"failed test 5\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"c\"],1)==float('-inf'), \"failed test 6\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"i\",\"love\",\"deep\"],3)==-0.6931, \"failed test 7\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"love\",\"deep\",\"machine\"],3)==float('-inf'), \"failed test 8\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\"],2)==float('-inf'), \"failed test 9\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"machine\",\"learning\",\"i\"],3)==0.0, \"failed test 10\""}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\"\"\"\n    m = len(X)\n    if len(y) != m:\n        raise ValueError('X and y must have the same length.')\n    design_matrix = np.zeros((m, degree + 1))\n    design_matrix[:, 0] = 1.0\n    for j in range(1, degree + 1):\n        design_matrix[:, j] = np.array([x ** j for x in X], dtype=np.float64)\n    current_weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        max_change = 0.0\n        X_without_w0 = design_matrix[:, 1:]\n        residual_without_w0 = y - X_without_w0 @ current_weights\n        w0_new = np.mean(residual_without_w0)\n        change_w0 = abs(w0_new - current_weights[0])\n        max_change = max(max_change, change_w0)\n        current_weights[0] = w0_new\n        for j in range(1, degree + 1):\n            xj = design_matrix[:, j]\n            residual_j = y - design_matrix @ current_weights + current_weights[j] * xj\n            rho = xj.T @ residual_j\n            denominator = xj.T @ xj\n            if denominator == 0:\n                new_wj = 0.0\n            else:\n                if rho == 0:\n                    new_wj = 0.0\n                else:\n                    sign_rho = np.sign(rho)\n                    abs_rho = np.abs(rho)\n                    threshold = max(abs_rho - reg_factor, 0.0)\n                    new_wj = sign_rho * threshold\n                new_wj = new_wj / denominator\n            change = abs(new_wj - current_weights[j])\n            if change > max_change:\n                max_change = change\n            current_weights[j] = new_wj\n        if max_change < tol:\n            break\n    return [round(coeff, 4) for coeff in current_weights]\nassert lasso_regression([0,1,2,3],[1,3,5,7],1,0)==[1.0,2.0],\"failed: linear data degree 1\"\nassert lasso_regression([1,2,3],[4,6,8],1,0)==[2.0,2.0],\"failed: linear data intercept 2 slope 2\"\nassert lasso_regression([0,1,2],[0,1,4],2,0)==[0.0,0.0,1.0],\"failed: quadratic x^2\"\nassert lasso_regression([0,1,2],[1,2,5],2,0)==[1.0,0.0,1.0],\"failed: quadratic x^2+1\"\nassert lasso_regression([0,1,2],[2,6,12],2,0)==[2.0,3.0,1.0],\"failed: quadratic 2+3x+x^2\"\nassert lasso_regression([-1,0,1],[2,1,0],1,0)==[1.0,-1.0],\"failed: negative slope\"\nassert lasso_regression([0,5],[7,17],1,0)==[7.0,2.0],\"failed: two-point line\""}
{"task_id": 65, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to the nearest 6th decimal.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    if T == 0:\n        return 0.0\n    beta_prev = [1.0 for _ in range(N)]\n    for t in range(T - 2, -1, -1):\n        current_obs = obs[t + 1]\n        beta_current = [0.0 for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                beta_current[i] += A[i][j] * B[j][current_obs] * beta_prev[j]\n        beta_prev = beta_current\n    result = 0.0\n    for i in range(N):\n        result += pi[i] * B[i][obs[0]] * beta_prev[i]\n    return round(result, 6)\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2]) == 0.033612, \"test case failed: example sequence\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [2,1]) == 0.1246, \"test case failed: sequence [2,1]\"\nassert backward_prob([[1.0]], [[0.2,0.8]], [1.0], [0,1,1,0]) == 0.0256, \"test case failed: single-state model 1\"\nassert backward_prob([[1.0]], [[0.5,0.5]], [1.0], [1,1,1]) == 0.125, \"test case failed: single-state model 2\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [1]) == 0.36, \"test case failed: length-1 sequence\"\nassert backward_prob([[0.5,0.5,0.0],[0.2,0.3,0.5],[0.0,0.0,1.0]], [[0.1,0.9],[0.7,0.3],[0.4,0.6]], [1.0,0.0,0.0], [0,1]) == 0.06, \"test case failed: 3-state model\"\nassert backward_prob([[1,0],[0,1]], [[0.6,0.4],[0.2,0.8]], [0.5,0.5], [0,1]) == 0.2, \"test case failed: deterministic transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [0,0]) == 0.25, \"test case failed: symmetric transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [1]) == 0.5, \"test case failed: length-1 identity emissions\"\nassert backward_prob([[1.0]], [[0.3,0.7]], [1.0], [1,1,0]) == 0.147, \"test case failed: single-state model 3\""}
{"task_id": 69, "completion_id": 0, "passed": false, "result": "failed: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    if len(B) != n:\n        return -1\n    m = len(B[0]) if B else 0\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if not isinstance(obs, int):\n            return -1\n        if obs < 0 or obs >= m:\n            return -1\n    if len(observations) == 0:\n        return -1\n    current_state = np.array(S, dtype=np.float64)\n    for obs in observations:\n        current_state = current_state.dot(A)\n        current_state = current_state.dot(B)\n    total_probability = np.sum(current_state)\n    return round(total_probability, 4)\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [0,1,2]) == 0.0363, \"failed: basic 2-state example\"\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [1]) == 0.36, \"failed: single observation\"\nassert forward_algorithm([1.0,0.0], [[0.5,0.5],[0.2,0.8]], [[0.6,0.4],[0.3,0.7]], [0,1,1]) == 0.2004, \"failed: asymmetric model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [2,0]) == 0.097, \"failed: different start distribution\"\nassert forward_algorithm([1.0], [[1.0]], [[0.2,0.3]], [1,1,0]) == 0.018, \"failed: single-state model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.5]], [0]) == -1, \"failed: B wrong dimensions\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [-1,0]) == -1, \"failed: negative observation index\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [0,2]) == -1, \"failed: observation index out of range\"\nassert forward_algorithm([], [], [], [0]) == -1, \"failed: empty S\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3]], [[0.5,0.5],[0.5,0.5]], [0]) == -1, \"failed: A not square\""}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: failed on majority >1", "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    if len(X_train) == 0:\n        return -1\n    result = []\n    for x_test in X_test:\n        distances = []\n        for (x_train, y) in zip(X_train, y_train):\n            dist = sum(((x_test[i] - x_train[i]) ** 2 for i in range(len(x_test))))\n            distances.append((dist, y))\n        distances.sort()\n        k_neighbors = distances[:k]\n        y_values = [y for (d, y) in k_neighbors]\n        freq = {}\n        for y in y_values:\n            freq[y] = freq.get(y, 0) + 1\n        max_freq = max(freq.values())\n        candidates = [y for y in freq if freq[y] == max_freq]\n        prediction = min(candidates)\n        result.append(prediction)\n    return result\nassert knn_predict([[1,2],[2,3],[3,4]],[0,1,1],[[2,2]],2)==[0],\"failed on single sample, tie case\"\nassert knn_predict([[0,0],[1,1],[2,2],[3,3]],[1,1,0,0],[[1.1,1.1],[2.9,3.1]],3)==[1,0],\"failed on multi predict\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],1)==[0],\"failed on k=1\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],3)==[0],\"failed on k==n_train\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,2,2],[[0.9,0.9]],2)==[2],\"failed on majority >1\"\nassert knn_predict([[1,1]], [3], [[2,2],[0,0]], 1)==[3,3],\"failed on single-point training set\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],2)==[0],\"failed on tie chooses smaller label\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],0)==-1,\"failed on invalid k=0\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],3)==-1,\"failed on k>n_train\"\nassert knn_predict([[1,2],[2,1],[0,0],[2,2]],[1,1,0,0],[[1,1]],2)==[1],\"failed on mixed labels\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-10\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    sum_loss = np.sum(y * np.log(y_pred + epsilon))\n    L = -sum_loss\n    return round(L, 4)\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    L = len(parameters) // 2\n    A_prev = X\n    caches = []\n    for i in range(1, L + 1):\n        W = parameters[f'W{i}']\n        b = parameters[f'b{i}']\n        Z = np.dot(W, A_prev) + b\n        if i < L:\n            A = np.maximum(0, Z)\n            caches.append((Z, 'ReLU'))\n        else:\n            A = 1 / (1 + np.exp(-Z))\n            caches.append((Z, 'sigmoid'))\n        A_prev = A\n    AL = np.round(A, 4)\n    return AL.tolist()\nassert L_model_forward(X1, params1) == [[0.5374, 0.5671]], \"test case failed: example input\"\nassert L_model_forward(X2, params2) == [[0.5]], \"test case failed: zero weights and bias\"\nassert L_model_forward(X2, params3) == [[0.7311]], \"test case failed: bias = 1\"\nassert L_model_forward(X4, params4) == [[0.5]], \"test case failed: two-layer, Z=0\"\nassert L_model_forward(X5, params5) == [[0.5]], \"test case failed: ReLU zeros\"\nassert L_model_forward(X6, params6) == [[0.8808, 0.5]], \"test case failed: batch of 2 examples\"\nassert L_model_forward(X7, params7) == [[0.3775]], \"test case failed: mixed weights\"\nassert L_model_forward(X8, params8) == [[0.2689]], \"test case failed: negative bias\"\nassert L_model_forward(X9, params9) == [[0.6457]], \"test case failed: realistic 2-layer\"\nassert L_model_forward(X10, params10) == [[0.4502]], \"test case failed: small negative Z\""}
{"task_id": 81, "completion_id": 0, "passed": false, "result": "failed: Failed on example 1", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    \u03b5 = 1e-15\n    A2_clipped = np.clip(A2, \u03b5, 1 - \u03b5)\n    y_part = Y * np.log(A2_clipped)\n    one_minus_y_part = (1 - Y) * np.log(1 - A2_clipped)\n    cost = np.sum(y_part + one_minus_y_part)\n    return round(cost, 6)\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: name 'epsilon_soft' is not defined", "solution": "import numpy as np\n\nassert epsilon_soft([1.2, 0.3, 1.2, -0.1], 0.1) == [0.925, 0.025, 0.025, 0.025], \"Test-1 failed: tie situation with \u03b5 = 0.1\"\nassert epsilon_soft([5, 6, 7], 0) == [0.0, 0.0, 1.0], \"Test-2 failed: \u03b5 = 0 (pure greedy)\"\nassert epsilon_soft([2, 2, 2], 0.3) == [0.8, 0.1, 0.1], \"Test-3 failed: all equal Q-values\"\nassert epsilon_soft([-1, -5], 1) == [0.5, 0.5], \"Test-4 failed: \u03b5 = 1 (fully uniform)\"\nassert epsilon_soft([0], 0.5) == [1.0], \"Test-5 failed: single action case\"\nassert epsilon_soft([10, 0, -1, 8], 0.2) == [0.85, 0.05, 0.05, 0.05], \"Test-6 failed: general case\"\nassert len(epsilon_soft([1, 2, 3, 4, 5], 0.4)) == 5, \"Test-10 failed: wrong output length\""}
{"task_id": 86, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    num_samples = len(predictions[0])\n    result = []\n    for i in range(num_samples):\n        sample = [tree[i] for tree in predictions]\n        label_type = type(sample[0])\n        counts = {}\n        for label in sample:\n            counts[label] = counts.get(label, 0) + 1\n        max_count = max(counts.values())\n        tied_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n        if len(tied_labels) == 1:\n            chosen_label = tied_labels[0]\n        else:\n            if isinstance(label_type, (int, float)):\n                sorted_labels = sorted(tied_labels, key=lambda x: float(x))\n            else:\n                sorted_labels = sorted(tied_labels)\n            chosen_label = sorted_labels[0]\n        result.append(chosen_label)\n    return result\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 88, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        result = np.logaddexp(0.0, z)\n        return round(result, 4)\n    else:\n        z_array = np.asarray(z)\n        result = np.logaddexp(0.0, z_array)\n        rounded = np.round(result, 4)\n        return rounded.tolist()\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 90, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to the nearest 4th decimal place. If the policy\n        does not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    true_values = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    if not isinstance(estimates, dict) or len(estimates) == 0:\n        return np.nan\n    sorted_indices = sorted(estimates.keys())\n    squared_errors = []\n    for idx in sorted_indices:\n        true_val = true_values[idx]\n        est_val = estimates[idx]\n        squared_errors.append((est_val - true_val) ** 2)\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nassert mse({\"arm_evs\": [0.5, 0.2, 0.9]}, {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}) == 0.0075, \"test 1 failed\"\nassert mse({\"arm_evs\": [1.0, 0.0]}, {\"ev_estimates\": {1: 0.2, 0: 0.8}}) == 0.04, \"test 2 failed\"\nassert mse({\"arm_evs\": [0.3, 0.6, 0.9, 0.1]}, {\"ev_estimates\": {0: 0.3, 1: 0.6, 2: 0.9, 3: 0.1}}) == 0.0, \"test 3 failed\"\nassert mse({\"arm_evs\": [0.0, -1.0, 1.0]}, {\"ev_estimates\": {0: 0.5, 1: 0.0, 2: 1.5}}) == 0.5, \"test 4 failed\"\nassert np.isnan(mse({\"arm_evs\": [0.1, 0.2]}, {\"ev_estimates\": {}})), \"test 5 failed\"\nassert mse({\"arm_evs\": [2.0]}, {\"ev_estimates\": {0: 3.5}}) == 2.25, \"test 6 failed\"\nassert mse({\"arm_evs\": [0.0, 1.0]}, {\"ev_estimates\": {0: 0.35, 1: 0.35}}) == 0.2725, \"test 9 failed\"\nassert mse({\"arm_evs\": [5.0, 5.0, 5.0]}, {\"ev_estimates\": {0: 4.0, 1: 6.0, 2: 5.0}}) == 0.6667, \"test 10 failed\""}
{"task_id": 96, "completion_id": 0, "passed": false, "result": "failed: name 'additive_ngram_log_prob' is not defined", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import defaultdict\nassert additive_ngram_log_prob([\"hello world\"], \"hello world hello\", 1, 1) == -2.7489, \"failed on unigram repetition\"\nassert additive_ngram_log_prob([\"a b c d\"], \"a b c d\", 3, 1) == -2.1972, \"failed on exact trigram\"\nassert additive_ngram_log_prob([\"the cat\"], \"the mouse\", 2, 1) == -1.3863, \"failed on unseen word in bigram\"\nassert additive_ngram_log_prob([\"cat sat\"], \"mouse cat\", 2, 1) == -1.0986, \"failed on unseen context\"\nassert additive_ngram_log_prob([\"a a b b\"], \"a b\", 1, 0.5) == -1.5769, \"failed on K=0.5 smoothing\"\nassert additive_ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 3, 1) == -1.9459, \"failed on trigram with unknown\"\nassert additive_ngram_log_prob([\"a b c\", \"a b d\"], \"a b d\", 2, 2) == -2.4849, \"failed on K=2 bigram\"\nassert additive_ngram_log_prob([\"hello world\"], \"foo\", 1, 1) == -1.6094, \"failed on completely unknown word\""}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: failed on 2\u00d72 full-rank matrix", "solution": "import numpy as np\nimport numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    K = int(K)\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    X_hat_initial = W @ H\n    initial_loss = np.sum((X - X_hat_initial) ** 2) + alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n    best_loss = initial_loss\n    best_W = W.copy()\n    best_H = H.copy()\n    for iteration in range(max_iter):\n        A = H @ H.T + alpha * np.identity(K)\n        b = X @ H.T\n        W_new = np.linalg.lstsq(A, b, rcond=None)[0]\n        A = W @ W.T + alpha * np.identity(K)\n        b = W @ X\n        H_new = np.linalg.lstsq(A, b, rcond=None)[0]\n        X_hat = W_new @ H_new\n        new_loss = np.sum((X - X_hat) ** 2) + alpha * (np.sum(W_new ** 2) + np.sum(H_new ** 2))\n        if new_loss < best_loss:\n            best_loss = new_loss\n            best_W = W_new\n            best_H = H_new\n            if best_loss < tol:\n                break\n        else:\n            W = W_new\n            H = H_new\n    X_hat = best_W @ best_H\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    return X_hat_rounded\nassert np.allclose(als_factorization(np.array([[1.,2.],[3.,4.]]),2,alpha=0.0,max_iter=1000,tol=1e-8),[[1.0,2.0],[3.0,4.0]],atol=1e-3),\"failed on 2\u00d72 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.,3.],[4.,5.,6.]]),2,alpha=0.0),[[1.0,2.0,3.0],[4.0,5.0,6.0]],atol=1e-3),\"failed on 2\u00d73 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[7.,8.],[2.,1.],[3.,4.]]),2,alpha=0.0),[[7.0,8.0],[2.0,1.0],[3.0,4.0]],atol=1e-3),\"failed on 3\u00d72 matrix\"\nassert np.allclose(als_factorization(np.array([[1.5,2.5],[3.5,4.5]]),2,alpha=0.0),[[1.5,2.5],[3.5,4.5]],atol=1e-3),\"failed on decimal matrix\"\nassert np.allclose(als_factorization(np.array([[10.]]),1,alpha=0.0),[[10.0]],atol=1e-3),\"failed on 1\u00d71 matrix\"\nassert np.allclose(als_factorization(np.array([[2.,2.],[2.,2.]]),1,alpha=0.0),[[2.0,2.0],[2.0,2.0]],atol=1e-3),\"failed on constant matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.],[2.,4.]]),1,alpha=0.0),[[1.0,2.0],[2.0,4.0]],atol=1e-3),\"failed on rank-1 2\u00d72 matrix\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (6,2) (2,2) ", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = []\n    for _ in range(K):\n        if not centroids:\n            distances = np.linalg.norm(X - X[0], axis=1)\n            selected = np.argmax(distances)\n        else:\n            distances = np.linalg.norm(X - centroids, axis=1)\n            selected = np.argmax(distances)\n        centroids.append(X[selected, :])\n    previous_assignments = None\n    for _ in range(max_iter):\n        distances = np.linalg.norm(X - centroids, axis=1)\n        assignments = np.argmin(distances, axis=0)\n        if previous_assignments is not None:\n            if np.array_equal(assignments, previous_assignments):\n                break\n        previous_assignments = assignments\n        new_centroids = []\n        for j in range(K):\n            mask = assignments == j\n            if np.sum(mask) == 0:\n                new_centroids.append(centroids[j])\n            else:\n                selected_samples = X[mask]\n                new_centroid = np.mean(selected_samples, axis=0)\n                new_centroids.append(new_centroid)\n        if np.array_equal(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    rounded = [list(np.round(centroid, 4)) for centroid in centroids]\n    rounded.sort(key=lambda x: x)\n    return rounded\nassert kmeans(np.array([[1,2],[1,4],[1,0],[10,2],[10,4],[10,0]]),2,random_state=42)==[[1.0,2.0],[10.0,2.0]],\"failed: basic 2-cluster example\"\nassert kmeans(np.array([[-5,0],[-6,-1],[-4,1],[0,5],[1,6],[-1,4],[5,0],[6,1],[4,-1]]),3,random_state=0)==[[-5.0,0.0],[0.0,5.0],[5.0,0.0]],\"failed: three clearly separated clusters\"\nassert kmeans(np.array([[0,0],[0,1],[10,0],[10,1]]),2,random_state=7)==[[0.0,0.5],[10.0,0.5]],\"failed: two vertical stripes\"\nassert kmeans(np.array([[1],[2],[8],[9]]),2,random_state=3)==[[1.5],[8.5]],\"failed: one-dimensional data\"\nassert kmeans(np.array([[1],[2],[3],[4],[5]]),1,random_state=11)==[[3.0]],\"failed: single cluster\"\nassert kmeans(np.array([[0,0,0],[0,1,0],[0,0,1],[10,0,0],[10,1,0],[10,0,1]]),2,random_state=13)==[[0.0,0.3333,0.3333],[10.0,0.3333,0.3333]],\"failed: 3-D example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),3,random_state=19)==[[1.0,1.0],[2.0,2.0],[3.0,3.0]],\"failed: K equals number of points\"\nassert kmeans(np.array([[-1,0],[-2,0],[1,0],[2,0]]),2,random_state=23)==[[-1.5,0.0],[1.5,0.0]],\"failed: symmetric clusters on x-axis\"\nassert kmeans(np.array([[0,0],[0,1],[1,0],[1,1]]),4,random_state=29)==[[0.0,0.0],[0.0,1.0],[1.0,0.0],[1.0,1.0]],\"failed: each point its own cluster\"\nassert kmeans(np.array([[2,2],[2,4],[8,2],[8,4]]),2,random_state=5)==[[2.0,3.0],[8.0,3.0]],\"failed: square split into two rectangles\""}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: name '_identity_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to text, ignoring padding tokens (0).\"\"\"\n    filtered_indices = [i for i in indices if i != 0]\n    return ''.join([inverse_vocab[i] for i in filtered_indices])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Runs the model on the input text and returns the decoded prediction.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_array = np.array(encoded, dtype=np.int64).reshape(1, -1)\n    predicted = model.predict(encoded_array)\n    predicted_ids = np.argmax(predicted, axis=1)\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hello') == 'hello', 'failed on \"hello\"'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'HELLO') == 'hello', 'failed on upper-case input'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '') == '', 'failed on empty string'\na20 = 'a' * 25\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, a20) == 'a' * 20, 'failed on long input truncation'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hi!') == 'hi', 'failed on unknown character removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'data science') == 'data science', 'failed on string with space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '       ') == '       ', 'failed on only spaces'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc xyz') == 'abc xyz', 'failed on mixed letters and space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc_def') == 'abcdef', 'failed on underscore removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'padding test') == 'padding test', 'failed on general case'"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: name 'run_example' is not defined", "solution": "\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    outputs = []\n    for example in examples:\n        prediction_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction = ''.join(prediction_chars)\n        print(f'input: {example}')\n        print(f'output: {prediction}')\n        outputs.append(prediction)\n    return outputs\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: name '_expected' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    log_p = np.log(p)\n    log_1m_p = np.log(1 - p)\n    loss = -1 / m * np.sum(y * log_p + (1 - y) * log_1m_p)\n    gradient = X.T.dot(p - y) / m\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.reshape(-1, 1).tolist()\n    return (loss_rounded, gradient_list)\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])) == _expected(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])), \"test case failed: #1\"\nassert logistic_loss_and_gradient(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])) == _expected(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])), \"test case failed: #2\"\nassert logistic_loss_and_gradient(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])) == _expected(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])), \"test case failed: #3\"\nassert logistic_loss_and_gradient(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])) == _expected(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])), \"test case failed: #4\"\nassert logistic_loss_and_gradient(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])) == _expected(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])), \"test case failed: #5\"\nassert logistic_loss_and_gradient(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])) == _expected(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])), \"test case failed: #6\"\nassert logistic_loss_and_gradient(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])) == _expected(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])), \"test case failed: #7\"\nassert logistic_loss_and_gradient(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])) == _expected(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])), \"test case failed: #8\"\nassert logistic_loss_and_gradient(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])) == _expected(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])), \"test case failed: #9\"\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])) == _expected(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])), \"test case failed: #10\""}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: float division by zero", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    if m == 0:\n        return []\n    n = X_train.shape[1]\n    weights = np.ones(m) / m\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = -1\n        best_split = 0\n        for j in range(n):\n            sorted_indices = np.argsort(X_train[:, j])\n            sorted_weights = [weights[i] for i in sorted_indices]\n            min_error_j = float('inf')\n            best_split_j = 0\n            for i in range(len(sorted_weights) - 1):\n                left_y = y_train[sorted_indices[:i + 1]]\n                left_weights = sorted_weights[:i + 1]\n                right_y = y_train[sorted_indices[i + 1:]]\n                right_weights = sorted_weights[i + 1:]\n                error = 0.0\n                for k in range(i + 1):\n                    if left_y[k] == 1:\n                        error += left_weights[k]\n                for k in range(len(right_weights)):\n                    if right_y[k] == -1:\n                        error += right_weights[k]\n                if error < min_error_j:\n                    min_error_j = error\n                    best_split_j = i + 1\n            if min_error_j < min_error:\n                min_error = min_error_j\n                best_feature = j\n                best_split = best_split_j\n        threshold = X_train[sorted_indices[best_split - 1], best_feature]\n        epsilon_t = min_error\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        classifiers.append((alpha_t, threshold))\n        for i in range(m):\n            if (X_train[i, best_feature] >= threshold) != y_train[i]:\n                weights[i] *= np.exp(2 * alpha_t)\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (alpha, threshold) in classifiers:\n            if x >= threshold:\n                total += alpha\n            else:\n                total -= alpha\n        if total >= 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    return predictions\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)", "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (m, d) = X.shape\n    if d == 0:\n        return []\n    mu = np.mean(X, axis=0)\n    S_W = np.zeros((d, d), dtype=np.float64)\n    for c in np.unique(y):\n        mask = y == c\n        mu_c = np.mean(X[mask], axis=0)\n        sum_ww = np.cov(X[mask], rowvar=False)\n        S_W += sum_ww\n    S_B = np.zeros((d, d), dtype=np.float64)\n    for c in np.unique(y):\n        mask = y == c\n        mu_c = np.mean(X[mask], axis=0)\n        n_c = np.sum(mask)\n        diff = mu_c - mu\n        S_B += n_c * (diff[:, np.newaxis] @ diff[:, np.newaxis].T)\n    try:\n        A = np.linalg.pinv(S_W) @ S_B\n    except np.linalg.LinAlgError:\n        A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    eigenvalues = eigenvalues[::-1]\n    eigenvectors = eigenvectors[::-1]\n    for i in range(len(eigenvectors)):\n        vec = eigenvectors[i]\n        first_non_zero = np.argmax(np.abs(vec) > 1e-09)\n        if first_non_zero != 0:\n            if vec[first_non_zero] < 0:\n                eigenvectors[i] = -vec\n    W = eigenvectors[:n_components]\n    projected = X @ W\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 1) == [[1.4142],[2.1213],[2.1213],[2.8284],[11.3137],[12.0208],[12.0208],[12.7279]], \"test case failed: multi_class_lda(example 1, 1 component)\"\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 2) == [[1.4142,0.0],[2.1213,-0.7071],[2.1213,0.7071],[2.8284,0.0],[11.3137,0.0],[12.0208,0.7071],[12.0208,-0.7071],[12.7279,0.0]], \"test case failed: multi_class_lda(example 1, 2 components)\"\nassert multi_class_lda(np.array([[2,0],[4,0],[0,2],[0,4]]), np.array([0,0,1,1]), 1) == [[1.4142],[2.8284],[-1.4142],[-2.8284]], \"test case failed: axis-separated data\"\nassert multi_class_lda(np.array([[1],[2],[8],[9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: one-dimensional data #1\"\nassert multi_class_lda(np.array([[1,0],[2,0],[8,0],[9,0]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis data #2\"\nassert multi_class_lda(np.array([[2],[4],[6],[8],[10],[12]]), np.array([0,0,1,1,2,2]), 1) == [[2.0],[4.0],[6.0],[8.0],[10.0],[12.0]], \"test case failed: one-dimensional data #2\"\nassert multi_class_lda(np.array([[0,1],[0,2],[0,8],[0,9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis y-data\"\nassert multi_class_lda(np.array([[-2,0],[-4,0],[0,-2],[0,-4]]), np.array([0,0,1,1]), 1) == [[-1.4142],[-2.8284],[1.4142],[2.8284]], \"test case failed: negative axis data\"\nassert multi_class_lda(np.array([[0,-1],[0,-2],[0,3],[0,4]]), np.array([0,0,1,1]), 1) == [[-1.0],[-2.0],[3.0],[4.0]], \"test case failed: axis y negative-positive data\""}
{"task_id": 140, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import deque\nimport math\nfrom collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    fire_time = [[float('inf')] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (i, j) = q.popleft()\n        for (dx, dy) in directions:\n            (ni, nj) = (i + dx, j + dy)\n            if 0 <= ni < n and 0 <= nj < n:\n                if fire_time[ni][nj] > fire_time[i][j] + 1:\n                    fire_time[ni][nj] = fire_time[i][j] + 1\n                    q.append((ni, nj))\n    visited = [[float('inf')] * n for _ in range(n)]\n    visited[0][0] = 0\n    q = deque()\n    q.append((0, 0, 0))\n    while q:\n        (x, y, t) = q.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t:\n                    new_t = t + 1\n                    if new_t < visited[nx][ny]:\n                        visited[nx][ny] = new_t\n                        q.append((nx, ny, new_t))\n    return -1\nassert escape_fire_maze([\".\"]) == 0, \"test case failed: grid=['.']\"\nassert escape_fire_maze([\"F\"]) == -1, \"test case failed: grid=['F']\"\nassert escape_fire_maze([\"..\", \"..\"]) == 2, \"test case failed: grid=['..','..']\"\nassert escape_fire_maze([\"F.\", \"..\"]) == -1, \"test case failed: grid=['F.','..']\"\nassert escape_fire_maze([\"..F\", \"...\", \"...\"]) == -1, \"test case failed: grid=['..F','...','...']\"\nassert escape_fire_maze([\"...\", \".F.\", \"...\"]) == -1, \"test case failed: grid=['...','.F.','...']\"\nassert escape_fire_maze([\"..\", \".F\"]) == -1, \"test case failed: grid=['..','.F']\"\nassert escape_fire_maze([\"...\", \"...\", \"...\"]) == 4, \"test case failed: grid=['...','...','...']\"\nassert escape_fire_maze([\"....\", \"....\", \"....\", \"....\"]) == 6, \"test case failed: grid=['....','....','....','....']\"\nassert escape_fire_maze([\"F..\", \".F.\", \"..F\"]) == -1, \"test case failed: grid=['F..','.F.','..F']\""}
{"task_id": 141, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    predicted_labels = []\n    for x in X_test:\n        dists = []\n        for x_train in X_train:\n            if metric == 'manhattan':\n                dist = np.linalg.norm(x - x_train, ord=1)\n            elif metric == 'cosine':\n                dot = np.dot(x, x_train)\n                norm_x = np.linalg.norm(x, ord=2)\n                norm_train = np.linalg.norm(x_train, ord=2)\n                if norm_x == 0:\n                    cosine_sim = 0.0\n                else:\n                    cosine_sim = dot / (norm_x * norm_train)\n                dist = 1 - cosine_sim\n            else:\n                dist = np.linalg.norm(x - x_train, ord=2)\n            dists.append(dist)\n        paired = list(zip(dists, range(len(X_train))))\n        paired.sort()\n        top_k = paired[:k]\n        indices = [idx for (d, idx) in top_k]\n        labels = y_train[indices]\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        candidates = [label for (label, count) in counts.items() if count == max_count]\n        candidates.sort()\n        predicted_label = candidates[0]\n        predicted_labels.append(predicted_label)\n    return np.array(predicted_labels)\nassert knn_predict(np.array([[0, 0], [1, 1], [0, 1], [1, 0]]), np.array([0, 0, 1, 1]), np.array([[0.9, 0.9]]), 3, 'euclidean').tolist() == [1], 'Test 1 failed.'\nassert knn_predict(np.array([[0, 0], [1, 2], [3, 4]]), np.array([0, 1, 1]), np.array([[0, 1]]), 1, 'manhattan').tolist() == [0], 'Test 2 failed.'\nassert knn_predict(np.array([[1, 0], [0, 1]]), np.array([0, 1]), np.array([[1, 0.1]]), 1, 'cosine').tolist() == [0], 'Test 3 failed.'\nassert knn_predict(np.array([[0, 0], [0, 2]]), np.array([0, 1]), np.array([[0, 1]]), 2, 'euclidean').tolist() == [0], 'Test 4 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3], [8, 8], [9, 9]]), np.array([0, 0, 0, 1, 1]), np.array([[1.5, 1.5], [9, 8.9]]), 3, 'euclidean').tolist() == [0, 1], 'Test 5 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 0, 0]), np.array([[2.1, 2]]), 1).tolist() == [0], 'Test 6 failed.'\nassert knn_predict(np.array([[0, 0], [0, 1], [1, 1]]), np.array([0, 0, 1]), np.array([[0.1, 0.1]]), 2, 'minkowski').tolist() == [0], 'Test 7 failed.'\nassert knn_predict(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1.1]]), 3, 'manhattan').tolist() == [1], 'Test 8 failed.'\nassert knn_predict(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 2]), np.array([[0.9, 0.05, 0.05]]), 1, 'cosine').tolist() == [0], 'Test 9 failed.'\nassert knn_predict(np.array([[-1, -1], [-2, -2], [1, 1], [2, 2]]), np.array([0, 0, 1, 1]), np.array([[-1.5, -1.5]]), 2, 'euclidean').tolist() == [0], 'Test 10 failed.'"}
{"task_id": 146, "completion_id": 0, "passed": false, "result": "failed: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices", "solution": "import numpy as np\nimport numpy as np\nfrom collections import defaultdict\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_samples = X.shape[0]\n    m_samples = X_test.shape[0]\n    predicted = []\n    for x_test in X_test:\n        if metric == 'euclidean':\n            distances = np.linalg.norm(x_test - X, axis=0)\n        elif metric == 'manhattan':\n            x_test_reshaped = x_test.reshape(1, -1)\n            manhattan_distances = np.sum(np.abs(x_test_reshaped - X), axis=1)\n            distances = manhattan_distances\n        elif metric == 'cosine':\n            dot = np.dot(x_test, X)\n            norm_x = np.linalg.norm(x_test, axis=0)\n            norm_X = np.linalg.norm(X, axis=0)\n            denominator = norm_x * norm_X + 1e-12\n            distances = 1 - dot / denominator\n        else:\n            raise ValueError('Invalid metric')\n        indices = np.arange(n_samples)\n        dist_indices = sorted(zip(distances, indices), key=lambda x: x[0])\n        n = min(k, n_samples)\n        top_k = dist_indices[:n]\n        labels = [y[i] for (i, d) in top_k]\n        counts = defaultdict(int)\n        for label in labels:\n            counts[label] += 1\n        if not counts:\n            predicted_label = None\n        else:\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            if len(candidates) == 1:\n                predicted_label = candidates[0]\n            else:\n                predicted_label = min(candidates)\n        predicted.append(predicted_label)\n    return predicted\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'euclidean') == [0], \"Test 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 1, 'euclidean') == [1], \"Test 2 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'manhattan') == [0], \"Test 3 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'cosine') == [0], \"Test 4 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 3, 'euclidean') == [0], \"Test 5 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 1, 'manhattan') == [0], \"Test 6 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.2,0.2]]), 10, 'euclidean') == [0], \"Test 7 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), 4, 'euclidean') == [0], \"Test 8 failed\"\nassert knn_predict(np.array([[1,0],[0,1],[1,1]]), np.array([0,1,1]), np.array([[1,1]]), 1, 'cosine') == [1], \"Test 9 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.1,0.1],[0.9,0.9]]), 1, 'euclidean') == [0,1], \"Test 10 failed\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    output1 = np.dot(state, weights['W1']) + weights['b1']\n    output1 = np.relu(output1)\n    output2 = np.dot(output1, weights['W2']) + weights['b2']\n    output2 = np.relu(output2)\n    action_before_tanh = np.dot(output2, weights['W3']) + weights['b3']\n    action = np.tanh(action_before_tanh)\n    action = [round(x, 4) for x in action]\n    return action\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 165, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if isinstance(x, list) else x\n    y = np.array(y) if isinstance(y, list) else y\n    if x.size != y.size:\n        return -1\n    if x.size == 0:\n        return 0.0\n    diffs = x != y\n    sum_diffs = np.sum(diffs)\n    distance = sum_diffs / x.size\n    return round(distance, 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 171, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\nfrom sklearn.utils import shuffle\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    if len(set(y_train)) == 1:\n        unique_label = min(y_train)\n        return [unique_label] * len(X_test)\n    original_labels = sorted(list(set(y_train)))\n    label_map = {v: i for (i, v) in enumerate(original_labels)}\n    n_classes = len(original_labels)\n    X_train = np.array([np.append(x, 1) for x in X_train])\n    X_test = np.array([np.append(x, 1) for x in X_test])\n    n_features = X_train.shape[1] - 1\n    weights = np.random.randn(n_features + 1, 1) * 0.01\n    for epoch in range(epochs):\n        shuffled_indices = shuffle(range(len(X_train)))\n        X_batch = X_train[shuffled_indices]\n        y_batch = y_train[shuffled_indices]\n        for batch_idx in range(0, len(X_train), batch_size):\n            X_batch = X_batch[batch_idx:batch_idx + batch_size]\n            y_batch = y_batch[batch_idx:batch_idx + batch_size]\n            a = np.sigmoid(weights.dot(X_batch))\n            gradient = (a - y_batch[:, np.newaxis]) * X_batch\n            weights -= learning_rate * gradient\n            loss = -np.mean(np.log(a + 1e-15) - np.log(1 - a + 1e-15) * (1 - y_batch))\n            if epoch % 100 == 0:\n                print(f'Epoch {epoch}, Loss: {loss}')\n    a_pred = np.sigmoid(weights.dot(X_test))\n    y_pred = np.zeros_like(a_pred)\n    y_pred[a_pred >= 0.5] = label_map[1]\n    y_pred[a_pred < 0.5] = label_map[0]\n    return y_pred.tolist()\nassert logistic_regression_train_predict([[-3],[-2],[2],[3]],[0,0,1,1],[[-2.5],[2.5]]) == [0,1], \"failed on shifted 1D separation\"\nassert logistic_regression_train_predict([[1],[2],[3]],[0,0,0],[[10],[-10]]) == [0,0], \"failed on constant-zero label case\"\nassert logistic_regression_train_predict([[1],[2],[3]],[1,1,1],[[0],[4]]) == [1,1], \"failed on constant-one label case\"\nassert logistic_regression_train_predict([[1,1],[1,2],[2,3],[3,3]],[0,0,1,1],[[1,1.5],[3,4]]) == [0,1], \"failed on simple 2D separation\"\nassert logistic_regression_train_predict([[0,0,1],[1,1,1],[2,2,3],[3,3,3]],[0,0,1,1],[[0,0,0.5],[3,3,4]]) == [0,1], \"failed on 3D separation\"\nassert logistic_regression_train_predict([[1],[2],[3],[4]],[1,1,0,0],[[1.5],[3.5]]) == [1,0], \"failed on negative slope separation\"\nassert logistic_regression_train_predict([[0],[1],[10],[11]],[0,0,1,1],[[0.5],[10.5]]) == [0,1], \"failed on large gap separation\"\nassert logistic_regression_train_predict([[1,0],[0,1],[1,1],[2,2]],[0,0,1,1],[[0.2,0.2],[1.5,1.5]]) == [0,1], \"failed on mixed 2D separation\""}
{"task_id": 178, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (30,) (30,2) ", "solution": "import numpy as np\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (isinstance(n_dims, int) and isinstance(num_particles, int) and isinstance(num_iterations, int)):\n        return -1\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    x = rng.uniform(-1, 1, size=(num_particles, n_dims))\n    v = np.zeros_like(x)\n    p_best = x.copy()\n    f_val = np.sum(x ** 2)\n    g_best = f_val\n    current_min = f_val\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, size=num_particles)\n        r2 = rng.uniform(0, 1, size=num_particles)\n        v_new = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n        x_new = x + v_new\n        x_new = np.clip(x_new, -1, 1)\n        f_new = np.sum(x_new ** 2)\n        for i in range(num_particles):\n            if f_new[i] < p_best[i]:\n                p_best[i] = x_new[i]\n        g_best = np.min(p_best)\n        current_min = g_best\n        x = x_new\n        v = v_new\n    return round(current_min, 4)\nassert particle_swarm_optimisation(2, 30, 100, seed=42) == 0.0, \"test failed: particle_swarm_optimisation(2,30,100,42)\"\nassert particle_swarm_optimisation(5, 50, 200, seed=3) == 0.0, \"test failed: particle_swarm_optimisation(5,50,200,3)\"\nassert particle_swarm_optimisation(10, 60, 300, seed=7) == 0.0, \"test failed: particle_swarm_optimisation(10,60,300,7)\"\nassert particle_swarm_optimisation(3, 10, 150, seed=11) == 0.0, \"test failed: particle_swarm_optimisation(3,10,150,11)\"\nassert particle_swarm_optimisation(4, 80, 250, seed=19) == 0.0, \"test failed: particle_swarm_optimisation(4,80,250,19)\"\nassert particle_swarm_optimisation(6, 40, 120, seed=23) == 0.0, \"test failed: particle_swarm_optimisation(6,40,120,23)\"\nassert particle_swarm_optimisation(1, 20, 90, seed=29) == 0.0, \"test failed: particle_swarm_optimisation(1,20,90,29)\"\nassert particle_swarm_optimisation(8, 70, 300, seed=31) == 0.0, \"test failed: particle_swarm_optimisation(8,70,300,31)\"\nassert particle_swarm_optimisation(2, 1, 1, seed=2) == 0.0, \"test failed: particle_swarm_optimisation(2,1,1,2)\"\nassert particle_swarm_optimisation(-1, 30, 100) == -1, \"test failed: invalid input not handled\""}
{"task_id": 180, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0:\n        effective_k = len(y_train)\n    else:\n        effective_k = min(k, len(y_train))\n    X_train_np = np.array(X_train)\n    predictions = []\n    for test_sample in X_test:\n        test_sample_np = np.array(test_sample)\n        distances = np.linalg.norm(X_train_np - test_sample_np, axis=1)\n        dist_indices = list(zip(distances, np.arange(len(X_train))))\n        sorted_pairs = sorted(dist_indices, key=lambda x: x[0])\n        nearest = sorted_pairs[:effective_k]\n        nearest_indices = [pair[1] for pair in nearest]\n        targets = [y_train[i] for i in nearest_indices]\n        if task == 'classification':\n            counts = Counter(targets)\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            candidates.sort()\n            prediction = candidates[0]\n        else:\n            avg = np.mean(targets)\n            prediction = round(avg, 4)\n        predictions.append(prediction)\n    return predictions\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 184, "completion_id": 0, "passed": false, "result": "failed: failed: simple 1-D split", "solution": "import numpy as np\nimport numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def build_tree(samples, labels, max_depth, current_depth):\n        if np.unique(labels).size == 1:\n            return {'majority_label': labels[0]}\n        if max_depth is not None and current_depth >= max_depth:\n            return {'majority_label': mode(labels)}\n        (best_feature, best_threshold) = find_best_split(samples, labels)\n        (left_samples, left_labels, right_samples, right_labels) = split(samples, labels, best_feature, best_threshold)\n        if len(left_samples) == 0 or len(right_samples) == 0:\n            return {'majority_label': mode(labels)}\n        left_child = build_tree(left_samples, left_labels, max_depth, current_depth + 1)\n        right_child = build_tree(right_samples, right_labels, max_depth, current_depth + 1)\n        majority_label = mode(labels)\n        return {'feature': best_feature, 'threshold': best_threshold, 'left': left_child, 'right': right_child, 'majority_label': majority_label}\n\n    def find_best_split(samples, labels):\n        n_samples = len(samples)\n        if n_samples == 0:\n            return (None, None)\n        n_features = len(samples[0])\n        best_gain = -1\n        best_feature = None\n        best_threshold = None\n        for feature in range(n_features):\n            feature_values = samples[:, feature]\n            sorted_values = np.sort(feature_values)\n            unique_values = np.unique(sorted_values)\n            midpoints = []\n            for i in range(len(unique_values) - 1):\n                mid = (unique_values[i] + unique_values[i + 1]) / 2\n                midpoints.append(mid)\n            for midpoint in midpoints:\n                (left_samples, left_labels, right_samples, right_labels) = split(samples, labels, feature, midpoint)\n                left_impurity = 0 if np.unique(left_labels).size == 1 else 1\n                right_impurity = 0 if np.unique(right_labels).size == 1 else 1\n                gain = 1 - (left_impurity * len(left_samples) + right_impurity * len(right_samples)) / n_samples\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = midpoint\n        return (best_feature, best_threshold)\n\n    def split(samples, labels, feature, threshold):\n        feature_values = samples[:, feature]\n        split_index = np.where(feature_values <= threshold)[0]\n        left_samples = samples[:, :split_index + 1]\n        left_labels = labels[:split_index + 1]\n        right_samples = samples[:, split_index + 1:]\n        right_labels = labels[split_index + 1:]\n        return (left_samples, left_labels, right_samples, right_labels)\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5],[5.5]])) == [0,0,1], \"failed: simple 1-D split\"\nassert decision_tree_predict(np.array([[0,0],[1,1],[2,2],[9,9],[10,10],[11,11]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[10,10]])) == [0,1], \"failed: two-dimensional clearly separated\"\nassert decision_tree_predict(np.array([[1],[2],[3],[10],[11],[12],[20],[21],[22]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[2.5],[11.5],[21]])) == [0,1,2], \"failed: three-class 1-D split\"\nassert decision_tree_predict(np.array([[1],[2],[3]]), np.array([1,1,1]), np.array([[0],[5]])) == [1,1], \"failed: all labels identical\"\nassert decision_tree_predict(np.array([[0.1],[0.2],[0.3],[0.4],[0.5],[0.6]]), np.array([0,0,0,1,1,1]), np.array([[0.25],[0.55]])) == [0,1], \"failed: threshold around 0.35\"\nassert decision_tree_predict(np.array([[5.1,3.5,1.4],[4.9,3.0,1.4],[6.2,3.4,5.4],[5.9,3.0,5.1]]), np.array([0,0,1,1]), np.array([[5.0,3.4,1.5],[6.0,3.1,5.0]])) == [0,1], \"failed: example in task description\"\nassert decision_tree_predict(np.array([[0,2],[1,2],[2,2],[0,10],[1,10],[2,10]]), np.array([0,0,0,1,1,1]), np.array([[0,3],[0,9]])) == [0,1], \"failed: split on second feature\"\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1]), np.array([[1.5],[4.5]])) == [0,1], \"failed: odd number of samples\"\nassert decision_tree_predict(np.array([[1],[1],[2],[2],[3],[3],[10],[10],[11],[11]]), np.array([0,0,0,0,0,0,1,1,1,1]), np.array([[1],[10],[3]])) == [0,1,0], \"failed: duplicates in features\"\nassert decision_tree_predict(np.array([[0],[5],[10],[15]]), np.array([0,1,2,3]), np.array([[12],[1]])) == [2,0], \"failed: multi-class, arbitrary values\""}
{"task_id": 190, "completion_id": 0, "passed": false, "result": "failed: test 1 failed", "solution": "import numpy as np\nimport numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = len(y)\n    class_counts = np.unique(y, return_counts=True)[1]\n    sum_p_sq = sum(((count / n_total) ** 2 for count in class_counts))\n    G_whole = 1 - sum_p_sq\n    best_g = G_whole\n    best_feature = -1\n    best_threshold = None\n    for j in range(n_features):\n        unique_v = np.unique(X[:, j])\n        for v in unique_v:\n            mask_left = X[:, j] <= v\n            left = X[mask_left]\n            right = X[~mask_left]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            class_counts_left = np.unique(left[:, 0], return_counts=True)[1]\n            sum_p_sq_left = sum(((count / len(left)) ** 2 for count in class_counts_left))\n            G_left = 1 - sum_p_sq_left\n            class_counts_right = np.unique(right[:, 0], return_counts=True)[1]\n            sum_p_sq_right = sum(((count / len(right)) ** 2 for count in class_counts_right))\n            G_right = 1 - sum_p_sq_right\n            n_left = len(left)\n            n_right = len(right)\n            g_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if g_split < best_g:\n                best_g = g_split\n                best_feature = j\n                best_threshold = v\n            elif g_split == best_g:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = v\n                elif j == best_feature:\n                    if v < best_threshold:\n                        best_threshold = v\n    if best_feature == -1:\n        return (-1, None, round(G_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_g, 4))\nassert best_gini_split([[2], [3], [10], [19]], [0, 0, 1, 1]) == (0, 3, 0.0), \"test 1 failed\"\nassert best_gini_split([[2,3],[1,5],[3,2],[4,4]], [0,0,1,1]) == (0, 2, 0.0), \"test 2 failed\"\nassert best_gini_split([[1],[2],[3],[4]], [0,1,0,1]) == (0, 1, 0.3333), \"test 4 failed\"\nassert best_gini_split([[1,10], [2,1], [3,1], [4,10]], [0,0,1,1]) == (0, 2, 0.0), \"test 5 failed\"\nassert best_gini_split([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]], [0,0,0,1,1,1]) == (0, 3, 0.0), \"test 6 failed\"\nassert best_gini_split([[1],[2],[3]], [0,1,2]) == (0, 1, 0.3333), \"test 7 failed\"\nassert best_gini_split([[1,10],[2,10],[1,1],[2,1]], [0,0,1,1]) == (1, 1, 0.0), \"test 8 failed\"\nassert best_gini_split([[1],[1],[1]], [0,1,0]) == (-1, None, 0.4444), \"test 9 failed\"\nassert best_gini_split([[1,5,9],[2,6,8],[3,7,7],[4,8,6]], [0,0,1,1]) == (0, 2, 0.0), \"test 10 failed\""}
{"task_id": 191, "completion_id": 0, "passed": false, "result": "failed: test failed: metric('euclidean')([1,2,3],[4,5,6])", "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n\n        def d(x, y):\n            return -1\n        return d\n\n    def d(x, y):\n        try:\n            x_arr = np.asarray(x)\n            y_arr = np.asarray(y)\n        except:\n            return -1\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return -1\n        if len(x_arr) != len(y_arr):\n            return -1\n        if len(x_arr) == 0 or len(y_arr) == 0:\n            return -1\n        for element in x_arr:\n            if not isinstance(element, (int, float)):\n                return -1\n        for element in y_arr:\n            if not isinstance(element, (int, float)):\n                return -1\n        if name == 'cosine':\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            if x_norm == 0 or y_norm == 0:\n                return -1\n        if name == 'euclidean':\n            diff = x_arr - y_arr\n            distance = np.sqrt(np.sum(diff ** 2))\n        elif name == 'manhattan':\n            distance = np.sum(np.abs(x_arr - y_arr))\n        elif name == 'chebyshev':\n            distance = np.max(np.abs(x_arr - y_arr))\n        elif name == 'cosine':\n            dot_product = np.dot(x_arr, y_arr)\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            distance = 1 - dot_product / (x_norm * y_norm)\n        else:\n            return -1\n        distance = round(distance, 4)\n        return distance\n    return d\nassert metric('euclidean')([1,2,3],[4,5,6]) == 5.1962, \"test failed: metric('euclidean')([1,2,3],[4,5,6])\"\nassert metric('manhattan')([1,2,3],[4,5,6]) == 9.0, \"test failed: metric('manhattan')([1,2,3],[4,5,6])\"\nassert metric('chebyshev')([1,2,3],[4,5,6]) == 3.0, \"test failed: metric('chebyshev')([1,2,3],[4,5,6])\"\nassert metric('cosine')([1,0],[0,1]) == 1.0, \"test failed: metric('cosine')([1,0],[0,1])\"\nassert metric('cosine')([1,2],[1,2]) == 0.0, \"test failed: metric('cosine')([1,2],[1,2])\"\nassert metric('euclidean')([0,0],[0,0]) == 0.0, \"test failed: metric('euclidean')([0,0],[0,0])\"\nassert metric('manhattan')([3,4,5],[3,4,5]) == 0.0, \"test failed: metric('manhattan') identical vectors\"\nassert metric('unknown')([1,2],[3,4]) == -1, \"test failed: metric('unknown') should be -1\"\nassert metric('euclidean')([1,2,3],[1,2]) == -1, \"test failed: metric('euclidean') mismatched length\"\nassert metric('cosine')([0,0,0],[1,0,0]) == -1, \"test failed: metric('cosine') zero-norm vector\""}
{"task_id": 197, "completion_id": 0, "passed": false, "result": "failed: name 'Any' is not defined", "solution": "import numpy as np\nfrom itertools import product\nimport numpy as np\nfrom itertools import product\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    is_continuous = False\n    action_dim = 0\n    if hasattr(env.action_space, 'spaces'):\n        action_dim = len(env.action_space.spaces)\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'shape'):\n                is_continuous = True\n                break\n    elif hasattr(env.action_space, 'shape'):\n        is_continuous = True\n    else:\n        action_dim = 1\n    if is_continuous:\n        n_actions_per_dim = [np.inf] * action_dim\n        action_ids = None\n    elif hasattr(env.action_space, 'spaces'):\n        possible_actions = []\n        for sub_space in env.action_space.spaces:\n            possible_actions.append(list(range(sub_space.n)))\n        action_ids = list(product(*possible_actions))\n        n_actions_per_dim = [sub_space.n for sub_space in env.action_space.spaces]\n    else:\n        n_actions = env.action_space.n\n        n_actions_per_dim = [n_actions]\n        action_ids = list(range(n_actions))\n    return (n_actions_per_dim, action_ids, action_dim)\nassert action_stats(SimpleNamespace(action_space=D(4)), False, False) == ([4], [0, 1, 2, 3], 1), \"failed test 1\"\nexpected_ids = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(3)])), True, False) == ([2, 3], expected_ids, 2), \"failed test 2\"\nmix_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), C(3)]))\nassert action_stats(mix_env, True, False) == ([2, np.inf], None, 2), \"failed test 3\"\nassert action_stats(SimpleNamespace(action_space=C(5)), False, True) == ([np.inf], None, 1), \"failed test 4\"\ncont_env = SimpleNamespace(action_space=SimpleNamespace(shape=(4,)))\nassert action_stats(cont_env, True, True) == ([np.inf, np.inf, np.inf, np.inf], None, 4), \"failed test 5\"\nassert action_stats(SimpleNamespace(action_space=D(1)), False, False) == ([1], [0], 1), \"failed test 6\"\nids_3d = list(product(range(2), repeat=3))\ntri_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(2), D(2)]))\nassert action_stats(tri_env, True, False) == ([2, 2, 2], ids_3d, 3), \"failed test 7\"\nids_31 = list(product(range(3), range(1)))\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(3), D(1)])), True, False) == ([3, 1], ids_31, 2), \"failed test 8\"\nmix2_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[C(2), D(3)]))\nassert action_stats(mix2_env, True, False) == ([np.inf, 3], None, 2), \"failed test 9\"\nassert action_stats(SimpleNamespace(action_space=D(10)), False, False) == ([10], list(range(10)), 1), \"failed test 10\""}
{"task_id": 202, "completion_id": 0, "passed": false, "result": "failed: failed: two well-separated clusters", "solution": "import numpy as np\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    if k == 0:\n        return []\n    medoid_indices = set(range(k))\n    current_medoids = [X[i] for i in medoid_indices]\n    current_cost = 0\n    for sample in X:\n        min_dist = float('inf')\n        min_medoid_idx = -1\n        for (medoid_idx, medoid) in enumerate(current_medoids):\n            dist = np.linalg.norm(medoid - sample)\n            if dist < min_dist:\n                min_dist = dist\n                min_medoid_idx = medoid_idx\n        current_cost += min_dist\n    while True:\n        best_delta = 0\n        best_swap = None\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoid_indices:\n                    new_medoids = current_medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_cost = 0\n                    for sample in X:\n                        min_dist = float('inf')\n                        min_medoid_idx = -1\n                        for (medoid_idx, medoid) in enumerate(new_medoids):\n                            dist = np.linalg.norm(medoid - sample)\n                            if dist < min_dist:\n                                min_dist = dist\n                                min_medoid_idx = medoid_idx\n                        new_cost += min_dist\n                    delta = new_cost - current_cost\n                    if delta < 0:\n                        if delta > best_delta:\n                            best_delta = delta\n                            best_swap = (i, j)\n        if best_swap is not None:\n            (i, j) = best_swap\n            new_medoids = current_medoids.copy()\n            new_medoids[i] = X[j]\n            current_medoids = new_medoids\n            medoid_indices.discard(i)\n            medoid_indices.add(j)\n            current_cost = new_cost\n        else:\n            break\n    labels = []\n    for sample in X:\n        min_dist = float('inf')\n        min_label = 0\n        for (label, medoid) in enumerate(current_medoids):\n            dist = np.linalg.norm(medoid - sample)\n            if dist < min_dist:\n                min_dist = dist\n                min_label = label\n        labels.append(min_label)\n    return labels\nassert pam_clustering(np.array([[0,0]]),1)==[0],\"failed: single sample, k=1\"\nassert pam_clustering(np.array([[0,0],[1,0],[0,1],[5,5],[6,5],[5,6]]),2)==[0,0,0,1,1,1],\"failed: two well-separated clusters\"\nassert pam_clustering(np.array([[0],[10]]),2)==[0,1],\"failed: two samples, k=2\"\nassert pam_clustering(np.array([[1],[2],[3]]),3)==[0,1,2],\"failed: k equals number of samples\"\nassert pam_clustering(np.array([[-1,-1],[0,0],[1,1]]),1)==[0,0,0],\"failed: k=1, centre should move\"\nassert pam_clustering(np.array([[0],[1],[2],[3],[4]]),1)==[0,0,0,0,0],\"failed: all points one cluster\"\nassert pam_clustering(np.array([[1],[4],[7],[10]]),4)==[0,1,2,3],\"failed: each point its own cluster\""}
{"task_id": 216, "completion_id": 0, "passed": false, "result": "failed: failed: simple linear case", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if not (isinstance(x_train, (np.ndarray, list)) and isinstance(y_train, (np.ndarray, list)) and isinstance(x_test, (np.ndarray, list))):\n        return -1\n    m_train = x_train.shape[0] if isinstance(x_train, np.ndarray) else len(x_train)\n    m_test = x_test.shape[0] if isinstance(x_test, np.ndarray) else len(x_test)\n    if m_train != m_test:\n        return -1\n    if isinstance(x_train, np.ndarray) and x_train.ndim != 2:\n        return -1\n    if isinstance(x_test, np.ndarray) and x_test.ndim != 2:\n        return -1\n    k_train = x_train.shape[1] if isinstance(x_train, np.ndarray) else len(x_train[0])\n    k_test = x_test.shape[1] if isinstance(x_test, np.ndarray) else len(x_test[0])\n    if k_train == 0 or k_test == 0:\n        return -1\n    if n_iterations < 1:\n        return -1\n    expanded_features_train = []\n    for feature in x_train:\n        poly = [np.ones(degree + 1)]\n        for d in range(degree):\n            poly.append(feature[d])\n        expanded_features_train.append(poly)\n    expanded_features_train = np.array(expanded_features_train)\n    feature_matrix = np.hstack((expanded_features_train, np.ones((m_train, 1))))\n    if isinstance(x_test, np.ndarray) and x_test.shape[1] != feature_matrix.shape[1]:\n        return -1\n    if not isinstance(x_test, np.ndarray) and len(x_test[0]) != feature_matrix.shape[1]:\n        return -1\n    X = feature_matrix[:, :-1]\n    X_mean = np.mean(X, axis=0)\n    X_std = np.std(X, axis=0)\n    standardized_X = (X - X_mean) / X_std\n    feature_matrix = np.hstack((standardized_X, np.ones((m_train, 1))))\n    n_features = feature_matrix.shape[1]\n    weights = np.zeros(n_features, 1)\n    for _ in range(n_iterations):\n        y_pred = feature_matrix @ weights\n        errors = y_train - y_pred\n        y_pred_mean = np.mean(y_pred)\n        y_mean = np.mean(y_train)\n        grad_bias = y_pred_mean - y_mean\n        X = feature_matrix[:, :-1]\n        grad_non_bias = errors @ X / m_train\n        sum_w2 = np.sum(weights ** 2)\n        sum_w1 = np.sum(np.abs(weights[:-1]))\n        penalty = (1 - l1_ratio) * sum_w2 + l1_ratio * sum_w1\n        grad_non_bias_with_penalty = grad_non_bias + (1 - l1_ratio) * weights + l1_ratio * np.sign(weights)\n        grad = np.concatenate([grad_non_bias_with_penalty, np.array([grad_bias])])\n        weights -= learning_rate * grad\n    y_pred_test = feature_matrix @ weights\n    predictions = np.round(y_pred_test, 4).tolist()\n    return predictions\nassert elastic_net_regression([[1],[2],[3],[4]],[2,4,6,8],[[5],[6]],1,0.0,0.5,5000,0.1)==[10.0,12.0],\"failed: simple linear case\"\nassert elastic_net_regression([[0],[1],[2],[3]],[1,3,5,7],[[4]],1,0.0,0.5,6000,0.05)==[9.0],\"failed: another linear case\"\nassert elastic_net_regression([[1,1],[2,1],[3,1]],[3,5,7],[[4,1]],1,0.0,0.0,6000,0.1)==[9.0],\"failed: multi-feature ridge (ratio 0)\"\nassert elastic_net_regression([[1],[2],[3]],[2,4,6],[[4]],1,0.0,0.5,0,0.1)==-1,\"failed: n_iterations validation\"\nassert elastic_net_regression([[1,2]], [3], [[1]], 1,0.0,0.5,10,0.1)==-1,\"failed: dimension mismatch\"\nassert len(elastic_net_regression([[1],[2],[3],[4]],[1,2,3,4],[[5],[6]],1,0.0,0.5,5000,0.1))==2,\"failed: output length\"\nassert all(isinstance(v,float) for v in elastic_net_regression([[1],[2]], [2,4], [[3]], 1, 0.0,0.5,4000,0.1)),\"failed: output contains non-float values\""}
{"task_id": 217, "completion_id": 0, "passed": false, "result": "failed: module 'numpy' has no attribute 'sigmoid'", "solution": "import numpy as np\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    z = -actual * predicted\n    sigmoid_z = np.sigmoid(z)\n    grad = actual * sigmoid_z\n    sigmoid_p = np.sigmoid(predicted)\n    hessian = sigmoid_p * (1 - sigmoid_p)\n    prob = sigmoid_p\n    grad_rounded = np.round(grad, 6)\n    hessian_rounded = np.round(hessian, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    prob_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, prob_list)\nassert logistic_components([1, -1], [0.5, -0.5]) == ([0.377541, -0.377541], [0.235004, 0.235004], [0.622459, 0.377541]), \"failed on ([1, -1], [0.5, -0.5])\"\nassert logistic_components([1, -1], [10, -10]) == ([0.000045, -0.000045], [0.000045, 0.000045], [0.999955, 0.000045]), \"failed on large magnitude scores\"\nassert logistic_components([1, 1, 1], [0, 0, 0]) == ([0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with positive labels\"\nassert logistic_components([-1, -1, -1], [0, 0, 0]) == ([-0.5, -0.5, -0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with negative labels\"\nassert logistic_components([1], [-2]) == ([0.880797], [0.104994], [0.119203]), \"failed on single sample (1, -2)\"\nassert logistic_components([-1], [2]) == ([-0.880797], [0.104994], [0.880797]), \"failed on single sample (-1, 2)\"\nassert logistic_components([1, -1, 1, -1], [1, 1, -1, -1]) == ([0.268941, -0.731059, 0.731059, -0.268941], [0.196612, 0.196612, 0.196612, 0.196612], [0.731059, 0.731059, 0.268941, 0.268941]), \"failed on mixed signs\"\nassert logistic_components([1], [0]) == ([0.5], [0.25], [0.5]), \"failed on ([1], [0])\"\nassert logistic_components([1, -1], [5, -5]) == ([0.006693, -0.006693], [0.006648, 0.006648], [0.993307, 0.006693]), \"failed on moderate magnitude scores\"\nassert logistic_components([-1], [3]) == ([-0.952574], [0.045177], [0.952574]), \"failed on (-1, 3)\""}
{"task_id": 221, "completion_id": 0, "passed": false, "result": "failed: only length-1 arrays can be converted to Python scalars", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    log_diff = math.log(1 + a) - math.log(1 + p)\n    squared = np.square(log_diff)\n    return squared\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    if a.shape != p.shape:\n        return -1\n    if np.any(a < 0) or np.any(p < 0):\n        return -1\n    squared_errors = squared_log_error(a, p)\n    mean = np.mean(squared_errors)\n    return round(mean, 4)\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": false, "result": "failed: math range error", "solution": "import numpy as np\nimport numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if np.isscalar(z):\n        z = np.array([z])\n    else:\n        z = np.asarray(z)\n    e_z = math.exp(z)\n    sigmoid_z = 1 - 1 / (1 + e_z)\n    if z.ndim == 0:\n        return round(sigmoid_z[0], 4)\n    else:\n        return np.round(sigmoid_z, 4).tolist()\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(elem, a) for elem in z]\n    elif z >= 0:\n        return z\n    else:\n        return a * z\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 241, "completion_id": 0, "passed": false, "result": "failed: module 'numpy' has no attribute 'svd'", "solution": "import numpy as np\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.randn(*shape)\n    (U, sigma, V) = np.svd(A)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = V.T\n    Q_reshaped = Q.T.reshape(shape)\n    result = Q_reshaped * scale\n    return result.tolist()\nnp.random.seed(0); assert (m := orthogonal((2, 2), 1.0)); flat = np.array(m); assert np.allclose(flat @ flat.T, np.eye(2), atol=1e-6), \"orthogonal((2,2),1.0) rows not orthonormal\"\nnp.random.seed(1); assert (m := orthogonal((3, 4), 0.1)); flat = np.array(m).reshape(3, -1); assert np.allclose(flat @ flat.T, 0.01 * np.eye(3), atol=1e-6), \"orthogonal((3,4),0.1) row-orthogonality failed\"\nnp.random.seed(2); assert (m := orthogonal((4, 3), 0.7)); flat = np.array(m).reshape(4, -1); assert np.allclose(flat.T @ flat, 0.49 * np.eye(3), atol=1e-6), \"orthogonal((4,3),0.7) column-orthogonality failed\"\nnp.random.seed(3); assert (m := orthogonal((5, 5), 0.3)); flat = np.array(m); assert np.allclose(flat @ flat.T, 0.09 * np.eye(5), atol=1e-6), \"orthogonal((5,5),0.3) failed\"\nnp.random.seed(4); assert (m := orthogonal((2, 8), 0.2)); flat = np.array(m).reshape(2, -1); assert np.allclose(flat @ flat.T, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((2,8),0.2) failed\"\nnp.random.seed(5); assert (m := orthogonal((8, 2), 0.2)); flat = np.array(m).reshape(8, -1); assert np.allclose(flat.T @ flat, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((8,2),0.2) failed\"\nnp.random.seed(6); assert isinstance(orthogonal((3, 3), 1.0), list), \"Return type is not list\"\nnp.random.seed(7); assert orthogonal((1,), 0.5) == -1, \"Shape length < 2 should return -1\"\nnp.random.seed(9); shape = (4, 6); scale = 0.75; m = orthogonal(shape, scale); flat = np.array(m).reshape(shape[0], -1); expected = scale**2 * np.eye(shape[0]); assert np.allclose(flat @ flat.T, expected, atol=1e-6), \"orthogonality condition failed for (4,6)\""}
{"task_id": 243, "completion_id": 0, "passed": false, "result": "failed: type list doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    sum_state = sum(state)\n    z1 = sum_state\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = [1 / 3, 1 / 3, 1 / 3]\n    state_value = 4 * z3\n    return (round(action_probs, 4), round(state_value, 4))\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 249, "completion_id": 0, "passed": false, "result": "failed: name 'params_1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    W1 = params['W1']\n    b1 = params['b1']\n    W2 = params['W2']\n    b2 = params['b2']\n    W3 = params['W3']\n    b3 = params['b3']\n    Wa = params['Wa']\n    ba = params['ba']\n    Wc = params['Wc']\n    bc = params['bc']\n    state = np.array(state)\n    z1 = np.dot(state, W1) + b1\n    a1 = np.relu(z1)\n    z2 = np.dot(a1, W2) + b2\n    a2 = np.relu(z2)\n    z3 = np.dot(a2, W3) + b3\n    a3 = np.relu(z3)\n    action_scores = np.dot(a3, Wa) + ba\n    probabilities = np.softmax(action_scores)\n    value = np.dot(a3, Wc) + bc\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n    probabilities_list = probabilities.tolist()\n    value_list = value\n    return (probabilities_list, value_list)\nassert actor_critic_forward([1, 0], params_1) == ([0.7311, 0.2689], 1.0), \"test case failed: state=[1,0]\"\nassert actor_critic_forward([0, 1], params_1) == ([0.2689, 0.7311], 1.0), \"test case failed: state=[0,1]\"\nassert actor_critic_forward([-1, 2], params_1) == ([0.1192, 0.8808], 2.0), \"test case failed: state=[-1,2]\"\nassert actor_critic_forward([3, 3], params_1)  == ([0.5, 0.5], 6.0),       \"test case failed: state=[3,3]\"\nassert actor_critic_forward([-2, -3], params_1)== ([0.5, 0.5], 0.0),       \"test case failed: state=[-2,-3]\"\nassert actor_critic_forward([0, 0], params_2)  == ([0.8808, 0.1192], 2.0), \"test case failed: state=[0,0]\"\nassert actor_critic_forward([1, -1], params_2) == ([0.982, 0.018],  3.0), \"test case failed: state=[1,-1]\"\nassert actor_critic_forward([-1, 1], params_2) == ([0.5, 0.5],     1.0), \"test case failed: state=[-1,1]\"\nassert actor_critic_forward([-5, -5], params_2)== ([0.5, 0.5],     1.0), \"test case failed: state=[-5,-5]\"\nassert actor_critic_forward([10, 0], params_2) == ([1.0, 0.0],    12.0), \"test case failed: state=[10,0]\""}
{"task_id": 253, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w) if isinstance(w, list) else w\n    norm_w = np.linalg.norm(w, ord=2)\n    sum_squares = np.sum(w ** 2)\n    penalty = alpha * (l1_ratio * norm_w + (1 - l1_ratio) * 0.5 * sum_squares)\n    if not gradient:\n        return round(penalty, 4)\n    else:\n        sign_w = np.sign(w)\n        gradient = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        gradient = np.round(gradient, 4)\n        return gradient.tolist()\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 257, "completion_id": 0, "passed": false, "result": "failed: failed: simple threshold", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    m = X_train.shape[0]\n    n = X_train.shape[1]\n    weights = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_j = -1\n        for j in range(n):\n            sorted_samples = sorted(zip(X_train[:, j], y_train, weights), key=lambda x: x[0])\n            sorted_weights = [s[2] for s in sorted_samples]\n            cumulative = np.cumsum(sorted_weights)\n            total_weight = sum(weights)\n            half = total_weight / 2\n            split_index = np.argmax(cumulative <= half)\n            error = 0.0\n            for i in range(split_index):\n                if sorted_samples[i][1] == 1:\n                    error += sorted_samples[i][2]\n            for i in range(split_index, len(sorted_samples)):\n                if sorted_samples[i][1] == -1:\n                    error += sorted_samples[i][2]\n            if error < min_error:\n                min_error = error\n                best_j = j\n        if best_j == -1:\n            continue\n        sorted_samples = sorted(zip(X_train[:, best_j], y_train, weights), key=lambda x: x[0])\n        sorted_weights = [s[2] for s in sorted_samples]\n        cumulative = np.cumsum(sorted_weights)\n        total_weight = sum(weights)\n        half = total_weight / 2\n        split_index = np.argmax(cumulative <= half)\n        threshold = sorted_samples[split_index][0]\n        alpha_t = 0.5 * np.log((1 - min_error) / min_error)\n        stumps.append((alpha_t, threshold))\n        new_weights = []\n        for i in range(m):\n            if sorted_samples[i][1] == 1:\n                if i < split_index:\n                    new_weights.append(sorted_samples[i][2] * min_error)\n                else:\n                    new_weights.append(sorted_samples[i][2] * (1 - min_error))\n            elif i < split_index:\n                new_weights.append(sorted_samples[i][2] * min_error)\n            else:\n                new_weights.append(sorted_samples[i][2] * (1 - min_error))\n        weights = np.array(new_weights)\n    predicted_labels = []\n    for x in X_test:\n        total = 0.0\n        for (alpha, threshold) in stumps:\n            if x >= threshold:\n                total += alpha\n            else:\n                total -= alpha\n        if total > 0:\n            predicted_labels.append(1)\n        else:\n            predicted_labels.append(-1)\n    return predicted_labels\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 266, "completion_id": 0, "passed": false, "result": "failed: failed: self loop ignored", "solution": "\nfrom typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of unique vertex identifiers. The order in this list must be preserved.\n    E : List[Tuple[Any, Any]]\n        A list of edges, where each edge is a tuple (u, v) representing an undirected edge.\n\n    Returns\n    -------\n    List[List[Any]]\n        The adjacency list where each G[i] contains all vertices adjacent to V[i], sorted by their appearance in V.\n    \"\"\"\n    adj = {v: [] for v in V}\n    processed_edges = set()\n    for edge in E:\n        (u, v) = edge\n        edge_frozen = frozenset((u, v))\n        if edge_frozen not in processed_edges:\n            processed_edges.add(edge_frozen)\n            adj[u].append(v)\n            adj[v].append(u)\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    for u in V:\n        adj[u].sort(key=lambda x: vertex_to_index[x])\n    result = []\n    for u in V:\n        result.append(adj[u])\n    return result\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 273, "completion_id": 0, "passed": false, "result": "failed: name 'np' is not defined", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\nimport bisect\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if not feature or not target:\n        return (None, 0.0)\n    if isinstance(feature, np.ndarray):\n        feature = feature.tolist()\n    if isinstance(target, np.ndarray):\n        target = target.tolist()\n    combined = list(zip(feature, target))\n    combined.sort(key=lambda x: x[0])\n    sorted_features = [x[0] for x in combined]\n    sorted_target = [x[1] for x in combined]\n    if len(set(sorted_features)) == 1:\n        return (None, 0.0)\n    unique_features = []\n    prev = None\n    for f in sorted_features:\n        if f != prev:\n            unique_features.append(f)\n            prev = f\n    if len(unique_features) < 2:\n        return (None, 0.0)\n    midpoints = []\n    for i in range(len(unique_features) - 1):\n        mid = (unique_features[i] + unique_features[i + 1]) / 2\n        midpoints.append(mid)\n\n    def compute_entropy(subset):\n        if not subset:\n            return 0.0\n        counts = Counter(subset)\n        n = len(subset)\n        entropy = 0.0\n        for count in counts.values():\n            prob = count / n\n            entropy -= prob * math.log2(prob)\n        return entropy\n    n = len(sorted_target)\n    max_ig = -1\n    best_t = None\n    for t in midpoints:\n        split_index = bisect.bisect_left(sorted_features, t)\n        L = sorted_target[:split_index]\n        R = sorted_target[split_index:]\n        H_parent = compute_entropy(sorted_target)\n        H_L = compute_entropy(L)\n        H_R = compute_entropy(R)\n        ig = H_parent - len(L) / n * H_L - len(R) / n * H_R\n        if ig > max_ig:\n            max_ig = ig\n            best_t = t\n        elif ig == max_ig:\n            if t < best_t:\n                best_t = t\n    if max_ig <= 0:\n        return (None, 0.0)\n    else:\n        rounded_t = round(best_t, 4)\n        rounded_ig = round(max_ig, 4)\n        return (rounded_t, rounded_ig)\nassert best_split([2, 3, 10, 19], [0, 0, 1, 1]) == (6.5, 1.0), \"failed on perfect 2-class separation\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 1]) == (3.5, 0.8113), \"failed on unbalanced classes\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 0]) == (None, 0.0), \"failed on pure node\"\nassert best_split([1, 2, 3, 4], [0, 1, 0, 1]) == (1.5, 0.3113), \"failed on symmetric classes\"\nassert best_split([1, 2, 5, 6], [0, 0, 1, 1]) == (3.5, 1.0), \"failed on separated clusters\"\nassert best_split([10, 20, 30], [0, 1, 1]) == (15.0, 0.9183), \"failed on small dataset\"\nassert best_split([1, 2], [0, 1]) == (1.5, 1.0), \"failed on two-point perfect split\"\nassert best_split([1, 2], [0, 0]) == (None, 0.0), \"failed on two identical labels\"\nassert best_split([1, 2, 3, 4, 5], [0, 0, 1, 1, 1]) == (2.5, 0.971), \"failed on 5-point uneven split\"\nassert best_split([3, 3, 3, 3], [0, 1, 0, 1]) == (None, 0.0), \"failed on identical feature values\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    for (key, value) in globals().items():\n        if key == name and callable(value):\n            return value\n    raise ValueError('Invalid initialization function.')\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 290, "completion_id": 0, "passed": false, "result": "failed: name 'Node' is not defined", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n\n    def compare_leaf(a, b):\n        if type(a) != type(b):\n            return False\n        if isinstance(a, np.ndarray):\n            return np.allclose(a, b, atol=1e-08)\n        else:\n            return a == b\n\n    def compare_node(a, b):\n        if a.feature != b.feature:\n            return False\n        if abs(a.threshold - b.threshold) > 1e-08:\n            return False\n        return compare_trees(a.left, b.left) and compare_trees(a.right, b.right)\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return compare_leaf(tree_a.value, tree_b.value)\n    else:\n        if tree_a.feature != tree_b.feature:\n            return False\n        if abs(tree_a.threshold - tree_b.threshold) > 1e-08:\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 292, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    if parent1_array.shape != parent2_array.shape:\n        return -1\n    num_columns = parent1_array.shape[1]\n    child1 = np.column_stack((parent1_array[:, :cutoff], parent2_array[:, cutoff:])).tolist()\n    child2 = np.column_stack((parent2_array[:, :cutoff], parent1_array[:, cutoff:])).tolist()\n    return (child1, child2)\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 298, "completion_id": 0, "passed": false, "result": "failed: test case failed: unigram example", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import defaultdict, Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        return float('-inf')\n    ngrams_counter = defaultdict(int)\n    n_minus_1_grams_counter = defaultdict(int)\n    total_tokens = 0\n    if N == 1:\n        total_tokens = sum((len(sentence.split()) for sentence in corpus))\n    else:\n        for sentence in corpus:\n            tokens = sentence.split()\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n            for i in range(len(padded_tokens) - (N - 1) + 1):\n                gram = ' '.join(padded_tokens[i:i + (N - 1)])\n                n_minus_1_grams_counter[gram] += 1\n            for i in range(len(padded_tokens) - N + 1):\n                gram = ' '.join(padded_tokens[i:i + N])\n                ngrams_counter[gram] += 1\n    query_tokens = query.split()\n    if N > 1:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    if len(padded_query) < N:\n        return float('-inf')\n    total_log = 0.0\n    for i in range(len(padded_query) - N + 1):\n        current_gram = ' '.join(padded_query[i:i + N])\n        if current_gram not in ngrams_counter:\n            return float('-inf')\n        if N > 1:\n            prefix = ' '.join(padded_query[i:i + (N - 1)])\n            if prefix not in n_minus_1_grams_counter:\n                return float('-inf')\n        if N == 1:\n            prob = ngrams_counter[current_gram] / total_tokens\n        else:\n            prob = ngrams_counter[current_gram] / n_minus_1_grams_counter[prefix]\n        total_log += math.log(prob)\n    return round(total_log, 4)\nassert ngram_log_prob([\"a b a\", \"b a b\"], \"a b\", 1) == -1.3863, \"test case failed: unigram example\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love AI\", 2) == -0.6931, \"test case failed: bigram simple\"\nassert ngram_log_prob([\"hello world\"], \"hello world\", 2) == 0.0, \"test case failed: probability 1 for every bigram\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b c\", 3) == -0.6931, \"test case failed: trigram with mixed counts\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b e\", 3) == float('-inf'), \"test case failed: unseen trigram should be -inf\"\nassert ngram_log_prob([\"hello world\"], \"unknown\", 1) == float('-inf'), \"test case failed: unseen unigram should be -inf\"\nassert ngram_log_prob([\"red blue blue red\"], \"red\", 1) == -0.6931, \"test case failed: unigram single token\"\nassert ngram_log_prob([\"a a b\", \"a a a\"], \"a a\", 2) == -2.1203, \"test case failed: complex bigram counts\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 2) == float('-inf'), \"test case failed: unknown bigram\"\nassert ngram_log_prob([\"cat sat\"], \"cat sat\", 2) == 0.0, \"test case failed: perfect bigram match\""}
{"task_id": 302, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    if n == 0:\n        return []\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                W[i][j] = 0\n            else:\n                dx = X[i] - X[j]\n                distance = np.linalg.norm(dx)\n                W[i][j] = 1 / (1 + distance)\n    D = np.zeros_like(W)\n    for i in range(n):\n        D[i][i] = np.sum(W[i])\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    eigenvalues.sort()\n    selected_eigenvalues = eigenvalues[:k]\n    selected_eigenvectors = eigenvectors[:, :k]\n    E = selected_eigenvectors.T\n    centroids = E[:k].copy()\n    assignments = None\n    for iter in range(100):\n        distances = np.zeros((n, k))\n        for i in range(n):\n            for j in range(k):\n                distances[i][j] = np.linalg.norm(E[i] - centroids[j])\n        current_assignments = np.argmin(distances, axis=1)\n        empty_indices = np.where(current_assignments == -1)[0]\n        if len(empty_indices) > 0:\n            for idx in empty_indices:\n                centroids[idx] = E[np.random.randint(n)]\n            distances = np.zeros((n, k))\n            for i in range(n):\n                for j in range(k):\n                    distances[i][j] = np.linalg.norm(E[i] - centroids[j])\n            current_assignments = np.argmin(distances, axis=1)\n        if assignments is not None:\n            if np.array_equal(current_assignments, assignments):\n                break\n        else:\n            assignments = current_assignments.copy()\n        for j in range(k):\n            mask = current_assignments == j\n            centroids[j] = np.mean(E[mask], axis=0)\n    else:\n        pass\n    return current_assignments.tolist()\nassert spectral_clustering(X1, 2) == [0, 0, 1, 1], \"test case failed: spectral_clustering(X1, 2)\"\nassert spectral_clustering(X2, 3) == [0, 1, 2, 0, 1, 2], \"test case failed: spectral_clustering(X2, 3)\"\nassert spectral_clustering(X3, 1) == [0] * 10, \"test case failed: spectral_clustering(X3, 1)\"\nassert spectral_clustering(X4, 1) == [0, 0, 0], \"test case failed: spectral_clustering(X4, 1)\"\nassert set(res5) == {0, 1} and res5.count(0) != 0 and res5.count(1) != 0, \"test case failed: spectral_clustering(X5, 2)\"\nassert set(labels6) == {0, 1, 2}, \"test case failed: spectral_clustering(X6, 3)\"\nassert set(labels7) == {0, 1}, \"test case failed: spectral_clustering(X7, 2)\"\nassert labels8 == list(range(5)), \"test case failed: spectral_clustering(X8, 5)\"\nassert spectral_clustering(X9, 2) == [0, 1], \"test case failed: spectral_clustering(X9, 2)\"\nassert set(labels10) <= {0, 1}, \"test case failed: spectral_clustering(X10, 2)\""}
{"task_id": 303, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic example", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_index = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_index]\n    (curr_mine, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    top_border = '------------------------- DEBUG -------------------------'\n    bottom_border = '----------------------- END DEBUG -----------------------'\n    line2 = f'Mine (prev) [{prev_label}]: {prev_mine}'\n    line3 = f'Theirs (prev) [{prev_label}]: {prev_gold}'\n    line4 = f'Mine [{curr_label}]: {curr_mine}'\n    line5 = f'Theirs [{curr_label}]: {curr_gold}{warn_str}'\n    lines = [top_border, line2, line3, line4, line5, bottom_border]\n    return '\\n'.join(lines)\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 304, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        intercept = np.ones(X.shape[0], dtype=np.float64)\n        X = np.hstack((intercept.reshape(-1, 1), X))\n    size_b = X.shape[1]\n    if V is None:\n        V_inv = np.identity(size_b)\n    elif isinstance(V, (int, float)):\n        V_inv = np.identity(size_b) * V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.identity(size_b)\n        for i in range(len(V)):\n            V_inv[i, i] = V[i]\n    else:\n        if V.shape != (size_b, size_b):\n            raise ValueError('V must be a square matrix of size (M+1) if fit_intercept is True, else (M, M).')\n        V_inv = V\n    XtX = X.T @ X\n    sum_matrix = V_inv + XtX\n    try:\n        \u03a3_b = np.linalg.inv(sum_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError('sum_matrix is not invertible. This could be due to a degenerate design matrix.')\n    prior_mean = V_inv @ mu\n    xty = X.T @ y\n    sum_terms = prior_mean + xty\n    mu_b = \u03a3_b @ sum_terms\n    mu_b_rounded = [round(coeff, 4) for coeff in mu_b]\n    return mu_b_rounded\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0])) == [0.5, 1.6667], \"test case 1 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,5.0])) == [1.0, 1.6667], \"test case 2 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0])) == [0.8, 0.8], \"test case 3 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0]), fit_intercept=False) == [1.8667], \"test case 4 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,3.0]), V=[2,2]) == [1.2632, 0.9474], \"test case 5 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0]), mu=1.0) == [1.0, 1.0], \"test case 6 failed\"\nassert bayesian_posterior_mean(np.array([[2.0],[4.0],[6.0]]), np.array([1.0,2.0,3.0]), V=2, fit_intercept=False) == [0.4956], \"test case 7 failed\"\nassert bayesian_posterior_mean(np.array([[0.0],[1.0]]), np.array([1.0,2.0]), fit_intercept=False) == [1.0], \"test case 8 failed\"\nassert bayesian_posterior_mean(np.array([[0.0]]), np.array([0.0]), mu=10.0, fit_intercept=False) == [10.0], \"test case 9 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0],[4.0]]), np.array([1.0,2.0,3.0,4.0]), V=[1,1000]) == [0.0002, 0.9999], \"test case 10 failed\""}
{"task_id": 308, "completion_id": 0, "passed": false, "result": "failed: weights out of range in mel_filterbank(1024,40,22050)", "solution": "import numpy as np\nimport numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    f_points = 700 * (10 ** (mel_points / 2595) - 1)\n    filterbank = []\n    for i in range(n_filters):\n        if i == 0:\n            f_i_center = f_points[0]\n            f_i_low = 0\n            f_i_high = f_points[1]\n        elif i == n_filters - 1:\n            f_i_center = f_points[-1]\n            f_i_low = f_points[-2]\n            f_i_high = fs / 2\n        else:\n            f_i_center = f_points[i]\n            f_i_low = f_points[i - 1]\n            f_i_high = f_points[i + 1]\n        row = []\n        for k in range(N // 2 + 1):\n            k_center = k * fs / N\n            if k_center < f_i_low or k_center > f_i_high:\n                weight = 0.0\n            else:\n                left_dist = f_i_center - f_i_low\n                right_dist = f_i_high - f_i_center\n                left_slope = left_dist / (f_i_center - k_center)\n                right_slope = right_dist / (k_center - f_i_center)\n                left_slope = max(left_slope, 0)\n                right_slope = max(right_slope, 0)\n                weight = min(left_slope, right_slope)\n            row.append(weight)\n        if normalize:\n            total_width = f_i_high - f_i_low\n            if total_width == 0:\n                normalized_row = [0.0 for _ in row]\n            else:\n                scaling = 2.0 / total_width\n                normalized_row = [w * scaling for w in row]\n        else:\n            normalized_row = row\n        filterbank.append(normalized_row)\n    rounded_filterbank = []\n    for row in filterbank:\n        rounded_row = [round(w, 4) for w in row]\n        rounded_filterbank.append(rounded_row)\n    return rounded_filterbank\nimport numpy as np\n\nfb = mel_filterbank(16, 6, 16000)\nassert (len(fb), len(fb[0])) == (6, 16//2 + 1), \"shape mismatch for mel_filterbank(16,6,16000)\"\nimport numpy as np\n\nfb = mel_filterbank(1024, 40, 22050)\nassert all(0.0 <= w <= 1.0 for row in fb for w in row), \"weights out of range in mel_filterbank(1024,40,22050)\"\nimport numpy as np\n\nfb = mel_filterbank(32, 10, 16000, min_freq=300, max_freq=6000)\nassert fb[0][0] == 0.0 and fb[-1][-1] == 0.0, \"edge bins should be zero for out-of-band frequencies\"\nimport numpy as np\n\nfb1 = mel_filterbank(512, 26, 16000)\nfb2 = mel_filterbank(512, 26, 16000)\nassert fb1 == fb2, \"function must be deterministic for identical parameters\"\nimport numpy as np\n\nfb = mel_filterbank(64, 5, 8000)\n# every filter must have non-zero values somewhere\nassert all(any(v > 0.0 for v in row) for row in fb), \"empty filter detected in mel_filterbank(64,5,8000)\"\nimport numpy as np\n\nfb = mel_filterbank(8, 3, 8000)\n# with normalization the maximum value must be below 1\nassert max(max(r) for r in fb) < 1.0, \"filters are not normalized when normalize=True\"\nimport numpy as np\n\nfb = mel_filterbank(128, 20, 44100)\nassert len({tuple(row) for row in fb}) == 20, \"filters must be distinct in mel_filterbank(128,20,44100)\""}
{"task_id": 312, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    window = []\n    for n in range(window_len):\n        angle1 = 2 * math.pi * n / N\n        angle2 = 4 * math.pi * n / N\n        angle3 = 6 * math.pi * n / N\n        cos1 = math.cos(angle1)\n        cos2 = math.cos(angle2)\n        cos3 = math.cos(angle3)\n        value = a0 - a1 * cos1 + a2 * cos2 - a3 * cos3\n        window.append(round(value, 4))\n    return window\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 313, "completion_id": 0, "passed": false, "result": "failed: failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2", "solution": "import math\nimport numpy as np\nimport math\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        if x <= 1:\n            return 0.0\n        elif x <= 6:\n            return sum((1.0 / k for k in range(1, x)))\n        else:\n            ln_x = math.log(x)\n            term1 = ln_x\n            term2 = -1.0 / (2 * x)\n            term3 = -1.0 / (12 * x ** 2)\n            term4 = 1.0 / (120 * x ** 4)\n            term5 = -1.0 / (252 * x ** 6)\n            return term1 + term2 + term3 + term4 + term5\n    sum_gamma = sum(gamma[d])\n    gamma_val = gamma[d][t]\n    psi_g = digamma(gamma_val)\n    psi_sum = digamma(sum_gamma)\n    result = psi_g - psi_sum\n    return round(result, 4)\nassert expected_log_dirichlet([[1,1]],0,0) == -1.0, \"failed: gamma=[[1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[2,3]],0,1) == -0.5833, \"failed: gamma=[[2,3]], d=0, t=1\"\nassert expected_log_dirichlet([[4,5,6],[1,1,1]],0,2) == -0.9682, \"failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2\"\nassert expected_log_dirichlet([[4,1,1]],0,0) == -0.45, \"failed: gamma=[[4,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[3,7]],0,1) == -0.379, \"failed: gamma=[[3,7]], d=0, t=1\"\nassert expected_log_dirichlet([[10,10,10]],0,2) == -1.1327, \"failed: gamma=[[10,10,10]], d=0, t=2\"\nassert expected_log_dirichlet([[8,1,1]],0,0) == -0.2361, \"failed: gamma=[[8,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[1,1,1,1]],0,3) == -1.8333, \"failed: gamma=[[1,1,1,1]], d=0, t=3\"\nassert expected_log_dirichlet([[1,2,1]],0,1) == -0.8333, \"failed: gamma=[[1,2,1]], d=0, t=1\"\nassert expected_log_dirichlet([[2,2,2,2,2]],0,2) == -1.829, \"failed: gamma=[[2,2,2,2,2]], d=0, t=2\""}
{"task_id": 331, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\"\"\"\n    n_samples = y_true.shape[0]\n    n_estimators = predictions.shape[1]\n    total_error = 0.0\n    count = 0\n    for i in range(n_samples):\n        oob_preds = []\n        for j in range(n_estimators):\n            if oob_mask[i][j]:\n                oob_preds.append(predictions[i][j])\n        if oob_preds:\n            avg_pred = np.mean(oob_preds)\n            error = (avg_pred - y_true[i]) ** 2\n            total_error += error\n            count += 1\n    if count == 0:\n        return -1\n    else:\n        mean_error = total_error / count\n        return round(mean_error, 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": false, "result": "failed: TC1 failed", "solution": "from collections import Counter\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\"\"\"\n    if not transactions:\n        return {'support': 0, 'children': {}}\n    frequency = Counter()\n    for trans in transactions:\n        for item in trans:\n            frequency[item] += 1\n    items = [item for item in frequency if frequency[item] >= min_support]\n    if not items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(items, key=lambda x: (-frequency[x], x))\n    root = {'support': 0, 'children': {}}\n    for trans in transactions:\n        unique_items = list(set(trans))\n        filtered = [item for item in unique_items if frequency[item] >= min_support]\n        sorted_trans = sorted(filtered, key=lambda x: (-frequency[x], x))\n        current = root\n        for item in sorted_trans:\n            if item in current['children']:\n                current = current['children'][item]\n                current['support'] += 1\n            else:\n                new_node = {'support': 1, 'children': {}}\n                current['children'][item] = new_node\n                current = new_node\n                current['support'] += 1\n    return root\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 336, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if not X:\n        return []\n    if Y is None:\n        Y = X\n    if isinstance(X, np.ndarray):\n        cols_X = X.shape[1]\n    else:\n        cols_X = len(X[0]) if X else 0\n    if isinstance(Y, np.ndarray):\n        cols_Y = Y.shape[1]\n    else:\n        cols_Y = len(Y[0]) if Y else 0\n    if cols_X != cols_Y:\n        return -1\n    X_arr = np.array(X) if not isinstance(X, np.ndarray) else X\n    Y_arr = np.array(Y) if not isinstance(Y, np.ndarray) else Y\n    K = X_arr.dot(Y_arr) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 340, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to **8** decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    if np.all(grad == 0):\n        new_theta = param\n    else:\n        new_theta = param - lr * m_hat / np.sqrt(v_hat + eps)\n    new_m = m_t\n    new_v = v_t\n    new_theta_rounded = np.round(new_theta, 8).tolist()\n    new_m_rounded = np.round(new_m, 8).tolist()\n    new_v_rounded = np.round(new_v, 8).tolist()\n    return (new_theta_rounded, new_m_rounded, new_v_rounded)\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 343, "completion_id": 0, "passed": false, "result": "failed: failed when retaining single best sample", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = len(theta_samples)\n    K = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)\n    top_indices = sorted_indices[-K:]\n    top_samples = theta_samples[top_indices]\n    mean = np.mean(top_samples, axis=0)\n    var = np.var(top_samples, axis=0)\n    rounded_mean = np.round(mean, 4)\n    rounded_var = np.round(var, 4)\n    return (rounded_mean.tolist(), rounded_var.tolist())\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 353, "completion_id": 0, "passed": false, "result": "failed: failed: entropy([0, 0, 1, 1, 1])", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    if len(counts) == 1:\n        return 0.0\n    total = len(labels)\n    entropy_sum = 0.0\n    for p in counts.values():\n        entropy_sum += p * math.log2(p)\n    entropy = -entropy_sum\n    return round(entropy, 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 355, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (3,2) (3,) ", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_data = data - np.mean(data, axis=1)\n    n_components = min(n_components, data.shape[1])\n    if solver == 'svd':\n        svd = np.linalg.svd(mean_data)\n        directions = svd[1][:, :n_components]\n        singular_values = svd[0][:n_components]\n        projection_matrix = directions / singular_values\n        components = sorted(zip(singular_values, directions), key=lambda x: -x[0])\n        sorted_directions = [d for (_, d) in components]\n        for (i, direction) in enumerate(sorted_directions):\n            if np.any(direction < 0):\n                first_non_zero = np.argmax(direction)\n                if direction[first_non_zero] < 0:\n                    direction *= -1\n                    projection_matrix[:, i] *= -1\n        scores = mean_data @ projection_matrix\n    else:\n        cov = np.linalg.covariance(mean_data, rowvar=False, ddof=1)\n        eig = np.linalg.eigh(cov)\n        directions = eig[1][:, :n_components]\n        eigenvalues = eig[0][:n_components]\n        projection_matrix = directions / eigenvalues\n        components = sorted(zip(eigenvalues, directions), key=lambda x: -x[0])\n        sorted_directions = [d for (_, d) in components]\n        for (i, direction) in enumerate(sorted_directions):\n            if np.any(direction < 0):\n                first_non_zero = np.argmax(direction)\n                if direction[first_non_zero] < 0:\n                    direction *= -1\n                    projection_matrix[:, i] *= -1\n        scores = mean_data @ projection_matrix\n    if solver == 'svd':\n        total_variance = np.sum(singular_values)\n        ratios = []\n        cumulative = 0.0\n        for i in range(n_components):\n            cumulative += singular_values[i]\n            ratio = cumulative / total_variance\n            ratios.append(round(ratio, 4))\n    else:\n        total_variance = np.sum(eigenvalues)\n        ratios = []\n        cumulative = 0.0\n        for i in range(n_components):\n            cumulative += eigenvalues[i]\n            ratio = cumulative / total_variance\n            ratios.append(round(ratio, 4))\n    rounded_scores = np.round(scores, 4)\n    scores_list = [list(row) for row in rounded_scores]\n    return (scores_list, ratios)\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: centred diagonal data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 svd\"\nassert pca_transform(np.array([[2, 2], [4, 4], [6, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: scaled diagonal \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [1, 1], [1, 2]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: variation along second axis \u2013 svd\"\nassert pca_transform(np.array([[1], [2], [3], [4]]), 1) == ([[-1.5], [-0.5], [0.5], [1.5]], [1.0]), \"failed: one-dimensional data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1, solver=\"eigen\") == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 eigen\"\nassert pca_transform(np.array([[1, 2], [1, 4]]), 1, solver=\"eigen\") == ([[-1.0], [1.0]], [1.0]), \"failed: two samples \u2013 eigen\"\nassert pca_transform(np.array([[0, 0, 1], [0, 0, 2], [0, 0, 3]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: third axis variation \u2013 svd\"\nassert pca_transform(np.array([[1, 2], [2, 4], [3, 6], [4, 8]]), 1) == ([[-3.3541], [-1.118 ], [1.118 ], [3.3541]], [1.0]), \"failed: perfectly collinear \u2013 svd\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        prob_list = leaf.value\n        max_prob = max(prob_list)\n        return prob_list.index(max_prob)\n    else:\n        return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 357, "completion_id": 0, "passed": false, "result": "failed: axis 1 is out of bounds for array of dimension 1", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 0:\n        return []\n    if K == 1:\n        centroids = np.mean(data, axis=0)\n    else:\n        centroids = data[:K]\n    for _ in range(max_iters):\n        distances = np.array([np.linalg.norm(sample - c) for (sample, c) in zip(data, centroids)])\n        closest_indices = np.argmin(distances, axis=1)\n        new_centroids = []\n        for i in range(K):\n            mask = closest_indices == i\n            samples = data[mask]\n            if len(samples) == 0:\n                new_c = centroids[i]\n            else:\n                new_c = np.mean(samples, axis=0)\n            new_centroids.append(new_c)\n        if np.max(np.abs(centroids - new_centroids)) < 1e-06:\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded = [[round(x, 4) for x in c] for c in sorted_centroids]\n    return rounded\nassert kmeans(np.array([[1,1],[1,2],[2,1],[8,8],[9,8],[8,9]]),2)==[[1.3333,1.3333],[8.3333,8.3333]],\"failed on separated two-cluster example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),1)==[[2.0,2.0]],\"failed on single-cluster mean\"\nassert kmeans(np.array([[0,0],[1,0],[0,1],[1,1]]),2)==[[0.0,0.5],[1.0,0.5]],\"failed on square dataset\"\nassert kmeans(np.array([[1,0],[0,1],[-1,0],[0,-1]]),2)==[[-0.5,0.5],[0.5,-0.5]],\"failed on cross dataset\"\nassert kmeans(np.array([[2,2],[2,4],[4,2],[4,4],[10,10]]),2)==[[3.0,3.0],[10.0,10.0]],\"failed on distant outlier dataset\"\nassert kmeans(np.array([[0,0],[1,1]]),2)==[[0.0,0.0],[1.0,1.0]],\"failed on two-point two-cluster dataset\"\nassert kmeans(np.array([[0,0],[0,1],[1,0]]),3)==[[0.0,0.0],[0.0,1.0],[1.0,0.0]],\"failed on three-point three-cluster dataset\"\nassert kmeans(np.array([[1],[2],[3]]),2)==[[1.0],[2.5]],\"failed on one-dimensional dataset\"\nassert kmeans(np.array([[3,3],[4,3],[3,4],[4,4]]),2)==[[3.0,3.5],[4.0,3.5]],\"failed on 2x2 square dataset\"\nassert kmeans(np.array([[0,0,0],[0,0,1],[0,1,0],[1,0,0],[9,9,9],[9,9,8],[9,8,9],[8,9,9]]),2)==[[0.25,0.25,0.25],[8.75,8.75,8.75]],\"failed on 3-D dataset\""}
{"task_id": 362, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=np.float64)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_data = data / row_sums\n    rounded_data = np.round(normalized_data, 4)\n    result = rounded_data.tolist()\n    return result\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: name 'Discrete' is not defined", "solution": "\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_space(space, is_tuple_or_dict):\n        if is_tuple_or_dict:\n            if not isinstance(space, (Tuple, Dict)):\n                return False\n            if isinstance(space, Tuple):\n                subs = space.spaces\n            else:\n                subs = space.spaces.values()\n            for s in subs:\n                if not isinstance(s, Box):\n                    return False\n            return True\n        else:\n            return isinstance(space, Box)\n    cont_action = is_continuous_space(env.action_space, tuple_action)\n    cont_obs = is_continuous_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 369, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,3) (2,) ", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        if regression:\n            return np.array([], dtype=np.float64)\n        else:\n            return np.array([], dtype=np.int64)\n    update_shape = updates[0].shape\n    n_samples = update_shape[0]\n    n_classes = update_shape[1] if not regression else 0\n    running_pred = np.zeros_like(updates[0])\n    summed_updates = np.sum(updates, axis=0)\n    running_pred = -learning_rate * summed_updates\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1)\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 373, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    if isinstance(y, list):\n        y = np.array(y)\n    unique_y = np.unique(y)\n    counts = {}\n    for c in unique_y:\n        counts[c] = np.count_nonzero(y == c)\n    N = len(y)\n    sum_p_sq = 0.0\n    for c in counts:\n        p = counts[c] / N\n        sum_p_sq += p ** 2\n    gini_impurity = 1 - sum_p_sq\n    return round(gini_impurity, 4)\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    m = X.shape[0]\n    if m != y.shape[0] or m == 0:\n        return -1\n    n = X.shape[1]\n    \u03b8 = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, \u03b8) + b\n        residuals = y_hat - y\n        sum_res = np.sum(residuals)\n        db = 2.0 / m * sum_res\n        dw = 2.0 / m * np.dot(X.T, residuals)\n        \u03b8 -= learning_rate * dw\n        b -= learning_rate * db\n    \u03b8 = np.round(\u03b8, 4)\n    b = np.round(b, 4)\n    weights = \u03b8.tolist()\n    return (weights, b)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 376, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if not X:\n        return True\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    X_np = np.array(X)\n    X_trans = X_np.T\n    return np.allclose(X_np, X_trans, atol=1e-08)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 380, "completion_id": 0, "passed": false, "result": "failed: test failed: selu([-1,0,1],1)", "solution": "import numpy as np\nimport numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\"\"\"\n    \u03b1 = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.asarray(x)\n    if order == 0:\n        mask = x > 0\n        elu = np.where(mask, x, \u03b1 * (np.exp(x) - 1))\n        result = elu * scale\n    elif order == 1:\n        mask = x > 0\n        derivative = np.where(mask, scale, scale * \u03b1 * np.exp(x))\n        result = derivative\n    elif order == 2:\n        mask = x > 0\n        second_derivative = np.where(mask, 0, scale * \u03b1 * np.exp(x))\n        result = second_derivative\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()\nassert selu([-1, 0, 1], 0) == [-1.1113, 0.0, 1.0507], \"test failed: selu([-1,0,1],0)\"\nassert selu([2], 0) == [2.1014], \"test failed: selu([2],0)\"\nassert selu(0, 0) == 0.0, \"test failed: selu(0,0)\"\nassert selu([[1, 0], [-1, 2]], 0) == [[1.0507, 0.0], [-1.1113, 2.1014]], \"test failed: selu([[1,0],[-1,2]],0)\"\nassert selu([-1, 0, 1], 1) == [0.6468, 1.0507, 1.0507], \"test failed: selu([-1,0,1],1)\"\nassert selu([2.5], 1) == [1.0507], \"test failed: selu([2.5],1)\"\nassert selu(0, 1) == 1.0507, \"test failed: selu(0,1)\"\nassert selu([-1, 1], 2) == [0.6468, 0.0], \"test failed: selu([-1,1],2)\"\nassert selu([0], 2) == [1.7581], \"test failed: selu([0],2)\"\nassert selu(2, 2) == 0.0, \"test failed: selu(2,2)\""}
{"task_id": 387, "completion_id": 0, "passed": false, "result": "failed: '<=' not supported between instances of 'list' and 'float'", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    current_y_hat = np.mean(y)\n    for _ in range(n_estimators):\n        r = y - current_y_hat\n        sorted_points = sorted(zip(x, r), key=lambda p: p[0])\n        (sorted_x, sorted_r) = zip(*sorted_points)\n        sorted_x = list(sorted_x)\n        sorted_r = list(sorted_r)\n        if len(set(sorted_x)) == 1:\n            mean_r = np.mean(sorted_r)\n            current_y_hat += learning_rate * mean_r\n            continue\n        possible_ts = []\n        for i in range(len(sorted_x) - 1):\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2\n            possible_ts.append(t)\n        best_t = None\n        min_total_error = float('inf')\n        for t in possible_ts:\n            split_idx = np.argwhere(sorted_x <= t).size\n            left_r = sorted_r[:split_idx]\n            right_r = sorted_r[split_idx:]\n            left_mean = np.mean(left_r)\n            right_mean = np.mean(right_r)\n            total_error = np.sum((left_r - left_mean) ** 2) + np.sum((right_r - right_mean) ** 2)\n            if total_error < min_total_error:\n                min_total_error = total_error\n                best_t = t\n        split_idx = np.argwhere(sorted_x <= best_t).size\n        left_mean = np.mean(sorted_r[:split_idx])\n        right_mean = np.mean(sorted_r[split_idx:])\n        new_residual = []\n        for (xi, ri) in zip(x, r):\n            if xi <= best_t:\n                new_residual.append(left_mean)\n            else:\n                new_residual.append(right_mean)\n        current_y_hat += learning_rate * np.array(new_residual)\n    return np.round(current_y_hat, 4).tolist()\nassert gradient_boosting_1d([1, 2], [2, 4], 1, 0.5) == [2.5, 3.5], \"failed on simple two-point example\"\nassert gradient_boosting_1d([1, 2, 3, 4], [5, 5, 5, 5], 3, 0.1) == [5.0, 5.0, 5.0, 5.0], \"failed on constant target\"\nassert gradient_boosting_1d([1, 2, 3], [1, 2, 3], 2, 0.5) == [1.3125, 2.0625, 2.625], \"failed on small increasing sequence\"\nassert gradient_boosting_1d([1, 2, 3], [3, 3, 3], 5, 0.2) == [3.0, 3.0, 3.0], \"failed on constant target, many rounds\"\nassert gradient_boosting_1d([1, 2, 3, 4], [2, 4, 6, 8], 2, 0.5) == [3.0, 4.3333, 6.3333, 6.3333], \"failed on linear 4-point set\"\nassert gradient_boosting_1d([1, 2, 3], [2, 2, 6], 1, 1.0) == [2.0, 2.0, 6.0], \"failed on perfect one-round fit\"\nassert gradient_boosting_1d([1, 1, 1], [1, 2, 3], 3, 0.3) == [2.0, 2.0, 2.0], \"failed when all features identical\"\nassert gradient_boosting_1d([5, 6], [10, 10], 4, 0.1) == [10.0, 10.0], \"failed on two identical targets\"\nassert gradient_boosting_1d([1, 2, 3], [10, 0, 10], 1, 0.5) == [8.3333, 5.8333, 5.8333], \"failed on uneven targets\"\nassert gradient_boosting_1d([1, 2], [0, 0], 2, 0.4) == [0.0, 0.0], \"failed on zero targets\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'float'", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    g_sq = grad ** 2\n    new_Eg = rho * Eg + (1 - rho) * g_sq\n    denominator = np.sqrt(new_Eg + 1e-08)\n    w_next = w - learning_rate * grad / denominator\n    w_next_rounded = np.round(w_next, 4)\n    new_Eg_rounded = np.round(new_Eg, 4)\n    w_next_list = [float(x) for x in w_next_rounded.tolist()]\n    new_Eg_list = [float(x) for x in new_Eg_rounded.tolist()]\n    return (w_next_list, new_Eg_list)\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 398, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    result = []\n    for xi in x:\n        if derivative:\n            if xi >= 0:\n                deriv = 1.0\n            else:\n                act = alpha * (np.exp(xi) - 1)\n                deriv = act + alpha\n        elif xi >= 0:\n            act = xi\n        else:\n            act = alpha * (np.exp(xi) - 1)\n        rounded = round(deriv, 4) if derivative else round(act, 4)\n        result.append(rounded)\n    return result\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 411, "completion_id": 0, "passed": false, "result": "failed: test case failed: scalar integers", "solution": "import numpy as np\nimport numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    tuple_actions = any((isinstance(action, (list, tuple, np.ndarray)) for action in actions))\n    multidim_actions = False\n    if actions:\n        first_action = actions[0]\n        if isinstance(first_action, np.ndarray):\n            shape = np.array(first_action).shape\n            multidim_actions = len(shape) > 1\n        elif isinstance(first_action, (list, tuple)):\n            multidim_actions = len(first_action) > 1\n        else:\n            multidim_actions = False\n    if not actions:\n        action_dim = 0\n    else:\n        first_action = actions[0]\n        if isinstance(first_action, np.ndarray):\n            shape = np.array(first_action).shape\n            action_dim = len(shape)\n        elif isinstance(first_action, (list, tuple)):\n            action_dim = len(first_action)\n        else:\n            action_dim = 0\n    dims_actions = []\n    for action in actions:\n        if isinstance(action, np.ndarray):\n            shape = action.shape\n            if len(shape) == 0:\n                dim_values = [action]\n            else:\n                dim_values = [action[i] for i in range(len(shape))]\n        elif isinstance(action, (list, tuple)):\n            dim_values = list(action)\n        else:\n            dim_values = [action]\n        while len(dim_values) < action_dim:\n            dim_values.append(None)\n        dims_actions.append(tuple(dim_values))\n    continuous_actions = False\n    for action in actions:\n        for dim in dims_actions:\n            for value in dim:\n                if isinstance(value, float) and (not isinstance(value, int)):\n                    continuous_actions = True\n                    break\n            if continuous_actions:\n                break\n        if continuous_actions:\n            break\n    tuple_observations = any((isinstance(obs, (list, tuple, np.ndarray)) for obs in observations))\n    multidim_observations = False\n    if observations:\n        first_obs = observations[0]\n        if isinstance(first_obs, np.ndarray):\n            shape = np.array(first_obs).shape\n            multidim_observations = len(shape) > 1\n        elif isinstance(first_obs, (list, tuple)):\n            multidim_observations = len(first_obs) > 1\n        else:\n            multidim_observations = False\n    if not observations:\n        obs_dim = 0\n    else:\n        first_obs = observations[0]\n        if isinstance(first_obs, np.ndarray):\n            shape = np.array(first_obs).shape\n            obs_dim = len(shape)\n        elif isinstance(first_obs, (list, tuple)):\n            obs_dim = len(first_obs)\n        else:\n            obs_dim = 0\n    dims_observations = []\n    for obs in observations:\n        if isinstance(obs, np.ndarray):\n            shape = obs.shape\n            if len(shape) == 0:\n                dim_values = [obs]\n            else:\n                dim_values = [obs[i] for i in range(len(shape))]\n        elif isinstance(obs, (list, tuple)):\n            dim_values = list(obs)\n        else:\n            dim_values = [obs]\n        while len(dim_values) < obs_dim:\n            dim_values.append(None)\n        dims_observations.append(tuple(dim_values))\n    continuous_observations = False\n    for obs in observations:\n        for dim in dims_observations:\n            for value in dim:\n                if isinstance(value, float) and (not isinstance(value, int)):\n                    continuous_observations = True\n                    break\n            if continuous_observations:\n                break\n        if continuous_observations:\n            break\n    action_ids = []\n    for dim_idx in range(action_dim):\n        values = []\n        for action_dims in dims_actions:\n            value = action_dims[dim_idx]\n            if value is not None:\n                values.append(value)\n        unique = sorted(list(set(values)))\n        action_ids.append(unique)\n    obs_ids = []\n    for dim_idx in range(obs_dim):\n        values = []\n        for obs_dims in dims_observations:\n            value = obs_dims[dim_idx]\n            if value is not None:\n                values.append(value)\n        unique = sorted(list(set(values)))\n        obs_ids.append(unique)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': [len(dim) for dim in action_ids], 'action_dim': action_dim, 'n_obs_per_dim': [len(dim) for dim in obs_ids], 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nacts = [0, 1, 2, 0]\nobs  = [10, 11, 10]\nassert env_stats(acts, obs)['n_actions_per_dim'] == [3], \"test case failed: scalar integers\"\nacts = [0.0, 1.5, 2.0]\nobs  = [1, 2, 3]\nassert env_stats(acts, obs)['continuous_actions'] is True, \"test case failed: continuous actions\"\nacts = [(0, 0), (1, 1), (0, 1)]\nobs  = [5, 6, 7]\nassert env_stats(acts, obs)['multidim_actions'] is True, \"test case failed: 2-D integer actions\"\nacts = [(0, 0, 0)]\nobs  = [(1.1, 2.2)]\nassert env_stats(acts, obs)['obs_dim'] == 2, \"test case failed: single sample multi-dim\"\nacts = [[1], [2], [3], [1]]\nobs  = [[10], [10], [12]]\nassert env_stats(acts, obs)['tuple_actions'] is True, \"test case failed: tuple single-dim\"\nacts = [(1, 2), (2, 3), (1, 3)]\nobs  = [0.1, 0.2, 0.3]\nassert env_stats(acts, obs)['continuous_observations'] is True, \"test 6 failed\"\nacts = [1, 2, 3]\nobs  = [(0, 0), (1, 1)]\nassert env_stats(acts, obs)['multidim_observations'] is True, \"test 7 failed\"\nacts = [2.0, 3.0]\nobs  = [1, 1]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 8 failed\"\nacts = [True, False, True]\nobs  = [0, 1, 0]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 9 failed\"\nacts = list(range(100))\nobs  = list(range(0, 200, 2))\nassert env_stats(acts, obs)['n_obs_per_dim'] == [100], \"test 10 failed\""}
{"task_id": 413, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n\n    def build_tree(X, residual, max_depth):\n        if max_depth == 0:\n            return np.mean(residual)\n        n_samples = X.shape[0]\n        best_mse = float('inf')\n        best_feature = None\n        best_split_point = None\n        for j in range(X.shape[1]):\n            sorted_data = sorted(zip(X[:, j], residual), key=lambda x: x[0])\n            X_sorted = sorted_data[:, 0]\n            residual_sorted = sorted_data[:, 1]\n            for k in range(1, n_samples):\n                left_X = X_sorted[:k]\n                left_residual = residual_sorted[:k]\n                right_X = X_sorted[k:]\n                right_residual = residual_sorted[k:]\n                mse_left = np.mean((left_residual - np.mean(left_residual)) ** 2)\n                mse_right = np.mean((right_residual - np.mean(right_residual)) ** 2)\n                total_mse = mse_left + mse_right\n                if total_mse < best_mse:\n                    best_mse = total_mse\n                    best_feature = j\n                    best_split_point = k\n        if best_feature is None:\n            return np.mean(residual)\n        feature = best_feature\n        split_point = best_split_point\n        X_left = X[X_sorted[:split_point]]\n        residual_left = residual_sorted[:split_point]\n        X_right = X[X_sorted[split_point:]]\n        residual_right = residual_sorted[split_point:]\n        X_left_sorted = sorted(X_left, key=lambda x: x[feature])\n        residual_left_sorted = sorted(residual_left, key=lambda x: x[feature])\n        left_pred = build_tree(X_left_sorted, residual_left_sorted, max_depth - 1)\n        X_right_sorted = sorted(X_right, key=lambda x: x[feature])\n        residual_right_sorted = sorted(residual_right, key=lambda x: x[feature])\n        right_pred = build_tree(X_right_sorted, residual_right_sorted, max_depth - 1)\n        split_value = X_sorted[split_point - 1]\n        predicted_residual = []\n        for i in range(n_samples):\n            if X[i, feature] <= split_value:\n                predicted_residual.append(left_pred[i])\n            else:\n                predicted_residual.append(right_pred[i])\n        return np.array(predicted_residual)\n    y_pred = np.mean(y_train)\n    for _ in range(n_estimators):\n        residual = 2 * (y_train - y_pred)\n        tree_output = build_tree(X_train, residual, max_depth)\n        y_pred += learning_rate * tree_output\n    return [round(x, 4) for x in y_pred]\nassert gbdt_regression(np.array([[0],[1]]), np.array([0,1]), np.array([[0],[1]]), 1, 1.0, 1) == [0.0, 1.0], \"test-1 failed: two-point identity mapping\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[1]]), 3, 0.5, 1) == [5.0], \"test-2 failed: constant target 5\"\nassert gbdt_regression(np.array([[0,1],[1,2],[2,3]]), np.array([7,7,7]), np.array([[0.5,1.5]]), 5, 0.3, 2) == [7.0], \"test-3 failed: 2-D constant target 7\"\nassert gbdt_regression(np.array([[-1],[0],[1]]), np.array([-2,-2,-2]), np.array([[0]]), 4, 0.8, 1) == [-2.0], \"test-4 failed: negative constant target\"\nassert gbdt_regression(np.array([[10]]), np.array([42]), np.array([[15]]), 6, 0.2, 1) == [42.0], \"test-5 failed: single-sample dataset\"\nassert gbdt_regression(np.array([[2],[4]]), np.array([4,8]), np.array([[2],[4]]), 1, 1.0, 1) == [4.0, 8.0], \"test-6 failed: two-point linear x2 mapping\"\nassert gbdt_regression(np.array([[0,1],[1,2]]), np.array([1,3]), np.array([[0,1],[1,2]]), 1, 1.0, 1) == [1.0, 3.0], \"test-7 failed: two-point 2-D features\"\nassert gbdt_regression(np.array([[5]]), np.array([10]), np.array([[7]]), 3, 0.9, 1) == [10.0], \"test-8 failed: single-sample constant 10\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([0,0,0]), np.array([[0],[2]]), 2, 0.7, 1) == [0.0, 0.0], \"test-9 failed: zero target\"\nassert gbdt_regression(np.array([[0],[1]]), np.array([-5,10]), np.array([[0],[1]]), 1, 1.0, 1) == [-5.0, 10.0], \"test-10 failed: mixed sign targets\""}
{"task_id": 419, "completion_id": 0, "passed": false, "result": "failed: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1 and the array at index 1 has size 2", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        intercept = np.ones((1, X.shape[1]))\n        X = np.hstack((intercept, X))\n        intercept_new = np.ones((1, X_new.shape[1]))\n        X_new = np.hstack((intercept_new, X_new))\n    N = X.shape[0]\n    M = X.shape[1]\n    size_beta = M + 1 if fit_intercept else M\n    if V is None:\n        V_matrix = np.identity(size_beta)\n    elif isinstance(V, (float, int)):\n        V_matrix = V * np.identity(size_beta)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            if len(V) == size_beta:\n                V_matrix = np.diag(V)\n            else:\n                raise ValueError('V must be a 1D array of length size_beta')\n        elif V.shape == (size_beta, size_beta):\n            V_matrix = V\n        else:\n            raise ValueError('V must be a square matrix of size_beta x size_beta')\n    else:\n        raise ValueError('V must be a scalar, 1D array, or 2D array')\n    XtX = X.T.dot(X)\n    try:\n        V_inv = np.linalg.inv(V_matrix)\n    except np.linalg.LinAlgError:\n        raise ValueError('V must be invertible')\n    Sigma_posterior = np.linalg.inv(V_inv + XtX)\n    if isinstance(mu, (float, int)):\n        term1 = V_inv * mu\n    else:\n        term1 = V_inv.dot(mu)\n    term2 = X.T.dot(y)\n    sum_terms = term1 + term2\n    mu_posterior = sum_terms.dot(Sigma_posterior)\n    preds = X_new.dot(mu_posterior)\n    preds_rounded = [round(p, 4) for p in preds]\n    return preds_rounded\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 423, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error between two lists.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((y < 0 for y in predicted)):\n        return -1\n    if len(actual) == 0:\n        return -1\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    diffs = np.log(1 + predicted_np) - np.log(1 + actual_np)\n    squared_diffs = diffs ** 2\n    mean = np.mean(squared_diffs)\n    rmsle = np.sqrt(mean)\n    return round(rmsle, 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 428, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    window = []\n    for n in range(N):\n        angle = 2 * math.pi * n / (N - 1)\n        value = 0.5 - 0.5 * math.cos(angle)\n        window.append(value)\n    if not symmetric:\n        window = window[:window_len]\n    rounded_window = [round(val, 4) for val in window]\n    return rounded_window\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        kernel_height = shape[2]\n        kernel_width = shape[3]\n        receptive_field = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 435, "completion_id": 0, "passed": false, "result": "failed: too many values to unpack (expected 2)", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to the nearest 4th decimal and packed into a plain\n    Python list.\n    \"\"\"\n    m = len(y)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * m\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    mean_y = np.mean(y_np)\n    hat_y = np.array([mean_y] * m, dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y_np - hat_y\n        (w, b) = np.linalg.lstsq(X_np, residuals, rcond=None)\n        h_t = b + np.dot(X_np, w)\n        hat_y += learning_rate * h_t\n    rounded_hat_y = np.round(hat_y, 4)\n    return rounded_hat_y.tolist()\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.asarray(x)\n    e_x = np.exp(-x)\n    sig = 1 / (1 + e_x)\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    rounded_result = np.round(result, 4)\n    if rounded_result.ndim == 0:\n        return rounded_result.item()\n    else:\n        return rounded_result.tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": false, "result": "failed: failed on too small num_classes", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y_array = np.array(y)\n    else:\n        y_array = y\n    if len(y_array) == 0:\n        return [-1]\n    if num_classes is None:\n        num_classes = max(y_array) + 1\n    elif num_classes < max(y_array) + 1:\n        return [-1]\n    n = len(y_array)\n    matrix = np.zeros((n, num_classes), dtype=int)\n    for i in range(n):\n        label = y_array[i]\n        matrix[i, label] = 1\n    result = matrix.tolist()\n    return result\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    n_estimators = len(predictions)\n    if n_estimators == 0:\n        return ([], [])\n    n_samples = len(predictions[0])\n    n_classes = len(predictions[0][0])\n    averaged_probs = []\n    predicted_labels = []\n    for sample_idx in range(n_samples):\n        prob_vectors = []\n        for est_idx in range(n_estimators):\n            prob_vector = predictions[est_idx][sample_idx]\n            prob_vectors.append(prob_vector)\n        avg_vector = np.average(prob_vectors, axis=0)\n        rounded = [round(v, 4) for v in avg_vector]\n        max_idx = np.argmax(rounded)\n        averaged_probs.append(rounded)\n        predicted_labels.append(max_idx)\n    return (averaged_probs, predicted_labels)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 444, "completion_id": 0, "passed": false, "result": "failed: Test 1 failed: isotropic \u03c3=1.0", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if len(X) == 0 or (Y is not None and len(Y) == 0):\n        return -1\n    if any((len(row) != len(X[0]) for row in X)):\n        return -1\n    if Y is not None:\n        if any((len(row) != len(Y[0]) for row in Y)):\n            return -1\n        if len(Y[0]) != len(X[0]):\n            return -1\n    C = len(X[0])\n    if sigma is None:\n        sigma_list = [np.sqrt(C / 2)] * C\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        for s in sigma:\n            if not isinstance(s, (int, float)):\n                return -1\n            if s <= 0:\n                return -1\n        sigma_list = sigma\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        if C != 1:\n            return -1\n        sigma_list = [sigma]\n    else:\n        return -1\n    n = len(X)\n    m = len(Y) if Y is not None else n\n    kernel = []\n    for i in range(n):\n        x_i = X[i]\n        row = []\n        for j in range(m):\n            if Y is not None:\n                y_j = Y[j]\n            else:\n                y_j = x_i\n            sum_sq = 0.0\n            for k in range(C):\n                dx = x_i[k] - y_j[k]\n                sum_sq += dx * dx / sigma_list[k]\n            kernel_val = np.exp(-0.5 * sum_sq)\n            kernel_val = round(kernel_val, 4)\n            row.append(kernel_val)\n        kernel.append(row)\n    return kernel\nassert rbf_kernel([[1,0],[0,1]], [[1,0],[0,1]], 1.0) == [[1.0, 0.3679], [0.3679, 1.0]], \"Test 1 failed: isotropic \u03c3=1.0\"\nassert rbf_kernel([[1,1],[2,2],[3,3]], None, None) == [[1.0, 0.3679, 0.0183], [0.3679, 1.0, 0.3679], [0.0183, 0.3679, 1.0]], \"Test 3 failed: default \u03c3\"\nassert rbf_kernel([[0,0],[1,1]], [[1,0]], 1.0) == [[0.6065], [0.6065]], \"Test 4 failed: X\u2260Y shapes\"\nassert rbf_kernel([[1,0],[0,1]], None, [2,2]) == [[1.0, 0.7788], [0.7788, 1.0]], \"Test 5 failed: larger anisotropic \u03c3\"\nassert rbf_kernel([[0],[1],[2]], None, 1.0) == [[1.0, 0.6065, 0.1353], [0.6065, 1.0, 0.6065], [0.1353, 0.6065, 1.0]], \"Test 6 failed: 1-D data\"\nassert rbf_kernel([[0,0,0]], None, None) == [[1.0]], \"Test 7 failed: single vector\"\nassert rbf_kernel([[1,2,3]], None, [1,2]) == -1, \"Test 8 failed: wrong \u03c3 length\"\nassert rbf_kernel([[1,2]], None, -1.0) == -1, \"Test 9 failed: negative \u03c3\"\nassert rbf_kernel([[1,2]], None, [1,0]) == -1, \"Test 10 failed: zero in \u03c3 list\""}
{"task_id": 452, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    first_subset = []\n    second_subset = []\n    for row in X:\n        value = row[feature_i]\n        if isinstance(threshold, (int, float)):\n            if value >= threshold:\n                first_subset.append(row.tolist())\n            else:\n                second_subset.append(row.tolist())\n        elif value == threshold:\n            first_subset.append(row.tolist())\n        else:\n            second_subset.append(row.tolist())\n    return [first_subset, second_subset]\nassert divide_on_feature([[1,5],[3,2],[4,6],[2,1]],0,3) == [[[3,2],[4,6]],[[1,5],[2,1]]], \"test case failed: numeric split >= 3\"\nassert divide_on_feature([[1.0,1],[2.5,3],[2.4,0],[3.1,2]],0,2.5) == [[[2.5,3],[3.1,2]],[[1.0,1],[2.4,0]]], \"test case failed: float threshold\"\nassert divide_on_feature([[1,'A'],[2,'B'],[3,'A'],[4,'C']],1,'A') == [[[1,'A'],[3,'A']],[[2,'B'],[4,'C']]], \"test case failed: categorical split\"\nassert divide_on_feature([[5],[6],[7]],0,10) == [[],[[5],[6],[7]]], \"test case failed: threshold greater than all\"\nassert divide_on_feature([[5],[6],[7]],0,0) == [[[5],[6],[7]],[]], \"test case failed: threshold smaller than all\"\nassert divide_on_feature([[1,2,3]],2,3) == [[[1,2,3]],[]], \"test case failed: single sample equal\"\nassert divide_on_feature([[1,2,3]],2,4) == [[],[[1,2,3]]], \"test case failed: single sample not equal\"\nassert divide_on_feature([[1,'yes'],[2,'no'],[3,'yes']],1,'no') == [[[2,'no']],[[1,'yes'],[3,'yes']]], \"test case failed: exactly one match\"\nassert divide_on_feature([[1.2],[3.4],[5.6],[7.8]],0,5.6) == [[[5.6],[7.8]],[[1.2],[3.4]]], \"test case failed: equality on floats\"\nassert divide_on_feature(np.array([[1,'cat'],[2,'dog'],[3,'cat']],dtype=object),1,'cat') == [[[1,'cat'],[3,'cat']],[[2,'dog']]], \"test case failed: ndarray object dtype\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: test 4 failed", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(rewards)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            max_next_q = np.max(Q_next[i])\n            target = rewards[i] + gamma * max_next_q\n        y[i][actions[i]] = target\n    y_rounded = []\n    for row in y:\n        rounded_row = [round(x, 4) for x in row]\n        y_rounded.append(rounded_row)\n    return y_rounded\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 461, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        current_pred = np.mean(y)\n        return np.round(current_pred, 4).tolist()\n    x = np.array(x)\n    y = np.array(y)\n    current_pred = np.mean(y)\n    for _ in range(n_estimators):\n        residuals = y - current_pred\n        sorted_x = np.sort(x)\n        unique_x = np.unique(sorted_x)\n        split_points = unique_x[:-1]\n        if not split_points:\n            residuals = np.mean(residuals)\n        else:\n            best_t = None\n            min_sse = float('inf')\n            for t in split_points:\n                mask_left = x <= t\n                mask_right = x > t\n                if not (np.any(mask_left) and np.any(mask_right)):\n                    continue\n                left_residuals = residuals[mask_left]\n                v_L = np.mean(left_residuals)\n                right_residuals = residuals[mask_right]\n                v_R = np.mean(right_residuals)\n                sse = v_L ** 2 * len(left_residuals) + v_R ** 2 * len(right_residuals)\n                if sse < min_sse:\n                    min_sse = sse\n                    best_t = t\n            if best_t is None:\n                residuals = np.mean(residuals)\n            else:\n                mask_left = x <= best_t\n                mask_right = x > best_t\n                left_residuals = residuals[mask_left]\n                v_L = np.mean(left_residuals)\n                right_residuals = residuals[mask_right]\n                v_R = np.mean(right_residuals)\n                new_residuals = np.where(mask_left, v_L, v_R)\n                current_pred += learning_rate * new_residuals\n    return np.round(current_pred, 4).tolist()\nassert gradient_boosting_regressor([1, 2], [1, 2], 1, 1.0) == [1.0, 2.0], \"failed case: ([1,2],[1,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2], [1, 3], 1, 1.0) == [1.0, 3.0], \"failed case: ([1,2],[1,3],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3], [2, 2, 2], 1, 1.0) == [2.0, 2.0, 2.0], \"failed case: ([1,2,3],[2,2,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [4, 3, 2, 1], 1, 1.0) == [3.5, 3.5, 1.5, 1.5], \"failed case: descending targets\"\nassert gradient_boosting_regressor([1, 2], [2, 4], 2, 0.5) == [2.25, 3.75], \"failed case: two iterations, shrinkage 0.5\"\nassert gradient_boosting_regressor([1, 2], [1, 2], 0, 0.5) == [1.5, 1.5], \"failed case: n_estimators == 0\"\nassert gradient_boosting_regressor([1, 1, 2, 2], [1, 1, 3, 3], 1, 1.0) == [1.0, 1.0, 3.0, 3.0], \"failed case: repeated feature values\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [2, 2, 2, 10], 2, 1.0) == [2.0, 2.0, 2.0, 10.0], \"failed case: perfect fit in first round\"\nassert gradient_boosting_regressor([1, 2, 3], [1, 2, 4], 1, 0.5) == [1.9167, 1.9167, 3.1667], \"failed case: fractional shrinkage\"\nassert gradient_boosting_regressor([1, 2, 3, 4, 5], [3, 3, 3, 3, 3], 3, 0.3) == [3.0, 3.0, 3.0, 3.0, 3.0], \"failed case: constant targets\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: test5 failed", "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    new_q_table = [row.copy() for row in q_table]\n    if next_state is None:\n        target = reward\n    else:\n        s_prime = next_state\n        current_q_values = new_q_table[s_prime]\n        num_actions = len(current_q_values)\n        max_q = max(current_q_values)\n        greedy_actions = [a for a in range(num_actions) if current_q_values[a] == max_q]\n        greedy_action = greedy_actions[0] if greedy_actions else None\n        prob = []\n        for a in range(num_actions):\n            if a == greedy_action:\n                p = 1 - epsilon + epsilon / num_actions\n            else:\n                p = epsilon / num_actions\n            prob.append(p)\n        expectation = sum((prob[a] * current_q_values[a] for a in range(num_actions)))\n        target = reward + gamma * expectation\n    current_q = new_q_table[state][action]\n    delta = lr * (target - current_q)\n    new_q_table[state][action] = current_q + delta\n    rounded_q_table = []\n    for row in new_q_table:\n        rounded_row = [round(val, 4) for val in row]\n        rounded_q_table.append(rounded_row)\n    return rounded_q_table\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
