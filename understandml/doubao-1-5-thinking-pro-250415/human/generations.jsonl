{"task_id": 1, "completion_id": 0, "completion": "\n\n```python\ndef matrix_dot_vector(a: list[list[int|float]], b: list[int|float]) -> list[int|float] | int:\n    # Check if the matrix is empty\n    if not a:\n        # If matrix is empty, the number of columns is 0, so vector must be empty\n        if len(b) == 0:\n            return []\n        else:\n            return -1\n    \n    # Determine the number of columns from the first row\n    cols = len(a[0])\n    \n    # Check if all rows in the matrix have the same number of columns\n    for row in a:\n        if len(row) != cols:\n            return -1\n    \n    # Check if the vector length matches the number of columns\n    if len(b) != cols:\n        return -1\n    \n    # Compute the dot product for each row\n    result = []\n    for row in a:\n        dot_product = 0.0  # Initialize as float to handle both int and float\n        for i in range(cols):\n            dot_product += row[i] * b[i]\n        # Convert to int if the result is a whole number to maintain int type where possible\n        if dot_product.is_integer():\n            result.append(int(dot_product))\n        else:\n            result.append(dot_product)\n    \n    return result\n```"}
{"task_id": 2, "completion_id": 0, "completion": "\n\n```python\ndef transpose_matrix(a: list[list[int|float]]) -> list[list[int|float]]:\n    if not a or (a and not a[0]):\n        return []\n    cols = len(a[0])\n    return [[row[j] for row in a] for j in range(cols)]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef reshape_matrix(a: list[list[int|float]], new_shape: tuple[int, int]) -> list[list[int|float]]:\n    # Calculate the total number of elements in the original matrix\n    total_elements = sum(len(row) for row in a)\n    new_rows, new_cols = new_shape\n    \n    # Check if the new shape can hold the same number of elements\n    if new_rows * new_cols != total_elements:\n        return []\n    \n    try:\n        # Convert the input list to a numpy array\n        arr = np.array(a)\n        # Reshape the array to the new shape\n        reshaped_arr = arr.reshape(new_shape)\n    except ValueError:\n        # If reshaping is not possible (e.g., due to non-rectangular input)\n        return []\n    \n    # Convert the reshaped numpy array back to a Python list of lists\n    return reshaped_arr.tolist()\n```"}
{"task_id": 4, "completion_id": 0, "completion": "\n\n```python\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculates the mean of a matrix either by row or by column.\n\n    Args:\n        matrix (list[list[float]]): A rectangular matrix (list of lists of floats).\n        mode (str): The mode of calculation, either 'row' or 'column'.\n\n    Returns:\n        list[float]: A list of means corresponding to each row or column.\n\n    Raises:\n        ValueError: If mode is not 'row' or 'column', if a row is empty (row mode),\n                    if rows have inconsistent lengths (column mode), or if rows are empty (column mode).\n    \"\"\"\n    if mode not in ('row', 'column'):\n        raise ValueError(\"Mode must be 'row' or 'column'.\")\n    \n    if mode == 'row':\n        row_means = []\n        for row in matrix:\n            if not row:\n                raise ValueError(\"Cannot calculate mean of an empty row.\")\n            row_sum = sum(row)\n            row_mean = row_sum / len(row)\n            row_means.append(row_mean)\n        return row_means\n    else:  # mode is 'column'\n        if not matrix:\n            return []\n        # Validate all rows are non-empty and of the same length\n        num_cols = len(matrix[0])\n        if num_cols == 0:\n            raise ValueError(\"Cannot calculate column means of a matrix with empty rows.\")\n        for row in matrix:\n            if len(row) != num_cols:\n                raise ValueError(\"All rows must have the same length for column mean calculation.\")\n        # Calculate column means\n        col_means = []\n        for j in range(num_cols):\n            column = [row[j] for row in matrix]\n            col_sum = sum(column)\n            col_mean = col_sum / len(column)\n            col_means.append(col_mean)\n        return col_means\n```"}
{"task_id": 5, "completion_id": 0, "completion": "\n\n```python\ndef scalar_multiply(matrix: list[list[int|float]], scalar: int|float) -> list[list[int|float]]:\n    \"\"\"Multiplies each element of the matrix by the scalar and returns the resulting matrix.\"\"\"\n    return [[element * scalar for element in row] for row in matrix]\n```"}
{"task_id": 6, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef calculate_eigenvalues(matrix: list[list[float|int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a 2x2 matrix and returns them sorted in descending order.\n    \n    Args:\n        matrix: A 2x2 list of lists containing floats or integers.\n        \n    Returns:\n        A list of floats representing the eigenvalues, sorted from highest to lowest.\n        \n    Raises:\n        ValueError: If the input matrix is not 2x2.\n    \"\"\"\n    # Validate the matrix dimensions\n    if len(matrix) != 2:\n        raise ValueError(\"Matrix must be 2x2.\")\n    for row in matrix:\n        if len(row) != 2:\n            raise ValueError(\"Matrix must be 2x2.\")\n    \n    # Extract matrix elements\n    a, b = matrix[0][0], matrix[0][1]\n    c, d = matrix[1][0], matrix[1][1]\n    \n    # Calculate trace and determinant\n    trace = a + d\n    determinant = a * d - b * c\n    \n    # Compute discriminant of the characteristic equation\n    discriminant = trace ** 2 - 4 * determinant\n    \n    # Calculate eigenvalues\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    \n    # Sort eigenvalues in descending order and return\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\n```"}
{"task_id": 7, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef transform_matrix(A: list[list[int|float]], T: list[list[int|float]], S: list[list[int|float]]) -> list[list[int|float]]:\n    try:\n        # Convert input lists to numpy arrays with float64 dtype to handle numerical operations\n        A_np = np.array(A, dtype=np.float64)\n        T_np = np.array(T, dtype=np.float64)\n        S_np = np.array(S, dtype=np.float64)\n    except (ValueError, TypeError):\n        # Return -1 if conversion to numpy array fails (e.g., non-numeric elements)\n        return -1\n    \n    # Check if T is a square matrix (invertible matrices must be square)\n    if T_np.shape[0] != T_np.shape[1]:\n        return -1\n    # Check if S is a square matrix\n    if S_np.shape[0] != S_np.shape[1]:\n        return -1\n    \n    # Check if T is invertible by attempting to compute its inverse\n    try:\n        T_inv = np.linalg.inv(T_np)\n    except np.linalg.LinAlgError:\n        return -1\n    \n    # Check if S is invertible by attempting to compute its inverse\n    try:\n        np.linalg.inv(S_np)  # We don't need the inverse, just checking invertibility\n    except np.linalg.LinAlgError:\n        return -1\n    \n    # Check matrix multiplication compatibility: T_inv (t x t) @ A (a x b) requires t == a\n    t_rows = T_np.shape[0]\n    a_rows, a_cols = A_np.shape\n    if t_rows != a_rows:\n        return -1\n    \n    # Check compatibility for (T_inv @ A) (t x b) @ S (s x s) requires b == s\n    s_rows = S_np.shape[0]\n    if a_cols != s_rows:\n        return -1\n    \n    # Perform the matrix transformation: T^{-1} @ A @ S\n    try:\n        result = T_inv @ A_np @ S_np\n    except ValueError:\n        # Handle any unexpected shape mismatches during multiplication\n        return -1\n    \n    # Round the result to 4 decimal places and convert to a Python list\n    result_rounded = np.round(result, decimals=4)\n    return result_rounded.tolist()\n```"}
{"task_id": 8, "completion_id": 0, "completion": "\n\n```python\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    # Check if the matrix is 2x2\n    if len(matrix) != 2:\n        return None\n    for row in matrix:\n        if len(row) != 2:\n            return None\n    \n    # Extract elements of the matrix\n    a, b = matrix[0][0], matrix[0][1]\n    c, d = matrix[1][0], matrix[1][1]\n    \n    # Calculate the determinant\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None  # Matrix is not invertible\n    \n    # Calculate the inverse using the formula for 2x2 matrix inverse\n    inv_determinant = 1.0 / determinant\n    inverse = [\n        [d * inv_determinant, -b * inv_determinant],\n        [-c * inv_determinant, a * inv_determinant]\n    ]\n    \n    return inverse\n```"}
{"task_id": 9, "completion_id": 0, "completion": "\n\n```python\ndef matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    # Check if matrix 'a' is valid (all rows have the same length)\n    if len(a) == 0:\n        a_rows = 0\n        a_cols = 0\n    else:\n        a_rows = len(a)\n        a_cols = len(a[0])\n        for row in a:\n            if len(row) != a_cols:\n                return -1\n\n    # Check if matrix 'b' is valid (all rows have the same length)\n    if len(b) == 0:\n        b_rows = 0\n        b_cols = 0\n    else:\n        b_rows = len(b)\n        b_cols = len(b[0])\n        for row in b:\n            if len(row) != b_cols:\n                return -1\n\n    # Check if multiplication is possible (columns of 'a' == rows of 'b')\n    if a_cols != b_rows:\n        return -1\n\n    # Compute the product matrix\n    result = []\n    for i in range(a_rows):\n        current_row = []\n        for j in range(b_cols):\n            dot_product = 0.0  # Initialize as float to handle int/float inputs\n            for k in range(a_cols):\n                dot_product += a[i][k] * b[k][j]\n            current_row.append(dot_product)\n        result.append(current_row)\n\n    return result\n```"}
{"task_id": 10, "completion_id": 0, "completion": "\n\n```python\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    if not vectors:\n        raise ValueError(\"Input list is empty.\")\n    n = len(vectors[0])\n    if n < 2:\n        raise ValueError(\"Each feature must have at least 2 observations.\")\n    for vec in vectors:\n        if len(vec) != n:\n            raise ValueError(\"All vectors must have the same length.\")\n    d = len(vectors)\n    means = [sum(vec) / n for vec in vectors]\n    covariance_matrix = []\n    for i in range(d):\n        row = []\n        for j in range(d):\n            sum_products = 0.0\n            for x, y in zip(vectors[i], vectors[j]):\n                sum_products += (x - means[i]) * (y - means[j])\n            covariance = sum_products / (n - 1)\n            row.append(covariance)\n        covariance_matrix.append(row)\n    return covariance_matrix\n\n\ndef are_matrices_equal(mat1: list[list[float]], mat2: list[list[float]], epsilon: float = 1e-9) -> bool:\n    if len(mat1) != len(mat2):\n        return False\n    for row1, row2 in zip(mat1, mat2):\n        if len(row1) != len(row2):\n            return False\n        for a, b in zip(row1, row2):\n            if abs(a - b) > epsilon:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    # Test case 1: Simple case with two features\n    vectors1 = [\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0]\n    ]\n    expected1 = [\n        [1.0, 1.0],\n        [1.0, 1.0]\n    ]\n    result1 = calculate_covariance_matrix(vectors1)\n    print(f\"Test case 1 passed: {are_matrices_equal(result1, expected1)}\")\n\n    # Test case 2: Another simple case with two features\n    vectors2 = [\n        [1.0, 3.0, 5.0],\n        [2.0, 4.0, 6.0]\n    ]\n    expected2 = [\n        [4.0, 4.0],\n        [4.0, 4.0]\n    ]\n    result2 = calculate_covariance_matrix(vectors2)\n    print(f\"Test case 2 passed: {are_matrices_equal(result2, expected2)}\")\n\n    # Test case 3: Three features with linear relationship\n    vectors3 = [\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.0]\n    ]\n    expected3 = [\n        [1.0, 1.0, 1.0],\n        [1.0, 1.0, 1.0],\n        [1.0, 1.0, 1.0]\n    ]\n    result3 = calculate_covariance_matrix(vectors3)\n    print(f\"Test case 3 passed: {are_matrices_equal(result3, expected3)}\")\n\n    # Test case 4: Features with negative covariance\n    vectors4 = [\n        [1.0, 2.0, 3.0],\n        [3.0, 1.0, 2.0]\n    ]\n    expected4 = [\n        [1.0, -0.5],\n        [-0.5, 1.0]\n    ]\n    result4 = calculate_covariance_matrix(vectors4)\n    print(f\"Test case 4 passed: {are_matrices_equal(result4, expected4)}\")\n\n    # Test case 5: Empty input list\n    try:\n        calculate_covariance_matrix([])\n        print(\"Test case 5 failed: No error raised for empty input\")\n    except ValueError as e:\n        print(f\"Test case 5 passed: {str(e) == 'Input list is empty.'}\")\n\n    # Test case 6: Vectors of different lengths\n    vectors6 = [\n        [1.0, 2.0],\n        [3.0]\n    ]\n    try:\n        calculate_covariance_matrix(vectors6)\n        print(\"Test case 6 failed: No error raised for vectors of different lengths\")\n    except ValueError as e:\n        print(f\"Test case 6 passed: {str(e) == 'All vectors must have the same length.'}\")\n\n    # Test case 7: Only one observation per feature\n    vectors7 = [\n        [1.0],\n        [2.0]\n    ]\n    try:\n        calculate_covariance_matrix(vectors7)\n        print(\"Test case 7 failed: No error raised for single observation per feature\")\n    except ValueError as e:\n        print(f\"Test case 7 passed: {str(e) == 'Each feature must have at least 2 observations.'}\")\n```"}
{"task_id": 11, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Jacobi method.\n    \n    Parameters:\n    A (np.ndarray): A square matrix representing the coefficients of the system.\n    b (np.ndarray): A vector representing the constants on the right-hand side of the equations.\n    n (int): The number of iterations to perform.\n    \n    Returns:\n    list: The approximate solution after n iterations, rounded to four decimal places.\n    \"\"\"\n    m = A.shape[0]  # Number of equations/variables\n    x_old = np.zeros(m).round(4)  # Initial guess (all zeros, rounded to 4 decimals)\n    \n    for _ in range(n):\n        x_new = np.zeros(m)\n        for i in range(m):\n            # Calculate the sum of A[i,j] * x_old[j] for all j \u2260 i\n            sum_other = np.dot(A[i], x_old) - A[i, i] * x_old[i]\n            # Compute the new x[i] and round to 4 decimals\n            x_new[i] = round((b[i] - sum_other) / A[i, i], 4)\n        x_old = x_new.copy()\n    \n    return x_old.tolist()\n```"}
{"task_id": 12, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the Singular Value Decomposition (SVD) for a 2x2 matrix using the Jacobian method,\n    returning the singular values sorted in descending order and rounded to 4 decimal places.\n    \n    Args:\n        A (np.ndarray): A 2x2 input matrix.\n        \n    Returns:\n        tuple: A tuple containing the two singular values, rounded to 4 decimal places,\n               sorted in descending order.\n    \"\"\"\n    # Compute the product of A transpose and A (A^T A)\n    ATA = A.T @ A\n    \n    # Extract elements of the symmetric matrix ATA\n    a = ATA[0, 0]\n    b = ATA[0, 1]\n    c = ATA[1, 1]\n    \n    # Calculate trace of ATA\n    trace = a + c\n    \n    # Compute the discriminant for the eigenvalues of ATA\n    discriminant = np.sqrt((a - c)**2 + 4 * (b**2))\n    \n    # Calculate eigenvalues of ATA (lambda1 >= lambda2)\n    lambda1 = (trace + discriminant) / 2\n    lambda2 = (trace - discriminant) / 2\n    \n    # Compute singular values as square roots of the eigenvalues\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    \n    # Ensure the singular values are sorted in descending order (though theoretically lambda1 >= lambda2)\n    sigma1, sigma2 = sorted([sigma1, sigma2], reverse=True)\n    \n    # Round to 4 decimal places\n    sigma1_rounded = round(sigma1, 4)\n    sigma2_rounded = round(sigma2, 4)\n    \n    return (sigma1_rounded, sigma2_rounded)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "\n\n```python\ndef determinant_4x4(matrix: list[list[int|float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's Expansion method.\n    \n    Args:\n        matrix: A 4x4 matrix represented as a list of lists of integers or floats.\n        \n    Returns:\n        The determinant of the matrix as a float.\n        \n    Raises:\n        ValueError: If the input matrix is not 4x4.\n    \"\"\"\n    # Validate the input matrix is 4x4\n    if len(matrix) != 4:\n        raise ValueError(\"Matrix must be 4x4\")\n    for row in matrix:\n        if len(row) != 4:\n            raise ValueError(\"Matrix must be 4x4\")\n    \n    def det_2x2(m: list[list[int|float]]) -> float:\n        \"\"\"Helper to calculate determinant of a 2x2 matrix.\"\"\"\n        return m[0][0] * m[1][1] - m[0][1] * m[1][0]\n    \n    def determinant_3x3(m: list[list[int|float]]) -> float:\n        \"\"\"Helper to calculate determinant of a 3x3 matrix using Laplace expansion.\"\"\"\n        # Validate 3x3 matrix\n        if len(m) != 3:\n            raise ValueError(\"Matrix must be 3x3\")\n        for row in m:\n            if len(row) != 3:\n                raise ValueError(\"Matrix must be 3x3\")\n        \n        det = 0.0\n        for j in range(3):\n            element = m[0][j]\n            sign = (-1) ** (0 + j)\n            # Create minor by removing row 0 and column j\n            minor = [row[:j] + row[j+1:] for row in m[1:]]\n            det += element * sign * det_2x2(minor)\n        return det\n    \n    determinant = 0.0\n    for j in range(4):\n        element = matrix[0][j]\n        sign = (-1) ** (0 + j)\n        # Create minor by removing row 0 and column j\n        minor = [row[:j] + row[j+1:] for row in matrix[1:]]\n        determinant += element * sign * determinant_3x3(minor)\n    \n    return determinant\n```"}
{"task_id": 14, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    # Convert input lists to numpy arrays\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    \n    # Add a column of ones to X for the intercept term (theta_0)\n    X_b = np.hstack((np.ones((X_np.shape[0], 1)), X_np))\n    \n    # Compute the normal equation: theta = (X^T X)^(-1) X^T y\n    XTX = X_b.T.dot(X_b)\n    XTX_inv = np.linalg.inv(XTX)\n    theta = XTX_inv.dot(X_b.T).dot(y_np)\n    \n    # Round each coefficient to four decimal places\n    theta_rounded = [round(coefficient, 4) for coefficient in theta]\n    \n    return theta_rounded\n```"}
{"task_id": 15, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    m, n = X.shape  # m is the number of samples, n is the number of features (including intercept)\n    theta = np.zeros(n)  # Initialize coefficients to zeros\n    \n    for _ in range(iterations):\n        # Compute predicted values\n        h = X.dot(theta)\n        # Compute error (predicted - actual)\n        error = h - y\n        # Compute gradient of the cost function\n        gradient = (X.T.dot(error)) / m\n        # Update coefficients\n        theta -= alpha * gradient\n    \n    # Round coefficients to four decimal places and convert to list\n    theta_rounded = np.round(theta, decimals=4)\n    return theta_rounded.tolist()\n```"}
{"task_id": 16, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    # Handle standardization (Z-score normalization)\n    data_mean = np.mean(data, axis=0)\n    data_std = np.std(data, axis=0)\n    # Replace zero standard deviations with 1 to avoid division by zero\n    data_std[data_std == 0] = 1.0\n    standardized = (data - data_mean) / data_std\n    standardized_rounded = np.round(standardized, decimals=4)\n    \n    # Handle min-max normalization\n    data_min = np.min(data, axis=0)\n    data_max = np.max(data, axis=0)\n    data_range = data_max - data_min\n    # Replace zero ranges with 1 to avoid division by zero\n    data_range[data_range == 0] = 1.0\n    min_max = (data - data_min) / data_range\n    min_max_rounded = np.round(min_max, decimals=4)\n    \n    # Convert numpy arrays to Python lists and return\n    return (standardized_rounded.tolist(), min_max_rounded.tolist())\n```"}
{"task_id": 17, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    # Convert input points and initial centroids to numpy arrays for easier manipulation\n    points_np = np.array(points, dtype=np.float64)\n    centroids = np.array(initial_centroids, dtype=np.float64)\n    \n    for _ in range(max_iterations):\n        # Calculate squared Euclidean distances from each point to every centroid\n        # Result is a (n_points, k) array where each element is the distance squared\n        distances = np.sum((points_np[:, np.newaxis] - centroids) ** 2, axis=2)\n        \n        # Assign each point to the nearest centroid (cluster)\n        cluster_assignments = np.argmin(distances, axis=1)\n        \n        # Compute new centroids based on the current cluster assignments\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            # Boolean mask to select points in cluster i\n            mask = (cluster_assignments == i)\n            if np.sum(mask) == 0:\n                # If no points are assigned to this cluster, keep the old centroid\n                new_centroids[i] = centroids[i]\n            else:\n                # Compute the mean of the points in the cluster to get the new centroid\n                new_centroids[i] = np.mean(points_np[mask], axis=0)\n        \n        # Check if the centroids have stabilized (rounded to 4 decimal places)\n        new_rounded = [tuple(np.round(centroid, 4)) for centroid in new_centroids]\n        old_rounded = [tuple(np.round(centroid, 4)) for centroid in centroids]\n        if new_rounded == old_rounded:\n            break  # Converged, exit early\n        \n        # Update centroids for the next iteration\n        centroids = new_centroids\n    \n    # Round the final centroids to 4 decimal places and convert to tuples\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids\n```"}
{"task_id": 18, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generates train and test indices for K-Fold Cross-Validation.\n\n    Parameters:\n    X (np.ndarray): Feature dataset.\n    y (np.ndarray): Target dataset.\n    k (int): Number of folds. Default is 5.\n    shuffle (bool): Whether to shuffle the data before splitting into folds. Default is True.\n    random_seed (int): Random seed for reproducibility if shuffling. Default is None.\n\n    Returns:\n    list: A list of tuples, each containing (train_indices, test_indices) for a fold.\n\n    Raises:\n    ValueError: If X and y have different lengths, dataset is empty, k is less than 2, or k exceeds the number of samples.\n    \"\"\"\n    # Check if X and y have the same number of samples\n    if len(X) != len(y):\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    n_samples = len(X)\n    \n    # Validate dataset size and k\n    if n_samples == 0:\n        raise ValueError(\"Dataset is empty.\")\n    if k < 2:\n        raise ValueError(\"Number of folds k must be at least 2.\")\n    if k > n_samples:\n        raise ValueError(f\"Number of folds k ({k}) cannot be greater than the number of samples ({n_samples}).\")\n    \n    # Generate indices\n    indices = np.arange(n_samples)\n    \n    # Shuffle indices if required\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    \n    # Calculate fold sizes\n    base_size = n_samples // k\n    remainder = n_samples % k\n    split_sizes = [base_size + 1] * remainder + [base_size] * (k - remainder)\n    \n    # Compute split points (cumulative sum to get start/end indices for each fold)\n    split_points = np.cumsum(split_sizes)\n    split_points = np.concatenate([[0], split_points])  # Prepend 0 to get start indices\n    \n    # Generate train-test index pairs for each fold\n    folds = []\n    for i in range(k):\n        start = split_points[i]\n        end = split_points[i + 1]\n        test_indices = indices[start:end]\n        # Train indices are all indices except the test indices (concatenate before and after test)\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_indices, test_indices))\n    \n    return folds\n```"}
{"task_id": 19, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    # Check if k is within valid range\n    n_features = data.shape[1]\n    if k < 0 or k > n_features:\n        raise ValueError(f\"k must be between 0 and {n_features}\")\n    \n    # Standardize the data (mean centering and scaling by standard deviation)\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Use sample standard deviation (n-1)\n    # Avoid division by zero by replacing zero std with a small epsilon\n    std[std == 0] = 1e-8\n    X_standardized = (data - mean) / std\n    \n    # Compute the covariance matrix (features as columns)\n    cov_matrix = np.cov(X_standardized, rowvar=False)\n    \n    # Compute eigenvalues and eigenvectors of the covariance matrix\n    # Using eigh for symmetric matrices (more efficient and stable)\n    eig_vals, eig_vecs = np.linalg.eigh(cov_matrix)\n    \n    # Sort eigenvalues in descending order and reorder eigenvectors accordingly\n    sorted_indices = np.argsort(eig_vals)[::-1]  # Reverse to get descending order\n    sorted_eig_vecs = eig_vecs[:, sorted_indices]\n    \n    # Select the top k eigenvectors (principal components)\n    top_k_components = sorted_eig_vecs[:, :k]\n    \n    # Convert to list of lists with values rounded to 4 decimal places\n    result = []\n    for component in top_k_components.T:  # Transpose to iterate over columns (components)\n        rounded_component = [round(val, 4) for val in component.tolist()]\n        result.append(rounded_component)\n    \n    return result\n```"}
{"task_id": 20, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter\n\n\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    def entropy(examples):\n        \"\"\"Calculate the entropy of the given examples based on the target attribute.\"\"\"\n        if not examples:\n            return 0.0\n        target_values = [ex[target_attr] for ex in examples]\n        value_counts = Counter(target_values)\n        total = len(examples)\n        return -sum((count / total) * math.log2(count / total) for count in value_counts.values())\n\n    def information_gain(attr):\n        \"\"\"Calculate the information gain of splitting on the given attribute.\"\"\"\n        original_entropy = entropy(examples)\n        # Split examples by each possible value of the attribute\n        subsets = {}\n        for ex in examples:\n            val = ex[attr]\n            if val not in subsets:\n                subsets[val] = []\n            subsets[val].append(ex)\n        # Calculate weighted entropy of subsets\n        total_examples = len(examples)\n        weighted_entropy = 0.0\n        for subset in subsets.values():\n            subset_size = len(subset)\n            if subset_size == 0:\n                continue\n            weighted_entropy += (subset_size / total_examples) * entropy(subset)\n        return original_entropy - weighted_entropy\n\n    # Base case 1: All examples have the same target value (pure set)\n    target_values = [ex[target_attr] for ex in examples]\n    if len(set(target_values)) == 1:\n        return {\"leaf\": target_values[0]}\n\n    # Base case 2: No attributes left to split on; return majority vote\n    if not attributes:\n        majority_value = Counter(target_values).most_common(1)[0][0]\n        return {\"leaf\": majority_value}\n\n    # Select the attribute with the highest information gain\n    best_attr = max(attributes, key=lambda attr: information_gain(attr))\n\n    # Split examples by the best attribute's values\n    attribute_subsets = {}\n    for ex in examples:\n        attr_val = ex[best_attr]\n        if attr_val not in attribute_subsets:\n            attribute_subsets[attr_val] = []\n        attribute_subsets[attr_val].append(ex)\n\n    # Recursively build subtrees for each attribute value\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    children = {}\n    current_majority = Counter(target_values).most_common(1)[0][0]  # For empty subsets\n\n    for attr_val, subset in attribute_subsets.items():\n        if not subset:\n            # If subset is empty, use majority of current examples\n            children[attr_val] = {\"leaf\": current_majority}\n        else:\n            # Recursive call to build subtree\n            children[attr_val] = learn_decision_tree(subset, remaining_attributes, target_attr)\n\n    # Return the decision tree node\n    return {\"attribute\": best_attr, \"children\": children}\n```"}
{"task_id": 21, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements the deterministic Pegasos algorithm for kernel SVM classification.\n    \n    Parameters:\n    data (np.ndarray): 2D array of training data (samples x features).\n    labels (np.ndarray): 1D array of labels (must be -1 or 1).\n    kernel (str): Kernel type ('linear' or 'rbf').\n    lambda_val (float): Regularization parameter.\n    iterations (int): Number of training iterations.\n    sigma (float): Width parameter for RBF kernel.\n    \n    Returns:\n    tuple: (alpha coefficients list, bias list), both rounded to 4 decimals.\n    \"\"\"\n    N = data.shape[0]  # Number of samples\n    \n    # Compute kernel matrix K where K[i,j] = kernel(data[i], data[j])\n    if kernel == 'linear':\n        K = data @ data.T\n    elif kernel == 'rbf':\n        gamma = 1.0 / (2 * sigma**2)\n        norms = np.sum(data**2, axis=1)  # Squared norms of each sample\n        # Pairwise squared distances using (x_i - x_j)^2 = x_i^2 + x_j^2 - 2x_i\u00b7x_j\n        pairwise_dists = norms[:, None] + norms[None, :] - 2 * (data @ data.T)\n        K = np.exp(-gamma * pairwise_dists)\n    else:\n        raise ValueError(\"Kernel must be 'linear' or 'rbf'.\")\n    \n    # Initialize parameters\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)  # Step size\n        \n        # Compute predictions f_j = sum(alpha_k * K[k,j]) + b for all j\n        f = alpha.dot(K) + b\n        \n        # Determine samples where margin y_j*f_j < 1\n        margin = labels * f\n        S_t = np.where(margin < 1.0)[0]\n        \n        # Update alpha coefficients\n        alpha = (1 - eta * lambda_val) * alpha  # Decay term\n        if len(S_t) > 0:\n            alpha[S_t] += (eta / N) * labels[S_t]  # Add correction for violating samples\n        \n        # Update bias term\n        sum_y_S = labels[S_t].sum() if len(S_t) > 0 else 0.0\n        b += (eta / N) * sum_y_S\n    \n    # Round to 4 decimal places and convert to lists\n    alpha_rounded = np.round(alpha, 4)\n    b_rounded = np.round(b, 4)\n    \n    return alpha_rounded.tolist(), b_rounded.tolist()\n```"}
{"task_id": 22, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid activation function for a given input z.\n    \n    The sigmoid function is defined as \u03c3(z) = 1 / (1 + e^(-z)).\n    The result is rounded to four decimal places.\n    \n    Args:\n        z (float): Input value to the sigmoid function.\n        \n    Returns:\n        float: The sigmoid output rounded to four decimal places.\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)\n```"}
{"task_id": 23, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"Computes the softmax activation for a given list of scores.\n    \n    Args:\n        scores: A list of float values representing the input scores.\n        \n    Returns:\n        A list of float values, each being the softmax of the corresponding input score,\n        rounded to four decimal places.\n    \"\"\"\n    exponentials = [math.exp(score) for score in scores]\n    sum_exponentials = sum(exponentials)\n    return [round(exp / sum_exponentials, 4) for exp in exponentials]\n```"}
{"task_id": 24, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport numpy as np\n\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predictions = []\n    for x in features:\n        # Calculate the weighted sum of inputs plus bias\n        z = sum(w * xi for w, xi in zip(weights, x)) + bias\n        # Apply sigmoid activation function\n        activation = 1 / (1 + math.exp(-z))\n        # Round to 4 decimal places and collect predictions\n        predictions.append(round(activation, 4))\n    \n    # Convert predictions to a numpy array and then to a list using tolist()\n    predictions_np = np.array(predictions)\n    predictions_list = predictions_np.tolist()\n    \n    # Calculate Mean Squared Error\n    n = len(labels)\n    sum_squared_errors = sum((pred - label) ** 2 for pred, label in zip(predictions_list, labels))\n    mse = sum_squared_errors / n\n    mse_rounded = round(mse, 4)\n    \n    return (predictions_list, mse_rounded)\n```"}
{"task_id": 25, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    # Initialize weights and bias with copies to avoid modifying inputs directly\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_list = []\n    num_samples = features.shape[0]  # Number of training samples\n    \n    for _ in range(epochs):\n        # Forward pass: compute linear combination and sigmoid activation\n        z = np.dot(features, weights) + bias\n        activation = 1 / (1 + np.exp(-z))  # Sigmoid function\n        \n        # Compute Mean Squared Error (MSE) and store rounded value\n        mse = np.mean((labels - activation) ** 2)\n        mse_list.append(round(mse, 4))\n        \n        # Backward pass: compute gradients using chain rule\n        # Derivative of MSE w.r.t. activation: dL/da = 2*(a - y)/N\n        dL_da = 2 * (activation - labels) / num_samples\n        # Derivative of sigmoid activation w.r.t. z: da/dz = a*(1 - a)\n        da_dz = activation * (1 - activation)\n        # Combine to get derivative of loss w.r.t. z: dL/dz = dL/da * da/dz\n        dL_dz = dL_da * da_dz\n        \n        # Compute gradients for weights and bias\n        dw = np.dot(features.T, dL_dz)  # Gradient for weights\n        db = np.sum(dL_dz)              # Gradient for bias\n        \n        # Update weights and bias using gradient descent\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    \n    # Round final weights and bias to 4 decimal places\n    weights_rounded = np.round(weights, 4)\n    bias_rounded = round(bias, 4)\n    \n    return weights_rounded, bias_rounded, mse_list\n```"}
{"task_id": 26, "completion_id": 0, "completion": "\n\n```python\nclass Value:\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda: None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n        \n        def backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = backward\n        \n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n        \n        def backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = backward\n        \n        return out\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __radd__(self, other):\n        return self + other\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, (self,), 'ReLU')\n        \n        def backward():\n            if self.data > 0:\n                self.grad += out.grad\n        out._backward = backward\n        \n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n        \n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        \n        build_topo(self)\n        self.grad = 1.0  # Gradient of root node is 1\n        \n        for node in reversed(topo):\n            node._backward()\n\n    def __repr__(self):\n        return f\"Value(data={self.data}, grad={self.grad})\"\n```"}
{"task_id": 27, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    # Convert the basis vectors from lists to numpy arrays, transposing to make columns\n    B_matrix = np.array(B).T  # Each column is a basis vector from B\n    C_matrix = np.array(C).T  # Each column is a basis vector from C\n    \n    # Compute the inverse of the matrix formed by basis C\n    C_inverse = np.linalg.inv(C_matrix)\n    \n    # Calculate the transformation matrix P from B to C: P = C^{-1} * B\n    transformation_matrix = C_inverse @ B_matrix\n    \n    # Round the result to 4 decimal places and convert to a Python list\n    return np.round(transformation_matrix, decimals=4).tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef svd_2x2(A: np.ndarray) -> tuple:\n    # Compute A^T A\n    A_T_A = A.T @ A\n    \n    # Eigendecomposition of A^T A (symmetric matrix)\n    eig_vals, eig_vecs = np.linalg.eigh(A_T_A)\n    \n    # Sort eigenvalues in descending order and reorder eigenvectors\n    sorted_indices = np.argsort(eig_vals)[::-1]  # Reverse to get descending order\n    sorted_eig_vals = eig_vals[sorted_indices]\n    sorted_eig_vecs = eig_vecs[:, sorted_indices]  # Columns are sorted eigenvectors\n    \n    # Compute singular values (sqrt of sorted eigenvalues)\n    sigma = np.sqrt(sorted_eig_vals)\n    \n    # Construct matrix V from sorted eigenvectors of A^T A\n    V = sorted_eig_vecs\n    \n    # Compute matrix U\n    if np.allclose(sigma, 0, atol=1e-10):\n        # Handle zero matrix case: U is identity\n        U = np.eye(2)\n    else:\n        u_columns = []\n        for i in range(2):\n            sigma_i = sigma[i]\n            v_i = V[:, i]\n            a_v_i = A @ v_i  # Compute A * v_i\n            \n            if not np.isclose(sigma_i, 0, atol=1e-10):\n                # Normalize to get u_i\n                u_i = a_v_i / sigma_i\n            else:\n                # For zero singular value, find orthogonal vector to existing u\n                u0 = u_columns[0]\n                u_i = np.array([-u0[1], u0[0]])  # Orthogonal vector\n                u_i = u_i / np.linalg.norm(u_i)  # Normalize\n            u_columns.append(u_i)\n        \n        # Combine columns to form U\n        U = np.column_stack(u_columns)\n    \n    # Construct diagonal matrix S\n    S = np.diag(sigma)\n    \n    # Round to 4 decimal places and convert to Python lists\n    U_rounded = np.round(U, 4).tolist()\n    S_rounded = np.round(S, 4).tolist()\n    V_rounded = np.round(V, 4).tolist()\n    \n    return (U_rounded, S_rounded, V_rounded)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles two numpy arrays X and y while maintaining their corresponding order,\n    and returns the shuffled arrays as Python lists.\n    \n    Parameters:\n    X (numpy.ndarray): The feature array.\n    y (numpy.ndarray): The label array.\n    seed (int, optional): Seed for random number generator to ensure reproducibility. Defaults to None.\n    \n    Returns:\n    list: A list containing two elements: the shuffled X as a Python list and the shuffled y as a Python list.\n    \n    Raises:\n    ValueError: If the number of samples in X and y do not match.\n    \"\"\"\n    # Check if the number of samples in X and y are the same\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    # Set the random seed if provided for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a permutation of indices\n    n_samples = X.shape[0]\n    permutation = np.random.permutation(n_samples)\n    \n    # Shuffle X and y using the permutation\n    X_shuffled = X[permutation]\n    y_shuffled = y[permutation]\n    \n    # Convert the shuffled numpy arrays to Python lists and return\n    return [X_shuffled.tolist(), y_shuffled.tolist()]\n```"}
{"task_id": 30, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Generates batches of data from numpy arrays X and optionally y.\n\n    Parameters:\n    X (np.ndarray): Feature data array with shape (num_samples, ...).\n    y (np.ndarray, optional): Target data array with shape (num_samples, ...). Defaults to None.\n    batch_size (int, optional): Number of samples per batch. Defaults to 64.\n\n    Yields:\n    list or tuple of lists: Batches of data. If y is provided, yields tuples of (X_batch, y_batch) lists.\n                           Otherwise, yields X_batch lists.\n    \"\"\"\n    num_samples = X.shape[0]\n    \n    if y is not None:\n        if y.shape[0] != num_samples:\n            raise ValueError(\"X and y must have the same number of samples.\")\n    \n    for i in range(0, num_samples, batch_size):\n        end_idx = i + batch_size\n        if end_idx > num_samples:\n            end_idx = num_samples\n        \n        X_batch = X[i:end_idx]\n        X_batch_list = X_batch.tolist()\n        \n        if y is not None:\n            y_batch = y[i:end_idx]\n            y_batch_list = y_batch.tolist()\n            yield (X_batch_list, y_batch_list)\n        else:\n            yield X_batch_list\n```"}
{"task_id": 31, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset into two subsets based on whether the specified feature's value is greater than or equal to a threshold.\n    \n    Parameters:\n    X (numpy.ndarray): The dataset, a 2D numpy array where each row is a sample and each column is a feature.\n    feature_i (int): The index of the feature (column) to use for splitting.\n    threshold (float/int): The threshold value to compare the feature against.\n    \n    Returns:\n    tuple: Two lists. The first list contains samples where the feature value is >= threshold, \n           the second contains samples where the feature value is < threshold.\n    \"\"\"\n    # Create a boolean mask indicating which samples meet the condition\n    mask = X[:, feature_i] >= threshold\n    # Split the dataset using the mask\n    left_subset = X[mask]\n    right_subset = X[~mask]\n    # Convert numpy arrays to lists and return\n    return left_subset.tolist(), right_subset.tolist()\n```"}
{"task_id": 32, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X, degree):\n    # Get the dimensions of the input dataset\n    n_samples, n_features = X.shape\n    # Initialize a list to store the polynomial features for each sample\n    poly_features = []\n    \n    # Iterate over each sample in the input dataset\n    for sample in X:\n        # Initialize a list to store the polynomial features for the current sample\n        sample_features = []\n        # Generate all polynomial terms up to the specified degree\n        for k in range(0, degree + 1):\n            # Generate all combinations of feature indices with replacement (for degree k)\n            for combo in combinations_with_replacement(range(n_features), k):\n                # Calculate the product of the features in the current combination\n                product = 1.0\n                for idx in combo:\n                    product *= sample[idx]\n                sample_features.append(product)\n        # Add the features of the current sample to the main list\n        poly_features.append(sample_features)\n    \n    # Convert the list of features to a numpy array and then to a Python list as required\n    return np.array(poly_features).tolist()\n```"}
{"task_id": 33, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generates random subsets of a given dataset.\n    \n    Parameters:\n    X (np.ndarray): 2D numpy array representing the dataset features.\n    y (np.ndarray): 1D numpy array representing the dataset labels.\n    n_subsets (int): Number of random subsets to generate.\n    replacements (bool): If True, subsets are created with replacement; otherwise without replacement.\n    seed (int): Random seed for reproducibility.\n    \n    Returns:\n    list: A list of tuples, where each tuple contains (X_subset, y_subset) as Python lists.\n    \"\"\"\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n    \n    # Check if X and y have compatible dimensions\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    # Get the number of samples in the dataset\n    n_samples = X.shape[0]\n    \n    # Initialize the list to store the subsets\n    subsets = []\n    \n    # Generate each subset\n    for _ in range(n_subsets):\n        # Generate indices for the current subset\n        if replacements:\n            # Sampling with replacement allows duplicate indices\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            # Sampling without replacement ensures unique indices (permutation)\n            indices = np.random.choice(n_samples, size=n_samples, replace=False)\n        \n        # Extract the subset from X and y using the generated indices\n        X_subset = X[indices]\n        y_subset = y[indices]\n        \n        # Convert numpy arrays to Python lists as required by output constraints\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    \n    return subsets\n```"}
{"task_id": 34, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef to_categorical(x, n_col=None):\n    # Determine the number of columns if not provided\n    if n_col is None:\n        n_col = x.max() + 1  # Assumes 0-based categories\n    \n    # Create a zero matrix with shape (number of samples, n_col)\n    one_hot = np.zeros((x.shape[0], n_col), dtype=int)\n    \n    # Set the appropriate positions to 1 using advanced indexing\n    one_hot[np.arange(x.shape[0]), x] = 1\n    \n    # Convert the numpy array to a Python list and return\n    return one_hot.tolist()\n```"}
{"task_id": 35, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef make_diagonal(x):\n    # Create a diagonal matrix from the 1D array x\n    diagonal_matrix = np.diag(x)\n    # Convert the numpy array to a Python list and return\n    return diagonal_matrix.tolist()\n```"}
{"task_id": 36, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    y_true (np.ndarray): 1D numpy array of true labels.\n    y_pred (np.ndarray): 1D numpy array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to the nearest 4th decimal.\n    \n    Raises:\n    ValueError: If y_true and y_pred have different lengths.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError(\"y_true and y_pred must be of the same length.\")\n    \n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    \n    if total_predictions == 0:\n        return 0.0  # Handle edge case of empty input to avoid division by zero\n    \n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)\n```"}
{"task_id": 37, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X, Y=None):\n    # If Y is not provided, use X itself\n    if Y is None:\n        Y = X.copy()\n    \n    # Ensure X and Y have the same number of samples (rows)\n    if X.shape[0] != Y.shape[0]:\n        raise ValueError(\"X and Y must have the same number of samples (rows).\")\n    \n    # Center the data by subtracting column means\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    \n    # Compute the numerator (dot product of centered columns)\n    numerator = X_centered.T.dot(Y_centered)\n    \n    # Compute the L2 norms of the centered columns\n    norms_X = np.linalg.norm(X_centered, axis=0)\n    norms_Y = np.linalg.norm(Y_centered, axis=0)\n    \n    # Handle division by creating a denominator matrix\n    denominator = norms_X[:, np.newaxis] * norms_Y\n    \n    # Calculate the correlation matrix\n    correlation_matrix = numerator / denominator\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(correlation_matrix, decimals=4).tolist()\n```"}
{"task_id": 38, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_fit(X, y, n_clf):\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    \n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_direction = None\n        \n        # Iterate over each feature to find the best stump\n        for j in range(n_features):\n            feature_values = X[:, j]\n            unique_thresholds = np.unique(feature_values)\n            \n            # Check each possible threshold for the current feature\n            for t in unique_thresholds:\n                # Calculate predictions for both directions\n                h_left = np.where(feature_values < t, -1, 1)\n                error_left = np.sum(weights * (h_left != y))\n                \n                h_right = np.where(feature_values >= t, -1, 1)\n                error_right = np.sum(weights * (h_right != y))\n                \n                # Determine the better direction for this threshold\n                if error_left < error_right:\n                    current_error = error_left\n                    current_direction = 'left'\n                else:\n                    current_error = error_right\n                    current_direction = 'right'\n                \n                # Update best parameters if current is better\n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature = j\n                    best_threshold = t\n                    best_direction = current_direction\n        \n        # Handle cases where the best error is worse than random\n        if best_error > 0.5:\n            best_error = 1 - best_error\n            best_direction = 'left' if best_direction == 'right' else 'right'\n        \n        # Compute alpha (classifier weight)\n        if best_error <= 0:\n            alpha = 1e10  # Handle perfect classifier (theoretically infinite)\n        else:\n            alpha = 0.5 * math.log((1 - best_error) / best_error)\n        \n        # Update sample weights\n        if best_direction == 'left':\n            h = np.where(X[:, best_feature] < best_threshold, -1, 1)\n        else:\n            h = np.where(X[:, best_feature] >= best_threshold, -1, 1)\n        \n        exp_factor = -alpha * y * h\n        weights *= np.exp(exp_factor)\n        weights /= np.sum(weights)  # Normalize weights\n        \n        # Store the classifier with rounded parameters\n        classifiers.append({\n            'feature': best_feature,\n            'threshold': round(best_threshold, 4),\n            'direction': best_direction,\n            'alpha': round(alpha, 4)\n        })\n    \n    return classifiers\n```"}
{"task_id": 39, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef log_softmax(scores: list):\n    # Convert the input list to a numpy array for numerical operations\n    scores_np = np.array(scores, dtype=np.float64)\n    \n    # Compute the maximum score to avoid numerical instability\n    max_score = np.max(scores_np)\n    \n    # Shift scores by subtracting the maximum to prevent overflow in exponentiation\n    shifted_scores = scores_np - max_score\n    \n    # Compute the sum of exponentials of the shifted scores\n    sum_exp = np.sum(np.exp(shifted_scores))\n    \n    # Compute the logarithm of the sum of exponentials\n    log_sum_exp = np.log(sum_exp)\n    \n    # Calculate the log-softmax values\n    log_softmax_result = shifted_scores - log_sum_exp\n    \n    # Round the results to the nearest 4th decimal place\n    rounded_result = np.round(log_softmax_result, decimals=4)\n    \n    # Convert the numpy array back to a Python list and return\n    return rounded_result.tolist()\n```"}
{"task_id": 40, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\n\nclass Dense(Layer):\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        \"\"\"Initialize weights and optimizers.\"\"\"\n        input_dim = self.input_shape[0]\n        limit = 1 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        self.w0 = np.zeros(self.n_units)\n        # Copy optimizer to maintain separate states for W and w0\n        self.optimizer_W = copy.copy(optimizer)\n        self.optimizer_w0 = copy.copy(optimizer)\n\n    def parameters(self):\n        \"\"\"Return total number of trainable parameters.\"\"\"\n        if self.W is None or self.w0 is None:\n            return 0\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        \"\"\"Compute forward pass: X.dot(W) + w0.\"\"\"\n        self.layer_input = X  # Store input for backward pass\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        \"\"\"Compute gradient w.r.t. input and update parameters if trainable.\"\"\"\n        # Gradient of loss w.r.t. input\n        dX = np.dot(accum_grad, self.W.T)\n        \n        if self.trainable:\n            # Gradient of loss w.r.t. W and w0\n            dW = np.dot(self.layer_input.T, accum_grad)\n            dw0 = np.sum(accum_grad, axis=0)\n            \n            # Update parameters using optimizers\n            self.W = self.optimizer_W.update(self.W, dW)\n            self.w0 = self.optimizer_w0.update(self.w0, dw0)\n        \n        return dX\n\n    def output_shape(self):\n        \"\"\"Return output shape (n_units,).\"\"\"\n        return (self.n_units,)\n\n# Example optimizer class (for demonstration, can be integrated with the Dense layer)\nclass SGD:\n    def __init__(self, learning_rate=0.01):\n        self.learning_rate = learning_rate\n\n    def update(self, param, grad):\n        \"\"\"Simple SGD update rule.\"\"\"\n        return param - self.learning_rate * grad\n```"}
{"task_id": 41, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    # Apply padding to the input matrix\n    padded = np.pad(\n        input_matrix,\n        pad_width=((padding, padding), (padding, padding)),\n        mode='constant',\n        constant_values=0\n    )\n    \n    # Get dimensions of the padded input and kernel\n    h_padded, w_padded = padded.shape\n    k_h, k_w = kernel.shape\n    \n    # Calculate output dimensions\n    output_h = (h_padded - k_h) // stride + 1\n    output_w = (w_padded - k_w) // stride + 1\n    \n    # Check if output dimensions are non-positive (invalid)\n    if output_h <= 0 or output_w <= 0:\n        return []\n    \n    # Initialize the output matrix with zeros\n    output = np.zeros((output_h, output_w), dtype=np.float64)\n    \n    # Perform the convolution by sliding the kernel over the padded input\n    for i in range(output_h):\n        for j in range(output_w):\n            # Compute the starting indices for the current kernel position\n            x_start = i * stride\n            y_start = j * stride\n            x_end = x_start + k_h\n            y_end = y_start + k_w\n            \n            # Extract the window from the padded input\n            window = padded[x_start:x_end, y_start:y_end]\n            \n            # Compute the element-wise product and sum for the current window\n            output[i, j] = np.sum(window * kernel)\n    \n    # Round the result to the nearest 4th decimal place\n    output_rounded = np.round(output, decimals=4)\n    \n    # Convert the numpy array to a Python list and return\n    return output_rounded.tolist()\n```"}
{"task_id": 42, "completion_id": 0, "completion": "\n\n```python\ndef relu(z: float) -> float:\n    \"\"\"Applies the ReLU (Rectified Linear Unit) activation function to the input.\n    \n    The ReLU function returns the input value if it is positive, otherwise returns 0.\n    \n    Args:\n        z: A floating-point number as input to the ReLU function.\n        \n    Returns:\n        A floating-point number which is the result of applying ReLU to z.\n    \"\"\"\n    return max(0.0, z)\n```"}
{"task_id": 43, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    # Compute predicted values using the feature matrix and coefficients\n    y_pred = X.dot(w)\n    # Calculate the Mean Squared Error (MSE)\n    mse = np.mean((y_true - y_pred) ** 2)\n    # Calculate the L2 regularization term (sum of squares of coefficients multiplied by alpha)\n    regularization = alpha * np.sum(w ** 2)\n    # Combine MSE and regularization term to get the Ridge loss\n    total_loss = mse + regularization\n    # Round the result to the nearest 4th decimal place\n    return round(total_loss, 4)\n```"}
{"task_id": 44, "completion_id": 0, "completion": "\n\n```python\ndef leaky_relu(z: float, alpha: float = 0.01) -> float|int:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input value.\n\n    Leaky ReLU is defined as:\n    - For non-negative inputs (z >= 0), the output is the input itself (z).\n    - For negative inputs (z < 0), the output is alpha multiplied by the input (alpha * z),\n      where alpha is a small positive slope (default is 0.01).\n\n    Args:\n        z (float): The input value to apply Leaky ReLU to.\n        alpha (float, optional): The slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        float|int: The result of applying Leaky ReLU to z.\n    \"\"\"\n    if z >= 0:\n        return z\n    else:\n        return alpha * z\n```"}
{"task_id": 45, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kernel_function(x1, x2):\n    \"\"\"Computes the linear kernel between two vectors, defined as their dot product.\n    \n    Args:\n        x1 (array-like): First input vector.\n        x2 (array-like): Second input vector.\n        \n    Returns:\n        float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\n```"}
{"task_id": 46, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef precision(y_true, y_pred):\n    # Calculate True Positives (TP): both true and predicted labels are 1\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    \n    # Calculate False Positives (FP): true label is 0 but predicted label is 1\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    \n    # Avoid division by zero: if there are no predicted positives, return 0.0\n    denominator = tp + fp\n    if denominator == 0:\n        return 0.0\n    \n    # Compute and return precision\n    return tp / denominator\n```"}
{"task_id": 47, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X, dtype=np.float64)\n    y = np.array(y, dtype=np.float64)\n    weights = np.array(weights, dtype=np.float64)\n    \n    m = X.shape[0]  # Number of samples\n    n = X.shape[1]  # Number of features\n    \n    # Determine the effective batch size based on the method\n    if method == 'batch':\n        batch_size = m\n    elif method == 'sgd':\n        batch_size = 1\n    elif method == 'mini-batch':\n        # Ensure batch_size is at least 1 and at most m\n        batch_size = max(1, min(batch_size, m))\n    else:\n        raise ValueError(\"Method must be 'batch', 'sgd', or 'mini-batch'\")\n    \n    # Make a copy of the initial weights to avoid modifying the input array\n    weights = np.copy(weights)\n    \n    for _ in range(n_iterations):\n        # Randomly select a batch of indices (with replacement if batch_size > m)\n        indices = np.random.choice(m, size=batch_size, replace=(batch_size > m))\n        X_batch = X[indices]\n        y_batch = y[indices]\n        \n        # Compute predicted values for the batch\n        y_pred = np.dot(X_batch, weights)\n        \n        # Compute the error (predicted - actual)\n        error = y_pred - y_batch\n        \n        # Compute the gradient of MSE loss with respect to weights\n        gradient = np.dot(X_batch.T, error) / batch_size\n        \n        # Update the weights\n        weights -= learning_rate * gradient\n    \n    # Round to the nearest 4th decimal and convert to a Python list\n    return np.round(weights, decimals=4).tolist()\n```"}
{"task_id": 48, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef rref(matrix):\n    # Convert the input matrix to a numpy array of floating point numbers\n    mat = np.array(matrix, dtype=np.float64)\n    n_rows, n_cols = mat.shape  # Get the number of rows and columns\n    r = 0  # Current pivot row index\n    c = 0  # Current pivot column index\n\n    # Iterate through each row and column to find pivots\n    while r < n_rows and c < n_cols:\n        # Find the indices of rows with non-zero entries in the current column, starting from the current row\n        pivot_indices = np.where(mat[r:, c] != 0)[0]\n        if len(pivot_indices) == 0:\n            # No pivot in this column, move to the next column\n            c += 1\n            continue\n        \n        # The pivot row is the first row with a non-zero entry in the current column\n        pivot_row = r + pivot_indices[0]\n        # Swap the current row with the pivot row to bring the pivot to the current row\n        mat[[r, pivot_row]] = mat[[pivot_row, r]]\n\n        # Normalize the pivot row so that the pivot element is 1\n        pivot_value = mat[r, c]\n        mat[r] = mat[r] / pivot_value\n\n        # Eliminate all other rows by subtracting the appropriate multiple of the pivot row\n        for k in range(n_rows):\n            if k != r:\n                factor = mat[k, c]\n                mat[k] -= factor * mat[r]\n\n        # Move to the next row and column for the next pivot\n        r += 1\n        c += 1\n\n    # Convert the numpy array back to a list of lists and return\n    return mat.tolist()\n```"}
{"task_id": 49, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8, num_iterations=10):\n    # Initialize parameters and moment estimates\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)  # First moment estimate\n    v = np.zeros_like(x)  # Second moment estimate\n    \n    for t in range(1, num_iterations + 1):\n        # Compute gradient\n        g = grad(x)\n        \n        # Update first and second moment estimates\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * (g ** 2)\n        \n        # Bias correction\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        \n        # Update parameters\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    \n    # Round to 4 decimal places and convert to list\n    optimized_x = np.round(x, 4)\n    return optimized_x.tolist()\n```"}
{"task_id": 50, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float = 0.1, learning_rate: float = 0.01, max_iter: int = 1000, tol: float = 1e-4) -> tuple:\n    \"\"\"\n    Implements Lasso Regression (L1 Regularization) using Gradient Descent.\n    \n    Parameters:\n    X (np.array): Feature matrix of shape (n_samples, n_features)\n    y (np.array): Target values of shape (n_samples,)\n    alpha (float): Regularization parameter (L1 penalty strength)\n    learning_rate (float): Step size for gradient descent\n    max_iter (int): Maximum number of iterations\n    tol (float): Tolerance for stopping criterion\n    \n    Returns:\n    tuple: Tuple containing (weights, bias) where both are lists rounded to 4 decimals\n    \"\"\"\n    n_samples, n_features = X.shape\n    \n    # Initialize weights and bias\n    w = np.zeros(n_features)\n    b = 0.0\n    \n    for _ in range(max_iter):\n        # Compute predicted values\n        y_hat = np.dot(X, w) + b\n        \n        # Compute error (y_hat - y)\n        error = y_hat - y\n        \n        # Compute gradients\n        gradient_w = (np.dot(X.T, error) / n_samples) + alpha * np.sign(w)\n        gradient_b = np.mean(error)\n        \n        # Update weights and bias\n        w_new = w - learning_rate * gradient_w\n        b_new = b - learning_rate * gradient_b\n        \n        # Check for convergence\n        if np.linalg.norm(w_new - w) < tol:\n            break\n        \n        w = w_new\n        b = b_new\n    \n    # Round to 4 decimal places and convert to lists\n    w_rounded = np.round(w, decimals=4).tolist()\n    b_rounded = np.round(b, decimals=4).tolist()\n    \n    return (w_rounded, b_rounded)\n```"}
{"task_id": 51, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    \n    # Create a (m+1) x (n+1) matrix initialized with zeros\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    \n    # Initialize the first row and column with base cases\n    dp[0, :] = np.arange(n + 1)\n    dp[:, 0] = np.arange(m + 1)\n    \n    # Fill the DP table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # Cost for substitution: 0 if characters match, 1 otherwise\n            cost = 0 if source[i-1] == target[j-1] else 1\n            \n            # Calculate possible edit operations\n            substitution = dp[i-1, j-1] + cost\n            deletion = dp[i-1, j] + 1\n            insertion = dp[i, j-1] + 1\n            \n            # Determine the minimum cost so far\n            dp[i, j] = min(substitution, deletion, insertion)\n            \n            # Check for transposition possibility (swap of two adjacent characters)\n            if i > 1 and j > 1 and source[i-1] == target[j-2] and source[i-2] == target[j-1]:\n                transposition = dp[i-2, j-2] + 1\n                # Update if transposition offers a lower cost\n                if transposition < dp[i, j]:\n                    dp[i, j] = transposition\n    \n    return dp[m, n]\n```"}
{"task_id": 52, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef recall(y_true, y_pred):\n    # Convert lists to numpy arrays for element-wise operations\n    y_true_arr = np.array(y_true)\n    y_pred_arr = np.array(y_pred)\n    \n    # Calculate True Positives (TP): actual 1s predicted as 1s\n    tp = np.sum((y_true_arr == 1) & (y_pred_arr == 1))\n    \n    # Calculate False Negatives (FN): actual 1s predicted as 0s\n    fn = np.sum((y_true_arr == 1) & (y_pred_arr == 0))\n    \n    # Compute the denominator (TP + FN)\n    denominator = tp + fn\n    \n    # Handle division by zero case\n    if denominator == 0:\n        return 0.0\n    \n    # Calculate recall and round to three decimal places\n    recall_value = tp / denominator\n    return round(recall_value, 3)\n```"}
{"task_id": 53, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef self_attention(X, W_q, W_k, W_v):\n    # Compute Query, Key, Value matrices by multiplying input X with respective weight matrices\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    \n    # Calculate attention scores by dot product of Query and transposed Key\n    attention_scores = np.dot(Q, K.T)\n    \n    # Scale the attention scores by the square root of the dimension of Key (d_k)\n    d_k = K.shape[1]\n    scaled_attention_scores = attention_scores / np.sqrt(d_k)\n    \n    # Apply softmax to obtain attention weights (normalized across the sequence length)\n    exp_scores = np.exp(scaled_attention_scores)\n    attention_weights = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    \n    # Compute the self-attention output by multiplying attention weights with Value matrix\n    attention_output = np.dot(attention_weights, V)\n    \n    # Round to 4 decimal places and convert to a Python list\n    return np.round(attention_output, decimals=4).tolist()\n```"}
{"task_id": 54, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    # Convert inputs to numpy arrays for matrix operations\n    h_prev = np.array(initial_hidden_state, dtype=np.float64)\n    Wx_np = np.array(Wx, dtype=np.float64)\n    Wh_np = np.array(Wh, dtype=np.float64)\n    b_np = np.array(b, dtype=np.float64)\n    \n    # Process each input in the sequence\n    for x in input_sequence:\n        x_np = np.array(x, dtype=np.float64)\n        # Compute the new hidden state using tanh activation\n        h_t = np.tanh(Wx_np @ x_np + Wh_np @ h_prev + b_np)\n        h_prev = h_t  # Update hidden state for next iteration\n    \n    # Round to 4 decimal places and convert to Python list\n    final_hidden = np.round(h_prev, decimals=4)\n    return final_hidden.tolist()\n```"}
{"task_id": 55, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef translate_object(points, tx, ty):\n    # Convert the list of points to a numpy array\n    points_np = np.array(points)\n    # Apply translation by adding tx to x-coordinates and ty to y-coordinates\n    translated_points = points_np + [tx, ty]\n    # Convert the numpy array back to a Python list and return\n    return translated_points.tolist()\n```"}
{"task_id": 56, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Computes the Kullback-Leibler (KL) divergence between two normal distributions.\n\n    Parameters:\n    mu_p (float): Mean of the first normal distribution (P).\n    sigma_p (float): Standard deviation of the first normal distribution (P).\n    mu_q (float): Mean of the second normal distribution (Q).\n    sigma_q (float): Standard deviation of the second normal distribution (Q).\n\n    Returns:\n    float: The KL divergence D_KL(P || Q).\n    \"\"\"\n    # Calculate squared difference of means\n    mean_diff_sq = (mu_p - mu_q) ** 2\n    \n    # Calculate variances from standard deviations\n    var_p = sigma_p ** 2\n    var_q = sigma_q ** 2\n    \n    # Compute each term in the KL divergence formula\n    term1 = mean_diff_sq / var_q\n    term2 = var_p / var_q\n    log_term = np.log(var_q / var_p)  # Equivalent to ln(sigma_q\u00b2 / sigma_p\u00b2)\n    \n    # Combine terms to get KL divergence\n    kl = 0.5 * (term1 + term2 - 1 + log_term)\n    \n    return kl\n```"}
{"task_id": 57, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gauss_seidel(A, b, n, x_ini=None):\n    # Convert input matrix and vector to numpy arrays with float dtype\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    # Determine the size of the system\n    m = A.shape[0]\n    \n    # Initialize the solution vector\n    if x_ini is None:\n        x = np.zeros(m, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    \n    # Perform Gauss-Seidel iterations\n    for _ in range(n):\n        for i in range(m):\n            # Calculate the sum of terms using updated and old values\n            sum_updated = np.dot(A[i, :i], x[:i])  # Uses updated values (j < i)\n            sum_old = np.dot(A[i, i+1:], x[i+1:])  # Uses old values (j > i)\n            # Update the i-th component of x\n            x[i] = (b[i] - sum_updated - sum_old) / A[i, i]\n    \n    # Round to the nearest 4th decimal and convert to Python list\n    x_rounded = np.round(x, decimals=4)\n    return x_rounded.tolist()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gaussian_elimination(A, b):\n    # Convert input to numpy arrays with float dtype to handle divisions\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = A.shape[0]  # Number of variables\n    \n    # Form the augmented matrix [A|b]\n    augmented = np.hstack((A, b.reshape(-1, 1)))\n    \n    # Forward elimination with partial pivoting\n    for pivot in range(n):\n        # Find the row with the maximum absolute value in the current column\n        max_row = np.argmax(np.abs(augmented[pivot:, pivot])) + pivot\n        # Swap the current pivot row with the max row\n        augmented[[pivot, max_row]] = augmented[[max_row, pivot]]\n        \n        # Check for singular matrix (pivot is too close to zero)\n        if np.abs(augmented[pivot, pivot]) < 1e-10:\n            raise ValueError(\"Matrix is singular or nearly singular\")\n        \n        # Eliminate all rows below the current pivot\n        for i in range(pivot + 1, n):\n            factor = augmented[i, pivot] / augmented[pivot, pivot]\n            augmented[i, :] -= factor * augmented[pivot, :]\n    \n    # Backward substitution to find the solution\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        # Sum the product of known variables and their coefficients\n        sum_terms = np.sum(augmented[i, i+1:n] * x[i+1:n])\n        x[i] = (augmented[i, n] - sum_terms) / augmented[i, i]\n    \n    # Round to the nearest 4th decimal and convert to list\n    return np.round(x, 4).tolist()\n```"}
{"task_id": 59, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\nclass LSTM:\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n\n        # Initialize weights and biases\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        # x shape: (sequence_length, input_size, batch_size)\n        # initial_hidden_state: (hidden_size, batch_size)\n        # initial_cell_state: (hidden_size, batch_size)\n        T = x.shape[0]\n        hidden_states = []\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n\n        for t in range(T):\n            x_t = x[t]  # (input_size, batch_size)\n            # Concatenate previous hidden state and current input\n            z = np.concatenate([h_prev, x_t], axis=0)  # (hidden_size + input_size, batch_size)\n\n            # Compute forget gate\n            f_t = 1 / (1 + np.exp(-(np.dot(self.Wf, z) + self.bf)))  # (hidden_size, batch_size)\n\n            # Compute input gate\n            i_t = 1 / (1 + np.exp(-(np.dot(self.Wi, z) + self.bi)))  # (hidden_size, batch_size)\n\n            # Compute candidate cell state\n            c_tilde_t = np.tanh(np.dot(self.Wc, z) + self.bc)  # (hidden_size, batch_size)\n\n            # Update cell state\n            c_t = f_t * c_prev + i_t * c_tilde_t  # (hidden_size, batch_size)\n\n            # Compute output gate\n            o_t = 1 / (1 + np.exp(-(np.dot(self.Wo, z) + self.bo)))  # (hidden_size, batch_size)\n\n            # Update hidden state\n            h_t = o_t * np.tanh(c_t)  # (hidden_size, batch_size)\n\n            # Store current hidden state\n            hidden_states.append(h_t)\n\n            # Update previous states for next iteration\n            h_prev = h_t\n            c_prev = c_t\n\n        # Round results to 4 decimal places and convert to Python lists\n        hidden_states_rounded = [np.round(h, 4).tolist() for h in hidden_states]\n        final_hidden_rounded = np.round(h_prev, 4).tolist()\n        final_cell_rounded = np.round(c_prev, 4).tolist()\n\n        return hidden_states_rounded, final_hidden_rounded, final_cell_rounded\n```"}
{"task_id": 60, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    \n    N = len(corpus)\n    doc_word_counts = []\n    doc_lengths = []\n    \n    # Preprocess each document to get word counts and lengths\n    for doc in corpus:\n        word_counts = {}\n        for word in doc:\n            word_counts[word] = word_counts.get(word, 0) + 1\n        doc_word_counts.append(word_counts)\n        doc_lengths.append(len(doc))\n    \n    # Calculate IDF scores for each query term\n    idf_scores = []\n    for term in query:\n        doc_freq = 0\n        for counts in doc_word_counts:\n            if term in counts:\n                doc_freq += 1\n        # Apply smoothing to avoid division by zero\n        idf = np.log((N + 1) / (doc_freq + 1))\n        idf_scores.append(idf)\n    \n    # Calculate TF-IDF for each term in each document\n    result = []\n    for doc_idx in range(N):\n        doc_tf_idf = []\n        doc_len = doc_lengths[doc_idx]\n        doc_counts = doc_word_counts[doc_idx]\n        for term_idx, term in enumerate(query):\n            if doc_len == 0:\n                tf = 0.0\n            else:\n                term_count = doc_counts.get(term, 0)\n                tf = term_count / doc_len\n            tf_idf = tf * idf_scores[term_idx]\n            doc_tf_idf.append(round(tf_idf, 5))\n        result.append(doc_tf_idf)\n    \n    # Convert to numpy array and back to list for consistent output format\n    return np.array(result).tolist()\n```"}
{"task_id": 61, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    # Calculate True Positives (TP), False Positives (FP), and False Negatives (FN)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    \n    # Compute Precision, handling division by zero\n    if TP + FP == 0:\n        precision = 0.0\n    else:\n        precision = TP / (TP + FP)\n    \n    # Compute Recall, handling division by zero\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    \n    # Compute F-beta Score\n    if precision == 0 or recall == 0:\n        f_score_val = 0.0\n    else:\n        numerator = (1 + beta ** 2) * precision * recall\n        denominator = (beta ** 2 * precision) + recall\n        f_score_val = numerator / denominator\n    \n    # Round to three decimal places\n    return round(f_score_val, 3)\n```"}
{"task_id": 62, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\nclass SimpleRNN:\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        x: input sequence, shape (T, input_size) where T is the sequence length.\n        Returns:\n            outputs: list of output vectors at each time step, each of shape (output_size, 1)\n            inputs: list of input vectors used at each time step, each of shape (input_size, 1)\n            hidden_states: list of hidden states at each time step, including initial, each of shape (hidden_size, 1)\n        \"\"\"\n        x = np.array(x)\n        T = x.shape[0]\n        input_size = x.shape[1]\n        inputs = [x[t].reshape(-1, 1) for t in range(T)]\n        \n        hidden_states = []\n        outputs = []\n        h_prev = np.zeros((self.hidden_size, 1))  # Initial hidden state (h_0)\n        hidden_states.append(h_prev)\n        \n        for t in range(T):\n            x_t = inputs[t]\n            # Compute hidden state h_t\n            h_t = np.tanh(self.W_xh @ x_t + self.W_hh @ h_prev + self.b_h)\n            hidden_states.append(h_t)\n            # Compute output y_t\n            y_t = self.W_hy @ h_t + self.b_y\n            outputs.append(y_t)\n            h_prev = h_t  # Update previous hidden state for next step\n        \n        return outputs, inputs, hidden_states\n\n    def backward(self, expected_output, outputs, inputs, hidden_states, learning_rate):\n        \"\"\"\n        Backpropagation Through Time (BPTT) to update weights.\n        expected_output: list of target vectors, each of shape (output_size, 1)\n        outputs: list of output vectors from forward pass, each of shape (output_size, 1)\n        inputs: list of input vectors from forward pass, each of shape (input_size, 1)\n        hidden_states: list of hidden states from forward pass, including initial, each of shape (hidden_size, 1)\n        learning_rate: step size for weight updates\n        \"\"\"\n        T = len(outputs)\n        # Initialize gradients\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hidden_states[0])  # Gradient for initial hidden state (h_0)\n        \n        # Iterate backward through time steps\n        for t in reversed(range(T)):\n            # Current time step's output and target\n            y_t = outputs[t]\n            target_t = expected_output[t]\n            dy_t = y_t - target_t  # Derivative of loss w.r.t. y_t (dL/dy_t)\n            \n            # Update W_hy gradient: dW_hy += dy_t @ h_{t+1}.T\n            h_t_plus_1 = hidden_states[t + 1]\n            dW_hy += dy_t @ h_t_plus_1.T\n            \n            # Update b_y gradient: db_y += dy_t\n            db_y += dy_t\n            \n            # Compute gradient w.r.t. h_{t+1}: dh_{t+1} = W_hy.T @ dy_t + W_hh.T @ dh_next\n            dh_t_plus_1 = (self.W_hy.T @ dy_t) + (self.W_hh.T @ dh_next)\n            \n            # Apply tanh derivative: dh_{t+1}_raw = dh_{t+1} * (1 - h_{t+1}^2)\n            dh_t_plus_1_raw = dh_t_plus_1 * (1 - h_t_plus_1 ** 2)\n            \n            # Update W_xh gradient: dW_xh += dh_{t+1}_raw @ x_t.T\n            x_t = inputs[t]\n            dW_xh += dh_t_plus_1_raw @ x_t.T\n            \n            # Update W_hh gradient: dW_hh += dh_{t+1}_raw @ h_t.T (h_t is hidden_states[t])\n            h_t = hidden_states[t]\n            dW_hh += dh_t_plus_1_raw @ h_t.T\n            \n            # Update b_h gradient: db_h += dh_{t+1}_raw\n            db_h += dh_t_plus_1_raw\n            \n            # Set dh_next for previous time step\n            dh_next = dh_t_plus_1_raw\n        \n        # Update weights with computed gradients\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n```"}
{"task_id": 63, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-8):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimals as a list)\n    \"\"\"\n    # Initialize the solution vector\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    \n    # Compute initial residual and search direction\n    r = b - A @ x\n    p = r.copy()\n    rtr = r.dot(r)  # Squared norm of the residual\n    \n    for _ in range(n):\n        # Check for convergence\n        if np.sqrt(rtr) < tol:\n            break\n        \n        # Compute A*p\n        Ap = A @ p\n        \n        # Calculate step size alpha\n        alpha = rtr / p.dot(Ap)\n        \n        # Update the solution vector\n        x += alpha * p\n        \n        # Update the residual\n        r -= alpha * Ap\n        \n        # Compute new squared residual norm\n        rtr_new = r.dot(r)\n        \n        # Calculate beta for the next search direction\n        beta = rtr_new / rtr\n        \n        # Update the search direction\n        p = r + beta * p\n        \n        # Update the squared residual norm for the next iteration\n        rtr = rtr_new\n    \n    # Round to 8 decimal places and convert to list\n    return np.round(x, 8).tolist()\n```"}
{"task_id": 64, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.000  # Handle empty list case\n    \n    # Get unique classes and their counts\n    classes, counts = np.unique(y, return_counts=True)\n    total_samples = len(y)\n    \n    # Calculate proportions of each class\n    proportions = counts / total_samples\n    \n    # Compute sum of squared proportions\n    sum_squared_proportions = np.sum(proportions ** 2)\n    \n    # Calculate Gini impurity\n    gini = 1 - sum_squared_proportions\n    \n    # Round to three decimal places\n    return round(gini, 3)\n```"}
{"task_id": 65, "completion_id": 0, "completion": "\n\n```python\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointers = [0]  # Starts with 0 as the first element\n    \n    for row in dense_matrix:\n        non_zero_count = 0\n        for col_index, element in enumerate(row):\n            if element != 0:\n                values.append(element)\n                column_indices.append(col_index)\n                non_zero_count += 1\n        # Update row pointers with cumulative count of non-zero elements\n        row_pointers.append(row_pointers[-1] + non_zero_count)\n    \n    return (values, column_indices, row_pointers)\n```"}
{"task_id": 66, "completion_id": 0, "completion": "\n\n```python\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected (list of numbers)\n    :param L: The line vector defining the direction of projection (list of numbers)\n    :return: List representing the projection of v onto L, rounded to three decimal places\n    \"\"\"\n    # Calculate the dot product of v and L (numerator)\n    numerator = sum(vi * li for vi, li in zip(v, L))\n    # Calculate the dot product of L with itself (denominator)\n    denominator = sum(li ** 2 for li in L)\n    \n    # Handle the case where L is a zero vector to avoid division by zero\n    if denominator == 0:\n        return [0.0] * len(v)\n    \n    # Compute the scalar projection factor\n    scalar = numerator / denominator\n    \n    # Compute the projection vector by scaling L with the scalar factor\n    projection = [round(scalar * li, 3) for li in L]\n    \n    return projection\n```"}
{"task_id": 67, "completion_id": 0, "completion": "\n\n```python\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    # Determine the number of rows and columns in the dense matrix\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0]) if num_rows > 0 else 0\n\n    # Initialize the lists to store the CSC components\n    values = []\n    row_indices = []\n    column_pointer = [0]  # Starts with 0 as the first column's starting index\n\n    # Iterate over each column in the matrix\n    for col in range(num_cols):\n        non_zero_count = 0\n        # Check each row in the current column for non-zero elements\n        for row in range(num_rows):\n            element = dense_matrix[row][col]\n            if element != 0:\n                values.append(element)\n                row_indices.append(row)\n                non_zero_count += 1\n        # Update the column pointer with the cumulative count of non-zero elements\n        column_pointer.append(column_pointer[-1] + non_zero_count)\n\n    return (values, row_indices, column_pointer)\n```"}
{"task_id": 68, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef matrix_image(A):\n    # Convert the input matrix to a numpy array of floats to handle numerical operations\n    original_A = np.array(A, dtype=float)\n    # Get the number of rows (m) and columns (n) of the matrix\n    m, n = original_A.shape\n    # Create a copy of the original matrix to perform row operations on\n    A_copy = original_A.copy()\n    # Initialize variables to track the current row being processed and the pivot columns\n    current_row = 0\n    pivot_columns = []\n    # Set a tolerance to consider values as zero (to handle floating point precision issues)\n    epsilon = 1e-8\n\n    # Iterate over each column to find pivot columns\n    for col in range(n):\n        # If all rows have been processed, break out of the loop\n        if current_row >= m:\n            break\n        # Find the pivot row (the first row with a non-zero entry in the current column)\n        pivot_row = -1\n        for r in range(current_row, m):\n            if abs(A_copy[r, col]) > epsilon:\n                pivot_row = r\n                break\n        # If no pivot is found in the current column, move to the next column\n        if pivot_row == -1:\n            continue\n        # Swap the current row with the pivot row to bring the pivot to the current row\n        A_copy[[current_row, pivot_row]] = A_copy[[pivot_row, current_row]]\n        # Eliminate all entries below the pivot in the current column\n        pivot_val = A_copy[current_row, col]\n        for r in range(current_row + 1, m):\n            factor = A_copy[r, col] / pivot_val\n            A_copy[r] = A_copy[r] - factor * A_copy[current_row]\n        # Record the current column as a pivot column\n        pivot_columns.append(col)\n        # Move to the next row for processing\n        current_row += 1\n\n    # Extract the pivot columns from the original matrix to form the basis of the column space\n    basis = original_A[:, pivot_columns]\n    # Round the basis vectors to 8 decimal places and convert to a list\n    basis_rounded = np.round(basis, 8)\n    return basis_rounded.tolist()\n```"}
{"task_id": 69, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef r_squared(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    y_true_mean = np.mean(y_true)\n    ss_tot = np.sum((y_true - y_true_mean) ** 2)\n    if ss_tot == 0:\n        return 1.0 if ss_res == 0 else 0.0\n    r2 = 1 - (ss_res / ss_tot)\n    return round(r2, 3)\n```"}
{"task_id": 70, "completion_id": 0, "completion": "\n\n```python\ndef calculate_brightness(img):\n    # Check if the image matrix is empty (no pixels)\n    total_pixels = sum(len(row) for row in img)\n    if total_pixels == 0:\n        return -1\n    \n    # Check if all rows have consistent lengths\n    row_length = len(img[0]) if img else 0\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    \n    # Check if all pixel values are within the valid range (0-255)\n    for row in img:\n        for pixel in row:\n            if not (0 <= pixel <= 255):\n                return -1\n    \n    # Calculate the average brightness\n    sum_pixels = sum(pixel for row in img for pixel in row)\n    average = sum_pixels / total_pixels\n    return round(average, 2)\n```"}
{"task_id": 71, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    TypeError: If inputs are non-numeric or cannot be converted to numeric arrays.\n    ValueError: If input arrays have mismatched shapes or are empty.\n    \"\"\"\n    try:\n        # Convert inputs to numpy arrays of float to handle numeric checks\n        y_true_arr = np.asarray(y_true, dtype=float)\n        y_pred_arr = np.asarray(y_pred, dtype=float)\n    except (TypeError, ValueError):\n        raise TypeError(\"y_true and y_pred must be numeric arrays.\")\n    \n    # Check for shape mismatch\n    if y_true_arr.shape != y_pred_arr.shape:\n        raise ValueError(f\"y_true and y_pred have mismatched shapes: {y_true_arr.shape} vs {y_pred_arr.shape}\")\n    \n    # Check for empty arrays\n    if y_true_arr.size == 0:\n        raise ValueError(\"y_true and y_pred must not be empty.\")\n    \n    # Calculate squared errors\n    squared_errors = (y_true_arr - y_pred_arr) ** 2\n    \n    # Compute MSE and RMSE\n    mse = np.mean(squared_errors)\n    rmse_value = np.sqrt(mse)\n    \n    # Round to three decimal places\n    return round(rmse_value, 3)\n```"}
{"task_id": 72, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef jaccard_index(y_true, y_pred):\n    # Convert input arrays to numpy arrays of integers\n    y_true = np.asarray(y_true, dtype=int)\n    y_pred = np.asarray(y_pred, dtype=int)\n    \n    # Calculate True Positives (TP), False Positives (FP), and False Negatives (FN)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    \n    # Compute the denominator (size of the union)\n    denominator = tp + fp + fn\n    \n    # Handle the case where both sets are empty (denominator is zero)\n    if denominator == 0:\n        return 1.0\n    else:\n        # Calculate Jaccard Index and round to three decimal places\n        return round(tp / denominator, 3)\n```"}
{"task_id": 73, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient) for binary classification.\n    \n    Parameters:\n    y_true (array-like): Ground truth binary array.\n    y_pred (array-like): Predicted binary array.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays to handle list inputs and ensure element-wise operations\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    \n    # Calculate the number of true positives (intersection of 1s in both arrays)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    \n    # Calculate the total number of positives in true and predicted arrays\n    sum_true = np.sum(y_true == 1)\n    sum_pred = np.sum(y_pred == 1)\n    \n    # Compute the denominator (sum of positives in both arrays)\n    denominator = sum_true + sum_pred\n    \n    # Handle the edge case where both arrays have no positives (denominator is 0)\n    if denominator == 0:\n        return 1.0  # Perfect overlap when there are no positives to predict\n    \n    # Calculate the Dice Score\n    dice = (2 * true_positives) / denominator\n    \n    # Round to 3 decimal places as required\n    return round(dice, 3)\n```"}
{"task_id": 74, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport hashlib\n\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generates a composite hypervector for a dataset row using Hyperdimensional Computing (HDC).\n    \n    Each feature in the row is represented by binding hypervectors of the feature name and its value.\n    Feature name hypervectors are generated using a deterministic hash of the feature name.\n    Feature value hypervectors use seeds from `random_seeds` combined with a hash of the value to ensure reproducibility.\n    All feature hypervectors are bundled (summed and thresholded) to form the composite hypervector.\n    \n    Parameters:\n    - row (dict): A dictionary where keys are feature names and values are feature values.\n    - dim (int): Dimensionality of the hypervectors.\n    - random_seeds (dict): Dictionary mapping feature names to seeds for value hypervector generation.\n    \n    Returns:\n    - list: Composite hypervector as a list of -1s and 1s.\n    \"\"\"\n    bound_hypervectors = []\n    \n    for feature_name, feature_value in row.items():\n        # Generate feature name hypervector using a deterministic hash of the feature name\n        feature_name_bytes = feature_name.encode('utf-8')\n        name_hash = hashlib.sha256(feature_name_bytes).hexdigest()\n        name_seed = int(name_hash, 16) % (2**32 - 1)  # Ensure seed is within 32-bit range\n        name_rng = np.random.RandomState(seed=name_seed)\n        name_hv = name_rng.choice([-1, 1], size=dim)\n        \n        # Generate feature value hypervector using the feature's seed and hash of the value\n        value_str = str(feature_value).encode('utf-8')\n        value_hash = hashlib.sha256(value_str).hexdigest()\n        value_seed_base = int(value_hash, 16)\n        value_seed = (random_seeds[feature_name] + value_seed_base) % (2**32 - 1)\n        value_rng = np.random.RandomState(seed=value_seed)\n        value_hv = value_rng.choice([-1, 1], size=dim)\n        \n        # Bind name and value hypervectors (element-wise multiplication)\n        bound_hv = name_hv * value_hv\n        bound_hypervectors.append(bound_hv)\n    \n    # Bundle all bound hypervectors (sum and threshold)\n    if not bound_hypervectors:  # Handle empty row case\n        composite = np.zeros(dim, dtype=int)\n    else:\n        composite_sum = np.sum(bound_hypervectors, axis=0)\n        composite = np.where(composite_sum > 0, 1, -1)  # Threshold: positive\u21921, else\u2192-1\n    \n    return composite.tolist()\n```"}
{"task_id": 75, "completion_id": 0, "completion": "\n\n```python\nfrom collections import Counter\n\ndef confusion_matrix(data):\n    # Count occurrences of each (y_true, y_pred) pair\n    counts = Counter((y_true, y_pred) for y_true, y_pred in data)\n    \n    # Extract counts for each component of the confusion matrix\n    tn = counts.get((0, 0), 0)\n    fp = counts.get((0, 1), 0)\n    fn = counts.get((1, 0), 0)\n    tp = counts.get((1, 1), 0)\n    \n    # Return the 2x2 confusion matrix in the standard format\n    return [[tn, fp], [fn, tp]]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef cosine_similarity(v1, v2):\n    # Calculate the dot product of the two vectors\n    dot_product = np.dot(v1, v2)\n    \n    # Calculate the L2 norm (magnitude) of each vector\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    \n    # Compute the cosine similarity\n    similarity = dot_product / (norm_v1 * norm_v2)\n    \n    # Round the result to three decimal places\n    return round(similarity, 3)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "\n\n```python\nfrom collections import Counter\n\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    # Initialize counters for true positives, false negatives, false positives, and true negatives\n    TP = 0\n    FN = 0\n    FP = 0\n    TN = 0\n    \n    # Iterate through each pair of actual and predicted labels to populate the counters\n    for a, p in zip(actual, predicted):\n        if a == 1:\n            if p == 1:\n                TP += 1\n            else:\n                FN += 1\n        else:\n            if p == 1:\n                FP += 1\n            else:\n                TN += 1\n    \n    # Construct the confusion matrix\n    confusion_matrix = [[TN, FP], [FN, TP]]\n    \n    # Calculate accuracy\n    total = len(actual)\n    accuracy = (TP + TN) / total if total != 0 else 0.0\n    \n    # Calculate precision and recall for F1 score\n    precision = TP / (TP + FP) if (TP + FP) != 0 else 0.0\n    recall = TP / (TP + FN) if (TP + FN) != 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) != 0 else 0.0\n    \n    # Calculate specificity\n    specificity = TN / (TN + FP) if (TN + FP) != 0 else 0.0\n    \n    # Calculate negative predictive value (NPV)\n    negative_predictive_value = TN / (TN + FN) if (TN + FN) != 0 else 0.0\n    \n    # Round all metrics to three decimal places\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    \n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\n```"}
{"task_id": 78, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef descriptive_statistics(data):\n    # Convert input data to a NumPy array for consistent handling\n    data_array = np.array(data)\n    \n    # Calculate mean\n    mean = np.mean(data_array)\n    \n    # Calculate median\n    median = np.median(data_array)\n    \n    # Calculate mode\n    unique_values, counts = np.unique(data_array, return_counts=True)\n    max_count = np.max(counts)\n    mode_indices = np.where(counts == max_count)[0]\n    mode = unique_values[mode_indices[0]]  # Select smallest mode if multiple\n    \n    # Calculate population variance (ddof=0)\n    variance = np.var(data_array)\n    \n    # Calculate standard deviation (population, since variance is population)\n    standard_deviation = np.std(data_array)\n    \n    # Calculate percentiles (25th, 50th, 75th)\n    percentiles = np.percentile(data_array, [25, 50, 75])\n    p25, p50, p75 = percentiles\n    \n    # Calculate interquartile range (IQR)\n    iqr = p75 - p25\n    \n    # Round all metrics except mode to 4 decimal places\n    result = {\n        'mean': round(mean, 4),\n        'median': round(median, 4),\n        'mode': mode,\n        'variance': round(variance, 4),\n        'standard_deviation': round(standard_deviation, 4),\n        '25th_percentile': round(p25, 4),\n        '50th_percentile': round(p50, 4),\n        '75th_percentile': round(p75, 4),\n        'interquartile_range': round(iqr, 4)\n    }\n    \n    return result\n```"}
{"task_id": 79, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    if k < 0 or k > n:\n        return 0.0  # Probability is 0 if k is outside the valid range [0, n]\n    combination = math.comb(n, k)\n    probability = combination * (p ** k) * ((1 - p) ** (n - k))\n    return round(probability, 5)\n```"}
{"task_id": 80, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    exponent = -((x - mean) ** 2) / (2 * (std_dev ** 2))\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)\n```"}
{"task_id": 81, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval (positive number)\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    # Validate k is a non-negative integer\n    if not (isinstance(k, int) or (isinstance(k, float) and k.is_integer())):\n        raise ValueError(\"k must be a non-negative integer\")\n    k = int(k)\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    \n    # Validate lam is a positive number\n    if not isinstance(lam, (int, float)):\n        raise TypeError(\"lam must be a number\")\n    if lam <= 0:\n        raise ValueError(\"lam must be a positive number\")\n    \n    # Calculate the probability using the Poisson formula\n    numerator = math.exp(-lam) * (lam ** k)\n    denominator = math.factorial(k)\n    probability = numerator / denominator\n    \n    # Round to 5 decimal places and return\n    return round(probability, 5)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float or int: The contrast, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    min_val = np.min(img)\n    max_val = np.max(img)\n    return max_val - min_val\n```"}
{"task_id": 83, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)\n```"}
{"task_id": 84, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point, rounded to 8 decimal places.\n    \"\"\"\n    if degree < 0:\n        return []\n    \n    transformed_data = []\n    for x in data:\n        features = []\n        for k in range(degree + 1):\n            term = x ** k\n            # Round to 8 decimal places\n            rounded_term = round(term, 8)\n            features.append(rounded_term)\n        transformed_data.append(features)\n    \n    return transformed_data\n```"}
{"task_id": 85, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    # Create position vector (shape: [position, 1])\n    pos = np.arange(position)[:, np.newaxis]\n    # Create dimension index vector (shape: [1, d_model])\n    k = np.arange(d_model)[np.newaxis, :]\n    # Calculate angles using the formula: pos / (10000^(2i/d_model))\n    angles = pos * (10000 ** (-k / d_model))\n    # Initialize positional encoding matrix\n    pe = np.zeros_like(angles, dtype=np.float16)\n    # Apply sine to even dimensions and cosine to odd dimensions\n    pe[:, 0::2] = np.sin(angles[:, 0::2])  # Even indices (0, 2, 4...)\n    pe[:, 1::2] = np.cos(angles[:, 1::2])  # Odd indices (1, 3, 5...)\n    # Convert to list and return\n    return pe.tolist()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "\n\n```python\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    # Check if the model is overfitting (training accuracy significantly higher than test)\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    # Check if the model is underfitting (both accuracies are below 0.7)\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    # If neither condition is met, it's a good fit\n    else:\n        return 0\n```"}
{"task_id": 87, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value (scalar or numpy array)\n    :param grad: Current gradient (scalar or numpy array)\n    :param m: First moment estimate (scalar or numpy array)\n    :param v: Second moment estimate (scalar or numpy array)\n    :param t: Current timestep (positive integer)\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v) rounded to 5 decimals and converted to list\n    \"\"\"\n    # Update first and second moment estimates\n    new_m = beta1 * m + (1 - beta1) * grad\n    new_v = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Apply bias correction\n    m_hat = new_m / (1 - beta1 ** t)\n    v_hat = new_v / (1 - beta2 ** t)\n    \n    # Compute update step\n    step = learning_rate * (m_hat / (np.sqrt(v_hat) + epsilon))\n    updated_parameter = parameter - step\n    \n    # Round to 5 decimal places and convert to list\n    updated_parameter_rounded = np.round(updated_parameter, 5).tolist()\n    new_m_rounded = np.round(new_m, 5).tolist()\n    new_v_rounded = np.round(new_v, 5).tolist()\n    \n    return (updated_parameter_rounded, new_m_rounded, new_v_rounded)\n```"}
{"task_id": 88, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),  # Token embeddings: (vocab_size, d_model)\n        \"wpe\": np.random.rand(1024, 10),  # Positional embeddings: (n_ctx, d_model)\n        \"blocks\": [],  # Simplified: empty transformer blocks for minimal implementation\n        \"ln_f\": {  # Final layer norm parameters\n            \"g\": np.ones(10),  # Scale\n            \"b\": np.zeros(10)   # Bias\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\n\ndef gen_text(prompt: str, n_tokens_to_generate: int = 40):\n    # Load encoder, hyperparameters, and model parameters\n    encoder, hparams, params = load_encoder_hparams_and_params()\n    \n    # Encode the initial prompt into token IDs\n    token_ids = encoder.encode(prompt)\n    \n    # Generate new tokens autoregressively\n    for _ in range(n_tokens_to_generate):\n        seq_len = len(token_ids)\n        \n        # 1. Token and positional embeddings\n        token_emb = params[\"wte\"][token_ids]  # (seq_len, d_model)\n        pos_emb = params[\"wpe\"][:seq_len, :]  # (seq_len, d_model)\n        x = token_emb + pos_emb  # Combine embeddings\n        \n        # 2. Apply final layer normalization\n        mean = np.mean(x, axis=-1, keepdims=True)\n        var = np.var(x, axis=-1, keepdims=True)\n        x = (x - mean) / np.sqrt(var + 1e-5)  # Normalize\n        x = x * params[\"ln_f\"][\"g\"] + params[\"ln_f\"][\"b\"]  # Scale and shift\n        \n        # 3. Project to vocabulary space (using token embedding weights transposed)\n        logits = x @ params[\"wte\"].T  # (seq_len, vocab_size)\n        \n        # 4. Select logits for the last position to predict next token\n        next_token_logits = logits[-1]\n        \n        # 5. Greedy sampling: choose token with highest logit\n        next_token = np.argmax(next_token_logits).item()\n        \n        # 6. Append predicted token to the sequence\n        token_ids.append(next_token)\n    \n    # Decode the final sequence of token IDs to text\n    generated_text = encoder.decode(token_ids)\n    return generated_text\n```"}
{"task_id": 89, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pattern_weaver(n, crystal_values, dimension):\n    def softmax(values):\n        # Implement the softmax function with numerical stability\n        values_np = np.array(values)\n        exp_values = np.exp(values_np - np.max(values_np))  # Subtract max to avoid overflow\n        return exp_values / np.sum(exp_values)\n    \n    sqrt_dim = np.sqrt(dimension)\n    output = []\n    \n    for i in range(n):\n        # Calculate attention scores for the i-th crystal\n        scores = [(crystal_values[i] * crystal_values[j]) / sqrt_dim for j in range(n)]\n        # Compute attention weights using softmax\n        att_weights = softmax(scores)\n        # Compute the weighted sum of crystal values\n        weighted_sum = np.dot(att_weights, crystal_values)\n        # Round to 4 decimal places and append to output\n        output.append(round(weighted_sum, 4))\n    \n    return output\n```"}
{"task_id": 90, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    if not corpus:\n        return []\n    \n    N = len(corpus)\n    doc_lengths = [len(doc) for doc in corpus]\n    avgdl = sum(doc_lengths) / N if N != 0 else 0.0\n    \n    # Precompute document sets for term presence checks\n    doc_sets = [set(doc) for doc in corpus]\n    \n    # Compute document frequency (n(q)) for each query term\n    query_terms = query\n    n_q_dict = {}\n    for q in query_terms:\n        if q in n_q_dict:\n            continue\n        n_q = sum(1 for s in doc_sets if q in s)\n        n_q_dict[q] = n_q\n    \n    # Compute IDF for each query term\n    idf_dict = {}\n    for q in query_terms:\n        n_q = n_q_dict[q]\n        numerator = (N - n_q + 0.5)\n        denominator = (n_q + 0.5)\n        idf = np.log(numerator / denominator)\n        idf_dict[q] = idf\n    \n    # Calculate BM25 scores for each document\n    scores = []\n    for doc in corpus:\n        dl = len(doc)\n        dl_over_avgdl = dl / avgdl if avgdl != 0 else 0.0\n        K = k1 * (1 - b + b * dl_over_avgdl)\n        term_counts = Counter(doc)\n        score = 0.0\n        \n        for q in query_terms:\n            tf = term_counts.get(q, 0)\n            if tf == 0:\n                continue\n            idf = idf_dict[q]\n            numerator_tf = tf * (k1 + 1)\n            denominator_tf = tf + K\n            term_score = idf * (numerator_tf / denominator_tf)\n            score += term_score\n        \n        scores.append(round(score, 3))\n    \n    return scores\n```"}
{"task_id": 91, "completion_id": 0, "completion": "\n\n```python\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = 0  # True Positives\n    fp = 0  # False Positives\n    fn = 0  # False Negatives\n\n    # Count TP, FP, FN by comparing each true and predicted label\n    for true_label, pred_label in zip(y_true, y_pred):\n        if true_label == 1 and pred_label == 1:\n            tp += 1\n        elif pred_label == 1 and true_label == 0:\n            fp += 1\n        elif true_label == 1 and pred_label == 0:\n            fn += 1\n\n    # Calculate precision (handle division by zero)\n    if tp + fp == 0:\n        precision = 0.0\n    else:\n        precision = tp / (tp + fp)\n\n    # Calculate recall (handle division by zero)\n    if tp + fn == 0:\n        recall = 0.0\n    else:\n        recall = tp / (tp + fn)\n\n    # Calculate F1 score (handle division by zero)\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n\n    # Round to three decimal places\n    return round(f1, 3)\n```"}
{"task_id": 92, "completion_id": 0, "completion": "\n\n```python\nimport math\n\nPI = 3.14159\n\ndef power_grid_forecast(consumption_data):\n    # Step 1: Subtract daily fluctuation from each data point\n    detrended = []\n    for j in range(10):\n        day = j + 1  # Days are 1-based (1 to 10)\n        fluctuation = 10 * math.sin(2 * PI * day / 10)\n        detrended_value = consumption_data[j] - fluctuation\n        detrended.append(detrended_value)\n    \n    # Step 2: Perform linear regression on detrended data\n    x = list(range(1, 11))  # Days 1 to 10\n    n = 10\n    sum_x = sum(x)\n    sum_y = sum(detrended)\n    sum_xy = sum(xi * yi for xi, yi in zip(x, detrended))\n    sum_x2 = sum(xi**2 for xi in x)\n    \n    # Calculate slope (b) and intercept (a)\n    numerator_b = n * sum_xy - sum_x * sum_y\n    denominator_b = n * sum_x2 - sum_x ** 2\n    b = numerator_b / denominator_b if denominator_b != 0 else 0.0\n    a = (sum_y - b * sum_x) / n\n    \n    # Step 3: Predict day 15's base consumption\n    base_15 = a + b * 15\n    \n    # Step 4: Add back day 15's fluctuation\n    fluctuation_15 = 10 * math.sin(2 * PI * 15 / 10)\n    forecast_with_fluctuation = base_15 + fluctuation_15\n    \n    # Step 5: Round and add 5% safety margin (rounded up)\n    rounded_value = round(forecast_with_fluctuation)\n    safety_margin = rounded_value * 1.05\n    final_value = math.ceil(safety_margin)\n    \n    return int(final_value)\n```"}
{"task_id": 93, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)\n```"}
{"task_id": 94, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> tuple:\n    \"\"\"\n    Computes and splits queries, keys, and values into multiple heads.\n    \n    Args:\n        X: Input array of shape (batch_size, seq_len, d_model)\n        W_q: Query weight matrix of shape (d_model, d_model)\n        W_k: Key weight matrix of shape (d_model, d_model)\n        W_v: Value weight matrix of shape (d_model, d_model)\n        n_heads: Number of attention heads\n    \n    Returns:\n        Tuple of split Q, K, V arrays each of shape (batch_size, n_heads, seq_len, d_k)\n    \"\"\"\n    # Compute raw Q, K, V by matrix multiplication\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    \n    # Extract dimensions\n    batch_size, seq_len, d_model = X.shape\n    d_k = d_model // n_heads  # Dimension per head\n    \n    # Reshape and transpose to (batch_size, n_heads, seq_len, d_k)\n    Q_split = Q.reshape(batch_size, seq_len, n_heads, d_k).transpose(0, 2, 1, 3)\n    K_split = K.reshape(batch_size, seq_len, n_heads, d_k).transpose(0, 2, 1, 3)\n    V_split = V.reshape(batch_size, seq_len, n_heads, d_k).transpose(0, 2, 1, 3)\n    \n    return Q_split, K_split, V_split\n\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes scaled dot-product attention for multiple heads.\n    \n    Args:\n        Q: Queries array of shape (batch_size, n_heads, seq_len, d_k)\n        K: Keys array of shape (batch_size, n_heads, seq_len, d_k)\n        V: Values array of shape (batch_size, n_heads, seq_len, d_k)\n    \n    Returns:\n        Attention output array of shape (batch_size, n_heads, seq_len, d_k)\n    \"\"\"\n    d_k = Q.shape[-1]\n    \n    # Compute attention scores (batch_size, n_heads, seq_len, seq_len)\n    scores = Q @ K.transpose(0, 1, 3, 2)  # Transpose last two dimensions of K\n    \n    # Scale scores to stabilize gradients\n    scores = scores / np.sqrt(d_k)\n    \n    # Compute softmax attention weights\n    max_scores = np.max(scores, axis=-1, keepdims=True)  # For numerical stability\n    exp_scores = np.exp(scores - max_scores)\n    attn_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    \n    # Compute attention output\n    output = attn_weights @ V\n    \n    return output\n\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements multi-head attention mechanism.\n    \n    Args:\n        X: Input array of shape (batch_size, seq_len, d_model)\n        W_q: Query weight matrix of shape (d_model, d_model)\n        W_k: Key weight matrix of shape (d_model, d_model)\n        W_v: Value weight matrix of shape (d_model, d_model)\n        n_heads: Number of attention heads\n    \n    Returns:\n        List of attention outputs with shape (batch_size, seq_len, d_model), rounded to 4 decimals\n    \"\"\"\n    # Step 1: Compute and split Q, K, V into heads\n    Q_split, K_split, V_split = compute_qkv(X, W_q, W_k, W_v, n_heads)\n    \n    # Step 2: Compute self-attention for each head\n    attn_output = self_attention(Q_split, K_split, V_split)\n    \n    # Step 3: Concatenate head outputs\n    batch_size, n_heads, seq_len, d_k = attn_output.shape\n    concatenated = attn_output.transpose(0, 2, 1, 3).reshape(batch_size, seq_len, -1)  # (batch_size, seq_len, d_model)\n    \n    # Round to 4 decimals and convert to Python list\n    return np.round(concatenated, decimals=4).tolist()\n```"}
{"task_id": 95, "completion_id": 0, "completion": "\n\n```python\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n\n    Raises:\n    ValueError: If the lengths of x and y are different, or if x or y contains non-binary values.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Input lists must be of the same length.\")\n    \n    for val in x:\n        if val not in (0, 1):\n            raise ValueError(\"All elements in x must be 0 or 1.\")\n    for val in y:\n        if val not in (0, 1):\n            raise ValueError(\"All elements in y must be 0 or 1.\")\n    \n    a = b = c = d = 0\n    for xi, yi in zip(x, y):\n        if xi == 1 and yi == 1:\n            a += 1\n        elif xi == 1 and yi == 0:\n            b += 1\n        elif xi == 0 and yi == 1:\n            c += 1\n        else:\n            d += 1\n    \n    numerator = a * d - b * c\n    denominator = ((a + b) * (c + d) * (a + c) * (b + d)) ** 0.5\n    \n    if denominator == 0:\n        return 0.0\n    \n    phi = numerator / denominator\n    return round(phi, 4)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "\n\n```python\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    The Hard Sigmoid is a piecewise linear approximation of the standard sigmoid function.\n    It is defined as follows:\n    - For x \u2264 -2.5, the output is 0.0\n    - For x \u2265 2.5, the output is 1.0\n    - For -2.5 < x < 2.5, the output is (0.2 * x) + 0.5\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5\n```"}
{"task_id": 97, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef elu(x: float, alpha: float = 1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to the 4th decimal place\n    \"\"\"\n    if x >= 0:\n        activation = x\n    else:\n        activation = alpha * (math.exp(x) - 1)\n    return round(activation, 4)\n```"}
{"task_id": 98, "completion_id": 0, "completion": "\n\n```python\ndef prelu(x: float, alpha: float = 0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x\n```"}
{"task_id": 99, "completion_id": 0, "completion": "\n\n```python\nimport math\n\n\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 0:\n        result = x + math.log1p(math.exp(-x))\n    else:\n        result = math.log1p(math.exp(x))\n    return round(result, 4)\n```"}
{"task_id": 100, "completion_id": 0, "completion": "\n\n```python\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place.\n    \"\"\"\n    denominator = 1 + abs(x)\n    result = x / denominator\n    return round(result, 4)\n```"}
{"task_id": 101, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    rhos = np.array(rhos, dtype=np.float64)\n    A = np.array(A, dtype=np.float64)\n    pi_theta_old = np.array(pi_theta_old, dtype=np.float64)\n    pi_theta_ref = np.array(pi_theta_ref, dtype=np.float64)\n    \n    # Calculate reference ratio (r_i = pi_ref / pi_old)\n    r = pi_theta_ref / pi_theta_old\n    \n    # Compute difference between current and reference ratios (p_i - r_i)\n    pr_diff = rhos - r\n    \n    # Apply clipping to (p_i - r_i) within [-epsilon, epsilon]\n    clipped_pr_diff = np.clip(pr_diff, -epsilon, epsilon)\n    \n    # Calculate surrogate terms using clipped and unclipped differences\n    surrogate_terms = np.minimum(pr_diff * A, clipped_pr_diff * A)\n    \n    # Average of surrogate terms\n    surrogate_avg = np.mean(surrogate_terms)\n    \n    # Compute current policy probabilities (pi_theta = rho_i * pi_old)\n    pi_theta = rhos * pi_theta_old\n    \n    # Handle KL divergence calculation with numerical stability\n    # Set ratios to 1 where pi_theta is 0 to avoid 0 * log(0) (which is 0)\n    kl_ratios = pi_theta / pi_theta_ref\n    kl_ratios[pi_theta == 0] = 1.0  # Ensure 0 * log(0/pi_ref) becomes 0 * log(1) = 0\n    \n    # Compute KL terms and replace NaNs (from 0*log(0) after handling) with 0\n    kl_terms = pi_theta * np.log(kl_ratios)\n    kl_terms = np.nan_to_num(kl_terms, nan=0.0)\n    \n    # Average KL divergence\n    kl_avg = np.mean(kl_terms)\n    \n    # Combine surrogate and KL penalty terms\n    objective = surrogate_avg - beta * kl_avg\n    \n    # Round to 6 decimal places as required\n    return round(objective, 6)\n```"}
{"task_id": 102, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport numpy as np\n\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal.\n    \"\"\"\n    sigmoid = 1.0 / (1.0 + math.exp(-x))\n    swish_value = x * sigmoid\n    return round(swish_value, 4)\n```"}
{"task_id": 103, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport numpy as np\n\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554804\n    if x >= 0:\n        activation = scale * x\n    else:\n        activation = scale * alpha * (math.exp(x) - 1)\n    return round(activation, 4)\n```"}
{"task_id": 104, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1) as a Python list\n    \"\"\"\n    # Compute the linear combination of inputs and weights, then add bias\n    z = X.dot(weights) + bias\n    \n    # Apply the sigmoid function to get probabilities\n    probabilities = 1 / (1 + np.exp(-z))\n    \n    # Generate binary predictions using 0.5 as the threshold\n    predictions = (probabilities >= 0.5).astype(int)\n    \n    # Convert the numpy array to a Python list and return\n    return predictions.tolist()\n```"}
{"task_id": 105, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    # Number of samples (N) and features (M)\n    N, M = X.shape\n    # Number of classes (C)\n    C = len(np.unique(y))\n    # Convert labels to one-hot encoding (N x C)\n    Y = np.eye(C)[y.astype(int)]\n    # Initialize parameter matrix (C x M) with zeros\n    B = np.zeros((C, M), dtype=np.float64)\n    # List to collect loss values\n    losses = []\n    \n    for _ in range(iterations):\n        # Compute logits (N x C)\n        logits = X @ B.T\n        \n        # Apply stable softmax to compute probabilities (N x C)\n        max_logits = np.max(logits, axis=1, keepdims=True)\n        exp_logits = np.exp(logits - max_logits)\n        P = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        \n        # Calculate cross-entropy loss with epsilon for numerical stability\n        loss = -np.mean(np.sum(Y * np.log(P + 1e-10), axis=1))\n        losses.append(round(loss, 4))\n        \n        # Compute gradient (C x M)\n        gradient = ( (P - Y).T @ X ) / N\n        \n        # Update parameters using gradient descent\n        B -= learning_rate * gradient\n    \n    # Round parameters to 4 decimals and convert to list\n    B_rounded = B.round(4)\n    B_list = B_rounded.tolist()\n    \n    return (B_list, losses)\n```"}
{"task_id": 106, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    # Reshape y to a column vector to ensure proper matrix operations\n    m = X.shape[0]  # Number of samples\n    y = y.reshape(m, 1)\n    \n    # Add a column of ones to X to account for the intercept term (bias)\n    X_bias = np.hstack([np.ones((m, 1)), X])\n    n_features = X_bias.shape[1]  # Number of features including bias\n    \n    # Initialize model parameters (theta) to zeros\n    theta = np.zeros((n_features, 1))\n    \n    # List to store loss values at each iteration\n    loss_list = []\n    \n    for _ in range(iterations):\n        # Compute linear combination of features and parameters\n        z = X_bias @ theta\n        \n        # Apply sigmoid activation function to get probabilities\n        h = 1 / (1 + np.exp(-z))\n        \n        # Clip probabilities to avoid log(0) or log(1) for numerical stability\n        h = np.clip(h, 1e-10, 1 - 1e-10)\n        \n        # Calculate Binary Cross Entropy loss\n        loss = (-1/m) * (np.dot(y.T, np.log(h)) + np.dot((1 - y).T, np.log(1 - h)))\n        loss_val = loss.item()  # Extract scalar value from numpy array\n        loss_list.append(round(loss_val, 4))  # Store rounded loss\n        \n        # Compute gradient of the loss with respect to parameters\n        gradient = (1/m) * (X_bias.T @ (h - y))\n        \n        # Update parameters using gradient descent\n        theta = theta - learning_rate * gradient\n    \n    # Convert theta to a list of floats, rounded to 4 decimal places\n    theta_list = [round(val, 4) for val in theta.flatten().tolist()]\n    \n    return (theta_list, loss_list)\n```"}
{"task_id": 107, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\n\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    # Compute attention scores (Q * K^T)\n    scores = np.dot(Q, K.T)\n    \n    # Scale scores by the square root of the dimension of the query vectors\n    d_k = Q.shape[1]\n    scaled_scores = scores / np.sqrt(d_k)\n    \n    # Apply the attention mask (adds -inf to positions that should be masked)\n    masked_scores = scaled_scores + mask\n    \n    # Compute softmax to get attention weights\n    def softmax(x, axis=-1):\n        # Stable softmax implementation to prevent overflow\n        max_val = np.max(x, axis=axis, keepdims=True)\n        exp_x = np.exp(x - max_val)\n        return exp_x / np.sum(exp_x, axis=axis, keepdims=True)\n    \n    attention_weights = softmax(masked_scores, axis=-1)\n    \n    # Compute the final output by multiplying attention weights with V\n    output = np.dot(attention_weights, V)\n    \n    # Convert the numpy array to a Python list as required\n    return output.tolist()\n```"}
{"task_id": 108, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter\n\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The disorder is measured using entropy, which increases with the variety and evenness of color distribution.\n    \"\"\"\n    if not apples:\n        return 0.0  # Handle empty basket case\n    \n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = 0.0\n    \n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)  # Accumulate entropy\n    \n    return round(entropy, 4)\n```"}
{"task_id": 109, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    # Compute mean along the feature dimension (last axis)\n    mean = np.mean(X, axis=-1, keepdims=True)\n    # Compute variance along the feature dimension\n    variance = np.var(X, axis=-1, keepdims=True)\n    # Normalize: (X - mean) / sqrt(variance + epsilon)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    # Apply scaling (gamma) and shifting (beta)\n    X_scaled = X_normalized * gamma + beta\n    # Round to 5 decimal places and convert to list\n    return np.round(X_scaled, decimals=5).tolist()\n```"}
{"task_id": 110, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    # Split reference and candidate into tokens\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    \n    # Calculate unigram matches\n    ref_counts = Counter(ref_tokens)\n    cand_counts = Counter(cand_tokens)\n    common_words = ref_counts.keys() & cand_counts.keys()\n    total_matches = sum(min(ref_counts[word], cand_counts[word]) for word in common_words)\n    \n    # Handle cases with no matches\n    if total_matches == 0:\n        return 0.0\n    \n    # Compute precision and recall\n    len_candidate = len(cand_tokens)\n    len_reference = len(ref_tokens)\n    \n    precision = total_matches / len_candidate if len_candidate != 0 else 0.0\n    recall = total_matches / len_reference if len_reference != 0 else 0.0\n    \n    if precision == 0 or recall == 0:\n        return 0.0\n    \n    # Compute F-mean\n    f_mean = 1.0 / ((alpha / precision) + ((1 - alpha) / recall))\n    \n    # Calculate aligned indices to determine chunks\n    ref_counts_copy = Counter(ref_tokens)\n    aligned_indices = []\n    for i, word in enumerate(cand_tokens):\n        if ref_counts_copy[word] > 0:\n            aligned_indices.append(i)\n            ref_counts_copy[word] -= 1\n    \n    # Determine number of chunks\n    if not aligned_indices:\n        chunks = 0\n    else:\n        chunks = 1\n        prev = aligned_indices[0]\n        for current in aligned_indices[1:]:\n            if current != prev + 1:\n                chunks += 1\n            prev = current\n    \n    # Compute penalty for word order fragmentation\n    penalty = gamma * (chunks / total_matches) ** beta\n    \n    # Calculate final METEOR score\n    score = f_mean * (1 - penalty)\n    \n    # Round to 3 decimal places\n    return round(score, 3)\n```"}
{"task_id": 111, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) between two events.\n    \n    Args:\n        joint_counts (int): Number of joint occurrences of the two events.\n        total_counts_x (int): Total occurrences of the first event.\n        total_counts_y (int): Total occurrences of the second event.\n        total_samples (int): Total number of samples in the dataset.\n    \n    Returns:\n        float: PMI value rounded to 3 decimal places.\n    \"\"\"\n    numerator = joint_counts * total_samples\n    denominator = total_counts_x * total_counts_y\n    if denominator == 0:\n        return -np.inf  # Handle cases where either event never occurs (undefined PMI)\n    ratio = numerator / denominator\n    pmi = np.log2(ratio) if ratio > 0 else -np.inf  # Handle joint_counts = 0 leading to ratio 0\n    return round(pmi, 3)\n```"}
{"task_id": 112, "completion_id": 0, "completion": "\n\n```python\ndef min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    if max_val == min_val:\n        return [round(0.5, 4) for _ in x]\n    normalized = [(num - min_val) / (max_val - min_val) for num in x]\n    return [round(num, 4) for num in normalized]\n```"}
{"task_id": 113, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    # First linear layer (matrix multiplication)\n    z1 = x @ w1\n    # Apply ReLU activation\n    a1 = np.maximum(0, z1)\n    \n    # Second linear layer (matrix multiplication)\n    z2 = a1 @ w2\n    # Apply ReLU activation\n    a2 = np.maximum(0, z2)\n    \n    # Shortcut connection: add the original input\n    shortcut_sum = a2 + x\n    \n    # Final ReLU activation\n    output = np.maximum(0, shortcut_sum)\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(output, decimals=4).tolist()\n```"}
{"task_id": 114, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs Global Average Pooling on a 3D feature map array.\n    \n    Args:\n        x: A 3D NumPy array with shape (height, width, channels).\n        \n    Returns:\n        A 1D NumPy array of shape (channels,) where each element is the \n        average of all values in the corresponding feature map channel.\n    \"\"\"\n    # Compute the mean over the height (axis 0) and width (axis 1) dimensions\n    return np.mean(x, axis=(0, 1))\n```"}
{"task_id": 115, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    # Compute mean and variance across batch and spatial dimensions for each channel\n    # Axes 0 (batch), 2 (height), 3 (width) are reduced, keeping the channel axis (1)\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    \n    # Normalize the input\n    normalized = (X - mean) / np.sqrt(variance + epsilon)\n    \n    # Reshape gamma and beta to (1, C, 1, 1) for proper broadcasting\n    gamma_reshaped = gamma.reshape(1, -1, 1, 1)\n    beta_reshaped = beta.reshape(1, -1, 1, 1)\n    \n    # Apply scale (gamma) and shift (beta)\n    output = gamma_reshaped * normalized + beta_reshaped\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(output, decimals=4).tolist()\n```"}
{"task_id": 116, "completion_id": 0, "completion": "\n\n```python\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    if n == 0:\n        return 0.0\n    derivative = c * n * (x ** (n - 1))\n    return round(derivative, 4)\n```"}
{"task_id": 117, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef orthonormal_basis(vectors: list[list[float]], tol: float = 1e-10):\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by the given 2D vectors using the Gram-Schmidt process.\n    \n    Args:\n        vectors (list[list[float]]): A list of 2D vectors.\n        tol (float): Tolerance to determine linear independence (default: 1e-10).\n    \n    Returns:\n        list[list[float]]: A list of orthonormal vectors spanning the same subspace, each rounded to 4 decimal places.\n    \"\"\"\n    orthogonal_basis = []\n    for v in vectors:\n        # Convert current vector to a numpy array for numerical operations\n        v_np = np.array(v, dtype=float)\n        # Subtract projections onto all previously computed orthogonal vectors\n        for u in orthogonal_basis:\n            # Compute the projection scalar (v \u00b7 u) / (u \u00b7 u)\n            proj_scalar = np.dot(v_np, u) / np.dot(u, u)\n            # Subtract the projection from the current vector\n            v_np -= proj_scalar * u\n        # Check if the resulting vector is non-zero (above tolerance)\n        norm = np.linalg.norm(v_np)\n        if norm > tol:\n            orthogonal_basis.append(v_np)\n    \n    # Normalize each orthogonal vector to get orthonormal vectors\n    orthonormal = []\n    for u in orthogonal_basis:\n        norm_u = np.linalg.norm(u)\n        ortho_vec = u / norm_u\n        # Round to 4 decimal places and convert to a list\n        orthonormal.append(np.round(ortho_vec, 4).tolist())\n    \n    return orthonormal\n```"}
{"task_id": 118, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef cross_product(a, b):\n    # Compute the cross product using numpy's cross function\n    product = np.cross(a, b)\n    # Round the result to 4 decimal places\n    rounded_product = np.around(product, decimals=4)\n    # Convert the numpy array to a list and return\n    return rounded_product.tolist()\n```"}
{"task_id": 119, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef cramers_rule(A, b):\n    # Check if A is a square matrix\n    if A.shape[0] != A.shape[1]:\n        return -1\n    n = A.shape[0]\n    # Check if b has compatible dimensions\n    if len(b) != n:\n        return -1\n    # Calculate determinant of A\n    det_A = np.linalg.det(A)\n    # Check if determinant is effectively zero (no unique solution)\n    if np.isclose(det_A, 0, atol=1e-10):\n        return -1\n    # Initialize solution vector\n    x = np.zeros(n)\n    # Compute each component using Cramer's Rule\n    for i in range(n):\n        # Create matrix A_i by replacing i-th column with b\n        A_i = A.copy()\n        A_i[:, i] = b\n        # Calculate determinant of A_i\n        det_Ai = np.linalg.det(A_i)\n        # Compute x_i and store\n        x[i] = det_Ai / det_A\n    # Round to nearest 4th decimal and convert to list\n    return np.round(x, 4).tolist()\n```"}
{"task_id": 120, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    bc = sum(np.sqrt(pi * qi) for pi, qi in zip(p, q))\n    if bc <= 0:\n        return float('inf')\n    distance = -np.log(bc)\n    return round(distance, 4)\n```"}
{"task_id": 121, "completion_id": 0, "completion": "\n\n```python\ndef vector_sum(a: list[int|float], b: list[int|float]) -> list[int|float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for x, y in zip(a, b)]\n```"}
{"task_id": 122, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    num_states, num_actions = theta.shape\n    total_gradient = np.zeros_like(theta)\n    num_episodes = len(episodes)\n    \n    if num_episodes == 0:\n        return total_gradient.tolist()\n    \n    for episode in episodes:\n        if not episode:\n            continue  # Skip empty episodes\n        # Extract rewards from the episode\n        rewards = [step[2] for step in episode]\n        T = len(rewards)\n        # Compute returns using reversed cumulative sum for efficiency\n        reversed_rewards = np.array(rewards[::-1])\n        reversed_returns = np.cumsum(reversed_rewards)\n        returns = reversed_returns[::-1]  # Now returns[t] is sum of rewards from t to end\n        \n        for t in range(T):\n            s_t, a_t, _ = episode[t]\n            G_t = returns[t]\n            # Compute softmax probabilities for state s_t\n            theta_s = theta[s_t, :]\n            # Stabilize softmax computation by subtracting max\n            logits = theta_s - np.max(theta_s)\n            probs = np.exp(logits)\n            probs /= np.sum(probs)\n            # Compute the gradient of log policy for action a_t\n            grad_s = np.zeros(num_actions)\n            grad_s[a_t] = 1.0\n            grad_s -= probs\n            # Accumulate the gradient scaled by the return G_t\n            total_gradient[s_t, :] += grad_s * G_t\n    \n    # Average the total gradient over all episodes\n    average_gradient = total_gradient / num_episodes\n    # Round to nearest 4th decimal and convert to list\n    return np.round(average_gradient, decimals=4).tolist()\n```"}
{"task_id": 123, "completion_id": 0, "completion": "\n\n```python\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    # Calculate FLOPs for the dense layer\n    dense_flops = 2 * d_in * d_out\n    \n    # Calculate FLOPs for the MoE layer\n    # Each expert's output dimension is d_out / n_experts (same total parameters as dense)\n    moe_flops = k_active * 2 * d_in * (d_out / n_experts)\n    \n    # Compute the savings percentage\n    savings = ((dense_flops - moe_flops) / dense_flops) * 100\n    \n    # Round to the nearest 1st decimal\n    return round(savings, 1)\n```"}
{"task_id": 124, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef noisy_topk_gating(\n    X: np.ndarray,\n    W_g: np.ndarray,\n    W_noise: np.ndarray,\n    N: np.ndarray,\n    k: int\n):\n    # Compute clean logits using input matrix and gating weights\n    logits_clean = X @ W_g\n    \n    # Compute noise component: (X @ W_noise) element-wise multiplied by pre-sampled noise N\n    noise = (X @ W_noise) * N\n    \n    # Combine clean logits with noise to get noisy logits\n    logits_noisy = logits_clean + noise\n    \n    # Get batch size and number of experts from the shape of noisy logits\n    batch_size, num_experts = logits_noisy.shape\n    \n    # Find indices of top-k logits for each sample in the batch\n    # Using argpartition to efficiently get the indices of the top k elements\n    topk_indices = np.argpartition(logits_noisy, -k, axis=1)[:, -k:]\n    \n    # Create a boolean mask to mark the top-k positions\n    mask = np.zeros_like(logits_noisy, dtype=bool)\n    for i in range(batch_size):\n        mask[i, topk_indices[i]] = True\n    \n    # Apply the mask to set non-top-k logits to negative infinity, ensuring they don't contribute to softmax\n    masked_logits = np.where(mask, logits_noisy, -np.inf)\n    \n    # Compute softmax over the masked logits for each sample\n    # Subtract max logit for numerical stability (prevents overflow)\n    max_logits = np.max(masked_logits, axis=1, keepdims=True)\n    exp_logits = np.exp(masked_logits - max_logits)\n    gating_probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n    \n    # Round the probabilities to the nearest 4th decimal place\n    gating_probs_rounded = np.round(gating_probs, decimals=4)\n    \n    # Convert the numpy array to a Python list and return\n    return gating_probs_rounded.tolist()\n```"}
{"task_id": 125, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int) -> np.ndarray:\n    \"\"\"Compute softmax along a specified axis with numerical stability.\"\"\"\n    x_max = np.max(x, axis=axis, keepdims=True)\n    e_x = np.exp(x - x_max)\n    return e_x / np.sum(e_x, axis=axis, keepdims=True)\n\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int) -> list:\n    \"\"\"\n    Implement a Sparse Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n    \n    Args:\n        x: Input tensor of shape (batch_size, input_dim) or (input_dim,).\n        We: Expert weight matrices of shape (n_experts, input_dim, output_dim).\n        Wg: Gating weight matrix of shape (input_dim, n_experts).\n        n_experts: Number of experts.\n        top_k: Number of top experts to route each token to.\n        \n    Returns:\n        Final MoE output as a Python list, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure input is 2D (batch_size, input_dim)\n    if x.ndim == 1:\n        x = x[np.newaxis, :]  # Reshape to (1, input_dim)\n    batch_size, input_dim = x.shape\n    \n    # Step 1: Compute gating logits (batch_size, n_experts)\n    logits = x @ Wg\n    \n    # Step 2: Compute gating probabilities using softmax (batch_size, n_experts)\n    probs = softmax(logits, axis=1)\n    \n    # Step 3: Select top-k experts per token\n    # Get indices of top-k probabilities (ascending order, take last top_k)\n    top_k_indices = np.argsort(probs, axis=1)[:, -top_k:]  # (batch_size, top_k)\n    # Extract probabilities of top-k experts (batch_size, top_k)\n    top_k_probs = np.take_along_axis(probs, top_k_indices, axis=1)\n    \n    # Step 4: Normalize top-k probabilities to sum to 1 (batch_size, top_k)\n    normalized_probs = top_k_probs / top_k_probs.sum(axis=1, keepdims=True)\n    \n    # Step 5: Compute outputs for all experts (n_experts, batch_size, output_dim)\n    all_expert_outputs = np.array([x @ we for we in We])\n    \n    # Step 6: Aggregate top-k expert outputs weighted by normalized probabilities\n    output_dim = We[0].shape[1]\n    moe_output = np.zeros((batch_size, output_dim))\n    \n    for b in range(batch_size):\n        # Get top-k expert indices and their outputs for current token\n        experts = top_k_indices[b]\n        expert_outputs = all_expert_outputs[experts, b, :]  # (top_k, output_dim)\n        # Apply normalized probabilities and sum\n        moe_output[b] = (expert_outputs * normalized_probs[b, :, np.newaxis]).sum(axis=0)\n    \n    # Round to 4 decimal places and convert to Python list\n    return np.round(moe_output, decimals=4).tolist()\n```"}
{"task_id": 126, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float = 1e-5):\n    # Validate input dimensions\n    if X.ndim != 4:\n        raise ValueError(\"Input X must be a 4D tensor with shape (B, C, H, W)\")\n    B, C, H, W = X.shape\n    \n    # Check if number of groups divides the number of channels\n    if C % num_groups != 0:\n        raise ValueError(f\"num_groups ({num_groups}) must divide the number of channels ({C})\")\n    \n    # Validate gamma and beta shapes\n    if gamma.shape != (C,) or beta.shape != (C,):\n        raise ValueError(f\"gamma and beta must have shape ({C},), got {gamma.shape} and {beta.shape}\")\n    \n    # Reshape input into groups: (B, num_groups, G, H, W) where G = C // num_groups\n    G = C // num_groups\n    X_grouped = X.reshape(B, num_groups, G, H, W)\n    \n    # Compute mean and variance over the group dimensions (G, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    \n    # Normalize the grouped tensor\n    normalized_grouped = (X_grouped - mean) / np.sqrt(var + epsilon)\n    \n    # Reshape back to original (B, C, H, W) shape\n    normalized = normalized_grouped.reshape(B, C, H, W)\n    \n    # Apply scale (gamma) and shift (beta)\n    gamma_reshaped = gamma.reshape(1, C, 1, 1)  # Broadcastable shape\n    beta_reshaped = beta.reshape(1, C, 1, 1)    # Broadcastable shape\n    output = normalized * gamma_reshaped + beta_reshaped\n    \n    # Round to nearest 4th decimal and convert to Python list\n    return np.round(output, decimals=4).tolist()\n```"}
{"task_id": 127, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef find_treasure(start_x: float, learning_rate: float = 0.1, tolerance: float = 1e-6, max_iters: int = 10000) -> float:\n    current_x = start_x\n    for _ in range(max_iters):\n        # Compute the gradient (derivative) of the function f(x)\n        gradient = 4 * (current_x ** 3) - 9 * (current_x ** 2)\n        # Check if the gradient is within the tolerance to stop iterating\n        if abs(gradient) < tolerance:\n            break\n        # Update the current position using gradient descent\n        current_x -= learning_rate * gradient\n    # Round the result to the nearest 4th decimal place\n    return round(current_x, 4)\n```"}
{"task_id": 128, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) activation function, a normalization-free transformation inspired by Tanh.\n    \n    Args:\n        x (np.ndarray): Input array to apply the DyT function to.\n        alpha (float): Scaling parameter for the input before applying Tanh.\n        gamma (float): Scaling parameter for the Tanh output.\n        beta (float): Shifting parameter for the scaled Tanh output.\n        \n    Returns:\n        list[float]: Transformed input as a Python list, with values rounded to the nearest 4th decimal.\n    \"\"\"\n    # Apply the Dynamic Tanh transformation\n    transformed = gamma * np.tanh(alpha * x) + beta\n    # Round to the nearest 4th decimal\n    rounded = np.round(transformed, 4)\n    # Convert to Python list using numpy's tolist()\n    return rounded.tolist()\n```"}
