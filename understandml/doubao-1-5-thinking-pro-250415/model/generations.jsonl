{"task_id": 0, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Computes the weight vector for Ridge (L2-regularised) Linear Regression using the closed-form solution.\n\n    Parameters:\n    data (np.ndarray): An ndarray where the last column is the target variable y, and the preceding columns are features.\n    alpha (float): Regularisation strength (non-negative). Default is 0.0.\n\n    Returns:\n    list[float]: The weight vector (including intercept) rounded to 4 decimal places. Returns -1 if the matrix is not invertible.\n    \"\"\"\n    # Split the data into features (X_original) and target (y)\n    X_original = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a column of ones to X_original to include the bias term\n    n_samples = X_original.shape[0]\n    X = np.hstack([np.ones((n_samples, 1)), X_original])\n    \n    # Compute the matrix A = X^T X + alpha * I\n    n_features = X.shape[1]  # Number of features including the bias term\n    A = X.T @ X + alpha * np.eye(n_features)\n    \n    # Attempt to compute the inverse of A\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        # If A is not invertible, return -1\n        return -1\n    \n    # Compute the weight vector w_hat = A_inv @ X^T y\n    XTy = X.T @ y\n    w_hat = A_inv @ XTy\n    \n    # Round each coefficient to 4 decimal places and convert to a list\n    return [round(weight, 4) for weight in w_hat]\n```"}
{"task_id": 1, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    # Precompute Gram matrix\n    K = X_train @ X_train.T\n    updates = 0\n    done = False\n\n    while not done:\n        updated = False\n        for i in range(n_samples):\n            # Compute activation using the Gram matrix\n            activation = np.dot(alpha * y_train, K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                # Update parameters\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                updated = True\n                if updates >= n_iter:\n                    done = True\n                    break  # Exit inner loop\n                # Restart scanning from the first sample\n                break\n        # Check if no updates occurred in the entire pass\n        if not updated:\n            done = True\n        # Check if maximum updates reached\n        if updates >= n_iter:\n            done = True\n\n    # Compute primal weight vector w\n    w = np.sum((alpha * y_train[:, np.newaxis]) * X_train, axis=0)\n    # Round to 4 decimal places\n    w_rounded = [round(x, 4) for x in w.tolist()]\n    b_rounded = round(b, 4)\n\n    return (w_rounded, b_rounded)\n```"}
{"task_id": 2, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {\n        'identity': {\n            'link': lambda mu: mu,\n            'inv_link': lambda eta: eta,\n            'derivative': lambda mu: np.ones_like(mu)\n        },\n        'log': {\n            'link': lambda mu: np.log(mu),\n            'inv_link': lambda eta: np.exp(eta),\n            'derivative': lambda mu: 1.0 / mu\n        },\n        'logit': {\n            'link': lambda mu: np.log(mu / (1 - mu)),\n            'inv_link': lambda eta: 1.0 / (1 + np.exp(-eta)),\n            'derivative': lambda mu: 1.0 / (mu * (1 - mu))\n        }\n    }\n```"}
{"task_id": 3, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)  # Set the random seed inside the function\n\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n\n    # Define node classes to represent internal and leaf nodes\n    class LeafNode:\n        def __init__(self, indices, depth):\n            self.indices = indices  # List of sample indices in this leaf\n            self.depth = depth      # Depth of this leaf node\n\n    class InternalNode:\n        def __init__(self, feature, split_value, left, right):\n            self.feature = feature          # Feature index used for splitting\n            self.split_value = split_value  # Value used to split the data\n            self.left = left                # Left child node\n            self.right = right              # Right child node\n\n    # Recursive function to build the isolation tree\n    def build_node(indices, depth):\n        if len(indices) < 3:\n            return LeafNode(indices, depth)\n        \n        # Select a random feature\n        n_features = data.shape[1]\n        feature = np.random.choice(n_features)\n        \n        # Calculate min and max of the selected feature for current indices\n        values = data[indices, feature]\n        down = np.min(values)\n        up = np.max(values)\n        \n        # If all values are the same, cannot split further; return leaf node\n        if down == up:\n            return LeafNode(indices, depth)\n        \n        # Generate a random split value within [down, up)\n        split_value = np.random.uniform(low=down, high=up)\n        \n        # Split indices into left (<= split_value) and right (> split_value)\n        left_indices = []\n        right_indices = []\n        for idx in indices:\n            if data[idx, feature] <= split_value:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        \n        # Recursively build left and right children\n        left_child = build_node(left_indices, depth + 1)\n        right_child = build_node(right_indices, depth + 1)\n        \n        return InternalNode(feature, split_value, left_child, right_child)\n\n    # Build the root node starting with all samples and depth 0\n    root = build_node(list(range(n_samples)), 0)\n\n    # Determine the depth of each sample by traversing the tree\n    depths = []\n    for sample_idx in range(n_samples):\n        current_node = root\n        while True:\n            if isinstance(current_node, LeafNode):\n                depths.append(current_node.depth)\n                break\n            else:\n                # Traverse left or right based on the split condition\n                feature = current_node.feature\n                split_value = current_node.split_value\n                if data[sample_idx, feature] <= split_value:\n                    current_node = current_node.left\n                else:\n                    current_node = current_node.right\n\n    return depths\n```"}
{"task_id": 7, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    \n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Convert each transaction to a set of unique items\n    transactions_set = [set(transaction) for transaction in transactions]\n    \n    # Step 1: Find frequent 1-itemsets (L1)\n    item_counts = Counter()\n    for t in transactions_set:\n        item_counts.update(t)\n    \n    L1 = { (item,): count for item, count in item_counts.items() if count >= min_support_count }\n    if not L1:\n        return {}\n    \n    result = L1.copy()\n    current_L = L1\n    k = 2\n    \n    while True:\n        itemsets = list(current_L.keys())\n        if len(itemsets) < 2:\n            break  # Not enough itemsets to form candidates of size k\n        \n        # Generate candidate k-itemsets (Ck) by joining Lk-1 itemsets\n        Ck = []\n        for i in range(len(itemsets)):\n            for j in range(i + 1, len(itemsets)):\n                l1 = itemsets[i]\n                l2 = itemsets[j]\n                # Join if the first k-2 items are the same\n                if l1[:-1] == l2[:-1]:\n                    candidate = l1 + (l2[-1],)\n                    Ck.append(candidate)\n        \n        # Prune Ck: remove candidates with any (k-1)-subset not in current_L\n        pruned_Ck = []\n        for candidate in Ck:\n            # Generate all (k-1)-length subsets\n            all_subsets = [candidate[:i] + candidate[i+1:] for i in range(k)]\n            if all(s in current_L for s in all_subsets):\n                pruned_Ck.append(candidate)\n        \n        # Calculate support for each candidate in pruned_Ck\n        candidate_support = {}\n        for candidate in pruned_Ck:\n            cnt = 0\n            candidate_set = set(candidate)\n            for t in transactions_set:\n                if candidate_set.issubset(t):\n                    cnt += 1\n            if cnt >= min_support_count:\n                candidate_support[candidate] = cnt\n        \n        if not candidate_support:\n            break\n        \n        # Add to result and proceed to next level\n        result.update(candidate_support)\n        current_L = candidate_support\n        k += 1\n    \n    return result\n```"}
{"task_id": 11, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\"\"\"\n    # Initialize centers with the first k samples\n    centers = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Assign each sample to the nearest center\n        labels = []\n        for sample in data:\n            # Compute squared Euclidean distances to all centers\n            distances = np.sum((sample - centers) ** 2, axis=1)\n            # Find the index of the closest center\n            labels.append(np.argmin(distances))\n        labels = np.array(labels)\n        \n        # Compute new centers\n        new_centers = np.zeros_like(centers)\n        for i in range(k):\n            # Get all samples assigned to cluster i\n            cluster_samples = data[labels == i]\n            if len(cluster_samples) == 0:\n                # Reinitialize with a random sample from the data\n                random_idx = np.random.randint(0, data.shape[0])\n                new_centers[i] = data[random_idx]\n            else:\n                # Compute the mean of the cluster\n                new_centers[i] = np.mean(cluster_samples, axis=0)\n        \n        # Check for convergence\n        max_change = np.max(np.linalg.norm(new_centers - centers, axis=1))\n        if max_change < epsilon:\n            centers = new_centers\n            break\n        centers = new_centers.copy()\n    \n    # Compute final labels with the converged centers\n    final_labels = []\n    for sample in data:\n        distances = np.sum((sample - centers) ** 2, axis=1)\n        final_labels.append(np.argmin(distances))\n    \n    # Round centers to 4 decimal places\n    centers_rounded = [list(np.round(center, 4)) for center in centers]\n    \n    return (centers_rounded, final_labels)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\"\"\"\n    n_users, n_items = data.shape\n    user_ratings = data[user_ind]\n    rated_mask = user_ratings > 0\n    rated_items = np.where(rated_mask)[0]\n    unrated_items = np.where(~rated_mask)[0]\n    \n    # Return empty list if user has rated all items\n    if len(unrated_items) == 0:\n        return []\n    \n    # Build item-item similarity matrix S\n    S = np.zeros((n_items, n_items), dtype=np.float64)\n    for i in range(n_items):\n        for j in range(i, n_items):\n            # Find common users who rated both items i and j\n            mask_i = data[:, i] > 0\n            mask_j = data[:, j] > 0\n            common_users = np.where(mask_i & mask_j)[0]\n            \n            if len(common_users) == 0:\n                sim = 0.0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                \n                if criterion == 'cosine':\n                    # Mean center if sample std > 1e-3\n                    std_v1 = np.std(v1, ddof=1)\n                    v1_centered = v1 - np.mean(v1) if std_v1 > 1e-3 else v1.copy()\n                    \n                    std_v2 = np.std(v2, ddof=1)\n                    v2_centered = v2 - np.mean(v2) if std_v2 > 1e-3 else v2.copy()\n                    \n                    numerator = np.dot(v1_centered, v2_centered)\n                    denom_v1 = np.linalg.norm(v1_centered)\n                    denom_v2 = np.linalg.norm(v2_centered)\n                    denominator = denom_v1 * denom_v2\n                    sim = numerator / denominator if denominator > 1e-10 else 0.0\n                elif criterion == 'pearson':\n                    if len(common_users) < 2:\n                        sim = 0.0\n                    else:\n                        sim = np.corrcoef(v1, v2)[0, 1]\n                else:\n                    raise ValueError(f\"Invalid criterion: {criterion}\")\n            \n            S[i, j] = sim\n            S[j, i] = sim  # Symmetric matrix\n    \n    # Calculate scores for unrated items\n    scores = []\n    for t in unrated_items:\n        s = S[t, rated_items]\n        numerator = np.dot(user_ratings[rated_items], s)\n        denominator = np.sum(np.abs(s))\n        score = numerator / denominator if denominator != 0 else 0.0\n        scores.append((-score, t))  # Negative for ascending sort\n    \n    # Sort by score (descending) and index (ascending)\n    scores.sort()\n    recommended = [t for (_, t) in scores[:k]]\n    \n    return recommended\n```"}
{"task_id": 19, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    sum_g_total = np.sum(g)\n    sum_h_total = np.sum(h)\n    original_loss = -0.5 * (sum_g_total ** 2) / (sum_h_total + lam) + gamma\n\n    max_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    for feature_idx in range(n_features):\n        X_feature = X[:, feature_idx]\n        sorted_indices = np.argsort(X_feature)\n        sorted_X = X_feature[sorted_indices]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n\n        cum_g = np.cumsum(sorted_g)\n        cum_h = np.cumsum(sorted_h)\n\n        unique_thresholds = np.unique(sorted_X)\n\n        for threshold in unique_thresholds:\n            left_count = np.searchsorted(sorted_X, threshold, side='right')\n            right_count = n_samples - left_count\n\n            if left_count < 2 or right_count < 2:\n                continue\n\n            sum_g_L = cum_g[left_count - 1]\n            sum_h_L = cum_h[left_count - 1]\n            sum_g_R = sum_g_total - sum_g_L\n            sum_h_R = sum_h_total - sum_h_L\n\n            denom_L = sum_h_L + lam\n            L_L = -0.5 * (sum_g_L ** 2) / denom_L + gamma\n\n            denom_R = sum_h_R + lam\n            L_R = -0.5 * (sum_g_R ** 2) / denom_R + gamma\n\n            current_gain = original_loss - (L_L + L_R)\n\n            if current_gain > max_gain:\n                max_gain = current_gain\n                best_feature = feature_idx\n                best_threshold = threshold\n\n    if max_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```"}
{"task_id": 20, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Handle scalar input (int or float)\n    if isinstance(x, (int, float)):\n        sigmoid_val = 1 / (1 + np.exp(-x))\n        gradient_val = sigmoid_val * (1 - sigmoid_val)\n        return (round(sigmoid_val, 4), round(gradient_val, 4))\n    \n    # Handle array-like input (list or numpy array)\n    else:\n        # Convert list to numpy array\n        if isinstance(x, list):\n            x_np = np.array(x)\n        else:\n            x_np = x  # Assume input is already a numpy array\n        \n        # Compute sigmoid and gradient element-wise\n        sigmoid_np = 1 / (1 + np.exp(-x_np))\n        gradient_np = sigmoid_np * (1 - sigmoid_np)\n        \n        # Round to 4 decimal places and convert to Python lists\n        sigmoid_rounded = np.round(sigmoid_np, 4)\n        gradient_rounded = np.round(gradient_np, 4)\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())\n```"}
{"task_id": 21, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\"\"\"\n    N = len(x_train)\n    if N == 0:\n        return []\n    M = len(x_test)\n    if M == 0:\n        return []\n    \n    # Initialize sample weights uniformly\n    weights = np.ones(N) / N\n    \n    # Generate all possible decision stumps\n    sorted_x = sorted(x_train)\n    thresholds = [(sorted_x[i] + sorted_x[i+1])/2 for i in range(len(sorted_x)-1)]\n    stumps = [(d, theta) for theta in thresholds for d in [0, 1]]\n    \n    ensemble = []\n    \n    while True:\n        # Find the best stump with minimum weighted error\n        min_error = float('inf')\n        best_stump = None\n        best_preds = None\n        \n        for (d, theta) in stumps:\n            # Compute predictions for current stump\n            preds = []\n            for x in x_train:\n                if d == 0:\n                    pred = 1 if x <= theta else -1\n                else:\n                    pred = 1 if x > theta else -1\n                preds.append(pred)\n            \n            # Calculate weighted error\n            error = sum(weights[i] for i in range(N) if preds[i] != y_train[i])\n            \n            if error < min_error:\n                min_error = error\n                best_stump = (d, theta)\n                best_preds = preds\n        \n        if best_stump is None:  # No stumps available (unlikely for N >= 2)\n            break\n        \n        # Compute alpha for the best stump\n        if min_error <= 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        \n        ensemble.append((alpha, best_stump))\n        \n        # Update sample weights\n        for i in range(N):\n            y = y_train[i]\n            h = best_preds[i]\n            weights[i] *= math.exp(-alpha * y * h)\n        \n        # Normalize weights\n        total_weight = sum(weights)\n        if total_weight == 0:\n            break  # All weights zero, perfect classification\n        weights /= total_weight\n        \n        # Check training error of the current ensemble\n        errors = 0\n        for i in range(N):\n            x = x_train[i]\n            total = 0.0\n            for (alpha_t, (d_t, theta_t)) in ensemble:\n                if d_t == 0:\n                    h_t = 1 if x <= theta_t else -1\n                else:\n                    h_t = 1 if x > theta_t else -1\n                total += alpha_t * h_t\n            pred = 1 if total >= 0 else -1\n            if pred != y_train[i]:\n                errors += 1\n        train_error = errors / N\n        \n        if train_error <= epsilon:\n            break\n    \n    # Predict on test set\n    predictions = []\n    for x in x_test:\n        total = 0.0\n        for (alpha_t, (d_t, theta_t)) in ensemble:\n            if d_t == 0:\n                h_t = 1 if x <= theta_t else -1\n            else:\n                h_t = 1 if x > theta_t else -1\n            total += alpha_t * h_t\n        pred = 1 if total >= 0 else -1\n        predictions.append(pred)\n    \n    return predictions\n```"}
{"task_id": 25, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\"\"\"\n    # Compute squared Euclidean distances between each training and test sample\n    squared_dists = np.sum((X_train[:, np.newaxis] - X_test) ** 2, axis=2)\n    \n    # Calculate the RBF kernel values: exp(-gamma * squared distance)\n    kernel_vals = np.exp(-gamma * squared_dists)\n    \n    # Compute the sum term: sum(alpha_i * y_i * kernel(x_i, z)) for all training samples\n    sum_terms = np.sum((alpha * y_train)[:, np.newaxis] * kernel_vals, axis=0)\n    \n    # Add the bias term to get the decision function values\n    decision_values = sum_terms + b\n    \n    # Determine the predicted labels by taking the sign of the decision values\n    predicted_labels = np.sign(decision_values).astype(int)\n    \n    return predicted_labels.tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if X is empty or rows have inconsistent lengths\n    if not X:\n        return -1\n    m = len(X)\n    n = len(X[0]) if m > 0 else 0\n    for row in X:\n        if len(row) != n:\n            return -1  # Invalid 2D matrix\n    \n    min_mn = min(m, n)\n    if k < 1 or k > min_mn:\n        return -1\n    \n    # Convert X to a numpy array\n    X_np = np.array(X, dtype=np.float64)\n    \n    # Compute SVD\n    U, s, Vh = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate to k components\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vh_k = Vh[:k, :]\n    \n    # Reconstruct X_hat\n    X_hat = U_k @ np.diag(s_k) @ Vh_k\n    \n    # Calculate MSE\n    mse = np.mean((X_np - X_hat) ** 2)\n    \n    # Round to 4 decimals and convert to list of lists\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    mse_rounded = round(mse, 4)\n    \n    return (X_hat_rounded, mse_rounded)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.asarray(x_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=float)\n    \n    # Sort the training data by x\n    sorted_indices = np.argsort(x_train)\n    sorted_x = x_train[sorted_indices]\n    sorted_y = y_train[sorted_indices]\n    \n    # Generate candidate split points (midpoints between consecutive x values)\n    if len(sorted_x) >= 2:\n        split_candidates = (sorted_x[:-1] + sorted_x[1:]) / 2\n    else:\n        split_candidates = np.array([])  # No splits possible\n    \n    # Initialize residuals and ensemble\n    residuals = sorted_y.copy()\n    ensemble = []\n    current_rss = np.sum(residuals ** 2)\n    \n    # Boosting loop\n    while current_rss > epsilon and len(split_candidates) > 0:\n        best_rss = np.inf\n        best_stump = None\n        \n        # Evaluate all candidate splits\n        for s in split_candidates:\n            # Determine left and right masks\n            left_mask = sorted_x <= s\n            right_mask = ~left_mask\n            \n            # Compute c1 and c2 (means of residuals in each partition)\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            \n            # Compute the stump's prediction and the resulting RSS\n            stump_pred = np.where(left_mask, c1, c2)\n            new_rss = np.sum((residuals - stump_pred) ** 2)\n            \n            # Update best stump if this is the best so far\n            if new_rss < best_rss:\n                best_rss = new_rss\n                best_stump = (s, c1, c2)\n        \n        # If no best stump found (shouldn't happen if split_candidates is non-empty)\n        if best_stump is None:\n            break\n        \n        # Add the best stump to the ensemble\n        ensemble.append(best_stump)\n        \n        # Update residuals\n        s_stump, c1_stump, c2_stump = best_stump\n        stump_pred = np.where(sorted_x <= s_stump, c1_stump, c2_stump)\n        residuals -= stump_pred\n        \n        # Update current RSS\n        current_rss = np.sum(residuals ** 2)\n    \n    # Compute prediction for x_query\n    prediction = 0.0\n    for s, c1, c2 in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    # Round to 4 decimal places\n    return round(prediction, 4)\n```"}
{"task_id": 34, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"Generates a NumPy tensor filled with 0.0s and 1.0s based on the given shape and sparsity.\n\n    Parameters:\n        shape (tuple[int, ...]): The desired shape of the output tensor.\n        sparsity (float, optional): Probability of generating a 1.0. Must be in [0, 1]. Defaults to 0.5.\n        seed (int | None, optional): Seed for the random number generator. If provided, ensures reproducibility. Defaults to None.\n\n    Returns:\n        numpy.ndarray: A tensor of floats (0.0 and 1.0) with the specified shape. Returns -1 if sparsity is outside [0, 1].\n    \"\"\"\n    # Validate sparsity range\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    # Set random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate uniform random array\n    random_values = np.random.rand(*shape)\n    \n    # Determine threshold for 1.0 (since sparsity is prob of 1, threshold is 1 - sparsity)\n    threshold = 1 - sparsity\n    \n    # Create binary mask and convert to float\n    binary_tensor = (random_values >= threshold).astype(float)\n    \n    return binary_tensor\n```"}
{"task_id": 39, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    col = data[:, d]\n    k = n // 2\n    # Use argpartition to find the indices that partition the column around the k-th element\n    args = np.argpartition(col, k)\n    pivot_idx = args[k]\n    pivot_val = col[pivot_idx]\n    \n    # Collect indices for left (values < pivot_val) and right (values > pivot_val)\n    left = []\n    right = []\n    for i in range(n):\n        val = col[i]\n        if val < pivot_val:\n            left.append(i)\n        elif val > pivot_val:\n            right.append(i)\n    \n    return (pivot_idx, left, right)\n```"}
{"task_id": 40, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Precondition checks\n    assert x.ndim == 1, \"x must be one-dimensional\"\n    assert stride >= 1, \"stride must be at least 1\"\n    assert len(x) >= frame_width, \"len(x) must be at least frame_width\"\n\n    # Compute number of frames\n    N = len(x)\n    n_frames = (N - frame_width) // stride + 1\n\n    # Calculate new shape and strides for the strided view\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * x.strides[0], x.strides[0])\n\n    # Create the view using as_strided\n    arr = as_strided(x, shape=new_shape, strides=new_strides)\n\n    # Set writeable flag based on the input parameter\n    if not writeable:\n        arr.flags.writeable = False\n\n    return arr\n```"}
{"task_id": 48, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a NumPy array for consistent handling\n    arr = np.asarray(X)\n    \n    # Check if the array is two-dimensional\n    if arr.ndim != 2:\n        return False\n    \n    # Check all elements are within [0, 1]\n    if not (np.all(arr >= 0) and np.all(arr <= 1)):\n        return False\n    \n    # Check each row sums to 1 with a tolerance of 1e-8\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-8):\n        return False\n    \n    # All conditions are satisfied\n    return True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    batch_start = 0\n\n    for _ in range(max_iter):\n        # Select mini-batch\n        if n <= batch_size:\n            X_batch = X\n            y_batch = y\n        else:\n            indices = (batch_start + np.arange(batch_size)) % n\n            X_batch = X[indices]\n            y_batch = y[indices]\n            batch_start = (batch_start + batch_size) % n\n\n        # Compute gradient\n        m = len(X_batch)\n        y_pred = X_batch @ w\n        error = y_pred - y_batch\n        g = (X_batch.T @ error) / m  # (1/m) X^T (Xw - y)\n\n        # Check early stopping condition\n        grad_norm = np.linalg.norm(g)\n        if grad_norm < epsilon:\n            break\n\n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n\n        # Update weights\n        denominator = np.sqrt(s) + eps_station\n        w -= eta * (g / denominator)\n\n    # Round to four decimal places and convert to list\n    return np.round(w, 4).tolist()\n```"}
{"task_id": 56, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Implements the SoftPlus activation function and its gradient (sigmoid).\"\"\"\n    # Convert input to a numpy array for uniform processing\n    x_np = np.asarray(x, dtype=float)\n    \n    # Compute the result based on the derivative flag\n    if deriv:\n        # Gradient is the sigmoid function: 1 / (1 + exp(-x))\n        result_np = 1 / (1 + np.exp(-x_np))\n    else:\n        # SoftPlus: log(1 + exp(x)) with numerical stability for large x\n        # For x > 709, exp(x) overflows, so use x directly (since log(1+exp(x)) \u2248 x)\n        result_np = np.where(x_np > 709, x_np, np.log1p(np.exp(x_np)))\n    \n    # Round to the nearest 4th decimal\n    rounded_np = np.around(result_np, decimals=4)\n    \n    # Return as a float if input was a scalar, otherwise as a Python list\n    if x_np.ndim == 0:\n        return rounded_np.item()\n    else:\n        return rounded_np.tolist()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import Counter\n\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if len(sequence) < N:\n        return round(0.0, 4)\n    \n    if N == 1:\n        total_tokens = len(corpus)\n        if total_tokens == 0:\n            return float('-inf')\n        counts = Counter(corpus)\n        for word in sequence:\n            if counts.get(word, 0) == 0:\n                return float('-inf')\n        total_log = 0.0\n        for word in sequence:\n            prob = counts[word] / total_tokens\n            total_log += np.log(prob)\n        return round(total_log, 4)\n    else:\n        # Generate N-grams from corpus\n        corpus_ngrams = []\n        if len(corpus) >= N:\n            corpus_ngrams = [tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1)]\n        ngram_counts = Counter(corpus_ngrams)\n        \n        # Generate (N-1)-grams (prefixes) from corpus\n        corpus_prefixes = []\n        if len(corpus) >= (N-1):\n            corpus_prefixes = [tuple(corpus[i:i+N-1]) for i in range(len(corpus) - (N-1) + 1)]\n        prefix_counts = Counter(corpus_prefixes)\n        \n        # Generate N-grams from sequence\n        sequence_ngrams = [tuple(sequence[i:i+N]) for i in range(len(sequence) - N + 1)]\n        \n        total_log = 0.0\n        for ngram in sequence_ngrams:\n            cnt_ngram = ngram_counts.get(ngram, 0)\n            if cnt_ngram == 0:\n                return float('-inf')\n            prefix = ngram[:-1]\n            cnt_prefix = prefix_counts.get(prefix, 0)\n            if cnt_prefix == 0:\n                return float('-inf')\n            total_log += np.log(cnt_ngram / cnt_prefix)\n        \n        return round(total_log, 4)\n```"}
{"task_id": 63, "completion_id": 0, "completion": "\n\n```python\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Computes the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\"\"\"\n    N = len(A)\n    T = len(obs)\n    \n    # Handle the case where t is the last time step (\u03b2_T-1(i) = 1 for all i)\n    if t == T - 1:\n        return [round(1.0, 4) for _ in range(N)]\n    \n    # Initialize \u03b2 with the values at time T-1 (all ones)\n    beta = [1.0] * N\n    \n    # Iterate backward from time T-2 down to the desired time t\n    for current_t in range(T - 2, t - 1, -1):\n        new_beta = []\n        obs_idx = obs[current_t + 1]  # Observation at time current_t + 1\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                # Sum over all states j: a_ij * b_j(o_{t+1}) * \u03b2_{t+1}(j)\n                total += A[i][j] * B[j][obs_idx] * beta[j]\n            new_beta.append(total)\n        beta = new_beta\n    \n    # Round each probability to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n```"}
{"task_id": 65, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    N = len(A)\n    T = len(obs)\n    \n    # Handle edge cases where there are no states or no observations (though inputs are non-empty)\n    if N == 0 or T == 0:\n        return 0.0\n    \n    # Initialize beta matrix to store backward probabilities\n    beta = np.zeros((T, N))\n    \n    # Step 1: Initialize beta for the last time step (t = T-1)\n    beta[T-1, :] = 1.0\n    \n    # Step 2: Compute backward probabilities for t from T-2 down to 0\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                # Transition probability from i to j\n                a_ij = A[i][j]\n                # Emission probability of next observation from state j\n                next_obs = obs[t+1]\n                b_jo = B[j][next_obs]\n                # Backward probability of state j at t+1\n                beta_next = beta[t+1, j]\n                total += a_ij * b_jo * beta_next\n            beta[t, i] = total\n    \n    # Step 3: Compute the total probability of the observation sequence\n    total_prob = 0.0\n    first_obs = obs[0]\n    for i in range(N):\n        # Initial probability of state i, emission of first observation, and beta at t=0\n        total_prob += pi[i] * B[i][first_obs] * beta[0, i]\n    \n    # Round to six decimal places\n    return round(total_prob, 6)\n```"}
{"task_id": 69, "completion_id": 0, "completion": "\n\n```python\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input\n    # Check if observations is empty\n    if not observations:\n        return -1\n    # Check if initial state vector S is empty\n    if not S:\n        return -1\n    n = len(S)\n    # Check state transition matrix A dimensions\n    if len(A) != n:\n        return -1\n    for row in A:\n        if len(row) != n:\n            return -1\n    # Check emission matrix B dimensions\n    if len(B) != n:\n        return -1\n    # Check all rows in B have the same length (m)\n    if n == 0:\n        return -1  # S is non-empty, so n can't be 0 here\n    m = len(B[0]) if B else 0\n    for row in B:\n        if len(row) != m:\n            return -1\n    # Check observations are within valid range [0, m-1]\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n\n    # Forward algorithm implementation\n    T = len(observations)\n    # Initialize alpha for t=0\n    alpha_prev = [S[i] * B[i][observations[0]] for i in range(n)]\n    \n    # Iterate through remaining observations\n    for t in range(1, T):\n        current_obs = observations[t]\n        alpha_current = [0.0] * n\n        for j in range(n):\n            # Sum over previous states\n            transition_sum = sum(alpha_prev[i] * A[i][j] for i in range(n))\n            # Multiply by emission probability\n            alpha_current[j] = transition_sum * B[j][current_obs]\n        alpha_prev = alpha_current\n    \n    # Sum final alpha values for total probability\n    total_probability = sum(alpha_prev)\n    return round(total_probability, 4)\n```"}
{"task_id": 75, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is a valid positive integer and not larger than the training set size\n    if not (isinstance(k, int) and k >= 1) or k > len(X_train):\n        return -1\n    \n    predictions = []\n    for x_test in X_test:\n        # Calculate squared Euclidean distances to all training samples\n        distances = []\n        for x_train, label in zip(X_train, y_train):\n            distance_sq = sum((a - b) ** 2 for a, b in zip(x_test, x_train))\n            distances.append((distance_sq, label))\n        \n        # Sort by distance (ascending) and then by label (ascending) to break ties deterministically\n        sorted_distances = sorted(distances, key=lambda x: (x[0], x[1]))\n        \n        # Get the k nearest neighbors' labels\n        k_nearest_labels = [label for (_, label) in sorted_distances[:k]]\n        \n        # Count votes for each class\n        vote_counts = defaultdict(int)\n        for label in k_nearest_labels:\n            vote_counts[label] += 1\n        \n        # Find the maximum vote count\n        max_votes = max(vote_counts.values())\n        \n        # Collect all classes with the maximum vote count\n        candidates = [label for label, count in vote_counts.items() if count == max_votes]\n        \n        # Select the smallest class label in case of a tie\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    \n    return predictions\n```"}
{"task_id": 76, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    epsilon = np.finfo(float).eps\n    log_probs = np.log(y_pred + epsilon)\n    total_loss = -np.sum(y * log_probs)\n    return round(total_loss, 4)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2  # Number of layers in the network\n\n    # Loop through each layer\n    for l in range(1, L + 1):\n        Wl = parameters[f'W{l}']\n        bl = parameters[f'b{l}']\n        \n        # Linear step\n        Zl = np.dot(Wl, A_prev) + bl\n        \n        # Activation step\n        if l < L:\n            # ReLU activation for hidden layers\n            Al = np.maximum(0, Zl)\n        else:\n            # Sigmoid activation for output layer\n            Al = 1 / (1 + np.exp(-Zl))\n        \n        # Store cache for backward propagation\n        cache = (A_prev, Wl, Zl)\n        caches.append(cache)\n        \n        A_prev = Al\n\n    # Round the final activation and convert to a Python list\n    AL = np.round(A_prev, decimals=4)\n    return AL.tolist()\n```"}
{"task_id": 81, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Clip A2 to avoid log(0) or log(1) which are undefined\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    # Number of samples\n    m = Y.size\n    # Compute the cost using the binary cross-entropy formula\n    cost = (-1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    # Round to 6 decimal places\n    return round(cost, 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to a numpy array if it's a list to use np.argmax\n    if isinstance(Q, list):\n        Q_array = np.array(Q, dtype=np.float64)\n    else:\n        Q_array = Q  # assume it's a numpy array\n    \n    # Find the index of the first maximum Q-value (greedy action)\n    a_star = np.argmax(Q_array)\n    n = len(Q_array)\n    base = epsilon / n\n    \n    # Calculate probabilities for each action\n    probabilities = []\n    for i in range(n):\n        if i == a_star:\n            prob = (1 - epsilon) + base\n        else:\n            prob = base\n        # Round to 4 decimal places\n        probabilities.append(round(prob, 4))\n    \n    return probabilities\n```"}
{"task_id": 86, "completion_id": 0, "completion": "\n\n```python\nfrom collections import Counter\n\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    \n    num_samples = len(predictions[0])\n    aggregated = []\n    \n    for sample_idx in range(num_samples):\n        # Collect all votes for the current sample\n        sample_votes = [tree[sample_idx] for tree in predictions]\n        # Count occurrences of each class\n        vote_counts = Counter(sample_votes)\n        # Find the maximum vote count\n        max_count = max(vote_counts.values())\n        # Identify all classes with the maximum count\n        top_classes = [cls for cls, count in vote_counts.items() if count == max_count]\n        # Select the smallest class in case of ties\n        final_prediction = min(top_classes)\n        aggregated.append(final_prediction)\n    \n    return aggregated\n```"}
{"task_id": 88, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a numpy array for element-wise operations\n    z_array = np.asarray(z)\n    # Compute softplus using the numerically stable logaddexp\n    softplus_values = np.logaddexp(0.0, z_array)\n    # Round to 4 decimal places\n    rounded_values = np.round(softplus_values, decimals=4)\n    # Determine if the input was a scalar (int or float)\n    if isinstance(z, (int, float)):\n        # Return a float for scalar input\n        return float(rounded_values)\n    else:\n        # Convert to a pure Python list for array-like inputs\n        return rounded_values.tolist()\n```"}
{"task_id": 90, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Retrieve the policy's estimates\n    if isinstance(policy, dict):\n        ev_estimates = policy.get('ev_estimates', None)\n    else:\n        ev_estimates = getattr(policy, 'ev_estimates', None)\n    \n    # Check if estimates are missing or empty\n    if ev_estimates is None or not ev_estimates:\n        return np.nan\n    \n    # Retrieve the true expected values from the bandit\n    if isinstance(bandit, dict):\n        true_evs = bandit['arm_evs']\n    else:\n        true_evs = bandit.arm_evs\n    \n    # Sort the arm indices to align with the true values\n    sorted_arms = sorted(ev_estimates.keys())\n    \n    # Extract estimates and corresponding true values\n    estimates = [ev_estimates[arm] for arm in sorted_arms]\n    true_values = [true_evs[arm] for arm in sorted_arms]\n    \n    # Calculate squared errors and compute MSE\n    squared_errors = [(est - true) ** 2 for est, true in zip(estimates, true_values)]\n    mse_val = sum(squared_errors) / len(squared_errors)\n    \n    # Round to 4 decimal places and return\n    return round(mse_val, 4)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Process the corpus to build vocabulary and n-gram counts\n    # Collect all tokens in the corpus\n    corpus_tokens = []\n    for sentence in corpus:\n        corpus_tokens.extend(sentence.split())\n    \n    # Determine the vocabulary (including <UNK>)\n    corpus_words_set = set(corpus_tokens)\n    V = corpus_words_set | {'<UNK>'}\n    V_size = len(V)\n    \n    # Build n-gram counts (from 1 to N)\n    counts = defaultdict(Counter)\n    counts[0] = len(corpus_tokens)  # Total number of tokens (for unigram context)\n    \n    for sentence in corpus:\n        tokens = sentence.split()\n        for n in range(1, N + 1):\n            # Generate all n-grams in the current sentence\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i+n])\n                counts[n][ngram] += 1\n    \n    # Step 2: Process the target sequence\n    seq_tokens = sequence.split()\n    # Replace unseen words with <UNK>\n    processed_seq_tokens = [token if token in corpus_words_set else '<UNK>' for token in seq_tokens]\n    \n    # Check if the sequence is too short to have any N-grams\n    if len(processed_seq_tokens) < N:\n        return 0.0\n    \n    # Generate all N-grams in the processed sequence\n    n_grams = [tuple(processed_seq_tokens[i:i+N]) for i in range(len(processed_seq_tokens) - N + 1)]\n    \n    # Step 3: Compute the log probability\n    log_prob_sum = 0.0\n    for ngram in n_grams:\n        if N == 1:\n            # For unigrams, context is empty; context count is total tokens in corpus\n            context_count = counts[0]\n            ngram_count = counts[1].get(ngram, 0)\n        else:\n            # For n > 1, context is the first N-1 tokens of the ngram\n            context = ngram[:-1]\n            context_count = counts[N-1].get(context, 0)\n            ngram_count = counts[N].get(ngram, 0)\n        \n        # Compute the smoothed probability\n        numerator = ngram_count + K\n        denominator = context_count + K * V_size\n        prob = numerator / denominator\n        \n        # Add the log probability\n        log_prob_sum += math.log(prob)\n    \n    # Round to 4 decimal places\n    return round(log_prob_sum, 4)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\"\"\"\n    np.random.seed(0)  # Fixed seed for deterministic initialization\n    N, M = X.shape\n    \n    # Initialize factor matrices with small random values\n    W = np.random.randn(N, K) * 0.01\n    H = np.random.randn(K, M) * 0.01\n    \n    for _ in range(max_iter):\n        # Update W while holding H fixed\n        HHT = H @ H.T  # (K, K) matrix\n        W = X @ H.T @ np.linalg.inv(HHT + alpha * np.eye(K))\n        \n        # Update H while holding W fixed\n        WTW = W.T @ W  # (K, K) matrix\n        H = np.linalg.inv(WTW + alpha * np.eye(K)) @ (W.T @ X)\n        \n        # Compute regularised loss\n        WH = W @ H\n        recon_error = np.linalg.norm(X - WH, ord='fro') ** 2\n        reg_error = alpha * (np.linalg.norm(W, ord='fro') ** 2 + np.linalg.norm(H, ord='fro') ** 2)\n        current_loss = recon_error + reg_error\n        \n        # Check stopping condition\n        if current_loss < tol:\n            break\n    \n    # Round to 4 decimals and convert to Python list of lists\n    X_hat = (W @ H).round(4)\n    return X_hat.tolist()\n```"}
{"task_id": 109, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport random\n\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    # Set random seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    \n    m, n = X.shape  # Number of samples and features\n    \n    # Step 1: K-Means++ initialization\n    centroids = []\n    # Select the first centroid uniformly at random from the data points\n    first_idx = random.randint(0, m - 1)\n    centroids.append(X[first_idx])\n    \n    # Select remaining K-1 centroids using K-Means++ procedure\n    for k in range(1, K):\n        current_centroids = np.array(centroids)\n        # Compute squared distances from each point to the nearest existing centroid\n        squared_dists = np.min(np.sum((X[:, np.newaxis] - current_centroids) ** 2, axis=2), axis=1)\n        total_distance = np.sum(squared_dists)\n        \n        if total_distance == 0:\n            # All points are already centroids, choose any point (prevents division by zero)\n            next_idx = np.random.choice(m)\n        else:\n            # Probabilities are proportional to squared distances\n            probabilities = squared_dists / total_distance\n            next_idx = np.random.choice(m, p=probabilities)\n        \n        centroids.append(X[next_idx])\n    \n    # Convert centroids to a numpy array for efficient operations\n    centroids = np.array(centroids)\n    \n    # Step 2: Lloyd's algorithm (assignment and update steps)\n    prev_labels = None\n    for _ in range(max_iter):\n        # Assignment step: assign each point to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Check for convergence (labels haven't changed)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        \n        # Update step: compute new centroids as the mean of assigned points\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            cluster_points = X[labels == k]\n            if len(cluster_points) == 0:\n                # Empty cluster, keep the previous centroid\n                new_centroids[k] = centroids[k]\n            else:\n                new_centroids[k] = np.mean(cluster_points, axis=0)\n        \n        centroids = new_centroids\n    \n    # Round centroids to 4 decimal places and convert to list of lists\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in centroids]\n    \n    # Sort centroids by their first coordinate (and then by the full tuple for ties)\n    sorted_centroids = sorted(rounded_centroids)\n    \n    return sorted_centroids\n```"}
{"task_id": 111, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a text string into a fixed-length list of integer token ids using the provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    else:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to a human-readable string, ignoring padding tokens (0).\"\"\"\n    if isinstance(indices, np.ndarray):\n        indices = indices.tolist()\n    return ''.join([inverse_vocab.get(idx, '') for idx in indices if idx != 0])\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"End-to-end example: encodes text, runs model prediction, and decodes the output.\"\"\"\n    # Encode input text\n    encoded_sequence = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to batch format (batch size 1)\n    encoded_batch = np.array([encoded_sequence], dtype=np.int64)\n    # Get model predictions (assuming output shape: [1, TIME_STEPS, output_vocab_size])\n    model_output = model.predict(encoded_batch)\n    # Extract predicted token ids via argmax over the last dimension\n    predicted_ids = np.argmax(model_output, axis=-1)[0]  # [TIME_STEPS]\n    # Decode to string\n    return int_to_string(predicted_ids, inv_output_vocabulary)\n```"}
{"task_id": 113, "completion_id": 0, "completion": "\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Use global EXAMPLES if examples is not provided\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Get model output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate characters into a single string\n        prediction = ''.join(output_chars)\n        # Print input and output pair\n        print(f\"input:  {example}\")\n        print(f\"output: {prediction}\")\n        # Collect the prediction\n        predictions.append(prediction)\n    \n    return predictions\n```"}
{"task_id": 115, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    epsilon = 1e-20\n    # Reshape y and w to 1D arrays to handle both (m,1)/(n,1) and (m,)/(n,) cases\n    y = y.ravel()\n    w = w.ravel()\n    m = X.shape[0]  # Number of samples\n    \n    # Compute linear combination z = Xw\n    z = X @ w\n    \n    # Compute sigmoid activation p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Clip probabilities to avoid log(0) or log(1)\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Calculate average binary cross-entropy loss\n    loss_terms = y * np.log(p) + (1 - y) * np.log(1 - p)\n    average_loss = -np.mean(loss_terms)\n    average_loss_rounded = round(average_loss, 4)\n    \n    # Compute gradient of the loss with respect to weights\n    error = p - y\n    gradient = (X.T @ error) / m  # (n,) array\n    \n    # Round gradient to 4 decimals and convert to nested list\n    gradient_rounded = np.round(gradient, 4)\n    gradient_list = gradient_rounded.reshape(-1, 1).tolist()\n    \n    return (average_loss_rounded, gradient_list)\n```"}
{"task_id": 118, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    n_clf = max(n_clf, 1)\n    m, n = X_train.shape\n    k = X_test.shape[0]\n    if m == 0:\n        return [1] * k\n    \n    # Initialize sample weights\n    weights = np.ones(m) / m\n    \n    stumps = []\n    alphas = []\n    \n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        \n        # Iterate over each feature to find the best decision stump\n        for feature in range(n):\n            # Sort examples by the current feature\n            sorted_indices = np.argsort(X_train[:, feature])\n            sorted_x = X_train[sorted_indices, feature]\n            sorted_y = y_train[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n            \n            # Precompute cumulative weights for positive and negative classes\n            cum_pos = np.zeros(m + 1)\n            cum_neg = np.zeros(m + 1)\n            for i in range(m):\n                if sorted_y[i] == 1:\n                    cum_pos[i+1] = cum_pos[i] + sorted_weights[i]\n                    cum_neg[i+1] = cum_neg[i]\n                else:\n                    cum_neg[i+1] = cum_neg[i] + sorted_weights[i]\n                    cum_pos[i+1] = cum_pos[i]\n            total_pos = cum_pos[m]\n            total_neg = cum_neg[m]\n            \n            # Evaluate all possible split points\n            for split in range(m + 1):\n                # Error for polarity 1 (x < threshold \u2192 -1, else 1)\n                error_p1 = cum_pos[split] + (total_neg - cum_neg[split])\n                # Error for polarity -1 (x < threshold \u2192 1, else -1)\n                error_pm1 = cum_neg[split] + (total_pos - cum_pos[split])\n                \n                # Determine threshold based on split position\n                if split == 0:\n                    threshold = sorted_x[0] - 1.0 if m > 0 else 0.0\n                elif split == m:\n                    threshold = sorted_x[-1] + 1.0 if m > 0 else 0.0\n                else:\n                    threshold = (sorted_x[split-1] + sorted_x[split]) / 2.0\n                \n                # Update best stump if current error is lower\n                if error_p1 < best_error:\n                    best_error = error_p1\n                    best_stump = (feature, threshold, 1)\n                if error_pm1 < best_error:\n                    best_error = error_pm1\n                    best_stump = (feature, threshold, -1)\n        \n        # Compute alpha for the best stump\n        if best_error <= 0:\n            alpha = np.inf\n        elif best_error >= 1:\n            alpha = -np.inf\n        else:\n            alpha = 0.5 * np.log((1 - best_error) / best_error)\n        \n        stumps.append(best_stump)\n        alphas.append(alpha)\n        \n        # Update sample weights\n        feature, threshold, polarity = best_stump\n        preds = np.where(X_train[:, feature] < threshold, -1 if polarity == 1 else 1, 1 if polarity == 1 else -1)\n        exponent = -alpha * y_train * preds\n        weights *= np.exp(exponent)\n        weights_sum = np.sum(weights)\n        if weights_sum > 0:\n            weights /= weights_sum\n        else:\n            weights = np.ones(m) / m  # Fallback if weights sum to zero\n    \n    # Predict on test data\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (feature, threshold, polarity), alpha in zip(stumps, alphas):\n            if x[feature] < threshold:\n                h = -1 if polarity == 1 else 1\n            else:\n                h = 1 if polarity == 1 else -1\n            total += alpha * h\n        predictions.append(1 if total >= 0 else -1)\n    \n    return predictions\n```"}
{"task_id": 128, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components <= 0:\n        return []\n    \n    m, d = X.shape\n    if d == 0:\n        return []\n    \n    classes = np.unique(y)\n    \n    # Compute within-class scatter matrix S_W\n    S_W = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mu_c = X_c.mean(axis=0)\n        centered = X_c - mu_c\n        S_W += centered.T @ centered\n    \n    # Compute between-class scatter matrix S_B\n    mu = X.mean(axis=0)\n    S_B = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mu_c = X_c.mean(axis=0)\n        diff = (mu_c - mu).reshape(-1, 1)\n        S_B += N_c * (diff @ diff.T)\n    \n    # Handle case where S_W is singular (pinv used for numerical stability)\n    A = np.linalg.pinv(S_W) @ S_B\n    \n    # Eigen decomposition using eigh (A is symmetric)\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    \n    # Select first n_components eigenvectors\n    n_components = min(n_components, d)\n    W = eigenvectors_sorted[:, :n_components]\n    \n    # Adjust signs of eigenvectors based on first non-zero element\n    for i in range(W.shape[1]):\n        vec = W[:, i]\n        # Find first non-zero element\n        for val in vec:\n            if not np.isclose(val, 0.0, atol=1e-9):\n                if val < 0:\n                    W[:, i] *= -1\n                break\n    \n    # Project data and round\n    projected = X @ W\n    projected_rounded = np.round(projected, decimals=4)\n    \n    return projected_rounded.tolist()\n```"}
{"task_id": 140, "completion_id": 0, "completion": "\n\nTo solve this problem, we need to determine the minimum time required for an agent to escape from an \\( n \\times n \\) maze while avoiding spreading fire. The fire spreads to adjacent cells every minute, and the agent moves after the fire spreads each minute. The goal is to reach the lower-right corner \\((n-1, n-1)\\) from the upper-left corner \\((0,0)\\) without entering a burning cell.\n\n### Approach\n1. **Initial Checks**: Handle edge cases where the maze is 1x1, the start or goal is a wall, or the start or goal is already on fire.\n2. **Fire Spread Calculation**: Use a multi-source BFS to precompute the earliest time each cell catches fire. This helps in determining when each cell becomes unsafe for the agent.\n3. **Agent's Pathfinding**: Use BFS to explore the agent's possible moves, ensuring each move is to a cell that is not yet on fire at the time of arrival.\n\n### Solution Code\n```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    \n    # Check if start or end is a wall\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        return -1\n    \n    # Precompute fire spread times\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    \n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # BFS to spread fire\n    while fire_queue:\n        i, j = fire_queue.popleft()\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                if grid[ni][nj] != '#' and fire_time[ni][nj] == math.inf:\n                    fire_time[ni][nj] = fire_time[i][j] + 1\n                    fire_queue.append((ni, nj))\n    \n    # Check if start or end is on fire at time 0\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n    \n    # BFS for agent's escape\n    visited = [[math.inf] * n for _ in range(n)]\n    visited[0][0] = 0\n    q = deque([(0, 0, 0)])\n    \n    while q:\n        i, j, t = q.popleft()\n        if i == n - 1 and j == n - 1:\n            return t\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                if grid[ni][nj] == '#':\n                    continue\n                new_time = t + 1\n                if fire_time[ni][nj] > new_time:\n                    if visited[ni][nj] > new_time:\n                        visited[ni][nj] = new_time\n                        q.append((ni, nj, new_time))\n    \n    return -1\n```\n\n### Explanation\n1. **Initial Checks**: The code first checks if the maze is 1x1, returning 0 if the single cell is free, otherwise -1. It also checks if the start or goal is a wall, returning -1 immediately.\n2. **Fire Spread Calculation**: Using a multi-source BFS, the code calculates the earliest time each cell catches fire. This is done by initializing a queue with all initial fire cells and spreading the fire to adjacent cells every minute.\n3. **Agent's Pathfinding**: The agent's movement is explored using BFS. For each move, the code checks if the target cell is not a wall and if it is not on fire at the time the agent arrives (using the precomputed fire times). The BFS ensures the shortest path is found by tracking the earliest time each cell is visited.\n\nThis approach efficiently combines BFS for both fire spread and agent movement, ensuring the agent avoids fire and finds the shortest path to the goal."}
{"task_id": 141, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier.\"\"\"\n    # Validate and set the metric\n    valid_metrics = ['euclidean', 'manhattan', 'cosine']\n    if metric not in valid_metrics:\n        metric = 'euclidean'\n    \n    # Compute distance matrix\n    m = X_test.shape[0]\n    p = X_train.shape[0]\n    distances = np.zeros((m, p))\n    \n    if metric == 'euclidean':\n        diff = X_test[:, np.newaxis] - X_train\n        distances = np.sqrt(np.sum(diff ** 2, axis=-1))\n    elif metric == 'manhattan':\n        diff = X_test[:, np.newaxis] - X_train\n        distances = np.sum(np.abs(diff), axis=-1)\n    elif metric == 'cosine':\n        # Compute dot product between test and train samples\n        dot_product = X_test @ X_train.T\n        # Compute norms of test and train samples\n        norm_test = np.linalg.norm(X_test, axis=1)\n        norm_train = np.linalg.norm(X_train, axis=1)\n        # Handle division by zero by adding a small epsilon\n        denominator = norm_test[:, np.newaxis] * norm_train\n        denominator = np.where(denominator == 0, 1e-10, denominator)\n        similarity = dot_product / denominator\n        distances = 1 - similarity\n    \n    # Initialize predicted labels array\n    y_pred = np.zeros(m, dtype=y_train.dtype)\n    \n    # Predict for each test sample\n    for i in range(m):\n        # Get indices of k smallest distances\n        k_indices = np.argpartition(distances[i], k)[:k]\n        # Get the corresponding labels\n        neighbors_labels = y_train[k_indices]\n        # Find majority vote with tie-breaker\n        unique_labels, counts = np.unique(neighbors_labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = unique_labels[counts == max_count]\n        y_pred[i] = np.min(candidates)\n    \n    return y_pred\n```"}
{"task_id": 146, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n    n_train = X.shape[0]\n    k_actual = min(k, n_train)\n    if k_actual <= 0:\n        raise ValueError(\"k must be a positive integer and there must be at least one training sample.\")\n    \n    predictions = []\n    for x_test in X_test:\n        # Compute distances based on the specified metric\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - x_test) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - x_test), axis=1)\n        elif metric == 'cosine':\n            dot_product = X @ x_test\n            norm_X = np.linalg.norm(X, axis=1)\n            norm_x = np.linalg.norm(x_test)\n            denominator = norm_X * norm_x + 1e-12\n            cosine_sim = dot_product / denominator\n            distances = 1 - cosine_sim\n        else:\n            raise ValueError(f\"Invalid metric: {metric}. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n        \n        # Find indices of k closest neighbors\n        sorted_indices = np.argsort(distances)\n        k_indices = sorted_indices[:k_actual]\n        neighbor_labels = y[k_indices]\n        \n        # Determine majority label with tie-breaking\n        unique_labels, counts = np.unique(neighbor_labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = unique_labels[counts == max_count]\n        pred = np.min(candidates)\n        \n        predictions.append(pred)\n    \n    return predictions\n```"}
{"task_id": 155, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it's a list\n    state_np = np.asarray(state)\n    \n    # First linear layer followed by ReLU\n    z1 = state_np @ weights['W1'] + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU activation\n    \n    # Second linear layer followed by ReLU\n    z2 = a1 @ weights['W2'] + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU activation\n    \n    # Third linear layer followed by tanh\n    z3 = a2 @ weights['W3'] + weights['b3']\n    action = np.tanh(z3)  # tanh activation\n    \n    # Round to four decimal places and convert to a list\n    return np.round(action, decimals=4).tolist()\n```"}
{"task_id": 160, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function learns a weight vector and optional intercept that minimise squared loss + \u03bb\u00b7L1-norm.\n    Relies solely on NumPy.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias` is a float, both rounded to 4 decimals.\n    \"\"\"\n    m, n_original = X.shape\n    \n    # Step 1: Augment X with intercept column (ones if fitting intercept, zeros otherwise)\n    if fit_intercept:\n        intercept_column = np.ones((m, 1))\n    else:\n        intercept_column = np.zeros((m, 1))\n    X_augmented = np.hstack([intercept_column, X])  # Shape (m, n_original + 1)\n    \n    # Step 2: Initialize parameters to zero\n    w = np.zeros(n_original + 1)  # w[0] is intercept, w[1:] are feature weights\n    \n    for _ in range(max_iters):\n        # Recompute intercept in every outer loop if fitting intercept\n        if fit_intercept:\n            # Residual without the intercept term (using current feature weights)\n            residual_for_intercept = y - (X_augmented[:, 1:] @ w[1:])\n            w[0] = np.mean(residual_for_intercept)\n        \n        # Coordinate loop over each feature weight (excluding intercept)\n        for j in range(1, n_original + 1):\n            # Temporarily set current weight to 0 to compute partial residual\n            w_temp = w.copy()\n            w_temp[j] = 0.0\n            partial_residual = y - (X_augmented @ w_temp)\n            \n            # Compute dot product of feature column and partial residual\n            a = X_augmented[:, j] @ partial_residual\n            tau = lambda_param * m  # Soft-thresholding parameter\n            \n            # Apply soft-thresholding operator\n            soft_thresholded = np.sign(a) * np.maximum(np.abs(a) - tau, 0.0)\n            \n            # Compute sum of squares for the feature column\n            sum_squares = np.sum(X_augmented[:, j] ** 2)\n            \n            # Update the weight (avoid division by zero)\n            if sum_squares == 0:\n                w[j] = 0.0\n            else:\n                w[j] = soft_thresholded / sum_squares\n    \n    # Round results to 4 decimal places and return\n    weights = list(np.round(w[1:], 4))\n    bias = np.round(w[0], 4)\n    return (weights, bias)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Check if the lengths are different\n    len_x = len(x)\n    len_y = len(y)\n    if len_x != len_y:\n        return -1\n    \n    # Handle empty vectors (edge case)\n    if len_x == 0:\n        return 0.0\n    \n    # Convert to NumPy arrays for element-wise comparison\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n    \n    # Calculate the number of differing elements\n    diff_count = np.sum(x_arr != y_arr)\n    \n    # Compute normalized distance and round to 4 decimals\n    normalized_distance = diff_count / len_x\n    return round(normalized_distance, 4)\n```"}
{"task_id": 169, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Check for valid window type\n    supported_windows = [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]\n    if window not in supported_windows:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    # Check N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # Handle N=1 case\n    if N == 1:\n        return [1.0]\n    \n    # Check coefficients for generalized_cosine\n    if window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"coefficients must be provided for generalized_cosine window\")\n        if not isinstance(coefficients, list):\n            raise TypeError(\"coefficients must be a list\")\n    \n    denominator = N - 1\n    window_coefficients = []\n    \n    for n in range(N):\n        if window == \"hamming\":\n            w = 0.54 - 0.46 * np.cos(2 * np.pi * n / denominator)\n        elif window == \"hann\":\n            w = 0.5 - 0.5 * np.cos(2 * np.pi * n / denominator)\n        elif window == \"blackman_harris\":\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            term1 = a1 * np.cos(2 * np.pi * n / denominator)\n            term2 = a2 * np.cos(4 * np.pi * n / denominator)\n            term3 = a3 * np.cos(6 * np.pi * n / denominator)\n            w = a0 - term1 + term2 - term3\n        elif window == \"generalized_cosine\":\n            w = 0.0\n            for k, a_k in enumerate(coefficients):\n                angle = 2 * np.pi * k * n / denominator\n                w += a_k * np.cos(angle)\n        else:\n            # This should never happen due to earlier check\n            raise ValueError(f\"Unknown window type: {window}\")\n        \n        # Round to 4 decimal places\n        window_coefficients.append(round(w, 4))\n    \n    return window_coefficients\n```"}
{"task_id": 171, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \"\"\"\n    # Check if all training labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map original labels to {0, 1} and vice versa\n    original_labels = sorted(unique_labels)\n    label_mapping = {original_labels[0]: 0, original_labels[1]: 1}\n    inverse_mapping = {v: k for k, v in label_mapping.items()}\n    y_train_mapped = np.array([label_mapping[y] for y in y_train], dtype=np.float64)\n    \n    # Add intercept term (bias) to features\n    X_train_np = np.array(X_train, dtype=np.float64)\n    n_samples, n_features = X_train_np.shape\n    X_train_with_bias = np.hstack([np.ones((n_samples, 1), dtype=np.float64), X_train_np])\n    \n    X_test_np = np.array(X_test, dtype=np.float64)\n    X_test_with_bias = np.hstack([np.ones((X_test_np.shape[0], 1), dtype=np.float64), X_test_np])\n    \n    # Initialize weight vector with zeros\n    theta = np.zeros(n_features + 1, dtype=np.float64)\n    \n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        # Shuffle training data\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X_train_with_bias[permutation]\n        y_shuffled = y_train_mapped[permutation]\n        \n        # Process each mini-batch\n        num_batches = int(np.ceil(n_samples / batch_size))\n        for i in range(num_batches):\n            start_idx = i * batch_size\n            end_idx = min((i + 1) * batch_size, n_samples)\n            X_batch = X_shuffled[start_idx:end_idx]\n            y_batch = y_shuffled[start_idx:end_idx]\n            \n            # Compute predictions and gradient\n            z = X_batch @ theta\n            h = 1 / (1 + np.exp(-z))\n            error = h - y_batch\n            gradient = (X_batch.T @ error) / len(X_batch)\n            \n            # Update weights\n            theta -= learning_rate * gradient\n    \n    # Generate predictions for test set\n    z_test = X_test_with_bias @ theta\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions_binary = (probabilities >= 0.5).astype(int)\n    predictions = [inverse_mapping[p] for p in predictions_binary]\n    \n    return predictions\n```"}
{"task_id": 176, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Implements AdaBoost with decision stumps as weak learners and returns predictions for X_test.\"\"\"\n    # Convert input data to numpy arrays for easier manipulation\n    X_train_np = np.array(X_train, dtype=np.float64)\n    y_train_np = np.array(y_train, dtype=np.int32)\n    # Convert labels from {0, 1} to {-1, 1} for AdaBoost calculations\n    y_ada = 2 * y_train_np - 1  # 0 becomes -1, 1 becomes 1\n    N = len(y_ada)\n    if N == 0:\n        return []  # Handle empty training set\n    \n    # Initialize sample weights uniformly\n    weights = np.ones(N) / N\n    stumps = []  # List to store trained stumps and their alphas: (feature, threshold, polarity, alpha)\n    \n    for _ in range(n_estimators):\n        best_error = np.inf\n        best_stump = None  # (feature_index, threshold, polarity)\n        \n        # Iterate over each feature to find the best decision stump\n        for feature_index in range(X_train_np.shape[1]):\n            X_col = X_train_np[:, feature_index]\n            thresholds = np.unique(X_col)  # Consider unique values as potential thresholds\n            \n            for threshold in thresholds:\n                # Evaluate both possible polarities for the current threshold\n                for polarity in [1, -1]:\n                    # Generate predictions based on current stump parameters\n                    if polarity == 1:\n                        predictions = np.where(X_col < threshold, 1, -1)\n                    else:\n                        predictions = np.where(X_col >= threshold, 1, -1)\n                    \n                    # Calculate weighted error\n                    error = np.sum(weights * (predictions != y_ada))\n                    \n                    # Update best stump if current is better (considering tie-breakers)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_index, threshold, polarity)\n                    elif error == best_error and best_stump is not None:\n                        # Tie-breaking: feature index, then threshold, then polarity (1 before -1)\n                        curr_fi, curr_th, curr_pol = feature_index, threshold, polarity\n                        best_fi, best_th, best_pol = best_stump\n                        if curr_fi < best_fi:\n                            best_stump = (curr_fi, curr_th, curr_pol)\n                        elif curr_fi == best_fi:\n                            if curr_th < best_th:\n                                best_stump = (curr_fi, curr_th, curr_pol)\n                            elif curr_th == best_th and curr_pol == 1 and best_pol == -1:\n                                best_stump = (curr_fi, curr_th, curr_pol)\n        \n        if best_stump is None:\n            break  # No valid stump found (unlikely with non-empty data)\n        \n        # Compute alpha for the best stump\n        error_t = best_error\n        if error_t <= 0:\n            alpha = 0.5 * np.log((1 - error_t) / 1e-10)  # Avoid division by zero\n        else:\n            alpha = 0.5 * np.log((1 - error_t) / (error_t + 1e-10))\n        \n        # Update sample weights\n        fi, th, pol = best_stump\n        X_col = X_train_np[:, fi]\n        # Generate predictions again to update weights\n        if pol == 1:\n            h_x = np.where(X_col < th, 1, -1)\n        else:\n            h_x = np.where(X_col >= th, 1, -1)\n        # Apply weight update formula\n        update_factor = np.exp(-alpha * y_ada * h_x)\n        weights *= update_factor\n        # Normalize weights to sum to 1\n        weights_sum = np.sum(weights)\n        if weights_sum > 0:\n            weights /= weights_sum\n        else:\n            weights = np.ones(N) / N  # Fallback if weights sum to 0 (unlikely)\n        \n        # Store the stump and its alpha\n        stumps.append((fi, th, pol, alpha))\n        \n        # Early stopping if perfect classification is achieved\n        if error_t == 0:\n            break\n    \n    # Generate predictions for the test set\n    X_test_np = np.array(X_test, dtype=np.float64)\n    predictions = []\n    for x in X_test_np:\n        total = 0.0\n        for (fi, th, pol, alpha) in stumps:\n            x_val = x[fi]\n            # Determine the stump's prediction for this test sample\n            if pol == 1:\n                h = 1 if x_val < th else -1\n            else:\n                h = 1 if x_val >= th else -1\n            total += alpha * h\n        # Convert total vote to class label {0, 1}\n        pred = 1 if total >= 0 else 0\n        predictions.append(pred)\n    \n    return predictions\n```"}
{"task_id": 178, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input parameters\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1.0\n\n    # Initialize random number generator with the given seed\n    rng = np.random.default_rng(seed)\n\n    # PSO parameters\n    w = 0.5  # Inertia weight\n    c1 = 1.5  # Cognitive weight\n    c2 = 1.5  # Social weight\n\n    # Initialize particle positions (within [-1, 1] range)\n    positions = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n\n    # Initialize velocities to zero\n    velocities = np.zeros_like(positions)\n\n    # Initialize personal best positions and values\n    p_best = positions.copy()\n    p_best_values = np.sum(positions ** 2, axis=1)  # Sphere function evaluation\n\n    # Initialize global best position and value\n    g_best_idx = np.argmin(p_best_values)\n    g_best_value = p_best_values[g_best_idx]\n    g_best = p_best[g_best_idx].copy()\n\n    # Run optimization iterations\n    for _ in range(num_iterations):\n        # Generate random coefficients for cognitive and social terms\n        r1 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        r2 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n\n        # Update velocities using PSO formula\n        cognitive_component = c1 * r1 * (p_best - positions)\n        social_component = c2 * r2 * (g_best - positions)\n        velocities = w * velocities + cognitive_component + social_component\n\n        # Update positions and clip to the [-1, 1] range\n        new_positions = positions + velocities\n        new_positions = np.clip(new_positions, -1.0, 1.0)\n\n        # Evaluate new positions using the Sphere function\n        new_values = np.sum(new_positions ** 2, axis=1)\n\n        # Update personal best if new position is better\n        improved = new_values < p_best_values\n        p_best[improved] = new_positions[improved]\n        p_best_values[improved] = new_values[improved]\n\n        # Update global best if any personal best is better\n        current_best_idx = np.argmin(p_best_values)\n        current_best_value = p_best_values[current_best_idx]\n        if current_best_value < g_best_value:\n            g_best_value = current_best_value\n            g_best = p_best[current_best_idx].copy()\n\n        # Prepare for next iteration\n        positions = new_positions\n\n    # Return the best value rounded to four decimal places\n    return round(g_best_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import Counter\n\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    # Determine effective k\n    if k == 0 or k > n_train:\n        effective_k = n_train\n    else:\n        effective_k = k\n\n    predictions = []\n    for x_test in X_test:\n        # Calculate Euclidean distances between x_test and all training samples\n        distances = []\n        for x_train, y in zip(X_train, y_train):\n            squared_diff = sum((a - b) ** 2 for a, b in zip(x_test, x_train))\n            distance = squared_diff ** 0.5\n            distances.append((distance, y))\n        \n        # Sort distances and select k nearest neighbors\n        sorted_distances = sorted(distances, key=lambda x: x[0])\n        neighbors = sorted_distances[:effective_k]\n        neighbor_ys = [y for d, y in neighbors]\n        \n        # Compute prediction based on task\n        if task == \"classification\":\n            # Find most frequent label, smallest in case of tie\n            counts = Counter(neighbor_ys)\n            max_count = max(counts.values())\n            candidates = [y for y, cnt in counts.items() if cnt == max_count]\n            pred = min(candidates)\n        elif task == \"regression\":\n            # Compute average and round to 4 decimals\n            avg = sum(neighbor_ys) / len(neighbor_ys)\n            pred = round(avg, 4)\n        else:\n            raise ValueError(\"Task must be 'classification' or 'regression'\")\n        \n        predictions.append(pred)\n    \n    return predictions\n```"}
{"task_id": 184, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    \n    def gini(labels: np.ndarray) -> float:\n        \"\"\"Calculate Gini impurity for a set of labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        probabilities = counts / len(labels)\n        return 1.0 - np.sum(probabilities ** 2)\n    \n    def find_best_split(X: np.ndarray, y: np.ndarray) -> tuple[int | None, float | None, float]:\n        \"\"\"Find the best feature and threshold to split based on Gini gain.\"\"\"\n        parent_gini_val = gini(y)\n        n_samples, n_features = X.shape\n        best_gain = 0.0\n        best_feature = None\n        best_threshold = None\n        \n        if parent_gini_val == 0:\n            return (best_feature, best_threshold, best_gain)  # No need to split\n        \n        for feature in range(n_features):\n            feats = X[:, feature]\n            sorted_indices = np.argsort(feats)\n            sorted_feats = feats[sorted_indices]\n            sorted_y = y[sorted_indices]\n            \n            for i in range(n_samples - 1):\n                current_feat = sorted_feats[i]\n                next_feat = sorted_feats[i + 1]\n                if current_feat == next_feat:\n                    continue  # Skip same consecutive values\n                threshold = (current_feat + next_feat) / 2.0\n                # Split into left (<= threshold) and right (> threshold)\n                y_left = sorted_y[:i + 1]\n                y_right = sorted_y[i + 1:]\n                # Calculate Gini for children\n                gini_left = gini(y_left)\n                gini_right = gini(y_right)\n                # Weighted Gini of children\n                weight_left = len(y_left) / n_samples\n                weight_right = len(y_right) / n_samples\n                child_gini = weight_left * gini_left + weight_right * gini_right\n                # Calculate gain\n                gain = parent_gini_val - child_gini\n                # Update best split if current gain is higher\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n        \n        return (best_feature, best_threshold, best_gain)\n    \n    def build_tree(X: np.ndarray, y: np.ndarray, current_depth: int) -> dict:\n        \"\"\"Recursively build the decision tree.\"\"\"\n        # Stopping criteria 1: All labels are the same\n        unique_labels = np.unique(y)\n        if len(unique_labels) == 1:\n            return {'type': 'leaf', 'label': unique_labels[0]}\n        \n        # Stopping criteria 2: Max depth reached\n        if max_depth is not None and current_depth >= max_depth:\n            majority = np.argmax(np.bincount(y))\n            return {'type': 'leaf', 'label': majority}\n        \n        # Find best possible split\n        best_feature, best_threshold, best_gain = find_best_split(X, y)\n        \n        # Stopping criteria 3: No gain from splitting\n        if best_gain <= 0:\n            majority = np.argmax(np.bincount(y))\n            return {'type': 'leaf', 'label': majority}\n        \n        # Split the data into left and right subsets\n        left_mask = X[:, best_feature] <= best_threshold\n        X_left, y_left = X[left_mask], y[left_mask]\n        X_right, y_right = X[~left_mask], y[~left_mask]\n        \n        # Stopping criteria 4: Split results in empty child\n        if len(y_left) == 0 or len(y_right) == 0:\n            majority = np.argmax(np.bincount(y))\n            return {'type': 'leaf', 'label': majority}\n        \n        # Recursively build left and right subtrees\n        left_child = build_tree(X_left, y_left, current_depth + 1)\n        right_child = build_tree(X_right, y_right, current_depth + 1)\n        \n        return {\n            'type': 'split',\n            'feature': best_feature,\n            'threshold': best_threshold,\n            'left': left_child,\n            'right': right_child\n        }\n    \n    def predict_sample(x: np.ndarray, tree: dict) -> int:\n        \"\"\"Predict the class of a single sample by traversing the tree.\"\"\"\n        if tree['type'] == 'leaf':\n            return tree['label']\n        if x[tree['feature']] <= tree['threshold']:\n            return predict_sample(x, tree['left'])\n        else:\n            return predict_sample(x, tree['right'])\n    \n    # Handle edge case: empty training data (return all 0s as per problem constraints)\n    if len(X_train) == 0:\n        return [0] * len(X_test)\n    \n    # Build the decision tree\n    decision_tree = build_tree(X_train, y_train, current_depth=0)\n    \n    # Predict on test data\n    predictions = [predict_sample(x, decision_tree) for x in X_test]\n    \n    return predictions\n```"}
{"task_id": 190, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n    n_total = n_samples\n\n    def compute_gini(labels):\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        props = counts / len(labels)\n        return 1.0 - np.sum(props ** 2)\n\n    G_whole = compute_gini(y)\n\n    # Check if there are any valid splits (features with at least two unique values)\n    has_valid_split = False\n    for j in range(n_features):\n        if len(np.unique(X[:, j])) >= 2:\n            has_valid_split = True\n            break\n    if not has_valid_split:\n        return (-1, None, round(G_whole, 4))\n\n    best_gini = float('inf')\n    best_feature = -1\n    best_threshold = None\n\n    for j in range(n_features):\n        unique_vals = np.unique(X[:, j])\n        for v in unique_vals:\n            left_mask = (X[:, j] <= v)\n            left_y = y[left_mask]\n            right_y = y[~left_mask]\n            n_left = len(left_y)\n            n_right = len(right_y)\n\n            if n_left == 0 or n_right == 0:\n                continue  # Skip invalid splits\n\n            g_left = compute_gini(left_y)\n            g_right = compute_gini(right_y)\n            g_split = (n_left / n_total) * g_left + (n_right / n_total) * g_right\n\n            # Update best split based on tie-breaking rules\n            if g_split < best_gini - 1e-12:\n                best_gini = g_split\n                best_feature = j\n                best_threshold = v\n            elif np.isclose(g_split, best_gini, atol=1e-12):\n                if j < best_feature:\n                    best_gini = g_split\n                    best_feature = j\n                    best_threshold = v\n                elif j == best_feature and v < best_threshold:\n                    best_gini = g_split\n                    best_feature = j\n                    best_threshold = v\n\n    return (best_feature, best_threshold, round(best_gini, 4))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if name not in supported_metrics:\n        return lambda u, v: -1\n\n    def distance_function(u, v):\n        # Validate input types\n        if not (isinstance(u, (list, tuple, np.ndarray)) and isinstance(v, (list, tuple, np.ndarray))):\n            return -1\n        \n        # Convert to numpy arrays and check numeric validity\n        try:\n            u_arr = np.array(u, dtype=float)\n            v_arr = np.array(v, dtype=float)\n        except (TypeError, ValueError):\n            return -1\n        \n        # Check 1-dimensionality\n        if u_arr.ndim != 1 or v_arr.ndim != 1:\n            return -1\n        \n        # Check non-empty\n        if len(u_arr) == 0 or len(v_arr) == 0:\n            return -1\n        \n        # Check equal length\n        if len(u_arr) != len(v_arr):\n            return -1\n        \n        # Cosine specific norm check\n        if name == 'cosine':\n            norm_u = np.linalg.norm(u_arr)\n            norm_v = np.linalg.norm(v_arr)\n            if norm_u == 0 or norm_v == 0:\n                return -1\n        \n        # Compute distance based on metric name\n        try:\n            if name == 'euclidean':\n                distance = np.linalg.norm(u_arr - v_arr)\n            elif name == 'manhattan':\n                distance = np.sum(np.abs(u_arr - v_arr))\n            elif name == 'chebyshev':\n                distance = np.max(np.abs(u_arr - v_arr))\n            elif name == 'cosine':\n                dot_product = np.dot(u_arr, v_arr)\n                cosine_similarity = dot_product / (norm_u * norm_v)\n                distance = 1 - cosine_similarity\n            else:\n                return -1  # Fallback, though name is pre-checked\n        except:\n            return -1\n        \n        # Round to four decimal places\n        return round(distance, 4)\n\n    return distance_function\n```"}
{"task_id": 197, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        spaces = env.action_space.spaces\n        n_actions_per_dim = []\n        all_discrete = True\n        action_dim = 0\n        for space in spaces:\n            if hasattr(space, 'n'):\n                # Discrete sub-space (1D)\n                n = space.n\n                n_actions_per_dim.append(n)\n                action_dim += 1\n            else:\n                # Continuous sub-space, get dimensions from shape\n                dim = space.shape[0]\n                n_actions_per_dim.extend([np.inf] * dim)\n                action_dim += dim\n                all_discrete = False\n        # Compute action_ids\n        if all_discrete:\n            ranges = [range(n) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n        else:\n            action_ids = None\n    else:\n        if cont_action:\n            # Continuous single space\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n        else:\n            # Discrete single space\n            action_dim = 1\n            n = env.action_space.n\n            n_actions_per_dim = [n]\n            action_ids = [(i,) for i in range(n)]\n    return (n_actions_per_dim, action_ids, action_dim)\n```"}
{"task_id": 198, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T\n    if not phi:\n        T = 0\n    else:\n        T = phi[0].shape[1]\n    \n    # Initialize counts matrix (V x T) with zeros\n    counts = np.zeros((V, T), dtype=np.float64)\n    \n    # Accumulate counts for each word-topic pair\n    for d in range(len(corpus)):\n        doc_words = corpus[d]\n        doc_phi = phi[d]\n        for n in range(len(doc_words)):\n            word = doc_words[n]\n            counts[word, :] += doc_phi[n, :]\n    \n    # Normalize each column to sum to 1\n    beta = np.zeros((V, T), dtype=np.float64)\n    for t in range(T):\n        col_sum = counts[:, t].sum()\n        if col_sum > 0:\n            beta[:, t] = counts[:, t] / col_sum\n        # If column sum is zero (theoretical edge case), leave as zeros\n    \n    # Round to 4 decimal places and convert to list of lists\n    beta_rounded = np.round(beta, decimals=4)\n    return beta_rounded.tolist()\n```"}
{"task_id": 202, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    def compute_total_cost(X, medoids):\n        total = 0.0\n        n = X.shape[0]\n        for i in range(n):\n            x = X[i]\n            min_dist = np.inf\n            for m in medoids:\n                dist = np.linalg.norm(x - X[m])\n                if dist < min_dist:\n                    min_dist = dist\n            total += min_dist\n        return total\n\n    n = X.shape[0]\n    if k == 0 or k > n:\n        raise ValueError(\"k must be between 1 and the number of samples\")\n    \n    medoids = list(range(k))\n    current_cost = compute_total_cost(X, medoids)\n    \n    while True:\n        best_reduction = 0\n        best_swap = None\n        non_medoids = [i for i in range(n) if i not in medoids]\n        \n        for m in medoids:\n            for o in non_medoids:\n                temp_medoids = [o if idx == m else idx for idx in medoids]\n                new_cost = compute_total_cost(X, temp_medoids)\n                reduction = current_cost - new_cost\n                if reduction > best_reduction:\n                    best_reduction = reduction\n                    best_swap = (m, o)\n        \n        if best_reduction > 0:\n            m, o = best_swap\n            idx = medoids.index(m)\n            medoids[idx] = o\n            current_cost -= best_reduction\n        else:\n            break\n    \n    labels = []\n    for x in X:\n        min_dist = np.inf\n        label = 0\n        for i, m in enumerate(medoids):\n            dist = np.linalg.norm(x - X[m])\n            if dist < min_dist:\n                min_dist = dist\n                label = i\n        labels.append(label)\n    \n    return labels\n```"}
{"task_id": 216, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    # Input validation and conversion to numpy arrays\n    try:\n        x_train = np.array(x_train, dtype=float)\n        y_train = np.array(y_train, dtype=float)\n        x_test = np.array(x_test, dtype=float)\n    except (ValueError, TypeError):\n        return -1  # Invalid input (non-numeric values)\n    \n    # Check for non-positive iterations\n    if n_iterations < 1:\n        return -1\n    \n    # Reshape 1D arrays to 2D for consistent processing\n    if x_train.ndim == 1:\n        x_train = x_train.reshape(1, -1)\n    if x_test.ndim == 1:\n        x_test = x_test.reshape(1, -1)\n    \n    # Check feature count compatibility\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # Validate y_train shape and length\n    if y_train.ndim > 1:\n        if y_train.shape[0] != x_train.shape[0] or y_train.shape[1] != 1:\n            return -1\n        y_train = y_train.flatten()\n    if len(y_train) != x_train.shape[0]:\n        return -1\n    \n    # Generate polynomial features (per-feature expansion, no interactions)\n    def generate_polynomial_features(X, deg):\n        if deg < 1:\n            return np.zeros((X.shape[0], 0))  # No features for degree <1\n        poly_features = []\n        for col in X.T:\n            for d in range(1, deg + 1):\n                poly_features.append(col ** d)\n        return np.column_stack(poly_features)\n    \n    X_poly_train = generate_polynomial_features(x_train, degree)\n    X_poly_test = generate_polynomial_features(x_test, degree)\n    \n    # Standardize features (using training stats for both train and test)\n    if X_poly_train.size == 0:  # No polynomial features\n        X_standardized_train = np.zeros((x_train.shape[0], 0))\n        X_standardized_test = np.zeros((x_test.shape[0], 0))\n        mean = np.array([])\n        std = np.array([])\n    else:\n        mean = np.mean(X_poly_train, axis=0)\n        std = np.std(X_poly_train, axis=0) + 1e-8  # Avoid division by zero\n        X_standardized_train = (X_poly_train - mean) / std\n        X_standardized_test = (X_poly_test - mean) / std\n    \n    # Add bias term (column of ones)\n    X_train_processed = np.hstack([np.ones((X_standardized_train.shape[0], 1)), X_standardized_train])\n    X_test_processed = np.hstack([np.ones((X_standardized_test.shape[0], 1)), X_standardized_test])\n    \n    # Batch gradient descent training\n    m = X_train_processed.shape[0]\n    p_plus_1 = X_train_processed.shape[1]\n    w = np.zeros(p_plus_1)  # Initialize weights\n    \n    for _ in range(n_iterations):\n        y_pred = X_train_processed @ w\n        error = y_pred - y_train\n        \n        # MSE gradient\n        mse_gradient = (1/m) * (X_train_processed.T @ error)\n        \n        # Regularization gradient (excluding bias term)\n        if p_plus_1 > 1:  # Only regularize if there are non-bias features\n            l1_term = reg_factor * l1_ratio * np.sign(w[1:])\n            l2_term = reg_factor * (1 - l1_ratio) * w[1:]\n            reg_gradient = np.zeros_like(w)\n            reg_gradient[1:] = l1_term + l2_term\n        else:\n            reg_gradient = np.zeros_like(w)\n        \n        # Update weights\n        total_gradient = mse_gradient + reg_gradient\n        w -= learning_rate * total_gradient\n    \n    # Predict and round to 4 decimals\n    y_test_pred = X_test_processed @ w\n    return np.round(y_test_pred, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual_arr = np.asarray(actual)\n    predicted_arr = np.asarray(predicted)\n    \n    # Compute sigmoid probabilities (prob_i)\n    prob = 1 / (1 + np.exp(-predicted_arr))\n    \n    # Compute gradient components\n    sigmoid_arg = -actual_arr * predicted_arr\n    sigmoid_vals = 1 / (1 + np.exp(-sigmoid_arg))\n    gradient = actual_arr * sigmoid_vals\n    \n    # Compute Hessian components\n    hessian = prob * (1 - prob)\n    \n    # Round to 6 decimal places and convert to Python lists\n    gradient_list = np.round(gradient, 6).tolist()\n    hessian_list = np.round(hessian, 6).tolist()\n    probability_list = np.round(prob, 6).tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n    # Calculate player's score considering usable aces\n    sum_p = sum(player)\n    aces_p = player.count(1)\n    player_score = sum_p + 10 if aces_p > 0 and sum_p + 10 <= 21 else sum_p\n\n    # Calculate dealer's score considering usable aces\n    sum_d = sum(dealer)\n    aces_d = dealer.count(1)\n    dealer_score = sum_d + 10 if aces_d > 0 and sum_d + 10 <= 21 else sum_d\n\n    # Check if player busts\n    if player_score > 21:\n        return -1.0\n\n    # Check if dealer busts (player hasn't)\n    if dealer_score > 21:\n        return 1.0\n\n    # Check for natural blackjacks\n    player_natural = len(player) == 2 and sorted(player) == [1, 10]\n    dealer_natural = len(dealer) == 2 and sorted(dealer) == [1, 10]\n\n    if player_natural and dealer_natural:\n        return 0.0\n    elif player_natural:\n        return 1.5\n    elif dealer_natural:\n        return -1.0\n\n    # Compare scores when no naturals or busts\n    if player_score > dealer_score:\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0\n```"}
{"task_id": 221, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns a NumPy array containing the element-wise squared logarithmic errors.\"\"\"\n    log_actual = np.log(1 + actual)\n    log_predicted = np.log(1 + predicted)\n    return (log_actual - log_predicted) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual_arr = np.asarray(actual)\n    predicted_arr = np.asarray(predicted)\n    \n    # Check if shapes are the same\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    \n    # Check if arrays are empty\n    if actual_arr.size == 0:\n        return -1\n    \n    # Check for non-negative values\n    if np.any(actual_arr < 0) or np.any(predicted_arr < 0):\n        return -1\n    \n    # Compute squared log errors\n    squared_errors = squared_log_error(actual_arr, predicted_arr)\n    \n    # Calculate mean and round to 4 decimals\n    msle = np.mean(squared_errors)\n    return round(msle, 4)\n```"}
{"task_id": 222, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Handle scalar input\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(result, 4)\n    else:\n        # Convert input to numpy array for vectorized operations\n        arr = np.array(z)\n        # Compute sigmoid using numerically stable approach\n        sigmoid_vals = np.where(\n            arr >= 0,\n            1 / (1 + np.exp(-arr)),\n            np.exp(arr) / (1 + np.exp(arr))\n        )\n        # Round to 4 decimal places and convert to Python list\n        return np.around(sigmoid_vals, decimals=4).tolist()\n```"}
{"task_id": 224, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(element, a) for element in z]\n    else:\n        return z if z >= 0 else a * z\n```"}
{"task_id": 226, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples  # Initialize sample weights\n    stumps = []  # List to store trained decision stumps\n    alphas = []  # List to store learner weights (alphas)\n\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n\n        # Iterate over all features to find the best decision stump\n        for feature in range(n_features):\n            X_feature = X_train[:, feature]\n            sorted_indices = np.argsort(X_feature)\n            sorted_X = X_feature[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n            sorted_y = y_train[sorted_indices]\n\n            # Precompute cumulative sums for positive and negative class weights\n            y_positive = (sorted_y == 1)\n            y_negative = (sorted_y == -1)\n            cum_positive = np.cumsum(sorted_weights * y_positive)\n            cum_negative = np.cumsum(sorted_weights * y_negative)\n            sum_positive = cum_positive[-1] if cum_positive.size > 0 else 0.0\n            sum_negative = cum_negative[-1] if cum_negative.size > 0 else 0.0\n\n            # Check all possible split points (including before first and after last sample)\n            for split_idx in range(n_samples + 1):\n                # Calculate weights for left (0..split_idx-1) and right (split_idx..end) partitions\n                if split_idx == 0:\n                    left_positive = 0.0\n                    left_negative = 0.0\n                else:\n                    left_positive = cum_positive[split_idx - 1]\n                    left_negative = cum_negative[split_idx - 1]\n                right_positive = sum_positive - left_positive\n                right_negative = sum_negative - left_negative\n\n                # Error for polarity 1: predict -1 if x < threshold, 1 otherwise\n                error_p1 = left_positive + right_negative\n                # Error for polarity -1: predict 1 if x < threshold, -1 otherwise\n                error_pm1 = left_negative + right_positive\n\n                # Determine the best polarity for this split\n                if error_p1 < error_pm1:\n                    current_error = error_p1\n                    current_polarity = 1\n                else:\n                    current_error = error_pm1\n                    current_polarity = -1\n\n                # Determine threshold based on split position\n                if split_idx == 0:\n                    threshold = sorted_X[0] - 1.0 if sorted_X.size > 0 else 0.0\n                elif split_idx == n_samples:\n                    threshold = sorted_X[-1] + 1.0 if sorted_X.size > 0 else 0.0\n                else:\n                    threshold = (sorted_X[split_idx - 1] + sorted_X[split_idx]) / 2.0\n\n                # Update best stump if current error is lower\n                if current_error < best_error:\n                    best_error = current_error\n                    best_stump = (feature, threshold, current_polarity)\n\n        # Compute learner weight (alpha)\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update sample weights\n        feature, threshold, polarity = best_stump\n        h = np.where(X_train[:, feature] < threshold, -polarity, polarity)  # Stump predictions\n        weights *= np.exp(-alpha * y_train * h)\n        weights /= np.sum(weights)  # Normalize to sum to 1\n\n    # Predict on test data\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (feature, threshold, polarity), alpha in zip(stumps, alphas):\n            if x[feature] < threshold:\n                h = -polarity\n            else:\n                h = polarity\n            total += alpha * h\n        predictions.append(1 if total >= 0 else -1)\n\n    return predictions\n```"}
{"task_id": 241, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    d0 = shape[0]\n    m = np.prod(shape[1:])\n    \n    # Step 2: Create 2D matrix A with standard normal distribution\n    A = np.random.randn(d0, m)\n    \n    # Step 3: Compute SVD with full_matrices=False to get economy-sized decomposition\n    U, s, Vh = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose Q based on shape comparison\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vh\n    \n    # Step 5: Reshape and scale\n    result = Q.reshape(shape) * scale\n    \n    # Convert to Python list as required\n    return result.tolist()\n```"}
{"task_id": 243, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Calculate the sum of the state elements\n    sum_state = sum(state)\n    # Apply ReLU activation for the first dense layer output (z1)\n    z1 = max(0.0, sum_state)\n    # The state value is 64 times z1 (due to the network architecture with all weights=1)\n    state_value = 64 * z1\n    # Action probabilities are always 1/3 for each action (since all logits are equal)\n    action_probs = [1/3, 1/3, 1/3]\n    # Round to four decimal places\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)\n```"}
{"task_id": 249, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    h = np.array(state, dtype=np.float64)\n    \n    # Process shared layers with ReLU activation\n    for i in range(1, 4):  # i=1,2,3 for W1/b1 to W3/b3\n        W = np.array(params[f'W{i}'], dtype=np.float64)\n        b = np.array(params[f'b{i}'], dtype=np.float64)\n        h = np.maximum(W @ h + b, 0)  # Affine transformation + ReLU\n    \n    # Actor head: compute action scores and apply softmax\n    Wa = np.array(params['Wa'], dtype=np.float64)\n    ba = np.array(params['ba'], dtype=np.float64)\n    actor_scores = Wa @ h + ba\n    # Numerically stable softmax\n    exp_scores = np.exp(actor_scores - np.max(actor_scores))\n    probabilities = exp_scores / exp_scores.sum()\n    \n    # Critic head: compute state value\n    Wc = np.array(params['Wc'], dtype=np.float64)\n    bc = np.array(params['bc'], dtype=np.float64)\n    value = Wc @ h + bc\n    \n    # Round probabilities and value to 4 decimal places\n    probabilities_rounded = [round(p, 4) for p in probabilities.tolist()]\n    value_rounded = round(value.item(), 4)  # Convert numpy scalar to Python float if needed\n    \n    return (probabilities_rounded, value_rounded)\n```"}
{"task_id": 253, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    w_array = np.asarray(w)\n    \n    # Ensure the input is a 1-dimensional array\n    if w_array.ndim != 1:\n        raise ValueError(\"w must be a 1-D array or list\")\n    \n    if not gradient:\n        # Calculate L1 norm (sum of absolute values)\n        l1_norm = np.sum(np.abs(w_array))\n        # Calculate L2 squared norm (sum of squares)\n        l2_squared = np.sum(w_array ** 2)\n        # Compute the penalty value\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_squared)\n        # Round to 4 decimal places and return\n        return round(penalty, 4)\n    else:\n        # Compute the sign of each element in w\n        sign_w = np.sign(w_array)\n        # Calculate the two terms of the gradient\n        term1 = l1_ratio * sign_w\n        term2 = (1 - l1_ratio) * w_array\n        # Combine terms and scale by alpha\n        gradient_array = alpha * (term1 + term2)\n        # Convert to list and round each element to 4 decimal places\n        return [round(val, 4) for val in gradient_array.tolist()]\n```"}
{"task_id": 256, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle non-trainable parameters\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Adjust parameter key for case sensitivity\n    param_key = param_name\n    if param_name == \"Ba\":\n        param_key = \"ba\"\n    elif param_name == \"Bx\":\n        param_key = \"bx\"\n    \n    # Check if parameter exists in model\n    if param_key not in model.parameters:\n        return None\n    \n    # Retrieve and backup original parameter\n    original_param = model.parameters[param_key].copy()\n    param = model.parameters[param_key].astype(np.float64)  # Ensure float64 for precision\n    model.parameters[param_key] = param  # Update model with float64 version\n    \n    # Initialize gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element in the parameter\n    for index in np.ndindex(param.shape):\n        original_val = param[index].copy()\n        \n        # Compute loss with +epsilon perturbation\n        param[index] = original_val + epsilon\n        model.flush_gradients()\n        predictions_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(predictions_plus)\n        \n        # Compute loss with -epsilon perturbation\n        param[index] = original_val - epsilon\n        model.flush_gradients()\n        predictions_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(predictions_minus)\n        \n        # Calculate numerical gradient and restore original value\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n        param[index] = original_val\n    \n    # Restore original parameter in model\n    model.parameters[param_key] = original_param\n    \n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    n_clf = max(n_clf, 1)  # Ensure at least 1 classifier\n    m, n = X_train.shape\n    k = X_test.shape[0]\n    \n    # Initialize sample weights\n    weights = np.ones(m) / m\n    \n    # List to store stumps: (feature, threshold, direction, alpha)\n    stumps = []\n    \n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_j = 0\n        best_threshold = 0.0\n        best_direction = 1  # 1 or -1\n        \n        # Find the best decision stump\n        for j in range(n):\n            feats = X_train[:, j]\n            thresholds = np.unique(feats)\n            \n            for threshold in thresholds:\n                # Try direction 1: x >= threshold \u2192 1, else -1\n                preds = np.where(feats >= threshold, 1, -1)\n                error = np.sum(weights * (preds != y_train))\n                if error < best_error:\n                    best_error, best_j, best_threshold, best_direction = error, j, threshold, 1\n                \n                # Try direction -1: x >= threshold \u2192 -1, else 1\n                preds = np.where(feats >= threshold, -1, 1)\n                error = np.sum(weights * (preds != y_train))\n                if error < best_error:\n                    best_error, best_j, best_threshold, best_direction = error, j, threshold, -1\n        \n        # Compute alpha (handle epsilon=0 to avoid division by zero)\n        if best_error <= 0:\n            alpha = np.inf\n        else:\n            alpha = 0.5 * np.log((1 - best_error) / best_error)\n        \n        # Update weights\n        h = np.where(X_train[:, best_j] >= best_threshold, best_direction, -best_direction)\n        weights *= np.exp(-alpha * y_train * h)\n        weights_sum = np.sum(weights)\n        if weights_sum > 0:  # Avoid division by zero\n            weights /= weights_sum\n        else:\n            break  # All weights zero, no further updates\n        \n        stumps.append((best_j, best_threshold, best_direction, alpha))\n    \n    # Predict on test data\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (j, threshold, direction, alpha) in stumps:\n            h = direction if x[j] >= threshold else -direction\n            total += alpha * h\n        pred = 1 if total >= 0 else -1\n        predictions.append(pred)\n    \n    return predictions\n```"}
{"task_id": 261, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    # Compute fan_in and fan_out based on the shape\n    if len(shape) == 2:\n        fan_in, fan_out = shape[0], shape[1]\n    else:\n        # For shapes with more than two dimensions (e.g., convolutional kernels)\n        in_channels = shape[1]\n        out_channels = shape[0]\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    # Calculate the standard deviation\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Generate the array using a local random state to avoid modifying the global state\n    rng = np.random.RandomState()\n    initialized_array = rng.normal(loc=0.0, scale=std_dev, size=shape)\n\n    return initialized_array\n```"}
{"task_id": 266, "completion_id": 0, "completion": "\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize a dictionary to hold sets of neighbors for each vertex\n    adj_set = {v: set() for v in V}\n    \n    # Process each edge to populate the adjacency sets\n    for u, v in E:\n        adj_set[u].add(v)\n        adj_set[v].add(u)\n    \n    # Build the adjacency list by sorting neighbors according to their order in V\n    adj_list = []\n    for vertex in V:\n        # Sort neighbors based on their index in V to maintain appearance order\n        neighbors = sorted(adj_set[vertex], key=lambda x: V.index(x))\n        adj_list.append(neighbors)\n    \n    return adj_list\n```"}
{"task_id": 267, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n\n    for j in range(n_features):\n        feats = X[:, j]\n        thresholds = np.unique(feats)\n        for theta in thresholds:\n            # Calculate error for polarity 1\n            preds_p1 = np.where(feats < theta, 1, -1)\n            error_p1 = np.sum(sample_weights[preds_p1 != y])\n            \n            # Calculate error for polarity -1\n            preds_pm1 = np.where(feats < theta, -1, 1)\n            error_pm1 = np.sum(sample_weights[preds_pm1 != y])\n            \n            # Determine the best polarity for current threshold\n            if error_p1 < error_pm1:\n                current_error = error_p1\n                current_p = 1\n            else:\n                current_error = error_pm1\n                current_p = -1\n            \n            # Update best parameters if current is better\n            if current_error < best_error:\n                best_error = current_error\n                best_feature = j\n                best_threshold = theta\n                best_polarity = current_p\n\n    return {\n        \"feature_index\": best_feature,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```"}
{"task_id": 273, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport bisect\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert numpy arrays to lists\n    if isinstance(feature, np.ndarray):\n        feature = feature.tolist()\n    if isinstance(target, np.ndarray):\n        target = target.tolist()\n    \n    n = len(feature)\n    if n == 0 or len(target) != n:\n        return (None, 0.0)\n    \n    # Sort feature and target by feature values\n    sorted_pairs = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_x = [p[0] for p in sorted_pairs]\n    sorted_y = [p[1] for p in sorted_pairs]\n    \n    # Extract unique sorted feature values\n    sorted_unique_x = []\n    prev = None\n    for x in sorted_x:\n        if x != prev:\n            sorted_unique_x.append(x)\n            prev = x\n    if len(sorted_unique_x) < 2:\n        return (None, 0.0)\n    \n    # Calculate parent entropy\n    def entropy(labels):\n        if not labels:\n            return 0.0\n        counts = Counter(labels)\n        total = len(labels)\n        h = 0.0\n        for cnt in counts.values():\n            p = cnt / total\n            h -= p * math.log2(p)\n        return h\n    \n    parent_entropy = entropy(target)\n    if parent_entropy == 0:\n        return (None, 0.0)\n    \n    # Generate candidate thresholds (midpoints between consecutive unique features)\n    thresholds = []\n    for i in range(len(sorted_unique_x) - 1):\n        t = (sorted_unique_x[i] + sorted_unique_x[i+1]) / 2\n        thresholds.append(t)\n    \n    max_ig = -math.inf\n    best_t = None\n    len_target = len(target)\n    \n    for t in thresholds:\n        # Find split index using bisect\n        split_idx = bisect.bisect_left(sorted_x, t)\n        len_left = split_idx\n        len_right = len_target - split_idx\n        \n        if len_left == 0 or len_right == 0:\n            current_ig = 0.0\n        else:\n            left_labels = sorted_y[:split_idx]\n            right_labels = sorted_y[split_idx:]\n            h_left = entropy(left_labels)\n            h_right = entropy(right_labels)\n            weighted_entropy = (len_left / len_target) * h_left + (len_right / len_target) * h_right\n            current_ig = parent_entropy - weighted_entropy\n        \n        # Update best threshold and max IG\n        if current_ig > max_ig:\n            max_ig = current_ig\n            best_t = t\n        elif current_ig == max_ig:\n            if t < best_t:\n                best_t = t\n    \n    if max_ig <= 0:\n        return (None, 0.0)\n    else:\n        return (round(best_t, 4), round(max_ig, 4))\n```"}
{"task_id": 286, "completion_id": 0, "completion": "\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [\n        [random.uniform(low, high) for _ in range(cols)]\n        for _ in range(rows)\n    ]\n\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is None or not callable(initializer):\n        raise ValueError(\"Invalid initialization function.\")\n    return initializer\n```"}
{"task_id": 287, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\"\"\"\n    # Extract dimensions from input tensor\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output spatial dimensions\n    output_h = (H - p_h) // s_h + 1\n    output_w = (W - p_w) // s_w + 1\n    \n    # Initialize forward pass output\n    pooled_output = np.zeros((N, C, output_h, output_w))\n    \n    # Compute forward pass: average pooling\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_h):\n                h_start = i * s_h\n                h_end = h_start + p_h\n                for j in range(output_w):\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    # Extract the current window from input\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    # Compute the average of the window\n                    pooled_output[n, c, i, j] = window.mean()\n    \n    # Initialize gradient input with zeros\n    grad_input = np.zeros_like(X)\n    \n    # Compute backward pass: distribute gradients\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_h):\n                h_start = i * s_h\n                h_end = h_start + p_h\n                for j in range(output_w):\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    # Calculate gradient contribution per element in the window\n                    contribution = accum_grad[n, c, i, j] / (p_h * p_w)\n                    # Add contribution to all elements in the corresponding input window\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += contribution\n    \n    # Round to 4 decimal places and convert to Python lists\n    pooled_output_rounded = np.round(pooled_output, decimals=4)\n    grad_input_rounded = np.round(grad_input, decimals=4)\n    \n    return (pooled_output_rounded.tolist(), grad_input_rounded.tolist())\n```"}
{"task_id": 290, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Check if both are Leaf nodes\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Use numpy.allclose with strict tolerance for leaf values\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8, rtol=0)\n    \n    # Check if both are Node nodes\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check feature indices are the same\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Check thresholds are close within 1e-8 tolerance\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8, rtol=0):\n            return False\n        # Recursively check left and right subtrees\n        return (compare_trees(tree_a.left, tree_b.left) and \n                compare_trees(tree_a.right, tree_b.right))\n    \n    # Mismatched node types (one Node, one Leaf)\n    else:\n        return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert input lists to numpy arrays for efficient slicing\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    \n    # Check if parent matrices have the same shape\n    if p1.shape != p2.shape:\n        return -1\n    \n    # Perform single-point column crossover\n    # Child1: columns before cutoff from parent1, columns from cutoff from parent2\n    child1 = np.concatenate([p1[:, :cutoff], p2[:, cutoff:]], axis=1).astype(float)\n    # Child2: columns before cutoff from parent2, columns from cutoff from parent1\n    child2 = np.concatenate([p2[:, :cutoff], p1[:, cutoff:]], axis=1).astype(float)\n    \n    # Convert numpy arrays back to Python lists and return\n    return (child1.tolist(), child2.tolist())\n```"}
{"task_id": 294, "completion_id": 0, "completion": "\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Extract vertex labels from _V2I\n    vertices = G['_V2I'].keys()\n    # Initialize adjacency dictionary with empty lists for each vertex\n    adj = {u: [] for u in vertices}\n    # Create a reverse mapping from index to vertex label\n    index_to_vertex = {i: u for u, i in G['_V2I'].items()}\n    \n    # Iterate over each vertex's adjacency list in _G\n    for index in range(len(G['_G'])):\n        current_vertex = index_to_vertex[index]\n        edges = G['_G'][index]\n        for edge in edges:\n            source, target, weight = edge\n            # For directed graphs, add edge in one direction\n            if G['is_directed']:\n                adj[current_vertex].append((target, weight))\n            # For undirected graphs, add edge in both directions\n            else:\n                adj[current_vertex].append((target, weight))\n                adj[target].append((source, weight))\n    \n    # Sort each neighbor list lexicographically by neighbor label\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    \n    return adj\n```"}
{"task_id": 296, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    arr = np.asarray(x)\n    if arr.dtype.kind == 'b':\n        return True\n    return ((arr == 0) | (arr == 1)).all()\n```"}
{"task_id": 298, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Process the corpus to count N-grams and (N-1)-grams\n    if N == 1:\n        # For unigrams, no padding; count all tokens\n        all_tokens = []\n        for sentence in corpus:\n            all_tokens.extend(sentence.split())\n        total_tokens = len(all_tokens)\n        ngram_counts = Counter(all_tokens)\n    else:\n        # For N > 1, pad sentences and count N-grams and (N-1)-grams\n        ngram_list = []\n        prefix_list = []\n        for sentence in corpus:\n            tokens = sentence.split()\n            padded = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n            # Collect all N-grams\n            for i in range(len(padded) - N + 1):\n                ngram = tuple(padded[i:i+N])\n                ngram_list.append(ngram)\n            # Collect all (N-1)-gram prefixes\n            for i in range(len(padded) - (N - 1) + 1):\n                prefix = tuple(padded[i:i+(N-1)])\n                prefix_list.append(prefix)\n        ngram_counts = Counter(ngram_list)\n        prefix_counts = Counter(prefix_list)\n\n    # Process the query: pad and generate N-grams\n    query_tokens = query.split()\n    if N == 1:\n        padded_query = query_tokens\n    else:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # Check if the query is too short to form any N-gram\n    if len(padded_query) < N:\n        return float('-inf')\n\n    # Generate all consecutive N-grams in the padded query\n    query_ngrams = [tuple(padded_query[i:i+N]) for i in range(len(padded_query) - N + 1)]\n\n    # Check for zero probabilities (unseen N-grams or prefixes)\n    if N == 1:\n        if total_tokens == 0:\n            return float('-inf')\n        for ngram in query_ngrams:\n            token = ngram[0]\n            if ngram_counts.get(token, 0) == 0:\n                return float('-inf')\n    else:\n        for ngram in query_ngrams:\n            prefix = ngram[:-1]\n            if prefix_counts.get(prefix, 0) == 0 or ngram_counts.get(ngram, 0) == 0:\n                return float('-inf')\n\n    # Calculate the total log probability\n    log_prob = 0.0\n    if N == 1:\n        for ngram in query_ngrams:\n            token = ngram[0]\n            prob = ngram_counts[token] / total_tokens\n            log_prob += math.log(prob)\n    else:\n        for ngram in query_ngrams:\n            prefix = ngram[:-1]\n            prob = ngram_counts[ngram] / prefix_counts[prefix]\n            log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```"}
{"task_id": 302, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    if k > n:\n        raise ValueError(\"k cannot be larger than the number of samples.\")\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = X[i] - X[j]\n                distance = np.linalg.norm(diff)\n                W[i, j] = 1.0 / (1.0 + distance)\n    \n    # Step 2: Compute the unnormalized graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]  # Projection matrix of shape (n, k)\n    \n    # Step 4: Run k-means on the rows of E with specified initialization\n    data = E\n    centroids = data[:k, :].copy()  # Initial centroids are first k rows of E\n    labels = np.zeros(n, dtype=int)\n    max_iterations = 100\n    \n    for _ in range(max_iterations):\n        # Assign each point to the nearest centroid\n        new_labels = np.zeros(n, dtype=int)\n        for i in range(n):\n            distances = np.linalg.norm(data[i] - centroids, axis=1)\n            new_labels[i] = np.argmin(distances)\n        \n        # Check for convergence\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels.copy()\n        \n        # Recompute centroids and handle empty clusters\n        cluster_sums = np.zeros((k, k))\n        cluster_counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            cluster = labels[i]\n            cluster_sums[cluster] += data[i]\n            cluster_counts[cluster] += 1\n        \n        new_centroids = np.zeros_like(centroids)\n        for cluster in range(k):\n            if cluster_counts[cluster] == 0:\n                # Reinitialize empty cluster with random row from E\n                new_centroids[cluster] = data[np.random.choice(n)]\n            else:\n                new_centroids[cluster] = cluster_sums[cluster] / cluster_counts[cluster]\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n```"}
{"task_id": 303, "completion_id": 0, "completion": "\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    lines = [\n        \"------------------------- DEBUG -------------------------\",\n        f\"Mine (prev) [{prev_label}]:\",\n        prev_mine,\n        \"\",\n        f\"Theirs (prev) [{prev_label}]:\",\n        golds[prev_label],\n        \"\",\n        f\"Mine [{curr_label}]:\",\n        curr_mine,\n        \"\",\n        f\"Theirs [{curr_label}]:\",\n        golds[curr_label] + warn_str,\n        \"----------------------- END DEBUG -----------------------\"\n    ]\n    \n    return '\\n'.join(lines)\n```"}
{"task_id": 304, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Handle intercept by adding a column of ones if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    K = X.shape[1]  # Number of features (including intercept if added)\n    \n    # Process prior mean mu\n    if np.isscalar(mu):\n        mu_vec = np.full(K, mu, dtype=np.float64)\n    else:\n        mu_vec = np.asarray(mu, dtype=np.float64)\n        if mu_vec.ndim != 1:\n            raise ValueError(\"mu must be a scalar or 1D array-like\")\n        if len(mu_vec) != K:\n            raise ValueError(f\"mu length {len(mu_vec)} does not match number of features {K}\")\n    \n    # Process prior covariance V\n    if V is None:\n        V_matrix = np.eye(K, dtype=np.float64)\n    elif np.isscalar(V):\n        V_matrix = V * np.eye(K, dtype=np.float64)\n    elif isinstance(V, (list, tuple)):\n        V_array = np.asarray(V, dtype=np.float64)\n        if V_array.ndim != 1:\n            raise ValueError(\"V list/tuple must be 1D\")\n        if len(V_array) != K:\n            raise ValueError(f\"V list/tuple length {len(V_array)} does not match number of features {K}\")\n        V_matrix = np.diag(V_array)\n    else:\n        V_matrix = np.asarray(V, dtype=np.float64)\n        if V_matrix.ndim != 2:\n            raise ValueError(\"V must be a scalar, list/tuple, 2D array, or None\")\n        if V_matrix.shape != (K, K):\n            raise ValueError(f\"V matrix shape {V_matrix.shape} does not match number of features {K}\")\n    \n    # Compute inverse of prior covariance V\n    V_inv = np.linalg.inv(V_matrix)\n    \n    # Compute X^T X and X^T y\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    # Compute posterior covariance components and mean\n    A = V_inv + XTX\n    Sigma_b = np.linalg.inv(A)\n    mu_b = Sigma_b @ (V_inv @ mu_vec + XTy)\n    \n    # Round to 4 decimal places and return as list\n    return [round(coefficient, 4) for coefficient in mu_b.tolist()]\n```"}
{"task_id": 308, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    # Set default max frequency to Nyquist if not provided\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Convert frequency limits from Hz to Mel\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n\n    # Generate n_filters + 2 equally spaced points on the Mel scale\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hz to get filter corner frequencies\n    corner_freqs = 700 * (10 ** (mel_points / 2595) - 1)\n\n    # Number of DFT bins (columns in the filterbank matrix)\n    num_bins = N // 2 + 1\n\n    # Initialize the filterbank matrix\n    filterbank = []\n\n    for i in range(n_filters):\n        # Get the three corners of the current triangular filter\n        f_left = corner_freqs[i]\n        f_center = corner_freqs[i + 1]\n        f_right = corner_freqs[i + 2]\n\n        # Calculate filter weights for each DFT bin\n        filter_row = []\n        for k in range(num_bins):\n            # Frequency of the k-th DFT bin\n            f_k = (k * fs) / N\n\n            # Determine weight based on position relative to filter corners\n            if f_k < f_left:\n                weight = 0.0\n            elif f_k <= f_center:\n                # Left slope of the triangle\n                weight = (f_k - f_left) / (f_center - f_left)\n            elif f_k <= f_right:\n                # Right slope of the triangle\n                weight = (f_right - f_k) / (f_right - f_center)\n            else:\n                weight = 0.0\n\n            filter_row.append(weight)\n\n        # Normalize the filter to have area 1 in Mel space if required\n        if normalize:\n            # Scaling factor is 2 divided by the Hz width of the filter\n            scale = 2.0 / (f_right - f_left)\n            filter_row = [w * scale for w in filter_row]\n\n        # Round each weight to 4 decimal places\n        filter_row_rounded = [round(weight, 4) for weight in filter_row]\n\n        filterbank.append(filter_row_rounded)\n\n    return filterbank\n```"}
{"task_id": 312, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    n = np.arange(window_len)\n    term1 = a1 * np.cos(2 * np.pi * n / N)\n    term2 = a2 * np.cos(4 * np.pi * n / N)\n    term3 = a3 * np.cos(6 * np.pi * n / N)\n    \n    window = a0 - term1 + term2 - term3\n    window_rounded = np.round(window, 4).tolist()\n    \n    return window_rounded\n```"}
{"task_id": 313, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        threshold = 6.0\n        if x < threshold:\n            sum_terms = 0.0\n            current_x = x\n            while current_x < threshold:\n                sum_terms += 1.0 / current_x\n                current_x += 1.0\n            log_x = math.log(current_x)\n            term1 = 1.0 / (2 * current_x)\n            term2 = 1.0 / (12 * (current_x ** 2))\n            term3 = 1.0 / (120 * (current_x ** 4))\n            term4 = 1.0 / (252 * (current_x ** 6))\n            expansion = log_x - term1 - term2 + term3 - term4\n            return expansion - sum_terms\n        else:\n            log_x = math.log(x)\n            term1 = 1.0 / (2 * x)\n            term2 = 1.0 / (12 * (x ** 2))\n            term3 = 1.0 / (120 * (x ** 4))\n            term4 = 1.0 / (252 * (x ** 6))\n            return log_x - term1 - term2 + term3 - term4\n\n    row = gamma[d]\n    gamma_dt = row[t]\n    sum_row = sum(row)\n\n    result = digamma(gamma_dt) - digamma(sum_row)\n    return round(result, 4)\n```"}
{"task_id": 317, "completion_id": 0, "completion": "\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Calculate the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous prediction, label, and corresponding gold\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    \n    # Extract current prediction, label, and corresponding gold\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n    \n    # Construct each part of the debug report\n    header = \"------------------------- DEBUG -------------------------\\n\"\n    \n    mine_prev_section = f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\"\n    theirs_prev_section = f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\"\n    \n    # Two blank lines after the previous section\n    blank_lines = \"\\n\\n\"\n    \n    mine_curr_section = f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\"\n    theirs_curr_section = f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n    \n    footer = \"----------------------- END DEBUG -----------------------\\n\"\n    \n    # Combine all parts to form the final report\n    return (header + mine_prev_section + theirs_prev_section + blank_lines +\n            mine_curr_section + theirs_curr_section + footer)\n```"}
{"task_id": 318, "completion_id": 0, "completion": "\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_j = 0\n        best_t = 0.0\n        best_p = 1\n\n        # Iterate over each feature to find the best stump\n        for j in range(n_features):\n            x_j = X_train[:, j]\n            sorted_indices = np.argsort(x_j)\n            sorted_x = x_j[sorted_indices]\n            sorted_y = y_train[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n\n            # Compute cumulative sums for positive and negative weights\n            cum_pos = np.zeros(n_samples + 1)\n            cum_neg = np.zeros(n_samples + 1)\n            for i in range(n_samples):\n                cum_pos[i+1] = cum_pos[i] + (sorted_weights[i] if sorted_y[i] == 1 else 0)\n                cum_neg[i+1] = cum_neg[i] + (sorted_weights[i] if sorted_y[i] == -1 else 0)\n            total_pos = cum_pos[-1]\n            total_neg = cum_neg[-1]\n\n            # Check all possible split points\n            for k in range(n_samples + 1):\n                error_p1 = cum_pos[k] + (total_neg - cum_neg[k])\n                error_p_neg1 = cum_neg[k] + (total_pos - cum_pos[k])\n                current_error = min(error_p1, error_p_neg1)\n\n                if current_error < best_error:\n                    best_error = current_error\n                    # Determine polarity\n                    if error_p1 < error_p_neg1:\n                        current_p = 1\n                    else:\n                        current_p = -1\n\n                    # Determine threshold t\n                    if k == 0:\n                        current_t = sorted_x[0] - 1.0 if n_samples > 0 else 0.0\n                    elif k == n_samples:\n                        current_t = sorted_x[-1] + 1.0 if n_samples > 0 else 0.0\n                    else:\n                        current_t = (sorted_x[k-1] + sorted_x[k]) / 2.0\n\n                    best_j = j\n                    best_t = current_t\n                    best_p = current_p\n\n        # Compute alpha\n        epsilon = best_error\n        if epsilon <= 0:\n            alpha = float('inf')\n        elif epsilon >= 0.5:\n            alpha = 0.0\n        else:\n            alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n\n        # Store the stump\n        stumps.append((best_j, best_t, best_p, alpha))\n\n        # Update sample weights\n        h = np.zeros(n_samples)\n        for i in range(n_samples):\n            x_val = X_train[i, best_j]\n            if x_val > best_t:\n                h_i = best_p * 1\n            else:\n                h_i = best_p * (-1)\n            h[i] = h_i\n\n        exp_term = -alpha * y_train * h\n        weights *= np.exp(exp_term)\n        weights_sum = np.sum(weights)\n        if weights_sum > 0:\n            weights /= weights_sum\n        else:\n            # If weights sum to zero, reset to uniform\n            weights = np.ones(n_samples) / n_samples\n\n    # Predict on test data\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (j, t, p, alpha) in stumps:\n            x_val = x[j]\n            if x_val > t:\n                h = p * 1\n            else:\n                h = p * (-1)\n            total += alpha * h\n        pred = 1 if total >= 0 else -1\n        predictions.append(pred)\n\n    return predictions\n```"}
{"task_id": 329, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    if positive_only:\n        m = (N // 2) + 1\n        delta_f = fs / N\n        freqs = [round(k * delta_f, 4) for k in range(m)]\n    else:\n        full_freqs = np.fftfreq(N, d=1/fs)\n        freqs = [round(f, 4) for f in full_freqs.tolist()]\n    \n    return freqs\n```"}
{"task_id": 331, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)  # Ensure mask is boolean\n    \n    squared_errors = []\n    \n    # Iterate over each sample\n    for i in range(y_true.shape[0]):\n        # Get the OOB mask for the current sample\n        sample_mask = oob_mask[i]\n        # Check if there are any OOB trees for this sample\n        if np.any(sample_mask):\n            # Extract OOB predictions for the sample\n            oob_preds = predictions[i, sample_mask]\n            # Compute the average OOB prediction\n            avg_pred = np.mean(oob_preds)\n            # Calculate squared error and add to the list\n            squared_error = (avg_pred - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n    \n    # Check if there are any valid squared errors\n    if not squared_errors:\n        return -1.0\n    else:\n        # Compute the mean squared error and round to 4 decimals\n        mse = np.mean(squared_errors)\n        return round(mse, 4)\n```"}
{"task_id": 332, "completion_id": 0, "completion": "\n\n```python\nfrom collections import Counter\n\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Calculate support for each item (count of distinct transactions containing the item)\n    item_supports = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)  # Remove duplicates within the transaction\n        item_supports.update(unique_items)\n    \n    # Step 2: Filter out items with support below the minimum threshold\n    frequent_items = {item: cnt for item, cnt in item_supports.items() if cnt >= min_support}\n    \n    # If no frequent items exist, return an empty root node\n    if not frequent_items:\n        return {\"support\": 0, \"children\": {}}\n    \n    # Step 3: Sort frequent items by descending support, then alphabetically to break ties\n    sorted_frequent_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Initialize the root node of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: Process each transaction to build the tree\n    for transaction in transactions:\n        # Remove duplicates in the current transaction and keep only frequent items\n        unique_items = set(transaction)\n        filtered_items = [item for item in unique_items if item in frequent_items]\n        \n        # Reorder the filtered items according to the global sorted order\n        filtered_items_sorted = sorted(filtered_items, key=lambda x: sorted_frequent_items.index(x))\n        \n        # Traverse the tree and update node supports\n        current_node = root\n        for item in filtered_items_sorted:\n            if item in current_node[\"children\"]:\n                # Increment support if the child node already exists\n                current_node[\"children\"][item][\"support\"] += 1\n            else:\n                # Create a new node with support 1 if the child does not exist\n                current_node[\"children\"][item] = {\"support\": 1, \"children\": {}}\n            # Move to the child node to process the next item in the transaction\n            current_node = current_node[\"children\"][item]\n    \n    return root\n```"}
{"task_id": 336, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Handle Y being None by setting Y = X\n    if Y is None:\n        Y = X\n\n    # Check if X is empty (N = 0)\n    if isinstance(X, list):\n        num_vectors_X = len(X)\n    else:  # X is a numpy array\n        num_vectors_X = X.shape[0]\n    if num_vectors_X == 0:\n        return []\n\n    # Convert X and Y to numpy arrays with float dtype, ensuring 2D structure\n    try:\n        x_arr = np.array(X, dtype=float)\n        if x_arr.ndim == 1:\n            x_arr = x_arr.reshape(1, -1)  # Convert 1D array to 2D (1, C)\n    except:\n        return -1  # Invalid input format for X\n\n    try:\n        y_arr = np.array(Y, dtype=float)\n        if y_arr.ndim == 1:\n            y_arr = y_arr.reshape(1, -1)  # Convert 1D array to 2D (1, C)\n    except:\n        return -1  # Invalid input format for Y\n\n    # Check if the number of columns (C) matches between X and Y\n    if x_arr.shape[1] != y_arr.shape[1]:\n        return -1\n\n    # Compute the kernel matrix: dot product of X and Y transpose, then add c0\n    kernel_matrix = x_arr @ y_arr.T + c0\n\n    # Round to 4 decimal places and convert to list of lists\n    return np.round(kernel_matrix, decimals=4).tolist()\n```"}
{"task_id": 340, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Check if gradient is exactly zero (all elements)\n    if (grad == 0).all():\n        # Parameter remains unchanged\n        theta_prime = param.copy()\n    else:\n        # Compute bias-corrected moment estimates\n        beta1_pow = beta1 ** t\n        beta2_pow = beta2 ** t\n        m_hat_t = m_t / (1 - beta1_pow)\n        v_hat_t = v_t / (1 - beta2_pow)\n        \n        # Compute parameter update\n        denominator = np.sqrt(v_hat_t) + eps\n        update = lr * (m_hat_t / denominator)\n        theta_prime = param - update\n    \n    # Round to 8 decimal places and convert to Python lists\n    updated_param = np.around(theta_prime, decimals=8).tolist()\n    new_m = np.around(m_t, decimals=8).tolist()\n    new_v = np.around(v_t, decimals=8).tolist()\n    \n    return (updated_param, new_m, new_v)\n```"}
{"task_id": 343, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    N = theta_samples.shape[0]\n    K = int(retain_prcnt * N)\n    \n    # Convert rewards to a numpy array for easier manipulation\n    rewards_np = np.asarray(rewards)\n    \n    # Get indices of rewards sorted in descending order\n    sorted_indices = np.argsort(rewards_np)[::-1]\n    \n    # Select the top K samples (elite)\n    elite_samples = theta_samples[sorted_indices[:K]]\n    \n    # Compute mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round to four decimal places and convert to lists\n    mean_rounded = [round(val, 4) for val in mean]\n    variance_rounded = [round(val, 4) for val in variance]\n    \n    return (mean_rounded, variance_rounded)\n```"}
{"task_id": 353, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_list = list(labels)\n    if not label_list:\n        return 0.0\n    counts = Counter(label_list)\n    if len(counts) == 1:\n        return 0.0\n    total = len(label_list)\n    entropy_val = 0.0\n    for count in counts.values():\n        p = count / total\n        entropy_val += p * math.log2(p)\n    entropy_val = -entropy_val\n    return round(entropy_val, 5)\n```"}
{"task_id": 354, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    # Extract dimensions from input and kernel\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Compute effective kernel size considering dilation\n    kernel_rows_eff = kernel_rows + (kernel_rows - 1) * dilation\n    kernel_cols_eff = kernel_cols + (kernel_cols - 1) * dilation\n\n    # Handle padding specifications\n    if isinstance(pad, str) and pad == 'same':\n        # Calculate padding for 'same' output size\n        pad_total_r = (in_rows - 1) * stride + kernel_rows_eff - in_rows\n        pad_total_c = (in_cols - 1) * stride + kernel_cols_eff - in_cols\n        pad_top = pad_total_r // 2\n        pad_bottom = pad_total_r - pad_top\n        pad_left = pad_total_c // 2\n        pad_right = pad_total_c - pad_left\n    elif isinstance(pad, int):\n        pad_top = pad_bottom = pad\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr, pc = pad\n            pad_top = pad_bottom = pr\n            pad_left = pad_right = pc\n        elif len(pad) == 4:\n            pad_top, pad_bottom, pad_left, pad_right = pad\n        else:\n            # Invalid tuple, default to 0 padding (undefined behavior per problem statement)\n            pad_top = pad_bottom = pad_left = pad_right = 0\n    else:\n        # Invalid padding, default to 0 (undefined behavior per problem statement)\n        pad_top = pad_bottom = pad_left = pad_right = 0\n\n    # Apply padding to input\n    X_padded = np.pad(\n        X,\n        pad_width=((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)),\n        mode='constant'\n    )\n\n    # Compute output spatial dimensions\n    in_rows_padded, in_cols_padded = X_padded.shape[1], X_padded.shape[2]\n    out_rows = (in_rows_padded - kernel_rows_eff) // stride + 1\n    out_cols = (in_cols_padded - kernel_cols_eff) // stride + 1\n\n    # Handle cases where output dimensions are non-positive\n    if out_rows <= 0 or out_cols <= 0:\n        return np.zeros((n_ex, 0, 0, out_ch)).tolist()\n\n    # Generate coordinates for im2col extraction\n    # Row coordinates: (out_rows, kernel_rows)\n    i = np.arange(out_rows)[:, None]  # (out_rows, 1)\n    a = np.arange(kernel_rows)  # (kernel_rows,)\n    row_coords = i * stride + a * (dilation + 1)\n\n    # Column coordinates: (out_cols, kernel_cols)\n    j = np.arange(out_cols)[:, None]  # (out_cols, 1)\n    b = np.arange(kernel_cols)  # (kernel_cols,)\n    col_coords = j * stride + b * (dilation + 1)\n\n    # Expand dimensions for broadcasting to (out_rows, out_cols, kernel_rows, kernel_cols)\n    rows = row_coords[:, None, :, None]  # (out_rows, 1, kernel_rows, 1)\n    cols = col_coords[None, :, None, :]  # (1, out_cols, 1, kernel_cols)\n\n    # Extract patches using advanced indexing\n    patches = X_padded[:, rows, cols, :]  # (n_ex, out_rows, out_cols, kernel_rows, kernel_cols, in_ch)\n\n    # Reshape patches to (n_ex, out_rows, out_cols, kernel_flat) where kernel_flat = kernel_rows*kernel_cols*in_ch\n    kernel_flat = kernel_rows * kernel_cols * in_ch\n    patches_reshaped = patches.reshape(n_ex, out_rows, out_cols, kernel_flat)\n\n    # Reshape to (n_ex * out_rows * out_cols, kernel_flat) for matrix multiplication\n    im2col_matrix = patches_reshaped.reshape(-1, kernel_flat)\n\n    # Flatten the kernel weights to (kernel_flat, out_ch)\n    W_flat = W.reshape(kernel_flat, out_ch)\n\n    # Perform matrix multiplication (GEMM)\n    result = im2col_matrix @ W_flat\n\n    # Reshape result to (n_ex, out_rows, out_cols, out_ch)\n    output = result.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    # Convert to Python list and return\n    return output.tolist()\n```"}
{"task_id": 355, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Mean centering\n    data_centered = data - np.mean(data, axis=0, keepdims=True)\n    n_samples, n_features = data.shape\n    n_components_kept = min(n_components, n_features)\n\n    # Step 2: Obtain eigenvectors based on solver\n    if solver == \"svd\":\n        # SVD on centered data\n        U, S, Vt = np.linalg.svd(data_centered, full_matrices=False)\n        eigenvectors = Vt.T  # Columns are principal directions\n        eigenvalues_squared = S ** 2\n        total_variance = np.sum(eigenvalues_squared)\n        explained_variance_ratio = eigenvalues_squared / total_variance\n    elif solver == \"eigen\":\n        # Eigen-decomposition of covariance matrix\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Reverse to get descending order\n        eigenvalues = eigenvalues[::-1]\n        eigenvectors = eigenvectors[:, ::-1]\n        total_variance = np.sum(eigenvalues)\n        explained_variance_ratio = eigenvalues / total_variance\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n\n    # Step 3: Retain first n_components\n    eigenvectors_retained = eigenvectors[:, :n_components_kept].copy()\n    explained_variance_ratio_retained = explained_variance_ratio[:n_components_kept]\n\n    # Step 4: Deterministic sign fix\n    for i in range(eigenvectors_retained.shape[1]):\n        vec = eigenvectors_retained[:, i]\n        non_zero_indices = np.nonzero(vec)[0]\n        if len(non_zero_indices) == 0:\n            continue  # All zeros (unlikely in PCA)\n        first_non_zero_idx = non_zero_indices[0]\n        if vec[first_non_zero_idx] < 0:\n            eigenvectors_retained[:, i] *= -1\n\n    # Step 5: Project data onto retained directions\n    scores = data_centered @ eigenvectors_retained\n\n    # Step 6: Round and convert to required output format\n    scores_rounded = np.round(scores, decimals=4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio_retained, decimals=4).tolist()\n\n    return (scores_rounded, explained_variance_ratio_rounded)\n```"}
{"task_id": 356, "completion_id": 0, "completion": "\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, find the index of the maximum probability\n        probabilities = leaf.value\n        max_prob = max(probabilities)\n        return probabilities.index(max_prob)\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n```"}
{"task_id": 357, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\"\"\"\n    # Handle the case where K is 1 separately\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        rounded_centroid = np.round(centroid, 4).tolist()\n        return [rounded_centroid]\n    \n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Compute squared distances from each point to each centroid (vectorized)\n        squared_distances = np.sum((data[:, np.newaxis] - centroids) ** 2, axis=2)\n        # Assign each point to the nearest centroid\n        cluster_assignments = np.argmin(squared_distances, axis=1)\n        \n        # Recompute centroids based on current assignments\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            cluster_points = data[cluster_assignments == k]\n            if len(cluster_points) == 0:\n                # If no points in cluster, keep the old centroid\n                new_centroids[k] = centroids[k]\n            else:\n                new_centroids[k] = np.mean(cluster_points, axis=0)\n        \n        # Check for convergence (if centroids haven't changed significantly)\n        if np.max(np.abs(centroids - new_centroids)) < 1e-6:\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically\n    # Use lexsort with reversed feature order for correct priority\n    sorted_indices = np.lexsort(centroids.T[::-1])\n    sorted_centroids = centroids[sorted_indices]\n    \n    # Round to four decimal places and convert to list of lists\n    rounded_centroids = np.round(sorted_centroids, 4)\n    return rounded_centroids.tolist()\n```"}
{"task_id": 362, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input data to a float NumPy array\n    data_array = np.asarray(data, dtype=float)\n    \n    # Calculate the sum of each row\n    row_sums = data_array.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by dividing by its sum\n    normalized_matrix = data_array / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places and convert to a Python list\n    return np.round(normalized_matrix, 4).tolist()\n```"}
{"task_id": 363, "completion_id": 0, "completion": "\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_space(space: Space, is_composite: bool) -> bool:\n        if not is_composite:\n            return isinstance(space, Box)\n        else:\n            if isinstance(space, Tuple):\n                sub_spaces = space.spaces\n            elif isinstance(space, Dict):\n                sub_spaces = space.spaces.values()\n            else:\n                return False\n            return all(isinstance(s, Box) for s in sub_spaces)\n    \n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Sum all tree updates element-wise\n    sum_updates = np.sum(updates, axis=0)\n    \n    # Compute the running prediction by scaling and subtracting the sum of updates\n    running_pred = -learning_rate * sum_updates\n    \n    if regression:\n        # Return rounded to 4 decimal places for regression\n        return np.round(running_pred, decimals=4)\n    else:\n        # Apply softmax row-wise for classification\n        exp_pred = np.exp(running_pred)\n        probabilities = exp_pred / exp_pred.sum(axis=1, keepdims=True)\n        \n        # Return class indices from argmax\n        return np.argmax(probabilities, axis=1)\n```"}
{"task_id": 371, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\"\"\"\n    # Extract dimensions from input arrays\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, W_in_channels, out_channels = W.shape\n\n    # Validate input compatibility\n    if in_channels != W_in_channels:\n        raise ValueError(f\"Input channels mismatch: X has {in_channels}, W has {W_in_channels}\")\n    if stride <= 0:\n        raise ValueError(f\"Stride must be positive, got {stride}\")\n    if dilation < 0:\n        raise ValueError(f\"Dilation must be non-negative, got {dilation}\")\n\n    # Calculate effective kernel size with dilation\n    K = kernel_width\n    D = dilation\n    K_eff = (K - 1) * (D + 1) + 1 if K > 0 else 0\n\n    # Determine padding (p_left, p_right)\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) != 2 or not all(isinstance(p, int) for p in pad):\n            raise ValueError(\"Pad must be a 2-tuple of integers\")\n        p_left, p_right = pad\n    elif pad == 'same':\n        l_in = signal_length\n        out_len_same = (l_in + stride - 1) // stride  # Equivalent to ceil(l_in / stride)\n        total_pad = max(0, (out_len_same - 1) * stride + K_eff - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid pad specification\")\n\n    # Pad the input signal\n    X_padded = np.pad(X, pad_width=((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    padded_length = signal_length + p_left + p_right\n\n    # Compute output length\n    output_length = (padded_length - K_eff) // stride + 1\n    if output_length < 0:\n        output_length = 0\n\n    # Initialize output array\n    output = np.zeros((n_examples, output_length, out_channels), dtype=X.dtype)\n\n    # Perform convolution\n    for n in range(n_examples):\n        x_padded = X_padded[n]  # (padded_length, in_channels)\n        for s_idx in range(output_length):\n            s = s_idx * stride  # Starting position in padded signal\n            # Extract dilated slice from padded signal\n            x_slice = x_padded[s:s + K_eff:(D + 1), :]  # (K, in_channels)\n            # Compute cross-correlation for each output channel\n            output[n, s_idx, :] = np.einsum('ki, kio -> o', x_slice, W)\n\n    return output.tolist()\n```"}
{"task_id": 373, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Handle empty input\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array for consistent handling\n    y_array = np.asarray(y)\n    \n    # Get unique classes and their counts\n    _, counts = np.unique(y_array, return_counts=True)\n    \n    # Total number of samples\n    N = y_array.size\n    \n    # Calculate sum of squared probabilities\n    sum_p_squared = np.sum((counts / N) ** 2)\n    \n    # Compute Gini impurity\n    gini_impurity = 1 - sum_p_squared\n    \n    # Round to 4 decimal places\n    return round(gini_impurity, 4)\n```"}
{"task_id": 374, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check for inconsistent input sizes or empty data\n    if X.shape[0] != y.shape[0] or X.shape[0] == 0:\n        return -1\n    # Ensure y is a 1D array\n    y = y.ravel()\n    m, n = X.shape  # m: number of samples, n: number of features\n    \n    # Initialize parameters: theta as zeros, bias as 0.0\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Batch gradient descent iterations\n    for _ in range(n_iterations):\n        # Compute predicted values\n        y_pred = X.dot(theta) + b\n        # Compute error (y_pred - y)\n        error = y_pred - y\n        \n        # Compute gradients\n        dw = (2 / m) * X.T.dot(error)\n        db = (2 / m) * np.sum(error)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round parameters to 4 decimal places\n    theta_rounded = [round(weight, 4) for weight in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Handle empty matrix (0x0 is considered symmetric)\n    if not X:\n        return True\n    \n    # Check all rows have the same length\n    num_rows = len(X)\n    num_cols = len(X[0])\n    for row in X:\n        if len(row) != num_cols:\n            return False\n    \n    # Check if the matrix is square\n    if num_rows != num_cols:\n        return False\n    \n    # Convert to numpy array and check symmetry using allclose with absolute tolerance\n    arr = np.array(X)\n    return np.allclose(arr, arr.T, atol=1e-8, rtol=0.0)\n```"}
{"task_id": 377, "completion_id": 0, "completion": "\n\n```python\nimport math\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Computes the negative gradient for the logistic loss in Gradient Boosting for binary classification.\"\"\"\n    # Check if the lengths of y and f are the same\n    if len(y) != len(f):\n        return -1\n    # Check if all elements in y are 0 or 1\n    for label in y:\n        if label not in (0, 1):\n            return -1\n    # Compute y' = 2y - 1 for each label\n    y_prime = [2 * yi - 1 for yi in y]\n    # Calculate the negative gradients\n    gradients = []\n    for i in range(len(y)):\n        yp = y_prime[i]\n        fi = f[i]\n        product = yp * fi\n        denominator = 1 + math.exp(product)\n        gradient = yp / denominator\n        # Round to four decimal places\n        gradients.append(round(gradient, 4))\n    return gradients\n```"}
{"task_id": 380, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    \u03b1 = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    if order not in (0, 1, 2):\n        raise ValueError(\"order must be 0, 1, or 2\")\n    \n    x_np = np.asarray(x)\n    \n    if order == 0:\n        # Compute SELU(x) = scale * ELU(x, \u03b1)\n        elu = np.where(x_np > 0, x_np, \u03b1 * (np.exp(x_np) - 1))\n        result = scale * elu\n    elif order == 1:\n        # First derivative: scale * 1 if x > 0 else scale * \u03b1 * exp(x)\n        result = scale * np.where(x_np > 0, 1, \u03b1 * np.exp(x_np))\n    else:  # order == 2\n        # Second derivative: 0 if x > 0 else scale * \u03b1 * exp(x)\n        result = np.where(x_np > 0, 0, scale * \u03b1 * np.exp(x_np))\n    \n    # Round to 4 decimal places\n    rounded_result = np.round(result, decimals=4)\n    \n    # Convert to Python list or scalar using tolist()\n    return rounded_result.tolist()\n```"}
{"task_id": 387, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    n_samples = len(x_np)\n    \n    # Initialize predictions with the mean of y\n    y_pred = np.full(n_samples, np.mean(y_np))\n    \n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        \n        # Check if all x values are identical (no valid split possible)\n        unique_x = np.unique(x_np)\n        if len(unique_x) < 2:\n            # Stump predicts the global mean of residuals\n            stump_pred = np.full(n_samples, np.mean(residuals))\n        else:\n            # Sort x and residuals to find optimal splits\n            sorted_indices = np.argsort(x_np)\n            sorted_x = x_np[sorted_indices]\n            sorted_res = residuals[sorted_indices]\n            \n            # Generate split points between consecutive unique x values\n            split_points = (unique_x[:-1] + unique_x[1:]) / 2\n            best_sse = np.inf\n            best_t = None\n            best_left_mean = 0.0\n            best_right_mean = 0.0\n            \n            for t in split_points:\n                # Find the split index in the sorted x array\n                split_idx = np.searchsorted(sorted_x, t, side='right')\n                left_res = sorted_res[:split_idx]\n                right_res = sorted_res[split_idx:]\n                \n                # Skip splits that don't divide the data\n                if len(left_res) == 0 or len(right_res) == 0:\n                    continue\n                \n                # Calculate means and sum of squared errors for this split\n                left_mean = np.mean(left_res)\n                right_mean = np.mean(right_res)\n                sse = np.sum((left_res - left_mean) ** 2) + np.sum((right_res - right_mean) ** 2)\n                \n                # Update best split if current is better\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n            \n            # If no valid split found, use global mean of residuals\n            if best_t is None:\n                stump_pred = np.full(n_samples, np.mean(residuals))\n            else:\n                # Create stump predictions based on the best split point\n                stump_pred = np.where(x_np <= best_t, best_left_mean, best_right_mean)\n        \n        # Update the predictions with the stump's output scaled by learning rate\n        y_pred += learning_rate * stump_pred\n    \n    # Round to 4 decimals and convert to list\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 394, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg with zeros if it's None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Compute the new running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * (grad ** 2)\n    \n    # Compute the denominator with epsilon for numerical stability\n    denominator = np.sqrt(Eg_next + 1e-8)\n    \n    # Compute the parameter update\n    update = (learning_rate * grad) / denominator\n    w_next = w - update\n    \n    # Round to 4 decimal places and convert to Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return (w_next_rounded, Eg_next_rounded)\n```"}
{"task_id": 398, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_array = np.asarray(x)\n    if not derivative:\n        activation = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n        result = np.round(activation, 4)\n    else:\n        derivative_vals = np.where(x_array >= 0, 1.0, alpha * np.exp(x_array))\n        result = np.round(derivative_vals, 4)\n    return result.tolist()\n```"}
{"task_id": 411, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n    \n    def process_list(lst):\n        # Determine if any element is an iterable (list, tuple, numpy array)\n        tuple_flag = any(isinstance(x, (list, tuple, np.ndarray)) for x in lst)\n        \n        # Determine the dimensionality of the list elements\n        first_elem = lst[0]\n        if isinstance(first_elem, (list, tuple, np.ndarray)):\n            dim = len(first_elem)\n        else:\n            dim = 1  # scalar is considered 1-dimensional\n        \n        multidim_flag = dim > 1\n        \n        # Collect values for each dimension across all elements\n        per_dim_values = []\n        for i in range(dim):\n            dim_values = []\n            for elem in lst:\n                if isinstance(elem, (list, tuple, np.ndarray)):\n                    val = elem[i]\n                else:\n                    val = elem if i == 0 else None  # scalars contribute only to dimension 0\n                dim_values.append(val)\n            per_dim_values.append(dim_values)\n        \n        # Calculate unique values and their counts per dimension\n        n_per_dim = []\n        ids_list = []\n        for dim_vals in per_dim_values:\n            unique_vals = sorted(set(dim_vals))\n            ids_list.append(unique_vals)\n            n_per_dim.append(len(unique_vals))\n        \n        # Check if any value is a non-integer float (continuous)\n        continuous = False\n        for dim_vals in per_dim_values:\n            for val in dim_vals:\n                if isinstance(val, float) and val != int(val):\n                    continuous = True\n                    break\n                if isinstance(val, np.floating) and val != val.astype(int):\n                    continuous = True\n                    break\n            if continuous:\n                break\n        \n        return tuple_flag, multidim_flag, continuous, n_per_dim, dim, ids_list\n    \n    # Process actions and observations using the helper function\n    (tuple_actions, multidim_actions, continuous_actions, \n     n_actions_per_dim, action_dim, action_ids) = process_list(actions)\n    \n    (tuple_observations, multidim_observations, continuous_observations, \n     n_obs_per_dim, obs_dim, obs_ids) = process_list(observations)\n    \n    # Construct and return the result dictionary\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'action_dim': action_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n```"}
{"task_id": 413, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    \n    class Node:\n        def __init__(self, is_leaf, value=None, feature=None, threshold=None, left=None, right=None):\n            self.is_leaf = is_leaf\n            self.value = value  # for leaf nodes\n            self.feature = feature  # for split nodes\n            self.threshold = threshold  # for split nodes\n            self.left = left  # left child (split node)\n            self.right = right  # right child (split node)\n    \n    def find_best_split(X, y):\n        n_samples, n_features = X.shape\n        if n_samples <= 1:\n            return None, None  # no split possible\n        \n        current_mse = np.var(y) * n_samples  # sum of squared errors\n        \n        best_mse = float('inf')\n        best_feature = None\n        best_threshold = None\n        \n        for feature in range(n_features):\n            x_vals = X[:, feature]\n            unique_vals = np.unique(x_vals)\n            \n            for threshold in unique_vals:\n                left_mask = x_vals <= threshold\n                right_mask = x_vals > threshold\n                n_left = np.sum(left_mask)\n                n_right = np.sum(right_mask)\n                \n                if n_left == 0 or n_right == 0:\n                    continue\n                \n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                mse_left = np.var(y_left) * n_left\n                mse_right = np.var(y_right) * n_right\n                total_mse = mse_left + mse_right\n                \n                if total_mse < best_mse:\n                    best_mse = total_mse\n                    best_feature = feature\n                    best_threshold = threshold\n        \n        if best_mse < current_mse:\n            return best_feature, best_threshold\n        else:\n            return None, None  # no better split\n    \n    def build_tree(X, y, current_depth):\n        # Check if leaf node\n        if current_depth >= max_depth:\n            return Node(is_leaf=True, value=np.mean(y))\n        \n        # Check if all y are the same\n        if len(np.unique(y)) == 1:\n            return Node(is_leaf=True, value=np.mean(y))\n        \n        # Find best split\n        best_feature, best_threshold = find_best_split(X, y)\n        \n        if best_feature is None:\n            return Node(is_leaf=True, value=np.mean(y))\n        \n        # Split the data\n        x_feature = X[:, best_feature]\n        left_mask = x_feature <= best_threshold\n        right_mask = x_feature > best_threshold\n        \n        # Check if split leads to empty subsets\n        if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n            return Node(is_leaf=True, value=np.mean(y))\n        \n        # Recursively build left and right subtrees\n        left_subtree = build_tree(X[left_mask], y[left_mask], current_depth + 1)\n        right_subtree = build_tree(X[right_mask], y[right_mask], current_depth + 1)\n        \n        return Node(is_leaf=False, feature=best_feature, threshold=best_threshold, left=left_subtree, right=right_subtree)\n    \n    def predict_tree(X, tree):\n        predictions = np.zeros(X.shape[0])\n        for i in range(X.shape[0]):\n            sample = X[i]\n            node = tree\n            while not node.is_leaf:\n                if sample[node.feature] <= node.threshold:\n                    node = node.left\n                else:\n                    node = node.right\n            predictions[i] = node.value\n        return predictions\n    \n    # Main logic starts here\n    \n    # Initial prediction\n    initial_pred = np.mean(y_train)\n    current_pred_train = np.full_like(y_train, initial_pred)\n    trees = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals (negative gradient)\n        residuals = y_train - current_pred_train\n        \n        # Build tree on residuals\n        tree = build_tree(X_train, residuals, current_depth=0)\n        trees.append(tree)\n        \n        # Update current prediction\n        tree_pred_train = predict_tree(X_train, tree)\n        current_pred_train += learning_rate * tree_pred_train\n    \n    # Predict on test set\n    test_pred = np.full(X_test.shape[0], initial_pred)\n    for tree in trees:\n        test_pred += learning_rate * predict_tree(X_test, tree)\n    \n    # Round to 4 decimals and convert to list\n    return [round(x, 4) for x in test_pred.tolist()]\n```"}
{"task_id": 416, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"Calculates the probability density function (PDF) values of a multivariate Gaussian distribution for given data points.\n    \n    Parameters:\n    X (np.ndarray): Data points to evaluate, with shape (n_samples, n_features) or (n_samples,) if 1D.\n    mean (np.ndarray): Mean vector of the distribution, with length n_features.\n    cov (np.ndarray): Covariance matrix of the distribution, with shape (n_features, n_features) (must be positive-definite).\n    \n    Returns:\n    list: List where each element is the PDF value for the corresponding data point in X, rounded to four decimal places.\n    \"\"\"\n    # Reshape X to 2D if it's 1-dimensional to maintain (n_samples, n_features) shape\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, d = X.shape  # d is the number of features (dimensionality)\n    \n    # Compute the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    \n    # Calculate the denominator term: sqrt((2\u03c0)^d * det(cov))\n    denominator = math.sqrt((2 * math.pi) ** d * det_cov)\n    \n    # Compute the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Initialize list to store the PDF values for each sample\n    pdf_values = []\n    \n    # Iterate over each data point in X\n    for x in X:\n        # Compute the difference between the data point and the mean\n        diff = x - mean\n        # Calculate the exponent term: -0.5 * (x - \u03bc)^T \u03a3^{-1} (x - \u03bc)\n        exponent = -0.5 * (diff @ inv_cov @ diff)\n        # Compute the PDF value\n        pdf = (1 / denominator) * math.exp(exponent)\n        # Round to four decimal places and append to the result list\n        pdf_values.append(round(pdf, 4))\n    \n    return pdf_values\n```"}
{"task_id": 419, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column to X and X_new if required\n    if fit_intercept:\n        X_augmented = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new_augmented = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    else:\n        X_augmented = X.copy()\n        X_new_augmented = X_new.copy()\n    \n    # Determine the number of parameters (D)\n    D = X_augmented.shape[1]\n    \n    # Process prior mean (mu)\n    if isinstance(mu, (float, int)):\n        mu_vec = np.full(D, mu, dtype=np.float64)\n    else:\n        mu_vec = np.asarray(mu, dtype=np.float64)\n        if mu_vec.shape != (D,):\n            raise ValueError(f\"mu must be a scalar or a vector of length {D}\")\n    \n    # Process prior covariance matrix (V)\n    if V is None:\n        V_matrix = np.eye(D, dtype=np.float64)\n    else:\n        V_arr = np.asarray(V)\n        if V_arr.ndim == 0:\n            V_matrix = V_arr.item() * np.eye(D, dtype=np.float64)\n        elif V_arr.ndim == 1:\n            if len(V_arr) != D:\n                raise ValueError(f\"1D V must have length {D}, got {len(V_arr)}\")\n            V_matrix = np.diag(V_arr).astype(np.float64)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (D, D):\n                raise ValueError(f\"2D V must have shape ({D}, {D}), got {V_arr.shape}\")\n            V_matrix = V_arr.astype(np.float64)\n        else:\n            raise ValueError(\"V must be None, scalar, 1D, or 2D array\")\n    \n    # Compute inverse of prior covariance matrix\n    V_inv = np.linalg.inv(V_matrix)\n    \n    # Compute X^T X and X^T y\n    XTX = X_augmented.T @ X_augmented\n    XTy = X_augmented.T @ y\n    \n    # Compute posterior parameters\n    A = V_inv + XTX\n    Sigma_p = np.linalg.inv(A)\n    mu_p = Sigma_p @ (V_inv @ mu_vec + XTy)\n    \n    # Calculate predictions and format output\n    predictions = X_new_augmented @ mu_p\n    return [round(pred, 4) for pred in predictions.tolist()]\n```"}
{"task_id": 423, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if the lengths of actual and predicted are the same\n    if len(actual) != len(predicted):\n        return -1\n    \n    n = len(actual)\n    # Check if the input lists are empty\n    if n == 0:\n        return -1\n    \n    # Check if all elements in actual and predicted are non-negative\n    if not (all(a >= 0 for a in actual) and all(p >= 0 for p in predicted)):\n        return -1\n    \n    # Compute the squared differences of the log(1 + x) terms\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    squared_diffs = (log_predicted - log_actual) ** 2\n    \n    # Calculate RMSLE\n    mean_squared_log_error = np.mean(squared_diffs)\n    rmsle = np.sqrt(mean_squared_log_error)\n    \n    # Round to four decimal places\n    return round(rmsle, 4)\n```"}
{"task_id": 428, "completion_id": 0, "completion": "\n\n```python\nimport math\n\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        denominator = window_len - 1\n    else:\n        denominator = window_len\n    \n    window = []\n    for n in range(window_len):\n        angle = 2 * math.pi * n / denominator\n        value = 0.5 - 0.5 * math.cos(angle)\n        window.append(round(value, 4))\n    \n    return window\n```"}
{"task_id": 433, "completion_id": 0, "completion": "\n\n```python\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Handle 2D convolutional kernel case\n        out_channels, in_channels, kernel_h, kernel_w = shape\n        receptive_field = kernel_h * kernel_w\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    else:\n        # Handle all other cases (dense, embedding, etc.)\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))\n```"}
{"task_id": 435, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert input data to numpy arrays of float type\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    m = X_np.shape[0]  # Number of samples\n    \n    # Initialize predictions with the mean of the target\n    mean_y = np.mean(y_np)\n    current_pred = np.full(m, mean_y)\n    \n    # Handle special cases where no boosting is performed\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in current_pred.tolist()]\n    \n    # Iterate for the specified number of estimators\n    for _ in range(n_estimators):\n        # Compute residuals as the difference between true and current predictions\n        residuals = y_np - current_pred\n        \n        # Augment features with a column of ones to fit an intercept term\n        X_augmented = np.hstack([np.ones((m, 1)), X_np])\n        \n        # Fit ordinary least squares linear regression to predict residuals\n        coefficients, _, _, _ = np.linalg.lstsq(X_augmented, residuals, rcond=None)\n        \n        # Predict residuals using the fitted model (weak learner's prediction)\n        h_t_X = X_augmented @ coefficients\n        \n        # Update the overall prediction with the weak learner's output scaled by learning rate\n        current_pred += learning_rate * h_t_X\n    \n    # Round predictions to 4 decimal places and convert to a Python list\n    return [round(val, 4) for val in current_pred.tolist()]\n```"}
{"task_id": 437, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    \n    x_arr = np.asarray(x)\n    sigma = 1 / (1 + np.exp(-x_arr))\n    \n    if order == 0:\n        res = sigma\n    elif order == 1:\n        res = sigma * (1 - sigma)\n    else:  # order == 2\n        res = sigma * (1 - sigma) * (1 - 2 * sigma)\n    \n    rounded = np.round(res, 4)\n    \n    if isinstance(x, (int, float)):\n        return float(rounded.item())\n    else:\n        return rounded.tolist()\n```"}
{"task_id": 438, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required or input is invalid.\n    \"\"\"\n    try:\n        # Convert input to a 1-D numpy array of integers\n        y_array = np.asarray(y, dtype=int)\n    except (TypeError, ValueError):\n        # Handle cases where conversion to int is not possible (e.g., non-integer elements)\n        return -1\n\n    # Check if the input is 1-dimensional\n    if y_array.ndim != 1:\n        return -1\n\n    # Check for negative class indices\n    if (y_array < 0).any():\n        return -1\n\n    # Handle empty input\n    if y_array.size == 0:\n        return []\n\n    # Calculate the maximum class index and required number of classes\n    max_y = y_array.max()\n    required_classes = max_y + 1\n\n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = required_classes\n    else:\n        # Validate num_classes is a non-negative integer\n        if not isinstance(num_classes, int) or num_classes < 0:\n            return -1\n        # Check if num_classes is sufficient\n        if num_classes < required_classes:\n            return -1\n\n    # Create the one-hot encoding matrix\n    n_samples = y_array.size\n    one_hot = np.zeros((n_samples, num_classes), dtype=int)\n    one_hot[np.arange(n_samples), y_array] = 1\n\n    # Convert to a list of lists and return\n    return one_hot.tolist()\n```"}
{"task_id": 439, "completion_id": 0, "completion": "\n\n```python\nimport itertools\nfrom typing import Hashable\n\n\ndef apriori_frequent_itemsets(transactions: list[list[Hashable]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not transactions:\n        return []\n    \n    total_trans = len(transactions)\n    min_sup_count = min_sup * total_trans\n    trans_sets = [set(t) for t in transactions]  # Precompute transaction sets for support checks\n    \n    # Step 1: Generate L1 (frequent 1-itemsets)\n    item_counts = {}\n    for t_set in trans_sets:\n        for item in t_set:\n            itemset = (item,)\n            item_counts[itemset] = item_counts.get(itemset, 0) + 1\n    \n    L = []\n    L1 = [itemset for itemset, cnt in item_counts.items() if cnt >= min_sup_count]\n    L1.sort()  # Sort lexicographically\n    if not L1:\n        return []\n    L = L1.copy()\n    \n    current_L = L1\n    k = 2\n    \n    while True:\n        # Generate candidate k-itemsets (Ck) by joining Lk-1\n        Ck = []\n        len_prev = len(current_L)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                l1 = current_L[i]\n                l2 = current_L[j]\n                # Join condition: first k-2 items are the same\n                if l1[:-1] == l2[:-1]:\n                    candidate = l1 + (l2[-1],)\n                    Ck.append(candidate)\n        \n        # Prune Ck: remove candidates with any (k-1)-subset not in current_L\n        current_L_set = set(current_L)\n        pruned_Ck = []\n        for candidate in Ck:\n            # Generate all (k-1)-subsets of the candidate\n            all_subsets_valid = True\n            for i in range(len(candidate)):\n                subset = candidate[:i] + candidate[i+1:]\n                if subset not in current_L_set:\n                    all_subsets_valid = False\n                    break\n            if all_subsets_valid:\n                pruned_Ck.append(candidate)\n        \n        if not pruned_Ck:\n            break  # No candidates left to process\n        \n        # Count support for each candidate in pruned_Ck\n        candidate_counts = {}\n        for candidate in pruned_Ck:\n            cnt = 0\n            for t_set in trans_sets:\n                if all(item in t_set for item in candidate):\n                    cnt += 1\n            candidate_counts[candidate] = cnt\n        \n        # Generate Lk from pruned_Ck\n        Lk = [candidate for candidate, cnt in candidate_counts.items() if cnt >= min_sup_count]\n        Lk.sort()  # Sort lexicographically\n        \n        if not Lk:\n            break\n        \n        # Add Lk to the list of frequent itemsets\n        L.extend(Lk)\n        \n        # Prepare for next iteration\n        current_L = Lk\n        k += 1\n    \n    return L\n```"}
{"task_id": 440, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for efficient computation\n    pred_array = np.array(predictions)\n    \n    # Step 1: Average probabilities over all estimators for each sample\n    avg_probs = np.mean(pred_array, axis=0)\n    \n    # Step 2: Round the averaged probabilities to 4 decimal places\n    rounded_probs = np.around(avg_probs, decimals=4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    rounded_list = rounded_probs.tolist()\n    \n    # Step 3: Determine the predicted class for each sample by argmax\n    # (np.argmax returns the first occurrence of the maximum value, handling ties by selecting the smallest index)\n    predicted_classes = np.argmax(rounded_probs, axis=1).tolist()\n    \n    return (rounded_list, predicted_classes)\n```"}
{"task_id": 444, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Handle Y being None by setting Y to X\n    if Y is None:\n        Y = X\n    \n    # Check feature dimensions of X and Y\n    # Determine the feature dimension C of X\n    N = len(X)\n    if N == 0:\n        C = 0\n    else:\n        C = len(X[0])\n        # Check all vectors in X have length C\n        for x in X:\n            if len(x) != C:\n                return -1\n    \n    # Determine the feature dimension D of Y\n    M = len(Y)\n    if M == 0:\n        D = 0\n    else:\n        D = len(Y[0])\n        # Check all vectors in Y have length D\n        for y in Y:\n            if len(y) != D:\n                return -1\n    \n    # Check if feature dimensions of X and Y match\n    if C != D:\n        return -1\n    \n    # Validate and process sigma parameter\n    if sigma is None:\n        if C == 0:\n            return -1  # sigma would be zero which is invalid\n        sigma_val = np.sqrt(C / 2)\n        sigma_array = np.full(C, sigma_val, dtype=float)\n    else:\n        if isinstance(sigma, list):\n            # Check sigma list length matches feature dimension\n            if len(sigma) != C:\n                return -1\n            # Check all elements in sigma are positive\n            for s in sigma:\n                if not (isinstance(s, (int, float)) and s > 0):\n                    return -1\n            sigma_array = np.array(sigma, dtype=float)\n        else:  # sigma is a single scalar\n            if not (isinstance(sigma, (int, float)) and sigma > 0):\n                return -1\n            sigma_array = np.full(C, sigma, dtype=float)\n    \n    # Convert X and Y to numpy arrays for computation\n    X_np = np.array(X, dtype=float)\n    Y_np = np.array(Y, dtype=float)\n    \n    # Scale features by 1/sigma\n    X_scaled = X_np / sigma_array\n    Y_scaled = Y_np / sigma_array\n    \n    # Compute squared distances using matrix operations\n    X_sq = (X_scaled ** 2).sum(axis=1)  # Shape (N,)\n    Y_sq = (Y_scaled ** 2).sum(axis=1)  # Shape (M,)\n    \n    # Compute pairwise squared distances (N, M)\n    dist_sq = X_sq[:, np.newaxis] + Y_sq - 2 * (X_scaled @ Y_scaled.T)\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * dist_sq)\n    \n    # Round to 4 decimal places and convert to nested list\n    kernel_rounded = np.round(kernel_matrix, 4)\n    return kernel_rounded.tolist()\n```"}
{"task_id": 446, "completion_id": 0, "completion": "\n\nTo solve this problem, we need to find the best single-level split (decision stump) for a given dataset using information gain as the criterion. The decision stump is defined by a feature index and a threshold, which splits the data into two subsets. The goal is to maximize the information gain, which is the reduction in entropy from the parent node to the child nodes.\n\n### Approach\n1. **Entropy Calculation**: Compute the entropy of the parent node (entire dataset) using the Shannon entropy formula. Entropy measures the impurity or randomness in the data.\n2. **Majority Label Calculation**: Determine the majority label for a given set of labels, which is the most frequent label. In case of a tie, the smallest label value is chosen.\n3. **Feature and Threshold Evaluation**: For each feature, compute potential thresholds as midpoints between successive distinct values in the feature. For each threshold, split the data into left and right subsets and compute the entropy of these subsets.\n4. **Information Gain Calculation**: For each split, compute the information gain, which is the difference between the parent entropy and the weighted average of the child entropies.\n5. **Best Split Selection**: Track the split with the highest information gain. In case of ties, select the smallest feature index, and if the feature index is the same, select the smallest threshold.\n6. **Handling No Gain Scenario**: If no split increases the information gain, return a tuple indicating no split with the majority label of the entire dataset.\n\n### Solution Code\n```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=int)\n    n_samples, n_features = X.shape\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probs = counts / len(labels)\n        probs = probs[probs > 0]  # Avoid log2(0)\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels):\n        if len(labels) == 0:\n            return None  # Should not occur in valid splits\n        counts = np.bincount(labels)\n        max_count = np.max(counts)\n        candidates = np.where(counts == max_count)[0]\n        return np.min(candidates)  # Tie-break by smallest label\n\n    H_parent = entropy(y)\n\n    # Check if all labels are the same (entropy is 0)\n    if H_parent == 0:\n        maj = majority_label(y)\n        return (-1, None, maj, maj)\n\n    max_gain = -np.inf\n    best_j = -1\n    best_t = None\n    best_left_maj = None\n    best_right_maj = None\n\n    for j in range(n_features):\n        X_j = X[:, j]\n        unique_vals = np.unique(X_j)\n        if len(unique_vals) < 2:\n            continue  # No possible thresholds for this feature\n        midpoints = (unique_vals[:-1] + unique_vals[1:]) / 2\n        # Iterate through midpoints in ascending order\n        for t in midpoints:\n            mask_left = X_j <= t\n            left_labels = y[mask_left]\n            right_labels = y[~mask_left]\n            # Skip splits where a child is empty\n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            # Calculate entropies and gain\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n            # Determine majority labels for children\n            left_maj = majority_label(left_labels)\n            right_maj = majority_label(right_labels)\n            # Update best split if current gain is better or ties are broken\n            if gain > max_gain:\n                max_gain = gain\n                best_j = j\n                best_t = t\n                best_left_maj = left_maj\n                best_right_maj = right_maj\n            elif gain == max_gain:\n                if j < best_j:\n                    best_j = j\n                    best_t = t\n                    best_left_maj = left_maj\n                    best_right_maj = right_maj\n                elif j == best_j:\n                    if t < best_t:\n                        best_t = t\n                        best_left_maj = left_maj\n                        best_right_maj = right_maj\n\n    # Check if no split provides positive gain\n    if max_gain <= 0:\n        maj = majority_label(y)\n        return (-1, None, maj, maj)\n    else:\n        # Round threshold to 4 decimal places\n        best_t_rounded = round(best_t, 4)\n        return (best_j, best_t_rounded, best_left_maj, best_right_maj)\n```\n\n### Explanation\n1. **Entropy Calculation**: The `entropy` function computes the Shannon entropy of a set of labels, which measures the impurity of the set.\n2. **Majority Label**: The `majority_label` function determines the most frequent label in a set, with ties broken by selecting the smallest label.\n3. **Feature Evaluation**: For each feature, we compute midpoints between successive distinct values as potential thresholds. Each threshold is evaluated by splitting the data and computing the information gain.\n4. **Information Gain**: For each split, the information gain is calculated as the reduction in entropy from the parent to the child nodes. The best split is tracked based on the highest gain, with ties resolved by feature index and threshold.\n5. **No Gain Handling**: If no split improves the information gain, the function returns a tuple indicating no split with the majority label of the entire dataset."}
{"task_id": 452, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom typing import List\n\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a list of lists, ensuring each sample is a Python list\n    data = []\n    if isinstance(X, np.ndarray):\n        data = X.tolist()  # Converts 2D ndarray to list of lists\n    else:\n        # Process each sample in the list to ensure it's a Python list\n        for sample in X:\n            if isinstance(sample, np.ndarray):\n                data.append(sample.tolist())\n            else:\n                data.append(sample)  # Assume sample is already a list\n\n    subset1 = []\n    subset2 = []\n    is_numeric = isinstance(threshold, (int, float))\n\n    for sample in data:\n        feature_value = sample[feature_i]\n        if is_numeric:\n            if feature_value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        else:\n            if feature_value == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n\n    return [subset1, subset2]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\"\"\"\n    # Check if gamma is within valid range\n    if not (0 <= gamma <= 1):\n        return -1\n    \n    # Check if Q and Q_next are 2D arrays with the same shape\n    if Q.ndim != 2 or Q_next.ndim != 2 or Q.shape != Q_next.shape:\n        return -1\n    \n    batch_size, n_actions = Q.shape\n    \n    # Check if actions, rewards, and dones have correct length\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    \n    # Check if all actions are valid indices\n    for action in actions:\n        if action < 0 or action >= n_actions:\n            return -1\n    \n    # Create a copy of Q to modify\n    y = Q.copy()\n    \n    # Compute targets for each sample in the batch\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            next_max = np.max(Q_next[i])\n            target = rewards[i] + gamma * next_max\n        # Update the corresponding action's Q-value\n        y[i, actions[i]] = target\n    \n    # Round to 4 decimal places and convert to list of lists\n    y_rounded = np.round(y, decimals=4)\n    return y_rounded.tolist()\n```"}
{"task_id": 458, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a list for uniform processing\n    if isinstance(labels, np.ndarray):\n        labels_list = labels.tolist()\n    else:\n        labels_list = list(labels)\n    \n    # Check for empty input\n    if not labels_list:\n        return -1\n    \n    # Validate all labels are non-negative integers\n    for label in labels_list:\n        if not (isinstance(label, (int, np.integer)) and label >= 0):\n            return -1\n    \n    # Compute maximum label value\n    max_label = max(labels_list)\n    \n    # Determine num_classes (infer if not provided)\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        # Check if provided num_classes is insufficient\n        if num_classes < max_label + 1:\n            return -1\n    \n    # Generate one-hot encoded matrix\n    one_hot = []\n    for label in labels_list:\n        # Ensure label is Python int (handles numpy integers)\n        int_label = int(label)\n        row = [0] * num_classes\n        row[int_label] = 1\n        one_hot.append(row)\n    \n    return one_hot\n```"}
{"task_id": 461, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x_np = np.array(x)\n    y_np = np.array(y)\n    n = len(x_np)\n    \n    if n_estimators <= 0:\n        mean_y = np.mean(y_np)\n        return np.round([mean_y] * n, 4).tolist()\n    \n    # Initial prediction is the mean of y\n    y_hat = np.full(n, np.mean(y_np))\n    \n    for _ in range(n_estimators):\n        residuals = y_np - y_hat\n        \n        # Early stopping if residuals are all zero\n        if np.all(residuals == 0):\n            break\n        \n        unique_x = np.unique(x_np)\n        if len(unique_x) == 1:\n            # All x are the same, use mean of residuals for stump prediction\n            stump_pred = np.full(n, np.mean(residuals))\n        else:\n            possible_ts = unique_x[:-1]  # Exclude the greatest unique x\n            best_sse = np.inf\n            best_t = None\n            best_vL = None\n            best_vR = None\n            \n            for t in possible_ts:\n                left_mask = x_np <= t\n                right_mask = x_np > t\n                \n                # Skip split if either side is empty\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n                \n                r_left = residuals[left_mask]\n                r_right = residuals[right_mask]\n                \n                vL = np.mean(r_left)\n                vR = np.mean(r_right)\n                \n                sse = np.sum((r_left - vL) ** 2) + np.sum((r_right - vR) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_vL = vL\n                    best_vR = vR\n            \n            if best_t is None:\n                # No valid splits found, use mean of residuals\n                stump_pred = np.full(n, np.mean(residuals))\n            else:\n                # Create stump prediction based on best split\n                stump_pred = np.where(x_np <= best_t, best_vL, best_vR)\n        \n        # Update the ensemble prediction\n        y_hat += learning_rate * stump_pred\n    \n    # Round to 4 decimals and convert to list\n    return np.round(y_hat, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "\n\n```python\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Create a copy of the Q-table to avoid modifying the original\n    q_updated = [row.copy() for row in q_table]\n    num_actions = len(q_updated[0])  # Number of actions (columns in Q-table)\n    \n    # Current Q-value for the (state, action) pair\n    current_q = q_updated[state][action]\n    \n    # Calculate the TD target\n    if next_state is None:\n        target = reward\n    else:\n        # Get Q-values for the next state\n        q_next = q_updated[next_state]\n        # Find the greedy action (first action with maximum Q-value)\n        max_q = max(q_next)\n        greedy_action = q_next.index(max_q)  # First occurrence of max Q-value\n        \n        # Probabilities for \u03b5-soft policy\n        prob_greedy = (1 - epsilon) + epsilon / num_actions\n        prob_non_greedy = epsilon / num_actions\n        \n        # Compute the expected value of the next state under \u03b5-soft policy\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += q_next[a] * prob_greedy\n            else:\n                expected_value += q_next[a] * prob_non_greedy\n        \n        # Calculate the target\n        target = reward + gamma * expected_value\n    \n    # Update the Q-value for (state, action)\n    td_error = target - current_q\n    q_updated[state][action] = current_q + lr * td_error\n    \n    # Round all entries to four decimal places\n    for s in range(len(q_updated)):\n        for a in range(num_actions):\n            q_updated[s][a] = round(q_updated[s][a], 4)\n    \n    return q_updated\n```"}
{"task_id": 474, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport random\n\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    \n    for i in range(m):\n        # Calculate x range parameters\n        floor_i_over_2 = i // 2\n        x_low = (floor_i_over_2 + 0.1) * 10\n        x_high = (floor_i_over_2 + 0.9) * 10\n        \n        # Calculate y range parameters\n        mod_2 = i % 2\n        y_low = (mod_2 * interval + 0.1) * 10\n        y_high = (mod_2 * interval + 0.9) * 10\n        \n        # Determine class label\n        label = (i - 0.5) * 2\n        \n        # Generate training data for current class\n        x_train_samples = [random.uniform(x_low, x_high) for _ in range(n_train)]\n        x_train_rounded = [round(x, 4) for x in x_train_samples]\n        y_train_samples = [random.uniform(y_low, y_high) for _ in range(n_train)]\n        y_train_rounded = [round(y, 4) for y in y_train_samples]\n        X_train_class = np.array(list(zip(x_train_rounded, y_train_rounded)))\n        Y_train_class = np.full(n_train, label)\n        \n        X_train.append(X_train_class)\n        Y_train.append(Y_train_class)\n        \n        # Generate validation data for current class\n        x_val_samples = [random.uniform(x_low, x_high) for _ in range(n_val)]\n        x_val_rounded = [round(x, 4) for x in x_val_samples]\n        y_val_samples = [random.uniform(y_low, y_high) for _ in range(n_val)]\n        y_val_rounded = [round(y, 4) for y in y_val_samples]\n        X_val_class = np.array(list(zip(x_val_rounded, y_val_rounded)))\n        Y_val_class = np.full(n_val, label)\n        \n        X_val.append(X_val_class)\n        Y_val.append(Y_val_class)\n    \n    # Concatenate all class data into final arrays\n    X_train = np.concatenate(X_train, axis=0)\n    Y_train = np.concatenate(Y_train, axis=0)\n    X_val = np.concatenate(X_val, axis=0)\n    Y_val = np.concatenate(Y_val, axis=0)\n    \n    return X_train, X_val, Y_train, Y_val\n```"}
{"task_id": 475, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Handle None for previous moments by initializing with zeros\n    m_prev = np.zeros_like(grad) if m_prev is None else m_prev\n    v_prev = np.zeros_like(grad) if v_prev is None else v_prev\n\n    # Update first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    # Apply bias correction\n    denominator_m = 1 - (b1 ** t)\n    denominator_v = 1 - (b2 ** t)\n    m_hat = m_t / denominator_m\n    v_hat = v_t / denominator_v\n\n    # Compute parameter update\n    denominator = np.sqrt(v_hat) + eps\n    update = learning_rate * m_hat / denominator\n    w_new = w - update\n\n    return (w_new, m_t, v_t)\n```"}
{"task_id": 479, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Determine the number of arms\n    if not rewards:\n        return []\n    num_arms = len(rewards[0])\n    \n    # Initialize estimated values and pull counters\n    estimates = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n    \n    for time_step in rewards:\n        # Choose arm based on epsilon-greedy strategy\n        if np.random.rand() < epsilon:\n            # Explore: select random arm\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            # Exploit: select arm with highest current estimate (first max on tie)\n            chosen_arm = np.argmax(estimates)\n        \n        # Update pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        current_count = pull_counts[chosen_arm]\n        \n        # Get the observed reward\n        reward = time_step[chosen_arm]\n        \n        # Update the estimated value using incremental sample mean\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / current_count\n    \n    # Round each estimate to 4 decimal places\n    return [round(est, 4) for est in estimates]\n```"}
{"task_id": 481, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    \n    n = data.shape[0]\n    labels = [-1] * n\n    cluster_id = 0\n    \n    # Precompute neighbors for each point\n    neighbors = []\n    for i in range(n):\n        # Compute Euclidean distance between data[i] and all points\n        distances = np.linalg.norm(data - data[i], axis=1)\n        # Find indices where distance <= eps\n        neighbors_i = [j for j in range(n) if distances[j] <= eps]\n        neighbors.append(neighbors_i)\n    \n    for i in range(n):\n        if labels[i] != -1:\n            continue  # Already in a cluster or noise\n        \n        # Check if current point is a core point\n        if len(neighbors[i]) >= min_samples:\n            # Assign cluster_id to current point\n            labels[i] = cluster_id\n            # BFS to find all reachable points\n            queue = neighbors[i].copy()\n            \n            while queue:\n                j = queue.pop(0)  # Dequeue\n                if labels[j] != -1:\n                    continue  # Already processed\n                \n                # Assign to current cluster\n                labels[j] = cluster_id\n                \n                # If j is a core point, add its neighbors to the queue\n                if len(neighbors[j]) >= min_samples:\n                    queue.extend(neighbors[j])\n            \n            # Move to next cluster\n            cluster_id += 1\n    \n    return labels\n```"}
{"task_id": 482, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If `y` contains negative labels, or if `num_classes` is\n            specified and `y` contains labels >= `num_classes`.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError(\"y must be a 1-D array.\")\n    if np.any(y < 0):\n        raise ValueError(\"y contains negative labels.\")\n    \n    if num_classes is None:\n        if y.size == 0:\n            num_classes = 0\n        else:\n            num_classes = y.max() + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes < 0:\n            raise ValueError(\"num_classes must be a non-negative integer.\")\n        if y.size > 0 and (y >= num_classes).any():\n            raise ValueError(f\"y contains labels >= num_classes ({num_classes}).\")\n    \n    n = y.size\n    if num_classes == 0:\n        return np.zeros((n, 0), dtype=int)\n    \n    one_hot = np.zeros((n, num_classes), dtype=int)\n    one_hot[np.arange(n), y] = 1\n    return one_hot\n```"}
{"task_id": 485, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\"\"\"\n    if not X_train:\n        return []\n    \n    # Combine and sort training data by the feature value\n    sorted_pairs = sorted(zip(X_train, y_train), key=lambda p: p[0])\n    sorted_X = [p[0] for p in sorted_pairs]\n    sorted_y = [p[1] for p in sorted_pairs]\n    \n    def build_tree(X: list[float], y: list[float], current_depth: int) -> dict:\n        \"\"\"Recursively builds the regression tree.\"\"\"\n        # Stop recursion if max depth is reached or not enough samples to split\n        if current_depth == max_depth or len(X) < 2:\n            return {'prediction': np.mean(y)}\n        \n        best_sse = float('inf')\n        best_split_val = None\n        best_left_X, best_left_y = [], []\n        best_right_X, best_right_y = [], []\n        \n        # Check all possible split points between consecutive sorted X values\n        for i in range(len(X) - 1):\n            split_val = (X[i] + X[i+1]) / 2  # Midpoint as split candidate\n            \n            # Split data into left (<= split_val) and right (> split_val)\n            left_X, left_y = X[:i+1], y[:i+1]\n            right_X, right_y = X[i+1:], y[i+1:]\n            \n            # Skip splits that result in empty children (shouldn't occur with sorted data)\n            if not left_y or not right_y:\n                continue\n            \n            # Calculate SSE for left and right partitions\n            mean_left = np.mean(left_y)\n            sse_left = sum((yy - mean_left) ** 2 for yy in left_y)\n            mean_right = np.mean(right_y)\n            sse_right = sum((yy - mean_right) ** 2 for yy in right_y)\n            total_sse = sse_left + sse_right\n            \n            # Update best split if current split is better\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split_val = split_val\n                best_left_X, best_left_y = left_X, left_y\n                best_right_X, best_right_y = right_X, right_y\n        \n        # If no valid split found (e.g., all X values are identical), return leaf node\n        if best_split_val is None:\n            return {'prediction': np.mean(y)}\n        \n        # Recursively build left and right subtrees\n        left_subtree = build_tree(best_left_X, best_left_y, current_depth + 1)\n        right_subtree = build_tree(best_right_X, best_right_y, current_depth + 1)\n        \n        return {\n            'split_val': best_split_val,\n            'left': left_subtree,\n            'right': right_subtree\n        }\n    \n    # Build the tree starting from the root (depth 0)\n    root = build_tree(sorted_X, sorted_y, 0)\n    \n    # Predict function to traverse the tree for a single instance\n    def predict(x: float) -> float:\n        node = root\n        while 'prediction' not in node:  # Traverse until leaf node is found\n            if x <= node['split_val']:\n                node = node['left']\n            else:\n                node = node['right']\n        return node['prediction']\n    \n    # Generate predictions for all test points\n    return [predict(x) for x in X_test]\n```"}
{"task_id": 490, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array for uniform handling\n    x_array = np.asarray(x)\n    \n    # Check if the input is empty\n    if x_array.size == 0:\n        return []\n    \n    # Create the diagonal matrix using NumPy's diag function\n    diagonal_matrix = np.diag(x_array)\n    \n    # Convert the NumPy array to a list of lists and return\n    return diagonal_matrix.tolist()\n```"}
{"task_id": 492, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\"\"\"\n    if degree < 0:\n        return -1\n    if not X:\n        return []\n    # Determine the number of features (m)\n    m = len(X[0]) if X else 0\n    result = []\n    for sample in X:\n        row = [1.0]  # Start with the degree-0 term (1)\n        for k in range(1, degree + 1):\n            # Generate all combinations with replacement of length k\n            for indices in combinations_with_replacement(range(m), k):\n                product = 1.0\n                for idx in indices:\n                    product *= sample[idx]\n                row.append(float(product))\n        result.append(row)\n    return result\n```"}
{"task_id": 493, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y_array = np.asarray(y)\n    if y_array.size == 0:\n        return -1\n    mean = y_array.mean()\n    squared_diffs = (y_array - mean) ** 2\n    mse_value = squared_diffs.mean()\n    return round(mse_value, 4)\n```"}
{"task_id": 496, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a 1-D numpy array (handles scalars by converting to [x])\n    x_array = np.atleast_1d(x)\n    \n    # Compute the affine activation\n    y = slope * x_array + intercept\n    \n    # Compute the first derivative (constant slope)\n    grad = np.full_like(x_array, slope)\n    \n    # Compute the second derivative (constant zero)\n    grad2 = np.zeros_like(x_array)\n    \n    # Round each element to 4 decimal places and convert to lists\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return (y_rounded, grad_rounded, grad2_rounded)\n```"}
{"task_id": 499, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within valid range\n    n_samples, n_features = data.shape\n    if not (1 <= k <= n_features):\n        return -1\n    \n    # Step 1: Standardize the data (zero mean, unit population variance)\n    mean = data.mean(axis=0)\n    demeaned = data - mean\n    var = (demeaned ** 2).mean(axis=0)  # Population variance\n    std = np.sqrt(var)\n    standardized = np.zeros_like(demeaned)\n    \n    for i in range(n_features):\n        if std[i] == 0:\n            standardized[:, i] = demeaned[:, i]\n        else:\n            standardized[:, i] = demeaned[:, i] / std[i]\n    \n    # Step 2: Compute sample covariance matrix with Bessel's correction\n    if n_samples == 1:\n        # Handle case where n_samples is 1 (covariance is undefined, but avoid division by zero)\n        cov_matrix = np.zeros((n_features, n_features))\n    else:\n        cov_matrix = (standardized.T @ standardized) / (n_samples - 1)\n    \n    # Step 3: Eigen-decomposition of covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and corresponding eigenvectors\n    eigenvalues_sorted = eigenvalues[::-1]\n    eigenvectors_sorted = eigenvectors[:, ::-1]  # Reverse columns for descending order\n    \n    # Step 5: Fix the sign of each eigenvector\n    for i in range(eigenvectors_sorted.shape[1]):\n        eigenvec = eigenvectors_sorted[:, i]\n        max_abs_idx = np.argmax(np.abs(eigenvec))\n        if eigenvec[max_abs_idx] < 0:\n            eigenvectors_sorted[:, i] *= -1\n    \n    # Step 6: Project the standardized data onto the first k eigenvectors\n    W = eigenvectors_sorted[:, :k]\n    projected = standardized @ W\n    \n    # Round to 4 decimal places and convert to list\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()\n```"}
{"task_id": 500, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\"\"\"\n    # Convert input data to numpy arrays for easier manipulation\n    X_train_np = np.array(X_train, dtype=np.float64)\n    y_train_np = np.array(y_train, dtype=np.float64)\n    X_test_np = np.array(X_test, dtype=np.float64)\n    \n    n_samples, n_features = X_train_np.shape\n    \n    # Initialize the model with the average of training labels\n    c = np.mean(y_train_np)\n    stumps = []  # Stores each weak learner (feature index, threshold, left value, right value)\n    current_F = np.full(n_samples, c)  # Current prediction on training data\n    \n    for _ in range(n_estimators):\n        # Compute residuals (negative gradient for squared error loss)\n        residuals = y_train_np - current_F\n        \n        # Find the best decision stump to fit the residuals\n        best_error = np.inf\n        best_j = 0\n        best_t = 0.0\n        best_a = 0.0\n        best_b = 0.0\n        \n        # Iterate over each feature to find the best split\n        for j in range(n_features):\n            # Extract j-th feature values and pair with residuals\n            x_j = X_train_np[:, j]\n            sorted_pairs = sorted(zip(x_j, residuals), key=lambda pair: pair[0])\n            sorted_x, sorted_res = zip(*sorted_pairs) if sorted_pairs else ([], [])\n            sorted_x = np.array(sorted_x)\n            sorted_res = np.array(sorted_res)\n            \n            # Check all unique values of the feature as potential thresholds\n            unique_x = np.unique(sorted_x)\n            for t in unique_x:\n                # Split data into left (<= t) and right (> t) based on threshold\n                left_mask = sorted_x <= t\n                right_mask = sorted_x > t\n                \n                left_res = sorted_res[left_mask]\n                right_res = sorted_res[right_mask]\n                \n                # Compute optimal values for left and right regions (mean of residuals)\n                a = np.mean(left_res) if left_res.size > 0 else 0.0\n                b = np.mean(right_res) if right_res.size > 0 else 0.0\n                \n                # Calculate the squared error for this split\n                error = np.sum((left_res - a) ** 2) + np.sum((right_res - b) ** 2)\n                \n                # Update best stump if this split is better\n                if error < best_error:\n                    best_error = error\n                    best_j = j\n                    best_t = t\n                    best_a = a\n                    best_b = b\n        \n        # Add the best stump to the ensemble\n        stumps.append((best_j, best_t, best_a, best_b))\n        \n        # Update the current model with the new stump (scaled by learning rate)\n        stump_predictions = np.where(X_train_np[:, best_j] <= best_t, best_a, best_b)\n        current_F += learning_rate * stump_predictions\n    \n    # Generate predictions for the test set\n    predictions = []\n    for x in X_test_np:\n        # Compute the ensemble prediction\n        f = c\n        for (j, t, a, b) in stumps:\n            f += learning_rate * (a if x[j] <= t else b)\n        # Threshold at 0.5 to get class label\n        predictions.append(1 if f >= 0.5 else 0)\n    \n    return predictions\n```"}
{"task_id": 505, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.size == 0:\n        return []\n    \n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n    \n    # Positive phase: compute hidden probabilities from visible data\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    \n    # Compute negative phase visible and hidden probabilities after k Gibbs steps\n    if k == 0:\n        # No Gibbs steps: negative phase uses original visible and positive hidden\n        v_k_prob = X\n        h_k_prob = h0_prob\n    else:\n        h_prev = h0_prob\n        for _ in range(k):\n            # Compute visible probabilities from current hidden\n            v_current = 1 / (1 + np.exp(-(h_prev @ W.T + vbias)))\n            # Compute next hidden probabilities from current visible\n            h_current = 1 / (1 + np.exp(-(v_current @ W + hbias)))\n            h_prev = h_current\n        v_k_prob = v_current\n        h_k_prob = h_prev\n    \n    # Calculate positive and negative gradients\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    \n    # Update weight matrix\n    delta = learning_rate * (pos_grad - neg_grad) / m\n    W_new = W + delta\n    \n    # Round to 4 decimal places and convert to list of lists\n    W_rounded = np.round(W_new, 4)\n    return W_rounded.tolist()\n```"}
{"task_id": 509, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n\n    # Check if both arrays are 1-dimensional\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n\n    # Check if the lengths are equal\n    len_x = x_arr.size\n    len_y = y_arr.size\n    if len_x != len_y:\n        return -1\n\n    # Handle empty vectors\n    if len_x == 0:\n        return 0.0\n\n    # Compute absolute differences and find the maximum\n    differences = np.abs(x_arr - y_arr)\n    max_diff = np.max(differences)\n\n    # Round to four decimal places and convert to Python float\n    return round(float(max_diff), 4)\n```"}
{"task_id": 510, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    # Clip y_pred for numerical stability\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    \n    # Calculate binary cross-entropy (reconstruction loss)\n    bce = -y * np.log(y_pred_clipped) - (1 - y) * np.log(1 - y_pred_clipped)\n    reconstruction_loss = np.mean(np.sum(bce, axis=1))  # Average over batch\n    \n    # Calculate KL divergence\n    kl_terms = -0.5 * (1 + t_log_var - t_mean**2 - np.exp(t_log_var))\n    kl_divergence = np.mean(np.sum(kl_terms, axis=1))  # Average over batch\n    \n    # Total loss and rounding\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X_np = np.array(X, dtype=np.float64)\n    w_np = np.array(w, dtype=np.float64)\n    V_np = np.array(V, dtype=np.float64)\n    \n    # Compute the linear term: sum(w_j * x_j) for each sample\n    linear_term = X_np @ w_np\n    \n    # Compute the interaction term components\n    X_squared = X_np ** 2  # Element-wise square of X\n    V_squared = V_np ** 2  # Element-wise square of V\n    \n    # (sum_j V_jf x_j)^2 for all samples and factors\n    interaction_part1 = (X_np @ V_np) ** 2\n    # sum_j (V_jf^2 x_j^2) for all samples and factors\n    interaction_part2 = X_squared @ V_squared\n    \n    # Sum over factors and apply 0.5 scaling\n    interaction_term = 0.5 * np.sum(interaction_part1 - interaction_part2, axis=1)\n    \n    # Combine all terms and round to 4 decimal places\n    predictions = w0 + linear_term + interaction_term\n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 517, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    z_array = np.asarray(z)\n    \n    # Compute sigmoid using numerically stable approach\n    # For z >= 0: 1 / (1 + exp(-z))\n    # For z < 0: exp(z) / (1 + exp(z)) to avoid overflow\n    sigmoid_vals = np.where(\n        z_array >= 0,\n        1 / (1 + np.exp(-z_array)),\n        np.exp(z_array) / (1 + np.exp(z_array))\n    )\n    \n    # Round the results to four decimal places\n    sigmoid_rounded = np.round(sigmoid_vals, decimals=4)\n    \n    # Return scalar as float, otherwise convert to list\n    if z_array.ndim == 0:\n        return float(sigmoid_rounded)\n    else:\n        return sigmoid_rounded.tolist()\n```"}
{"task_id": 518, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Process actual if it's a 2D one-hot encoded array\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Process predicted if it's a 2D one-hot encoded array\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original metric function with processed arrays\n        return function(actual, predicted)\n    return wrapper\n```"}
{"task_id": 520, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def process_list(lst):\n        processed = []\n        for element in lst:\n            if isinstance(element, list):\n                processed.append(process_list(element))\n            else:\n                val = element * (1 - element)\n                rounded = np.round(val, 4)\n                processed.append(float(rounded))\n        return processed\n\n    if isinstance(z, np.ndarray):\n        if z.ndim == 0:\n            val = z.item()\n            result = val * (1 - val)\n            return np.round(result, 4).item()\n        else:\n            list_z = z.tolist()\n            return process_list(list_z)\n    elif isinstance(z, list):\n        if not z:\n            return []\n        return process_list(z)\n    else:\n        result = z * (1 - z)\n        return np.round(result, 4).item()\n```"}
{"task_id": 528, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert input data to a numpy array for easier manipulation\n    X_np = np.array(X, dtype=np.float64)\n    \n    # Determine the min and max values for each feature to define the grid range\n    x1_min, x1_max = X_np[:, 0].min(), X_np[:, 0].max()\n    x2_min, x2_max = X_np[:, 1].min(), X_np[:, 1].max()\n    \n    # Create 1-D arrays of equally spaced points along each axis\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Generate the mesh grid from the 1-D arrays\n    X_mesh, Y_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Compute the linear combination w1*x1 + w2*x2 + b for all grid points\n    Z = W[0] * X_mesh + W[1] * Y_mesh + b\n    \n    # Determine the labels: 1 where Z >= 0, -1 otherwise\n    labels = np.where(Z >= 0, 1, -1)\n    \n    # Convert the numpy array to a nested Python list and return\n    return labels.tolist()\n```"}
{"task_id": 537, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Handle edge cases where one class has no samples in training data\n    n0 = np.sum(y_train == 0)\n    n1 = len(y_train) - n0\n    if n0 == 0:\n        return [1] * len(X_test)\n    if n1 == 0:\n        return [0] * len(X_test)\n    \n    # Calculate class priors\n    prior0 = n0 / (n0 + n1)\n    prior1 = n1 / (n0 + n1)\n    \n    # Separate training data by class\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    \n    # Compute mean and standard deviation for each feature per class\n    mean0 = np.mean(X0, axis=0)\n    mean1 = np.mean(X1, axis=0)\n    \n    # Use population standard deviation (ddof=0) and add epsilon to avoid division by zero\n    std0 = np.std(X0, axis=0, ddof=0) + 1e-9\n    std1 = np.std(X1, axis=0, ddof=0) + 1e-9\n    \n    n_features = X_train.shape[1]\n    predictions = []\n    \n    for x in X_test:\n        # Calculate log posterior for class 0\n        log_posterior0 = np.log(prior0)\n        for f in range(n_features):\n            mu = mean0[f]\n            sigma = std0[f]\n            x_f = x[f]\n            # Log of the Gaussian probability density function\n            log_likelihood = -0.5 * np.log(2 * np.pi) - np.log(sigma) - ((x_f - mu) ** 2) / (2 * sigma ** 2)\n            log_posterior0 += log_likelihood\n        \n        # Calculate log posterior for class 1\n        log_posterior1 = np.log(prior1)\n        for f in range(n_features):\n            mu = mean1[f]\n            sigma = std1[f]\n            x_f = x[f]\n            log_likelihood = -0.5 * np.log(2 * np.pi) - np.log(sigma) - ((x_f - mu) ** 2) / (2 * sigma ** 2)\n            log_posterior1 += log_likelihood\n        \n        # Predict the class with higher log posterior\n        predictions.append(0 if log_posterior0 > log_posterior1 else 1)\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Computes the binary cross-entropy cost between model probabilities and true labels.\"\"\"\n    m = AL.size  # Number of training examples\n    # Clip probabilities to avoid log(0) or log(1) which cause numerical issues\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    # Compute the cross-entropy terms for each example\n    cross_entropy = Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    # Average the cross-entropy terms and take the negative\n    cost = -np.mean(cross_entropy)\n    # Return as a Python float rounded to 4 decimal places\n    return round(float(cost), 4)\n```"}
{"task_id": 552, "completion_id": 0, "completion": "\n\n```python\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Check if t is out of bounds\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    \n    # Extract HMM parameters\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)  # Number of states\n    \n    # Compute forward probabilities alpha\n    alpha = []\n    # Initialize alpha[0]\n    o0 = observations[0]\n    alpha_t0 = [pi[i] * B[i][o0] for i in range(N)]\n    alpha.append(alpha_t0)\n    \n    # Compute alpha for t from 1 to T-1\n    for time in range(1, T):\n        ot = observations[time]\n        current_alpha = []\n        for i in range(N):\n            sum_prev = sum(alpha[time-1][j] * A[j][i] for j in range(N))\n            current_alpha.append(sum_prev * B[i][ot])\n        alpha.append(current_alpha)\n    \n    # Compute backward probabilities beta\n    beta = [[0.0] * N for _ in range(T)]\n    # Initialize beta[T-1]\n    for i in range(N):\n        beta[T-1][i] = 1.0\n    \n    # Compute beta for t from T-2 down to 0\n    for time in range(T-2, -1, -1):\n        ot_plus_1 = observations[time + 1]\n        for i in range(N):\n            sum_next = sum(A[i][j] * B[j][ot_plus_1] * beta[time + 1][j] for j in range(N))\n            beta[time][i] = sum_next\n    \n    # Compute gamma_t\n    numerators = [alpha[t][i] * beta[t][i] for i in range(N)]\n    denominator = sum(numerators)\n    \n    if denominator == 0:\n        gamma = [0.0] * N\n    else:\n        gamma = [num / denominator for num in numerators]\n    \n    # Round to 4 decimal places\n    gamma_rounded = [round(x, 4) for x in gamma]\n    \n    return gamma_rounded\n```"}
{"task_id": 555, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nfrom collections import deque\n\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    \n    # Compute squared epsilon for efficient distance comparison\n    eps_sq = eps ** 2\n    \n    # Step 1: Build neighborhood list for each sample\n    neighbors = []\n    for i in range(n_samples):\n        # Calculate squared Euclidean distances between data[i] and all points\n        dist_sq = np.sum((data - data[i]) ** 2, axis=1)\n        # Find indices of points within epsilon radius\n        neighbors_i = np.where(dist_sq <= eps_sq)[0].tolist()\n        neighbors.append(neighbors_i)\n    \n    # Step 2: Identify core points\n    core = [len(neighbors[i]) >= min_samples for i in range(n_samples)]\n    \n    # Initialize labels (0 = unlabeled, -1 = noise, 1+ = cluster IDs)\n    labels = [0] * n_samples\n    current_cluster = 1\n    \n    # Step 3: Expand clusters using BFS from core points\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue  # Skip already labeled points\n        if not core[i]:\n            continue  # Only core points can start clusters\n        \n        # BFS to expand the current cluster\n        queue = deque([i])\n        labels[i] = current_cluster\n        \n        while queue:\n            current = queue.popleft()\n            # Explore all neighbors of the current point\n            for neighbor in neighbors[current]:\n                if labels[neighbor] == 0:\n                    # Assign to current cluster\n                    labels[neighbor] = current_cluster\n                    # Add to queue if neighbor is a core point to continue expansion\n                    if core[neighbor]:\n                        queue.append(neighbor)\n        \n        # Move to the next cluster after completing the current one\n        current_cluster += 1\n    \n    # Step 4: Label remaining unlabeled points as noise\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n    \n    return labels\n```"}
{"task_id": 561, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"Implements the Expectation-Maximization algorithm for a Gaussian Mixture Model (GMM).\n    \n    Args:\n        data: 2-D NumPy array with N samples and D features.\n        k: Number of Gaussian components.\n        max_iter: Maximum number of EM iterations.\n        epsilon: Tolerance for convergence (based on change in mixture weights).\n    \n    Returns:\n        List of cluster labels (0 to k-1) for each sample, deterministically ordered by component means.\n    \"\"\"\n    n_samples, d = data.shape\n    \n    if k == 1:\n        return [0] * n_samples\n    \n    # Initialize parameters\n    np.random.seed(42)  # Ensure deterministic initialization for reproducibility\n    \n    # Mixture weights (pi) initialized from Dirichlet distribution\n    pi = np.random.dirichlet([1] * k, size=1)[0]\n    \n    # Means (mu) initialized to random distinct data points\n    indices = np.random.choice(n_samples, k, replace=False)\n    mu = data[indices]\n    \n    # Covariance matrices (sigma) initialized to data covariance + small epsilon\n    data_cov = np.cov(data.T) + np.eye(d) * 1e-6\n    sigma = [data_cov.copy() for _ in range(k)]\n    \n    # EM algorithm loop\n    for _ in range(max_iter):\n        # E-step: Compute responsibilities (gamma)\n        gamma = np.zeros((n_samples, k))\n        for j in range(k):\n            mu_j = mu[j]\n            sigma_j = sigma[j]\n            \n            # Handle potential singular covariance matrices\n            try:\n                sigma_inv = np.linalg.inv(sigma_j)\n            except np.linalg.LinAlgError:\n                sigma_j += np.eye(d) * 1e-6\n                sigma_inv = np.linalg.inv(sigma_j)\n            sigma_det = np.linalg.det(sigma_j)\n            if sigma_det <= 0:  # Ensure positive determinant\n                sigma_j += np.eye(d) * 1e-6\n                sigma_det = np.linalg.det(sigma_j)\n                sigma_inv = np.linalg.inv(sigma_j)\n            \n            # Compute log probability for component j\n            log_prob = -0.5 * d * np.log(2 * np.pi)\n            log_prob -= 0.5 * np.log(sigma_det)\n            diff = data - mu_j\n            mahalanobis = np.sum((diff @ sigma_inv) * diff, axis=1)\n            log_prob -= 0.5 * mahalanobis\n            gamma[:, j] = np.log(pi[j]) + log_prob\n        \n        # Normalize responsibilities using log-sum-exp for numerical stability\n        log_denominator = np.logaddexp.reduce(gamma, axis=1)\n        gamma = np.exp(gamma - log_denominator[:, np.newaxis])\n        \n        # M-step: Update parameters\n        N_j = np.sum(gamma, axis=0)  # Total responsibility per component\n        pi_new = N_j / n_samples\n        \n        # Update means\n        mu_new = np.zeros_like(mu)\n        for j in range(k):\n            mu_new[j] = np.sum(gamma[:, j, np.newaxis] * data, axis=0) / N_j[j]\n        \n        # Update covariance matrices\n        sigma_new = []\n        for j in range(k):\n            diff = data - mu_new[j]\n            outer = diff[:, :, np.newaxis] * diff[:, np.newaxis, :]  # (n, d, d) outer products\n            weighted_outer = gamma[:, j, np.newaxis, np.newaxis] * outer\n            sigma_j = np.sum(weighted_outer, axis=0) / N_j[j]\n            sigma_j += np.eye(d) * 1e-6  # Prevent singularity\n            sigma_new.append(sigma_j)\n        \n        # Check convergence\n        if np.max(np.abs(pi - pi_new)) < epsilon:\n            break\n        \n        # Update parameters for next iteration\n        pi, mu, sigma = pi_new, mu_new, sigma_new\n    \n    # Assign labels based on maximum responsibility\n    labels = np.argmax(gamma, axis=1)\n    \n    # Sort components by the first coordinate of their mean and relabel\n    sorted_component_indices = np.argsort(mu[:, 0])  # Ascending order of first mean coordinate\n    reverse_mapping = np.argsort(sorted_component_indices)  # Maps original to new labels\n    relabeled = reverse_mapping[labels].tolist()\n    \n    return relabeled\n```"}
{"task_id": 562, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n    \n    # Step 1: Build similarity graph using Gaussian kernel\n    pairwise_sq_dists = np.sum(data**2, axis=1)[:, np.newaxis] + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    \n    # Step 2: Construct Laplacian matrix\n    D = np.sum(W, axis=1)  # Degree vector\n    if method == 'unnormalized':\n        L = np.diag(D) - W\n    else:  # 'normalized'\n        D_sqrt = np.sqrt(D)\n        L = (np.diag(D) - W) / (D_sqrt[:, np.newaxis] * D_sqrt)\n    \n    # Step 3: Compute eigenvectors of the smallest n_cluster eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        # Row normalize the eigenvectors\n        row_norms = np.linalg.norm(U, axis=1)\n        row_norms = np.where(row_norms == 0, 1e-10, row_norms)  # Avoid division by zero\n        U = U / row_norms[:, np.newaxis]\n    \n    # Step 4: Run deterministic k-means on the eigenvector space\n    def kmeans(X, n_clusters, initial_centroids):\n        centroids = initial_centroids.copy()\n        while True:\n            # Assign labels based on nearest centroid\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            labels = np.argmin(distances, axis=1)\n            \n            # Update centroids\n            new_centroids = np.zeros_like(centroids)\n            for i in range(n_clusters):\n                mask = (labels == i)\n                if np.sum(mask) == 0:\n                    new_centroids[i] = initial_centroids[i]  # Fallback to initial if empty\n                else:\n                    new_centroids[i] = np.mean(X[mask], axis=0)\n            \n            if np.allclose(centroids, new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n    \n    initial_centroids = U[:n_cluster, :]\n    kmeans_labels = kmeans(U, n_cluster, initial_centroids)\n    \n    # Relabel clusters based on the smallest original index\n    relabel_mapping = {}\n    current_label = 0\n    for idx in range(N):\n        old_label = kmeans_labels[idx]\n        if old_label not in relabel_mapping:\n            relabel_mapping[old_label] = current_label\n            current_label += 1\n    \n    return [relabel_mapping[old] for old in kmeans_labels]\n```"}
{"task_id": 563, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N, dtype=np.float64)\n    b = 0.0\n    \n    # Compute Gram matrix\n    G = X_data @ X_data.T  # Shape (N, N)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = sum_j (alpha[j] * y[j] * G[j, i])\n            g = np.dot(alpha * y_data, G[:, i])\n            # Check if the current sample is misclassified\n            if y_data[i] * (g + b) <= 0:\n                # Update alpha and bias\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        # If no updates in this pass, convergence is achieved\n        if not updated:\n            break\n    \n    # Compute the weight vector\n    w = np.sum((alpha * y_data[:, np.newaxis]) * X_data, axis=0)\n    \n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    \n    return (w_rounded, b_rounded)\n```"}
{"task_id": 564, "completion_id": 0, "completion": "\n\n```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    # Check if the current node is a leaf node\n    if hasattr(root, 'y'):\n        return root.y\n    \n    if task_type == 'classification':\n        # Get the feature value to inspect\n        feature_idx = root.label\n        feature_val = features[feature_idx]\n        \n        # Find the first child with matching x attribute\n        for child in root.child:\n            if child.x == feature_val:\n                return predict_sample(child, features, task_type)\n        \n        # Default to the second child if no match found\n        return predict_sample(root.child[1], features, task_type)\n    else:  # regression task\n        # Get the feature value to inspect\n        feature_idx = root.label\n        feature_val = features[feature_idx]\n        \n        # Determine which child to traverse based on split point\n        if feature_val <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n```"}
{"task_id": 565, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_samples = len(y)\n    if n_samples == 0:\n        return (0, 0.0)\n    \n    # Calculate entropy of the target labels\n    unique_y, counts_y = np.unique(y, return_counts=True)\n    probs_y = counts_y / n_samples\n    entropy_y = -np.sum(probs_y * np.log2(probs_y))\n    \n    n_features = X.shape[1]\n    max_gain = -np.inf\n    best_feature = 0\n    \n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_vals = np.unique(feature_values)\n        cond_entropy = 0.0\n        \n        for val in unique_vals:\n            # Get the subset of labels where the feature has value 'val'\n            mask = (feature_values == val)\n            y_subset = y[mask]\n            subset_size = len(y_subset)\n            \n            # Calculate entropy of the subset\n            unique_subset, counts_subset = np.unique(y_subset, return_counts=True)\n            probs_subset = counts_subset / subset_size\n            entropy_subset = -np.sum(probs_subset * np.log2(probs_subset))\n            \n            # Accumulate conditional entropy\n            cond_entropy += (subset_size / n_samples) * entropy_subset\n        \n        # Compute information gain for the current feature\n        information_gain = entropy_y - cond_entropy\n        \n        # Update the best feature if current gain is higher, or same gain with smaller index\n        if information_gain > max_gain:\n            max_gain = information_gain\n            best_feature = feature_idx\n    \n    # Round to 6 decimal places as required\n    max_gain_rounded = round(max_gain, 6)\n    return (best_feature, max_gain_rounded)\n```"}
{"task_id": 566, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport math\n\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\"\"\"\n    if epsilon == 0.0:\n        return []\n    n_samples, n_features = data.shape\n    if n_samples == 0:\n        return []\n    \n    np.random.seed(42)\n    \n    s = min(sample_size, n_samples)\n    if s <= 1:\n        phi = 0.0\n    else:\n        phi = 2 * math.log(s - 1) - 2 * (s - 1) / s\n    \n    height_limit = math.ceil(math.log2(s)) if s > 0 else 0\n    \n    def build_tree(subsample_data):\n        def build_node(current_data, current_depth):\n            if current_depth >= height_limit or len(current_data) <= 1:\n                return {'type': 'leaf', 'size': len(current_data)}\n            feature = np.random.randint(0, n_features)\n            min_val = np.min(current_data[:, feature])\n            max_val = np.max(current_data[:, feature])\n            if min_val == max_val:\n                return {'type': 'leaf', 'size': len(current_data)}\n            threshold = np.random.uniform(min_val, max_val)\n            mask_left = current_data[:, feature] <= threshold\n            left_data = current_data[mask_left]\n            right_data = current_data[~mask_left]\n            left_child = build_node(left_data, current_depth + 1)\n            right_child = build_node(right_data, current_depth + 1)\n            return {\n                'type': 'internal',\n                'feature': feature,\n                'threshold': threshold,\n                'left': left_child,\n                'right': right_child\n            }\n        return build_node(subsample_data, 0)\n    \n    def compute_path(x, tree):\n        def traverse(node, depth):\n            if node['type'] == 'leaf':\n                n = node['size']\n                if n == 1:\n                    return depth\n                else:\n                    return depth + 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n            else:\n                if x[node['feature']] <= node['threshold']:\n                    return traverse(node['left'], depth + 1)\n                else:\n                    return traverse(node['right'], depth + 1)\n        return traverse(tree, 0)\n    \n    path_lengths = np.zeros((n_samples, n_trees))\n    \n    for tree_idx in range(n_trees):\n        if s == n_samples:\n            subsample_indices = np.arange(n_samples)\n        else:\n            subsample_indices = np.random.choice(n_samples, size=s, replace=False)\n        subsample_data = data[subsample_indices]\n        tree = build_tree(subsample_data)\n        for i in range(n_samples):\n            x = data[i]\n            path_lengths[i, tree_idx] = compute_path(x, tree)\n    \n    h_bar = np.mean(path_lengths, axis=1)\n    \n    if phi == 0:\n        scores = np.ones(n_samples)\n    else:\n        scores = 2 ** (-h_bar / phi)\n    \n    n_outliers = math.ceil(epsilon * n_samples)\n    if n_outliers <= 0:\n        return []\n    \n    indexed_scores = sorted(enumerate(scores), key=lambda x: (-x[1], x[0]))\n    outliers = [idx for idx, _ in indexed_scores[:n_outliers]]\n    outliers.sort()\n    return outliers\n```"}
{"task_id": 568, "completion_id": 0, "completion": "\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Implement Maximum Entropy Classifier with GIS algorithm.\"\"\"\n    # Preprocess training data\n    N = X_train.shape[0]  # Number of training samples\n    D = X_train.shape[1]  # Number of features per sample\n    labels = sorted(set(y_train))\n    num_labels = len(labels)\n    label_to_idx = {y: idx for idx, y in enumerate(labels)}\n\n    # Collect features and their empirical counts\n    feature_to_idx = dict()\n    idx_to_feature = []\n    empirical_counts = defaultdict(int)\n    feature_value_samples = defaultdict(list)  # Maps (fi, fv) to list of sample indices\n\n    for i in range(N):\n        x = X_train[i]\n        y = y_train[i]\n        for fi in range(D):\n            fv = x[fi]\n            # Update feature_value_samples\n            feature_value_samples[(fi, fv)].append(i)\n            # Update feature mappings and counts\n            feature = (fi, fv, y)\n            if feature not in feature_to_idx:\n                feature_to_idx[feature] = len(feature_to_idx)\n                idx_to_feature.append(feature)\n            empirical_counts[feature] += 1\n\n    J = len(idx_to_feature)  # Number of unique features\n    if J == 0:\n        # No features, predict majority class (or first label if all same)\n        majority = max(labels, key=lambda y: (y_train == y).sum())\n        return [majority] * len(X_test)\n\n    # Precompute empirical expectations E_p_tilde for each feature\n    E_p_tilde = [empirical_counts[feature] / N for feature in idx_to_feature]\n    C = D  # Constant sum of features per (x, y)\n\n    # Initialize weights\n    w = [0.0] * J\n\n    # GIS iterations\n    for _ in range(n_iter):\n        # Compute P(y|x) for all training samples\n        P = np.zeros((N, num_labels))\n        for i in range(N):\n            x = X_train[i]\n            exponents = np.zeros(num_labels)\n            for k in range(num_labels):\n                y = labels[k]\n                sum_w = 0.0\n                for fi in range(D):\n                    fv = x[fi]\n                    feature = (fi, fv, y)\n                    if feature in feature_to_idx:\n                        j = feature_to_idx[feature]\n                        sum_w += w[j]\n                exponents[k] = sum_w\n            # Compute softmax to avoid overflow\n            max_exp = np.max(exponents)\n            exponents -= max_exp\n            exp_exponents = np.exp(exponents)\n            Z = np.sum(exp_exponents)\n            P[i] = exp_exponents / Z\n\n        # Compute model expectations E_p for each feature\n        E_p = [0.0] * J\n        for j in range(J):\n            feature = idx_to_feature[j]\n            fi, fv, y_j = feature\n            k_j = label_to_idx[y_j]\n            # Get all samples where x[fi] == fv\n            sample_indices = feature_value_samples.get((fi, fv), [])\n            sum_p = 0.0\n            for i in sample_indices:\n                sum_p += P[i][k_j]\n            E_p[j] = sum_p / N\n\n        # Update weights and check convergence\n        max_delta = 0.0\n        for j in range(J):\n            ep_tilde = E_p_tilde[j]\n            ep = E_p[j]\n            if ep <= 0:\n                continue  # Avoid division by zero (should not happen with valid features)\n            ratio = ep_tilde / ep\n            delta = (1.0 / C) * math.log(ratio)\n            w[j] += delta\n            max_delta = max(max_delta, abs(delta))\n\n        if max_delta < epsilon:\n            break\n\n    # Predict on test set\n    predictions = []\n    for x in X_test:\n        exponents = []\n        for y in labels:\n            sum_w = 0.0\n            for fi in range(D):\n                fv = x[fi]\n                feature = (fi, fv, y)\n                if feature in feature_to_idx:\n                    j = feature_to_idx[feature]\n                    sum_w += w[j]\n            exponents.append(sum_w)\n        # Compute softmax to find the most probable label\n        max_exp = np.max(exponents)\n        exponents -= max_exp\n        exp_exponents = np.exp(exponents)\n        probs = exp_exponents / np.sum(exp_exponents)\n        pred_idx = np.argmax(probs)\n        predictions.append(labels[pred_idx])\n\n    return predictions\n```"}
{"task_id": 569, "completion_id": 0, "completion": "\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    doc_freq = Counter()\n    for _, words in data:\n        unique_words = set(words)\n        doc_freq.update(unique_words)\n    \n    num_documents = len(data)\n    sorted_list = []\n    if num_documents > 0:\n        # Calculate document frequency ratios and round to 4 decimals\n        ratios = {word: round(count / num_documents, 4) for word, count in doc_freq.items()}\n        # Sort by descending ratio, then ascending word to break ties\n        sorted_list = sorted(ratios.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Determine the set of top words based on cut_off\n    if cut_off is None:\n        top_words_set = set(doc_freq.keys()) if num_documents > 0 else set()\n    elif cut_off == 0:\n        top_words_set = set()\n    else:\n        # Take the first min(cut_off, number of distinct words) words\n        k = min(cut_off, len(sorted_list))\n        top_words = [word for word, _ in sorted_list[:k]]\n        top_words_set = set(top_words)\n    \n    return (sorted_list, top_words_set)\n```"}
{"task_id": 571, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the element-wise product of alpha and y\n    alpha_y = alpha * y\n    \n    # Calculate the weight vector w using matrix multiplication\n    w = X.T.dot(alpha_y)\n    \n    # Compute the terms (y_i - w^T x_i) for all samples\n    terms = y - X.dot(w)\n    \n    # Calculate the bias term b as the mean of the terms\n    b = np.mean(terms)\n    \n    # Round the weight vector to 4 decimal places and convert to a list\n    w_rounded = np.round(w, 4).tolist()\n    \n    # Round the bias term to 4 decimal places\n    b_rounded = np.round(b, 4)\n    \n    return (w_rounded, b_rounded)\n```"}
{"task_id": 572, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    n = data.shape[0]\n    if not (1 <= k < n):\n        raise ValueError(\"k must satisfy 1 \u2264 k < n where n is the number of samples.\")\n    \n    # Step 1: Compute pairwise Euclidean distance matrix\n    dist_matrix = np.sqrt(np.sum((data[:, np.newaxis, :] - data) ** 2, axis=2))\n    \n    # Step 2: Compute k-distance and k nearest neighbors for each point\n    k_distances = np.zeros(n)\n    N_k = [[] for _ in range(n)]  # List to store k nearest neighbors indices for each point\n    \n    for i in range(n):\n        # Exclude the point itself when finding neighbors\n        mask = np.arange(n) != i\n        distances = dist_matrix[i][mask]\n        candidate_indices = np.arange(n)[mask]\n        \n        # Sort distances and get indices of k nearest neighbors\n        sorted_indices = np.argsort(distances)\n        k_nearest_sorted = sorted_indices[:k]\n        k_nearest = candidate_indices[k_nearest_sorted]\n        N_k[i] = k_nearest.tolist()\n        \n        # k-distance is the distance to the k-th nearest neighbor\n        k_distances[i] = distances[k_nearest_sorted[k-1]]\n    \n    # Step 3 & 4: Compute Local Reachability Density (LRD) for each point\n    lrd = np.zeros(n)\n    for i in range(n):\n        neighbors = N_k[i]\n        sum_reach = 0.0\n        for q in neighbors:\n            reach_dist = max(k_distances[q], dist_matrix[i, q])\n            sum_reach += reach_dist\n        lrd[i] = k / sum_reach if sum_reach != 0 else 0.0  # Avoid division by zero\n    \n    # Step 5: Compute Local Outlier Factor (LOF) for each point\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        neighbors = N_k[i]\n        sum_lrd_neighbors = sum(lrd[q] for q in neighbors)\n        avg_lrd_neighbors = sum_lrd_neighbors / k\n        lof_scores[i] = avg_lrd_neighbors / lrd[i] if lrd[i] != 0 else 0.0  # Avoid division by zero\n    \n    # Round LOF scores to 4 decimal places\n    rounded_lof = np.round(lof_scores, decimals=4).tolist()\n    \n    # Determine outlier indices (sorted in ascending order)\n    outlier_indices = [i for i in range(n) if rounded_lof[i] > epsilon]\n    outlier_indices.sort()\n    \n    return (rounded_lof, outlier_indices)\n```"}
{"task_id": 574, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\nimport random\n\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        x_train = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_train)]\n        y_train = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_train)]\n        X_train_c = list(zip(x_train, y_train))\n        X_train_list.extend(X_train_c)\n        y_train_list.extend([c] * n_train)\n        \n        # Generate validation points\n        x_val = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_val)]\n        y_val = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_val)]\n        X_val_c = list(zip(x_val, y_val))\n        X_val_list.extend(X_val_c)\n        y_val_list.extend([c] * n_val)\n    \n    X_train = np.array(X_train_list, dtype=np.float64)\n    X_val = np.array(X_val_list, dtype=np.float64)\n    y_train = np.array(y_train_list, dtype=np.int64)\n    y_val = np.array(y_val_list, dtype=np.int64)\n    \n    return (X_train, X_val, y_train, y_val)\n```"}
{"task_id": 579, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Initialize centres with the first k points\n    current_centres = X[:k].copy()\n    prev_labels = None\n\n    for _ in range(max_iters):\n        # Assignment step: compute distances and assign labels\n        distances = np.sum((X[:, np.newaxis] - current_centres) ** 2, axis=2)\n        current_labels = np.argmin(distances, axis=1)\n\n        # Check if labels have stabilized\n        if prev_labels is not None and np.array_equal(current_labels, prev_labels):\n            break\n\n        # Update step: recompute centres\n        new_centres = current_centres.copy()  # Preserve centres with no points\n        for i in range(k):\n            mask = (current_labels == i)\n            if np.any(mask):\n                new_centres[i] = np.mean(X[mask], axis=0)\n        current_centres = new_centres\n\n        prev_labels = current_labels.copy()\n\n    # Convert labels to list and round centres to 4 decimals\n    labels = current_labels.tolist()\n    centres_rounded = [list(np.round(centre, 4)) for centre in current_centres]\n\n    return (labels, centres_rounded)\n```"}
{"task_id": 581, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation using batch gradient descent.\"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    # Early return if no learning steps are taken\n    if learning_rate == 0 or iterations == 0:\n        return (np.round(w, 4).tolist(), np.round(b, 4))\n\n    for _ in range(iterations):\n        # Compute predictions and residuals\n        y_hat = X @ w + b\n        r = y - y_hat\n\n        # Compute sign for L1 penalty (with sign(0) = -1)\n        sign_w = np.sign(w)\n        sign_w[sign_w == 0] = -1\n\n        # Calculate gradients\n        grad_b = (-2 * np.sum(r)) / m\n        grad_w = (-2 * (X.T @ r) + l1_penalty * sign_w + 2 * l2_penalty * w) / m\n\n        # Update parameters\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Round to 4 decimal places and convert to required output format\n    weights_rounded = np.round(w, 4).tolist()\n    bias_rounded = np.round(b, 4)\n\n    return (weights_rounded, bias_rounded)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_activation = x.copy()\n    num_layers = len(weights)\n    \n    for layer_idx in range(num_layers):\n        layer_weights = weights[layer_idx]\n        # Prepend 1.0 to current activation for the bias term\n        augmented_input = [1.0] + current_activation\n        # Compute weighted sums (z) for each neuron in the current layer\n        z_values = []\n        for neuron_weights in layer_weights:\n            # Calculate dot product between augmented input and neuron weights\n            z = sum(a * w for a, w in zip(augmented_input, neuron_weights))\n            z_values.append(z)\n        # Apply activation function\n        if layer_idx == num_layers - 1:\n            # Last layer uses linear activation\n            current_activation = z_values\n        else:\n            # Hidden layers use ReLU activation\n            current_activation = [max(0.0, z) for z in z_values]\n    \n    # Round the final output to four decimal places\n    rounded_output = [round(value, 4) for value in current_activation]\n    \n    # Return as a single float if there's only one output neuron, else a list\n    return rounded_output[0] if len(rounded_output) == 1 else rounded_output\n```"}
{"task_id": 595, "completion_id": 0, "completion": "\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering from scratch to compute centroids.\"\"\"\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    n_samples, n_features = X.shape\n\n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid using squared Euclidean distance\n        # Using broadcasting to compute distances efficiently\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=-1)\n        assignments = np.argmin(distances, axis=1)\n\n        # Update centroids to the mean of assigned samples, handling empty clusters\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            cluster_samples = X[assignments == i]\n            if len(cluster_samples) == 0:\n                # Keep centroid unchanged if cluster is empty\n                new_centroids[i] = centroids[i]\n            else:\n                new_centroids[i] = np.mean(cluster_samples, axis=0)\n\n        # Check for convergence (all centroids moved less than 1e-4)\n        centroid_changes = np.sqrt(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if np.all(centroid_changes < 1e-4):\n            break\n\n        centroids = new_centroids\n\n    # Convert to list of lists and sort lexicographically\n    centroids_list = [list(centroid) for centroid in centroids]\n    centroids_list.sort()\n\n    # Round each coordinate to 4 decimal places\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in centroids_list]\n\n    return rounded_centroids\n```"}
