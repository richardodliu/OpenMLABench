{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    This function implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Parameters:\n    data (np.ndarray): A 2D array where the last column is the target and all preceding columns are the features.\n    alpha (float): The regularisation strength. Default is 0.0.\n\n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places. If the matrix is not invertible, returns -1.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input data must be a numpy array')\n    if data.shape[1] < 2:\n        raise ValueError('Input data must have at least two columns')\n    data = np.hstack((np.ones((data.shape[0], 1)), data))\n    if len(data.shape) != 2:\n        raise ValueError('Input data must be a 2D array')\n    try:\n        XTX = np.dot(data.T, data)\n        XTX_alpha = XTX + alpha * np.eye(data.shape[1])\n        if np.linalg.det(XTX_alpha) == 0:\n            return [-1]\n        weights = np.dot(np.linalg.inv(XTX_alpha), np.dot(data.T, data[:, -1]))\n        weights = np.round(weights, 4)\n        return weights.tolist()\n    except Exception as e:\n        return [-1]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    while updates < n_iter:\n        misclassified = False\n        for i in range(n_samples):\n            activation = np.dot(alpha, y_train * K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                misclassified = True\n                updates += 1\n                break\n        if not misclassified:\n            break\n    w = np.dot(alpha, y_train) * X_train\n    return ([round(x, 4) for x in w.flatten()], round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices: list[int]) -> tuple[int, dict[int, list[int]]]:\n        \"\"\"Build an isolation tree recursively.\n\n        Args:\n            indices: A list of row indices that reach the current node.\n\n        Returns:\n            A tuple containing the depth of the current node and a dictionary\n            mapping each child index to a list of row indices that reach it.\n        \"\"\"\n        if len(indices) < 3:\n            return (0, {0: indices, 1: []})\n        f = np.random.randint(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] > v]\n        (left_depth, left_children) = build_tree(left_indices)\n        (right_depth, right_children) = build_tree(right_indices)\n        return (max(left_depth, right_depth) + 1, {0: left_indices, 1: right_indices})\n    result = [0] * data.shape[0]\n    for i in range(data.shape[0]):\n        (_, _) = build_tree([i])\n        result[i] = 1\n    return result"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    minsup_threshold = math.ceil(minsup * len(transactions))\n    itemsets_support = {}\n    for r in range(1, len(transactions[0]) + 1):\n        for itemset in combinations(transactions[0], r):\n            itemset = tuple(sorted(itemset))\n            support = sum((Counter(transaction) & Counter(itemset) for transaction in transactions))\n            if support >= minsup_threshold:\n                itemsets_support[itemset] = support\n    return itemsets_support"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k]\n    labels = np.zeros(data.shape[0], dtype=int)\n    for (i, sample) in enumerate(data):\n        distances = np.linalg.norm(data[i] - centres, axis=1)\n        labels[i] = np.argmin(distances)\n    for _ in range(max_iter):\n        new_centres = []\n        for i in range(k):\n            cluster = data[labels == i]\n            if cluster.size > 0:\n                new_centre = np.mean(cluster, axis=0)\n            else:\n                new_centre = data[np.random.randint(0, data.shape[0])]\n            new_centres.append(new_centre)\n        new_centres = np.array(new_centres)\n        max_change = np.max(np.abs(new_centres - centres))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    centres = np.round(centres, 4)\n    return (centres.tolist(), labels.tolist())"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    std1 = np.std(v1)\n                    std2 = np.std(v2)\n                    if std1 > 0.001 and std2 > 0.001:\n                        v1 = (v1 - np.mean(v1)) / std1\n                        v2 = (v2 - np.mean(v2)) / std2\n                    S[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    S[j, i] = S[i, j]\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                    S[j, i] = S[i, j]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n    scores = np.zeros(n_item)\n    for t in unrated_items:\n        score = 0\n        denom = 0\n        for i in rated_items:\n            if S[t, i] != 0:\n                score += data[user_ind, i] * S[t, i]\n                denom += np.abs(S[t, i])\n        if denom != 0:\n            scores[t] = score / denom\n    sorted_scores = np.argsort(-scores)\n    return sorted_scores[:k].tolist()"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    max_gain = -np.inf\n    best_split = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            mask_left = X[:, feature_index] <= threshold\n            mask_right = X[:, feature_index] > threshold\n            n_left = np.sum(mask_left)\n            n_right = np.sum(mask_right)\n            if n_left < 2 or n_right < 2:\n                continue\n            g_left = g[mask_left]\n            h_left = h[mask_left]\n            g_right = g[~mask_left]\n            h_right = h[~mask_left]\n            loss_left = -0.5 * np.sum(g_left) ** 2 / (np.sum(h_left) + lam) + gamma\n            loss_right = -0.5 * np.sum(g_right) ** 2 / (np.sum(h_right) + lam) + gamma\n            gain = loss_left + loss_right - (-0.5 * np.sum(g) ** 2 / (np.sum(h) + lam) + gamma)\n            if gain > max_gain:\n                max_gain = gain\n                best_split = (feature_index, threshold)\n    return best_split"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4).tolist()\n    gradient_x = np.round(gradient_x, 4).tolist()\n    if len(sigmoid_x) == 1:\n        return (float(sigmoid_x[0]), float(gradient_x[0]))\n    return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"\n    Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    sorted_idx = np.argsort(x_train)\n    x_train = [x_train[i] for i in sorted_idx]\n    y_train = [y_train[i] for i in sorted_idx]\n    n_samples = len(x_train)\n    weights = [1.0 / n_samples] * n_samples\n    ensemble = []\n    errors = []\n    alpha = []\n    for i in range(1, n_samples):\n        theta = (x_train[i - 1] + x_train[i]) / 2\n        predictions = np.where(x_train <= theta, 1, -1)\n        error = np.sum(weights * (predictions != y_train))\n        weights = weights * np.exp(-y_train * predictions)\n        weights /= np.sum(weights)\n        if error <= epsilon:\n            break\n        ensemble.append((0, theta))\n        errors.append(error)\n        alpha.append(0.5 * math.log((1 - error) / error))\n    predictions = np.zeros(len(x_test))\n    for (d, theta) in ensemble:\n        predictions += alpha[-1] * np.where(x_test <= theta, 1, -1)\n    return np.sign(predictions).astype(int)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    dists = np.sum((X_test[:, np.newaxis] - X_train) ** 2, axis=2)\n    kernel = np.exp(-gamma * dists)\n    decisions = np.dot(alpha[:, np.newaxis] * y_train, kernel) + b\n    predicted_labels = np.sign(decisions).astype(int)\n    return predicted_labels.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import svd\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(len(X), len(X[0])):\n        return (-1, -1.0)\n    X = np.array(X)\n    (U, s, Vh) = svd(X)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vh_k = Vh[:k, :]\n    X_hat = U_k @ np.diag(s_k) @ Vh_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = X_hat.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"\n    Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    ensemble = []\n    residuals = y_train - 0\n    while np.sum(residuals ** 2) > epsilon:\n        for s in split_points:\n            c1 = np.mean(residuals[x_train <= s])\n            c2 = np.mean(residuals[x_train > s])\n            new_residuals = np.where(x_train <= s, residuals[x_train <= s] - c1, residuals[x_train > s] - c2)\n            new_rss = np.sum(new_residuals ** 2)\n            if new_rss < np.sum(residuals ** 2):\n                ensemble.append((s, c1, c2))\n                residuals = new_residuals\n    prediction = 0\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters\n    ----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        The probability of generating a 1.0 (default is 0.5).\n    seed : int | None, optional\n        The seed for the random number generator (default is None).\n\n    Returns\n    -------\n    numpy.ndarray\n        A tensor filled with 0.0s and 1.0s, with the specified sparsity.\n\n    Notes\n    -----\n    If `sparsity` is outside the legal range [0, 1], returns -1.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor[tensor < threshold] = 0.0\n    tensor[tensor >= threshold] = 1.0\n    return tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median = np.median(data[:, d])\n    left_idx = np.argpartition(data[:, d], len(data) // 2)[0:len(data) // 2]\n    right_idx = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2:]\n    pivot_idx = np.searchsorted(data[:, d], median)\n    pivot = pivot_idx[0]\n    left = left_idx.tolist()\n    right = right_idx.tolist()\n    left.sort()\n    right.sort()\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Signal length must be at least frame width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=(stride * x.strides[0], x.strides[0]))\n    framed_signal.flags.writeable = writeable\n    return framed_signal"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)) or not all((isinstance(row, (list, np.ndarray)) for row in X)):\n        return False\n    X = np.array(X)\n    if len(X.shape) != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    g = np.zeros(d)\n    for _ in range(max_iter):\n        g = 1 / n * np.dot(X.T, X @ w - y)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(w_i, 4) for w_i in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    SoftPlus activation function and its derivative.\n\n    Parameters:\n    x (scalar, list, or NumPy array): Input values.\n    deriv (bool, optional): Whether to compute the derivative (default: False).\n\n    Returns:\n    scalar or list: SoftPlus(x) or its derivative (element-wise sigmoid of x).\n    \"\"\"\n    x = np.array(x)\n    if not deriv:\n        softplus_x = np.log1p(np.exp(x))\n    else:\n        sigmoid_x = 1 / (1 + np.exp(-x))\n        softplus_x = sigmoid_x\n    softplus_x = np.round(softplus_x, 4)\n    if x.size == 1:\n        return softplus_x.item()\n    else:\n        return softplus_x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    ngram_counts = {}\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i + N])\n        if ngram not in ngram_counts:\n            ngram_counts[ngram] = 0\n        ngram_counts[ngram] += 1\n    prefix_counts = {}\n    for i in range(len(corpus) - N + 1):\n        prefix = tuple(corpus[i:i + N - 1])\n        if prefix not in prefix_counts:\n            prefix_counts[prefix] = 0\n        prefix_counts[prefix] += 1\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        prefix = tuple(sequence[i:i + N - 1])\n        if ngram not in ngram_counts or prefix not in prefix_counts:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += np.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_poly = np.ones((len(X), degree + 1))\n    for i in range(1, degree + 1):\n        X_poly[:, i] = X ** i\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w[0] = np.mean(y - np.dot(X_poly[:, 1:], w[1:]).flatten())\n        for j in range(1, degree + 1):\n            rho = np.dot(X_poly[:, j] ** 2, y - np.dot(X_poly, w))\n            rho -= np.dot(X_poly[:, j], np.dot(X_poly[:, 1:], w[1:]))\n            rho /= np.dot(X_poly[:, j] ** 2)\n            w[j] = np.sign(rho) * np.maximum(np.abs(rho) - reg_factor, 0) / np.dot(X_poly[:, j] ** 2)\n        max_change = np.max(np.abs(w[1:] - w[:-1]))\n        if max_change < tol:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a given time index t.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N)\n    B (list[list[float]]): Emission-probability matrix of shape (N, M)\n    obs (list[int]): List of observation indices (length T)\n    t (int): Integer time index (0 \u2264 t < T)\n\n    Returns:\n    list[float]: Python list containing the N backward probabilities rounded to 4 decimal places\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta_T_minus_1 = [1.0] * N\n    for i in range(T - 2, t - 1, -1):\n        beta_i = [0.0] * N\n        for j in range(N):\n            for k in range(N):\n                beta_i[j] += A[j][k] * B[k][obs[i + 1]] * beta_T_minus_1[k]\n        beta_T_minus_1 = beta_i\n    beta_t = [round(x, 4) for x in beta_T_minus_1]\n    return beta_t"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    beta = [[0.0 for _ in range(N)] for _ in range(len(obs))]\n    beta[-1] = [1.0] * N\n    for t in range(len(obs) - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t][i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0][i]\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0])\n    if len(A) != n or any((len(row) != n for row in A)) or any((len(row) != m for row in B)):\n        return -1\n    if not observations:\n        return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    T = len(observations)\n    forward_vars = np.zeros((n, T + 1))\n    forward_vars[:, 0] = S\n    for t in range(1, T + 1):\n        for i in range(n):\n            for j in range(n):\n                forward_vars[i, t] += forward_vars[j, t - 1] * A[j][i]\n            forward_vars[i, t] *= B[i][observations[t - 1]]\n    likelihood = np.sum(forward_vars[:, T])\n    return round(likelihood, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nfrom itertools import chain\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter(chain(*transactions))\n    frequent_items = [item for (item, count) in item_counts.items() if count >= min_support]\n\n    def build_fp_tree(items):\n        tree = defaultdict(lambda : defaultdict(int))\n        for transaction in transactions:\n            for item in items:\n                if item in transaction:\n                    tree[item][tuple(transaction)] += 1\n        return tree\n    fp_tree = build_fp_tree(frequent_items)\n\n    def mine_fp_tree(tree, prefix, min_support):\n        frequent_itemsets = []\n        for (item, children) in tree.items():\n            if len(children) > 1:\n                for child in children:\n                    child_tree = {k: v for (k, v) in children.items() if k != child}\n                    child_itemsets = mine_fp_tree(child_tree, prefix + [item], min_support)\n                    frequent_itemsets.extend(child_itemsets)\n        if len(prefix) > 1:\n            frequent_itemsets.append(prefix)\n        return frequent_itemsets\n    frequent_itemsets = mine_fp_tree(fp_tree, [], min_support)\n    frequent_itemsets = sorted(frequent_itemsets, key=lambda x: (len(x), tuple(x)))\n    return frequent_itemsets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return [-1]\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predicted_labels = []\n    for test_sample in X_test:\n        distances = np.linalg.norm(X_train - test_sample, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_labels = y_train[k_indices]\n        label_counts = np.bincount(k_labels)\n        max_count = np.max(label_counts)\n        max_labels = np.where(label_counts == max_count)[0]\n        predicted_label = np.min(max_labels)\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"\n    Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    assert y.shape == y_pred.shape, 'Shapes of y and y_pred must match'\n    epsilon = np.finfo(y_pred.dtype).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    L = len(parameters) // 2\n    A = X\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        if l == L:\n            A = np.round(np.array(np.sigmoid(Z)), 4).tolist()\n        else:\n            A = np.round(np.array(np.maximum(Z, 0)), 4).tolist()\n        caches.append((Z, A))\n    return [A]"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / len(Q)\n    p_greedy = 1 - epsilon + base\n    p_non_greedy = base\n    probabilities = np.full(len(Q), p_non_greedy)\n    probabilities[greedy_index] = p_greedy\n    probabilities = np.round(probabilities, 4)\n    if not np.isclose(np.sum(probabilities), 1, atol=1e-12):\n        raise ValueError('Probabilities do not sum to 1')\n    return probabilities.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"\n    Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for sample_predictions in zip(*predictions):\n        vote_counts = Counter(sample_predictions)\n        max_votes = max(vote_counts.values())\n        max_labels = [label for (label, count) in vote_counts.items() if count == max_votes]\n        final_prediction = min(max_labels)\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    softplus_values = np.logaddexp(0.0, z)\n    softplus_values = np.round(softplus_values, 4)\n    if softplus_values.size == 1:\n        return softplus_values.item()\n    else:\n        return softplus_values.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy.get('ev_estimates'):\n        return np.nan\n    arm_evs = bandit['arm_evs']\n    ev_estimates = policy['ev_estimates']\n    sorted_arm_indices = sorted(ev_estimates.keys())\n    squared_errors = [(ev - ev_estimate) ** 2 for (ev, ev_estimate) in zip(arm_evs, [ev_estimates[i] for i in sorted_arm_indices])]\n    mse = np.mean(squared_errors)\n    mse = round(mse, 4)\n    return mse"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    ngrams = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            ngrams[ngram][words[i + N - 1]] += 1\n    vocab = set((word for ngram in ngrams.values() for word in ngram))\n    vocab.add('<UNK>')\n    log_prob = 0.0\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    for i in range(len(words) - N + 1):\n        ngram = tuple(words[i:i + N])\n        context = ngram[:-1]\n        word = words[i + N - 1]\n        count_context = sum(ngrams[ngram].values())\n        count_context_word = ngrams[ngram][word] if word in ngrams[ngram] else 0\n        vocab_size = len(vocab)\n        prob = (count_context_word + K) / (count_context + K * vocab_size)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n    loss = np.inf\n    best_reconstruction = None\n    for _ in range(max_iter):\n        X_hat = np.dot(W, H)\n        current_loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if current_loss < loss:\n            loss = current_loss\n            best_reconstruction = X_hat\n        W = np.dot(np.dot(X.T, H), np.linalg.inv(np.dot(np.dot(H.T, H), alpha * np.eye(K) + np.eye(K))))\n        H = np.dot(np.dot(np.dot(W.T, W), alpha * np.eye(K) + np.eye(K)), W.T).dot(np.linalg.inv(np.dot(W.T, W)))\n    return best_reconstruction.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = kmeans_plus_plus(X, K)\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = []\n        for k in range(K):\n            cluster = X[labels == k]\n            if cluster.size > 0:\n                new_centroid = np.mean(cluster, axis=0)\n            else:\n                new_centroid = centroids[k]\n            new_centroids.append(new_centroid)\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted([[round(x, 4) for x in centroid] for centroid in centroids])\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length TIME_STEPS. If the input is shorter\n    than TIME_STEPS, append the padding token 0 on the right; if it is longer,\n    truncate the sequence. Any character that does not exist in the vocabulary\n    is also encoded as the padding token 0.\n    \"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded[:time_steps]\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) must be ignored during decoding \u2013 they must not appear in\n    the returned string.\n    \"\"\"\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Puts everything together. It\n    \u2022 encodes the raw text with string_to_int,\n    \u2022 calls model.predict on the encoded batch (batch size 1),\n    \u2022 applies argmax over the last axis to obtain one predicted id per\n      time step, and finally\n    \u2022 decodes the ids with int_to_string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded]))\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"\n    Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    \u03b5 = 1e-20\n    p = np.clip(p, \u03b5, 1 - \u03b5)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / X.shape[0]\n    loss = round(loss, 4)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    w = np.full(m, 1 / m)\n    stumps = []\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_error = 1.0\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.where(X_train[:, feature] < threshold, -1, 1)\n                error = np.sum(w * (predictions != y_train))\n                if error < best_error:\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_error = error\n        predictions = np.where(X_train[:, best_feature] < best_threshold, -1, 1)\n        error = np.sum(w * (predictions != y_train))\n        alpha = 0.5 * np.log((1 - error) / error)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n        stumps.append((best_feature, best_threshold, alpha))\n    predictions = np.zeros(X_test.shape[0])\n    for (feature, threshold, alpha) in stumps:\n        predictions += alpha * np.where(X_test[:, feature] < threshold, -1, 1)\n    return np.sign(predictions).tolist()"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_means = np.array([X[y == c].mean(axis=0) for c in np.unique(y)])\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        class_data = X[y == c]\n        S_W += np.dot((class_data - class_means[c, np.newaxis]).T, class_data - class_means[c, np.newaxis])\n    S_W /= len(y)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        class_data = X[y == c]\n        class_mean = class_means[c]\n        S_B += len(class_data) * np.dot((class_mean - np.mean(X, axis=0))[:, np.newaxis], (class_mean - np.mean(X, axis=0))[np.newaxis, :])\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(-eigenvalues)\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(n_components):\n        if eigenvectors[i, 0] < 0:\n            eigenvectors[i] *= -1\n    projected_data = np.dot(X, eigenvectors[:, :n_components])\n    projected_data = np.round(projected_data, 4)\n    return projected_data.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(0, 0, 0)])\n    visited = {(0, 0)}\n    burning = set()\n    while queue:\n        (x, y, time) = queue.popleft()\n        if x == n - 1 and y == n - 1:\n            return time\n        burning.add((x, y))\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and ((nx, ny) not in burning):\n                queue.append((nx, ny, time + 1))\n                visited.add((nx, ny))\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and ((nx, ny) not in burning) and ((nx, ny) not in visited):\n                queue.append((nx, ny, time + 1))\n                visited.add((nx, ny))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implement the k-Nearest Neighbors (k-NN) classifier.\n\n    Parameters:\n    X_train (np.ndarray): Labelled training set (features)\n    y_train (np.ndarray): Labelled training set (labels)\n    X_test (np.ndarray): Unlabelled test set (features)\n    k (int): Number of nearest neighbors to consider\n    metric (str): Distance metric to use ('euclidean', 'manhattan', 'cosine')\n\n    Returns:\n    np.ndarray: Predicted labels for the test set\n    \"\"\"\n    distance_metrics = {'euclidean': lambda x, y: np.linalg.norm(x - y, ord=2), 'manhattan': lambda x, y: np.sum(np.abs(x - y), axis=1), 'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n    if metric not in distance_metrics:\n        metric = 'euclidean'\n    distances = np.array([distance_metrics[metric](X_test[i, :], X_train) for i in range(X_test.shape[0])])\n    nearest_neighbors = np.argsort(distances, axis=1)[:, :k]\n    predicted_labels = np.array([np.bincount(y_train[nn]).argmax() if np.bincount(y_train[nn]).max() == np.bincount(y_train[nn]).min() else np.bincount(y_train[nn]).argmax() for nn in nearest_neighbors])\n    return predicted_labels"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    distances = np.zeros((X_test.shape[0], X.shape[0]))\n    if metric == 'euclidean':\n        distances = np.sqrt(np.sum((X_test[:, np.newaxis] - X) ** 2, axis=2))\n    elif metric == 'manhattan':\n        distances = np.sum(np.abs(X_test[:, np.newaxis] - X), axis=2)\n    elif metric == 'cosine':\n        dot_product = np.dot(X_test, X.T)\n        norms = np.linalg.norm(X_test, axis=1)[:, np.newaxis] * np.linalg.norm(X, axis=1)\n        distances = 1 - dot_product / (norms + 1e-12)\n    else:\n        raise ValueError(\"Invalid metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    k_indices = np.argsort(distances, axis=1)[:, :np.min([k, X.shape[0]])]\n    k_labels = y[k_indices]\n    predicted_labels = np.zeros(X_test.shape[0])\n    for i in range(X_test.shape[0]):\n        (unique_labels, counts) = np.unique(k_labels[i], return_counts=True)\n        predicted_labels[i] = unique_labels[np.argmax(counts)]\n    (unique_labels, counts) = np.unique(predicted_labels, return_counts=True)\n    predicted_labels[predicted_labels == unique_labels[np.argmax(counts)]] = unique_labels[np.argmin(counts)]\n    return predicted_labels.tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(hidden1, 0)\n    hidden2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(hidden2, 0)\n    action = np.dot(hidden2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    action = np.round(action, 4)\n    action = action.tolist()\n    return action"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n        n += 1\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(max_iters):\n        for j in range(n):\n            weights[j] = 0\n            r = y - np.dot(X[:, j + 1:], weights[j + 1:])\n            if j == 0:\n                weights[j] = np.mean(r)\n            else:\n                weights[j] = np.sign(np.dot(X[:, j], r)) * np.maximum(np.abs(np.dot(X[:, j], r)) - lambda_param * m, 0) / np.sum(X[:, j] ** 2)\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 165, "completion_id": 0, "solution": ""}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized cosine window')\n        if len(coefficients) == 0:\n            raise ValueError('Coefficients list cannot be empty')\n        return [round(sum((coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(coefficients)))), 4) for n in range(N)]\n    else:\n        raise ValueError('Unknown window name')"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    unique_labels = np.unique(y_train)\n    label_map = {label: i for (i, label) in enumerate(unique_labels)}\n    y_train_mapped = [label_map[label] for label in y_train]\n    y_test_mapped = [label_map[label] for label in y_train]\n    X_train = [[x + [1] for x in sample] for sample in X_train]\n    X_test = [[x + [1] for x in sample] for sample in X_test]\n    X_train = np.array(X_train)\n    y_train = np.array(y_train_mapped)\n    X_test = np.array(X_test)\n    num_features = X_train.shape[1]\n    num_samples = X_train.shape[0]\n    weights = np.zeros(num_features)\n    if len(np.unique(y_train)) == 1:\n        return [unique_labels[0]] * len(X_test)\n    for epoch in range(epochs):\n        indices = np.arange(num_samples)\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train[indices]\n        num_batches = num_samples // batch_size\n        for batch in range(num_batches):\n            start = batch * batch_size\n            end = (batch + 1) * batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            loss = -np.mean(y_batch * np.log(predictions) + (1 - y_batch) * np.log(1 - predictions))\n            gradients = np.dot(X_batch.T, predictions - y_batch) / batch_size\n            weights -= learning_rate * gradients\n    predictions = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    predicted_labels = [1 if prediction > 0.5 else 0 for prediction in predictions]\n    predicted_labels = [unique_labels[label] for label in predicted_labels]\n    return predicted_labels"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    w = np.ones(len(y_train)) / len(y_train)\n    stumps = []\n    for _ in range(n_estimators):\n        best_stump = find_best_stump(X_train, y_train, w)\n        stumps.append(best_stump)\n        w = update_weights(w, best_stump, X_train, y_train)\n        w = w / w.sum()\n        if np.all(w * (y_train != best_stump['h'])) == 0:\n            break\n    predictions = []\n    for x in X_test:\n        vote = 0\n        for stump in stumps:\n            vote += stump['\u03b1'] * stump['h'](x)\n        predictions.append(np.sign(vote).astype(int))\n    return predictions\ndef find_best_stump(X_train: np.ndarray, y_train: np.ndarray, w: np.ndarray) -> dict:\n    best_error = 1\n    best_stump = None\n    for feature_index in range(X_train.shape[1]):\n        for threshold in np.unique(X_train[:, feature_index]):\n            for polarity in [-1, 1]:\n                error = weighted_error(X_train, y_train, w, feature_index, threshold, polarity)\n                if error < best_error:\n                    best_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, '\u03b1': 0, 'h': lambda x: polarity * (x[feature_index] < threshold)}\n    return best_stump\ndef weighted_error(X_train: np.ndarray, y_train: np.ndarray, w: np.ndarray, feature_index: int, threshold: float, polarity: int) -> float:\n    error = np.sum(w * (y_train != polarity * (X_train[:, feature_index] < threshold)))\n    return error\ndef update_weights(w: np.ndarray, stump: dict, X_train: np.ndarray, y_train: np.ndarray) -> np.ndarray:\n    error = weighted_error(X_train, y_train, w, stump['feature_index'], stump['threshold'], stump['polarity'])\n    \u03b1 = 0.5 * np.log((1 - error) / (error + 1e-10))\n    w = w * np.exp(-\u03b1 * y_train * stump['polarity'] * (X_train[:, stump['feature_index']] < stump['threshold']))\n    return w"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (isinstance(n_dims, int) and n_dims > 0 and isinstance(num_particles, int) and (num_particles > 0) and isinstance(num_iterations, int) and (num_iterations > 0)):\n        return -1\n    rng = np.random.default_rng(seed)\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    personal_best = particles.copy()\n    global_best = particles[0]\n    objective_values = np.sum(particles ** 2, axis=1)\n    best_objective_value = np.min(objective_values)\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, num_particles)\n        r2 = rng.uniform(0, 1, num_particles)\n        velocities = 0.5 * velocities + 1.5 * r1 * (personal_best - particles) + 1.5 * r2 * (global_best - particles)\n        particles = np.clip(particles + velocities, -1, 1)\n        personal_best = np.where(np.sum(particles ** 2, axis=1) < np.sum(personal_best ** 2, axis=1), particles, personal_best)\n        global_best = np.where(np.sum(particles ** 2, axis=1) < np.sum(global_best ** 2, axis=1), particles, global_best)\n        objective_values = np.sum(particles ** 2, axis=1)\n        best_objective_value = np.min(objective_values)\n    return round(best_objective_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    distances = []\n    for x_test in X_test:\n        for (x_train, y_train_i) in zip(X_train, y_train):\n            distance = np.sqrt(np.sum((np.array(x_test) - np.array(x_train)) ** 2))\n            distances.append((distance, y_train_i))\n    distances.sort(key=lambda x: x[0])\n    k_neighbours = distances[:k]\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    if task == 'classification':\n        labels = [neighbour[1] for neighbour in k_neighbours]\n        label_counts = Counter(labels)\n        most_frequent_label = min(label_counts, key=lambda x: (label_counts[x], x))\n        return [most_frequent_label] * len(X_test)\n    elif task == 'regression':\n        targets = [neighbour[1] for neighbour in k_neighbours]\n        average_target = round(np.mean(targets), 4)\n        return [average_target] * len(X_test)\n    else:\n        raise ValueError(\"Invalid task type. Must be 'classification' or 'regression'.\")"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"\n    Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    root = Node(X_train, y_train, max_depth)\n    root.build_tree()\n    predictions = []\n    for x in X_test:\n        predictions.append(root.predict(x))\n    return predictions\nclass Node:\n\n    def __init__(self, X, y, max_depth, parent=None):\n        self.X = X\n        self.y = y\n        self.max_depth = max_depth\n        self.parent = parent\n        self.left = None\n        self.right = None\n        self.label = None\n\n    def build_tree(self):\n        if len(np.unique(self.y)) == 1:\n            self.label = np.bincount(self.y).argmax()\n            return\n        if self.max_depth is not None and self.max_depth == 0:\n            self.label = np.bincount(self.y).argmax()\n            return\n        (best_feature, best_threshold) = self.find_best_split()\n        self.split(best_feature, best_threshold)\n        if self.left is not None:\n            self.left.build_tree()\n        if self.right is not None:\n            self.right.build_tree()\n\n    def find_best_split(self):\n        best_feature = None\n        best_threshold = None\n        best_gini = 0\n        for feature in range(self.X.shape[1]):\n            thresholds = self.get_thresholds(feature)\n            for threshold in thresholds:\n                (left_gini, right_gini) = self.gini(self.X[:, feature], self.y, threshold)\n                gini_gain = self.gini_gain(left_gini, right_gini)\n                if gini_gain > best_gini:\n                    best_gini = gini_gain\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def get_thresholds(self, feature):\n        thresholds = []\n        for i in range(self.X.shape[0] - 1):\n            if self.X[i, feature] != self.X[i + 1, feature]:\n                thresholds.append((self.X[i, feature] + self.X[i + 1, feature]) / 2)\n        return thresholds\n\n    def gini(self, X, y, threshold):\n        left_indices = X < threshold\n        right_indices = X >= threshold\n        left_y = y[left_indices]\n        right_y = y[right_indices]\n        left_gini = 1 - np.sum((np.bincount(left_y) / len(left_y)) ** 2)\n        right_gini = 1 - np.sum((np.bincount(right_y) / len(right_y)) ** 2)\n        return (left_gini, right_gini)\n\n    def gini_gain(self, left_gini, right_gini):\n        return self.gini_parent - (len(self.y) * left_gini + len(self.y) * right_gini)\n\n    def gini_parent(self):\n        return 1 - np.sum((np.bincount(self.y) / len(self.y)) ** 2)\n\n    def split(self, feature, threshold):\n        left_indices = self.X[:, feature] < threshold\n        right_indices = self.X[:, feature] >= threshold\n        self.left = Node(self.X[left_indices], self.y[left_indices], self.max_depth, self)\n        self.right = Node(self.X[right_indices], self.y[right_indices], self.max_depth, self)\n\n    def predict(self, x):\n        if self.label is not None:\n            return self.label\n        if self.left is None and self.right is None:\n            return self.parent.predict(x)\n        if x[self.parent.X[:, 0] < x[0]].any():\n            return self.left.predict(x)\n        return self.right.predict(x)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_classes) = np.unique(y, return_counts=True)\n    G_whole_dataset = 1 - np.sum((n_classes / n_samples) ** 2)\n    G_whole_dataset = round(G_whole_dataset, 4)\n    if len(n_classes) == 1:\n        return (-1, None, G_whole_dataset)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = float('inf')\n    for j in range(X.shape[1]):\n        unique_values = np.unique(X[:, j])\n        for v in unique_values:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            n_total = n_left + n_right\n            G_left = 1 - np.sum((np.bincount(y[left_mask]) / n_left) ** 2)\n            G_right = 1 - np.sum((np.bincount(y[right_mask]) / n_right) ** 2)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini:\n                best_feature_index = j\n                best_threshold_value = v\n                best_gini = G_split\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if j < best_feature_index or (j == best_feature_index and v < best_threshold_value):\n                    best_feature_index = j\n                    best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def _validate(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        if not all((isinstance(i, (int, float)) for i in x)) or not all((isinstance(i, (int, float)) for i in y)):\n            return False\n        return True\n\n    def _euclidean(x, y):\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def _manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def _chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def _cosine(x, y):\n        x_norm = np.linalg.norm(np.array(x))\n        y_norm = np.linalg.norm(np.array(y))\n        if x_norm == 0 or y_norm == 0:\n            return -1\n        return round(1 - np.dot(np.array(x), np.array(y)) / (x_norm * y_norm), 4)\n    metrics = {'euclidean': _euclidean, 'manhattan': _manhattan, 'chebyshev': _chebyshev, 'cosine': _cosine}\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        if not _validate(x, y):\n            return -1\n        return metrics[name](x, y)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"\n    Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if cont_action:\n        n_actions_per_dim = [np.inf] * env.action_space.shape[0]\n        action_ids = None\n    else:\n        n_actions_per_dim = []\n        for dim in env.action_space.spaces:\n            if hasattr(dim, 'n'):\n                n_actions_per_dim.append(dim.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        if md_action:\n            ranges = [list(range(dim.n)) if hasattr(dim, 'n') else dim.shape for dim in env.action_space.spaces]\n            action_ids = list(product(*ranges))\n        else:\n            action_ids = [env.action_space.n]\n    action_dim = len(env.action_space.spaces)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    assert k <= n_samples, 'k must be less than or equal to n_samples'\n    medoids = X[:k]\n    labels = np.zeros(n_samples, dtype=int)\n    total_cost = np.inf\n    while True:\n        distances = np.linalg.norm(X[:, np.newaxis] - medoids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_total_cost = np.sum(np.min(distances, axis=1))\n        if new_total_cost == total_cost:\n            break\n        total_cost = new_total_cost\n        for i in range(k):\n            for j in range(n_samples):\n                if labels[j] != i:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_distances = np.linalg.norm(X[:, np.newaxis] - new_medoids, axis=2)\n                    new_labels = np.argmin(new_distances, axis=1)\n                    new_total_cost = np.sum(np.min(new_distances, axis=1))\n                    if new_total_cost < total_cost:\n                        medoids[i] = X[j]\n                        labels = new_labels\n                        total_cost = new_total_cost\n                        break\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if len(x_train) != len(y_train):\n        return -1\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n    if n_iterations <= 0:\n        return -1\n    x_train_poly = np.array(x_train)\n    x_test_poly = np.array(x_test)\n    for i in range(1, degree):\n        x_train_poly = np.hstack((x_train_poly, np.power(x_train_poly[:, :-1], i).T))\n        x_test_poly = np.hstack((x_test_poly, np.power(x_test_poly[:, :-1], i).T))\n    x_train_poly = np.hstack((np.ones((x_train_poly.shape[0], 1)), x_train_poly))\n    x_test_poly = np.hstack((np.ones((x_test_poly.shape[0], 1)), x_test_poly))\n    x_train_poly -= np.mean(x_train_poly, axis=0)\n    x_train_poly /= np.std(x_train_poly, axis=0)\n    x_test_poly -= np.mean(x_test_poly, axis=0)\n    x_test_poly /= np.std(x_test_poly, axis=0)\n    w = np.zeros(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_poly, w)\n        dw = (2 * np.dot(x_train_poly.T, y_pred - y_train) + 2 * reg_factor * l1_ratio * np.sign(w) + 2 * reg_factor * (1 - l1_ratio) * w) / x_train_poly.shape[0]\n        w -= learning_rate * dw\n    y_pred_test = np.dot(x_test_poly, w)\n    return np.round(y_pred_test, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    actual = np.where(actual > 0, 1, -1)\n    probability = 1 / (1 + np.exp(-predicted))\n    gradient = actual * probability * (1 - probability)\n    hessian = probability * (1 - probability)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    probability = np.round(probability, 6)\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = probability.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_value = calculate_hand_value(player)\n    dealer_value = calculate_hand_value(dealer)\n    if is_natural_blackjack(player):\n        return 1.5 if is_natural_blackjack(dealer) else 1.5\n    if is_bust(player):\n        return -1\n    if is_bust(dealer):\n        return 1\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0\ndef calculate_hand_value(hand: list[int]) -> int:\n    \"\"\"Calculate the value of a hand.\n\n    Args:\n        hand: List of integers (1\u201310) representing the hand.\n\n    Returns:\n        The value of the hand.\n    \"\"\"\n    value = sum(hand)\n    aces = sum((1 for card in hand if card == 1))\n    while value + 10 <= 21 and aces:\n        value += 10\n        aces -= 1\n    return value\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if a hand is a natural blackjack.\n\n    Args:\n        hand: List of integers (1\u201310) representing the hand.\n\n    Returns:\n        True if the hand is a natural blackjack, False otherwise.\n    \"\"\"\n    return len(hand) == 2 and 1 in hand and (10 in hand)\ndef is_bust(hand: list[int]) -> bool:\n    \"\"\"Check if a hand is a bust.\n\n    Args:\n        hand: List of integers (1\u201310) representing the hand.\n\n    Returns:\n        True if the hand is a bust, False otherwise.\n    \"\"\"\n    return calculate_hand_value(hand) > 21"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    if not (isinstance(actual, (list, tuple, np.ndarray)) and isinstance(predicted, (list, tuple, np.ndarray))):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    msle = round(msle, 4)\n    return msle"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.asarray(z)\n    sigmoid_pos = 1 / (1 + np.exp(-z))\n    sigmoid_neg = np.exp(z) / (1 + np.exp(z))\n    sigmoid_result = np.where(z >= 0, sigmoid_pos, sigmoid_neg)\n    sigmoid_result = np.round(sigmoid_result, 4)\n    if isinstance(z, np.ndarray):\n        return sigmoid_result.tolist()\n    else:\n        return sigmoid_result.item()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.where(z >= 0, z, a * z).tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(i, a) if isinstance(i, (list, np.ndarray)) else leaky_relu(i, a) if isinstance(i, (int, float)) else i for i in z]\n    else:\n        return a * z if z < 0 else z"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    predictions = np.zeros((X_test.shape[0], n_clf))\n    for i in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_idx in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                left_idx = np.where(X_train[:, feature_idx] < threshold)[0]\n                right_idx = np.where(X_train[:, feature_idx] >= threshold)[0]\n                left_error = np.sum(weights[left_idx] * (y_train[left_idx] != 1))\n                right_error = np.sum(weights[right_idx] * (y_train[right_idx] != -1))\n                error = (left_error + right_error) / n_samples\n                if error < min_error:\n                    min_error = error\n                    best_stump = (feature_idx, threshold, 1 if np.sum(weights[left_idx]) > np.sum(weights[right_idx]) else -1)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        weights[left_idx] *= np.exp(-alpha * y_train[left_idx] * best_stump[2])\n        weights[right_idx] *= np.exp(-alpha * y_train[right_idx] * best_stump[2])\n        weights /= np.sum(weights)\n        predictions[:, i] = np.where(X_test[:, best_stump[0]] < best_stump[1], best_stump[2], -best_stump[2])\n    final_predictions = np.sign(np.sum(predictions, axis=1))\n    return final_predictions.astype(int).tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.randn(*shape)\n    (U, S, Vh) = np.linalg.svd(A)\n    Q = U if U.shape == A.shape else Vh.T\n    Q = Q.reshape(shape)\n    Q *= scale\n    result = Q.tolist()\n    return result"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 16 * z1\n    logits = 4 * z3\n    action_probs = np.array([1 / 3, 1 / 3, 1 / 3])\n    state_value = 64 * z1\n    action_probs = np.round(action_probs, 4)\n    state_value = np.round(state_value, 4)\n    return (action_probs.tolist(), state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    hidden = np.dot(state, params['W1']) + params['b1']\n    hidden = np.maximum(hidden, 0)\n    hidden = np.dot(hidden, params['W2']) + params['b2']\n    hidden = np.maximum(hidden, 0)\n    hidden = np.dot(hidden, params['W3']) + params['b3']\n    hidden = np.maximum(hidden, 0)\n    scores = np.dot(hidden, params['Wa']) + params['ba']\n    probabilities = np.exp(scores) / np.sum(np.exp(scores))\n    value = np.dot(hidden, params['Wc']) + params['bc']\n    probabilities = [round(p, 4) if p != 0 else round(p, 1) for p in probabilities]\n    value = round(value, 4)\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_norm = np.linalg.norm(w)\n    penalty = alpha * (l1_ratio * l2_norm + (1 - l1_ratio) * 0.5 * np.dot(w, w))\n    gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n    if not gradient:\n        penalty = round(penalty, 4)\n    else:\n        gradient = np.round(gradient, 4).tolist()\n    return penalty if not gradient else gradient"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            for k in range(param.shape[2]):\n                param_plus_epsilon = deepcopy(param)\n                param_plus_epsilon[i, j, k] += epsilon\n                param_minus_epsilon = deepcopy(param)\n                param_minus_epsilon[i, j, k] -= epsilon\n                model.flush_gradients()\n                predictions_plus_epsilon = []\n                predictions_minus_epsilon = []\n                for t in range(n_t):\n                    predictions_plus_epsilon.append(model.forward(X[:, :, t]))\n                    predictions_minus_epsilon.append(model.forward(X[:, :, t]))\n                loss_plus_epsilon = loss_func(predictions_plus_epsilon)\n                loss_minus_epsilon = loss_func(predictions_minus_epsilon)\n                grads[i, j, k] = (loss_plus_epsilon - loss_minus_epsilon) / (2 * epsilon)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    m = X_train.shape[0]\n    w = np.ones(m) / m\n    clf = []\n    for t in range(n_clf):\n        best_idx = None\n        best_err = 1.0\n        for i in range(X_train.shape[1]):\n            idx_left = X_train[:, i] < np.median(X_train[:, i])\n            idx_right = np.logical_not(idx_left)\n            err_left = np.sum(w[idx_left] * (y_train[idx_left] != 1))\n            err_right = np.sum(w[idx_right] * (y_train[idx_right] != -1))\n            err = (err_left + err_right) / np.sum(w)\n            if err < best_err:\n                best_err = err\n                best_idx = i\n        clf.append((best_idx, np.median(X_train[:, best_idx])))\n        y_pred = np.where(X_train[:, best_idx] < clf[-1][1], 1, -1)\n        err = np.sum(w * (y_pred != y_train)) / np.sum(w)\n        alpha = 0.5 * np.log((1 - err) / err)\n        w = w * np.exp(-alpha * y_train * y_pred)\n        w = w / np.sum(w)\n    y_pred = np.zeros(X_test.shape[0])\n    for i in range(X_test.shape[0]):\n        for t in range(n_clf):\n            x = X_test[i, clf[t][0]]\n            if x < clf[t][1]:\n                y_pred[i] += clf[t][1] * 2\n            else:\n                y_pred[i] -= clf[t][1] * 2\n        y_pred[i] = np.sign(y_pred[i])\n    return y_pred.tolist()"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=s, size=shape).astype(np.float32)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in V]\n    for (u, v) in E:\n        i_u = V.index(u)\n        i_v = V.index(v)\n        G[i_u].append(v)\n        G[i_v].append(u)\n    for i in range(len(G)):\n        G[i] = sorted(list(set(G[i])))\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = None\n    best_error = float('inf')\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for polarity in [-1, 1]:\n            for threshold in unique_values:\n                predictions = np.zeros(n_samples)\n                for i in range(n_samples):\n                    if (X[i, feature_index] < threshold) == (polarity == 1):\n                        predictions[i] = 1\n                    else:\n                        predictions[i] = -1\n                error = np.sum(sample_weights * np.abs(predictions - y))\n                if error < best_error:\n                    best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(error, 4)}\n                    best_error = error\n    return best_stump"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    if len(np.unique(feature)) == 1:\n        return (None, 0.0)\n    sorted_idx = np.argsort(feature)\n    feature = feature[sorted_idx]\n    target = target[sorted_idx]\n\n    def shannon_entropy(target):\n        counter = Counter(target)\n        total = len(target)\n        entropy = 0.0\n        for count in counter.values():\n            prob = count / total\n            entropy -= prob * math.log2(prob)\n        return entropy\n    max_info_gain = 0.0\n    best_threshold = None\n    for i in range(1, len(feature)):\n        left_target = target[:i]\n        right_target = target[i:]\n        left_entropy = shannon_entropy(left_target)\n        right_entropy = shannon_entropy(right_target)\n        info_gain = shannon_entropy(target) - len(left_target) / len(target) * left_entropy - len(right_target) / len(target) * right_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = (feature[i - 1] + feature[i]) / 2\n    return (round(best_threshold, 4), round(max_info_gain, 4))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is None or not callable(initializer):\n        raise ValueError('Invalid initialization function.')\n    return initializer"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Args:\n    X (np.ndarray): Input feature map with shape (N, C, H, W)\n    pool_shape (tuple[int, int]): Pooling window size (p_h, p_w)\n    stride (tuple[int, int]): Stride (s_h, s_w)\n    accum_grad (np.ndarray): Accumulated gradient with shape identical to forward output\n\n    Returns:\n    tuple[list, list]: (pooled_output, grad_input) as lists\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    pooled_output = np.zeros((N, C, H // s_h, W // s_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, H, s_h):\n                for j in range(0, W, s_w):\n                    pooled_output[n, c, i // s_h, j // s_w] = np.mean(X[n, c, i:i + p_h, j:j + p_w])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, H, s_h):\n                for j in range(0, W, s_w):\n                    grad_input[n, c, i:i + p_h, j:j + p_w] += accum_grad[n, c, i // s_h, j // s_w] / (p_h * p_w)\n    pooled_output = pooled_output.round(4).tolist()\n    grad_input = grad_input.round(4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"\n    Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function returns ``-1``.\n    \"\"\"\n    if len(parent1) != len(parent2) or any((len(row1) != len(row2) for (row1, row2) in zip(parent1, parent2))):\n        return -1\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    child1 = np.concatenate((parent1_array[:, :cutoff], parent2_array[:, cutoff:]), axis=1).tolist()\n    child2 = np.concatenate((parent2_array[:, :cutoff], parent1_array[:, cutoff:]), axis=1).tolist()\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for (i, edges) in enumerate(G['_G']):\n        v = list(G['_V2I'].keys())[i]\n        adj[v] = []\n        for edge in edges:\n            (u, w) = (edge[0], edge[2])\n            if G['is_directed']:\n                adj[v].append((u, w))\n            else:\n                adj[v].append((u, w))\n                adj[u].append((v, w))\n        adj[v].sort()\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.isin(x, [0, 1]))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    padded_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_sentence = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        padded_corpus.append(padded_sentence)\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in padded_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            ngram_counts[ngram] += 1\n            prefix = tuple(sentence[i:i + N - 1])\n            prefix_counts[prefix] += 1\n    probabilities = []\n    for i in range(len(query.split()) - N + 1):\n        ngram = tuple(query.split()[i:i + N])\n        prefix = tuple(query.split()[i:i + N - 1])\n        if ngram_counts[ngram] == 0:\n            return float('-inf')\n        probability = ngram_counts[ngram] / prefix_counts[prefix]\n        probabilities.append(math.log(probability))\n    return round(sum(probabilities), 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    np.fill_diagonal(W, 0)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]\n    centroids = E[:k]\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        distances = np.linalg.norm(E - centroids[:, np.newaxis], axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((k, n_features))\n        for i in range(k):\n            cluster_indices = np.where(labels == i)[0]\n            if len(cluster_indices) > 0:\n                new_centroids[i] = np.mean(E[cluster_indices], axis=0)\n            else:\n                new_centroids[i] = E[np.random.choice(n_samples, 1)][0]\n        if np.all(labels == np.argmin(np.linalg.norm(E - new_centroids[:, np.newaxis], axis=2), axis=1)):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"\n    Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_label, prev_mine) = params[max(0, ix - 1)] if ix > 0 else ('', '')\n    (curr_label, curr_mine) = params[ix]\n    prev_line = f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n'\n    curr_line = f'Mine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}\\n'\n    if warn_str:\n        warn_line = f'{warn_str}\\n'\n    else:\n        warn_line = ''\n    result = f\"{'-' * 25}\\n{prev_line}{curr_line}{warn_line}{'-' * 23}\\n\"\n    return result"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu: float=0.0, V: np.ndarray=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    (N, M) = X.shape\n    V_inv = None\n    if V is not None:\n        if np.isscalar(V):\n            V_inv = np.eye(M) / V\n        elif len(V) == M:\n            V_inv = np.diag(1 / V)\n        elif len(V) == M + 1:\n            V_inv = np.diag(1 / V[1:])\n        else:\n            V_inv = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    X_T_y = X.T @ y\n    V_inv_X_T_X = V_inv @ X_T_X if V_inv is not None else X_T_X\n    Sigma_b = np.linalg.inv(V_inv_X_T_X)\n    mu_b = Sigma_b @ (V_inv @ mu + X_T_y)\n    mu_b = np.round(mu_b, 4).tolist()\n    return mu_b"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + fs / 2 / 700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_values = 700 * (10 ** (mel_values / 2595) - 1)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            centre_freq = k * fs / N\n            left_slope = (freq_values[i + 1] - centre_freq) / (freq_values[i + 1] - freq_values[i])\n            right_slope = (centre_freq - freq_values[i]) / (freq_values[i + 1] - freq_values[i])\n            slope = max(left_slope, right_slope)\n            filterbank[i, k] = slope\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (freq_values[i + 2] - freq_values[i])\n    return filterbank.astype(np.float32).tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    window = np.zeros(window_len)\n    for n in range(window_len):\n        if symmetric:\n            window[n] = a0 - a1 * np.cos(2 * np.pi * n / (window_len - 1)) + a2 * np.cos(4 * np.pi * n / (window_len - 1)) - a3 * np.cos(6 * np.pi * n / (window_len - 1))\n        else:\n            window[n] = a0 - a1 * np.cos(2 * np.pi * n / window_len) + a2 * np.cos(4 * np.pi * n / window_len) - a3 * np.cos(6 * np.pi * n / window_len)\n    window = np.round(window, 4)\n    window = window.tolist()\n    return window"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if d < 0 or d >= len(gamma) or t < 0 or (t >= len(gamma[0])):\n        return 0.0\n    row_sum = sum(gamma[d])\n\n    def digamma(x):\n        if x < 6:\n            return digamma(x + 1) - 1 / x\n        else:\n            return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    exp = digamma(gamma[d][t]) - digamma(row_sum)\n    return round(exp, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (curr_prediction, curr_label) = params[ix]\n    (prev_prediction, prev_label) = params[max(ix - 1, 0)]\n    curr_gold = golds[curr_label]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"\n    Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    for _ in range(n_estimators):\n        (best_feature, best_threshold, best_polarity) = find_best_stump(X_train, y_train, weights)\n        weak_learner = DecisionStump(best_feature, best_threshold, best_polarity)\n        epsilon = weighted_error(weak_learner, X_train, y_train, weights)\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        weights = update_weights(weights, alpha, weak_learner, X_train, y_train)\n        weak_learners.append(weak_learner)\n    predictions = []\n    for x in X_test:\n        prediction = 1\n        for weak_learner in weak_learners:\n            prediction += alpha * weak_learner.predict(x)\n        predictions.append(math.copysign(1, prediction))\n    return predictions\nclass DecisionStump:\n\n    def __init__(self, feature, threshold, polarity):\n        self.feature = feature\n        self.threshold = threshold\n        self.polarity = polarity\n\n    def predict(self, x):\n        if x[self.feature] < self.threshold:\n            return self.polarity\n        else:\n            return -self.polarity\ndef find_best_stump(X_train, y_train, weights):\n    (n_samples, n_features) = X_train.shape\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    min_error = float('inf')\n    for feature in range(n_features):\n        thresholds = np.unique(X_train[:, feature])\n        for threshold in thresholds:\n            polarity = 1 if np.mean(y_train[X_train[:, feature] < threshold]) > 0.5 else -1\n            error = weighted_error(DecisionStump(feature, threshold, polarity), X_train, y_train, weights)\n            if error < min_error:\n                min_error = error\n                best_feature = feature\n                best_threshold = threshold\n                best_polarity = polarity\n    return (best_feature, best_threshold, best_polarity)\ndef weighted_error(weak_learner, X_train, y_train, weights):\n    predictions = [weak_learner.predict(x) for x in X_train]\n    errors = [(1 - y * prediction) * weight for (y, prediction, weight) in zip(y_train, predictions, weights)]\n    return np.mean(errors)\ndef update_weights(weights, alpha, weak_learner, X_train, y_train):\n    predictions = [weak_learner.predict(x) for x in X_train]\n    errors = [1 - y * prediction for (y, prediction) in zip(y_train, predictions)]\n    weights *= np.exp(-alpha * errors)\n    weights /= np.sum(weights)\n    return weights"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    freqs = np.arange(N) * delta_f\n    if positive_only:\n        freqs = freqs[:N // 2 + 1]\n    return freqs.tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_samples = np.any(oob_mask, axis=1)\n    if not np.any(oob_samples):\n        return -1.0\n    oob_preds = predictions[oob_samples, :][oob_mask[oob_samples, :]]\n    avg_oob_preds = np.mean(oob_preds, axis=1)\n    squared_errors = (avg_oob_preds - y_true[oob_samples]) ** 2\n    oob_mse = np.mean(squared_errors)\n    return round(oob_mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    ordered_items = sorted(frequent_items, key=lambda item: (-frequent_items[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = sorted(set(transaction) & set(frequent_items), key=lambda item: ordered_items.index(item))\n        current_node = root\n        for item in transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if Y is None:\n        Y = X\n    elif len(X[0]) != len(Y[0]):\n        return -1\n    X = np.array(X)\n    Y = np.array(Y)\n    dot_product = np.dot(X, Y.T)\n    kernel_matrix = dot_product + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    kernel_matrix = kernel_matrix.tolist()\n    return kernel_matrix"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    updated_param = np.where(grad == 0, param, updated_param)\n    updated_param = updated_param.round(8).tolist()\n    m_t = m_t.round(8).tolist()\n    v_t = v_t.round(8).tolist()\n    return (updated_param, m_t, v_t)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    idx = np.argsort(rewards)[::-1][:int(retain_prcnt * len(rewards))]\n    elite_samples = theta_samples[idx]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean = [round(val, 4) for val in mean]\n    variance = [round(val, 4) for val in variance]\n    return (mean, variance)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels = np.array(labels)\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    if total_labels == 0:\n        return 0.0\n    if len(label_counts) == 1:\n        return 0.0\n    entropy = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        if probability > 0:\n            entropy -= probability * math.log2(probability)\n    return round(entropy, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch_k, out_ch) = W.shape\n    out_rows = (in_rows + 2 * pad - kernel_rows) // stride + 1\n    out_cols = (in_cols + 2 * pad - kernel_cols) // stride + 1\n    Y = np.zeros((n_ex, out_rows, out_cols, out_ch), dtype=np.float32)\n    X_col = im2col(X, kernel_rows, kernel_cols, stride, pad, dilation)\n    for i in range(out_ch):\n        Y[:, :, :, i] = np.dot(X_col[:, :, i], W[:, :, :, i])\n    return Y.tolist()\ndef im2col(X, kernel_rows, kernel_cols, stride, pad, dilation):\n    \"\"\"Performs the im2col transformation.\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        kernel_rows: Number of rows in the kernel.\n        kernel_cols: Number of columns in the kernel.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Dilation factor.\n\n    Returns:\n        The im2col transformed array.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    out_rows = (in_rows + 2 * pad - kernel_rows) // stride + 1\n    out_cols = (in_cols + 2 * pad - kernel_cols) // stride + 1\n    X_col = np.zeros((n_ex * kernel_rows * kernel_cols, out_rows * out_cols * in_ch), dtype=np.float32)\n    for i in range(n_ex):\n        for j in range(in_rows):\n            for k in range(in_cols):\n                for c in range(in_ch):\n                    start_row = max(0, j - pad)\n                    end_row = min(in_rows, j + pad + 1)\n                    start_col = max(0, k - pad)\n                    end_col = min(in_cols, k + pad + 1)\n                    start_out_row = (j - start_row) // stride\n                    end_out_row = (end_row - j - 1) // stride\n                    start_out_col = (k - start_col) // stride\n                    end_out_col = (end_col - k - 1) // stride\n                    kernel_idx = (i * in_rows * in_cols * in_ch + j * in_cols * in_ch + k * in_ch + c) * kernel_rows * kernel_cols\n                    out_idx = (i * out_rows * out_cols * in_ch + start_out_row * out_cols * in_ch + start_out_col * in_ch + c) * kernel_rows * kernel_cols\n                    X_col[out_idx:out_idx + kernel_rows * kernel_cols] = X[i, start_row:end_row, start_col:end_col, c].flatten()\n    return X_col"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centred_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (u, s, vh) = np.linalg.svd(centred_data, full_matrices=False)\n        directions = vh[:n_components]\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigen_values, directions) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(-eigen_values)\n        directions = directions[:, idx]\n        directions = directions[:, :n_components]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    for i in range(directions.shape[1]):\n        if np.any(directions[:, i] < 0):\n            directions[:, i] *= -1\n    scores = np.dot(centred_data, directions)\n    scores = [list(map(round, row)) for row in scores.round(4).tolist()]\n    explained_variance_ratio = np.round(np.var(scores, axis=0) / np.sum(np.var(centred_data, axis=0)), 4)\n    return (scores, explained_variance_ratio.tolist())"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K]\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(K)])\n        new_centroids[~np.any(data[labels == np.arange(K), :] != 0, axis=1)] = centroids[np.arange(K)]\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    sorted_centroids = np.round(sorted_centroids, decimals=4)\n    return sorted_centroids.tolist()"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    data = np.round(data, 4)\n    return data.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = isinstance(env.action_space, Box) or (tuple_action and all((isinstance(s, Box) for s in env.action_space.spaces)))\n    cont_obs = isinstance(env.observation_space, Box) or (tuple_obs and all((isinstance(s, Box) for s in env.observation_space.spaces.values())))\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        return np.argmax(np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True)), axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_channels, out_channels) = W.shape\n    if n_examples == 1:\n        X = X[0]\n    if in_channels == 1:\n        W = W[:, 0, :]\n    if out_channels == 1:\n        W = W[:, :, 0]\n    if pad == 'same':\n        out_len = (signal_length + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        raise ValueError('Invalid padding value')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output = np.zeros((n_examples, out_len, out_channels))\n    for i in range(n_examples):\n        for j in range(out_len):\n            for k in range(out_channels):\n                output[i, j, k] = np.sum(X_padded[i, j * stride:(j + 1) * stride, :] * W[:, :, k])\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if len(y) == 0:\n        return 0.0\n    (classes, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    gini_impurity = 1 - np.sum(p ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n    X (np.ndarray): Feature matrix of shape (m, n)\n    y (np.ndarray): Target vector of shape (m,)\n    learning_rate (float, optional): Learning rate for gradient descent. Defaults to 0.01.\n    n_iterations (int, optional): Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n    tuple[list[float], float]: A tuple containing the learned weights and bias, rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    n = X.shape[1]\n    weights = np.zeros(n)\n    bias = 0\n    for _ in range(n_iterations):\n        predictions = np.dot(X, weights) + bias\n        dw = 2 / X.shape[0] * np.dot(X.T, predictions - y)\n        db = 2 / X.shape[0] * np.sum(predictions - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n\n    Returns:\n    list: List of negative gradients g rounded to four decimal places.\n         Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return [-1] * len(f)\n    y_prime = [2 * label - 1 for label in y]\n    g = [y_prime_i / (1 + np.exp(y_prime_i * f_i)) for (y_prime_i, f_i) in zip(y_prime, f)]\n    g = [round(g_i, 4) for g_i in g]\n    return g"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"\n    Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if order == 0:\n        elu = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        return (scale * elu).round(4).tolist()\n    elif order == 1:\n        return np.where(x > 0, scale, scale * np.exp(x)).round(4).tolist()\n    elif order == 2:\n        return np.where(x > 0, 0, scale * np.exp(x)).round(4).tolist()\n    else:\n        raise ValueError('Invalid order. Supported orders are 0, 1, and 2.')"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"\n    Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    predictions = [np.mean(y)] * len(x)\n    for _ in range(n_estimators):\n        residuals = [y_i - pred_i for (y_i, pred_i) in zip(y, predictions)]\n        sorted_indices = np.argsort(x)\n        x_sorted = [x[i] for i in sorted_indices]\n        residuals_sorted = [residuals[i] for i in sorted_indices]\n        valid_splits = []\n        for i in range(len(x_sorted) - 1):\n            split = (x_sorted[i] + x_sorted[i + 1]) / 2\n            valid_splits.append(split)\n        best_split = None\n        best_error = float('inf')\n        for split in valid_splits:\n            left_residuals = residuals_sorted[:i + 1]\n            right_residuals = residuals_sorted[i + 1:]\n            left_mean = np.mean(left_residuals)\n            right_mean = np.mean(right_residuals)\n            stump_pred = [left_mean if x_i <= split else right_mean for x_i in x_sorted]\n            error = np.sum([r ** 2 for r in residuals_sorted])\n            if error < best_error:\n                best_error = error\n                best_split = split\n        if best_split is None:\n            best_split = np.mean(residuals_sorted)\n            stump_pred = [best_split] * len(x_sorted)\n        predictions = [pred + learning_rate * stump_pred[i] for (i, pred) in enumerate(predictions)]\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    Eg = np.maximum(Eg, 1e-08)\n    w_next = w - learning_rate * grad / np.sqrt(Eg)\n    w_next = w_next.round(4).tolist()\n    Eg = Eg.round(4).tolist()\n    return (w_next, Eg)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        result = np.where(x >= 0, 1, alpha * (np.exp(x) - 1) + alpha)\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    result = [round(val, 4) for val in result]\n    return result"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    tuple_actions = any((isinstance(action, (list, tuple, np.ndarray)) for action in actions))\n    tuple_observations = any((isinstance(obs, (list, tuple, np.ndarray)) for obs in observations))\n    multidim_actions = any((len(action) > 1 for action in actions))\n    multidim_observations = any((len(obs) > 1 for obs in observations))\n    continuous_actions = any((isinstance(action, float) and action % 1 != 0 for action in actions))\n    continuous_observations = any((isinstance(obs, float) and obs % 1 != 0 for obs in observations))\n    action_dim = max((len(action) for action in actions)) if multidim_actions else 1\n    obs_dim = max((len(obs) for obs in observations)) if multidim_observations else 1\n    action_ids = [[action[i] for action in actions] for i in range(action_dim)]\n    obs_ids = [[obs[i] for obs in observations] for i in range(obs_dim)]\n    n_actions_per_dim = [len(set(action)) for action in action_ids]\n    n_obs_per_dim = [len(set(obs)) for obs in obs_ids]\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.mean(y_train)\n    residuals = y_train - predictions\n    tree_predictions = []\n    for _ in range(n_estimators):\n        tree = CART_regression_tree(X_train, residuals, max_depth)\n        predictions += learning_rate * tree.predict(X_train)\n        residuals = y_train - predictions\n        tree_predictions.append(tree.predict(X_test))\n    final_predictions = np.sum([learning_rate * pred for pred in tree_predictions], axis=0)\n    return [round(pred, 4) for pred in final_predictions]\nclass CART_regression_tree:\n\n    def __init__(self, X: np.ndarray, y: np.ndarray, max_depth: int):\n        self.max_depth = max_depth\n        self.tree = self._build_tree(X, y, max_depth)\n\n    def _build_tree(self, X: np.ndarray, y: np.ndarray, depth: int):\n        if depth == 0 or len(np.unique(y)) == 1:\n            return np.mean(y)\n        (best_feature, best_threshold) = self._find_best_split(X, y)\n        (left_X, left_y, right_X, right_y) = self._split_data(X, y, best_feature, best_threshold)\n        left_child = self._build_tree(left_X, left_y, depth - 1)\n        right_child = self._build_tree(right_X, right_y, depth - 1)\n        return lambda x: left_child if x[best_feature] < best_threshold else right_child\n\n    def _find_best_split(self, X: np.ndarray, y: np.ndarray):\n        best_feature = None\n        best_threshold = None\n        best_error = float('inf')\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_y = y[X[:, feature] < threshold]\n                right_y = y[X[:, feature] >= threshold]\n                left_error = np.mean((left_y - np.mean(left_y)) ** 2)\n                right_error = np.mean((right_y - np.mean(right_y)) ** 2)\n                error = left_error + right_error\n                if error < best_error:\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_error = error\n        return (best_feature, best_threshold)\n\n    def _split_data(self, X: np.ndarray, y: np.ndarray, feature: int, threshold: float):\n        left_X = X[X[:, feature] < threshold]\n        left_y = y[X[:, feature] < threshold]\n        right_X = X[X[:, feature] >= threshold]\n        right_y = y[X[:, feature] >= threshold]\n        return (left_X, left_y, right_X, right_y)\n\n    def predict(self, X: np.ndarray):\n        return np.array([self.tree(x) for x in X])"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the multivariate Gaussian probability density function (PDF) for a given set of data points.\n\n    Parameters\n    ----------\n    X : numpy array of shape (n_samples, n_features)\n        The data points for which the PDF values must be evaluated.\n    mean : numpy array of shape (n_features,)\n        The mean vector of the distribution.\n    cov : numpy array of shape (n_features, n_features)\n        The covariance matrix of the distribution, which must be positive-definite (invertible).\n\n    Returns\n    -------\n    pdf_values : list\n        A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    det_cov = np.linalg.det(cov)\n    if det_cov == 0:\n        raise ValueError('The covariance matrix is not invertible (singular).')\n    inv_cov = np.linalg.inv(cov)\n    exponent = -0.5 * np.sum((X - mean) @ inv_cov @ (X - mean), axis=1)\n    pdf_values = 1 / (math.sqrt((2 * math.pi) ** X.shape[1] * det_cov) * np.exp(exponent))\n    pdf_values = [round(val, 4) for val in pdf_values]\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    M = X.shape[1]\n    N = X.shape[0]\n    if V is None:\n        V = np.eye(M)\n    if isinstance(V, (int, float)):\n        V = np.diag([V] * M)\n    if isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    X_T_y = X.T @ y\n    Sigma_p = np.linalg.inv(V_inv + X_T_X)\n    mu_p = Sigma_p @ (V_inv @ mu + X_T_y)\n    y_pred = X_new @ mu_p\n    return [round(y, 4) for y in y_pred]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Computes the Root Mean Squared Logarithmic Error (RMSLE) between two sequences of non-negative numbers.\n\n    Args:\n        actual (list[float]): Ground-truth values.\n        predicted (list[float]): Model predictions.\n\n    Returns:\n        float: RMSLE value rounded to four decimal places. Returns -1 if inputs are invalid.\n    \"\"\"\n    if len(actual) != len(predicted) or any((x < 0 for x in actual + predicted)):\n        return -1\n    rmsle = np.sqrt(np.mean((np.log(1 + predicted) - np.log(1 + actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        return np.round(0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1)), 4).tolist()\n    else:\n        n = np.arange(window_len + 1)\n        return np.round(0.5 - 0.5 * np.cos(2 * np.pi * n / window_len), 4).tolist()[1:-1]"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"\n    Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [np.mean(y)] * len(y)\n    y_pred = np.mean(y)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        weak_learner_pred = X_with_intercept @ coefficients\n        y_pred += learning_rate * weak_learner_pred\n    return [round(x, 4) for x in y_pred]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid_value = 1 / (1 + np.exp(-x))\n    if order == 1:\n        derivative = sigmoid_value * (1 - sigmoid_value)\n    elif order == 2:\n        derivative = sigmoid_value * (1 - sigmoid_value) * (1 - 2 * sigmoid_value)\n    if isinstance(x, np.ndarray):\n        result = derivative.tolist()\n    else:\n        result = round(derivative, 4)\n    return result"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if num_classes is not None and num_classes < max(y) + 1:\n        return -1\n    if num_classes is None:\n        num_classes = max(y) + 1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    for (i, label) in enumerate(y):\n        one_hot[i, label] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    total_transactions = len(transactions)\n    single_item_candidates = set(itertools.chain(*transactions))\n    frequent_single_itemsets = [item for item in single_item_candidates if support(transactions, [item]) >= min_sup]\n    frequent_itemsets = [frequent_single_itemsets]\n    k = 2\n    while True:\n        size_k_candidates = set(itertools.chain(*[itertools.combinations(frequent_itemsets[-1], k)]))\n        frequent_size_k_itemsets = [itemset for itemset in size_k_candidates if support(transactions, itemset) >= min_sup]\n        if not frequent_size_k_itemsets:\n            break\n        frequent_itemsets.append(frequent_size_k_itemsets)\n        k += 1\n    frequent_itemsets = sorted(frequent_itemsets, key=lambda x: (len(x), x))\n    return frequent_itemsets\ndef support(transactions: list[list[int]], itemset: list[int]) -> float:\n    \"\"\"Calculate the empirical support of an itemset.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    itemset : list[Hashable]\n        Itemset to calculate the support for.\n\n    Returns\n    -------\n    float\n        Empirical support of the itemset.\n    \"\"\"\n    count = sum((1 for transaction in transactions if set(itemset).issubset(set(transaction))))\n    return count / len(transactions)"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    averaged_probabilities = np.mean(predictions, axis=0)\n    rounded_probabilities = [list(map(lambda x: round(x, 4), probabilities)) for probabilities in averaged_probabilities]\n    return (rounded_probabilities, [np.argmax(probabilities) for probabilities in rounded_probabilities])"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the Radial Basis Function (RBF) kernel matrix.\n\n    Args:\n        X (list[list[int | float]]): The first collection of N-dimensional vectors.\n        Y (list[list[int | float]] | None, optional): The second collection of M-dimensional vectors. Defaults to None.\n        sigma (float | list[float] | None, optional): The scale (band-width) parameter. Defaults to None.\n\n    Returns:\n        list[list[float]]: The kernel matrix rounded to four decimal places.\n    \"\"\"\n    if sigma is None:\n        sigma = np.sqrt(len(X[0]) / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != len(X[0]):\n            return -1\n        for s in sigma:\n            if s <= 0:\n                return -1\n    elif not isinstance(sigma, (int, float)) or sigma <= 0:\n        return -1\n    if Y is not None and len(X[0]) != len(Y[0]):\n        return -1\n    if Y is None:\n        Y = X\n    kernel_matrix = [[np.exp(-0.5 * np.sum((np.array(x) - np.array(y)) ** 2 / s ** 2)) for y in Y] for (x, s) in zip(X, [sigma] * len(X))]\n    kernel_matrix = [[round(x, 4) for x in row] for row in kernel_matrix]\n    return kernel_matrix"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    majority_label = Counter(y).most_common(1)[0][0]\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    for j in range(X.shape[1]):\n        unique_values = np.unique(X[:, j])\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            left_indices = X[:, j] <= threshold\n            right_indices = ~left_indices\n            parent_entropy = entropy(y)\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - len(left_labels) / len(y) * left_entropy - len(right_labels) / len(y) * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(threshold, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total = sum(label_counts.values())\n    return -sum((count / total * np.log2(count / total) for count in label_counts.values()))"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[List[list]]:\n    \"\"\"\n    Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold]\n    subset2 = X[X[:, feature_i] < threshold]\n    subset1 = subset1.tolist()\n    subset2 = subset2.tolist()\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or (len(Q) != len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            y[i][actions[i]] = rewards[i]\n        else:\n            y[i][actions[i]] = rewards[i] + gamma * np.max(Q_next[i])\n    y = [[round(x, 4) for x in row] for row in y]\n    return y"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is not None and num_classes < max(labels) + 1:\n        return -1\n    if any((label < 0 for label in labels)):\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    result = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        result[i][label] = 1\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(x)\n    current_prediction = [np.mean(y)] * len(x)\n    for _ in range(n_estimators):\n        residuals = [y_i - current_prediction_i for (y_i, current_prediction_i) in zip(y, current_prediction)]\n        best_split = None\n        best_sse = float('inf')\n        for t in sorted(set(x)):\n            left_indices = [i for (i, x_i) in enumerate(x) if x_i <= t]\n            right_indices = [i for (i, x_i) in enumerate(x) if x_i > t]\n            if not left_indices or not right_indices:\n                continue\n            left_residuals = [residuals[i] for i in left_indices]\n            right_residuals = [residuals[i] for i in right_indices]\n            sse = np.sum((np.mean(left_residuals) - left_residuals) ** 2) + np.sum((np.mean(right_residuals) - right_residuals) ** 2)\n            if sse < best_sse:\n                best_split = t\n                best_sse = sse\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            stump_prediction = [mean_residual] * len(x)\n        else:\n            left_residuals = [residuals[i] for (i, x_i) in enumerate(x) if x_i <= best_split]\n            right_residuals = [residuals[i] for (i, x_i) in enumerate(x) if x_i > best_split]\n            stump_prediction = [np.mean(left_residuals) if x_i <= best_split else np.mean(right_residuals) for x_i in x]\n        current_prediction = [current_prediction_i + learning_rate * stump_prediction_i for (current_prediction_i, stump_prediction_i) in zip(current_prediction, stump_prediction)]\n    return np.round(current_prediction, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"\n    One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        next_state_q_values = [q_table[next_state][a] for a in range(num_actions)]\n        expected_value = (1 - epsilon + epsilon / num_actions) * max(next_state_q_values) + epsilon / num_actions * sum(next_state_q_values)\n    else:\n        expected_value = 0\n    target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    Y_train = np.zeros(m * n_train)\n    Y_val = np.zeros(m * n_val)\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        x_coords = np.random.uniform(x_min, x_max, size=n_train + n_val)\n        y_coords = np.random.uniform(y_min, y_max, size=n_train + n_val)\n        X_train[i * n_train:(i + 1) * n_train, 0] = x_coords[:n_train]\n        X_train[i * n_train:(i + 1) * n_train, 1] = y_coords[:n_train]\n        X_val[i * n_val:(i + 1) * n_val, 0] = x_coords[n_train:n_train + n_val]\n        X_val[i * n_val:(i + 1) * n_val, 1] = y_coords[n_train:n_train + n_val]\n        Y_train[i * n_train:(i + 1) * n_train] = (i - 0.5) * 2\n        Y_val[i * n_val:(i + 1) * n_val] = (i - 0.5) * 2\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.round(Y_train, 4)\n    Y_val = np.round(Y_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    m_prev = np.zeros_like(grad) if m_prev is None else m_prev\n    v_prev = np.zeros_like(grad) if v_prev is None else v_prev\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    pull_counters = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.choice(num_arms)\n        else:\n            arm = np.argmax(estimated_values)\n        reward = rewards[t][arm]\n        estimated_values[arm] += (reward - estimated_values[arm]) / (pull_counters[arm] + 1)\n        pull_counters[arm] += 1\n    return [round(val, 4) for val in estimated_values]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = np.full(data.shape[0], -1, dtype=int)\n    cluster_id = 0\n    for i in range(data.shape[0]):\n        if labels[i] != -1:\n            continue\n        neighbors = get_reachable_points(data, i, eps)\n        if len(neighbors) >= min_samples:\n            labels[i] = cluster_id\n            for neighbor in neighbors:\n                labels[neighbor] = cluster_id\n            cluster_id += 1\n    return labels.tolist()\ndef get_reachable_points(data: np.ndarray, index: int, eps: float) -> list[int]:\n    \"\"\"Find all points within eps distance from the given point.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    index : int\n        Index of the point to find neighbors for.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n\n    Returns\n    -------\n    list[int]\n        Indices of points within eps distance from the given point.\n    \"\"\"\n    distances = np.linalg.norm(data - data[index], axis=1)\n    reachable_points = np.where(distances <= eps)[0]\n    return reachable_points.tolist()"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is not None:\n        if num_classes <= 0:\n            raise ValueError('num_classes must be a positive integer')\n        if np.any(y >= num_classes):\n            raise ValueError('label {} is out of bounds for num_classes {}'.format(y, num_classes))\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    categorical = np.zeros((len(y), num_classes), dtype=int)\n    categorical[np.arange(len(y)), y] = 1\n    return categorical"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n    tree = Node(X_train, y_train, max_depth)\n    predictions = []\n    for x in X_test:\n        node = tree\n        while node.left_child is not None or node.right_child is not None:\n            if x <= node.split_point:\n                node = node.left_child\n            else:\n                node = node.right_child\n        predictions.append(node.value)\n    return predictions\nclass Node:\n\n    def __init__(self, X, y, max_depth, depth=0):\n        self.X = X\n        self.y = y\n        self.left_child = None\n        self.right_child = None\n        self.split_point = None\n        self.value = None\n        self.depth = depth\n        if len(X) < 2 or depth == max_depth:\n            self.value = np.mean(y)\n        else:\n            self.split_point = self.find_best_split(X, y)\n            (left_X, left_y, right_X, right_y) = self.split_data(X, y, self.split_point)\n            self.left_child = Node(left_X, left_y, max_depth, depth + 1)\n            self.right_child = Node(right_X, right_y, max_depth, depth + 1)\n\n    def find_best_split(self, X, y):\n        best_split_point = None\n        min_sse = float('inf')\n        for i in range(len(X) - 1):\n            split_point = (X[i] + X[i + 1]) / 2\n            (left_X, left_y, right_X, right_y) = self.split_data(X, y, split_point)\n            left_sse = np.sum((left_y - np.mean(left_y)) ** 2)\n            right_sse = np.sum((right_y - np.mean(right_y)) ** 2)\n            sse = left_sse + right_sse\n            if sse < min_sse:\n                min_sse = sse\n                best_split_point = split_point\n        return best_split_point\n\n    def split_data(self, X, y, split_point):\n        left_X = [x for (x, yi) in zip(X, y) if x <= split_point]\n        left_y = [yi for (x, yi) in zip(X, y) if x <= split_point]\n        right_X = [x for (x, yi) in zip(X, y) if x > split_point]\n        right_y = [yi for (x, yi) in zip(X, y) if x > split_point]\n        return (left_X, left_y, right_X, right_y)"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"\n    Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    n = len(x)\n    matrix = np.zeros((n, n))\n    np.fill_diagonal(matrix, x)\n    return matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_freq = Counter((item for transaction in transactions for item in transaction))\n    min_sup_count = min_sup\n    if len(transactions) < min_sup:\n        min_sup_count = len(transactions)\n    frequent_items = [item for (item, freq) in item_freq.items() if freq >= min_sup_count]\n    fp_tree = defaultdict(list)\n    for transaction in transactions:\n        prefix = []\n        for item in transaction:\n            if item in frequent_items:\n                prefix.append(item)\n                fp_tree[item].append(prefix[:])\n\n    def mine_conditional_tree(header_table, prefix):\n        frequent_itemsets = []\n        for item in header_table:\n            conditional_tree = defaultdict(list)\n            for path in header_table[item]:\n                conditional_tree[path[-1]].append(path)\n            if len(conditional_tree) == 1:\n                path = list(conditional_tree.keys())[0]\n                for r in range(1, len(path) + 1):\n                    for combination in itertools.combinations(path, r):\n                        frequent_itemsets.append(tuple(sorted(combination)))\n            else:\n                frequent_itemsets.extend(mine_conditional_tree(conditional_tree, prefix + [item]))\n        return frequent_itemsets\n    frequent_itemsets = mine_conditional_tree(fp_tree, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"\n    Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It returns a new\n    list of lists containing, for every observation, all monomials of the\n    original features whose total degree does not exceed the supplied *degree*.\n    The very first element in every row should be 1 (the degree-0 term).\n\n    If *degree* is negative the function returns -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    result = [[1.0] * (degree + 1) for _ in range(n_samples)]\n    for d in range(1, degree + 1):\n        for k in combinations_with_replacement(range(n_features), d):\n            for (i, x) in enumerate(X):\n                product = 1.0\n                for (j, k_j) in enumerate(k):\n                    product *= x[j] ** k_j\n                result[i].append(product)\n    return [row[:degree + 1] for row in result]"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse = np.mean(squared_diffs)\n    mse = round(mse, 4)\n    return mse"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = slope * x + intercept\n    grad = slope * np.ones_like(x)\n    grad2 = np.zeros_like(x)\n    y = np.round(y, 4).tolist()\n    grad = np.round(grad, 4).tolist()\n    grad2 = np.round(grad2, 4).tolist()\n    return (y, grad, grad2)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_features = data.shape[1]\n    if not 1 <= k <= n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)\n    std[std == 0] = 1\n    standardised_data = (data - mean) / std\n    cov_matrix = np.cov(standardised_data, rowvar=False, ddof=n_features - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = np.argsort(-eigenvalues)\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        max_idx = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n    projected_data = np.dot(standardised_data, eigenvectors[:, :k])\n    return projected_data.round(4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    c = np.mean(y_train)\n    residuals = y_train - c\n    predictions = [c] * len(X_test)\n    for _ in range(n_estimators):\n        (best_feature, best_threshold) = find_best_split(X_train, residuals)\n        predictions_stage = np.where(X_test[:, best_feature] <= best_threshold, c, c + learning_rate)\n        residuals = residuals - learning_rate * (predictions_stage - c)\n        predictions = predictions_stage\n    predictions = [int(pred >= 0.5) for pred in predictions]\n    return predictions\ndef find_best_split(X_train: list[list[float]], residuals: list[float]) -> (int, float):\n    \"\"\"Find the best feature and threshold for the current stage.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        residuals: Residuals for the current stage.\n\n    Returns:\n        A tuple containing the index of the best feature and the best threshold.\n    \"\"\"\n    best_feature = 0\n    best_threshold = 0\n    best_error = float('inf')\n    for feature in range(len(X_train[0])):\n        sorted_samples = sorted(zip(X_train, residuals), key=lambda x: x[0][feature])\n        total_error = 0\n        for i in range(1, len(sorted_samples)):\n            error = (sorted_samples[i - 1][1] - sorted_samples[i][1]) ** 2\n            total_error += error\n            if total_error < best_error:\n                best_feature = feature\n                best_threshold = (sorted_samples[i - 1][0][feature] + sorted_samples[i][0][feature]) / 2\n                best_error = total_error\n    return (best_feature, best_threshold)"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    h0_prob = np.dot(X, W) + hbias\n    h0_prob = np.where(h0_prob >= 0.5, 1, 0)\n    for _ in range(k):\n        h_prob = np.dot(X, W) + hbias\n        h_prob = np.where(h_prob >= 0.5, 1, 0)\n        v_prob = np.dot(h_prob, W.T) + vbias\n        v_prob = np.where(v_prob >= 0.5, 1, 0)\n        X = v_prob\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    return [[round(x, 4) for x in row] for row in W_new.tolist()]"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1.0\n    diff = np.abs(x - y)\n    max_diff = np.max(diff)\n    return round(max_diff, 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=1)\n    total_loss = reconstruction_loss + kl_divergence\n    return round(np.mean(total_loss), 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = np.dot(X, w)\n    interaction_term = 0.5 * np.sum(np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2), axis=1)\n    bias_term = w0 * np.ones(X.shape[0])\n    predictions = linear_term + bias_term + interaction_term\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sigmoid_z = 1 / (1 + np.exp(-z))\n    sigmoid_z = np.round(sigmoid_z, 4)\n    if sigmoid_z.size == 1:\n        return sigmoid_z.item()\n    else:\n        return sigmoid_z.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim > 1 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim > 1 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    else:\n        z = np.array(z)\n        grad = z * (1 - z)\n        grad = np.round(grad, 4)\n        return grad.tolist() if isinstance(z, list) else grad"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081, x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081, x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081, w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    (x1_min, x1_max) = (np.min([x[0] for x in X]), np.max([x[0] for x in X]))\n    (x2_min, x2_max) = (np.min([x[1] for x in X]), np.max([x[1] for x in X]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    labels = np.sign(W[0] * x1_grid + W[1] * x2_grid + b).astype(int)\n    labels = labels.tolist()\n    return labels"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    n_classes = len(np.unique(y_train))\n    if n_classes != 2:\n        raise ValueError('This implementation is for binary classification only.')\n    n_features = X_train.shape[1]\n    class_priors = np.array([np.mean(y_train == c) for c in range(n_classes)])\n    class_means = np.zeros((n_classes, n_features))\n    class_stds = np.zeros((n_classes, n_features))\n    for c in range(n_classes):\n        X_class = X_train[y_train == c]\n        class_means[c] = np.mean(X_class, axis=0)\n        class_stds[c] = np.std(X_class, axis=0)\n    class_stds += 1e-09\n    posterior_probabilities = np.zeros((X_test.shape[0], n_classes))\n    for i in range(X_test.shape[0]):\n        for c in range(n_classes):\n            likelihood = np.prod(np.exp(-(X_test[i] - class_means[c]) ** 2 / (2 * class_stds[c] ** 2)) / (np.sqrt(2 * np.pi) * class_stds[c]))\n            posterior_probabilities[i, c] = likelihood * class_priors[c]\n    predictions = np.argmax(posterior_probabilities, axis=1)\n    predictions = [int(p) for p in predictions]\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Model probabilities (shape: (1,m) or (m,))\n    Y (np.ndarray): True labels (shape: (1,m) or (m,))\n\n    Returns:\n    float: Binary cross-entropy cost\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = AL.shape[0] if AL.ndim == 1 else AL.shape[1]\n    cost = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    alpha = np.zeros((len(pi), len(observations)))\n    beta = np.zeros((len(pi), len(observations)))\n    alpha[:, 0] = pi * B[:, observations[0]]\n    for i in range(1, len(observations)):\n        for j in range(len(pi)):\n            alpha[j, i] = np.dot(alpha[:, i - 1], A[:, j]) * B[j, observations[i]]\n    beta[:, -1] = 1\n    for i in range(len(observations) - 2, -1, -1):\n        for j in range(len(pi)):\n            beta[j, i] = np.sum(A[j, :] * B[:, observations[i + 1]] * beta[:, i + 1])\n    gamma = alpha[:, t] * beta[:, t]\n    gamma /= np.sum(gamma)\n    gamma = np.round(gamma, 4)\n    return gamma.tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = np.full(n_samples, -1, dtype=int)\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = []\n        for j in range(n_samples):\n            if i != j and np.linalg.norm(data[i] - data[j]) <= eps:\n                neighbors.append(j)\n        if len(neighbors) >= min_samples:\n            labels[i] = 1\n            queue = deque([i])\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighbors:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = labels[current_point]\n                        queue.append(neighbor)\n                        for j in range(n_samples):\n                            if neighbor != j and np.linalg.norm(data[neighbor] - data[j]) <= eps:\n                                neighbors[j].append(neighbor)\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    This function implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    data (np.ndarray): A 2-D NumPy array containing N samples with D features.\n    k (int): The number of Gaussian components.\n    max_iter (int, optional): The maximum number of iterations. Defaults to 200.\n    epsilon (float, optional): The tolerance for convergence. Defaults to 1e-4.\n\n    Returns:\n    list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    weights = np.random.dirichlet(np.ones(k), size=1)[0]\n    means = np.random.rand(k, data.shape[1])\n    covs = np.array([np.eye(data.shape[1]) for _ in range(k)])\n    prev_weights = np.inf\n    for _ in range(max_iter):\n        probabilities = np.zeros((data.shape[0], k))\n        for i in range(k):\n            probabilities[:, i] = weights[i] * np.exp(-0.5 * np.sum((data - means[i]) ** 2 / np.diag(covs[i]), axis=1)) / (2 * np.pi * np.prod(np.diag(covs[i])) ** 0.5)\n        probabilities /= np.sum(probabilities, axis=1)[:, np.newaxis]\n        weights = np.mean(probabilities, axis=0)\n        means = np.dot(probabilities.T, data) / np.sum(probabilities, axis=0)[:, np.newaxis]\n        covs = np.array([np.cov(data, rowvar=False, aweights=probabilities[:, i]) for i in range(k)])\n        if np.linalg.norm(weights - prev_weights) < epsilon:\n            break\n        prev_weights = weights\n    labels = np.argmax(probabilities, axis=1)\n    sorted_labels = np.argsort(means[:, 0])\n    labels = sorted_labels[labels]\n    if k == 1:\n        return [0] * data.shape[0]\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    dist = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            dist[i, j] = np.sum((data[i] - data[j]) ** 2)\n    sim = np.exp(-gamma * dist)\n    W = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                W[i, j] = sim[i, j]\n    D = np.sum(W, axis=1)\n    L = np.diag(D) - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(np.power(D, -0.5))\n        L_sym = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n        L = L_sym\n    (eigen_values, eigen_vectors) = np.linalg.eig(L)\n    idx = np.argsort(eigen_values)\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    eigen_vectors = eigen_vectors[:, :n_cluster]\n    if method == 'normalized':\n        eigen_vectors = eigen_vectors / np.linalg.norm(eigen_vectors, axis=0)\n    centroids = eigen_vectors[:, :n_cluster]\n    labels = np.zeros(N)\n    for i in range(N):\n        labels[i] = np.argmin(np.linalg.norm(eigen_vectors[i] - centroids, axis=1))\n    unique_labels = np.unique(labels)\n    unique_labels.sort()\n    label_map = {label: i for (i, label) in enumerate(unique_labels)}\n    labels = np.array([label_map[label] for label in labels])\n    if n_cluster == 1:\n        return [0] * N\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        converged = True\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i, :])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                converged = False\n        if converged:\n            break\n    w = np.dot(alpha * y_data[:, None], X_data)\n    w = [round(x, 4) for x in w.flatten()]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        return _predict_classification(root, features)\n    elif task_type == 'regression':\n        return _predict_regression(root, features)\n    else:\n        raise ValueError(\"Invalid task type. It should be either 'classification' or 'regression'.\")\ndef _predict_classification(node: 'Node', features: list | tuple):\n    if hasattr(node, 'y'):\n        return node.y\n    else:\n        feature_index = node.label\n        feature_value = features[feature_index]\n        for child in node.child:\n            if hasattr(child, 'x') and child.x == feature_value:\n                return _predict_classification(child, features)\n        return _predict_classification(node.child[1], features)\ndef _predict_regression(node: 'Node', features: list | tuple):\n    if hasattr(node, 'y'):\n        return node.y\n    else:\n        feature_index = node.label\n        feature_value = features[feature_index]\n        if feature_value <= node.s:\n            return _predict_regression(node.child[0], features)\n        else:\n            return _predict_regression(node.child[1], features)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_samples = X.shape[0]\n    best_feature_index = 0\n    max_information_gain = 0.0\n    for feature_index in range(X.shape[1]):\n        entropy_y = entropy(y)\n        conditional_entropy = 0.0\n        unique_values = np.unique(X[:, feature_index])\n        for value in unique_values:\n            indices = np.where(X[:, feature_index] == value)[0]\n            conditional_entropy += len(indices) / n_samples * entropy(y[indices])\n        information_gain = entropy_y - conditional_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    max_information_gain = round(max_information_gain, 6)\n    return (best_feature_index, max_information_gain)\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"\n    Calculate the entropy of a 1-D array of class labels.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    float\n        The entropy of the label distribution.\n    \"\"\"\n    probabilities = np.bincount(y) / len(y)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    outlier_indices = []\n    height_limit = math.ceil(math.log2(sample_size))\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(data, height_limit):\n        if len(data) <= 1 or height_limit == 0:\n            return data\n        feature = np.random.randint(0, data.shape[1])\n        threshold = np.random.uniform(data[:, feature].min(), data[:, feature].max())\n        left_child = data[data[:, feature] < threshold]\n        right_child = data[data[:, feature] >= threshold]\n        left_child = build_tree(left_child, height_limit - 1)\n        right_child = build_tree(right_child, height_limit - 1)\n        return (left_child, right_child)\n\n    def path_length(data, tree):\n        path_lengths = []\n        for i in range(len(data)):\n            node = tree\n            path = 0"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Maximum Entropy classifier with Generalized Iterative Scaling.\n\n    Parameters:\n    X_train (np.ndarray): Training samples.\n    y_train (np.ndarray): Training labels.\n    X_test (np.ndarray): Samples to classify.\n    epsilon (float, optional): Convergence threshold. Defaults to 1e-3.\n    n_iter (int, optional): Maximum number of iterations. Defaults to 100.\n\n    Returns:\n    list[int]: Predicted labels for every row in X_test.\n    \"\"\"\n    (num_features, num_labels) = (X_train.shape[1], np.max(y_train) + 1)\n    weights = np.zeros((num_features, num_labels, num_labels))\n    empirical_distributions = defaultdict(lambda : defaultdict(int))\n    for (i, row) in enumerate(X_train):\n        for (j, feature) in enumerate(row):\n            feature_value = feature\n            label = y_train[i]\n            empirical_distributions[j, feature_value][label] += 1\n    for ((feature_index, feature_value), label_counts) in empirical_distributions.items():\n        total = sum(label_counts.values())\n        for (label, count) in label_counts.items():\n            empirical_distributions[feature_index, feature_value][label] /= total\n    max_update = float('inf')\n    for _ in range(n_iter):\n        new_weights = np.zeros(weights.shape)\n        for (i, row) in enumerate(X_train):\n            for (j, feature) in enumerate(row):\n                feature_value = feature\n                label = y_train[i]\n                for k in range(num_labels):\n                    for l in range(num_labels):\n                        new_weights[j, feature_value, k] += weights[j, feature_value, l] * empirical_distributions[j, feature_value][l]\n        max_update = 0\n        for j in range(num_features):\n            for feature_value in range(num_labels):\n                for k in range(num_labels):\n                    update = abs(new_weights[j, feature_value, k] - weights[j, feature_value, k])\n                    max_update = max(max_update, update)\n        weights = new_weights\n        if max_update < epsilon:\n            break\n    predicted_labels = []\n    for (i, row) in enumerate(X_test):\n        max_prob = -math.inf\n        predicted_label = -1\n        for (j, feature) in enumerate(row):\n            feature_value = feature\n            for k in range(num_labels):\n                prob = math.exp(np.sum(weights[j, feature_value, k] * X_test[i]))\n                if prob > max_prob:\n                    max_prob = prob\n                    predicted_label = k\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter((word for (_, words) in data for word in words))\n    total_documents = len(data)\n    word_ratios = [(word, count / total_documents) for (word, count) in word_counts.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    word_ratios = [(word, round(ratio, 4)) for (word, ratio) in word_ratios]\n    if cut_off is None:\n        return (word_ratios, set((word for (word, _) in word_ratios)))\n    else:\n        top_words = set((word for (word, _) in word_ratios[:cut_off]))\n        return (word_ratios, top_words)\n    if cut_off > len(word_ratios):\n        return (word_ratios, set((word for (word, _) in word_ratios)))\n    if cut_off == 0:\n        return (word_ratios, set())"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, size=(n_train, 2))\n        x_val = np.random.uniform(base + 1, base + 9, size=(n_val, 2))\n        y_train.extend([c] * n_train)\n        y_val.extend([c] * n_val)\n        x_train = np.round(x_train, decimals=4)\n        x_val = np.round(x_val, decimals=4)\n        X_train.append(x_train)\n        X_val.append(x_val)\n    X_train = np.concatenate(X_train)\n    X_val = np.concatenate(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k, :].copy()\n    labels = np.zeros(m, dtype=int)\n    for i in range(max_iters):\n        distances = np.linalg.norm(X[:, np.newaxis] - centres, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centres = np.zeros((k, d))\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                new_centres[j] = np.mean(points_in_cluster, axis=0)\n            else:\n                new_centres[j] = centres[j]\n        if np.all(centres == new_centres):\n            break\n        centres = new_centres\n    centres = [[round(x, 4) for x in centre] for centre in centres]\n    return (labels.tolist(), centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residual = y - predictions\n        gradients = np.zeros(X.shape[1])\n        for j in range(X.shape[1]):\n            gradients[j] = -2 * np.dot(X[:, j], residual) / X.shape[0] + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n        gradients_bias = -2 * np.sum(residual) / X.shape[0]\n        weights -= learning_rate * gradients / X.shape[0]\n        bias -= learning_rate * gradients_bias / X.shape[0]\n    weights = [round(weight, 4) for weight in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"\n    Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.append(x, 1)\n    output = x\n    for layer in weights:\n        new_output = []\n        for neuron in layer:\n            weighted_sum = np.dot(output, neuron[:-1]) + neuron[0]\n            if layer != weights[-1]:\n                new_output.append(np.maximum(0, weighted_sum))\n            else:\n                new_output.append(weighted_sum)\n        output = new_output\n    if len(output) == 1:\n        return round(output[0], 4)\n    else:\n        return [round(val, 4) for val in output]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Compute centroids of K-Means clustering.\n\n    Parameters:\n    X (np.ndarray): 2-D array of shape (n_samples, n_features)\n    k (int): Number of clusters\n    max_iters (int, optional): Maximum number of iterations. Defaults to 100.\n\n    Returns:\n    list[list[float]]: Sorted, rounded centroids\n    \"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n        for i in range(k):\n            if len(X[labels == i]) == 0:\n                centroids[i] = centroids[i]\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(map(float, x)))\n    rounded_centroids = [[round(x, 4) for x in centroid] for centroid in sorted_centroids]\n    return rounded_centroids"}
