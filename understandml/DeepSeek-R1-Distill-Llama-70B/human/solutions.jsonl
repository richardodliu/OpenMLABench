{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a:\n        num_cols = 0\n    else:\n        num_cols = len(a[0])\n    if len(b) != num_cols:\n        return -1\n    result = []\n    for row in a:\n        dot_product = 0\n        for i in range(num_cols):\n            dot_product += row[i] * b[i]\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    original_size = arr.size\n    required_size = new_shape[0] * new_shape[1]\n    if original_size != required_size:\n        return []\n    reshaped_arr = arr.reshape(new_shape)\n    return reshaped_arr.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if not matrix:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    else:\n        num_columns = len(matrix[0])\n        return [sum((row[col] for row in matrix)) / len(matrix) for col in range(num_columns)]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    eigenvalues = [eigenvalue1, eigenvalue2]\n    eigenvalues.sort(reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    det_T = np.linalg.det(T_np)\n    det_S = np.linalg.det(S_np)\n    if det_T == 0 or det_S == 0:\n        return -1\n    T_inv = np.linalg.inv(T_np)\n    try:\n        transformed = T_inv @ A_np @ S_np\n    except ValueError:\n        return -1\n    transformed_rounded = np.round(transformed, 4)\n    result = transformed_rounded.tolist()\n    return result"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_det = 1.0 / det\n    return [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not b:\n        return -1\n    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)\n    cols_b = len(b[0])\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            sum_val = 0\n            for k in range(cols_a):\n                sum_val += a[i][k] * b[k][j]\n            result[i][j] = sum_val\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    if not vectors:\n        return []\n    n = len(vectors[0])\n    m = len(vectors)\n    if n == 0:\n        return []\n    means = [sum(vec) / n for vec in vectors]\n    cov_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= n - 1\n            cov_matrix[i][j] = covariance\n    return cov_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    x = np.zeros_like(b, dtype=float)\n    D = np.diag(A)\n    D_inv = 1.0 / D\n    for _ in range(n):\n        r = b - np.dot(A, x)\n        D_inv_r = r * D_inv\n        x += D_inv_r\n        x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    B = np.dot(A.T, A)\n    a = B[0, 0]\n    b = B[0, 1]\n    c = B[1, 0]\n    d = B[1, 1]\n    trace = a + d\n    det = a * d - b * c\n    sqrt_part = np.sqrt(trace ** 2 - 4 * det)\n    lambda1 = (trace + sqrt_part) / 2\n    lambda2 = (trace - sqrt_part) / 2\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    rounded_sigma1 = round(sigma1, 4)\n    rounded_sigma2 = round(sigma2, 4)\n    return (rounded_sigma1, rounded_sigma2)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(m: list[list[int | float]]) -> float:\n        (a, b, c) = m[0]\n        (d, e, f) = m[1]\n        (g, h, i) = m[2]\n        return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n    det = 0.0\n    for col in range(4):\n        minor = []\n        for r in range(1, 4):\n            row = []\n            for c in range(4):\n                if c != col:\n                    row.append(matrix[r][c])\n            minor.append(row)\n        sign = (-1) ** col\n        minor_det = determinant_3x3(minor)\n        det += matrix[0][col] * sign * minor_det\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_array = np.array(X, dtype=float)\n    y_array = np.array(y, dtype=float)\n    X_trans = X_array.T\n    X_trans_X = np.dot(X_trans, X_array)\n    inverse = np.linalg.inv(X_trans_X)\n    theta = np.dot(inverse, X_trans)\n    theta = np.dot(theta, y_array)\n    theta = theta.reshape(-1)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    m = X.shape[0]\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        error = predictions - y\n        gradient = 1.0 / m * np.dot(X.T, error)\n        theta = theta - alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0)\n    standardized = (data - means) / stds\n    standardized = np.where(stds == 0, 0, standardized)\n    standardized_rounded = np.round(standardized, 4)\n    mins = np.min(data, axis=0)\n    maxs = np.max(data, axis=0)\n    denominator = maxs - mins\n    normalized = (data - mins) / denominator\n    normalized = np.where(denominator == 0, 0, normalized)\n    normalized_rounded = np.round(normalized, 4)\n    standardized_list = standardized_rounded.tolist()\n    normalized_list = normalized_rounded.tolist()\n    return (standardized_list, normalized_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids, dtype=np.float64)\n    for _ in range(max_iterations):\n        distances = np.sqrt(np.sum((points_array[:, np.newaxis] - centroids) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points_array[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    rounded_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return rounded_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generates train and test splits for K-Fold Cross-Validation.\n\n    Args:\n        X (np.ndarray): The feature matrix.\n        y (np.ndarray): The target vector.\n        k (int, optional): The number of folds. Defaults to 5.\n        shuffle (bool, optional): Whether to shuffle the data before splitting. Defaults to True.\n        random_seed (int, optional): Seed for random shuffling. Defaults to None.\n\n    Returns:\n        list: A list of tuples, each containing (train_indices, test_indices) for each fold.\n\n    Raises:\n        ValueError: If k is less than 2.\n    \"\"\"\n    n_samples = X.shape[0]\n    if y.shape[0] != n_samples:\n        raise ValueError('X and y must have the same number of samples.')\n    if k < 2:\n        raise ValueError('k must be at least 2.')\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    m = n_samples // k\n    rem = n_samples % k\n    folds = []\n    current = 0\n    for i in range(k):\n        if i < rem:\n            size = m + 1\n        else:\n            size = m\n        end = current + size\n        folds.append(indices[current:end])\n        current = end\n    result = []\n    for i in range(k):\n        test = folds[i]\n        train = np.concatenate([folds[j] for j in range(k) if j != i])\n        result.append((train, test))\n    return result"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)\n    standardized = (data - mean) / std\n    n = data.shape[0]\n    cov_matrix = standardized.T @ standardized / (n - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues_sorted = eigenvalues[sorted_indices]\n    eigenvectors_sorted = eigenvectors[:, sorted_indices]\n    principal_components = eigenvectors_sorted[:, :k]\n    result = []\n    for pc in principal_components.T:\n        rounded_pc = [round(x, 4) for x in pc]\n        result.append(rounded_pc)\n    return result"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    target_values = [example[target_attr] for example in examples]\n    if all((val == target_values[0] for val in target_values)):\n        return target_values[0]\n    if not attributes:\n        counts = Counter(target_values)\n        return counts.most_common(1)[0][0]\n\n    def entropy(examples, target_attr):\n        target_counts = Counter((example[target_attr] for example in examples))\n        total = len(examples)\n        ent = 0.0\n        for count in target_counts.values():\n            prob = count / total\n            ent -= prob * math.log2(prob)\n        return ent\n    parent_entropy = entropy(examples, target_attr)\n    if parent_entropy == 0:\n        return examples[0][target_attr]\n    max_info_gain = -1\n    best_attr = None\n    for attr in attributes:\n        attr_values = set((example[attr] for example in examples))\n        total = len(examples)\n        attr_entropy = 0.0\n        for value in attr_values:\n            subset = [e for e in examples if e[attr] == value]\n            subset_entropy = entropy(subset, target_attr)\n            attr_entropy += len(subset) / total * subset_entropy\n        info_gain = parent_entropy - attr_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_attr = attr\n    node = {best_attr: {}}\n    for value in set((example[best_attr] for example in examples)):\n        subset = [e for e in examples if e[best_attr] == value]\n        remaining_attrs = [a for a in attributes if a != best_attr]\n        subtree = learn_decision_tree(subset, remaining_attrs, target_attr)\n        node[best_attr][value] = subtree\n    return node"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    exp_val = math.exp(-z)\n    sig = 1 / (1 + exp_val)\n    return round(sig, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(s) for s in scores]\n    sum_exp = sum(exp_scores)\n    result = [s / sum_exp for s in exp_scores]\n    rounded = [round(num, 4) for num in result]\n    return rounded"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predictions = []\n    for feature_vector in features:\n        z = sum((f * w for (f, w) in zip(feature_vector, weights))) + bias\n        sigmoid = 1 / (1 + math.exp(-z))\n        predictions.append(sigmoid)\n    total_error = 0.0\n    for i in range(len(labels)):\n        error = predictions[i] - labels[i]\n        total_error += error ** 2\n    mse = total_error / len(labels)\n    rounded_predictions = [round(p, 4) for p in predictions]\n    rounded_mse = round(mse, 4)\n    return (rounded_predictions, rounded_mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    n_samples = features.shape[0]\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        y_pred = 1 / (1 + np.exp(-z))\n        mse = np.mean((y_pred - labels) ** 2)\n        mse_rounded = round(mse, 4)\n        mse_history.append(mse_rounded)\n        delta = (y_pred - labels) * y_pred * (1 - y_pred)\n        grad_weights = features.T @ delta / n_samples\n        grad_bias = np.mean(delta)\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n    return (weights, bias, mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def add(self, other):\n        new_data = self.data + other.data\n        new_node = Value(new_data, (self, other), 'add')\n\n        def _backward():\n            self.grad += new_node.grad * 1\n            other.grad += new_node.grad * 1\n            self._backward()\n            other._backward()\n        new_node._backward = _backward\n        return new_node\n\n    def mul(self, other):\n        new_data = self.data * other.data\n        new_node = Value(new_data, (self, other), 'mul')\n\n        def _backward():\n            self.grad += new_node.grad * other.data\n            other.grad += new_node.grad * self.data\n            self._backward()\n            other._backward()\n        new_node._backward = _backward\n        return new_node\n\n    def relu(self):\n        new_data = max(0, self.data)\n        new_node = Value(new_data, (self,), 'relu')\n\n        def _backward():\n            if self.data > 0:\n                self.grad += new_node.grad\n            self._backward()\n        new_node._backward = _backward\n        return new_node\n\n    def backward(self):\n        self._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_array = np.array(B, dtype=float)\n    C_array = np.array(C, dtype=float)\n    C_inv = np.linalg.inv(C_array)\n    P = np.dot(C_inv, B_array)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(len(X))\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    n_samples = X.shape[0]\n    i = 0\n    while i < n_samples:\n        end = i + batch_size\n        if end > n_samples:\n            end = n_samples\n        X_batch = X[i:end]\n        if y is not None:\n            y_batch = y[i:end]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()\n        i += batch_size"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    mask = X[:, feature_i] >= threshold\n    subset1 = X[mask]\n    subset2 = X[~mask]\n    return [subset1.tolist(), subset2.tolist()]"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    new_features = []\n    for d in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), d):\n            product = np.ones(n_samples)\n            for idx in combo:\n                product *= X[:, idx]\n            new_features.append(product)\n    new_features_array = np.array(new_features)\n    result = new_features_array.T\n    return result.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    N = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(N, size=N, replace=True)\n        else:\n            indices = np.random.permutation(N)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if len(x) == 0:\n        return []\n    if n_col is None:\n        n_col = max(x) + 1\n    result = np.zeros((len(x), n_col), dtype=int)\n    for i in range(len(x)):\n        result[i, x[i]] = 1\n    return result.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    return np.diag(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct = y_true == y_pred\n    sum_correct = np.sum(correct)\n    total = y_true.size\n    accuracy = sum_correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    corr = np.corrcoef(X, Y)\n    rounded = np.round(corr, 4)\n    return rounded.tolist()"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores)\n    max_score = scores_array.max()\n    shifted_scores = scores_array - max_score\n    exp_shifted = np.exp(shifted_scores)\n    sum_exp = np.sum(exp_shifted)\n    log_sum = np.log(sum_exp)\n    log_softmax = shifted_scores - log_sum\n    rounded = np.round(log_softmax, 4)\n    return rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nclass Optimizer:\n\n    def __init__(self, learning_rate=0.01):\n        self.lr = learning_rate\n\n    def update(self, param, grad):\n        param -= self.lr * grad\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be set before initializing the layer.')\n        limit = 1 / np.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((self.n_units,))\n        self.optimizer_W = Optimizer()\n        self.optimizer_w0 = Optimizer()\n\n    def parameters(self):\n        if self.W is None or self.w0 is None:\n            return 0\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        output = X.dot(self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        if self.trainable:\n            grad_W = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0)\n            self.optimizer_W.update(self.W, grad_W)\n            self.optimizer_w0.update(self.w0, grad_w0)\n        dX = accum_grad.dot(self.W.T)\n        return dX\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    (kernel_height, kernel_width) = kernel.shape\n    (padded_height, padded_width) = padded.shape\n    output_height = (padded_height - kernel_height) // stride + 1\n    output_width = (padded_width - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            start_row = i * stride\n            end_row = start_row + kernel_height\n            start_col = j * stride\n            end_col = start_col + kernel_width\n            submatrix = padded[start_row:end_row, start_col:end_col]\n            conv_value = np.sum(submatrix * kernel)\n            output[i, j] = conv_value\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = np.dot(X, w)\n    errors = y_true - y_pred\n    squared_errors = errors ** 2\n    mse = np.mean(squared_errors)\n    reg_term = alpha * np.sum(w ** 2)\n    loss = mse + reg_term\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    if z >= 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum(y_true * y_pred)\n    fp = np.sum(y_pred[y_true == 0])\n    denominator = tp + fp\n    if denominator == 0:\n        return 0.0\n    return tp / denominator"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    weights = weights.copy()\n    n_samples = X.shape[0]\n    for _ in range(n_iterations):\n        if method == 'batch':\n            X_batch = X\n            y_batch = y\n        elif method == 'stochastic':\n            idx = np.random.randint(0, n_samples)\n            X_batch = X[idx:idx + 1, :]\n            y_batch = y[idx:idx + 1]\n        else:\n            idx = np.random.choice(n_samples, batch_size, replace=False)\n            X_batch = X[idx, :]\n            y_batch = y[idx]\n        predictions = np.dot(X_batch, weights)\n        errors = predictions - y_batch\n        gradient = np.dot(X_batch.T, errors) / len(y_batch)\n        weights -= learning_rate * gradient\n    weights_rounded = np.round(weights, 4)\n    return weights_rounded.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    x = np.array(x0, copy=True)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for i in range(num_iterations):\n        t = i + 1\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * (m_hat / (np.sqrt(v_hat) + epsilon))\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n, p) = X.shape\n    w = np.random.randn(p)\n    b = np.random.randn()\n    for _ in range(max_iter):\n        y_hat = np.dot(X, w) + b\n        error = y - y_hat\n        grad_w = -np.dot(X.T, error) / n\n        grad_b = -np.sum(error) / n\n        grad_w += alpha * np.sign(w)\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n        prev_w = w.copy()\n        prev_b = b\n        change_w = np.abs(w - prev_w)\n        change_b = np.abs(b - prev_b)\n        max_change = max(np.max(change_w), change_b)\n        if max_change < tol:\n            break\n    w = np.round(w, 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 51, "completion_id": 0, "solution": "def OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    DP = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        DP[i][0] = i\n    for j in range(n + 1):\n        DP[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            sub_cost = 0 if source[i - 1] == target[j - 1] else 1\n            option1 = DP[i - 1][j] + 1\n            option2 = DP[i][j - 1] + 1\n            option3 = DP[i - 1][j - 1] + sub_cost\n            option4 = float('inf')\n            if i >= 2 and j >= 2:\n                if source[i - 1] == target[j - 2] and source[i - 2] == target[j - 1]:\n                    option4 = DP[i - 2][j - 2] + 1\n            DP[i][j] = min(option1, option2, option3, option4)\n    return DP[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    TP = 0\n    FN = 0\n    for (yt, yp) in zip(y_true, y_pred):\n        if yt == 1:\n            if yp == 1:\n                TP += 1\n            else:\n                FN += 1\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    else:\n        rec = TP / denominator\n        return round(rec, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    d = W_q.shape[1]\n    scale = 1.0 / np.sqrt(d)\n    scores = np.dot(Q, K.T) * scale\n    exp_scores = np.exp(scores)\n    sum_exp = np.sum(exp_scores, axis=1, keepdims=True)\n    weights = exp_scores / sum_exp\n    output = np.dot(weights, V)\n    rounded_output = np.round(output, 4)\n    return rounded_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h_prev = np.array(initial_hidden_state, dtype=np.float32)\n    Wx = np.array(Wx, dtype=np.float32)\n    Wh = np.array(Wh, dtype=np.float32)\n    b = np.array(b, dtype=np.float32)\n    for x_t in input_sequence:\n        x_t = np.array(x_t, dtype=np.float32)\n        preact = np.dot(Wx, x_t) + np.dot(Wh, h_prev) + b\n        h_current = np.tanh(preact)\n        h_prev = h_current\n    h_final = np.round(h_prev, 4)\n    return h_final.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translated = points_array + np.array([tx, ty])\n    return translated.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    term1 = (mu_p - mu_q) ** 2 / sigma_q ** 2\n    term2 = sigma_p ** 2 / sigma_q ** 2\n    kl = 0.5 * (term1 + term2 - 1)\n    return kl"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    m = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(m, dtype=np.float64)\n    else:\n        x = np.asarray(x_ini, dtype=np.float64)\n    for _ in range(n):\n        for i in range(m):\n            s = 0.0\n            for j in range(m):\n                if j != i:\n                    s += A[i, j] * x[j]\n            x[i] = (b[i] - s) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    aug = np.c_[A, b]\n    for i in range(n):\n        max_row = i\n        for j in range(i, n):\n            if abs(aug[j, i]) > abs(aug[max_row, i]):\n                max_row = j\n        if max_row != i:\n            aug[[i, max_row]] = aug[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = aug[j, i] / aug[i, i]\n            aug[j] = aug[j] - factor * aug[i]\n    x = np.zeros(n, dtype=float)\n    for i in range(n - 1, -1, -1):\n        s = 0.0\n        for j in range(i + 1, n):\n            s += aug[i, j] * x[j]\n        x[i] = (aug[i, n] - s) / aug[i, i]\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states at each time step,\n        the final hidden state, and the final cell state.\n        \"\"\"\n        n_steps = x.shape[0]\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        hidden_states = []\n        for t in range(n_steps):\n            x_t = x[t, :].reshape(self.input_size, 1)\n            concatenated = np.vstack((x_t, h_prev))\n            f = np.sigmoid(np.dot(self.Wf, concatenated) + self.bf)\n            i = np.sigmoid(np.dot(self.Wi, concatenated) + self.bi)\n            c_candidate = np.tanh(np.dot(self.Wc, concatenated) + self.bc)\n            o = np.sigmoid(np.dot(self.Wo, concatenated) + self.bo)\n            c_current = f * c_prev + i * c_candidate\n            h_current = o * np.tanh(c_current)\n            hidden_states.append(h_current)\n            h_prev = h_current\n            c_prev = c_current\n        hidden_states = [np.round(h.reshape(self.hidden_size), 4).tolist() for h in hidden_states]\n        final_h = np.round(h_current.reshape(self.hidden_size), 4).tolist()\n        final_c = np.round(c_current.reshape(self.hidden_size), 4).tolist()\n        return (hidden_states, final_h, final_c)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    df_dict = {}\n    for w in query:\n        count = 0\n        for doc in corpus:\n            if w in doc:\n                count += 1\n        df_dict[w] = count\n    N = len(corpus)\n    idf_dict = {}\n    for w in query:\n        df = df_dict[w]\n        idf = np.log((N + 1) / (df + 1))\n        idf_dict[w] = idf\n    result = []\n    for doc in corpus:\n        if not doc:\n            scores = [0.0 for _ in query]\n        else:\n            scores = []\n            for w in query:\n                count = doc.count(w)\n                tf = count / len(doc)\n                tf_idf = tf * idf_dict[w]\n                scores.append(round(tf_idf, 5))\n        result.append(scores)\n    return result"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FP == 0:\n        precision = 0.0\n    else:\n        precision = TP / (TP + FP)\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    numerator = (1 + beta ** 2) * precision * recall\n    denominator = beta ** 2 * precision + recall\n    if np.isclose(denominator, 0):\n        f = 0.0\n    else:\n        f = numerator / denominator\n    return round(f, 3)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - np.dot(A, x)\n    p = r.copy()\n    for _ in range(n):\n        r_dot_r = np.dot(r, r)\n        if r_dot_r == 0:\n            break\n        A_p = np.dot(A, p)\n        p_dot_A_p = np.dot(p, A_p)\n        if p_dot_A_p == 0:\n            break\n        alpha = r_dot_r / p_dot_A_p\n        x += alpha * p\n        r_new = r - alpha * A_p\n        if np.linalg.norm(r_new) < tol:\n            r = r_new\n            break\n        beta = np.dot(r_new, r_new) / r_dot_r\n        p = r_new + beta * p\n        r = r_new\n    x_rounded = np.round(x, 8)\n    return x_rounded.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    counts = np.bincount(y)\n    total = len(y)\n    sum_of_squares = np.sum((counts / total) ** 2)\n    gini = 1 - sum_of_squares\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_counts = []\n    for row in dense_matrix:\n        count = 0\n        for (col_idx, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                column_indices.append(col_idx)\n                count += 1\n        row_counts.append(count)\n    row_pointers = [0]\n    current = 0\n    for count in row_counts:\n        current += count\n        row_pointers.append(current)\n    return (values, column_indices, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((a * b for (a, b) in zip(v, L)))\n    magnitude_squared = sum((x ** 2 for x in L))\n    scalar = dot_product / magnitude_squared\n    projection = [scalar * x for x in L]\n    return [round(x, 3) for x in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0]) if num_rows > 0 else 0\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for c in range(num_cols):\n        for r in range(num_rows):\n            val = dense_matrix[r][c]\n            if val != 0:\n                values.append(val)\n                row_indices.append(r)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A, dtype=float)\n    mat = A.copy()\n    (m, n) = mat.shape\n    pivot_row = 0\n    for pivot_col in range(n):\n        max_row = np.argmax(np.abs(mat[pivot_row:, pivot_col])) + pivot_row\n        if mat[max_row, pivot_col] == 0:\n            continue\n        mat[[pivot_row, max_row]] = mat[[max_row, pivot_row]]\n        pivot = mat[pivot_row, pivot_col]\n        mat[pivot_row] = mat[pivot_row] / pivot\n        for r in range(m):\n            if r != pivot_row:\n                factor = mat[r, pivot_col]\n                mat[r] = mat[r] - factor * mat[pivot_row]\n        pivot_row += 1\n        if pivot_row >= m:\n            break\n    pivot_cols = []\n    for r in range(m):\n        row = mat[r]\n        for c in range(n):\n            if abs(row[c]) > 1e-08:\n                pivot_cols.append(c)\n                break\n    if not pivot_cols:\n        return []\n    basis = A[:, pivot_cols]\n    rounded_basis = np.round(basis, 8)\n    return rounded_basis.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    mean_y = np.mean(y_true)\n    sst = np.sum((y_true - mean_y) ** 2)\n    sse = np.sum((y_true - y_pred) ** 2)\n    if np.isclose(sst, 0):\n        if np.isclose(sse, 0):\n            r2 = 1.0\n        else:\n            r2 = 0.0\n    else:\n        r2 = 1 - sse / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    num_rows = len(img)\n    num_cols = len(img[0])\n    if num_cols == 0:\n        return -1\n    for row in img:\n        if len(row) != num_cols:\n            return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total = 0\n    for row in img:\n        total += sum(row)\n    average = total / (num_rows * num_cols)\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except TypeError:\n        raise TypeError('Inputs must be array-like.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    if y_true.size == 0:\n        raise ValueError('Input arrays are empty.')\n    difference = y_true - y_pred\n    squared_diff = difference ** 2\n    mean_squared = np.mean(squared_diff)\n    rmse_value = np.sqrt(mean_squared)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    union = sum_true + sum_pred - intersection\n    if union == 0:\n        return 0.0\n    j = intersection / union\n    return round(j, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    tp = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    denominator = sum_true + sum_pred\n    if denominator == 0:\n        return 1.0\n    else:\n        dice = 2 * tp / denominator\n        return round(dice, 3)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    pairs = [(y[0], y[1]) for y in data]\n    counts = Counter(pairs)\n    tn = counts.get((0, 0), 0)\n    fp = counts.get((0, 1), 0)\n    fn = counts.get((1, 0), 0)\n    tp = counts.get((1, 1), 0)\n    return [[tn, fp], [fn, tp]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    pairs = list(zip(actual, predicted))\n    counts = Counter(pairs)\n    TP = counts.get((1, 1), 0)\n    FP = counts.get((0, 1), 0)\n    FN = counts.get((1, 0), 0)\n    TN = counts.get((0, 0), 0)\n    confusion_matrix = [[TN, FP], [FN, TP]]\n    total = TP + TN + FP + FN\n    if total == 0:\n        accuracy = 0.0\n    else:\n        accuracy = (TP + TN) / total\n    accuracy_rounded = round(accuracy, 3)\n    denominator_f1 = 2 * TP + FP + FN\n    if denominator_f1 == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * TP / denominator_f1\n    f1_rounded = round(f1, 3)\n    denominator_specificity = TN + FP\n    if denominator_specificity == 0:\n        specificity = 0.0\n    else:\n        specificity = TN / denominator_specificity\n    specificity_rounded = round(specificity, 3)\n    denominator_npv = TN + FN\n    if denominator_npv == 0:\n        npv = 0.0\n    else:\n        npv = TN / denominator_npv\n    npv_rounded = round(npv, 3)\n    return (confusion_matrix, accuracy_rounded, f1_rounded, specificity_rounded, npv_rounded)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    mean_val = np.mean(data)\n    median_val = np.median(data)\n    mode_val = np.mode(data)[0]\n    variance_val = np.var(data)\n    std_dev_val = np.std(data)\n    p25 = np.percentile(data, 25)\n    p50 = np.percentile(data, 50)\n    p75 = np.percentile(data, 75)\n    iqr_val = p75 - p25\n    stats = {'mean': round(mean_val, 4), 'median': round(median_val, 4), 'mode': mode_val, 'variance': round(variance_val, 4), 'standard_deviation': round(std_dev_val, 4), '25th_percentile': round(p25, 4), '50th_percentile': round(p50, 4), '75th_percentile': round(p75, 4), 'interquartile_range': round(iqr_val, 4)}\n    return stats"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials rounded to five decimal places\n    \"\"\"\n    comb = math.comb(n, k)\n    prob = comb * p ** k * (1 - p) ** (n - k)\n    return round(prob, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    exp_term = math.exp(exponent)\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf_value = coefficient * exp_term\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: The probability rounded to 5 decimal places\n    \"\"\"\n    prob = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(prob, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    return np.max(img) - np.min(img)"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of vec1 and vec2.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "def phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed = []\n    for x in data:\n        features = []\n        for i in range(degree + 1):\n            if i == 0:\n                features.append(1.0)\n            else:\n                features.append(x ** i)\n        rounded_features = [round(f, 8) for f in features]\n        transformed.append(rounded_features)\n    return transformed"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    encoding = np.zeros(d_model, dtype=np.float16)\n    for j in range(d_model):\n        i = j // 2\n        exponent = 2 * i / d_model\n        denominator = 10000 ** exponent\n        value = position / denominator\n        if j % 2 == 0:\n            encoding[j] = np.sin(value)\n        else:\n            encoding[j] = np.cos(value)\n    return encoding.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    new_m = beta1 * m + (1 - beta1) * grad\n    new_v = beta2 * v + (1 - beta2) * grad ** 2\n    denominator_beta1 = 1 - beta1 ** t\n    denominator_beta2 = 1 - beta2 ** t\n    m_hat = new_m / denominator_beta1\n    v_hat = new_v / denominator_beta2\n    updated_parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(updated_parameter, 5)\n    new_m = np.round(new_m, 5)\n    new_v = np.round(new_v, 5)\n    updated_parameter_list = updated_parameter.tolist()\n    new_m_list = new_m.tolist()\n    new_v_list = new_v.tolist()\n    return (updated_parameter_list, new_m_list, new_v_list)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    generated_tokens = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][generated_tokens]\n        pos_embeddings = params['wpe'][:len(generated_tokens)]\n        embeddings = token_embeddings + pos_embeddings\n        mean = np.mean(embeddings, axis=-1, keepdims=True)\n        std = np.std(embeddings, axis=-1, keepdims=True)\n        normalized = (embeddings - mean) / (std + 1e-05)\n        normalized = normalized * params['ln_f']['g'] + params['ln_f']['b']\n        last_embedding = normalized[-1]\n        logits = np.dot(last_embedding, params['wte'].T)\n        probs = np.exp(logits) / np.sum(np.exp(logits))\n        next_token = np.random.choice(len(probs), p=probs)\n        generated_tokens.append(next_token)\n    generated_text = encoder.decode(generated_tokens)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        values = np.array(values)\n        e_x = np.exp(values - np.max(values))\n        sum_e_x = np.sum(e_x)\n        return (e_x / sum_e_x).tolist()\n    sqrt_dim = np.sqrt(dimension)\n    result = []\n    for i in range(n):\n        scores = []\n        for j in range(n):\n            score = crystal_values[i] * crystal_values[j] / sqrt_dim\n            scores.append(score)\n        weights = softmax(scores)\n        total = 0.0\n        for j in range(n):\n            total += weights[j] * crystal_values[j]\n        result.append(total)\n    return [round(val, 4) for val in result]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter, defaultdict\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    query_words = query.split()\n    documents = [doc.split() for doc in corpus]\n    N = len(documents)\n    if N == 0:\n        return []\n    total_length = sum((len(doc) for doc in documents))\n    avg_dl = total_length / N\n    term_docs = defaultdict(int)\n    for doc in documents:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            term_docs[term] += 1\n    idf = {}\n    for term in query_words:\n        df = term_docs.get(term, 0)\n        if df == 0:\n            idf[term] = 0.0\n        else:\n            idf[term] = np.log(N / df)\n    scores = []\n    for doc in documents:\n        dl = len(doc)\n        tf = Counter(doc)\n        score = 0.0\n        for term in set(query_words) & set(tf.keys()):\n            tf_val = tf[term]\n            denominator = tf_val + k1 * (1 - b + b * (dl / avg_dl))\n            if denominator == 0:\n                contribution = 0.0\n            else:\n                contribution = tf_val * (k1 + 1) / denominator * idf[term]\n            score += contribution\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = 0\n    fp = 0\n    fn = 0\n    for (y_t, y_p) in zip(y_true, y_pred):\n        if y_t == 1 and y_p == 1:\n            tp += 1\n        elif y_t == 0 and y_p == 1:\n            fp += 1\n        elif y_t == 1 and y_p == 0:\n            fn += 1\n    if tp + fp == 0:\n        precision = 0.0\n    else:\n        precision = tp / (tp + fp)\n    if tp + fn == 0:\n        recall = 0.0\n    else:\n        recall = tp / (tp + fn)\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * precision * recall / (precision + recall)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_value = consumption_data[i - 1] - fluctuation\n        detrended.append(detrended_value)\n    X = list(range(1, 11))\n    Y = detrended\n    x_mean = sum(X) / len(X)\n    y_mean = sum(Y) / len(Y)\n    numerator = 0.0\n    denominator = 0.0\n    for (x, y) in zip(X, Y):\n        numerator += (x - x_mean) * (y - y_mean)\n        denominator += (x - x_mean) ** 2\n    a = numerator / denominator\n    b = y_mean - a * x_mean\n    x_pred = 15\n    y_pred = a * x_pred + b\n    fluctuation_day15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_pred = y_pred + fluctuation_day15\n    rounded_pred = round(total_pred)\n    safety_margin = rounded_pred * 1.05\n    final_value = math.ceil(safety_margin)\n    return final_value"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    mae_value = np.mean(np.abs(y_true - y_pred))\n    return round(mae_value, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the query, key, and value matrices.\n    \n    Args:\n    X (np.ndarray): Input data.\n    W_q (np.ndarray): Weight matrix for queries.\n    W_k (np.ndarray): Weight matrix for keys.\n    W_v (np.ndarray): Weight matrix for values.\n    \n    Returns:\n    tuple: A tuple containing the query, key, and value matrices.\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray=None) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention for a single head.\n    \n    Args:\n    Q (np.ndarray): Query matrix.\n    K (np.ndarray): Key matrix.\n    V (np.ndarray): Value matrix.\n    mask (np.ndarray, optional): Mask to apply (if any). Defaults to None.\n    \n    Returns:\n    np.ndarray: The output of the self-attention mechanism.\n    \"\"\"\n    d_k = Q.shape[1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    if mask is not None:\n        scores = scores * mask + (1 - mask) * -1000000000.0\n    e_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    sum_e = np.sum(e_scores, axis=1, keepdims=True)\n    attention_weights = e_scores / sum_e\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute the multi-head attention.\n    \n    Args:\n    X (np.ndarray): Input data.\n    W_q (np.ndarray): Weight matrix for queries.\n    W_k (np.ndarray): Weight matrix for keys.\n    W_v (np.ndarray): Weight matrix for values.\n    n_heads (int): Number of attention heads.\n    \n    Returns:\n    list: The output of the multi-head attention mechanism as a list.\n    \"\"\"\n    d_k = W_q.shape[1] // n_heads\n    outputs = []\n    for h in range(n_heads):\n        start = h * d_k\n        end = (h + 1) * d_k\n        W_q_head = W_q[:, start:end]\n        W_k_head = W_k[:, start:end]\n        W_v_head = W_v[:, start:end]\n        (Q, K, V) = compute_qkv(X, W_q_head, W_k_head, W_v_head)\n        output = self_attention(Q, K, V)\n        outputs.append(output)\n    concatenated = np.concatenate(outputs, axis=1)\n    rounded = np.round(concatenated, 4)\n    return rounded.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    a = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 1))\n    b = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 0))\n    c = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 1))\n    d = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 0))\n    numerator = a * d - b * c\n    denominator = ((a + b) * (c + d) * (a + c) * (b + d)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    else:\n        phi = numerator / denominator\n        return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return (x + 2.5) / 5.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to the 4th decimal place\n    \"\"\"\n    if x >= 0:\n        value = x\n    else:\n        value = alpha * (math.exp(x) - 1)\n    return round(value, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to four decimal places.\n    \"\"\"\n    if x >= 20:\n        result = x\n    elif x <= -20:\n        result = 0.0\n    else:\n        result = math.log(1 + math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to four decimal places.\n    \"\"\"\n    denominator = 1 + abs(x)\n    result = x / denominator\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    advantages = rhos * A\n    clipped_advantages = clipped_rhos * A\n    min_advantages = np.minimum(advantages, clipped_advantages)\n    avg_min_adv = np.mean(min_advantages)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective = avg_min_adv - beta * kl_divergence\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    beta = 1.0\n    sigmoid = 1.0 / (1.0 + math.exp(-beta * x))\n    result = x * sigmoid\n    return round(result, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        selu_value = scale * x\n    else:\n        selu_value = scale * alpha * (math.exp(x) - 1)\n    selu_value = round(selu_value, 4)\n    return selu_value"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = np.where(probabilities >= 0.5, 1, 0)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X (np.ndarray): Input features of shape (N, M) where N is the number of samples and M is the number of features.\n        y (np.ndarray): Target vector of shape (N,) containing class labels.\n        learning_rate (float): Learning rate for gradient descent.\n        iterations (int): Number of iterations to run gradient descent.\n\n    Returns:\n        tuple[list[float], list[float]]: A tuple containing the optimized coefficients B as a flattened list and the collected losses over iterations, both rounded to 4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    unique_ys = np.unique(y)\n    C = len(unique_ys)\n    class_to_idx = {cls: i for (i, cls) in enumerate(unique_ys)}\n    y_mapped = np.array([class_to_idx[c] for c in y])\n    Y_one_hot = np.zeros((N, C))\n    Y_one_hot[np.arange(N), y_mapped] = 1\n    B = np.random.randn(C, M) * 0.1\n    losses = []\n    for _ in range(iterations):\n        scores = X @ B\n        max_scores = np.max(scores, axis=1, keepdims=True)\n        stabilized_scores = scores - max_scores\n        exp_scores = np.exp(stabilized_scores)\n        sum_scores = np.sum(exp_scores, axis=1, keepdims=True)\n        probs = exp_scores / sum_scores\n        loss = -np.mean(np.log(probs[np.arange(N), y_mapped]))\n        gradient = X.T @ (probs - Y_one_hot) / N\n        B -= learning_rate * gradient\n        losses.append(round(loss, 4))\n    B_rounded = np.round(B, 4)\n    B_list = B_rounded.reshape(-1).tolist()\n    return (B_list, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.random.randn(n_features) * 0.01\n    bias = 0.0\n    loss_list = []\n    for _ in range(iterations):\n        z = X.dot(weights) + bias\n        p = 1 / (1 + np.exp(-z))\n        p = np.clip(p, 1e-08, 1 - 1e-08)\n        loss = (-y * np.log(p) - (1 - y) * np.log(1 - p)).mean()\n        loss_list.append(loss)\n        gradient_weights = X.T.dot(p - y) / n_samples\n        gradient_bias = np.mean(p - y)\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    coefficients = np.append(weights, bias)\n    coefficients = np.round(coefficients, 4).tolist()\n    loss_list = np.round(loss_list, 4).tolist()\n    return (loss_list, coefficients)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> list:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[2]\n    K_transposed = K.transpose(0, 2, 1)\n    scores = np.matmul(Q, K_transposed) / np.sqrt(d_k)\n    mask_expanded = mask[np.newaxis, :, :]\n    scores = np.where(mask_expanded == 0, -np.inf, scores)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = np.matmul(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The disorder is measured using Shannon entropy, which increases with more variety in colors.\n    \"\"\"\n    counts = Counter(apples)\n    total = len(apples)\n    if total == 0:\n        return 0.0\n    entropy = 0.0\n    for count in counts.values():\n        p = count / total\n        entropy -= p * math.log2(p)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=2, keepdims=True)\n    var = X.var(axis=2, keepdims=True)\n    std = np.sqrt(var + epsilon)\n    normalized_X = (X - mean) / std\n    scaled_X = gamma * normalized_X + beta\n    rounded = np.round(scaled_X, 5)\n    return rounded.tolist()"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    denominator = total_counts_x * total_counts_y\n    if denominator == 0:\n        return 0.0\n    ratio = joint_counts * total_samples / denominator\n    pmi = np.log2(ratio)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_x = min(x)\n    max_x = max(x)\n    if min_x == max_x:\n        return [0.0 for _ in x]\n    normalized = [(num - min_x) / (max_x - min_x) for num in x]\n    return [round(value, 4) for value in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    y1 = np.dot(w1, x)\n    y1_relu = np.maximum(y1, 0)\n    y2 = np.dot(w2, y1_relu)\n    y2_plus_x = y2 + x\n    output = np.maximum(y2_plus_x, 0)\n    return output.round(4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = X.mean(axis=(0, 2, 3))\n    var = X.var(axis=(0, 2, 3), ddof=0)\n    normalized = (X - mean[:, np.newaxis, np.newaxis, np.newaxis]) / np.sqrt(var[:, np.newaxis, np.newaxis, np.newaxis] + epsilon)\n    result = gamma[:, np.newaxis, np.newaxis, np.newaxis] * normalized + beta[:, np.newaxis, np.newaxis, np.newaxis]\n    return result.round(4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    if n == 0:\n        return 0.0\n    else:\n        derivative = c * n * x ** (n - 1)\n        return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        v_np = np.array(v, dtype=float)\n        u = v_np.copy()\n        for e in basis:\n            proj = np.dot(u, e) * e\n            u -= proj\n        norm = np.linalg.norm(u)\n        if norm < tol:\n            continue\n        e = u / norm\n        basis.append(e)\n    rounded_basis = [np.round(vec, 4).tolist() for vec in basis]\n    return rounded_basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    c = np.cross(a, b)\n    c_rounded = np.round(c, 4)\n    return c_rounded.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    det_A = np.linalg.det(A)\n    epsilon = 1e-10\n    if abs(det_A) < epsilon:\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x[i] = det_Ai / det_A\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    sum_sqrts = 0.0\n    for (pi, qi) in zip(p, q):\n        sum_sqrts += np.sqrt(pi * qi)\n    value = max(0.0, 1.0 - sum_sqrts)\n    distance = np.sqrt(value)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    num_episodes = len(episodes)\n    for episode in episodes:\n        returns = []\n        total_return = 0.0\n        for step in reversed(episode):\n            total_return += step[2]\n            returns.append(total_return)\n        returns = returns[::-1]\n        for t in range(len(episode)):\n            (s, a, _) = episode[t]\n            Gt = returns[t]\n            theta_s = theta[s]\n            exp_theta = np.exp(theta_s)\n            pi = exp_theta / exp_theta.sum()\n            grad = np.zeros(num_actions)\n            grad[a] = 1.0 - pi[a]\n            for a_prime in range(num_actions):\n                if a_prime != a:\n                    grad[a_prime] = -pi[a_prime]\n            gradient[s] += grad * Gt\n    gradient /= num_episodes\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = d_in * d_out\n    moe_flops = k_active * d_in * d_out / n_experts\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n    return round(savings, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    scores = np.dot(X, W_g)\n    noisy_scores = scores + W_noise * N\n\n    def process_row(row):\n        inds = np.argpartition(row, -k)[-k:]\n        topk = row[inds]\n        exp_topk = np.exp(topk)\n        sum_exp = np.sum(exp_topk)\n        if sum_exp == 0:\n            probs = np.zeros_like(exp_topk)\n        else:\n            probs = exp_topk / sum_exp\n        gating_row = np.zeros_like(row)\n        gating_row[inds] = probs\n        return gating_row\n    gating = np.apply_along_axis(process_row, axis=1, arr=noisy_scores)\n    gating = np.round(gating, 4)\n    return gating.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    We_transposed = We.transpose(1, 0, 2)\n    E = x.dot(We_transposed)\n    g = x.dot(Wg)\n    g = g - g.max(axis=1, keepdims=True)\n    g_exp = np.exp(g)\n    g_softmax = g_exp / g_exp.sum(axis=1, keepdims=True)\n    top_k_indices = np.argsort(-g_softmax, axis=1)[:, :top_k]\n    batch_size = x.shape[0]\n    selected_E = E[np.arange(batch_size)[:, None], top_k_indices, :]\n    selected_probs = g_softmax[np.arange(batch_size)[:, None], top_k_indices]\n    sum_probs = selected_probs.sum(axis=1, keepdims=True)\n    normalized_probs = selected_probs / sum_probs\n    output = (selected_E * normalized_probs[:, :, None]).sum(axis=1)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    G = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, G, H, W)\n    mean = X_reshaped.mean(axis=(2, 3, 4), keepdims=True)\n    var = X_reshaped.var(axis=(2, 3, 4), keepdims=True)\n    normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    gamma_reshaped = gamma.reshape(1, num_groups, 1, 1, 1)\n    beta_reshaped = beta.reshape(1, num_groups, 1, 1, 1)\n    result = normalized * gamma_reshaped + beta_reshaped\n    result = result.reshape(B, C, H, W)\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    current_x = start_x\n    for _ in range(max_iters):\n        derivative = 4 * current_x ** 3 - 9 * current_x ** 2\n        next_x = current_x - learning_rate * derivative\n        change = abs(next_x - current_x)\n        if change < tolerance:\n            current_x = next_x\n            break\n        current_x = next_x\n    return round(current_x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    gamma_x = gamma * x\n    exp_gamma_x = np.exp(gamma_x)\n    exp_neg_gamma_x = np.exp(-gamma_x)\n    numerator = gamma_x + beta\n    denominator = 1 + alpha * exp_neg_gamma_x + exp_gamma_x\n    result = numerator / denominator\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
