{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name '_np' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the weight vector for Ridge Regression using the closed-form solution.\n\n    Args:\n    data (np.ndarray): Input data where the last column is the target variable.\n    alpha (float, optional): Regularization strength. Defaults to 0.0.\n\n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places, or -1 if the matrix is singular.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    n_samples = X.shape[0]\n    X = np.hstack((np.ones((n_samples, 1)), X))\n    X_T_X = X.T @ X\n    n_features = X.shape[1]\n    matrix = X_T_X + alpha * np.eye(n_features)\n    try:\n        inv_matrix = np.linalg.inv(matrix)\n    except np.linalg.LinAlgError:\n        return -1\n    X_T_y = X.T @ y\n    weights = inv_matrix @ X_T_y\n    weights_rounded = np.round(weights, 4)\n    return weights_rounded.tolist()\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    alpha = np.zeros(n_samples, dtype=float)\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    updates = 0\n    while updates < n_iter:\n        made_update = False\n        for i in range(n_samples):\n            activation = np.dot(w, X_train[i]) + b\n            margin = y_train[i] * activation\n            if margin <= 0:\n                alpha[i] += eta\n                w += eta * y_train[i] * X_train[i]\n                b += eta * y_train[i]\n                updates += 1\n                made_update = True\n                break\n        if not made_update:\n            break\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: 'link_prime'", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(x):\n        return x\n\n    def identity_inv_link(x):\n        return x\n\n    def identity_derivative(x):\n        return np.ones_like(x)\n\n    def log_link(x):\n        return np.log(x)\n\n    def log_inv_link(x):\n        return np.exp(x)\n\n    def log_derivative(x):\n        return 1 / x\n\n    def logit_link(x):\n        return np.log(x / (1 - x))\n\n    def logit_inv_link(x):\n        return 1 / (1 + np.exp(-x))\n\n    def logit_derivative(x):\n        return 1 / (x * (1 - x))\n    links = {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\n    return links\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 7, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions:\n        return {}\n    N = len(transactions)\n    threshold = math.ceil(minsup * N)\n    transaction_sets = [set(transaction) for transaction in transactions]\n    unique_items = set()\n    for transaction in transactions:\n        unique_items.update(transaction)\n    unique_items = sorted(list(unique_items))\n    frequent_itemsets = {}\n    for k in range(1, len(unique_items) + 1):\n        for combo in combinations(unique_items, k):\n            support = 0\n            for t_set in transaction_sets:\n                if all((item in t_set for item in combo)):\n                    support += 1\n            if support >= threshold:\n                frequent_itemsets[combo] = support\n    return frequent_itemsets\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 20, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x_arr = np.asarray(x)\n    sigmoid_x = 1 / (1 + np.exp(-x_arr))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_rounded = np.round(sigmoid_x, 4)\n    gradient_rounded = np.round(gradient_x, 4)\n    if x_arr.ndim == 0:\n        return (sigmoid_rounded.item(), gradient_rounded.item())\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 25, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    X_test_reshaped = X_test[:, None, :]\n    X_train_reshaped = X_train[None, :, :]\n    diff = X_test_reshaped - X_train_reshaped\n    sq_dist = np.sum(diff ** 2, axis=2)\n    kernel = np.exp(-gamma * sq_dist)\n    weights = alpha * y_train\n    sum_terms = np.sum(weights * kernel, axis=1)\n    g = sum_terms + b\n    sign_g = np.sign(g)\n    sign_g = np.where(sign_g == 0, 1, sign_g).astype(int)\n    return sign_g.tolist()\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    (m, n) = X_np.shape\n    min_dim = min(m, n)\n    if k < 1 or k > min_dim:\n        return -1\n    (u, s, vh) = np.linalg.svd(X_np, full_matrices=False)\n    s_top = s[:k]\n    u_top = u[:, :k]\n    vh_top = vh[:k, :]\n    X_hat = u_top @ np.diag(s_top) @ vh_top\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_rounded = np.round(X_hat, 4)\n    X_hat_list = X_hat_rounded.tolist()\n    mse_rounded = np.round(mse, 4)\n    return (X_hat_list, mse_rounded)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 34, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"Generates a NumPy tensor filled with 0.0s and 1.0s based on the given shape and sparsity.\n    \n    Args:\n        shape (tuple[int, ...]): The shape of the output tensor.\n        sparsity (float, optional): Probability of an element being 1.0. Defaults to 0.5.\n        seed (int | None, optional): Seed for the random number generator. Defaults to None.\n    \n    Returns:\n        numpy.ndarray | int: A tensor with values 0.0 and 1.0 if sparsity is valid; otherwise, returns -1.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_arr = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (random_arr >= threshold).astype(np.float64)\n    return binary_tensor\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 39, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    k = n // 2\n    column = data[:, d]\n    sorted_indices = np.argpartition(column, k)\n    pivot = sorted_indices[k]\n    median_val = column[pivot]\n    left = [i for i in range(n) if column[i] < median_val]\n    right = [i for i in range(n) if column[i] > median_val]\n    return (pivot, left, right)\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be 1-dimensional'\n    assert stride >= 1, 'stride must be >= 1'\n    assert len(x) >= frame_width, 'len(x) must be >= frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    x_strides = x.strides[0]\n    new_strides = (stride * x_strides, x_strides)\n    arr = as_strided(x, shape=(n_frames, frame_width), strides=new_strides)\n    if not writeable:\n        arr.flags.writeable = False\n    return arr\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X_np = np.array(X, dtype=float)\n    except:\n        return False\n    if X_np.ndim != 2:\n        return False\n    if not np.all((X_np >= 0) & (X_np <= 1)):\n        return False\n    row_sums = np.sum(X_np, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 56, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implements the SoftPlus activation function and its derivative.\n\n    Args:\n        x: A scalar, list, or NumPy array of real numbers.\n        deriv: A boolean flag indicating whether to compute the derivative.\n               Defaults to False.\n\n    Returns:\n        The SoftPlus activation (if deriv=False) or its derivative (if deriv=True)\n        for each element in x, rounded to the nearest 4th decimal. If x is a\n        scalar, returns a float; otherwise, returns a list.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=np.float64)\n    if deriv:\n        result = np.where(x > 20, 1.0, np.where(x < -20, 0.0, 1 / (1 + np.exp(-x))))\n    else:\n        result = np.where(x > 20, x, np.where(x < -20, 0.0, np.log1p(np.exp(x))))\n    rounded = np.round(result, 4)\n    if is_scalar:\n        return rounded.item()\n    else:\n        return rounded.tolist()\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: name 'A1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the backward probability vector beta_t for a given time index t in an HMM.\n    \n    Args:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to compute the backward probabilities.\n    \n    Returns:\n    list[float]: Backward probability vector beta_t rounded to four decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    if T == 0:\n        return []\n    beta = [1.0 for _ in range(N)]\n    if t == T - 1:\n        return [round(x, 4) for x in beta]\n    for current_time in range(T - 2, t - 1, -1):\n        next_obs = obs[current_time + 1]\n        new_beta = []\n        for i in range(N):\n            prob = 0.0\n            for j in range(N):\n                a_ij = A[i][j]\n                b_j = B[j][next_obs]\n                prob += a_ij * b_j * beta[j]\n            new_beta.append(prob)\n        beta = new_beta\n    return [round(x, 4) for x in beta]\nassert backward_beta(A1, B1, obs1, 0) == [0.2032, 0.2164], \"failed: example t=0\"\nassert backward_beta(A1, B1, obs1, 1) == [0.38, 0.26], \"failed: example t=1\"\nassert backward_beta(A1, B1, obs1, 2) == [1.0, 1.0], \"failed: example t=2 (last index)\"\nassert backward_beta(A2, B2, obs2, 3) == [1.0, 1.0, 1.0], \"failed: 3-state t=3\"\nassert backward_beta(A2, B2, obs2, 2) == [0.49, 0.5, 0.47], \"failed: 3-state t=2\"\nassert backward_beta(A2, B2, obs2, 1) == [0.2488, 0.2434, 0.2552], \"failed: 3-state t=1\"\nassert backward_beta(A2, B2, obs2, 0) == [0.1267, 0.1245, 0.133], \"failed: 3-state t=0\"\nassert backward_beta(A3, B3, obs3, 0) == [1.0, 1.0], \"failed: single observation\"\nassert backward_beta(A4, B4, obs4, 0) == [0.45, 0.54], \"failed: custom 2-state t=0\"\nassert backward_beta(A4, B4, obs4, 1) == [1.0, 1.0], \"failed: custom 2-state t=1\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    logouri = np.log(y_pred + epsilon)\n    product = y * logouri\n    summed = np.sum(product)\n    L = -summed\n    return round(L, 4)\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = A2.ravel()\n    Y = Y.ravel()\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.size\n    log_a = np.log(A2_clipped)\n    log_1_minus_a = np.log(1 - A2_clipped)\n    term1 = Y * log_a\n    term2 = (1 - Y) * log_1_minus_a\n    total = term1 + term2\n    cost = -np.sum(total) / m\n    return round(cost, 6)\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 86, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    transposed = zip(*predictions)\n    result = []\n    for votes in transposed:\n        counts = Counter(votes)\n        max_count = max(counts.values()) if counts else 0\n        candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n        selected_label = min(candidates)\n        result.append(selected_label)\n    return result\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 88, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        result = np.logaddexp(0.0, z)\n        rounded_result = round(result, 4)\n        return float(rounded_result)\n    else:\n        z_np = np.asarray(z)\n        computed = np.logaddexp(0.0, z_np)\n        rounded = np.round(computed, 4)\n        return rounded.tolist()\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: name 'run_example' is not defined", "solution": "\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n        predictions.append(output_str)\n    return predictions\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.asarray(state)\n    h1_linear = np.dot(weights['W1'], state) + weights['b1']\n    h1_activation = np.maximum(h1_linear, 0)\n    h2_linear = np.dot(weights['W2'], h1_activation) + weights['b2']\n    h2_activation = np.maximum(h2_linear, 0)\n    action_linear = np.dot(weights['W3'], h2_activation) + weights['b3']\n    action = np.tanh(action_linear)\n    action_rounded = np.round(action, 4)\n    return action_rounded.tolist()\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 165, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    n = len(x)\n    if n == 0:\n        return 0.0\n    x_np = np.asarray(x)\n    y_np = np.asarray(y)\n    count = np.sum(x_np != y_np)\n    distance = count / n\n    return round(distance, 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 180, "completion_id": 0, "passed": false, "result": "failed: only integer scalar arrays can be converted to a scalar index", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\"\"\"\n    X_train_np = np.array(X_train)\n    n_train = len(y_train)\n    predictions = []\n    for test_point in X_test:\n        test_point_np = np.array(test_point)\n        distances = np.linalg.norm(X_train_np - test_point_np, axis=1)\n        indices = np.argsort(distances)\n        if k == 0 or k >= n_train:\n            num_neighbors = n_train\n        else:\n            num_neighbors = k\n        nearest_indices = indices[:num_neighbors]\n        y_nearest = y_train[nearest_indices]\n        if task == 'classification':\n            counts = Counter(y_nearest)\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            prediction = min(candidates)\n        elif task == 'regression':\n            prediction = round(np.mean(y_nearest), 4)\n        else:\n            raise ValueError(\"Invalid task type. Must be 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 218, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand):\n        sum_cards = sum(hand)\n        num_aces = hand.count(1)\n        if num_aces >= 1 and sum_cards + 10 <= 21:\n            return sum_cards + 10\n        else:\n            return sum_cards\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    def is_natural(hand):\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_natural = is_natural(player)\n    dealer_natural = is_natural(dealer)\n    if player_score > 21:\n        return -1.0\n    elif dealer_score > 21:\n        return 1.0\n    elif player_score > dealer_score:\n        if player_natural:\n            return 1.5\n        else:\n            return 1.0\n    elif dealer_score > player_score:\n        return -1.0\n    else:\n        return 0.0\nassert blackjack_outcome([1,10],[10,7]) == 1.5, \"Failed on natural blackjack win [1,10] vs [10,7]\"\nassert blackjack_outcome([1,10],[1,10]) == 0.0, \"Failed on natural blackjack draw [1,10] vs [1,10]\"\nassert blackjack_outcome([10,6],[9,7]) == 0.0, \"Failed on simple draw 16 vs 16\"\nassert blackjack_outcome([10,6],[9,8]) == -1.0, \"Failed on player loses 16 vs 17\"\nassert blackjack_outcome([10,5,9],[10,6]) == -1.0, \"Failed on player bust 24 vs 16\"\nassert blackjack_outcome([10,7],[10,6,9]) == 1.0, \"Failed on dealer bust 17 vs 25\"\nassert blackjack_outcome([1,7,3],[10,10]) == 1.0, \"Failed on soft 21 win\"\nassert blackjack_outcome([1,5,5,10],[10,9,2]) == 0.0, \"Failed on 21 draw\"\nassert blackjack_outcome([10,2],[10,10,5]) == 1.0, \"Failed on dealer bust scenario\"\nassert blackjack_outcome([9,9,9],[1,9]) == -1.0, \"Failed on large bust 27 vs 20\""}
{"task_id": 221, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function to compute element-wise squared log errors.\"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    log_actual = np.log(1 + actual)\n    log_predicted = np.log(1 + predicted)\n    errors = log_actual - log_predicted\n    squared_errors = errors ** 2\n    return squared_errors\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    if actual.size == 0:\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    msle_rounded = round(msle, 4)\n    return msle_rounded\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float, np.number)):\n        if z >= 0:\n            sig = 1.0 / (1.0 + math.exp(-z))\n        else:\n            sig = math.exp(z) / (1.0 + math.exp(z))\n        return round(sig, 4)\n    else:\n        z_array = np.asarray(z, dtype=np.float64)\n        mask = z_array >= 0\n        sig = np.zeros_like(z_array)\n        sig[mask] = 1.0 / (1.0 + np.exp(-z_array[mask]))\n        sig[~mask] = np.exp(z_array[~mask]) / (1.0 + np.exp(z_array[~mask]))\n        rounded = np.round(sig, 4)\n        return rounded.tolist()\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        activated = np.where(z >= 0, z, a * z)\n        return activated.tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(element, a) for element in z]\n    elif z >= 0:\n        return z\n    else:\n        return a * z\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 243, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    sum_state = sum(state)\n    a = max(0, sum_state)\n    action_probs = [1 / 3, 1 / 3, 1 / 3]\n    state_value = 64 * a\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 253, "completion_id": 0, "passed": false, "result": "failed: failed on value, case 1", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    L1 = np.sum(np.abs(w))\n    L2 = 0.5 * np.sum(w ** 2)\n    penalty = alpha * (l1_ratio * L1 + (1 - l1_ratio) * L2)\n    if not gradient:\n        return round(penalty, 4)\n    else:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        grad = np.round(grad, 4)\n        return grad.tolist()\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 256, "completion_id": 0, "passed": false, "result": "failed: name 'ToyLinearRNN' is not defined", "solution": "import numpy as np\nfrom copy import deepcopy\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_key = param_name.lower()\n    else:\n        param_key = param_name\n    theta = model.parameters[param_key]\n    grads = np.zeros_like(theta, dtype=np.float64)\n    for idx in np.ndenumerate(theta):\n        original_value = theta[idx]\n        model_plus = deepcopy(model)\n        model_plus.flush_gradients()\n        plus_params = model_plus.parameters[param_key]\n        plus_params[idx] += epsilon\n        predictions_plus = []\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            pred = model_plus.forward(x_t)\n            predictions_plus.append(pred)\n        loss_plus = loss_func(predictions_plus)\n        model_minus = deepcopy(model)\n        model_minus.flush_gradients()\n        minus_params = model_minus.parameters[param_key]\n        minus_params[idx] -= epsilon\n        predictions_minus = []\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            pred = model_minus.forward(x_t)\n            predictions_minus.append(pred)\n        loss_minus = loss_func(predictions_minus)\n        grad = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[idx] = grad\n    return grads.T\nimport numpy as np, math, random; from copy import deepcopy; rng = np.random.default_rng(0); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(3, 2, 3)); n_t = 3; expected = analytic_grad_P(model, n_t, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', n_t, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 2x2'\nimport numpy as np; rng = np.random.default_rng(1); model = ToyLinearRNN(3, 1, rng); X = rng.normal(size=(4, 3, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 3x1'\nimport numpy as np; rng = np.random.default_rng(2); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(5, 1, 1)); expected = analytic_grad_P(model, 1, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 1, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: n_t = 1'\nimport numpy as np; rng = np.random.default_rng(3); model = ToyLinearRNN(2, 4, rng); X = rng.normal(size=(2, 2, 3)); expected = analytic_grad_ba(model, 3, X); numeric = grad_check_RNN(model, squared_loss, 'Ba', 3, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for Ba'\nimport numpy as np; rng = np.random.default_rng(4); model = ToyLinearRNN(4, 2, rng); X = rng.normal(size=(3, 4, 4)); expected = analytic_grad_P(model, 4, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 4, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 4x2'\nimport numpy as np; rng = np.random.default_rng(5); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X, epsilon=1e-8); assert np.allclose(numeric, expected, atol=1e-4), 'test case failed: small epsilon'\nimport numpy as np; rng = np.random.default_rng(6); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(3, 1, 5)); expected = analytic_grad_P(model, 5, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 5, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 1x3'\nimport numpy as np; rng = np.random.default_rng(7); model = ToyLinearRNN(3, 2, rng); X = rng.normal(size=(2, 3, 2)); expected = analytic_grad_ba(model, 2, X); numeric = grad_check_RNN(model, squared_loss, 'ba', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for ba'\nimport numpy as np; rng = np.random.default_rng(8); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'X', 2, X) is None, 'test case failed: param X should return None'\nimport numpy as np; rng = np.random.default_rng(9); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'y', 2, X) is None, 'test case failed: param y should return None'"}
{"task_id": 261, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        fan_in = shape[1]\n        fan_out = shape[0]\n    else:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        receptive_field = 1\n        for d in shape[2:]:\n            receptive_field *= d\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    s = np.sqrt(2 / (fan_in + fan_out))\n    rng = np.random.default_rng()\n    return rng.normal(0, s, shape)\nnp.random.seed(1)\nshape=(64,32)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (64,32)\"\nnp.random.seed(2)\nshape=(16,3,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (16,3,3,3)\"\nnp.random.seed(3)\nshape=(5,5)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.2,\"mean far from 0 for shape (5,5)\"\nnp.random.seed(4)\nshape=(8,8,1,1)\nW=glorot_normal(shape)\nfan_in=8*1*1\nfan_out=8*1*1\nexp_std=np.sqrt(2/(fan_in+fan_out))\nassert abs(W.std()-exp_std)<0.1,\"std incorrect for shape (8,8,1,1)\"\nnp.random.seed(5)\nshape=(1,1,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (1,1,3,3)\"\nnp.random.seed(6)\nshape=(10,)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (10,)\"\nnp.random.seed(7)\nshape=(12,6,2,2)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.1,\"mean far from 0 for shape (12,6,2,2)\"\nnp.random.seed(8)\nshape=(4,4,4)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (4,4,4)\"\nnp.random.seed(9)\nshape=(128,256)\nW=glorot_normal(shape)\nassert abs(W.std()-np.sqrt(2/(128+256)))<0.05,\"std incorrect for shape (128,256)\""}
{"task_id": 266, "completion_id": 0, "passed": false, "result": "failed: failed: self loop ignored", "solution": "\nfrom typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    index_map = {v: i for (i, v) in enumerate(V)}\n    adj_sets = [set() for _ in range(len(V))]\n    for (u, v) in E:\n        adj_sets[index_map[u]].add(v)\n        adj_sets[index_map[v]].add(u)\n    G = []\n    for i in range(len(V)):\n        neighbors = sorted(adj_sets[i], key=lambda x: index_map[x])\n        G.append(neighbors)\n    return G\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is None or not callable(initializer):\n        raise ValueError('Invalid initialization function.')\n    return initializer\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 290, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 292, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]] | int:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    num_cols = p1.shape[1]\n    child1 = np.concatenate((p1[:, :cutoff], p2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((p2[:, :cutoff], p1[:, cutoff:]), axis=1)\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 296, "completion_id": 0, "passed": false, "result": "failed: Failed on integer vector", "solution": "import numpy as np\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    mask = (x == 0) | (x == 1)\n    return mask.all()\nassert is_binary(np.array([0, 1, 1, 0])) is True, \"Failed on integer vector\"\nassert is_binary(np.array([[0, 1], [1, 0]], dtype=bool)) is True, \"Failed on boolean matrix\"\nassert is_binary(np.array([0.0, 1.0])) is True, \"Failed on float vector\"\nassert is_binary(np.array([0, 2])) is False, \"Failed on non-binary value 2\"\nassert is_binary(np.array([-1, 0, 1])) is False, \"Failed on negative non-binary value\"\nassert is_binary(np.array([0, 1, 3])) is False, \"Failed on non-binary value 3\"\nassert is_binary(np.array([[0], [1], [0]])) is True, \"Failed on column vector\"\nassert is_binary(np.zeros((3, 4))) is True, \"Failed on all-zeros matrix\"\nassert is_binary(np.ones((2, 2))) is True, \"Failed on all-ones matrix\"\nassert is_binary(np.array([True, False, True])) is True, \"Failed on boolean vector\""}
{"task_id": 303, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic example", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_tuple = params[prev_ix]\n    curr_tuple = params[ix]\n    (prev_mine, prev_label) = prev_tuple\n    (curr_mine, curr_label) = curr_tuple\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    top_line = '-' * 25 + ' DEBUG ' + '-' * 25\n    end_line = '-' * 23 + ' END DEBUG ' + '-' * 23\n    lines = [top_line, f'Mine (prev) [{prev_label}]:', prev_mine, f'Theirs (prev) [{prev_label}]:', prev_gold, f'Mine [{curr_label}]:', curr_mine, f'Theirs [{curr_label}]:', curr_gold + warn_str, end_line]\n    return '\\n'.join(lines)\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 312, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        n_count = window_len\n        N = n_count - 1\n    else:\n        n_count = window_len + 1\n        N = n_count - 1\n    window = []\n    for n in range(n_count):\n        term1 = a1 * np.cos(2 * np.pi * n / N)\n        term2 = a2 * np.cos(4 * np.pi * n / N)\n        term3 = a3 * np.cos(6 * np.pi * n / N)\n        bh = a0 - term1 + term2 - term3\n        window.append(bh)\n    if not symmetric:\n        window = window[:window_len]\n    window = [round(value, 4) for value in window]\n    return window\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 329, "completion_id": 0, "passed": false, "result": "failed: test case failed: dft_bins(8, 8000, True)", "solution": "import numpy as np\nimport numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz. Default is 44 kHz.\n    positive_only : bool, optional\n        When True, return only the non-negative frequency bins; when False, return all N bins. Default is True.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals. An empty list is returned when N or fs is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        freqs = freqs[:N // 2 + 1]\n    rounded = np.round(freqs, 4)\n    return rounded.tolist()\nassert dft_bins(8, 8000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(8, 8000, True)\"\nassert dft_bins(8, 8000, False) == [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(8, 8000, False)\"\nassert dft_bins(5, 10000, True) == [0.0, 2000.0, 4000.0], \"test case failed: dft_bins(5, 10000, True)\"\nassert dft_bins(5, 10000, False) == [0.0, 2000.0, 4000.0, -4000.0, -2000.0], \"test case failed: dft_bins(5, 10000, False)\"\nassert dft_bins(1, 48000, True) == [0.0], \"test case failed: dft_bins(1, 48000, True)\"\nassert dft_bins(2, 48000, False) == [0.0, -24000.0], \"test case failed: dft_bins(2, 48000, False)\"\nassert dft_bins(16, 16000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0], \"test case failed: dft_bins(16, 16000, True)\"\nassert dft_bins(16, 16000, False) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, -8000.0, -7000.0, -6000.0, -5000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(16, 16000, False)\"\nassert dft_bins(9, 9000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(9, 9000, True)\"\nassert dft_bins(3, 3000, False) == [0.0, 1000.0, -1000.0], \"test case failed: dft_bins(3, 3000, False)\""}
{"task_id": 331, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask).astype(bool)\n    n_samples = len(y_true)\n    squared_errors = []\n    for i in range(n_samples):\n        mask = oob_mask[i]\n        if np.any(mask):\n            preds = predictions[i, mask]\n            avg_pred = np.mean(preds)\n            se = (avg_pred - y_true[i]) ** 2\n            squared_errors.append(se)\n    if not squared_errors:\n        return -1\n    else:\n        mse = np.mean(squared_errors)\n        return round(mse, 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    freq = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            freq[item] += 1\n    frequent_items = {item: count for (item, count) in freq.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    global_order = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    order_map = {item: idx for (idx, item) in enumerate(global_order)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        unique_filtered = [item for item in set(transaction) if item in frequent_items]\n        if not unique_filtered:\n            continue\n        ordered_transaction = sorted(unique_filtered, key=lambda x: order_map[x])\n        current_node = root\n        for item in ordered_transaction:\n            if item in current_node['children']:\n                current_node = current_node['children'][item]\n                current_node['support'] += 1\n            else:\n                new_node = {'support': 1, 'children': {}}\n                current_node['children'][item] = new_node\n                current_node = new_node\n    return root\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 336, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | np.ndarray, Y: list[list[int | float]] | np.ndarray | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\"\"\"\n    X_np = np.asarray(X)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.asarray(Y)\n    if X_np.shape[0] == 0:\n        return []\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    K = X_np @ Y_np.T\n    K += c0\n    K_rounded = np.round(K, 4)\n    K_list = K_rounded.tolist()\n    return K_list\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 340, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    is_zero_grad = np.all(grad == 0)\n    if not is_zero_grad:\n        denominator_beta1 = 1 - beta1 ** t\n        denominator_beta2 = 1 - beta2 ** t\n        m_hat = m_new / denominator_beta1\n        v_hat = v_new / denominator_beta2\n        sqrt_v_hat = np.sqrt(v_hat)\n        denominator = sqrt_v_hat + eps\n        update = lr * m_hat / denominator\n        updated_param = param - update\n    else:\n        updated_param = param.copy()\n    updated_param_list = [round(x, 8) for x in updated_param.tolist()]\n    m_new_list = [round(x, 8) for x in m_new.tolist()]\n    v_new_list = [round(x, 8) for x in v_new.tolist()]\n    return (updated_param_list, m_new_list, v_new_list)\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 343, "completion_id": 0, "passed": false, "result": "failed: bad operand type for unary -: 'list'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    K = int(retain_prcnt * N)\n    sorted_indices = np.argsort(-rewards)\n    top_indices = sorted_indices[:K]\n    retained = theta_samples[top_indices]\n    mean = np.mean(retained, axis=0)\n    var = np.var(retained, axis=0)\n    rounded_mean = [round(x, 4) for x in mean.tolist()]\n    rounded_var = [round(x, 4) for x in var.tolist()]\n    return (rounded_mean, rounded_var)\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 353, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    counts = Counter(labels)\n    total = sum(counts.values())\n    if total == 0:\n        return 0.0\n    ent = 0.0\n    for count in counts.values():\n        p = count / total\n        ent += p * math.log2(p)\n    ent *= -1\n    return round(ent, 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = leaf.value\n        max_prob = max(probs)\n        return probs.index(max_prob)\n    else:\n        return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 362, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_array = np.array(data, dtype=float)\n    row_sums = np.sum(data_array, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized = data_array / row_sums[:, None]\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: name 'Discrete' is not defined", "solution": "\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    if tuple_action:\n        action_space = env.action_space\n        if isinstance(action_space, Tuple):\n            sub_spaces = action_space.spaces\n        else:\n            sub_spaces = action_space.spaces.values()\n        cont_action = all((isinstance(s, Box) for s in sub_spaces))\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs:\n        obs_space = env.observation_space\n        if isinstance(obs_space, Tuple):\n            sub_spaces = obs_space.spaces\n        else:\n            sub_spaces = obs_space.spaces.values()\n        cont_obs = all((isinstance(s, Box) for s in sub_spaces))\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 369, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        shape = updates[0].shape if updates else (0,)\n        running_pred = np.zeros(shape, dtype=np.float64)\n    else:\n        sum_updates = np.sum(updates, axis=0)\n        running_pred = -learning_rate * sum_updates\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        max_logits = np.max(running_pred, axis=1, keepdims=True)\n        exp_logits = np.exp(running_pred - max_logits)\n        sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n        probabilities = exp_logits / sum_exp\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 373, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y_array = np.asarray(y)\n    (unique_classes, counts) = np.unique(y_array, return_counts=True)\n    N = y_array.size\n    sum_squares = np.sum((counts / N) ** 2)\n    gini_value = 1 - sum_squares\n    return round(gini_value, 4)\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, theta) + b\n        error = y_hat - y\n        dw = 2.0 / m * np.dot(X.T, error)\n        db = 2.0 / m * np.sum(error)\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    theta = np.round(theta, 4)\n    b = round(b, 4)\n    return (theta.tolist(), b)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 376, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    arr = np.array(X)\n    return np.allclose(arr, arr.T, atol=1e-08)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 377, "completion_id": 0, "passed": false, "result": "failed: failed: mismatched lengths", "solution": "import numpy as np\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"Compute the negative gradient of the logistic loss for binary classification.\n    \n    Args:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores.\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n          Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    if not all((yi in (0, 1) for yi in y)):\n        return -1\n    y_np = np.array(y, dtype=int)\n    f_np = np.array(f, dtype=float)\n    y_prime = 2 * y_np - 1\n    denominator = 1 + np.exp(y_prime * f_np)\n    g = y_prime / denominator\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()\nassert logistic_negative_gradient([0,1,0],[0.0,0.5,-0.5])==[-0.5,0.3775,-0.3775],\"failed: basic example\"\nassert logistic_negative_gradient([1,1,1],[0,0,0])==[0.5,0.5,0.5],\"failed: all ones zero score\"\nassert logistic_negative_gradient([0,0,0],[0,0,0])==[-0.5,-0.5,-0.5],\"failed: all zeros zero score\"\nassert logistic_negative_gradient([1,0],[2,-2])==[0.1192,-0.1192],\"failed: symmetric scores\"\nassert logistic_negative_gradient([1],[10])==[0.0],\"failed: large positive score\"\nassert logistic_negative_gradient([0],[-10])==[-0.0],\"failed: large negative score\"\nassert logistic_negative_gradient([],[])==[],\"failed: empty input\"\nassert logistic_negative_gradient([0,2],[0,0])==-1,\"failed: invalid label\"\nassert logistic_negative_gradient([0,1,0],[0.1])==-1,\"failed: mismatched lengths\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'float'", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    denominator = np.sqrt(Eg_new + 1e-08)\n    w_new = w - learning_rate * grad / denominator\n    w_rounded = np.round(w_new, 4)\n    Eg_rounded = np.round(Eg_new, 4)\n    w_list = w_rounded.tolist()\n    Eg_list = Eg_rounded.tolist()\n    return (w_list, Eg_list)\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 398, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.asarray(x)\n    mask = x_arr >= 0\n    if not derivative:\n        res = np.where(mask, x_arr, alpha * (np.exp(x_arr) - 1))\n    else:\n        res = np.where(mask, 1.0, alpha * np.exp(x_arr))\n    rounded = np.round(res, 4)\n    return rounded.tolist()\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 419, "completion_id": 0, "passed": false, "result": "failed: V must be None, float, or ndarray", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X_proc = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new_proc = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    else:\n        X_proc = X\n        X_new_proc = X_new\n    n_features = X_proc.shape[1]\n    if V is None:\n        V = np.eye(n_features)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(n_features)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n        elif V.shape != (n_features, n_features):\n            raise ValueError('V must be a square matrix of size n_features x n_features')\n    else:\n        raise ValueError('V must be None, float, or ndarray')\n    V_inv = np.linalg.inv(V)\n    if isinstance(mu, (float, int)):\n        mu = np.full(n_features, mu)\n    elif isinstance(mu, np.ndarray):\n        if mu.shape[0] != n_features:\n            raise ValueError('mu must be a scalar or vector of length n_features')\n    else:\n        raise ValueError('mu must be a scalar or ndarray')\n    term1 = V_inv @ mu\n    term2 = X_proc.T @ y\n    numerator = term1 + term2\n    sum_matrix = V_inv + X_proc.T @ X_proc\n    Sigma_p = np.linalg.inv(sum_matrix)\n    mu_p = Sigma_p @ numerator\n    predictions = X_new_proc @ mu_p\n    rounded_predictions = [round(pred, 4) for pred in predictions]\n    return rounded_predictions\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 423, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between two lists of numbers.\n    \n    Args:\n        actual (list[float]): The ground truth values.\n        predicted (list[float]): The predicted values.\n    \n    Returns:\n        float: The RMSLE value rounded to four decimal places, or -1 if the inputs are invalid.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    n = len(actual)\n    if n == 0:\n        return -1\n    for (a, p) in zip(actual, predicted):\n        if a < 0 or p < 0:\n            return -1\n    actual_np = np.array(actual, dtype=float)\n    predicted_np = np.array(predicted, dtype=float)\n    log_actual = np.log(1 + actual_np)\n    log_predicted = np.log(1 + predicted_np)\n    diffs = log_predicted - log_actual\n    squared_diffs = diffs ** 2\n    mean_sq = np.mean(squared_diffs)\n    rmsle = np.sqrt(mean_sq)\n    return round(rmsle, 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 428, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    computed_length = window_len if symmetric else window_len + 1\n    n = np.arange(computed_length)\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (computed_length - 1))\n    if not symmetric:\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        kernel_h = shape[2]\n        kernel_w = shape[3]\n        receptive_field = kernel_h * kernel_w\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 435, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    y_np = np.array(y, dtype=np.float64)\n    if n_estimators <= 0 or learning_rate == 0:\n        y_mean = y_np.mean()\n        return [round(y_mean, 4)] * len(y_np)\n    m = X_np.shape[0]\n    y_hat = np.full(m, y_np.mean())\n    for _ in range(n_estimators):\n        residuals = y_np - y_hat\n        X_extended = np.hstack((np.ones((m, 1)), X_np))\n        (coefficients, _, _, _) = np.linalg.lstsq(X_extended, residuals, rcond=None)\n        h = np.dot(X_extended, coefficients)\n        y_hat += learning_rate * h\n    rounded = [round(float(val), 4) for val in y_hat]\n    return rounded\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = isinstance(x, (int, float))\n    arr = np.asarray(x)\n    sigma = 1 / (1 + np.exp(-arr))\n    if order == 0:\n        res = sigma\n    elif order == 1:\n        res = sigma * (1 - sigma)\n    else:\n        res = sigma * (1 - sigma) * (1 - 2 * sigma)\n    rounded = np.round(res, 4)\n    if is_scalar:\n        return float(rounded.item())\n    else:\n        return rounded.tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    n_samples = len(y)\n    if n_samples == 0:\n        return []\n    y_max = y.max()\n    if num_classes is None:\n        num_classes = y_max + 1\n    elif num_classes < y_max + 1:\n        return -1\n    result = np.zeros((n_samples, num_classes), dtype=int)\n    for i in range(n_samples):\n        result[i, y[i]] = 1\n    return result.tolist()\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    pred_array = np.array(predictions)\n    avg_probs = np.mean(pred_array, axis=0)\n    rounded_avg = np.round(avg_probs, 4)\n    class_labels = np.argmax(rounded_avg, axis=1)\n    averaged_probs_list = rounded_avg.tolist()\n    class_labels_list = class_labels.tolist()\n    return (averaged_probs_list, class_labels_list)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: test 4 failed", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if gamma < 0 or gamma > 1:\n        return -1\n    batch_size = Q.shape[0]\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    y = Q.copy()\n    for i in range(batch_size):\n        action = actions[i]\n        reward = rewards[i]\n        done = dones[i]\n        if done:\n            target = reward\n        else:\n            max_next_q = np.max(Q_next[i])\n            target = reward + gamma * max_next_q\n        y[i, action] = target\n    y = np.round(y, 4)\n    return y.tolist()\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 458, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return []\n    for label in labels:\n        if label < 0:\n            return -1\n    max_label = max(labels)\n    if num_classes is not None:\n        if num_classes < max_label + 1:\n            return -1\n        for label in labels:\n            if label >= num_classes:\n                return -1\n    else:\n        num_classes = max_label + 1\n    result = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result\nassert to_categorical([0, 2, 1, 3], 4) == [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]], \"test case failed: to_categorical([0, 2, 1, 3], 4)\"\nassert to_categorical(np.array([1,1,1]), None) == [[0,1],[0,1],[0,1]], \"test case failed: to_categorical(np.array([1,1,1]), None)\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical([3,2,4], 5) == [[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,1]], \"test case failed: to_categorical([3,2,4], 5)\"\nassert to_categorical([], 0) == [], \"test case failed: to_categorical([], 0)\"\nassert to_categorical([0], None) == [[1]], \"test case failed: to_categorical([0], None)\"\nassert to_categorical([9,8,7,6,5], None) == [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0]], \"test case failed: labels 9..5\"\nassert to_categorical([1,0,1,0], 2) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: alternating labels\"\nassert to_categorical([0,0,0], 1) == [[1],[1],[1]], \"test case failed: single class\"\nassert to_categorical([2,1], 2) == -1, \"test case failed: num_classes too small\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: test5 failed", "solution": "import numpy as np\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    q = [row.copy() for row in q_table]\n    num_actions = len(q[0]) if q else 0\n    if next_state is not None:\n        q_next = q[next_state]\n        max_val = max(q_next)\n        greedy_action = next((a for (a, val) in enumerate(q_next) if val == max_val), None)\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                prob = 1.0 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expected_value += prob * q_next[a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    current_q = q[state][action]\n    new_q = current_q + lr * (target - current_q)\n    q[state][action] = new_q\n    for s in range(len(q)):\n        for a in range(len(q[s])):\n            q[s][a] = round(q[s][a], 4)\n    return q\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
{"task_id": 474, "completion_id": 0, "passed": false, "result": "failed: test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n    for i in range(m):\n        x_low = (i // 2 + 0.1) * 10\n        x_high = (i // 2 + 0.9) * 10\n        y_low = (i % 2 * interval + 0.1) * 10\n        y_high = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_low, x_high, n_train)\n        y_train = np.random.uniform(y_low, y_high, n_train)\n        X_train_samples = np.column_stack((x_train, y_train))\n        Y_train_samples = np.full(n_train, label)\n        x_val = np.random.uniform(x_low, x_high, n_val)\n        y_val = np.random.uniform(y_low, y_high, n_val)\n        X_val_samples = np.column_stack((x_val, y_val))\n        Y_val_samples = np.full(n_val, label)\n        X_train_list.append(X_train_samples)\n        Y_train_list.append(Y_train_samples)\n        X_val_list.append(X_val_samples)\n        Y_val_list.append(Y_val_samples)\n    X_train = np.concatenate(X_train_list, axis=0)\n    Y_train = np.concatenate(Y_train_list, axis=0)\n    X_val = np.concatenate(X_val_list, axis=0)\n    Y_val = np.concatenate(Y_val_list, axis=0)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)\nassert generate_data(2, 2, 1, 1, seed=0)[0].tolist() == [[7.7554, 7.0636], [4.3646, 3.0713], [7.2704, 13.4265], [4.8128, 15.6671]], \"test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train\"\nassert generate_data(2, 1, 1, 1, seed=1)[2].tolist() == [-1, 1], \"test case failed: generate_data(2,1,1,1,seed=1) \u2013 Y_train\"\nassert generate_data(2, 3, 0, 1, seed=0)[0].shape == (6, 2), \"test case failed: generate_data(2,3,0,1,seed=0) \u2013 shapes\"\nassert generate_data(3, 2, 1, 0.5, seed=3)[2].shape == (6,), \"test case failed: generate_data(3,2,1,0.5,seed=3) \u2013 label shape\"\nassert generate_data(4, 1, 0, 1, seed=4)[1].size == 0, \"test case failed: generate_data(4,1,0,1,seed=4) \u2013 empty validation\"\nassert len(set(generate_data(5, 2, 2, 1, seed=6)[2].tolist())) == 5, \"test case failed: unique labels\"\nassert not np.array_equal(generate_data(2, 2, 0, 1, seed=7)[0], generate_data(2, 2, 0, 1, seed=8)[0]), \"test case failed: different seeds\"\nassert generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==1][:,1].min() - generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==-1][:,1].max() >= 20, \"test case failed: interval separation\"\nassert isinstance(generate_data(2, 1, 1, 1, seed=10)[0], np.ndarray), \"test case failed: return type\"\nassert generate_data(2, 1, 1, 1, seed=0)[0].dtype == float, \"test case failed: dtype check\""}
{"task_id": 475, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not subscriptable", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    denom_m = 1.0 - b1 ** t\n    denom_v = 1.0 - b2 ** t\n    m_hat = m_t / denom_m\n    v_hat = v_t / denom_v\n    sqrt_v_hat = np.sqrt(v_hat)\n    denominator = sqrt_v_hat + eps\n    w_new = w - learning_rate * (m_hat / denominator)\n    return (w_new, m_t, v_t)\nimport numpy as np\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1)[0], 0.999000001, atol=1e-8), \"failed: scalar, t=1, positive grad\"\nassert np.allclose(adam_update(1.0, -0.1, 0.0, 0.0, 1)[0], 1.000999999, atol=1e-8), \"failed: scalar, t=1, negative grad\"\nw_vec, m_vec, v_vec = adam_update(np.array([1.0, -1.0]), np.array([0.2, -0.2]), np.zeros(2), np.zeros(2), 1)\nassert np.allclose(w_vec, np.array([0.999, -0.999]), atol=1e-8), \"failed: vector, t=1\"\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1, learning_rate=0.01)[0], 0.990000001, atol=1e-8), \"failed: different learning rate\"\nassert np.allclose(adam_update(1.0, 0.0, 0.0, 0.0, 1)[0], 1.0, atol=1e-12), \"failed: zero gradient gives no update\"\nw6, m6, v6 = adam_update(2.5, -0.5, 0.0, 0.0, 1)\nassert np.allclose([w6, m6, v6], [2.501, -0.05, 0.00025], atol=1e-8), \"failed: scalar, large grad\"\nw7, m7, v7 = adam_update(0.999000001, 0.1, 0.01, 1e-5, 2)\nassert np.allclose([w7, m7, v7[...]], [0.998000002, 0.019, 1.999e-5], atol=1e-8), \"failed: scalar, t=2\"\nvec_prev_m = np.array([0.02, -0.02])\nvec_prev_v = np.array([4e-5, 4e-5])\nwv, mv, vv = adam_update(np.array([0.999, -0.999]), np.array([0.2, -0.2]), vec_prev_m, vec_prev_v, 2)\nassert np.allclose(wv, np.array([0.998, -0.998]), atol=1e-8), \"failed: vector, t=2\"\nassert np.allclose(adam_update(5.0, 0.0, None, None, 3)[1:], (0.0, 0.0), atol=1e-12), \"failed: None moments treated as zeros\""}
{"task_id": 479, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not rewards:\n        return []\n    N = len(rewards[0])\n    estimates = [ev_prior] * N\n    counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(N)\n        else:\n            max_val = max(estimates)\n            candidates = [i for (i, val) in enumerate(estimates) if val == max_val]\n            arm = min(candidates)\n        r = rewards[t][arm]\n        counts[arm] += 1\n        estimates[arm] += (r - estimates[arm]) / counts[arm]\n    return [round(v, 4) for v in estimates]\nassert epsilon_greedy_bandit([[1,0,0],[0,1,0],[1,0,0],[0,1,0],[1,0,0]],0,0.5,42) == [0.6,0.5,0.5], \"test case 1 failed\"\nassert epsilon_greedy_bandit([[0,1],[0,1],[0,1]],0,0) == [0.0,0.0], \"test case 2 failed\"\nassert epsilon_greedy_bandit([[1,0],[1,0],[1,0]],0,0.5) == [1.0,0.5], \"test case 3 failed\"\nassert epsilon_greedy_bandit([[0,0,1],[0,1,0],[1,0,0]],0,0) == [0.3333,0.0,0.0], \"test case 4 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,1],[0,1],[0,1]],0,0.1) == [0.0,1.0], \"test case 5 failed\"\nassert epsilon_greedy_bandit([[1],[0],[1],[1],[1]],0,0.5) == [0.8], \"test case 6 failed\"\nassert epsilon_greedy_bandit([[0,0,0],[0,0,1],[0,1,0],[0,0,1]],0,0.0) == [0.0,0.0,0.0], \"test case 7 failed\"\nassert epsilon_greedy_bandit([[0.5,1.0,0.2,0.2]],0,0.5) == [0.5,0.5,0.5,0.5], \"test case 8 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,0]],0,0.7) == [0.0,0.0], \"test case 9 failed\"\nassert epsilon_greedy_bandit([[1,1]],0,0.5) == [1.0,0.5], \"test case 10 failed\""}
{"task_id": 482, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if y.size == 0:\n        if num_classes is None:\n            return np.zeros((0, 0), dtype=int)\n        else:\n            return np.zeros((0, num_classes), dtype=int)\n    if num_classes is None:\n        if (y < 0).any():\n            raise ValueError('Negative labels found when num_classes is None.')\n        num_classes = max(y) + 1\n    elif (y < 0).any() or (y >= num_classes).any():\n        raise ValueError('Invalid label')\n    result = np.eye(num_classes, dtype=int)[y]\n    return result\nassert (to_categorical([0, 1, 2]) == np.array([[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: basic consecutive labels\"\nassert (to_categorical(np.array([2,0,1,2])) == np.array([[0,0,1],[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: shuffled labels\"\nassert (to_categorical([0,1,2], num_classes=5) == np.array([[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]])).all(), \"failed: extra unused columns\"\nassert (to_categorical([4], num_classes=5) == np.array([[0,0,0,0,1]])).all(), \"failed: single element\"\nassert (to_categorical((3,3,3)) == np.array([[0,0,0,1],[0,0,0,1],[0,0,0,1]])).all(), \"failed: tuple input\"\nassert (to_categorical(np.arange(6)) == np.eye(6, dtype=int)).all(), \"failed: arange sequence\"\nassert (to_categorical([1,1,1,1]) == np.array([[0,1],[0,1],[0,1],[0,1]])).all(), \"failed: duplicate labels\"\nassert to_categorical([], num_classes=0).shape == (0,0), \"failed: empty input with explicit classes\"\ntry:\n    to_categorical([0,2], num_classes=2)\n    assert False, \"failed: did not raise on out-of-range label\"\nexcept ValueError:\n    pass\ntry:\n    to_categorical([-1,0,1])\n    assert False, \"failed: did not raise on negative label\"\nexcept ValueError:\n    pass"}
{"task_id": 490, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_np = np.asarray(x)\n    matrix = np.diag(x_np)\n    return matrix.tolist()\nassert make_diagonal([1, 2, 3]) == [[1, 0, 0], [0, 2, 0], [0, 0, 3]], \"test case failed: make_diagonal([1, 2, 3])\"\nassert make_diagonal([5]) == [[5]], \"test case failed: make_diagonal([5])\"\nassert make_diagonal([]) == [], \"test case failed: make_diagonal([])\"\nassert make_diagonal((0, 0, 0, 0)) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], \"test case failed: make_diagonal((0, 0, 0, 0))\"\nassert make_diagonal(np.array([3.5, -2.1])) == [[3.5, 0.0], [0.0, -2.1]], \"test case failed: make_diagonal(np.array([3.5, -2.1]))\"\nassert make_diagonal([1, -1, 1, -1]) == [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, -1]], \"test case failed: make_diagonal([1, -1, 1, -1])\"\nassert make_diagonal(np.arange(4)) == [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]], \"test case failed: make_diagonal(np.arange(4))\"\nassert make_diagonal([1.1, 2.2, 3.3]) == [[1.1, 0.0, 0.0], [0.0, 2.2, 0.0], [0.0, 0.0, 3.3]], \"test case failed: make_diagonal([1.1, 2.2, 3.3])\"\nassert make_diagonal(tuple(range(6))) == [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5]], \"test case failed: make_diagonal(tuple(range(6)))\"\nassert make_diagonal(np.array([])) == [], \"test case failed: make_diagonal(np.array([]))\""}
{"task_id": 493, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y_array = np.asarray(y)\n    n = y_array.size\n    if n == 0:\n        return -1\n    mean_y = y_array.mean()\n    squared_diffs = (y_array - mean_y) ** 2\n    mse_value = squared_diffs.mean()\n    return round(mse_value, 4)\nassert mse([1, 2, 3]) == 0.6667, \"failed on mse([1, 2, 3])\"\nassert mse(np.array([0, 0, 0])) == 0.0, \"failed on mse([0,0,0])\"\nassert mse([-1, 1]) == 1.0, \"failed on mse([-1,1])\"\nassert mse([5]) == 0.0, \"failed on mse([5])\"\nassert mse([1, 3, 5, 7]) == 5.0, \"failed on mse([1,3,5,7])\"\nassert mse([2.5, 2.5, 2.5, 2.5]) == 0.0, \"failed on identical values\"\nassert mse(np.arange(10)) == 8.25, \"failed on np.arange(10)\"\nassert mse([]) == -1, \"failed on empty list\"\nassert mse(np.array([])) == -1, \"failed on empty np.array\"\nassert mse([100, -100, 0]) == 6666.6667, \"failed on mse([100,-100,0])\""}
{"task_id": 496, "completion_id": 0, "passed": false, "result": "failed: failed on ([-1,0,1],0.5,-1)", "solution": "import numpy as np\nimport numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    if x.ndim == 0:\n        x = x.reshape(1)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    y_list = y_rounded.tolist()\n    grad_list = grad_rounded.tolist()\n    grad2_list = grad2_rounded.tolist()\n    return (y_list, grad_list, grad2_list)\nassert apply_affine([0, 1, 2], 2, 1) == ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0]), \"failed on ([0,1,2],2,1)\"\nassert apply_affine([-1, 0, 1], 0.5, -1) == ([-1.5, -1.0, -0.5], [0.5, 0.5, 0.5], [0.0, 0.0, 0.0]), \"failed on ([-1,0,1],0.5,-1)\"\nassert apply_affine([4]) == ([4.0], [1.0], [0.0]), \"failed on default params ([4])\"\nassert apply_affine([2, 4], -1, 0) == ([-2.0, -4.0], [-1.0, -1.0], [0.0, 0.0]), \"failed on negative slope\"\nassert apply_affine([0.1, 0.2], 3.3333, 0) == ([0.3333, 0.6667], [3.3333, 3.3333], [0.0, 0.0]), \"failed on fractional slope\"\nassert apply_affine([10, 20, 30], 0, 5) == ([5.0, 5.0, 5.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]), \"failed on zero slope\"\nassert apply_affine([1000, -1000], 0.1, 10) == ([110.0, -90.0], [0.1, 0.1], [0.0, 0.0]), \"failed on large magnitude inputs\"\nassert apply_affine([-7], -0.25, 2) == ([3.75], [-0.25], [0.0]), \"failed on single element negative slope\"\nassert apply_affine([0, 0, 0], 3, -2) == ([-2.0, -2.0, -2.0], [3.0, 3.0, 3.0], [0.0, 0.0, 0.0]), \"failed on zeros input\""}
{"task_id": 509, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    max_diff = 0.0\n    for (a, b) in zip(x, y):\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return round(max_diff, 4)\nassert chebyshev([1, 2, 3], [2, 4, 6]) == 3.0, \"failed for ([1,2,3],[2,4,6])\"\nassert chebyshev([0, 0, 0], [0, 0, 0]) == 0.0, \"failed for zero vectors\"\nassert chebyshev([-1, -2, -3], [1, 2, 3]) == 6.0, \"failed for negatives\"\nassert chebyshev([1.5, 2.5], [1.4, 2.7]) == 0.2, \"failed for floats\"\nassert chebyshev(np.array([1, 2, 3]), np.array([1, 3, 5])) == 2.0, \"failed for numpy arrays\"\nassert chebyshev([1], [10]) == 9.0, \"failed for single-element vectors\"\nassert chebyshev([0.12345], [0.12344]) == 0.0, \"failed for rounding requirement\"\nassert chebyshev([1, 2, 3], [1, 2]) == -1, \"failed for length mismatch\""}
{"task_id": 510, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    recon_loss = y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped)\n    recon_loss = -recon_loss\n    total_recon = np.sum(recon_loss)\n    mu_squared = t_mean ** 2\n    var = np.exp(t_log_var)\n    kl_terms = 1 + t_log_var - mu_squared - var\n    total_kl = np.sum(kl_terms) * -0.5\n    batch_size = y.shape[0]\n    total_loss = (total_recon + total_kl) / batch_size\n    return round(total_loss, 6)\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.9,0.2],[0.1,0.8]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.328504, \"test case failed: basic reconstruction only\"\nassert vae_loss(np.array([[1,1],[0,0]]),\n                 np.array([[0.8,0.7],[0.3,0.2]]),\n                 np.array([[0.2,-0.1],[-0.3,0.5]]),\n                 np.array([[-0.2,0.1],[0.1,-0.3]])) == 0.694791, \"test case failed: reconstruction + KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.5]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 0.693147, \"test case failed: single element, zero KL\"\nassert vae_loss(np.array([[1,0,1]]),\n                 np.array([[0.9,0.1,0.4]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 1.127012, \"test case failed: three features, no KL\"\nassert vae_loss(np.array([[1,0],[1,0]]),\n                 np.array([[0.7,0.3],[0.6,0.4]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.867501, \"test case failed: batch size 2, no KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.8]]),\n                 np.array([[0.5]]),\n                 np.array([[-0.1]])) == 0.350562, \"test case failed: single element with KL\"\nassert vae_loss(np.array([[0]]),\n                 np.array([[0.2]]),\n                 np.array([[0.0]]),\n                 np.array([[0.2]])) == 0.233845, \"test case failed: y=0 with KL\"\nassert vae_loss(np.array([[0,1,0,1]]),\n                 np.array([[0.2,0.9,0.4,0.8]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 1.062473, \"test case failed: four features, no KL\"\nassert vae_loss(np.array([[1,1,1]]),\n                 np.array([[0.5,0.5,0.5]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 2.079442, \"test case failed: three identical probabilities\"\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.55,0.45],[0.45,0.55]]),\n                 np.array([[0.1,-0.1],[0.2,0.3]]),\n                 np.zeros((2,2))) == 1.233174, \"test case failed: mixed KL values\""}
{"task_id": 513, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    w_np = np.array(w, dtype=float)\n    V_np = np.array(V, dtype=float)\n    linear_part = w0 + np.dot(X_np, w_np)\n    s = np.dot(X_np, V_np)\n    s_squared = s ** 2\n    X_squared = X_np ** 2\n    V_squared = V_np ** 2\n    sum_v2x2 = np.dot(X_squared, V_squared)\n    term = s_squared - sum_v2x2\n    interaction = 0.5 * np.sum(term, axis=1)\n    predictions = linear_part + interaction\n    rounded_predictions = np.round(predictions, 4)\n    return rounded_predictions.tolist()\nassert fm_predict([[1, 0], [0, 1], [1, 1]], 0.5, [1, 2], [[0.1, 0.2], [0.3, 0.4]]) == [1.5, 2.5, 3.61], \"test case failed: basic example\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[1], [1]]) == [2.0], \"test case failed: interaction only\"\nassert fm_predict([[3, 4]], 1.0, [-1, -1], [[0, 0], [0, 0]]) == [-6.0], \"test case failed: no interactions\"\nassert fm_predict([[1, 1], [2, 2]], 0.0, [1, 1], [[0.5], [0.5]]) == [2.25, 5.0], \"test case failed: repeated sample\"\nassert fm_predict([[0, 0]], 0.0, [1, 2], [[0, 0], [0, 0]]) == [0.0], \"test case failed: all zeros\"\nassert fm_predict([[1, 3]], 2.0, [0, 1], [[-0.5], [0.5]]) == [4.25], \"test case failed: negative factors\"\nassert fm_predict([[1, 2, 3], [0, 1, 0]], 0.1, [1, -1, 0.5], [[0.2, 0.3], [0.4, 0.1], [0.5, 0.7]]) == [3.37, -0.9], \"test case failed: 3 features, 2 factors\"\nassert fm_predict([[2]], -1.0, [1], [[0.5]]) == [1.0], \"test case failed: single feature\"\nassert fm_predict([[1, 0], [0, 0], [0, 1]], 0.0, [1, 1], [[0, 0], [0, 0]]) == [1.0, 0.0, 1.0], \"test case failed: mixed zeros\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[0.5], [1.5]]) == [1.5], \"test case failed: fractional interaction\""}
{"task_id": 517, "completion_id": 0, "passed": false, "result": "failed: test case failed: sigmoid([-1,0,1])", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float, np.number)):\n        if z >= 0:\n            s = 1.0 / (1.0 + np.exp(-z))\n        else:\n            s = np.exp(z) / (1.0 + np.exp(z))\n        s = round(s, 4)\n        return float(s)\n    else:\n        arr = np.asarray(z)\n        mask = arr >= 0\n        sig = np.zeros_like(arr)\n        sig[mask] = 1.0 / (1.0 + np.exp(-arr[mask]))\n        sig[~mask] = np.exp(arr[~mask]) / (1.0 + np.exp(arr[~mask]))\n        rounded = np.round(sig, 4)\n        return rounded.tolist()\nassert sigmoid(0) == 0.5, \"test case failed: sigmoid(0)\"\nassert sigmoid(5) == 0.9933, \"test case failed: sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"test case failed: sigmoid(-5)\"\nassert sigmoid(100) == 1.0, \"test case failed: sigmoid(100)\"\nassert sigmoid(-100) == 0.0, \"test case failed: sigmoid(-100)\"\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test case failed: sigmoid([-1,0,1])\"\nassert sigmoid(np.array([2, -2, 0.5, -0.5])) == [0.8808, 0.1192, 0.6225, 0.3775], \"test case failed: sigmoid([2,-2,0.5,-0.5])\"\nassert sigmoid([[0, 10], [-10, 1]]) == [[0.5, 1.0], [0.0, 0.7311]], \"test case failed: sigmoid([[0,10],[-10,1]])\"\nassert sigmoid([700, -700]) == [1.0, 0.0], \"test case failed: sigmoid([700,-700])\"\nassert sigmoid(np.array([[3]])) == [[0.9526]], \"test case failed: sigmoid([[3]])\""}
{"task_id": 518, "completion_id": 0, "passed": false, "result": "failed: name '_accuracy' is not defined", "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual, predicted):\n        processed_actual = actual\n        if processed_actual.ndim == 2 and processed_actual.shape[1] > 1:\n            processed_actual = processed_actual.argmax(axis=1)\n        processed_predicted = predicted\n        if processed_predicted.ndim == 2 and processed_predicted.shape[1] > 1:\n            processed_predicted = processed_predicted.argmax(axis=1)\n        return function(processed_actual, processed_predicted)\n    return wrapper\nassert abs(_accuracy(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[0,1,0],[0,0,1]])) - 0.6667) < 1e-4, \"test case failed: accuracy with both inputs one-hot\"\nassert abs(_accuracy(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]])) - 1.0) < 1e-9, \"test case failed: perfect match one-hot\"\nassert abs(_accuracy(np.array([0,1,1,0]), np.array([[1,0],[0,1],[0,1],[1,0]])) - 1.0) < 1e-9, \"test case failed: actual labels, predicted one-hot\"\nassert abs(_accuracy(np.array([[0,0,1],[1,0,0],[0,1,0]]), np.array([2,0,1])) - 1.0) < 1e-9, \"test case failed: actual one-hot, predicted labels\"\nassert abs(_accuracy(np.array([[1,0],[0,1],[1,0],[0,1]]), np.array([[1,0],[1,0],[1,0],[0,1]])) - 0.75) < 1e-9, \"test case failed: two-class partial mismatch\"\nassert _collect(np.array([[2],[0],[1]]), np.array([[2],[0],[1]])) == ([[2],[0],[1]], [[2],[0],[1]]), \"test case failed: shape (n,1) should remain unchanged\"\nassert _collect(np.array([1,0,2]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2], [1,0,2]), \"test case failed: mixed dimensionalities\"\nassert _collect(np.eye(5, dtype=int), np.eye(5, dtype=int))[0] == [0,1,2,3,4], \"test case failed: five-class eye matrix\"\nassert _collect(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2],[1,0,2]), \"test case failed: explicit conversion check\"\nassert _collect(np.array([3,1,4,1,5]), np.array([3,1,4,1,5])) == ([3,1,4,1,5],[3,1,4,1,5]), \"test case failed: 1-D labels untouched\""}
{"task_id": 520, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(x) for x in z]\n    elif isinstance(z, np.ndarray):\n        grad = z * (1 - z)\n        rounded = np.round(grad, 4)\n        return rounded\n    else:\n        grad = z * (1 - z)\n        rounded = np.round(grad, 4)\n        return float(rounded)\nassert sigmoid_grad(0.5) == 0.25, \"failed on scalar 0.5\"\nassert sigmoid_grad(0.8) == 0.16, \"failed on scalar 0.8\"\nassert sigmoid_grad([0.5, 0.8]) == [0.25, 0.16], \"failed on list [0.5,0.8]\"\nassert sigmoid_grad([[0.5, 0.4], [0.7, 0.3]]) == [[0.25, 0.24], [0.21, 0.21]], \"failed on 2D list\"\nassert sigmoid_grad(0.0) == 0.0, \"failed on boundary 0.0\"\nassert sigmoid_grad(1.0) == 0.0, \"failed on boundary 1.0\"\nassert sigmoid_grad([0.2, 0.4, 0.6, 0.8]) == [0.16, 0.24, 0.24, 0.16], \"failed on list [0.2,0.4,0.6,0.8]\"\nassert sigmoid_grad([0.7310586]) == [0.1966], \"failed on list [0.7310586]\"\nassert sigmoid_grad([]) == [], \"failed on empty list\"\nassert sigmoid_grad(np.array([[0.25, 0.75]])) == [[0.1875, 0.1875]], \"failed on numpy input\""}
{"task_id": 528, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    x1 = [point[0] for point in X]\n    x2 = [point[1] for point in X]\n    (min_x1, max_x1) = (min(x1), max(x1))\n    (min_x2, max_x2) = (min(x2), max(x2))\n    x1_plot = np.linspace(min_x1, max_x1, grid_n)\n    x2_plot = np.linspace(min_x2, max_x2, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    z = W[0] * x1_mesh + W[1] * x2_mesh + b\n    labels = np.where(z >= 0, 1, -1)\n    labels_list = labels.tolist()\n    return labels_list\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3) == [[1, 1, 1], [-1, 1, 1], [-1, -1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3) == [[-1, -1, -1], [1, 1, 1], [1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3) == [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2) == [[1, 1], [1, -1]], \"test case failed: decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2)\"\nres = decision_boundary_grid([[0, 0], [3, 3]], [1, 1], -6, 4)\nassert len(res) == 4 and all(len(r) == 4 for r in res), \"test case failed: decision_boundary_grid shape with grid_n=4\"\nassert decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2) == [[-1, 1], [1, 1]], \"test case failed: decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2)\"\nall_pos = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], 5, 2)\nassert all(v == 1 for row in all_pos for v in row), \"test case failed: decision_boundary_grid bias all positive\"\nall_neg = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], -5, 2)\nassert all(v == -1 for row in all_neg for v in row), \"test case failed: decision_boundary_grid bias all negative\"\nassert decision_boundary_grid([[0, 0], [4, 1]], [1, -1], 0, 3)[0] == [1, 1, 1], \"test case failed: decision_boundary_grid non square range\"\nret = decision_boundary_grid([[0, 0], [1, 1]], [1, 1], 0, 2)\nassert isinstance(ret, list) and all(isinstance(r, list) for r in ret), \"test case failed: decision_boundary_grid return type\""}
{"task_id": 539, "completion_id": 0, "passed": false, "result": "failed: test case failed: simple example", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Computes the binary cross-entropy cost.\"\"\"\n    m = AL.size\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    sum_terms = Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    sum_total = np.sum(sum_terms)\n    J = -sum_total / m\n    return round(float(J), 4)\nassert abs(compute_cost(np.array([[0.8,0.9,0.4]]),np.array([[1,1,0]]))-( -(1/3)*np.sum(np.array([[1,1,0]])*np.log(np.array([[0.8,0.9,0.4]]))+(1-np.array([[1,1,0]]))*np.log(1-np.array([[0.8,0.9,0.4]])) ) ))<1e-12, \"test case failed: simple example\"\nassert abs(compute_cost(np.array([0.35]),np.array([0]))-(-np.sum(np.array([0])*np.log(np.array([0.35]))+(1-np.array([0]))*np.log(1-np.array([0.35])))))<1e-12, \"test case failed: single sample\"\nassert abs(compute_cost(np.array([1e-20,1-1e-20]),np.array([0,1])) - (-(1/2)*np.sum(np.array([0,1])*np.log(np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)) + (1-np.array([0,1]))*np.log(1-np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)))))<1e-12, \"test case failed: clipping\"\nassert abs(compute_cost(np.array([[0.2,0.4,0.6,0.8,0.5]]),np.array([[0,0,1,1,0]]))-( -(1/5)*np.sum(np.array([[0,0,1,1,0]])*np.log(np.array([[0.2,0.4,0.6,0.8,0.5]]))+(1-np.array([[0,0,1,1,0]]))*np.log(1-np.array([[0.2,0.4,0.6,0.8,0.5]])) ) ))<1e-12, \"test case failed: batch size 5\"\nassert abs(compute_cost(np.array([0.7,0.3,0.2]),np.array([1,0,0]))-( -(1/3)*np.sum(np.array([1,0,0])*np.log(np.array([0.7,0.3,0.2]))+(1-np.array([1,0,0]))*np.log(1-np.array([0.7,0.3,0.2])) ) ))<1e-12, \"test case failed: flat vector\"\nassert abs(compute_cost(np.array([0.1,0.2,0.3,0.4]),np.zeros(4))-( -(1/4)*np.sum((1-np.zeros(4))*np.log(1-np.array([0.1,0.2,0.3,0.4])) ) ))<1e-12, \"test case failed: all zeros\"\nassert abs(compute_cost(np.array([0.6,0.7,0.8]),np.ones(3))-( -(1/3)*np.sum(np.ones(3)*np.log(np.array([0.6,0.7,0.8])) ) ))<1e-12, \"test case failed: all ones\"\nnp.random.seed(0); AL=np.random.rand(1,10); Y=(AL>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 1\"\nnp.random.seed(42); AL=np.random.rand(10); Y=(np.random.rand(10)>0.3).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 2\"\nnp.random.seed(7); AL=np.random.rand(1,100); Y=(np.random.rand(1,100)>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/100)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: large batch\""}
{"task_id": 555, "completion_id": 0, "passed": false, "result": "failed: case 2 failed", "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    neighborhoods = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                dist = np.linalg.norm(data[i] - data[j])\n                if dist <= eps:\n                    neighborhoods[i].append(j)\n    core = [len(neighbors) >= min_samples for neighbors in neighborhoods]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] == -1 and core[i]:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque()\n            queue.append(i)\n            while queue:\n                current = queue.popleft()\n                for neighbor in neighborhoods[current]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if core[neighbor]:\n                            queue.append(neighbor)\n    return labels\nassert dbscan(np.array([[0,0],[0,1],[1,0],[1,1],[5,5]]),1.5,3)==[1,1,1,1,-1],\"case 1 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,3)==[1,1,1,2,2,2],\"case 2 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,4)==[-1,-1,-1,-1,-1,-1],\"case 3 failed\"\nassert dbscan(np.array([[0,0],[0,0],[0,0.1],[0.1,0]]),0.2,2)==[1,1,1,1],\"case 4 failed\"\nassert dbscan(np.array([[0],[0.5],[1.0],[5.0],[5.1],[5.2]]),0.3,2)==[-1,-1,-1,1,1,1],\"case 5 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),15,2)==[1,1,1,1,1,1],\"case 6 failed\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[1,1,1,1],\"case 7 failed\"\nassert dbscan(np.array([[0,0],[0,0.5],[10,10],[20,20]]),1,2)==[1,1,-1,-1],\"case 8 failed\"\nassert dbscan(np.array([[0,0]]),0.5,1)==[1],\"case 9 failed\"\nassert dbscan(np.array([[-5,-5],[-5,-4],[-4,-5],[5,5]]),1.5,3)==[1,1,1,-1],\"case 10 failed\""}
{"task_id": 563, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    G = X_data @ X_data.T\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum((alpha * y_data)[:, None] * X_data, axis=0)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nassert perceptron_dual_train(np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 1.0], 1.0), \"failed test 1\"\nassert perceptron_dual_train(np.array([[1, 0], [2, 0], [-1, 0], [-2, 0]]), np.array([1, 1, -1, -1])) == ([2.0, 0.0], 0.0), \"failed test 2\"\nassert perceptron_dual_train(np.array([[2, 2], [1, 1], [-1, -1], [-2, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 1.0), \"failed test 3\"\nassert perceptron_dual_train(np.array([[1, 1, 1], [2, 2, 2], [-1, -1, -1], [-2, -2, -2]]), np.array([1, 1, -1, -1])) == ([1.0, 1.0, 1.0], 1.0), \"failed test 4\"\nassert perceptron_dual_train(np.array([[1, 1], [-1, -1]]), np.array([1, -1])) == ([1.0, 1.0], 1.0), \"failed test 5\"\nassert perceptron_dual_train(np.array([[0, 1], [0, 2], [0, -1], [0, -2]]), np.array([1, 1, -1, -1])) == ([0.0, 2.0], 0.0), \"failed test 6\"\nassert perceptron_dual_train(np.array([[1], [2], [-1], [-2]]), np.array([1, 1, -1, -1])) == ([2.0], 0.0), \"failed test 7\"\nassert perceptron_dual_train(np.array([[3, 3], [-3, -3]]), np.array([1, -1])) == ([3.0, 3.0], 1.0), \"failed test 8\"\nassert perceptron_dual_train(np.array([[1, 0], [0, 1], [-1, 0], [0, -1]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 0.0), \"failed test 9\"\nassert perceptron_dual_train(np.array([[1, 1], [2, 2], [-2, -2]]), np.array([1, 1, -1])) == ([1.0, 1.0], 1.0), \"failed test 10\""}
{"task_id": 564, "completion_id": 0, "passed": false, "result": "failed: name 'root1' is not defined", "solution": "\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        feature_index = root.label\n        feature_value = features[feature_index]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    else:\n        feature_index = root.label\n        feature_value = features[feature_index]\n        if feature_value <= root.s:\n            next_node = root.child[0]\n        else:\n            next_node = root.child[1]\n        return predict_sample(next_node, features, task_type)\nassert predict_sample(root1, [\"red\"], \"classification\") == \"apple\", \"TC1 failed\"\nassert predict_sample(root1, [\"blue\"], \"classification\") == \"pear\", \"TC2 failed\"\nassert predict_sample(root2, [\"A\", \"Y\"], \"classification\") == 1, \"TC3 failed\"\nassert predict_sample(root3, [7], \"regression\") == 5.0, \"TC4 failed\"\nassert predict_sample(root3, [10], \"regression\") == 5.0, \"TC5 failed\"\nassert predict_sample(root3, [12], \"regression\") == 15.0, \"TC6 failed\"\nassert predict_sample(root4, [6, -1], \"regression\") == 1.5, \"TC7 failed\"\nassert predict_sample(leaf_only, [], \"classification\") == 42, \"TC8 failed\"\nassert predict_sample(root5, [1], \"classification\") == \"One\", \"TC9 failed\"\nassert predict_sample(root6, [\"z\", \"d\"], \"classification\") == \"Bird\", \"TC10 failed\""}
{"task_id": 569, "completion_id": 0, "passed": false, "result": "failed: test case failed: single document", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    word_counts = Counter()\n    for document in data:\n        (_, words) = document\n        unique_words = set(words)\n        for word in unique_words:\n            word_counts[word] += 1\n    total_documents = len(data)\n    word_ratios = []\n    if total_documents != 0:\n        for (word, count) in word_counts.items():\n            ratio = count / total_documents\n            rounded_ratio = round(ratio, 4)\n            word_ratios.append((word, rounded_ratio))\n    sorted_word_ratios = sorted(word_ratios, key=lambda x: (-x[1], x[0]))\n    if cut_off is None:\n        top_words = {word for (word, ratio) in sorted_word_ratios}\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = set()\n        for (word, ratio) in sorted_word_ratios[:cut_off]:\n            top_words.add(word)\n    return (sorted_word_ratios, top_words)\nassert statistic_key_word([(1, {\"apple\", \"banana\"}), (0, {\"banana\", \"cherry\"}), (1, {\"banana\", \"dragon\"})], 2) == ([('banana', 1.0), ('apple', 0.3333), ('cherry', 0.3333), ('dragon', 0.3333)], {'banana', 'apple'}), \"test case failed: basic example with cut_off = 2\"\nassert statistic_key_word([(1, ['a', 'a', 'b']), (0, ['b', 'c']), (1, ['c'])], None)[0] == [('b', 0.6667), ('c', 0.6667), ('a', 0.3333)], \"test case failed: duplicates inside a document and cut_off = None\"\nassert statistic_key_word([(1, ['x']), (0, ['y'])], 5)[1] == {'x', 'y'}, \"test case failed: cut_off larger than vocabulary\"\nassert statistic_key_word([(1, ['p', 'q', 'r'])], None) == ([('q', 1.0), ('r', 1.0), ('p', 1.0)], {'p', 'q', 'r'}), \"test case failed: single document\"\nassert statistic_key_word([(1, ['m', 'n']), (0, ['m'])], 1)[1] == {'m'}, \"test case failed: cut_off = 1\"\nassert statistic_key_word([(1, ['d']), (0, ['e']), (1, ['f'])], 0)[1] == set(), \"test case failed: cut_off = 0\"\nassert statistic_key_word([(1, ['g', 'h']), (0, ['h', 'i'])], 2)[0][0][0] == 'h', \"test case failed: most frequent word should be first\"\nassert all(ratio <= 1 for _, ratio in statistic_key_word([(1, ['a']), (0, ['a', 'b'])], None)[0]), \"test case failed: ratio larger than 1\"\nassert statistic_key_word([(1, []), (0, [])], None) == ([], set()), \"test case failed: documents without any word\"\nassert statistic_key_word([], None) == ([], set()), \"test case failed: empty data list\""}
{"task_id": 571, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\"\"\"\n    alpha_y = alpha * y\n    w = np.dot(X.T, alpha_y)\n    residuals = y - np.dot(X, w)\n    b = residuals.mean()\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)\nassert compute_svm_parameters(np.array([[1, 2], [2, 3]]), np.array([1, -1]), np.array([0.5, 0.5])) == ([-0.5, -0.5], 2.0), \"test case failed: basic 2\u00d72\"\nassert compute_svm_parameters(np.array([[0, 0], [1, 1]]), np.array([-1, 1]), np.array([0.1, 0.3])) == ([0.3, 0.3], -0.3), \"test case failed: zeros and ones\"\nassert compute_svm_parameters(np.array([[1], [2], [3]]), np.array([1, 1, -1]), np.array([0.2, 0.2, 0.4])) == ([-0.6], 1.5333), \"test case failed: single feature\"\nassert compute_svm_parameters(np.array([[-1, -1], [1, 1]]), np.array([1, -1]), np.array([0.25, 0.25])) == ([-0.5, -0.5], 0.0), \"test case failed: symmetric points\"\nassert compute_svm_parameters(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 1, -1]), np.array([0.4, 0.4, 0.4])) == ([0.4, 0.4, -0.4], 0.2), \"test case failed: identity matrix\"\nassert compute_svm_parameters(np.array([[2, 2]]), np.array([1]), np.array([0.5])) == ([1.0, 1.0], -3.0), \"test case failed: single sample\"\nassert compute_svm_parameters(np.array([[0, 0], [0, 0]]), np.array([1, -1]), np.array([0.2, 0.2])) == ([0.0, 0.0], 0.0), \"test case failed: zero features\"\nassert compute_svm_parameters(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), np.array([1, -1, 1]), np.array([0.2, 0.3, 0.1])) == ([-0.3, -0.3, -0.3], 4.8333), \"test case failed: 3\u00d73 matrix\"\nassert compute_svm_parameters(np.array([[-1, 0], [0, 1], [1, 0]]), np.array([-1, 1, 1]), np.array([0.3, 0.3, 0.4])) == ([0.7, 0.3], 0.2333), \"test case failed: mixed signs\"\nassert compute_svm_parameters(np.array([[2], [4]]), np.array([-1, -1]), np.array([0.25, 0.25])) == ([-1.5], 3.5), \"test case failed: negative labels only\""}
{"task_id": 574, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train_c = np.random.uniform(base + 1, base + 9, n_train)\n        points_train = np.column_stack((x_train, y_train_c))\n        X_train.append(points_train)\n        y_train.append(np.full(n_train, c))\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val_c = np.random.uniform(base + 1, base + 9, n_val)\n        points_val = np.column_stack((x_val, y_val_c))\n        X_val.append(points_val)\n        y_val.append(np.full(n_val, c))\n    X_train = np.concatenate(X_train, axis=0)\n    y_train = np.concatenate(y_train, axis=0)\n    X_val = np.concatenate(X_val, axis=0)\n    y_val = np.concatenate(y_val, axis=0)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, y_train, y_val)\nassert generate_data(2, 2, 1, seed=42)[0].shape == (4, 2), \"test case failed: shape of X_train for seed=42,2,2,1\"\nassert generate_data(2, 2, 1, seed=42)[1].shape == (2, 2), \"test case failed: shape of X_val for seed=42,2,2,1\"\nassert (generate_data(2, 2, 1, seed=42)[2] == np.array([0, 0, 1, 1])).all(), \"test case failed: y_train labels for seed=42\"\nassert (generate_data(2, 2, 1, seed=42)[3] == np.array([0, 1])).all(), \"test case failed: y_val labels for seed=42\"\nassert generate_data(3, 3, 2, seed=0)[0].shape == (9, 2), \"test case failed: shape of X_train for seed=0,3,3,2\"\nassert generate_data(3, 3, 2, seed=0)[1].shape == (6, 2), \"test case failed: shape of X_val for seed=0,3,3,2\"\nassert set(generate_data(3, 3, 2, seed=0)[2]) == {0, 1, 2}, \"test case failed: y_train label set for seed=0\"\nassert set(generate_data(3, 3, 2, seed=0)[3]) == {0, 1, 2}, \"test case failed: y_val label set for seed=0\"\nassert (generate_data(1, 5, 5, seed=99)[2] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_train not all zeros\"\nassert (generate_data(1, 5, 5, seed=99)[3] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_val not all zeros\""}
{"task_id": 581, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    m = X.shape[0]\n    n = X.shape[1]\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(n)], 0.0)\n    w = np.zeros(n, dtype=np.float64)\n    b = 0.0\n    for _ in range(iterations):\n        y_hat = np.dot(X, w) + b\n        r = y - y_hat\n        sign_w = np.sign(w)\n        sign_w[sign_w == 0] = -1.0\n        gradient_w = np.zeros(n, dtype=np.float64)\n        for j in range(n):\n            xj = X[:, j]\n            term1 = -2 * np.dot(xj, r)\n            term2 = l1_penalty * sign_w[j]\n            term3 = 2 * l2_penalty * w[j]\n            gradient_w[j] = (term1 + term2 + term3) / m\n        gradient_b = -2 * np.sum(r) / m\n        w -= learning_rate * gradient_w\n        b -= learning_rate * gradient_b\n    weights = [round(wj, 4) for wj in w]\n    bias = round(b, 4)\n    return (weights, bias)\nassert elastic_net_regression(np.array([[1, 0], [0, 1]]), np.array([1, 1]), 0.5, 1, 0.0, 0.0) == ([0.5, 0.5], 1.0), \"failed: basic 2-D example\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([2, 4]), 0.1, 1, 0.0, 0.0) == ([1.0], 0.6), \"failed: single feature, no regularisation\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([1, 1]), 1.0, 1, 1.0, 0.0) == ([2.5], 2.0), \"failed: L1 penalty example\"\nassert elastic_net_regression(np.array([[1, 1], [1, 1]]), np.array([2, 2]), 0.5, 1, 0.0, 0.0) == ([2.0, 2.0], 2.0), \"failed: identical features\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([2, 2]), 0.1, 1, 0.0, 5.0) == ([0.4], 0.4), \"failed: L2 penalty (first iteration)\"\nassert elastic_net_regression(np.array([[1, 2], [3, 4]]), np.array([1, 0]), 0.2, 1, 0.0, 0.0) == ([0.2, 0.4], 0.2), \"failed: two samples, two features\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([3, 4]), 0.0, 3, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero learning rate\"\nassert elastic_net_regression(np.array([[1]]), np.array([1]), 1.0, 0, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero iterations\"\nassert elastic_net_regression(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 2, 3]), 0.1, 1, 0.0, 0.0) == ([0.0667, 0.1333, 0.2], 0.4), \"failed: 3-D identity matrix\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([-1, -1]), 0.5, 1, 0.0, 0.0) == ([-1.0], -1.0), \"failed: negative targets\""}
