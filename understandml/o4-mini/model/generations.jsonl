{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n       Fit an L2\u2010regularized (Ridge) linear regression model in closed form.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        A 2D array of shape (n_samples, n_features + 1) where the last column\n        is the target vector y and the other columns are the features X.\n    alpha : float, default=0.0\n        Regularization strength (>= 0). When alpha=0 this is ordinary least squares.\n        \n    Returns\n    -------\n    List[float] or int\n        The fitted weight vector (including intercept as the first entry),\n        with each coefficient rounded to 4 decimal places, or -1 if the\n        regularized normal matrix is singular (non-invertible).\n       # Split into features X and target y\n    X = data[:, :-1]\n    y = data[:,  -1]\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Add intercept (bias) column of ones\n    X_design = np.hstack((np.ones((n_samples, 1)), X))\n    \n    # Build the regularized normal matrix\n    # I has same size as number of columns in X_design\n    I = np.eye(X_design.shape[1])\n    M = X_design.T @ X_design + alpha * I\n    \n    # Check for invertibility via determinant\n    det = np.linalg.det(M)\n    if abs(det) < 1e-12:\n        return -1\n    \n    # Solve for weights: w = (X^T X + \u03b1 I)^{-1} X^T y\n    # More stable to use solve than explicit inv:\n    w = np.linalg.solve(M, X_design.T @ y)\n    \n    # Round each coefficient to 4 decimal places and return as list\n    w_rounded = [round(float(coef), 4) for coef in w]\n    return w_rounded\n```"}
{"task_id": 1, "completion_id": 0, "completion": "Here\u2019s an implementation of the dual\u2010form perceptron as specified. It precomputes the Gram matrix, maintains the \u03b1\u2019s and bias b, and loops until an entire pass yields no updates or until the maximum number of updates is reached. Finally it reconstructs the primal weight vector and rounds everything to four decimals.\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Precompute the Gram matrix\n    K = X_train @ X_train.T  # shape (n_samples, n_samples)\n\n    # Initialize dual variables and bias\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n\n    updates = 0\n    i = 0\n\n    # Main loop: scan until full pass without update or too many updates\n    while i < n_samples and updates < n_iter:\n        # Compute activation for sample i:\n        # activation = sum_j alpha_j * y_j * K[j, i]\n        activation = np.dot(alpha * y_train, K[:, i])\n        margin = y_train[i] * (activation + b)\n\n        if margin <= 0:\n            # mis\u2013classification \u2192 update dual parameter and bias\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            # restart scan\n            i = 0\n        else:\n            # correct classification \u2192 move to next sample\n            i += 1\n\n    # Reconstruct primal weight vector: w = sum_i alpha_i * y_i * x_i\n    w = (alpha * y_train) @ X_train  # shape (n_features,)\n\n    # Round to 4 decimals\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n\n    return w_rounded, b_rounded\n```\n\nExplanation of key steps:\n\n1. **Gram matrix** `K` holds all dot-products `\u27e8x\u1d62, x\u2c7c\u27e9`.  \n2. We keep the dual coefficients `\u03b1` and bias `b`.  \n3. We iterate over samples, computing  \n      activation\u1d62 = \u2211\u2c7c \u03b1\u2c7c y\u2c7c K(x\u2c7c, x\u1d62).  \n   If `y\u1d62 (activation\u1d62 + b) \u2264 0`, we update  \n      \u03b1\u1d62 \u2190 \u03b1\u1d62 + \u03b7,   b \u2190 b + \u03b7 y\u1d62,  \n   then restart the pass.  \n4. We stop when a full pass has no updates (i.e. linearly separable data) or when `updates` reaches `n_iter`.  \n5. Finally we convert back to the primal form `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62` and round both `w` and `b` to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (\"identity\", \"log\", \"logit\") where each entry is a\n        dictionary containing callables for the link, its inverse, and its\n        derivative with respect to \u03bc. All functions work with numpy scalars\n        as well as 1-D/2-D numpy arrays via element\u2010wise operations.\n    \"\"\"\n    # identity link: g(\u03bc) = \u03bc\n    def identity_link(mu):\n        return mu\n\n    def identity_inv(eta):\n        return eta\n\n    def identity_deriv(mu):\n        # derivative of \u03bc wrt \u03bc is 1\n        return np.ones_like(mu)\n\n    # log link: g(\u03bc) = log(\u03bc)\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        # derivative of log(\u03bc) wrt \u03bc is 1/\u03bc\n        return 1.0 / mu\n\n    # logit link: g(\u03bc) = log(\u03bc / (1 - \u03bc))\n    def logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv(eta):\n        # stable sigmoid: 1 / (1 + exp(-\u03b7))\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_deriv(mu):\n        # derivative of logit(\u03bc) wrt \u03bc: 1 / [\u03bc (1-\u03bc)]\n        return 1.0 / (mu * (1.0 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv,\n            \"derivative\": identity_deriv\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv,\n            \"derivative\": log_deriv\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv,\n            \"derivative\": logit_deriv\n        }\n    }\n\n# Example usage:\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n    eta_logit = links[\"logit\"][\"link\"](mu)\n    mu2_logit = links[\"logit\"][\"inv_link\"](eta_logit)\n    deriv_logit = links[\"logit\"][\"derivative\"](mu)\n\n    # Round to four decimal places for display\n    print(\"logit link(mu):           \", np.round(eta_logit, 4))\n    # \u2192 [-1.3863  1.3863]\n    print(\"inverse logit(link(mu)):  \", np.round(mu2_logit, 4))\n    # \u2192 [0.2 0.8]\n    print(\"derivative of logit(mu):  \", np.round(deriv_logit, 4))\n    # \u2192 [1.25    1.25  ]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n   Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed is set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length n_samples where the i-th element is the number of\n        edges from the root to the leaf that contains the i-th sample.\n       # Make randomness reproducible\n    np.random.seed(0)\n\n    n_samples, n_features = data.shape\n    # This will hold the depth of the leaf for each sample index\n    depths = [None] * n_samples\n\n    def recurse(indices: list[int], depth: int):\n        # If fewer than 3 samples, this node is a leaf\n        if len(indices) < 3:\n            for i in indices:\n                depths[i] = depth\n            return\n\n        # Otherwise pick a random feature\n        f = np.random.randint(0, n_features)\n        feature_values = data[indices, f]\n        down = float(feature_values.min())\n        up   = float(feature_values.max())\n        # Pick a split threshold uniformly in [down, up]\n        v = np.random.uniform(down, up)\n\n        # Partition indices into left and right child\n        left_indices  = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] >  v]\n\n        # Recurse on non-empty branches at depth+1\n        if left_indices:\n            recurse(left_indices, depth + 1)\n        if right_indices:\n            recurse(right_indices, depth + 1)\n\n    # Build the tree starting from all samples at depth 0\n    recurse(list(range(n_samples)), depth=0)\n\n    return depths\n```\n\nExplanation of key steps:\n1. We seed the NumPy RNG inside the function with `np.random.seed(0)` so every call is reproducible.\n2. We maintain a `depths` list indexed by the original sample index.\n3. The recursive helper `recurse(indices, depth)`:\n   - If fewer than 3 samples, it\u2019s a leaf: we assign the current `depth` to all those sample indices.\n   - Otherwise we choose a random feature `f`, find its min/max over the current samples, draw a threshold `v` uniformly in `[down, up]`, and split into left/right children.\n   - We recurse on each nonempty child with `depth+1`.\n4. Finally we return the collected `depths` list."}
{"task_id": 4, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    # Handle empty input\n    if X.shape[0] == 0:\n        return []\n    # Compute squared norms of each row: shape (n_samples,)\n    sq_norms = np.sum(X * X, axis=1)\n    # Compute Gram matrix: X\u00b7X\u1d40\n    G = X @ X.T\n    # Use \u2016x\u2212y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2\u00b7x\u1d40y\n    D = sq_norms[:, None] + sq_norms[None, :] - 2 * G\n    # Numerical stability: clamp small negatives to zero\n    D = np.maximum(D, 0.0)\n    # Ensure exact zeros on the diagonal\n    np.fill_diagonal(D, 0.0)\n    # Round to 4 decimal places and convert to Python nested lists\n    return np.round(D, 4).tolist()\n```\n\nExplanation of the key steps:\n\n1. **Empty check**: If there are no samples (`n_samples == 0`), return `[]`.\n2. **Squared norms**: `sq_norms[i] = \u2016X[i]\u2016\u00b2`.\n3. **Gram matrix**: `G[i,j] = X[i]\u00b7X[j]`.\n4. **Pairwise distances**:  \n   D[i,j] = sq_norms[i] + sq_norms[j] \u2212 2\u00b7G[i,j].\n5. **Stability**: Clamp any tiny negative values (due to floating\u2010point error) up to 0.\n6. **Diagonal**: Force D[i,i] = 0 exactly.\n7. **Formatting**: Round to 4 decimal places and use `.tolist()` to return a standard Python nested list."}
{"task_id": 6, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    # Convert the first tree output to an array to get shape info\n    first = np.asarray(predictions[0], dtype=float)\n    n_samples, n_classes = first.shape\n\n    # Initialize the aggregated score matrix to zeros\n    # We'll subtract because XGBoost uses: score = 0 - lr * sum(tree_preds)\n    agg_scores = np.zeros((n_samples, n_classes), dtype=float)\n\n    # Accumulate the scaled predictions from each tree\n    for tree_out in predictions:\n        arr = np.asarray(tree_out, dtype=float)\n        # Check that shapes match\n        if arr.shape != (n_samples, n_classes):\n            raise ValueError(f\"All trees must output the same shape; \"\n                             f\"expected {(n_samples, n_classes)}, got {arr.shape}\")\n        agg_scores -= learning_rate * arr\n\n    # Row\u2010wise softmax (with numerical stability)\n    # 1) subtract max per row\n    max_per_row = np.max(agg_scores, axis=1, keepdims=True)\n    exps = np.exp(agg_scores - max_per_row)\n    sums = np.sum(exps, axis=1, keepdims=True)\n    probs = exps / sums\n\n    # Argmax each row to get predicted class labels\n    preds = np.argmax(probs, axis=1)\n\n    # Return as a plain Python list of ints\n    return preds.tolist()\n```\n\nExplanation of key steps:\n1. We initialize an `(n_samples, n_classes)` score matrix `agg_scores` to zero.\n2. For each tree\u2019s output, we subtract `learning_rate * tree_output` from `agg_scores` to replicate XGBoost\u2019s raw score computation.\n3. We apply the softmax function row-wise in a numerically stable way by first subtracting the row maxima, exponentiating, summing, and normalizing.\n4. Finally, we pick the class with the highest probability in each row via `argmax` and return the results as a plain Python list."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Number of transactions\n    N = len(transactions)\n    if N == 0:\n        return {}\n\n    # Absolute support threshold\n    threshold = math.ceil(minsup * N)\n    if threshold <= 0:\n        return {}\n\n    # Convert each transaction to a set (to ignore duplicate items in the same transaction)\n    txn_sets = [set(t) for t in transactions]\n\n    # 1) Find frequent 1-itemsets\n    item_counts = Counter()\n    for tset in txn_sets:\n        item_counts.update(tset)\n\n    # Keep only those meeting the threshold\n    L1 = { (item,): cnt for item, cnt in item_counts.items() if cnt >= threshold }\n    if not L1:\n        return {}\n\n    # This will collect all frequent itemsets of all sizes\n    frequent_itemsets: Dict[Tuple[Hashable, ...], int] = {}\n    frequent_itemsets.update(L1)\n\n    # Prepare for the iterative apriori steps\n    # Lk_minus_1: dict of frequent (k-1)-itemsets to their counts\n    Lk_minus_1 = L1\n    k = 2\n\n    while True:\n        # 2) Generate candidate k-itemsets from Lk_minus_1 (the join step)\n        prev_itemsets = sorted(Lk_minus_1.keys())  # list of tuples\n        Ck = set()\n        len_prev = len(prev_itemsets)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                p = prev_itemsets[i]\n                q = prev_itemsets[j]\n                # join only if first k-2 items are the same\n                if p[:k-2] == q[:k-2]:\n                    # form a candidate by adding the last item of q\n                    candidate = tuple(sorted(p + (q[-1],)))\n                    # prune: all (k-1)-subsets of candidate must be frequent\n                    all_subsets_frequent = True\n                    for subset in combinations(candidate, k-1):\n                        if subset not in Lk_minus_1:\n                            all_subsets_frequent = False\n                            break\n                    if all_subsets_frequent:\n                        Ck.add(candidate)\n\n        if not Ck:\n            break\n\n        # 3) Count support for each candidate\n        candidate_counts = Counter()\n        for tset in txn_sets:\n            for cand in Ck:\n                # if candidate is subset of transaction\n                if set(cand).issubset(tset):\n                    candidate_counts[cand] += 1\n\n        # 4) Keep those meeting minsup => Lk\n        Lk = { cand: cnt for cand, cnt in candidate_counts.items() if cnt >= threshold }\n        if not Lk:\n            break\n\n        # add to global frequent itemsets\n        frequent_itemsets.update(Lk)\n\n        # prepare next iteration\n        Lk_minus_1 = Lk\n        k += 1\n\n    return frequent_itemsets\n```\n\nExplanation of the main steps:\n\n1. **Threshold calculation**: We compute `threshold = ceil(minsup * N)` where `N` is the number of transactions.\n2. **Frequent 1-itemsets**: We count each item over all transactions (using a `Counter`), then filter by `threshold`.\n3. **Apriori iterative loop** (for k = 2, 3, \u2026):\n   a. **Candidate generation** (`join` step): We join pairs of frequent (k\u22121)-itemsets that share the same first k\u22122 items, producing k-item candidates.  \n   b. **Pruning**: For each candidate, ensure all its (k\u22121)-sized subsets are themselves frequent.  \n   c. **Support counting**: We scan the transactions and increment the count of each candidate that is a subset of a transaction.  \n   d. **Filtering**: We keep only those candidates whose support \u2265 `threshold`.  \n   e. If no candidates survive at any stage, we terminate.\n\nAll discovered frequent itemsets (of all sizes) are collected in `frequent_itemsets` and returned. If none meet the support threshold, the function returns an empty dictionary."}
{"task_id": 8, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        n_iterations: int = 4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    # Number of training examples and features\n    n_samples, n_features = X_train.shape\n\n    # Initialize parameters\n    weights = np.zeros(n_features, dtype=float)\n    bias = 0.0\n\n    # Training loop: batch gradient descent\n    for _ in range(n_iterations):\n        # Linear combination\n        linear_model = np.dot(X_train, weights) + bias  # shape: (n_samples,)\n\n        # Sigmoid activation\n        y_predicted = 1 / (1 + np.exp(-linear_model))   # shape: (n_samples,)\n\n        # Compute gradients\n        error = y_predicted - y_train                   # shape: (n_samples,)\n        dw = (1.0 / n_samples) * np.dot(X_train.T, error)  # shape: (n_features,)\n        db = (1.0 / n_samples) * np.sum(error)             # scalar\n\n        # Update parameters\n        weights -= learning_rate * dw\n        bias    -= learning_rate * db\n\n    # Prediction on test set\n    linear_test = np.dot(X_test, weights) + bias         # shape: (m_samples,)\n    probs_test = 1 / (1 + np.exp(-linear_test))          # shape: (m_samples,)\n\n    # Convert probabilities to 0/1 by rounding\n    preds = [int(round(p)) for p in probs_test]\n\n    return preds\n```\n\nExplanation of key steps:\n1. Initialize the weight vector `weights` and intercept `bias` to zero.  \n2. In each iteration:\n   - Compute the linear scores `z = X_train \u00b7 weights + bias`.\n   - Apply the sigmoid to get probabilities.\n   - Compute the gradients of the log\u2010loss w.r.t. `weights` and `bias`.\n   - Update the parameters by stepping against the gradient.  \n3. After training, compute `z` on `X_test`, apply sigmoid, round each probability to 0 or 1, and return the list of integer predictions."}
{"task_id": 10, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (X_{t-1}).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (X_t).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \u03b5, 0 <= \u03b5 <= 1. Scalars or 1D arrays are supported.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places. If all inputs\n        are scalars, a single float is returned; otherwise a Python list\n        of floats is returned.\n    \"\"\"\n    # Convert inputs into NumPy arrays of dtype float\n    prev_arr = np.asarray(prev, dtype=float)\n    cur_arr = np.asarray(cur, dtype=float)\n    weight_arr = np.asarray(weight, dtype=float)\n\n    # Compute exponential smoothing with broadcasting\n    result = weight_arr * prev_arr + (1.0 - weight_arr) * cur_arr\n\n    # Round to 4 decimal places\n    result = np.around(result, 4)\n\n    # If result is a scalar (0-d array), return a Python float\n    if result.ndim == 0:\n        return float(result)\n    # Otherwise return a Python list\n    return result.tolist()\n```\n\nExplanation of key steps:\n\n1. **Array conversion**  \n   We use `np.asarray(..., dtype=float)` to convert each input into a NumPy array.  \n   - If the input is a scalar, the array has shape `()`.  \n   - If it\u2019s a 1D list/tuple/ndarray, it becomes a 1D array.\n\n2. **Broadcasting calculation**  \n   The formula  \n     smoothed = \u03b5\u00b7prev + (1\u2212\u03b5)\u00b7cur  \n   is applied element-wise. NumPy automatically broadcasts scalars against vectors.\n\n3. **Rounding**  \n   `np.around(result, 4)` rounds each element to four decimal places.\n\n4. **Result type**  \n   - If the NumPy array is 0-dimensional (`ndim == 0`), we extract a Python float.  \n   - Otherwise we convert the array to a Python list with `.tolist()`."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    if not (1 <= k <= n_samples):\n        raise ValueError(\"k must be in the range [1, number of samples]\")\n\n    # Initialize centres: first k samples (as floats, copy to avoid side-effects)\n    centres = data[:k].astype(float).copy()\n\n    labels = np.zeros(n_samples, dtype=int)\n\n    for iteration in range(max_iter):\n        # 1) Assign each sample to the nearest centre (squared Euclidean distance)\n        # distances shape: (n_samples, k)\n        diff = data[:, np.newaxis, :] - centres[np.newaxis, :, :]  # broadcast\n        dists_sq = np.sum(diff * diff, axis=2)\n        new_labels = np.argmin(dists_sq, axis=1)\n\n        # 2) Recompute centres\n        new_centres = np.zeros_like(centres)\n        for cluster_idx in range(k):\n            members = np.where(new_labels == cluster_idx)[0]\n            if members.size == 0:\n                # Empty cluster: reinitialize its centre to a random data point\n                rand_idx = np.random.randint(0, n_samples)\n                new_centres[cluster_idx] = data[rand_idx]\n            else:\n                new_centres[cluster_idx] = np.mean(data[members], axis=0)\n\n        # 3) Check convergence: maximum shift of any centre\n        shifts = np.linalg.norm(new_centres - centres, axis=1)\n        if np.max(shifts) < epsilon:\n            centres = new_centres\n            labels = new_labels\n            break\n\n        centres = new_centres\n        labels = new_labels\n\n    # Round each coordinate of each centre to 4 decimal places\n    centres_rounded = np.round(centres, 4)\n\n    # Convert to Python types\n    centres_list = centres_rounded.tolist()\n    labels_list = labels.tolist()\n\n    return centres_list, labels_list\n```\n\nExplanation of the main steps:\n\n1. **Initialization**  \n   The first `k` rows of `data` are copied as the initial cluster centres.\n\n2. **Assignment**  \n   For each sample, compute its squared Euclidean distance to each centre (using NumPy broadcasting), and assign it to the nearest centre.\n\n3. **Update**  \n   For each cluster, compute the arithmetic mean of its assigned samples to get the new centre.  \n   If a cluster has no members, re-initialize that centre to a randomly chosen sample (using `np.random.randint`).\n\n4. **Convergence Check**  \n   Compute the shift of each centre (Euclidean distance between old and new centres).  \n   If the maximum shift is less than `epsilon`, or if `max_iter` iterations are reached, stop.\n\n5. **Rounding and Return**  \n   After convergence, round each coordinate of each centre to 4 decimal places and return them along with the cluster labels.\n"}
{"task_id": 12, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef power_spectrum(frames: np.ndarray, scale: bool = False) -> list[list[float]]:\n   Compute the power spectrum for every frame of a real-valued signal.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray of shape (M, N)\n        Collection of M frames, each containing N real-valued samples.\n    scale : bool, optional (default=False)\n        If True the resulting power spectrum is divided by ``N//2 + 1``.\n\n    Returns\n    -------\n    list[list[float]]\n        The power spectrum of each frame (only positive frequencies), rounded\n        to four decimal places and returned as a regular Python list.\n       # Number of samples per frame\n    M, N = frames.shape\n\n    # Compute the real FFT along each row (frame)\n    # The result has length floor(N/2) + 1 = N//2 + 1 along axis=1\n    fft_vals = np.fft.rfft(frames, axis=1)\n\n    # Power spectrum is magnitude squared\n    ps = np.abs(fft_vals) ** 2\n\n    # Optionally scale by the number of returned bins\n    if scale:\n        denom = N // 2 + 1\n        ps = ps / denom\n\n    # Round to 4 decimal places and convert to a Python list of lists\n    ps_rounded = np.round(ps, 4)\n    return ps_rounded.tolist()\n```\n\nExplanation of the steps:\n1. We extract the shape of `frames` as `(M, N)`, where `M` is the number of frames and `N` is the number of samples per frame.\n2. We call `np.fft.rfft` along `axis=1` to get the non\u2010redundant FFT bins (length `N//2 + 1`).\n3. We compute the squared magnitude (`|X|^2`) to get the power spectrum.\n4. If `scale=True`, we divide each bin by the number of bins `N//2 + 1`.\n5. We round the results to 4 decimal places and finally convert the NumPy array to a nested Python list with `.tolist()`."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n   Item-based k-NN collaborative filtering recommender    n_user, n_item = data.shape\n    # 1) Build the item\u2013item similarity matrix S\n    S = np.zeros((n_item, n_item), dtype=float)\n    for i in range(n_item):\n        for j in range(i, n_item):\n            # find users who rated both items i and j\n            mask = (data[:, i] > 0) & (data[:, j] > 0)\n            if not np.any(mask):\n                sim = 0.0\n            else:\n                v1 = data[mask, i].astype(float)\n                v2 = data[mask, j].astype(float)\n                if criterion == 'cosine':\n                    # mean-center if std > 1e-3\n                    std1 = np.std(v1)\n                    std2 = np.std(v2)\n                    if std1 > 1e-3:\n                        v1 = v1 - v1.mean()\n                    if std2 > 1e-3:\n                        v2 = v2 - v2.mean()\n                    norm1 = np.linalg.norm(v1)\n                    norm2 = np.linalg.norm(v2)\n                    if norm1 < 1e-12 or norm2 < 1e-12:\n                        sim = 0.0\n                    else:\n                        sim = float(np.dot(v1, v2) / (norm1 * norm2))\n                elif criterion == 'pearson':\n                    # if fewer than 2 samples, corrcoef gives nan; we treat as 0\n                    if v1.size < 2:\n                        sim = 0.0\n                    else:\n                        corr = np.corrcoef(v1, v2)[0, 1]\n                        sim = 0.0 if np.isnan(corr) else float(corr)\n                else:\n                    raise ValueErrorcriterion must be 'cosine' or 'pearson            S[i, j] = sim\n            S[j, i] = sim\n\n    # 2) Find items already rated by the active user\n    user_ratings = data[user_ind, :]\n    rated_indices = np.where(user_ratings > 0)[0]\n    if rated_indices.size == n_item:\n        return []  # user has rated everything\n\n    # 3) For each unrated item, compute its predicted score\n    candidates = []\n    for t in range(n_item):\n        if user_ratings[t] > 0:\n            continue  # skip already rated\n        sims = S[t, rated_indices]\n        denom = np.sum(np.abs(sims))\n        if denom < 1e-12:\n            score = 0.0\n        else:\n            score = float(np.dot(user_ratings[rated_indices], sims) / denom)\n        candidates.append((t, score))\n\n    # 4) Sort by descending score, tie-breaking on smaller item index\n    #    and pick the top-k\n    candidates.sort(key=lambda x: (-x[1], x[0]))\n    top_k = [t for t, _ in candidates[:k]]\n    return top_k\n```\n\nExplanation of key steps:\n1. We build `S`, the item\u2013item similarity matrix, by iterating over all unordered pairs `(i, j)`. We collect only the users who rated both items and compute either cosine or Pearson similarity as specified.\n2. We extract which items the active user has already rated.\n3. For every item `t` the user has _not_ rated, we compute the usual weighted\u2010sum score  \n   `score(t) = \u03a3\u1d62 r\u1d62\u00b7S[t,i] / \u03a3\u1d62 |S[t,i]|`  \n   over all rated items `i`. If the denominator is zero, we define the score as zero.\n4. We sort candidate items by descending score and break ties by smaller item index (via the sort key `(-score, index)`) and return at most `k` recommendations."}
{"task_id": 14, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    # =======  Write your code below  =======\n    eps = 1e-15\n\n    # 1. Compute probabilities via sigmoid\n    p = 1 / (1 + np.exp(-y_pred))\n\n    # 2. Clip probabilities to avoid log(0)\n    p_clipped = np.clip(p, eps, 1 - eps)\n\n    # 3. Compute per-sample logistic loss\n    loss_per_sample = - (y * np.log(p_clipped) + (1 - y) * np.log(1 - p_clipped))\n\n    # 4. Compute gradient and Hessian diagonal\n    grad = p - y\n    hess = p * (1 - p)\n\n    # 5. Mean loss\n    mean_loss = loss_per_sample.mean()\n\n    # 6. Round results\n    mean_loss_rounded = round(float(mean_loss), 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    hess_rounded = np.round(hess, 4).tolist()\n\n    return mean_loss_rounded, grad_rounded, hess_rounded\n    # =======  End of your code  =======\n```\n\nExplanation of key steps:\n1. **Sigmoid**: \\(p = \\sigma(\\hat y)\\).  \n2. **Clipping**: Ensures numerical stability for the log.  \n3. **Loss**: \\(-[y \\log p + (1-y)\\log(1-p)]\\).  \n4. **Gradient**: \\(p - y\\).  \n5. **Hessian**: \\(p(1-p)\\).  \n6. **Averaging** and **rounding** to 4 decimal places as required."}
{"task_id": 16, "completion_id": 0, "completion": "```python\nfrom typing import Any, Iterable, List, Tuple\n\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    length = len(sequence)\n    # If N is larger than the sequence length, no n-grams can be formed.\n    if N > length:\n        return []\n    # Slide a window of size N over the sequence\n    return [tuple(sequence[i:i+N]) for i in range(length - N + 1)]\n```\n\nExplanation:\n1. Compute the length of the sequence.\n2. If `N` exceeds that length, return an empty list.\n3. Otherwise, use a list comprehension to take every contiguous slice of size `N` (from index `i` to `i+N`) and convert it to a tuple."}
{"task_id": 17, "completion_id": 0, "completion": "```python\ndef build_tree(items: list[str], counts: list[int], parents: list[int]) -> dict:\n   Construct a rooted tree from parallel *items*, *counts* and *parents* lists.\n\n    Parameters\n    ----------\n    items : list[str]\n        The label (item) stored in each node.\n    counts : list[int]\n        The frequency (count) stored in each node.\n    parents : list[int]\n        The parent index of each node; \u20131 marks the single root.\n\n    Returns\n    -------\n    dict\n        The root node represented as a nested dictionary with keys\n        'item', 'count' and 'children'.  If the inputs are empty, returns\n        an empty dictionary.\n       # If there are no nodes, return an empty dict\n    if not items:\n        return {}\n\n    n = len(items)\n    # First, create a dict (without children) for each node\n    nodes: list[dict] = []\n    root_index = -1\n\n    for i in range(n):\n        # Prepare the bare node\n        node_dict = {\n            'item': items[i],\n            'count': counts[i],\n            'children': []\n        }\n        nodes.append(node_dict)\n        # Check if this is the root\n        if parents[i] == -1:\n            root_index = i\n\n    # Now attach each node to its parent's 'children' list\n    for i in range(n):\n        p = parents[i]\n        if p != -1:\n            nodes[p]['children'].append(nodes[i])\n\n    # Return the root node dict\n    return nodes[root_index]\n```\n\nExplanation of the steps:\n\n1. If `items` is empty, we immediately return `{}`.\n2. We create a list `nodes` of empty node-dictionaries (with `'item'`, `'count'`, and an empty `'children'` list) in one pass, also recording which index is the root (where `parents[i] == -1`).\n3. In a second pass, for each node `i` with a parent `p >= 0`, we append its dictionary to `nodes[p]['children']`.  Because we iterate `i` in input\u2010order, the children lists keep the proper order.\n4. Finally, we return `nodes[root_index]`, which is the nested dictionary for the root and its entire subtree."}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    # Extract dtype, default to Python float (np.float64)\n    dtype = kwargs.pop('dtype', float)\n    \n    # If there are any other unexpected kwargs, raise an error\n    if kwargs:\n        unexpected = ', '.join(kwargs.keys())\n        raise TypeError(f\"zero() got unexpected keyword argument(s): {unexpected}\")\n    \n    # Delegate to numpy.zeros\n    return np.zeros(shape, dtype=dtype)\n```\n\nExplanation:\n1. We pop out the `dtype` from `kwargs`, defaulting to `float` (which NumPy interprets as `np.float64`).\n2. If any other keyword arguments remain, we signal an error.\n3. We simply call `np.zeros(...)` with the provided shape and desired dtype, ensuring the return value is a NumPy `ndarray`."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n   Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n       n_samples, n_features = X.shape\n    # Need at least 4 samples to have 2 on each side after a split\n    if n_samples < 4:\n        return None\n\n    # Precompute parent sums\n    G_parent = np.sum(g)\n    H_parent = np.sum(h)\n    # XGBoost gain formula uses:\n    #   gain = 0.5 * [ G_L^2/(H_L+lam) + G_R^2/(H_R+lam) - G_P^2/(H_P+lam) ] - gamma\n    parent_term = (G_parent * G_parent) / (H_parent + lam)\n\n    best_gain = 0.0\n    best_split: tuple[int, float] | None = None\n\n    # For each feature, try splitting at each unique feature value\n    for j in range(n_features):\n        x_j = X[:, j]\n        # sort the feature column and keep track of corresponding g,h if you like,\n        # but here we just use boolean masks on the fly\n        unique_vals = np.unique(x_j)\n\n        for v in unique_vals:\n            # Partition samples\n            left_mask = (x_j <= v)\n            n_left = left_mask.sum()\n            n_right = n_samples - n_left\n\n            # Must leave at least 2 samples on each side\n            if n_left < 2 or n_right < 2:\n                continue\n\n            # Compute sums on left and right\n            G_left = np.sum(g[left_mask])\n            H_left = np.sum(h[left_mask])\n            G_right = G_parent - G_left\n            H_right = H_parent - H_left\n\n            # Compute gain\n            gain = 0.5 * (\n                (G_left * G_left) / (H_left + lam)\n                + (G_right * G_right) / (H_right + lam)\n                - parent_term\n            ) - gamma\n\n            # Track the best positive gain\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (j, float(v))\n\n    return best_split\n```\n\nExplanation of key steps:\n\n1. **Parent statistics**  \n   We precompute  \n   &nbsp;&nbsp;&nbsp;&nbsp;G_parent = \u03a3\u1d62 g\u1d62,  \n   &nbsp;&nbsp;&nbsp;&nbsp;H_parent = \u03a3\u1d62 h\u1d62,  \n   and the \u201cparent term\u201d G_parent\u00b2/(H_parent+\u03bb).  \n\n2. **Enumerate features and thresholds**  \n   For each feature column `x_j = X[:, j]`, we loop over each unique value `v` as a candidate splitting threshold.\n\n3. **Validity check**  \n   We require at least two samples on both left (x_j \u2264 v) and right (x_j > v).\n\n4. **Compute child statistics**  \n   Summing gradients `g` and Hessians `h` on the left side gives (G_left, H_left); the right side is the remainder.\n\n5. **Gain calculation**  \n   According to XGBoost\u2019s formula:  \n   gain = \u00bd [ G_left\u00b2/(H_left+\u03bb) + G_right\u00b2/(H_right+\u03bb) \u2013 G_parent\u00b2/(H_parent+\u03bb) ] \u2013 \u03b3.\n\n6. **Select best**  \n   We keep track of the feature and threshold that maximize the (positive) gain. If no split yields gain > 0, we return `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Helper to compute sigmoid and gradient\n    def _compute(arr):\n        s = 1 / (1 + np.exp(-arr))\n        g = s * (1 - s)\n        return s, g\n\n    # Case 1: Python scalar (int or float)\n    if isinstance(x, (int, float)):\n        s, g = _compute(x)\n        # cast to Python float and round\n        return round(float(s), 4), round(float(g), 4)\n\n    # Otherwise, convert list or array-like to a NumPy array\n    arr = np.array(x, dtype=float)\n\n    # If it is effectively a 0-d array, treat as scalar\n    if arr.ndim == 0:\n        s, g = _compute(arr.item())\n        return round(float(s), 4), round(float(g), 4)\n\n    # Compute for array\n    s_arr, g_arr = _compute(arr)\n    s_arr = np.round(s_arr, 4)\n    g_arr = np.round(g_arr, 4)\n\n    # Convert back to Python lists\n    return s_arr.tolist(), g_arr.tolist()\n```\n\nExplanation of key points:\n1. We first check for pure Python scalars (`int`/`float`) and handle them directly, returning rounded floats.\n2. For lists or NumPy arrays, we convert the input to a NumPy array of floats.\n3. A zero-dimensional NumPy array (`arr.ndim == 0`) is also treated as a scalar.\n4. We compute sigmoid and its gradient element-wise using vectorized NumPy operations.\n5. Results are rounded to 4 decimal places with `round` for scalars and `np.round(..., 4)` for arrays.\n6. Non-scalar outputs are converted back to nested Python lists via `.tolist()`."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Convert to numpy arrays\n    x = np.array(x_train, dtype=float)\n    y = np.array(y_train, dtype=int)\n    n = len(x)\n    # Initial weights\n    w = np.ones(n) / n\n\n    # Sort training data (we'll keep everything in sorted order for stump search)\n    sorted_idx = np.argsort(x)\n    x_s = x[sorted_idx]\n    y_s = y[sorted_idx]\n    w_s = w[sorted_idx]\n\n    # This F_s will accumulate the ensemble's raw score on the sorted training set\n    F_s = np.zeros(n)\n\n    # We will store the chosen stumps as tuples (d, theta) and their alphas\n    stumps = []\n    alphas = []\n\n    while True:\n        # 1) Find the best 1D stump under the current weights\n        best_err = float('inf')\n        best_theta = None\n        best_d = None\n        best_pred = None\n\n        # Candidate thresholds: midpoints between consecutive x_s's\n        thresholds = []\n        for i in range(n - 1):\n            thresholds.append((x_s[i] + x_s[i + 1]) / 2.0)\n        if not thresholds:\n            # all points identical, just pick that value\n            thresholds = [x_s[0]]\n\n        for theta in thresholds:\n            # d = 0: h(x)=+1 if x<=theta else -1\n            pred0 = np.where(x_s <= theta, 1, -1)\n            err0 = np.sum(w_s * (pred0 != y_s))\n            if err0 < best_err:\n                best_err = err0\n                best_theta = theta\n                best_d = 0\n                best_pred = pred0\n\n            # d = 1: h(x)=+1 if x>theta else -1\n            pred1 = np.where(x_s > theta, 1, -1)\n            err1 = np.sum(w_s * (pred1 != y_s))\n            if err1 < best_err:\n                best_err = err1\n                best_theta = theta\n                best_d = 1\n                best_pred = pred1\n\n        # 2) If the stump is no better than random, stop\n        if best_err >= 0.5:\n            break\n\n        # 3) Compute alpha, with a tiny clip to avoid zero division\n        e = max(min(best_err, 1.0 - 1e-10), 1e-10)\n        alpha = 0.5 * math.log((1.0 - e) / e)\n\n        # Save the stump\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n\n        # 4) Update the weights on the sorted training set\n        w_s = w_s * np.exp(-alpha * y_s * best_pred)\n        w_s = w_s / np.sum(w_s)\n\n        # 5) Update the ensemble's raw score and check training error\n        F_s += alpha * best_pred\n        train_pred = np.where(F_s >= 0, 1, -1)\n        train_err = np.mean(train_pred != y_s)\n        if train_err <= epsilon:\n            break\n\n    # --- Now predict on x_test ---\n    y_out = []\n    for xt in x_test:\n        s = 0.0\n        for (d, theta), alpha in zip(stumps, alphas):\n            if d == 0:\n                h = 1 if xt <= theta else -1\n            else:\n                h = 1 if xt > theta else -1\n            s += alpha * h\n        y_out.append(1 if s >= 0 else -1)\n\n    return y_out\n```\n\nExplanation of key steps:\n1. We sort the training points once so that threshold candidates are easy to enumerate as the midpoints between consecutive `x` values.\n2. We maintain and update the sample weights `w_s` (in sorted order) in each round, pick the stump with minimum weighted error, compute its coefficient `alpha` and update both `w_s` and the cumulative score `F_s`.\n3. We stop when the ensemble\u2019s training error drops below `epsilon` (or if the best stump cannot beat random guessing).\n4. Finally, we apply the learned stumps (and their weights) to the test inputs and return the sign of the weighted sum."}
{"task_id": 22, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_tensor(shape: tuple[int, ...], standardize: bool = False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    If standardize=True, we treat the last axis as 'features' and\n    standardize each feature (column) independently to mean 0 and std 1,\n    adding a tiny epsilon to the denominator to avoid divide-by-zero.\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each feature (last axis) is shifted to mean 0\n            and scaled to unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    # Draw integer offsets uniformly from {\u2212300, \u2026, 299}\n    offsets = np.random.randint(-300, 300, size=shape)\n    # Draw continuous uniforms in [0,1)\n    uniforms = np.random.random(size=shape)\n    X = offsets + uniforms\n\n    if standardize:\n        if X.ndim < 2:\n            raise ValueError(\"standardize=True requires tensor with at least 2 dimensions\")\n        # We'll view X as a 2D array of shape (N_samples, N_features),\n        # where N_features = size of the last axis\n        orig_shape = X.shape\n        n_features = orig_shape[-1]\n        X_flat = X.reshape(-1, n_features)\n\n        # Compute mean and std of each feature\n        eps = np.finfo(float).eps\n        mean = X_flat.mean(axis=0)\n        std = X_flat.std(axis=0)\n\n        # Standardize\n        X_flat = (X_flat - mean) / (std + eps)\n\n        # Restore original shape\n        X = X_flat.reshape(orig_shape)\n\n    return X\n```\n\nExplanation of key parts:\n\n1. We use `np.random.randint(-300, 300, size=shape)` to get the integer offsets in {\u2212300,\u2026,299}.\n2. We add `np.random.random(size=shape)` to introduce the uniform [0,1) noise.\n3. If `standardize=True`, we:\n   - Ensure the tensor has at least 2 dimensions (so there is a notion of \"columns\").\n   - Collapse all but the last axis into a single \"sample\" axis via `reshape(-1, n_features)`.\n   - Compute per-feature means and standard deviations, adding `eps` to the denominator.\n   - Subtract means and divide by `(std + eps)`.\n   - Reshape back to the original tensor shape.\n\nThis guarantees that for 2D inputs of shape `(N, F)`, each of the `F` columns will have mean 0 and standard deviation 1 (up to numerical precision, within ~1e-10)."}
{"task_id": 24, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    # Convert w to numpy array\n    w = np.array(w, dtype=float)\n\n    # Initialize velocity to zeros if empty\n    if isinstance(velocity, (list, np.ndarray)) and len(velocity) == 0:\n        v = np.zeros_like(w)\n    else:\n        v = np.array(velocity, dtype=float)\n\n    # 1. Look-ahead point\n    w_tilde = w - momentum * v\n\n    # 2. Gradient evaluation with clipping\n    g_raw = grad_func(w_tilde)\n    g = np.array(g_raw, dtype=float)\n    g = np.clip(g, -1.0, 1.0)\n\n    # 3. Velocity update\n    v_new = momentum * v + learning_rate * g\n\n    # 4. Parameter update\n    w_new = w - v_new\n\n    # Round to 4 decimal places and convert to Python lists\n    w_new_rounded = np.round(w_new, 4).tolist()\n    v_new_rounded = np.round(v_new, 4).tolist()\n\n    return w_new_rounded, v_new_rounded\n```\n\nExplanation of key steps:\n1. We cast `w` and `velocity` into NumPy arrays for vectorized arithmetic.\n2. If `velocity` is empty, we create a zero vector of the same shape as `w`.\n3. We compute the \u201clook-ahead\u201d point `w_tilde = w - \u03bc v`.\n4. We evaluate the gradient at `w_tilde`, clip each component to [\u20131, 1].\n5. We update the velocity: `v' = \u03bc v + \u03b7 g`.\n6. We update the parameters: `w' = w - v'`.\n7. Finally, we round both `w'` and `v'` to 4 decimal places and return them as Python lists."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Number of test samples (m) and training samples (n)\n    # d is the feature dimension, not used explicitly below\n    m, _ = X_test.shape\n    n, _ = X_train.shape\n\n    if m == 0 or n == 0:\n        # No data to predict or no support vectors => return empty or trivial\n        return []\n\n    # Pre-compute squared norms for train and test\n    # X_test_sq : shape (m,)\n    X_test_sq = np.sum(X_test**2, axis=1)\n    # X_train_sq: shape (n,)\n    X_train_sq = np.sum(X_train**2, axis=1)\n\n    # Compute the matrix of squared distances: shape (m, n)\n    # dist_sq[i,j] = ||X_test[i] - X_train[j]||^2\n    # = ||X_test[i]||^2 + ||X_train[j]||^2 - 2 * X_test[i]\u00b7X_train[j]\n    dist_sq = (\n        X_test_sq[:, np.newaxis]\n        + X_train_sq[np.newaxis, :]\n        - 2.0 * X_test.dot(X_train.T)\n    )\n\n    # Gaussian (RBF) kernel matrix: K[i,j] = exp(-gamma * dist_sq[i,j])\n    K = np.exp(-gamma * dist_sq)\n\n    # Compute the decision function values for all test points:\n    # g = K \u00b7 (alpha * y_train) + b\n    coeff = alpha * y_train  # shape (n,)\n    g = K.dot(coeff) + b     # shape (m,)\n\n    # Convert to labels: sign(g) but ensure only +1 or -1\n    preds = np.where(g >= 0, 1, -1)\n\n    # Return as a plain Python list of ints\n    return preds.astype(int).tolist()\n```\n\nExplanation of the main steps:\n1. We compute all pairwise squared Euclidean distances between test points and training points using the identity  \n   \u2016z\u2212x\u2016\u00b2 = \u2016z\u2016\u00b2 + \u2016x\u2016\u00b2 \u2212 2 z\u00b7x  \n   in a fully vectorized way.\n2. We apply the Gaussian (RBF) kernel `K = exp(-\u03b3 \u00b7 dist_sq)`.\n3. We form the weighted sum  \n   g(z) = \u03a3_i \u03b1_i\u00b7y_i\u00b7K(z, x_i) + b  \n   by a single matrix-vector product `K.dot(alpha * y_train) + b`.\n4. Finally, we threshold at zero (`>=0` \u2192 +1, else \u22121) to produce the predicted class labels."}
{"task_id": 26, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union, List, Tuple\n\ndef relu(x: Union[List[int], List[float], List[List[Union[int, float]]]]\n         ) -> Tuple[List, List]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    # Convert the input to a NumPy array\n    arr = np.array(x)\n\n    # Element-wise ReLU: max(0, x)\n    activation = np.where(arr > 0, arr, 0)\n\n    # Gradient mask: 1 if x >= 0, else 0\n    gradient = np.where(arr >= 0, 1, 0)\n\n    # Convert results back to nested Python lists\n    return activation.tolist(), gradient.tolist()\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = [[-2, -1, 0, 1, 2], [3.5, -0.2, 0.0, 4.1, -5.9]]\n    act, grad = relu(data)\n    print(\"Activation:\", act)\n    print(\"Gradient:  \", grad)\n```\n\nExplanation:\n1. We first cast the (possibly nested) Python list `x` to a NumPy array `arr`.\n2. We apply `np.where(arr > 0, arr, 0)` to compute the element-wise ReLU activation.\n3. We apply `np.where(arr >= 0, 1, 0)` to build the gradient mask, taking the derivative at zero to be 1.\n4. Finally, `.tolist()` converts the NumPy arrays back into nested Python lists preserving the original shape."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert input to numpy array of floats\n    A = np.array(X, dtype=float)\n    m, n = A.shape\n\n    # Check validity of k\n    if k < 1 or k > min(m, n):\n        return -1\n\n    # Full SVD\n    U, s, Vt = np.linalg.svd(A, full_matrices=False)\n    # Truncate to rank k\n    U_k = U[:, :k]             # (m x k)\n    s_k = s[:k]                # (k,)\n    Vt_k = Vt[:k, :]           # (k x n)\n\n    # Form the diagonal matrix of singular values\n    S_k = np.diag(s_k)         # (k x k)\n\n    # Reconstruct\n    A_hat = U_k @ S_k @ Vt_k   # (m x n)\n\n    # Compute MSE\n    mse = np.mean((A - A_hat) ** 2)\n\n    # Round results to 4 decimals\n    A_hat_rounded = np.round(A_hat, 4)\n    mse_rounded = float(np.round(mse, 4))\n\n    # Convert reconstructed matrix back to list of lists\n    X_hat_list = A_hat_rounded.tolist()\n\n    return X_hat_list, mse_rounded\n```\n\nExplanation of key steps:\n\n1. **Validation**: We check that `k` is between 1 and `min(m, n)`. If not, we return `-1`.  \n2. **SVD**: Using `np.linalg.svd(A, full_matrices=False)` to get the compact factorization `A = U @ diag(s) @ Vt`.  \n3. **Truncation**: We keep only the first `k` singular values/vectors (`U_k`, `s_k`, `Vt_k`).  \n4. **Reconstruction**: Compute `A_hat = U_k @ diag(s_k) @ Vt_k`.  \n5. **Error**: The MSE is `mean((A - A_hat)^2)`.  \n6. **Rounding**: We round every entry of `A_hat` and the MSE to 4 decimal places.  \n7. **Output**: Return a tuple `(X_hat, mse)` where `X_hat` is a list of lists and `mse` a float."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    # Convert to numpy arrays\n    x = np.asarray(x_train, dtype=float).flatten()\n    y = np.asarray(y_train, dtype=float).flatten()\n    n = x.shape[0]\n    if n == 0:\n        return 0.0\n\n    # Sort by x\n    order = np.argsort(x)\n    x = x[order]\n    y = y[order]\n\n    # Candidate splits: midpoints between consecutive distinct x's\n    splits = []\n    for i in range(n - 1):\n        if x[i] != x[i + 1]:\n            splits.append(0.5 * (x[i] + x[i + 1]))\n    # If no valid split, we'll just predict the mean\n    if len(splits) == 0:\n        return round(float(np.mean(y)), 4)\n\n    # Initialize residuals to y (since initial prediction is zero)\n    residuals = y.copy()\n    rss = np.sum(residuals**2)\n\n    # Storage for learned stumps: list of (split, c1, c2)\n    stumps = []\n\n    # Iteratively add stumps until rss <= epsilon\n    while rss > epsilon:\n        best = None  # will hold (rss_after, split, c1, c2)\n        # Try every candidate split\n        for s in splits:\n            left_mask = x <= s\n            right_mask = ~left_mask\n            # Means of residuals on each side\n            c1 = residuals[left_mask].mean() if np.any(left_mask) else 0.0\n            c2 = residuals[right_mask].mean() if np.any(right_mask) else 0.0\n            # Compute stump predictions\n            preds = np.where(left_mask, c1, c2)\n            # RSS after adding this stump\n            rss_new = np.sum((residuals - preds)**2)\n            if best is None or rss_new < best[0]:\n                best = (rss_new, s, c1, c2)\n\n        # If we couldn't improve, break\n        if best is None:\n            break\n\n        rss_new, best_s, best_c1, best_c2 = best\n        # If no improvement, stop\n        if rss_new >= rss:\n            break\n\n        # Accept this stump\n        stumps.append((best_s, best_c1, best_c2))\n        # Update residuals and rss\n        left_mask = x <= best_s\n        preds = np.where(left_mask, best_c1, best_c2)\n        residuals -= preds\n        rss = rss_new\n\n    # Make prediction for x_query\n    pred = 0.0\n    for s, c1, c2 in stumps:\n        pred += (c1 if x_query <= s else c2)\n\n    return round(float(pred), 4)\n```\n\nExplanation of key steps:\n1. We sort the data by the single feature to generate valid candidate splits.\n2. We initialize residuals to the true targets (since the ensemble prediction starts at 0).\n3. In each boosting iteration, we scan all splits, compute the best stump (one split with constants on left/right) that minimizes the new RSS, and then update the residuals.\n4. We stop once the RSS falls below the tolerance `epsilon` (or no further improvement is possible).\n5. Finally, we sum the contributions of all learned stumps at `x_query` and return the result rounded to four decimals."}
{"task_id": 32, "completion_id": 0, "completion": "```python\ndef check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings. Any string\n    is converted with `float()`; existing numeric values stay as they are.\n    The pair (a, b) is returned.\n    \"\"\"\n    def _clean(x):\n        if isinstance(x, str):\n            # May raise ValueError if not a numeric string\n            return float(x)\n        if isinstance(x, (int, float)):\n            return x\n        # If it's some other type, let float() decide (and raise if it can't)\n        return float(x)\n\n    return _clean(a), _clean(b)\n\n\n# Do NOT change this decorator \u2013 it is required by the grader.\ndef validate_input(function):\n    def wrapper(a, b):\n        a, b = check_data(a, b)\n        return function(a, b)\n    return wrapper\n\n\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    result = a + b\n    # If the result is a float that represents an integer, cast it to int\n    if isinstance(result, float) and result.is_integer():\n        return int(result)\n    return result\n```\n\nExplanation of key points:\n\n1. `check_data` handles three cases:\n   - If the input is a `str`, we call `float(x)` (letting it raise `ValueError` if it\u2019s not numeric).\n   - If it\u2019s already an `int` or `float`, we leave it unchanged.\n   - Otherwise, we attempt `float(x)` again (so types like `Decimal` that can convert will succeed, others will error out).\n\n2. `sum_numbers` is decorated once with `@validate_input`. It adds the two cleaned values and then ensures that if the result is a floating\u2010point number with no fractional part, it\u2019s returned as a plain `int`, per the output constraint."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor of the given shape, filled with 0.0s and 1.0s,\n    where each element is 1.0 with probability `sparsity` and 0.0 otherwise.\n\n    Parameters\n    ----------\n    shape : tuple of int\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        Probability of an entry being 1.0. Must lie in [0, 1]. Default is 0.5.\n    seed : int or None, optional\n        If not None, seed for NumPy's random number generator to make the\n        result reproducible. Default is None.\n\n    Returns\n    -------\n    numpy.ndarray of floats\n        An array of shape `shape` containing only 0.0 and 1.0.\n    int\n        Returns -1 if `sparsity` is outside the interval [0, 1].\n    \"\"\"\n    # 1. Check sparsity bounds\n    if not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    # 2. Optionally seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # 3. Draw uniform samples in [0, 1)\n    uniform_samples = np.random.rand(*shape)\n\n    # 4. Compute threshold so that P(entry == 1.0) == sparsity\n    threshold = 1.0 - sparsity\n\n    # 5. Compare and cast to float\n    binary_tensor = (uniform_samples >= threshold).astype(float)\n\n    return binary_tensor\n```\n\nExplanation of key steps:\n\n1. We first validate that `sparsity` \u2208 [0,1], returning `-1` if not.\n2. If a `seed` is provided, we call `np.random.seed(seed)` for reproducibility.\n3. We generate uniform random samples in `[0,1)` of the requested `shape` via `np.random.rand`.\n4. To ensure each entry is 1.0 with probability exactly `sparsity`, we set a threshold at `1 - sparsity`.  A uniform sample `r` will satisfy `r >= threshold` with probability `sparsity`.\n5. Finally, we convert the boolean mask `(uniform_samples >= threshold)` into floats (`0.0` and `1.0`) and return it."}
{"task_id": 35, "completion_id": 0, "completion": "```python\nfrom typing import Any\n\n\nclass node:  # noqa: N801 \u2013 keep the original name used by the problem description\n   A minimal tree node for decision-tree-like structures.\n\n    Attributes:\n        fea: int \u2013 index of the feature to split on. A value of -1 marks a leaf.\n        res: Any \u2013 label stored in the leaf. None for internal nodes.\n        child: dict \u2013 mapping from feature value to the corresponding sub-tree.\n       def __init__(self, fea: int = -1, res: Any | None = None, child: dict | None = None) -> None:\n        self.fea = fea\n        self.res = res\n        self.child = child or {}\n\n\ndef classify(root: node, sample: list[Any]) -> Any:\n   Return the prediction obtained by traversing a *node* tree.\n\n    Args:\n        root: The root node of the decision tree.\n        sample: A list of feature values representing one data point.\n\n    Returns:\n        The label stored in the reached leaf, or -1 if the sample cannot be\n        classified.\n       curr = root\n    # Traverse until we hit a leaf node (fea == -1)\n    while curr.fea != -1:\n        # Check feature index bounds\n        idx = curr.fea\n        if idx < 0 or idx >= len(sample):\n            return -1\n\n        # Get the sample's value for this feature\n        val = sample[idx]\n\n        # Follow the branch corresponding to this value\n        if val not in curr.child:\n            return -1\n\n        curr = curr.child[val]\n\n    # We've reached a leaf; return its stored result\n    return curr.res\n\n\n# Example usage and simple test\nif __name__ ==main    # Build a small decision tree:\n    #           (fea=0)\n    #           /     \\\n    #         0        1\n    #        /          \\\n    #   (fea=1)        Leaf(resA    #    /   \\\n    #   0     1\n    #  /       \\\n    #B     C    #\n    leafA = node(fea=-1, resA    leafB = node(fea=-1, resB    leafC = node(fea=-1, resC    subtree = node(fea=1, child={0: leafB, 1: leafC})\n    root = node(fea=0, child={0: subtree, 1: leafA})\n\n    samples = [\n        ([0, 0],B        ([0, 1],C        ([1, 5],A        ([2, 0], -1),   # feature 0 == 2 not in root.child\n        ([0], -1),      # missing feature 1 when needed\n    ]\n\n    for s, expected in samples:\n        pred = classify(root, s)\n        print(fsample={s}  predicted={pred!r}  expected={expected!r```\n\nExplanation of the traversal in `classify`:\n\n1. Start at the `root` node.\n2. While the current node is not a leaf (`fea != -1`):\n   - Check if `fea` is outside the bounds of the `sample` list. If so, return `-1`.\n   - Retrieve `val = sample[fea]`.\n   - If `val` is not a key in `curr.child`, return `-1`.\n   - Otherwise, move `curr` to `curr.child[val]`.\n3. When a leaf is reached (`fea == -1`), return its `res` value.\n4. Any failed lookup or out-of-range index yields `-1`."}
{"task_id": 36, "completion_id": 0, "completion": "```python\nfrom typing import List, Optional\n\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\n\n\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Run a binary decision tree on a batch of samples.\n\n    Args:\n        root: The root node of the decision tree (or None for empty tree).\n        X: A list of samples, where each sample is a list of feature values.\n\n    Returns:\n        A list of predictions, one per sample, in the same order as X.\n    \"\"\"\n    # If the tree is empty, return no predictions\n    if root is None:\n        return []\n\n    predictions: List[float] = []\n\n    for sample in X:\n        node = root\n        # Traverse until we hit a leaf\n        while not (node.left is None and node.right is None):\n            # node is guaranteed non-leaf here\n            feat_idx = node.feature\n            thresh = node.threshold\n            # Go left if sample value <= threshold, else right\n            if sample[feat_idx] <= thresh:\n                node = node.left\n            else:\n                node = node.right\n        # When leaf is reached, node.threshold holds the prediction\n        predictions.append(node.threshold)\n\n    return predictions\n```\n\nExplanation of key steps:\n1. If `root` is `None`, we immediately return an empty list.\n2. For each sample in `X`, we start at the root and follow the rule:\n   - If the current node is *not* a leaf (i.e.\\ it has children), compare `sample[node.feature]` to `node.threshold`.  \n   - Move to the left child if `<=`, otherwise move to the right child.\n3. Once a leaf is reached (both `left` and `right` are `None`), its `threshold` attribute holds the predicted value, which we append to our output list.\n4. Return the list of predictions in the same order as the input samples."}
{"task_id": 37, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import cycle\n\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1). The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n    \n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty. Each dictionary has the keys 'point', 'label', 'left',\n        and 'right'.\n    \"\"\"\n    # If there are no points, return None\n    if data.shape[0] == 0:\n        return None\n\n    # Number of feature\u2010dimensions\n    m = data.shape[1] - 1\n    \n    # Create a single global dimension cycle\n    dim_cycle = cycle(range(m))\n\n    def _build(subset: np.ndarray) -> dict | None:\n        # Base case: empty subset\n        if subset.shape[0] == 0:\n            return None\n        \n        # Get the next splitting dimension\n        d = next(dim_cycle)\n        \n        # Sort subset by column 'd'\n        order = np.argsort(subset[:, d], kind='stable')\n        sorted_subset = subset[order]\n        \n        # Pick median\n        mid = sorted_subset.shape[0] // 2\n        median_row = sorted_subset[mid]\n        \n        # Extract point and label\n        point = median_row[:m].tolist()\n        label = median_row[m].item()  # .item() to convert numpy scalar to Python scalar\n        \n        # Recursively build subtrees\n        left_tree  = _build(sorted_subset[:mid])\n        right_tree = _build(sorted_subset[mid+1:])\n        \n        # Return the node as a dictionary\n        return {\n            \"point\": point,\n            \"label\": label,\n            \"left\": left_tree,\n            \"right\": right_tree\n        }\n\n    # Build the tree from the full data\n    return _build(data)\n```\n\nExplanation of key steps:\n\n1. **Empty check**: If `data` has zero rows, immediately return `None`.  \n2. **Dimension cycling**: We create one `dim_cycle = cycle(range(m))` so that every call\u2014no matter in which branch\u2014draws from the same infinite sequence of splitting dimensions. This satisfies the \u201cglobal generator\u201d requirement.  \n3. **Sorting & median**: For each node, pull `d = next(dim_cycle)`, sort the current subset by column `d`, and pick the element at index `len(subset)//2` as the median.  \n4. **Recursive splitting**: Everything before the median goes to the left subtree, everything after to the right. When a subset is empty, recursion returns `None`.  \n5. **Node format**: Each node is a dictionary with keys `\"point\"`, `\"label\"`, `\"left\"`, and `\"right\"`."}
{"task_id": 38, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linucb_select_arm(context: np.ndarray,\n                      A: list[list[list[float]]],\n                      b: list[list[float]],\n                      alpha: float) -> int:\n   Select an arm according to the LinUCB rule.\n\n    Parameters\n    ----------\n    context : np.ndarray\n        Matrix of shape (D, n_arms) containing the D-dimensional feature\n        vectors of every arm for the current round.\n    A : list\n        List where ``A[a]`` is the (D\u00d7D) Gram matrix of arm *a*.\n    b : list\n        List where ``b[a]`` is the length-D accumulated reward-context vector\n        of arm *a*.\n    alpha : float\n        Exploration coefficient (> 0).\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest LinUCB score.\n       n_arms = context.shape[1]\n    p = np.empty(n_arms, dtype=float)\n\n    for a in range(n_arms):\n        A_a = np.array(A[a])\n        b_a = np.array(b[a])\n        # \u03b8\u0302_a = A_a^{-1} b_a\n        A_inv = np.linalg.inv(A_a)\n        theta_hat = A_inv.dot(b_a)\n\n        c_a = context[:, a]\n        # Exploitation term\n        mu = theta_hat.dot(c_a)\n        # Exploration term\n        sigma = np.sqrt(c_a.dot(A_inv.dot(c_a)))\n        p[a] = mu + alpha * sigma\n\n    # return the smallest index in case of a tie, like np.argmax\n    return int(np.argmax(p))\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    if n == 0:\n        raise ValueError(\"Cannot split an empty dataset.\")\n\n    # k = median position (for even n, this is n//2 as specified)\n    k = n // 2\n\n    # extract the column of interest\n    col = data[:, d]\n\n    # find the row index of the k-th smallest element in O(n) time\n    parti = np.argpartition(col, k)\n    pivot_idx = int(parti[k])        # row index in original array\n    pivot_val = col[pivot_idx]\n\n    # collect strictly smaller and strictly larger row indices\n    left_mask = col < pivot_val\n    right_mask = col > pivot_val\n\n    left_indices = np.nonzero(left_mask)[0]\n    right_indices = np.nonzero(right_mask)[0]\n\n    # sort to make output deterministic\n    left_list = sorted(int(i) for i in left_indices)\n    right_list = sorted(int(i) for i in right_indices)\n\n    return pivot_idx, left_list, right_list\n```\n\nExplanation of the key steps:\n\n1.  Compute `k = n//2`.  \n2.  Use `np.argpartition` on the chosen column to place the k-th smallest element at position `k` without fully sorting.  \n3.  Extract `pivot_idx = parti[k]`. This is the row index in the original array whose value is the median.  \n4.  Determine `pivot_val = data[pivot_idx, d]`.  \n5.  Build boolean masks for strictly smaller (`< pivot_val`) and strictly larger (`> pivot_val`) entries, extract their row indices, and sort them.  \n6.  Return `(pivot_idx, left_list, right_list)`."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n   Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n       # Preconditions\n    assert isinstance(x, np.ndarray),Input must be a numpy array    assert x.ndim == 1,Input array must be 1-D    assert stride >= 1,Stride must be at least 1    N = x.shape[0]\n    assert N >= frame_width,Input length must be at least as large as frame_width    # Number of frames\n    n_frames = (N - frame_width) // stride + 1\n\n    # Compute the new strides\n    element_stride = x.strides[0]\n    new_strides = (stride * element_stride, element_stride)\n\n    # Build the as_strided view\n    frames = as_strided(x,\n                        shape=(n_frames, frame_width),\n                        strides=new_strides)\n\n    # Set writeability\n    if writeable:\n        # Inherit the writability of the source array\n        frames.flags.writeable = x.flags.writeable\n    else:\n        # Force read-only\n        frames.flags.writeable = False\n\n    return frames\n```\n\nExplanation of key steps:\n\n1. We assert the three required preconditions:\n   - `x` is 1-D.\n   - `stride` is at least 1.\n   - `len(x)` is at least `frame_width`.\n\n2. We compute the number of frames as\n   ```\n   n_frames = (len(x) - frame_width) // stride + 1\n   ```\n   dropping any trailing samples that wouldn't form a full frame.\n\n3. We use `as_strided` with\n   - `shape = (n_frames, frame_width)`\n   - `strides = (stride * x.strides[0], x.strides[0])`\n   so that each successive row starts `stride` samples after the previous one.\n\n4. Finally, we enforce the required writeability on the returned view."}
{"task_id": 41, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int = 5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    # Convert to numpy arrays for vectorised distance computations\n    X_train = np.array(X_data, dtype=float)\n    X_query = np.array(X, dtype=float)\n\n    n_train = X_train.shape[0]\n    if n_train == 0:\n        raise ValueError(\"Training set X_data must not be empty.\")\n    if X_query.ndim != 2 or X_train.ndim != 2:\n        raise ValueError(\"Both X_data and X must be 2D lists of feature vectors.\")\n    if X_query.shape[1] != X_train.shape[1]:\n        raise ValueError(\"Feature\u2010space dimensionality of X_data and X must match.\")\n\n    predictions = []\n    # For each query point\n    for x in X_query:\n        # Compute Euclidean distances to all training points\n        dists = np.linalg.norm(X_train - x, axis=1)\n        # Determine how many neighbours to use\n        k_used = min(k, n_train)\n        # Find indices of the k smallest distances\n        nearest_idxs = np.argsort(dists)[:k_used]\n        # Gather their labels\n        neigh_labels = [y_data[i] for i in nearest_idxs]\n        # Count occurrences\n        cnt = Counter(neigh_labels)\n        # Find the maximum vote count\n        max_votes = max(cnt.values())\n        # Extract all labels with that count\n        tied = [label for label, c in cnt.items() if c == max_votes]\n        # Break ties by lexicographically smallest label\n        prediction = min(tied)\n        predictions.append(prediction)\n\n    return predictions\n```\n\nExplanation of key steps:\n1. **Distance calculation**  \n   We vectorize the Euclidean distance computation via  \n   `dists = np.linalg.norm(X_train - x, axis=1)`  \n   which yields a length-`n_train` array of distances from the query point `x` to every training point.\n\n2. **Selecting k nearest neighbours**  \n   We use `np.argsort(dists)[:k_used]` to get the indices of the `k_used` smallest distances.\n\n3. **Majority voting with deterministic tie\u2010breaking**  \n   We count neighbour labels with `collections.Counter`, find the maximum vote count, collect all labels that share that count, and pick the lexicographically smallest one using Python\u2019s built\u2010in `min()`.\n\n4. **Edge cases**  \n   - If `k` exceeds the number of training samples, we simply use all samples.  \n   - If the training set is empty or dimensions mismatch, we raise a `ValueError`."}
{"task_id": 42, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    # Validate inputs: same non-zero length\n    if not isinstance(actual, (list, tuple)) or not isinstance(predicted, (list, tuple)):\n        return -1.0\n    if len(actual) == 0 or len(actual) != len(predicted):\n        return -1.0\n\n    # Validate non-negativity\n    for x in actual:\n        if not isinstance(x, (int, float)) or x < 0:\n            return -1.0\n    for x in predicted:\n        if not isinstance(x, (int, float)) or x < 0:\n            return -1.0\n\n    # Convert to numpy arrays\n    actual_arr = np.array(actual, dtype=float)\n    pred_arr = np.array(predicted, dtype=float)\n\n    # Compute RMSLE\n    log_actual = np.log(actual_arr + 1)\n    log_pred = np.log(pred_arr + 1)\n    squared_diff = (log_pred - log_actual) ** 2\n    mean_sq_diff = np.mean(squared_diff)\n    rmsle_val = np.sqrt(mean_sq_diff)\n\n    # Round to 4 decimal places and return\n    return float(round(rmsle_val, 4))\n```\n\nExplanation:\n\n1. Input validation ensures `actual` and `predicted` are non-empty sequences of the same length and contain only non-negative numbers.  \n2. We convert lists to NumPy arrays, compute `log(x + 1)` for each element, square the differences, take the mean, then the square root.  \n3. Finally, we round the result to four decimal places and return it as a plain Python float. If any validation fails, we return `-1.0`."}
{"task_id": 44, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_activation(x, derivative: bool = False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array (float dtype)\n    x_arr = np.asarray(x, dtype=float)\n    \n    # Compute tanh via the stable formula: tanh(x) = 2/(1 + e^{-2x}) - 1\n    exp_term = np.exp(-2.0 * x_arr)\n    tanh_x = 2.0 / (1.0 + exp_term) - 1.0\n\n    if derivative:\n        # derivative of tanh is 1 - tanh^2(x)\n        result = 1.0 - tanh_x**2\n    else:\n        result = tanh_x\n\n    # Round each element to 4 decimal places and convert to a Python list\n    return np.round(result, 4).tolist()\n```\n\nExplanation of key steps:\n1. We first coerce the input `x` into a NumPy array of floats.\n2. We compute `tanh(x)` via the definition  \n   tanh(x) = 2 / (1 + exp(\u22122x)) \u2212 1  \n   which avoids calling `np.tanh`.\n3. If `derivative` is `True`, we compute  \n   1 \u2212 tanh\u00b2(x).  \n4. Finally, we round every element to 4 decimal places using `np.round` and convert the array back to a Python list."}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length N (N \u2265 0).\n\n    Returns:\n        A Python list of length N where the k-th element is the autocorrelation\n        coefficient a_k = sum_{n=0..N-k-1} x[n+k] * x[n].\n    \"\"\"\n    # Convert input to a flat Python list of native Python scalars\n    if isinstance(x, np.ndarray):\n        x_list = x.tolist()\n    else:\n        # Assume x is a sequence type (e.g. list)\n        x_list = list(x)\n\n    N = len(x_list)\n    if N == 0:\n        return []\n\n    result = []\n    # Direct O(N^2) computation\n    for k in range(N):\n        acc = 0\n        limit = N - k\n        for n in range(limit):\n            acc += x_list[n + k] * x_list[n]\n        result.append(acc)\n\n    return result\n```\n\nExplanation of key steps:\n1. If `x` is a NumPy array, we call `x.tolist()` so that subsequent arithmetic is done with native Python numbers.\n2. For each lag `k` from `0` to `N-1`, we sum the products `x[n+k] * x[n]` for `n` in `0..N-k-1`.\n3. We return the list of autocorrelation coefficients `[a_0, a_1, \u2026, a_{N-1}]`.\n4. When `N == 0`, we immediately return an empty list."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Attempt to convert to a 2D float array\n    try:\n        arr = np.array(X, dtype=float)\n    except Exception:\n        # Non-numeric data or ragged input\n        return False\n\n    # Must be exactly 2-dimensional\n    if arr.ndim != 2:\n        return False\n\n    # Every entry must lie in [0, 1]\n    if np.any(arr < 0) or np.any(arr > 1):\n        return False\n\n    # Each row must sum to 1 within tolerance\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, np.ones(arr.shape[0]), atol=1e-8):\n        return False\n\n    return True\n```\n\nExplanation of the steps:\n\n1. We wrap the array conversion in a `try`/`except` so that non-numeric or irregular (ragged) inputs immediately yield `False` rather than propagating an exception.  \n2. We check the number of dimensions (`arr.ndim`). Only 2D arrays are allowed.  \n3. We verify that every entry is between 0 and 1 inclusive using `np.any`.  \n4. We compute the sum of each row and compare it to 1 with `np.allclose` under an absolute tolerance of `1e-8`.  \n5. If all checks pass, we return `True`; otherwise `False`."}
{"task_id": 49, "completion_id": 0, "completion": "```python\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    n = len(nums)\n    # Validate k\n    if k <= 0 or k > n:\n        return -1\n\n    # The heap will be a max-heap of at most k elements.\n    heap: List[Number] = []\n\n    def _move_up(idx: int) -> None:\n        \"\"\"Restore max-heap property going upward from idx.\"\"\"\n        while idx > 0:\n            parent = (idx - 1) // 2\n            if heap[idx] > heap[parent]:\n                heap[idx], heap[parent] = heap[parent], heap[idx]\n                idx = parent\n            else:\n                break\n\n    def _move_down(idx: int, size: int) -> None:\n        \"\"\"Restore max-heap property going downward from idx, within heap[0:size].\"\"\"\n        while True:\n            left = 2 * idx + 1\n            right = 2 * idx + 2\n            largest = idx\n\n            if left < size and heap[left] > heap[largest]:\n                largest = left\n            if right < size and heap[right] > heap[largest]:\n                largest = right\n\n            if largest == idx:\n                break\n\n            heap[idx], heap[largest] = heap[largest], heap[idx]\n            idx = largest\n\n    # Process each number in one pass\n    for num in nums:\n        if len(heap) < k:\n            # Just insert\n            heap.append(num)\n            _move_up(len(heap) - 1)\n        else:\n            # If num is smaller than the current max (root), replace and sift down\n            if num < heap[0]:\n                heap[0] = num\n                _move_down(0, k)\n\n    # Now heap contains the k smallest in arbitrary order; return sorted\n    return sorted(heap)\n```\n\nExplanation of key points:\n\n1. We keep a max-heap of size at most `k`.  \n2. `_move_up` is called after appending a new element at the end to restore the heap property by swapping with parent nodes as long as the child is larger (max-heap).  \n3. `_move_down` is used when we replace the root: it compares the new root with its children and swaps it with the larger child repeatedly until the max-heap property is restored.  \n4. If the heap has fewer than `k` elements, we always push the new number. Once we have exactly `k`, we only bother if the incoming number is smaller than the heap\u2019s maximum (`heap[0]`), in which case we replace the root and sift down.  \n5. Finally, we sort the heap in ascending order and return it.  \n6. If `k` is out of range (\u2264 0 or > len(nums)), we immediately return `-1`."}
{"task_id": 51, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef newton(X: np.ndarray, y: np.ndarray, epsilon: float = 1e-6, max_iter: int = 1000) -> list[list[float]]:\n       Solve the two-variable linear least-squares problem\n      minimize_w  (1/n) * ||X w - y||^2\n    using Newton's method. \n    \n    Parameters:\n    - X: (n x 2) data matrix\n    - y: (n,) or (n x 1) target vector\n    - epsilon: stopping threshold on gradient norm\n    - max_iter: maximum number of Newton steps\n    \n    Returns:\n    - w as a 2x1 list of lists, each entry rounded to 4 decimals\n       # Ensure y is a column vector of shape (n, 1)\n    y_col = y.reshape(-1, 1)\n    n = X.shape[0]\n\n    # Initialize w = [1, 1]^T\n    w = np.array([1.0, 1.0]).reshape(2, 1)\n\n    # Precompute Hessian (constant) and its pseudo-inverse\n    H = (2.0 / n) * (X.T @ X)           # 2/n * X^T X\n    H_inv = np.linalg.pinv(H)           # Moore-Penrose pseudo-inverse\n\n    for _ in range(max_iter):\n        # Compute gradient: (2/n) * X^T (X w - y)\n        residual = X @ w - y_col        # shape (n,1)\n        grad = (2.0 / n) * (X.T @ residual)  # shape (2,1)\n\n        # Check stopping criterion\n        if np.linalg.norm(grad) < epsilon:\n            break\n\n        # Newton update: w \u2190 w - H^{-1} grad\n        w = w - H_inv @ grad\n\n    # Round to 4 decimal places and convert to list of lists\n    w_rounded = [[round(float(w[i, 0]), 4)] for i in range(2)]\n    return w_rounded\n```\n\nExplanation of key steps:\n1. We reshape `y` to ensure it\u2019s a column vector `(n, 1)`.\n2. We initialize `w` as a `(2, 1)` column vector `[1.0, 1.0]^T`.\n3. The Hessian `H = (2/n) X\u1d40X` is constant, so we compute it once and take its pseudo-inverse via `np.linalg.pinv`.\n4. In each iteration:\n   - Compute the gradient `grad = (2/n) X\u1d40 (Xw \u2212 y)`.\n   - Stop if `||grad||\u2082 < \u03b5`.\n   - Otherwise update `w \u2190 w \u2212 H\u207b\u00b9 grad`.\n5. Finally, we round each component to 4 decimals and return as `[[w0], [w1]]`."}
{"task_id": 54, "completion_id": 0, "completion": "```python\nimport string\n\n# A common set of English stop-words\n_STOP_WORDS = {\n    \"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"aren't\",\n    \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\",\n    \"can't\", \"cannot\", \"could\", \"couldn't\", \"did\", \"didn't\", \"do\", \"does\", \"doesn't\", \"doing\", \"don't\",\n    \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"hadn't\", \"has\", \"hasn't\", \"have\",\n    \"haven't\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\",\n    \"him\", \"himself\", \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\",\n    \"isn't\", \"it\", \"it's\", \"its\", \"itself\", \"let's\", \"me\", \"more\", \"most\", \"mustn't\", \"my\", \"myself\",\n    \"no\", \"nor\", \"not\", \"of\", \"off\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\",\n    \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"shan't\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\",\n    \"shouldn't\", \"so\", \"some\", \"such\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\",\n    \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\",\n    \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\",\n    \"wasn't\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"were\", \"weren't\", \"what\", \"what's\", \"when\",\n    \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \"why\", \"why's\", \"with\",\n    \"won't\", \"would\", \"wouldn't\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\",\n    \"yourself\", \"yourselves\"\n}\n\ndef tokenize_whitespace(\n    line: str,\n    lowercase: bool = True,\n    filter_stopwords: bool = True,\n    filter_punctuation: bool = True,\n    **kwargs\n) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    if lowercase:\n        line = line.lower()\n\n    raw_tokens = line.split()\n    result_tokens: list[str] = []\n\n    for token in raw_tokens:\n        # Strip punctuation at the start and end\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n            if not token:\n                continue\n\n        # Filter stop-words\n        if filter_stopwords and token in _STOP_WORDS:\n            continue\n\n        result_tokens.append(token)\n\n    return result_tokens\n```\n\nExplanation of key steps:\n1. Optionally lower-case the entire input before splitting.\n2. Split on whitespace (`str.split()`).\n3. For each token:\n   - If `filter_punctuation` is True, strip ASCII punctuation from both ends. Discard empty tokens.\n   - If `filter_stopwords` is True, drop tokens found in our `_STOP_WORDS` set.\n4. Preserve order and return the filtered list."}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n   Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n       n, d = X.shape\n    # Flatten y to shape (n,)\n    y = y.reshape(-1)\n    # Initialize parameters\n    w = np.zeros(d, dtype=float)\n    s = np.zeros(d, dtype=float)\n    \n    # If batch_size > n, use full batch each time\n    if batch_size > n:\n        batch_size = n\n\n    # For wrapping around the data in mini-batches\n    idx_start = 0\n\n    for _ in range(max_iter):\n        # Determine current mini-batch indices with wrap-around\n        if batch_size == n:\n            Xb = X\n            yb = y\n        else:\n            idx_end = idx_start + batch_size\n            if idx_end <= n:\n                Xb = X[idx_start:idx_end]\n                yb = y[idx_start:idx_end]\n            else:\n                # Wrap around\n                part1 = X[idx_start:n]\n                part2 = X[0:idx_end - n]\n                Xb = np.vstack((part1, part2))\n                yb = np.concatenate((y[idx_start:n], y[0:idx_end - n]))\n            idx_start = idx_end % n  # advance start for next iteration\n\n        m = Xb.shape[0]  # actual batch size\n        \n        # Compute gradient on the batch\n        resid = Xb.dot(w) - yb  # shape (m,)\n        g = (1.0 / m) * (Xb.T.dot(resid))  # shape (d,)\n\n        # Early stopping if gradient norm is small\n        if np.linalg.norm(g) < epsilon:\n            break\n\n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n\n        # Update weights\n        w -= eta * g / (np.sqrt(s) + eps_station)\n\n    # Round to 4 decimals and return as list\n    return np.round(w, 4).tolist()\n```\n\nExplanation of key steps:\n1. **Initialization**:  \n   - `w` (weights) and `s` (running squared-gradient average) are zero vectors of length `d`.  \n   - If `batch_size > n`, we reset `batch_size = n` so each update uses the full dataset.\n\n2. **Mini-batch selection with wrap-around**:  \n   - We keep an index `idx_start` that moves forward by `batch_size` each iteration, wrapping around the dataset when we reach the end.  \n   - We slice out `Xb, yb` accordingly; if the slice overruns the end of the data, we concatenate the \u201ctail\u201d and the \u201chead\u201d of the dataset.\n\n3. **Gradient and RMSprop update**:  \n   - Compute the mini-batch gradient `g = (1/m) Xb\u1d40(Xb w \u2212 yb)`.  \n   - Stop early if `\u2225g\u2225\u2082 < epsilon`.  \n   - Update the running average of squared gradients `s \u2190 \u03c1\u00b7s + (1\u2212\u03c1)\u00b7g\u00b2` (element-wise).  \n   - Update weights `w \u2190 w \u2212 \u03b7\u00b7g/(\u221as + eps_station)`.\n\n4. **Return**  \n   - Round each component of `w` to 4 decimal places and convert to a Python list."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n       Compute the SoftPlus activation or its derivative (sigmoid) in a numerically\n    stable way, round each output to 4 decimal places, and return as a Python list\n    (or a single float if the input was a scalar).\n\n    Args:\n        x: A scalar, Python list, or NumPy array of real values.\n        deriv: If False (default), return SoftPlus(x). If True, return sigmoid(x).\n\n    Returns:\n        A Python list of floats rounded to 4 decimals, or a single float if the input\n        was a scalar.\n       # Convert input to NumPy array of floats\n    x_arr = np.array(x, dtype=float)\n    is_scalar = (x_arr.ndim == 0)\n\n    if deriv:\n        # Numerically stable sigmoid:\n        #   sigmoid(x) = 1/(1+e^-x)        if x >= 0\n        #              = e^x/(1+e^x)      if x <  0\n        out = np.where(\n            x_arr >= 0,\n            1.0 / (1.0 + np.exp(-x_arr)),\n            np.exp(x_arr) / (1.0 + np.exp(x_arr))\n        )\n    else:\n        # Numerically stable SoftPlus:\n        #   softplus(x) = x + log1p(e^-x)   if x >  0\n        #                = log1p(e^x)       if x <= 0\n        out = np.where(\n            x_arr > 0,\n            x_arr + np.log1p(np.exp(-x_arr)),\n            np.log1p(np.exp(x_arr))\n        )\n\n    # Round to 4 decimal places\n    out = np.round(out, 4)\n\n    # Return as Python list or scalar float\n    if is_scalar:\n        return float(out)\n    else:\n        return out.tolist()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\nimport math\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n   Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n       # handle trivial case: if sequence has fewer tokens than N, no windows => prob=1 => log prob = 0\n    if len(sequence) < N:\n        return round(0.0, 4)\n\n    # Unigram model\n    if N == 1:\n        uni_counts = Counter(corpus)\n        total_tokens = len(corpus)\n        log_prob = 0.0\n\n        for w in sequence:\n            count_w = uni_counts.get(w, 0)\n            if count_w == 0:\n                return float('-inf')\n            p = count_w / total_tokens\n            log_prob += math.log(p)\n\n        return round(log_prob, 4)\n\n    # N > 1: build counts for N-grams and (N-1)-gram prefixes\n    # ngram_counts[(w1,...,wN)] = count\n    # prefix_counts[(w1,...,w_{N-1})] = count\n    ngram_counts = Counter(\n        tuple(corpus[i : i + N]) for i in range(len(corpus) - N + 1)\n    )\n    prefix_counts = Counter(\n        tuple(corpus[i : i + N - 1]) for i in range(len(corpus) - (N - 1) + 1)\n    )\n\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i : i + N])\n        prefix = tuple(sequence[i : i + N - 1])\n\n        count_ng = ngram_counts.get(ngram, 0)\n        if count_ng == 0:\n            return float('-inf')\n\n        count_pre = prefix_counts.get(prefix, 0)\n        if count_pre == 0:\n            return float('-inf')\n\n        p = count_ng / count_pre\n        log_prob += math.log(p)\n\n    return round(log_prob, 4)\n```\n\nExplanation of the main steps:\n\n1. **Base case**: If `len(sequence) < N`, there are no length-N windows, so the product of window probabilities is 1 and log-probability is 0.\n\n2. **Unigram (N=1)**:  \n   - Count each token in `corpus`.  \n   - For each token in `sequence`, if it never appeared in `corpus`, return `-inf`.  \n   - Otherwise add `log(count(token)/|corpus|)` to the total.\n\n3. **Higher-order (N>1)**:  \n   - Build a `Counter` of all N-grams in the corpus.  \n   - Build a `Counter` of all (N\u22121)-gram prefixes in the corpus.  \n   - Slide a window of length N over `sequence`.  \n     - If the N-gram count or its prefix count is zero, return `-inf`.  \n     - Otherwise add `log(count(ngram)/count(prefix))`.\n\n4. **Rounding**: Finally, round the sum of logs to 4 decimal places."}
{"task_id": 60, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    # Empty node has zero impurity\n    if y.size == 0:\n        return 0.0\n\n    crit = criterion.lower()\n    if crit not in (\"entropy\", \"gini\", \"mse\"):\n        raise ValueError(f\"Unknown criterion: {criterion}\")\n\n    if crit in (\"entropy\", \"gini\"):\n        # classification metrics\n        # get class counts and probabilities\n        classes, counts = np.unique(y, return_counts=True)\n        probs = counts / counts.sum()\n\n        if crit == \"entropy\":\n            # avoid log2(0) - but probs>0 by construction of unique()\n            impurity = -np.sum(probs * np.log2(probs))\n        else:  # \"gini\"\n            impurity = 1.0 - np.sum(probs**2)\n\n    else:\n        # \"mse\" for regression: mean squared deviation from the mean\n        mean_y = np.mean(y)\n        impurity = np.mean((y - mean_y)**2)\n\n    return round(float(impurity), 4)\n```\n\nExplanation of key points:\n- Early exit for empty arrays returns 0.0.\n- Classification criteria (\"entropy\", \"gini\") share the computation of class probabilities.\n- Entropy is computed as `-\u03a3 p\u2096 log\u2082(p\u2096)`.\n- Gini is `1 - \u03a3 p\u2096\u00b2`.\n- MSE is the average of squared deviations from the mean.\n- Any other `criterion` string raises a `ValueError`.\n- Final result is rounded to 4 decimal places."}
{"task_id": 61, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef grad(X, y, W):\n   Return the gradient of the MSE loss for linear regression.\n\n    Parameters\n    ----------\n    X : list[list[float]] | np.ndarray\n        The design matrix with shape (n_samples, n_features).\n    y : list[float] | list[list[float]] | np.ndarray\n        The target vector with shape (n_samples,) or (n_samples, 1).\n    W : list[float] | list[list[float]] | np.ndarray\n        The weight vector with shape (n_features,) or (n_features, 1).\n\n    Returns\n    -------\n    list[list[float]]\n        The gradient vector of shape (n_features, 1), rounded to 4 decimal\n        places, or -1 if the input shapes are incompatible.\n       # Convert inputs to numpy arrays of dtype float\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    W_arr = np.array(W, dtype=float)\n\n    # Check that X is 2-D\n    if X_arr.ndim != 2:\n        return -1\n    n_samples, n_features = X_arr.shape\n\n    # Reshape y into (n_samples, 1) if needed, else validate\n    if y_arr.ndim == 1:\n        y_arr = y_arr.reshape(-1, 1)\n    elif y_arr.ndim == 2 and y_arr.shape[1] == 1:\n        pass\n    else:\n        return -1\n    # Check y has correct number of rows\n    if y_arr.shape[0] != n_samples:\n        return -1\n\n    # Reshape W into (n_features, 1) if needed, else validate\n    if W_arr.ndim == 1:\n        W_arr = W_arr.reshape(-1, 1)\n    elif W_arr.ndim == 2 and W_arr.shape[1] == 1:\n        pass\n    else:\n        return -1\n    # Check W has correct number of rows\n    if W_arr.shape[0] != n_features:\n        return -1\n\n    # Compute gradient: (X^T (X W - y)) / n_samples\n    residual = X_arr.dot(W_arr) - y_arr      # shape (n_samples, 1)\n    grad_arr = (X_arr.T.dot(residual)) / n_samples  # shape (n_features, 1)\n\n    # Round to 4 decimal places\n    grad_arr = np.round(grad_arr, 4)\n\n    # Convert to nested Python list of shape (n_features, 1)\n    return grad_arr.tolist()\n```\n\nExplanation of key steps:\n1. **Conversion and dtype**: We convert all inputs to NumPy arrays of type `float` to ensure consistency in arithmetic.\n2. **Dimension checks & reshaping**:\n   - `X` must be strictly 2-D.\n   - `y` and `W` may be 1-D or 2-D with a single column. We reshape 1-D to column vectors; otherwise, we validate their shapes.\n   - We ensure that the number of rows in `y` matches the number of samples in `X`, and that the number of rows in `W` matches the number of features of `X`.\n3. **Gradient computation**: We compute `(X\u1d40 (XW \u2013 y)) / N` in a fully vectorized manner.\n4. **Rounding and output**: We round each element to 4 decimal places and convert the result into a nested Python list of shape `(n_features, 1)`. If any check fails, we return `-1`."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(\n    X: list[float] | \"np.ndarray\",\n    y: list[float] | \"np.ndarray\",\n    degree: int,\n    reg_factor: float,\n    n_iterations: int = 1000,\n    tol: float = 1e-6\n) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function builds polynomial features up to 'degree', optimises the\n    Lasso objective with coordinate descent, and returns the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values, same length as X.\n    degree : int\n        Highest exponent of x to include (total coeffs = degree + 1).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int\n        Maximum number of coordinate-descent passes.\n    tol : float\n        Early-stopping tolerance on max coefficient change.\n\n    Returns\n    -------\n    list[float]\n        Weights [w0, w1, ..., w_degree], rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    m = X_arr.shape[0]\n    if y_arr.shape[0] != m:\n        raise ValueError(\"X and y must have the same length.\")\n    if X_arr.ndim != 1:\n        raise ValueError(\"X must be one-dimensional.\")\n    if degree < 0 or not isinstance(degree, int):\n        raise ValueError(\"degree must be a non-negative integer.\")\n    if reg_factor < 0:\n        raise ValueError(\"reg_factor must be non-negative.\")\n\n    # Build design matrix: columns [1, x, x^2, ..., x^degree]\n    # np.vander with increasing=True gives [x^0, x^1, ..., x^degree]\n    X_mat = np.vander(X_arr, N=degree + 1, increasing=True)  # shape (m, degree+1)\n\n    # Initialize weights w = [w0, w1, ..., w_degree]\n    w = np.zeros(degree + 1, dtype=float)\n\n    # Precompute denom for j>=1: denom_j = sum_i x_i^j * x_i^j = sum (X_mat[:,j]**2)\n    if degree >= 1:\n        denoms = np.sum(X_mat[:, 1:] ** 2, axis=0)  # shape (degree,)\n    else:\n        denoms = np.array([])\n\n    # Soft-threshold helper\n    def soft_threshold(rho: float, lam: float) -> float:\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n\n    # Coordinate descent\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n\n        # 1) Update bias (w0), unregularised\n        if degree >= 1:\n            # residual excluding bias term: y - \u03a3_{j>=1} x^j * w_j\n            # X_mat[:,1:] @ w[1:] is shape (m,)\n            w[0] = np.mean(y_arr - X_mat[:, 1:] @ w[1:])\n        else:\n            # If degree == 0, model is constant\n            w[0] = np.mean(y_arr)\n\n        # 2) Update each w_j for j = 1..degree\n        #    using coordinate descent closed-form with soft thresholding\n        for j in range(1, degree + 1):\n            x_j = X_mat[:, j]               # shape (m,)\n            # Compute partial residual: r = y - (Xw) + w_j * x_j\n            # so that r + x_j * w_j = y - X_{-j} w_{-j}\n            r = y_arr - (X_mat @ w) + w[j] * x_j\n            rho = x_j.dot(r)                # scalar\n\n            # Soft-threshold then divide by denom\n            w_j_new = soft_threshold(rho, reg_factor) / denoms[j - 1]\n            w[j] = w_j_new\n\n        # Check convergence: max absolute change in any weight\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n\n    # Round to 4 decimal places and return as list\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Design Matrix**  \n   We use `np.vander(X_arr, N=degree+1, increasing=True)` to build `[1, x, x^2, \u2026, x^degree]`.\n\n2. **Coordinate Descent**  \n   - **Bias Update (w\u2080)**:  \n     w\u2080 \u2190 mean(y \u2212 \u2211_{j\u22651} x\u02b2\u00b7w\u2c7c). Bias is not regularised.\n   - **Feature Updates (w\u2c7c, j\u22651)**:  \n     Let r = y \u2212 Xw + w\u2c7c\u00b7x\u2c7c, compute \u03c1 = x\u2c7c\u1d40r, then  \n       w\u2c7c \u2190 soft_threshold(\u03c1, \u03bb) / (x\u2c7c\u1d40x\u2c7c)  \n     where soft_threshold(\u03c1, \u03bb) = sign(\u03c1)\u00b7max(|\u03c1|\u2212\u03bb, 0).\n\n3. **Stopping Criterion**  \n   We stop early if the maximum absolute change across all weights in one pass is below `tol`.\n\n4. **Edge Case \u03bb=0**  \n   When `reg_factor=0`, the soft-threshold becomes identity, and the algorithm reduces to ordinary least squares via coordinate descent.\n\n5. **Output**  \n   We return all coefficients `[w0, w1, \u2026, w_degree]` rounded to 4 decimal places.\n"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], \n                  B: list[list[float]], \n                  obs: list[int], \n                  t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a discrete Hidden Markov Model.\n    \n    Given:\n      A   \u2013 (N\u00d7N) transition-probability matrix, A[i][j] = P(x_{k+1}=j | x_k=i)\n      B   \u2013 (N\u00d7M) emission-probability matrix, B[j][m] = P(o=m | x=j)\n      obs \u2013 length-T list of observation indices (each in 0..M-1)\n      t   \u2013 time index (0 \u2264 t < T)\n    \n    Returns:\n      A list of length N containing \u03b2_t(i) for i=0..N-1,\n      each rounded to 4 decimal places.\n    \n    Backward recursion:\n      \u03b2_{T-1}(i) = 1\n      \u03b2_t(i) = sum_j A[i][j] * B[j][ obs[t+1] ] * \u03b2_{t+1}(j)\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized ops\n    A = np.array(A, dtype=float)      # shape (N, N)\n    B = np.array(B, dtype=float)      # shape (N, M)\n    T = len(obs)\n    N = A.shape[0]\n    \n    # initialize \u03b2_{T-1}(i) = 1 for all i\n    beta = np.ones(N, dtype=float)\n    \n    # backward pass from T-2 down to t\n    # at each step k we compute \u03b2_k from \u03b2_{k+1}\n    for k in range(T - 2, t - 1, -1):\n        o_next = obs[k + 1]\n        # elementwise multiply emission * next-beta, then weight by A and sum over j\n        beta = (A * (B[:, o_next] * beta)).sum(axis=1)\n    \n    # round to 4 decimal places and return as Python list\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()\n```"}
{"task_id": 64, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport cmath\nimport math\n\ndef dft(frame: np.ndarray, positive_only: bool = True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first N//2+1 coefficients).  Defaults to True.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        N//2+1 when positive_only is True and N otherwise.\n    \"\"\"\n    # Ensure the input is a 1-D sequence\n    x = frame.flatten()\n    N = x.shape[0]\n    \n    # Preallocate full DFT list\n    full_spectrum = []\n    \n    # Compute DFT naively: O(N^2)\n    for k in range(N):\n        sum_val = 0+0j\n        for n in range(N):\n            angle = -2j * math.pi * k * n / N\n            sum_val += complex(x[n]) * cmath.exp(angle)\n        # Round real and imag parts to 4 decimals\n        real_part = round(sum_val.real, 4)\n        imag_part = round(sum_val.imag, 4)\n        full_spectrum.append(complex(real_part, imag_part))\n    \n    if positive_only:\n        cutoff = N // 2 + 1\n        return full_spectrum[:cutoff]\n    else:\n        return full_spectrum\n```\n\nExplanation of key steps:\n1. We flatten the input `frame` to guarantee a 1-D sequence and determine its length `N`.\n2. We build the full DFT spectrum in a double loop over `k` (output frequency index) and `n` (time/sample index), using the formula  \n   c_k = \u03a3_{n=0 to N-1} x[n] * exp(-2\u03c0i k n / N).\n3. After computing each coefficient, we round its real and imaginary parts to 4 decimals and store it as a Python `complex`.\n4. Finally, if `positive_only` is `True`, we slice off components above the Nyquist index (`N//2`), otherwise we return the full length-`N` spectrum."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # If any of the inputs is empty, we cannot compute a valid probability.\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    # Convert to numpy arrays for convenience\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    pi_arr = np.array(pi, dtype=float)\n    obs_arr = np.array(obs, dtype=int)\n\n    N = A_arr.shape[0]   # number of states\n    T = obs_arr.shape[0] # length of the observation sequence\n\n    # Initialize the backward variables \u03b2\n    # \u03b2[t, i] = P(o_{t+1}, ..., o_{T-1} | q_t = i, \u03bb)\n    beta = np.zeros((T, N), dtype=float)\n    beta[T-1, :] = 1.0\n\n    # Recursively compute \u03b2 backwards from t = T-2 down to t = 0\n    for t in range(T-2, -1, -1):\n        # for each state i, \u03b2[t,i] = sum_j A[i,j] * B[j, o_{t+1}] * \u03b2[t+1, j]\n        weighted_next = B_arr[:, obs_arr[t+1]] * beta[t+1, :]\n        beta[t, :] = A_arr.dot(weighted_next)\n\n    # Finally, compute P(O | \u03bb) = sum_i \u03c0[i] * B[i, o_0] * \u03b2[0, i]\n    first_emit = B_arr[:, obs_arr[0]]\n    prob = np.dot(pi_arr * first_emit, beta[0, :])\n\n    # Round to six decimal places and return as native Python float\n    return float(round(prob, 6))\n```\n\nExplanation of the main steps:\n\n1. **Validation**: If any of the input lists (`A`, `B`, `pi`, or `obs`) is empty, return `0.0` immediately.\n2. **Initialization**:\n   - Convert the lists to NumPy arrays for vectorized computations.\n   - `N` is the number of hidden states.\n   - `T` is the length of the observation sequence.\n   - Create a `(T \u00d7 N)` array `beta` and set the last row `beta[T-1, :]` to 1.\n3. **Backward recursion**:\n   - For each time step `t` from `T-2` down to `0`, compute\n     ```\n     beta[t, i] = \u2211_j A[i, j] * B[j, o_{t+1}] * beta[t+1, j].\n     ```\n   - This is done efficiently with a matrix\u2013vector product.\n4. **Termination**:\n   - Compute the total probability\n     ```\n     P(O | \u03bb) = \u2211_i \u03c0[i] * B[i, o_0] * beta[0, i].\n     ```\n5. **Rounding**: Return the result rounded to six decimal places.\n\nThis function runs in O(N\u00b2T) time, which is the standard complexity for the backward procedure in HMMs."}
{"task_id": 67, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import accumulate\n\ndef gen_hmm_data(\n    S: list[float],\n    A: list[list[float]],\n    B: list[list[float]],\n    n_sample: int,\n    seed: int | None = None,\n) -> tuple[list[int], list[int]] | int:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function returns -1.\n    \"\"\"\n    # 1. Basic checks\n    if n_sample < 1:\n        return -1\n\n    N = len(S)\n    if N == 0:\n        return -1\n\n    # Check A dimensions\n    if any(len(row) != N for row in A):\n        return -1\n\n    # Check B dimensions and infer M\n    if len(B) != N:\n        return -1\n    M = len(B[0])\n    if M == 0:\n        return -1\n    if any(len(row) != M for row in B):\n        return -1\n\n    # 2. Validate that S, each row of A, each row of B sums to 1 within tolerance\n    tol = 1e-8\n    def valid_dist(vec: list[float]) -> bool:\n        s = sum(vec)\n        return abs(s - 1.0) <= tol\n\n    if not valid_dist(S):\n        return -1\n    for row in A:\n        if not valid_dist(row):\n            return -1\n    for row in B:\n        if not valid_dist(row):\n            return -1\n\n    # 3. Set seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Helper to sample from a discrete distribution given as a list\n    def sample_discrete(probs: list[float]) -> int:\n        # build cumulative distribution\n        cdf = list(accumulate(probs))\n        r = np.random.rand()\n        for idx, threshold in enumerate(cdf):\n            if r < threshold:\n                return idx\n        # fallback due to floating\u2010point\n        return len(probs) - 1\n\n    # 4. Generate samples\n    states: list[int] = []\n    observations: list[int] = []\n\n    # initial state\n    curr_state = sample_discrete(S)\n    states.append(curr_state)\n    # initial observation\n    observations.append(sample_discrete(B[curr_state]))\n\n    # subsequent samples\n    for _ in range(1, n_sample):\n        # transition\n        curr_state = sample_discrete(A[curr_state])\n        states.append(curr_state)\n        # emission\n        observations.append(sample_discrete(B[curr_state]))\n\n    return states, observations\n```\n\nExplanation of key steps:\n\n1. **Validation**  \n   - Verify `n_sample \u2265 1`.  \n   - Check dimensions of `A` (must be N\u00d7N) and `B` (must be N\u00d7M).  \n   - Ensure each probability vector (the initial distribution `S`, each row of `A`, each row of `B`) sums to 1 within a tolerance of 1e-8.\n\n2. **Seeding**  \n   If a `seed` is provided, we call `np.random.seed(seed)` to make sampling reproducible.\n\n3. **Sampling**  \n   We implement a helper `sample_discrete` that:\n   - Builds the cumulative distribution (CDF) from the probability list.\n   - Draws a uniform random float `r` in [0,1).\n   - Finds the smallest index where `r` is less than the CDF value, returning that index.\n   - A final fallback to the last index accounts for any floating\u2010point rounding.\n\n4. **Sequence Generation**  \n   - Draw the first hidden state from `S`.  \n   - Emit an observation from `B[current_state]`.  \n   - For each of the remaining `n_sample - 1` steps: transition from the current state via `A[current_state]`, then emit from `B[current_state]`.  \n\nIf at any point the input distributions are invalid, the function immediately returns `-1`. Otherwise it returns the tuple `(states, observations)`, each a list of length `n_sample` containing 0\u2010based indices."}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_momentum_update(\n    w: np.ndarray,\n    grad: np.ndarray,\n    learning_rate: float = 0.01,\n    momentum: float = 0.0,\n    prev_update: np.ndarray | None = None\n) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    # Initialize previous update if not provided\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    # Compute new velocity (momentum update)\n    new_update = momentum * prev_update + (1.0 - momentum) * grad\n    # Update parameters by stepping against the velocity\n    updated_w = w - learning_rate * new_update\n    # Round to 4 decimal places and convert to Python lists\n    updated_w_list = np.round(updated_w, 4).tolist()\n    new_update_list = np.round(new_update, 4).tolist()\n    return updated_w_list, new_update_list\n```\n\nExplanation of key steps:\n- If `prev_update` is `None`, we substitute it with a zero array matching the shape of `w`.\n- We calculate the new velocity (`new_update`) by combining the old velocity with the current gradient, weighted by the momentum factor.\n- We then adjust the parameters `w` by stepping in the opposite direction of this velocity, scaled by the learning rate.\n- Finally, we round each element of both resulting arrays to 4 decimal places and convert them into native Python lists for the return."}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # 1. Validate that S, A, B are non-empty and have compatible dimensions\n    if not isinstance(S, list) or not isinstance(A, list) or not isinstance(B, list):\n        return -1.0\n\n    n = len(S)\n    if n == 0 or len(A) != n or len(B) != n:\n        return -1.0\n\n    # A must be n x n\n    for row in A:\n        if not isinstance(row, list) or len(row) != n:\n            return -1.0\n\n    # B must be n x m for some m >= 1\n    m = None\n    for row in B:\n        if not isinstance(row, list):\n            return -1.0\n        if m is None:\n            m = len(row)\n            if m == 0:\n                return -1.0\n        elif len(row) != m:\n            return -1.0\n\n    # 2. Check that observations is non-empty and each index is in [0, m-1]\n    if not isinstance(observations, list) or len(observations) == 0:\n        return -1.0\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1.0\n\n    # Convert to numpy arrays for vectorized operations\n    S_arr = np.array(S, dtype=float)         # shape (n,)\n    A_arr = np.array(A, dtype=float)         # shape (n, n)\n    B_arr = np.array(B, dtype=float)         # shape (n, m)\n\n    # 3. Initialize forward probabilities (alpha) at time 0\n    t0 = observations[0]\n    alpha = S_arr * B_arr[:, t0]             # shape (n,)\n\n    # 4. Recursively compute alpha for t = 1 ... T-1\n    for t in observations[1:]:\n        # alpha_new[j] = [ sum_i alpha[i] * A[i, j] ] * B[j, t]\n        alpha = np.dot(alpha, A_arr) * B_arr[:, t]\n\n    # 5. Termination: sum of alpha over all states\n    prob = alpha.sum()\n\n    # Round to 4 decimal places\n    return round(prob, 4)\n```\n\nExplanation of key steps:\n\n1. **Validation**  \n   - Ensure `S`, `A`, `B` are lists and non\u2010empty.  \n   - Check `A` is n\u00d7n and `B` is n\u00d7m for some m\u22651.  \n   - Ensure the observation sequence is non\u2010empty and each index falls in [0, m\u22121].  \n   - On any failure, return \u22121.0.\n\n2. **Initialization**  \n   - Convert lists to numpy arrays.  \n   - Set `alpha[i] = S[i] * B[i, observations[0]]`.\n\n3. **Induction**  \n   - For each new observation `t`, update  \n     `alpha = (alpha @ A) * B[:, t]`.\n\n4. **Termination**  \n   - The total likelihood is `sum(alpha)`; round to four decimal places.\n\nThis implementation runs in O(T\u00b7n\u00b2) time where T = len(observations)."}
{"task_id": 70, "completion_id": 0, "completion": "from collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # FP-tree node\n    class FPNode:\n        __slots__ = ('name', 'count', 'parent', 'children', 'link')\n        def __init__(self, name, parent):\n            self.name = name\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n    def update_header(item, node, header_table):\n        # link new node into header table\n        head = header_table[item][1]\n        if head is None:\n            header_table[item][1] = node\n        else:\n            while head.link:\n                head = head.link\n            head.link = node\n\n    def insert_tree(items, node, header_table, count=1):\n        if not items:\n            return\n        first = items[0]\n        # add or update child\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = FPNode(first, node)\n            child.count = count\n            node.children[first] = child\n            update_header(first, child, header_table)\n        # recurse\n        insert_tree(items[1:], child, header_table, count)\n\n    # 1. Count frequency of single items\n    freq = Counter()\n    for tran in transactions:\n        freq.update(tran)\n    # filter infrequent\n    freq = {item: cnt for item, cnt in freq.items() if cnt >= min_support}\n    if not freq:\n        return []\n    # sort frequent items by descending freq, then lex\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    # order map for transaction sorting\n    def sort_key(x):\n        return (-freq[x], x)\n    # build initial header table: item -> [support, head_of_node_link]\n    header_table = {item: [freq[item], None] for item, _ in sorted_items}\n    # build the main FP-tree\n    root = FPNode(None, None)\n    for tran in transactions:\n        # filter and sort\n        filtered = [i for i in tran if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=sort_key)\n        insert_tree(ordered, root, header_table)\n\n    frequent_itemsets = []\n\n    def mine_tree(header, prefix):\n        # items in header sorted lexicographically for deterministic order\n        for item in sorted(header.keys()):\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix.copy())\n            # build conditional pattern base\n            conditional_patterns = []\n            node = header[item][1]\n            while node:\n                count = node.count\n                path = []\n                parent = node.parent\n                while parent and parent.name is not None:\n                    path.append(parent.name)\n                    parent = parent.parent\n                if path:\n                    conditional_patterns.append((path[::-1], count))\n                node = node.link\n            # count freq in conditional base\n            cpb_freq = Counter()\n            for path, cnt in conditional_patterns:\n                for itm in path:\n                    cpb_freq[itm] += cnt\n            # filter by min_support\n            cond_items = {i for i, c in cpb_freq.items() if c >= min_support}\n            if not cond_items:\n                continue\n            # build conditional header table\n            # sort by descending cpb freq then lex\n            sorted_c = sorted(cond_items, key=lambda x: (-cpb_freq[x], x))\n            cond_header = {i: [cpb_freq[i], None] for i in sorted_c}\n            # build conditional FP-tree\n            cond_root = FPNode(None, None)\n            for path, cnt in conditional_patterns:\n                filtered_path = [i for i in path if i in cond_items]\n                if not filtered_path:\n                    continue\n                ordered_path = sorted(filtered_path, key=lambda x: (-cpb_freq[x], x))\n                insert_tree(ordered_path, cond_root, cond_header, cnt)\n            # recurse\n            mine_tree(cond_header, new_prefix)\n\n    mine_tree(header_table, [])\n\n    # sort items within each itemset (they already are), then sort all itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 71, "completion_id": 0, "completion": "```python\ndef label_uniq_cnt(data: list[list]) -> dict:\n   Count the occurrence of each label in a tabular data set.\n\n    Each sample in *data* is a list whose last element represents the\n    class label.  The function must return a dictionary mapping every\n    unique label to the number of times it appears in the data set.\n\n    Args:\n        data: List of samples (list of lists).  The last element of each\n              inner list is treated as the label.\n\n    Returns:\n        A dictionary where keys are unique labels and values are their\n        integer counts.  If *data* is empty an empty dictionary is\n        returned.\n       counts: dict = {}\n    for sample in data:\n        # Assumes each sample is a non-empty list\n        label = sample[-1]\n        counts[label] = counts.get(label, 0) + 1\n    return counts\n```\n\nExample usage:\n\n```python\ndata = [\n    [5.1, 3.5, 1.4, 0.2,setosa    [4.9, 3.0, 1.4, 0.2,setosa    [6.7, 3.1, 4.7, 1.5,versicolor    [5.6, 2.8, 4.9, 2.0,virginica    [6.3, 3.3, 6.0, 2.5,virginica]\n\nprint(label_uniq_cnt(data))\n# Output: {'setosa': 2, 'versicolor': 1, 'virginica': 2}\n```"}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef variance_reduction(y: np.ndarray, \n                       y_left: np.ndarray, \n                       y_right: np.ndarray) -> float:\n    \"\"\"\n    Compute the variance reduction achieved by splitting the parent node's\n    target values `y` into `y_left` and `y_right` in a regression tree.\n\n    Variance reduction VR is defined as:\n        VR = Var(y) \n             - (n_left / n) * Var(y_left) \n             - (n_right / n) * Var(y_right)\n\n    Here, Var(\u00b7) is the population variance.  If the target is multi-dimensional,\n    variances are computed column\u2010wise and summed into a single scalar.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Target values at the parent node.  Shape (n,) or (n, d).\n    y_left : np.ndarray\n        Target values that would go to the left child.  Shape (n_left,) or (n_left, d).\n    y_right : np.ndarray\n        Target values that would go to the right child. Shape (n_right,) or (n_right, d).\n\n    Returns\n    -------\n    float\n        The variance reduction, rounded to 4 decimal places.\n    \"\"\"\n    # number of samples\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n\n    # compute population variances\n    # np.var defaults to ddof=0 (population variance).\n    # axis=0 computes variance column-wise; for 1D arrays it returns a scalar.\n    var_parent = np.var(y, axis=0)\n    var_left   = np.var(y_left, axis=0)\n    var_right  = np.var(y_right, axis=0)\n\n    # sum over features (works whether var_* is scalar or array)\n    total_var_parent = np.sum(var_parent)\n    total_var_left   = np.sum(var_left)\n    total_var_right  = np.sum(var_right)\n\n    # variance reduction formula\n    vr = ( total_var_parent\n           - (n_left  / n) * total_var_left\n           - (n_right / n) * total_var_right )\n\n    # round to nearest 4th decimal and return as Python float\n    return round(vr, 4)\n```\n\nExplanation of key steps:\n\n1. We use `np.var(..., axis=0)` which by default computes the *population* variance (ddof=0).\n2. For multi-dimensional targets, `np.var(axis=0)` returns variances for each column; we then sum them to get a single scalar variance.\n3. We apply the variance reduction formula directly.\n4. Finally, we round the result to 4 decimal places as required."}
{"task_id": 74, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef magnitude_spectrum(frames:np.ndarray ->list[list[float]]   Compute the positive-frequency magnitude spectrum for each frame.\n\n    Parameters\n    ----------\n    frames : numpy.ndarray\n        Either a 2-D array of shape (M, N) where each row is a frame, or a\n        1-D array treated as a single frame of length N.\n\n    Returns\n    -------\n    list[list[float]]\n        The magnitude spectrum of every frame, rounded to four decimals.\n       # Ensure frames is at least 2D: (M, N)\n    frames = np.asarray(frames)\n    if frames.ndim == 1:\n        frames = frames[np.newaxis, :]\n    elif frames.ndim != 2:\n        raise ValueErrorInput must be a 1D or 2D numpy array    # Compute the positive-frequency FFT for each row (frame)\n    spec = np.fft.rfft(frames, axis=1)\n\n    # Magnitude and rounding\n    mag = np.abs(spec)\n    mag_rounded = np.round(mag, 4)\n\n    # Convert to nested lists\n    return mag_rounded.tolist()\n```\n\nExplanation of key steps:\n- We first normalize the input so that `frames` is always a 2D array of shape `(M, N)`.\n- We use `np.fft.rfft` along the last axis to get only the non-redundant positive-frequency bins.\n- We take the absolute value to get the magnitude spectrum.\n- We round each value to 4 decimal places with `np.round(..., 4)`.\n- Finally, we convert the NumPy array to a nested list with `.tolist()`."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list[int],\n                X_test: list[list[float]],\n                k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Number of training samples\n    n_train = len(X_train)\n    \n    # Validate k\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return -1\n\n    # Convert to numpy arrays for vectorized distance computation\n    X_train_arr = np.array(X_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n\n    predictions = []\n    # For each test point, compute distances to all train points\n    for x in X_test_arr:\n        # squared Euclidean distances (no need for sqrt)\n        dists = np.sum((X_train_arr - x) ** 2, axis=1)\n        # indices of the k nearest neighbors\n        neigh_idx = np.argsort(dists)[:k]\n        neigh_labels = y_train_arr[neigh_idx].tolist()\n        \n        # majority vote\n        vote_counts = Counter(neigh_labels)\n        max_votes = max(vote_counts.values())\n        # get all labels with max_votes, pick the smallest label on ties\n        tied_labels = [lbl for lbl, cnt in vote_counts.items() if cnt == max_votes]\n        prediction = min(tied_labels)\n        \n        predictions.append(int(prediction))\n\n    return predictions\n```\n\nExplanation of key steps:\n1. Validate `k`: it must be an integer between 1 and `len(X_train)`. Otherwise return `-1`.  \n2. Convert inputs to NumPy arrays for efficient distance computation.  \n3. For each test sample, compute squared Euclidean distances to all training samples.  \n4. Sort distances, pick the indices of the `k` smallest.  \n5. Take a majority vote among the `k` neighbors, and in case of a tie choose the smallest class label.  \n6. Collect and return the predictions as a plain Python list of integers."}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays of dtype float64\n    y = np.array(y, dtype=np.float64)\n    y_pred = np.array(y_pred, dtype=np.float64)\n\n    # Machine epsilon for float64 to avoid log(0)\n    eps = np.finfo(np.float64).eps\n\n    # Compute the elementwise log (with eps for numerical stability)\n    log_preds = np.log(y_pred + eps)\n\n    # Compute the unnormalised cross-entropy: -sum(y * log(y_pred + eps))\n    loss = -np.sum(y * log_preds)\n\n    # Round to 4 decimal places and return as Python float\n    return float(np.round(loss, 4))\n```\n\nExplanation of the steps:\n1. We first cast both `y` and `y_pred` to NumPy arrays of a floating type.\n2. We obtain machine epsilon (`eps`) for float64 to ensure `log(0)` is never evaluated.\n3. We compute `log(y_pred + eps)` element\u2010wise.\n4. We multiply by the one\u2010hot labels `y` and sum over all samples and classes, then negate to get the cross\u2010entropy.\n5. Finally, we round the result to 4 decimal places and return it as a native Python `float`."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[list[float]], list]\n        A tuple (AL, caches), where\n        - AL is the final activation rounded to 4 decimals and converted to a \n          plain Python list of shape (1, m).\n        - caches is a list of caches for each layer (for backprop).\n    \"\"\"\n    def sigmoid(Z: np.ndarray) -> np.ndarray:\n        return 1 / (1 + np.exp(-Z))\n\n    def relu(Z: np.ndarray) -> np.ndarray:\n        return np.maximum(0, Z)\n\n    caches = []\n    A = X\n    # number of layers L inferred from parameters dictionary\n    L = len(parameters) // 2  # assumes keys are W1...WL, b1...bL\n\n    # Forward pass through layers 1 to L-1 with ReLU activation\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f\"W{l}\"]\n        b = parameters[f\"b{l}\"]\n        Z = W.dot(A_prev) + b\n        A = relu(Z)\n        # Cache the linear and activation values for backprop\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        caches.append((linear_cache, activation_cache))\n\n    # Final layer L with sigmoid activation\n    W = parameters[f\"W{L}\"]\n    b = parameters[f\"b{L}\"]\n    ZL = W.dot(A) + b\n    AL = sigmoid(ZL)\n    linear_cache = (A, W, b)\n    activation_cache = ZL\n    caches.append((linear_cache, activation_cache))\n\n    # Round AL to 4 decimals and convert to plain Python list\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\nExplanation of the main steps:\n\n1. We infer the number of layers `L` from the size of the `parameters` dictionary.\n2. We loop from layer 1 to layer L\u22121, performing:\n   - Linear step: `Z = W\u00b7A_prev + b`\n   - ReLU activation: `A = relu(Z)`\n   - Store `(A_prev, W, b)` and `Z` in `caches`.\n3. For the final layer L, we use a sigmoid activation:\n   - `ZL = WL\u00b7A_(L\u22121) + bL`\n   - `AL = sigmoid(ZL)`\n   - Cache the final layer\u2019s linear and activation values.\n4. We round `AL` to 4 decimal places and convert it to a native Python list of lists before returning it, along with the `caches`."}
{"task_id": 78, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adamax_step(params: list[float],\n                grads:  list[float],\n                m:      list[float],\n                u:      list[float],\n                t:      int,\n                learning_rate: float = 0.002,\n                beta1:         float = 0.9,\n                beta2:         float = 0.999,\n                epsilon:       float = 1e-8) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    arr_params = np.array(params, dtype=float)\n    arr_grads  = np.array(grads,  dtype=float)\n    arr_m      = np.array(m,      dtype=float)\n    arr_u      = np.array(u,      dtype=float)\n\n    # 1) Update biased first moment estimate\n    m_t = beta1 * arr_m + (1 - beta1) * arr_grads\n\n    # 2) Update the exponentially weighted infinity norm\n    u_t = np.maximum(beta2 * arr_u, np.abs(arr_grads))\n\n    # 3) Compute bias-corrected stepsize and parameter update\n    bias_correction = 1 - beta1**t\n    step = (learning_rate / bias_correction) * (m_t / (u_t + epsilon))\n\n    # 4) Update parameters\n    params_t = arr_params - step\n\n    # 5) Increment time step\n    new_t = t + 1\n\n    # Round all arrays to 6 decimal places and convert back to lists\n    new_params = np.round(params_t, 6).tolist()\n    new_m      = np.round(m_t,      6).tolist()\n    new_u      = np.round(u_t,      6).tolist()\n\n    return new_params, new_m, new_u, new_t\n```\n\nExplanation of key steps:\n1. Convert inputs into NumPy arrays for element-wise operations.  \n2. Compute the new first moment `m_t`.  \n3. Compute the exponentially weighted infinity norm `u_t`.  \n4. Apply the bias correction for `m_t` based on the current time step `t`.  \n5. Calculate the parameter update `step` and subtract it from the parameters.  \n6. Increment the time step and round all floating-point results to six decimals before returning."}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adadelta_update(w: list[float] | np.ndarray,\n                    grad_w: list[float] | np.ndarray,\n                    rho: float = 0.95,\n                    eps: float = 1e-6) -> list[float]:\n   Perform **one** Adadelta optimisation step.\n\n    The function assumes that it is the very first update so the two running\n    averages (squared gradients and squared updates) are still zeros.  It must\n    therefore implement the mathematical rules of Adadelta and finally return\n    the updated weight vector rounded to 4 decimal places as a regular Python\n    list.\n\n    Args:\n        w:      Current weights (list or NumPy array of any shape).\n        grad_w: Corresponding gradient \u2013 same shape as *w*.\n        rho:    Decay coefficient used by Adadelta (default 0.95).\n        eps:    Small constant to avoid division by zero (default 1e-6).\n\n    Returns:\n        List[float]: weights after one Adadelta update (rounded to 4 decimals).\n       # Convert inputs to NumPy arrays (float type)\n    w_arr    = np.array(w, dtype=float)\n    grad_arr = np.array(grad_w, dtype=float)\n\n    # Since this is the first step, E_grad and E_delta start at zero:\n    # E_grad_new = rho * 0 + (1 - rho) * grad^2 = (1 - rho) * grad^2\n    E_grad_new = (1.0 - rho) * (grad_arr ** 2)\n\n    # RMS of gradient and of previous updates (initially zero):\n    RMS_grad  = np.sqrt(E_grad_new + eps)\n    RMS_delta = np.sqrt(eps)\n\n    # Compute the element\u2010wise adaptive learning rate\n    adaptive_lr = RMS_delta / RMS_grad\n\n    # Parameter update \u0394w\n    delta_w = adaptive_lr * grad_arr\n\n    # New weights\n    w_new = w_arr - delta_w\n\n    # Round to 4 decimals and convert to a regular Python list\n    return np.round(w_new, 4).tolist()\n```\n\nExplanation of key steps:\n\n1. Initialize both running averages to zero (since it's the first step).\n2. Update the squared\u2010gradient average:\n   E_grad_new = (1 \u2013 \u03c1) \u00b7 grad\u00b2.\n3. Compute RMS terms:\n   RMS_grad = \u221a(E_grad_new + \u03b5),\u2003RMS_delta = \u221a(\u03b5).\n4. Calculate \u0394w = (RMS_delta / RMS_grad) \u00b7 grad.\n5. Update weights: w_new = w \u2013 \u0394w.\n6. Round results to 4 decimal places and return as a standard Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as A2.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip A2 to avoid log(0)\n    eps = 1e-15\n    A2_clipped = np.clip(A2, eps, 1 - eps)\n    \n    # Flatten to 1D arrays\n    A2_flat = A2_clipped.reshape(-1)\n    Y_flat = Y.reshape(-1)\n    \n    # Number of examples\n    m = Y_flat.shape[0]\n    \n    # Compute cost\n    cost = - (1.0 / m) * np.sum(\n        Y_flat * np.log(A2_flat) +\n        (1 - Y_flat) * np.log(1 - A2_flat)\n    )\n    \n    # Round to six decimal places and return as a Python float\n    return round(cost, 6)\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list contains the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert to 1D numpy array of floats\n    arr = np.array(Q, dtype=float).ravel()\n    n = arr.size\n\n    # Quick checks\n    if n == 0:\n        return []  # no actions -> empty list\n    if not (0.0 <= epsilon <= 1.0):\n        raise ValueError(\"epsilon must be in [0, 1]\")\n\n    # Compute base probability for all actions\n    base = epsilon / n\n\n    # Identify the first (smallest index) greedy action\n    greedy_idx = int(np.argmax(arr))\n\n    # Assign base probability to all, then add the extra mass to the greedy\n    probs = np.full(n, base, dtype=float)\n    probs[greedy_idx] += (1.0 - epsilon)\n\n    # Round to 4 decimals\n    rounded = np.round(probs, 4)\n\n    # Fix any tiny rounding drift so sum == 1 within 1e-12\n    total = rounded.sum()\n    drift = 1.0 - total\n    if abs(drift) > 1e-12:\n        # drift should be a multiple of 1e-4; add it back to the greedy action\n        rounded[greedy_idx] = round(rounded[greedy_idx] + drift, 4)\n\n    # Final check\n    if not np.isclose(rounded.sum(), 1.0, atol=1e-12):\n        raise RuntimeError(f\"Probabilities sum to {rounded.sum()}, not 1\")\n\n    return rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. Convert `Q` to a flat NumPy array so we can leverage vector operations.\n2. Check that `epsilon` is in [0, 1] and handle the corner case of no actions.\n3. Compute the \u201cbase\u201d probability `\u03b5/n` for every action.\n4. Find the first greedy action (`argmax`) and add the extra mass \\(1\u2212\u03b5\\) to its probability.\n5. Round all probabilities to 4 decimal places.\n6. Because rounding can introduce a tiny sum\u2010to\u20101 drift (e.g. 0.9999 or 1.0001), we compute the drift and patch it back into the greedy action. This ensures the final probabilities still sum to exactly 1 (within 1\u00d710\u207b\u00b9\u00b2) and remain at 4\u2010decimal precision."}
{"task_id": 84, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    # Compute residuals\n    residuals = y - y_pred\n\n    # Numerator and denominator of the closed\u2010form solution\n    num = np.sum(residuals * h_pred)\n    den = np.sum(h_pred ** 2)\n\n    # If denominator is zero (all h_pred == 0), return 1.0 by convention\n    if np.isclose(den, 0.0):\n        return 1.0\n\n    gamma = num / den\n\n    # Round to 4 decimal places and return\n    return round(float(gamma), 4)\n```"}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax_regression_step(X: np.ndarray,\n                            Y: np.ndarray,\n                            W: np.ndarray,\n                            lr: float) -> list[list[float]]:\n   One gradient-descent step for Softmax regression using cross-entropy loss.\n\n    Parameters\n    ----------\n    X : np.ndarray of shape (N, D)\n        Training samples.\n    Y : np.ndarray of shape (N, C)\n        One-hot encoded labels.\n    W : np.ndarray of shape (D, C)\n        Current weights.\n    lr : float\n        Learning rate.\n\n    Returns\n    -------\n    list[list[float]]\n        Updated weight matrix (D x C), each entry rounded to 4 decimal places.\n       # If learning rate is zero or X is all zeros, return W unchanged (but rounded).\n    if lr == 0 or np.all(X == 0):\n        return np.round(W, 4).tolist()\n\n    N = X.shape[0]\n\n    # 1) Compute logits Z = X @ W\n    Z = X.dot(W)  # shape (N, C)\n\n    # 2) Softmax (row-wise), with numeric stability\n    Z_max = np.max(Z, axis=1, keepdims=True)        # shape (N, 1)\n    exp_shifted = np.exp(Z - Z_max)                  # shape (N, C)\n    sum_exp = np.sum(exp_shifted, axis=1, keepdims=True)  # shape (N, 1)\n    Y_hat = exp_shifted / sum_exp                    # shape (N, C)\n\n    # 3) Gradient of average cross-entropy w.r.t. W\n    #    grad = (X^T @ (Y_hat - Y)) / N\n    grad = X.T.dot(Y_hat - Y) / N                    # shape (D, C)\n\n    # 4) Gradient descent update\n    W_new = W - lr * grad                            # shape (D, C)\n\n    # Round to 4 decimal places and convert to Python list\n    W_new_rounded = np.round(W_new, 4)\n    return W_new_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Edge cases**  \n   If `lr == 0` or all entries of `X` are zero, no update is performed and the original `W` is returned (after rounding).\n\n2. **Logits**  \n   We compute `Z = X @ W`.\n\n3. **Numerically stable softmax**  \n   We subtract each row\u2019s maximum before exponentiating to avoid overflow:\n   ```\n   Z_max = max(Z, axis=1, keepdims=True)\n   exp_shifted = exp(Z - Z_max)\n   Y_hat = exp_shifted / sum(exp_shifted, axis=1, keepdims=True)\n   ```\n\n4. **Gradient**  \n   For the average cross\u2010entropy loss,  \n   ```\n   grad = (X^T @ (Y_hat - Y)) / N\n   ```\n\n5. **Update**  \n   ```\n   W_new = W - lr * grad\n   ```\n\n6. **Return format**  \n   We round each entry of `W_new` to 4 decimal places via `np.round(..., 4)`, then call `.tolist()` to produce a `list[list[float]]`."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Any, List, Union\n\ndef aggregate_random_forest_votes(\n    predictions: List[List[Union[int, float, str]]]\n) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # If there are no trees or no samples, return an empty list\n    if not predictions or not predictions[0]:\n        return []\n\n    # Transpose so that each tuple in `columns` is the list of votes for one sample\n    columns = zip(*predictions)\n\n    final_predictions: List[Any] = []\n    for votes in columns:\n        # Count how many times each label was predicted\n        cnt = Counter(votes)\n        # Find the highest vote count\n        max_votes = max(cnt.values())\n        # Collect all labels that tied for the top vote count\n        tied_labels = [label for label, v in cnt.items() if v == max_votes]\n        # Break ties by choosing the smallest label (numeric or lexicographic)\n        winner = min(tied_labels)\n        final_predictions.append(winner)\n\n    return final_predictions\n```\n\nExplanation of key steps:\n1. We check for edge cases\u2014if there are no trees or no samples, we return an empty list.\n2. We use `zip(*predictions)` to iterate column-wise across the 2D list; each `votes` tuple holds all tree predictions for one sample.\n3. We build a `Counter` of those votes, find the maximum vote count, and gather all labels that share that top count.\n4. We break any ties by selecting the smallest label (Python\u2019s built-in `min` will do numeric comparison for numbers and lexicographic for strings).\n5. We collect and return all sample\u2010wise winners in a single list."}
{"task_id": 87, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    # number of input features\n    n_x = X.shape[0]\n    # fixed size for the hidden layer\n    n_h = 10\n    # number of output units\n    n_y = Y.shape[0]\n\n    return n_x, n_h, n_y\n```\n\nExplanation:\n- `X.shape[0]` gives the number of rows in `X`, i.e., the number of input features \\(n_x\\).\n- `n_h` is hard-coded to 10 per the task specification.\n- `Y.shape[0]` gives the number of rows in `Y`, i.e., the number of output units \\(n_y\\)."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses numpy.logaddexp to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape\n        but is converted to a pure Python list. For scalar inputs a single\n        float is returned.\n    \"\"\"\n    # Convert input to a NumPy array (or 0-d array for scalars)\n    arr = np.asarray(z, dtype=float)\n\n    # Compute softplus via the numerically stable identity\n    y = np.logaddexp(0.0, arr)\n\n    # Round to 4 decimal places\n    y_rounded = np.round(y, 4)\n\n    # If the result is 0-D (scalar), return a Python float\n    if y_rounded.ndim == 0:\n        return float(y_rounded)\n\n    # Otherwise convert to a nested Python list\n    return y_rounded.tolist()\n```\n\nExample usage:\n\n```python\nimport numpy as np\n\nprint(softplus(-1000))             # 0.0\nprint(softplus(0))                 # 0.6931\nprint(softplus([0, 1, 10]))        # [0.6931, 1.3133, 10.0000]\nprint(softplus(np.array([-1000, 0, 3])))  # [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 89, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef linear_activation_forward(A_prev: np.ndarray,\n                              W: np.ndarray,\n                              b: np.ndarray,\n                              activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    # Linear step: Z = W\u00b7A_prev + b\n    Z = W.dot(A_prev) + b\n\n    # Activation step:\n    if activation == \"sigmoid\":\n        A = 1 / (1 + np.exp(-Z))\n    elif activation == \"relu\":\n        A = np.maximum(0, Z)\n    else:\n        raise ValueError(f\"Unsupported activation: {activation}\")\n\n    # Ensure the output shape is correct\n    assert A.shape == (W.shape[0], A_prev.shape[1]), \\\n        f\"Shape mismatch: got {A.shape}, expected {(W.shape[0], A_prev.shape[1])}\"\n\n    # Prepare outputs\n    A_list = A.round(4).tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n\n    return A_list, cache\n```\n\nExplanation of the key steps:\n\n1. **Linear computation**:  \n   Z = W \u00b7 A_prev + b (with broadcasting of b across the m examples).\n\n2. **Nonlinear activation**:  \n   - Sigmoid:  \u03c3(Z) = 1 / (1 + exp(\u2212Z))  \n   - ReLU:    ReLU(Z) = max(0, Z)\n\n3. **Shape check**:  \n   We assert that the activation matrix A has shape `(n_l, m)` where `n_l = W.shape[0]` and `m = A_prev.shape[1]`.\n\n4. **Rounding & conversion**:  \n   We round A to 4 decimal places and convert it to a nested Python list via `A.round(4).tolist()`.\n\n5. **Caching**:  \n   We save `(A_prev, W, b)` as the linear cache and `Z` as the activation cache for later back-propagation."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # --- retrieve the policy's estimates ---\n    # try attribute-style\n    estimates = getattr(policy, 'ev_estimates', None)\n    # if not found or None, try dict-style\n    if estimates is None and isinstance(policy, dict):\n        estimates = policy.get('ev_estimates', None)\n\n    # if still missing or not a dict or empty, return nan\n    if not isinstance(estimates, dict) or len(estimates) == 0:\n        return np.nan\n\n    # --- retrieve the true arm expectations ---\n    arm_evs = getattr(bandit, 'arm_evs', None)\n    if arm_evs is None and isinstance(bandit, dict):\n        arm_evs = bandit.get('arm_evs', None)\n\n    # at this point we assume arm_evs is a sequence (list/tuple) of reals\n    # --- compute squared errors ---\n    se_sum = 0.0\n    count = 0\n    for arm_index in sorted(estimates.keys()):\n        # pull out the estimate and the true value\n        est = estimates[arm_index]\n        true = arm_evs[arm_index]\n        diff = est - true\n        se_sum += diff * diff\n        count += 1\n\n    # compute mean\n    mse_val = se_sum / count\n    # round to 4 decimal places\n    return round(mse_val, 4)\n```\n\nExplanation of key steps:\n1. We look for `ev_estimates` first via `getattr`, then (if needed) via dictionary lookup.\n2. If `ev_estimates` is missing, not a dict, or empty, we immediately return `np.nan`.\n3. We similarly obtain `arm_evs` from the bandit.\n4. We iterate over the sorted arm indices in the policy\u2019s estimates so that index _i_ aligns with `arm_evs[i]`.\n5. We accumulate squared errors, compute their average, and round the result to 4 decimal places."}
{"task_id": 91, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_backward(\n    dA: list[list[int | float]],\n    activation_cache: list[list[int | float]]\n) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    dA_np = np.array(dA)\n    Z_np = np.array(activation_cache)\n\n    # Check that the shapes match\n    if dA_np.shape != Z_np.shape:\n        return -1\n\n    # dZ = dA * 1(Z > 0)\n    dZ_np = dA_np * (Z_np > 0)\n\n    # Convert back to a list of lists\n    return dZ_np.tolist()\n```\n\nExplanation:\n1. We first wrap `dA` and `activation_cache` into NumPy arrays (`dA_np` and `Z_np`).\n2. We check if their shapes match; if not, we immediately return `-1`.\n3. We compute the element-wise product of the upstream gradient `dA_np` with the indicator `(Z_np > 0)`.\n4. Finally, we convert the resulting NumPy array back into a nested Python list using `.tolist()` and return it."}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport numbers\n\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and not isinstance(a, bool)\n```\n\nExample usage:\n\n```python\nfrom fractions import Fraction\nfrom decimal import Decimal\n\nprint(is_number(42))               # True (int)\nprint(is_number(3.14))             # True (float)\nprint(is_number(1 + 2j))           # True (complex)\nprint(is_number(Fraction(1, 3)))   # True (Fraction)\nprint(is_number(Decimal('2.7')))   # True (Decimal)\nprint(is_number(True))             # False (bool)\nprint(is_number(False))            # False (bool)\nprint(is_number(\"123\"))            # False (str)\nprint(is_number(None))             # False (NoneType)\n```\n"}
{"task_id": 93, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    # Convert input to a NumPy array\n    Z_arr = np.array(Z)\n    # Apply ReLU element-wise\n    A_arr = np.maximum(0, Z_arr)\n    # Return both A and the original Z as Python lists\n    return A_arr.tolist(), Z_arr.tolist()\n```\n\nExplanation:\n1. We first convert the input `Z` (which may be a scalar, list, nested list, etc.) into a NumPy array `Z_arr`.\n2. We compute the ReLU activation `A_arr` by taking `np.maximum(0, Z_arr)`, which keeps all non\u2010negative entries and zeros out the rest\u2014fully vectorized, no explicit loops.\n3. Finally, we call `.tolist()` on both `A_arr` and `Z_arr` so that the outputs are pure Python lists (or nested lists), making them JSON-serializable."}
{"task_id": 94, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    if not neighbors_targets:\n        raise ValueError(\"neighbors_targets must not be empty\")\n\n    # Count how many times each label appears\n    counts = Counter(neighbors_targets)\n    # Determine the highest frequency\n    max_count = max(counts.values())\n    # Collect all labels with that highest frequency\n    tied_labels = [label for label, cnt in counts.items() if cnt == max_count]\n    # Return the smallest label according to Python's default ordering\n    return min(tied_labels)\n```\n\nExplanation of steps:\n1. We build a `Counter` to tally occurrences of each label.\n2. We find the maximum count (the majority frequency).\n3. We gather all labels that achieve that frequency.\n4. We return the smallest label among those, relying on Python\u2019s default `<` ordering."}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive\u2010smoothed log\u2010probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1) Build vocabulary from corpus and add <UNK>\n    vocab = set()\n    for sent in corpus:\n        for w in sent.split():\n            vocab.add(w)\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n\n    # 2) Build n\u2010gram counts for n = 1..N\n    #    counters[n] will be a Counter over n\u2010gram tuples\n    counters = [Counter() for _ in range(N + 1)]\n    total_unigrams = 0\n    for sent in corpus:\n        tokens = sent.split()\n        total_unigrams += len(tokens)\n        for n in range(1, N + 1):\n            if len(tokens) < n:\n                continue\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i : i + n])\n                counters[n][ngram] += 1\n\n    # 3) Map sequence tokens to <UNK> if unseen\n    seq_tokens = sequence.split()\n    if len(seq_tokens) < N:\n        # no N-grams in the sequence\n        return 0.0\n\n    seq_mapped = [w if w in vocab else \"<UNK>\" for w in seq_tokens]\n\n    # 4) Compute smoothed log-probability\n    log_prob = 0.0\n    for i in range(N - 1, len(seq_mapped)):\n        # context is the preceding N-1 words (or empty tuple if N=1)\n        if N > 1:\n            context = tuple(seq_mapped[i - (N - 1) : i])\n        else:\n            context = ()\n        word = seq_mapped[i]\n        ngram = context + (word,)\n\n        count_ngram = counters[N].get(ngram, 0)\n        if N > 1:\n            count_context = counters[N - 1].get(context, 0)\n        else:\n            # for unigrams, the \"context count\" is total number of tokens\n            count_context = total_unigrams\n\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n\n    # 5) Round to 4 decimals and return\n    return round(log_prob, 4)\n```\n\nExplanation of key steps:\n1. We collect all tokens in the corpus to form our vocabulary, then explicitly add `\"<UNK>\"`.\n2. We build counters for 1-grams through N-grams using `collections.Counter`.\n3. Any word in the target `sequence` not in the training vocabulary is mapped to `\"<UNK>\"`.\n4. We iterate over all contiguous N-grams of the (possibly remapped) sequence, compute the additive-smoothed probability  \n   P(w\u1d62 | context) = (count(context\u25e6w\u1d62) + K) / (count(context) + K\u00b7|V|),  \n   accumulate the natural log, and finally round to 4 decimal places.\n5. If the sequence is shorter than N, we return 0.0 as specified."}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    # Convert input to numpy array for vectorized comparison\n    Z_arr = np.array(Z)\n    # Derivative is 1.0 where Z > 0, else 0.0\n    dZ_arr = (Z_arr > 0).astype(float)\n    \n    # If the original input was a Python scalar, return a float\n    if isinstance(Z, (int, float)):\n        return float(dZ_arr)\n    \n    # Otherwise return a nested Python list with the same shape\n    return dZ_arr.tolist()\n```\n\nExplanation of the steps:\n1. We first wrap the input `Z` with `np.array(...)` so that we can do a single vectorized comparison `Z_arr > 0`.\n2. Converting that boolean mask to `float` yields an array of `0.0` and `1.0`.\n3. We detect a pure Python scalar by checking `isinstance(Z, (int, float))`; in that case we extract the single float and return it.\n4. For all other inputs (lists or `ndarray`), we convert the result back to a nested Python list with `.tolist()`."}
{"task_id": 99, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    # Case 1: NumPy array \u2192 vectorized clip\n    if isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    \n    # Case 2: Python list (1-D or 2-D) \u2192 convert to array, clip, convert back\n    elif isinstance(Z, list):\n        clipped = np.maximum(np.array(Z), 0)\n        return clipped.tolist()\n    \n    # Case 3: scalar (int or float, or other non-array types) \u2192 simple max\n    else:\n        try:\n            # Works for int, float, numpy scalar, etc.\n            return Z if Z > 0 else 0\n        except Exception:\n            # Fallback for any unexpected types\n            return np.maximum(Z, 0)\n```\n\nExplanation of the branches:\n\n1. **NumPy array**: We directly call `np.maximum(Z, 0)` to keep it as an array.  \n2. **Python list**: We convert the list (or list-of-lists) to an array, apply `np.maximum`, then use `.tolist()` to restore the original list structure.  \n3. **Scalar**: We fall back to the built-in `>` comparison and return either `Z` or `0`, preserving the scalar type. If that comparison fails (rare), we again use `np.maximum`."}
{"task_id": 100, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual_arr = np.asarray(actual)\n    predicted_arr = np.asarray(predicted)\n\n    # Check for equal length\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n\n    total = actual_arr.size\n    # Handle empty input (no samples)\n    if total == 0:\n        return 0.0\n\n    # Count mismatches\n    mismatches = np.count_nonzero(actual_arr != predicted_arr)\n\n    # Compute error rate and round to 4 decimals\n    error_rate = mismatches / total\n    return float(round(error_rate, 4))\n```\n\nExample usage:\n\n```python\nimport numpy as np\n\nactual    = np.array([0, 1, 2, 2, 1])\npredicted = np.array([0, 0, 2, 1, 1])\n\nprint(classification_error(actual, predicted))  # Output: 0.4\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef softmax(x: np.ndarray, axis: int = 1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function reproduces the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output is converted\n    to a nested Python list and every probability is rounded to four decimals.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError(\"Cannot apply softmax to a tensor that is 1D\")\n\n    # 1) subtract the max for numerical stability\n    x_max = np.max(x, axis=axis, keepdims=True)\n    shifted = x - x_max\n\n    # 2) exponentiate\n    exp_shifted = np.exp(shifted)\n\n    # 3) normalize\n    sum_exp = np.sum(exp_shifted, axis=axis, keepdims=True)\n    soft = exp_shifted / sum_exp\n\n    # 4) round to 4 decimals and convert to Python list\n    soft_rounded = np.round(soft, 4)\n    return soft_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Dimensionality check**: We immediately raise a `ValueError` if `x.ndim == 1`, as softmax requires at least two dimensions in this specification.  \n2. **Numerical stability**: We subtract the maximum value along the specified axis (with `keepdims=True`) before exponentiating, which prevents overflow.  \n3. **Exponentiation and normalization**: We exponentiate the shifted tensor and divide by the sum of those exponentials along the same axis.  \n4. **Rounding and conversion**: We round every probability to four decimal places using `np.round(...)` and then call `.tolist()` to obtain pure Python nested lists."}
{"task_id": 102, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_regression_predict(x: list[float],\n                                  y: list[float],\n                                  degree: int,\n                                  x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places,\n        or -1 if the model cannot be fitted.\n    \"\"\"\n    # Validate inputs\n    if degree < 0:\n        return -1\n    if len(x) != len(y):\n        return -1\n    if len(x) == 0:\n        return -1\n    if len(x) < degree + 1:\n        return -1\n\n    # Convert to numpy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Build design matrix for training data: [1, x, x^2, ..., x^degree]\n    # Using increasing powers: columns are x^0, x^1, ..., x^degree\n    X = np.vander(x_arr, N=degree + 1, increasing=True)\n\n    # Solve for weights via least squares\n    # w has shape (degree+1,)\n    try:\n        w, *_ = np.linalg.lstsq(X, y_arr, rcond=None)\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Prepare design matrix for prediction points\n    x_pred_arr = np.array(x_pred, dtype=float)\n    X_pred = np.vander(x_pred_arr, N=degree + 1, increasing=True)\n\n    # Compute predictions\n    y_pred = X_pred @ w\n\n    # Round to 4 decimal places and return as a Python list\n    return np.round(y_pred, 4).tolist()\n```\n\nExplanation of key steps:\n\n1. **Input validation**  \n   We immediately return `-1` if:\n   - `degree` is negative  \n   - `x` and `y` have different lengths  \n   - there are no training samples  \n   - there are fewer samples than `degree + 1`\n\n2. **Design matrix construction**  \n   We use NumPy\u2019s `vander` with `increasing=True` to get columns `[x^0, x^1, \u2026, x^degree]`.\n\n3. **Least-squares solution**  \n   We call `np.linalg.lstsq` on the design matrix `X` and the target vector `y_arr`, which yields the weight vector `w` minimizing the ordinary least-squares error.\n\n4. **Prediction**  \n   We build the same polynomial features for `x_pred`, multiply by the learned weights `w`, round each result to 4 decimal places, and return a plain Python list."}
{"task_id": 104, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef information_gain(y: np.ndarray, splits: list[np.ndarray]) -> float:\n   Computes the information gain of a proposed split.\n\n    Args:\n        y: 1-D NumPy array containing the class labels of the parent node.\n        splits: List of 1-D NumPy arrays. Every array contains the labels that\n            fall into one child node produced by the split.\n\n    Returns:\n        Information gain rounded to 4 decimal places.\n       def entropy(labels: np.ndarray) -> float:\n       Compute the base-2 entropy of a 1-D array of labels        n = labels.size\n        if n == 0:\n            return 0.0\n        # get the counts of each unique label\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / n\n        # compute entropy\n        return -np.sum(probs * np.log2(probs))\n\n    # total entropy of the parent\n    parent_entropy = entropy(y)\n    n_total = y.size\n\n    # weighted sum of entropies of each split\n    weighted_child_entropy = 0.0\n    for subset in splits:\n        weight = subset.size / n_total\n        weighted_child_entropy += weight * entropy(subset)\n\n    ig = parent_entropy - weighted_child_entropy\n    # round to 4 decimal places before returning\n    return round(ig, 4)\n```\n\nExplanation of key steps:\n1. We define an inner `entropy` function that:\n   - Returns 0.0 if the input array is empty.\n   - Uses `np.unique` to get the counts of each label.\n   - Converts counts to probabilities and computes the base-2 entropy.\n2. We compute the parent node\u2019s entropy once.\n3. We iterate over each child-split array, compute its entropy, weight it by the fraction of samples it holds, and sum these weighted entropies.\n4. The information gain is the parent entropy minus the weighted child entropies, rounded to 4 decimal places."}
{"task_id": 105, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function returns -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    # 1. Validate sigma\n    if sigma <= 0:\n        return -1\n\n    # Convert input to a NumPy array (handles list, tuple, scalar, or np.ndarray)\n    x_arr = np.array(x, dtype=float)\n\n    # 2. Handle empty input\n    if x_arr.size == 0:\n        return []\n\n    # 3. Compute the Gaussian PDF\n    coeff = 1.0 / (sigma * np.sqrt(2 * np.pi))\n    exponent = -((x_arr - mean) ** 2) / (2 * sigma * sigma)\n    pdf_vals = coeff * np.exp(exponent)\n\n    # 4. Round to five decimal places and convert to a Python list\n    pdf_rounded = np.round(pdf_vals, 5)\n    return pdf_rounded.tolist()\n```\n\nExplanation of key steps:\n1. Check if `sigma` is positive; if not, immediately return `-1`.  \n2. Use `np.array` to unify input types (lists, tuples, scalars, or arrays) into a numeric array.  \n3. If the array is empty (`size == 0`), return an empty list.  \n4. Calculate the normalization coefficient `1/(\u03c3\u221a(2\u03c0))` and the exponent term.  \n5. Compute the PDF values, round each to five decimal places with `np.round`, and convert the result to a standard Python list."}
{"task_id": 107, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_step(theta: np.ndarray,\n              grad: np.ndarray,\n              m_prev: np.ndarray,\n              v_prev: np.ndarray,\n              t: int,\n              alpha: float = 0.01,\n              beta1: float = 0.9,\n              beta2: float = 0.99,\n              epsilon: float = 1e-9) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    # 1) Update biased first moment estimate\n    m_t = beta1 * m_prev + (1.0 - beta1) * grad\n    # 2) Update biased second moment estimate\n    v_t = beta2 * v_prev + (1.0 - beta2) * (grad * grad)\n    # 3) Compute bias-corrected first moment\n    m_hat = m_t / (1.0 - beta1**t)\n    # 4) Compute bias-corrected second moment\n    v_hat = v_t / (1.0 - beta2**t)\n    # 5) Parameter update\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    # 6) Round to 6 decimals\n    theta_new = np.round(theta_new, 6)\n    m_t = np.round(m_t, 6)\n    v_t = np.round(v_t, 6)\n    # 7) Convert to Python lists\n    theta_list = theta_new.tolist()\n    m_list = m_t.tolist()\n    v_list = v_t.tolist()\n    # 8) Increment time step\n    next_t = t + 1\n    return theta_list, m_list, v_list, next_t\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    # Ensure reproducibility\n    np.random.seed(0)\n    N, M = X.shape\n\n    # Initialize factor matrices\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n\n    # Pre-allocate identity\n    I_K = np.eye(K)\n\n    for iteration in range(max_iter):\n        # 1) Update W by solving: (H H^T + \u03b1 I) W^T = (H X^T)\n        A = H @ H.T + alpha * I_K            # K x K\n        V = X @ H.T                          # N x K\n        # Solve A (W_i)^T = V_i^T for each row i, vectorized:\n        W = np.linalg.solve(A, V.T).T        # (A is symmetric so .T not needed, but for shape)\n\n        # 2) Update H by solving: (W^T W + \u03b1 I) H = W^T X\n        B = W.T @ W + alpha * I_K            # K x K\n        U = W.T @ X                          # K x M\n        H = np.linalg.solve(B, U)            # K x M\n\n        # 3) Compute loss\n        X_hat = W @ H\n        recon_error = np.linalg.norm(X - X_hat, ord='fro')**2\n        reg = alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        loss = recon_error + reg\n\n        if loss < tol:\n            break\n\n    # Final reconstruction, rounded and converted to list of lists\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n```\n\nExplanation of key steps:\n\n1. We initialise `W` and `H` with a fixed random seed for deterministic results.\n2. In each ALS iteration:\n   - We keep `H` fixed and solve a regularised least\u2010squares problem for `W`.  Vectorised, this is solving `(H H\u1d40 + \u03b1I) W\u1d40 = (H X\u1d40)`.\n   - We then keep the new `W` fixed and solve similarly for `H`: `(W\u1d40 W + \u03b1I) H = W\u1d40 X`.\n3. After updating both, we compute the regularised Frobenius\u2010norm loss and stop early if it falls below `tol`.\n4. Finally, we return the reconstructed matrix `W @ H`, rounded to 4 decimals and cast to a Python list of lists."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n   Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n       # Set seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n    if K <= 0 or m == 0:\n        return []\n\n    # 1) K-Means++ initialization\n    # Choose the first centroid uniformly at random\n    first_idx = np.random.choice(m)\n    centroids = [X[first_idx].astype(float)]\n\n    # Initialize squared distances to the first centroid\n    diff = X - centroids[0]\n    dist_sq = np.sum(diff * diff, axis=1)\n\n    for _ in range(1, K):\n        # Avoid all-zero distances\n        total = dist_sq.sum()\n        if total <= 0.0:\n            # If all points coincide with centroids, pick random\n            next_idx = np.random.choice(m)\n        else:\n            # Probability proportional to distance squared\n            probs = dist_sq / total\n            next_idx = np.random.choice(m, p=probs)\n        new_cent = X[next_idx].astype(float)\n        centroids.append(new_cent)\n\n        # Update the distance-squared array\n        new_diff = X - new_cent\n        new_dist_sq = np.sum(new_diff * new_diff, axis=1)\n        dist_sq = np.minimum(dist_sq, new_dist_sq)\n\n    centroids = np.vstack(centroids)  # shape (K, n)\n\n    # 2) Lloyd's iterations\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iter):\n        # Assign step\n        # Compute squared distances from each point to each centroid\n        # shape (m, K)\n        dists = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        new_labels = np.argmin(dists, axis=1)\n\n        # Check for convergence\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update step\n        for k in range(K):\n            members = (labels == k)\n            if np.any(members):\n                centroids[k] = X[members].mean(axis=0)\n            # else: keep the centroid unchanged for empty clusters\n\n    # 3) Round to 4 decimals and sort\n    centroids = np.round(centroids, 4)\n    # Convert to list of lists\n    cent_list = [list(map(float, centroids[k])) for k in range(K)]\n    # Sort by full tuple (first coordinate primary, then tie-breakers)\n    cent_list_sorted = sorted(cent_list, key=lambda c: tuple(c))\n\n    return cent_list_sorted\n```"}
{"task_id": 111, "completion_id": 0, "completion": "import numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode each character in `text` into its integer token from `vocabulary`.\n    - Unknown characters \u2192 padding token 0.\n    - If text is shorter than time_steps, pad with 0s on the right.\n    - If text is longer, truncate to time_steps.\n    Returns a list of length exactly time_steps.\n    \"\"\"\n    # Initialize with padding tokens\n    encoded = [0] * time_steps\n    for i, ch in enumerate(text[:time_steps]):\n        encoded[i] = vocabulary.get(ch, 0)\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a sequence of integer token ids into a string using inverse_vocab.\n    - Skip any padding tokens (0).\n    - If an id is not found in inverse_vocab, skip it.\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx == 0:\n            continue\n        ch = inverse_vocab.get(int(idx))\n        if ch is not None:\n            chars.append(ch)\n    return \"\".join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    1) Encode `text` to integer sequence of length TIME_STEPS.\n    2) Run model.predict on batch of size 1.\n    3) Take argmax over last axis to get predicted ids per time step.\n    4) Decode the predicted ids back to a string.\n    Returns the decoded prediction.\n    \"\"\"\n    # 1) Encode input\n    seq_int = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # 2) Create batch shape (1, TIME_STEPS)\n    batch = np.array([seq_int], dtype=np.int32)\n    # 3) Predict: output shape assumed (1, TIME_STEPS, output_dim)\n    preds = model.predict(batch)\n    # 4) Argmax over the last axis \u2192 shape (1, TIME_STEPS)\n    pred_ids = np.argmax(preds, axis=-1)[0]\n    # 5) Decode to string\n    return int_to_string(pred_ids, inv_output_vocabulary)"}
{"task_id": 112, "completion_id": 0, "completion": "```python\nimport re\nfrom collections import Counter\n\nclass Token:\n    def __init__(self, word):\n        self.count = 0\n        self.word = word\n\n    def __repr__(self):\n        returnToken(word='{}', count={})format(self.word, self.count)\n\ndef tokenize_and_count(text: str) -> list[Token]:\n   Convert *text* into a list of Token objects with their frequencies.\n\n    Your task:\n      1. Treat only contiguous sequences of English letters (A\u2013Z, a\u2013z) as\n         words and ignore all other characters.\n      2. The comparison must be case-insensitive (e.g.,Cat ==cat      3. Return a list of Token instances where each instance's *word* field\n         is the lowercase word and *count* is its frequency in *text*.\n      4. Sort the list by descending frequency, then lexicographically.\n      5. Return an empty list when no words are present.\n\n    Args:\n        text: A raw input string.\n\n    Returns:\n        A list of sorted Token objects following the rules above.\n       # 1. Extract all contiguous alphabetic words\n    words = re.findall(r'[A-Za-z]+', text)\n    if not words:\n        return []\n\n    # 2. Normalize to lowercase\n    words_lower = [w.lower() for w in words]\n\n    # 3. Count frequencies\n    freq = Counter(words_lower)\n\n    # 4. Sort by descending frequency, then lexicographically\n    sorted_items = sorted(freq.items(), key=lambda item: (-item[1], item[0]))\n\n    # 5. Build Token objects\n    tokens = []\n    for word, count in sorted_items:\n        tok = Token(word)\n        tok.count = count\n        tokens.append(tok)\n\n    return tokens\n```\n\nExplanation of key steps:\n1. `re.findall(r'[A-Za-z]+', text)` pulls out only sequences of letters, discarding digits and punctuation.\n2. Converting to lowercase ensures case-insensitive comparison.\n3. `Counter` tallies word frequencies in one pass.\n4. The `sorted(..., key=lambda item: (-item[1], item[0]))` enforces descending count (`-item[1]`) and then ascending alphabetical order (`item[0]`).\n5. For each `(word, count)`, we instantiate a `Token`, set its `.count`, and collect it in the result list.\n\nIf no words are found, we immediately return an empty list."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If None, the function will use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Fallback to global EXAMPLES if none provided\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise NameError(\"Global EXAMPLES is not defined, and no examples were passed in.\")\n\n    predictions = []\n    for example in examples:\n        # run_example is assumed to be defined elsewhere in the environment\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        pred_str = \"\".join(output_chars)\n\n        # Print in the requested format\n        print(f\"input:  {example}\")\n        print(f\"output: {pred_str}\")\n\n        predictions.append(pred_str)\n\n    return predictions\n```\n\nExplanation of key points:\n- We give `examples` a default of `None`, and if it remains `None`, we attempt to pull from the global `EXAMPLES`.\n- For each input string, we call the existing `run_example(...)`, join its returned character list into a single string, print the input/output pair, and collect the result.\n- Finally, we return the list of all predicted strings in the original order."}
{"task_id": 114, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x: np.ndarray, derivative: bool = False) -> list:\n   Scaled Exponential Linear Unit (SELU).\n\n    Applies SELU activation or its derivative element-wise to *x*.\n\n    Args:\n        x: A NumPy ndarray containing any real values.\n        derivative: If ``False`` (default) the function returns the SELU\n            activation values. If ``True`` the function returns the analytical\n            gradient of SELU with respect to *x*.\n\n    Returns:\n        A Python nested list with the same shape as *x* containing the SELU\n        activation (or derivative) values rounded to **six** decimal places.\n       # SELU parameters\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    if derivative:\n        # derivative: \u03bb * (1 if x >= 0 else \u03b1 * e^x)\n        out = np.where(x >= 0,\n                       scale,\n                       scale * alpha * np.exp(x))\n    else:\n        # activation: \u03bb * (x if x >= 0 else \u03b1*(e^x - 1))\n        out = np.where(x >= 0,\n                       scale * x,\n                       scale * alpha * (np.exp(x) - 1))\n\n    # Round to 6 decimal places and convert to nested lists\n    out_rounded = np.round(out, 6)\n    return out_rounded.tolist()\n```\n\nExplanation of key steps:\n1. We define the constants `alpha` and `scale` (\u03bb) exactly as in the SELU paper.\n2. Using `np.where`, we vectorize the piecewise definitions for both activation and derivative.\n3. Finally, we round every element to six decimal places with `np.round(..., 6)` and convert the NumPy array into a nested Python list via `.tolist()`."}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n   Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n       eps = 1e-20\n\n    # Ensure y is a flat vector of shape (m,)\n    y_flat = y.reshape(-1)\n\n    # Number of samples\n    m = X.shape[0]\n\n    # Linear combination\n    z = X @ w\n    # If z is (m,1), flatten it to (m,)\n    z = z.reshape(-1)\n\n    # Sigmoid prediction\n    p = 1 / (1 + np.exp(-z))\n\n    # Clip predictions to avoid log(0)\n    p = np.clip(p, eps, 1 - eps)\n\n    # Compute average binary cross-entropy loss\n    loss = - (1.0 / m) * np.sum(y_flat * np.log(p) + (1 - y_flat) * np.log(1 - p))\n    loss_rounded = float(np.round(loss, 4))\n\n    # Compute gradient: shape will be (n,)\n    grad = (X.T @ (p - y_flat)) / m\n    # Reshape to (n, 1) so tolist() yields a nested list\n    grad = grad.reshape(-1, 1)\n    grad_rounded = np.round(grad, 4).tolist()\n\n    return loss_rounded, grad_rounded\n```\n\nExplanation of key steps:\n1. Flatten `y` and `z` so we work with 1D arrays of length `m`.\n2. Compute the sigmoid predictions `p`.\n3. Clip `p` to `[\u03b5, 1\u2212\u03b5]` to avoid taking `log(0)`.\n4. Compute the average binary cross-entropy loss and round it to 4 decimals.\n5. Compute the gradient, reshape it to `(n, 1)` for nested-list output, round to 4 decimals, and convert to a Python list."}
{"task_id": 116, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_criterion(y: np.ndarray, splits: list[np.ndarray]) -> float:\n   Calculate the reduction in mean-squared error achieved by a split.\n\n    Args:\n        y: A 1-D NumPy array containing the original target values.\n        splits: A list where each element is a 1-D NumPy array holding the\n            target values that fall into one child node after the split.\n\n    Returns:\n        A float \u2013 the parent MSE minus the weighted child MSE \u2013 rounded to\n        four decimal places.  A higher value indicates a better split.\n       # Number of samples in parent\n    N = y.size\n    if N == 0:\n        return 0.0\n\n    # Parent MSE\n    parent_mean = y.mean()\n    mse_parent = np.mean((y - parent_mean) ** 2)\n\n    # Weighted MSE of children\n    mse_children = 0.0\n    for s in splits:\n        n_i = s.size\n        if n_i == 0:\n            continue\n        mean_i = s.mean()\n        mse_i = np.mean((s - mean_i) ** 2)\n        mse_children += (n_i / N) * mse_i\n\n    # Reduction in MSE\n    delta = mse_parent - mse_children\n    return float(np.round(delta, 4))\n```\n\nExplanation of key steps:\n1. Compute the parent MSE as the average squared deviation from `mean(y)`.\n2. For each non-empty child split, compute its MSE and weight it by the fraction of samples it contains.\n3. Subtract the weighted child MSE from the parent MSE to get the reduction.\n4. Round the result to four decimal places and return it."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     X_test: np.ndarray,\n                     n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure we build at least one weak classifier\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    # Initialize sample weights uniformly\n    D = np.full(m, 1.0 / m)\n\n    # To store the parameters of each stump:\n    # Each stump is a tuple (feature_index, threshold, polarity)\n    stumps = []\n    alphas = []\n\n    for t in range(n_clf):\n        best_error = np.inf\n        best_stump = None\n\n        # Loop over all features to find the best stump\n        for feature_i in range(n):\n            Xf = X_train[:, feature_i]\n            # sort and find candidate thresholds\n            unique_vals = np.unique(Xf)\n            # if there's only one unique value, we still create two thresholds\n            if unique_vals.size == 1:\n                thresholds = [unique_vals[0] - 1e-5, unique_vals[0] + 1e-5]\n            else:\n                # midpoints between consecutive unique feature values\n                thresholds = (\n                    (unique_vals[:-1] + unique_vals[1:]) / 2.0\n                ).tolist()\n                # also consider margins beyond min and max\n                thresholds.insert(0, unique_vals[0] - 1e-5)\n                thresholds.append(unique_vals[-1] + 1e-5)\n\n            # Try both polarities\n            for thr in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions for this stump\n                    preds = np.ones(m)\n                    if polarity == 1:\n                        preds[Xf < thr] = -1\n                    else:\n                        preds[Xf < thr] = 1\n\n                    # Weighted error\n                    miss = (preds != y_train).astype(float)\n                    error = np.dot(D, miss)\n\n                    # Select the stump with minimal weighted error\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_i, thr, polarity)\n\n        # Avoid division by zero or log of zero\n        eps = 1e-10\n        best_error = max(eps, min(best_error, 1 - eps))\n\n        # Compute alpha\n        alpha = 0.5 * np.log((1.0 - best_error) / best_error)\n\n        # Store the stump and its weight\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        # Update sample weights D\n        feature_i, thr, polarity = best_stump\n        Xf = X_train[:, feature_i]\n        preds = np.ones(m)\n        if polarity == 1:\n            preds[Xf < thr] = -1\n        else:\n            preds[Xf < thr] = 1\n\n        # Exponential weight update\n        D *= np.exp(-alpha * y_train * preds)\n        # Renormalize\n        D /= D.sum()\n\n    # Now predict on X_test\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n\n    for stump, alpha in zip(stumps, alphas):\n        feature_i, thr, polarity = stump\n        Xf_test = X_test[:, feature_i]\n        preds = np.ones(k)\n        if polarity == 1:\n            preds[Xf_test < thr] = -1\n        else:\n            preds[Xf_test < thr] = 1\n        agg += alpha * preds\n\n    # Final prediction is sign of the aggregated sum\n    final_preds = np.where(agg >= 0, 1, -1)\n    return final_preds.tolist()\n```\n\nExplanation of key steps:\n\n1. **Initialization**  \n   We start with uniform sample weights \\(D_i = 1/m\\).\n\n2. **Building each stump**  \n   - For each feature, we generate candidate thresholds at the midpoints between sorted unique values (plus two margins).  \n   - For each threshold and polarity (\\(+1\\) or \\(-1\\)), we compute the weighted error  \n     \\(\\varepsilon = \\sum_i D_i [h(x_i)\\neq y_i]\\).  \n   - We pick the stump (feature, threshold, polarity) with the lowest error.\n\n3. **Computing \\(\\alpha_t\\)**  \n   \\[\n     \\alpha_t \\;=\\;\\tfrac12\\ln\\!\\Bigl(\\tfrac{1 - \\varepsilon_t}{\\varepsilon_t}\\Bigr)\n   \\]\n   A small \\(\\epsilon\\) guards against division by zero.\n\n4. **Updating weights**  \n   \\[\n     D_i \\;\\propto\\; D_i \\exp\\bigl(-\\alpha_t\\,y_i\\,h_t(x_i)\\bigr)\n   \\]\n   With renormalization so they sum to 1.\n\n5. **Prediction**  \n   We aggregate stump predictions weighted by \\(\\alpha_t\\) and take the sign:\n   \\(\\hat y = \\mathrm{sign}\\bigl(\\sum_t \\alpha_t\\,h_t(x)\\bigr)\\).\n\nThis yields a list of \\(-1\\)/\\(1\\) predictions for `X_test`."}
{"task_id": 119, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sgd_update(params: list, grads: list, alpha: float = 0.01) -> list:\n   One step of Stochastic Gradient Descent.\n\n    The function receives a list of parameters and a list of corresponding\n    gradients and must return the updated parameters after applying the SGD\n    rule using the supplied learning-rate `alpha`.\n\n    Parameters\n    ----------\n    params : list[np.ndarray]\n        Current model parameters.\n    grads : list[np.ndarray]\n        Gradients for each parameter.\n    alpha : float, optional\n        Learning-rate, by default 0.01.\n\n    Returns\n    -------\n    list\n        Updated parameters converted to Python lists, each rounded to four\n        decimal places.\n       # Check for empty input or mismatched lengths\n    if len(params) == 0 or len(grads) == 0 or len(params) != len(grads):\n        return []\n\n    updated_params = []\n    for p, g in zip(params, grads):\n        # compute the SGD update\n        new_p = p - alpha * g\n        # round to 4 decimal places\n        new_p_rounded = np.round(new_p, 4)\n        # convert to Python list and collect\n        updated_params.append(new_p_rounded.tolist())\n\n    return updated_params\n```\n\nExplanation:\n\n1. We first guard against empty inputs or mismatched lists, returning `[]` if either condition holds.\n2. We iterate over each parameter `p` and its gradient `g`:\n   - Compute the new parameter value via `p - alpha * g`.\n   - Round the result to four decimal places with `np.round(..., 4)`.\n   - Convert the rounded NumPy array to a native Python list using `.tolist()`.\n3. Finally, we return the list of updated parameter lists."}
{"task_id": 120, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef linear_regression(X: list[list[int | float]],\n                      y: list[int | float],\n                      n_iterations: int,\n                      learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    # Check compatibility of X and y\n    if len(X) != len(y):\n        return -1\n\n    # Convert to numpy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    m = X_arr.shape[0]  # number of samples\n\n    # If there are no samples, we cannot learn\n    if m == 0:\n        return -1\n\n    # Add bias column (ones) as the first column\n    ones_col = np.ones((m, 1), dtype=float)\n    X_aug = np.hstack((ones_col, X_arr))\n\n    # Number of features after augmentation\n    N = X_aug.shape[1]\n\n    # Random initialization of weights in [-1/sqrt(N), +1/sqrt(N)]\n    limit = 1.0 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, size=N)\n\n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = X_aug.dot(w)          # shape (m,)\n        errors = predictions - y_arr        # shape (m,)\n        gradient = (1.0 / m) * (X_aug.T.dot(errors))  # shape (N,)\n        w -= learning_rate * gradient\n\n    # Round weights to 4 decimal places and convert to list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```\n\nExplanation of key steps:\n\n1. **Input check**: If the number of rows in `X` does not match the length of `y`, return `-1`.  \n2. **Bias column**: We prepend a column of ones to `X` so that the first weight acts as the bias term.  \n3. **Weight initialization**: We draw each weight from the uniform distribution in  \n   \\[-1/\u221aN, +1/\u221aN\\], where \\(N\\) is the total number of features after adding the bias column.  \n4. **Gradient descent loop**: We compute predictions, form the error vector, compute the gradient of the MSE, and update the weights.  \n5. **Return**: The learned weights (including bias as the first entry), each rounded to four decimal places, returned as a standard Python list."}
{"task_id": 122, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector [w0, w1, ..., wd] rounded to 4 decimal places, where\n        w0 is the intercept term.\n    \"\"\"\n    # 1. Convert inputs to NumPy arrays\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n\n    # 2. Augment X with a leading column of ones for the intercept\n    n_samples = X_np.shape[0]\n    ones = np.ones((n_samples, 1), dtype=float)\n    X_aug = np.hstack((ones, X_np))\n\n    # 3. Compute weights via the Moore-Penrose pseudoinverse\n    pinv = np.linalg.pinv(X_aug)\n    w = pinv.dot(y_np)\n\n    # 4. Round weights to 4 decimal places and return as a Python list\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()\n```\n\nExplanation of the steps:\n1. **Conversion:** We ensure `X` and `y` are floating-point NumPy arrays.\n2. **Augmentation:** We prepend a column of ones to `X` so that the first weight `w0` becomes the intercept.\n3. **Pseudo\u2013inverse:** `np.linalg.pinv(X_aug)` computes the Moore\u2013Penrose inverse, giving a stable solution even if `X\u1d40X` is singular.\n4. **Rounding:** We round each entry of the weight vector to 4 decimal places and convert to a standard Python list."}
{"task_id": 123, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    # Convert input to a 1-D numpy array\n    arr = np.asarray(y)\n    if arr.ndim != 1:\n        arr = arr.flatten()\n\n    # Convert to Python list for easier set operations\n    values = list(arr)\n\n    # Detect unique categories and sort them\n    # Assumes all elements are of comparable types (all ints or all strings)\n    unique_cats = sorted(set(values))\n\n    # Build a mapping from category -> column index\n    cat_to_index = {cat: idx for idx, cat in enumerate(unique_cats)}\n\n    # Build the one-hot matrix as a list of lists\n    one_hot: list[list[int]] = []\n    n_cols = len(unique_cats)\n    for val in values:\n        # Start with all zeros\n        row = [0] * n_cols\n        # Set the position corresponding to this value to 1\n        row[cat_to_index[val]] = 1\n        one_hot.append(row)\n\n    return one_hot\n\n\n# Example usage\nif __name__ == \"__main__\":\n    y = np.array(['cat', 'dog', 'mouse', 'cat', 'dog', 'cat'])\n    encoded = one_hot_encoding(y)\n    print(\"Categories (sorted):\", sorted(set(y)))\n    print(\"One-hot encoded matrix:\")\n    for row in encoded:\n        print(row)\n```\n\nExplanation of key steps:\n\n1. **Input normalization**  \n   We first convert the input to a NumPy array and flatten it if needed, so we can handle both lists and NumPy arrays uniformly.\n\n2. **Unique category detection**  \n   We turn the array into a Python list, build a `set` to find unique items, and then sort that set.  \n   - Sorting ensures that integer categories go in ascending order, and string categories go in lexicographical order.\n\n3. **Category-to-index mapping**  \n   We create a dictionary mapping each category to its column index in the one-hot matrix.\n\n4. **Matrix construction**  \n   For each value in the original vector, we build a row of zeros (length = number of unique categories) and place a `1` at the column corresponding to that value. We then append each row to our result list.\n\nThe final result is a plain Python list of lists containing only integers `0` and `1`."}
{"task_id": 126, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X: list[list[int | float]],\n                      Y: list[list[int | float]] | None = None,\n                      d: int = 3,\n                      gamma: float | None = None,\n                      c0: float = 1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays of float\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n\n    # Number of features\n    _, C = X_arr.shape\n\n    # Default gamma\n    if gamma is None:\n        gamma = 1.0 / C\n\n    # Compute the Gram matrix\n    # K[i, j] = (gamma * <X[i], Y[j]> + c0) ** d\n    K = gamma * (X_arr @ Y_arr.T) + c0\n    K = K ** d\n\n    # Round to 4 decimals and convert to Python nested list\n    K = np.round(K, 4)\n    return K.tolist()\n```"}
{"task_id": 127, "completion_id": 0, "completion": "```python\ndef confusion_matrix(y_true: list, y_pred: list) -> list:\n   Build a confusion matrix for the given true and predicted labels.\n\n    Parameters\n    ----------\n    y_true : list\n        Ground-truth class labels.\n    y_pred : list\n        Predicted class labels. Must have the same length as `y_true`.\n\n    Returns\n    -------\n    list\n        2-D list representing the confusion matrix.  The element at row *i*\n        and column *j* is the number of instances with true class equal to\n        the *i-th* sorted unique label and predicted class equal to the\n        *j-th* sorted unique label.\n\n        If the input lengths differ the function returns -1.\n       # Check for equal length\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Determine the sorted unique classes across both lists\n    classes = sorted(set(y_true) | set(y_pred))\n    n_classes = len(classes)\n\n    # Map each class label to its index\n    class_to_index = {cls: idx for idx, cls in enumerate(classes)}\n\n    # Initialize the C x C matrix with zeros\n    matrix = [[0 for _ in range(n_classes)] for _ in range(n_classes)]\n\n    # Populate the confusion matrix\n    for true_label, pred_label in zip(y_true, y_pred):\n        i = class_to_index[true_label]\n        j = class_to_index[pred_label]\n        matrix[i][j] += 1\n\n    return matrix\n```\n\nExplanation:\n1. If `y_true` and `y_pred` differ in length, we immediately return `-1`.\n2. We form the set union of all observed labels, sort them, and build a lookup (`class_to_index`) to map each label to its row/column index.\n3. We initialize a square matrix of size `n_classes` \u00d7 `n_classes` with zeros.\n4. Iterating through the paired true and predicted labels, we increment the appropriate cell in the matrix.\n5. Finally, we return the populated confusion matrix as a list of lists."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n   Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 0 and\n        n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n       # If no components requested, return empty list\n    if n_components == 0:\n        return []\n\n    n_samples, n_features = X.shape\n    classes = np.unique(y)\n    n_classes = len(classes)\n\n    # Compute the global mean\n    mu = X.mean(axis=0)\n\n    # Within-class scatter\n    S_W = np.zeros((n_features, n_features), dtype=float)\n    for c in classes:\n        X_c = X[y == c]\n        mu_c = X_c.mean(axis=0)\n        # Centered data\n        Xc_centered = X_c - mu_c\n        S_W += Xc_centered.T @ Xc_centered\n\n    # Between-class scatter\n    S_B = np.zeros((n_features, n_features), dtype=float)\n    for c in classes:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mu_c = X_c.mean(axis=0)\n        diff = (mu_c - mu).reshape(-1, 1)\n        S_B += N_c * (diff @ diff.T)\n\n    # Solve the generalised eigenvalue problem by forming A = pinv(S_W) @ S_B\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n\n    # Eigen-decomposition (A is symmetric if S_W and S_B are symmetric)\n    eigvals, eigvecs = np.linalg.eigh(A)\n\n    # Sort eigenpairs in descending order of eigenvalues\n    idx_desc = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx_desc]\n    eigvecs = eigvecs[:, idx_desc]\n\n    # Pick the first n_components eigenvectors\n    W = eigvecs[:, :n_components].copy()\n\n    # Deterministic sign: ensure first non-zero entry is positive\n    for i in range(W.shape[1]):\n        vec = W[:, i]\n        # find first element with magnitude > eps\n        for x in vec:\n            if abs(x) > 1e-8:\n                if x < 0:\n                    W[:, i] = -vec\n                break\n\n    # Project the data\n    X_proj = X @ W  # shape (n_samples, n_components)\n\n    # Round to 4 decimal places\n    X_proj_rounded = np.round(X_proj, 4)\n\n    # Convert to list of lists and return\n    return X_proj_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Within-class scatter** `S_W` is built by centering each class\u2019s data and accumulating `(X_c - \u03bc_c)\u1d40 (X_c - \u03bc_c)`.  \n2. **Between-class scatter** `S_B` is accumulated by `(\u03bc_c - \u03bc)(\u03bc_c - \u03bc)\u1d40` weighted by the class size.  \n3. We compute `A = pinv(S_W) @ S_B` and perform an eigen-decomposition with `numpy.linalg.eigh`.  \n4. We sort eigenvalues/eigenvectors in descending order and select the top `n_components` eigenvectors.  \n5. To fix the sign ambiguity, each chosen eigenvector is flipped if its first non-zero entry is negative, ensuring a deterministic result.  \n6. Finally, we project `X` onto the selected directions, round to four decimals, and return the result as a list of lists."}
{"task_id": 129, "completion_id": 0, "completion": "```python\nfrom itertools import islice, cycle\n\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    # Guard against empty input or non-positive sample count\n    if samples <= 0 or not sequence:\n        return []\n    \n    # Cycle through the sequence infinitely, but only take 'samples' items\n    return list(islice(cycle(sequence), samples))\n\n\n# Example usage and quick tests\nif __name__ == \"__main__\":\n    print(cycle_sequence([1, 2, 3], 7))   # [1, 2, 3, 1, 2, 3, 1]\n    print(cycle_sequence(('a', 'b'), 5))  # ['a', 'b', 'a', 'b', 'a']\n    print(cycle_sequence([], 10))         # []\n    print(cycle_sequence([1, 2, 3], 0))   # []\n    print(cycle_sequence([1, 2, 3], -5))  # []\n```"}
{"task_id": 130, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\n\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]],\n                  state: Any,\n                  action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    # collect all next_states for the given (state, action)\n    next_states = [ns for (s, a, _, ns) in transitions\n                   if s == state and a == action]\n\n    # if no occurrences, return empty list\n    if not next_states:\n        return []\n\n    # count occurrences of each next_state\n    counts = Counter(next_states)\n    total = sum(counts.values())\n\n    # build the empirical distribution, sorted by next_state\n    result = []\n    for ns in sorted(counts):\n        prob = round(counts[ns] / total, 4)\n        result.append([ns, prob])\n\n    return result\n```\n\nExplanation of key steps:\n1. We filter `transitions` to extract only those `next_state` values where the tuple\u2019s `(state, action)` matches the query.  \n2. If there are none, we immediately return `[]`.  \n3. Otherwise we use `collections.Counter` to count how many times each `next_state` occurred.  \n4. We divide each count by the total number of occurrences to get a probability, rounding to 4 decimal places.  \n5. Finally, we assemble and return a list of `[next_state, probability]`, sorting by `next_state` in ascending order."}
{"task_id": 131, "completion_id": 0, "completion": "```python\n# Assume somewhere in your module:\n_SHARED_SEQUENCES = [\n    # Example sequences (the real ones would be populated elsewhere)\n    [10, 20, 30],\n    ['a', 'b', 'c', 'd'],\n    []\n]\n\ndef get_index(uid: int, i: int):\n   Return the element at position *i* of the sequence identified by *uid*.\n\n    The global list ``_SHARED_SEQUENCES`` contains every available sequence so\n    that several parts of a program can work on different sequences at the\n    same time.\n\n    If *uid* or *i* is invalid the function returns *None* instead of\n    raising an exception.\n\n    Args:\n        uid: Integer identifier of the desired sequence.\n        i:   Position inside the selected sequence (supports negative indices).\n\n    Returns:\n        The requested element, or None if the access is invalid.\n       # 1) Check uid is a valid, non-negative index into _SHARED_SEQUENCES\n    if not isinstance(uid, int) or uid < 0 or uid >= len(_SHARED_SEQUENCES):\n        return None\n\n    seq = _SHARED_SEQUENCES[uid]\n\n    # 2) Ensure seq is a sequence with a length\n    try:\n        n = len(seq)\n    except Exception:\n        return None\n\n    # 3) Normalize negative index\n    idx = i if i >= 0 else i + n\n\n    # 4) Check in-range\n    if idx < 0 or idx >= n:\n        return None\n\n    # 5) Safe return\n    return seq[idx]\n\n\n# ---- Example usage ----\nif __name__ ==main    print(get_index(0, 1))    # 20\n    print(get_index(0, -1))   # 30\n    print(get_index(1, 3))    # 'd'\n    print(get_index(1, -2))   # 'c'\n    print(get_index(2, 0))    # None  (empty sequence)\n    print(get_index(5, 0))    # None  (uid out of range)\n    print(get_index(1, 10))   # None  (i out of range)\n    print(get_index(-1, 0))   # None  (invalid uid)\n```"}
{"task_id": 132, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar (int or float), list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars (int or float) are returned unchanged.\n            \u2022 Lists or tuples are converted to a NumPy ndarray and returned.\n            \u2022 NumPy ndarrays are returned as-is (no copy, no modification).\n    \"\"\"\n    # Case 1: NumPy array \u2014 return it directly\n    if isinstance(z, np.ndarray):\n        return z\n\n    # Case 2: Scalar int or float \u2014 return unchanged\n    if isinstance(z, (int, float)):\n        return z\n\n    # Case 3: List or tuple \u2014 convert to ndarray\n    if isinstance(z, (list, tuple)):\n        return np.array(z)\n\n    # If we reach here, the input type was unexpected\n    raise TypeError(f\"Unsupported type for linear activation: {type(z)}\")\n```\n\nExplanation of key points:\n\u2022 We first check `isinstance(z, np.ndarray)` to avoid any copy when `z` is already an array.  \n\u2022 We then check for Python scalars (`int` or `float`) and return them unchanged.  \n\u2022 For lists or tuples, we convert to `np.ndarray` so that callers always get a NumPy object for non-scalars.  \n\u2022 Other types raise a `TypeError` to signal unsupported inputs."}
{"task_id": 133, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    # quick sanity check on vocab_length\n    if not isinstance(vocab_length, int) or vocab_length <= 0:\n        return -1\n\n    one_hot_batch: list[list[list[int]]] = []\n\n    for seq in X_train:\n        # one-hot encode each sequence\n        one_hot_seq: list[list[int]] = []\n        for token in seq:\n            # invalid index check\n            if not isinstance(token, int) or token < 0 or token >= vocab_length:\n                return -1\n            # create a one-hot vector\n            vec = [0] * vocab_length\n            vec[token] = 1\n            one_hot_seq.append(vec)\n        one_hot_batch.append(one_hot_seq)\n\n    return one_hot_batch\n```\n\nExplanation of the approach:\n1. We iterate over each sequence in the batch.\n2. For each token index:\n   - Check that it is a valid integer in `[0, vocab_length-1]`. If not, return `-1`.\n   - Create a zero vector of length `vocab_length` and set the position corresponding to the token to `1`.\n3. Collect these vectors into a sequence-specific list and then into the batch list.\n4. Return the nested Python list of shape `(m, time_steps, vocab_length)`."}
{"task_id": 134, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_arm(payoff_probs: list[float]) -> tuple[float, int]:\n   Find the arm with the highest expected reward in a Bernoulli bandit.\n\n    Parameters\n    ----------\n    payoff_probs : list[float]\n        A list where each element is the success probability of the\n        corresponding arm. Probabilities must lie in the interval [0, 1].\n\n    Returns\n    -------\n    tuple\n        (max_expected_reward, best_arm_index).  If the input list is empty or\n        contains an invalid probability (<0, >1, or NaN), the function returns\n        (-1.0, -1).\n       # Convert to numpy array of floats\n    try:\n        arr = np.array(payoff_probs, dtype=float)\n    except Exception:\n        return -1.0, -1\n\n    # Check for empty list\n    if arr.size == 0:\n        return -1.0, -1\n\n    # Check for invalid probabilities: <0, >1, or NaN\n    if np.any(arr < 0) or np.any(arr > 1) or np.any(np.isnan(arr)):\n        return -1.0, -1\n\n    # Find the index of the first occurrence of the maximum probability\n    best_idx = int(np.argmax(arr))\n    max_prob = float(arr[best_idx])\n\n    return max_prob, best_idx\n```\n\nExplanation of key steps:\n\n1. We first try to cast the input list to a NumPy array of floats. If that fails (e.g., because the list contains non-numeric items), we immediately return `(-1.0, -1)`.  \n2. If the array is empty, we again return `(-1.0, -1)`.  \n3. We then check for any invalid probability values: strictly less than 0, strictly greater than 1, or NaN. If any such values exist, we return `(-1.0, -1)`.  \n4. Otherwise, we use `np.argmax`, which returns the index of the first maximum value, satisfying the tie-breaking rule of returning the smallest index in case of a tie. We then return the maximum probability (as a Python `float`) and its corresponding index."}
{"task_id": 135, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_predict(\n        X_train: list[list[int | float]],\n        y_train: list[int | float],\n        X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Fits an OLS model via the normal equation and predicts on X_test.\n       Returns -1 if X^T X is singular (non\u2010invertible).\"\"\"\n    # Convert inputs to NumPy arrays (float)\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=float)\n    X_test_arr  = np.array(X_test,  dtype=float)\n\n    # Number of training examples\n    n_train, _ = X_train_arr.shape\n\n    # 1) Prepend a column of ones (intercept term) to X_train and X_test\n    X_train_aug = np.hstack((np.ones((n_train, 1)), X_train_arr))\n    X_test_aug  = np.hstack((np.ones((X_test_arr.shape[0], 1)), X_test_arr))\n\n    # 2) Compute X^T X and attempt to invert\n    XtX = X_train_aug.T.dot(X_train_aug)\n    try:\n        XtX_inv = np.linalg.inv(XtX)\n    except np.linalg.LinAlgError:\n        # Singular matrix, cannot fit OLS\n        return -1\n\n    # 3) Compute coefficients: beta = (X^T X)^{-1} X^T y\n    beta = XtX_inv.dot(X_train_aug.T).dot(y_train_arr)\n\n    # 4) Predict on X_test\n    y_pred = X_test_aug.dot(beta)\n\n    # 5) Round each prediction to 4 decimal places and return as a list\n    return [round(float(val), 4) for val in y_pred]\n```\n\nExplanation of key steps:\n\n1. Convert input lists into NumPy arrays of dtype float for numeric stability.\n2. Always add an intercept term by prepending a column of ones.\n3. Form the normal\u2010equation matrix \\(X^T X\\).  \n4. Attempt to invert \\(X^T X\\). If it is singular, `np.linalg.inv` will raise a `LinAlgError`, and we return `-1` as specified.  \n5. Otherwise we compute the coefficient vector \\(\\beta = (X^T X)^{-1} X^T y\\).  \n6. Finally, we predict on the augmented test matrix and round each output to four decimal places."}
{"task_id": 136, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(z: np.ndarray, axis: int = -1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function performs the following steps:\n      1. Subtract the maximum value along *axis* from every element of *z*.\n      2. Exponentiate the shifted values.\n      3. Divide by the sum of exponentials along the same axis.\n      4. Round the result to four decimal places.\n      5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: -1).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    # 1. Subtract the max for numerical stability (keep dims for broadcasting)\n    z_max = np.max(z, axis=axis, keepdims=True)\n    z_shifted = z - z_max\n\n    # 2. Exponentiate\n    exp_z = np.exp(z_shifted)\n\n    # 3. Normalize\n    sum_exp = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_vals = exp_z / sum_exp\n\n    # 4. Round to 4 decimal places\n    softmax_rounded = np.round(softmax_vals, 4)\n\n    # 5. Convert to Python list\n    return softmax_rounded.tolist()\n```\n\nExplanation of key points:\n1. **Numerical stability**: by subtracting `np.max(z, axis=axis, keepdims=True)` we avoid overflow in `exp`.\n2. **Broadcasting**: `keepdims=True` ensures the shapes align for subtraction and division.\n3. **Rounding**: `np.round(..., 4)` ensures every probability is to four decimal places.\n4. **Output type**: `.tolist()` converts the final NumPy array into a nested Python list with the same shape."}
{"task_id": 138, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    # Check for non-zero, equal-length inputs\n    if not isinstance(y_true, (list, tuple)) \\\n       or not isinstance(y_pred, (list, tuple)) \\\n       or len(y_true) == 0 \\\n       or len(y_pred) == 0 \\\n       or len(y_true) != len(y_pred):\n        return -1\n\n    # Count matches\n    total = len(y_true)\n    matches = sum(1 for yt, yp in zip(y_true, y_pred) if yt == yp)\n\n    # Compute accuracy and round\n    acc = matches / total\n    return round(acc, 4)\n```\n\nExplanation of key steps:\n1. **Validation**  \n   - We first verify that both inputs are lists or tuples, have non-zero length, and share the same length.  \n   - If any of these checks fail, the function returns -1.\n\n2. **Counting Matches**  \n   - We iterate once through paired elements of `y_true` and `y_pred` using `zip` and count how many positions match.\n\n3. **Computing and Rounding**  \n   - We divide the number of matches by the total number of samples to get a float in [0, 1].  \n   - We then round this value to four decimal places with Python\u2019s built-in `round` function.\n"}
{"task_id": 139, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    # If input is empty, return an empty list immediately\n    if z is None:\n        return []\n    # Try to get a length; if zero, return empty\n    try:\n        if len(z) == 0:\n            return []\n    except TypeError:\n        # In case z has no len (unlikely per spec), treat it as single value\n        z = [z]\n\n    result = []\n    for xi in z:\n        # Convert to Python float (handles numpy scalar or other numeric)\n        x = float(xi)\n        # Numerically stable tanh formula\n        t = 2.0 / (1.0 + math.exp(-2.0 * x)) - 1.0\n        # Round to 4 decimal places and append\n        result.append(round(t, 4))\n\n    return result\n```\n\nExplanation of key points:\n- We import `math` for `math.exp` and `numpy` only to satisfy the function signature requirements (we do not call `np.tanh`).\n- We handle empty inputs by checking `len(z) == 0`.\n- We iterate over each element (converting it to a Python `float` in case it\u2019s a NumPy scalar) and compute\n  tanh using the stable formula `2/(1+e^{-2x}) - 1`.\n- We round each result to four decimal places and collect into a standard Python list, which is then returned."}
{"task_id": 140, "completion_id": 0, "completion": "Here is an \\(O(n^2)\\) solution.  First we do a multi\u2010source BFS from all the initial fire cells to compute, for each cell, the earliest time `fire_time[i][j]` at which fire reaches it (walls \u2018#\u2019 never burn so their time stays infinite).  Then we do a second BFS for the agent from \\((0,0)\\), keeping track of the agent\u2019s current time \\(t\\).  We only enqueue a move into cell \\((i,j)\\) at time \\(t+1\\) if:\n\n 1. \\((i,j)\\) is inside the grid and not a wall.\n 2. We have not visited \\((i,j)\\) before.\n 3. `fire_time[i][j] > t+1`, i.e.\\ the fire arrives strictly after the agent.\n\nWe also immediately reject if the start or goal is initially on fire or is a wall.  The code below returns the minimum \\(t\\) when/if the agent reaches \\((n-1,n-1)\\), or \\(-1\\) if it never can.\n\n```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    # trivial empty or 1\u00d71 cases\n    if n == 0:\n        return -1\n    if n == 1:\n        # only escape if it's a free cell '.'\n        return 0 if grid[0][0] == '.' else -1\n\n    # start and goal must be free cells '.' or we can never stand there\n    if grid[0][0] != '.' or grid[n-1][n-1] != '.':\n        return -1\n\n    # 1) Compute fire_time[i][j] = earliest minute fire reaches (i,j)\n    INF = math.inf\n    fire_time = [[INF]*n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n\n    # Spread fire\n    while q:\n        x, y = q.popleft()\n        t0 = fire_time[x][y]\n        for dx, dy in ((1,0),(-1,0),(0,1),(0,-1)):\n            nx, ny = x+dx, y+dy\n            if 0 <= nx < n and 0 <= ny < n:\n                # fire cannot go through walls\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t0 + 1:\n                    fire_time[nx][ny] = t0 + 1\n                    q.append((nx, ny))\n\n    # if start or goal is burning at time 0, it's impossible\n    if fire_time[0][0] <= 0 or fire_time[n-1][n-1] <= 0:\n        return -1\n\n    # 2) BFS for the agent\n    visited = [[False]*n for _ in range(n)]\n    visited[0][0] = True\n    q = deque([(0, 0, 0)])  # (x, y, t_agent)\n    while q:\n        x, y, t = q.popleft()\n        # reached goal?\n        if x == n-1 and y == n-1:\n            return t\n        for dx, dy in ((1,0),(-1,0),(0,1),(0,-1)):\n            nx, ny = x+dx, y+dy\n            nt = t + 1\n            if 0 <= nx < n and 0 <= ny < n:\n                # must be a free cell, not visited, and not on fire at arrival\n                if (not visited[nx][ny]\n                   and grid[nx][ny] == '.'\n                   and fire_time[nx][ny] > nt):\n                    visited[nx][ny] = True\n                    q.append((nx, ny, nt))\n\n    return -1\n```\n\nExplanation of the key points:\n\n1. We first flood\u2010fill the fire in increasing time order from all initial \u201cF\u201d cells simultaneously.  \n2. `fire_time[i][j]` ends up being the **earliest** minute at which that cell is burning (or infinity if never reachable by fire).  \n3. In the agent\u2019s BFS we keep `(x,y,t)` and only step into a neighbor at time `t+1` if `fire_time[x][y] > t+1`, because the fire spreads *first* at each minute, then the agent moves.  \n4. We also immediately reject if start or end is a wall or already burning.  \n\nThis runs in \\(O(n^2)\\) time and space."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors classifier.\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_train, n_features)\n        Training data.\n    y_train : np.ndarray, shape (n_train,)\n        Training labels.\n    X_test : np.ndarray, shape (n_test, n_features)\n        Test data to classify.\n    k : int\n        Number of neighbors to use.\n    metric : str, optional (default='euclidean')\n        Distance metric to use: 'euclidean', 'manhattan', or 'cosine'.\n        If unknown, falls back to 'euclidean'.\n    Returns\n    -------\n    np.ndarray, shape (n_test,)\n        Predicted labels for X_test.\n    \"\"\"\n    # Ensure metric is one of the known ones\n    metric = metric.lower()\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        metric = 'euclidean'\n\n    X_train = np.asarray(X_train)\n    y_train = np.asarray(y_train)\n    X_test  = np.asarray(X_test)\n\n    n_train, n_feat = X_train.shape\n    n_test = X_test.shape[0]\n\n    # Compute distance matrix of shape (n_test, n_train)\n    if metric == 'euclidean':\n        # We can skip the sqrt if only ranking distances,\n        # but we'll include it for clarity.\n        # Broadcasting: (n_test,1,n_feat) - (1,n_train,n_feat)\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sqrt(np.sum(diffs**2, axis=2))\n\n    elif metric == 'manhattan':\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sum(np.abs(diffs), axis=2)\n\n    else:  # cosine\n        # cosine distance = 1 - (x\u00b7y)/(||x|| * ||y||)\n        # compute norms\n        train_norms = np.linalg.norm(X_train, axis=1)\n        test_norms  = np.linalg.norm(X_test,  axis=1)\n        # To avoid division by zero, add a tiny epsilon\n        eps = 1e-12\n        train_norms = np.maximum(train_norms, eps)\n        test_norms  = np.maximum(test_norms, eps)\n        # dot products\n        dots = X_test.dot(X_train.T)  # shape (n_test, n_train)\n        # outer product of norms\n        norm_matrix = np.outer(test_norms, train_norms)  # (n_test, n_train)\n        cos_sim = dots / norm_matrix\n        # clamp numerical errors\n        cos_sim = np.clip(cos_sim, -1.0, 1.0)\n        dists = 1.0 - cos_sim\n\n    # Prepare output array\n    y_pred = np.empty(n_test, dtype=y_train.dtype)\n\n    for i in range(n_test):\n        # indices of k nearest neighbors\n        nn_idx = np.argsort(dists[i])[:k]\n        neighbors = y_train[nn_idx]\n\n        # majority vote\n        labels, counts = np.unique(neighbors, return_counts=True)\n        max_count = counts.max()\n        # tie-break by smallest label\n        winners = labels[counts == max_count]\n        y_pred[i] = winners.min()\n\n    return y_pred\n```"}
{"task_id": 143, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x, alpha: float = 0.2, derivative: bool = False):\n   Compute the Leaky ReLU activation or its derivative.\n\n    Parameters\n    ----------\n    x : numpy.ndarray | list | tuple\n        Input data of arbitrary shape. If a Python sequence is provided it will\n        be converted to a NumPy array.\n    alpha : float, optional\n        Negative slope coefficient. Default is 0.2.\n    derivative : bool, optional\n        If False (default), compute the Leaky ReLU activation.\n        If True, compute the derivative with respect to *x*.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape as *x* containing the computed values.\n       # Ensure x is an ndarray\n    x_arr = np.asarray(x)\n\n    if derivative:\n        # f'(x) = 1 if x >= 0, else alpha\n        return np.where(x_arr >= 0, 1.0, alpha)\n    else:\n        # f(x) = x if x >= 0, else alpha * x\n        return np.where(x_arr >= 0, x_arr, alpha * x_arr)\n```\n\nExplanation:\n- We first convert the input `x` to a NumPy array using `np.asarray`.\n- We then use `np.where` to apply the elementwise condition without any Python loops.\n- When `derivative=False`, we compute the forward Leaky ReLU; when `True`, we compute its derivative.\n- The output has the same shape as the input."}
{"task_id": 144, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n\n    # Check that shapes match\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n\n    # Compute MAE with NumPy\n    abs_diff = np.abs(actual_arr - predicted_arr)\n    mae = np.mean(abs_diff)\n\n    # Round to 4 decimal places and return\n    return round(mae, 4)\n```\n\nExample usage:\n\n```python\n>>> mean_absolute_error([3, -0.5, 2, 7], [2.5, 0.0, 2, 8])\n0.5\n\n>>> mean_absolute_error([1, 2, 3], [1, 2])\n-1\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n   Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n       # Basic checks\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        raise ValueError(fUnsupported metric '{metric}'.                        Choose from 'euclidean', 'manhattan', 'cosine'.    if X.ndim != 2:\n        raise ValueErrorX must be a 2-D array    if X_test.ndim != 2:\n        raise ValueErrorX_test must be a 2-D array    if X.shape[1] != X_test.shape[1]:\n        raise ValueErrorNumber of features in X and X_test must match    n_train = X.shape[0]\n    if n_train == 0:\n        raise ValueErrorTraining set X must contain at least one sample    if k < 1:\n        raise ValueErrork must be at least 1    # If k is larger than number of training samples, use all\n    k_eff = min(k, n_train)\n\n    # Precompute norms for cosine if needed\n    eps = 1e-12\n    if metric == 'cosine':\n        # Norm of each training vector, add eps to avoid zero-division\n        train_norms = np.linalg.norm(X, axis=1) + eps\n\n    preds = []\n    for x in X_test:\n        # Compute distances from x to all training samples\n        if metric == 'euclidean':\n            # sqrt(sum((X - x)^2, axis=1))\n            diffs = X - x  # shape (n_train, n_features)\n            dists = np.sqrt(np.sum(diffs * diffs, axis=1))\n        elif metric == 'manhattan':\n            # sum(|X - x|, axis=1)\n            dists = np.sum(np.abs(X - x), axis=1)\n        else:  # cosine\n            # 1 - (X\u00b7x) / (||X|| * ||x||)\n            dot = X.dot(x)  # shape (n_train,)\n            x_norm = np.linalg.norm(x) + eps\n            cos_sim = dot / (train_norms * x_norm)\n            dists = 1.0 - cos_sim\n\n        # Find the k_eff nearest neighbours\n        nn_inds = np.argsort(dists)[:k_eff]\n        nn_labels = y[nn_inds]\n\n        # Majority vote with tie-breaking (smallest label wins on ties)\n        unique_labels, counts = np.unique(nn_labels, return_counts=True)\n        # np.unique returns sorted unique_labels, so tie -> smaller label first\n        winner_index = np.argmax(counts)\n        pred_label = unique_labels[winner_index]\n        preds.append(pred_label)\n\n    return preds\n```\n\nExplanation of key steps:\n1. **Input validation**: Check dimensions, matching feature sizes, valid `k`, and supported `metric`.  \n2. **Distance computation**:  \n   - Euclidean: vectorized difference + norm.  \n   - Manhattan: L1 norm.  \n   - Cosine: precompute `||X||`, add small `eps` to avoid division by zero, then compute `1 - cosine_similarity`.  \n3. **k neighbours**: Sort distances, take the first `k` (or all if `k` exceeds the training size).  \n4. **Majority vote**: `np.unique` with `return_counts=True` yields sorted labels; `np.argmax` picks the label with highest count, and in ties the smallest label.  \n5. **Return**: A plain Python list of predictions."}
{"task_id": 147, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    learning_rate: float = 0.1,\n    epochs: int = 10000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    # Special case: if y_train is all zeros or all ones, predict that constant class\n    unique_labels = np.unique(y_train)\n    if unique_labels.size == 1:\n        const_label = int(unique_labels[0])\n        return [const_label] * X_test.shape[0]\n\n    # Number of samples and number of features\n    n_samples, n_features = X_train.shape\n\n    # Initialize weights and bias\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n\n    # Ensure y_train is float for gradient computations\n    y = y_train.astype(float)\n\n    # Define the sigmoid function\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # Batch gradient descent\n    for _ in range(epochs):\n        # Linear combination: shape (n_samples,)\n        z = X_train.dot(w) + b\n        # Predicted probabilities: shape (n_samples,)\n        p = sigmoid(z)\n\n        # Compute gradients\n        error = p - y  # shape (n_samples,)\n        dw = (X_train.T.dot(error)) / n_samples  # shape (n_features,)\n        db = np.sum(error) / n_samples          # scalar\n\n        # Update parameters\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Prediction on the test set\n    z_test = X_test.dot(w) + b\n    p_test = sigmoid(z_test)\n    # Convert probabilities to class labels {0,1}\n    y_pred = (p_test >= 0.5).astype(int)\n\n    # Return as a Python list of ints\n    return y_pred.tolist()\n```\n\nExplanation of key steps:\n\n1. **Special case**: If the training labels contain only one class (all 0\u2019s or all 1\u2019s), we skip training and predict that constant class for every test instance.\n\n2. **Initialization**: We set the weight vector `w` and bias `b` to zero.\n\n3. **Forward pass**: At each iteration, compute the linear scores `z = X_train @ w + b` and then the sigmoid probabilities `p = 1/(1 + exp(-z))`.\n\n4. **Gradient computation**:  \n   - Error vector `error = p - y_train`.  \n   - Weight gradient `dw = (X_train\u1d40 \u00b7 error) / n_samples`.  \n   - Bias gradient `db = sum(error) / n_samples`.\n\n5. **Parameter update**: Subtract `learning_rate * gradient` from each parameter.\n\n6. **Prediction**: After training, compute `p_test = sigmoid(X_test @ w + b)` and threshold at 0.5 to obtain binary labels.\n\nThis implementation uses only NumPy for all linear algebra and avoids any high-level ML libraries."}
{"task_id": 148, "completion_id": 0, "completion": "```python\nfrom typing import List\nfrom typing import List\n\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    # Invalid input: empty data or alpha outside [0, 1]\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n\n    smoothed: List[float] = []\n    # Initialize with the first observation\n    s = data[0]\n    smoothed.append(round(s, 4))\n\n    # Recursively compute EMA\n    for x in data[1:]:\n        s = (1 - alpha) * s + alpha * x\n        smoothed.append(round(s, 4))\n\n    return smoothed\n```\n\nExplanation of key points:\n- We immediately check for invalid cases (empty list or \u03b1 outside [0,1]) and return -1.\n- We seed the EMA with the first observation `s = data[0]`.\n- For each subsequent `x`, we update `s = (1\u2212\u03b1)*s + \u03b1*x` and append its value rounded to 4 decimal places.\n- When \u03b1=0, the recursion keeps `s` constant at `data[0]`.  \n- When \u03b1=1, each new `s` becomes exactly the new observation `x`."}
{"task_id": 150, "completion_id": 0, "completion": "```python\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple, Union\n\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    Uses A* with the Manhattan-distance heuristic.\n    Returns a list of (row, col) tuples (including start and goal) if a path exists,\n    otherwise returns -1.\n    \"\"\"\n    m = len(grid)\n    n = len(grid[0])\n    start = (0, 0)\n    goal = (m - 1, n - 1)\n\n    # If start or goal is blocked, no path exists.\n    if grid[0][0] == 1 or grid[goal[0]][goal[1]] == 1:\n        return -1\n\n    # Manhattan-distance heuristic\n    def h(r: int, c: int) -> int:\n        return abs(r - goal[0]) + abs(c - goal[1])\n\n    # g_score[r][c] = best-known cost from start to (r,c)\n    g_score = [[float('inf')] * n for _ in range(m)]\n    g_score[0][0] = 0\n\n    # Min-heap of (f_score, g_score, row, col)\n    open_heap: List[Tuple[int, int, int, int]] = []\n    heappush(open_heap, (h(0, 0), 0, 0, 0))\n\n    # For path reconstruction: came_from[(r,c)] = predecessor (pr, pc)\n    came_from: dict = {}\n\n    # 4 cardinal directions\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    while open_heap:\n        f_curr, g_curr, r, c = heappop(open_heap)\n\n        # If we reached the goal, reconstruct path\n        if (r, c) == goal:\n            path: List[Tuple[int, int]] = []\n            cur = goal\n            while cur in came_from:\n                path.append(cur)\n                cur = came_from[cur]\n            path.append(start)\n            path.reverse()\n            return path\n\n        # If this is a stale entry (worse than a previously found path), skip it\n        if g_curr > g_score[r][c]:\n            continue\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == 0:\n                tentative_g = g_curr + 1\n                if tentative_g < g_score[nr][nc]:\n                    g_score[nr][nc] = tentative_g\n                    f_new = tentative_g + h(nr, nc)\n                    heappush(open_heap, (f_new, tentative_g, nr, nc))\n                    came_from[(nr, nc)] = (r, c)\n\n    # No path found\n    return -1\n```\n\nExplanation of key parts:\n1. We check for the trivial impossible cases (start or goal blocked).\n2. We maintain `g_score` to track the best-known cost from the start to each cell.\n3. The priority queue (`open_heap`) orders nodes by `f = g + h`, where `h` is the Manhattan-distance heuristic.\n4. On popping a node, if it's the goal, we reconstruct the path via the `came_from` dictionary.\n5. We skip any popped node whose `g` value is worse than the best-known `g_score`, avoiding re-expansion of stale entries.\n6. If the queue empties without reaching the goal, we return -1."}
{"task_id": 151, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as X).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple (A, grad) where:\n          \u2022 A    \u2013 the activation applied to X (rounded to 4 decimals).\n          \u2022 grad \u2013 the element-wise product of upstream_grad and the local\n                    derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    # Forward pass\n    act = activation.lower()\n    if act == \"sigmoid\":\n        A_raw = 1.0 / (1.0 + np.exp(-X))\n        dA_raw = A_raw * (1.0 - A_raw)\n    elif act == \"tanh\":\n        A_raw = np.tanh(X)\n        dA_raw = 1.0 - A_raw**2\n    elif act == \"relu\":\n        A_raw = np.maximum(0.0, X)\n        # derivative is 1 where A_raw > 0, else 0\n        dA_raw = (A_raw > 0.0).astype(X.dtype)\n    elif act == \"softmax\":\n        # subtract max for numerical stability\n        shift = X - np.max(X, axis=-1, keepdims=True)\n        exps = np.exp(shift)\n        sums = np.sum(exps, axis=-1, keepdims=True)\n        A_raw = exps / sums\n        # elementwise identity; true Jacobian is handled with the loss\n        dA_raw = np.ones_like(A_raw)\n    else:\n        raise ValueError(f\"Unsupported activation: '{activation}'\")\n\n    # Combine with upstream gradient\n    grad_raw = upstream_grad * dA_raw\n\n    # Round outputs\n    A = np.round(A_raw, 4)\n    grad = np.round(grad_raw, 4)\n    return A, grad\n```\n\nExplanation of key points:\n1. **Numerical stability in softmax**: we subtract `np.max(X, axis=-1, keepdims=True)` before exponentiating.\n2. **Derivatives use the activated output**:\n   - sigmoid\u2032 = A\u00b7(1\u2212A)\n   - tanh\u2032 = 1\u2212A\u00b2\n   - ReLU\u2032 = 1 if A>0 else 0\n   - softmax\u2032 treated as identity (an array of ones)\n3. **Rounding**: both the activation `A` and the final `grad` are rounded to 4 decimal places as required."}
{"task_id": 152, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n   Calculate the proportion of correctly classified samples.\n\n    Parameters\n    ----------\n    y_true : list | numpy.ndarray\n        The true class labels.\n    y_pred : list | numpy.ndarray\n        The predicted class labels.\n\n    Returns\n    -------\n    float | int\n        The accuracy rounded to four decimal places. If the two inputs do\n        not have the same length or are empty, the function returns -1.\n       # Convert inputs to numpy arrays\n    y_true_arr = np.asarray(y_true)\n    y_pred_arr = np.asarray(y_pred)\n\n    # Check for same length and non-empty\n    if y_true_arr.ndim != 1 or y_pred_arr.ndim != 1:\n        return -1\n    n_true = y_true_arr.shape[0]\n    n_pred = y_pred_arr.shape[0]\n    if n_true == 0 or n_true != n_pred:\n        return -1\n\n    # Count correct predictions\n    correct = np.sum(y_true_arr == y_pred_arr)\n\n    # Compute accuracy and round to 4 decimal places\n    acc = correct / n_true\n    return round(acc, 4)\n```\n\nExplanation of key steps:\n1. We first cast both inputs to NumPy arrays with `np.asarray`, so the function can accept either lists or arrays.\n2. We ensure both arrays are 1D, have the same length, and are non-empty\u2014otherwise we return `-1`.\n3. We do an elementwise comparison `y_true_arr == y_pred_arr`, sum the `True` values to count correct predictions, divide by the total number of samples, and finally round to four decimal places."}
{"task_id": 154, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float = 0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    # Ensure X and Y are 2D (treat 1D as a single sample)\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n\n    # Compute squared norms of each row (shape: (n,1) and (1,m))\n    sq_X = np.sum(X * X, axis=1).reshape(-1, 1)\n    sq_Y = np.sum(Y * Y, axis=1).reshape(1, -1)\n\n    # Use the identity ||x - y||^2 = ||x||^2 + ||y||^2 - 2 x\u00b7y\n    sq_dists = sq_X + sq_Y - 2 * X.dot(Y.T)\n\n    # Numerical stability: ensure no small negative values\n    sq_dists = np.maximum(sq_dists, 0.0)\n\n    # Compute the RBF kernel\n    K = np.exp(-gamma * sq_dists)\n\n    # Round to six decimals and convert to nested lists\n    K = np.round(K, 6)\n    return K.tolist()\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n                        'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # ensure state is a NumPy array\n    x = np.array(state, dtype=float)\n\n    # first affine + ReLU\n    z1 = x.dot(weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n\n    # second affine + ReLU\n    z2 = a1.dot(weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n\n    # third affine + tanh\n    z3 = a2.dot(weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)\n\n    # round to 4 decimal places and convert to list\n    return np.round(a3, 4).tolist()\n```"}
{"task_id": 157, "completion_id": 0, "completion": "```python\ndef accuracy_score(y_true, y_pred):\n   Return the classification accuracy between *y_true* and *y_pred*.\n\n    The function must:\n      \u2022 return \u20111 if the two containers have different lengths;\n      \u2022 return 0 when both containers are empty;\n      \u2022 otherwise return the proportion of matching elements rounded to\n        4 decimal places.\n\n    Args:\n        y_true (list | tuple): Ground-truth class labels.\n        y_pred (list | tuple): Predicted class labels.\n\n    Returns:\n        float | int: The accuracy or \u20111 according to the rules above.\n       # Check for length mismatch\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Both empty\n    if len(y_true) == 0:\n        return 0\n\n    # Count matches\n    matches = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n    accuracy = matches / len(y_true)\n\n    # Round to 4 decimal places\n    return round(accuracy, 4)\n```\n\nExplanation of key steps:\n1. If the lengths differ, we immediately return `-1`.\n2. If both are empty (length zero), we return `0`.\n3. Otherwise we pair up the true and predicted labels with `zip`, count how many are equal, divide by the total, and round to four decimal places."}
{"task_id": 158, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X: list[list[int | float]],\n                     y: list[int | float],\n                     alpha: float = 1.0,\n                     fit_intercept: bool = True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_mat = np.array(X, dtype=float)       # shape (N, M)\n    y_vec = np.array(y, dtype=float)       # shape (N,)\n\n    # If requested, prepend a column of ones (intercept)\n    if fit_intercept:\n        n_samples = X_mat.shape[0]\n        ones_col = np.ones((n_samples, 1), dtype=float)\n        X_mat = np.hstack([ones_col, X_mat])  # now shape (N, M+1)\n\n    # Number of parameters (M or M+1)\n    n_params = X_mat.shape[1]\n\n    # Build regularization matrix A\n    # A = alpha * I, but A[0,0] = 0 if intercept is unregularised\n    A = alpha * np.eye(n_params, dtype=float)\n    if fit_intercept:\n        A[0, 0] = 0.0\n\n    # Closed-form solution: beta = (X^T X + A)^{-1} X^T y\n    XtX = X_mat.T @ X_mat                # shape (n_params, n_params)\n    to_invert = XtX + A                  # guaranteed invertible by problem\n    inv_term = np.linalg.inv(to_invert)  # shape (n_params, n_params)\n    beta = inv_term @ (X_mat.T @ y_vec)  # shape (n_params,)\n\n    # Round coefficients to 4 decimal places and convert to Python list\n    beta_rounded = np.round(beta, 4).tolist()\n    return beta_rounded\n```\n\nExplanation of key steps:\n\n1. **Conversion to NumPy**  \n   We first convert the Python lists `X` and `y` into NumPy arrays of type `float`, which simplifies linear-algebra operations.\n\n2. **Intercept Handling**  \n   If `fit_intercept=True`, we horizontally stack a column of ones onto `X_mat`.  This extra column corresponds to an intercept term \u03b2\u2080.\n\n3. **Regularisation Matrix**  \n   We construct an `n_params \u00d7 n_params` diagonal matrix `A = \u03b1 I`.  When `fit_intercept=True`, we set `A[0,0] = 0` to avoid regularising the intercept term.\n\n4. **Closed\u2010Form Solution**  \n   Using the identity  \n       \u03b2\u0302 = (X\u1d40X + A)\u207b\u00b9 X\u1d40 y  \n   we compute `beta` with standard matrix multiplications and inversion.\n\n5. **Rounding**  \n   Finally, we round each coefficient to four decimal places and return them as a plain Python list."}
{"task_id": 159, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef log_gaussian_pdf(x_i: np.ndarray, mu: np.ndarray, sigma: np.ndarray) -> float:\n   Compute the log probability density of a multivariate Gaussian.\n\n    The function implements the formula\n        log N(x | \u00b5, \u03a3) = -0.5 * [ d * ln(2\u03c0) + ln det \u03a3 + (x-\u00b5)^T \u03a3\u207b\u00b9 (x-\u00b5) ].\n\n    Args:\n        x_i (np.ndarray): 1-D array representing the sample vector (shape (d,)).\n        mu (np.ndarray): 1-D array representing the mean vector (shape (d,)).\n        sigma (np.ndarray): 2-D array representing the covariance matrix (shape (d,d)).\n\n    Returns:\n        float: The log probability, rounded to 4 decimal places.\n       # =====   Write your code below this line   =====\n    # dimension\n    d = x_i.shape[0]\n    # compute log determinant\n    sign, logdet = np.linalg.slogdet(sigma)\n    if sign <= 0:\n        raise ValueErrorCovariance matrix must be positive-definite    # difference vector\n    diff = x_i - mu\n    # solve for \u03a3\u207b\u00b9 diff\n    sol = np.linalg.solve(sigma, diff)\n    # Mahalanobis term\n    mahal = float(diff.T @ sol)\n    # constant term\n    const = d * np.log(2 * np.pi)\n    # log-pdf\n    logp = -0.5 * (const + logdet + mahal)\n    # round to four decimals\n    return round(logp, 4)\n```\n\nExplanation of key steps:\n- `np.linalg.slogdet` returns sign and log determinant of \u03a3 in a numerically stable way.\n- `np.linalg.solve(sigma, diff)` computes \u03a3\u207b\u00b9\u00b7diff without explicitly inverting.\n- We form the Mahalanobis term `diff.T @ \u03a3\u207b\u00b9 @ diff`.\n- Finally, assemble the log\u2010pdf and round to 4 decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  All returned numbers are rounded to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n\n    # Precompute squared norms of each feature column\n    col_norms = np.sum(X * X, axis=0)  # shape (n,)\n\n    # Initialize parameter vector: w[0] is intercept, w[1:] are feature weights\n    w = np.zeros(n + 1, dtype=float)\n\n    for _ in range(max_iters):\n        # 1) Update intercept if requested\n        if fit_intercept:\n            # intercept = mean of residuals when features use current weights\n            b = np.mean(y - X.dot(w[1:]))\n            w[0] = b\n        # 2) Maintain current prediction\n        #    y_pred = w0 + X @ w[1:]\n        y_pred = w[0] + X.dot(w[1:])\n\n        # 3) Coordinate descent on each feature weight\n        #    Only w[1] through w[n] are penalised (w[0] is intercept)\n        for j in range(n):\n            old_wj = w[j + 1]\n            # partial residual for coordinate j:\n            #    r = y - (current_pred) + x_j * old_wj\n            # so that x_j^T r = x_j^T (y - (w0 + Xw)) + x_j^T x_j * old_wj\n            residual = y - y_pred + X[:, j] * old_wj\n            rho = X[:, j].dot(residual)\n\n            # Soft-thresholding parameter \u03c4 = \u03bb * m\n            tau = lambda_param * m\n\n            # Soft-thresholding update\n            if rho < -tau:\n                new_wj = (rho + tau) / col_norms[j]\n            elif rho > tau:\n                new_wj = (rho - tau) / col_norms[j]\n            else:\n                new_wj = 0.0\n\n            # Update weight and prediction incrementally\n            w[j + 1] = new_wj\n            y_pred += X[:, j] * (new_wj - old_wj)\n\n    # Final parameters\n    bias = float(np.round(w[0], 4))\n    weights = np.round(w[1:], 4).tolist()\n\n    return weights, bias\n```\n\nExplanation of key steps:\n\n1. We keep a parameter vector `w` of length `n+1`, where `w[0]` is the intercept (bias) and `w[1:]` are the feature coefficients.\n2. In each outer iteration:\n   - If fitting an intercept, we set `w[0] = mean(y \u2212 X @ w[1:])`.\n   - We compute the current predictions `y_pred = w[0] + X.dot(w[1:])`.\n3. We loop over each feature coordinate `j`:\n   - Compute the partial residual that \u201cremoves\u201d the contribution of the old `w[j+1]`.\n   - Compute the inner product `\u03c1 = x_j^T residual`.\n   - Apply the soft\u2010thresholding operator with threshold `\u03c4 = \u03bb\u00b7m`.\n   - Update `w[j+1]` accordingly and adjust `y_pred` incrementally.\n4. After `max_iters` passes, we return the rounded weights and bias.\n\nThis yields a Lasso solution via coordinate descent using only NumPy."}
{"task_id": 161, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef factorization_machine_predict(X, w0, w, V):\n       Compute second\u2010order FM scores for each row of X and return binary labels {1, -1}.\n    \n    Arguments:\n    X  -- numpy.ndarray of shape (m, n)\n    w0 -- scalar bias\n    w  -- numpy.ndarray of shape (n,)\n    V  -- numpy.ndarray of shape (n, k)\n    \n    Returns:\n    labels -- list of length m, each element is either 1 or -1\n       # Linear term: shape (m,)\n    linear_term = X.dot(w)  \n\n    # Interaction term using the O(nk) trick:\n    #   1/2 * sum_f [ (X @ V)[:,f]^2  -  (X^2 @ (V**2))[:,f] ]\n    XV = X.dot(V)                         # shape (m, k)\n    X2 = X * X                           # shape (m, n)\n    V2 = V * V                           # shape (n, k)\n    interaction_term = 0.5 * np.sum(XV**2 - X2.dot(V2), axis=1)  # shape (m,)\n\n    # Total score for each sample\n    scores = w0 + linear_term + interaction_term  # shape (m,)\n\n    # Convert scores to binary labels 1 or -1\n    labels = np.where(scores >= 0, 1, -1)\n\n    return labels.tolist()\n```\n\nExplanation of key steps:\n\n1. **Linear term**: `X.dot(w)` computes \u2211\u1d62 w\u1d62 x\u1d62 for each sample in O(n).\n2. **Interaction term**:  \n   Using the identity  \n   \u00bd \u2211_{f=1}^k [ (\u2211\u1d62 x\u1d62 v_{i,f})\u00b2 \u2212 \u2211\u1d62 x\u1d62\u00b2 v_{i,f}\u00b2 ],  \n   we compute `(X @ V)**2` and `(X**2) @ (V**2)` both in O(m\u00b7n\u00b7k), then sum over latent dims.\n3. **Scoring & Thresholding**: Add in global bias `w0`, then assign +1 if score \u2265 0, otherwise \u22121.\n\nThis runs in O(m\u00b7n\u00b7k), is fully vectorized in NumPy, and returns a Python list of labels."}
{"task_id": 162, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(\n    Y_hat: np.ndarray,\n    Y: np.ndarray,\n    epsilon: float = 1e-20\n) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    # 1) shapes must match\n    assert Y_hat.shape == Y.shape, (\n        f\"Shape mismatch: Y_hat has shape {Y_hat.shape}, \"\n        f\"but Y has shape {Y.shape}\"\n    )\n    \n    m = Y.shape[0]  # batch size\n    \n    # 2) compute average cross-entropy loss\n    # add epsilon for numerical stability in log\n    log_probs = np.log(Y_hat + epsilon)\n    loss = -np.sum(Y * log_probs) / m\n    loss = float(np.round(loss, 4))\n    \n    # 3) compute gradient w.r.t. softmax outputs\n    grad = (Y_hat - Y) / m\n    # round each entry to 4 decimal places and convert to nested list\n    grad_rounded = np.round(grad, 4).tolist()\n    \n    return loss, grad_rounded\n```\n\nExplanation of key steps:\n1. We assert that `Y_hat` and `Y` have identical shapes.\n2. The loss is computed as  \n   loss = \u2212(1/m) \u2211\u2099 \u2211\ud835\udc50 y\u2099\ud835\uddf0 \u00b7 log(\u0177\u2099\ud835\uddf0 + \u03b5).  \n   We add a tiny \u03b5 before taking the log to avoid `log(0)` issues.\n3. The gradient of the loss w.r.t. the softmax outputs is  \n   \u2207\u208d\u0177\u208e = (1/m) \u00b7 (\u0177 \u2212 y).\n4. We round the scalar loss and each entry of the gradient to exactly four decimal places, returning the gradient as a Python nested list."}
{"task_id": 163, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: list[float],\n                           y: list[float],\n                           degree: int,\n                           reg_factor: float,\n                           l1_ratio: float,\n                           learning_rate: float,\n                           n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    # Turn inputs into numpy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n = X_arr.shape[0]\n\n    # Build the Vandermonde (polynomial) design matrix, degrees 0..degree\n    # Shape: (n, degree+1)\n    Phi = np.vander(X_arr, N=degree+1, increasing=True)\n\n    # Initialize coefficients (degree+1,)\n    beta = np.zeros(degree + 1, dtype=float)\n\n    # Pure Ridge (\u03b1 == 0): closed\u2010form solution, do NOT penalise the bias term\n    if l1_ratio == 0.0:\n        # Build regularization matrix D: 0 for bias, 1 for others\n        D = np.eye(degree + 1, dtype=float)\n        D[0, 0] = 0.0\n\n        # Normal equations: (X^T X + (n*\u03bb*(1-\u03b1)/2) D) \u03b2 = X^T y\n        # Here \u03b1==0 so factor is (n * reg_factor / 2)\n        ridge_coeff = (n * reg_factor * (1.0 - l1_ratio) / 2.0)\n        A = Phi.T.dot(Phi) + ridge_coeff * D\n        b = Phi.T.dot(y_arr)\n\n        # Solve for \u03b2\n        beta = np.linalg.solve(A, b)\n\n    else:\n        # Elastic Net (\u03b1 > 0): batch gradient descent\n        for _ in range(n_iterations):\n            # Prediction\n            y_pred = Phi.dot(beta)                # shape (n,)\n            error = y_pred - y_arr                # shape (n,)\n\n            # Gradient of MSE part: (2/n) * Phi^T (Phi \u03b2 - y)\n            grad = (2.0 / n) * (Phi.T.dot(error))  # shape (degree+1,)\n\n            # Add regularization gradient for \u03b2\u2081...\u03b2_d\n            # d/d\u03b2_j [\u03bb ( (1-\u03b1)/2 \u03b2_j^2 + \u03b1 |\u03b2_j| )] = \u03bb [ (1-\u03b1) \u03b2_j + \u03b1 sign(\u03b2_j) ]\n            # Do not penalise j=0\n            # Note: np.sign(0.0) == 0.0, as desired for subgradient at zero.\n            reg_grad = reg_factor * (\n                (1.0 - l1_ratio) * beta + l1_ratio * np.sign(beta)\n            )\n            # Zero out the bias term\u2019s regularization\n            reg_grad[0] = 0.0\n\n            # Total gradient\n            grad += reg_grad\n\n            # Gradient descent update\n            beta -= learning_rate * grad\n\n    # Final predictions\n    y_final = Phi.dot(beta)\n\n    # Round to 4 decimals and return as Python list\n    return [round(val, 4) for val in y_final]\n```\n\nExplanation of key steps:\n\n1.  **Design matrix**  \n    We build an `(n \u00d7 (degree+1))` matrix `Phi` whose columns are `X^0, X^1, \u2026, X^degree`.\n\n2.  **Closed-form Ridge**  \n    When `l1_ratio == 0`, the cost is  \n       J(\u03b2)=1/n\u2006\u2225X\u03b2\u2212y\u2225\u00b2 + \u03bb/2\u2006\u2225\u03b2\u2081:\u2225\u00b2  \n    whose normal equations become  \n       (X\u1d40X + (n\u03bb/2)D)\u03b2 = X\u1d40y,  \n    where `D` does not penalize the bias (D[0,0]=0, rest=1).  \n\n3.  **Gradient Descent for Elastic Net**  \n    For `l1_ratio > 0`, we use batch gradient descent.  \n    - The gradient of the MSE term is `(2/n) X\u1d40(X\u03b2\u2212y)`.  \n    - The subgradient of the combined L1/L2 term for \u03b2_j (j\u22651) is  \n         \u03bb [ (1\u2212\u03b1) \u03b2_j + \u03b1 sign(\u03b2_j) ].  \n      We set its contribution to zero for j=0 so the intercept is unpenalised.  \n\n4.  **Predictions**  \n    We compute `y_pred = Phi @ \u03b2` and round each entry to 4 decimal places before returning."}
{"task_id": 164, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Compute the binary classification log\u2010loss (cross\u2010entropy loss).\n\n    Parameters\n    ----------\n    actual : array\u2010like of shape (N,)\n        Ground\u2010truth binary labels (each element must be 0 or 1).\n    predicted : array\u2010like of shape (N,)\n        Predicted probabilities for the positive class (floats in [0,1]).\n\n    Returns\n    -------\n    float\n        The average log\u2010loss, rounded to 6 decimal places.\n\n    Raises\n    ------\n    ValueError\n        If `actual` and `predicted` have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.asarray(actual, dtype=float)\n    predicted = np.asarray(predicted, dtype=float)\n    \n    # Check that shapes match\n    if actual.shape != predicted.shape:\n        raise ValueError(\"`actual` and `predicted` must have the same shape.\")\n    \n    # Clip predicted probabilities to avoid log(0)\n    eps = 1e-15\n    p = np.clip(predicted, eps, 1 - eps)\n    \n    # Compute the per-sample log loss and average\n    losses = actual * np.log(p) + (1 - actual) * np.log(1 - p)\n    log_loss = -np.mean(losses)\n    \n    # Round to six decimal places\n    return round(log_loss, 6)\n```\n\nExample usage:\n\n```python\n>>> actual = [1, 0, 1, 1]\n>>> predicted = [0.9, 0.1, 0.8, 0.6]\n>>> compute_log_loss(actual, predicted)\n0.164252\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function returns -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays for uniform handling\n    xa = np.asarray(x)\n    ya = np.asarray(y)\n\n    # Check that both are 1-D and of the same length\n    if xa.ndim != 1 or ya.ndim != 1 or xa.shape[0] != ya.shape[0]:\n        return -1\n\n    n = xa.shape[0]\n    # If both are empty, define distance as 0.0\n    if n == 0:\n        return 0.0\n\n    # Compute the number of differing positions\n    diff_count = np.count_nonzero(xa != ya)\n\n    # Normalized distance\n    dist = diff_count / n\n\n    # Round to 4 decimal places\n    return round(dist, 4)\n```\n\nExplanation:\n\n1. We use `np.asarray` to handle both lists and NumPy arrays uniformly.  \n2. We check that both inputs are 1-D and have the same length\u2014if not, return `-1`.  \n3. If the length is zero (both empty), we return `0.0` to avoid division by zero.  \n4. We count the differing positions with `np.count_nonzero(xa != ya)`.  \n5. We divide by the length `n` to normalize, then round to 4 decimal places with `round()`."}
{"task_id": 166, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_iter: int = 1000\n) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n\n    # Initialize parameters\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n\n    # Perceptron training loop\n    for _ in range(max_iter):\n        errors = 0\n        for x_i, y_i in zip(X_train, y_train):\n            margin = y_i * (np.dot(w, x_i) + b)\n            if margin <= 0:\n                # Misclassified, update weights and bias\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        # If no errors in this pass, we've converged\n        if errors == 0:\n            break\n\n    # Prediction on test set\n    raw_scores = X_test.dot(w) + b\n    # Apply sign function: score >= 0 => +1, else -1\n    preds = np.where(raw_scores >= 0, 1, -1)\n\n    return preds.tolist()\n```\n\nExplanation of key steps:\n1. We initialize the weight vector `w` and bias `b` to zeros.\n2. For up to `max_iter` passes over the training data, we:\n   - Compute the signed margin `m = y_i * (w\u00b7x_i + b)` for each sample.\n   - If `m <= 0`, the sample is misclassified, so we update  \n        `w \u2190 w + y_i * x_i`  \n        `b \u2190 b + y_i`  \n     and count an error.\n   - If a full pass yields zero errors, we stop early (convergence).\n3. After training, we compute `s = X_test\u00b7w + b` for each test sample.  \n   We then return `+1` for `s >= 0` (including `s == 0`) and `-1` otherwise, as a Python list."}
{"task_id": 167, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_cross_entropy(y_hat, y, epsilon: float = 1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    # 1. Clip predictions to avoid log(0)\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    \n    # 2. Number of samples\n    m = y_hat_clipped.shape[0]\n    \n    # 3. Compute mean BCE loss\n    loss = -np.mean(\n        y * np.log(y_hat_clipped) +\n        (1 - y) * np.log(1 - y_hat_clipped)\n    )\n    \n    # 4. Compute gradient w.r.t. y_hat\n    grad = (y_hat_clipped - y) / m\n    \n    # 5. Round loss and gradients to 4 decimal places\n    loss_rounded = round(float(loss), 4)\n    grad_rounded = [round(float(g), 4) for g in grad]\n    \n    return loss_rounded, grad_rounded\n```\n\nExplanation of key steps:\n\n1. **Clipping**  \n   We use `np.clip` to ensure each predicted probability stays in \\[\u03b5, 1\u2212\u03b5\\], preventing `log(0)`.\n\n2. **Loss**  \n   The binary cross\u2010entropy loss averaged over `m` samples is  \n   L = \u2212(1/m) \u03a3 [ y\u00b7log(y\u0302) + (1\u2212y)\u00b7log(1\u2212y\u0302) ].\n\n3. **Gradient**  \n   As specified, we use the simplified gradient  \n   \u2202L/\u2202y\u0302 = (y\u0302 \u2212 y) / m  \n\n4. **Rounding**  \n   We round the scalar loss and each gradient element to 4 decimal places and return the gradient as a plain Python list."}
{"task_id": 168, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    X_test_arr = np.array(X_test, dtype=float)\n\n    # Identify unique classes\n    classes = np.unique(y_train_arr)\n\n    # Small value to avoid division by zero in variance\n    eps = 1e-6\n\n    # Learn parameters: class priors, feature means and variances per class\n    priors = {}\n    means = {}\n    variances = {}\n    n_samples = X_train_arr.shape[0]\n\n    for c in classes:\n        X_c = X_train_arr[y_train_arr == c]\n        priors[c] = X_c.shape[0] / n_samples\n        means[c] = X_c.mean(axis=0)\n        # add eps to variance to avoid zero\n        variances[c] = X_c.var(axis=0) + eps\n\n    # Function to compute log Gaussian probability\n    def _log_gaussian(x, mu, var):\n        # log of 1/sqrt(2\u03c0 var) * exp(-(x-mu)^2/(2 var))\n        # = -0.5 * [log(2\u03c0 var) + (x-mu)^2 / var]\n        return -0.5 * (np.log(2 * np.pi * var) + ((x - mu) ** 2) / var).sum()\n\n    # Predict\n    y_pred = []\n    for x in X_test_arr:\n        log_probs = {}\n        for c in classes:\n            log_prior = np.log(priors[c])\n            log_likelihood = _log_gaussian(x, means[c], variances[c])\n            log_probs[c] = log_prior + log_likelihood\n\n        # Select the class with highest posterior (log) probability\n        best_class = max(log_probs, key=log_probs.get)\n        y_pred.append(int(best_class))\n\n    return y_pred\n```\n\nExplanation of key steps:\n1. Convert input lists to NumPy arrays for vectorized computations.  \n2. For each class `c`, compute the prior `P(c)`, the mean vector `\u03bc_c`, and the variance vector `\u03c3\u00b2_c` (adding a small `eps` to avoid zero variance).  \n3. Define a helper to compute the log of the Gaussian density for a feature vector.  \n4. For each test sample, compute the sum of the log prior and the log-likelihoods across features for each class, then choose the class with the highest total log-probability."}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Validate N\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    # Special case N == 1\n    if N == 1:\n        return [1.0]\n    # Precompute denominator and constants\n    M = N - 1\n    two_pi_over_M = 2.0 * math.pi / M\n\n    # Dispatch by window type\n    w = []\n    if window == \"hamming\":\n        # w[n] = 0.54 - 0.46*cos(2*pi*n/(N-1))\n        for n in range(N):\n            val = 0.54 - 0.46 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n\n    elif window == \"hann\":\n        # w[n] = 0.5 - 0.5*cos(2*pi*n/(N-1))\n        for n in range(N):\n            val = 0.5 - 0.5 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n\n    elif window == \"blackman_harris\":\n        # 4-term Blackman\u2013Harris\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            x = two_pi_over_M * n\n            val = (a0\n                   - a1 * math.cos(x)\n                   + a2 * math.cos(2.0 * x)\n                   - a3 * math.cos(3.0 * x))\n            w.append(round(val, 4))\n\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Must supply 'coefficients' for generalized_cosine window\")\n        # w[n] = sum_{k=0..len(coefficients)-1} a_k * cos(2*pi*k*n/(N-1))\n        for n in range(N):\n            acc = 0.0\n            for k, a_k in enumerate(coefficients):\n                acc += a_k * math.cos(two_pi_over_M * k * n)\n            w.append(round(acc, 4))\n\n    else:\n        raise ValueError(f\"Unknown window type '{window}'\")\n\n    return w\n```\n\nExplanation of key points:\n- We first validate that `N` is a positive integer; if `N == 1` we return `[1.0]` immediately.\n- For each supported window, we loop `n` from `0` to `N-1`, compute the formula, and round to 4 decimal places.\n- In `generalized_cosine`, we require the `coefficients` argument and form the sum of cosine terms.\n- If an unsupported `window` name is passed, a `ValueError` is raised.\n- The final result is a plain Python `list` of floats with each element rounded to 4 decimal places."}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n   Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n       # Convert to numpy arrays\n    X = np.array(X_train, dtype=float)\n    y = np.array(y_train)\n    X_t = np.array(X_test, dtype=float)\n\n    n_samples, n_features = X.shape\n\n    # Handle special case: all training labels identical\n    unique_labels = []\n    for label in y_train:\n        if label not in unique_labels:\n            unique_labels.append(label)\n    if len(unique_labels) == 1:\n        # Predict the same label for all test samples\n        return [unique_labels[0]] * X_t.shape[0]\n\n    # Require exactly two distinct labels\n    if len(unique_labels) != 2:\n        raise ValueErrory_train must contain exactly two distinct labels    # Map original labels to {0,1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    inv_map = {0: unique_labels[0], 1: unique_labels[1]}\n    y_bin = np.vectorize(label_map.get)(y)\n\n    # Add intercept term (column of ones) to X and X_t\n    X_bias = np.hstack([np.ones((n_samples, 1)), X])\n    X_test_bias = np.hstack([np.ones((X_t.shape[0], 1)), X_t])\n\n    # Initialize weights (including bias)\n    w = np.zeros(X_bias.shape[1], dtype=float)\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # Mini-batch gradient descent\n    for epoch in range(epochs):\n        # Shuffle the data at the start of each epoch\n        perm = np.random.permutation(n_samples)\n        X_shuffled = X_bias[perm]\n        y_shuffled = y_bin[perm]\n\n        # Process mini-batches\n        for start in range(0, n_samples, batch_size):\n            end = start + batch_size\n            X_batch = X_shuffled[start:end]\n            y_batch = y_shuffled[start:end]\n\n            # Compute predictions\n            preds = sigmoid(X_batch.dot(w))  # shape (batch,)\n\n            # Gradient of the negative log-likelihood\n            # grad = X^T (sigmoid(Xw) - y) / m\n            error = preds - y_batch\n            grad = X_batch.T.dot(error) / y_batch.size\n\n            # Update weights\n            w -= learning_rate * grad\n\n    # After training, predict on X_test\n    probs = sigmoid(X_test_bias.dot(w))\n    y_pred_bin = (probs >= 0.5).astype(int)\n\n    # Map back to original labels\n    y_pred = [inv_map[int(b)] for b in y_pred_bin]\n\n    return y_pred\n```\n\nExplanation of key steps:\n1. Convert inputs to NumPy arrays for efficient numeric computation.\n2. Detect if all `y_train` labels are identical; if so, skip training and predict that label for all test samples.\n3. Extract exactly two unique labels in order of first appearance and build a mapping `label_map` \u2192 `{0,1}` and inverse mapping `inv_map`.\n4. Add a bias (intercept) column of ones to both training and test feature matrices.\n5. Initialize the weight vector `w` (including bias) to zeros.\n6. For a fixed number of epochs, shuffle the training data and split it into mini-batches. For each batch, compute the sigmoid predictions, form the gradient of the cross\u2010entropy loss, and update `w` by a step of size `learning_rate`.\n7. After training, compute predicted probabilities on `X_test`, threshold them at 0.5 to obtain binary predictions, and map those back to the original label values.\n8. Return the list of predicted labels."}
{"task_id": 172, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    arr = np.array(z, dtype=float)\n    # Compute derivative element\u2010wise\n    grad = 1.0 - np.tanh(arr)**2\n    # Round to 4 decimal places\n    grad_rounded = np.round(grad, 4)\n\n    # If the array is 0\u2010dimensional, return a float\n    if grad_rounded.ndim == 0:\n        return float(grad_rounded)\n    # Otherwise return a Python list\n    return grad_rounded.tolist()\n```\n\nExplanation:\n\n1. We first wrap the input `z` in a NumPy array to handle scalars, lists, or arrays uniformly.\n2. We compute the derivative using `1 - tanh(arr)**2`.\n3. We round the result to 4 decimal places via `np.round(..., 4)`.\n4. If the result is a 0-dimensional array (i.e., the original input was a scalar), we cast to a Python `float`.\n5. Otherwise, we convert the array to a Python `list` with `.tolist()`."}
{"task_id": 173, "completion_id": 0, "completion": "```python\ndef alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    # Check that both strings are the same length\n    if len(candidate) != len(target):\n        return -1\n\n    # Sum of absolute differences of code points\n    total = 0\n    for c_char, t_char in zip(candidate, target):\n        total += abs(ord(c_char) - ord(t_char))\n    return total\n```\n\nExplanation  \n1. We first compare lengths; if they differ, we return -1.  \n2. Otherwise we iterate pairwise over both strings, compute `abs(ord(c_char) - ord(t_char))` for each character pair, accumulate it, and return the sum.  \n3. If both strings are empty, the loop never runs and the function correctly returns 0."}
{"task_id": 174, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    # avoid log(0)\n    eps = 1e-15\n    preds_clipped = np.clip(predictions, eps, 1.0 - eps)\n\n    # per\u2010sample cross\u2010entropy: -sum(y * log(p))\n    per_sample_ce = -np.sum(labels * np.log(preds_clipped), axis=1)\n    avg_loss = np.mean(per_sample_ce)\n\n    # accuracy: fraction where argmax(p) == argmax(y)\n    pred_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    acc = np.mean(pred_classes == true_classes)\n\n    # round to 4 decimals and cast to Python float\n    return round(float(avg_loss), 4), round(float(acc), 4)\n```"}
{"task_id": 175, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_penalty(weights: list | np.ndarray, C: float) -> float:\n   Compute the L2 regularization penalty.\n\n    Args:\n        weights (list | np.ndarray): 1-D iterable containing the model weights.\n        C (float): Non-negative regularization strength.\n\n    Returns:\n        float: The penalty value rounded to 4 decimal places.\n       # Convert input to a NumPy array of floats\n    arr = np.asarray(weights, dtype=float)\n    \n    # Compute sum of squares\n    sum_sq = np.sum(arr * arr)\n    \n    # Compute penalty\n    penalty = C * sum_sq\n    \n    # Round to 4 decimal places and return\n    return round(float(penalty), 4)\n```\n\nExplanation:\n1. We use `np.asarray` to seamlessly handle both Python lists and NumPy arrays.  \n2. Squaring is done element-wise, then summed.  \n3. Multiply by the coefficient `C`.  \n4. Finally, we round the result to 4 decimal places and cast to a native Python `float`.  \n\nThis implementation naturally returns `0.0` for empty or all-zero weight vectors."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n   Train AdaBoost with decision stumps on (X_train, y_train) and predict on X_test    # Convert inputs to numpy arrays\n    X = np.array(X_train, dtype=float)    # shape (n_samples, n_features)\n    y = np.array(y_train, dtype=int)      # shape (n_samples,)\n    n_samples, n_features = X.shape\n    \n    # Map labels {0,1} -> {-1, +1}\n    y_signed = 2 * y - 1\n    \n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples, dtype=float)\n    \n    # To store weak learners and their weights\n    stumps = []      # list of tuples (feature_index, threshold, polarity)\n    alphas = []      # list of alpha_t\n    \n    # Begin boosting rounds\n    for _ in range(n_estimators):\n        best_err = float('inf')\n        best_j = None\n        best_thresh = None\n        best_pol = None\n        best_pred = None  # to store h_t(x_i) for the best stump\n        \n        # Find the best decision stump in this round\n        for j in range(n_features):\n            feature_values = X[:, j]\n            thresholds = np.unique(feature_values)\n            # Loop thresholds in ascending order\n            for thresh in thresholds:\n                # Try both polarities: 1 then -1\n                for pol in (1, -1):\n                    # Compute predictions for this stump\n                    if pol == 1:\n                        # Predict +1 if x < thresh, else -1\n                        pred = np.where(feature_values < thresh, 1, -1)\n                    else:\n                        # Predict +1 if x >= thresh, else -1\n                        pred = np.where(feature_values >= thresh, 1, -1)\n                    \n                    # Compute weighted error\n                    misclassified = (pred != y_signed).astype(float)\n                    err = np.dot(w, misclassified)\n                    \n                    # Tie-breaking:\n                    # prefer smaller error;\n                    # then smaller feature index;\n                    # then smaller threshold;\n                    # then polarity = 1 before -1\n                    is_better = False\n                    if err < best_err - 1e-12:\n                        is_better = True\n                    elif abs(err - best_err) < 1e-12:\n                        # same error, check feature index\n                        if best_j is None or j < best_j:\n                            is_better = True\n                        elif j == best_j:\n                            # same feature, check threshold\n                            if thresh < best_thresh - 1e-12:\n                                is_better = True\n                            elif abs(thresh - best_thresh) < 1e-12:\n                                # same threshold, polarity=1 preferred\n                                if pol == 1 and best_pol == -1:\n                                    is_better = True\n                    \n                    if is_better:\n                        best_err = err\n                        best_j = j\n                        best_thresh = thresh\n                        best_pol = pol\n                        best_pred = pred\n        \n        # Compute alpha for the best stump\n        # Avoid division by zero by adding a small constant\n        alpha = 0.5 * np.log((1.0 - best_err) / (best_err + 1e-10))\n        \n        # Save the stump and its weight\n        stumps.append((best_j, best_thresh, best_pol))\n        alphas.append(alpha)\n        \n        # Update sample weights\n        # w_i <- w_i * exp(-alpha * y_i * h_t(x_i))\n        w *= np.exp(-alpha * y_signed * best_pred)\n        w_sum = w.sum()\n        if w_sum <= 0:\n            # Should not happen, but just in case\n            break\n        w /= w_sum\n        \n        # Early stopping if perfect classifier found\n        if best_err <= 1e-12:\n            break\n    \n    # Now predict on X_test\n    X_t = np.array(X_test, dtype=float)\n    n_test = X_t.shape[0]\n    # Initialize combined score to zero\n    agg = np.zeros(n_test, dtype=float)\n    \n    # Sum weighted predictions of all stumps\n    for (j, thresh, pol), alpha in zip(stumps, alphas):\n        feat_vals = X_t[:, j]\n        if pol == 1:\n            pred_t = np.where(feat_vals < thresh, 1, -1)\n        else:\n            pred_t = np.where(feat_vals >= thresh, 1, -1)\n        agg += alpha * pred_t\n    \n    # Final prediction: sign(agg) -> {+1, -1}, then map to {1, 0}\n    y_pred = (agg >= 0).astype(int)  # True->1, False->0\n    \n    # Return as a plain Python list of ints\n    return y_pred.tolist()\n```\n\nExplanation of key steps:\n1. **Data preparation**: Convert inputs to NumPy arrays and map labels `{0,1}` to `{\u22121,+1}` for the AdaBoost formula.\n2. **Weight initialization**: Start with uniform weights `w_i = 1/n`.\n3. **Weak learner search**: For each feature, each unique threshold, and each polarity, compute the weighted error and apply deterministic tie\u2010breaking.\n4. **Alpha calculation**:  \n   `\u03b1_t = \u00bd \u00b7 ln((1 \u2013 error_t)/(error_t + 1e-10))`\n5. **Weight update**:  \n   `w_i \u2190 w_i \u00b7 exp(\u2212\u03b1_t \u00b7 y_i \u00b7 h_t(x_i))`, then normalize so weights sum to 1.\n6. **Early stopping** if a stump has zero weighted error.\n7. **Prediction**: Aggregate `\u03b1_t \u00b7 h_t(x)` over all stumps, take the sign, and map back to `{0,1}`."}
{"task_id": 177, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\nimport numpy as np\n\ndef tanh(z: Union[int, float, np.ndarray, list]) -> Union[float, list]:\n   Compute the hyperbolic tangent of *z* without using ``numpy.tanh``.\n\n    The function must accept:\n        * A scalar ``int`` or ``float``\n        * A Python list (including nested lists)\n        * A ``numpy.ndarray`` of any shape\n\n    Every output value has to be rounded to 4 decimal places.\n\n    If *z* is a scalar return a single ``float``; otherwise return a Python\n    ``list`` obtained via ``numpy.ndarray.tolist``.\n\n    Args:\n        z: Numerical input (scalar, list, or np.ndarray).\n\n    Returns:\n        Numerical output with the same structure as the input, but rounded\n        to four decimals and converted to ``list`` if the input was not a\n        scalar.\n       # Handle scalar input directly\n    if isinstance(z, (int, float)):\n        zf = float(z)\n        e_pos = np.exp(zf)\n        e_neg = np.exp(-zf)\n        t = (e_pos - e_neg) / (e_pos + e_neg)\n        return round(t, 4)\n\n    # Otherwise convert to numpy array\n    arr = np.array(z, dtype=float)\n    e_pos = np.exp(arr)\n    e_neg = np.exp(-arr)\n    tanh_arr = (e_pos - e_neg) / (e_pos + e_neg)\n    tanh_arr = np.round(tanh_arr, 4)\n\n    return tanh_arr.tolist()\n```\n\nExplanation of key steps:\n- We first check if `z` is a scalar (`int` or `float`). If so, we compute `tanh` via the definition, and return a single Python `float` rounded to 4 decimals.\n- Otherwise we convert `z` into a NumPy array of `float`s, compute the elementwise `tanh`, round every entry to 4 decimals using `np.round`, and finally convert back to a nested Python `list` via `.tolist()`."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid inputs\n    if not (isinstance(n_dims, int) and n_dims > 0 and\n            isinstance(num_particles, int) and num_particles > 0 and\n            isinstance(num_iterations, int) and num_iterations > 0):\n        return -1\n\n    # PSO hyperparameters\n    w = 0.5    # inertia weight\n    c1 = 1.5   # cognitive coefficient\n    c2 = 1.5   # social coefficient\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # RNG for reproducibility\n    rng = np.random.default_rng(seed)\n\n    # Initialize particle positions uniformly in [\u22121, 1]\n    positions = rng.uniform(lower_bound, upper_bound,\n                            size=(num_particles, n_dims))\n    # Initialize velocities to zero\n    velocities = np.zeros_like(positions)\n\n    # Evaluate initial fitness (Sphere function)\n    fitness = np.sum(positions**2, axis=1)\n\n    # Personal bests start at initial positions\n    pbest_positions = positions.copy()\n    pbest_fitness = fitness.copy()\n\n    # Global best is the best among personal bests\n    gbest_idx = np.argmin(pbest_fitness)\n    gbest_position = pbest_positions[gbest_idx].copy()\n    gbest_fitness = pbest_fitness[gbest_idx]\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        # Draw random coefficients\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_particles, n_dims))\n\n        # Velocity update\n        cognitive = c1 * r1 * (pbest_positions - positions)\n        social    = c2 * r2 * (gbest_position - positions)\n        velocities = w * velocities + cognitive + social\n\n        # Position update and clipping to bounds\n        positions = positions + velocities\n        np.clip(positions, lower_bound, upper_bound, out=positions)\n\n        # Evaluate fitness\n        fitness = np.sum(positions**2, axis=1)\n\n        # Update personal bests\n        better_mask = fitness < pbest_fitness\n        if np.any(better_mask):\n            pbest_positions[better_mask] = positions[better_mask]\n            pbest_fitness[better_mask] = fitness[better_mask]\n\n        # Update global best\n        min_idx = np.argmin(pbest_fitness)\n        min_val = pbest_fitness[min_idx]\n        if min_val < gbest_fitness:\n            gbest_fitness = min_val\n            gbest_position = pbest_positions[min_idx].copy()\n\n    # Return the best fitness found, rounded to four decimals\n    return round(float(gbest_fitness), 4)\n```\n\nExplanation of key steps:\n1. **Input validation:** Ensures all dimensions and counts are positive integers.  \n2. **Initialization:** Particle positions are drawn uniformly in the search bounds \\([-1,1]\\), velocities start at zero.  \n3. **Personal and global bests:** Tracked throughout, updated whenever a particle finds a new lower Sphere value.  \n4. **PSO updates:** Velocities combine inertia, cognitive (personal best), and social (global best) terms with fresh random weights each iteration. Positions are clipped back into the domain.  \n5. **Output:** The best objective value found, rounded to four decimal places, or \\(-1\\) for invalid inputs."}
{"task_id": 179, "completion_id": 0, "completion": "Here\u2019s a straightforward implementation following your spec. It\n\n1. returns `[]` on `None` input,  \n2. lower-cases if requested,  \n3. strips out all ASCII punctuation if requested,  \n4. collapses runs of two or more spaces into one,  \n5. trims leading/trailing spaces,  \n6. finally returns the remaining characters as a list (or `[]` if empty).  \n\n```python\nimport re\nimport string\n\ndef tokenize_chars(\n    line: str,\n    lowercase: bool = True,\n    filter_punctuation: bool = True\n) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n\n    # 1) lower-case if requested\n    if lowercase:\n        line = line.lower()\n\n    # 2) remove ASCII punctuation if requested\n    if filter_punctuation:\n        # build a regex class matching any punctuation char\n        punct_pattern = '[' + re.escape(string.punctuation) + ']'\n        line = re.sub(punct_pattern, '', line)\n\n    # 3) collapse runs of 2+ spaces into one\n    line = re.sub(r' {2,}', ' ', line)\n\n    # 4) strip leading/trailing spaces\n    line = line.strip()\n\n    # 5) if empty, return []\n    if not line:\n        return []\n\n    # 6) return character-level list\n    return list(line)\n```\n\nExample usages:\n\n```python\n>>> tokenize_chars(\"Hello, world!!\")\n['h','e','l','l','o',' ','w','o','r','l','d']\n\n>>> tokenize_chars(\"  Multiple   SPACES\\tand PUNCT!!! \", lowercase=False)\n['M','u','l','t','i','p','l','e',' ','S','P','A','C','E','S','\\t','a','n','d',' ','P','U','N','C','T']\n\n>>> tokenize_chars(None)\n[]\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Convert to numpy arrays for distance computations\n    X_train_np = np.array(X_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    y_train_list = list(y_train)\n\n    n_train = X_train_np.shape[0]\n    # Determine effective k\n    if k <= 0 or k > n_train:\n        k_eff = n_train\n    else:\n        k_eff = k\n\n    preds = []\n    for x in X_test_np:\n        # Compute Euclidean distances\n        dists = np.linalg.norm(X_train_np - x, axis=1)\n        # Get indices of the k_eff nearest neighbors\n        nn_idx = np.argsort(dists)[:k_eff]\n        neighbors = [y_train_list[i] for i in nn_idx]\n\n        if task == \"classification\":\n            # Majority vote\n            cnt = Counter(neighbors)\n            max_count = max(cnt.values())\n            # In case of tie, min() picks the smallest label lexicographically/numerically\n            top_labels = [label for label, c in cnt.items() if c == max_count]\n            pred = min(top_labels)\n        elif task == \"regression\":\n            # Average and round to 4 decimals\n            avg_val = sum(neighbors) / k_eff\n            pred = round(avg_val, 4)\n        else:\n            raise ValueError(\"task must be 'classification' or 'regression'\")\n\n        preds.append(pred)\n\n    return preds\n```"}
{"task_id": 181, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(\n    X_train: list[list[float]],\n    y_train: list,\n    X_test: list[list[float]],\n    k: int = 5,\n    problem: str = \"classify\",\n) -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    # Convert to numpy arrays for vectorized distance computation\n    X_train_arr = np.array(X_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    n_train = X_train_arr.shape[0]\n\n    if problem not in (\"classify\", \"regress\"):\n        raise ValueError(\"`problem` must be either 'classify' or 'regress'.\")\n\n    # If k > number of training samples, use all training samples\n    k_eff = min(k, n_train)\n\n    preds = []\n    for x in X_test_arr:\n        # Compute Euclidean distances from x to all training points\n        # ||X_train_arr - x||_2\n        diffs = X_train_arr - x  # shape (n_train, n_features)\n        dists = np.sqrt(np.sum(diffs * diffs, axis=1))\n        # Get indices of k_eff nearest neighbours\n        neigh_idx = np.argsort(dists)[:k_eff]\n        neigh_labels = [y_train[i] for i in neigh_idx]\n\n        if problem == \"classify\":\n            # Majority vote with tie-breaking by smallest label\n            cnt = Counter(neigh_labels)\n            max_count = max(cnt.values())\n            # All labels that have the maximum count\n            tied = [label for label, c in cnt.items() if c == max_count]\n            # Pick the smallest in sorted order\n            prediction = sorted(tied)[0]\n        else:  # regress\n            # Compute the mean of neighbour target values\n            # Ensure they are floats\n            vals = [float(v) for v in neigh_labels]\n            mean_val = sum(vals) / len(vals)\n            # Round to 4 decimal places\n            prediction = round(mean_val, 4)\n\n        preds.append(prediction)\n\n    return preds\n```\n\nExplanation of key steps:\n\n1. Convert the input lists to NumPy arrays for efficient distance computation.\n2. For each test point, compute Euclidean distances to all training points.\n3. Select the indices of the k (or fewer) nearest neighbours.\n4.  \n   - In classification mode, count neighbour labels with `Counter`, find the maximum-occurrence labels, and break ties by returning the smallest label in sorted order.  \n   - In regression mode, average the neighbour target values and round the result to 4 decimal places."}
{"task_id": 182, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_kernel(X, Y, degree=2):\n       Compute the polynomial kernel matrix K where\n        K[i, j] = (X[i] \u00b7 Y[j]) ** degree.\n\n    Parameters\n    ----------\n    X : array-like of shape (n, p)\n        First data matrix (n samples, p features).\n    Y : array-like of shape (m, p)\n        Second data matrix (m samples, p features).\n    degree : int, default=2\n        The degree of the polynomial kernel. Must be a positive integer >= 1.\n\n    Returns\n    -------\n    kernel_matrix : list of lists, shape (n, m)\n        The kernel (Gram) matrix with each entry rounded to 4 decimal places.\n    -1 : int\n        Returned if any input is invalid:\n        - X or Y is not 2-dimensional\n        - Number of features (columns) in X and Y do not match\n        - degree is not a positive integer >= 1\n       # Convert inputs to numpy arrays\n    try:\n        X_arr = np.array(X, dtype=float)\n        Y_arr = np.array(Y, dtype=float)\n    except Exception:\n        return -1\n\n    # Validate dimensions\n    if X_arr.ndim != 2 or Y_arr.ndim != 2:\n        return -1\n\n    # Validate feature dimension match\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n\n    # Validate degree\n    if not isinstance(degree, int) or degree < 1:\n        return -1\n\n    # Compute the dot-product matrix\n    try:\n        gram = X_arr @ Y_arr.T\n    except Exception:\n        return -1\n\n    # Apply polynomial kernel and round\n    gram_poly = np.power(gram, degree)\n    gram_rounded = np.round(gram_poly, 4)\n\n    # Convert to nested Python list\n    return gram_rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Input conversion & validation**  \n   - We first convert `X` and `Y` to NumPy arrays of type `float`.  \n   - Check that each is 2-D, that they have the same number of columns, and that `degree` is a positive integer.\n\n2. **Kernel computation**  \n   - Compute the Gram matrix via matrix multiplication `X @ Y.T`.  \n   - Raise each entry to the power `degree`.\n\n3. **Rounding & output**  \n   - Round all entries to 4 decimal places with `np.round(..., 4)`.  \n   - Convert the final NumPy array to a plain nested Python list using `.tolist()`.  \n\nIf any validation fails, the function immediately returns `-1` as specified."}
{"task_id": 183, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    # Ensure the shape is a tuple for easy indexing\n    shape = tuple(weight_shape)\n    ndim = len(shape)\n\n    # Compute fan_in based on dimensionality\n    if ndim == 2:\n        # Dense layer: shape = (n_in, n_out)\n        fan_in = shape[0]\n    elif ndim == 4:\n        # 2D convolutional layer: shape = (fW, fH, in_channels, out_channels)\n        fW, fH, in_ch, _ = shape\n        fan_in = fW * fH * in_ch\n    else:\n        raise ValueError(\n            \"he_uniform only supports weight tensors of rank 2 or 4; \"\n            f\"got rank {ndim}\"\n        )\n\n    # Compute the limit for the uniform distribution\n    limit = np.sqrt(6.0 / fan_in)\n\n    # Sample from U[-limit, limit]\n    return np.random.uniform(-limit, limit, size=shape)\n```\n\nExplanation of key steps:\n1. We convert `weight_shape` into a tuple for consistent indexing.\n2. If the shape length is 2, we treat it as a dense layer and take `fan_in = n_in`.\n3. If the shape length is 4, we treat it as a 2D convolutional kernel and set `fan_in = fW * fH * in_channels`.\n4. We compute `limit = sqrt(6 / fan_in)` and draw samples from `np.random.uniform(-limit, limit, size=shape)`.\n5. A `ValueError` is raised for any other tensor rank, as specified."}
{"task_id": 184, "completion_id": 0, "completion": "Here is a self\u2010contained implementation of a binary CART tree using Gini impurity and recursive splitting. It builds a small tree \u201cfrom scratch\u201d and then uses it to predict on `X_test`.  \n\n```python\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n   Build a CART decision tree on (X_train, y_train) and predict labels for X_test    \n    # Define a tree node\n    class Node:\n        __slots__ =is_leafpredictionfeaturethresholdleftright        def __init__(self, *, is_leaf, prediction=None, feature=None, threshold=None, left=None, right=None):\n            self.is_leaf = is_leaf\n            self.prediction = prediction\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n\n    def gini(y):\n       Compute Gini impurity for labels y        if y.size == 0:\n            return 0.0\n        counts = np.bincount(y)\n        p = counts / counts.sum()\n        return 1.0 - np.sum(p * p)\n\n    def majority_class(y):\n       Return the majority class label in y (ties broken by smaller label).        counts = np.bincount(y)\n        return int(np.argmax(counts))\n\n    def best_split(X, y):\n       Find the best (feature, threshold, gain) to split on        n_samples, n_features = X.shape\n        parent_gini = gini(y)\n        best = (None, None, 0.0)  # feature, threshold, best_gain\n\n        # If all labels are identical, no split is possible\n        if parent_gini == 0.0:\n            return best\n\n        for feat in range(n_features):\n            # sort samples by feature\n            sorted_idx = X[:, feat].argsort()\n            Xf = X[sorted_idx, feat]\n            yf = y[sorted_idx]\n            \n            # we will test thresholds between distinct consecutive Xf\n            for i in range(1, n_samples):\n                if Xf[i] == Xf[i-1]:\n                    continue\n                thr = (Xf[i] + Xf[i-1]) / 2.0\n                \n                # split\n                left_mask = X[:, feat] <= thr\n                y_left = y[left_mask]\n                y_right = y[~left_mask]\n                if y_left.size == 0 or y_right.size == 0:\n                    continue\n\n                # weighted Gini\n                g_left = gini(y_left)\n                g_right = gini(y_right)\n                w_left = y_left.size / n_samples\n                w_right = 1.0 - w_left\n                gain = parent_gini - (w_left * g_left + w_right * g_right)\n\n                if gain > best[2]:\n                    best = (feat, thr, gain)\n\n        return best  # (feature, threshold, gain)\n\n    def build_tree(X, y, depth):\n       Recursive tree builder        # stopping: all same label\n        if y.size == 0:\n            # Should not really happen in normal splits\n            return Node(is_leaf=True, prediction=0)\n        if np.all(y == y[0]):\n            return Node(is_leaf=True, prediction=int(y[0]))\n        # stopping: max depth reached\n        if max_depth is not None and depth >= max_depth:\n            return Node(is_leaf=True, prediction=majority_class(y))\n\n        # find best split\n        feat, thr, gain = best_split(X, y)\n        if feat is None or gain <= 0.0:\n            # no useful split\n            return Node(is_leaf=True, prediction=majority_class(y))\n\n        # split data\n        left_mask = X[:, feat] <= thr\n        X_left, y_left = X[left_mask], y[left_mask]\n        X_right, y_right = X[~left_mask], y[~left_mask]\n\n        # if a child is empty, make leaf\n        if y_left.size == 0 or y_right.size == 0:\n            return Node(is_leaf=True, prediction=majority_class(y))\n\n        # build subtrees\n        left_node = build_tree(X_left, y_left, depth + 1)\n        right_node = build_tree(X_right, y_right, depth + 1)\n        return Node(is_leaf=False, feature=feat, threshold=thr, left=left_node, right=right_node)\n\n    def predict_one(x, node):\n       Traverse the tree to make a single prediction        while not node.is_leaf:\n            if x[node.feature] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.prediction\n\n    # build the tree on the training data\n    root = build_tree(X_train, y_train, depth=0)\n\n    # predict for each test sample\n    preds = [predict_one(x, root) for x in X_test]\n    return preds\n```\n\nExplanation of key points:\n\n1. **Node class**  \n   A simple object holding either a leaf prediction or a split `(feature, threshold)` and child nodes.\n\n2. **Gini impurity**  \n   `gini(y)` computes 1 \u2212 \u03a3 p\u1d62\u00b2 for the label distribution in `y`.\n\n3. **Best split search**  \n   For each feature, sort the data and try thresholds halfway between each pair of distinct values. Compute the weighted Gini of the two child groups and pick the split that maximizes \u201cGini gain.\u201d\n\n4. **Stopping criteria**  \n   - Pure node (all `y` equal)  \n   - Reached `max_depth` (if given)  \n   - No positive gain split or an empty child\n\n5. **Prediction**  \n   A simple tree\u2010walk from the root to a leaf for each test sample.\n\nThis function returns a plain Python list of integer labels for `X_test`."}
{"task_id": 185, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    # 1. Convert X to a NumPy array (without modifying X in place).\n    X_arr = np.asarray(X)\n\n    # 2. Check for emptiness.\n    if X_arr.size == 0:\n        raise ValueError(\"Got an empty matrix.\")\n\n    # 3a. One\u2010dimensional: treat as one sample.\n    if X_arr.ndim == 1:\n        n_samples = 1\n        n_features = X_arr.shape[0]\n\n    # 3b. Two or more dimensions: first axis is samples;\n    #     remaining axes are flattened into features.\n    else:\n        n_samples = X_arr.shape[0]\n        # product of dimensions 1,2,...\n        n_features = int(np.prod(X_arr.shape[1:], dtype=np.int64))\n\n    return (int(n_samples), int(n_features))\n```"}
{"task_id": 186, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    # Compute the mean of y_train\n    mean_val = float(np.mean(y_train))\n    # Round it to 4 decimal places\n    mean_rounded = round(mean_val, 4)\n    # Number of test samples\n    m_samples = len(X_test)\n    # Return the mean repeated for each test sample (empty list if m_samples == 0)\n    return [mean_rounded] * m_samples\n```"}
{"task_id": 188, "completion_id": 0, "completion": "```python\nimport math\n\ndef epsilon_decay(max_epsilon: float, min_epsilon: float, decay_rate: float, step: int) -> float:\n   Compute the exponentially decayed \u03b5 (epsilon) for \u03b5-greedy exploration.\n\n    The function implements the formula\n        \u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212decay_rate * t)\n    with the following requirements:\n      1. 0 \u2264 min_epsilon < max_epsilon\n      2. decay_rate > 0\n      3. step \u2265 0 (and integer)\n      4. If any of the above is violated, return \u22121.\n      5. Clip \u03b5(t) so it never goes below min_epsilon.\n      6. Return \u03b5(t) rounded to 4 decimal places.\n\n    Args:\n        max_epsilon (float): Initial exploration rate \u03b5_max at step 0.\n        min_epsilon (float): Lower bound \u03b5_min that \u03b5 should never fall below.\n        decay_rate (float):  Positive decay rate \u03bb.\n        step (int):          Current time-step t.\n\n    Returns:\n        float: The exploration rate \u03b5(t) rounded to 4 decimal places,\n               or \u22121 if the input parameters are invalid.\n       # 1. Validate inputs\n    if not (isinstance(step, int) and step >= 0):\n        return -1\n    if not (isinstance(max_epsilon, (int, float)) and isinstance(min_epsilon, (int, float))):\n        return -1\n    if not (0 <= min_epsilon < max_epsilon):\n        return -1\n    if not (isinstance(decay_rate, (int, float)) and decay_rate > 0):\n        return -1\n\n    # 2. Compute the decayed epsilon\n    eps = min_epsilon + (max_epsilon - min_epsilon) * math.exp(-decay_rate * step)\n\n    # 3. Clip so it never falls below min_epsilon\n    if eps < min_epsilon:\n        eps = min_epsilon\n\n    # 4. Round to 4 decimal places and return\n    return round(eps, 4)\n```\n\nExplanation of key points:\n- We first check that `step` is a non\u2010negative integer.\n- We ensure the bounds `0 \u2264 min_epsilon < max_epsilon` and `decay_rate > 0`.\n- The formula `\u03b5(t) = \u03b5_min + (\u03b5_max \u2212 \u03b5_min) * exp(\u2212\u03bb \u00b7 t)` is then evaluated.\n- We clip any tiny numerical underflow so \u03b5 never drops below `min_epsilon`.\n- Finally, we round to 4 decimal places as required."}
{"task_id": 189, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef batch_resample(X, new_dim, modebilinear   Resample a batch of images to a new spatial resolution.\n\n    Parameters\n    ----------\n    X : numpy.ndarray of shape (n_ex, in_rows, in_cols, in_channels)\n        Input batch of images.\n    new_dim : tuple[int, int]\n        Target dimension (out_rows, out_cols).\n    mode :bilinearneighbor defaultbilinear        Interpolation method.\n\n    Returns\n    -------\n    numpy.ndarray\n        Resampled batch with shape (n_ex, out_rows, out_cols, in_channels).\n        Values are rounded to 4 decimal places.\n       # Validate mode\n    if mode not inbilinearneighbor        raise NotImplementedError(fUnrecognized resampling mode: {mode    # Extract shapes\n    X = np.asarray(X, dtype=np.float64)\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    out_rows, out_cols = new_dim\n\n    # Special case: if either output dimension is zero, return empty array\n    if out_rows == 0 or out_cols == 0:\n        return np.zeros((n_ex, out_rows, out_cols, in_ch), dtype=np.float64)\n\n    # Compute scale factors (align pixel-centers)\n    row_scale = in_rows  / out_rows\n    col_scale = in_cols  / out_cols\n\n    # Build grid of output coordinates\n    i = np.arange(out_rows)\n    j = np.arange(out_cols)\n    grid_i, grid_j = np.meshgrid(i, j, indexing='ij')  # shape (out_rows, out_cols)\n\n    # Map to inputcontinuous coordinates\n    y = (grid_i + 0.5) * row_scale - 0.5\n    x = (grid_j + 0.5) * col_scale - 0.5\n\n    # Prepare batch indices for fancy indexing\n    batch_idx = np.arange(n_ex)[:, None, None]  # shape (n_ex,1,1)\n\n    if mode ==neighbor        # Nearest-neighbor interpolation\n        y_nn = np.round(y).astype(int)\n        x_nn = np.round(x).astype(int)\n        y_nn = np.clip(y_nn, 0, in_rows - 1)\n        x_nn = np.clip(x_nn, 0, in_cols - 1)\n\n        # Shape will broadcast to (n_ex, out_rows, out_cols)\n        Y = X[batch_idx, y_nn[None, :, :], x_nn[None, :, :], :]\n\n    else:\n        # Bilinear interpolation\n        y0 = np.floor(y).astype(int)\n        x0 = np.floor(x).astype(int)\n        y1 = y0 + 1\n        x1 = x0 + 1\n\n        # Clip to valid range\n        y0 = np.clip(y0, 0, in_rows - 1)\n        x0 = np.clip(x0, 0, in_cols - 1)\n        y1 = np.clip(y1, 0, in_rows - 1)\n        x1 = np.clip(x1, 0, in_cols - 1)\n\n        # Fractions\n        wy1 = (y - y0)[None, :, :][..., None]  # shape (1,out_rows,out_cols,1)\n        wx1 = (x - x0)[None, :, :][..., None]\n        wy0 = 1.0 - wy1\n        wx0 = 1.0 - wx1\n\n        # Gather corner values\n        I00 = X[batch_idx, y0[None, :, :], x0[None, :, :], :]  # top-left\n        I01 = X[batch_idx, y0[None, :, :], x1[None, :, :], :]  # top-right\n        I10 = X[batch_idx, y1[None, :, :], x0[None, :, :], :]  # bottom-left\n        I11 = X[batch_idx, y1[None, :, :], x1[None, :, :], :]  # bottom-right\n\n        # Weighted sum\n        Y = (I00 * wy0 * wx0 +\n             I01 * wy0 * wx1 +\n             I10 * wy1 * wx0 +\n             I11 * wy1 * wx1)\n\n    # Round to 4 decimal places\n    Y = np.round(Y, 4)\n    return Y\n```\n\nExplanation:\n\n1. We compute scaling factors so that output\u2010pixel centers map onto the \u201ccontinuous\u201d coordinates of the input image via  \n   y = (i+0.5)\\*in_rows/out_rows \u2013 0.5  \n   x = (j+0.5)\\*in_cols/out_cols \u2013 0.5  \n2. For \u201cneighbor\u201d mode we round to the nearest integer input coordinate.  \n3. For \u201cbilinear\u201d mode we identify the four surrounding integer grid points (y0, x0), (y0, x1), (y1, x0), (y1, x1), compute their linear weights, and form the weighted sum.  \n4. We use NumPy\u2019s advanced indexing to vectorize over the batch dimension.  \n5. Finally, we round all output values to 4 decimal places as required."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n   Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function returns `(-1, None, round(G_whole_dataset, 4))`.\n       X_arr = np.array(X, copy=False)\n    y_arr = np.array(y, copy=False)\n    n_samples, n_features = X_arr.shape\n\n    # Map class labels to 0..(n_classes-1)\n    classes, y_mapped = np.unique(y_arr, return_inverse=True)\n    n_classes = classes.size\n\n    # Compute Gini of the whole dataset\n    total_counts = np.bincount(y_mapped, minlength=n_classes)\n    probs_whole = total_counts / n_samples\n    G_whole = 1.0 - np.sum(probs_whole * probs_whole)\n\n    # If only one class present, no valid split by spec\n    if n_classes <= 1:\n        return (-1, None, round(G_whole, 4))\n\n    best_gini = np.inf\n    best_j = -1\n    best_v = None\n    tol = 1e-12\n\n    # Iterate over features\n    for j in range(n_features):\n        Xj = X_arr[:, j]\n        # sort samples by feature j\n        order = np.argsort(Xj, kind='mergesort')\n        x_sorted = Xj[order]\n        y_sorted = y_mapped[order]\n\n        # Get unique feature values, their first indices and counts\n        unique_vals, start_idxs, counts = np.unique(\n            x_sorted, return_index=True, return_counts=True\n        )\n\n        left_counts = np.zeros(n_classes, dtype=int)\n        n_left = 0\n\n        # For each unique threshold value v\n        for v, start, cnt in zip(unique_vals, start_idxs, counts):\n            grp = y_sorted[start : start + cnt]\n            # update left node counts\n            bc = np.bincount(grp, minlength=n_classes)\n            left_counts += bc\n            n_left += cnt\n            n_right = n_samples - n_left\n\n            # skip invalid splits\n            if n_left == 0 or n_right == 0:\n                continue\n\n            # Gini of left\n            p_left = left_counts / n_left\n            G_left = 1.0 - np.sum(p_left * p_left)\n            # Gini of right\n            right_counts = total_counts - left_counts\n            p_right = right_counts / n_right\n            G_right = 1.0 - np.sum(p_right * p_right)\n\n            # Weighted Gini\n            G_split = (n_left / n_samples) * G_left + (n_right / n_samples) * G_right\n\n            # Compare with best split found so far\n            if G_split + tol < best_gini:\n                best_gini = G_split\n                best_j = j\n                best_v = v\n            elif abs(G_split - best_gini) < tol:\n                # tie-breaker: smaller feature index, then smaller threshold\n                if (j < best_j) or (j == best_j and v < best_v):\n                    best_j = j\n                    best_v = v\n\n    # If no valid split found, return whole-data Gini\n    if best_j == -1:\n        return (-1, None, round(G_whole, 4))\n\n    # Ensure threshold is a native Python scalar\n    if hasattr(best_v, 'item'):\n        best_v = best_v.item()\n\n    return (best_j, best_v, round(best_gini, 4))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    # normalize metric name\n    key = name.lower()\n    supported = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if key not in supported:\n        # return a stub that always fails\n        def _bad(a, b):\n            return -1\n        return _bad\n\n    def _distance(a, b):\n        # 1) Type check: must be list, tuple or np.ndarray\n        if not isinstance(a, (list, tuple, np.ndarray)) or \\\n           not isinstance(b, (list, tuple, np.ndarray)):\n            return -1\n\n        # 2) Convert to float arrays\n        try:\n            xa = np.array(a, dtype=float)\n            ya = np.array(b, dtype=float)\n        except Exception:\n            return -1\n\n        # 3) One-dimensional, non-empty, same length\n        if xa.ndim != 1 or ya.ndim != 1:\n            return -1\n        if xa.size == 0 or ya.size == 0:\n            return -1\n        if xa.shape[0] != ya.shape[0]:\n            return -1\n\n        # 4) Compute desired metric\n        if key == 'euclidean':\n            diff = xa - ya\n            val = np.linalg.norm(diff)\n        elif key == 'manhattan':\n            val = np.sum(np.abs(xa - ya))\n        elif key == 'chebyshev':\n            val = np.max(np.abs(xa - ya))\n        else:  # cosine\n            norm_x = np.linalg.norm(xa)\n            norm_y = np.linalg.norm(ya)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            cos_sim = np.dot(xa, ya) / (norm_x * norm_y)\n            val = 1.0 - cos_sim\n\n        # 5) Round result to 4 decimals and return\n        return round(float(val), 4)\n\n    return _distance\n```\n\nExplanation of key points:\n\n1. **Metric selection**: We first lowercase the provided name and check it against the supported set. If it\u2019s not supported, we immediately return a stub function that always yields -1.\n\n2. **Validation in the returned function**:\n   - Both inputs must be `list`, `tuple`, or `np.ndarray`.\n   - We attempt to cast them to NumPy arrays of dtype `float`; failure \u2192 -1.\n   - We enforce 1D arrays (`ndim == 1`), non-empty (`size > 0`), and equal lengths.\n   - For the cosine distance only, we check that neither vector has zero Euclidean norm.\n\n3. **Distance computations**: Each formula is implemented via NumPy operations. Finally, we round to four decimal places with Python\u2019s built-in `round` and return that as a `float`.\n\n4. **Error signaling**: Any violation of the above rules yields an immediate `-1` (integer) return."}
{"task_id": 193, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    # Check for array-like inputs (Python list or NumPy array)\n    if isinstance(z, (list, np.ndarray)):\n        # If it's empty, just return an empty list\n        if len(z) == 0:\n            return []\n        # Otherwise iterate and compute element-wise\n        result = []\n        for element in z:\n            x = float(element)\n            y = x / (1.0 + abs(x))\n            result.append(round(y, 4))\n        return result\n\n    # Otherwise treat as a scalar (int, float, or NumPy scalar)\n    x = float(z)\n    y = x / (1.0 + abs(x))\n    return round(y, 4)\n```\n\nExample usage:\n\n```python\nprint(softsign(5))              # 0.8333\nprint(softsign(-2.0))           # -0.6667\nprint(softsign([0, 1, 2, -3]))  # [0.0, 0.5, 0.6667, -0.75]\nprint(softsign(np.array([10, -10])))  # [0.9091, -0.9091]\nprint(softsign([]))             # []\n```"}
{"task_id": 194, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adagrad_update(weights: list[float],\n                   gradients: list[float],\n                   G: list[float] | None = None,\n                   learning_rate: float = 0.01,\n                   eps: float = 1e-8) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized ops\n    w = np.array(weights, dtype=float)\n    g = np.array(gradients, dtype=float)\n    \n    # Initialize G if this is the first call\n    if G is None:\n        G_prev = np.zeros_like(w)\n    else:\n        G_prev = np.array(G, dtype=float)\n    \n    # Accumulate squared gradients\n    G_new = G_prev + g**2\n    \n    # Compute the adaptive learning rate for each parameter\n    adjusted_lr = learning_rate / (np.sqrt(G_new + eps))\n    \n    # Update parameters\n    w_new = w - adjusted_lr * g\n    \n    # Round results to 6 decimal places\n    w_new_rounded = np.round(w_new, 6)\n    G_new_rounded = np.round(G_new, 6)\n    \n    # Return as Python lists\n    return w_new_rounded.tolist(), G_new_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. Convert `weights`, `gradients`, and (if provided) `G` into NumPy arrays for efficient elementwise operations.  \n2. If `G` is `None`, initialize it to zeros of the same shape as `weights`.  \n3. Update the accumulator: `G_new = G_prev + gradients**2`.  \n4. Compute per-parameter learning rates: `learning_rate / sqrt(G_new + eps)`.  \n5. Apply the Adagrad update: `w_new = weights - adjusted_lr * gradients`.  \n6. Round both the new weights and the new accumulator to 6 decimal places and convert back to Python lists."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(\n    env: Any,\n    md_action: bool,\n    cont_action: bool\n) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional (i.e., env.action_space.spaces exists).\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    # Multi-dimensional case: inspect each sub-space\n    if md_action:\n        subspaces = env.action_space.spaces\n        action_dim = len(subspaces)\n        n_actions_per_dim: List[Union[int, float]] = []\n        saw_cont = False\n\n        for sp in subspaces:\n            if hasattr(sp, \"n\"):\n                # discrete sub-space\n                n_actions_per_dim.append(sp.n)\n            elif hasattr(sp, \"shape\"):\n                # continuous sub-space\n                n_actions_per_dim.append(np.inf)\n                saw_cont = True\n            else:\n                raise ValueError(\"Sub-space is neither discrete nor continuous\")\n\n        # If any sub-space is continuous, we cannot enumerate all actions\n        if saw_cont:\n            action_ids = None\n        else:\n            # fully discrete: cartesian product over all dims\n            ranges = [range(int(n)) for n in n_actions_per_dim]  # cast to int just in case\n            action_ids = list(product(*ranges))\n\n        return n_actions_per_dim, action_ids, action_dim\n\n    # Single-dimensional case\n    else:\n        space = env.action_space\n\n        # Continuous single space: may itself be multi-dimensional (e.g. Box(shape=(d,)))\n        if cont_action:\n            # shape[0] tells us how many continuous dimensions\n            shape = getattr(space, \"shape\", ())\n            if not shape:\n                # fallback: treat as a single scalar dimension\n                action_dim = 1\n            else:\n                action_dim = int(shape[0])\n\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n            return n_actions_per_dim, action_ids, action_dim\n\n        # Discrete single space\n        else:\n            if not hasattr(space, \"n\"):\n                raise ValueError(\"Expected a discrete space with attribute 'n'\")\n            n = int(space.n)\n            action_dim = 1\n            n_actions_per_dim = [n]\n            # enumerate all discrete actions as 1-tuples\n            action_ids = [(i,) for i in range(n)]\n            return n_actions_per_dim, action_ids, action_dim\n```\n\nExplanation of the main steps:\n\n1. If `md_action` is True, we assume `env.action_space.spaces` exists and loop over each sub-space:\n   - If the sub-space has `.n`, it\u2019s discrete, so we append that integer.\n   - If it has `.shape`, it\u2019s continuous, so we append `np.inf` and mark that we saw a continuous dimension.\n   - If any sub-space is continuous, we set `action_ids = None`. Otherwise we build the cartesian product of all discrete ranges.\n\n2. If `md_action` is False:\n   - If `cont_action` is True, we read `space.shape` (if present) to find out how many continuous dimensions there are, set all `n_actions_per_dim` entries to `np.inf`, and return `action_ids=None`.\n   - Otherwise it\u2019s a single discrete dimension with `.n`; we return that along with the list of 1-tuples for all valid actions.\n\nIn all cases we return `(n_actions_per_dim, action_ids, action_dim)` without mutating any inputs."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # If there are no documents, there are no topics to estimate.\n    if not phi:\n        # return V rows of empty topic lists\n        return [[] for _ in range(V)]\n\n    # Number of topics inferred from phi of the first document\n    T = phi[0].shape[1]\n\n    # Accumulator for the counts: rows=vocabulary, cols=topics\n    counts = np.zeros((V, T), dtype=float)\n\n    # Sum over all documents and all tokens\n    for doc_phi, doc_words in zip(phi, corpus):\n        # doc_phi.shape == (N_d, T), len(doc_words) == N_d\n        for n, word_idx in enumerate(doc_words):\n            counts[word_idx, :] += doc_phi[n, :]\n\n    # Column-normalise: each topic t sums over all words v to 1\n    col_sums = counts.sum(axis=0)      # shape (T,)\n    for t in range(T):\n        if col_sums[t] > 0:\n            counts[:, t] /= col_sums[t]\n        # else: leave the column as all zeros (no mass for that topic)\n\n    # Round to 4 decimal places\n    beta = np.round(counts, 4)\n\n    # Convert to a nested list: beta[v][t]\n    return beta.tolist()\n```\n\nExplanation of key steps:\n\n1. **Initialization**  \n   We create a zero matrix `counts` of shape `(V, T)`.\n\n2. **Accumulation**  \n   For each document `d` and each token position `n`, we read the word index `v = corpus[d][n]` and add the vector `\u03c6^{(d)}_{n, :}` to `counts[v, :]`.\n\n3. **Normalization**  \n   After summing up all contributions, each column `t` in `counts` holds the unnormalized counts for topic `t`. We divide by the column sum so that each column sums to 1. If the column sum is zero (no mass for that topic), we leave it as all zeros.\n\n4. **Rounding and Output**  \n   We round each entry to 4 decimal places and convert the NumPy array to a nested Python list, where each inner list corresponds to one vocabulary word and its probabilities across the `T` topics."}
{"task_id": 199, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef split(X: np.ndarray, y: np.ndarray, value: float) -> tuple[list[int | float], list[int | float]]:\n   Split the label array `y` into two parts based on a threshold applied to `X`.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        1-D array of feature values.\n    y : np.ndarray\n        1-D array of labels, same length as `X`.\n    value : float\n        Threshold used for the split.\n\n    Returns\n    -------\n    tuple[list[int | float], list[int | float]]\n        (y_left, y_right) where\n        * y_left  contains labels with `X < value`.\n        * y_right contains labels with `X >= value`.\n       # Ensure X and y have the same length\n    if X.shape[0] != y.shape[0]:\n        raise ValueErrorX and y must have the same length    y_left: list[int | float] = []\n    y_right: list[int | float] = []\n\n    for xi, yi in zip(X, y):\n        if xi < value:\n            y_left.append(yi)\n        else:\n            y_right.append(yi)\n\n    return y_left, y_right\n```\n\nExplanation:\n- We iterate through `X` and `y` in tandem using `zip`.\n- If `xi < value`, we append the corresponding label `yi` to `y_left`; otherwise we append to `y_right`.\n- We return two pure Python lists (empty if there were no matching elements)."}
{"task_id": 200, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    # Convert weights to a NumPy array (works for nested lists, tuples, etc.)\n    arr = np.array(weights, dtype=float)\n    \n    # If there are no elements, penalty is zero\n    if arr.size == 0:\n        return 0.0\n    \n    # Compute sum of absolute values\n    abs_sum = np.abs(arr).sum()\n    \n    # Multiply by C, round to 4 decimals, and return as float\n    penalty = C * abs_sum\n    return float(round(penalty, 4))\n```\n\nExplanation:\n1. We convert any sequence or array of weights into a NumPy array of floats.\n2. If the array has zero elements (`arr.size == 0`), we immediately return `0.0`.\n3. Otherwise we compute the L1 norm by summing the absolute values of all entries.\n4. We multiply by the regularization strength `C`, round to 4 decimal places, and return it as a Python float."}
{"task_id": 201, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-12\n    p = np.array(p, dtype=float)  # ensure float array\n\n    if axis is None:\n        # Treat the entire tensor as one vector\n        norm = np.linalg.norm(p.ravel(), ord=2)\n        factor = min(1.0, m / (norm + eps))\n        clipped = p * factor\n    else:\n        # Compute L2-norm along the given axis, keep dims for broadcasting\n        norm = np.linalg.norm(p, ord=2, axis=axis, keepdims=True)\n        factor = np.minimum(1.0, m / (norm + eps))\n        clipped = p * factor\n\n    # Round to 4 decimal places and convert to nested Python lists\n    clipped_rounded = np.round(clipped, 4)\n    return clipped_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. We add a tiny `eps = 1e-12` to avoid division by zero.\n2. If `axis` is `None`, we flatten `p` and treat the entire array as one vector.\n3. Otherwise we call `np.linalg.norm` with `keepdims=True` so that the result can broadcast back onto the original shape.\n4. We compute a per\u2010slice scaling factor `min(1, m/(\u2016slice\u2016\u2082 + \u03b5))`.\n5. We multiply `p` by that factor, round the result to 4 decimal places, then convert to nested Python lists with `.tolist()`."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n_samples = X.shape[0]\n    if k < 1 or k > n_samples:\n        raise ValueError(\"k must be between 1 and n_samples\")\n    # Step 1: initial medoids are the first k samples\n    medoids = list(range(k))\n    medoid_set = set(medoids)\n\n    # Precompute full pairwise distance matrix\n    # D[i, j] = distance between X[i] and X[j]\n    diff = X[:, None, :] - X[None, :, :]\n    D = np.sqrt(np.sum(diff * diff, axis=2))\n\n    # Function to compute total cost given a list of medoid indices\n    def total_cost(meds):\n        # distances of each point to its nearest medoid\n        dm = D[:, meds]           # shape (n_samples, k)\n        return float(np.min(dm, axis=1).sum())\n\n    # Initial cost\n    current_cost = total_cost(medoids)\n\n    # Step 2: try swaps until no improvement\n    while True:\n        best_delta = 0.0\n        best_swap = None  # tuple (medoid_list_index, new_medoid_idx, new_cost)\n\n        # For each medoid position i_med in the medoids list\n        for i_med, m in enumerate(medoids):\n            # For each non-medoid candidate o\n            for o in range(n_samples):\n                if o in medoid_set:\n                    continue\n                # form new medoid list by swapping medoids[i_med] -> o\n                cand = medoids.copy()\n                cand[i_med] = o\n                # compute its cost\n                c_cost = total_cost(cand)\n                delta = current_cost - c_cost\n                # keep the swap with largest positive cost reduction\n                if delta > best_delta:\n                    best_delta = delta\n                    best_swap = (i_med, o, c_cost)\n\n        # If we found a strictly improving swap, apply it\n        if best_swap is not None:\n            i_med, new_medoid, new_cost = best_swap\n            old_medoid = medoids[i_med]\n            medoids[i_med] = new_medoid\n            medoid_set.remove(old_medoid)\n            medoid_set.add(new_medoid)\n            current_cost = new_cost\n        else:\n            # no improving swap found; we're done\n            break\n\n    # Step 3: assign labels based on final medoids\n    # For each sample, find the index of the closest medoid in the medoids list\n    distances_to_meds = D[:, medoids]   # shape (n_samples, k)\n    labels = np.argmin(distances_to_meds, axis=1)\n\n    # Convert to Python list of ints\n    return [int(l) for l in labels]\n```\n\nExplanation of key steps:\n1. We initialize the medoids to the first `k` indices.\n2. We precompute the full `n\u00d7n` distance matrix `D` so that cost evaluations inside the swap loops are fast.\n3. In each iteration, we consider every possible single swap between a current medoid and a non-medoid. We pick the swap that yields the largest reduction in total cost, and apply it if that reduction is strictly positive.\n4. Once no swap can improve the cost, we assign each point to the nearest medoid (breaking ties by the medoid\u2019s position in the current list) and return the labels."}
{"task_id": 203, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    # Convert to numpy array if needed\n    arr = np.array(probs, dtype=float) if not isinstance(probs, np.ndarray) else probs.astype(float)\n    # Must be 1-D\n    if arr.ndim != 1:\n        return -1\n    N = arr.size\n    # Check for negative probabilities\n    if np.any(arr < 0):\n        return -1\n    # Check sum to 1 within tolerance\n    if abs(arr.sum() - 1.0) > 1e-12:\n        return -1\n\n    # Step 1: scale probabilities by N\n    scaled = list(arr * N)\n\n    # Step 2: initialize small and large lists\n    small = [i for i, v in enumerate(scaled) if v < 1.0]\n    large = [i for i, v in enumerate(scaled) if v >= 1.0]\n\n    # Prepare tables\n    prob_table = [0.0] * N\n    alias_table = [0] * N  # default 0\n\n    # Step 3: process until one of the lists is empty\n    while small and large:\n        l = small.pop()   # last element from small\n        g = large.pop()   # last element from large\n\n        prob_table[l] = scaled[l]\n        alias_table[l] = g\n\n        # Update scaled probability of g\n        scaled[g] = scaled[g] + scaled[l] - 1.0\n        # Re-classify g\n        if scaled[g] < 1.0:\n            small.append(g)\n        else:\n            large.append(g)\n\n    # Step 4: set remaining probabilities to 1\n    for idx in large + small:\n        prob_table[idx] = 1.0\n        # alias_table[idx] remains at its default (0) if unassigned\n\n    # Round prob_table to 4 decimal places\n    prob_table = [round(p, 4) for p in prob_table]\n\n    return prob_table, alias_table\n```\n\nExplanation of key steps:\n1. **Validation**: We ensure the input is a 1-D array of non\u2010negative floats that sum to 1 (within `1e-12` tolerance). If not, we return `-1`.\n2. **Scaling**: Each probability is multiplied by `N` to form `scaled`.\n3. **Lists `small` and `large`**: We collect indices where `scaled[i] < 1` vs. `>= 1`, preserving ascending order.\n4. **Main loop**:\n   - Pop one index from each list (`l` from `small`, `g` from `large`).\n   - Set `prob_table[l] = scaled[l]` and `alias_table[l] = g`.\n   - Adjust `scaled[g]` by `scaled[g] + scaled[l] - 1`.\n   - Reassign `g` to `small` or `large` based on the updated `scaled[g]`.\n5. **Finalization**: Any index left over (in `small` or `large`) receives a probability of `1.0`; its alias remains the default `0`.\n6. **Rounding and output**: `prob_table` entries are rounded to four decimals, and both tables are returned as Python lists.\n\nExample:\n```python\n>>> build_alias_table([0.1, 0.2, 0.7])\n([0.3, 0.6, 1.0], [2, 2, 0])\n```"}
{"task_id": 204, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for x in data:\n        # Count None\n        if x is None:\n            count += 1\n        else:\n            # Count NaN (float('nan'), np.nan, np.float64('nan'), etc.)\n            try:\n                if math.isnan(x):\n                    count += 1\n            except (TypeError, ValueError):\n                # x is not a float or float-like, so skip\n                pass\n    return count\n```"}
{"task_id": 205, "completion_id": 0, "completion": "```python\ndef get_gym_environs(registry: list) -> list:\n   Extract unique environment ids from a registry.\n\n    Args:\n        registry (list): A list whose elements can be any Python object. When an\n            element is a dictionary **and** contains the keyid the value of\n            that key is considered an environment id.\n\n    Returns:\n        list: A list of unique ids in the order they first appear in *registry*.\n       seen = set()\n    unique_ids = []\n    for item in registry:\n        if isinstance(item, dict) andid in item:\n            env_id = itemid            if env_id not in seen:\n                seen.add(env_id)\n                unique_ids.append(env_id)\n    return unique_ids\n```\n\nExample usage:\n\n```python\nregistry = [\n   idCartPole-v1max_steps 200},\n   foo 42},\n   idMountainCar-v0   idCartPole-v1   not a dict   idAcrobot-v1]\n\nprint(get_gym_environs(registry))\n# Output: ['CartPole-v1', 'MountainCar-v0', 'Acrobot-v1']\n```"}
{"task_id": 206, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef absolute_error(actual, predicted):\n   Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        A one-dimensional sequence of ground-truth numeric values.\n    predicted : list | tuple | np.ndarray\n        A one-dimensional sequence of predicted numeric values.\n\n    Returns\n    -------\n    float | int\n        The MAE rounded to four decimal places. If the two sequences are not\n        of equal length or are not one-dimensional, return -1.\n       # Convert inputs to numpy arrays of floats\n    try:\n        actual_arr = np.asarray(actual, dtype=float)\n        predicted_arr = np.asarray(predicted, dtype=float)\n    except Exception:\n        return -1\n\n    # Validate one-dimensionality\n    if actual_arr.ndim != 1 or predicted_arr.ndim != 1:\n        return -1\n\n    # Validate equal length\n    if actual_arr.shape[0] != predicted_arr.shape[0]:\n        return -1\n\n    # Compute MAE\n    mae = np.mean(np.abs(actual_arr - predicted_arr))\n    # Round to 4 decimal places and return\n    return round(float(mae), 4)\n```\n\nExample usage:\n```python\n>>> absolute_error([1, 2, 3], [1.1, 1.9, 3.2])\n0.1333\n>>> absolute_error(np.array([0, 5]), np.array([1, 4]))\n0.5\n>>> absolute_error([1, 2], [[1, 2], [3, 4]])\n-1\n```"}
{"task_id": 207, "completion_id": 0, "completion": "```python\ndef convolution_shape(img_height: int,\n                      img_width: int,\n                      filter_shape: tuple[int, int],\n                      stride: tuple[int, int],\n                      padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    # Unpack filter, stride, padding\n    KH, KW = filter_shape\n    SH, SW = stride\n    PH, PW = padding\n\n    # Basic sanity checks: all dims must be ints\n    params = [img_height, img_width, KH, KW, SH, SW, PH, PW]\n    if not all(isinstance(x, int) for x in params):\n        return -1\n\n    # All sizes and strides must be positive; padding can be zero or positive\n    if img_height <= 0 or img_width <= 0:\n        return -1\n    if KH <= 0 or KW <= 0:\n        return -1\n    if SH <= 0 or SW <= 0:\n        return -1\n    if PH < 0 or PW < 0:\n        return -1\n\n    # Compute the \"effective\" spatial extents after padding\n    # and subtract the filter size\n    num_h = img_height + 2 * PH - KH\n    num_w = img_width + 2 * PW - KW\n\n    # The numerators must be >= 0 (so output dims >= 1)\n    # and divisible by the respective stride\n    if num_h < 0 or num_w < 0:\n        return -1\n    if num_h % SH != 0 or num_w % SW != 0:\n        return -1\n\n    # Compute output dims\n    OH = num_h // SH + 1\n    OW = num_w // SW + 1\n\n    # Final check: should be positive integers\n    if OH <= 0 or OW <= 0:\n        return -1\n\n    return (OH, OW)\n```\n\nExplanation of key steps:\n1. **Unpacking & Type Checking**  \n   We extract `(KH, KW)`, `(SH, SW)`, `(PH, PW)` and ensure every parameter is an `int`.\n2. **Value Constraints**  \n   - Image and filter sizes must be strictly positive.  \n   - Strides must be strictly positive.  \n   - Padding may be zero or positive.  \n3. **Numerator Calculation**  \n   For each dimension we form  \n     numerator = (input + 2\u00b7padding \u2212 kernel).  \n   If that is negative, the filter \u201covershoots\u201d the image \u2192 invalid.  \n4. **Divisibility Check**  \n   The numerator must be cleanly divisible by the stride to yield an integer output size.  \n5. **Compute & Return**  \n   OH = numerator_h/SH + 1, OW = numerator_w/SW + 1.  \n   Both must be \u22651; otherwise return \u20131."}
{"task_id": 208, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one_hot_encode(labels: list[str], categories: list[str] | None = None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length N.\n        categories: Optional complete list of unique categories of length C.\n            If None, the set of categories is inferred from labels in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where C is the number of categories. If an unknown label is\n        found when categories is supplied, the function returns -1.\n    \"\"\"\n    # Infer categories if not provided\n    if categories is None:\n        seen = set()\n        categories = []\n        for lab in labels:\n            if lab not in seen:\n                seen.add(lab)\n                categories.append(lab)\n\n    # Build a mapping from category to column index\n    idx_map = {cat: i for i, cat in enumerate(categories)}\n    C = len(categories)\n    N = len(labels)\n\n    # If categories were provided, ensure all labels are known\n    if idx_map and any(lab not in idx_map for lab in labels):\n        return -1\n\n    # Create the one-hot matrix\n    mat = np.zeros((N, C), dtype=int)\n    for row, lab in enumerate(labels):\n        col = idx_map[lab]\n        mat[row, col] = 1\n\n    return mat.tolist()\n```\n\nExample usage:\n\n```python\nlabels = ['red', 'green', 'blue', 'green']\ncats   = ['red', 'green', 'blue']\nprint(one_hot_encode(labels, cats))\n# Output:\n# [[1, 0, 0],\n#  [0, 1, 0],\n#  [0, 0, 1],\n#  [0, 1, 0]]\n```\n\nIf you omit `categories`, it will infer them in first\u2010appearance order:\n\n```python\nprint(one_hot_encode(['dog', 'cat', 'dog', 'mouse']))\n# Output:\n# [[1, 0, 0],\n#  [0, 1, 0],\n#  [1, 0, 0],\n#  [0, 0, 1]]\n```\n\nIf an unknown label shows up when you do supply `categories`, the function returns `-1`."}
{"task_id": 209, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    tol = 1e-8\n    K = len(payoffs)\n    # Number of arms must match\n    if K != len(payoff_probs):\n        return -1\n\n    expected_values = []\n    for k in range(K):\n        vals = payoffs[k]\n        probs = payoff_probs[k]\n\n        # Lengths must match\n        if len(vals) != len(probs):\n            return -1\n\n        total_prob = sum(probs)\n        # Probabilities must sum to 1 within tolerance\n        if abs(total_prob - 1.0) > tol:\n            return -1\n\n        # Compute expected value\n        ev = 0.0\n        for v, p in zip(vals, probs):\n            ev += v * p\n        expected_values.append(ev)\n\n    # Round to 4 decimals\n    rounded_evs = [round(ev, 4) for ev in expected_values]\n\n    # Identify best arm (smallest index on ties)\n    best_ev = max(rounded_evs)\n    best_arm = rounded_evs.index(best_ev)\n\n    return (rounded_evs, best_arm, best_ev)\n```"}
{"task_id": 210, "completion_id": 0, "completion": "```python\nimport functools\nfrom typing import Callable, Any\n\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n    @functools.wraps(decorator_func)\n    def _decorator(*args, **kwargs):\n        # If called as @decorator without args: a single positional\n        # argument which is the function to wrap\n        if len(args) == 1 and not kwargs and callable(args[0]):\n            return decorator_func(args[0])\n        # Otherwise, return a real decorator waiting for the function\n        def _real_decorator(func):\n            return decorator_func(func, *args, **kwargs)\n        return _real_decorator\n\n    return _decorator\n```\n\nExplanation:\n\n1. We wrap `decorator_func` in another function `_decorator` decorated with `@functools.wraps(decorator_func)` so that metadata like `__name__` and `__doc__` are preserved.\n2. Inside `_decorator`, we distinguish two cases:\n   - If it's invoked with exactly one positional argument which is callable (and no keyword arguments), we treat that argument as the function to be decorated and call `decorator_func` immediately.\n   - Otherwise, we return an inner `_real_decorator` that will receive the target function later and then call `decorator_func(func, *args, **kwargs)`.\n3. The returned `_decorator` can thus be used both as `@my_deco` and `@my_deco(...)`."}
{"task_id": 211, "completion_id": 0, "completion": "```python\ndef accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    # Check for invalid inputs: empty or unequal lengths\n    if len(actual) == 0 or len(predicted) == 0 or len(actual) != len(predicted):\n        return -1\n\n    # Count the number of mismatches\n    mismatches = 0\n    for a, p in zip(actual, predicted):\n        if a != p:\n            mismatches += 1\n\n    # Compute classification error and accuracy\n    total = len(actual)\n    classification_error = mismatches / total\n    accuracy_value = 1.0 - classification_error\n\n    # Round to four decimal places and return\n    return round(accuracy_value, 4)\n```\n\nExplanation of key steps:\n1. We first guard against invalid inputs: sequences of different lengths or empty sequences. In those cases we immediately return `-1`.  \n2. We iterate through the paired labels `(a, p)` via `zip` and count how many times they differ (`mismatches`).  \n3. Classification error is the fraction of mismatches: `mismatches / total`.  \n4. Accuracy is `1 - classification_error`.  \n5. Finally we round the accuracy to four decimal places as required."}
{"task_id": 212, "completion_id": 0, "completion": "```python\nfrom collections import deque\n\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  \n    When no path exists an empty list is returned.\n    \"\"\"\n    src = \"input\"\n    dst = \"output_realtime\"\n\n    # Quick bail-out if there's no 'input' at all:\n    if src not in graph:\n        return []\n\n    # Standard BFS queue: each entry is (node, path_from_input_to_node)\n    q = deque()\n    q.append((src, [src]))\n\n    # To avoid revisiting cycles or longer paths to the same node:\n    visited = set([src])\n\n    while q:\n        node, path = q.popleft()\n        # If we've reached the target, we're guaranteed:\n        # 1) It's a shortest path (BFS).\n        # 2) It's lexicographically smallest among shortest (we enqueue neighbors in sorted order\n        #    and mark visited on first encounter).\n        if node == dst:\n            return path\n\n        # Explore outgoing edges in sorted order for lex-min guarantee\n        for nbr in sorted(graph.get(node, [])):\n            if nbr not in visited:\n                visited.add(nbr)\n                q.append((nbr, path + [nbr]))\n\n    # No path found\n    return []\n```\n\nExplanation of key points:\n\n1. We do a breadth\u2010first search (BFS) from `\"input\"`.  \n2. By sorting each node\u2019s adjacency list before enqueuing, we ensure that among all shortest paths, the lexicographically smallest path is discovered first.  \n3. We track `visited` so that each node is enqueued only once, preventing infinite loops in the presence of cycles and ensuring we only keep the earliest (i.e. shortest and lex\u2010smallest) way to reach each node.  \n4. The first time we dequeue `\"output_realtime\"`, thanks to BFS layering and our sorted\u2010neighbors policy, we know that path is both shortest and lexicographically minimal.  \n5. If the BFS exhausts without reaching the target, we return an empty list."}
{"task_id": 213, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n        If fan_in == 0 (i.e. any dimension is zero), returns [].\n    \"\"\"\n    # If any dimension is zero, fan_in will be zero \u2192 return empty list\n    if any(dim == 0 for dim in shape):\n        return []\n\n    # Compute fan_in and fan_out\n    if len(shape) == 0:\n        # scalar weight tensor\n        fan_in = fan_out = 1\n    elif len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        fan_in, fan_out = shape[0], shape[1]\n    else:\n        # convolutional kernels or higher-dim tensors\n        out_channels, in_channels = shape[0], shape[1]\n        receptive_field_size = int(np.prod(shape[2:]))\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    # Standard deviation for He Normal\n    std = np.sqrt(2.0 / fan_in)\n\n    # Use a fixed seed for reproducibility\n    rng = np.random.default_rng(42)\n    weights = rng.normal(loc=0.0, scale=std, size=shape)\n\n    return weights.tolist()\n```\n\nExplanation of key steps:\n1. If any dimension in `shape` is zero, we immediately return `[]` since `fan_in == 0`.\n2. We handle `len(shape)` cases:\n   - 0-d tensor (scalar): treat both fans as 1.\n   - 1-d tensor: `fan_in = fan_out = shape[0]`.\n   - 2-d tensor: `fan_in = shape[0]`, `fan_out = shape[1]`.\n   - \u22653-d tensor: interpret as convolutional weights.\n3. Compute `std = sqrt(2 / fan_in)` and draw samples from `\ud835\udca9(0, std)` using a NumPy RNG seeded to 42.\n4. Return the result as a nested Python list via `.tolist()`."}
{"task_id": 214, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function returns -1 if the two input sequences do not share the\n    same length. Otherwise, it returns the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays are supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    arr_actual = np.array(actual)\n    arr_predicted = np.array(predicted)\n\n    # Check for matching shapes (lengths)\n    if arr_actual.shape != arr_predicted.shape:\n        return -1\n\n    # Compute the MSE\n    mse_value = np.mean((arr_actual - arr_predicted) ** 2)\n\n    # Round to 4 decimal places and return as native Python float\n    return float(np.round(mse_value, 4))\n```\n\nExplanation of key steps:\n1. We coerce both inputs to NumPy arrays so that arithmetic and shape checks work uniformly for lists or arrays.  \n2. If their shapes differ, we immediately return `-1`.  \n3. Otherwise we compute `(actual - predicted)**2`, take the mean, and round to four decimal places with `np.round`.  \n4. Finally, we cast the result back to a Python `float` before returning."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test,\n                           degree=1,\n                           reg_factor=0.05,\n                           l1_ratio=0.5,\n                           n_iterations=3000,\n                           learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    Xtr = np.array(x_train, dtype=float)\n    ytr = np.array(y_train, dtype=float).reshape(-1)\n    Xte = np.array(x_test, dtype=float)\n\n    # Basic validation\n    if n_iterations < 1:\n        return -1\n    if Xtr.ndim != 2 or Xte.ndim != 2:\n        return -1\n    n_tr, p_tr = Xtr.shape\n    n_te, p_te = Xte.shape\n    if p_tr != p_te:\n        return -1\n    if ytr.shape[0] != n_tr:\n        return -1\n\n    # 1) Polynomial feature expansion (no interaction terms)\n    def poly_expand(X, deg):\n        if deg == 1:\n            return X.copy()\n        Xs = [X**d for d in range(1, deg+1)]\n        return np.hstack(Xs)\n\n    Xtr_poly = poly_expand(Xtr, degree)\n    Xte_poly = poly_expand(Xte, degree)\n\n    # 2) Standard-score (zero-mean, unit-variance) on non-bias features\n    means = Xtr_poly.mean(axis=0)\n    stds = Xtr_poly.std(axis=0)\n    stds_fixed = np.where(stds == 0, 1.0, stds)\n    Xtr_s = (Xtr_poly - means) / stds_fixed\n    Xte_s = (Xte_poly - means) / stds_fixed\n\n    # 3) Add bias column\n    Xtr_aug = np.hstack([np.ones((n_tr, 1)), Xtr_s])\n    Xte_aug = np.hstack([np.ones((n_te, 1)), Xte_s])\n\n    # Initialize weights (including bias)\n    n_features = Xtr_aug.shape[1]\n    w = np.zeros(n_features, dtype=float)\n\n    alpha = reg_factor\n    r = l1_ratio\n\n    # Batch gradient descent\n    for _ in range(n_iterations):\n        preds = Xtr_aug.dot(w)             # shape (n_tr,)\n        err = preds - ytr                  # shape (n_tr,)\n        # Gradient of MSE = (2/n) * X^T * err\n        grad = (2.0 / n_tr) * (Xtr_aug.T.dot(err))\n        # Add Elastic Net penalty gradient for j >= 1 (no reg on bias)\n        # d/dw_j [ alpha*( (1-r)/2 * w_j^2 + r*|w_j| ) ]\n        # = alpha * [ (1-r)*w_j + r*sign(w_j) ]\n        sign_w = np.sign(w)\n        grad[1:] += alpha * ((1 - r) * w[1:] + r * sign_w[1:])\n        # Update weights\n        w -= learning_rate * grad\n\n    # 4) Predict on test set\n    y_pred = Xte_aug.dot(w)\n    return np.round(y_pred, 4).tolist()\n```\n\nExplanation of key steps:\n1. **Validation**: Checks that the number of features in `x_train` and `x_test` match, and that `n_iterations` is positive.\n2. **Polynomial Expansion**: Raises each original feature to powers 1 through `degree` and concatenates them as new features.\n3. **Standardisation**: Computes mean and standard\u2010deviation on the expanded training features, transforms both train and test. Any feature with zero variance is left at unit scale.\n4. **Bias Term**: Prepends a column of ones so the bias weight (intercept) is learned alongside other weights.\n5. **Gradient Descent**:\n   - MSE gradient: `(2/n) * X^T (Xw - y)`\n   - Elastic Net gradient for non-bias weights: `\u03b1[(1\u2212l1_ratio)\u00b7w_j + l1_ratio\u00b7sign(w_j)]`\n6. **Prediction**: Applies learned weights to the test features and rounds results to 4 decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n   Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers (+1 or -1).\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n       # Convert inputs to NumPy arrays (float)\n    actual_arr = np.asarray(actual, dtype=float)\n    pred_arr = np.asarray(predicted, dtype=float)\n\n    # Compute sigmoid(probabilities) for each predicted score\n    prob = 1.0 / (1.0 + np.exp(-pred_arr))\n\n    # Compute Hessian: sigmoid(p) * (1 - sigmoid(p))\n    hess = prob * (1.0 - prob)\n\n    # Compute gradient: actual * sigmoid(- actual * predicted)\n    # Note: sigmoid(-a*p) = 1 / (1 + exp(a * p))\n    grad = actual_arr * (1.0 / (1.0 + np.exp(actual_arr * pred_arr)))\n\n    # Round each array to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n\n    # Convert back to Python lists and return\n    return grad_rounded.tolist(), hess_rounded.tolist(), prob_rounded.tolist()\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_value(cards: list[int]) -> int:\n        total = sum(cards)\n        # if there's at least one Ace and counting it as 11 (i.e. +10) doesn't bust,\n        # use that \"usable ace\" scenario\n        if 1 in cards and total + 10 <= 21:\n            return total + 10\n        return total\n\n    def is_natural(cards: list[int]) -> bool:\n        # exactly two cards: one Ace (1) and one 10-value card (10)\n        return len(cards) == 2 and 1 in cards and 10 in cards\n\n    p_score = hand_value(player)\n    d_score = hand_value(dealer)\n    p_nat = is_natural(player)\n    d_nat = is_natural(dealer)\n\n    # 1. Player busts -> -1\n    if p_score > 21:\n        return -1.0\n\n    # 4. Player wins with a natural blackjack -> +1.5 (unless dealer also has a natural)\n    if p_nat and not d_nat:\n        return 1.5\n\n    # 2. Dealer busts (and player did not) -> +1\n    if d_score > 21:\n        return 1.0\n\n    # 3. Compare scores\n    if p_score > d_score:\n        return 1.0\n    elif p_score < d_score:\n        return -1.0\n    else:\n        # tie\n        return 0.0\n```"}
{"task_id": 220, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    # If C_wt is empty, phi should be an empty list\n    if C_wt.size == 0:\n        phi = []\n    else:\n        # Vocabulary size V, number of topics T\n        V, T = C_wt.shape\n        # Sum of counts per topic (over all words)\n        col_sums = C_wt.sum(axis=0)  # shape (T,)\n        # Denominator for each topic: sum_v C_wt[v,t] + V*beta\n        denom_phi = col_sums + V * beta  # shape (T,)\n        # Apply smoothing and normalize\n        phi_mat = (C_wt + beta) / denom_phi[np.newaxis, :]\n        # Round to 4 decimals and convert to nested list\n        phi = np.round(phi_mat, 4).tolist()\n\n    # If C_dt is empty, theta should be an empty list\n    if C_dt.size == 0:\n        theta = []\n    else:\n        # Number of documents D, number of topics T (should match above T)\n        D, T_dt = C_dt.shape\n        # Sum of counts per document (over all topics)\n        row_sums = C_dt.sum(axis=1)  # shape (D,)\n        # Denominator for each document: sum_t C_dt[d,t] + T*alpha\n        denom_theta = row_sums + T_dt * alpha  # shape (D,)\n        # Apply smoothing and normalize\n        theta_mat = (C_dt + alpha) / denom_theta[:, np.newaxis]\n        # Round to 4 decimals and convert to nested list\n        theta = np.round(theta_mat, 4).tolist()\n\n    return phi, theta\n```\n\nExplanation of key steps:\n1. Check for empty count matrices (`size == 0`) and return an empty list for the corresponding distribution.\n2. For \u03d5 (phi):\n   - Compute the column sums of `C_wt` (one sum per topic).\n   - Add `V * \u03b2` to each column\u2010sum to form the denominator.\n   - Smooth counts by adding \u03b2 to each entry, then divide by the corresponding denominator.\n3. For \u03b8 (theta):\n   - Compute the row sums of `C_dt` (one sum per document).\n   - Add `T * \u03b1` to each row\u2010sum to form the denominator.\n   - Smooth counts by adding \u03b1 to each entry, then divide by the corresponding denominator.\n4. Round all probabilities to 4 decimal places and convert the NumPy arrays to nested Python lists."}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n       Compute the element\u2010wise squared logarithmic errors between two arrays.\n\n    Parameters\n    ----------\n    actual : array\u2010like of shape (n,)\n        True non\u2010negative target values.\n    predicted : array\u2010like of shape (n,)\n        Predicted non\u2010negative values.\n\n    Returns\n    -------\n    np.ndarray of shape (n,)\n        (log(1 + actual) - log(1 + predicted))**2 for each element.\n       # Convert inputs to NumPy arrays (no validation here)\n    a = np.asarray(actual, dtype=float)\n    p = np.asarray(predicted, dtype=float)\n    return (np.log1p(a) - np.log1p(p)) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n       Calculate Mean Squared Logarithmic Error (MSLE).\n\n    MSLE = mean_i [ log(1 + actual_i) \u2212 log(1 + predicted_i) ]^2\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non\u2010negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non\u2010negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n       # Convert to NumPy arrays\n    try:\n        act = np.asarray(actual, dtype=float)\n        pred = np.asarray(predicted, dtype=float)\n    except Exception:\n        return -1\n\n    # Validation checks\n    if act.shape != pred.shape:\n        return -1\n    # We expect a 1D sequence\n    if act.ndim != 1:\n        return -1\n    # Non\u2010empty\n    if act.size == 0:\n        return -1\n    # All values must be non\u2010negative\n    if np.any(act < 0) or np.any(pred < 0):\n        return -1\n\n    # Compute squared log errors\n    sq_errors = squared_log_error(act, pred)\n\n    # Compute mean and round to 4 decimal places\n    msle = float(np.mean(sq_errors))\n    return round(msle, 4)\n```\n\nExplanation of key points:\n\n1. **Input conversion**: We first coerce inputs to NumPy arrays of type `float`.  \n2. **Validation**:  \n   - Shapes must match and be 1D.  \n   - Sequences must be non\u2010empty.  \n   - All elements must be \u2265 0.  \n   If any check fails, return `-1`.  \n3. **Computation**:  \n   - The helper `squared_log_error` computes `(log1p(actual) - log1p(predicted))**2` element\u2010wise.  \n   - The main function takes the mean of these squared errors, casts to a Python `float`, and rounds to 4 decimal places."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Check if input is a scalar (int, float, or numpy scalar)\n    if np.isscalar(z):\n        z_val = float(z)\n        # numerically stable sigmoid for a scalar\n        if z_val >= 0:\n            exp_neg = math.exp(-z_val)\n            s = 1.0 / (1.0 + exp_neg)\n        else:\n            exp_pos = math.exp(z_val)\n            s = exp_pos / (1.0 + exp_pos)\n        return round(s, 4)\n\n    # Otherwise treat input as array-like\n    arr = np.array(z, dtype=np.float64)\n    # Prepare output array same shape as arr\n    s = np.empty_like(arr)\n\n    # Masks for positive and negative entries\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n\n    # For z >= 0: sigmoid = 1 / (1 + exp(-z))\n    s[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    # For z < 0: sigmoid = exp(z) / (1 + exp(z))\n    exp_z = np.exp(arr[neg_mask])\n    s[neg_mask] = exp_z / (1.0 + exp_z)\n\n    # Round to 4 decimal places and convert to Python list\n    s_rounded = np.round(s, 4)\n    return s_rounded.tolist()\n```\n\nExplanation of key points:\n1. We detect scalars with `np.isscalar` and use Python\u2019s `math.exp` for a single value, returning a rounded float.\n2. For array-like inputs, we convert to a NumPy array and create boolean masks to split nonnegative and negative elements.  \n3. This avoids overflow/underflow when computing `exp(\u00b1z)` for large |z|.\n4. Finally, we round the results to 4 decimal places and convert back to a nested Python list."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list (or for a scalar input, a Python scalar) with the same\n        structure as *z*, where each value has been transformed by the Leaky ReLU.\n    \"\"\"\n    # Convert input to a NumPy array (this works for scalars, lists, nested lists, and ndarrays)\n    arr = np.asarray(z)\n\n    # Apply Leaky ReLU elementwise: x if x >= 0 else a*x\n    activated = np.where(arr >= 0, arr, a * arr)\n\n    # Convert back to Python native types; for arrays/lists this yields a nested list,\n    # for a scalar it yields a Python scalar.\n    return activated.tolist()\n```\n\nExplanation of the key steps:\n\n1. `np.asarray(z)`  \n   \u2014 Ensures that whether `z` is a scalar, list (nested or flat), or `ndarray`, we get a NumPy array view of the same data/structure.\n\n2. `np.where(arr >= 0, arr, a * arr)`  \n   \u2014 Vectorized, element-wise application of the Leaky ReLU rule:  \n     \u2014 If `x >= 0`, keep `x`.  \n     \u2014 Otherwise, replace with `a * x`.\n\n3. `.tolist()`  \n   \u2014 Converts the NumPy result back into Python built-ins:  \n     \u2014 A nested list for any array-like input, or  \n     \u2014 A Python scalar if the original `z` was a scalar.\n\nThis satisfies the requirement of preserving the input structure and returning pure Python containers."}
{"task_id": 225, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hz2mel(hz, formula: str =htk -> list:\n   Convert a set of frequencies from Hertz to the mel scale.\n\n    Parameters\n    ----------\n    hz : array-like of float\n        One- or multi-dimensional collection of frequencies in Hertz.\n    formula :htkslaney optional\n        Conversion formula to use.htk corresponds to the formula used in\n        the Hidden Markov Model Toolkit, whileslaney corresponds to the\n        formula used in Malcolm Slaney\u2019s Auditory Toolbox. Default is\n       htk    Returns\n    -------\n    list of float\n        Mel-scaled frequencies with the same shape as *hz*, rounded to four\n        decimal places.\n\n    Raises\n    ------\n    AssertionError\n        If `formula` is not one ofhtk orslaney       # Ensure formula is valid\n    assert formula inhtkslaney \\\n        fUnsupported formula '{formula}'. Choose 'htk' or 'slaney'.    # Convert input to numpy array of floats\n    arr = np.array(hz, dtype=float)\n\n    # Compute mel scale according to chosen formula\n    if formula ==htk        # HTK: mel = 2595 * log10(1 + hz / 700)\n        mel = 2595.0 * np.log10(1.0 + arr / 700.0)\n    else:\n        # Slaney: mel = 1127 * ln(1 + hz / 700)\n        mel = 1127.0 * np.log(1.0 + arr / 700.0)\n\n    # Round to 4 decimal places and return as nested Python list\n    mel_rounded = np.round(mel, 4)\n    return mel_rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Assertion**  \n   We immediately check that `formula` is eitherhtk orslaney and raise an `AssertionError` otherwise.\n2. **Array Conversion**  \n   We convert the input `hz` (which may be a list or ndarray, of any shape) into a NumPy array of type `float`.\n3. **Computation**  \n   Depending on the `formula` argument, we apply the corresponding vectorized NumPy operation to compute the mel values.\n4. **Rounding & Output**  \n   We round the resulting array to 4 decimal places with `np.round(..., 4)` and convert it back to a nested Python list via `.tolist()`, preserving the original shape.\n"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element is\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize sample weights\n    w = np.full(n_samples, 1 / n_samples)\n\n    # To store parameters of each weak learner\n    # Each element is (feature_index, threshold, polarity, alpha)\n    classifiers = []\n\n    for _ in range(n_clf):\n        # Variables to store the best stump of this round\n        best_feature, best_thresh, best_polarity = None, None, None\n        best_error = float('inf')\n        best_pred = None\n\n        # Loop over all features\n        for feature_i in range(n_features):\n            X_col = X_train[:, feature_i]\n            # Consider all unique values in this feature as thresholds\n            thresholds = np.unique(X_col)\n            for thresh in thresholds:\n                for polarity in [1, -1]:\n                    # Generate predictions for this stump\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        # values below threshold -> -1, above -> +1\n                        pred[X_col < thresh] = -1\n                    else:\n                        # polarity == -1: values below threshold -> +1, above -> -1\n                        pred = -np.ones(n_samples)\n                        pred[X_col < thresh] = 1\n\n                    # Compute weighted error\n                    misclassified = (pred != y_train)\n                    error = np.dot(w, misclassified)\n\n                    # Store if this is the best stump so far\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature_i\n                        best_thresh = thresh\n                        best_polarity = polarity\n                        best_pred = pred.copy()\n\n        # Compute alpha (learner weight), add small epsilon to avoid div by zero\n        alpha = 0.5 * math.log((1.0 - best_error) / (best_error + 1e-10))\n\n        # Store this weak learner's parameters\n        classifiers.append((best_feature, best_thresh, best_polarity, alpha))\n\n        # Update sample weights\n        # w_i <- w_i * exp(-alpha * y_i * h(x_i))\n        w *= np.exp(-alpha * y_train * best_pred)\n        # Normalize to sum to 1\n        w /= np.sum(w)\n\n    # Now perform prediction on X_test\n    n_test = X_test.shape[0]\n    final_pred = np.zeros(n_test)\n\n    for feature_i, thresh, polarity, alpha in classifiers:\n        X_col = X_test[:, feature_i]\n        pred = np.ones(n_test)\n        if polarity == 1:\n            pred[X_col < thresh] = -1\n        else:\n            pred = -np.ones(n_test)\n            pred[X_col < thresh] = 1\n        # Accumulate weighted predictions\n        final_pred += alpha * pred\n\n    # Take sign, map zeros to +1\n    y_pred = np.sign(final_pred)\n    y_pred[y_pred == 0] = 1\n\n    # Convert to list of ints\n    return [int(label) for label in y_pred]\n```\n\nExplanation of key steps:\n\n1. **Initialize weights** `w` uniformly over the training samples.\n2. **For each boosting round**:\n   - Brute-force over all features, all unique thresholds, and both polarities to find the decision stump that minimizes the weighted error.\n   - Compute the stump\u2019s coefficient `alpha = 0.5 * ln((1\u2212error)/(error+\u03b5))`.\n   - Update the sample weights so that misclassified points get larger weights.\n3. **Prediction**: For each test sample, sum up `alpha * stump_prediction`. The final class is the sign of this sum (ties broken as +1).\n4. Return the predictions as a Python list of `-1` or `1`."}
{"task_id": 227, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef value_network_forward(state: list[float],\n                          W1: list[list[float]],\n                          W2: list[list[float]],\n                          W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x = np.array(state, dtype=float)\n    M1 = np.array(W1, dtype=float)\n    M2 = np.array(W2, dtype=float)\n    M3 = np.array(W3, dtype=float)\n\n    # Check state is 1-D\n    if x.ndim != 1:\n        return -1.0\n    N = x.shape[0]\n\n    # Check W1 is 2-D and matches (N, H1)\n    if M1.ndim != 2 or M1.shape[0] != N:\n        return -1.0\n    H1 = M1.shape[1]\n\n    # Check W2 is 2-D and matches (H1, H2)\n    if M2.ndim != 2 or M2.shape[0] != H1:\n        return -1.0\n    H2 = M2.shape[1]\n\n    # Check W3 is either (H2,) or (H2, 1)\n    if M3.ndim == 1:\n        if M3.shape[0] != H2:\n            return -1.0\n    elif M3.ndim == 2:\n        if M3.shape != (H2, 1):\n            return -1.0\n    else:\n        return -1.0\n\n    # Forward pass\n    # Layer 1\n    h1 = np.tanh(x.dot(M1))        # shape: (H1,)\n    # Layer 2\n    h2 = np.tanh(h1.dot(M2))       # shape: (H2,)\n    # Output layer\n    out = h2.dot(M3)               # shape: () or (1,)\n\n    # Extract scalar, round to 4 decimals\n    val = float(np.squeeze(out))\n    return round(val, 4)\n```\n\nExplanation of key steps:\n\n1. **Conversion to NumPy arrays**  \n   We cast all inputs to `np.ndarray` so that we can use shape inspection and fast array operations.\n\n2. **Dimension checking**  \n   - The state `x` must be one-dimensional of length `N`.  \n   - `W1` must be two-dimensional with shape `(N, H1)`.  \n   - `W2` must be two-dimensional with shape `(H1, H2)`.  \n   - `W3` may be either one-dimensional `(H2,)` or two-dimensional `(H2, 1)`.  \n   Any mismatch immediately returns \u22121.0.\n\n3. **Forward pass**  \n   - First hidden layer: `h1 = tanh(x \u00b7 W1)`  \n   - Second hidden layer: `h2 = tanh(h1 \u00b7 W2)`  \n   - Output value: `out = h2 \u00b7 W3`\n\n4. **Output**  \n   - We squeeze and cast the result to a Python float.  \n   - Finally, we round to 4 decimal places and return.  \n   - If any shape check fails, we return \u22121.0."}
{"task_id": 228, "completion_id": 0, "completion": "Here\u2019s a fully vectorized implementation using the identity \u2016x\u2013y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2013 2x\u1d40y.  It handles the case Y is None by setting Y=X, ensures non\u2010negative squared distances (clamping tiny negatives to zero), takes the square root, rounds to 4 decimals, and returns a nested Python list.\n\n```python\nimport numpy as np\n\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is None, the function computes the distances inside *X* itself (Y = X).\n    All distances are rounded to four decimal places and returned as a plain Python nested list.\n\n    Args:\n        X: NumPy array of shape (N, C).\n        Y: NumPy array of shape (M, C) or None. Default is None.\n\n    Returns:\n        A nested Python list of shape (N, M) with the pairwise L2 distances.\n    \"\"\"\n    # If Y not provided, compute distances within X\n    if Y is None:\n        Y = X\n\n    # Compute squared norms of each row in X and Y\n    # shapes: (N,) and (M,)\n    x_sq = np.sum(X * X, axis=1)\n    y_sq = np.sum(Y * Y, axis=1)\n\n    # Compute the Gram matrix (X @ Y^T), shape (N, M)\n    gram = X @ Y.T\n\n    # Use broadcasting to form the squared distance matrix\n    # dist_sq[i, j] = x_sq[i] + y_sq[j] - 2 * gram[i, j]\n    dist_sq = x_sq[:, None] + y_sq[None, :] - 2 * gram\n\n    # Numerical stabilization: clamp small negatives to zero\n    dist_sq = np.maximum(dist_sq, 0.0)\n\n    # Take square root, round to 4 decimals, convert to Python list\n    distances = np.round(np.sqrt(dist_sq), 4).tolist()\n\n    return distances\n```\n\nExplanation of key steps:  \n1. We compute `x_sq = \u2016X[i]\u2016\u00b2` and `y_sq = \u2016Y[j]\u2016\u00b2` for all rows.  \n2. The Gram matrix `X @ Y.T` gives all dot-products X[i]\u00b7Y[j].  \n3. By broadcasting, `dist_sq = x_sq[:,None] + y_sq[None,:] \u2013 2*gram` yields the squared distances.  \n4. We clamp any slight negative values to zero, take the square root, round to four decimal places, and finally convert the result to a nested Python list as requested."}
{"task_id": 230, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Gaussian Naive Bayes (binary) from scratch.\n\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_samples, n_features)\n        Training data.\n    y_train : np.ndarray, shape (n_samples,)\n        Binary class labels (0 or 1).\n    X_test : np.ndarray, shape (m_samples, n_features)\n        Test data.\n\n    Returns\n    -------\n    List[int]\n        Predicted labels (0 or 1) for each test sample.\n    \"\"\"\n    eps = 1e-9\n    n_samples, n_features = X_train.shape\n\n    # 1) Compute class priors\n    # Count how many samples in each class\n    count0 = np.sum(y_train == 0)\n    count1 = np.sum(y_train == 1)\n    prior0 = count0 / n_samples\n    prior1 = count1 / n_samples\n\n    # 2) Compute mean and variance for each feature per class\n    # Class 0\n    X0 = X_train[y_train == 0]\n    mu0 = np.mean(X0, axis=0)\n    var0 = np.var(X0, axis=0) + eps\n\n    # Class 1\n    X1 = X_train[y_train == 1]\n    mu1 = np.mean(X1, axis=0)\n    var1 = np.var(X1, axis=0) + eps\n\n    # Precompute constants for the Gaussian log\u2010pdf\n    # constant_c = -0.5 * sum_j [ log(2\u03c0 var_{c,j}) ]\n    const0 = -0.5 * np.sum(np.log(2 * np.pi * var0))\n    const1 = -0.5 * np.sum(np.log(2 * np.pi * var1))\n\n    # Log priors\n    log_prior0 = np.log(prior0 + eps)\n    log_prior1 = np.log(prior1 + eps)\n\n    # 3) Compute log-posterior for each test sample\n    # For class 0: log P(0) + \u03a3_j log N(x_j; mu0_j, var0_j)\n    #               = log_prior0 + const0 - 0.5 * \u03a3_j [ (x_j - mu0_j)^2 / var0_j ]\n    # Similarly for class 1.\n    m_samples = X_test.shape[0]\n\n    # Compute the quadratic term \u03a3_j [ (x - mu)^2 / var ] for each class\n    quad0 = np.sum(((X_test - mu0) ** 2) / var0, axis=1)\n    quad1 = np.sum(((X_test - mu1) ** 2) / var1, axis=1)\n\n    log_post0 = log_prior0 + const0 - 0.5 * quad0\n    log_post1 = log_prior1 + const1 - 0.5 * quad1\n\n    # 4) Make predictions: choose the class with higher log-posterior\n    preds = (log_post1 > log_post0).astype(int)\n\n    # 5) Return as Python list of ints\n    return preds.tolist()\n```\n\nExplanation of key steps:\n\n1. **Priors**  \n   We estimate P(c=0) and P(c=1) as the fraction of training samples in each class.\n\n2. **Means & variances**  \n   For each class `c` and each feature `j`, we compute  \n     \u03bc\u208dc,j\u208e = mean of feature j over samples with label c  \n     \u03c3\u00b2\u208dc,j\u208e = variance (population) + \u03b5\n\n3. **Log-Gaussian PDF**  \n   The log of the univariate Gaussian pdf for a single feature j is:  \n     log \ud835\udca9(x\u2c7c; \u03bc,\u03c3\u00b2) = \u2212\u00bd\u00b7log(2\u03c0\u03c3\u00b2) \u2212 (x\u2c7c\u2212\u03bc)\u00b2/(2\u03c3\u00b2).  \n   We separate it into a constant term (sum of \u2212\u00bd\u00b7log(2\u03c0\u03c3\u00b2) over j)  \n   plus the quadratic term (sum of (x\u2c7c\u2212\u03bc)\u00b2/\u03c3\u00b2).\n\n4. **Log-posterior**  \n   For each test sample,  \n     log P(c) + \u03a3_j log \ud835\udca9(x\u2c7c; \u03bc\u208dc,j\u208e,\u03c3\u00b2\u208dc,j\u208e)  \n   becomes  \n     log_prior_c + constant_c \u2212 \u00bd\u00b7quadratic_sum_c.\n\n5. **Prediction**  \n   Compare the two log-posteriors and assign the class with the higher value.\n\nThis implementation is fully vectorized with NumPy and returns a Python list of 0/1 predictions."}
{"task_id": 231, "completion_id": 0, "completion": "```python\ndef is_natural(hand: list[int]) -> bool:\n       Determine whether a given hand is a natural (blackjack).\n    \n    A natural is defined as a two\u2010card hand consisting of exactly one Ace (encoded as 1)\n    and one ten\u2010valued card (encoded as 10). Order does not matter.\n    \n    Args:\n        hand (list[int]): The list of card encodings.\n    \n    Returns:\n        bool: True if the hand is a natural blackjack, False otherwise.\n       # Must be exactly two cards\n    if len(hand) != 2:\n        return False\n    \n    # One card must be an Ace (1) and the other must be a ten-value (10)\n    return 1 in hand and 10 in hand\n```\n\nExplanation:\n1. We first check that there are exactly two cards in the hand.  \n2. We then verify that among those two cards there is one `1` (Ace) and one `10` (ten\u2010valued card).  \n3. If both conditions hold, we return `True`; otherwise, `False`."}
{"task_id": 232, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_one_hot(x: np.ndarray) -> bool:\n   Check if *x* is a valid one-hot encoded NumPy array.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        A NumPy array to verify.\n\n    Returns\n    -------\n    bool\n        True if *x* is one-hot encoded, otherwise False.\n       # Rule 1: must be a NumPy ndarray of exactly two dimensions\n    if not isinstance(x, np.ndarray) or x.ndim != 2:\n        return False\n\n    # Rule 2: all elements must be 0 or 1\n    # We allow any numeric dtype, as long as the values are exactly 0 or 1\n    # (this covers ints, floats, booleans, etc.)\n    # np.logical_or(x == 0, x == 1) yields a boolean array which we then check all(True)\n    if not np.logical_or(x == 0, x == 1).all():\n        return False\n\n    # Rule 3: each row must contain exactly one 1\n    # Sum across columns for each row, then check each sum == 1\n    # For integer types this is exact; for floats if values are exactly 0.0/1.0 it's also exact\n    row_sums = x.sum(axis=1)\n    if not np.all(row_sums == 1):\n        return False\n\n    # All checks passed\n    return True\n```\n\nExplanation of the steps:\n\n1. **Dimension check**  \n   - We first verify `x` is indeed a NumPy array and that `x.ndim == 2`.  \n2. **Binary check**  \n   - We check every element is either `0` or `1` by evaluating `(x == 0) | (x == 1)` and confirming all entries of that boolean mask are `True`.  \n3. **Exactly one \u201c1\u201d per row**  \n   - We sum each row (`axis=1`) and ensure each row sum equals exactly `1`.  \n\nIf any of these checks fail, the function returns `False`. Otherwise, it returns `True`."}
{"task_id": 234, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef thompson_sampling_beta_binomial(successes: list[int],\n                                    failures: list[int],\n                                    prior_alpha: float = 1.0,\n                                    prior_beta:  float = 1.0,\n                                    seed: int | None = None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    # Validate input\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n\n    # Optionally fix the random seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Build posterior parameters for each arm\n    alphas = np.array(successes, dtype=float) + prior_alpha\n    betas  = np.array(failures, dtype=float) + prior_beta\n\n    # Draw one sample from each Beta posterior\n    samples = np.random.beta(alphas, betas)\n\n    # Return the index of the maximum sample (ties -> smallest index)\n    return int(np.argmax(samples))\n```\n\nExplanation of key steps:\n1. Input validation: return `-1` if lists are empty or of unequal length.  \n2. Seed setting: if `seed` is provided, we call `np.random.seed(seed)` for deterministic sampling.  \n3. Posterior parameters: each arm\u2019s posterior is `Beta(prior_alpha + successes[i], prior_beta + failures[i])`.  \n4. Sampling: use `np.random.beta(alphas, betas)` to draw one sample per arm in a vectorized way.  \n5. Selection: `np.argmax` returns the index of the largest sample, breaking ties by the smallest index."}
{"task_id": 235, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(labels: np.ndarray, n_classes: int | None = None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes. If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes. Each row is a\n        one-hot vector corresponding to the associated label.\n\n    Raises\n    ------\n    ValueError\n        If `labels` is not 1-D or if `n_classes` is provided but\n        is smaller than `labels.max() + 1`.\n    \"\"\"\n    # check dimensionality\n    if labels.ndim != 1:\n        raise ValueError(f\"labels must be a 1-D array, got ndim={labels.ndim}\")\n\n    # infer or validate number of classes\n    max_label = int(labels.max())  # cast to int in case labels dtype isn't integer\n    if n_classes is None:\n        n_classes = max_label + 1\n    else:\n        if n_classes < max_label + 1:\n            raise ValueError(\n                f\"n_classes ({n_classes}) must be >= max(labels)+1 ({max_label + 1})\"\n            )\n\n    # number of samples\n    n_samples = labels.shape[0]\n\n    # allocate the one-hot array\n    one_hot = np.zeros((n_samples, n_classes), dtype=float)\n\n    # place 1s at the correct indices\n    # cast labels to int for safety\n    one_hot[np.arange(n_samples), labels.astype(int)] = 1.0\n\n    return one_hot\n```\n\nExplanation of key steps:\n\n1. **Dimension check**: We ensure `labels` is 1-D.  \n2. **Class count**:  \n   - If `n_classes` is `None`, infer it as `max(labels) + 1`.  \n   - Otherwise validate `n_classes >= max(labels)+1`.  \n3. **Construction**: Create a zero\u2010filled `(N, C)` array of dtype float.  \n4. **Indexing**: Using NumPy\u2019s advanced indexing `one_hot[np.arange(N), labels]`, we set the appropriate positions to `1.0`."}
{"task_id": 236, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minibatch(X: np.ndarray, batchsize: int = 256, shuffle: bool = True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    if batchsize <= 0:\n        raise ValueError(f\"batchsize must be > 0, got {batchsize}\")\n\n    # Prepare the indices array\n    indices = np.arange(N, dtype=np.int64)\n\n    # Shuffle in-place if requested\n    if shuffle:\n        np.random.shuffle(indices)\n\n    # Compute the number of batches (ceil)\n    n_batches = (N + batchsize - 1) // batchsize\n\n    # Define a single-pass generator over the slices\n    def _gen():\n        for i in range(n_batches):\n            start = i * batchsize\n            end = start + batchsize\n            yield indices[start:end]\n\n    return _gen(), n_batches\n```\n\nExplanation of key steps:\n1. Extract the number of samples `N` from `X.shape[0]`.  \n2. Build a contiguous index array `indices = arange(N, dtype=int64)`.  \n3. If `shuffle=True`, call `np.random.shuffle(indices)` in-place.  \n4. Compute `n_batches = ceil(N / batchsize)` via integer math.  \n5. Define an inner generator `_gen()` that walks through `indices` in strides of `batchsize`, yielding each slice (the last may be smaller).  \n6. Return the generator instance `_gen()` and the total `n_batches`."}
{"task_id": 237, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef score(hand: List[str]) -> int:\n   Return the Blackjack score of *hand* or 0 if the hand is bust.\n\n    Args:\n        hand: A list of card labels ('2'-'10', 'J', 'Q', 'K', 'A').\n\n    Returns:\n        An integer between 0 and 21 (inclusive). If every possible value of\n        the hand exceeds 21 the function returns 0.\n       # Sum of non-Ace cards\n    total = 0\n    aces = 0\n\n    for card in hand:\n        if card == 'A':\n            aces += 1\n        elif card in ('J', 'Q', 'K'):\n            total += 10\n        else:\n            # '2' through '10'\n            total += int(card)\n\n    # Count each Ace initially as 11 points\n    total += aces * 11\n\n    # Downgrade Aces from 11 to 1 (reduce by 10) as needed\n    # to avoid busting, one Ace at a time\n    while total > 21 and aces > 0:\n        total -= 10\n        aces -= 1\n\n    # If still over 21, it's a bust\n    if total > 21:\n        return 0\n\n    return total\n```\n\nExplanation of the approach:\n\n1. We first tally up the non-Ace cards:\n   - Numeric cards '2'\u2013'10' contribute their face value.\n   - Face cards 'J', 'Q', 'K' each contribute 10 points.\n2. We count how many Aces are in the hand.\n3. We optimistically add 11 points for each Ace.\n4. If the total exceeds 21, we \u201cdowngrade\u201d an Ace from 11 points to 1 point (a net reduction of 10) one by one until the total is \u2264 21 or we have no more Aces to downgrade.\n5. If after all possible downgrades the total still exceeds 21, the hand is bust, and we return 0. Otherwise, we return the computed total."}
{"task_id": 239, "completion_id": 0, "completion": "```python\nimport math\nfrom typing import Tuple\n\ndef determine_padding(\n    filter_shape: Tuple[int, int], \n    output_shape: str = \"same\"\n) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == \"valid\":\n        return ((0, 0), (0, 0))\n\n    if output_shape == \"same\":\n        filter_h, filter_w = filter_shape\n\n        # total padding needed in each dimension is filter_size - 1\n        pad_h_total = filter_h - 1\n        pad_w_total = filter_w - 1\n\n        # split into top/bottom and left/right\n        pad_top = pad_h_total // 2\n        pad_bottom = pad_h_total - pad_top\n        pad_left = pad_w_total // 2\n        pad_right = pad_w_total - pad_left\n\n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n\n    # If other output_shape values are passed, we choose to error out\n    raise ValueError(f\"Unsupported output_shape '{output_shape}'. \"\n                     \"Use 'same' or 'valid'.\")\n```\n\nExplanation:\n\n1. If `output_shape == \"valid\"`, no padding is applied, so we immediately return `((0, 0), (0, 0))`.  \n2. If `output_shape == \"same\"`, we compute  \n   - `pad_total = filter_size \u2013 1` for each dimension.  \n   - `pad_top = \u230apad_total/2\u230b`, `pad_bottom = pad_total \u2013 pad_top`  \n   - `pad_left = \u230apad_total/2\u230b`, `pad_right = pad_total \u2013 pad_left`  \n   This ensures that when `pad_total` is odd, the extra zero goes to the bottom/right.  \n3. Any other `output_shape` raises an error."}
{"task_id": 240, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef create_encoding_dicts(obs_ids: list, action_ids: list,\n                          obs_encoder: dict | None = None,\n                          act_encoder: dict | None = None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    # 1) Build obs2num\n    if obs_encoder is not None:\n        obs2num = dict(obs_encoder)  # use supplied encoder\n    else:\n        # if obs_ids is empty, this yields an empty dict\n        obs2num = {obs: idx for idx, obs in enumerate(obs_ids)}\n\n    # 2) Build num2obs as the exact inverse\n    num2obs = {num: obs for obs, num in obs2num.items()}\n\n    # 3) Build act2num\n    if act_encoder is not None:\n        act2num = dict(act_encoder)\n    else:\n        act2num = {act: idx for idx, act in enumerate(action_ids)}\n\n    # 4) Build num2act as the exact inverse\n    num2act = {num: act for act, num in act2num.items()}\n\n    return {\n        'obs2num': obs2num,\n        'num2obs': num2obs,\n        'act2num': act2num,\n        'num2act': num2act\n    }\n```\n\nExplanation of key points:\n1. If an explicit `obs_encoder` or `act_encoder` is provided, it is taken verbatim (copied to avoid side\u2010effects).  \n2. Otherwise we enumerate the given `obs_ids` or `action_ids` in their list order, which naturally handles empty lists by producing empty dictionaries.  \n3. The inverse maps (`num2obs`, `num2act`) are constructed by swapping key\u2013value pairs, guaranteeing that  \n   ```\n   num2obs[obs2num[x]] == x\n   num2act[act2num[a]] == a\n   ```\n   for all defined `x` and `a`."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n   Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n       # Check for minimum rank\n    if len(shape) < 2:\n        return -1\n\n    # First dimension\n    d0 = shape[0]\n    # Product of the remaining dimensions\n    flat_dim = int(np.prod(shape[1:]))\n\n    # Draw a random Gaussian matrix A of shape (d0, flat_dim)\n    A = np.random.randn(d0, flat_dim)\n\n    # Compute thethin SVD: A = U @ S @ Vt\n    # U has shape (d0, k), Vt has shape (k, flat_dim) with k = min(d0, flat_dim)\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Choose the factor that matches A's shape\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Reshape back to the requested shape and scale\n    Q = Q.reshape(shape) * scale\n\n    # Convert to a (nested) python list and return\n    return Q.tolist()\n```\n\nExplanation of the key steps:\n\n1. Check that `shape` has at least two dimensions; otherwise return `-1`.  \n2. Let `d0 = shape[0]` and let `flat_dim` be the product of the remaining dimensions.  \n3. Draw a `d0\u00d7flat_dim` matrix `A` with i.i.d. standard normal entries.  \n4. Compute the reduced SVD `A = U @ S @ Vt` with `full_matrices=False`.  This makes  \n   U of shape `(d0, k)` and `Vt` of shape `(k, flat_dim)`, where `k = min(d0, flat_dim)`.  \n5. Whichever of `U` or `Vt` matches `A`\u2019s shape `(d0, flat_dim)` is our orthogonal basis `Q`.  \n6. Reshape `Q` back into `shape` and multiply by `scale`.  \n7. Return `Q.tolist()` to satisfy the requirement of a pure Python nested list.  \n\nThis construction guarantees that when you flatten the result to shape `(d0, flat_dim)`, its rows or columns (whichever are fewer) form an orthonormal set up to the given `scale`. You can verify:\n\n```python\nimport numpy as np\n\nnp.random.seed(0)\nres = orthogonal((2, 2), scale=0.5)\nflat = np.array(res).reshape(2, -1)\nprint(np.round(flat @ flat.T, 6))\n# Should be approx. 0.25 * I\n```"}
{"task_id": 242, "completion_id": 0, "completion": "```python\nimport math\n\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float = 1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    # 1. If any arm has never been pulled, return the first such arm.\n    for i, count in enumerate(pull_counts):\n        if count == 0:\n            return i\n\n    # 2. Otherwise compute UCB score for each arm and pick the max.\n    total_pulls = current_step + 1\n    log_term = math.log(total_pulls)\n    best_arm = 0\n    best_score = -float('inf')\n\n    for i, (ev, count) in enumerate(zip(ev_estimates, pull_counts)):\n        bonus = C * math.sqrt((2 * log_term) / count)\n        score = ev + bonus\n        if score > best_score:\n            best_score = score\n            best_arm = i\n\n    return best_arm\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert input to a numpy array\n    s = np.array(state, dtype=float)\n    \n    # Layer 1: z1 = ReLU(sum(s))\n    s_sum = np.sum(s)\n    z1 = max(0.0, s_sum)\n    \n    # Layers 2 & 3 and heads collapse to simple multiples:\n    # z2 = 4 * z1, z3 = 4 * z2 = 16 * z1\n    # actor logits = 4 * z3 = 64 * z1  (same for each of the 3 outputs)\n    # critic value = 4 * z3 = 64 * z1\n    logits = np.full((3,), 64.0 * z1)\n    state_value = 64.0 * z1\n\n    # Softmax over logits\n    # subtracting max for numerical stability (though here all logits are identical)\n    exp_shift = np.exp(logits - np.max(logits))\n    probs = exp_shift / np.sum(exp_shift)\n\n    # Round outputs to 4 decimal places\n    action_probs = np.round(probs, 4).tolist()\n    state_value = float(np.round(state_value, 4))\n\n    return action_probs, state_value\n```\n\nExplanation of the key steps:\n\n1. Since all weights = 1 and biases = 0:\n   - After the first dense + ReLU, every hidden unit holds max(0, s\u2080 + s\u2081 + s\u2082), call this z1.\n   - The next two hidden layers each multiply the sum of their inputs by 4, so by layer 3 each unit holds 16\u00b7z1.\n2. The actor head sums its 4 identical inputs to get 64\u00b7z1 for each of the 3 logits; softmax on equal logits yields [1/3, 1/3, 1/3].\n3. The critic head sums its 4 identical inputs to get the state value = 64\u00b7z1.\n4. Finally, we round all probabilities and the state value to 4 decimal places as required."}
{"task_id": 244, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\nimport math\n\ndef random_binary_tensor(shape: tuple, sparsity: float = 0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    # Validate shape: must be a non\u2010empty tuple of positive integers\n    if not isinstance(shape, tuple) or len(shape) == 0:\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n\n    # Validate sparsity: real number in [0,1]\n    if not isinstance(sparsity, (int, float)):\n        return -1\n    if not math.isfinite(sparsity) or sparsity < 0.0 or sparsity > 1.0:\n        return -1\n\n    # Draw uniform random numbers in [0,1)\n    rnd = np.random.rand(*shape)\n\n    # Threshold for turning a draw into 1.0 is 1 - sparsity\n    threshold = 1.0 - sparsity\n\n    # Build binary array: 1.0 where rnd >= threshold, else 0.0\n    binary_array = (rnd >= threshold).astype(float)\n\n    # Return as a nested Python list\n    return binary_array.tolist()\n```\n\nExplanation of key points:\n\n1. **Shape validation**  \n   - We check that `shape` is a `tuple` of length \u2265 1.  \n   - Each element of the tuple must be an `int` > 0.\n\n2. **Sparsity validation**  \n   - We ensure `sparsity` is an `int` or `float`, is finite, and lies in the closed interval [0, 1].\n\n3. **Random draw and binarization**  \n   - We use `np.random.rand(*shape)` to obtain uniform draws in [0, 1).  \n   - Since we want `P(1.0) = sparsity`, the threshold is set to `1.0 - sparsity`, and we assign `1.0` wherever the draw is \u2265 threshold.\n\n4. **Output**  \n   - The result is converted from a NumPy array to a nested Python list of floats (`0.0` and `1.0`) via the `.tolist()` method.\n\nThis satisfies all the requirements of the task."}
{"task_id": 247, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]],\n                           payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function computes the expected reward for each arm (p_k * \u03bc_k) and\n    returns a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  \n    If the input is invalid (see task description) the function returns -1.\n    \"\"\"\n    # 1. Check that both lists are non-empty and of the same length\n    if not payoff_dists or not payoff_probs or len(payoff_dists) != len(payoff_probs):\n        return -1\n\n    K = len(payoff_dists)\n\n    # 2. Validate variances and probabilities\n    for i in range(K):\n        mu, var = payoff_dists[i]\n        p = payoff_probs[i]\n        # variance must be strictly positive\n        if var <= 0:\n            return -1\n        # probability must be in [0,1]\n        if p < 0 or p > 1:\n            return -1\n\n    # 3. Compute expected values: E[R_k] = p_k * mu_k\n    mus = np.array([dist[0] for dist in payoff_dists], dtype=float)\n    ps  = np.array(payoff_probs, dtype=float)\n    evs = ps * mus\n\n    # 4. Find the best arm (first max in case of ties)\n    best_arm = int(np.argmax(evs))\n    best_ev_raw = float(evs[best_arm])\n\n    # 5. Round to 4 decimal places\n    best_ev = round(best_ev_raw, 4)\n\n    return best_ev, best_arm\n```\n\nExplanation of the steps:\n\n1. **Input validation**  \n   - We first check that neither list is empty and that they have the same length.  \n   - We then iterate over each arm to ensure every variance is strictly positive and every probability lies in \\[0,1\\].  \n\n2. **Computation with NumPy**  \n   - We extract the means (`mus`) and probabilities (`ps`) into NumPy arrays and compute the elementwise product `evs = ps * mus`.  \n\n3. **Selecting the best arm**  \n   - `np.argmax(evs)` returns the index of the first occurrence of the maximum expected value (breaking ties by picking the smallest index).  \n\n4. **Rounding**  \n   - Finally, we round the best expected value to 4 decimal places before returning."}
{"task_id": 248, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef baseline_prob_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray\n) -> list[float]:\n   Return a constant probability equal to the fraction of positive labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix. Its values are ignored by this baseline\n        predictor; only its length is potentially useful for sanity checks.\n    y_train : np.ndarray\n        One-dimensional array of binary labels (0 for negative, 1 for positive).\n    X_test : np.ndarray\n        Feature matrix for which the predictions are required. The number of\n        returned probabilities must match the number of rows in this matrix.\n\n    Returns\n    -------\n    list[float]\n        A list containing the same probability repeated for every row of\n        `X_test`. The probability is rounded to four decimal places.\n       # number of test examples\n    n_test = X_test.shape[0]\n    # if no test examples, return empty list\n    if n_test == 0:\n        return []\n\n    # compute fraction of positive labels in y_train\n    # assume y_train is non-empty and contains only 0s and 1s\n    p = np.sum(y_train == 1) / y_train.shape[0]\n\n    # round to four decimal places\n    p_rounded = float(np.round(p, 4))\n\n    # build a list of length n_test filled with p_rounded\n    return [p_rounded] * n_test\n```\n\nExplanation of key steps:\n\n1. We extract the number of rows in `X_test` via `X_test.shape[0]`.  \n2. If `n_test == 0`, we short-circuit and return `[]`.  \n3. We compute `p` as the empirical positive\u2010class proportion:  \n   `p = (number of ones in y_train) / len(y_train)`.  \n4. We round `p` to four decimal places using `np.round` and cast to a Python float.  \n5. We return a Python list of length `n_test` where every entry is the rounded probability."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head (rounded to 4 d.p.)\n        value         : float          \u2013 scalar output of the critic head (rounded to 4 d.p.)\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x   = np.array(state, dtype=float)\n    W1, b1 = np.array(params['W1'], dtype=float), np.array(params['b1'], dtype=float)\n    W2, b2 = np.array(params['W2'], dtype=float), np.array(params['b2'], dtype=float)\n    W3, b3 = np.array(params['W3'], dtype=float), np.array(params['b3'], dtype=float)\n    Wa, ba = np.array(params['Wa'], dtype=float), np.array(params['ba'], dtype=float)\n    Wc, bc = np.array(params['Wc'], dtype=float), np.array(params['bc'], dtype=float)\n\n    # Shared 3-layer MLP with ReLU activations\n    def relu(z):\n        return np.maximum(0, z)\n\n    h1 = relu(W1.dot(x) + b1)\n    h2 = relu(W2.dot(h1) + b2)\n    h3 = relu(W3.dot(h2) + b3)\n\n    # Actor head: dense + softmax\n    logits = Wa.dot(h3) + ba\n    shifted = logits - np.max(logits)         # for numerical stability\n    exps    = np.exp(shifted)\n    probs   = exps / np.sum(exps)\n\n    # Critic head: dense \u2192 scalar\n    value = float(Wc.dot(h3) + bc)\n\n    # Round to 4 decimals, but keep single decimal for exact 0 or 1\n    def smart_round(num: float) -> float:\n        r = round(num, 4)\n        if r == 0.0 or r == 1.0:\n            # ensure one decimal place for exact 0 or 1\n            return float(f\"{r:.1f}\")\n        return r\n\n    probs_rounded = [smart_round(p) for p in probs.tolist()]\n    value_rounded = smart_round(value)\n\n    return probs_rounded, value_rounded\n```\n\nExplanation of key steps:\n\n1. **Parameter setup**  \n   Convert all weights and biases from the input dictionary into NumPy arrays for easy linear algebra.\n\n2. **Shared network**  \n   Apply three dense (affine) layers each followed by a ReLU activation:\n   h1 = ReLU(W1\u00b7x + b1),  \n   h2 = ReLU(W2\u00b7h1 + b2),  \n   h3 = ReLU(W3\u00b7h2 + b3).\n\n3. **Actor head**  \n   Compute action logits = Wa\u00b7h3 + ba, stabilize by subtracting max, then apply soft-max to get a probability vector.\n\n4. **Critic head**  \n   Compute state-value = Wc\u00b7h3 + bc as a single float.\n\n5. **Rounding**  \n   Use `round(..., 4)` for four decimals, but if the result is exactly 0 or 1, re-format with one decimal place (`0.0`, `1.0`) to satisfy the requirement."}
{"task_id": 251, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n   Element-wise logistic sigmoid    # Handle scalar\n    if isinstance(x, (int, float, np.generic)):\n        y = 1.0 / (1.0 + np.exp(-x))\n        return round(y, 4)\n    # Handle list/tuple/ndarray\n    arr = np.array(x, dtype=float)\n    y = 1.0 / (1.0 + np.exp(-arr))\n    return np.round(y, 4)\n\ndef tanh(x):\n   Element-wise hyperbolic tangent    if isinstance(x, (int, float, np.generic)):\n        y = np.tanh(x)\n        return round(y, 4)\n    arr = np.array(x, dtype=float)\n    y = np.tanh(arr)\n    return np.round(y, 4)\n\ndef relu(x):\n   Element-wise Rectified Linear Unit    if isinstance(x, (int, float, np.generic)):\n        y = x if x > 0 else 0.0\n        return round(y, 4)\n    arr = np.array(x, dtype=float)\n    y = np.clip(arr, a_min=0.0, a_max=None)\n    return np.round(y, 4)\n\ndef leaky_relu(x, alpha: float = 0.01):\n   Element-wise Leaky-ReLU with slope *alpha* for x<0    if isinstance(x, (int, float, np.generic)):\n        y = x if x >= 0 else alpha * x\n        return round(y, 4)\n    arr = np.array(x, dtype=float)\n    y = np.where(arr >= 0, arr, alpha * arr)\n    return np.round(y, 4)\n\ndef softmax(x):\n   Numerically stable softmax over a 1-D input    # Scalar case -> softmax = 1.0\n    if isinstance(x, (int, float, np.generic)):\n        return round(1.0, 4)\n    # Convert list/tuple to array\n    arr = np.array(x, dtype=float)\n    if arr.ndim != 1:\n        raise ValueErrorsoftmax input must be 1-D    # Shift for numerical stability\n    shift = arr - np.max(arr)\n    exps = np.exp(shift)\n    sums = np.sum(exps)\n    y = exps / sums\n    return np.round(y, 4)\n\ndef get_activation(name):\n   Return the activation function by *name*.\n\n    Args:\n        name (str): One ofsigmoidtanhreluleaky_relusoftmax    Returns:\n        Callable: the requested activation function.\n\n    Raises:\n        ValueError: If *name* is not recognised.\n       name_to_func = {\n       sigmoid sigmoid,\n       tanh tanh,\n       relu relu,\n       leaky_relu leaky_relu,\n       softmax softmax\n    }\n    try:\n        return name_to_func[name]\n    except KeyError:\n        raise ValueError('Invalid activation function.')\n```"}
{"task_id": 252, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    # Compute gradient: \u2207L = actual \u2212 predicted\n    grad_array = actual - predicted\n    # Convert gradient to Python list\n    grad = grad_array.tolist()\n    \n    # The diagonal Hessian of 0.5 * ||actual - predicted||\u00b2 is constant 1 per coordinate\n    hess = [1.0] * actual.shape[0]\n    \n    return grad, hess\n```\n\nExplanation of the key steps:\n1. We compute the element\u2010wise difference `actual - predicted` to get the gradient.\n2. We convert the resulting NumPy array to a regular Python list with `.tolist()`.\n3. Since the second derivative of each coordinate in the least\u2010squares loss is 1, we build a list of `1.0` values of the same length as `actual`.\n4. Finally, we return the tuple `(grad, hess)` as required."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert input to NumPy array of floats\n    w_arr = np.asarray(w, dtype=float).ravel()\n\n    if not gradient:\n        # Penalty: \u03b1 [ \u03bb * ||w||_1 + (1\u2212\u03bb) * 0.5 * ||w||_2^2 ]\n        l1_term = l1_ratio * np.sum(np.abs(w_arr))\n        l2_term = (1.0 - l1_ratio) * 0.5 * np.sum(w_arr ** 2)\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)\n    else:\n        # Gradient: \u03b1 [ \u03bb * sign(w) + (1\u2212\u03bb) * w ]\n        grad = alpha * (\n            l1_ratio * np.sign(w_arr)\n            + (1.0 - l1_ratio) * w_arr\n        )\n        # Convert to Python list and round each element\n        return [round(float(g), 4) for g in grad]\n```\n\nExplanation of key steps:\n\n1. We cast `w` to a NumPy array (`w_arr`) for vectorized operations.\n2. When `gradient=False`, we compute  \n   R(w) = \u03b1 [ \u03bb \u00b7 \u2211|w\u1d62|  +  (1\u2212\u03bb) \u00b7 0.5 \u00b7 \u2211w\u1d62\u00b2 ]  \n   and return the scalar, rounded to 4 decimal places.\n3. When `gradient=True`, we compute  \n   \u2207R(w) = \u03b1 [ \u03bb \u00b7 sign(w) + (1\u2212\u03bb) \u00b7 w ]  \n   element\u2010wise, and return it as a list of floats each rounded to 4 decimals."}
{"task_id": 255, "completion_id": 0, "completion": "```python\ndef usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    # Count every ace as 1 initially\n    total = sum(hand)\n    # If there's at least one ace (value == 1) and\n    # counting one of them as 11 (i.e., adding 10 more) doesn't bust:\n    return 1 in hand and total + 10 <= 21\n\n\n# Example usage and simple tests:\nif __name__ == \"__main__\":\n    test_hands = {\n        (1, 7): True,        # 11 + 7 = 18\n        (1, 10, 10): False,  # 11 + 10 + 10 = 31\n        (1, 1, 8): True,     # 11 + 1 + 8 = 20\n        (1, 1, 10): False,   # max is 11 + 1 + 10 = 22\n        (10, 5, 6): False,   # no ace\n        (1,): True,          # 11\n    }\n\n    for hand, expected in test_hands.items():\n        result = usable_ace(list(hand))\n        print(f\"Hand {hand:>8} \u2192 usable_ace = {result} (expected {expected})\")\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n   Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked. Ba andBx must\n                       be redirected to the lower-case keys.  If the name is\n                      X ory the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n       # Non-trainable\n    if param_name inXy        return None\n\n    # Map special names\n    if param_name ==Ba        key =ba    elif param_name ==Bx        key =bx    else:\n        key = param_name\n\n    # Fetch the parameter array\n    if key not in model.parameters:\n        raise KeyError(fParameter '{param_name}' (mapped to '{key}') not found in model    param = model.parameters[key]\n    \n    # We'll work in float64\n    # Create grads array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Ensure X is float64 for numerical stability\n    X64 = X.astype(np.float64, copy=False)\n\n    # Iterate over all indices in the parameter\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        # Save original value\n        orig_value = param[idx].astype(np.float64)\n\n        # + epsilon\n        param[idx] = orig_value + epsilon\n        model.flush_gradients()\n        preds_plus = []\n        for t in range(n_t):\n            xt = X64[:, :, t]\n            preds_plus.append(model.forward(xt))\n        loss_plus = loss_func(preds_plus)\n        loss_plus = np.float64(loss_plus)\n\n        # - epsilon\n        param[idx] = orig_value - epsilon\n        model.flush_gradients()\n        preds_minus = []\n        for t in range(n_t):\n            xt = X64[:, :, t]\n            preds_minus.append(model.forward(xt))\n        loss_minus = loss_func(preds_minus)\n        loss_minus = np.float64(loss_minus)\n\n        # restore original\n        param[idx] = orig_value\n\n        # finite difference\n        grads[idx] = (loss_plus - loss_minus) / (2.0 * epsilon)\n\n        it.iternext()\n\n    # return the transpose of the accumulated grads\n    return grads.T\n```\n\nExplanation:\n\n1. We immediately return `None` if asked to checkX ory`.\n2. We mapBa\u2192`ba andBx\u2192`bx`, else we use `param_name` directly.\n3. For each element in the chosen parameter array, we:\n   - Add \u03b5, run the forward loop for `n_t` steps, collect predictions, compute `loss_plus`.\n   - Subtract 2\u03b5 from the same element, repeat, compute `loss_minus`.\n   - Restore the original parameter value.\n   - Estimate the gradient by `(loss_plus - loss_minus) / (2\u03b5)`.\n4. We accumulate these finite\u2010difference estimates in a float64 array `grads` and finally return its transpose.\n\nThis satisfies the centred finite\u2010difference gradient check for any trainable RNN parameter."}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure at least one classifier\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n\n    # Initialize sample weights uniformly\n    w = np.full(m, 1 / m)\n\n    # We'll store each stump as a dict: {'feature': int, 'threshold': float, 'polarity': 1 or -1}\n    stumps = []\n    alphas = []\n\n    # --------------------------\n    # 1) Train n_clf decision stumps\n    # --------------------------\n    for _ in range(n_clf):\n        best_stump = None\n        best_pred = None\n        min_error = np.inf\n\n        # Loop over all features to find the best stump\n        for feature_i in range(n):\n            X_col = X_train[:, feature_i]\n            # Candidate thresholds: unique values in this feature\n            thresholds = np.unique(X_col)\n\n            for thresh in thresholds:\n                # Try both polarity directions\n                for polarity in [1, -1]:\n                    # Predict: for polarity=1: h(x)=1 if x < thresh else -1\n                    #          for polarity=-1: h(x)=-1 if x < thresh else 1\n                    pred = np.ones(m)\n                    if polarity == 1:\n                        pred[X_col >= thresh] = -1\n                    else:\n                        pred[X_col < thresh] = -1\n\n                    # Weighted error\n                    error = np.sum(w[pred != y_train])\n\n                    # Pick stump with minimal error\n                    if error < min_error:\n                        min_error = error\n                        best_pred = pred.copy()\n                        best_stump = {\n                            'feature': feature_i,\n                            'threshold': thresh,\n                            'polarity': polarity\n                        }\n\n        # Avoid division by zero in alpha calculation\n        eps = 1e-10\n        err = min_error\n        # Compute stump weight\n        alpha = 0.5 * np.log((1 - err + eps) / (err + eps))\n\n        # Update sample weights\n        # w_i <- w_i * exp(-alpha * y_i * h_t(x_i))\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)  # normalize\n\n        # Save the stump and its alpha\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n    # --------------------------\n    # 2) Aggregate stumps on X_test\n    # --------------------------\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n\n    for alpha, stump in zip(alphas, stumps):\n        feat = stump['feature']\n        thresh = stump['threshold']\n        polarity = stump['polarity']\n\n        # Make predictions of this stump on X_test\n        pred = np.ones(k)\n        if polarity == 1:\n            pred[X_test[:, feat] >= thresh] = -1\n        else:\n            pred[X_test[:, feat] < thresh] = -1\n\n        # Add weighted vote\n        agg += alpha * pred\n\n    # Final prediction by sign of the aggregate\n    y_pred = np.sign(agg)\n    # For zero, break tie as +1\n    y_pred[y_pred == 0] = 1\n\n    return y_pred.astype(int).tolist()\n```\n\nExplanation of key steps:\n\n1. **Initialization**: Start with uniform weights `w_i = 1/m`.\n2. **Stump training**  \n   - For each feature, consider splitting thresholds at each unique feature value.  \n   - For each threshold and polarity (which side predicts +1 vs. -1), compute the weighted error.  \n   - Select the stump (feature, threshold, polarity) with the lowest weighted error.\n3. **Stump weight**  \n   - Compute `alpha = 0.5 * ln((1 - err) / err)` with a small `eps` to avoid division by zero.\n4. **Re-weight examples**  \n   - Update `w_i \u2190 w_i * exp(-alpha * y_i * h_t(x_i))` and normalize so weights sum to 1.\n5. **Prediction**  \n   - For each test point, sum the weighted stump predictions and take the sign. Ties are broken in favor of +1.\n\nThe returned list contains only `-1` or `1` as required."}
{"task_id": 258, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hinge_loss(actual, predicted):\n   Compute the average hinge loss for binary classification.\n\n    Parameters\n    ----------\n    actual : list[int | float] | numpy.ndarray\n        True class labels encoded as -1 or 1.\n    predicted : list[int | float] | numpy.ndarray\n        Real-valued prediction scores.\n\n    Returns\n    -------\n    float | int\n        The mean hinge loss rounded to four decimal places, or -1 if the\n        two inputs have different lengths.\n       # Convert to NumPy arrays\n    y_true = np.array(actual, dtype=float)\n    y_pred = np.array(predicted, dtype=float)\n\n    # Check that they have the same shape\n    if y_true.shape != y_pred.shape:\n        return -1\n\n    # Compute per-sample hinge losses: max(0, 1 - y_i * y\u0302_i)\n    margins = 1.0 - y_true * y_pred\n    losses = np.maximum(0.0, margins)\n\n    # Compute mean and round to 4 decimal places\n    mean_loss = float(np.mean(losses))\n    return round(mean_loss, 4)\n```\n\nExplanation of the steps:\n1. We cast both inputs to NumPy arrays of float type.\n2. We verify that they have the same shape\u2014if not, we immediately return `-1`.\n3. We compute the margin `1 - y_i * \u0177_i` for each sample, threshold it at zero, and then take the mean.\n4. Finally, we round the result to four decimal places and return it."}
{"task_id": 259, "completion_id": 0, "completion": "```python\nimport random\n\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    # If the requested batch size is larger than what's available, error out\n    if batch_size > len(memory):\n        return -1\n\n    # Seed the RNG to ensure determinism\n    random.seed(42)\n\n    # Sample without replacement and return in the order from random.sample\n    return random.sample(memory, batch_size)\n```\n\nExplanation of key points:\n\n1. We check if `batch_size` exceeds `len(memory)`. If so, we immediately return -1.  \n2. We call `random.seed(42)` before sampling to ensure the same \u201crandom\u201d picks every time.  \n3. We use `random.sample(memory, batch_size)`, which returns a list of `batch_size` unique items in the order `random.sample` produces them."}
{"task_id": 260, "completion_id": 0, "completion": "```python\nfrom itertools import zip_longest\nfrom math import floor\n\ndef tileswrap(ihtORsize: int,\n              numtilings: int,\n              floats: list[float],\n              wrapwidths: list[int | None],\n              ints: list[int] | None = None,\n              readonly: bool = False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\"\"\"\n    # Default ints to empty list if None\n    if ints is None:\n        ints = []\n\n    # 1. Quantise every float\n    qs = [floor(f * numtilings) for f in floats]\n\n    tile_indices: list[int] = []\n\n    # 2. For every tiling\n    for t in range(numtilings):\n        coords: list[int] = [t]\n        b = t\n\n        # Pair each quantised float with its wrap width (None if not provided)\n        for q, wrap in zip_longest(qs, wrapwidths, fillvalue=None):\n            # compute the shifted, scaled bin index\n            c = (q + (b % numtilings)) // numtilings\n            # apply wrapping if wrap is a positive integer\n            if wrap is not None and wrap > 0:\n                c = c % wrap\n            coords.append(c)\n            # update b after each float dimension\n            b += t * 2\n\n        # 2.c Append any extra integer coordinates\n        coords.extend(ints)\n\n        # 3. Deterministic polynomial hash into [0, ihtORsize)\n        idx = 0\n        for coord in coords:\n            idx = (idx * 31 + coord) % ihtORsize\n\n        tile_indices.append(idx)\n\n    # 4. Return the list of tile indices, one per tiling\n    return tile_indices\n```\n\nExplanation of key steps:\n1. We first quantise each float by `floor(f * numtilings)`.\n2. For each tiling `t`, we build a coordinate list starting with `t`.  \n   - We maintain an offset variable `b = t`.  \n   - For each quantised float `q` and its corresponding `wrap` width, we compute  \n     `c = (q + (b % numtilings)) // numtilings`.  \n   - If `wrap` is a positive integer, we reduce `c` modulo `wrap`.  \n   - We append `c` to the coordinates and then increment `b` by `t*2`.  \n   - Finally, we append any extra integer variables.\n3. We hash the coordinate list with a simple deterministic polynomial hash `h = (h*31 + coord) % ihtORsize`.\n4. We collect and return one hashed index per tiling."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n   Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n       if len(shape) < 2:\n        raise ValueError(fglorot_normal requires at least 2 dimensions, got {shape    # Compute fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        # shape: (out_channels, in_channels, k1, k2, \u2026)\n        out_channels, in_channels = shape[0], shape[1]\n        # receptive field size = product of remaining dims\n        receptive_field_size = int(np.prod(shape[2:], dtype=int))\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    # Standard deviation for the normal distribution\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n\n    # Sample from N(0, std^2)\n    return np.random.normal(loc=0.0, scale=std, size=shape)\n```\n\nExplanation of the key steps:\n\n1. **Dimension check**  \n   We require at least 2 dimensions to define `fan_in` and `fan_out`.  \n2. **Fan-in and fan-out**  \n   - For a 2D weight matrix `shape == (fan_in, fan_out)`, they are taken directly.  \n   - For convolutional-type tensors, the receptive field is the product of all dims after the first two.  \n3. **Standard deviation**  \n   `std = sqrt(2 / (fan_in + fan_out))` per the Glorot/Xavier normal initialization.  \n4. **Sampling**  \n   We use `np.random.normal` with the computed `std` and mean `0.0`. The returned array has the exact `shape` and dtype `float64`.\n\nThis implementation does not alter any random state beyond drawing samples from NumPy\u2019s global RNG."}
{"task_id": 263, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    # Ensure x is a numpy array\n    a = np.array(x, dtype=float).flatten()\n\n    # Forward pass through each layer\n    for W_list, act in zip(weights, activations):\n        W = np.array(W_list, dtype=float)\n        # prepend bias term\n        a_tilde = np.concatenate(([1.0], a))\n        # compute pre-activation\n        z = W.dot(a_tilde)\n\n        # apply activation\n        if act == \"sigmoid\":\n            a = 1.0 / (1.0 + np.exp(-z))\n        elif act == \"relu\":\n            a = np.maximum(0.0, z)\n        elif act == \"linear\":\n            a = z\n        else:\n            raise ValueError(f\"Unknown activation '{act}'\")\n\n    # Round the final output\n    a_rounded = np.round(a, 4)\n\n    # Return scalar if single output neuron\n    if a_rounded.size == 1:\n        return float(a_rounded.item())\n    else:\n        return a_rounded.tolist()\n```"}
{"task_id": 265, "completion_id": 0, "completion": "```python\ndef king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:      L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:      L(x) = 0.003726653172066108\n\n    The result is rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    # choose correct branch\n    if x <= 250:\n        value = -0.25 * x + 82.50372665317208\n    elif x <= 600:  # this implicitly means 250 < x <= 600\n        value = 20.00372665317208\n    elif x <= 700:  # this implicitly means 600 < x <= 700\n        value = -0.2 * x + 140.00372665317207\n    else:           # x > 700\n        value = 0.003726653172066108\n\n    # round to 4 decimal places and return\n    return round(value, 4)\n```\n\nExplanation of the flow:\n\n1. For `x <= 250`, we use the first linear segment.\n2. For `250 < x <= 600`, we return the constant 20.00372665317208.\n3. For `600 < x <= 700`, we use the second linear segment.\n4. For `x > 700`, we return the small constant 0.003726653172066108.  \n5. Finally, we round the result to four decimal places with `round(value, 4)`.\n\nExample usage:\n\n```python\nprint(king_loss_fn(100))   # 57.5037  => -0.25*100 + 82.50372665317208 = 57.50372665317208\nprint(king_loss_fn(250))   # 20.0037  => boundary uses first branch: -0.25*250 + 82.5037...\nprint(king_loss_fn(300))   # 20.0037  => second branch constant\nprint(king_loss_fn(650))   # 10.0037  => -0.2*650 + 140.00372665317207 = 10.00372665317207\nprint(king_loss_fn(800))   # 0.0037   => fourth branch constant\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n   Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.  Edges may be repeated or duplicated in either\n        order (u, v) vs. (v, u).\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n       # Map each vertex to its index in V for fast lookup and sorting.\n    index_map = {vertex: idx for idx, vertex in enumerate(V)}\n\n    # Initialize an empty neighbor\u2010set for each vertex in V.\n    neighbors = {vertex: set() for vertex in V}\n\n    # Build the undirected adjacency by adding both directions.\n    for u, v in E:\n        # Only consider edges whose endpoints are in V.\n        if u in neighbors and v in neighbors:\n            neighbors[u].add(v)\n            neighbors[v].add(u)\n        # If you prefer to raise an error on unknown vertices,\n        # replace the if\u2010guard above with an assertion or exception.\n\n    # Convert each neighbor\u2010set into a sorted list according to V's order.\n    G: List[List[Any]] = []\n    for vertex in V:\n        # Extract the set, turn into list, then sort by index in V\n        nbr_list = list(neighbors[vertex])\n        nbr_list.sort(key=lambda w: index_map[w])\n        G.append(nbr_list)\n\n    return G\n```\n\nExplanation of key steps:\n\n1. **Index mapping**: We build `index_map` so that each vertex knows its position in `V`.  \n2. **Neighbor sets**: We store neighbors in a `set` to automatically remove duplicate or parallel edges (and handle self\u2010loops correctly by only storing once).  \n3. **Undirected insertion**: For each edge `(u, v)`, we add `v` to `u`\u2019s neighbor set and `u` to `v`\u2019s neighbor set.  \n4. **Ordering**: Finally, for each vertex in the original order of `V`, we convert its neighbor set into a list and sort that list by the vertices\u2019 indices in `V`, ensuring a deterministic order.  \n\nThis runs in O(|V| + |E| + \u03a3 d(v) log d(v)) time, which is efficient for typical graph sizes."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    best_error = np.inf\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n\n    # Loop over all features\n    for j in range(n_features):\n        x_j = X[:, j]\n        # Consider each unique feature value as a candidate threshold\n        thresholds = np.unique(x_j)\n\n        for theta in thresholds:\n            # Polarity = +1  means: predict +1 if x < theta, else -1\n            # Polarity = -1 means: predict -1 if x < theta, else +1\n            for polarity in (1, -1):\n                # make predictions\n                if polarity == 1:\n                    # +1 for x < theta, -1 for x >= theta\n                    preds = np.where(x_j < theta, 1, -1)\n                else:\n                    # -1 for x < theta, +1 for x >= theta\n                    preds = np.where(x_j < theta, -1, 1)\n\n                # weighted error\n                miss = (preds != y)\n                error = sample_weights[miss].sum()\n\n                # update best stump if this is better\n                if error < best_error:\n                    best_error = error\n                    best_feature = j\n                    best_threshold = theta\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": int(best_feature),\n        \"threshold\": float(np.round(best_threshold, 4)),\n        \"polarity\": int(best_polarity),\n        \"weighted_error\": float(np.round(best_error, 4))\n    }\n```\n\nExplanation of key steps:\n\n1. Iterate over each feature `j`.\n2. For that feature, gather all unique values in `X[:, j]`; each serves as a candidate threshold `\u03b8`.\n3. For each `(feature, threshold)` pair, try both polarities `p = +1` and `p = -1`:\n   - If `p = +1`, we predict +1 when `x < \u03b8`, else -1.\n   - If `p = -1`, we predict -1 when `x < \u03b8`, else +1.\n4. Compute the weighted error by summing the sample weights of mis\u2010classified points.\n5. Keep track of the configuration `(feature, threshold, polarity)` that yields the smallest weighted error.\n6. Return the best stump parameters, rounding `threshold` and `weighted_error` to 4 decimal places."}
{"task_id": 268, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations, permutations\nfrom itertools import combinations, permutations\nimport numpy as np\n\ndef random_unweighted_graph(n_vertices: int,\n                            edge_prob: float = 0.5,\n                            directed: bool = False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    # Special case for 1 vertex\n    if n_vertices == 1:\n        return [[0]]\n\n    # Initialize adjacency matrix with zeros\n    mat = [[0 for _ in range(n_vertices)] for _ in range(n_vertices)]\n\n    if directed:\n        # Consider all ordered pairs i != j\n        for i, j in permutations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                mat[i][j] = 1\n    else:\n        # Consider each undirected edge once\n        for i, j in combinations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                mat[i][j] = 1\n                mat[j][i] = 1\n\n    return mat\n```\n\nExplanation of key points:\n\n1. We handle the special `n_vertices == 1` case right away by returning `[[0]]`.  \n2. We build a pure Python nested list of zeros for the adjacency matrix, ensuring the output elements are Python ints.  \n3. For the directed case, we iterate over all ordered pairs `(i, j)` with `i != j` via `itertools.permutations`.  \n4. For the undirected case, we iterate over each unordered pair `(i, j)` once via `itertools.combinations`, and if an edge is added we write it symmetrically to both `[i][j]` and `[j][i]`.  \n5. We use `numpy.random.rand()` to draw a uniform random number in [0, 1) for each possible edge and compare it to `edge_prob`.  \n6. The final adjacency matrix is returned as a nested list of integers."}
{"task_id": 269, "completion_id": 0, "completion": "```python\ndef count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    # First layer: state_dimensions -> 164 hidden units\n    params_fc1 = state_dimensions * 164    # weights\n    params_fc1 += 164                      # biases\n\n    # Second layer: 164 hidden units -> action_dimensions\n    params_fc2 = 164 * action_dimensions   # weights\n    params_fc2 += action_dimensions        # biases\n\n    return params_fc1 + params_fc2\n```\n\nExplanation:\n- Layer 1 has `(state_dimensions \u00d7 164)` weights plus `164` biases.\n- Layer 2 has `(164 \u00d7 action_dimensions)` weights plus `action_dimensions` biases.\n- Summing these gives the total trainable parameters."}
{"task_id": 270, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context: np.ndarray, thetas: np.ndarray) -> tuple[float, int]:\n   Determine the best arm for a contextual linear bandit.\n\n    Each column k of `context` (shape D\u00d7K) is a context vector x_k \u2208 \u211d^D.\n    Each column k of `thetas`  (shape D\u00d7K) is the corresponding parameter\n    vector \u03b8_k \u2208 \u211d^D.\n\n    The expected reward of arm k is x_k^T \u03b8_k.\n\n    The function returns the maximal expected reward rounded to four\n    decimals and the index (0-based) of the arm that achieves it.  \n    If more than one arm attains the maximal reward (after rounding),\n    it returns the smallest index.\n\n    Args:\n        context: numpy.ndarray of shape (D, K)\n        thetas : numpy.ndarray of shape (D, K)\n\n    Returns:\n        Tuple containing (best_reward, best_arm).\n       # sanity check: same shape\n    if context.shape != thetas.shape:\n        raise ValueError`context` and `thetas` must have the same shape    \n    # Compute expected rewards for each arm k: x_k^T \u03b8_k\n    # (elementwise multiply columns and sum over rows)\n    rewards = np.sum(context * thetas, axis=0)  # shape (K,)\n\n    # Round each reward to 4 decimal places\n    rounded = np.round(rewards, 4)\n\n    # Find the index of the first occurrence of the max rounded reward\n    best_arm = int(np.argmax(rounded))\n    best_reward = float(rounded[best_arm])\n\n    return best_reward, best_arm\n```\n\nExplanation of key steps:\n\n1. **Compute rewards**  \n   We do an elementwise multiplication of `context` and `thetas` (both D\u00d7K), then sum over rows (axis=0), yielding a length-K vector where each entry is x_k^T \u03b8_k.\n\n2. **Round to 4 decimals**  \n   We apply `np.round(..., 4)`, so that ties after rounding are correctly handled.\n\n3. **Select the best arm**  \n   `np.argmax` on the rounded rewards gives the index of the first maximum, satisfying the \u201csmallest index on ties\u201d requirement.\n\nThis runs in O(D\u00b7K) time and uses NumPy vectorization."}
{"task_id": 271, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef xgboost_split_gain(\n    left_true: list[float],\n    left_pred: list[float],\n    right_true: list[float],\n    right_pred: list[float],\n) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    # Convert to numpy arrays for convenience\n    yL = np.array(left_true, dtype=float)\n    pL = np.array(left_pred, dtype=float)\n    yR = np.array(right_true, dtype=float)\n    pR = np.array(right_pred, dtype=float)\n\n    # Number of samples = Hessians (h_i = 1)\n    HL = yL.size\n    HR = yR.size\n\n    # If one side is empty, no valid split\n    if HL == 0 or HR == 0:\n        return 0.0\n\n    # Gradients g_i = pred_i - true_i\n    GL = (pL - yL).sum()\n    GR = (pR - yR).sum()\n    GP = GL + GR\n    HP = HL + HR\n\n    # Gain formula\n    gain = 0.5 * (GL * GL / HL + GR * GR / HR - GP * GP / HP)\n\n    # Round to 4 decimal places\n    gain_rounded = round(gain, 4)\n\n    # Avoid returning -0.0\n    if gain_rounded == 0.0:\n        return 0.0\n    return gain_rounded\n```\n\nExplanation of key steps:\n1. We compute gradients `g_i = pred_i - true_i` and note that all Hessians are 1, so `H = number_of_samples`.\n2. We sum the gradients for left (`G_L`), right (`G_R`), and parent (`G_P = G_L + G_R`), and similarly compute `H_L`, `H_R`, and `H_P`.\n3. We plug into the XGBoost gain formula for squared-error loss:\n   gain = \u00bd * (G_L\u00b2/H_L + G_R\u00b2/H_R \u2212 G_P\u00b2/H_P).\n4. Finally, we round to 4 decimal places and guard against returning \u22120.0."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to lists in case they're numpy arrays\n    X = list(feature)\n    y = list(target)\n    n = len(y)\n    # No data \u2192 no split\n    if n == 0:\n        return None, 0.0\n\n    # Helper: Shannon entropy of a label-count dict\n    def entropy(counts, total):\n        h = 0.0\n        for cnt in counts.values():\n            p = cnt / total\n            if p > 0.0:\n                h -= p * math.log2(p)\n        return h\n\n    # Total label counts and parent entropy\n    total_counts = Counter(y)\n    H_parent = entropy(total_counts, n)\n\n    # Group counts by each distinct feature value\n    counts_per_value = {}\n    for xi, yi in zip(X, y):\n        if xi not in counts_per_value:\n            counts_per_value[xi] = Counter()\n        counts_per_value[xi][yi] += 1\n\n    # If all feature values are identical, no threshold\n    distinct_vals = sorted(counts_per_value.keys())\n    if len(distinct_vals) < 2:\n        return None, 0.0\n\n    # Prepare to sweep thresholds in ascending order\n    left_counts = Counter()\n    left_n = 0\n    right_counts = total_counts.copy()\n    right_n = n\n\n    best_ig = 0.0\n    best_t = None\n\n    # For each gap between distinct_vals[i] and distinct_vals[i+1]:\n    #   move all points with x == distinct_vals[i] to the left side,\n    #   then compute IG at threshold midway.\n    for i in range(len(distinct_vals) - 1):\n        v = distinct_vals[i]\n        # Move all points at value v from right to left\n        cnts_v = counts_per_value[v]\n        block_n = sum(cnts_v.values())\n        left_n += block_n\n        right_n -= block_n\n        for cls, cnt in cnts_v.items():\n            left_counts[cls] += cnt\n            right_counts[cls] -= cnt\n            if right_counts[cls] == 0:\n                del right_counts[cls]\n\n        # Compute candidate threshold\n        t = (v + distinct_vals[i + 1]) / 2.0\n\n        # Compute entropies of the splits\n        H_left = entropy(left_counts, left_n)\n        H_right = entropy(right_counts, right_n)\n\n        # Information gain\n        ig = H_parent - (left_n / n) * H_left - (right_n / n) * H_right\n\n        # Update best\n        if ig > best_ig:\n            best_ig = ig\n            best_t = t\n        elif ig == best_ig and best_ig > 0 and t < best_t:\n            best_t = t\n\n    # If no positive gain found, report nothing useful\n    if best_t is None:\n        return None, 0.0\n\n    # Round as requested\n    return round(best_t, 4), round(best_ig, 4)\n```"}
{"task_id": 274, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef small_norm_clip(values):\n   Clip each element of *values* to the closed interval [-5, 5].\n\n    Args:\n        values (list[int | float] | np.ndarray): One-dimensional numeric data.\n\n    Returns:\n        list[float]: A Python list where every element has been limited to the\n            range [-5, 5] while preserving the original order.\n       # Convert input to a NumPy array for easy clipping\n    arr = np.asarray(values, dtype=float)\n    \n    # Verify it's one-dimensional\n    if arr.ndim != 1:\n        raise ValueErrorsmall_norm_clip() expects a one-dimensional input    \n    # Clip to [-5, 5] and convert back to a Python list\n    clipped = np.clip(arr, -5.0, 5.0)\n    return clipped.tolist()\n```\n\nExplanation:\n\n1. We use `np.asarray(values, dtype=float)` to handle both Python lists and NumPy arrays and ensure a floating\u2010point array.\n2. We check `arr.ndim != 1` to enforce the one\u2010dimensionality requirement.\n3. We apply `np.clip(arr, -5.0, 5.0)` to bound every entry between \u20135 and 5.\n4. Finally, `clipped.tolist()` returns a plain Python list of floats in the original order."}
{"task_id": 276, "completion_id": 0, "completion": "```python\nimport math\nimport string\nfrom collections import Counter\n\ndef additive_ngram_log_prob(corpus: list[str],\n                            sentence: str,\n                            N: int,\n                            k: float = 1.0,\n                            unk: bool = True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\"\"\"\n    # 1) simple tokeniser + punctuation stripping\n    def tokenize(s: str) -> list[str]:\n        toks = []\n        for w in s.lower().split():\n            w2 = w.strip(string.punctuation)\n            if w2:\n                toks.append(w2)\n        return toks\n\n    # 2) preprocess training corpus\n    corpus_tokens = [tokenize(sent) for sent in corpus]\n\n    # 3) build vocabulary\n    vocab = set()\n    # if unk is on, add <unk> before seeing any training tokens\n    if unk:\n        vocab.add(\"<unk>\")\n    # always add padding tokens\n    vocab.add(\"<bol>\")\n    vocab.add(\"<eol>\")\n    # now add all seen training tokens\n    for toks in corpus_tokens:\n        vocab.update(toks)\n    V = len(vocab)\n\n    # 4) count N-grams (and histories) in the training data\n    ngram_counts = Counter()\n    hist_counts = Counter()    # only used when N > 1\n    total_tokens = 0           # only used for N == 1\n\n    for toks in corpus_tokens:\n        padded = [\"<bol>\"] + toks + [\"<eol>\"]\n        if N == 1:\n            # unigram counts (including padding)\n            for w in padded:\n                ngram_counts[(w,)] += 1\n                total_tokens += 1\n        else:\n            L = len(padded)\n            for i in range(L - N + 1):\n                ng = tuple(padded[i:i+N])\n                h = ng[:-1]\n                ngram_counts[ng] += 1\n                hist_counts[h] += 1\n\n    # 5) preprocess the target sentence\n    test_toks = tokenize(sentence)\n    if unk:\n        # map any unseen token to <unk>\n        for i, w in enumerate(test_toks):\n            if w not in vocab:\n                test_toks[i] = \"<unk>\"\n\n    padded_test = [\"<bol>\"] + test_toks + [\"<eol>\"]\n\n    # 6) compute log-prob\n    logp = 0.0\n    if N == 1:\n        denom = total_tokens + k * V\n        for w in padded_test:\n            cnt = ngram_counts.get((w,), 0)\n            p = (cnt + k) / denom\n            logp += math.log10(p)\n    else:\n        L = len(padded_test)\n        for i in range(L - N + 1):\n            ng = tuple(padded_test[i:i+N])\n            h = ng[:-1]\n            cnt_ng = ngram_counts.get(ng, 0)\n            cnt_h = hist_counts.get(h, 0)\n            p = (cnt_ng + k) / (cnt_h + k * V)\n            logp += math.log10(p)\n\n    # 7) round to 4 decimal places and return\n    return round(logp, 4)\n```\n\nExplanation of the key steps:\n\n1. **Tokenisation & Cleaning**  \n   We lowercase, split on whitespace, then strip any leading/trailing ASCII punctuation (via `string.punctuation`).  \n2. **Vocabulary**  \n   - If `unk=True`, we pre\u2013add `<unk>`.  \n   - We always add `<bol>`, `<eol>`, and then every token seen in the training data.  \n3. **Counting N-grams**  \n   - We pad each training sentence once with `\"<bol>\"` at front and `\"<eol>\"` at end, then slide a window of size `N`.  \n   - For unigrams we simply count each token (including padding).  \n   - For higher-order N-grams we count each full N-gram and also increment the corresponding (N\u22121)-gram \u201chistory\u201d counter.  \n4. **Unknown Handling**  \n   - At test time, any token not in the vocabulary is replaced by `\"<unk>\"` if `unk=True`.  \n5. **Probability & Smoothing**  \n   - Unigram:  \n        P(w) = (count(w) + k) / (total_tokens + k\u00b7|V|)  \n   - N-gram (N>1):  \n        P(w|h) = (count(h,w) + k) / (count(h) + k\u00b7|V|)  \n   - We sum up `log10` of each N-gram probability.  \n6. **Output**  \n   We round the final log-probability to 4 decimal places."}
{"task_id": 277, "completion_id": 0, "completion": "```python\ndef is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    action_space = env[\"action_space\"]\n    observation_space = env[\"observation_space\"]\n\n    tuple_action = isinstance(action_space, (tuple, dict))\n    tuple_obs = isinstance(observation_space, (tuple, dict))\n\n    return tuple_action, tuple_obs\n```\n\nExplanation:\n\n- We extract the two required entries from the `env` dict.\n- We use `isinstance(..., (tuple, dict))` to test if each space is a built-in tuple or dict.\n- We return the two Boolean flags in the requested order."}
{"task_id": 278, "completion_id": 0, "completion": "```python\ndef evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    # Base case: if this node is a leaf, just return its value\n    if 'value' in tree:\n        return tree['value']\n\n    # Otherwise, it's an internal node: fetch the splitting criterion\n    feature_i = tree['feature_i']\n    threshold = tree['threshold']\n\n    # Decide which branch to follow\n    if sample[feature_i] <= threshold:\n        return evaluate_decision_tree(tree['true_branch'], sample)\n    else:\n        return evaluate_decision_tree(tree['false_branch'], sample)\n```\n\nExplanation:\n1. We check if the current `tree` dict has a `'value'` key. If so, it's a leaf and we return that value.  \n2. Otherwise, we extract the feature index and threshold, compare the sample's feature to the threshold, and recurse into either the `true_branch` or `false_branch`."}
{"task_id": 279, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse_loss(y_true, y_pred):\n   Mean Squared Error (MSE) loss, its gradient and accuracy.\n\n    Parameters\n    ----------\n    y_true : list[int] | numpy.ndarray\n        Ground truth labels (0 or 1).\n    y_pred : list[float] | numpy.ndarray\n        Model predictions (any real numbers).\n\n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n          * The MSE value (float)\n          * The gradient list (list[float])\n          * The accuracy (float)\n\n    Notes\n    -----\n    The gradient is calculated analytically as 2/N * (y_pred \u2212 y_true),\n    where N is the number of samples. All returned values are rounded to\n    four decimal places.\n       # Convert inputs to numpy arrays\n    y_true_arr = np.array(y_true, dtype=float)\n    y_pred_arr = np.array(y_pred, dtype=float)\n    \n    # Number of samples\n    N = y_true_arr.shape[0]\n    \n    # 1. Compute MSE\n    diffs = y_pred_arr - y_true_arr\n    mse_val = np.mean(diffs**2)\n    \n    # 2. Compute analytic gradient: (2/N) * (y_pred - y_true)\n    grad_arr = (2.0 / N) * diffs\n    \n    # 3. Compute binary classification accuracy at threshold 0.5\n    preds_bin = (y_pred_arr >= 0.5).astype(int)\n    true_bin  = y_true_arr.astype(int)\n    accuracy = np.mean(preds_bin == true_bin)\n    \n    # Round outputs to 4 decimal places\n    mse_rounded = round(mse_val, 4)\n    grad_list = [round(g, 4) for g in grad_arr.tolist()]\n    acc_rounded = round(accuracy, 4)\n    \n    return mse_rounded, grad_list, acc_rounded\n```\n\nExample usage:\n\n```python\ny_true = [0, 1, 1, 0]\ny_pred = [0.2, 0.6, 0.8, 0.1]\n\nmse, grad, acc = mse_loss(y_true, y_pred)\nprintMSE mse)         # MSE: 0.0525\nprintGradient grad)   # Gradient: [0.1, -0.2, -0.4, 0.05]\nprintAccuracy acc)    # Accuracy: 1.0\n```\n"}
{"task_id": 280, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool = False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if return_grad:\n        grad = alpha * w\n        # Round each element to 4 decimal places\n        return np.round(grad, 4)\n    else:\n        reg_value = 0.5 * alpha * np.sum(w * w)\n        # Round to 4 decimal places and convert to Python float\n        return float(np.round(reg_value, 4))\n```\n\nExplanation:\n\n1. When `return_grad` is False, we compute  \n   `0.5 * alpha * sum(w_i^2)` using NumPy, round the result to 4 decimals, and return it as a Python float.  \n2. When `return_grad` is True, we compute the elementwise gradient `alpha * w`, round every entry to 4 decimals, and return it as a NumPy array."}
{"task_id": 281, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError(f\"alpha must be non-negative, got {alpha}\")\n\n    class L1Reg:\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w):\n            # Ensure w is an array\n            arr = np.asarray(w)\n            # Compute L1 penalty: alpha * sum(abs(w_i))\n            penalty = self.alpha * np.sum(np.abs(arr))\n            return float(penalty)\n\n        def grad(self, w):\n            # Ensure w is an array\n            arr = np.asarray(w)\n            # Gradient of L1: alpha * sign(w), with sign(0)=0\n            return self.alpha * np.sign(arr)\n\n    return L1Reg(alpha)\n```\n\nExplanation:\n- The factory function checks that `alpha` is non-negative.\n- It defines an inner class `L1Reg` with:\n  - `__call__(w)`: returns the L1 penalty as a Python float.\n  - `grad(w)`: returns a NumPy array of the same shape as `w`, containing `alpha * sign(w)`.\n- `np.sign(0)` yields `0.0`, satisfying the requirement that the subgradient at zero is zero.\n- If `alpha = 0`, both the penalty and gradient correctly become zero."}
{"task_id": 282, "completion_id": 0, "completion": "```python\nimport math\n\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation is *online*: we iterate over the data once, keeping\n    only a constant amount of memory.  We use Welford's method to update\n    the running mean and running sum of squares of differences.\n\n    After processing all points:\n      - sample_variance = s / (n - 1)    if n > 1, else 0.0\n      - sample_std      = sqrt(sample_variance)\n    All results are rounded to 4 decimal places.\n\n    If the input list is empty, returns (0.0, 0.0, 0.0).\n    \"\"\"\n    n = 0\n    mean = 0.0\n    s = 0.0\n\n    for x in data:\n        n += 1\n        delta = x - mean\n        mean += delta / n\n        s += delta * (x - mean)\n\n    if n == 0:\n        return (0.0, 0.0, 0.0)\n\n    if n > 1:\n        variance = s / (n - 1)\n    else:\n        variance = 0.0\n\n    std_dev = math.sqrt(variance)\n\n    # Round to 4 decimal places\n    return (round(mean, 4), round(variance, 4), round(std_dev, 4))\n```\n\nExplanation of key steps:\n1. Initialize counters `n`, `mean`, and `s` to zero.\n2. For each new observation `x`:\n   - Increment `n`.\n   - Compute `delta = x - mean`.\n   - Update `mean += delta / n`.\n   - Update `s += delta * (x - mean)`.\n3. After the loop:\n   - If no data (`n == 0`), return all zeros.\n   - Otherwise compute the sample variance as `s / (n - 1)` (or 0 if `n == 1`).\n   - Compute standard deviation as the square root of the variance.\n   - Round all three results to 4 decimal places and return them."}
{"task_id": 283, "completion_id": 0, "completion": "Here\u2019s an implementation using NumPy. It computes the sigmoid\u2010transformed probabilities, the gradients g\u1d62 and Hessians h\u1d62, then forms the Newton leaf value and gain, and finally rounds both to 4 decimal places:\n\n```python\nimport numpy as np\n\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    # sigmoid to get probabilities\n    p = 1.0 / (1.0 + np.exp(-predicted))\n    # gradients and Hessians\n    g = p - actual\n    h = p * (1.0 - p)\n    # sums\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    # leaf value and gain\n    leaf_value = sum_g / (sum_h + regularization)\n    gain = 0.5 * (sum_g ** 2) / (sum_h + regularization)\n    # round to 4 decimals and return\n    return [\n        float(np.round(leaf_value, 4)),\n        float(np.round(gain, 4))\n    ]\n```\n\nExample usage:\n\n```python\nactual    = np.array([1, 0, 1, 1, 0])\npredicted = np.array([0.2, -1.3, 2.0, 0.0, 1.0])\nprint(binary_log_loss_metrics(actual, predicted, regularization=1.0))\n# e.g. [0.1102, 0.0041]\n```"}
{"task_id": 284, "completion_id": 0, "completion": "```python\ndef iht_get_index(\n    obj: object,\n    size: int,\n    table: dict,\n    overfull_count: list[int],\n    readonly: bool = False,\n) -> int | None:\n   Map *obj* to a stable integer index using a bounded index hash table.\n\n    Args:\n        obj:               Hashable object that should receive an index.\n        size:              Maximum number of *stored* entries.\n        table:             Mutable dictionary holding the current mapping.\n        overfull_count:    One-element list whose integer counts collisions.\n        readonly:          If True, never modify *table* or *overfull_count*.\n\n    Returns:\n        The integer index for *obj*, or None when *readonly* is True and the\n        object is not yet in *table*.\n       # 1) If already in the table, return its index (no side effects).\n    if obj in table:\n        return table[obj]\n\n    # 2) If readonly, do not insert anything; return None for unseen obj.\n    if readonly:\n        return None\n\n    # 3) If the table is not yet full, assign the next free index.\n    current_size = len(table)\n    if current_size < size:\n        table[obj] = current_size\n        return current_size\n\n    # 4) Table is full: compute a hash\u2010based collision index, count it, return it.\n    idx = hash(obj) % size\n    overfull_count[0] += 1\n    return idx\n```\n\nExplanation of the steps:\n\n1. Check if `obj` is already mapped. If so, return the stored index\u2014no mutation, even under `readonly`.\n2. If `readonly` is `True`, refuse to allocate new entries and return `None`.\n3. If there\u2019s still room (`len(table) < size`), assign the next free index (`0,1,2,\u2026`) and store it in the table.\n4. Once the table is full, compute `hash(obj) % size`, increment the collision counter, and return that as the index."}
{"task_id": 285, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    # Ensure x is 2-D: if 1-D, reshape to (1, d)\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    elif x.ndim != 2:\n        raise ValueError(f\"Input x must be 1D or 2D, got {x.ndim}D.\")\n    \n    # Ensure y is 2-D: if 1-D, reshape to (1, d)\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    elif y.ndim != 2:\n        raise ValueError(f\"Input y must be 1D or 2D, got {y.ndim}D.\")\n    \n    # Check feature dimension match\n    if x.shape[1] != y.shape[1]:\n        return -1\n    \n    # Compute Gram matrix and return as list of lists\n    gram = x @ y.T\n    return gram.tolist()\n```\n\nExplanation of key steps:\n1. If either `x` or `y` is one-dimensional, reshape it into a single-row 2-D array of shape `(1, d)`.\n2. If after reshaping the feature dimensions (`.shape[1]`) do not match, immediately return `-1`.\n3. Otherwise compute the matrix product `x @ y.T` and convert the result to a nested Python list via `tolist()`."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    rows, cols = shape\n    rnd = random.Random(seed)\n    return [[rnd.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError(\"Invalid initialization function.\")\n    return obj\n\n# Example usage:\nif __name__ == \"__main__\":\n    init_fn = get_initializer(\"ones_init\")\n    print(init_fn((2, 3)))\n    # Output: [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\n    init_fn = get_initializer(\"random_uniform_init\")\n    print(init_fn((2, 2), low=-1.0, high=1.0, seed=123))\n    # Output: deterministic 2x2 matrix in [-1, 1]\n```\n\nExplanation of key parts:\n\n1. **zeros_init** and **ones_init**  \n   - Use nested list comprehensions to build a `rows \u00d7 cols` matrix.  \n   - Fill with `0.0` or `1.0` respectively.\n\n2. **random_uniform_init**  \n   - Create a local `random.Random(seed)` instance so that each call with the same seed is deterministic and does not affect global RNG state.  \n   - Draw each element with `rnd.uniform(low, high)`.\n\n3. **get_initializer**  \n   - Looks up `name` in the module\u2019s `globals()`.  \n   - Verifies the object is callable.  \n   - Returns it or raises `ValueError(\"Invalid initialization function.\")`."}
{"task_id": 287, "completion_id": 0, "completion": "Here is an implementation that does exactly what you asked: it computes the 2-D average\u2010pooling forward pass, then routes back the gradients equally to every input element in each pooling window, rounds both outputs to 4 decimals, and returns them as Python lists.\n\n```python\nimport numpy as np\n\ndef average_pool2d(\n    X: np.ndarray,\n    pool_shape: tuple[int, int],\n    stride: tuple[int, int],\n    accum_grad: np.ndarray\n) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # output spatial dims\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n\n    # forward output\n    out = np.zeros((N, C, H_out, W_out), dtype=X.dtype)\n\n    # backward grad wrt X\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n\n    pool_size = p_h * p_w\n\n    # forward and backward\n    for i in range(H_out):\n        for j in range(W_out):\n            sh = i * s_h\n            sw = j * s_w\n            window = X[:, :, sh:sh + p_h, sw:sw + p_w]\n            # forward: mean over last two dims\n            out[:, :, i, j] = window.mean(axis=(2, 3))\n\n            # backward: take incoming gradient at out[:, :, i, j],\n            # split evenly among the p_h*p_w inputs\n            grad = accum_grad[:, :, i, j] / pool_size\n            # broadcast and accumulate\n            grad_input[:, :, sh:sh + p_h, sw:sw + p_w] += grad[:, :, None, None]\n\n    # round to 4 decimals and convert to lists\n    out_rounded = np.round(out, 4).tolist()\n    grad_in_rounded = np.round(grad_input, 4).tolist()\n\n    return out_rounded, grad_in_rounded\n```\n\nExplanation of the key steps:\n\n1. **Compute output shape**  \n   H_out = (H \u2212 p_h) // s_h + 1, W_out = (W \u2212 p_w) // s_w + 1.\n\n2. **Forward pass**  \n   For each spatial offset (i, j):\n     - Slice `X[:, :, sh:sh+p_h, sw:sw+p_w]`.\n     - Take the mean over the last two axes \u2192 `out[:, :, i, j]`.\n\n3. **Backward pass**  \n   For each (i, j):\n     - Grab the incoming gradient `accum_grad[:, :, i, j]`.\n     - Divide by the number of elements in the pool window `(p_h * p_w)`.\n     - Broadcast that small `(N, C)` array to `(N, C, p_h, p_w)` and add into the corresponding slice of `grad_input`.\n\n4. **Rounding & `tolist()`**  \n   Both outputs are rounded by `np.round(..., 4)` and finally turned into Python lists via `.tolist()`."}
{"task_id": 288, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars (including 0-d NumPy arrays), return the squared difference.\n    If they are one-dimensional iterables (same nonzero length), return the mean squared error.\n    Return -1 for any length mismatch, empty iterable, wrong dimensions, or invalid types.\n\n    All results are rounded to 4 decimal places.\n    \"\"\"\n    # Determine array dimensions: scalars and 0-d arrays both have ndim == 0\n    dim_a = np.ndim(actual)\n    dim_p = np.ndim(predicted)\n\n    # Case 1: both are scalars (or 0-d arrays)\n    if dim_a == 0 and dim_p == 0:\n        try:\n            a_val = float(actual)\n            p_val = float(predicted)\n        except Exception:\n            return -1\n        return round((a_val - p_val) ** 2, 4)\n\n    # Case 2: both are 1-d iterables (lists, tuples, or 1-d NumPy arrays)\n    if dim_a == 1 and dim_p == 1:\n        # Convert to float arrays\n        try:\n            arr_a = np.array(actual, dtype=float)\n            arr_p = np.array(predicted, dtype=float)\n        except Exception:\n            return -1\n\n        # Check lengths\n        if arr_a.size == 0 or arr_p.size == 0 or arr_a.shape[0] != arr_p.shape[0]:\n            return -1\n\n        mse = np.mean((arr_a - arr_p) ** 2)\n        return round(mse, 4)\n\n    # Any other combination is invalid\n    return -1\n```\n\nExplanation of key points:\n\u2022 We use `np.ndim()` to distinguish scalars/0-d arrays (ndim==0) from 1-d sequences (ndim==1).  \n\u2022 Scalars are cast to `float` and squared difference is returned.  \n\u2022 Sequences are converted to NumPy float arrays, checked for equal, nonzero length, and MSE computed.  \n\u2022 Any mismatch in dimension, length, or invalid type yields `-1`.  \n\u2022 Final result is always rounded to 4 decimal places via `round(..., 4)`."}
{"task_id": 289, "completion_id": 0, "completion": "```python\ndef format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    # Convert each (field, value) into 'field: \"value\"' and join with '\\n'\n    return \"\\n\".join(f'{field}: \"{value}\"' for field, value in entries)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Case 1: both are leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Compare leaf values with tolerance 1e-8\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8, rtol=0)\n\n    # Case 2: both are internal nodes\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check feature indices\n        if tree_a.feature != tree_b.feature:\n            return False\n        # Check thresholds with tolerance 1e-8\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8, rtol=0):\n            return False\n        # Recursively compare left and right subtrees\n        return (compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n\n    # Mismatched types (one is Leaf, the other is Node)\n    return False\n```\n\nExplanation of key points:\n- We first distinguish between `Leaf` and `Node` via `isinstance`.\n- When both are leaves, we use `np.allclose` with an absolute tolerance of `1e-8` and zero relative tolerance to compare their `value`s.\n- When both are internal nodes, we check that:\n  1. Their `feature` attributes are identical.\n  2. Their `threshold`s match within `1e-8` via `np.isclose`.\n  3. Their left and right subtrees are equivalent (recursive calls).\n- If one tree is a `Leaf` and the other a `Node`, we immediately return `False`.\n- The function returns only the boolean literals `True` or `False`."}
{"task_id": 291, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function returns -1.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(X, np.ndarray):\n        raise ValueError(\"X must be a NumPy array\")\n    m, d = X.shape\n    if not (1 <= n_components <= d):\n        return -1\n\n    # 1. Compute the d\u00d7d sample covariance matrix \u03a3\n    cov = np.cov(X, rowvar=False)\n\n    # 2. Eigen-decomposition of \u03a3\n    eigvals, eigvecs = np.linalg.eig(cov)\n    # Ensure we're working with real numbers (cov is real-symmetric \u2192 real eigens)\n    eigvals = eigvals.real\n    eigvecs = eigvecs.real\n\n    # 3. Sort eigenpairs by descending eigenvalue\n    sorted_indices = np.argsort(eigvals)[::-1]\n\n    # 4. Select first n_components eigenvectors\n    V = eigvecs[:, sorted_indices[:n_components]].copy()\n\n    # 5. Enforce deterministic sign: flip if first entry is negative\n    for j in range(V.shape[1]):\n        if V[0, j] < 0:\n            V[:, j] = -V[:, j]\n\n    # 6. Project the data and round to 4 decimals\n    projected = X @ V\n    projected_rounded = np.round(projected, 4)\n\n    # Convert to list of lists and return\n    return projected_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Input validation**  \n   We check that `n_components` is between 1 and `d` (the number of features). If not, we immediately return `-1`.\n\n2. **Covariance matrix**  \n   We use `np.cov(X, rowvar=False)` to get the `d\u00d7d` sample covariance matrix of the `m\u00d7d` data matrix `X`.\n\n3. **Eigen-decomposition**  \n   Using `np.linalg.eig`, we compute the eigenvalues `eigvals` and eigenvectors `eigvecs` of the covariance matrix. Although for a real symmetric matrix these are guaranteed real, we explicitly take the real parts for safety.\n\n4. **Sorting**  \n   We sort the eigenvalues in descending order and rearrange the eigenvectors accordingly.\n\n5. **Sign convention**  \n   To make the result deterministic, we inspect the first element of each retained eigenvector and flip the sign of the entire vector if that element is negative.\n\n6. **Projection and rounding**  \n   We project the original data `X` onto the subspace spanned by the top `n_components` eigenvectors (`X @ V`), round the result to 4 decimal places, and convert it to a Python list of lists using `.tolist()`."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape (or the cutoff is out of bounds),\n        the function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays of floats\n    try:\n        p1 = np.array(parent1, dtype=float)\n        p2 = np.array(parent2, dtype=float)\n    except Exception:\n        # Bad input that cannot be converted to a 2D numeric array\n        return -1\n\n    # Validate shapes\n    if p1.shape != p2.shape or p1.ndim != 2:\n        return -1\n\n    n_rows, n_cols = p1.shape\n\n    # Validate cutoff\n    if not isinstance(cutoff, int) or cutoff < 0 or cutoff > n_cols:\n        return -1\n\n    # Prepare empty children\n    c1 = np.empty_like(p1)\n    c2 = np.empty_like(p1)\n\n    # Copy columns before cutoff\n    if cutoff > 0:\n        c1[:, :cutoff] = p1[:, :cutoff]\n        c2[:, :cutoff] = p2[:, :cutoff]\n\n    # Copy columns from cutoff onward (inclusive)\n    if cutoff < n_cols:\n        c1[:, cutoff:] = p2[:, cutoff:]\n        c2[:, cutoff:] = p1[:, cutoff:]\n\n    # Convert back to Python lists and return\n    return c1.tolist(), c2.tolist()\n```\n\nExplanation of key steps:\n1. We first convert the input nested lists into NumPy arrays with `dtype=float` so we can do fast slicing and ensure a consistent numeric type.\n2. We check that both parents are 2\u2010D arrays of the same shape; if not, we return `-1`.\n3. We make sure `cutoff` is an integer in `[0, n_cols]`. Outside that range, we also return `-1`.\n4. We allocate two empty arrays (`c1`, `c2`) with the same shape as the parents.\n5. Columns before the cutoff are copied from each parent to its corresponding child, and columns from the cutoff to the end are swapped.\n6. Finally, we use `.tolist()` to turn the resulting NumPy arrays back into ordinary nested Python lists and return them as a tuple."}
{"task_id": 293, "completion_id": 0, "completion": "```python\ndef map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    # Normalize input: strip whitespace and lowercase\n    key = agent_name.strip().lower()\n    \n    # Predefined mapping of agents to (environment, access_type)\n    mapping = {\n        'dqn':        ('CartPole-v0', 'unwrapped'),\n        'ddpg':       ('Pendulum-v0', 'env'),\n        'a3c':        ('Pendulum-v0', 'unwrapped'),\n        'a2c':        ('CartPole-v0', 'env'),\n        'a2c_multi':  ('CartPole-v0', 'raw'),\n        'trpo':       ('Pendulum-v0', 'unwrapped'),\n    }\n    \n    return mapping.get(key, -1)\n\n\n# Example usage and simple tests:\nif __name__ == \"__main__\":\n    tests = [\"dqn\", \" DdPg \", \"A3C\", \"a2c\", \"a2C_Multi\", \"TRPO\", \"unknown\"]\n    for t in tests:\n        print(f\"{t!r} -> {map_agent_environment(t)}\")\n\n# Expected output:\n# 'dqn'        -> ('CartPole-v0', 'unwrapped')\n# ' DdPg '     -> ('Pendulum-v0', 'env')\n# 'A3C'        -> ('Pendulum-v0', 'unwrapped')\n# 'a2c'        -> ('CartPole-v0', 'env')\n# 'a2C_Multi'  -> ('CartPole-v0', 'raw')\n# 'TRPO'       -> ('Pendulum-v0', 'unwrapped')\n# 'unknown'    -> -1\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Initialize adjacency dict with every vertex label, even if isolated\n    adj: Dict[Any, List[Tuple[Any, float]]] = {\n        v: [] for v in G.get('_V2I', {})\n    }\n\n    # Quick exit if there are no vertices\n    if not adj:\n        return {}\n\n    is_directed = G.get('is_directed', False)\n    graph_lists = G.get('_G', [])\n\n    if is_directed:\n        # Just dump each stored directed edge\n        for edge_list in graph_lists:\n            for u, v, w in edge_list:\n                adj[u].append((v, w))\n    else:\n        # For undirected, add each edge exactly once in each direction\n        # Track seen undirected edges to avoid duplicates\n        seen = set()  # stores tuples of (frozenset({u, v}), weight)\n        for edge_list in graph_lists:\n            for u, v, w in edge_list:\n                key = (frozenset((u, v)), w)\n                if key not in seen:\n                    seen.add(key)\n                    # add u -> v\n                    adj[u].append((v, w))\n                    # add v -> u (unless it's a self-loop, in which case skip duplicate)\n                    if u != v:\n                        adj[v].append((u, w))\n\n    # Finally, sort each neighbour list by neighbour label\n    for u in adj:\n        adj[u].sort(key=lambda pair: pair[0])\n\n    return adj\n```\n\nExplanation of key points:\n1. We start by seeding `adj` with every vertex label from `G['_V2I']`, ensuring even isolated vertices get an entry.\n2. If the graph is directed, we simply copy each stored `(u, v, weight)` into `adj[u]`.\n3. If undirected, we keep a `seen` set of undirected\u2010edge identifiers `(frozenset({u, v}), weight)` so that whether the internal structure stored the edge once or twice, we only add it once in each direction.\n4. After building the adjacency lists, we sort each list by the neighbour label to ensure deterministic ordering."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n   Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n       # Convert input to a NumPy array\n    arr = np.asarray(x)\n\n    # Check elementwise equality to 0 or 1, then ensure all are True\n    return bool(np.all((arr == 0) | (arr == 1)))\n```\n\nExplanation:\n1. We first convert the input `x` to a NumPy array (`np.asarray(x)`) so that array-like inputs (lists, tuples) are handled transparently.  \n2. Using elementwise comparison, `(arr == 0) | (arr == 1)` produces a boolean array that is `True` where elements are 0 or 1, and `False` otherwise.  \n3. We then call `np.all(...)` which returns `True` if *every* entry in that boolean array is `True`.  \n4. Finally, we wrap the result in Python's `bool(...)` to ensure a built-in `True` or `False` is returned.  \n\nThis method works for integer, float, and boolean arrays of any shape."}
{"task_id": 297, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple = (0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    # 1. Unpack feature_range and validate\n    a, b = feature_range\n    if a >= b:\n        return -1\n\n    # 2. Handle empty data\n    if not data:\n        return []\n\n    # 3. Convert to numpy array of floats\n    arr = np.array(data, dtype=float)\n\n    # 4. Compute per-column min and max\n    col_min = np.min(arr, axis=0)\n    col_max = np.max(arr, axis=0)\n    col_range = col_max - col_min\n\n    # 5. For constant columns, treat range as 1\n    #    (so every value goes to the lower bound 'a')\n    const_mask = (col_range == 0)\n    col_range[const_mask] = 1.0\n\n    # 6. Apply the min\u2013max scaling formula\n    scaled = (arr - col_min) / col_range  # now in [0,1] (or all zeros for constants)\n    scaled = scaled * (b - a) + a\n\n    # 7. Replace any nan or infinities with 0.0\n    scaled = np.nan_to_num(scaled, nan=0.0, posinf=0.0, neginf=0.0)\n\n    # 8. Round to four decimals and convert back to a Python list\n    scaled = np.round(scaled, 4)\n    return scaled.tolist()\n```\n\nExplanation of key steps:\n\n1. **Validate feature_range**: Immediately return `-1` if the lower bound `a` is not strictly less than the upper bound `b`.\n2. **Empty data**: If `data` is empty, return an empty list.\n3. **Numpy conversion**: Convert the input list to a NumPy array of type `float` for vectorized operations.\n4. **Find min and max per column**: Use `np.min` and `np.max` along `axis=0`.\n5. **Handle constant columns**: Wherever the range (`max - min`) is zero, reset that range to `1.0`. This forces all values in that column to map to the lower bound `a`.\n6. **Scale**: First normalize to `[0,1]` via `(x - min) / range`, then stretch and shift to `[a,b]`.\n7. **Clean up**: Replace any `nan`, `inf`, or `-inf` values with `0.0`.\n8. **Round and convert**: Round results to four decimal places and call `.tolist()` to return a plain Python list of lists."}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n   Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n       # Tokenize the query\n    q_tokens = query.split()\n    # If the query is too short to form even one N-gram, return -inf\n    if len(q_tokens) < N:\n        return float('-inf')\n\n    # --- Unigram model ---\n    if N == 1:\n        # Count all tokens in the corpus\n        unigram_counts = Counter()\n        total_tokens = 0\n        for sent in corpus:\n            toks = sent.split()\n            unigram_counts.update(toks)\n            total_tokens += len(toks)\n        # If corpus is empty, no probability mass\n        if total_tokens == 0:\n            return float('-inf')\n\n        # Compute log-prob of the query\n        log_prob = 0.0\n        for w in q_tokens:\n            cnt = unigram_counts.get(w, 0)\n            if cnt == 0:\n                return float('-inf')\n            p = cnt / total_tokens\n            log_prob += math.log(p)\n        return round(log_prob, 4)\n\n    # --- Higher-order N-gram model (N > 1) ---\n    # We'll build two Counters:\n    #   1) ngram_counts for N-grams\n    #   2) prefix_counts for (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    pad_beg =<bol> * (N - 1)\n    pad_end =<eol>    for sent in corpus:\n        toks = sent.split()\n        padded = pad_beg + toks + pad_end\n        # Slide over padded sentence\n        L = len(padded)\n        for i in range(L - N + 1):\n            ngram = tuple(padded[i : i + N])\n            prefix = tuple(padded[i : i + N - 1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Now process the query in the same way\n    padded_q = pad_beg + q_tokens + pad_end\n    Lq = len(padded_q)\n    total_log_prob = 0.0\n\n    for i in range(Lq - N + 1):\n        ngram = tuple(padded_q[i : i + N])\n        prefix = tuple(padded_q[i : i + N - 1])\n        num = ngram_counts.get(ngram, 0)\n        den = prefix_counts.get(prefix, 0)\n        # If we've never seen this N-gram or prefix, prob is zero\n        if num == 0 or den == 0:\n            return float('-inf')\n        p = num / den\n        total_log_prob += math.log(p)\n\n    return round(total_log_prob, 4)\n```\n\nExplanation of key steps:\n\n1. **Tokenization**  \n   We split each sentence on whitespace to obtain tokens.\n\n2. **Padding**  \n   - For N=1, we do not pad.  \n   - For N>1, we prepend `N\u22121` `<bol>` tokens and append one `<eol>` token to each sentence (both in corpus and in query).\n\n3. **Counting**  \n   - For unigrams, we simply count each token and keep track of the total token count.  \n   - For higher-order models, we count every N-gram (`ngram_counts`) as well as its (N\u22121)-gram prefix (`prefix_counts`).\n\n4. **Probability and Log Probability**  \n   - Unigrams: \\(P(w) = \\tfrac{\\mathrm{count}(w)}{\\text{total tokens}}\\).  \n   - N-grams: \\(P(w_N \\mid w_1\\ldots w_{N-1}) = \\tfrac{\\mathrm{count}(w_1\\ldots w_N)}{\\mathrm{count}(w_1\\ldots w_{N-1})}\\).  \n   - We sum the natural logs of these probabilities across all consecutive N-grams in the padded query.\n\n5. **Zero-Probability Handling**  \n   If any required N-gram or prefix was never seen in the corpus (count = 0), we immediately return `float('-inf')`.\n\n6. **Rounding**  \n   Finally, we round the total log-probability to 4 decimal places before returning."}
{"task_id": 299, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom __future__ import annotations\n\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iterations: int = 500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    m, n = X.shape\n    # Initialize centroids as the first k samples (make a float copy)\n    centroids = X[:k].astype(float, copy=True)\n\n    # Placeholder for cluster assignments\n    assignments = np.zeros(m, dtype=int)\n\n    for _ in range(max_iterations):\n        # 1) Assignment step: assign each sample to the nearest centroid\n        #    we use squared Euclidean distance (no need to take sqrt for comparison)\n        #    distances shape: (m, k)\n        diffs = X[:, None, :] - centroids[None, :, :]      # shape (m, k, n)\n        sq_dists = np.sum(diffs * diffs, axis=2)           # shape (m, k)\n        new_assignments = np.argmin(sq_dists, axis=1)      # shape (m,)\n\n        # 2) Update step: recompute centroids\n        new_centroids = centroids.copy()\n        for j in range(k):\n            members = X[new_assignments == j]\n            if members.shape[0] > 0:\n                new_centroids[j] = members.mean(axis=0)\n\n        # Check for convergence (centroids did not move)\n        if np.allclose(new_centroids, centroids):\n            assignments = new_assignments\n            break\n\n        centroids = new_centroids\n        assignments = new_assignments\n\n    return assignments.tolist()\n```\n\nExplanation of key points:\n- We initialize centroids deterministically as the first `k` points of `X`.\n- In each iteration, we compute squared distances from each point to each centroid and assign points to the nearest one.\n- We then recompute each centroid as the mean of its assigned points; if a cluster has no points assigned, its centroid remains unchanged.\n- We stop early if centroids do not change (using `np.allclose`) or once we hit `max_iterations`.\n- Finally, we return the cluster assignments as a plain Python `list[int]`."}
{"task_id": 300, "completion_id": 0, "completion": "```python\nimport heapq\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef top_k_elements(sequence: List[Number], k: int, order: str =largest -> List[Number]:\n   Keeps only the k largest or k smallest numbers from *sequence*.\n\n    The function must visit each element exactly once and store no more than\n    *k* items at any time by making use of the heapq module (binary heap).\n\n    Args:\n        sequence: A list of integers or floats representing the data stream.\n        k: The number of extreme values to keep.\n        order:largest to retain the k biggest values,smallest to retain\n            the k smallest.\n\n    Returns:\n        A list with at most k numbers sorted according to *order*.\n       if k <= 0 or not sequence:\n        return []\n\n    n = len(sequence)\n    # If k >= number of elements, just sort the entire sequence.\n    if k >= n:\n        return sorted(sequence, reverse=(order ==largest    # Forlargest maintain a min\u2010heap of size up to k.\n    # Forsmallest maintain a max\u2010heap of size up to k via negation.\n    heap = []\n    if order ==largest        # min\u2010heap, drop the smallest when overfull:\n        for x in sequence:\n            if len(heap) < k:\n                heapq.heappush(heap, x)\n            else:\n                # If new element is bigger than the smallest in the heap, replace.\n                if x > heap[0]:\n                    heapq.heapreplace(heap, x)\n        # heap contains the k largest in ascending order\n        # We want non\u2010increasing (largest \u2192 smallest)\n        result = sorted(heap, reverse=True)\n\n    elif order ==smallest        # max\u2010heap via negation, drop the largest when overfull:\n        for x in sequence:\n            nx = -x\n            if len(heap) < k:\n                heapq.heappush(heap, nx)\n            else:\n                # If new element is smaller than the largest in the heap, replace.\n                if nx > heap[0]:\n                    heapq.heapreplace(heap, nx)\n        # heap contains the k smallest as negated values in ascending order\n        # We want non\u2010decreasing (smallest \u2192 largest)\n        result = sorted((-nx for nx in heap))\n\n    else:\n        raise ValueErrororder must be either 'largest' or 'smallest'    return result\n```\n\nExplanation of the approach:\n\n1. Handle edge cases up front:  \n   - If `k <= 0` or the input is empty, return an empty list.  \n   - If `k >= len(sequence)`, simply return the entire sequence sorted in the requested direction.\n\n2. Use a fixed\u2010size heap of at most `k` elements:  \n   - For the **k largest** elements, maintain a *min\u2010heap*.  \n     - Push each value until the heap has size `k`.  \n     - Afterward, for each new value `x`, if `x` is greater than the heap\u2019s minimum (the root), replace the root with `x` (via `heapreplace`).  \n   - For the **k smallest** elements, simulate a *max\u2010heap* by pushing negated values `-x` onto a min\u2010heap.  \n     - Push until size `k`.  \n     - Then, for a new value `x`, compare `-x` to the heap\u2019s root; if it\u2019s larger, replace.\n\n3. After processing the stream, the heap contains exactly the `k` desired extreme values (or fewer if the input was shorter). Finally, sort them in the correct order:\n   - Forlargest: reverse sort the min\u2010heap contents (so that largest \u2192 smallest).  \n   - Forsmallest: convert negated heap contents back to positives and sort ascending (smallest \u2192 largest).\n\nEach push/replace operation takes O(log k) time, and you only store up to k items, so the overall memory is O(k) and the scan is one pass through the data."}
{"task_id": 301, "completion_id": 0, "completion": "```python\ndef inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    # Early exit on empty input\n    if not pairs:\n        return []\n\n    # Assume Node is already defined elsewhere, with:\n    #   Node.key, Node.val, Node.left, Node.right\n    #   and comparison operators comparing on .val\n    # Here we just use it.\n    root = Node(pairs[0][0], pairs[0][1])\n\n    # Insert helper using provided Node comparisons\n    def insert(root, node):\n        curr = root\n        while True:\n            if node < curr:       # uses Node.__lt__, i.e. node.val < curr.val\n                if curr.left is None:\n                    curr.left = node\n                    return\n                curr = curr.left\n            else:                 # node >= curr\n                if curr.right is None:\n                    curr.right = node\n                    return\n                curr = curr.right\n\n    # Build the BST\n    for key, val in pairs[1:]:\n        insert(root, Node(key, val))\n\n    # In-order traversal to collect keys\n    result = []\n    def inorder(node):\n        if node is None:\n            return\n        inorder(node.left)\n        result.append(node.key)\n        inorder(node.right)\n\n    inorder(root)\n    return result\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    # 1. Build adjacency matrix W with w_ij = 1 / (1 + ||xi - xj||)\n    # Compute pairwise Euclidean distances\n    # shape: (n, n)\n    diffs = X[:, np.newaxis, :] - X[np.newaxis, :, :]   # (n, n, d)\n    dist = np.sqrt(np.sum(diffs**2, axis=2))            # (n, n)\n    W = 1.0 / (1.0 + dist)\n    np.fill_diagonal(W, 0.0)  # zero diagonal\n\n    # 2. Graph Laplacian L = D - W\n    degree = np.sum(W, axis=1)          # (n,)\n    D = np.diag(degree)                 # (n, n)\n    L = D - W                           # (n, n)\n\n    # 3. Compute first k eigenvectors of L (smallest eigenvalues)\n    # eigh returns eigenvalues in ascending order for symmetric matrices\n    eigvals, eigvecs = np.linalg.eigh(L)\n    E = eigvecs[:, :k]                  # (n, k)\n\n    # 4. Run k-means on rows of E\n    # Initialize centroids to first k rows of E\n    centroids = E[:k, :].copy()         # (k, k)\n    labels = np.zeros(n, dtype=int)\n    for iteration in range(100):\n        # Compute distances from each point to each centroid\n        # shape: (n, k)\n        diff = E[:, np.newaxis, :] - centroids[np.newaxis, :, :]  # (n, k, k)\n        dists = np.sqrt(np.sum(diff**2, axis=2))                  # (n, k)\n        new_labels = np.argmin(dists, axis=1)                     # (n,)\n\n        # Check for convergence\n        if iteration > 0 and np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        for ci in range(k):\n            members = E[labels == ci]\n            if members.shape[0] == 0:\n                # Empty cluster: reinitialize to random row of E\n                rand_idx = np.random.randint(0, n)\n                centroids[ci] = E[rand_idx]\n            else:\n                centroids[ci] = np.mean(members, axis=0)\n\n    # 5. Return labels as a Python list\n    return labels.tolist()\n```\n\nExplanation of key steps:\n\n1. We compute the full pairwise Euclidean distance matrix in a vectorized fashion, then convert it to weights `W` via the provided formula and zero out the diagonal.\n\n2. We form the (unnormalized) Laplacian `L = D - W`, where `D` is the diagonal degree matrix.\n\n3. We call `np.linalg.eigh` on `L` (a symmetric matrix) to obtain all eigenvalues and eigenvectors, then take the first `k` eigenvectors corresponding to the smallest eigenvalues to form the embedding `E`.\n\n4. We implement a basic k-means:\n   - Initialize centroids to the first `k` rows of `E`.\n   - Iterate up to 100 times:\n     - Assign each point to its nearest centroid.\n     - If no labels change from the previous iteration, stop early.\n     - Recompute each centroid as the mean of its assigned points. If a cluster has no points, we reinitialize that centroid randomly.\n\n5. Finally, we convert the NumPy array of integer labels to a Python list and return it."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = -> str:\n   Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n       prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    return (\n       ------------------------- DEBUG -------------------------\\n        fMine (prev) [{prev_label}]:\\n        fprev_mine}\\n\\n        firs (prev) [{prev_label}]:\\n        fgolds[prev_label]}\\n\\n        fMine [{curr_label}]:\\n        fcurr_mine}\\n\\n        firs [{curr_label}]:\\n        fgolds[curr_label]}{warn_str}\\n       ----------------------- END DEBUG -----------------------    )\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # 1) Optionally add intercept\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1), dtype=float)\n        X = np.hstack((ones, X))\n\n    N, M = X.shape\n\n    # 2) Build prior mean vector mu_vec of length M\n    mu_arr = np.asarray(mu)\n    if mu_arr.ndim == 0:\n        mu_vec = np.full(M, float(mu_arr))\n    else:\n        mu_vec = mu_arr.ravel().astype(float)\n        if mu_vec.shape[0] != M:\n            raise ValueError(f\"Prior mean mu length {mu_vec.shape[0]} does not match number of features {M}\")\n\n    # 3) Build prior covariance V_mat (M x M)\n    if V is None:\n        V_mat = np.eye(M, dtype=float)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 0:\n            # scalar\n            V_mat = V_arr * np.eye(M, dtype=float)\n        elif V_arr.ndim == 1:\n            # diagonal\n            if V_arr.shape[0] != M:\n                raise ValueError(f\"Diagonal V length {V_arr.shape[0]} does not match number of features {M}\")\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f\"Full V shape {V_arr.shape} does not match ({M}, {M})\")\n            V_mat = V_arr.copy()\n        else:\n            raise ValueError(\"Prior scale V must be None, scalar, 1-D or 2-D array\")\n\n    # 4) Compute precision matrix: V^{-1} + X^T X\n    # Compute V^{-1}\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError(\"Prior covariance V is singular and not invertible\")\n\n    XtX = X.T @ X\n    precision = V_inv + XtX\n\n    # 5) Compute posterior covariance (up to \u03c3\u00b2): Sigma_b = precision^{-1}\n    try:\n        Sigma_b = np.linalg.inv(precision)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError(\"Precision matrix is singular and not invertible\")\n\n    # 6) Compute posterior mean: mu_b = Sigma_b @ (V^{-1} mu + X^T y)\n    Xty = X.T @ y\n    term = V_inv @ mu_vec + Xty\n    mu_b = Sigma_b @ term\n\n    # 7) Round to 4 decimal places and return as list\n    mu_b_rounded = np.round(mu_b, 4)\n    return [float(val) for val in mu_b_rounded]\n```\n\nExplanation of key steps:\n\n1. If `fit_intercept=True`, we prepend a column of ones to `X`, increasing the feature dimension by 1.\n2. We broadcast or validate the prior mean `mu` into a vector of length `M`.\n3. We construct the prior scale matrix `V` appropriately:\n   - `None` \u2192 identity,\n   - scalar \u2192 scalar \u00d7 identity,\n   - 1-D array \u2192 diagonal matrix,\n   - 2-D array \u2192 full matrix (validated shape).\n4. We compute the precision matrix `V^{-1} + X\u1d40X` and invert it to get the posterior covariance up to \u03c3\u00b2.\n5. We compute the posterior mean `\u03bc_b = \u03a3_b (V^{-1} \u03bc + X\u1d40y)`.\n6. Finally, we round each coefficient to 4 decimal places and return them as a Python list."}
{"task_id": 305, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    arr = np.array(x, dtype=float)\n\n    # Numerically stable sigmoid:\n    #   if x >= 0: sigmoid(x) = 1 / (1 + exp(-x))\n    #   else:       sigmoid(x) = exp(x) / (1 + exp(x))\n    sigmoid_vals = np.where(\n        arr >= 0,\n        1.0 / (1.0 + np.exp(-arr)),\n        np.exp(arr) / (1.0 + np.exp(arr))\n    )\n\n    # Round to 4 decimal places\n    sigmoid_vals = np.round(sigmoid_vals, 4)\n\n    # Convert to Python list\n    result = sigmoid_vals.tolist()\n\n    # If result is a scalar (not a list), wrap it in a list\n    if not isinstance(result, list):\n        result = [result]\n\n    return result\n```\n\nExplanation of key steps:\n1. **Normalization**: We first cast the input `x` into a NumPy array of floats, which handles scalars, lists, tuples, and arrays uniformly.\n2. **Stable computation**:\n   - For non-negative elements, we compute `1 / (1 + exp(-x))`.\n   - For negative elements, we compute `exp(x) / (1 + exp(x))`.\n3. **Rounding**: We round the entire array to 4 decimal places with `np.round`.\n4. **Output**: We convert the result back to a native Python list. If the input was a single scalar, we ensure that the function still returns a list (e.g., `[0.5]`).\n"}
{"task_id": 307, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target array of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        (X_sample, y_sample) where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    # ensure X and y have the same number of samples\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of rows (samples).\")\n\n    n_samples = X.shape[0]\n    # draw indices with replacement\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    # index into X and y to form the bootstrap sample\n    X_sample = X[idxs]\n    y_sample = y[idxs]\n    return X_sample, y_sample\n```\n\nExplanation:\n\n1. We verify that the first dimension of `X` and `y` match.\n2. We set `n_samples = X.shape[0]`.\n3. We draw `n_samples` indices from `0 \u2026 n_samples-1` with replacement using `np.random.choice`.\n4. We index `X` and `y` with these indices. NumPy\u2019s fancy indexing preserves the input array\u2019s remaining dimensions, so `X_sample` has shape `(n_samples, ...)` and `y_sample` has shape `(n_samples, ...)`.\n5. Because we rely solely on NumPy\u2019s random number generator, setting `np.random.seed(...)` beforehand makes the output reproducible."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    # 1. Set default max_freq to Nyquist if not provided\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # 2. Convert Hz to Mel\n    def hz_to_mel(f):\n        return 2595.0 * np.log10(1.0 + f / 700.0)\n\n    def mel_to_hz(m):\n        return 700.0 * (10**(m / 2595.0) - 1.0)\n\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n\n    # 3. Equally spaced points in Mel domain\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # 4. Convert Mel points back to Hz\n    hz_points = mel_to_hz(mel_points)\n\n    # 5. DFT bin center frequencies\n    #    We only need bins from 0 to N//2 inclusive\n    bin_count = N // 2 + 1\n    freqs = np.linspace(0, fs / 2, bin_count)\n\n    # 6. Allocate filterbank matrix\n    filterbank = np.zeros((n_filters, bin_count), dtype=float)\n\n    # 7. Build each filter\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        # Slopes\n        # Avoid division in the loop\n        denom_left = f_center - f_left\n        denom_right = f_right - f_center\n\n        # Compute the two slopes for all bins\n        left_slope = (freqs - f_left) / denom_left\n        right_slope = (f_right - freqs) / denom_right\n\n        # The filter is the positive part of the min of the two\n        filt = np.maximum(0.0, np.minimum(left_slope, right_slope))\n\n        # Normalize to unit area in Mel domain if requested\n        if normalize:\n            area_norm = 2.0 / (f_right - f_left)\n            filt *= area_norm\n\n        filterbank[i, :] = filt\n\n    # 8. Round to 4 decimal places and convert to plain Python list\n    fb_rounded = []\n    for i in range(n_filters):\n        row = [round(val, 4) for val in filterbank[i, :]]\n        fb_rounded.append(row)\n\n    return fb_rounded\n```\n\nExplanation of key steps:\n\n1. **Frequency/Mel conversions**  \n   We use the standard formulas  \n   &nbsp;&nbsp;&nbsp;&nbsp;mel = 2595 \u00b7 log\u2081\u2080(1 + f/700)  \n   &nbsp;&nbsp;&nbsp;&nbsp;f   = 700 \u00b7 (10^(mel/2595) \u2212 1)\n\n2. **Mel\u2010spaced corner points**  \n   We compute `n_filters + 2` points equally spaced on the Mel axis, then map back to Hertz.  These give the left, center, and right \u201ccorners\u201d for each triangular filter.\n\n3. **Bin frequencies**  \n   For an N\u2010point DFT the k-th bin\u2019s center frequency is `k\u00b7fs/N`.  We only need bins `k = 0 \u2026 N//2`.\n\n4. **Triangle weights**  \n   For filter i with corners (f\u1d62, f\u1d62\u208a\u2081, f\u1d62\u208a\u2082), the weight at bin frequency f is  \n     w = max(0, min((f \u2013 f\u1d62)/(f\u1d62\u208a\u2081 \u2013 f\u1d62), (f\u1d62\u208a\u2082 \u2013 f)/(f\u1d62\u208a\u2082 \u2013 f\u1d62\u208a\u2081)))  \n\n5. **Normalization**  \n   If `normalize=True`, each filter is scaled by `2/(f\u1d62\u208a\u2082 \u2013 f\u1d62)` so that its area in Mel\u2010space is unity.\n\n6. **Output**  \n   We round each weight to 4 decimal places and return a plain Python list of lists, shape `(n_filters, N//2+1)`."}
{"task_id": 309, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: np.ndarray, w0: float, w: np.ndarray, v: np.ndarray) -> list[float]:\n   Return Factorization Machine predictions for all samples in *X*.\n\n    The function implements the FM prediction formula using the bias *w0*,\n    the linear weights *w* and the factor matrix *v*, and returns a Python list\n    of floats rounded to four decimal places.\n       # Linear term: <w, x_i> for each sample\n    linear_term = X.dot(w)               # shape: (m,)\n\n    # Interaction term:\n    # First component: sum_f ( (x_i^T v_f)^2 )\n    XV = X.dot(v)                        # shape: (m, k)\n    sum_sq_proj = np.sum(XV**2, axis=1)  # shape: (m,)\n\n    # Second component: sum_f ( (x_i^2)^T (v_f^2) )\n    sum_sq_feat = np.sum((X**2).dot(v**2), axis=1)  # shape: (m,)\n\n    interaction_term = 0.5 * (sum_sq_proj - sum_sq_feat)\n\n    # Final prediction\n    y_hat = w0 + linear_term + interaction_term\n\n    # Round to four decimals and convert to Python list\n    y_hat_rounded = np.round(y_hat, 4)\n    return y_hat_rounded.tolist()\n```\n\nExplanation of steps:\n1. Compute the linear term via a simple dot product of `X` and `w`.\n2. Compute the pairwise interaction term using the efficient FM formula:\n   - Project each sample `x_i` onto each latent factor `v_f`, square and sum.\n   - Subtract the projection of squared features onto squared factors.\n   - Multiply by 0.5.\n3. Add the global bias `w0`, the linear term, and the interaction term.\n4. Round each prediction to four decimal places and return as a Python `list`."}
{"task_id": 310, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_error(actual: list[float] | np.ndarray,\n                            predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns -1 if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or -1 on invalid\n        input.\n    \"\"\"\n    # Convert inputs to NumPy arrays of type float\n    try:\n        y_true = np.array(actual, dtype=float)\n        y_pred = np.array(predicted, dtype=float)\n    except Exception:\n        return -1.0\n\n    # Validate dimensions and lengths\n    if y_true.ndim != 1 or y_pred.ndim != 1:\n        return -1.0\n    n = y_true.size\n    if n == 0 or y_pred.size != n:\n        return -1.0\n\n    # Compute RMSE\n    mse = np.sum((y_true - y_pred) ** 2) / n\n    rmse = np.sqrt(mse)\n\n    # Round to 4 decimal places and return as a Python float\n    return float(round(rmse, 4))\n```\n\nExplanation of key steps:\n1. We first try to convert both `actual` and `predicted` into NumPy arrays of type float.  \n2. We then check that both arrays are one\u2010dimensional, non\u2010empty, and have the same length; if not, we return -1.  \n3. We compute the mean squared error (MSE) by summing the squared differences and dividing by `n`.  \n4. We take the square root to get RMSE, round to 4 decimal places, and ensure the result is a pure Python `float`."}
{"task_id": 311, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef clip_non_negative(arr):\n   Replace every negative number in *arr* with 0.0.\n\n    Parameters\n    ----------\n    arr : list | numpy.ndarray\n        A list (possibly nested) or NumPy array containing numeric values.\n\n    Returns\n    -------\n    list\n        A Python list of the same shape where all negative values are replaced\n        by 0.0. All elements in the returned list are floats.\n       # Create a NumPy array of floats. Always copy so we don't modify the original.\n    data = np.array(arr, dtype=float, copy=True)\n\n    # Vectorized clipping: replace negatives with 0.0\n    clipped = np.clip(data, a_min=0.0, a_max=None)\n\n    # Convert back to a nested Python list of floats\n    return clipped.tolist()\n```\n\nExplanation of key points:\n- We use `np.array(arr, dtype=float, copy=True)` to ensure we have a float array and to avoid in-place modification of the original if it was already an ndarray.\n- We call `np.clip(..., a_min=0.0, a_max=None)` to set all values below 0.0 to 0.0 in a fully vectorized way (no explicit Python loops).\n- Finally, we use the array\u2019s `tolist()` method to return a native Python list (nested structure preserved) containing only floats."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    # For the periodic case we generate length = window_len + 1 and drop the last sample\n    length = window_len + 1 if not symmetric else window_len\n    N = length - 1\n\n    # Sample indices\n    n = np.arange(length, dtype=float)\n\n    # Blackman\u2013Harris formula\n    w = (a0\n         - a1 * np.cos(2.0 * np.pi * n / N)\n         + a2 * np.cos(4.0 * np.pi * n / N)\n         - a3 * np.cos(6.0 * np.pi * n / N))\n\n    # Drop last sample for periodic form\n    if not symmetric:\n        w = w[:-1]\n\n    # Round to 4 decimal places and return as a Python list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```\n\nExplanation of key points:\n- We handle the special cases `window_len <= 0` and `window_len == 1` explicitly.\n- For the *symmetric* variant, we use `N = window_len - 1` and compute exactly `window_len` samples.\n- For the *periodic* variant, we compute one extra sample (`length = window_len + 1`) with `N = window_len`, then discard the last sample so that the sequence of `window_len` values wraps seamlessly.\n- Final window values are rounded to four decimal places and converted to a standard Python `list` of `float`."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        # Use recurrence to shift x up to at least 6\n        result = 0.0\n        while x < 6.0:\n            result -= 1.0 / x\n            x += 1.0\n        # Asymptotic expansion for large x\n        inv = 1.0 / x\n        inv2 = inv * inv\n        inv4 = inv2 * inv2\n        inv6 = inv4 * inv2\n        return (result\n                + math.log(x)\n                - 0.5 * inv\n                - (1.0 / 12.0) * inv2\n                + (1.0 / 120.0) * inv4\n                - (1.0 / 252.0) * inv6)\n\n    # Ensure we have a NumPy array of floats\n    gamma_arr = np.asarray(gamma, dtype=float)\n    row = gamma_arr[d]\n    a_dt = row[t]\n    sum_row = row.sum()\n\n    val = digamma(a_dt) - digamma(sum_row)\n    # Round to four decimal places and return as float\n    return round(val, 4)\n```\n\nExplanation of the key steps:\n1. We define an inner `digamma(x)` that\n   - Recursively shifts `x` upward (using \u03c8(x) = \u03c8(x+1) \u2212 1/x) until `x >= 6`.\n   - Applies the asymptotic expansion \n     \u03c8(x) \u2248 ln x \u2212 1/(2x) \u2212 1/(12x\u00b2) + 1/(120x\u2074) \u2212 1/(252x\u2076).\n2. We convert the input `gamma` to a NumPy array of floats, pick out the `d`-th row,\n   and compute `a_dt = gamma[d,t]` and `sum_row = \u2211\u2096 gamma[d,k]`.\n3. We evaluate \u03c8(a_dt) \u2212 \u03c8(sum_row), round the result to four decimal places, and return it."}
{"task_id": 315, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    # Normalize the name: lowercase and strip underscores\n    key = name.lower().replace('_', '')\n\n    # Define the three loss functions\n    def mae(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        val = np.mean(np.abs(yt - yp))\n        return float(round(val, 4))\n\n    def mse(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        val = np.mean((yt - yp) ** 2)\n        return float(round(val, 4))\n\n    def cross_entropy(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        # Clip to avoid log(0)\n        p = np.clip(yp, 1e-15, 1 - 1e-15)\n        val = -np.mean(yt * np.log(p) + (1 - yt) * np.log(1 - p))\n        return float(round(val, 4))\n\n    # Map normalized keys to the proper function\n    loss_map = {\n        # MAE aliases\n        'mae': mae,\n        'meanabsoluteerror': mae,\n        # MSE aliases\n        'mse': mse,\n        'meansquarederror': mse,\n        # Cross-Entropy aliases\n        'crossentropy': cross_entropy,\n        'logloss': cross_entropy,\n        'ce': cross_entropy,\n    }\n\n    try:\n        return loss_map[key]\n    except KeyError:\n        raise ValueError(\"Invalid loss function.\")\n```\n\nExplanation:\n\n1. We normalize the input `name` by converting it to lowercase and removing any underscores.\n2. We define three inner functions: `mae`, `mse`, and `cross_entropy`. Each converts inputs to NumPy arrays, computes the appropriate loss, and then rounds the result to four decimal places before returning it as a Python float.\n3. We map all allowed aliases (post-normalization) to these functions in `loss_map`.\n4. If the normalized key isn\u2019t in `loss_map`, we raise a `ValueError(\"Invalid loss function.\")` as specified."}
{"task_id": 316, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    # Ensure both sequences have the same length\n    if len(x) != len(y):\n        return -1\n\n    # Convert inputs to NumPy arrays of floats\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Compute the L2 norm of the difference\n    diff = x_arr - y_arr\n    dist = np.sqrt(np.dot(diff, diff))\n\n    # Round to four decimal places and return\n    return round(float(dist), 4)\n```\n\nExplanation of key steps:\n1. Check lengths with `len()`. If unequal, immediately return `-1`.  \n2. Cast inputs to `np.ndarray` of type `float`.  \n3. Compute `(x - y)` elementwise, then use a dot\u2010product with itself to get the sum of squares.  \n4. Take the square root (`np.sqrt`) to obtain the Euclidean distance.  \n5. Finally, wrap in `float()` (to ensure a native Python float) and `round(..., 4)` before returning."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = -> str:\n   Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n       # determine previous index (floor at 0)\n    prev_ix = max(ix - 1, 0)\n\n    prev_pred, prev_label = params[prev_ix]\n    curr_pred, curr_label = params[ix]\n\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n\n    header = * 25 + DEBUG + * 25\n    footer = * 23 + END DEBUG + * 23\n\n    lines = [\n        header,\n        fMine (prev) [{prev_label}]:        prev_pred,\n               firs (prev) [{prev_label}]:        prev_gold,\n         # first blank line after prev block\n         # second blank line after prev block\n        fMine [{curr_label}]:        curr_pred,\n               firs [{curr_label}]:        curr_gold + warn_str,\n        footer\n    ]\n\n    # Join with newline, no extra newline at end\n    returnnjoin(lines)\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n   Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n       n_samples, n_features = X_train.shape\n    # Initialize sample weights uniformly\n    w = np.full(n_samples, 1.0 / n_samples)\n\n    # To store the parameters of each weak learner\n    stumps = []  # each element: (feature_index, threshold, polarity, alpha)\n\n    eps = 1e-10  # to avoid division by zero in alpha calc\n\n    # Boosting rounds\n    for m in range(n_estimators):\n        best_err = float('inf')\n        best_j = None\n        best_t = None\n        best_p = None\n        best_pred = None\n\n        # Find the best decision stump\n        for j in range(n_features):\n            x_j = X_train[:, j]\n            thresholds = np.unique(x_j)\n            for t in thresholds:\n                # Polarity +1 and -1\n                for p in [1, -1]:\n                    # stump prediction: p * sign(x_j - t)\n                    pred = p * np.where(x_j - t < 0, -1, 1)\n                    # weighted error\n                    err = np.sum(w * (pred != y_train))\n                    if err < best_err:\n                        best_err = err\n                        best_j = j\n                        best_t = t\n                        best_p = p\n                        best_pred = pred\n\n        # Clamp error to avoid division by zero or log of zero\n        best_err = max(best_err, eps)\n        best_err = min(best_err, 1 - eps)\n\n        # Compute alpha\n        alpha = 0.5 * math.log((1 - best_err) / best_err)\n\n        # Save the stump parameters\n        stumps.append((best_j, best_t, best_p, alpha))\n\n        # Update sample weights\n        # w_i <- w_i * exp(-alpha * y_i * h_m(x_i))\n        w *= np.exp(-alpha * y_train * best_pred)\n        # Normalize\n        w_sum = np.sum(w)\n        if w_sum <= 0:\n            # all weights have underflowed; reinitialize uniformly\n            w = np.full(n_samples, 1.0 / n_samples)\n        else:\n            w /= w_sum\n\n    # Now predict on X_test\n    n_test = X_test.shape[0]\n    F = np.zeros(n_test)  # aggregated score\n\n    for (j, t, p, alpha) in stumps:\n        x_j_test = X_test[:, j]\n        pred = p * np.where(x_j_test - t < 0, -1, 1)\n        F += alpha * pred\n\n    # Final prediction: sign(F)\n    y_pred = np.where(F < 0, -1, 1)\n\n    return y_pred.tolist()\n```\n\nExplanation of key steps:\n1. Initialize sample weights `w` uniformly.\n2. For each boosting round:\n   - Loop over features `j`, candidate thresholds `t` (unique values), and polarities `p = \u00b11`.\n   - Compute the stump prediction `h(x) = p * sign(x_j - t)`.\n   - Measure weighted error `\u03b5 = \u03a3 w\u1d62 [h(x\u1d62) \u2260 y\u1d62]`.\n   - Keep the stump `(j, t, p)` that gives minimal `\u03b5`.\n   - Compute its coefficient `\u03b1 = \u00bd ln((1\u2212\u03b5)/\u03b5)`.\n   - Update sample weights:  \n     w\u1d62 \u2190 w\u1d62 \u00b7 exp(\u2212\u03b1 \u00b7 y\u1d62 \u00b7 h(x\u1d62)), then normalize.\n3. For prediction, sum the weighted stump outputs and take the sign.\n\nThis implementation uses only `numpy` and `math` and returns a plain Python list of `-1` or `1` as required."}
{"task_id": 319, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef stochastic_gradient_descent(\n    X: np.ndarray | list,\n    y: np.ndarray | list,\n    learning_rate: float = 0.01,\n    epochs: int = 1000\n) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    # Convert inputs to numpy arrays of type float\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float).reshape(-1)  # ensure shape (m,)\n\n    m, n = X_arr.shape\n\n    # 1) Prepend a bias column of ones\n    X_b = np.hstack((np.ones((m, 1)), X_arr))  # shape: (m, n+1)\n\n    # 2) Initialize theta to zeros (n+1,)\n    theta = np.zeros(n + 1, dtype=float)\n\n    # 3) SGD loop\n    for _ in range(epochs):\n        for i in range(m):\n            xi = X_b[i]            # shape (n+1,)\n            yi = y_arr[i]          # scalar\n            y_pred = theta.dot(xi) # scalar\n            error = y_pred - yi    # scalar\n            # update rule\n            theta -= learning_rate * error * xi\n\n    # 4) Round to 4 decimal places and return as Python list\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Conversion**: We first ensure `X` and `y` are NumPy arrays of dtype float for numerical stability.\n2. **Bias Column**: We horizontally stack a column of ones to `X` so that the bias term \u03b8\u2080 is learned alongside other weights.\n3. **Initialization**: The weight vector `theta` of length `n+1` is initialized to zeros.\n4. **SGD Update**: For each epoch, and for each sample `(x\u1da6, y\u1da6)`, we compute the prediction, error, and perform the SGD update \n   ```\n   \u03b8 \u2190 \u03b8 \u2212 lr * error * x\u1da6\n   ```\n5. **Return**: Finally, we round each component of the learned `theta` to four decimal places and return it as a standard Python list."}
{"task_id": 321, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport string\n\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    # reproducibility\n    np.random.seed(42)\n\n    # define our \"alphabet\": space=0, a-z=1..26, A-Z=27..52\n    alphabet = \" \" + string.ascii_lowercase + string.ascii_uppercase\n    alpha_size = len(alphabet)\n\n    L = len(target)\n    # map each character to its index in the alphabet\n    char2idx = {c: i for i, c in enumerate(alphabet)}\n    # convert target to an array of indices\n    target_idx = np.array([char2idx[c] for c in target], dtype=np.int32)\n\n    # initialize population: shape (population_size, L), each gene is an index 0..alpha_size-1\n    population = np.random.randint(0, alpha_size, size=(population_size, L), dtype=np.int32)\n\n    # track the best ever individual\n    best_ind = None\n    best_fit = -np.inf\n\n    for gen in range(iterations):\n        # 1) Fitness evaluation\n        # compute distance sum for each individual\n        distances = np.abs(population - target_idx).sum(axis=1)\n        fitness = 1.0 / (distances + 1e-6)\n\n        # update the best ever\n        idx_max = np.argmax(fitness)\n        if fitness[idx_max] > best_fit:\n            best_fit = fitness[idx_max]\n            best_ind = population[idx_max].copy()\n\n        # early stopping if we've found the target exactly\n        if distances[idx_max] == 0:\n            break\n\n        # 2) Selection: roulette-wheel without replacement\n        probs = fitness / fitness.sum()\n        # sample a mating pool of size population_size without replacement\n        parents_idx = np.random.choice(\n            population_size,\n            size=population_size,\n            replace=False,\n            p=probs\n        )\n        # shuffle the pool so pairing is random\n        np.random.shuffle(parents_idx)\n\n        # 3-6) Crossover, Mutation, Replacement\n        new_population = []\n        # pair parents sequentially\n        n_pairs = population_size // 2\n        for i in range(n_pairs):\n            p1 = population[parents_idx[2 * i]]\n            p2 = population[parents_idx[2 * i + 1]]\n            # crossover point in [1, L-1]\n            if L > 1:\n                cx = np.random.randint(1, L)\n                c1 = np.concatenate([p1[:cx], p2[cx:]])\n                c2 = np.concatenate([p2[:cx], p1[cx:]])\n            else:\n                # if string length is 1, crossover does nothing\n                c1 = p1.copy()\n                c2 = p2.copy()\n\n            # mutation: each gene has chance mutation_rate to be replaced\n            mask1 = np.random.rand(L) < mutation_rate\n            mask2 = np.random.rand(L) < mutation_rate\n            if mask1.any():\n                c1[mask1] = np.random.randint(0, alpha_size, size=mask1.sum())\n            if mask2.any():\n                c2[mask2] = np.random.randint(0, alpha_size, size=mask2.sum())\n\n            new_population.append(c1)\n            new_population.append(c2)\n\n        # if population_size is odd, append the best individual to keep size constant\n        if population_size % 2 == 1:\n            new_population.append(best_ind.copy())\n\n        # form the next generation\n        population = np.vstack(new_population)[:population_size]\n\n    # convert best index-array back to string\n    best_str = \"\".join(alphabet[i] for i in best_ind)\n    return best_str\n```"}
{"task_id": 322, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nEPS = 1e-15  # small constant for numerical stability\n\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    # Clip predictions to avoid log(0)\n    p = np.clip(predicted, EPS, 1 - EPS)\n    # Compute element\u2010wise loss and then mean\n    loss = -np.mean(actual * np.log(p) + (1 - actual) * np.log(1 - p))\n    # Round to 4 decimal places and ensure Python float\n    return float(round(loss, 4))\n```\n\nExplanation of key steps:\n1. We clip each probability `p_i` into `[\u03b5, 1\u2212\u03b5]` to prevent `log(0)` or `log(1)`.\n2. We compute the standard binary cross-entropy term for each element:\n   y\u1d62\u00b7ln(p\u1d62) + (1\u2212y\u1d62)\u00b7ln(1\u2212p\u1d62).\n3. We take the negative mean of these terms to get the final loss.\n4. Finally, we round the result to 4 decimal places and convert it to a plain Python float."}
{"task_id": 324, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bilinear_interpolate(X: np.ndarray, x: list[float], y: list[float]) -> list[list[float]]:\n   Estimate pixel values at arbitrary (x, y) positions using bilinear interpolation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Image array of shape (rows, cols, channels).\n    x : list[float]\n        Horizontal (column) coordinates.\n    y : list[float]\n        Vertical (row) coordinates.\n\n    Returns\n    -------\n    list[list[float]]\n        Interpolated values where each inner list corresponds to one pixel and\n        contains *channels* numbers rounded to 4 decimal places.  If the input\n        lists `x` and `y` differ in length the function returns an empty list.\n       # if the coordinate lists don't match in length, bail out\n    if len(x) != len(y):\n        return []\n\n    rows, cols, channels = X.shape\n    out = []\n\n    for xi, yi in zip(x, y):\n        # clip to the valid range [0, cols-1], [0, rows-1]\n        xc = min(max(xi, 0.0), cols - 1.0)\n        yc = min(max(yi, 0.0), rows - 1.0)\n\n        # integer neighbors\n        x0 = int(np.floor(xc))\n        y0 = int(np.floor(yc))\n        x1 = x0 + 1 if x0 + 1 < cols else x0\n        y1 = y0 + 1 if y0 + 1 < rows else y0\n\n        # fractional parts\n        dx = xc - x0\n        dy = yc - y0\n\n        # pixel values at the four corners\n        I00 = X[y0, x0].astype(float)\n        I10 = X[y0, x1].astype(float)\n        I01 = X[y1, x0].astype(float)\n        I11 = X[y1, x1].astype(float)\n\n        # bilinear interpolation formula\n        w00 = (1 - dx) * (1 - dy)\n        w10 = dx * (1 - dy)\n        w01 = (1 - dx) * dy\n        w11 = dx * dy\n\n        Iinterp = w00 * I00 + w10 * I10 + w01 * I01 + w11 * I11\n\n        # round to 4 decimal places and append as a plain Python list\n        Irounded = np.round(Iinterp, 4).tolist()\n        out.append(Irounded)\n\n    return out\n```\n\nExplanation of key steps:\n\n1. **Length check**: If `len(x) != len(y)`, return `[]` immediately.  \n2. **Clipping**: Each coordinate is clipped into the valid range before any interpolation.  \n3. **Neighbor indices**: We find the floor of `(xc, yc)` to get `(x0, y0)` and then `x1 = min(x0+1, cols-1)`, `y1 = min(y0+1, rows-1)`.  \n4. **Weights**:  \n   - w00 = (1\u2212dx)(1\u2212dy)  \n   - w10 = dx(1\u2212dy)  \n   - w01 = (1\u2212dx)dy  \n   - w11 = dx\u00b7dy  \n5. **Interpolation**: We multiply each corner value by its corresponding weight and sum.  \n6. **Rounding**: Finally we round each channel to 4 decimal places and convert to a Python list."}
{"task_id": 326, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svm_predict(\n    X: list[list[float]],\n    support_vectors: list[list[float]],\n    lagr_multipliers: list[float],\n    support_vector_labels: list[int],\n    intercept: float,\n    kernel: str = \"rbf\",\n    power: int = 3,\n    gamma: float | None = None,\n    coef: float = 1.0,\n) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X_arr = np.array(X, dtype=float)\n    sv = np.array(support_vectors, dtype=float)\n    alphas = np.array(lagr_multipliers, dtype=float)\n    y_sv = np.array(support_vector_labels, dtype=int)\n\n    # Handle empty query set\n    if X_arr.size == 0:\n        return []\n\n    n_query, n_features = X_arr.shape\n\n    # Set default gamma\n    gamma_val = gamma if gamma is not None else 1.0 / n_features\n\n    # Compute kernel matrix K_mat of shape (n_sv, n_query)\n    if kernel == \"linear\":\n        # K(u, v) = u^T v\n        K_mat = sv.dot(X_arr.T)\n    elif kernel == \"polynomial\":\n        # K(u, v) = (gamma * u^T v + coef)^power\n        K_mat = (gamma_val * sv.dot(X_arr.T) + coef) ** power\n    elif kernel == \"rbf\":\n        # K(u, v) = exp(-gamma * ||u - v||^2)\n        # Compute squared Euclidean distances between each sv and each X\n        # Resulting shape is (n_sv, n_query)\n        # Using (a - b)^2 = a^2 + b^2 - 2ab\n        sv_sq = np.sum(sv**2, axis=1)[:, np.newaxis]      # (n_sv, 1)\n        X_sq = np.sum(X_arr**2, axis=1)[np.newaxis, :]    # (1, n_query)\n        cross = sv.dot(X_arr.T)                           # (n_sv, n_query)\n        dists_sq = sv_sq + X_sq - 2 * cross\n        K_mat = np.exp(-gamma_val * dists_sq)\n    else:\n        raise ValueError(f\"Unsupported kernel '{kernel}'. Choose 'linear', 'polynomial', or 'rbf'.\")\n\n    # Compute decision values: f = \u03a3 \u03b1_i y_i K(x_i, x) + intercept\n    coeff = alphas * y_sv                        # (n_sv,)\n    decision_vals = coeff.dot(K_mat) + intercept # (n_query,)\n\n    # Assign labels: +1 if f >= 0, else -1\n    preds = np.where(decision_vals >= 0, 1, -1)\n\n    return preds.tolist()\n```"}
{"task_id": 328, "completion_id": 0, "completion": "```python\nfrom typing import List\n\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        # Skip empty strings; check first char for uppercase\n        if word and word[0].isupper():\n            return [word]\n    return []\n```\n\nExplanation:\n- We iterate over each word in the input list.\n- We first guard against empty strings (`if word`) so that accessing `word[0]` is safe.\n- If the first character `word[0]` is an uppercase letter (`.isupper()`), we immediately return a one\u2010element list containing that word.\n- If the loop finishes without finding any capitalized word, we return an empty list."}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    # guard against invalid inputs\n    if N <= 0 or fs <= 0:\n        return []\n\n    # frequency resolution\n    df = fs / N\n\n    if positive_only:\n        # non-negative bins from k=0 to floor(N/2)\n        k = np.arange(0, N//2 + 1)\n        freqs = k * df\n    else:\n        # full spectrum as in numpy.fft.fftfreq\n        # d=1/fs makes the returned frequencies in Hz\n        freqs = np.fft.fftfreq(N, d=1/fs)\n\n    # round to 4 decimal places and convert to plain Python list\n    freqs_rounded = np.round(freqs, 4)\n    return freqs_rounded.tolist()\n```\n\nExplanation of key points:\n- If `N` or `fs` is non\u2010positive, return an empty list immediately.\n- In the `positive_only` case, we build the array of bin indices `k = 0,1,\u2026,\u230aN/2\u230b` and multiply by the resolution `df = fs/N`.\n- Otherwise, we defer to NumPy\u2019s `fftfreq` with `d=1/fs` so that the output frequencies come out in Hz and in the required order.\n- Finally we round every element to four decimal places and call `.tolist()` to satisfy the \u201cplain Python list\u201d requirement."}
{"task_id": 330, "completion_id": 0, "completion": "```python\ndef update_kernel_settings(parameters: dict, hyperparameters: dict, summary_dict: dict) -> tuple[dict, dict]:\n   Update kernel parameters and hyperparameters.\n\n    The function must not modify the input dictionaries. It should return two\n    *new* dictionaries in which the supplied `summary_dict` updates have been\n    applied following the rules explained in the task description.\n\n    Args:\n        parameters (dict):      Existing kernel parameters.\n        hyperparameters (dict): Existing kernel hyperparameters.\n        summary_dict (dict):    Dictionary that may contain the keys\n           parameters and/orhyperparameters whose values are dictionaries\n            of updates. Any top-level keys are also treated as updates.\n\n    Returns:\n        tuple[dict, dict]: `(new_parameters, new_hyperparameters)` \u2013 the\n        updated dictionaries.\n       # Start with copies so we don't mutate the inputs\n    new_parameters = parameters.copy()\n    new_hyperparameters = hyperparameters.copy()\n\n    # 1) Flatten the summary_dict into a single dict of updates.\n    flat_updates = {}\n\n    # Merge nestedparameters first (if present and is a dict)\n    params_upd = summary_dict.getparameters    if isinstance(params_upd, dict):\n        flat_updates.update(params_upd)\n\n    # Merge nestedhyperparameters next (if present and is a dict)\n    hypers_upd = summary_dict.gethyperparameters    if isinstance(hypers_upd, dict):\n        flat_updates.update(hypers_upd)\n\n    # Finally, merge any other top\u2010level keys (excluding the two special ones)\n    for key, val in summary_dict.items():\n        if key not inparametershyperparameters            flat_updates[key] = val\n\n    # 2) Apply the flattened updates to the correct new dicts\n    for key, val in flat_updates.items():\n        # Update parameters if the key already exists there\n        if key in new_parameters:\n            new_parameters[key] = val\n        # Otherwise, update hyperparameters if it exists there\n        elif key in new_hyperparameters:\n            new_hyperparameters[key] = val\n        # Keys not in either are ignored\n\n    return new_parameters, new_hyperparameters\n```\n\nExplanation of the steps:\n\n1. **Copy inputs**: We start by copying `parameters` and `hyperparameters` so as not to mutate the originals.\n2. **Flattening**:\n   - We pull out any nestedparameters dict and merge its items into `flat_updates`.\n   - We pull out any nestedhyperparameters dict and merge its items as well.\n   - Then we loop over all other keys in `summary_dict` (excluding the special two) and add them to `flat_updates`.\n3. **Applying updates**:\n   - For each key in `flat_updates`, if it already exists in the *new* parameters dict, we overwrite it there.\n   - Else if it exists in the *new* hyperparameters dict, we overwrite it there.\n   - Any keys not found in either original dict are ignored.\n\nThis satisfies all requirements: no in-place modifications, proper flattening, and correct dispatch to parameters vs. hyperparameters."}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n   Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n       # Convert inputs to numpy arrays\n    y_true = np.asarray(y_true, dtype=float)\n    preds = np.asarray(predictions, dtype=float)\n    mask = np.asarray(oob_mask)\n    \n    # Check dimensions\n    if y_true.ndim != 1:\n        raise ValueErrory_true must be a 1D array of shape (n_samples,    if preds.ndim != 2 or mask.ndim != 2:\n        raise ValueErrorpredictions and oob_mask must be 2D arrays                        n_samples, n_estimators    if preds.shape != mask.shape:\n        raise ValueErrorpredictions and oob_mask must have the same shape    n_samples, _ = preds.shape\n    if y_true.shape[0] != n_samples:\n        raise ValueErrorThe length of y_true must match the number of rows in predictions    \n    # Ensure mask is boolean\n    mask = mask.astype(bool)\n    \n    # Count the number of OOB predictions per sample\n    oob_counts = mask.sum(axis=1)  # shape (n_samples,)\n    \n    # Identify samples with at least one OOB prediction\n    valid = oob_counts > 0\n    if not np.any(valid):\n        return -1.0\n    \n    # Sum the OOB predictions for each sample\n    # (preds * mask) zeroes out in-bag predictions, summing gives total OOB sum\n    oob_sum = (preds * mask).sum(axis=1)\n    \n    # Compute OOB average per sample (only for valid samples)\n    oob_avg = oob_sum[valid] / oob_counts[valid]\n    \n    # Compute squared errors and then mean\n    sq_errors = (oob_avg - y_true[valid]) ** 2\n    mse = sq_errors.mean()\n    \n    # Round to 4 decimal places\n    return round(float(mse), 4)\n```\n\nExplanation of key steps:\n1. Convert inputs to NumPy arrays for easy vectorized operations.  \n2. Validate that dimensions match:  \n   - `y_true` is 1D of length `n_samples`.  \n   - `predictions` and `oob_mask` are 2D of shape `(n_samples, n_estimators)`.  \n3. Build a boolean mask (`mask`) marking out-of-bag predictions.  \n4. For each sample, count how many OOB predictions it has (`oob_counts`).  \n5. Select only those samples with at least one OOB prediction.  \n6. Sum their OOB predictions (`oob_sum`), divide by the OOB count to get the per-sample average (`oob_avg`), then compute squared errors and average them.  \n7. If no sample has an OOB prediction, return `-1.0`. Otherwise, return the MSE rounded to four decimal places."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # 1. Count support of each item across distinct transactions\n    item_counter = Counter()\n    for trans in transactions:\n        # count each item only once per transaction\n        unique_items = set(trans)\n        item_counter.update(unique_items)\n\n    # 2. Filter out infrequent items\n    frequent_items = {item for item, sup in item_counter.items() if sup >= min_support}\n    # If no items are frequent, return an empty root\n    if not frequent_items:\n        return {\"support\": 0, \"children\": {}}\n\n    # 3. Global ordering: by descending support, then alphabetically\n    #    We'll map item -> its rank in the sorted list\n    sorted_items = sorted(\n        frequent_items,\n        key=lambda item: (-item_counter[item], item)\n    )\n    # Create a lookup for ordering\n    order_lookup = {item: idx for idx, item in enumerate(sorted_items)}\n\n    # 4. Initialize the root of the FP-tree\n    root = {\"support\": 0, \"children\": {}}\n\n    # 5. Process each transaction\n    for trans in transactions:\n        # Keep only frequent items, remove duplicates, and sort by global order\n        filtered = set(trans) & frequent_items\n        if not filtered:\n            continue\n        ordered_trans = sorted(filtered, key=lambda item: order_lookup[item])\n\n        # 6. Walk the tree, updating/inserting nodes\n        current_node = root\n        for item in ordered_trans:\n            # If the child doesn't exist, create it\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            # Move to the child node\n            child = current_node[\"children\"][item]\n            # Increment its support\n            child[\"support\"] += 1\n            # Continue down the path\n            current_node = child\n\n    return root\n```\n\nExplanation of the main steps:\n\n1. We use `Counter` on the set of each transaction so repeated items in one transaction count only once.  \n2. We drop items whose total support is below `min_support`.  \n3. We sort the remaining items by descending support (and alphabetically to break ties), then store their positions in `order_lookup`.  \n4. We initialize the root node as a dictionary with `\"support\": 0` and an empty `\"children\"` dict.  \n5. For each transaction, we:\n   - Filter out infrequent items and remove duplicates by converting to a `set`.\n   - Sort items in the transaction according to the global ordering.\n   - Traverse or extend the path in the FP-tree, creating child nodes if needed, and incrementing each visited node\u2019s `\"support\"` by 1."}
{"task_id": 333, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef logistic_regression(X: np.ndarray,\n                        y: np.ndarray,\n                        alpha: float = 0.1,\n                        num_iter: int = 10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    m, n = X.shape\n\n    # 1. Standardise features (z-score)\n    means = X.mean(axis=0)\n    stds = X.std(axis=0) + 1e-8\n    X_std = (X - means) / stds\n\n    # 2. Add bias term\n    X_aug = np.hstack([np.ones((m, 1)), X_std])  # shape (m, n+1)\n\n    # 3. Initialize parameters\n    theta = np.zeros(n + 1)  # shape (n+1,)\n\n    # Sigmoid function\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # 4. Batch gradient descent\n    for _ in range(num_iter):\n        z = X_aug.dot(theta)              # shape (m,)\n        h = sigmoid(z)                    # shape (m,)\n        grad = (1.0 / m) * X_aug.T.dot(h - y)  # shape (n+1,)\n        theta -= alpha * grad\n\n    # 5. Compute final probabilities and threshold at 0.5\n    probs = sigmoid(X_aug.dot(theta))\n    preds = (probs >= 0.5).astype(int)\n\n    # 6. Return as a standard Python list\n    return preds.tolist()\n```\n\nExplanation of key steps:\n1.  Standardise each column of `X` by subtracting its mean and dividing by its standard deviation (plus a tiny constant to avoid division by zero).  \n2.  Prepend a column of ones for the intercept term.  \n3.  Initialise the parameter vector `theta` to zeros.  \n4.  Perform batch gradient descent using the logistic (sigmoid) hypothesis to minimise the cross-entropy cost.  \n5.  After training, compute the class probability for each example, classify as `1` if \u22650.5, else `0`.  \n6.  Return the predictions as a plain Python list of integers."}
{"task_id": 334, "completion_id": 0, "completion": "```python\nimport math\n\ndef noam_learning_rate(step: int,\n                       model_dim: int = 512,\n                       scale_factor: float = 1.0,\n                       warmup_steps: int = 4000) -> float:\n   Return the learning-rate given by the Noam schedule.\n\n    The function must follow the formula described in the task description and\n    round the result to 9 decimal places.\n       # If step is less than 1, we return 0.0\n    if step < 1:\n        return 0.0\n\n    # Compute the factors of the Noam schedule:\n    # 1) scale = scale_factor * model_dim^{-0.5}\n    scale = scale_factor * model_dim**-0.5\n\n    # 2) step^{-0.5}\n    term1 = step**-0.5\n\n    # 3) step * warmup_steps^{-1.5}\n    term2 = step * warmup_steps**-1.5\n\n    # Take the minimum of the two terms and apply the scale\n    lr = scale * min(term1, term2)\n\n    # Round to 9 decimal places\n    return round(lr, 9)\n```\n\nExplanation of the key lines:\n\n- We guard against `step < 1` and immediately return `0.0` in that case.\n- `scale = scale_factor * model_dim**-0.5` implements the factor  \n  scale_factor * (d_model)^(-1/2).\n- `term1 = step**-0.5` is the decaying part after warmup.\n- `term2 = step * warmup_steps**-1.5` is the growing part during warmup.\n- We take `min(term1, term2)`, multiply by our `scale`, and then round the result to 9 decimal places as required."}
{"task_id": 335, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_initializer(name: str):\n   Return a weight-initialisation callable associated with *name*.\n\n    The callable must have the signature\n        initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray\n    and create a numpy array filled according to the requested strategy.\n\n    Supported strategies (case-insensitive):\n        -zeros        -ones        -normal        -glorot_uniform    If *name* is not recognised the function must raise `ValueError`.\n       name = name.lower()\n    \n    if name ==zeros        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.zeros(shape, dtype=float)\n        return initializer\n\n    elif name ==ones        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.ones(shape, dtype=float) * scale\n        return initializer\n\n    elif name ==normal        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            return np.random.normal(loc=0.0, scale=scale, size=shape)\n        return initializer\n\n    elif name ==glorot_uniform        def initializer(shape: tuple[int, ...], scale: float = 1.0) -> np.ndarray:\n            # Require exactly 2 dimensions\n            if len(shape) != 2:\n                raise ValueError(\n                    fglorot_uniform requires a 2D shape, got {shape                )\n            fan_in, fan_out = shape\n            limit = scale * np.sqrt(6.0 / (fan_in + fan_out))\n            return np.random.uniform(-limit, limit, size=shape)\n        return initializer\n\n    else:\n        raise ValueError(fUnknown initializer '{name}'```\n\nExplanation of the key parts:\n\n1. **Case\u2010insensitive lookup**  \n   We lowercase the `name` once to allowZerosNORMAL etc.\n\n2. **Factory returns a closure**  \n   Each branch returns a different `initializer` function which captures the intended strategy.\n\n3. **shape and scale**  \n   -zeros: ignores `scale`.  \n   -ones: returns `scale * ones`.  \n   -normal: draws from \ud835\udca9(0, scale).  \n   -glorot_uniform: requires a 2D `shape`; otherwise raises `ValueError`.  \n     It computes `limit = scale * sqrt(6/(fan_in + fan_out))` and samples from U[\u2013limit, limit].\n\n4. **Error handling**  \n   - Unknown names \u2192 `ValueError`.  \n   - Improper shape for Glorot \u2192 `ValueError`.\n\nAll returned arrays have exactly the requested shape."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(\n    X: list[list[int | float]] | \"np.ndarray\",\n    Y: list[list[int | float]] | \"np.ndarray\" | None = None,\n    c0: int | float = 0\n) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function sets\n        Y = X.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y\n        have incompatible shapes (different number of columns).\n        If X has zero rows (N=0), returns an empty list.\n    \"\"\"\n    # Convert X to a 2-D float NumPy array\n    X_arr = np.array(X, dtype=float)\n    # Special-case: entirely empty X (no rows at all)\n    # In Python lists this is X = [], which becomes a 1-D array of size 0\n    if X_arr.ndim == 1 and X_arr.size == 0:\n        return []\n\n    # Check that X is truly 2-D\n    if X_arr.ndim != 2:\n        return -1\n\n    # If Y is not provided, use X (square, symmetric kernel matrix)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n        # If Y is malformed (not 2-D), reject\n        if Y_arr.ndim != 2:\n            return -1\n\n    # Shapes\n    N, Cx = X_arr.shape\n    M, Cy = Y_arr.shape\n\n    # Rule 1: number of columns must match\n    if Cx != Cy:\n        return -1\n\n    # If X has zero rows, return empty list\n    if N == 0:\n        return []\n\n    # Compute the dot products (N x M) and add c0\n    K = X_arr.dot(Y_arr.T) + float(c0)\n\n    # Round all entries to 4 decimal places\n    K = np.round(K, 4)\n\n    # Convert to a pure Python list of lists of floats\n    return K.tolist()\n```\n\nExplanation of key points:\n1. We first convert `X` (and `Y`, if given) to NumPy arrays of dtype `float`.\n2. If `X` is the empty list `[]`, it becomes a 1-D array of size 0; we detect that and return `[]` immediately.\n3. We enforce that after conversion both `X_arr` and `Y_arr` are 2-D.  Any deviation (other than the empty\u2010`X` case) leads to returning `-1`.\n4. We check the number of columns match; a mismatch returns `-1`.\n5. If `X` has zero rows (`N == 0`) but is well\u2010formed 2-D (e.g. shape `(0, C)`), we return `[]` as well.\n6. Otherwise we compute `X\u22c5Y\u1d40 + c0`, round to 4 decimal places, and return the result as a list of lists of Python `float`."}
{"task_id": 337, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float|int], y: list[float|int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    # Handle empty inputs\n    if len(x) == 0 or len(y) == 0:\n        return []\n    if len(x) != len(y):\n        raise ValueError(\"Coordinate lists x and y must have the same length.\")\n\n    # Convert to numpy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # 1) Round to nearest integer (banker's rounding)\n    x_round = np.around(x_arr).astype(int)\n    y_round = np.around(y_arr).astype(int)\n\n    # 2) Clip to valid image bounds\n    rows, cols, _ = X.shape\n    x_clipped = np.clip(x_round, 0, cols - 1)\n    y_clipped = np.clip(y_round, 0, rows - 1)\n\n    # 3) Gather pixels at (row=y, col=x) for all channels\n    #    This yields an array of shape (k, channels)\n    sampled_pixels = X[y_clipped, x_clipped]\n\n    # Convert to Python list and return\n    return sampled_pixels.tolist()\n```\n\nExplanation of the key steps:\n\n1. **Empty check**  \n   If either `x` or `y` is empty, we immediately return an empty list.\n\n2. **Array conversion**  \n   We turn the coordinate lists into NumPy arrays of floats for vectorized ops.\n\n3. **Rounding**  \n   We use `np.around(...)` which implements \u201cbanker\u2019s rounding\u201d (ties to even).\n\n4. **Clipping**  \n   We ensure the rounded indices stay within the valid index ranges:\n   - columns: `[0, cols-1]`\n   - rows:    `[0, rows-1]`\n\n5. **Indexing**  \n   Using NumPy\u2019s advanced indexing, `X[y_clipped, x_clipped]` fetches the pixels\n   at each coordinate for all channels in one shot.\n\n6. **Return**  \n   We convert the resulting `(k, channels)` NumPy array to a Python list via `.tolist()`."}
{"task_id": 338, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(X, y, reg_factor):\n       Closed-form Ridge Regression (L2-regularized linear regression).\n    X : array-like of shape (n_samples, n_features)\n    y : array-like of shape (n_samples,)\n    reg_factor : non-negative float, regularization strength (\u03b1)\n    \n    Returns\n    -------\n    w : list of length (n_features + 1)\n        Coefficients [bias, w1, w2, ..., wd], each rounded to 4 decimals.\n       # Convert inputs to numpy arrays\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    \n    # Number of samples (n) and features (d)\n    n, d = X.shape\n    \n    # Append bias (column of ones) to X\n    X_bar = np.hstack([np.ones((n, 1)), X])  # shape: (n, d+1)\n    \n    # Identity matrix of size (d+1)x(d+1)\n    I = np.eye(d + 1)\n    \n    # Closed-form solution: w = (X\u0304^T X\u0304 + \u03b1 I)^{-1} X\u0304^T y\n    A = X_bar.T @ X_bar + reg_factor * I        # shape: (d+1, d+1)\n    b = X_bar.T @ y                             # shape: (d+1,)\n    \n    # Solve for w\n    w = np.linalg.solve(A, b)                   # shape: (d+1,)\n    \n    # Round each coefficient to 4 decimal places and convert to Python list\n    w_rounded = np.round(w, 4).tolist()\n    \n    return w_rounded\n```\n\nExplanation of key steps:\n1. We convert inputs `X` and `y` to NumPy arrays for matrix operations.  \n2. We add a leading column of ones to `X` to account for the bias/intercept term.  \n3. We build the regularized normal\u2010equation matrix `A = X\u0304\u1d40X\u0304 + \u03b1I` and right\u2010hand side `b = X\u0304\u1d40y`.  \n4. We use `np.linalg.solve` to compute `w = A\u207b\u00b9b` in a numerically stable way.  \n5. Finally, we round each coefficient to 4 decimal places and return them as a list (bias first)."}
{"task_id": 339, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n\n    freq = Counter(y)\n    max_count = max(freq.values())\n\n    for element in y:\n        if freq[element] == max_count:\n            return element\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n   Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter starting at 1.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_param, new_m, new_v) as python lists,\n        each rounded to 8 decimal places.\n       # 1) Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n\n    # 2) Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # 3) Compute bias-corrected first moment\n    m_hat = m_t / (1 - beta1 ** t)\n\n    # 4) Compute bias-corrected second raw moment\n    v_hat = v_t / (1 - beta2 ** t)\n\n    # 5) Parameter update\n    step = lr * m_hat / (np.sqrt(v_hat) + eps)\n    new_param = param - step\n\n    # 6) If gradient is exactly zero, keep parameter unchanged\n    zero_mask = (grad == 0)\n    if np.any(zero_mask):\n        new_param = new_param.copy()\n        new_param[zero_mask] = param[zero_mask]\n\n    # 7) Round results to 8 decimal places and convert to Python lists\n    new_param_list = np.round(new_param, 8).tolist()\n    m_t_list        = np.round(m_t, 8).tolist()\n    v_t_list        = np.round(v_t, 8).tolist()\n\n    return new_param_list, m_t_list, v_t_list\n```"}
{"task_id": 342, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef manhattan(x: list[float | int], y: list[float | int]) -> float:\n   Compute the Manhattan (L1) distance between two real vectors.\n\n    Args:\n        x: List of numbers representing the first vector.\n        y: List of numbers representing the second vector.\n\n    Returns:\n        The L1 distance rounded to 4 decimal places as a float. If the\n        vectors have different lengths, returns -1.\n       if len(x) != len(y):\n        return -1\n\n    # Convert to numpy arrays of float type\n    arr_x = np.array(x, dtype=float)\n    arr_y = np.array(y, dtype=float)\n\n    # Compute L1 distance\n    dist = np.abs(arr_x - arr_y).sum()\n\n    # Round to 4 decimal places and return\n    return round(float(dist), 4)\n```"}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float\n                         ) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Ensure rewards is an array\n    rewards_arr = np.asarray(rewards)\n    \n    # Number of samples (N)\n    N = theta_samples.shape[0]\n    # Determine how many to retain (floor of retain_prcnt * N)\n    k = int(retain_prcnt * N)\n    \n    # Get indices of the top-k rewards (descending order)\n    topk_indices = np.argsort(rewards_arr)[::-1][:k]\n    \n    # Select the elite samples\n    elite_samples = theta_samples[topk_indices, :]\n    \n    # Compute per-dimension mean and variance\n    mu = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0)\n    \n    # Round to four decimal places and convert to Python lists\n    mu_rounded = np.round(mu, 4).tolist()\n    var_rounded = np.round(var, 4).tolist()\n    \n    return mu_rounded, var_rounded\n```\n\nExplanation of key steps:\n\n1. We convert `rewards` into a NumPy array for easy sorting.  \n2. We compute `k = int(retain_prcnt * N)`, taking the floor if necessary.  \n3. We sort the reward array in descending order (via `argsort()[::-1]`) and slice out the top-k indices.  \n4. We index into `theta_samples` to extract those elite parameter vectors.  \n5. We compute the per-dimension mean and variance of the elites, round each to four decimal places, and return them as plain Python lists."}
{"task_id": 344, "completion_id": 0, "completion": "```python\nimport heapq\nfrom collections import Counter\n\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    # Edge case: empty input\n    if not tokens:\n        return {}\n\n    # Count frequencies\n    freq = Counter(tokens)\n\n    # Edge case: only one unique token\n    if len(freq) == 1:\n        only_token = next(iter(freq))\n        return {only_token: \"0\"}\n\n    # Define a node for the Huffman tree\n    class Node:\n        __slots__ = (\"freq\", \"sort_key\", \"left\", \"right\", \"token\")\n        def __init__(self, freq: int, sort_key: str,\n                     left: \"Node\" = None, right: \"Node\" = None,\n                     token: str = None):\n            self.freq = freq\n            self.sort_key = sort_key  # for tie-breaking in the heap\n            self.left = left\n            self.right = right\n            self.token = token        # non-None for leaf nodes\n\n    # Build the heap of initial leaf nodes\n    heap = []\n    counter = 0  # to ensure uniqueness in the heap tuple\n    for tok, f in freq.items():\n        node = Node(f, tok, token=tok)\n        # Tuple ordering: (frequency, sort_key, counter, node)\n        heapq.heappush(heap, (f, tok, counter, node))\n        counter += 1\n\n    # Build the Huffman tree by merging two minimal nodes until one remains\n    while len(heap) > 1:\n        f1, key1, _, node1 = heapq.heappop(heap)\n        f2, key2, _, node2 = heapq.heappop(heap)\n        merged = Node(f1 + f2, \"\", left=node1, right=node2)\n        heapq.heappush(heap, (merged.freq, merged.sort_key, counter, merged))\n        counter += 1\n\n    # The remaining node is the root\n    _, _, _, root = heap[0]\n\n    # Traverse the tree to build codes\n    codes: dict[str, str] = {}\n\n    def _assign_codes(node: Node, prefix: str) -> None:\n        # If it's a leaf, record the code\n        if node.token is not None:\n            codes[node.token] = prefix\n            return\n        # Internal node: go left with '0', right with '1'\n        _assign_codes(node.left, prefix + \"0\")\n        _assign_codes(node.right, prefix + \"1\")\n\n    _assign_codes(root, \"\")\n\n    return codes\n```"}
{"task_id": 345, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        mu0: np.ndarray,\n        omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    # Number of training and test samples\n    n_train = X_train.shape[0]\n    n_test = X_test.shape[0]\n    \n    # Add intercept (column of ones) to X_train and X_test\n    X_train_aug = np.hstack((np.ones((n_train, 1)), X_train))\n    X_test_aug  = np.hstack((np.ones((n_test, 1)), X_test))\n    \n    # Compute posterior precision: Omega_n = X^T X + Omega0\n    Omega_n = X_train_aug.T @ X_train_aug + omega0\n    \n    # Compute posterior mean: mu_n = Omega_n^{-1} (X^T y + Omega0 mu0)\n    # More stable to solve the linear system instead of inverting explicitly:\n    b = X_train_aug.T @ y_train + omega0 @ mu0\n    mu_n = np.linalg.solve(Omega_n, b)\n    \n    # Make predictions on X_test\n    preds = X_test_aug @ mu_n\n    \n    # Round to 4 decimals and convert to Python list\n    preds_rounded = np.round(preds, 4)\n    return preds_rounded.tolist()\n```\n\nExplanation of key steps:\n1. We prepend a column of ones to both `X_train` and `X_test` to account for the intercept.\n2. We form the posterior precision matrix `\u03a9\u2099 = X\u1d40X + \u03a9\u2080`.\n3. We compute the posterior mean `\u03bc\u2099` by solving `\u03a9\u2099 \u03bc\u2099 = X\u1d40y + \u03a9\u2080 \u03bc\u2080`.\n4. Predictions on the test set are `X_test_aug @ \u03bc\u2099`, which we round to 4 decimal places and return as a standard Python list."}
{"task_id": 346, "completion_id": 0, "completion": "import numpy as np\n\ndef entropy(y):\n   Compute the base-2 Shannon entropy of a vector of integer labels.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        One-dimensional iterable containing non-negative integer class labels.\n\n    Returns\n    -------\n    float\n        The entropy value rounded to 4 decimal places.\n       # Convert input to numpy array\n    y_arr = np.array(y)\n    \n    # If empty, define entropy as 0.0\n    if y_arr.size == 0:\n        return 0.0\n\n    # Count occurrences of each unique label\n    values, counts = np.unique(y_arr, return_counts=True)\n    \n    # Compute probabilities\n    probs = counts / counts.sum()\n    \n    # Compute entropy; np.log2(1) == 0, so single-class case yields 0\n    ent = -np.sum(probs * np.log2(probs))\n    \n    # Round to 4 decimal places\n    return round(ent, 4)"}
{"task_id": 347, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef wgan_gp_loss(\n        Y_fake: np.ndarray,\n        module: str,\n        Y_real: np.ndarray | None = None,\n        gradInterp: np.ndarray | None = None,\n        lambda_: float = 10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    module = module.upper()\n    if module not in {\"C\", \"G\"}:\n        raise ValueError(f\"module must be 'C' or 'G', got {module!r}\")\n\n    # Generator loss: L_G = -E[D(x_fake)]\n    if module == \"G\":\n        loss_g = -np.mean(Y_fake)\n        return round(float(loss_g), 4)\n\n    # Critic loss: L_C = E[D(x_fake)] - E[D(x_real)] + \u03bb E[(||\u2207D(x_interp)||\u2082 - 1)\u00b2]\n    if Y_real is None or gradInterp is None:\n        raise ValueError(\"Y_real and gradInterp must be provided when module == 'C'\")\n    \n    # Mean critic outputs\n    mean_fake = np.mean(Y_fake)\n    mean_real = np.mean(Y_real)\n    \n    # Compute gradient norm per sample: flatten per-sample gradients\n    # gradInterp shape is (n_samples, ...) so we reshape to (n_samples, -1)\n    flat_grads = gradInterp.reshape(gradInterp.shape[0], -1)\n    grad_norms = np.linalg.norm(flat_grads, axis=1)\n    \n    # Gradient penalty\n    gp = np.mean((grad_norms - 1.0) ** 2)\n    \n    loss_c = mean_fake - mean_real + lambda_ * gp\n    return round(float(loss_c), 4)\n```\n\nExplanation of key steps:\n1. We first validate that `module` is either `\"C\"` or `\"G\"`.\n2. For the generator (`module == \"G\"`), we compute `L_G = -mean(Y_fake)`.\n3. For the critic (`module == \"C\"`), we ensure both `Y_real` and `gradInterp` are provided, then compute:\n   - `mean_fake = mean(Y_fake)`\n   - `mean_real = mean(Y_real)`\n   - Flatten each sample\u2019s gradient vector and compute its L2 norm.\n   - The gradient penalty term `gp = mean((norms - 1)^2)`.\n   - Finally, `L_C = mean_fake - mean_real + \u03bb * gp`.\n4. We round the result to four decimal places and return it as a Python float."}
{"task_id": 348, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric_positive_definite(X: np.ndarray) -> bool:\n   Check whether a real matrix is symmetric and positive-definite.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        A two-dimensional NumPy array representing the matrix to test.\n\n    Returns\n    -------\n    bool\n        True if *X* is symmetric and positive-definite, otherwise False.\n       # 1. Check that X is a 2D square matrix\n    if X.ndim != 2 or X.shape[0] != X.shape[1]:\n        return False\n\n    # 2. Check symmetry within tolerance\n    if not np.allclose(X, X.T, atol=1e-8):\n        return False\n\n    # 3. Compute eigenvalues (efficient for symmetric matrices)\n    #    and verify they are strictly greater than the tolerance.\n    try:\n        eigs = np.linalg.eigvalsh(X)\n    except np.linalg.LinAlgError:\n        # if eigenvalue computation fails for some reason\n        return False\n\n    if np.any(eigs <= 1e-8):\n        return False\n\n    return True\n```\n\nExplanation of steps:\n1. Verify that `X` is two-dimensional and square.  \n2. Use `np.allclose` with an absolute tolerance of `1e-8` to confirm symmetry.  \n3. Compute the eigenvalues via `np.linalg.eigvalsh`, which is optimized for real symmetric (Hermitian) matrices.  \n4. Ensure all eigenvalues exceed `1e-8`, guaranteeing positive-definiteness.  \n5. Return `True` only if all checks pass; otherwise, return `False`."}
{"task_id": 350, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef polynomial_ridge_regression(X: list[float | int],\n                                y: list[float | int],\n                                degree: int,\n                                reg_factor: float) -> list[float]:\n   Fit a polynomial ridge regression model and return its coefficients.\n\n    Parameters\n    ----------\n    X : list of float or int\n        One-dimensional feature vector.\n    y : list of float or int\n        Target values.\n    degree : int\n        Highest polynomial degree (>=0).\n    reg_factor : float\n        Non-negative ridge regularisation factor (\u03bb).\n\n    Returns\n    -------\n    list[float]\n        The (degree+1) learned coefficients, rounded to 4 decimal places.\n       # Convert inputs to numpy arrays of float\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Build the design matrix (n_samples x (degree+1))\n    # Each row is [1, x, x^2, ..., x^degree]\n    # np.vander with increasing=True gives exactly that.\n    Phi = np.vander(X_arr, N=degree + 1, increasing=True)\n    \n    # Closed\u2010form ridge solution: w = (Phi^T Phi + \u03bb I)^{-1} Phi^T y\n    # Compute Phi^T Phi\n    PtP = Phi.T @ Phi\n    # Add \u03bb I\n    reg_matrix = PtP + reg_factor * np.eye(degree + 1)\n    # Compute Phi^T y\n    Pty = Phi.T @ y_arr\n    # Solve the linear system\n    w = np.linalg.solve(reg_matrix, Pty)\n\n    # Round to 4 decimal places and return as Python list\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()\n```\n\nExplanation of key steps:\n1. We turn the input lists into NumPy arrays of floats.\n2. We build the Vandermonde design matrix `Phi` of shape `(n_samples, degree+1)` where each row is `[1, x, x^2, \u2026, x^degree]`.\n3. We form the regularized normal equations matrix `Phi^T Phi + \u03bb I`.\n4. We solve for the weight vector `w` via `np.linalg.solve` instead of explicitly inverting the matrix (more numerically stable).\n5. Finally, we round each coefficient to 4 decimal places and return them as a standard Python list."}
{"task_id": 351, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    # Unpack shapes\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n\n    # Compute output spatial dimensions\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n\n    # Prepare an array to hold pooled outputs\n    pooled = np.empty((N, C, out_h, out_w), dtype=X.dtype)\n\n    # Slide the pooling window and take max\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start = i * stride\n            w_start = j * stride\n            window = X[:, :, h_start:h_start + p_h, w_start:w_start + p_w]\n            # max over the last two dimensions (p_h, p_w)\n            pooled[:, :, i, j] = window.max(axis=(2, 3))\n\n    # Convert to nested Python list and return\n    return pooled.tolist()\n```\n\nExplanation of key steps:\n- We compute `out_h` and `out_w` from the input size, pooling window, and stride.\n- We allocate an empty array `pooled` of shape `(N, C, out_h, out_w)`.\n- For each output location `(i, j)`, we extract the corresponding window of shape `(N, C, p_h, p_w)` and apply `max` over the last two axes.\n- Finally, we convert the NumPy array to a nested Python list via `tolist()` as required."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert to a concrete sequence so we can get length and iterate multiple times\n    labels_list = list(labels)\n    n = len(labels_list)\n    if n == 0:\n        return 0.0\n\n    counts = Counter(labels_list)\n    H = 0.0\n    for cnt in counts.values():\n        p = cnt / n\n        # only add if p > 0, but counts from Counter are always >0\n        H -= p * math.log2(p)\n\n    return round(H, 5)\n```\n\nExplanation:\n1. We first coerce the input `labels` into a list so we can determine its length and iterate over it multiple times.\n2. If it's empty (`n == 0`), we immediately return `0.0`.\n3. We count the occurrences of each distinct label using `collections.Counter`.\n4. For each label probability `p = count / n`, we accumulate `-p * log2(p)`.  By convention there is no need to handle `p == 0` explicitly since a zero\u2010count label never appears in the `Counter`.\n5. Finally we round the result to five decimal places with `round(H, 5)` and return it."}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch) representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch) containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list obtained through .tolist().\n    \"\"\"\n    # input dims\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kR, kC, k_in_ch, out_ch = W.shape\n    assert k_in_ch == in_ch, \"Input channels of X and W must match\"\n    s = stride\n    d = dilation\n\n    # effective kernel size with dilation\n    # if d=0, eff = k; else eff = k + (k-1)*d\n    eff_kR = kR + (kR - 1) * d\n    eff_kC = kC + (kC - 1) * d\n\n    # parse pad\n    if isinstance(pad, str) and pad.lower() == 'same':\n        # smallest symmetric padding so that output spatial dims == input dims\n        # out_rows = in_rows  =>  (in_rows + pad_rows - eff_kR)/s + 1 = in_rows\n        # => pad_rows = (in_rows - 1)*s + eff_kR - in_rows\n        pad_rows = max((in_rows - 1) * s + eff_kR - in_rows, 0)\n        pad_cols = max((in_cols - 1) * s + eff_kC - in_cols, 0)\n        pr_top = pad_rows // 2\n        pr_bot = pad_rows - pr_top\n        pc_left = pad_cols // 2\n        pc_right = pad_cols - pc_left\n    else:\n        # numeric or tuple\n        if isinstance(pad, int):\n            pr_top = pr_bot = pad\n            pc_left = pc_right = pad\n        else:\n            # tuple of length 2 or 4\n            if len(pad) == 2:\n                pr_top = pr_bot = pad[0]\n                pc_left = pc_right = pad[1]\n            elif len(pad) == 4:\n                pr_top, pr_bot, pc_left, pc_right = pad\n            else:\n                raise ValueError(\"Invalid pad specification\")\n    # pad X: only spatial dims\n    X_pad = np.pad(\n        X,\n        ((0, 0),\n         (pr_top, pr_bot),\n         (pc_left, pc_right),\n         (0, 0)),\n        mode='constant',\n        constant_values=0\n    )\n    # new spatial dims\n    H_pad = in_rows + pr_top + pr_bot\n    W_pad = in_cols + pc_left + pc_right\n    # output spatial dims\n    out_rows = (H_pad - eff_kR) // s + 1\n    out_cols = (W_pad - eff_kC) // s + 1\n\n    # =========================\n    # im2col\n    # =========================\n    # 1) compute the offsets for the kR*kC positions in the dilated kernel\n    # row offsets: [0, d+1, 2*(d+1), ..., (kR-1)*(d+1)]\n    row_offsets = np.repeat(np.arange(kR) * (d + 1), kC)\n    col_offsets = np.tile(np.arange(kC) * (d + 1), kR)\n    # 2) compute the starting points for each sliding window\n    out_row_positions = np.arange(0, H_pad - eff_kR + 1, s)\n    out_col_positions = np.arange(0, W_pad - eff_kC + 1, s)\n    # 3) build 3D grids of indices\n    # shapes: (kR*kC, out_rows, out_cols)\n    rows_idx = row_offsets[:, None, None] + out_row_positions[None, :, None]\n    cols_idx = col_offsets[:, None, None] + out_col_positions[None, None, :]\n\n    # 4) gather\n    # transpose X_pad to (n_ex, in_ch, H_pad, W_pad) to index spatial dims 2&3\n    Xp = X_pad.transpose(0, 3, 1, 2)\n    # X_cols: shape (n_ex, in_ch, kR*kC, out_rows, out_cols)\n    X_cols = Xp[:, :, rows_idx, cols_idx]\n\n    # reshape X_cols -> (n_ex*out_rows*out_cols, in_ch*kR*kC)\n    # first reorder to (n_ex, out_rows, out_cols, in_ch, kR*kC)\n    X_cols = X_cols.transpose(0, 3, 4, 1, 2)\n    NOL = n_ex * out_rows * out_cols\n    X_matrix = X_cols.reshape(NOL, in_ch * (kR * kC))\n\n    # =========================\n    # prepare W as matrix\n    # =========================\n    # W: (kR, kC, in_ch, out_ch)\n    # we want W_col of shape (in_ch*kR*kC, out_ch)\n    # so that X_matrix @ W_col = (NOL, out_ch)\n    W_col = W.transpose(2, 0, 1, 3).reshape(in_ch * (kR * kC), out_ch)\n\n    # =========================\n    # GEMM and reshape\n    # =========================\n    out_matrix = X_matrix.dot(W_col)                # shape (NOL, out_ch)\n    out = out_matrix.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    return out.tolist()\n```\n\nExplanation of the key steps:\n\n1. **Padding computation**  \n   - If `pad='same'`, we solve for the total padding so that  \n     `(in_rows + pad_rows - eff_kR)/stride + 1 == in_rows`,  \n     and similarly for the columns, then split it symmetrically (floor/ceil).  \n   - Otherwise we handle the integer / 2-tuple / 4-tuple cases as specified.\n\n2. **Effective kernel size with dilation**  \n   - A dilation of `d` means we insert `d` zeros between consecutive kernel elements.  \n   - Hence the \u201ceffective\u201d filter height is `kR + (kR-1)*d`.\n\n3. **im2col indexing**  \n   - We build `rows_idx` and `cols_idx`, each of shape `(kR*kC, out_rows, out_cols)`, which tell us, for each kernel position and each output location, which input-pixel indices to pick.  \n   - By transposing `X_pad` to `(n_ex, in_ch, H_pad, W_pad)` and doing `Xp[:, :, rows_idx, cols_idx]`, NumPy\u2019s advanced indexing broadcasts out to `(n_ex, in_ch, kR*kC, out_rows, out_cols)`.  \n   - We then reorder axes to `(n_ex, out_rows, out_cols, in_ch, kR*kC)` and flatten the last two dims into `(in_ch*kR*kC)`.\n\n4. **Matrix multiply**  \n   - We reshape the filters `W` into `(in_ch*kR*kC, out_ch)` in exactly the same patch-major order as we laid out `X_matrix`.  \n   - A single `dot` gives us the result patches for all examples and all output positions at once.\n\n5. **Reshape and `tolist()`**  \n   - The final result is reshaped back to `(n_ex, out_rows, out_cols, out_ch)` and converted to a nested Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # 1. Mean\u2010centre the data\n    X = np.asarray(data, dtype=float)\n    n_samples, n_features = X.shape\n    mean = X.mean(axis=0)\n    X_centered = X - mean\n\n    # 2. Obtain principal directions\n    if solver == \"svd\":\n        # SVD on centered data\n        U, S, Vt = np.linalg.svd(X_centered, full_matrices=False)\n        # Principal directions are the rows of Vt; shape: (k, n_features)\n        # Eigenvalues of covariance are S^2/(n_samples-1)\n        eigvals = (S**2) / (n_samples - 1)\n        # Make directions shape (n_features, k)\n        directions = Vt.T\n    elif solver == \"eigen\":\n        # Covariance matrix from centered data\n        cov = (X_centered.T @ X_centered) / (n_samples - 1)\n        eigvals_all, eigvecs_all = np.linalg.eigh(cov)\n        # Sort descending\n        idx = np.argsort(eigvals_all)[::-1]\n        eigvals = eigvals_all[idx]\n        directions = eigvecs_all[:, idx]\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n\n    # 3. Select top components\n    # limit number of components to available ones\n    k_available = eigvals.shape[0]\n    k = min(n_components, k_available)\n    eigvals_sel = eigvals[:k]\n    directions_sel = directions[:, :k]  # shape (n_features, k)\n\n    # 4. Project data\n    scores = X_centered @ directions_sel  # shape (n_samples, k)\n\n    # 5. Deterministic sign\u2010fix for each component\n    tol = 1e-12\n    for j in range(k):\n        # find first loading that is not (almost) zero\n        col = directions_sel[:, j]\n        for i in range(n_features):\n            if abs(col[i]) > tol:\n                if col[i] < 0:\n                    # flip sign\n                    directions_sel[:, j] = -directions_sel[:, j]\n                    scores[:, j] = -scores[:, j]\n                break\n\n    # 6. Explained variance ratio\n    total_var = eigvals.sum()\n    explained_variance_ratio = eigvals_sel / total_var\n\n    # 7. Round final results\n    scores_rounded = np.round(scores, 4).tolist()\n    evr_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, evr_rounded\n```\n\nExplanation of key steps:\n\n1. We subtract the column\u2010wise means (`mean`) to centre the data.\n2. For `\"svd\"`, we perform `np.linalg.svd` on the centred matrix `X_centered` (with `full_matrices=False`), extract singular values `S` and right singular vectors `Vt`.  The variances (eigenvalues of the covariance matrix) are `S**2/(n_samples-1)`, and the principal directions are the rows of `Vt`.\n3. For `\"eigen\"`, we build the covariance matrix directly from the centred data, perform `np.linalg.eigh`, and sort eigenvalues and eigenvectors descendingly.\n4. We keep `k = min(n_components, available_components)` directions.\n5. We project (`scores`) by `X_centered @ directions_sel`.\n6. To resolve the sign ambiguity, for each component we look at its first non\u2010zero loading; if it\u2019s negative, we flip the sign of that component\u2019s direction and the corresponding column in `scores`.\n7. Finally, we compute the explained variance ratio, round both `scores` and `explained_variance_ratio` to 4 decimal places, and convert them to built\u2010in Python lists as required."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # leaf.value is expected to be a sequence of probabilities.\n        probs = leaf.value\n        # Find the index of the largest probability; ties go to the first (smallest index).\n        # max over indices with key=probs.__getitem__ achieves that.\n        idx = max(range(len(probs)), key=probs.__getitem__)\n        return int(idx)\n    else:\n        # Regression: just return the stored scalar (could be int or float).\n        return leaf.value\n```\n\nExplanation:\n\n1. When `classifier=True`, we assume `leaf.value` is a sequence (list/tuple) of probabilities.  \n2. `max(range(len(probs)), key=probs.__getitem__)` finds the index whose probability is largest; because `max` returns the first maximal index on ties, this matches the requirement of favoring smaller indices.  \n3. We then cast that index to `int` and return it.  \n4. When `classifier=False`, we simply return the raw scalar stored in the leaf."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Number of samples and dimensionality\n    n_samples, n_features = data.shape\n\n    # Initialize centroids: first K samples\n    centroids = data[:K].astype(float, copy=True)\n\n    tol = 1e-6\n    for _ in range(max_iters):\n        # 1) Assign each sample to the closest centroid (using squared Euclidean distance).\n        #    distances shape: (n_samples, K)\n        diffs = data[:, None, :] - centroids[None, :, :]  # shape: (n_samples, K, n_features)\n        dists_sq = np.sum(diffs * diffs, axis=2)          # shape: (n_samples, K)\n        assignments = np.argmin(dists_sq, axis=1)         # shape: (n_samples,)\n\n        # 2) Recompute centroids as the mean of assigned points\n        new_centroids = centroids.copy()\n        for j in range(K):\n            pts = data[assignments == j]\n            if pts.shape[0] > 0:\n                new_centroids[j] = pts.mean(axis=0)\n            # else: leave centroid unchanged\n\n        # 3) Check for convergence\n        shift = np.abs(new_centroids - centroids).max()\n        centroids = new_centroids\n        if shift <= tol:\n            break\n\n    # Round to 4 decimals and sort lexicographically\n    centroids_rounded = np.round(centroids, 4).tolist()\n    centroids_rounded.sort()\n\n    return centroids_rounded\n```\n\nExplanation of key steps:\n\n1. **Initialization**  \n   We take the first `K` rows of `data` as our initial centroids, cast to float.\n\n2. **Assignment**  \n   For each point, we compute the squared Euclidean distance to all centroids in a vectorized manner:\n   ```\n   diffs = data[:, None, :] - centroids[None, :, :]\n   dists_sq = (diffs**2).sum(axis=2)\n   assignments = argmin(dists_sq, axis=1)\n   ```\n   This gives us an array of cluster indices for each sample.\n\n3. **Update**  \n   We loop over each centroid index `j`, select all points assigned to it, and recompute the centroid as their mean. If no points are assigned to centroid `j`, we leave it unchanged.\n\n4. **Convergence Check**  \n   We measure the maximum absolute shift of any centroid. If it\u2019s below `1e-6`, we stop early.\n\n5. **Final Processing**  \n   We round each coordinate of the centroids to 4 decimal places, convert to a Python list of lists, and sort lexicographically before returning.\n\nThis implementation works for any number of features (dimensions) \u2265 1, handles the `K=1` case naturally, and ensures determinism by using the first `K` samples as the initial centroids."}
{"task_id": 358, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy(y_true, y_pred):\n   Compute the classification accuracy between two equal-length sequences.\n\n    The function returns the proportion of positions where `y_true` and\n    `y_pred` are exactly the same, rounded to four decimal places. If the two\n    sequences do not have the same length, the function returns -1.\n\n    Args:\n        y_true (list | np.ndarray): Ground-truth class labels.\n        y_pred (list | np.ndarray): Predicted class labels.\n\n    Returns:\n        float | int: Accuracy rounded to 4 decimals, or -1 on length mismatch.\n       # Quick length check\n    if len(y_true) != len(y_pred):\n        return -1\n\n    # Convert to numpy arrays for elementwise comparison\n    yt = np.array(y_true)\n    yp = np.array(y_pred)\n\n    total = yt.size\n    # Avoid division by zero for empty inputs\n    if total == 0:\n        return 0.0\n\n    # Count exact matches\n    correct = np.sum(yt == yp)\n\n    # Compute accuracy and round to 4 decimal places\n    acc = correct / total\n    return round(acc, 4)\n```\n\nExplanation of key steps:\n1. Check if the two inputs have the same length; if not, immediately return `-1`.  \n2. Convert both inputs to NumPy arrays so that `yt == yp` does elementwise comparison.  \n3. Handle the edge\u2010case of zero total elements by returning `0.0` (to avoid division by zero).  \n4. Sum the boolean array of matches to get the count of correct predictions, divide by the total, and finally round to four decimal places."}
{"task_id": 359, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as y.\n    derivative : bool, default False\n        If True, return the gradient; otherwise, return the loss.\n\n    Returns\n    -------\n    float or list of list of floats\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    # small eps to avoid log(0)\n    eps = np.finfo(float).eps\n\n    # ensure y and y_pred have the same shape\n    if y.shape != y_pred.shape:\n        raise ValueError(\"Shape mismatch: y and y_pred must have the same shape\")\n\n    if not derivative:\n        # compute cross-entropy loss (sum over samples, not mean)\n        # only the log-probabilities of the true classes contribute\n        log_probs = np.log(y_pred + eps)\n        loss = -np.sum(y * log_probs)\n        # round to 4 decimal places and return as Python float\n        return float(round(loss, 4))\n    else:\n        # gradient w.r.t. the inputs of softmax is simply y_pred - y\n        grad = y_pred - y\n        # round each element to 4 decimal places\n        grad_rounded = np.round(grad, 4)\n        # convert to nested list of Python floats\n        return grad_rounded.tolist()\n```\n\nExplanation of key steps:\n1. We add `eps = np.finfo(float).eps` inside the logarithm to prevent `log(0)`.\n2. When `derivative=False`, we compute  \n       L = \u2212\u2211 y\u1d62\u2c7c \u00b7 log(y_pred\u1d62\u2c7c + eps)  \n   and return the sum (not the mean), rounded to 4 decimal places.\n3. When `derivative=True`, we compute the analytical gradient  \n       \u2202L/\u2202z = y_pred \u2212 y  \n   round each entry to 4 decimals, and return as a nested Python list."}
{"task_id": 360, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef dct(frame: np.ndarray | list[float], orthonormal: bool = True) -> list[float]:\n   Compute the 1-D DCT-II of *frame*.\n\n    The function must:\n    1. Accept a one-dimensional NumPy array (or any array-like object)\n       containing *N* real samples.\n    2. Implement the DCT-II formula directly (no calls to external DCT helpers).\n    3. Support optional orthonormal scaling when *orthonormal* is ``True``.\n    4. Return the coefficients rounded to 4 decimal places as a Python list.\n\n    Args:\n        frame: Input signal of length *N*.\n        orthonormal: Whether to apply orthonormal scaling.\n\n    Returns:\n        A list with *N* DCT-II coefficients.\n       # Convert input to a 1-D NumPy array of floats\n    x = np.asarray(frame, dtype=float).ravel()\n    N = x.shape[0]\n\n    # Prepare output array\n    coeffs = np.zeros(N, dtype=float)\n\n    # Compute the DCT-II coefficients naively\n    n = np.arange(N)\n    for k in range(N):\n        # cos(pi * k * (2n + 1) / (2N))\n        angle = (np.pi * k * (2 * n + 1)) / (2 * N)\n        coeffs[k] = 2.0 * np.sum(x * np.cos(angle))\n\n    # Apply orthonormal scaling if requested\n    if orthonormal and N > 0:\n        coeffs[0] = coeffs[0] / np.sqrt(N)\n        if N > 1:\n            coeffs[1:] = coeffs[1:] * np.sqrt(2.0 / N)\n\n    # Round to 4 decimal places and return as a list\n    return np.round(coeffs, 4).tolist()\n```\n\nExplanation of key steps:\n\n1. **Input normalization**: We convert the input `frame` to a 1-D NumPy array of floats (`x`) and determine its length `N`.\n2. **Direct DCT-II computation**: For each frequency index `k`, we build the vector of angles \n   \\[\n     \\frac{\\pi \\,k\\,(2n+1)}{2N},\\quad n=0,\\dots,N-1,\n   \\]\n   multiply by the input samples, sum, and multiply by 2.\n3. **Orthonormal scaling** (if requested):\n   - For \\(k=0\\): divide by \\(\\sqrt{N}\\).\n   - For \\(k\\ge1\\): multiply by \\(\\sqrt{2/N}\\).\n4. **Rounding and output**: Coefficients are rounded to four decimal places and converted to a Python list."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(\n    data: list[list[int | float]] | \"np.ndarray\"\n) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # 1. Convert to float NumPy array\n    arr = np.array(data, dtype=float)\n\n    #  Ensure it's 2-D\n    if arr.ndim != 2:\n        raise ValueError(\"Input must be a 2-D structure\")\n\n    # 2. Compute the sum of every row\n    row_sums = arr.sum(axis=1)\n\n    # 3. If any row sum is zero, return -1\n    if np.any(row_sums == 0):\n        return -1\n\n    # 4. Divide each row by its sum\n    #    We reshape row_sums to (n_rows, 1) so broadcasting works\n    normalized = arr / row_sums[:, np.newaxis]\n\n    # 5. Round to 4 decimal places and return as Python list\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()\n```\n\nExample usage:\n\n```python\n>>> row_stochastic_matrix([[1, 1, 2], [0.5, 0.5, 0]])\n[[0.2000, 0.2000, 0.6000], [0.5000, 0.5000, 0.0000]]\n\n>>> row_stochastic_matrix([[0, 0, 0], [1, 2, 3]])\n-1\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def _check(space: Space, is_composite: bool) -> bool:\n        # If not composite, just check for Box\n        if not is_composite:\n            return isinstance(space, Box)\n        # If composite, unpack sub-spaces and ensure each is a Box\n        if isinstance(space, Tuple):\n            subs = space.spaces\n        elif isinstance(space, Dict):\n            subs = space.spaces.values()\n        else:\n            # In case the flag is wrong, fall back to atomic check\n            return isinstance(space, Box)\n        return all(isinstance(sub, Box) for sub in subs)\n\n    cont_action = _check(env.action_space, tuple_action)\n    cont_obs    = _check(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)\n```\n\nExplanation:\n\n1. We define a helper `_check(space, is_composite)`:\n   - If `is_composite` is `False`, we simply return whether `space` is a `Box`.\n   - If `is_composite` is `True`, we first see if `space` is a `Tuple` or `Dict`.  \n     - For `Tuple`, we pull out `space.spaces` (an iterable of sub-spaces).  \n     - For `Dict`, we use `space.spaces.values()`.  \n     - We then verify that *every* sub-space is an instance of `Box`.  \n   - If somehow the flag says composite but the space is neither `Tuple` nor `Dict`, we defensively fall back to an atomic `Box` check.\n\n2. We call `_check` for both `action_space` (with `tuple_action`) and `observation_space` (with `tuple_obs`) and return the pair of booleans."}
{"task_id": 364, "completion_id": 0, "completion": "```python\ndef sign(x: int | float) -> int:\n   Return the sign of *x*.\n\n    The function should return 1 for positive numbers, -1 for negative numbers,\n    and 0 when the input is exactly zero.\n\n    Args:\n        x: A real number (int or float).\n\n    Returns:\n        -1, 0, or 1 depending on the sign of *x*.\n       if x > 0:\n        return 1\n    elif x < 0:\n        return -1\n    else:\n        return 0\n```\n\nAlternatively, in a more concise, idiomatic Python one-liner:\n\n```python\ndef sign(x: int | float) -> int:\n   Return the sign of *x*    return (x > 0) - (x < 0)\n```\n\nBoth versions satisfy the requirements and will return `1` for positives, `-1` for negatives, and `0` for exactly zero."}
{"task_id": 366, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    # Ensure X is 2-D\n    if X.ndim != 2:\n        raise ValueError(\"Input array X must be 2-dimensional\")\n    \n    n_samples = X.shape[0]\n    \n    # Special case: single sample\n    if n_samples == 1:\n        return [[0.0]]\n    \n    # Compute squared norms of each row: shape (n_samples,)\n    # sum_sq[i] = ||X[i]||^2\n    sum_sq = np.einsum('ij,ij->i', X, X)\n    \n    # Compute Gram matrix (inner products): shape (n_samples, n_samples)\n    G = X @ X.T\n    \n    # Use the identity: ||x - y||^2 = ||x||^2 + ||y||^2 - 2 * x\u00b7y\n    # We broadcast sum_sq to form the full matrix\n    D = sum_sq[:, np.newaxis] + sum_sq[np.newaxis, :] - 2 * G\n    \n    # Numerical errors might produce tiny negatives; clamp to zero\n    np.maximum(D, 0, out=D)\n    \n    # Force the diagonal to be exactly zero\n    np.fill_diagonal(D, 0.0)\n    \n    # Convert to Python list of lists and return\n    return D.tolist()\n```\n\nExplanation of the main steps:\n\n1. **Squared norms**  \n   We compute `sum_sq[i] = \u2211_k X[i, k]\u00b2` for each sample `i` in one vectorized pass via  \n   ```python\n   sum_sq = np.einsum('ij,ij->i', X, X)\n   ```  \n   (You can also write `sum_sq = np.sum(X * X, axis=1)`.)\n\n2. **Gram matrix**  \n   The matrix of all pairwise inner products `G[i, j] = X[i] \u00b7 X[j]` is obtained by  \n   ```python\n   G = X @ X.T\n   ```\n\n3. **Distance formula**  \n   By the identity  \n   \u2016x\u1d62 \u2212 x\u2c7c\u2016\u00b2 = \u2016x\u1d62\u2016\u00b2 + \u2016x\u2c7c\u2016\u00b2 \u2212 2(x\u1d62 \u00b7 x\u2c7c),  \n   we build the full distance matrix `D` in one vectorized expression using broadcasting.\n\n4. **Clamping**  \n   Any small negative values arising from floating\u2010point round\u2010off are clipped to zero with `np.maximum`.\n\n5. **Diagonal**  \n   We explicitly set `D[i, i] = 0.0` to ensure perfect zeros on the diagonal.\n\n6. **Return format**  \n   Finally we convert the NumPy array to a plain Python list of lists with `D.tolist()` as required."}
{"task_id": 367, "completion_id": 0, "completion": "```python\nimport re\nimport ast\nfrom typing import Any, Dict, Optional\n\nclass KernelBase:\n   Minimal base class for all kernels.  Do NOT modify this class    def __init__(self, **kwargs: Any) -> None:\n        self.params: Dict[str, Any] = kwargs\n\n    def set_params(self, state: Dict[str, Any]):\n       (Re)sets parameters from a previously stored summary dict        hp = state.gethyperparameters {})\n        self.params.update({k: v for k, v in hp.items() if k !=id        return self\n\n    def summary(self) -> Dict[str, Any]:\n       Dictionary description that can be fed back to *initialize_kernel*        returnhyperparametersid self.__class__.__name__, **self.params}}\n\nclass LinearKernel(KernelBase):\n    def __init__(self):\n        super().__init__()\n\nclass PolynomialKernel(KernelBase):\n    def __init__(self, degree: int = 3, coef0: float = 1.0):\n        super().__init__(degree=degree, coef0=coef0)\n\nclass RBFKernel(KernelBase):\n    def __init__(self, gamma: float = 1.0):\n        super().__init__(gamma=gamma)\n\ndef initialize_kernel(param: Optional[Any] = None) -> KernelBase:\n   Create and return a kernel object from various representations.\n\n    Args:\n        param: None (default LinearKernel), an existing KernelBase instance, a\n            string description such as 'RBF(gamma=0.5)', or a dictionary with a\n            'hyperparameters' entry as produced by KernelBase.summary().\n\n    Returns:\n        KernelBase: the newly created or forwarded kernel instance.\n       # 1) None \u2192 default LinearKernel\n    if param is None:\n        return LinearKernel()\n\n    # 2) Already a kernel instance \u2192 return it unchanged\n    if isinstance(param, KernelBase):\n        return param\n\n    # Helper mapping: lowercase id \u2192 Kernel class\n    _KERNEL_MAP = {\n       linear LinearKernel,\n       linearkernel LinearKernel,\n       polynomial PolynomialKernel,\n       polynomialkernel PolynomialKernel,\n       rbf RBFKernel,\n       rbfkernel RBFKernel,\n    }\n\n    # 3) String specification\n    if isinstance(param, str):\n        s = param.strip()\n        # Capture name and optional args inside parentheses\n        m = re.match(r'^([A-Za-z]+)\\s*(?:\\((.*)\\))?$', s)\n        if not m:\n            raise ValueError(fInvalid kernel string specification: '{param}'        name, args_str = m.group(1), m.group(2)\n        name_l = name.lower()\n        if name_l not in _KERNEL_MAP:\n            raise NotImplementedError(fUnknown kernel '{name}'        cls = _KERNEL_MAP[name_l]\n\n        # Parse keyword arguments inside parentheses, if any\n        kwargs: Dict[str, Any] = {}\n        if args_str:\n            # Split on commas (assuming no nested commas)\n            parts = [p.strip() for p in args_str.split(',') if p.strip()]\n            for part in parts:\n                if '=' not in part:\n                    raise ValueError(fInvalid parameter '{part}' in '{param}'                key, val_str = part.split('=', 1)\n                key = key.strip()\n                val_str = val_str.strip()\n                try:\n                    val = ast.literal_eval(val_str)\n                except Exception:\n                    # Fallback: keep as string\n                    val = val_str\n                kwargs[key] = val\n\n        # Instantiate with the parsed kwargs\n        return cls(**kwargs)\n\n    # 4) Dictionary specification\n    if isinstance(param, dict):\n        ifhyperparameters not in param:\n            raise ValueErrorDictionary specification must contain 'hyperparameters' key        hp = paramhyperparameters        if not isinstance(hp, dict):\n            raise ValueErrorhyperparameters' entry must be a dict        ifid not in hp:\n            raise ValueErrorMissing 'id' in 'hyperparameters        kid = hpid        if kid not in _KERNEL_MAP:\n            raise NotImplementedError(fUnknown kernel id '{kid}'        cls = _KERNEL_MAP[kid.lower()]\n        # Instantiate with defaults, then set params to include everything in hp\n        obj = cls()\n        return obj.set_paramshyperparameters hp})\n\n    # Unsupported type\n    raise ValueError(fCannot initialize kernel from parameter of type {type(param)}```\n\nExplanation of key steps:\n\n1. **None** \u2192 returns a default `LinearKernel`.\n2. **KernelBase instance** \u2192 returned unchanged.\n3. **String** \u2192 Uses a regex to split out the kernel name and any parenthesized arguments.  The name (case\u2010insensitive) is looked up in a small map to find the correct class.  The arguments are split on commas, each `key=value` is parsed via `ast.literal_eval` to convert to the right Python type, and then passed into the kernel constructor.\n4. **Dictionary** \u2192 Checks for thehyperparameters key and then for anid inside it.  An instance of the requested kernel is created with its default constructor, and then `set_params()` is called to apply all the given hyperparameters.\n\nUnknown kernel names or missing required keys trigger the specified errors."}
{"task_id": 368, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or -1 when\n               input validation fails.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Validate shape equality and positivity of p\n    if x_arr.shape != y_arr.shape or p <= 0:\n        return -1\n\n    # Compute |x - y|^p for each component\n    diff = np.abs(x_arr - y_arr) ** p\n\n    # Sum and take the p-th root\n    total = np.sum(diff)\n    dist = total ** (1.0 / p)\n\n    # Round to 4 decimal places and return\n    return round(float(dist), 4)\n```\n\nExplanation of key steps:\n\n1. **Input conversion**: We wrap `x` and `y` with `np.array(..., dtype=float)` to handle both lists and arrays, and ensure numeric operations.\n2. **Validation**:\n   - Check that the shapes match (`x_arr.shape != y_arr.shape`).\n   - Ensure `p > 0`.\n   If either check fails, return `-1`.\n3. **Distance computation**:\n   - Compute the elementwise absolute difference raised to the power `p`.\n   - Sum all those values.\n   - Take the `p`-th root of the sum.\n4. **Rounding**: Use Python\u2019s built-in `round(..., 4)` to round to four decimal places before returning."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray],\n                              learning_rate: float,\n                              regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The 'updates' list must contain at least one array.\")\n    \n    # Initialize running prediction with zeros, same shape as one update\n    running_pred = np.zeros_like(updates[0], dtype=float)\n    \n    # Aggregate each tree's contribution\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    if regression:\n        # Round to 4 decimal places for regression\n        return np.round(running_pred, 4)\n    else:\n        # Multi-class classification:\n        # running_pred shape = (n_samples, n_classes)\n        # Compute softmax in a numerically stable way\n        # 1) shift by the row-wise max\n        row_max = np.max(running_pred, axis=1, keepdims=True)\n        exp_shifted = np.exp(running_pred - row_max)\n        probs = exp_shifted / np.sum(exp_shifted, axis=1, keepdims=True)\n        # 2) predicted class is the argmax over classes\n        return np.argmax(probs, axis=1)\n```\n\nExplanation:\n\n1. We start a zero `running_pred` of the same shape as one tree\u2019s output.\n2. For each tree\u2019s update array `u`, we subtract `learning_rate * u` from `running_pred`.\n3. If `regression` is `True`, we round the final predictions to 4 decimals and return them.\n4. Otherwise we treat `running_pred` as logits, apply a stable row-wise softmax to get class probabilities, and then return the index of the maximum probability for each sample."}
{"task_id": 370, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multivariate_gaussian(X: np.ndarray, mu: np.ndarray, cov: np.ndarray) -> list[float]:\n       Compute the multivariate normal density for each row of X under N(mu, cov).\n\n    Parameters:\n    - X:   np.ndarray of shape (m, n), each row is an n\u2010dimensional sample.\n    - mu:  np.ndarray of shape (n,), the mean vector.\n    - cov: np.ndarray of shape (n, n), the positive\u2010definite covariance matrix.\n\n    Returns:\n    - List of length m, where each entry is f(x_i) rounded to 4 decimal places.\n       # Ensure X is 2D\n    X = np.atleast_2d(X)\n    m, n = X.shape\n\n    # Center the data\n    diff = X - mu.reshape(1, n)\n\n    # Inverse and determinant of the covariance\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    \n    # Normalization constant: (2\u03c0)^{-n/2} |\u03a3|^{-1/2}\n    denom = np.power(2 * np.pi, n / 2) * np.sqrt(det_cov)\n\n    # Mahalanobis exponent for each row: \u2212\u00bd (x\u2212\u03bc)^T \u03a3^{-1} (x\u2212\u03bc)\n    # Compute diff @ inv_cov elementwise multiplied by diff, then sum over features\n    exponent = -0.5 * np.sum((diff @ inv_cov) * diff, axis=1)\n\n    # Compute pdf values\n    pdf_vals = np.exp(exponent) / denom\n\n    # Round to 4 decimals and return as Python list\n    return np.round(pdf_vals, 4).tolist()\n```\n\nExplanation of key steps:\n1. **Centering**: `diff = X - mu` broadcasts the mean over all samples.\n2. **Normalization constant**:  \n   denom = (2\u03c0)^(n/2) \u00d7 \u221a(|\u03a3|)  \n   so that 1/denom = (2\u03c0)^(-n/2) |\u03a3|^(-1/2).\n3. **Exponent**:  \n   For each sample row `d`, compute \u2212\u00bd * d\u1d40 \u03a3\u207b\u00b9 d. We vectorize by `(diff @ inv_cov) * diff` and sum across columns.  \n4. **PDF**:  \n   `exp(exponent) / denom`.  \n5. **Rounding**:  \n   Use `np.round(..., 4)` then `.tolist()` to satisfy the return type."}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It returns\n    the output volume as a list via ndarray.tolist().\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\"\n        dilation: non-negative integer, number of zeros inserted between\n                  neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    # Validate inputs\n    if not isinstance(X, np.ndarray) or X.ndim != 3:\n        raise ValueError(\"X must be a 3D numpy array of shape (n, L, in_channels).\")\n    if not isinstance(W, np.ndarray) or W.ndim != 3:\n        raise ValueError(\"W must be a 3D numpy array of shape (kernel_width, in_channels, out_channels).\")\n    if not (isinstance(stride, int) and stride > 0):\n        raise ValueError(\"stride must be a positive integer.\")\n    if not (isinstance(dilation, int) and dilation >= 0):\n        raise ValueError(\"dilation must be a non-negative integer.\")\n\n    n_examples, L, in_ch = X.shape\n    kw, in_ch_W, out_ch = W.shape\n    if in_ch_W != in_ch:\n        raise ValueError(\"The in_channels dimension of W must match X.\")\n\n    # Compute effective kernel size with dilation\n    step = dilation + 1\n    effective_kernel = (kw - 1) * step + 1\n\n    # Determine padding\n    if isinstance(pad, str):\n        if pad.lower() != \"same\":\n            raise ValueError('pad string must be \"same\"')\n        # SAME padding\n        out_len = math.ceil(L / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - L)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    elif isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif (isinstance(pad, tuple) or isinstance(pad, list)) and len(pad) == 2:\n        pad_left, pad_right = pad\n    else:\n        raise ValueError(\"pad must be int, 2-tuple, or 'same'\")\n\n    # Pad the input on the length dimension\n    X_padded = np.pad(\n        X,\n        pad_width=((0, 0), (pad_left, pad_right), (0, 0)),\n        mode=\"constant\",\n        constant_values=0\n    )\n    L_padded = X_padded.shape[1]\n\n    # Output length (if not SAME, compute here)\n    if not (isinstance(pad, str) and pad.lower() == \"same\"):\n        out_len = (L_padded - effective_kernel) // stride + 1\n        if out_len < 0:\n            out_len = 0\n\n    # Prepare output\n    Y = np.zeros((n_examples, out_len, out_ch), dtype=X.dtype)\n\n    # Perform cross-correlation\n    for n in range(n_examples):\n        for t in range(out_len):\n            start = t * stride\n            for k in range(kw):\n                idx = start + k * step\n                # slice: shape (in_ch,)\n                x_slice = X_padded[n, idx, :]  # shape (in_ch,)\n                # W[k, :, :] has shape (in_ch, out_ch)\n                # outer product/ multiply-accumulate\n                # x_slice[:, None] * W[k, :, :] => shape (in_ch, out_ch)\n                # sum over in_ch axis\n                Y[n, t, :] += x_slice.dot(W[k, :, :])\n\n    return Y.tolist()\n```\n\nExplanation of key steps:\n\n1. **Input validation**  \n   - Check shapes and types of `X`, `W`, `stride`, and `dilation`.\n\n2. **Effective kernel size**  \n   - With dilation, the distance between consecutive kernel taps is `dilation + 1`.  \n   - `effective_kernel = (kernel_width - 1)*(dilation + 1) + 1`.\n\n3. **Padding**  \n   - If `pad=\"same\"`, use TensorFlow\u2019s SAME padding rule:  \n     ```\n     out_len = ceil(L / stride)\n     total_pad = max(0, (out_len - 1)*stride + effective_kernel - L)\n     pad_left = floor(total_pad/2)\n     pad_right = total_pad - pad_left\n     ```  \n   - If `pad` is an integer, use it both sides; if a 2-tuple, unpack.\n\n4. **Convolution loop**  \n   - After padding `X`, slide the window by `stride` steps.  \n   - For each output time-step `t`, and each kernel index `k`, multiply the slice of `X_padded` by the `k`th kernel plane in `W` and accumulate.\n\n5. **Return**  \n   - Convert the final NumPy array to a nested Python list via `tolist()`."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] |np.ndarray -> float:\n   Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n       # Convert input to a NumPy array for uniform handling\n    y_arr = np.asarray(y)\n    N = y_arr.size\n    if N == 0:\n        return 0.0\n\n    # Count occurrences of each class\n    classes, counts = np.unique(y_arr, return_counts=True)\n    probs = counts / N\n\n    # Gini impurity formula\n    gini_val = 1.0 - np.sum(probs ** 2)\n    return float(np.round(gini_val, 4))\n```\n\nExplanation of steps:\n1. We first convert the input `y` to a NumPy array so we can uniformly handle both lists and arrays.\n2. If the sequence is empty (`N == 0`), we return 0.0 by convention.\n3. Otherwise, we compute the counts of each distinct class via `np.unique(..., return_counts=True)`.\n4. We form the class probabilities `p_c = counts / N`, then compute `1 - sum(p_c^2)`.\n5. Finally, we round the result to 4 decimal places and return it as a Python float."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(\n    X: np.ndarray,\n    y: np.ndarray,\n    learning_rate: float = 0.01,\n    n_iterations: int = 10000\n) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    - X: Feature matrix of shape (m, n)\n    - y: Target vector of shape (m,)\n    - learning_rate: Step size for gradient descent\n    - n_iterations: Number of iterations to run gradient descent\n\n    Returns:\n    - (weights_list, bias) where:\n      * weights_list is a list of n floats (\u03b8 rounded to 4 decimals)\n      * bias is a float (b rounded to 4 decimals)\n    - If X and y have incompatible sample sizes, returns -1\n    \"\"\"\n    # Ensure X is 2D and y is 1D\n    X = np.asarray(X)\n    y = np.asarray(y).flatten()\n\n    # Number of samples (m) and features (n)\n    if X.ndim != 2:\n        return -1\n    m, n = X.shape\n\n    # Check consistency\n    if y.shape[0] != m or m == 0:\n        return -1\n\n    # Initialize parameters\n    theta = np.zeros(n, dtype=float)\n    b = 0.0\n\n    # Batch Gradient Descent\n    for _ in range(n_iterations):\n        # Predictions\n        y_hat = X.dot(theta) + b\n\n        # Errors\n        errors = y_hat - y\n\n        # Gradients\n        dw = (2.0 / m) * X.T.dot(errors)\n        db = (2.0 / m) * errors.sum()\n\n        # Parameter updates\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Round the results to 4 decimal places\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n\n    return theta_rounded, b_rounded\n```\n\nExplanation of key steps:\n1. **Input validation**: We convert inputs to NumPy arrays, ensure `X` is 2D, flatten `y` to 1D, and check `X.shape[0] == y.shape[0]`. If they mismatch (or if there are zero samples), we return `-1`.\n2. **Parameter initialization**: `theta` is an n-dimensional zero vector, and `b` is initialized to `0.0`.\n3. **Gradient descent loop** for `n_iterations`:\n   - Compute predictions `y_hat = X\u00b7\u03b8 + b`.\n   - Compute errors `errors = y_hat - y`.\n   - Compute gradients  \n     `dw = (2/m) * X\u1d40\u00b7errors` and  \n     `db = (2/m) * sum(errors)`.\n   - Update parameters:  \n     `\u03b8 \u2190 \u03b8 \u2212 lr\u00b7dw`, `b \u2190 b \u2212 lr\u00b7db`.\n4. **Rounding**: We round each weight in `\u03b8` and the bias `b` to 4 decimal places before returning.\n\nThe function returns a tuple `(weights_list, bias)` as specified."}
{"task_id": 375, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calc_pad_dims_2D(X_shape: tuple,\n                     out_dim: tuple,\n                     kernel_shape: tuple,\n                     stride: int,\n                     dilation: int = 0) -> tuple:\n   Return the amount of zero-padding needed on each side of a 4-D tensor.\n\n    Parameters\n    ----------\n    X_shape : tuple\n        Shape of the input tensor ``(n_ex, in_rows, in_cols, in_ch)``.\n    out_dim : tuple\n        Desired output height and width ``(out_rows, out_cols)``.\n    kernel_shape : tuple\n        Height and width of the convolution kernel ``(fr, fc)``.\n    stride : int\n        Stride used by the convolution.\n    dilation : int, optional (default=0)\n        Dilation factor (number of inserted zeros between kernel elements).\n\n    Returns\n    -------\n    tuple\n        A 4-tuple ``(top, bottom, left, right)`` indicating how many zero rows\n        and columns must be added to the **top**, **bottom**, **left**, and\n        **right** sides of the input volume.\n\n    Raises\n    ------\n    ValueError\n        If any argument has the wrong type/shape or if the required padding\n        would be negative (i.e.\\ the requested output size is impossible).\n       # -------- 1) Validate inputs --------\n    # X_shape\n    if not isinstance(X_shape, tuple) or len(X_shape) != 4:\n        raise ValueErrorX_shape must be a tuple of length 4    if not all(isinstance(x, (int, np.integer)) for x in X_shape):\n        raise ValueErrorAll elements of X_shape must be integers    _, in_rows, in_cols, _ = X_shape\n    if in_rows < 1 or in_cols < 1:\n        raise ValueErrorInput spatial dimensions must be >= 1    # out_dim\n    if not isinstance(out_dim, tuple) or len(out_dim) != 2:\n        raise ValueErrorout_dim must be a tuple of length 2    if not all(isinstance(x, (int, np.integer)) for x in out_dim):\n        raise ValueErrorAll elements of out_dim must be integers    out_rows, out_cols = out_dim\n    if out_rows < 1 or out_cols < 1:\n        raise ValueErrorOutput dimensions must be >= 1    # kernel_shape\n    if not isinstance(kernel_shape, tuple) or len(kernel_shape) != 2:\n        raise ValueErrorkernel_shape must be a tuple of length 2    if not all(isinstance(x, (int, np.integer)) for x in kernel_shape):\n        raise ValueErrorAll elements of kernel_shape must be integers    fr, fc = kernel_shape\n    if fr < 1 or fc < 1:\n        raise ValueErrorKernel dimensions must be >= 1    # stride\n    if not isinstance(stride, (int, np.integer)):\n        raise ValueErrorstride must be an integer    if stride < 1:\n        raise ValueErrorstride must be >= 1    # dilation\n    if not isinstance(dilation, (int, np.integer)):\n        raise ValueErrordilation must be an integer    if dilation < 0:\n        raise ValueErrordilation must be >= 0    # -------- 2) Effective filter size with dilation --------\n    # formula: eff_fr = fr*(dilation+1) - dilation\n    eff_fr = fr * (dilation + 1) - dilation\n    eff_fc = fc * (dilation + 1) - dilation\n\n    # -------- 3) Compute total padding needed --------\n    # We invert: out = 1 + floor((in + pad - eff_filter) / stride)\n    # => pad >= (out-1)*stride + eff_filter - in\n    pad_rows = (out_rows - 1) * stride + eff_fr - in_rows\n    pad_cols = (out_cols - 1) * stride + eff_fc - in_cols\n\n    if pad_rows < 0 or pad_cols < 0:\n        raise ValueErrorRequired padding is negative; output size impossible    # -------- 4) Split padding into top/bottom, left/right --------\n    # If odd, bottom/right get the extra pixel (TensorFlow convention)\n    top    = pad_rows // 2\n    bottom = pad_rows - top\n    left   = pad_cols // 2\n    right  = pad_cols - left\n\n    return (top, bottom, left, right)\n```\n\nExplanation of the main steps:\n\n1. **Validation**  \n   We check that each argument has the correct Python type (tuple or int) and length, and that all integer values are in a valid range (e.g.\\ positive dimensions, non\u2010negative dilation).\n\n2. **Effective filter size**  \n   When you have a dilation `d`, the convolution \u201csees\u201d a filter of height  \n     eff_fr = fr\u00b7(d+1) \u2013 d  \n   (and similarly for width).\n\n3. **Total padding**  \n   In a 1D analogue, a convolution output of length `L_out` is computed as  \n     L_out = 1 + \u230a(L_in + pad \u2013 eff_filter)/stride\u230b.  \n   Inverting this for `pad` gives  \n     pad \u2265 (L_out \u2013 1)\u00b7stride + eff_filter \u2013 L_in.  \n   We take the minimal non\u2010negative pad that satisfies this.  A negative result means you cannot achieve the desired output size even with zero padding, so we raise an error.\n\n4. **Distribution of padding**  \n   If the total padding on one side is an odd number, we follow TensorFlow\u2019s convention by putting the extra row/column on the bottom or right."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose,\n    up to a tolerance for floating\u2010point comparisons.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Number of rows\n    n = len(X)\n    # Quick check: it must be square, so each row must have length n\n    for row in X:\n        if len(row) != n:\n            return False\n\n    # Convert to a NumPy array of floats\n    try:\n        arr = np.array(X, dtype=float)\n    except (ValueError, TypeError):\n        # In case the data cannot cleanly be cast to float\n        return False\n\n    # Must be 2D and square\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n\n    # Compare to its transpose within absolute tolerance 1e-8\n    return bool(np.allclose(arr, arr.T, atol=1e-8, rtol=0.0))\n```\n\nExplanation of key steps:\n- We first ensure the input is square by checking that each of the `n` rows has exactly `n` columns.\n- We convert the list-of-lists to a NumPy float array; if that fails, we bail out with `False`.\n- We verify the array is truly 2-dimensional and square.\n- Finally, we use `np.allclose` with `atol=1e-8, rtol=0.0` so that two entries are considered equal if their absolute difference is at most 1\u00d710\u207b\u2078."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for the logistic (binomial deviance) loss used in\n    gradient boosting for binary classification.\n\n    Parameters\n    ----------\n    y : list of int\n        True binary labels, each element must be 0 or 1.\n    f : list of float\n        Current prediction scores for each sample (real-valued).\n\n    Returns\n    -------\n    List[float]\n        The negative gradient g_i for each sample, rounded to 4 decimal places.\n        If `y` contains values other than 0 or 1, returns -1.\n\n    Notes\n    -----\n    Internally, labels y_i are converted to y'_i = 2*y_i - 1 in {-1, +1}, and the\n    logistic loss is\n        L(y', f) = log(1 + exp(-2 * y' * f))\n    Its negative gradient w.r.t. f is\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n    \"\"\"\n    # Convert to numpy arrays for vectorized operations\n    y_arr = np.array(y)\n    f_arr = np.array(f, dtype=float)\n\n    # Check that y only contains 0 or 1\n    unique_labels = np.unique(y_arr)\n    if not set(unique_labels).issubset({0, 1}):\n        return -1\n\n    # Convert labels to {-1, +1}\n    y_prime = 2 * y_arr - 1\n\n    # Compute negative gradient: g_i = y'_i / (1 + exp(y'_i * f_i))\n    denom = 1.0 + np.exp(y_prime * f_arr)\n    gradients = y_prime / denom\n\n    # Round to 4 decimal places and return as Python list\n    return np.round(gradients, 4).tolist()\n```"}
{"task_id": 378, "completion_id": 0, "completion": "```python\ndef indicator(flag: int) -> int:\n   Return 1 if *flag* is 1, otherwise return 0.\n\n    Args:\n        flag (int): An integer value.\n\n    Returns:\n        int: 1 if flag == 1, else 0.\n       return 1 if flag == 1 else 0\n```\n\nExplanation:\n- We use a simple conditional expression that evaluates to `1` when `flag == 1`, otherwise to `0`.\n\nYou could also write it more tersely as:\n\n```python\ndef indicator(flag: int) -> int:\n    return int(flag == 1)\n```\n\nBoth versions satisfy the requirement of returning `1` when `flag` is exactly `1`, and `0` for any other integer."}
{"task_id": 379, "completion_id": 0, "completion": "```python\ndef sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n               fields ``'key'``, ``'val'``, ``'priority'`` and\n               ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    # We sort by (priority, entry_id), both ascending, and then extract keys.\n    sorted_nodes = sorted(\n        nodes,\n        key=lambda node: (node[\"priority\"], node[\"entry_id\"])\n    )\n    return [node[\"key\"] for node in sorted_nodes]\n```\n\nExplanation of the steps:\n1. We call Python\u2019s built-in `sorted` on the original list (which remains unmodified), supplying a key function that returns a tuple `(priority, entry_id)`.  \n2. Tuples are compared lexicographically, so sorting by that tuple automatically implements the rule:\n   - First by `priority` (smaller first),\n   - Then by `entry_id` (smaller first) when priorities tie.  \n3. Finally, we build and return a new list of just the `key` fields in that sorted order."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n   Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n       # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array\n    arr = np.array(x, dtype=float)\n    # Prepare an output array of the same shape\n    res = np.empty_like(arr)\n\n    # Boolean mask for positive vs non-positive entries\n    pos = arr > 0\n\n    if order == 0:\n        # SELU activation\n        res[pos] = scale * arr[pos]\n        res[~pos] = scale * alpha * (np.exp(arr[~pos]) - 1)\n    elif order == 1:\n        # First derivative\n        res[pos] = scale\n        res[~pos] = scale * alpha * np.exp(arr[~pos])\n    elif order == 2:\n        # Second derivative\n        res[pos] = 0.0\n        res[~pos] = scale * alpha * np.exp(arr[~pos])\n    else:\n        raise ValueErrororder must be 0, 1, or 2    # Round to 4 decimals and convert to Python list (or scalar)\n    return np.round(res, 4).tolist()\n```\n\nExplanation of the piecewise definitions:\n\n- For x > 0:\n  - SELU(x) = scale * x\n  - d/dx SELU(x) = scale\n  - d\u00b2/dx\u00b2 SELU(x) = 0\n- For x \u2264 0:\n  - SELU(x) = scale * \u03b1 (e\u02e3 \u2013 1)\n  - d/dx SELU(x) = scale * \u03b1 e\u02e3\n  - d\u00b2/dx\u00b2 SELU(x) = scale * \u03b1 e\u02e3\n\nThe result is rounded to the fourth decimal place and returned via `tolist()`, preserving scalar or array structure."}
{"task_id": 382, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_naive_bayes_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray) -> list:\n   Train a Gaussian Naive Bayes model on *X_train*, *y_train* and predict\n    the labels of *X_test*.\n\n    The implementation must use the formulae described in the task statement,\n    assume that every feature follows an independent Gaussian distribution\n    inside each class and return the predicted labels as a Python list.\n       # Small constant to avoid division by zero\n    eps = 1e-4\n\n    # Identify sorted unique class labels\n    classes = np.unique(y_train)\n    n_classes = len(classes)\n    n_features = X_train.shape[1]\n    n_samples = X_train.shape[0]\n\n    # Initialize containers for class priors, means, variances\n    priors = np.zeros(n_classes, dtype=float)\n    means = np.zeros((n_classes, n_features), dtype=float)\n    variances = np.zeros((n_classes, n_features), dtype=float)\n\n    # Estimate priors, means, and variances for each class\n    for idx, c in enumerate(classes):\n        # Select samples of class c\n        Xc = X_train[y_train == c]\n        priors[idx] = Xc.shape[0] / n_samples\n        # Mean and variance along each feature\n        means[idx, :] = Xc.mean(axis=0)\n        variances[idx, :] = Xc.var(axis=0)  # ddof=0 by default\n\n    # Now predict for each test sample\n    predictions = []\n    for x in X_test:\n        best_class = None\n        best_posterior = -1.0  # probabilities are >= 0\n        # Evaluate posterior for each class\n        for idx, c in enumerate(classes):\n            # Start with the prior\n            posterior = priors[idx]\n            mu = means[idx]\n            var = variances[idx]\n            # Multiply by each feature likelihood\n            for xi, mui, vi in zip(x, mu, var):\n                denom = math.sqrt(2 * math.pi * vi + eps)\n                exponent = -((xi - mui) ** 2) / (2 * vi + eps)\n                likelihood = (1.0 / denom) * math.exp(exponent)\n                posterior *= likelihood\n            # Keep track of the best class\n            if posterior > best_posterior:\n                best_posterior = posterior\n                best_class = c\n        predictions.append(best_class)\n\n    return predictions\n```"}
{"task_id": 383, "completion_id": 0, "completion": "```python\ndef find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n\n    # Round to four decimal places before returning\n    return [round(L, 4), round(H, 4)]\n```\n\nExplanation:\n1. We check whether the two labels are equal or not.\n2. Depending on that, we apply the corresponding formula for L and H.\n3. Finally, we round both bounds to four decimal places and return them as a list."}
{"task_id": 384, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    # Convert to numpy array\n    A = np.array(L, dtype=float)\n    # Check squareness\n    n, m = A.shape\n    if n != m or k > n or k <= 0:\n        return -1\n\n    # Compute eigenvalues and eigenvectors\n    eigenvals, eigenvecs = np.linalg.eig(A)\n    # Use real parts only\n    eigenvals = eigenvals.real\n    eigenvecs = eigenvecs.real\n\n    # Sort eigenvalues and pick indices of the k smallest\n    idx = np.argsort(eigenvals)\n    chosen_idx = idx[:k]\n\n    # Collect corresponding eigenvectors (each column is one)\n    V = eigenvecs[:, chosen_idx].copy()\n\n    # Normalize each vector to unit length and fix sign\n    eps = 1e-8\n    for j in range(k):\n        vec = V[:, j]\n        norm = np.linalg.norm(vec)\n        if norm < eps:\n            # Shouldn't happen for a Laplacian, but guard anyway\n            continue\n        vec /= norm\n\n        # Flip sign so first non-zero entry is positive\n        for x in vec:\n            if abs(x) > eps:\n                if x < 0:\n                    vec[:] = -vec\n                break\n        V[:, j] = vec\n\n    # Round to 4 decimals\n    V = np.round(V, 4)\n    # Convert any -0.0 to 0.0\n    V[np.isclose(V, 0.0, atol=1e-4)] = 0.0\n\n    # Return as Python list of rows (columns are eigenvectors)\n    return V.tolist()\n```\n\nExplanation of key steps:\n1. **Input validation**: Ensure the matrix is square and `k` is in a valid range.\n2. **Eigen-decomposition**: `np.linalg.eig` yields (possibly complex) eigenvalues and eigenvectors; we take their real parts.\n3. **Selection**: Sort eigenvalues in ascending order and pick the indices of the smallest `k`.\n4. **Normalization**: Scale each chosen eigenvector to unit length (L2 norm).\n5. **Deterministic sign**: For each eigenvector, flip it if its first non-zero entry is negative.\n6. **Rounding**: Round all entries to 4 decimal places and fix any `-0.0` to `0.0`.\n7. **Output**: Convert the NumPy matrix to a nested Python list, where each column corresponds to an eigenvector."}
{"task_id": 385, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Project the dataset X with labels y onto the first k LDA components.\"\"\"\n    # Convert inputs to numpy arrays\n    X_arr = np.array(X, dtype=float)               # shape: (n_samples, n_features)\n    y_arr = np.array(y)\n    n_samples, n_features = X_arr.shape\n\n    # Find unique classes and their counts\n    classes, counts = np.unique(y_arr, return_counts=True)\n    c = len(classes)\n\n    # If there is only one class or k < 1, return empty projections\n    max_components = max(c - 1, 0)\n    if max_components == 0 or k < 1:\n        return [[] for _ in range(n_samples)]\n    k = min(k, max_components)\n\n    # Compute the overall mean\n    overall_mean = X_arr.mean(axis=0)              # shape: (n_features,)\n\n    # Initialize scatter matrices\n    S_w = np.zeros((n_features, n_features))       # within-class scatter\n    S_b = np.zeros((n_features, n_features))       # between-class scatter\n\n    # Compute S_w and S_b\n    for cls in classes:\n        X_i = X_arr[y_arr == cls]                   # all samples of class cls\n        n_i = X_i.shape[0]\n        mean_i = X_i.mean(axis=0)                   # class mean\n\n        # Within-class scatter\n        dev = X_i - mean_i                          # deviations\n        S_w += dev.T.dot(dev)\n\n        # Between-class scatter\n        diff = (mean_i - overall_mean).reshape(n_features, 1)\n        S_b += n_i * (diff @ diff.T)\n\n    # Solve the generalized eigenvalue problem S_w^{-1} S_b w = \u03bb w\n    # Use pseudo-inverse in case S_w is singular\n    S_w_inv = np.linalg.pinv(S_w)\n    mat = S_w_inv.dot(S_b)\n\n    eigvals, eigvecs = np.linalg.eig(mat)\n    eigvals = eigvals.real\n    eigvecs = eigvecs.real\n\n    # Sort eigenvectors by descending eigenvalue\n    sorted_indices = np.argsort(eigvals)[::-1]\n\n    # Build the projection matrix W with the top k eigenvectors\n    W = np.zeros((n_features, k))\n    for idx in range(k):\n        vec = eigvecs[:, sorted_indices[idx]]\n        # Normalize to unit length\n        vec = vec / np.linalg.norm(vec)\n        # Deterministic orientation: make first element non-negative\n        if vec[0] < 0:\n            vec = -vec\n        W[:, idx] = vec\n\n    # Project the data\n    Y = X_arr.dot(W)             # shape: (n_samples, k)\n    Y = np.round(Y, 4)           # round to 4 decimal places\n\n    return Y.tolist()\n```"}
{"task_id": 386, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef binary_crossentropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n   Compute the Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        1-D array of true labels (0 or 1).\n    y_pred : np.ndarray\n        1-D array of predicted probabilities (between 0 and 1).\n\n    Returns\n    -------\n    float\n        The average BCE loss rounded to 4 decimal places.\n       # 1. Clip predictions to avoid log(0)\n    eps = 1e-15\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # 2. Compute binary cross-entropy\n    bce = -np.mean(\n        y_true * np.log(y_pred_clipped) +\n        (1 - y_true) * np.log(1 - y_pred_clipped)\n    )\n\n    # 3. Round to 4 decimal places and return\n    return round(bce, 4)\n```\n\nExplanation of steps:\n1. We use `np.clip` to ensure every predicted probability stays within `[\u03b5, 1-\u03b5]`, protecting against `log(0)`.\n2. We apply the formula  \n   `BCE = - (1/n) * \u03a3 [y_i * log(p_i) + (1 - y_i) * log(1 - p_i)]`.\n3. Finally, we round the scalar loss to 4 decimal places with Python\u2019s built-in `round`."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n   Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n       # Convert to numpy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    N = x_arr.shape[0]\n    \n    # Initialize predictions to the global mean\n    y_pred = np.full(N, y_arr.mean(), dtype=float)\n    \n    # Pre-sort x once (we'll refer to this order for splits)\n    sort_idx = np.argsort(x_arr)\n    x_sorted = x_arr[sort_idx]\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_arr - y_pred\n        \n        # Check if we can split at all\n        unique_x = np.unique(x_sorted)\n        if unique_x.size == 1:\n            # No split possible, stump predicts global mean residual\n            mean_res = residuals.mean()\n            y_pred += learning_rate * mean_res\n            continue\n        \n        # Sort residuals in the same order as x_sorted\n        r_sorted = residuals[sort_idx]\n        \n        # Precompute cumulative sums for fast SSE calculation\n        csum_r = np.cumsum(r_sorted)\n        csum_r2 = np.cumsum(r_sorted ** 2)\n        total_r = csum_r[-1]\n        total_r2 = csum_r2[-1]\n        \n        best_sse = np.inf\n        best_i = None\n        \n        # Consider splits between positions i and i+1 where x changes\n        for i in range(N - 1):\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            # Left partition size and sums\n            n_L = i + 1\n            sum_r_L = csum_r[i]\n            sum_r2_L = csum_r2[i]\n            mean_L = sum_r_L / n_L\n            sse_L = sum_r2_L - (sum_r_L ** 2) / n_L\n            \n            # Right partition\n            n_R = N - n_L\n            sum_r_R = total_r - sum_r_L\n            sum_r2_R = total_r2 - sum_r2_L\n            mean_R = sum_r_R / n_R\n            sse_R = sum_r2_R - (sum_r_R ** 2) / n_R\n            \n            sse = sse_L + sse_R\n            if sse < best_sse:\n                best_sse = sse\n                best_i = i\n        \n        # Determine optimal split threshold and predictions\n        t_star = (x_sorted[best_i] + x_sorted[best_i + 1]) / 2.0\n        # Compute means for this best split\n        # Left side\n        n_L = best_i + 1\n        sum_r_L = csum_r[best_i]\n        mean_L = sum_r_L / n_L\n        # Right side\n        sum_r_R = total_r - sum_r_L\n        n_R = N - n_L\n        mean_R = sum_r_R / n_R\n        \n        # Form stump prediction for each original sample\n        stump_pred = np.where(x_arr <= t_star, mean_L, mean_R)\n        \n        # Update ensemble prediction\n        y_pred += learning_rate * stump_pred\n    \n    # Round to 4 decimals and return as Python list\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 389, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    # Convert input to numpy array of floats\n    arr = np.array(W, dtype=float)\n\n    # Validate squareness\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return -1\n\n    # Compute degree matrix D\n    row_sums = arr.sum(axis=1)\n    D = np.diag(row_sums)\n\n    # Compute Laplacian L = D - W\n    L = D - arr\n\n    # Round to 4 decimal places and convert to Python list of lists\n    L_rounded = np.round(L, 4)\n    return L_rounded.tolist()\n```\n\nExplanation of steps:\n1. We convert `W` to a NumPy array of type float.\n2. We check that the array is 2-dimensional and square; if not, we return `-1`.\n3. We compute the degree matrix `D` by summing each row of `W` and placing those sums on the diagonal.\n4. We compute the Laplacian `L = D - W`.\n5. Finally, we round `L` to 4 decimal places and return it as a nested Python list."}
{"task_id": 391, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    # Ensure input positions are in a NumPy array of floats\n    t_arr = np.asarray(t, dtype=float)\n    \n    # Round to nearest integer index (ties to even, as in np.around)\n    idxs = np.around(t_arr).astype(int)\n    \n    # Clip indices to valid range [0, in_length-1]\n    in_length = X.shape[0]\n    idxs = np.clip(idxs, 0, in_length - 1)\n    \n    # Gather samples and return as a Python list\n    result = X[idxs]\n    return result.tolist()\n```\n\nExplanation of key steps:\n\n1. **Convert** the query positions `t` into a NumPy array of floats.  \n2. **Round** each position using `np.around`, which implements \u201cround to nearest, ties to even.\u201d  \n3. **Clip** the rounded indices so they stay within `[0, in_length-1]`.  \n4. **Index** into `X` with these integer indices to pick the nearest samples.  \n5. **Return** the result as a plain Python list via `.tolist()`."}
{"task_id": 392, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef preemphasis(x:list[float] | np.ndarray alpha: float) -> list[float]:\n   Apply a first-order pre-emphasis filter to a 1-D signal.\n\n    Args:\n        x: Input signal.  A one-dimensional array-like object containing the\n           samples to be filtered.\n        alpha: Pre-emphasis coefficient in the half-open interval [0, 1).\n\n    Returns:\n        The filtered signal as a Python list with every element rounded to\n        four decimal places.\n\n    Raises:\n        ValueError: If alpha is not in [0, 1).\n       # Validate alpha\n    if not (0.0 <= alpha < 1.0):\n        raise ValueError(falpha must be in [0, 1), got {alpha    # Convert to numpy array and flatten\n    arr = np.asarray(x, dtype=float).ravel()\n    n = arr.shape[0]\n\n    # If empty, return empty list\n    if n == 0:\n        return []\n\n    # Allocate output\n    y = np.empty_like(arr)\n\n    # First sample unchanged\n    y[0] = arr[0]\n\n    # Apply pre-emphasis for t >= 1\n    for t in range(1, n):\n        y[t] = arr[t] - alpha * arr[t - 1]\n\n    # Round to 4 decimal places and convert to Python list\n    y_rounded = np.round(y, 4).tolist()\n    return y_rounded\n```\n\nExplanation of key steps:\n1. **Validation**: We ensure `alpha` lies in `[0, 1)`, raising a `ValueError` otherwise.\n2. **Flattening**: `np.asarray(x, dtype=float).ravel()` turns any array-like (list or multi-D array) into a 1-D float array.\n3. **Filtering**:\n   - The first output sample `y[0]` is set equal to `x[0]`.\n   - For each subsequent sample `t`, we compute `y[t] = x[t] - alpha * x[t-1]`.\n4. **Rounding & Conversion**: `np.round(..., 4)` rounds every element to four decimal places, and `.tolist()` converts the result back into a plain Python list."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n   Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n       eps = 1e-8\n\n    # 1) Initialize Eg if it's None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # 2) Update running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n\n    # 3) Compute parameter update\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + eps)\n\n    # 4) Round to 4 decimal places and convert to Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n\n    return w_next_rounded, Eg_next_rounded\n```\n\nExplanation of key steps:\n\n1. If `Eg` is `None`, we create a zero array of the same shape as `grad`.\n2. We compute the new running average `Eg_next` using the formula  \n   `Eg_next = rho * Eg + (1 - rho) * grad**2`.\n3. We update the parameters as  \n   `w_next = w - \u03b1 * grad / sqrt(Eg_next + \u03b5)`.\n4. Finally, both outputs are rounded to 4 decimal places and converted to standard Python lists before returning."}
{"task_id": 395, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    stars = \"*\" * 50\n    return stars + \"\\nBeta:\\n\" + str(beta) + \"\\nProbability of sequence: \" + str(b_prob)\n```"}
{"task_id": 396, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result is rounded to 6 decimal places.\n    \u2022 The input is not modified in-place.\n    \"\"\"\n    # Convert input to a NumPy array of floats (does not modify the original)\n    x_arr = np.array(x, dtype=float)\n\n    # 1. tanh(x)\n    t = np.tanh(x_arr)\n\n    # 2. First derivative: 1 - tanh(x)^2\n    dt = 1.0 - t**2\n\n    # 3. Second derivative: -2 * tanh(x) * (1 - tanh(x)^2)\n    d2t = -2.0 * t * dt\n\n    # Round to 6 decimal places\n    t_rounded   = np.round(t,   6)\n    dt_rounded  = np.round(dt,  6)\n    d2t_rounded = np.round(d2t, 6)\n\n    # Convert to plain Python lists and return\n    return [\n        t_rounded.tolist(),\n        dt_rounded.tolist(),\n        d2t_rounded.tolist()\n    ]\n```\n\nExplanation of key steps:\n\n1. **Conversion to NumPy array**  \n   We make a new array `x_arr = np.array(x, dtype=float)` so as not to modify the original input.\n\n2. **Computing the values**  \n   - `t = np.tanh(x_arr)` computes the element\u2010wise hyperbolic tangent.  \n   - `dt = 1.0 - t**2` is the first derivative.  \n   - `d2t = -2.0 * t * dt` is the second derivative.\n\n3. **Rounding and type conversion**  \n   We use `np.round(..., 6)` to round each array to 6 decimal places, then `.tolist()` to produce plain Python lists.\n\nThis satisfies the requirement of returning a single list containing three lists, each rounded to six decimal places."}
{"task_id": 397, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_one_hot_matrix(n_examples: int, n_classes: int):\n   Create a random one-hot matrix.\n\n    Parameters\n    ----------\n    n_examples : int\n        Number of rows (examples) to generate.  May be 0.\n    n_classes : int\n        Size of the vocabulary / number of distinct classes (>0).\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of shape (n_examples, n_classes) where every row is a one-hot\n        encoded vector chosen uniformly at random from all `n_classes` possible\n        class indices.\n       # Draw random class indices for each example\n    # np.random.randint handles the case n_examples == 0 by returning an empty array\n    chosen = np.random.randint(low=0, high=n_classes, size=n_examples)\n    \n    # Create the one-hot matrix (rows \u00d7 classes), initialized to zeros\n    one_hot = np.zeros((n_examples, n_classes), dtype=float)\n    \n    # Place 1s at the sampled class positions\n    rows = np.arange(n_examples)\n    one_hot[rows, chosen] = 1.0\n    \n    return one_hot\n```\n\nExplanation of key steps:\n1. We sample `n_examples` integers uniformly from `0` to `n_classes - 1` (inclusive) via `np.random.randint`.  \n2. We allocate a zero matrix of shape `(n_examples, n_classes)`.  \n3. Using fancy\u2010indexing, we set exactly one entry in each row to `1.0` at the sampled class index.  \n\nThis meets all the requirements:\n- Returns an `ndarray` of shape `(n_examples, n_classes)`.  \n- Each element is `0` or `1`.  \n- Each row sums to `1`.  \n- When `n_examples == 0`, it returns an empty array of shape `(0, n_classes)`."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True, return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    x_arr = np.array(x, dtype=float)\n\n    if not derivative:\n        # ELU activation: x if x>=0, else alpha*(exp(x)-1)\n        out = np.where(x_arr >= 0,\n                       x_arr,\n                       alpha * (np.exp(x_arr) - 1.0))\n    else:\n        # ELU derivative: 1 if x>=0, else ELU(x) + alpha\n        # First compute ELU(x) for the negative branch\n        neg_elu = alpha * (np.exp(x_arr) - 1.0)\n        out = np.where(x_arr >= 0,\n                       1.0,\n                       neg_elu + alpha)\n\n    # Round to 4 decimal places and convert to Python list\n    return np.round(out, 4).tolist()\n```\n\nExplanation of key steps:\n1. We first cast the input `x` to a NumPy array of floats, so we can use vectorized operations.\n2. If `derivative` is False, we apply the ELU formula:\n   - For elements `>= 0`, output is the element itself.\n   - For elements `< 0`, output is `alpha * (exp(x) - 1)`.\n3. If `derivative` is True, we compute:\n   - For elements `>= 0`, the derivative is `1`.\n   - For elements `< 0`, the derivative is `ELU(x) + alpha`, which simplifies to `alpha * exp(x)`, but we compute it as shown for clarity.\n4. Finally, we round each result to 4 decimal places and return as a regular Python list."}
{"task_id": 399, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if (not isinstance(X, np.ndarray) or not isinstance(Y, np.ndarray)\n        or X.ndim != 2 or Y.ndim != 2\n        or X.shape[1] != Y.shape[1]):\n        return -1\n\n    # Compute squared norms of each row in X and Y\n    # X_norm2: shape (m, 1), Y_norm2: shape (1, n)\n    X_norm2 = np.sum(X * X, axis=1).reshape(-1, 1)\n    Y_norm2 = np.sum(Y * Y, axis=1).reshape(1, -1)\n\n    # Use the identity ||x - y||^2 = ||x||^2 + ||y||^2 - 2 x\u00b7y\n    sq_dists = X_norm2 + Y_norm2 - 2 * X.dot(Y.T)\n\n    # Numerical errors might make some entries slightly negative \u2192 clip to zero\n    sq_dists = np.maximum(sq_dists, 0.0)\n\n    # Take square root to get Euclidean distances\n    dists = np.sqrt(sq_dists)\n\n    # Round to 4 decimal places and convert to a list of lists\n    dists_rounded = np.round(dists, 4)\n    return dists_rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Input validation**: Ensure both inputs are 2-D NumPy arrays with the same number of columns.\n2. **Vectorized distance computation** via the identity  \n   \u2016x\u2212y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2\u00b7(x\u00b7y),  \n   which avoids an explicit Python loop.\n3. **Clipping** negative small values (due to floating\u2010point error) to zero before taking the square root.\n4. **Rounding** each entry to 4 decimal places and converting the resulting NumPy array to a pure Python list of lists."}
{"task_id": 400, "completion_id": 0, "completion": "```python\nimport math\n\ndef gaussian_cdf(x: float, mean: float, variance: float) -> float:\n   Compute \u03a6(x; \u03bc, \u03c3\u00b2) \u2013 the Gaussian CDF evaluated at *x*.\n\n    Parameters\n    ----------\n    x : float\n        The point at which to evaluate the CDF.\n    mean : float\n        The mean (\u03bc) of the Gaussian distribution.\n    variance : float\n        The variance (\u03c3\u00b2) of the Gaussian distribution. Must be non-negative.\n\n    Returns\n    -------\n    float\n        The probability that a Gaussian random variable with given parameters\n        does not exceed *x*, rounded to six decimal places.\n       if variance < 0:\n        raise ValueErrorvariance must be non-negative    # Degenerate case: variance == 0 \u2192 point mass at mean\n    if variance == 0:\n        if x < mean:\n            prob = 0.0\n        elif x == mean:\n            prob = 0.5\n        else:\n            prob = 1.0\n    else:\n        # Standard normal CDF via the error function\n        z = (x - mean) / math.sqrt(2 * variance)\n        prob = 0.5 * (1.0 + math.erf(z))\n\n    # Round to exactly six decimal places\n    return round(prob, 6)\n```\n\nExplanation:\n\n1. We first check that `variance` is non-negative, raising an error otherwise.\n2. For the degenerate case `variance == 0`, the CDF is  \n   - 0 if `x < mean`  \n   - 0.5 if `x == mean`  \n   - 1 if `x > mean`  \n3. For `variance > 0`, we compute the standardized argument `z = (x - \u03bc) / (\u221a2 \u03c3)` where \u03c3 = \u221avariance, and then use the formula  \n   \u03a6(x; \u03bc, \u03c3\u00b2) = 0.5 [1 + erf(z)].  \n4. Finally, we round the result to six decimal places per requirements."}
{"task_id": 401, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_one_hot(y: np.ndarray, num_classes: int | None = None) -> np.ndarray:\n   Convert a vector of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        1-D or 2-D NumPy array containing integer labels. If the array is\n        already one-hot encoded (shape (N, C) with rows summing to 1), the\n        function returns a copy of the input.\n    num_classes : int, optional\n        Total number of classes. If None the number is inferred from y.\n\n    Returns\n    -------\n    np.ndarray\n        One-hot encoded matrix of shape (N, C) with dtype float (only 0.0/1.0).\n       y_arr = np.asarray(y)\n    # Case 1: Already one-hot? 2-D, more than 1 column, each row sums to 1\n    if y_arr.ndim == 2 and y_arr.shape[1] > 1:\n        # row sums\n        row_sums = y_arr.sum(axis=1)\n        # check if every row sums to 1 (within tolerance)\n        if np.allclose(row_sums, 1.0):\n            # return a float copy so we don't modify the original\n            return y_arr.astype(float, copy=True)\n\n    # Otherwise, we must interpret y as a vector of integer labels\n    # Shape must be (N,) or (N,1)\n    if y_arr.ndim == 2:\n        if y_arr.shape[1] == 1:\n            y_vec = y_arr[:, 0]\n        else:\n            raise ValueError(\n                fInvalid input shape {y_arr.shape}.               2-D array must be one-hot (already handled) or shape (N,1).            )\n    elif y_arr.ndim == 1:\n        y_vec = y_arr\n    else:\n        raise ValueError(\n            fInvalid input array dimension {y_arr.ndim}.           Expect 1-D or 2-D        )\n\n    # Check that labels are integers\n    if not np.issubdtype(y_vec.dtype, np.integer):\n        raise ValueError(\n            fLabels must be integers, got dtype {y_vec.dtype}        )\n\n    # Determine number of classes\n    max_label = int(y_vec.max()) if y_vec.size > 0 else -1\n    if num_classes is None:\n        num_classes = max_label + 1\n    else:\n        if num_classes <= max_label:\n            raise ValueError(\n                fnum_classes={num_classes} is too small for labels in y (max label = {max_label}).            )\n\n    # Now build the one-hot matrix\n    N = y_vec.shape[0]\n    C = num_classes\n    one_hot = np.zeros((N, C), dtype=float)\n\n    # Validate label range and assign 1.0\n    if N > 0:\n        if np.any(y_vec < 0) or np.any(y_vec >= C):\n            raise ValueError(\n                fLabels out of bounds. Must be in [0, {C-1}],                fbut found values in {y_vec.min()}..{y_vec.max()}            )\n        # fancy indexing to set the 1s\n        one_hot[np.arange(N), y_vec] = 1.0\n\n    return one_hot\n```\n\nExplanation of the main steps:\n\n1. **Detect already one-hot**  \n   - If `y` is 2-D with more than one column and each row sums to 1 (within floating\u2010point tolerance), we treat it as already one-hot encoded. We simply return a float copy to avoid mutating the caller\u2019s array.\n\n2. **Flatten label vector**  \n   - If `y` is `(N,1)`, we extract the single column.  \n   - If it\u2019s `(N,)`, we use it directly.  \n   - Otherwise, we raise a `ValueError`.\n\n3. **Type and range checks**  \n   - Ensure labels are integer\u2010typed.  \n   - Infer `num_classes` from `max(label) + 1` if not given, or ensure the provided `num_classes` is large enough.  \n   - Check all labels are in `[0, num_classes-1]`.\n\n4. **Construct one-hot**  \n   - Allocate an `(N, num_classes)` float array of zeros.  \n   - Use `one_hot[np.arange(N), y_vec] = 1.0` to place the ones.\n\nThis satisfies all requirements: it handles `(N,)`, `(N,1)` inputs, detects and preserves existing one-hot arrays (up to a copy), and returns an `(N, C)` float matrix with only 0.0 and 1.0."}
{"task_id": 402, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_nb_predict(X_train: np.ndarray,\n                        y_train: np.ndarray,\n                        X_test: np.ndarray,\n                        eps: float = 1e-6) -> np.ndarray:\n   Predict labels for X_test using a Gaussian Naive Bayes classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (N_train, M)\n        Training feature matrix.\n    y_train : np.ndarray of shape (N_train,)\n        Training labels.\n    X_test : np.ndarray of shape (N_test, M)\n        Test feature matrix whose labels are to be predicted.\n    eps : float, optional (default=1e-6)\n        Small value added to variances to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray of shape (N_test,)\n        Predicted labels for each row in X_test.\n       # Number of training examples and features\n    N_train, M = X_train.shape\n\n    # Identify unique classes\n    classes = np.unique(y_train)\n    C = classes.shape[0]\n\n    # Allocate arrays for class priors, means, variances\n    priors = np.zeros(C, dtype=float)\n    means = np.zeros((C, M), dtype=float)\n    variances = np.zeros((C, M), dtype=float)\n\n    # Estimate priors, means, variances per class\n    for idx, c in enumerate(classes):\n        X_c = X_train[y_train == c]\n        N_c = X_c.shape[0]\n        priors[idx] = N_c / N_train\n        means[idx, :] = X_c.mean(axis=0)\n        # Use unbiased estimate = mean of squared deviations\n        variances[idx, :] = X_c.var(axis=0) + eps\n\n    # Precompute constants\n    log_priors = np.log(priors)           # shape (C,)\n    # We'll build an array log_probs of shape (N_test, C)\n    N_test = X_test.shape[0]\n    log_probs = np.zeros((N_test, C), dtype=float)\n\n    # For each class, compute the log-posterior up to an additive constant\n    # log P(y=c) + sum_j log Normal(x_j | mu_cj, var_cj)\n    # where log Normal = -0.5 [ log(2\u03c0 var) + (x - mu)^2 / var ]\n    for idx in range(C):\n        mu = means[idx]                    # shape (M,)\n        var = variances[idx]               # shape (M,)\n        # Compute the quadratic term for all test points\n        # (X_test - mu)^2 / var sums to shape (N_test,)\n        sq_term = ((X_test - mu) ** 2) / var\n        sum_sq = sq_term.sum(axis=1)       # shape (N_test,)\n\n        # Sum of log(2\u03c0 var) over features\n        log_det = np.log(2 * np.pi * var).sum()\n\n        # Combine pieces: for each test example i,\n        # log_prob[i, idx] = log_priors[idx]\n        #                   - 0.5 * ( log_det + sum_sq[i] )\n        log_probs[:, idx] = log_priors[idx] - 0.5 * (log_det + sum_sq)\n\n    # Pick the class with the highest log-probability for each test point\n    class_indices = np.argmax(log_probs, axis=1)  # shape (N_test,)\n    y_pred = classes[class_indices]               # map back to original labels\n\n    return y_pred\n```\n\nExplanation of key steps:\n1. **Priors** are estimated as the fraction of training samples in each class.  \n2. **Means** and **variances** of each feature are computed per class; we add `eps` to variances to prevent division by zero.  \n3. For each test sample and each class, we compute the unnormalized log\u2010posterior  \n   `log P(y=c) + \u03a3_j log N(x_j|\u03bc_cj, \u03c3\u00b2_cj)`  \n   by vectorizing the Gaussian log\u2010likelihood over features.  \n4. The predicted class is the one with the highest log\u2010posterior for each test example."}
{"task_id": 405, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport re\n\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    # Convert input to numpy array of floats\n    x_arr = np.asarray(x, dtype=float)\n\n    # Pre-compile regexes for 'leaky relu' and 'affine'\n    float_re = r\"[-+]?(?:\\d*\\.\\d+|\\d+)(?:[eE][-+]?\\d+)?\"\n    leaky_re = re.compile(\n        rf\"leaky\\s*relu(?:\\s*\\(\\s*alpha\\s*=\\s*(?P<alpha>{float_re})\\s*\\))?\",\n        re.IGNORECASE\n    )\n    affine_re = re.compile(\n        rf\"affine\\s*\\(\\s*slope\\s*=\\s*(?P<slope>{float_re})\\s*,\\s*intercept\\s*=\\s*(?P<intercept>{float_re})\\s*\\)\",\n        re.IGNORECASE\n    )\n\n    # Determine which activation to apply\n    if param is None or (isinstance(param, str) and param.strip().lower() == \"identity\"):\n        result = x_arr\n\n    elif isinstance(param, str):\n        p = param.strip()\n        lower = p.lower()\n\n        if lower == \"relu\":\n            result = np.maximum(0, x_arr)\n\n        elif lower == \"tanh\":\n            result = np.tanh(x_arr)\n\n        elif lower == \"sigmoid\":\n            result = 1.0 / (1.0 + np.exp(-x_arr))\n\n        else:\n            # try leaky relu\n            m_leaky = leaky_re.fullmatch(p)\n            if m_leaky:\n                alpha_str = m_leaky.group(\"alpha\")\n                alpha = float(alpha_str) if alpha_str is not None else 0.01\n                result = np.where(x_arr > 0, x_arr, alpha * x_arr)\n            else:\n                # try affine\n                m_aff = affine_re.fullmatch(p)\n                if m_aff:\n                    slope = float(m_aff.group(\"slope\"))\n                    intercept = float(m_aff.group(\"intercept\"))\n                    result = slope * x_arr + intercept\n                else:\n                    raise ValueError(f\"Unknown activation: {param}\")\n    else:\n        raise ValueError(f\"Unknown activation: {param}\")\n\n    # Round to 6 decimal places\n    result = np.round(result, 6)\n\n    # Convert to Python list (if 0-d, wrap it in a list to guarantee list output)\n    if result.ndim == 0:\n        return [float(result.item())]\n    else:\n        return result.tolist()\n```\n\nExplanation of key points:\n\n1. **Input handling**  \n   We convert `x` to a NumPy array of type `float`, so that all the vectorized operations work, even if `x` was a Python list or a scalar.\n\n2. **Parsing `param`**  \n   - `None` or `\"identity\"` (case\u2013insensitive) \u2192 identity  \n   - Exact matches for `\"relu\"`, `\"tanh\"`, and `\"sigmoid\"` \u2192 the standard definitions.  \n   - A regex for `leaky relu(alpha=...)` with an optional `(alpha=...)` clause, defaulting to `alpha=0.01` when omitted.  \n   - A regex for `affine(slope=..., intercept=...)` collecting both numeric parameters.\n\n3. **Error handling**  \n   If `param` does not match any of the accepted forms, a `ValueError(\"Unknown activation: <param>\")` is raised.\n\n4. **Rounding and output**  \n   We round the result to 6 decimal places via `np.round` before converting to a Python list. For 0-dimensional results (i.e. scalar inputs), we wrap the single float in a one-element list to satisfy the requirement of returning a `list[float]`."}
{"task_id": 406, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train:np.ndarray y_train:np.ndarray X_test:np.ndarray k: int = 5) -> list[int]:\n   k-Nearest Neighbors classifier.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_train, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array with length n_train containing the class labels of the\n        training data. Labels have to be *non-negative* integers.\n    X_test : np.ndarray\n        2-D array with shape (n_test, n_features) containing the test samples\n        whose labels are to be predicted.\n    k : int, default=5\n        The number of nearest neighbours to use for the majority vote.\n\n    Returns\n    -------\n    list[int]\n        A Python list with one predicted label per test sample.\n       n_train = X_train.shape[0]\n    # We'll collect predictions here\n    predictions = []\n\n    # For each test sample\n    for x in X_test:\n        # 1. Compute squared Euclidean distances to all training samples\n        #    (squared is enough for ranking)\n        diffs = X_train - x  # shape (n_train, n_features)\n        dists_sq = np.sum(diffs * diffs, axis=1)  # shape (n_train,)\n\n        # 2. Find the indices of the k smallest distances\n        k_eff = min(k, n_train)\n        neigh_idx = np.argpartition(dists_sq, k_eff - 1)[:k_eff]\n        # Note: argpartition doesn't fully sort, but guarantees these are the k smallest\n\n        # 3. Retrieve the labels of these k neighbors\n        neigh_labels = y_train[neigh_idx]\n\n        # 4. Majority vote: bincount + argmax (ties -> smallest label)\n        counts = np.bincount(neigh_labels)\n        pred_label = int(np.argmax(counts))\n\n        # 5. Store the predicted label\n        predictions.append(pred_label)\n\n    return predictions\n```\n\nExplanation of key steps:\n\n1. **Distance computation**  \n   We subtract the test sample `x` from every row in `X_train` and sum the squared differences. Squared distances are sufficient for nearest\u2010neighbor ranking.\n\n2. **Selecting the k nearest**  \n   `np.argpartition(dists_sq, k_eff - 1)[:k_eff]` finds the indices of the `k_eff` smallest distances without fully sorting the entire array (more efficient).\n\n3. **Voting**  \n   - We gather the labels of those `k_eff` neighbors.  \n   - `np.bincount` creates a count of each integer label (labels must be non\u2010negative).  \n   - `np.argmax` picks the label with the highest count; in case of a tie it returns the smallest label index.  \n\n4. **Return value**  \n   We accumulate the predicted integer labels in a plain Python list, as required."}
{"task_id": 410, "completion_id": 0, "completion": "```python\nimport re\n\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    # strip leading/trailing whitespace to normalize\n    s = act_str.strip()\n\n    # 1) Simple activations without parameters\n    if s == \"ReLU\":\n        return {\"type\": \"ReLU\"}\n    if s == \"Sigmoid\":\n        return {\"type\": \"Sigmoid\"}\n    if s == \"Tanh\":\n        return {\"type\": \"Tanh\"}\n\n    # Numeric literal regex: integer or float, with optional sign.\n    num = r\"[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)\"\n\n    # 2) Affine(slope=<number>, intercept=<number>)\n    affine_pattern = rf\"\"\"^Affine\n                          \\s*\\(\n                            \\s*slope\\s*=\\s*(?P<slope>{num})\n                            \\s*,\\s*\n                            intercept\\s*=\\s*(?P<intercept>{num})\n                          \\s*\\)\n                          $\"\"\"\n    m = re.fullmatch(affine_pattern, s, re.VERBOSE)\n    if m:\n        try:\n            slope_val = float(m.group(\"slope\"))\n            intercept_val = float(m.group(\"intercept\"))\n        except ValueError:\n            return -1\n        return {\n            \"type\": \"Affine\",\n            \"slope\": slope_val,\n            \"intercept\": intercept_val\n        }\n\n    # 3) Leaky ReLU(alpha=<number>)\n    leaky_pattern = rf\"\"\"^Leaky\\ ReLU\n                          \\s*\\(\n                            \\s*alpha\\s*=\\s*(?P<alpha>{num})\n                          \\s*\\)\n                          $\"\"\"\n    m = re.fullmatch(leaky_pattern, s, re.VERBOSE)\n    if m:\n        try:\n            alpha_val = float(m.group(\"alpha\"))\n        except ValueError:\n            return -1\n        return {\n            \"type\": \"Leaky ReLU\",\n            \"alpha\": alpha_val\n        }\n\n    # If none matched, return -1\n    return -1\n\n\n# --- Example usage and quick tests ---\nif __name__ == \"__main__\":\n    tests = [\n        \"ReLU\",\n        \"Sigmoid\",\n        \"Tanh\",\n        \"Affine(slope=2, intercept=-0.5)\",\n        \"Affine( slope = -3.14 , intercept = .75 )\",\n        \"Leaky ReLU(alpha=0.01)\",\n        \"Leaky ReLU( alpha = -0.2 )\",\n        \"Unknown\",\n        \"Affine(slope=2 intercept=3)\",  # missing comma\n        \"Leaky ReLU(a=1)\"               # wrong param name\n    ]\n\n    for t in tests:\n        print(f\"{t!r} -> {parse_activation(t)}\")\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numbers\n\ndef env_stats(actions: list, observations: list) -> dict:\n   Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n       def _compute(data):\n        stats = {}\n\n        # 1) Detect if any element is an iterable of scalars (tuple/list/ndarray)\n        tuple_flag = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        stats['tuple'] = tuple_flag\n\n        # 2) Determine dimension: if iterable take its length, else 1\n        if tuple_flag:\n            # find first iterable element\n            for x in data:\n                if isinstance(x, (list, tuple, np.ndarray)):\n                    dim = len(x)\n                    break\n        else:\n            dim = 1\n        stats['dim'] = dim\n        stats['multidim'] = (dim > 1)\n\n        # 3) Build a 2D list of shape (N, dim) with native Python scalars\n        rows = []\n        for x in data:\n            if dim == 1:\n                elems = [x]\n            else:\n                elems = list(x)\n            # convert numpy scalars to native Python types\n            clean = []\n            for v in elems:\n                if isinstance(v, np.generic):\n                    clean.append(v.item())\n                else:\n                    clean.append(v)\n            rows.append(clean)\n\n        # 4) Detect if any value is a non-integer float => continuous\n        cont = False\n        for row in rows:\n            for v in row:\n                # check python floats\n                if isinstance(v, float):\n                    if not v.is_integer():\n                        cont = True\n                        break\n                # check numpy floats\n                elif isinstance(v, np.floating):\n                    if not float(v).is_integer():\n                        cont = True\n                        break\n            if cont:\n                break\n        stats['continuous'] = cont\n\n        # 5) For each dimension, collect unique sorted values\n        ids = []\n        n_per_dim = []\n        for d in range(dim):\n            col = [row[d] for row in rows]\n            unique = set(col)\n            # sort numerically\n            sorted_u = sorted(unique, key=lambda x: (isinstance(x, str), x))\n            ids.append(sorted_u)\n            n_per_dim.append(len(sorted_u))\n\n        stats['ids'] = ids\n        stats['n_per_dim'] = n_per_dim\n\n        return stats\n\n    # compute stats for actions and observations\n    a_stats = _compute(actions)\n    o_stats = _compute(observations)\n\n    # assemble final dictionary with required key names\n    return {\n        'tuple_actions':           a_stats['tuple'],\n        'tuple_observations':      o_stats['tuple'],\n        'multidim_actions':        a_stats['multidim'],\n        'multidim_observations':   o_stats['multidim'],\n        'continuous_actions':      a_stats['continuous'],\n        'continuous_observations': o_stats['continuous'],\n        'n_actions_per_dim':       a_stats['n_per_dim'],\n        'action_dim':              a_stats['dim'],\n        'n_obs_per_dim':           o_stats['n_per_dim'],\n        'obs_dim':                 o_stats['dim'],\n        'action_ids':              a_stats['ids'],\n        'obs_ids':                 o_stats['ids'],\n    }\n```\n\nExplanation of key steps:\n\n1. We define an inner helper `_compute` that gathers stats for one list (`actions` or `observations`).\n2. `tuple_flag` checks if any element is a list/tuple/ndarray.\n3. The dimensionality `dim` is the length of those iterables (or 1 if all scalars).\n4. We normalize every element into a length\u2010`dim` Python list, converting any NumPy scalar to a native Python type.\n5. We scan all values to see if there is any *non\u2010integer* float (`float` or `np.floating`) to flag `continuous`.\n6. For each dimension index `d`, we collect all values, deduplicate them with a `set`, sort them numerically, and record both the sorted unique values (`ids`) and their count (`n_per_dim`).\n7. Finally we map these generic stats into the exact key names requested by the problem statement."}
{"task_id": 412, "completion_id": 0, "completion": "```python\ndef get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n    def accuracy(y_true, y_pred):\n        total = len(y_true)\n        if total == 0:\n            return 0.0\n        correct = 0\n        for t, p in zip(y_true, y_pred):\n            if t == p:\n                correct += 1\n        return round(correct / total, 4)\n\n    def precision(y_true, y_pred):\n        tp = 0\n        fp = 0\n        for t, p in zip(y_true, y_pred):\n            if p == 1:\n                if t == 1:\n                    tp += 1\n                else:\n                    fp += 1\n        denom = tp + fp\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def recall(y_true, y_pred):\n        tp = 0\n        fn = 0\n        for t, p in zip(y_true, y_pred):\n            if t == 1:\n                if p == 1:\n                    tp += 1\n                else:\n                    fn += 1\n        denom = tp + fn\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def f1(y_true, y_pred):\n        # compute raw precision and recall\n        tp = fp = fn = 0\n        for t, p in zip(y_true, y_pred):\n            if p == 1:\n                if t == 1:\n                    tp += 1\n                else:\n                    fp += 1\n            if t == 1 and p == 0:\n                fn += 1\n        p_denom = tp + fp\n        r_denom = tp + fn\n        if p_denom == 0 or r_denom == 0:\n            return 0.0\n        p_val = tp / p_denom\n        r_val = tp / r_denom\n        if p_val == 0 and r_val == 0:\n            return 0.0\n        f1_score = 2 * p_val * r_val / (p_val + r_val)\n        return round(f1_score, 4)\n\n    metrics = {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1\n    }\n\n    return metrics.get(name, -1)\n```\n\nExplanation:\n1. `get_metric` defines four inner functions: `accuracy`, `precision`, `recall`, and `f1`.\n2. Each metric loops over `y_true` and `y_pred`, counts TP, FP, FN, and TN as needed.\n3. Denominators of zero are checked, returning `0.0` when required.\n4. All results are rounded to 4 decimal places with `round(..., 4)`.\n5. A dictionary maps valid names to their functions; invalid names yield `-1`."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass TreeNode:\n       A node in a regression tree.\n       def __init__(self, feature_index=None, threshold=None, left=None, right=None, *, value=None):\n        # for internal nodes\n        self.feature_index = feature_index\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        # for leaf nodes\n        self.value = value\n\n    def predict(self, X):\n               Predict target for each row in X by traversing the tree.\n               # If leaf node, return constant value\n        if self.value is not None:\n            return np.full(X.shape[0], self.value)\n        \n        # Otherwise, split and recurse\n        fidx = self.feature_index\n        thr = self.threshold\n        left_mask = X[:, fidx] <= thr\n        right_mask = ~left_mask\n        \n        y_pred = np.empty(X.shape[0], dtype=float)\n        # left subtree predictions\n        if np.any(left_mask):\n            y_pred[left_mask] = self.left.predict(X[left_mask])\n        # right subtree predictions\n        if np.any(right_mask):\n            y_pred[right_mask] = self.right.predict(X[right_mask])\n        return y_pred\n\ndef build_tree(X, y, depth, max_depth):\n       Recursively build a CART regression tree to fit y from X.\n    Splitting criterion: minimize sum of squared errors (SSE).\n       n_samples, n_features = X.shape\n    \n    # Compute current SSE\n    y_mean = y.mean()\n    sse_parent = np.sum((y - y_mean) ** 2)\n    \n    # Stop conditions\n    # 1) all y are identical -> no further split possible\n    # 2) reached maximum depth\n    if depth >= max_depth or np.all(y == y[0]):\n        return TreeNode(value=y_mean)\n    \n    best_sse = np.inf\n    best_feature = None\n    best_threshold = None\n    \n    # Try splitting on every feature\n    for feature in range(n_features):\n        X_f = X[:, feature]\n        # unique sorted values\n        unique_vals = np.unique(X_f)\n        if unique_vals.shape[0] < 2:\n            continue  # cannot split on constant feature\n        \n        # candidate thresholds: midpoints\n        thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2.0\n        \n        for thr in thresholds:\n            left_mask = X_f <= thr\n            right_mask = ~left_mask\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            \n            # SSE for children\n            left_mean = y_left.mean()\n            right_mean = y_right.mean()\n            sse_left = np.sum((y_left - left_mean) ** 2)\n            sse_right = np.sum((y_right - right_mean) ** 2)\n            sse_total = sse_left + sse_right\n            \n            # Keep the split if it reduces SSE\n            if sse_total < best_sse:\n                best_sse = sse_total\n                best_feature = feature\n                best_threshold = thr\n    \n    # If no split improved SSE, make leaf\n    if best_feature is None or best_sse >= sse_parent:\n        return TreeNode(value=y_mean)\n    \n    # Otherwise, create internal node and recurse\n    left_mask = X[:, best_feature] <= best_threshold\n    right_mask = ~left_mask\n    left_subtree = build_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n    right_subtree = build_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n    \n    return TreeNode(\n        feature_index=best_feature,\n        threshold=best_threshold,\n        left=left_subtree,\n        right=right_subtree\n    )\n\ndef gbdt_regression(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    X_test: np.ndarray,\n                    n_estimators: int = 10,\n                    learning_rate: float = 0.1,\n                    max_depth: int = 3) -> list[float]:\n   Gradient Boosting Decision Tree (GBDT) regressor    \n    # Initial prediction: mean of y_train\n    init_pred = np.mean(y_train)\n    # Running predictions on training set\n    F_train = np.full(y_train.shape, init_pred, dtype=float)\n    \n    # Store the sequence of fitted trees\n    trees = []\n    \n    for _ in range(n_estimators):\n        # Compute negative gradient (residuals)\n        residuals = y_train - F_train\n        \n        # Fit a regression tree to the residuals\n        tree = build_tree(X_train, residuals, depth=0, max_depth=max_depth)\n        trees.append(tree)\n        \n        # Update the running predictions\n        update = tree.predict(X_train)\n        F_train += learning_rate * update\n    \n    # Predict on test set\n    F_test = np.full(X_test.shape[0], init_pred, dtype=float)\n    for tree in trees:\n        F_test += learning_rate * tree.predict(X_test)\n    \n    # Round to 4 decimal places and convert to Python list\n    F_test = np.round(F_test, 4).tolist()\n    return F_test\n```\n\nExplanation of key parts:\n1. **TreeNode class**: holds either a leaf value or a split (feature index, threshold) plus left/right children.\n2. **build_tree**: recursively finds the best split by minimizing sum of squared errors (SSE).  \n   - Stops when depth reaches `max_depth` or no split reduces error.\n   - Leaves store the mean target of their node.\n3. **GBDT loop**:\n   - Start with constant prediction = mean of `y_train`.\n   - For each iteration, compute residuals (`y_train - current_pred`), fit a tree to those residuals, and update predictions with `learning_rate * tree_predict`.\n   - At the end, apply the same additive model to `X_test`.\n4. Outputs are rounded to 4 decimal places and returned as a standard Python list."}
{"task_id": 414, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_scheduler(step: int,\n                          initial_lr: float = 0.01,\n                          stage_length: int = 500,\n                          staircase: bool = False,\n                          decay: float = 0.1) -> float:\n   Return the exponentially decayed learning-rate for a given optimisation step.\n\n    The learning-rate is computed as::\n\n        lr = initial_lr * decay ** curr_stage\n\n    where ``curr_stage`` is either the real-valued ratio *step / stage_length*\n    (smooth schedule) or its floor value (stair-case schedule).\n\n    Args:\n        step:          Current optimisation step (must be non-negative).\n        initial_lr:    Learning-rate at step 0.\n        stage_length:  Number of steps that constitute one decay stage.\n        staircase:     If ``True`` a step-wise decay is used.\n        decay:         Multiplicative decay factor (> 0).\n\n    Returns:\n        The learning rate for the given ``step`` rounded to six decimal\n        places, or ``-1`` if an invalid argument is supplied.\n       # Validate inputs\n    if not isinstance(step, int) or step < 0:\n        return -1\n    if not isinstance(stage_length, int) or stage_length <= 0:\n        return -1\n    if decay <= 0:\n        return -1\n\n    # Determine current stage\n    if staircase:\n        curr_stage = step // stage_length\n    else:\n        curr_stage = step / stage_length\n\n    # Compute decayed learning rate\n    lr = initial_lr * np.power(decay, curr_stage)\n\n    # Round to 6 decimal places\n    return round(lr, 6)\n```\n\nExplanation of key points:\n\n1. **Input validation**:  \n   - `step` must be a non-negative integer.  \n   - `stage_length` must be a strictly positive integer.  \n   - `decay` must be strictly positive.  \n   If any of these checks fail, the function immediately returns `-1`.\n\n2. **Stage computation**:  \n   - When `staircase=False`, we use a smooth decay: `curr_stage = step / stage_length`.  \n   - When `staircase=True`, we use a step-wise (staircase) decay: `curr_stage = floor(step / stage_length)` implemented via integer division.\n\n3. **Decay application**:  \n   We compute `lr = initial_lr * decay**curr_stage` using `numpy.power` to allow real-valued exponents in the smooth case.\n\n4. **Rounding**:  \n   The resulting learning rate is rounded to six decimal places with Python\u2019s built-in `round` before returning."}
{"task_id": 415, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Un\u2010normalised 1-D DCT-II.\n    \n    For an input signal x of length N, computes\n        X[k] = sum_{n=0..N-1} x[n] * cos(pi/N * (n + 0.5) * k)\n    for k = 0..N-1, then rounds each coefficient to 4 decimal places.\n    \n    Args:\n        frame: list of real numbers (ints or floats)\n    Returns:\n        list of DCT-II coefficients (floats), same length as frame.\n        Empty input returns an empty list.\n    \"\"\"\n    # Handle empty input\n    N = len(frame)\n    if N == 0:\n        return []\n    \n    # Convert input to a NumPy array of floats\n    x = np.asarray(frame, dtype=float)\n    \n    # Create index arrays\n    n = np.arange(N)           # shape (N,)\n    k = np.arange(N)           # shape (N,)\n    \n    # Compute the cosine argument matrix: shape (N, N)\n    # angles[n, k] = pi/N * (n + 0.5) * k\n    angles = (np.pi / N) * (n[:, None] + 0.5) * k[None, :]\n    \n    # Compute the DCT-II: sum over n for each k\n    X = np.dot(x, np.cos(angles))  # shape (N,)\n    \n    # Round each coefficient to 4 decimal places and convert to list\n    X_rounded = np.round(X, 4)\n    return X_rounded.tolist()\n```\n\nExplanation of the main steps:\n\n1. **Empty check**: If the input list is empty, immediately return an empty list.\n2. **Array conversion**: Turn the Python list into a NumPy array of floats for vectorized operations.\n3. **Index grids**: Build 1-D arrays `n` and `k` of length N, then broadcast them into an N\u00d7N matrix of angles.\n4. **Cosine transform**: Compute `cos(angles)` (shape N\u00d7N), multiply by the signal values `x` and sum over `n` using `np.dot`.\n5. **Rounding**: Use `np.round(..., 4)` to round each coefficient to 4 decimal places, then output as a plain Python list."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n       Compute the multivariate Gaussian (normal) PDF for each sample in X.\n    \n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features) or (n_samples,)\n        Data points at which to evaluate the PDF. If one-dimensional,\n        it will be treated as (n_samples, 1).\n    mean : array-like, shape (n_features,)\n        Mean vector of the Gaussian distribution.\n    cov : array-like, shape (n_features, n_features)\n        Covariance matrix (must be positive-definite).\n    \n    Returns\n    -------\n    pdf_values : list of float\n        List of PDF values for each row in X, rounded to 4 decimal places.\n       # Convert inputs to numpy arrays\n    X = np.asarray(X, dtype=float)\n    mean = np.asarray(mean, dtype=float)\n    cov = np.asarray(cov, dtype=float)\n\n    # Ensure X is two-dimensional: (n_samples, n_features)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n\n    # Ensure mean is one-dimensional of length n_features\n    mean = mean.flatten()\n    if mean.size != n_features:\n        raise ValueErrorMean vector length must match number of features    # Compute determinant and inverse of covariance matrix\n    det_cov = np.linalg.det(cov)\n    if det_cov <= 0:\n        raise ValueErrorCovariance matrix must be positive-definite    inv_cov = np.linalg.inv(cov)\n\n    # Normalization constant\n    denom = math.sqrt((2 * math.pi) ** n_features * det_cov)\n\n    pdf_list = []\n    for i in range(n_samples):\n        x = X[i]\n        diff = x - mean\n        # exponent term: -0.5 * diff^T * inv_cov * diff\n        exponent = -0.5 * float(diff.T.dot(inv_cov).dot(diff))\n        pdf_val = (1.0 / denom) * math.exp(exponent)\n        # round to 4 decimal places\n        pdf_list.append(round(pdf_val, 4))\n\n    return pdf_list\n```\n\nExplanation of key steps:\n1. We convert all inputs to NumPy arrays and ensure `X` has shape `(n_samples, n_features)`.  \n2. We flatten the mean and check its length matches `n_features`.  \n3. We compute the determinant and inverse of the covariance matrix. A non\u2013positive determinant indicates a non\u2013invertible or non\u2013positive\u2013definite matrix, which we guard against.  \n4. The normalization constant is \\(\\sqrt{(2\\pi)^d \\det(\\Sigma)}\\).  \n5. For each sample, we compute the quadratic form \\((x-\\mu)^\\top \\Sigma^{-1}(x-\\mu)\\) and then the PDF value.  \n6. Finally, each PDF value is rounded to 4 decimal places and returned in a Python list."}
{"task_id": 417, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int = 1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    # ensure float array\n    X = np.asarray(data, dtype=float)\n    n_samples, n_features = X.shape\n\n    # 1) center the data\n    mean_vec = X.mean(axis=0)\n    X_centered = X - mean_vec\n\n    # 2) unbiased covariance matrix\n    cov = (X_centered.T @ X_centered) / (n_samples - 1)\n\n    # 3) eigen-decomposition (cov is symmetric)\n    eig_vals, eig_vecs = np.linalg.eigh(cov)\n\n    # 4) sort eigenvectors by descending eigenvalue\n    order = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, order]\n\n    # if k exceeds feature count, just keep all\n    k_eff = min(k, n_features)\n    components = eig_vecs[:, :k_eff]  # shape: (n_features, k_eff)\n\n    # 5) enforce deterministic orientation\n    tol = 1e-8\n    for j in range(k_eff):\n        v = components[:, j]\n        nonzeros = np.where(np.abs(v) > tol)[0]\n        if nonzeros.size > 0:\n            first = nonzeros[0]\n            if v[first] < 0:\n                components[:, j] = -v\n\n    # 6) project centered data to low-dimensional space\n    projected = X_centered @ components  # shape: (n_samples, k_eff)\n\n    # 7) reconstruct back to original space\n    reconstructed = projected @ components.T + mean_vec  # shape: (n_samples, n_features)\n\n    # 8) round to 4 decimal places\n    projected_rounded = np.round(projected, 4)\n    reconstructed_rounded = np.round(reconstructed, 4)\n\n    # 9) convert to Python lists and return\n    return projected_rounded.tolist(), reconstructed_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Centering**: subtract the column\u2010wise mean so each feature has zero mean.  \n2. **Covariance**: \\(C = \\frac{1}{n-1} X_{\\rm centered}^T X_{\\rm centered}\\).  \n3. **Eigen\u2010decomposition**: use `np.linalg.eigh` since the covariance is symmetric.  \n4. **Sorting**: reorder eigenvectors in descending order of eigenvalues.  \n5. **Deterministic sign**: for each retained eigenvector, flip it so its first non\u2010zero entry is positive.  \n6. **Projection**: low\u2010dimensional representation \\(Y = X_{\\rm centered}\\,W\\).  \n7. **Reconstruction**: \\(\\hat X = Y\\,W^T + \\mu\\).  \n8. **Rounding**: round both \\(Y\\) and \\(\\hat X\\) to 4 decimal places, then convert to lists."}
{"task_id": 418, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_covariance_matrix(\n    X: np.ndarray | list[list[int | float]]\n) -> list[list[float]]:\n   Compute and return the sample covariance matrix of *X*.\n\n    Args:\n        X: A 2-D NumPy array or a nested Python list in which rows correspond to\n           samples and columns correspond to features.\n\n    Returns:\n        The covariance matrix as a nested Python list, rounded to 4 decimal\n        places.\n       # 1. Convert list input to numpy array of floats\n    if isinstance(X, list):\n        X = np.array(X, dtype=float)\n    else:\n        X = X.astype(float)\n\n    # Ensure 2D\n    if X.ndim != 2:\n        raise ValueErrorInput data must be a 2-D array or nested list    n_samples, n_features = X.shape\n\n    # 2. If fewer than 2 samples, return zero-matrix\n    if n_samples < 2:\n        return np.zeros((n_features, n_features), dtype=float).tolist()\n\n    # 3. Center the data (subtract column means)\n    means = X.mean(axis=0)\n    X_centered = X - means\n\n    # 4. Compute sample covariance: (X\u1d40X)/(n - 1)\n    cov_matrix = (X_centered.T @ X_centered) / (n_samples - 1)\n\n    # 5. Round to 4 decimal places and convert to nested list\n    cov_matrix = np.round(cov_matrix, 4)\n    return cov_matrix.tolist()\n```\n\nExplanation of key steps:\n\n1. **Conversion**: If `X` comes in as a Python list, it\u2019s converted into a NumPy array of floats.  \n2. **Dimensionality check**: We verify it\u2019s 2-D.  \n3. **Sample size guard**: If `n_samples < 2`, by definition the covariance is undefined, so we return a zero matrix of shape `(n_features, n_features)`.  \n4. **Centering**: Subtract the feature means along each column.  \n5. **Covariance calculation**: Use the standard unbiased estimator, dividing by `n_samples - 1`.  \n6. **Rounding and output**: Round every element to 4 decimals and return as a nested Python list."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,           # ignored, since it cancels in the MAP\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    Returns the MAP predictive mean for each row in X_new, rounded to 4 decimals.\n    \"\"\"\n    # 1) Optionally add an intercept column to X and X_new\n    if fit_intercept:\n        ones_train = np.ones((X.shape[0], 1))\n        X = np.hstack((ones_train, X))\n        ones_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack((ones_new, X_new))\n\n    # Number of parameters\n    M = X.shape[1]\n\n    # 2) Build prior precision V^{-1}\n    if V is None:\n        # V = I  ==>  V^{-1} = I\n        V_inv = np.eye(M)\n    else:\n        # V is given\n        if np.isscalar(V):\n            # V = v * I  ==>  V^{-1} = (1/v) * I\n            V_inv = np.eye(M) / V\n        else:\n            V_arr = np.array(V)\n            if V_arr.ndim == 1:\n                # diagonal prior variances\n                if V_arr.shape[0] != M:\n                    raise ValueError(f\"Length of V ({V_arr.shape[0]}) != number of features ({M})\")\n                V_inv = np.diag(1.0 / V_arr)\n            elif V_arr.ndim == 2:\n                # full matrix\n                if V_arr.shape != (M, M):\n                    raise ValueError(f\"Shape of V {V_arr.shape} != ({M},{M})\")\n                V_inv = np.linalg.inv(V_arr)\n            else:\n                raise ValueError(\"V must be scalar, 1D array or 2D square matrix\")\n\n    # 2b) Build prior mean vector\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu, dtype=float)\n    else:\n        mu_arr = np.array(mu, dtype=float)\n        if mu_arr.ndim != 1 or mu_arr.shape[0] != M:\n            raise ValueError(f\"mu must be scalar or length-{M} vector\")\n        mu_vec = mu_arr\n\n    # 3) Compute posterior covariance \u03a3_p and mean \u03bc_p (MAP)\n    # \u03a3_p = (V^{-1} + X^T X)^(-1)\n    A = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(A)\n\n    # \u03bc_p = \u03a3_p (V^{-1} \u03bc + X^T y)\n    b = V_inv @ mu_vec + X.T @ y\n    mu_p = Sigma_p @ b\n\n    # 4) Predictive mean for X_new\n    y_pred = X_new @ mu_p\n\n    # Round to 4 decimals and return as Python list\n    return [round(float(val), 4) for val in y_pred]\n```\n\nExplanation of key steps:\n1. If `fit_intercept=True`, a column of ones is prepended to both `X` and `X_new`.\n2. The prior precision matrix `V\u207b\u00b9` is constructed from `V`, which may be a scalar, a 1D array (diagonal), or a full matrix. If `V` is `None`, it defaults to the identity.\n3. The posterior covariance and mean are computed via the standard conjugate\u2010Gaussian update:\n   - \u03a3\u209a = (V\u207b\u00b9 + X\u1d40X)\u207b\u00b9  \n   - \u03bc\u209a = \u03a3\u209a( V\u207b\u00b9 \u03bc + X\u1d40y )\n4. The MAP predictive mean for each row of `X_new` is `X_new @ \u03bc\u209a`, rounded to four decimal places."}
{"task_id": 420, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n\n    If `column` is out of bounds, returns two empty lists.\n    \"\"\"\n    # Check if column index is valid\n    if column < 0 or column >= X.shape[1]:\n        return [], []\n\n    # Compute boolean arrays for the split\n    left_bool = X[:, column] < value\n    right_bool = X[:, column] >= value\n\n    # Convert to plain Python lists and return\n    return left_bool.tolist(), right_bool.tolist()\n```\n\nExplanation of key points:\n- We first guard against an invalid column index by returning two empty lists.\n- We use NumPy vectorized comparisons (`<` and `>=`) to generate boolean arrays without modifying `X`.\n- Finally, we convert those NumPy boolean arrays to Python lists via the `.tolist()` method."}
{"task_id": 421, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function assigns a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points are labelled **-1**, while\n        clusters are numbered 1, 2, 3, \u2026 in the order they are first discovered.\n    \"\"\"\n    n_samples = data.shape[0]\n    # 0 = unassigned, -1 = noise, >0 = cluster labels\n    labels = np.zeros(n_samples, dtype=int)\n    visited = np.zeros(n_samples, dtype=bool)\n\n    # Precompute neighbourhoods: for each point, list all indices within eps\n    neighbors_list = []\n    for i in range(n_samples):\n        # Euclidean distances from point i to all points\n        dists = np.linalg.norm(data - data[i], axis=1)\n        neighbors = np.where(dists <= eps)[0].tolist()\n        neighbors_list.append(neighbors)\n\n    cluster_id = 0\n\n    for i in range(n_samples):\n        # Skip if already processed in expansion\n        if visited[i]:\n            continue\n\n        visited[i] = True\n        neighs = neighbors_list[i]\n\n        # If i is not a core point, mark as noise (might get reassigned later)\n        if len(neighs) < min_samples:\n            labels[i] = -1\n            continue\n\n        # Otherwise start a new cluster\n        cluster_id += 1\n        labels[i] = cluster_id\n\n        # Seed set for expansion (a list that we'll grow)\n        # We include all neighbours (including i itself); duplicates won't hurt\n        # since `visited` guards infinite loops\n        seed_set = neighs[:]  \n        idx = 0\n        while idx < len(seed_set):\n            j = seed_set[idx]\n            # If this neighbor has not yet been visited, we may expand it\n            if not visited[j]:\n                visited[j] = True\n                neighs_j = neighbors_list[j]\n                # If j is also a core point, its neighbours join the seed set\n                if len(neighs_j) >= min_samples:\n                    seed_set.extend(neighs_j)\n            # Assign to cluster if unassigned or previously marked noise\n            if labels[j] <= 0:\n                labels[j] = cluster_id\n            idx += 1\n\n    return labels.tolist()\n```\n\nExplanation of key steps:\n\n1. **Initialization**  \n   - `labels`: zeros for unvisited points, `-1` for noise, positive integers for cluster IDs.  \n   - `visited`: tracks if a point has already been processed.\n\n2. **Neighborhood Precomputation**  \n   We compute once for each point `i` the list of all other points whose distance to `i` is `<= eps`. This makes our region queries O(1) lookup later.\n\n3. **Main Loop**  \n   We scan points in index order. If a point `i` is unvisited, we mark it visited and fetch its neighborhood:\n   - If it has fewer than `min_samples` neighbours, label it noise (`-1`).\n   - Otherwise, we have found a new cluster. We increment `cluster_id` and start to \u201cexpand\u201d the cluster by iteratively visiting all points density\u2010reachable from `i`.\n\n4. **Cluster Expansion**  \n   We maintain a dynamic list `seed_set` of points to process. For each point `j` in `seed_set`:\n   - If not yet visited, we mark it visited and, if it is a core point itself, append its neighbours to `seed_set`.\n   - Regardless of visited status, if `j` is not yet assigned to any cluster (or was labelled noise), we assign it the current `cluster_id`. This ensures border points (which might have been tentatively marked noise earlier) get pulled into the cluster.\n\n5. **Return**  \n   Finally, we convert the NumPy array of labels to a Python list and return it.\n\nThis implementation runs in O(n\u00b2) time in the worst case (due to distance computations), and uses only NumPy for its numerical routines."}
{"task_id": 422, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x: \"np.ndarray | list | tuple | float | int\", order: int = 0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    x_arr = np.array(x, dtype=float)\n\n    if order == 0:\n        # SoftPlus(x) = ln(1 + e^x), using log1p for better numerical stability\n        result = np.log1p(np.exp(x_arr))\n    elif order == 1:\n        # SoftPlus'(x) = e^x / (1 + e^x) = sigmoid(x)\n        # using 1 / (1 + exp(-x)) for numerical stability\n        result = 1 / (1 + np.exp(-x_arr))\n    elif order == 2:\n        # SoftPlus''(x) = e^x / (1 + e^x)^2 = sigmoid(x) * (1 - sigmoid(x))\n        s = 1 / (1 + np.exp(-x_arr))\n        result = s * (1 - s)\n    else:\n        # invalid order\n        return -1\n\n    # Round to 4 decimal places and convert to Python types\n    rounded = np.round(result, 4)\n    return rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Input conversion**: We cast the input `x` into a NumPy array of type `float` to handle scalars, lists, tuples, or already existing arrays uniformly.  \n2. **Order dispatch**:\n   - `order == 0`: SoftPlus via `np.log1p(np.exp(x))` for numerical stability.\n   - `order == 1`: First derivative is the logistic sigmoid, implemented as `1/(1 + exp(-x))`.\n   - `order == 2`: Second derivative is `sigmoid(x) * (1 - sigmoid(x))`.\n   - Otherwise, return `-1`.\n3. **Rounding & conversion**: We round every element to 4 decimal places with `np.round(..., 4)` and then call `.tolist()`, which yields either a Python float (for scalars) or a nested list (for arrays)."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    # 1. Check lengths\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n\n    # 2. Check that all entries are non\u2010negative numbers\n    for a, p in zip(actual, predicted):\n        if not (isinstance(a, (int, float)) and isinstance(p, (int, float))):\n            return -1\n        if a < 0 or p < 0:\n            return -1\n\n    # 3. Compute RMSLE\n    act_arr = np.array(actual, dtype=float)\n    pred_arr = np.array(predicted, dtype=float)\n\n    # log1p = log(1 + x)\n    log_diff = np.log1p(pred_arr) - np.log1p(act_arr)\n    msle = np.mean(log_diff ** 2)\n    rmsle = np.sqrt(msle)\n\n    # 4. Round to 4 decimal places\n    return round(rmsle, 4)\n```\n\nExplanation of steps:\n1. We first ensure both lists have the same non-zero length.\n2. We iterate through both lists simultaneously to confirm every element is an int/float and \u2265 0.\n3. We convert them to NumPy arrays (dtype=float), compute `log1p` of each, take their difference, square it, average over all entries, and finally take the square root.\n4. We round the final RMSLE to 4 decimal places as required."}
{"task_id": 424, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(y: list[int]) -> float:\n   Compute the Shannon entropy of a label sequence.\n\n    Args:\n        y: A non-empty list of non-negative integers representing class labels.\n\n    Returns:\n        The Shannon entropy of the sequence, rounded to 4 decimal places.\n       # Convert to numpy array for convenience\n    arr = np.array(y, dtype=int)\n\n    # Get unique labels and their counts\n    labels, counts = np.unique(arr, return_counts=True)\n\n    # Compute probabilities\n    probs = counts / counts.sum()\n\n    # Compute entropy\n    H = -np.sum(probs * np.log2(probs))\n\n    # Round to 4 decimals and return as float\n    return round(float(H), 4)\n```\n\nExplanation of the steps:\n1. Convert the input list to a NumPy array.\n2. Use `np.unique(..., return_counts=True)` to get each distinct label and its count.\n3. Normalize the counts to probabilities by dividing by the total number of samples.\n4. Compute the Shannon entropy with `-sum(p * log2(p))`.\n5. Round the result to 4 decimal places before returning."}
{"task_id": 425, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy (natural logarithm) of a one-dimensional\n    collection of non-negative integers.\n\n    Parameters\n    ----------\n    p : list[int] or np.ndarray\n        Input sequence of non-negative integers (symbols).\n\n    Returns\n    -------\n    float\n        Shannon entropy H = -sum(p_i * ln(p_i)), rounded to 4 decimal places.\n        If the sequence has only one unique value (or is empty), returns 0.0.\n    \"\"\"\n    # Convert input to a NumPy array\n    arr = np.asarray(p, dtype=int)\n    \n    # Empty input or all identical -> entropy is zero\n    if arr.size == 0:\n        return 0.0\n    \n    # Count occurrences of each symbol\n    _, counts = np.unique(arr, return_counts=True)\n    \n    # If there's only one unique symbol, entropy = 0.0\n    if counts.size <= 1:\n        return 0.0\n    \n    # Convert counts to probabilities\n    probs = counts / counts.sum()\n    \n    # Compute entropy: -sum(p * ln(p))\n    entropy = -np.sum(probs * np.log(probs))\n    \n    # Return rounded to 4 decimal places\n    return round(float(entropy), 4)\n```\n\nExplanation of key steps:\n1. We use `np.asarray` to handle both Python lists and NumPy arrays uniformly.\n2. `np.unique(..., return_counts=True)` gives the distinct symbols and their frequencies.\n3. If there's only one unique symbol (or the array is empty), entropy is defined to be 0.0.\n4. We compute probabilities by dividing the counts by their total.\n5. We compute `-\u03a3 p_i * ln(p_i)` using NumPy vectorized operations.\n6. Finally, we convert the result to a native Python float and round to 4 decimal places."}
{"task_id": 426, "completion_id": 0, "completion": "```python\ndef classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    # Check for invalid inputs\n    if not y_true or not y_pred or len(y_true) != len(y_pred):\n        return -1\n\n    # Count correct predictions\n    correct = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)\n\n    # Compute accuracy\n    accuracy = correct / len(y_true)\n\n    # Return rounded to 4 decimal places\n    return round(accuracy, 4)\n```\n\nExplanation of key steps:\n\u2022 We first verify that neither list is empty and that they share the same length. If not, we return -1.  \n\u2022 We use a generator expression with `zip` to count how many predictions match the ground truth.  \n\u2022 The raw accuracy is the count of correct predictions divided by the total number of examples.  \n\u2022 Finally, we round the result to 4 decimal places before returning."}
{"task_id": 427, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    # Convert input to a NumPy array\n    z_arr = np.array(z)\n    \n    # Identity activation is just the input\n    activation = z_arr\n    \n    # Derivative is an array of ones with the same shape\n    derivative = np.ones_like(z_arr)\n    \n    # Convert results back to Python lists and return\n    return activation.tolist(), derivative.tolist()\n```\n\nExplanation:\n1. We first wrap the input `z` into a NumPy array (`z_arr`) so that we can use vectorized operations.\n2. The identity activation is simply the input itself, so we assign `activation = z_arr`.\n3. The derivative of the identity function is 1 everywhere, so we create `derivative = np.ones_like(z_arr)` which yields an array of ones matching `z_arr`\u2019s shape.\n4. Finally, we convert both `activation` and `derivative` back into regular Python lists via `.tolist()` before returning them as a tuple."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Decide the length N for building the window:\n    # - symmetric: build exactly window_len points\n    # - periodic: build window_len+1 points, then drop the last one\n    N = window_len if symmetric else window_len + 1\n    denom = N - 1  # will be >= 1 here\n\n    # Compute the Hann window\n    window = []\n    for n in range(N):\n        val = 0.5 - 0.5 * math.cos(2 * math.pi * n / denom)\n        # Round to 4 decimal places\n        window.append(round(val, 4))\n\n    # If periodic, drop the last sample to get 'window_len' points\n    if not symmetric:\n        window = window[:-1]\n\n    # Ensure returning a plain Python list\n    return list(window)\n```\n\nExplanation of key steps:\n\n1. Handle the two special cases:\n   - `window_len \u2264 0`: return an empty list.\n   - `window_len = 1`: return `[1.0]`.\n2. For the main computation:\n   - If `symmetric` is `True`, set `N = window_len`.\n   - If `symmetric` is `False` (periodic), set `N = window_len + 1`.\n   - Compute each sample by the formula  \n     hann(n) = 0.5 \u2013 0.5 * cos(2\u03c0n / (N\u20131)),  \n     for n = 0,1,\u2026,N\u20131.\n   - Round each value to 4 decimal places.\n3. In the periodic case, discard the last sample to produce the final list of length `window_len`.\n4. Return a standard Python list of floats."}
{"task_id": 429, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm. Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it. If the\n        input context is invalid the function returns (-1, -1).\n    \"\"\"\n    # Check that context is a 1D array of the correct length\n    if not isinstance(context, np.ndarray) or context.ndim != 1:\n        return (-1, -1)\n    D = context_probs.shape[0]\n    if context.shape[0] != D:\n        return (-1, -1)\n\n    # Check one-hot: entries must be 0 or 1, and exactly one entry == 1\n    unique_vals = np.unique(context)\n    if not np.all(np.isin(unique_vals, [0, 1])):\n        return (-1, -1)\n    if context.sum() != 1:\n        return (-1, -1)\n\n    # Identify the active context index\n    ctx_idx = int(np.argmax(context))\n\n    # Fetch the probability vector for that context\n    probs = context_probs[ctx_idx]\n\n    # Find the best arm and its probability\n    optimal_arm = int(np.argmax(probs))\n    optimal_rwd = float(np.round(probs[optimal_arm], 4))\n\n    return (optimal_rwd, optimal_arm)\n```\n\nExplanation of key steps:\n\n1. **Validation of `context`**  \n   - Ensure it is a 1D `np.ndarray`.  \n   - Ensure its length matches the number of contexts `D = context_probs.shape[0]`.  \n   - Verify it\u2019s one\u2010hot by checking that it only contains 0s and 1s and that exactly one entry sums to 1.\n\n2. **Context Indexing**  \n   - `ctx_idx = np.argmax(context)` locates the position of the single 1 in the one-hot vector.\n\n3. **Oracle Calculation**  \n   - Extract the row `probs = context_probs[ctx_idx]`, which holds the success probabilities for each arm under the chosen context.  \n   - Use `np.argmax` to select the arm with the maximal probability (in case of ties, the first such index is returned).  \n   - Round the maximal probability to four decimal places with `np.round`.\n\n4. **Return**  \n   - A tuple `(optimal_rwd, optimal_arm)`, or `(-1, -1)` if the context fails validation."}
{"task_id": 430, "completion_id": 0, "completion": "```python\nfrom typing import List, Dict, Set, Tuple\n\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    # Map each vertex to its index in the input list for deterministic ordering\n    index = {v: i for i, v in enumerate(vertices)}\n\n    # Build adjacency list for vertices only\n    adj: Dict[object, List[object]] = {v: [] for v in vertices}\n    for u, v in edges:\n        if u in adj and v in adj:\n            adj[u].append(v)\n\n    # Sort each adjacency list by the original vertex order\n    for u in adj:\n        adj[u].sort(key=lambda w: index[w])\n\n    # Visitation states: 0 = unvisited, 1 = visiting, 2 = visited\n    state: Dict[object, int] = {v: 0 for v in vertices}\n    result: List[object] = []\n\n    def dfs(u) -> bool:\n        \"\"\"Return False if a cycle is detected, True otherwise.\"\"\"\n        state[u] = 1  # mark as visiting\n        for w in adj[u]:\n            if state[w] == 0:\n                if not dfs(w):\n                    return False\n            elif state[w] == 1:\n                # Found a back-edge \u21d2 cycle\n                return False\n        state[u] = 2  # mark as visited\n        result.append(u)\n        return True\n\n    # Run DFS from each vertex in the given order\n    for v in vertices:\n        if state[v] == 0:\n            if not dfs(v):\n                return None\n\n    # Reverse postorder gives a valid topological sort\n    return result[::-1]\n```"}
{"task_id": 431, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function returns -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to 1-D numpy arrays of floats\n    arr1 = np.asarray(x1, dtype=float)\n    arr2 = np.asarray(x2, dtype=float)\n\n    # Ensure both are 1-D\n    if arr1.ndim != 1 or arr2.ndim != 1:\n        return -1\n\n    # Check same length\n    if arr1.shape[0] != arr2.shape[0]:\n        return -1\n\n    # Compute difference, square, sum, sqrt\n    diff = arr1 - arr2\n    distance = np.sqrt(np.dot(diff, diff))\n\n    # Round to 4 decimal places and return as float\n    return float(round(distance, 4))\n```\n\nExample usage:\n\n```python\n>>> dist([0, 0], [3, 4])\n5.0\n>>> dist((1.2345, 2.3456), np.array([1.0, 2.0]))\n0.8084\n>>> dist([1, 2, 3], [1, 2])   # unequal lengths\n-1\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # 4-D convolutional kernel case\n    if len(shape) == 4:\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = float(kernel_height * kernel_width)\n        fan_in = float(in_channels) * receptive_field_size\n        fan_out = float(out_channels) * receptive_field_size\n    # all other cases (dense, embedding, higher-D, etc.)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n\n    return fan_in, fan_out\n```\n\nExplanation:\n\n1. If the shape has exactly 4 dimensions, we unpack it into `(out_channels, in_channels, kernel_height, kernel_width)`.  \n2. We compute the receptive field size as the product of `kernel_height` and `kernel_width`.  \n3. We then compute  \n   - `fan_in  = in_channels  \u00d7 receptive_field_size`  \n   - `fan_out = out_channels \u00d7 receptive_field_size`  \n4. For any other tensor shape (dense layers, embeddings, etc.), we simply take the first two dimensions as `(fan_in, fan_out)`.  \n5. Finally, we cast everything to `float` and return the tuple `(fan_in, fan_out)`."}
{"task_id": 434, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax of the input array.\n\n    Args:\n        logits: A NumPy array of shape (m, n) or (n,). If 1-D, it's treated\n                as a single row.\n\n    Returns:\n        A Python list of lists of shape (m, n), where each inner list contains\n        the softmax probabilities for that row, rounded to 6 decimal places.\n    \"\"\"\n    # Ensure we have a 2-D array: treat 1-D as a single row\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n\n    # Subtract the max of each row for numerical stability\n    row_max = np.max(logits, axis=1, keepdims=True)       # shape (m, 1)\n    shifted = logits - row_max                             # shape (m, n)\n\n    # Exponentiate and normalize\n    exps = np.exp(shifted)                                 # shape (m, n)\n    sum_exps = np.sum(exps, axis=1, keepdims=True)         # shape (m, 1)\n    softmax_vals = exps / sum_exps                         # shape (m, n)\n\n    # Round to 6 decimals and convert to Python list of lists\n    result = [\n        [round(float(x), 6) for x in row]\n        for row in softmax_vals\n    ]\n\n    return result\n```\n\nExample usage:\n\n```python\n>>> import numpy as np\n>>> logits_1d = np.array([2.0, 1.0, 0.1])\n>>> softmax(logits_1d)\n[[0.659001, 0.242433, 0.098566]]\n\n>>> logits_2d = np.array([[1.0, 3.0, 2.0],\n...                       [2.0, 1.0, 0.1]])\n>>> softmax(logits_2d)\n[[0.09003, 0.665241, 0.244729],\n [0.659001, 0.242433, 0.098566]]\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value is rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # 1. Convert to numpy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Number of samples\n    m = y_arr.shape[0]\n\n    # Compute target mean\n    y_mean = y_arr.mean() if m > 0 else 0.0\n\n    # Special case: no boosting if n_estimators <= 0 or learning_rate == 0\n    if n_estimators <= 0 or learning_rate == 0.0:\n        return [round(y_mean, 4)] * m\n\n    # 2. Initialize predictions to the mean of y\n    y_pred = np.full(m, y_mean, dtype=float)\n\n    # Pre\u2010build the design matrix for OLS (adds an intercept column)\n    # shape: (m, d+1)\n    ones = np.ones((m, 1), dtype=float)\n    X_design = np.hstack((ones, X_arr))\n\n    # 3. Boosting iterations\n    for _ in range(n_estimators):\n        # 3a. Compute residuals\n        residuals = y_arr - y_pred\n\n        # 3b. Fit OLS to predict residuals:\n        #     beta = (X_design^+)* residuals\n        #     where X_design^+ is the Moore\u2013Penrose pseudoinverse\n        beta = np.linalg.pinv(X_design).dot(residuals)\n\n        # 3c. Weak learner prediction\n        h = X_design.dot(beta)\n\n        # 3d. Update ensemble prediction\n        y_pred += learning_rate * h\n\n    # 4. Round to 4 dec places and return as Python list\n    y_pred_rounded = np.round(y_pred, 4)\n    return y_pred_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Data prep**: Convert inputs to NumPy arrays of type `float`.  \n2. **Special cases**: If no estimators or zero learning rate, return the constant mean of `y`.  \n3. **Initialization**: Set all predictions equal to `y`\u2019s mean.  \n4. **Design matrix**: Prepend a column of ones to `X` so that our OLS fit includes an intercept.  \n5. **Boosting loop**:  \n   - Compute residuals \\(r = y - \\hat y\\).  \n   - Fit an OLS model via the pseudoinverse: \\(\\beta = X^+\\,r\\).  \n   - Predict the residuals on the same `X`.  \n   - Update the model\u2019s prediction by adding `learning_rate * h`.  \n6. **Output**: Round each predicted value to four decimal places and return a plain Python list."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check valid order\n    if order not in (0, 1, 2):\n        return -1\n\n    # Detect if the original input is a Python scalar\n    is_scalar = isinstance(x, (int, float))\n\n    # Convert input to a NumPy array for vectorized computations\n    arr = np.array(x, dtype=float)\n\n    # Compute the sigmoid\n    sigma = 1.0 / (1.0 + np.exp(-arr))\n\n    # Choose formula by order\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1.0 - sigma)\n    else:  # order == 2\n        result = sigma * (1.0 - sigma) * (1.0 - 2.0 * sigma)\n\n    # Round to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return as Python float for scalar input, else as a list\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n```\n\nExplanation of key steps:\n\u2022 We first validate the `order` argument and return `-1` immediately if it\u2019s invalid.  \n\u2022 We detect whether the input `x` is a Python scalar (`int` or `float`) so we know whether to return a float or a list.  \n\u2022 We convert `x` into a NumPy array `arr` to leverage vectorized operations.  \n\u2022 We compute the logistic sigmoid \u03c3(x) and then select the appropriate derivative formula based on `order`.  \n\u2022 We round the results to four decimal places with `np.round(...)`.  \n\u2022 Finally, if the original input was a scalar, we cast the single output back to a Python `float`; otherwise we call `.tolist()` to return a Python list preserving the original shape."}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a 1-D integer array\n    y_arr = np.asarray(y, dtype=int).ravel()\n    \n    # Handle empty input\n    if y_arr.size == 0:\n        return []\n    \n    # Check for negative labels\n    if np.any(y_arr < 0):\n        raise ValueError(\"Class indices must be non-negative integers.\")\n    \n    max_label = int(y_arr.max())\n    \n    # Infer num_classes if needed\n    if num_classes is None:\n        num_classes = max_label + 1\n    # If provided num_classes is too small, signal failure\n    elif num_classes < max_label + 1:\n        return -1\n    \n    # Build one-hot matrix\n    one_hot = np.zeros((y_arr.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y_arr.shape[0]), y_arr] = 1\n    \n    # Convert to plain Python list of lists and return\n    return one_hot.tolist()\n```\n\nExplanation of key steps:\n1. We first coerce `y` into a flat NumPy integer array.\n2. If `y` is empty, we immediately return an empty list.\n3. We check for negatives (since only non-negative labels are allowed).\n4. We compute `max_label` and infer or validate `num_classes`.\n5. If the provided `num_classes` is too small, we return `-1`.\n6. Otherwise, we allocate a zero matrix of shape `(len(y), num_classes)` and place 1\u2019s in the appropriate columns.\n7. Finally, we convert the NumPy array to a Python list of lists and return it."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Number of transactions\n    n_trans = len(transactions)\n    if n_trans == 0:\n        return []\n\n    # Convert each transaction to a set for faster subset checks\n    tsets = [set(t) for t in transactions]\n\n    # 1) Generate L1, the frequent 1-itemsets\n    # Count each item\n    item_counts = {}\n    for t in tsets:\n        for item in t:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    # Keep those meeting min_sup\n    L1 = []\n    for item, cnt in item_counts.items():\n        if cnt / n_trans >= min_sup:\n            L1.append((item,))\n    # Sort lexicographically\n    L1 = sorted(L1)\n\n    # This will hold all frequent itemsets\n    frequent_itemsets = L1.copy()\n\n    # L_prev holds the frequent (k-1)-itemsets in the previous iteration\n    L_prev = L1\n    k = 2\n\n    # Loop until no more candidates\n    while L_prev:\n        # 2) Candidate generation by self-join of L_prev\n        Ck = []\n        len_prev = len(L_prev)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                a = L_prev[i]\n                b = L_prev[j]\n                # join only if first k-2 items are equal\n                if a[:k-2] == b[:k-2]:\n                    # union and sort to get a candidate k-itemset\n                    cand = tuple(sorted(set(a) | set(b)))\n                    if len(cand) == k:\n                        Ck.append(cand)\n\n        # deduplicate\n        Ck = sorted(set(Ck))\n\n        # 3) Prune candidates that have an infrequent (k-1)-subset\n        L_prev_set = set(L_prev)\n        pruned = []\n        for cand in Ck:\n            # all (k-1)-subsets\n            all_subsets_frequent = True\n            for subset in itertools.combinations(cand, k-1):\n                if subset not in L_prev_set:\n                    all_subsets_frequent = False\n                    break\n            if all_subsets_frequent:\n                pruned.append(cand)\n\n        Ck = pruned\n\n        # 4) Count supports of candidates Ck\n        counts = {cand: 0 for cand in Ck}\n        for t in tsets:\n            for cand in Ck:\n                # if cand is subset of transaction\n                if set(cand) <= t:\n                    counts[cand] += 1\n\n        # 5) Form Lk by thresholding\n        Lk = []\n        for cand, cnt in counts.items():\n            if cnt / n_trans >= min_sup:\n                Lk.append(cand)\n\n        if not Lk:\n            break\n\n        # sort lexicographically\n        Lk = sorted(Lk)\n\n        # collect them and iterate\n        frequent_itemsets.extend(Lk)\n        L_prev = Lk\n        k += 1\n\n    # The collected frequent_itemsets are already in order of increasing size\n    # and within each size block they are lex-sorted.\n    return frequent_itemsets\n```\n\nExplanation of key steps:\n\n1. **L1 generation**: Count each singleton item\u2019s support and keep those \u2265 `min_sup`.\n2. **Candidate generation (self-join)**: From the frequent (k\u22121)-itemsets `L_prev`, join pairs that share the first k\u22122 items to form k-item candidates.\n3. **Pruning**: Discard any k-item candidate that has at least one (k\u22121)-subset not in `L_prev`.\n4. **Support counting**: Scan all transactions and count how many contain each candidate.\n5. **Thresholding**: Keep only those with support \u2265 `min_sup`.\n\nWe repeat until no new frequent itemsets of size k are found. The final list is naturally ordered by itemset size, and within each size block we keep lexicographic order."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\ndef aggregate_predictions(\n    predictions: List[List[List[float]]]\n) -> Tuple[List[List[float]], List[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert to numpy array of shape (n_estimators, n_samples, n_classes)\n    arr = np.array(predictions, dtype=float)\n    \n    # Check dimensions\n    if arr.ndim != 3:\n        raise ValueError(f\"Expected a 3D list, got array with shape {arr.shape}\")\n    \n    n_estimators, n_samples, n_classes = arr.shape\n    \n    # Average over the first axis (estimators)\n    avg_probs = arr.mean(axis=0)  # shape: (n_samples, n_classes)\n    \n    # Round to 4 decimal places\n    avg_probs_rounded = np.round(avg_probs, 4)\n    \n    # Determine predicted class per sample\n    # In case of ties, numpy.argmax returns the first (smallest) index\n    preds = np.argmax(avg_probs_rounded, axis=1)\n    \n    # Convert back to pure Python lists\n    avg_probs_list = avg_probs_rounded.tolist()\n    preds_list = preds.tolist()\n    \n    return avg_probs_list, preds_list\n```\n\nExplanation of key steps:\n1. **Conversion to NumPy**: We turn the nested lists into a NumPy array for easy manipulation.\n2. **Averaging**: We average over the estimator dimension (`axis=0`).\n3. **Rounding**: We round each averaged probability to four decimal places.\n4. **Predictions**: We use `np.argmax` along the class dimension (`axis=1`) to get the class index with the highest probability for each sample. In the event of ties, `argmax` picks the smallest index.\n5. **Return types**: We convert the results back to native Python lists as required."}
{"task_id": 441, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    # Edge cases\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Determine the length of the \"symmetric\" window to generate:\n    #   - If symmetric=True, we want exactly window_len points of an N-point window.\n    #   - If symmetric=False, we want window_len points taken from an (N+1)-point window.\n    N = window_len if symmetric else window_len + 1\n\n    # Generate the indices 0,1,...,N-1\n    n = np.arange(N, dtype=float)\n\n    # Compute the Hamming window formula\n    w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n\n    # If we want a periodic window, drop the last sample\n    if not symmetric:\n        w = w[:-1]\n\n    # Round to 4 decimal places and convert to a regular Python list\n    w = np.round(w, 4).tolist()\n    return w\n```\n\nExplanation of key points:\n1. Handle the edge cases `window_len == 0` and `window_len == 1` first.  \n2. For the periodic variant (`symmetric=False`), generate an `(N+1)`-point symmetric window and drop its last sample so the returned window has exactly `window_len` points that tile nicely in an FFT.  \n3. Use NumPy for vectorized computation, then round to 4 decimal places and convert to a native Python list."}
{"task_id": 442, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport heapq\nimport numpy as np\nimport heapq\n\ndef knn_kdtree(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> list[int]:\n   k-Nearest Neighbours classification accelerated by a KD-Tree    # Build a balanced KD-Tree; node = (point, label, axis, left, right)\n    def build_kdtree(points, labels, depth):\n        n = points.shape[0]\n        if n == 0:\n            return None\n        axis = depth % points.shape[1]\n        # sort by axis and pick median\n        idx = points[:, axis].argsort()\n        pts = points[idx]\n        labs = labels[idx]\n        mid = n // 2\n        return (\n            pts[mid].copy(),                     # point\n            int(labs[mid]),                      # label\n            axis,                                # splitting axis\n            build_kdtree(pts[:mid], labs[:mid], depth + 1),   # left\n            build_kdtree(pts[mid+1:], labs[mid+1:], depth + 1) # right\n        )\n\n    # Search k nearest neighbours for a single query point\n    def knn_search(tree, query):\n        # max-heap of ( -squared_dist, label )\n        heap = []\n        def recurse(node):\n            if node is None:\n                return\n            pt, lab, axis, left, right = node\n            # squared Euclidean distance\n            diff = query - pt\n            dist_sq = diff.dot(diff)\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist_sq, lab))\n            else:\n                # if closer than current farthest, replace\n                if dist_sq < -heap[0][0]:\n                    heapq.heapreplace(heap, (-dist_sq, lab))\n            # choose side to visit first\n            d_axis = query[axis] - pt[axis]\n            first, second = (left, right) if d_axis < 0 else (right, left)\n            recurse(first)\n            # check if need to visit other side\n            if len(heap) < k or d_axis*d_axis < -heap[0][0]:\n                recurse(second)\n\n        recurse(tree)\n        # extract labels from heap\n        return [lab for (_, lab) in heap]\n\n    # Build tree\n    tree = build_kdtree(X_train, y_train, depth=0)\n    predictions = []\n    for q in X_test:\n        neigh_labels = knn_search(tree, q)\n        # majority vote, ties broken by smallest label\n        counts = np.bincount(neigh_labels)\n        pred = int(np.argmax(counts))\n        predictions.append(pred)\n    return predictions\n```"}
{"task_id": 443, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n      \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n      \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*. If no rows satisfy one side of the split,\n        that array will have shape (0, X.shape[1]).\n    \"\"\"\n    # Determine whether to do a >= (numeric) or == (categorical) test.\n    is_numeric = isinstance(threshold, (int, float)) and not isinstance(threshold, bool)\n\n    # Extract the column to compare against\n    col = X[:, feature_i]\n\n    if is_numeric:\n        mask_left = col >= threshold\n    else:\n        mask_left = col == threshold\n\n    left_subset = X[mask_left]\n    right_subset = X[~mask_left]\n\n    return left_subset, right_subset\n```\n\nExplanation of key points:\n\n1. We check `is_numeric` by ensuring `threshold` is an `int` or `float` but *not* a `bool` (since `bool` is a subclass of `int` in Python).\n2. We build a boolean mask over all rows in column `feature_i`:\n   - If numeric, `mask_left = X[:, feature_i] >= threshold`\n   - Otherwise, `mask_left = X[:, feature_i] == threshold`\n3. We index `X` with that mask (and its negation) to obtain the left and right subsets.\n4. If no rows match a side, NumPy will naturally return an array of shape `(0, X.shape[1])`."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications:\n    - X: N\u00d7C list of vectors\n    - Y: M\u00d7C list of vectors (if None, Y = X)\n    - sigma: float (isotropic), list of C floats (anisotropic), or None\n             (defaults to sqrt(C/2))\n    Returns:\n    - Nested Python list of shape N\u00d7M of kernel values rounded to 4 decimals\n    - Or -1 on invalid input\n    \"\"\"\n    # 1) Validate X\n    if not isinstance(X, list) or len(X) == 0:\n        return -1\n    N = len(X)\n    # All rows must be lists of same length C\n    try:\n        C = len(X[0])\n    except Exception:\n        return -1\n    if C == 0:\n        return -1\n    for row in X:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n\n    # 2) If Y is None, set Y = X\n    if Y is None:\n        Y = X\n    # Validate Y\n    if not isinstance(Y, list) or len(Y) == 0:\n        return -1\n    M = len(Y)\n    for row in Y:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n\n    # 3) Process sigma\n    # Default sigma if None\n    if sigma is None:\n        sigma_arr = np.full((C,), np.sqrt(C / 2.0), dtype=float)\n    # Isotropic: single float or int\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full((C,), float(sigma), dtype=float)\n    # Anisotropic: list of length C\n    elif isinstance(sigma, (list, tuple, np.ndarray)):\n        if len(sigma) != C:\n            return -1\n        try:\n            sigma_arr = np.array(sigma, dtype=float)\n        except Exception:\n            return -1\n        if np.any(sigma_arr <= 0):\n            return -1\n    else:\n        # invalid sigma type\n        return -1\n\n    # 4) Convert X, Y to numpy arrays\n    try:\n        X_np = np.array(X, dtype=float)  # shape (N, C)\n        Y_np = np.array(Y, dtype=float)  # shape (M, C)\n    except Exception:\n        return -1\n\n    # 5) Scale features by sigma\n    # broadcasting sigma_arr over rows\n    Xs = X_np / sigma_arr\n    Ys = Y_np / sigma_arr\n\n    # 6) Compute squared distances efficiently\n    # ||x - y||^2 = ||x||^2 + ||y||^2 - 2 x\u00b7y\n    x_norm2 = np.sum(Xs * Xs, axis=1)        # shape (N,)\n    y_norm2 = np.sum(Ys * Ys, axis=1)        # shape (M,)\n    cross_term = Xs.dot(Ys.T)                # shape (N, M)\n    d2 = x_norm2[:, None] + y_norm2[None, :] - 2.0 * cross_term\n    # Numerical errors might make tiny negatives; clip to zero\n    d2 = np.maximum(d2, 0.0)\n\n    # 7) Compute the RBF kernel: exp(-0.5 * d2)\n    K = np.exp(-0.5 * d2)\n\n    # 8) Round to 4 decimal places\n    K_round = np.round(K, 4)\n\n    # 9) Convert to nested Python list and return\n    return K_round.tolist()\n```\n\nExplanation of key steps:\n\n1. **Input validation**  \n   - Ensure `X` and `Y` are non-empty lists of equal-length feature vectors.  \n   - If `Y` is `None`, we simply set `Y = X` to compute the square matrix.\n\n2. **Sigma handling**  \n   - When `sigma` is `None`, we default to the conventional \u221a(C/2).  \n   - A single positive float \u21d2 isotropic kernel (same bandwidth on all features).  \n   - A list of length C with all positive entries \u21d2 anisotropic (per-feature bandwidth).  \n   - In any other invalid case (non-positive \u03c3, wrong list\u2010length, bad type), we return `-1`.\n\n3. **Vectorized computation**  \n   - We scale the data by `\u03c3` (`Xs = X / \u03c3`, etc.).  \n   - We compute pairwise squared distances using the expansion  \n     \u2016x\u2212y\u2016\u00b2 = \u2016x\u2016\u00b2 + \u2016y\u2016\u00b2 \u2212 2x\u22c5y, clipped to \u22650.  \n   - Finally, we apply `exp(\u22120.5 * d\u00b2)`.\n\n4. **Rounding and output**  \n   - We round each kernel entry to 4 decimal places via `np.round`.  \n   - Convert the NumPy array back to a nested Python list.  \n\nThis fulfills all requirements: input checks, correct RBF definition, default \u03c3, and 4-decimal rounding."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    # Convert to numpy arrays for convenience\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=int)\n    n_samples, n_features = X_arr.shape\n\n    # Helper: compute entropy of a 1-D array of labels\n    def entropy(labels: np.ndarray) -> float:\n        if labels.size == 0:\n            return 0.0\n        vals, counts = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return -np.sum(probs * np.log2(probs))\n\n    # Helper: find the majority label (ties broken by smallest label)\n    def majority_label(labels: np.ndarray) -> int:\n        vals, counts = np.unique(labels, return_counts=True)\n        max_count = counts.max()\n        # select all labels with the max count, then pick the smallest\n        candidates = vals[counts == max_count]\n        return int(candidates.min())\n\n    # Compute parent entropy\n    H_parent = entropy(y_arr)\n\n    best_gain = 0.0\n    best_feature = -1\n    best_threshold = None\n\n    # Iterate over each feature\n    for j in range(n_features):\n        col = X_arr[:, j]\n        # get sorted unique values\n        uniq_vals = np.unique(col)\n        if uniq_vals.size < 2:\n            continue  # no possible split on this feature\n\n        # possible thresholds are midpoints between successive unique values\n        thresholds = (uniq_vals[:-1] + uniq_vals[1:]) / 2.0\n\n        # evaluate each threshold\n        for t in thresholds:\n            left_mask = (col <= t)\n            right_mask = ~left_mask\n            n_left = left_mask.sum()\n            n_right = right_mask.sum()\n            # skip if one side is empty\n            if n_left == 0 or n_right == 0:\n                continue\n\n            y_left = y_arr[left_mask]\n            y_right = y_arr[right_mask]\n\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n\n            # check for a strictly better gain\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = t\n            # tie-breaking: same gain? pick smaller feature index first,\n            # then smaller threshold\n            elif np.isclose(gain, best_gain) and gain > 0:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                elif j == best_feature and t < best_threshold:\n                    best_threshold = t\n\n    # If no positive gain found, return the default stump\n    if best_feature == -1:\n        maj = majority_label(y_arr)\n        return (-1, None, maj, maj)\n\n    # Otherwise, compute the majority labels on each side\n    t_rounded = round(best_threshold, 4)\n    col_best = X_arr[:, best_feature]\n    left_mask = (col_best <= best_threshold)\n    right_mask = ~left_mask\n\n    left_maj = majority_label(y_arr[left_mask])\n    right_maj = majority_label(y_arr[right_mask])\n\n    return (best_feature, t_rounded, left_maj, right_maj)\n```\n\nExplanation of key steps:\n1. **Entropy calculation**: `entropy(labels)` computes Shannon entropy of the given label array.\n2. **Majority label**: `majority_label(labels)` returns the most frequent label, breaking ties by choosing the smallest label.\n3. **Threshold candidates**: For each feature, we sort its unique values and form midpoints between successive distinct values.\n4. **Information gain**: For each threshold, we split the data, compute the child entropies and weighted sum, and subtract from parent entropy.\n5. **Tie-breaking**: We update our best split only if we find a strictly higher gain, or if the gain is equal (within floating\u2010point tolerance) and the candidate feature index or threshold is smaller according to the rules.\n6. **No\u2010split case**: If no split yields positive gain, we return `(-1, None, maj, maj)` where `maj` is the overall majority label."}
{"task_id": 447, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    # If the user passed a list of ints for shape, convert it to a tuple\n    # so that numpy.ones will accept it in the same way as a tuple.\n    if isinstance(shape, list):\n        shape_arg = tuple(shape)\n    else:\n        shape_arg = shape\n\n    # Delegate to numpy.ones; let numpy itself raise errors on bad input.\n    arr = np.ones(shape_arg, **kwargs)\n    # Convert the numpy array to a pure Python (nested) list.\n    return arr.tolist()\n```\n\nExplanation:\n- We accept `shape` as either an `int`, a `tuple` of `int`, or a `list` of `int`.\n- If it\u2019s a `list`, we convert it to a `tuple` because `numpy.ones` expects its first argument to be either an int or a tuple of ints.\n- We forward any extra keyword arguments (like `dtype`) directly into `numpy.ones`, allowing users to control the array\u2019s data type.\n- We don\u2019t catch or handle errors from NumPy\u2014invalid shapes (e.g. negative sizes) will raise naturally.\n- Finally, we call `.tolist()` on the resulting NumPy array so that we return a native Python list (potentially nested) filled with ones."}
{"task_id": 448, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    # If y_train is empty, we cannot compute a mean => return empty list.\n    if y_train is None or len(y_train) == 0:\n        return []\n    \n    # Compute the arithmetic mean of y_train\n    mean_value = np.mean(y_train)\n    \n    # Number of test samples\n    n_test = 0 if X_test is None else X_test.shape[0]\n    \n    # Create an array of length n_test filled with the mean value\n    preds = np.full(n_test, mean_value, dtype=float)\n    \n    # Round each prediction to the nearest 4th decimal\n    preds = np.round(preds, 4)\n    \n    # Convert to plain Python list of floats and return\n    return preds.tolist()\n```\n\nExplanation of key steps:\n\n1. **Empty check**: If `y_train` has zero length, we immediately return `[]`.\n2. **Mean computation**: We use `np.mean(y_train)` to get the average of the training targets.\n3. **Prediction vector**: We create a NumPy array of shape `(n_test,)` filled with that mean.\n4. **Rounding**: We call `np.round(..., 4)` to round each entry to the nearest 4th decimal place.\n5. **Conversion**: Finally, we convert the NumPy array to a native Python list of floats before returning."}
{"task_id": 449, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    # Split the data by class\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n\n    # Compute class means\n    Mu0 = X0.mean(axis=0)\n    Mu1 = X1.mean(axis=0)\n\n    # Center data around its class mean\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n\n    # Compute (unused) covariance-like matrix\n    m = X_train.shape[1]  # number of features\n    Sigma = (1.0 / m) * np.dot(X_sub_Mu.T, X_sub_Mu)\n\n    # Compute the unit normal vector w\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec ** 2))\n    w = normal_vec\n\n    # Compute bias term b\n    midpoint = (Mu0 + Mu1) / 2\n    b = -np.dot(w.T, midpoint)\n\n    # Determine sign: 1 if class\u20131 mean is on positive side, else 0\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n\n    # Predict on test set\n    scores = np.dot(X_test, w) + b\n    preds = (scores > 0).astype(int) * sign\n\n    return preds.tolist()\n```"}
{"task_id": 450, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef majority_vote(preds: np.ndarray) -> list[int]:\n   Aggregate ensemble predictions using majority voting.\n\n    Parameters\n    ----------\n    preds : np.ndarray\n        A 2-D NumPy array of shape `(n_samples, n_estimators)` where each entry\n        is an *integer* class label predicted by one estimator for one sample.\n\n    Returns\n    -------\n    list[int]\n        A list containing the chosen class for every sample. If multiple\n        classes have the same maximal count (a tie), return the smallest class\n        label.\n       if preds.ndim != 2:\n        raise ValueError(fpreds` must be 2-D, got array with shape {preds.shape    \n    n_samples, n_estimators = preds.shape\n    if n_estimators == 0:\n        raise ValueErrorThere must be at least one estimator (n_estimators > 0).    \n    final_votes: list[int] = []\n    for i in range(n_samples):\n        row = preds[i]\n        # Count occurrences of each class label in this row\n        counts = np.bincount(row)\n        # np.argmax returns the smallest index of the maximum count in case of ties\n        chosen_class = int(np.argmax(counts))\n        final_votes.append(chosen_class)\n    \n    return final_votes\n```\n\nExplanation:\n\n1. We first validate that the input `preds` is indeed 2-D and that there's at least one estimator per sample.  \n2. For each sample (each row in `preds`), we compute `np.bincount(row)`, which returns an array where the index is the class label and the value is the count of that label among the estimators.  \n3. We then take `np.argmax` of that count array; by NumPy\u2019s definition, if multiple class labels tie for the highest count, `argmax` returns the smallest index (i.e., the smallest class label).  \n4. We cast the result to a Python `int` and collect it in a standard list, which we return at the end."}
{"task_id": 451, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\n\ndef knn_kdtree_predict(X_train: np.ndarray,\n                       y_train: np.ndarray,\n                       X_test: np.ndarray,\n                       k: int) -> List[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    List[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    # Edge cases\n    n_train = X_train.shape[0]\n    if n_train == 0 or k <= 0:\n        return []\n    # Number of features\n    n_features = X_train.shape[1]\n\n    # Define KD-Tree node\n    class KDNode:\n        __slots__ = (\"idx\", \"point\", \"label\", \"left\", \"right\", \"axis\")\n        def __init__(self,\n                     idx: int,\n                     point: np.ndarray,\n                     label: int,\n                     left: Optional['KDNode'],\n                     right: Optional['KDNode'],\n                     axis: int):\n            self.idx = idx\n            self.point = point\n            self.label = label\n            self.left = left\n            self.right = right\n            self.axis = axis\n\n    def build_tree(indices: List[int], depth: int = 0) -> Optional[KDNode]:\n        if not indices:\n            return None\n        axis = depth % n_features\n        # Sort indices by the splitting axis\n        indices.sort(key=lambda i: X_train[i, axis])\n        mid = len(indices) // 2\n        idx_mid = indices[mid]\n        node = KDNode(\n            idx=idx_mid,\n            point=X_train[idx_mid],\n            label=int(y_train[idx_mid]),\n            left=build_tree(indices[:mid], depth + 1),\n            right=build_tree(indices[mid+1:], depth + 1),\n            axis=axis\n        )\n        return node\n\n    # Build the KD-Tree on all training indices\n    root = build_tree(list(range(n_train)), depth=0)\n\n    def squared_distance(a: np.ndarray, b: np.ndarray) -> float:\n        \"\"\"Euclidean squared distance between two points.\"\"\"\n        diff = a - b\n        # np.dot(diff, diff) is faster than sum of squares in Python loop\n        return float(np.dot(diff, diff))\n\n    def query_knn(root: KDNode, query_point: np.ndarray, k: int) -> List[int]:\n        # Max-heap of ( -squared_dist, label )\n        heap: List[Tuple[float, int]] = []\n\n        def search(node: Optional[KDNode]):\n            if node is None:\n                return\n            axis = node.axis\n            pivot_val = node.point[axis]\n            diff = query_point[axis] - pivot_val\n\n            # Choose the side that the query_point is on\n            first, second = (node.left, node.right) if diff <= 0 else (node.right, node.left)\n            # Search nearer side first\n            search(first)\n\n            # Compute squared distance to the pivot\n            dist2 = squared_distance(query_point, node.point)\n            neg_dist2 = -dist2\n            if len(heap) < k:\n                heapq.heappush(heap, (neg_dist2, node.label))\n            else:\n                # If this point is closer than the current farthest in heap\n                if neg_dist2 > heap[0][0]:\n                    heapq.heapreplace(heap, (neg_dist2, node.label))\n\n            # Decide whether to visit the other side\n            # Current farthest squared distance in heap\n            if len(heap) < k:\n                should_visit = True\n            else:\n                farthest_sq = -heap[0][0]\n                should_visit = diff*diff < farthest_sq\n\n            if should_visit:\n                search(second)\n\n        # Perform the search\n        search(root)\n        # Extract labels from the heap\n        labels = [label for (_negd, label) in heap]\n        return labels\n\n    # For each test point, get k nearest labels and vote\n    predictions: List[int] = []\n    for i in range(X_test.shape[0]):\n        qp = X_test[i]\n        neighbor_labels = query_knn(root, qp, k)\n        # Tally votes\n        cnt = Counter(neighbor_labels)\n        # Find the highest vote count\n        top_count = max(cnt.values())\n        # Among tied labels, pick the smallest\n        best_labels = [lab for lab, count in cnt.items() if count == top_count]\n        prediction = min(best_labels)\n        predictions.append(prediction)\n\n    return predictions\n```\n\nExplanation of the main steps:\n\n1. **Edge Cases**  \n   If the training set is empty or `k <= 0`, we immediately return an empty list.\n\n2. **KD-Tree Construction**  \n   We recursively build a balanced KD-Tree by choosing the splitting axis in round-robin (depth mod n_features), sorting the current indices by that axis, and picking the median point as the node. Its left and right subtrees are built on the points before and after the median.\n\n3. **k-NN Search**  \n   For each query point:\n   - We maintain a max-heap (implemented via Python\u2019s `heapq` and negated squared-distance keys) of size up to `k`.  \n   - We traverse the tree, always visiting the side of the split where the query lies first, then checking whether the \u201cother side\u201d could contain closer points by comparing the squared distance to the splitting plane with the current farthest neighbor in the heap.  \n   - At each visited node we update the heap if the node\u2019s point is among the `k` nearest seen so far.\n\n4. **Voting**  \n   Once we have up to `k` nearest neighbours, we count labels with `collections.Counter`, find the maximum vote count, and break ties by picking the smallest label.\n\nThis satisfies exact k-NN via a KD-Tree, deterministic tie-breaking, and the requested pure-function interface."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(\n    X: Union[np.ndarray, List[list]], feature_i: int, threshold\n) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list of lists or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list [subset1, subset2], each a regular Python list of samples.\n    \"\"\"\n    # If X is an ndarray, convert it to a list of lists:\n    if isinstance(X, np.ndarray):\n        samples = X.tolist()\n    else:\n        # assume it's already a list of lists\n        samples = X\n\n    # Decide if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n\n    subset1 = []\n    subset2 = []\n\n    for sample in samples:\n        val = sample[feature_i]\n        if is_numeric:\n            # for numeric thresholds: >=\n            if val >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        else:\n            # for categorical thresholds: ==\n            if val == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n\n    return [subset1, subset2]\n```\n\nExplanation:\n\n1. We first normalize `X` to a plain Python list of samples via `tolist()` if it's an ndarray.\n2. We check whether `threshold` is numeric (an `int` or `float`).\n3. We iterate over each sample, pick out the feature value `val = sample[feature_i]`, and decide\n   - For numeric thresholds, we test `val >= threshold`.\n   - For non-numeric (categorical) thresholds, we test `val == threshold`.\n4. We append the sample to the first subset if it meets the criterion, otherwise to the second subset.\n5. Finally, we return a two-element list containing the two subsets (each already a Python list)."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Validate gamma\n    if not isinstance(gamma, (float, int)) or gamma < 0 or gamma > 1:\n        return -1\n\n    # Validate Q and Q_next dimensions\n    if not isinstance(Q, np.ndarray) or not isinstance(Q_next, np.ndarray):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n\n    batch_size, n_actions = Q.shape\n\n    # Validate lengths of lists\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n\n    # Copy Q to targets\n    y = Q.copy().astype(float)\n\n    for i in range(batch_size):\n        a = actions[i]\n        # Validate action indices\n        if not (0 <= a < n_actions):\n            return -1\n\n        r = rewards[i]\n        done = dones[i]\n\n        if done:\n            target = r\n        else:\n            target = r + gamma * np.max(Q_next[i])\n\n        y[i, a] = target\n\n    # Round to 4 decimals and convert to nested list\n    y = np.round(y, 4)\n    return y.tolist()\n```\n\nExplanation of key steps:\n\n1. **Validation**  \n   - Check that `gamma` is a number in \\[0,1\\].  \n   - Ensure `Q` and `Q_next` are NumPy arrays of the same shape `(batch, n_actions)`.  \n   - Verify that `actions`, `rewards`, and `dones` all have length equal to the batch size.  \n   - Confirm each action index is in the valid range `0 <= action < n_actions`.\n\n2. **Target Computation**  \n   - Copy the original `Q` into `y`.  \n   - For each sample `i`, compute  \n     - `target = rewards[i]` if `dones[i]` is True,  \n     - otherwise `target = rewards[i] + gamma * max(Q_next[i])`.  \n   - Replace `y[i, actions[i]]` with this `target`.\n\n3. **Rounding & Output**  \n   - Round the entire `y` array to 4 decimal places.  \n   - Convert to a nested Python list and return.  \n   - If any validation fails, return `-1`."}
{"task_id": 454, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    # Number of real/fake samples per half batch\n    half_size = batch_size // 2\n\n    # real labels => [1, 0]\n    valid_half = np.tile([1, 0], (half_size, 1))\n\n    # fake labels => [0, 1]\n    fake_half = np.tile([0, 1], (half_size, 1))\n\n    # full batch of real labels => [1, 0]\n    valid_full = np.tile([1, 0], (batch_size, 1))\n\n    # convert to Python lists and return\n    return valid_half.tolist(), fake_half.tolist(), valid_full.tolist()\n```\n\nExplanation of key steps:\n1. We split the batch evenly with `half_size = batch_size // 2`.\n2. `np.tile([1, 0], (half_size, 1))` creates an array of shape `(half_size, 2)` where each row is `[1, 0]`.\n3. `np.tile([0, 1], (half_size, 1))` does the same for fake labels `[0, 1]`.\n4. `valid_full` repeats `[1, 0]` for the entire batch.\n5. We convert each NumPy array to a native Python list with `.tolist()` before returning."}
{"task_id": 455, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\nimport numpy as np\nfrom collections import Counter\n\ndef knn_classifier(X_train, y_train, X_query, k, methodnaive   k-Nearest Neighbour classifier.\n\n    Parameters\n    ----------\n    X_train : list[list[float]] | np.ndarray\n        Feature matrix of the training set (n_samples \u00d7 n_features).\n    y_train : list[int] | np.ndarray\n        Integer labels for training samples.\n    X_query : list[list[float]] | np.ndarray\n        Feature matrix of the query/test set.\n    k : int\n        Number of neighbours to consider.\n    method : str, defaultnaive        Neighbour search strategy:naiveheap orkdtree    Returns\n    -------\n    list[int]\n        Predicted label for each query sample.\n       # Convert inputs to numpy arrays\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=int)\n    X_query = np.asarray(X_query, dtype=float)\n    n_train, n_feats = X_train.shape\n\n    # Utility to pick majority label, ties -> smallest label\n    def majority_vote(labels):\n        cnt = Counter(labels)\n        max_count = max(cnt.values())\n        # all labels having the maximum count\n        candidates = [lab for lab, c in cnt.items() if c == max_count]\n        return int(min(candidates))\n\n    # Strategy 1: Naive search\n    def predict_naive(q):\n        # compute all distances\n        dists = np.linalg.norm(X_train - q, axis=1)\n        # indices of k smallest distances\n        idx = np.argpartition(dists, k-1)[:k]\n        labs = y_train[idx]\n        return majority_vote(labs)\n\n    # Strategy 2: Heap / partial sort\n    def predict_heap(q):\n        dists = np.linalg.norm(X_train - q, axis=1)\n        # find the k indices with smallest distances using a heap\n        nearest_idx = heapq.nsmallest(k, range(n_train), key=lambda i: dists[i])\n        labs = y_train[nearest_idx]\n        return majority_vote(labs)\n\n    # Strategy 3: KD-Tree\n    class KDNode:\n        __slots__ =pointlabelaxisleftright        def __init__(self, point, label, axis, left, right):\n            self.point = point\n            self.label = label\n            self.axis = axis\n            self.left = left\n            self.right = right\n\n    def build_kdtree(points, labels, depth=0):\n        if len(points) == 0:\n            return None\n        axis = depth % n_feats\n        # sort by axis and choose median\n        sorted_idx = points[:, axis].argsort()\n        mid = len(sorted_idx) // 2\n        m_idx = sorted_idx[mid]\n        # create node\n        node = KDNode(\n            point=points[m_idx],\n            label=labels[m_idx],\n            axis=axis,\n            left=build_kdtree(points[sorted_idx[:mid]], labels[sorted_idx[:mid]], depth+1),\n            right=build_kdtree(points[sorted_idx[mid+1:]], labels[sorted_idx[mid+1:]], depth+1)\n        )\n        return node\n\n    def predict_kdtree(root, q):\n        # max-heap of (\u2013distance, label)\n        heap = []\n\n        def recursive_search(node):\n            if node is None:\n                return\n            # compute distance to current node\n            dist = math.dist(q, node.point)\n            # push/pop onto max-heap\n            if len(heap) < k:\n                heapq.heappush(heap, (-dist, node.label))\n            else:\n                # heap[0] is the farthest in the current k\n                if dist < -heap[0][0]:\n                    heapq.heapreplace(heap, (-dist, node.label))\n            # choose branch\n            axis = node.axis\n            diff = q[axis] - node.point[axis]\n            first, second = (node.left, node.right) if diff <= 0 else (node.right, node.left)\n            recursive_search(first)\n            # check if we need to search the other side\n            if len(heap) < k or abs(diff) < -heap[0][0]:\n                recursive_search(second)\n\n        recursive_search(root)\n        # extract labels\n        labs = [lbl for (_d, lbl) in heap]\n        return majority_vote(labs)\n\n    # Dispatch\n    preds = []\n    if method ==naive        for q in X_query:\n            preds.append(predict_naive(q))\n    elif method ==heap        for q in X_query:\n            preds.append(predict_heap(q))\n    elif method ==kdtree        # build tree once\n        tree = build_kdtree(X_train, y_train)\n        for q in X_query:\n            preds.append(predict_kdtree(tree, q))\n    else:\n        raise ValueError(fUnknown method '{method}'. Choose 'naive', 'heap' or 'kdtree'    return preds\n```\n\nExplanation of key components:\n\n1. **Data preparation**  \n   We convert `X_train`, `y_train` and `X_query` into NumPy arrays for convenient vectorized operations.\n\n2. **Majority voting**  \n   A helper `majority_vote` uses `collections.Counter`. In case of a tie, it picks the smallest label.\n\n3. **Naive method**  \n   For each query, compute all Euclidean distances in one vectorized call, pick the `k` smallest via `np.argpartition`, and vote.\n\n4. **Heap method**  \n   Still computes all distances at once, but then uses `heapq.nsmallest` on indices to keep only the `k` closest in O(n + k log n) time.\n\n5. **KD-Tree method**  \n   - We build a balanced KD-Tree by cycling the split axis (`depth % n_features`) and choosing the median along that axis.\n   - During query, we maintain a max-heap of size `k` (storing `(-distance, label)`) so that the largest distance is always at the root.\n   - We recurse into the subtree containing the query point first, then only visit the opposite branch if the splitting hyperplane is within the current worst distance in our heap.\n\nThis satisfies all requirements using only Python\u2019s standard library and NumPy."}
{"task_id": 456, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_covariance_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list[list[float]]:\n   Compute the sample covariance (or cross-covariance) matrix.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        An (n_samples \u00d7 n_features) matrix containing the first dataset.\n    Y : np.ndarray | None, optional\n        An (n_samples \u00d7 m_features) matrix for cross-covariance. If None,\n        the covariance matrix of X with itself is returned.\n\n    Returns\n    -------\n    list[list[float]] or int\n        The covariance matrix rounded to 4 decimal places, or -1 for invalid input.\n       # Number of observations\n    n_samples = X.shape[0]\n\n    # Rule 1: need at least two observations\n    if n_samples < 2:\n        return -1\n\n    # If Y is not provided, use X itself\n    if Y is None:\n        Y = X\n    else:\n        # Rule 2: if Y is provided, it must have the same number of rows\n        if Y.shape[0] != n_samples:\n            return -1\n\n    # Compute column means\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n\n    # Center the data\n    X_centered = X - mean_X\n    Y_centered = Y - mean_Y\n\n    # Compute (unbiased) sample covariance matrix: (X\u1d40 Y) / (n_samples - 1)\n    cov_matrix = (X_centered.T @ Y_centered) / (n_samples - 1)\n\n    # Round to 4 decimal places and convert to list of lists\n    cov_matrix_rounded = np.round(cov_matrix, 4)\n    return cov_matrix_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. Check that `X` has at least two rows; otherwise, return `-1`.\n2. If `Y` is provided, ensure it has the same number of rows as `X`; otherwise, return `-1`.\n3. Center both matrices by subtracting their column means.\n4. Compute the sample covariance or cross-covariance as `(X_centered.T @ Y_centered) / (n_samples - 1)`.\n5. Round every element to 4 decimal places and return as a Python list of lists."}
{"task_id": 457, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    # 1. Validate alpha\n    if not (0 <= alpha <= 1):\n        return -1\n\n    # 2. Vectorise weights\n    w = np.asarray(weights, dtype=float)\n\n    # 3. Compute L2 part: 0.5 * alpha * sum(w_i^2)\n    l2_term = 0.5 * alpha * np.sum(w * w)\n\n    # 4. Compute L1 part: (1 - alpha) * sum(|w_i|)\n    l1_term = (1 - alpha) * np.sum(np.abs(w))\n\n    penalty = l2_term + l1_term\n\n    # 5. Round to 4 decimal places and return as Python float\n    return float(round(penalty, 4))\n```\n\nExample usage:\n\n```python\n>>> elastic_net_penalty([1.2, -0.7, 3.3], 0.5)\n4.115\n>>> elastic_net_penalty([0, 0, 0], 0)\n0.0\n>>> elastic_net_penalty([1, 2, 3], 1.2)\n-1\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n   Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n       # Step 1: pull out Python ints and validate\n    try:\n        labels_iter = list(labels)\n    except Exception:\n        return -1\n\n    labels_int = []\n    for x in labels_iter:\n        # try to convert to an integer\n        try:\n            xi = int(x)\n        except Exception:\n            return -1\n        # ensure it was actually integral\n        if x != xi:\n            return -1\n        if xi < 0:\n            return -1\n        labels_int.append(xi)\n\n    n = len(labels_int)\n    # Step 2: infer num_classes if needed\n    if num_classes is None:\n        if n == 0:\n            num_classes = 0\n        else:\n            num_classes = max(labels_int) + 1\n    else:\n        # if user gave a non-int num_classes or negative, reject\n        try:\n            nc = int(num_classes)\n        except Exception:\n            return -1\n        if nc != num_classes or nc < 0:\n            return -1\n        num_classes = nc\n\n    # Step 3: check that num_classes is sufficient\n    if n > 0 and num_classes <= max(labels_int):\n        return -1\n\n    # Step 4: build one-hot matrix\n    # If there are no labels, just return an empty list\n    if n == 0:\n        return []\n\n    one_hot = []\n    for lbl in labels_int:\n        row = [0] * num_classes\n        row[lbl] = 1\n        one_hot.append(row)\n\n    return one_hot\n```\n\nExplanation of key steps:\n\n1. We first attempt to make a list out of `labels`. If that fails, we immediately return -1.\n2. We iterate through each element, converting it to a Python `int`, checking that there\u2019s no loss of information (to reject floats like `1.2`), and verifying it\u2019s non\u2010negative.\n3. If `num_classes` is not provided, we infer it as `max(labels) + 1` (or `0` if the label list is empty). If it is provided, we check that it\u2019s a non\u2010negative integer.\n4. We ensure `num_classes` is at least `max(labels) + 1`. Otherwise we return -1.\n5. Finally, we construct the list of one-hot rows and return it (or an empty list if there are no labels).\n"}
{"task_id": 459, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport heapq\n\ndef knn_validate_heap(X_train:np.ndarray                      Y_train:np.ndarray                      X_val:np.ndarray                      Y_val:np.ndarray                      k: int) -> tuple[float, list[int]]:\n   Validate a k-NN classifier using a heap-based neighbour selection.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples with shape (n_train, n_features).\n    Y_train : np.ndarray\n        Integer class labels for the training samples.\n    X_val : np.ndarray\n        Validation samples with shape (n_val, n_features).\n    Y_val : np.ndarray\n        True labels for the validation samples.\n    k : int\n        Number of nearest neighbours to consider (1 \u2264 k \u2264 n_train).\n\n    Returns\n    -------\n    tuple\n        (accuracy, predicted_labels) where accuracy is rounded to 4 decimals\n        and predicted_labels is a list of ints.\n       n_val = X_val.shape[0]\n    predicted_labels: list[int] = []\n\n    for i in range(n_val):\n        x = X_val[i]\n        # max-heap implemented via pushing negative distances\n        heap: list[tuple[float, int]] = []\n\n        # scan through training samples\n        for j, x_train in enumerate(X_train):\n            # compute Euclidean distance\n            dist = np.linalg.norm(x_train - x)\n            # push negative so that the smallest distances stay in the heap\n            heapq.heappush(heap, (-dist, j))\n            # if we exceed k neighbours, pop the farthest (most negative)\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n        # extract the indices of the k nearest neighbours\n        neighbour_idxs = [idx for (_, idx) in heap]\n        neighbour_labels = Y_train[neighbour_idxs]\n        # majority vote\n        counts = np.bincount(neighbour_labels)\n        pred = int(np.argmax(counts))\n        predicted_labels.append(pred)\n\n    # compute accuracy\n    correct = int(np.sum(np.array(predicted_labels) == Y_val))\n    accuracy = round(correct / n_val, 4)\n\n    return accuracy, predicted_labels\n```"}
{"task_id": 460, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X: np.ndarray, Y: np.ndarray | None = None) -> list | int:\n   Compute the Pearson correlation matrix between the columns of X and Y.\n\n    The function falls back to \u03c1(X, X) when Y is omitted. Zero standard\n    deviation in any column leads to an undefined correlation; the function\n    then returns -1.\n\n    Args:\n        X: 2-D numpy array of shape (n_samples, n_features_X).\n        Y: Optional 2-D numpy array of shape (n_samples, n_features_Y).\n\n    Returns:\n        A list of lists with the correlation coefficients rounded to four\n        decimals, or -1 if the computation is not possible.\n       # Ensure X is two-dimensional\n    if X.ndim != 2:\n        raise ValueErrorX must be a 2-D array    n, p = X.shape\n\n    # If Y is not given, correlate X with itself\n    if Y is None:\n        Y = X\n    else:\n        # Check that Y has the same number of rows\n        if Y.ndim != 2 or Y.shape[0] != n:\n            raise ValueErrorY must be a 2-D array with the same number of rows as X    _, q = Y.shape\n\n    # Center X and Y\n    X_mean = X.mean(axis=0)\n    Y_mean = Y.mean(axis=0)\n    Xc = X - X_mean\n    Yc = Y - Y_mean\n\n    # Compute population standard deviations\n    sigma_x = np.sqrt((Xc * Xc).mean(axis=0))  # shape (p,)\n    sigma_y = np.sqrt((Yc * Yc).mean(axis=0))  # shape (q,)\n\n    # If any standard deviation is zero, correlation is undefined\n    if np.any(sigma_x == 0) or np.any(sigma_y == 0):\n        return -1\n\n    # Compute covariance matrix (population covariance)\n    # cov_ij = (1/n) * sum_k Xc[k,i] * Yc[k,j]\n    cov = (Xc.T @ Yc) / n  # shape (p, q)\n\n    # Normalize to get correlation\n    denom = np.outer(sigma_x, sigma_y)  # shape (p, q)\n    corr = cov / denom\n\n    # Round to four decimals and convert to Python list of lists\n    corr_rounded = np.round(corr, 4).tolist()\n    return corr_rounded\n```\n\nExplanation of key steps:\n\n1. **Centering:** subtract each column\u2019s mean so that the centered data have mean zero.\n2. **Population standard deviation:** computed as sqrt(mean of squared deviations).\n3. **Covariance:** computed as \\((X_c^T Y_c)/n\\).\n4. **Correlation:** dividing each covariance by the product of the corresponding standard deviations.\n5. **Zero\u2010variance check:** if any column in `X` or `Y` has \u03c3=0, we return `-1`.\n6. **Rounding:** use `np.round(..., 4)` and convert the result into a native Python list of lists."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n_samples = y_arr.shape[0]\n\n    # Special case: no boosting rounds\n    if n_estimators <= 0:\n        init_pred = np.full(n_samples, y_arr.mean())\n        return np.round(init_pred, 4).tolist()\n\n    # Initialize prediction to the mean of y\n    y_pred = np.full(n_samples, y_arr.mean())\n\n    # Unique sorted x-values for potential splits\n    unique_vals = np.unique(x_arr)\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_arr - y_pred\n\n        # Stop early if residuals are all exactly zero\n        if np.all(residuals == 0):\n            break\n\n        best_sse = None\n        best_t = None\n        best_vL = None\n        best_vR = None\n\n        # Try every split threshold (all unique x except the largest)\n        for t in unique_vals[:-1]:\n            left_mask = x_arr <= t\n            right_mask = ~left_mask\n\n            # Skip invalid splits\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n\n            r_left = residuals[left_mask]\n            r_right = residuals[right_mask]\n\n            vL = r_left.mean()\n            vR = r_right.mean()\n\n            # Sum of squared errors for this stump\n            sse_left = ((r_left - vL) ** 2).sum()\n            sse_right = ((r_right - vR) ** 2).sum()\n            sse = sse_left + sse_right\n\n            # Keep the best split (first in case of ties)\n            if best_sse is None or sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n\n        # Build the stump's prediction of the residuals\n        if best_sse is None:\n            # No valid split found => constant stump\n            const_pred = residuals.mean()\n            stump_pred = np.full(n_samples, const_pred)\n        else:\n            stump_pred = np.where(x_arr <= best_t, best_vL, best_vR)\n\n        # Update the ensemble prediction\n        y_pred += learning_rate * stump_pred\n\n    # Round final predictions to 4 decimals and return as list\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 462, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter. A value of 0 (or 1) returns\n           the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(mfccs, np.ndarray):\n        raise TypeError(\"mfccs must be a NumPy array\")\n    if mfccs.ndim != 2:\n        raise ValueError(\"mfccs must be a 2D array of shape (G, C)\")\n    if not (isinstance(D, (int, np.integer)) and D >= 0):\n        raise ValueError(\"D must be a non-negative integer\")\n\n    # For D == 0 or D == 1, the lifter is all ones => no change\n    if D <= 1:\n        return mfccs\n\n    G, C = mfccs.shape\n\n    # Compute the lifter vector of length C\n    n = np.arange(C)\n    lifter = 1.0 + (D / 2.0) * np.sin(np.pi * n / D)\n\n    # Ensure same dtype as mfccs for exact preservation\n    lifter = lifter.astype(mfccs.dtype, copy=False)\n\n    # Elementwise multiply each column n by lifter[n]\n    # Broadcasting lifter over the first dimension\n    return mfccs * lifter\n```\n\nExplanation:\n1. We first guard against invalid inputs (non-array or wrong dimensions, negative/non-integer `D`).\n2. If `D` is 0 or 1, the sine term vanishes and the lifter is all ones, so we return `mfccs` unchanged.\n3. Otherwise we build a 1D array `lifter` of length `C` according to  \n   lifter[n] = 1 + (D/2) * sin(pi * n / D)\n4. We cast it to the same dtype as `mfccs` and multiply across columns by leveraging NumPy broadcasting."}
{"task_id": 463, "completion_id": 0, "completion": "```python\nimport math\n\ndef compute_ball_radius(centroid: list[float], X: list[list[float]]) -> float:\n   Compute the maximum Euclidean distance between *centroid* and the\n    points in *X* (i.e., the Ball-tree node radius), rounded to 4 decimals    if not X:\n        return 0.0\n\n    max_dist = 0.0\n    for point in X:\n        # sum of squared differences\n        squared_sum = 0.0\n        for c_val, p_val in zip(centroid, point):\n            diff = p_val - c_val\n            squared_sum += diff * diff\n\n        dist = math.sqrt(squared_sum)\n        if dist > max_dist:\n            max_dist = dist\n\n    # round to 4 decimal places\n    return round(max_dist, 4)\n```\n\nExplanation of key steps:\n1. If `X` is empty, immediately return `0.0`.\n2. Iterate over each point in `X`, compute the Euclidean distance to the `centroid` by summing squared differences and then taking the square root.\n3. Track the maximum distance seen.\n4. Finally, round that maximum distance to four decimal places and return it."}
{"task_id": 464, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_validate(X_train: np.ndarray,\n                 Y_train: np.ndarray,\n                 X_val: np.ndarray,\n                 Y_val: np.ndarray,\n                 k: int) -> tuple[float, list[int]]:\n   k-Nearest Neighbours (k-NN) validation helper.\n\n    The function must predict the label of every sample in *X_val* using the\n    k nearest neighbours found in *X_train*. It then compares the predictions\n    with *Y_val* and returns the classification accuracy (rounded to 4 decimal\n    places) together with the list of all predicted labels.\n       n_val = X_val.shape[0]\n    predictions = []\n\n    # For each validation sample\n    for i in range(n_val):\n        x = X_val[i]\n\n        # Compute squared Euclidean distances to all training samples\n        # (no need to take square root since ordering is preserved)\n        diffs = X_train - x  # shape (n_train, n_features)\n        dists_sq = np.sum(diffs * diffs, axis=1)  # shape (n_train,)\n\n        # Find the indices of the k smallest distances\n        nn_indices = np.argsort(dists_sq)[:k]\n\n        # Retrieve their labels\n        nn_labels = Y_train[nn_indices]\n\n        # Majority vote (ties broken by choosing the smallest label)\n        counts = np.bincount(nn_labels)\n        pred_label = np.argmax(counts)\n\n        predictions.append(int(pred_label))\n\n    # Compute accuracy\n    Y_pred = np.array(predictions)\n    correct = np.sum(Y_pred == Y_val)\n    accuracy = correct / n_val\n\n    # Round to 4 decimal places\n    accuracy = round(accuracy, 4)\n\n    return accuracy, predictions\n```\n\nExplanation:\n\n1. For each sample in `X_val`, we compute its squared Euclidean distance to every sample in `X_train` (we omit the square root because it doesn\u2019t change the ranking).\n2. We select the `k` training samples with the smallest distances, collect their labels, and use `np.bincount` + `np.argmax` to perform a majority vote (ties automatically go to the smaller label).\n3. We accumulate all predictions in a list.\n4. Finally, we compute the fraction of correct predictions, round it to four decimal places, and return it alongside the list of predicted labels."}
{"task_id": 465, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef rbf_kernel(gamma: float, **kwargs):\n   Create and return a Gaussian RBF kernel function.\n\n    The returned function takes two 1-D vectors and computes the Gaussian\n    Radial Basis Function (RBF) similarity between them.\n\n    Args:\n        gamma: A non-negative real number that controls the width of the RBF\n               kernel. A larger gamma makes the kernel decay faster.\n        **kwargs: Optional keyword arguments kept for interface compatibility\n                  (not used in the computation).\n\n    Returns:\n        Function ``f(x1, x2)`` such that ``f`` returns the value of\n        ``exp( -gamma * ||x1 - x2||^2 )`` rounded to four decimal places.\n       def f(x1, x2):\n        # Convert inputs to NumPy arrays of floats\n        x1_arr = np.asarray(x1, dtype=float)\n        x2_arr = np.asarray(x2, dtype=float)\n\n        # Compute the squared Euclidean distance\n        diff = x1_arr - x2_arr\n        dist_sq = np.dot(diff, diff)\n\n        # Compute the RBF kernel\n        val = np.exp(-gamma * dist_sq)\n\n        # Round to 4 decimal places and return as a Python float\n        return float(np.round(val, 4))\n\n    return f\n```\n\nExplanation of key steps:\n- We convert both inputs to NumPy arrays so that subtraction and dot\u2010product work elementwise.\n- The squared Euclidean norm is computed via `np.dot(diff, diff)`.\n- We apply the Gaussian RBF formula `exp(-gamma * dist_sq)`.\n- Finally, we round the result to 4 decimal places per specification and return it as a standard Python float."}
{"task_id": 466, "completion_id": 0, "completion": "```python\nimport string\nimport string\n\n# Build the translation table once so it can be reused efficiently by every\n# call to ``strip_punctuation``.\n_PUNC_TABLE: dict[int, None] = str.maketrans('', '', string.punctuation)\n\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    # Translate (remove) punctuation, then strip whitespace\n    cleaned = line.translate(_PUNC_TABLE)\n    return cleaned.strip()\n```"}
{"task_id": 467, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regularization(weights: list[float | int],\n                   C: float = 0.01,\n                   norm: str = \"l2\") -> tuple[float, list[float]] | int:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    # Convert to numpy array of floats for vectorized ops\n    w = np.array(weights, dtype=float)\n\n    if norm == \"l1\":\n        # penalty = C * sum(|w_i|)\n        penalty = C * np.sum(np.abs(w))\n        # gradient_i = C * sign(w_i)\n        grad = C * np.sign(w)\n    elif norm == \"l2\":\n        # penalty = 0.5 * C * sum(w_i^2)\n        penalty = 0.5 * C * np.sum(w ** 2)\n        # gradient_i = C * w_i\n        grad = C * w\n    else:\n        return -1\n\n    # Round penalty and gradients to 4 decimal places\n    penalty_rounded = round(penalty, 4)\n    grad_rounded = [round(g, 4) for g in grad.tolist()]\n\n    return penalty_rounded, grad_rounded\n```\n\nExplanation of key steps:\n\n1. We convert the input weight list to a NumPy array of floats, so we can use vectorized operations for computing sums, absolute values, squares, and signs.\n2. For `\"l1\"`:\n   - Penalty = C \u00b7 \u03a3|w\u1d62|\n   - Gradient = C \u00b7 sign(w\u1d62)\n3. For `\"l2\"`:\n   - Penalty = \u00bd \u00b7 C \u00b7 \u03a3w\u1d62\u00b2\n   - Gradient = C \u00b7 w\u1d62\n4. Any unsupported `norm` string leads to an immediate return of `-1`.\n5. Finally, we round the scalar penalty and each entry of the gradient to 4 decimal places, as requested."}
{"task_id": 468, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        learning_rate: float = 0.1,\n        num_iters: int = 10000) -> list[int]:\n   Train a binary logistic-regression model with gradient descent and\n    predict labels for the test set.\n\n    Args:\n        X_train: Training feature matrix of shape (m, n).\n        y_train: Training labels \u2013 either shape (m,) or (m, 1) containing 0/1.\n        X_test:  Test feature matrix of shape (k, n).\n        learning_rate: Step size used by gradient descent (default 0.1).\n        num_iters:      Number of optimisation iterations (default 10000).\n\n    Returns:\n        A list of length *k* holding the predicted class (0 or 1) for every\n        test sample, in order.\n       # Ensure y_train is a column vector of shape (m, 1)\n    y = y_train.reshape(-1, 1) if y_train.ndim == 1 else y_train.copy()\n    \n    m, n = X_train.shape\n    \n    # Append column of ones to X_train and X_test for the bias term\n    Xb = np.hstack([np.ones((m, 1)), X_train])\n    Xb_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights (including bias) to zeros: shape (n+1, 1)\n    W = np.zeros((n + 1, 1))\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    \n    # Gradient descent loop\n    for _ in range(num_iters):\n        z = Xb @ W                 # (m, 1)\n        h = sigmoid(z)             # (m, 1)\n        grad = (Xb.T @ (h - y)) / m  # (n+1, 1)\n        W -= learning_rate * grad\n    \n    # Predict on X_test\n    probs = sigmoid(Xb_test @ W)        # (k, 1)\n    preds = (probs >= 0.5).astype(int)  # (k, 1)\n    \n    # Convert to a flat list of Python ints\n    return preds.ravel().tolist()\n```\n\nExplanation of key steps:\n1. We reshape `y_train` to `(m,1)` if necessary.\n2. We prepend a column of ones to `X_train` and `X_test` to learn the bias term as part of the weight vector.\n3. We initialize all weights (including bias) to zero.\n4. We iterate `num_iters` times, each time computing\n   - z = Xb \u00b7 W\n   - h = sigmoid(z)\n   - gradient = (Xb\u1d40 \u00b7 (h \u2212 y)) / m\n   - W \u2190 W \u2212 learning_rate \u00d7 gradient\n5. After training, we compute the test probabilities via the sigmoid of the linear scores, threshold at 0.5, and return the predicted labels as a Python list of ints."}
{"task_id": 469, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n    def f(x1, x2):\n        # Convert inputs to 1-D numpy arrays of float\n        arr1 = np.asarray(x1, dtype=float).ravel()\n        arr2 = np.asarray(x2, dtype=float).ravel()\n        # Check for same length\n        if arr1.shape[0] != arr2.shape[0]:\n            return -1\n        # Compute dot product and return as Python float\n        return float(np.inner(arr1, arr2))\n\n    return f\n```\n\nExplanation:\n\n1. We ignore any `kwargs` passed to `linear_kernel`, fulfilling the \u201cfactory\u201d signature.\n2. The inner function `f(x1, x2)`:\n   - Uses `np.asarray(..., dtype=float)` to coerce the inputs into numeric numpy arrays.\n   - Calls `.ravel()` to ensure they are 1-D.\n   - If their lengths differ, immediately returns `-1` (an integer).\n   - Otherwise computes the dot product with `np.inner` and casts the result to a built-in Python `float`."}
{"task_id": 470, "completion_id": 0, "completion": "```python\nimport os\n\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                   relative and may contain symlinks or redundant path\n                   elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    # Resolve to an absolute canonical path (resolves symlinks, ., .., etc.)\n    canonical = os.path.realpath(file_path)\n    # Extract and return the directory part (no trailing slash except for root)\n    return os.path.dirname(canonical)\n```\n\nExplanation:\n1. `os.path.realpath(path)` converts `path` into its absolute, canonical form, resolving any symbolic links and collapsing `.`/`..` segments.\n2. `os.path.dirname(...)` then returns the directory component of that canonical path, without a trailing separator (unless the directory is the root `/`)."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # make a copy so we don't modify in-place\n    new_q = [row.copy() for row in q_table]\n    old_value = new_q[state][action]\n\n    # compute expected Q for the next state under the \u03b5-soft policy\n    if next_state is None:\n        expected_q = 0.0\n    else:\n        row = new_q[next_state]\n        n_actions = len(row)\n        # find the greedy action (first max if tie)\n        greedy_idx = int(np.argmax(row))\n        expected_q = 0.0\n        for a_idx, qval in enumerate(row):\n            if a_idx == greedy_idx:\n                prob = (1 - epsilon) + epsilon / n_actions\n            else:\n                prob = epsilon / n_actions\n            expected_q += prob * qval\n\n    # compute TD target\n    target = reward + gamma * expected_q\n\n    # update\n    new_q[state][action] = old_value + lr * (target - old_value)\n\n    # round all entries to 4 decimals and return\n    rounded_q = [\n        [round(val, 4) for val in row]\n        for row in new_q\n    ]\n    return rounded_q\n```\n\nExplanation of key steps:\n\n1. We copy `q_table` into `new_q` so the original isn't mutated.\n2. If `next_state` is `None`, the expected future value is 0.\n3. Otherwise, we identify the greedy action in `next_state` (ties go to the first max).\n4. We compute the probability of each action under the \u03b5-soft policy:\n   - greedy action: `1 - \u03b5 + \u03b5/|A|`\n   - others: `\u03b5/|A|`\n5. We form the expected Q by summing `\u03c0(a|s') * Q[s',a]`.\n6. We form the TD target `r + \u03b3 * expected_q` and update `Q[state][action]`.\n7. Finally, we round every Q\u2010value to 4 decimal places and return."}
{"task_id": 472, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softmax(x: list | list[list]):\n   Return the softmax probabilities and their element-wise gradient.\n\n    Parameters\n    ----------\n    x : list | list[list]\n        A one- or two-dimensional numeric list.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple (probabilities, gradient) where both elements keep the same\n        shape as x and are rounded to 4 decimal places.\n       # Convert input to numpy array of floats\n    arr = np.array(x, dtype=float)\n    \n    # Compute max for numerical stability\n    if arr.ndim == 1:\n        # 1-D case\n        max_vals = arr.max()\n        shifted = arr - max_vals\n        exps = np.exp(shifted)\n        sum_exps = exps.sum()\n        probs = exps / sum_exps\n    elif arr.ndim == 2:\n        # 2-D case: row\u2010wise (last axis)\n        max_vals = arr.max(axis=1, keepdims=True)\n        shifted = arr - max_vals\n        exps = np.exp(shifted)\n        sum_exps = exps.sum(axis=1, keepdims=True)\n        probs = exps / sum_exps\n    else:\n        raise ValueErrorInput must be 1-D or 2-D list    # Element\u2010wise gradient (diagonal of Jacobian)\n    grad = probs * (1 - probs)\n\n    # Round to 4 decimals and convert back to plain Python lists\n    probs_rounded = np.round(probs, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n\n    return probs_rounded, grad_rounded\n```\n\nExplanation of key steps:\n1. **Numerical stability**: subtract the maximum value along the axis before exponentiating.\n2. **Row-wise** softmax for 2D arrays uses `axis=1, keepdims=True` to preserve shape.\n3. **Gradient** is computed element\u2010wise as `s * (1 - s)`.\n4. **Rounding** to 4 decimal places with `np.round` and converting to native Python lists via `tolist()`."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None\n                  ) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n   Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes (>= 2).\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                   of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where\n            X_train: shape (m * n_train, 2)\n            X_val:   shape (m * n_val,   2)\n            Y_train: shape (m * n_train,)\n            Y_val:   shape (m * n_val,)\n        All coordinates are rounded to 4 decimal places.\n       if seed is not None:\n        random.seed(seed)\n\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # Compute the x-range for class i\n        col_index = i // 2\n        x_min = (col_index + 0.1) * 10.0\n        x_max = (col_index + 0.9) * 10.0\n\n        # Compute the y-range for class i\n        row_index = i % 2\n        y_min = (row_index * interval + 0.1) * 10.0\n        y_max = (row_index * interval + 0.9) * 10.0\n\n        # Label: (i - 0.5) * 2  \u2192  -1 for i=0, +1 for i=1, -1 for i=2, etc.\n        label = (i - 0.5) * 2\n\n        # Generate training samples\n        for _ in range(n_train):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_train_list.append([x, y])\n            Y_train_list.append(label)\n\n        # Generate validation samples\n        for _ in range(n_val):\n            x = random.uniform(x_min, x_max)\n            y = random.uniform(y_min, y_max)\n            X_val_list.append([x, y])\n            Y_val_list.append(label)\n\n    # Convert to NumPy arrays\n    X_train = np.array(X_train_list, dtype=float)\n    X_val   = np.array(X_val_list,   dtype=float)\n    Y_train = np.array(Y_train_list, dtype=float)\n    Y_val   = np.array(Y_val_list,   dtype=float)\n\n    # Round coordinates to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val   = np.round(X_val,   4)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nExplanation of key steps:\n\u2022 We seed Python\u2019s built-in `random` module if `seed` is provided so that calls to `random.uniform` are reproducible.  \n\u2022 For each class index `i`, we compute its column in the grid as `i//2` and its row (0 or 1) as `i%2`.  \n\u2022 The x-range and y-range are computed via the formulas  \n    x \u223c U([ (\u230ai/2\u230b + 0.1)\u00b710, (\u230ai/2\u230b + 0.9)\u00b710 ])  \n    y \u223c U([ ((i mod 2)*interval + 0.1)\u00b710, ((i mod 2)*interval + 0.9)\u00b710 ])  \n\u2022 The label is `(i - 0.5) * 2`, which yields \u20131 for even `i` and +1 for odd `i`.  \n\u2022 We collect `n_train` and `n_val` points per class, convert to NumPy arrays, and round all coordinates to four decimal places."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t,\n                learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n   Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current parameter value(s).\n    grad : float | np.ndarray\n        Gradient w.r.t. w.\n    m_prev : float | np.ndarray | None\n        Previous first moment estimate. If None, treated as zero.\n    v_prev : float | np.ndarray | None\n        Previous second moment estimate. If None, treated as zero.\n    t : int\n        Time step, must be >= 1.\n    learning_rate : float\n        Step size \u03b1.\n    b1 : float\n        Exponential decay rate for first moment.\n    b2 : float\n        Exponential decay rate for second moment.\n    eps : float\n        Small epsilon for numerical stability.\n\n    Returns\n    -------\n    w_new : float | np.ndarray\n        Updated parameters.\n    m_t : float | np.ndarray\n        Updated first moment.\n    v_t : float | np.ndarray\n        Updated second moment.\n       # Convert inputs to numpy arrays for unified operations\n    w_arr = np.asarray(w)\n    g_arr = np.asarray(grad)\n\n    # Initialize moments if this is the first step\n    if m_prev is None:\n        m_prev_arr = np.zeros_like(g_arr)\n    else:\n        m_prev_arr = np.asarray(m_prev)\n\n    if v_prev is None:\n        v_prev_arr = np.zeros_like(g_arr)\n    else:\n        v_prev_arr = np.asarray(v_prev)\n\n    # Update biased first and second moment estimates\n    m_t = b1 * m_prev_arr + (1.0 - b1) * g_arr\n    v_t = b2 * v_prev_arr + (1.0 - b2) * (g_arr * g_arr)\n\n    # Compute bias-corrected estimates\n    m_hat = m_t / (1.0 - b1**t)\n    v_hat = v_t / (1.0 - b2**t)\n\n    # Update parameters\n    w_new = w_arr - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_t, v_t\n```\n\nExplanation of the steps:\n\n1. **Initialization**  \n   If `m_prev` or `v_prev` is `None`, we create zero-arrays of the same shape as `grad`.\n\n2. **First and second moment updates**  \n   m_t = \u03b2\u2081\u00b7m_{t\u22121} + (1\u2212\u03b2\u2081)\u00b7grad  \n   v_t = \u03b2\u2082\u00b7v_{t\u22121} + (1\u2212\u03b2\u2082)\u00b7grad\u00b2  \n\n3. **Bias correction**  \n   m\u0302_t = m_t / (1\u2212\u03b2\u2081\u1d57)  \n   v\u0302_t = v_t / (1\u2212\u03b2\u2082\u1d57)  \n\n4. **Parameter update**  \n   w_new = w \u2212 \u03b1\u00b7m\u0302_t / (\u221av\u0302_t + \u03b5)\n\nThis works for both scalars and arbitrary-shaped NumPy arrays."}
{"task_id": 477, "completion_id": 0, "completion": "```python\nimport heapq\nfrom typing import List, Tuple\n\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0]) if rows else 0\n    sr, sc = start\n    tr, tc = dest\n\n    # Check trivial / invalid cases\n    if not (0 <= sr < rows and 0 <= sc < cols):\n        return -1\n    if not (0 <= tr < rows and 0 <= tc < cols):\n        return -1\n    if grid[sr][sc] == 1 or grid[tr][tc] == 1:\n        return -1\n    if start == dest:\n        return 0\n\n    # Manhattan distance heuristic\n    def h(r: int, c: int) -> int:\n        return abs(r - tr) + abs(c - tc)\n\n    # g_score[r][c] = best-known cost from start to (r,c)\n    # Initialize to +inf\n    INF = float('inf')\n    g_score = [[INF] * cols for _ in range(rows)]\n    g_score[sr][sc] = 0\n\n    # Priority queue entries: (f, g, r, c)\n    # f = g + h\n    pq: List[Tuple[int, int, int, int]] = []\n    start_f = h(sr, sc)\n    heapq.heappush(pq, (start_f, 0, sr, sc))\n\n    # Four possible movements: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    while pq:\n        f, g, r, c = heapq.heappop(pq)\n\n        # If this popped state has a stale g (worse than best known), skip it\n        if g > g_score[r][c]:\n            continue\n\n        # If we've reached the target, return the path cost\n        if (r, c) == (tr, tc):\n            return g\n\n        # Explore neighbors\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0:\n                new_g = g + 1\n                # If this path to neighbor is better, record and push\n                if new_g < g_score[nr][nc]:\n                    g_score[nr][nc] = new_g\n                    new_f = new_g + h(nr, nc)\n                    heapq.heappush(pq, (new_f, new_g, nr, nc))\n\n    # If we exhaust the queue without reaching dest, it's unreachable\n    return -1\n```\n\nExplanation of key points:\n\n1. **Input validation**: We immediately return `-1` if `start` or `dest` is out of bounds or lies on an obstacle. If `start == dest`, we return `0`.\n\n2. **Heuristic**: The Manhattan distance function `h(r, c)` is used to compute `h = |r - tr| + |c - tc|`.\n\n3. **`g_score` matrix**: Tracks the best-known cost (`g`) from the start to each cell. It is initialized to infinity for all cells except the start, which is set to `0`.\n\n4. **Priority queue (`pq`)**: Holds tuples `(f, g, r, c)`, where `f = g + h(r,c)`. We always pop the node with the smallest `f`. To avoid processing stale entries (where we later found a strictly better `g`), we compare the popped `g` with `g_score[r][c]`.\n\n5. **Neighbor expansion**: For each of the four directions, we check bounds and obstacles. If moving to a neighbor yields a strictly better `g`, we update `g_score` and push the new `(f, g, r, c)` into the heap.\n\n6. **Termination**: Return `g` immediately upon popping the destination. If the queue empties without reaching the destination, return `-1`."}
{"task_id": 478, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    # Handle completely empty input (empty list or array of size 0)\n    if X is None or len(X) == 0:\n        return []\n\n    # Convert to a NumPy array of floats\n    X_arr = np.array(X, dtype=float)\n\n    # If after conversion there's no data or no features, return empty list\n    if X_arr.size == 0 or X_arr.ndim != 2:\n        return []\n\n    n_samples, n_features = X_arr.shape\n    if n_samples == 0 or n_features == 0:\n        return []\n\n    # 1) Compute the mean of each column (feature)\n    #    Population mean: \u03bc = (1/n) * sum_i x_i\n    means = X_arr.sum(axis=0) / n_samples\n\n    # 2) Compute the sum of squared deviations from the mean for each feature\n    diffs = X_arr - means               # shape: (n_samples, n_features)\n    sq_diffs = diffs ** 2               # elementwise square\n    variances = sq_diffs.sum(axis=0) / n_samples  # population variance\n\n    # 3) Take square root to get population standard deviation\n    std_devs = np.sqrt(variances)\n\n    # 4) Round to 4 decimal places and convert to Python floats\n    result = [round(float(v), 4) for v in std_devs]\n\n    return result\n```\n\nExplanation of key steps:\n1. We first check if `X` is empty (either an empty list or an empty NumPy array) and immediately return `[]` if so.\n2. We convert the input into a 2-D NumPy array of dtype `float`. If the resulting array has zero size or is not 2-dimensional, we again return `[]`.\n3. We compute the column-wise mean: \u03bc_j = (1/n) \u2211_{i=1}^n X_{ij}.\n4. We compute the population variance for each column as \u03c3_j\u00b2 = (1/n) \u2211_{i=1}^n (X_{ij} - \u03bc_j)\u00b2.\n5. We take square roots \u03c3_j = \u221a\u03c3_j\u00b2 to get the standard deviations.\n6. Finally we round each \u03c3_j to 4 decimal places and return them in a plain Python list."}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n   Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n       # If there are no time-steps, nothing to do\n    if not rewards:\n        return []\n    \n    # Optionally seed numpy's RNG for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Number of arms\n    N = len(rewards[0])\n    \n    # Initialize value estimates and pull counts\n    V = [ev_prior] * N\n    counts = [0] * N\n    \n    # Simulate over each time-step\n    for t_step in rewards:\n        # Decide whether to explore or exploit\n        if np.random.random() < epsilon:\n            # Explore: pick random arm\n            arm = np.random.randint(0, N)\n        else:\n            # Exploit: pick arm with highest estimated value\n            # np.argmax breaks ties by smallest index\n            arm = int(np.argmax(V))\n        \n        # Observe reward for chosen arm at this time-step\n        r = t_step[arm]\n        \n        # Update pull count\n        counts[arm] += 1\n        \n        # Incremental update of sample average\n        V[arm] += (r - V[arm]) / counts[arm]\n    \n    # Round final value estimates to 4 decimal places\n    return [round(v, 4) for v in V]\n```\n\nExplanation of key steps:\n1. We seed NumPy's RNG if `seed` is provided.\n2. We initialize each arm's estimate to `ev_prior` and track how many times each arm is pulled.\n3. At each time-step, with probability `epsilon` we choose an arm uniformly at random; otherwise we pick the arm with the highest current estimate (`np.argmax` breaks ties by the smallest index).\n4. After observing the reward, we update the chosen arm's estimate using the incremental sample\u2010mean formula.\n5. Finally, we return the list of value estimates rounded to four decimal places."}
{"task_id": 480, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_spectrogram(\n    x: \"np.ndarray\",\n    window_duration: float = 0.025,\n    stride_duration: float = 0.01,\n    mean_normalize: bool = True,\n    window: str = \"hamming\",\n    n_filters: int = 20,\n    center: bool = True,\n    alpha: float = 0.95,\n    fs: int = 44000,\n):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    # 1) Pre-emphasis\n    if alpha != 0:\n        # y[0] = x[0]; y[n] = x[n] - alpha*x[n-1]\n        y = np.empty_like(x, dtype=float)\n        y[0] = x[0]\n        y[1:] = x[1:] - alpha * x[:-1]\n    else:\n        y = x.astype(float).copy()\n\n    # 2) Framing\n    frame_len = int(round(window_duration * fs))\n    hop_len   = int(round(stride_duration * fs))\n    if frame_len < 1 or hop_len < 1:\n        raise ValueError(\"window_duration or stride_duration too small for given fs\")\n\n    if center:\n        pad = frame_len // 2\n        y_padded = np.pad(y, (pad, pad), mode='constant', constant_values=0.0)\n    else:\n        y_padded = y\n\n    num_frames = 1 + int(np.floor((len(y_padded) - frame_len) / hop_len))\n    if num_frames < 1:\n        # not enough signal\n        return [], []\n\n    # stack frames\n    frames = np.zeros((num_frames, frame_len), dtype=float)\n    for i in range(num_frames):\n        start = i * hop_len\n        frames[i, :] = y_padded[start : start + frame_len]\n\n    # 3) Window function\n    if window.lower() == \"hamming\":\n        win = np.hamming(frame_len)\n    elif window.lower() in (\"hann\", \"hanning\"):\n        win = np.hanning(frame_len)\n    elif window.lower() == \"blackman_harris\":\n        n = np.arange(frame_len)\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        win = (a0\n               - a1 * np.cos(2 * np.pi * n / (frame_len - 1))\n               + a2 * np.cos(4 * np.pi * n / (frame_len - 1))\n               - a3 * np.cos(6 * np.pi * n / (frame_len - 1)))\n    else:\n        raise ValueError(f\"Unknown window type '{window}'\")\n    frames *= win\n\n    # 4) Power spectrum (only non-redundant part)\n    N = frame_len\n    # rfft gives N/2+1 bins\n    spectrum = np.fft.rfft(frames, n=N, axis=1)\n    power_spec = (np.abs(spectrum) ** 2) / N   # shape (num_frames, N/2+1)\n\n    # 5) Mel filter bank\n    def hz2mel(f_hz):\n        return 2595.0 * np.log10(1.0 + f_hz / 700.0)\n\n    def mel2hz(m):\n        return 700.0 * (10.0 ** (m / 2595.0) - 1.0)\n\n    # mel scale range\n    mel_min = hz2mel(0.0)\n    mel_max = hz2mel(fs / 2.0)\n    # equally spaced in mel\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points  = mel2hz(mel_points)\n    # FFT bin indices\n    # bin k has center freq = k * fs / N\n    bin_indices = np.floor(hz_points * N / fs).astype(int)\n\n    n_bins = power_spec.shape[1]  # = N//2+1\n    fbank = np.zeros((n_filters, n_bins), dtype=float)\n\n    for i in range(1, n_filters + 1):\n        left  = bin_indices[i - 1]\n        center_b = bin_indices[i]\n        right = bin_indices[i + 1]\n\n        # ascending\n        if center_b > left:\n            up = np.arange(left, center_b)\n            fbank[i - 1, up] = (up - left) / float(center_b - left)\n        # descending\n        if right > center_b:\n            down = np.arange(center_b, right)\n            fbank[i - 1, down] = (right - down) / float(right - center_b)\n\n    # 6) Project power onto Mel filters\n    # result shape: (num_frames, n_filters)\n    filter_energies = power_spec @ fbank.T\n\n    # 7) Mean normalization (per column)\n    if mean_normalize:\n        col_means = filter_energies.mean(axis=0, keepdims=True)\n        filter_energies = filter_energies - col_means\n\n    # 8) Replace exact zeros with eps\n    eps = np.finfo(float).eps\n    filter_energies[filter_energies == 0.0] = eps\n\n    # energy per frame\n    energy_per_frame = power_spec.sum(axis=1)\n\n    # Round to 4 decimals and convert to Python lists\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n\n    return filter_energies, energy_per_frame\n```\n\nExplanation of key steps:\n\n1. **Pre-emphasis**   y[n] = x[n] \u2013 \u03b1\u00b7x[n\u20131], with y[0]=x[0].  \n2. **Framing**: segment the (optionally zero-padded) signal into overlapping windows of length `frame_len` with hop `hop_len`.  \n3. **Windowing**: apply Hamming, Hann, or Blackman\u2013Harris to each frame.  \n4. **Power spectrum**: compute real FFT (`rfft`) and take |\u22c5|\u00b2/N, keeping only the first N/2+1 bins.  \n5. **Mel filters**: map [0,fs/2] to Mel scale, place N_filters triangular band-pass filters in that domain, then convert back to FFT\u2010bin indices.  \n6. **Filter energies**: multiply the power spectrum by the Mel filter bank.  \n7. **Mean normalization** (optional).  \n8. **Zero\u2010value protection**: replace any exact zeros with machine \u03b5.  \n\nFinally, the code rounds all outputs to four decimal places and returns plain Python lists."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n   Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n       # Number of samples\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n\n    # Initialize all labels to -1 (noise)\n    labels = [-1] * n_samples\n    # Track which points have been visited\n    visited = [False] * n_samples\n    # The next cluster ID to assign\n    cluster_id = 0\n\n    def region_query(idx: int) -> list[int]:\n       Return indices of all points within eps of data[idx].        # Compute Euclidean distances from data[idx] to all points\n        diffs = data - data[idx]             # shape (n_samples, n_features)\n        dists = np.linalg.norm(diffs, axis=1)\n        # Neighbors are those with distance <= eps\n        neighbors = np.where(dists <= eps)[0]\n        return neighbors.tolist()\n\n    # Main loop: for each point, if unvisited, try to grow a cluster\n    for point_idx in range(n_samples):\n        if visited[point_idx]:\n            continue\n\n        visited[point_idx] = True\n        # Find all neighbors of point_idx\n        neighbors = region_query(point_idx)\n\n        # If not enough points to form a core point, mark as noise (-1)\n        if len(neighbors) < min_samples:\n            labels[point_idx] = -1\n        else:\n            # Start a new cluster\n            labels[point_idx] = cluster_id\n            # Seeds is the list of points we will try to expand\n            seeds = neighbors.copy()\n            i = 0\n            while i < len(seeds):\n                current = seeds[i]\n                if not visited[current]:\n                    visited[current] = True\n                    current_neighbors = region_query(current)\n                    # If current is also a core point, add its neighbors\n                    if len(current_neighbors) >= min_samples:\n                        for nbr in current_neighbors:\n                            if nbr not in seeds:\n                                seeds.append(nbr)\n                # If current is not yet assigned to any cluster (i.e., noise)\n                if labels[current] == -1:\n                    labels[current] = cluster_id\n                i += 1\n\n            # Finished expanding this cluster\n            cluster_id += 1\n\n    return labels\n```\n\nExplanation of the key steps:\n\n1. **Initialization**  \n   - `labels` is prefilled with `-1` for all points (marking them as noise initially).  \n   - `visited` keeps track of points we've already processed.  \n   - `cluster_id` will be assigned to new clusters as we discover them (starting at 0).\n\n2. **region_query**  \n   - Given an index `idx`, compute Euclidean distances from `data[idx]` to all other points in `data`.  \n   - Return the list of indices whose distance is \u2264 `eps`.\n\n3. **Main Loop**  \n   - For each point (in index order), if it's not yet visited, we mark it visited and retrieve its neighbors.  \n   - If there are fewer than `min_samples` neighbors, we leave it labeled as noise (`-1`).  \n   - Otherwise, we start a new cluster (using the current `cluster_id`), label the point, and attempt to expand the cluster:  \n     - Maintain a growing list `seeds` of points to examine.  \n     - For each point in `seeds`, if it hasn't been visited, mark it visited and get its neighbors;  \n       if it is also a core point, append its neighbors to `seeds`.  \n     - If a point was noise (`-1`), we re-label it to the current `cluster_id`.  \n   - Once expansion finishes, increment `cluster_id`.\n\n4. **Return**  \n   - The final `labels` list, where noise points remain `-1` and clusters are labeled `0, 1, 2, \u2026` in discovery order.\n"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If any label is negative, not an integer, or\n                    not less than num_classes (when num_classes is provided).\n    \"\"\"\n    # Convert input to numpy array\n    y_arr = np.array(y, copy=False)\n\n    # Check that it's 1-D\n    if y_arr.ndim != 1:\n        raise ValueError(f\"y must be a 1-D array or sequence, got array with shape {y_arr.shape}\")\n\n    # If empty input\n    n = y_arr.shape[0]\n    if n == 0:\n        # Determine num_classes for empty input\n        if num_classes is None:\n            num_classes = 0\n        return np.zeros((0, num_classes), dtype=int)\n\n    # Check integer type\n    if not np.issubdtype(y_arr.dtype, np.integer):\n        # If it's float but all values are integers, we can cast\n        if np.issubdtype(y_arr.dtype, np.floating) and np.all(np.floor(y_arr) == y_arr):\n            y_arr = y_arr.astype(int)\n        else:\n            raise ValueError(\"y must contain integer values only\")\n\n    # Check non-negative\n    if np.any(y_arr < 0):\n        raise ValueError(\"All labels must be non-negative\")\n\n    # Infer num_classes if needed\n    if num_classes is None:\n        num_classes = int(y_arr.max()) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError(\"num_classes must be a positive integer or None\")\n\n    # Check label bounds\n    if np.any(y_arr >= num_classes):\n        raise ValueError(\"All labels must be less than num_classes\")\n\n    # Build the one-hot matrix\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    rows = np.arange(n)\n    one_hot[rows, y_arr] = 1\n\n    return one_hot\n```\n\nExplanation of the key steps:\n1. **Input normalization**: Convert `y` to a NumPy array and enforce that it is 1-D.\n2. **Empty input**: If `y` is empty, we return an array of shape `(0, num_classes)` (or `(0, 0)` if `num_classes` is also `None`).\n3. **Type checks**:  \n   - Ensure the data are integers (or floats that are integer-valued), otherwise raise a `ValueError`.  \n   - Ensure no negative labels.\n4. **Determine `num_classes`**: Use the provided value or infer it as `max(y) + 1`.\n5. **Bounds check**: All labels must satisfy `0 <= label < num_classes`.\n6. **One-hot encoding**: Create a zero matrix of shape `(len(y), num_classes)` and place 1's at the appropriate column positions."}
{"task_id": 483, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    # turn input into a flat numpy array of ints\n    labels_arr = np.asarray(labels, dtype=int).ravel()\n    \n    # infer num_classes if not provided\n    if num_classes is None:\n        if labels_arr.size == 0:\n            num_classes = 0\n        else:\n            num_classes = int(labels_arr.max()) + 1\n    \n    # build the one-hot matrix\n    n = labels_arr.shape[0]\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    for i, c in enumerate(labels_arr):\n        one_hot[i, c] = 1\n    \n    # convert to list of lists of Python ints\n    return one_hot.tolist()\n```\n\nExplanation:\n\n1. We first convert `labels` to a flat NumPy array of integers (`labels_arr`).\n2. If `num_classes` is not supplied, we set it to `max(labels_arr) + 1` (or 0 if `labels` is empty).\n3. We create a zero matrix of shape `(n_samples, num_classes)` and then loop over each label to set the appropriate position to 1.\n4. Finally, we call `.tolist()` on the NumPy array to return a pure Python list of lists containing only Python `int`s."}
{"task_id": 484, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression_predict(\n    X_train: list[float | int],\n    y_train: list[float | int],\n    X_test: list[float | int],\n    degree: int,\n    reg_factor: float = 0.1,\n    n_iterations: int = 1000,\n) -> list[float]:\n   Fit a one-dimensional Lasso regression model and predict on new data.\n\n    Args:\n        X_train: List of scalar training inputs.\n        y_train: Target values corresponding to `X_train`.\n        X_test:  Inputs on which the trained model is evaluated.\n        degree:  Highest polynomial degree used for the feature expansion.\n        reg_factor: Non-negative regularisation strength (\u03bb).\n        n_iterations: Number of coordinate-descent sweeps.\n\n    Returns:\n        List of predictions for every element in `X_test`, each rounded to\n        the 4th decimal place.\n       # Convert to numpy arrays\n    X = np.array(X_train, dtype=float)\n    y = np.array(y_train, dtype=float)\n    X_t = np.array(X_test, dtype=float)\n\n    n_samples = X.shape[0]\n    p = degree + 1  # number of features including bias\n\n    # Build design matrix for train and test: phi[:, j] = x^j\n    phi = np.vstack([X**j for j in range(p)]).T    # shape (n_samples, p)\n    phi_test = np.vstack([X_t**j for j in range(p)]).T\n\n    # Initialize weights\n    w = np.zeros(p, dtype=float)\n\n    # Precompute z_j = sum_i phi_ij^2\n    z = np.sum(phi * phi, axis=0)\n\n    # Soft-thresholding operator\n    def soft_threshold(rho, lam):\n        if rho > 0 and lam < abs(rho):\n            return rho - lam\n        if rho < 0 and lam < abs(rho):\n            return rho + lam\n        return 0.0\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        # current residual: y - phi @ w\n        residual = y - phi.dot(w)\n        for j in range(p):\n            # Add back the contribution of w[j] to the residual\n            # so rho_j = sum_i phi_ij * (residual + phi_ij * w_j)\n            r_plus = residual + phi[:, j] * w[j]\n            rho_j = np.dot(phi[:, j], r_plus)\n\n            if j == 0:\n                # No regularization on bias term\n                w[j] = rho_j / z[j]\n            else:\n                # Lasso update with soft-thresholding\n                w[j] = soft_threshold(rho_j, reg_factor) / z[j]\n\n            # Update residual for next coordinate\n            residual = r_plus - phi[:, j] * w[j]\n\n    # Predict on X_test\n    y_pred = phi_test.dot(w)\n\n    # Round to 4 decimal places and return as a native Python list\n    return np.round(y_pred, 4).tolist()\n```\n\nExplanation of key steps:\n\n1. We stack powers of the inputs (from degree 0 to `degree`) to form the polynomial feature matrix (`phi`).\n2. We initialize the weight vector `w` to zeros.\n3. We precompute `z_j = \u03a3_i \u03c6_{ij}\u00b2` for each feature coordinate `j` to speed up updates.\n4. We iterate `n_iterations` times, cycling over each coordinate `j`:\n   - We compute the partial residual (adding back the contribution of the current `w[j]`).\n   - We compute `\u03c1_j = \u03a3_i \u03c6_{ij} * (residual + \u03c6_{ij}*w_j)`.\n   - We apply the soft-threshold operator for `j>0` (lasso penalty), and a simple least\u2010squares step for `j=0`.\n   - We update the residual for the next coordinate.\n5. Finally, we predict on the test data via the same polynomial feature map and round each prediction to 4 decimal places."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n   Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n       # If no training data, nothing to fit; return empty list\n    if len(X_train) == 0:\n        return []\n\n    # Convert training data to numpy arrays for convenience\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=float)\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int):\n        # Create a leaf if depth limit reached or fewer than 2 samples\n        if depth >= max_depth or X.shape[0] < 2:\n            return {\n                'split': None,\n                'value': float(np.mean(y)),\n                'left': None,\n                'right': None\n            }\n\n        # Sort by X to speed up searching for best split\n        sort_idx = np.argsort(X)\n        Xs = X[sort_idx]\n        ys = y[sort_idx]\n        n = Xs.shape[0]\n\n        # Precompute prefix sums and squared sums of targets\n        cumsum_y = np.cumsum(ys)\n        cumsum_yy = np.cumsum(ys * ys)\n        total_y = cumsum_y[-1]\n        total_yy = cumsum_yy[-1]\n\n        best_sse = np.inf\n        best_split = None\n        best_i = None\n\n        # Try splits between unique consecutive Xs\n        for i in range(1, n):\n            # skip if no change in feature\n            if Xs[i] == Xs[i - 1]:\n                continue\n            # Left side stats\n            nL = i\n            sumL = cumsum_y[i - 1]\n            sqL = cumsum_yy[i - 1]\n            # Right side stats\n            nR = n - i\n            sumR = total_y - sumL\n            sqR = total_yy - sqL\n            # Compute SSE = sum(yi^2) - sum(yi)^2 / n\n            sseL = sqL - (sumL * sumL) / nL\n            sseR = sqR - (sumR * sumR) / nR\n            sse = sseL + sseR\n            if sse < best_sse:\n                best_sse = sse\n                best_i = i\n                # midpoint between Xs[i-1] and Xs[i]\n                best_split = 0.5 * (Xs[i - 1] + Xs[i])\n\n        # If no valid split found (e.g. all Xs identical), make a leaf\n        if best_split is None:\n            return {\n                'split': None,\n                'value': float(np.mean(y)),\n                'left': None,\n                'right': None\n            }\n\n        # Partition data according to the best split\n        left_mask = X < best_split\n        right_mask = ~left_mask\n\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n\n        return {\n            'split': best_split,\n            'value': None,\n            'left': left_tree,\n            'right': right_tree\n        }\n\n    # Build the tree from the training data\n    tree = build_tree(X_train_arr, y_train_arr, depth=0)\n\n    # Prediction helper: traverse the tree for a single x\n    def predict_one(x, node):\n        if node['split'] is None:\n            return node['value']\n        if x < node['split']:\n            return predict_one(x, node['left'])\n        else:\n            return predict_one(x, node['right'])\n\n    # Apply to all test points\n    preds = [predict_one(float(x), tree) for x in X_test]\n    return preds\n```\n\nExplanation of key steps:\n\n1. **Base cases**:\n   - If the training set is empty, immediately return an empty list.\n   - In recursion, if the node\u2019s depth reaches `max_depth` or it has fewer than 2 samples, make it a leaf storing the mean of the node\u2019s target values.\n\n2. **Finding the best split**:\n   - Sort the data by the feature.\n   - Use prefix sums of `y` and `y^2` to compute the SSE on the left and right of each candidate split in O(1) time per split.\n   - Only consider splits between distinct feature values.\n   - Pick the split that minimizes the combined SSE.\n\n3. **Recursion**:\n   - Partition the (X, y) pairs by the best split and recurse on each child, increasing the depth.\n\n4. **Prediction**:\n   - For each `x` in `X_test`, start at the root and follow left/right child pointers based on `< split` until a leaf is reached, returning the leaf\u2019s mean value."}
{"task_id": 486, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n   Compute the mean squared error (MSE) between two numeric sequences.\n\n    The function should return -1 if the two inputs do not have the same\n    non-zero length. Otherwise, it returns the MSE rounded to 4 decimal\n    places.\n\n    Args:\n        y_true: Ground-truth values (list, tuple or NumPy array).\n        y_pred: Predicted values (list, tuple or NumPy array).\n\n    Returns:\n        A float rounded to 4 decimals representing the MSE, or -1 on error.\n       # Convert inputs to 1-D NumPy arrays\n    arr_true = np.array(y_true).ravel()\n    arr_pred = np.array(y_pred).ravel()\n\n    # Check for equal non-zero length\n    if arr_true.size == 0 or arr_true.size != arr_pred.size:\n        return -1\n\n    # Compute MSE\n    mse = np.mean((arr_true - arr_pred) ** 2)\n\n    # Round to 4 decimal places and return as Python float\n    return float(round(mse, 4))\n```\n\nExample usage:\n```python\n>>> mean_squared_error([1, 2, 3], [1.1, 1.9, 3.2])\n0.0200\n>>> mean_squared_error([], [])\n-1\n>>> mean_squared_error([1, 2], [1])\n-1\n```"}
{"task_id": 487, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_means(X: np.ndarray, k: int, max_iters: int = 300, tol: float = 1e-4) -> list[int]:\n   Cluster the data contained in *X* into *k* groups using the K-Means algorithm.\n\n    Args:\n        X: NumPy array of shape (n_samples, n_features) containing the data points.\n        k: The desired number of clusters (1 \u2264 k \u2264 n_samples).\n        max_iters: Maximum number of iterations (default 300).\n        tol: Convergence tolerance. The algorithm stops when the L2-norm\n            between old and new centroids is smaller than *tol* (default 1e-4).\n\n    Returns:\n        A Python list containing the cluster index (0 \u2026 k-1) for every sample\n        in the original order of *X*.\n       n_samples, n_features = X.shape\n\n    # 1. Initialization: first k samples as centroids\n    centroids = X[:k].astype(float).copy()\n\n    for _ in range(max_iters):\n        # 2a. Assignment step: compute distances and assign clusters\n        # distances has shape (n_samples, k)\n        # using broadcasting to compute Euclidean distances\n        diffs = X[:, np.newaxis, :] - centroids[np.newaxis, :, :]  # (n_samples, k, n_features)\n        dists = np.linalg.norm(diffs, axis=2)                       # (n_samples, k)\n        labels = np.argmin(dists, axis=1)                           # (n_samples,)\n\n        # 2b. Update step: recompute centroids\n        new_centroids = np.empty_like(centroids)\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if points_in_cluster.shape[0] > 0:\n                new_centroids[j] = points_in_cluster.mean(axis=0)\n            else:\n                # If no points assigned, keep the old centroid\n                new_centroids[j] = centroids[j]\n\n        # 3. Check for convergence\n        shift = np.linalg.norm(new_centroids - centroids)\n        centroids = new_centroids\n        if shift < tol:\n            break\n\n    # Return the cluster index for each sample as a Python list of ints\n    return labels.tolist()\n```\n\nExplanation of key steps:\n1. **Initialization**: We take the first `k` points of `X` as the initial centroids.\n2. **Assignment**: For each sample, compute its Euclidean distance to all centroids and pick the nearest.\n3. **Update**: For each cluster, compute the mean of assigned points. If a cluster has no points, its centroid stays the same.\n4. **Convergence**: If the centroids move by less than `tol` in L2\u2010norm, we stop early; otherwise we iterate up to `max_iters`.\n5. **Result**: Convert the array of labels to a plain Python list and return it."}
{"task_id": 488, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_variance(X):\n   Return the population variance of every feature (column) in X.\n\n    Parameters\n    ----------\n    X : list[list[int | float]] | np.ndarray\n        A 2-D data set where each row is a sample and each column is a feature.\n\n    Returns\n    -------\n    list[float] | int\n        A list containing the variance of each feature rounded to four\n        decimals.  Returns -1 if the input is empty or not 2-D.\n       # Try to coerce to a numeric NumPy array\n    try:\n        arr = np.array(X, dtype=float)\n    except Exception:\n        return -1\n\n    # Must be 2-D\n    if arr.ndim != 2:\n        return -1\n\n    n_samples, n_features = arr.shape\n\n    # Need at least one sample\n    if n_samples < 1:\n        return -1\n\n    # Compute per\u2010column (population) variance\n    means = arr.mean(axis=0)\n    variances = ((arr - means) ** 2).sum(axis=0) / n_samples\n\n    # Round to 4 decimal places and return as a Python list\n    return [round(v, 4) for v in variances.tolist()]\n```\n\nExplanation of key steps:\n\n1. **Input validation**  \n   - We attempt to convert `X` to a NumPy array of `float`s.  If that fails, we immediately return `-1`.  \n   - We check `arr.ndim != 2` to ensure exactly two dimensions (rows \u00d7 columns).  \n   - We verify there is at least one row (`n_samples >= 1`).  \n\n2. **Population variance**  \n   - The mean of each column is computed with `arr.mean(axis=0)`.  \n   - We then compute the squared deviations, sum them over the rows, and divide by `n_samples`.  \n\n3. **Formatting**  \n   - We round each variance to four decimal places.  \n   - We convert the result back to a plain Python list of floats.  \n\nThis fulfills all requirements: returns `-1` on invalid input, computes the population variance, rounds to 4 decimals, and returns a list."}
{"task_id": 489, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    # Case 1: NumPy array\n    if isinstance(one_hot, np.ndarray):\n        arr = one_hot\n        # Must be 2-D\n        if arr.ndim != 2:\n            return -1\n        n_samples, n_classes = arr.shape\n        labels = []\n        for i in range(n_samples):\n            row = arr[i]\n            # Check that every entry is either 0 or 1\n            is_zero_or_one = (row == 0) | (row == 1)\n            if not is_zero_or_one.all():\n                return -1\n            # Exactly one '1' per row\n            ones_count = int((row == 1).sum())\n            if ones_count != 1:\n                return -1\n            # The index of the class is where the '1' occurs\n            labels.append(int(np.argmax(row)))\n        return labels\n\n    # Case 2: Python list of lists\n    # We only accept actual lists here (not tuples, generators, etc.)\n    if not isinstance(one_hot, list):\n        return -1\n\n    n_samples = len(one_hot)\n    # Empty list => no samples => return empty labels list\n    if n_samples == 0:\n        return []\n\n    # First row must itself be a list\n    first_row = one_hot[0]\n    if not isinstance(first_row, list):\n        return -1\n    n_classes = len(first_row)\n    # There must be at least one class\n    if n_classes == 0:\n        return -1\n\n    labels = []\n    for row in one_hot:\n        # Each row must be a list of the same length\n        if not isinstance(row, list) or len(row) != n_classes:\n            return -1\n\n        ones_count = 0\n        class_index = -1\n        for idx, val in enumerate(row):\n            # Value must be exactly 0 or exactly 1\n            if val == 1:\n                ones_count += 1\n                class_index = idx\n            elif val != 0:\n                # Found something other than 0 or 1\n                return -1\n            # If more than one '1' we can bail early\n            if ones_count > 1:\n                return -1\n\n        # After scanning the row, ensure exactly one '1'\n        if ones_count != 1:\n            return -1\n\n        labels.append(class_index)\n\n    return labels\n```\n\nExplanation of the main steps:\n\n1. **Type dispatch**  \n   - If the input is a NumPy array, we use vectorized checks (`row == 0` or `row == 1`) and `np.argmax`.  \n   - Otherwise, we require a Python `list` of `list`s and do explicit Python loops.\n\n2. **Validity checks per row**  \n   - Every element must be either `0` or `1`.  \n   - Exactly one element per row must be `1`.  \n\n3. **Output**  \n   - If *all* rows pass, we collect the index of the `1` in each row in a Python list and return it.  \n   - Otherwise, we return `-1` immediately."}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array\n    arr = np.asarray(x)\n\n    # Ensure it is one-dimensional\n    if arr.ndim != 1:\n        raise ValueError(\"Input must be one-dimensional\")\n\n    # If empty, return empty list\n    if arr.size == 0:\n        return []\n\n    # Build a diagonal matrix and convert it to a list of lists\n    diag_mat = np.diag(arr)\n    return diag_mat.tolist()\n```\n\nExplanation of the steps:\n1. We use `np.asarray(x)` to convert whatever was passed in (list, tuple, or ndarray) into a NumPy array.\n2. We check that the result is one-dimensional. If not, we raise a `ValueError`.\n3. If the array is empty (`size == 0`), we immediately return `[]`.\n4. Otherwise we call `np.diag(arr)`, which produces a square matrix with `arr` on its main diagonal and zeros elsewhere.\n5. Finally, we convert that matrix to a native Python list of lists with `.tolist()`."}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    # 1) First scan: count item frequencies\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    # keep only globally frequent items\n    freq = {item: cnt for item, cnt in freq.items() if cnt >= min_sup}\n    if not freq:\n        return []\n\n    # Node definition for the FP-tree\n    class Node:\n        __slots__ = (\"item\", \"count\", \"parent\", \"children\", \"link\")\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n    # Build the main FP-tree\n    # Header table: item -> [support, head, tail]\n    header = {item: [cnt, None, None] for item, cnt in freq.items()}\n\n    root = Node(None, 0, None)\n\n    def insert_tree(items, node, count):\n        \"\"\"Insert a sorted list of items into the FP-tree rooted at node.\"\"\"\n        if not items:\n            return\n        first = items[0]\n        # either extend existing child or create a new one\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = Node(first, count, node)\n            node.children[first] = child\n            # hook into header table's linked list\n            h = header[first]\n            if h[1] is None:       # no head yet\n                h[1] = child\n                h[2] = child\n            else:\n                h[2].link = child\n                h[2] = child\n        # recurse for the tail of items\n        insert_tree(items[1:], child, count)\n\n    # Prepare and insert each transaction\n    # Order each transaction's frequent items by descending global freq, then lex\n    for t in transactions:\n        filtered = [i for i in t if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=lambda x: (-freq[x], x))\n        insert_tree(ordered, root, 1)\n\n    # This will collect all frequent itemsets as tuples\n    patterns = set()\n\n    def mine_tree(header_table, prefix):\n        \"\"\"\n        Recursively mine the FP-tree whose header table is header_table,\n        using prefix as the suffix-root so far.\n        \"\"\"\n        # Order the items in the header by ascending frequency, then lex\n        items = sorted(\n            header_table.items(),\n            key=lambda kv: (kv[1][0], kv[0])\n        )\n        for item, (item_support, head, tail) in items:\n            # form new pattern = prefix U {item}\n            new_pat = tuple(sorted(prefix + (item,)))\n            patterns.add(new_pat)\n\n            # Build conditional pattern base (list of (path_items, count))\n            cond_patterns = []\n            node = head\n            while node:\n                cnt = node.count\n                # walk up to root, collecting items\n                path = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                if path:\n                    cond_patterns.append((path, cnt))\n                node = node.link\n\n            # Count conditional frequencies\n            cond_freq = Counter()\n            for path, cnt in cond_patterns:\n                cond_freq.update({itm: cnt for itm in path})\n            # keep only those meeting min_sup\n            cond_freq = {itm: c for itm, c in cond_freq.items() if c >= min_sup}\n            if not cond_freq:\n                continue\n\n            # Build conditional FP-tree\n            # new header for conditional tree\n            cond_header = {itm: [c, None, None] for itm, c in cond_freq.items()}\n            cond_root = Node(None, 0, None)\n\n            def insert_cond(items, node, count):\n                if not items:\n                    return\n                first = items[0]\n                if first in node.children:\n                    child = node.children[first]\n                    child.count += count\n                else:\n                    child = Node(first, count, node)\n                    node.children[first] = child\n                    h = cond_header[first]\n                    if h[1] is None:\n                        h[1] = child\n                        h[2] = child\n                    else:\n                        h[2].link = child\n                        h[2] = child\n                insert_cond(items[1:], child, count)\n\n            # Insert each pattern base path into conditional tree\n            for path, cnt in cond_patterns:\n                # filter path by cond_freq and order by descending cond_freq, then lex\n                filtered = [i for i in path if i in cond_freq]\n                if not filtered:\n                    continue\n                ordered = sorted(filtered, key=lambda x: (-cond_freq[x], x))\n                insert_cond(ordered, cond_root, cnt)\n\n            # Check if the conditional tree is a single path\n            # i.e., every node (except root) has at most one child\n            def is_single_path(node):\n                if len(node.children) > 1:\n                    return False\n                if not node.children:\n                    return True\n                # go deeper\n                child = next(iter(node.children.values()))\n                return is_single_path(child)\n\n            if is_single_path(cond_root):\n                # collect the single path of items\n                single_path = []\n                cur = cond_root\n                while len(cur.children) == 1:\n                    cur = next(iter(cur.children.values()))\n                    single_path.append(cur.item)\n                # enumerate all non-empty combinations of items in single_path\n                for r in range(1, len(single_path) + 1):\n                    for comb in itertools.combinations(single_path, r):\n                        newset = tuple(sorted(prefix + (item,) + comb))\n                        patterns.add(newset)\n            else:\n                # recursively mine the conditional FP-tree\n                mine_tree(cond_header, prefix + (item,))\n\n    # Kick off mining with the main header table and empty prefix\n    mine_tree(header, ())\n\n    # Prepare final sorted list of frequent itemsets\n    # 1) by length, then 2) lexicographically\n    result = sorted(patterns, key=lambda t: (len(t), t))\n    return result\n```\n\nExplanation of key steps:\n\n1. **First pass**: We count item frequencies and drop those below `min_sup`.\n2. **FP-tree construction**:  \n   - We sort each transaction\u2019s frequent items in descending global frequency (tie\u2010breaking lexicographically) and insert them into the tree.  \n   - Each node has a `link` pointer; the `header` table links all nodes of the same item in a singly-linked list for easy pattern base extraction.\n3. **Mining recursively**:\n   - For each item in the header table (in ascending support order), we  \n     a. Output the pattern = current prefix \u222a {item},  \n     b. Build its conditional pattern base by following the item\u2019s node links and collecting prefix paths,  \n     c. Build a conditional FP-tree from those paths (filtering by `min_sup` again),  \n     d. If that conditional tree is a single path, emit **all** combinations of its items at once, each appended to the new prefix; otherwise recurse.\n4. **Formatting**: We collect all patterns in a `set` to avoid duplicates, then sort them first by length, then lexicographically as required."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    # Handle the negative-degree case\n    if degree < 0:\n        return -1\n\n    # Convert input to numpy array for vectorized operations\n    X_arr = np.array(X, dtype=float)\n    n_samples, n_features = X_arr.shape\n\n    # Generate all index\u2010multisets (combinations with replacement)\n    # of total degree 0, 1, 2, ..., degree\n    all_combos = []\n    for total_deg in range(degree + 1):\n        # combinations_with_replacement gives tuples of length total_deg\n        # each tuple is non-decreasing, which enforces lexicographic order\n        for combo in combinations_with_replacement(range(n_features), total_deg):\n            all_combos.append(combo)\n\n    # For each combination, compute the product of the corresponding columns\n    # X_arr[:, combo] has shape (n_samples, total_deg). np.prod over axis=1\n    # yields an array of length n_samples.  If combo is empty (degree 0),\n    # np.prod of an empty slice gives 1 -> the constant term.\n    feature_cols = [np.prod(X_arr[:, combo], axis=1) for combo in all_combos]\n\n    # Stack them horizontally: result shape = (n_samples, n_output_features)\n    poly_matrix = np.stack(feature_cols, axis=1)\n\n    # Convert back to a plain Python list of lists and return\n    return poly_matrix.tolist()\n```\n\nExplanation of the core steps:\n\n1. **Negative degree**: Return `-1` immediately as specified.  \n2. **Input conversion**: Cast `X` to a NumPy array of floats for easy slicing and product computations.  \n3. **Index multiset generation**:  \n   - Loop `total_deg` from `0` up to `degree`.  \n   - For each, use `itertools.combinations_with_replacement(range(n_features), total_deg)`.  \n   - This produces all ways to pick `total_deg` indices (with repetition allowed), in non\u2010decreasing (lexicographic) order.  \n4. **Column construction**: For each index\u2010multiset `combo`, compute  \n   ```\n   np.prod(X_arr[:, combo], axis=1)\n   ```  \n   - If `combo` is empty (degree 0), NumPy returns an array of ones, giving the constant term.  \n5. **Assembly**: Stack these column arrays side by side and convert to a list of lists.\n\nThis precisely matches the requirements: all monomials up to total degree `d`, sorted first by degree and then lexicographically, with the first column being all 1\u2019s."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n   Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    returns -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n       # Convert to numpy array of float\n    arr = np.asarray(y, dtype=float)\n    # Check for empty input\n    if arr.size == 0:\n        return -1\n    # Compute mean\n    mu = arr.mean()\n    # Compute mean of squared deviations\n    mse_val = ((arr - mu) ** 2).mean()\n    # Round to 4 decimal places and return as Python float\n    return round(float(mse_val), 4)\n```\n\nExplanation:\n1. We first coerce the input `y` into a NumPy array of floats, which handles both lists and existing arrays uniformly.  \n2. If `arr.size` is zero, we immediately return -1.  \n3. Otherwise we compute the sample mean `mu`, then take the average of `(arr - mu)**2`.  \n4. Finally, we round the result to four decimal places and cast to a native Python `float` before returning."}
{"task_id": 494, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef aggregate_predictions(\n    preds: Union[List[List[Union[int, float]]], np.ndarray],\n    classifier: bool = True,\n) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array for easy slicing\n    arr = np.array(preds)\n    if arr.ndim != 2:\n        raise ValueError(f\"Expected 2D array-like preds, got array with ndim={arr.ndim}\")\n\n    # Shape: (n_models, n_samples)\n    n_models, n_samples = arr.shape\n\n    if classifier:\n        # Majority vote along models for each sample (column)\n        final_preds: List[int] = []\n        for j in range(n_samples):\n            column = arr[:, j]\n            # Ensure integer labels for bincount\n            labels = column.astype(int)\n            counts = np.bincount(labels)\n            # argmax breaks ties by choosing the smallest label\n            vote = int(counts.argmax())\n            final_preds.append(vote)\n        return final_preds\n\n    else:\n        # Regression: average along models for each sample (column)\n        means = np.mean(arr.astype(float), axis=0)\n        # Round to 4 decimal places\n        return [round(float(x), 4) for x in means]\n```\n\nExplanation of key points:\n1. We first ensure `preds` is a 2D NumPy array of shape `(n_models, n_samples)`.\n2. For classification (`classifier=True`), we loop over each sample\u2010column, use `np.bincount` on the integer labels, and pick the index of the maximum count.  Ties are naturally broken by taking the smallest label.\n3. For regression (`classifier=False`), we compute the mean of each column and round each result to 4 decimal places."}
{"task_id": 495, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    # Convert to float and ensure we don't modify the original\n    X_float = X.astype(float, copy=True)\n\n    # Compute per\u2010column means and stds (population std, ddof=0)\n    means = X_float.mean(axis=0)\n    stds = X_float.std(axis=0)\n\n    # Prepare an output array of the same shape\n    Z = np.zeros_like(X_float)\n\n    # Find columns with nonzero standard deviation\n    nonzero_mask = stds != 0\n\n    # Standardize only those columns; leave zero\u2010std columns as zeros\n    Z[:, nonzero_mask] = (X_float[:, nonzero_mask] - means[nonzero_mask]) / stds[nonzero_mask]\n\n    # Round to 4 decimal places and convert to a Python list\n    Z_rounded = np.round(Z, 4)\n    return Z_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Copy & Cast:** We first cast `X` to float in a new array `X_float` so the original `X` remains untouched.  \n2. **Mean & Std:** We compute column\u2010wise means and population standard deviations using NumPy\u2019s default `ddof=0`.  \n3. **Zero\u2010variance check:** We build a boolean mask `nonzero_mask` to mark columns whose std is not zero.  \n4. **Standardization:** For each \u201cgood\u201d column, we apply `(x \u2212 mean) / std`. Columns with zero std remain as zeros in `Z`.  \n5. **Rounding & Return:** We round every entry to 4 decimal places via `np.round` and then call `.tolist()` to produce the final Python list of lists."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values (or a scalar).\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is at least a 1D array\n    arr = np.array(x, dtype=float, copy=False)\n    arr = np.atleast_1d(arr)\n    \n    # Compute the affine activation\n    y = slope * arr + intercept\n    \n    # First derivative is constant = slope\n    grad = np.full_like(arr, slope, dtype=float)\n    \n    # Second derivative is constant = 0\n    grad2 = np.zeros_like(arr, dtype=float)\n    \n    # Round each element to 4 decimal places and convert to Python lists\n    y_rounded     = [round(float(v), 4) for v in y]\n    grad_rounded  = [round(float(v), 4) for v in grad]\n    grad2_rounded = [round(float(v), 4) for v in grad2]\n    \n    return y_rounded, grad_rounded, grad2_rounded\n```\n\nExplanation of key steps:\n1. We convert the input `x` into a NumPy array and use `np.atleast_1d` so that even scalars become length-1 arrays.\n2. We compute the affine mapping element-wise: `y = slope * x + intercept`.\n3. The first derivative of a linear (affine) function is the constant `slope`; the second derivative is always `0`.\n4. We round every element in the outputs to 4 decimal places and return them as plain Python lists."}
{"task_id": 497, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef exponential_activation(x, order: int = 0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    # Only orders 0, 1, and 2 are valid\n    if order not in (0, 1, 2):\n        return -1\n\n    # Convert input to numpy array of floats\n    arr = np.array(x, dtype=float)\n\n    # For exponential activation and its first two derivatives,\n    # the result is always e^x\n    result = np.exp(arr)\n\n    # Round to 6 decimal places\n    result = np.round(result, 6)\n\n    # Return as a nested Python list\n    return result.tolist()\n```\n\nExample usage:\n\n```python\n>>> exponential_activation([[0, 1], [2, -1]], order=0)\n[[1.0, 2.718282], [7.389056, 0.367879]]\n>>> exponential_activation([0.5, -0.5], order=1)\n[1.648721, 0.606531]\n>>> exponential_activation(3.0, order=3)\n-1\n```"}
{"task_id": 498, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(x: np.ndarray | list | int | float,\n               alpha: float = 0.3,\n               order: int = 0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n        Scalars become one\u2010element lists. If order is not in {0,1,2}, returns [].\n    \"\"\"\n    # Convert input to NumPy array (do not modify in place)\n    x_arr = np.array(x, dtype=float)\n\n    # Compute according to the requested order\n    if order == 0:\n        # f(x) = x if x>0 else alpha*x\n        y = np.where(x_arr > 0, x_arr, alpha * x_arr)\n    elif order == 1:\n        # f'(x) = 1 if x>0 else alpha\n        y = np.where(x_arr > 0, 1.0, alpha)\n    elif order == 2:\n        # f''(x) = 0 everywhere\n        y = np.zeros_like(x_arr, dtype=float)\n    else:\n        # Invalid order\n        return []\n\n    # Convert to Python list\n    out = y.tolist()\n    # Ensure scalars become one\u2010element lists\n    if not isinstance(out, list):\n        out = [out]\n    return out\n```\n\nExplanation of key points:\n- We first wrap `x` into a new NumPy array so the original is never modified.\n- We use `np.where` to vector\u2010compute both the activation and its first derivative.\n- The second derivative is trivially a zero array of the same shape.\n- An invalid `order` immediately yields an empty list.\n- Finally, we convert the result to a Python list via `.tolist()`. If the input was a scalar (so `.tolist()` would produce a raw number), we wrap it in a one\u2010element list to satisfy the spec."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check dimensions and k\n    if data.ndim != 2:\n        raise ValueError(\"data must be a 2-D array\")\n    n_samples, n_features = data.shape\n    if not (1 <= k <= n_features):\n        return -1\n\n    # 1. Standardise each feature (zero mean, unit population variance)\n    means = np.mean(data, axis=0)\n    vars_ = np.var(data, axis=0)  # population variance (ddof=0)\n    # Avoid division by zero: for zero-variance features, keep denom=1\n    denom = np.sqrt(vars_)\n    denom[denom == 0] = 1.0\n\n    X_centered = data - means\n    X_std = X_centered / denom\n\n    # 2. Compute sample covariance matrix (divide by n_samples - 1)\n    cov = (X_std.T @ X_std) / (n_samples - 1)\n\n    # 3. Eigen-decomposition (cov is symmetric)\n    eigvals, eigvecs = np.linalg.eigh(cov)\n\n    # 4. Sort eigenvalues descending and reorder eigenvectors\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n\n    # 5. Fix signs: make the largest-abs entry in each eigenvector positive\n    for j in range(eigvecs.shape[1]):\n        vec = eigvecs[:, j]\n        max_idx = np.argmax(np.abs(vec))\n        if vec[max_idx] < 0:\n            eigvecs[:, j] = -vec\n\n    # 6. Project the standardized data onto the first k eigenvectors\n    top_vecs = eigvecs[:, :k]\n    projected = X_std @ top_vecs\n\n    # Round and convert to list of lists\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    n_estimators: int = 20,\n    learning_rate: float = 0.1\n) -> list[int]:\n   Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n       # Convert inputs to numpy arrays\n    X_tr = np.array(X_train, dtype=float)\n    y_tr = np.array(y_train, dtype=float)\n    X_te = np.array(X_test, dtype=float)\n\n    n_samples, n_features = X_tr.shape\n\n    # Initial constant prediction c = mean(y)\n    c0 = y_tr.mean()\n    # F_train holds the current ensemble prediction for each train sample\n    F_train = np.full(n_samples, c0, dtype=float)\n\n    # Store the stumps as tuples: (feature_index, threshold, a_left, a_right)\n    stumps = []\n\n    # Boosting iterations\n    for m in range(n_estimators):\n        # 1) Compute residuals\n        residuals = y_tr - F_train\n        S_total = residuals.sum()\n        SS_total = np.dot(residuals, residuals)\n\n        best_sse = np.inf\n        best_stump = None  # will hold (j, threshold, a_left, a_right)\n\n        # 2) Find the best decision stump for these residuals\n        for j in range(n_features):\n            x_j = X_tr[:, j]\n            # sort feature values and corresponding residuals\n            sorted_idx = np.argsort(x_j)\n            x_sorted = x_j[sorted_idx]\n            r_sorted = residuals[sorted_idx]\n\n            # prefix sums for fast SSE calc\n            csum_r = np.cumsum(r_sorted)\n            csum_r2 = np.cumsum(r_sorted * r_sorted)\n\n            # try every split between distinct consecutive x's\n            for i in range(n_samples - 1):\n                if x_sorted[i] == x_sorted[i + 1]:\n                    continue  # no meaningful split here\n                nL = i + 1\n                nR = n_samples - nL\n\n                sumL = csum_r[i]\n                sumR = S_total - sumL\n                sumL2 = csum_r2[i]\n                sumR2 = SS_total - sumL2\n\n                # SSE in left and right\n                sseL = sumL2 - (sumL * sumL) / nL\n                sseR = sumR2 - (sumR * sumR) / nR\n                sse_total = sseL + sseR\n\n                if sse_total < best_sse:\n                    best_sse = sse_total\n                    thresh = 0.5 * (x_sorted[i] + x_sorted[i + 1])\n                    aL = sumL / nL\n                    aR = sumR / nR\n                    best_stump = (j, thresh, aL, aR)\n\n        # 3) If no valid split found (all X's constant), fit a constant stump\n        if best_stump is None:\n            # stump predicts the mean residual everywhere\n            mean_res = residuals.mean()\n            stumps.append((0, np.inf, mean_res, mean_res))\n            F_train += learning_rate * mean_res\n        else:\n            j_star, thresh_star, aL_star, aR_star = best_stump\n            stumps.append(best_stump)\n            # update F_train with this stump's predictions\n            pred = np.where(X_tr[:, j_star] <= thresh_star, aL_star, aR_star)\n            F_train += learning_rate * pred\n\n    # 4) Predict on X_test\n    n_test = X_te.shape[0]\n    F_test = np.full(n_test, c0, dtype=float)\n    for (j, thresh, aL, aR) in stumps:\n        pred_te = np.where(X_te[:, j] <= thresh, aL, aR)\n        F_test += learning_rate * pred_te\n\n    # 5) Threshold final scores at 0.5 -> class labels\n    y_pred = (F_test >= 0.5).astype(int).tolist()\n    return y_pred\n```\n\nExplanation of the main steps:\n\n1. **Initialization**  \n   - Start with a constant model \\(F_0(x)=c_0=\\bar y\\).\n\n2. **Boosting Loop** (repeated `n_estimators` times)  \n   a. Compute residuals \\(r_i=y_i-F_{m-1}(x_i)\\).  \n   b. For each feature, sort the data by that feature and use prefix sums to quickly evaluate every possible threshold.  \n   c. For each split, compute the best\u2010fit constants \\(a_L,a_R\\) on left/right and the resulting sum of squared errors.  \n   d. Pick the split that minimizes SSE, record it as a stump, and update \\(F_m(x)=F_{m-1}(x)+\\eta\\,h_m(x)\\).  \n\n3. **Prediction**  \n   - Evaluate the sum of all stumps plus the initial constant on each test point, then threshold at 0.5 to get binary outputs.\n\nThis approach uses only one-dimensional splits (stumps) and the squared\u2013error loss, treating the binary labels as regression targets in the boosting process."}
{"task_id": 501, "completion_id": 0, "completion": "```python\ndef constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    # Write your code below this line\n    return initial_lr\n```"}
{"task_id": 502, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef hard_sigmoid(z: np.ndarray, order: int = 0) -> list[float]:\n   Compute Hard-Sigmoid activation or its derivatives.\n\n    Parameters\n    ----------\n    z : np.ndarray\n        Input array whose elements the activation (or its derivatives) will be\n        applied to.\n    order : int, optional (default = 0)\n        \u2022 0 \u2013 return Hard-Sigmoid values.\n        \u2022 1 \u2013 return first derivative.\n        \u2022 2 \u2013 return second derivative.\n\n    Returns\n    -------\n    list[float]\n        A list containing the computed values, rounded to 4 decimal places.\n        If an unsupported *order* is provided the function should return an\n        empty list.\n       if order == 0:\n        # Hard-Sigmoid: 0 for z < -2.5, 1 for z > 2.5, else 0.2*z + 0.5\n        y = np.where(z < -2.5,\n                     0.0,\n                     np.where(z > 2.5,\n                              1.0,\n                              0.2 * z + 0.5))\n    elif order == 1:\n        # First derivative: 0.2 for -2.5 <= z <= 2.5, else 0\n        y = np.where((z >= -2.5) & (z <= 2.5),\n                     0.2,\n                     0.0)\n    elif order == 2:\n        # Second derivative: 0 everywhere\n        y = np.zeros_like(z, dtype=float)\n    else:\n        return []\n\n    # Round to 4 decimal places and convert to list\n    return np.round(y, 4).tolist()\n```"}
{"task_id": 503, "completion_id": 0, "completion": "```python\nfrom copy import deepcopy\n\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    # If there's no base hyper\u2010param dict, bail out\n    if hparams is None:\n        return -1\n\n    # Make a deep copy so the original is never mutated\n    hparams_copy = deepcopy(hparams)\n\n    # If updates is provided, selectively overwrite existing keys\n    if updates is not None:\n        for key, val in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = val\n\n    return hparams_copy\n```\n\nExplanation of key points:\n- We immediately return `-1` if `hparams` is `None`.\n- We call `deepcopy` on `hparams` so that nested structures are also copied, and we never touch the original.\n- We only loop through `updates` if it\u2019s not `None`.\n- Within that loop, we check `if key in hparams_copy` so that new keys in `updates` are ignored.\n- Finally, we return the (possibly modified) copy of the hyper\u2010parameter dictionary.\n\nExample usage:\n\n```python\nhparams = {'lr': 0.1, 'momentum': 0.9}\nupdates = {'lr': 0.01, 'weight_decay': 0.0001}\n\nresult = selective_update(hparams, updates)\nprint(result)  \n# Output: {'lr': 0.01, 'momentum': 0.9}\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n   Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix rounded to 4 decimal places and converted\n        to a regular Python list of lists.\n        If X is empty, returns an empty list.\n       # If the mini-batch is empty, return empty list\n    m = X.shape[0]\n    if m == 0:\n        return []\n\n    def sigmoid(x):\n        return 1.0 / (1.0 + np.exp(-x))\n\n    # Positive phase: compute hidden probabilities given data\n    # h0_prob shape: (m, n_hidden)\n    h0_lin = X.dot(W) + hbias  # broadcast hbias over rows\n    h0_prob = sigmoid(h0_lin)\n\n    # Start Gibbs chain from h0_prob, but using probabilities (no sampling)\n    h_prob = h0_prob.copy()\n    for _ in range(k):\n        # Reconstruct visible probabilities\n        v_lin = h_prob.dot(W.T) + vbias  # shape (m, n_visible)\n        v_prob = sigmoid(v_lin)\n        # Recompute hidden probabilities\n        h_lin = v_prob.dot(W) + hbias   # shape (m, n_hidden)\n        h_prob = sigmoid(h_lin)\n\n    v_k_prob = v_prob   # from last iteration\n    h_k_prob = h_prob\n\n    # Compute gradients\n    # pos_grad shape: (n_visible, n_hidden)\n    pos_grad = X.T.dot(h0_prob)\n    # neg_grad shape: (n_visible, n_hidden)\n    neg_grad = v_k_prob.T.dot(h_k_prob)\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round to 4 decimal places and convert to list of lists\n    W_rounded = np.round(W_new, 4)\n    return W_rounded.tolist()\n```\n\nExplanation of key steps:\n\n1. **Empty batch check**  \n   If `X.shape[0] == 0`, we immediately return `[]` to satisfy the requirement for an empty mini-batch.\n\n2. **Positive phase**  \n   - Compute the pre-activation `h0_lin = X\u00b7W + hbias`  \n   - Apply the sigmoid to get hidden probabilities `h0_prob`.\n\n3. **Gibbs chain for CD-k**  \n   We start from `h0_prob` and for each of the `k` steps:\n   - Reconstruct visible probabilities `v_prob = sigmoid(h_prob\u00b7W\u1d40 + vbias)`\n   - Recompute hidden probabilities `h_prob = sigmoid(v_prob\u00b7W + hbias)`\n\n4. **Gradient estimation**  \n   - Positive gradient: `pos_grad = X\u1d40 \u00b7 h0_prob`  \n   - Negative gradient: `neg_grad = v_k_prob\u1d40 \u00b7 h_k_prob`\n\n5. **Weight update**  \n   `W_new = W + learning_rate * (pos_grad - neg_grad) / m`\n\n6. **Formatting**  \n   The updated weight matrix is rounded to 4 decimal places and converted to a plain Python list of lists before returning."}
{"task_id": 508, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List\n\ndef params_with_name(params: Dict[str, Any], name: str) -> List[Any]:\n   Return all values whose keys contain a given substring.\n\n    The function must preserve the insertion order of the dictionary.\n\n    Args:\n        params: Dictionary mapping parameter names (strings) to parameter values (any type).\n        name: Substring to be searched for inside the dictionary keys.\n\n    Returns:\n        List of values whose corresponding keys contain *name* (order preserved).\n       result: List[Any] = []\n    for key, value in params.items():\n        if name in key:\n            result.append(value)\n    return result\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef chebyshev(x: Union[list[float], \"np.ndarray\"],\n              y: Union[list[float], \"np.ndarray\"]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors x and y must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # We only expect lists or 1-D numpy arrays\n    # First, check lengths\n    try:\n        len_x = len(x)\n        len_y = len(y)\n    except Exception:\n        # If objects don't support len(), convert to numpy 1-D\n        x = np.asarray(x).ravel()\n        y = np.asarray(y).ravel()\n        len_x = x.shape[0]\n        len_y = y.shape[0]\n\n    if len_x != len_y:\n        return -1\n\n    # If both are numpy arrays, flatten them to 1-D views\n    if isinstance(x, np.ndarray):\n        x_iter = x.ravel()\n    else:\n        x_iter = x\n    if isinstance(y, np.ndarray):\n        y_iter = y.ravel()\n    else:\n        y_iter = y\n\n    # Edge case: empty vectors\n    if len_x == 0:\n        return 0.0\n\n    # Compute the component-wise absolute differences and take the maximum\n    max_diff = max(abs(a - b) for a, b in zip(x_iter, y_iter))\n\n    # Round to four decimal places and ensure a Python float is returned\n    return float(round(max_diff, 4))\n```\n\nExplanation of key steps:\n\n1. **Length check**  \n   We want to quickly reject mismatched lengths. The built-in `len()` works on both Python lists and NumPy 1-D arrays. If they differ, we return `-1`.\n\n2. **Flattening**  \n   If the inputs are NumPy arrays (of any shape), we `.ravel()` them to a one-dimensional view so that `zip` will iterate component-wise correctly.\n\n3. **Empty vectors**  \n   By convention, we define the Chebyshev distance between two empty vectors to be `0.0`.\n\n4. **Core computation**  \n   We use a generator expression to compute `abs(a - b)` for each pair of components, then take the `max` of those differences.\n\n5. **Rounding and type conversion**  \n   Finally, we round the result to 4 decimal places with Python\u2019s built-in `round(...)` and wrap it in `float(...)` to guarantee a standard Python float (not a NumPy scalar).\n"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as y.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as t_mean.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Numerical stability epsilon\n    eps = np.finfo(float).eps\n\n    # Clip predictions to avoid log(0)\n    y_pred_clipped = np.clip(y_pred, eps, 1.0 - eps)\n\n    # Reconstruction loss (binary cross-entropy), summed over all elements\n    recon = - (y * np.log(y_pred_clipped) +\n               (1 - y) * np.log(1 - y_pred_clipped))\n    recon_loss = np.sum(recon)\n\n    # KL divergence term, summed over batch and latent dims\n    # KL = -0.5 * sum(1 + log_var - mean^2 - exp(log_var))\n    kl = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n\n    # Average over batch\n    batch_size = y.shape[0]\n    total_loss = (recon_loss + kl) / batch_size\n\n    # Round to 6 decimal places and return as Python float\n    return round(float(total_loss), 6)\n```\n\nExplanation of steps:\n1. We clip `y_pred` into `(eps, 1 - eps)` to ensure numerical stability when taking logs.\n2. The reconstruction loss is the element\u2010wise binary cross\u2010entropy between `y` and `y_pred`, summed over all samples and features.\n3. The KL divergence is computed analytically for a diagonal Gaussian approximate posterior against the standard normal prior, summed over batch and latent dimensions.\n4. We divide the total by `batch_size` to get the average loss per example.\n5. Finally, we round to six decimal places as required."}
{"task_id": 511, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_bernoulli_mab(n_arms: int = 10) -> list[float]:\n   Generate a random Bernoulli MAB environment.\n\n    Each arm has a success probability; the probabilities are sampled\n    uniformly, normalized to sum to 1, then rounded to 4 decimal places.\n\n    Args:\n        n_arms: Number of arms in the bandit.\n\n    Returns:\n        A list of length `n_arms` of floats in [0,1], rounded to 4 decimals,\n        summing to 1. If n_arms < 1, returns an empty list.\n       if n_arms < 1:\n        return []\n\n    # 1) Sample uniform draws on [0,1)\n    draws = np.random.rand(n_arms)\n\n    # 2) Normalize\n    total = draws.sum()\n    if total == 0:\n        # extremely unlikely, but guard against division by zero\n        probs = np.ones(n_arms) / n_arms\n    else:\n        probs = draws / total\n\n    # 3) Round to 4 decimal places\n    probs = np.round(probs, 4)\n\n    # Because of rounding the sum might drift from 1.0; adjust the largest entry\n    diff = 1.0 - probs.sum()\n    if abs(diff) >= 1e-12:\n        # find index of the largest probability\n        idx = int(np.argmax(probs))\n        # adjust it by the residual (and re\u2010round to 4 decimals)\n        probs[idx] = round(probs[idx] + diff, 4)\n\n    return probs.tolist()\n```\n\nExplanation of key steps:\n- If `n_arms < 1`, immediately return `[]`.\n- Use `np.random.rand(n_arms)` to draw `n_arms` independent uniform(0,1) samples.\n- Normalize by dividing by their sum so they form a distribution.\n- Round each entry to 4 decimals with `np.round(..., 4)`.\n- Finally, correct any tiny rounding\u2010induced drift from 1.0 by adding the residual to the largest probability."}
{"task_id": 512, "completion_id": 0, "completion": "```python\ndef pooling_shape(\n    pool_shape: tuple[int, int],\n    image_shape: tuple[int, int, int, int],\n    stride: tuple[int, int]\n) -> tuple[int, int] | int:\n   Calculate the spatial output dimensions of a 2-D pooling layer.\n\n    The function must implement the *no-padding* formula\n        out_h = (h - k_h) / s_h + 1\n        out_w = (w - k_w) / s_w + 1\n    and return ``(out_h, out_w)`` **only** when the result is an integer for\n    both dimensions *and* the kernel fits inside the input.  Otherwise return\n    ``-1``.\n\n    Args:\n        pool_shape: Tuple ``(k_h, k_w)`` pooling window size.\n        image_shape: Tuple ``(n, c, h, w)`` original tensor shape.\n        stride: Tuple ``(s_h, s_w)`` strides.\n\n    Returns:\n        Tuple of integers with the output height and width, or the integer\n        ``-1`` when the configuration is impossible.\n       k_h, k_w = pool_shape\n    n, c, h, w = image_shape\n    s_h, s_w = stride\n\n    # 1) Kernel must fit into the input spatial dimensions\n    if k_h > h or k_w > w:\n        return -1\n\n    # 2) (h - k_h) must be exactly divisible by s_h, same for width\n    delta_h = h - k_h\n    delta_w = w - k_w\n    if delta_h % s_h != 0 or delta_w % s_w != 0:\n        return -1\n\n    # compute output dimensions\n    out_h = delta_h // s_h + 1\n    out_w = delta_w // s_w + 1\n\n    return (out_h, out_w)\n```\n\nExample usage and expected results:\n\n```python\n# valid configuration\n>>> pooling_shape((2, 2), (10, 3, 6, 6), (2, 2))\n(3, 3)\n\n# invalid: kernel too large\n>>> pooling_shape((7, 2), (1, 1, 5, 5), (1, 1))\n-1\n\n# invalid: non\u2010integer output size\n>>> pooling_shape((3, 3), (1, 1, 8, 8), (2, 2))\n-1\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_arr = np.array(X, dtype=float)      # shape (n_samples, n_features)\n    w_arr = np.array(w, dtype=float)      # shape (n_features,)\n    V_arr = np.array(V, dtype=float)      # shape (n_features, k)\n\n    # Linear term: \u03a3_j w_j * x_j\n    linear_term = X_arr.dot(w_arr)        # shape (n_samples,)\n\n    # Interaction term:\n    #  \u00bd \u03a3_f [ (\u03a3_j V_{j,f} x_j)^2 \u2212 \u03a3_j V_{j,f}^2 x_j^2 ]\n    # First part: (X * V) summed over features, then squared\n    XV = X_arr.dot(V_arr)                 # shape (n_samples, k)\n    sum_squared = np.sum(XV * XV, axis=1) # shape (n_samples,)\n\n    # Second part: sum over j of (V_{j,f}^2 * x_j^2)\n    X_squared = X_arr * X_arr             # shape (n_samples, n_features)\n    V_squared = V_arr * V_arr             # shape (n_features, k)\n    squared_sum = np.sum(X_squared.dot(V_squared), axis=1)  # shape (n_samples,)\n\n    interaction_term = 0.5 * (sum_squared - squared_sum)    # shape (n_samples,)\n\n    # Final prediction\n    y = w0 + linear_term + interaction_term  # shape (n_samples,)\n\n    # Round to 4 decimal places and convert to Python list\n    y_rounded = np.round(y, 4).tolist()\n    return y_rounded\n```\n\nExplanation of key steps:\n1. Convert inputs to NumPy arrays for vectorized operations.  \n2. Compute the linear part `X_arr.dot(w_arr)`.  \n3. For the interaction part:\n   - Compute `XV = X_arr.dot(V_arr)` which is the matrix of summed latent interactions per factor.\n   - Square it and sum over latent factors to get the first term of the interaction.\n   - Compute the second term by squaring `X_arr` and `V_arr` elementwise, then taking the dot\u2010product and summing over factors.\n   - Combine both with the 0.5 factor.\n4. Sum bias, linear, and interaction terms to form the final prediction.  \n5. Round to 4 decimals and return as a list of floats."}
{"task_id": 514, "completion_id": 0, "completion": "```python\ndef switch_phase(current_phase: str,\n                 set_train: bool | None = None,\n                 set_test: bool | None = None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    # 1. Validate current_phase\n    if current_phase not in (\"training\", \"testing\"):\n        return -1\n\n    # 2. Cannot supply both switches\n    if set_train is not None and set_test is not None:\n        return -1\n\n    # 3. Handle set_train\n    if set_train is not None:\n        if not isinstance(set_train, bool):\n            return -1\n        return \"training\" if set_train else \"testing\"\n\n    # 4. Handle set_test\n    if set_test is not None:\n        if not isinstance(set_test, bool):\n            return -1\n        return \"testing\" if set_test else \"training\"\n\n    # 5. No switch provided \u2192 toggle\n    return \"testing\" if current_phase == \"training\" else \"training\"\n```\n\nExplanation of key points:\n\n1. We first check that `current_phase` is exactly `\"training\"` or `\"testing\"`. Any other value is invalid \u2192 return `-1`.\n2. We enforce that you cannot provide both `set_train` and `set_test` at the same time.\n3. If `set_train` is given, it must be a `bool`; otherwise we return `-1`.  \n   - If `set_train is True`, we go to `\"training\"`.  \n   - If `set_train is False`, we go to `\"testing\"`.\n4. If `set_test` is given (and `set_train` is `None`), it must also be a `bool`.  \n   - If `set_test is True`, we go to `\"testing\"`.  \n   - If `set_test is False`, we go to `\"training\"`.\n5. If neither switch is provided, we simply flip the phase:  \n   `\"training\"` \u2192 `\"testing\"`, `\"testing\"` \u2192 `\"training\"`."}
{"task_id": 515, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict\n\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    flat_dict: Dict[str, Any] = {}\n\n    def _flatten(current: Dict[str, Any], prefix: str = \"\") -> None:\n        for key, value in current.items():\n            # Build the new key name\n            new_key = f\"{prefix}.{key}\" if prefix else key\n\n            # If the value is a dict, recurse into it\n            if isinstance(value, dict):\n                _flatten(value, new_key)\n            else:\n                # Otherwise, assign it directly\n                flat_dict[new_key] = value\n\n    # Kick off the recursion\n    _flatten(params)\n    return flat_dict\n```\n\nExplanation:\n1. We create an empty dictionary `flat_dict` to collect results.\n2. We define an inner recursive function `_flatten` that takes the current sub\u2010dictionary and the current key prefix.\n3. For each key/value pair in the sub\u2010dictionary:\n   - We build a flattened key by concatenating the prefix and the current key with a dot if a prefix exists.\n   - If the value is itself a dictionary, we recurse with the new prefix.\n   - Otherwise, we store the value into `flat_dict` under the flattened key.\n4. Finally, we invoke `_flatten` on the original `params` and return `flat_dict`.\n\nThis approach never mutates the input and returns a completely new, flattened dictionary."}
{"task_id": 516, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats. If the vectors have different numbers of total\n    elements, the function returns -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    # Convert inputs to numpy arrays and flatten to 1D\n    a_arr = np.array(a).ravel()\n    b_arr = np.array(b).ravel()\n\n    # Check that they have the same number of elements\n    if a_arr.size != b_arr.size:\n        return -1\n\n    # Compute squared differences and sum them\n    diff = a_arr - b_arr\n    sum_sq = np.sum(diff * diff)\n\n    # Compute the Euclidean distance\n    dist = math.sqrt(sum_sq)\n\n    # Round to 4 decimal places and return as float\n    return round(dist, 4)\n```\n\nExample usage:\n\n```python\n>>> euclidean_distance([1, 2, 3], [4, 5, 6])\n5.1962\n>>> euclidean_distance(np.array([0.0, 0.5]), [0, 1])\n0.5\n>>> euclidean_distance([1, 2], [1, 2, 3])\n-1\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n   Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n       # Detect whether the original input is a scalar\n    is_scalar_input = np.isscalar(z)\n\n    # Convert input to a NumPy array of floats (this handles scalars, lists, tuples)\n    z_arr = np.array(z, dtype=float)\n\n    # Numerically stable sigmoid:\n    #   for z >= 0: 1 / (1 + exp(-z))\n    #   for z <  0: exp(z) / (1 + exp(z))\n    out = np.where(\n        z_arr >= 0,\n        1.0 / (1.0 + np.exp(-z_arr)),\n        np.exp(z_arr) / (1.0 + np.exp(z_arr))\n    )\n\n    # Round to 4 decimal places\n    out = np.round(out, 4)\n\n    # Return a Python float if the input was scalar, else return a nested list\n    if is_scalar_input:\n        return out.item()\n    else:\n        return out.tolist()\n```\n\nExplanation of key points:\n1. We first check `np.isscalar(z)` to remember if the user passed in a true scalar (Python int/float or NumPy scalar).  \n2. By converting `z` to a NumPy array `z_arr`, we get uniform handling of lists, tuples, and arrays.  \n3. We implement the \u201ctwo\u2010branch\u201d sigmoid for numerical stability:\n   - When `z >= 0`, computing `exp(-z)` is safe even for large positive `z`.\n   - When `z < 0`, computing `exp(z)` is safe even for large negative `z`.  \n4. We round the result with `np.round(..., 4)`.  \n5. Finally, we return either a Python float (via `.item()`) or a nested Python list (via `.tolist()`).  \n\nTest:\n```python\n>>> sigmoid([-1, 0, 1])\n[0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\nfrom functools import wraps\n\ndef unhot(function: Callable) -> Callable:\n   Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n       @wraps(function)\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Convert actual if it's one-hot\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Convert predicted if it's one-hot\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original metric and return its result\n        return function(actual, predicted)\n\n    return wrapper\n```\n\nExample usage:\n\n```python\nimport numpy as np\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# One-hot inputs\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])\n\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float, nested list, or ndarray) with each value\n        replaced by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Case 1: NumPy ndarray\n    if isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n\n    # Case 2: Python list (possibly nested)\n    elif isinstance(z, list):\n        # Empty list -> empty list\n        if len(z) == 0:\n            return []\n        # Recurse for each element\n        return [sigmoid_grad(elem) for elem in z]\n\n    # Case 3: scalar (int, float, or numpy scalar)\n    else:\n        grad_val = z * (1 - z)\n        # Round and return a Python float\n        return float(np.round(grad_val, 4))\n```\n\nExample usage and outputs:\n\n```python\n>>> sigmoid_grad(0.5)\n0.25\n>>> sigmoid_grad([0.2, 0.5, 1.0])\n[0.16, 0.25, 0.0]\n>>> sigmoid_grad([[0.2, 0.5], [0.0, 1.0]])\n[[0.16, 0.25], [0.0, 0.0]]\n>>> arr = np.array([[0.2, 0.5], [0.0, 1.0]])\n>>> sigmoid_grad(arr)\narray([[0.16, 0.25],\n       [0.0 , 0.0 ]])\n>>> sigmoid_grad([])\n[]\n```"}
{"task_id": 521, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function returns 0 for every entry that is less than or equal to zero\n    and 1 for every entry that is strictly greater than zero. Scalars\n    yield a single integer; arrays/lists yield a Python list of identical\n    shape.\n    \"\"\"\n    # Convert input to a NumPy array\n    arr = np.array(z)\n    # Compute element-wise gradient: 1 where arr > 0, else 0\n    grad = (arr > 0).astype(int)\n\n    if arr.ndim == 0:\n        # Scalar case: return a single Python int\n        return int(grad)\n    else:\n        # Array/list case: return a nested Python list\n        return grad.tolist()\n```\n\nExplanation of the steps:\n\n1. We wrap the input `z` with `np.array(z)`.  \n   - If `z` is already an `ndarray`, this is a no-op (aside from returning a view or a copy).\n   - If `z` is a Python scalar (`int` or `float`), you get a 0-dim array.\n   - If `z` is a nested list, you get an n-dimensional array with matching shape.\n\n2. We compute `(arr > 0).astype(int)`.  \n   - This produces an integer array of the same shape, with 1 where `arr` is strictly positive and 0 otherwise.\n\n3. We branch on `arr.ndim`:  \n   - If it is 0 (i.e. a scalar or 0-dim `ndarray`), we convert that single element to a Python `int` and return it.  \n   - Otherwise, we convert the entire array back to a nested Python list with `.tolist()` and return that."}
{"task_id": 522, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    # Reset seed for reproducibility\n    np.random.seed(42)\n\n    # Normalize weight_shape into a tuple of ints\n    if isinstance(weight_shape, int):\n        shape = (weight_shape,)\n    elif isinstance(weight_shape, (list, tuple)):\n        shape = tuple(weight_shape)\n    else:\n        raise TypeError(\"weight_shape must be int, list of ints, or tuple of ints\")\n\n    # Draw samples from the standard normal distribution\n    arr = np.random.standard_normal(size=shape)\n\n    # Round to 4 decimal places\n    arr = np.round(arr, 4)\n\n    # Convert to pure Python nested list\n    return arr.tolist()\n```\n\nExample usage and reproducibility check:\n\n```python\n# 1D example\nprint(standard_normal(5))\n# Output: [0.4967, -0.1383, 0.6477, 1.523, -0.2342]\n\n# 2D example\nprint(standard_normal((2, 3)))\n# Output:\n# [[1.5792, 0.7674, -0.4695],\n#  [0.5426, -0.4634, -0.4657]]\n```\n\nEvery time you call `standard_normal` with the same `weight_shape`, you'll get the same rounded values."}
{"task_id": 523, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    # Determine fan-in\n    if len(weight_shape) == 2:\n        # Dense layer: shape = (fan_in, fan_out)\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        # 2D convolutional kernel: (k_h, k_w, in_ch, out_ch)\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        # Fallback for other shapes: treat as (fan_in, ...)\n        fan_in = weight_shape[0]\n\n    # He normal standard deviation\n    sigma = np.sqrt(2.0 / fan_in)\n\n    # Draw samples and round\n    weights = np.random.normal(loc=0.0, scale=sigma, size=weight_shape)\n    weights = np.round(weights, 4)\n\n    # Convert to nested Python lists\n    return weights.tolist()\n```\n\nExample usage:\n\n```python\nimport numpy as np\n\nnp.random.seed(0)\nprint(he_normal((2, 2)))\n# Output: [[1.7641, 0.4002], [0.9787, 2.2409]]\n```"}
{"task_id": 525, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef ridge_regression(\n        X: np.ndarray,\n        y: np.ndarray,\n        lambda_: float = 0.0) -> tuple[list[float], float]:\n   Fit a Ridge (L2-regularised) linear regression model.\n\n    The function must compute the optimal weights **analytically** (closed form)\n    and return them together with the intercept term, both rounded to 4\n    decimal places.\n\n    Args:\n        X: 2-D array of shape (m, n) with the input features.\n        y: 1-D or 2-D array of shape (m,) or (m, 1) with the targets.\n        lambda_: Non-negative regularisation strength.\n\n    Returns:\n        (weights, bias)\n        weights \u2013 list of length *n* with the model weights.\n        bias    \u2013 scalar intercept term.\n       # Ensure numpy arrays and correct shapes\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).squeeze()\n    if y.ndim != 1:\n        raise ValueErrory must be a 1-D array or a column vector    m, n = X.shape\n    if y.shape[0] != m:\n        raise ValueError(fNumber of samples in X ({m}) and y ({y.shape[0]}) must match    # 1. Mean-centre X and y\n    x_mean = X.mean(axis=0)\n    y_mean = y.mean()\n    Xc = X - x_mean  # shape (m, n)\n    yc = y - y_mean  # shape (m,)\n\n    # 2. Compute (X^T X + lambda I)\n    XtX = Xc.T @ Xc  # shape (n, n)\n    A = XtX + lambda_ * np.eye(n)\n\n    # 3. Invert (or pseudo-invert) A\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        A_inv = np.linalg.pinv(A)\n\n    # 4. Compute weights\n    w = A_inv @ (Xc.T @ yc)  # shape (n,)\n\n    # 5. Recover bias\n    b = y_mean - x_mean @ w\n\n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n\n    return w_rounded, b_rounded\n```\n\nExplanation of key steps:\n\n1. **Data centering** \u2013 we subtract the column means from `X` and the sample mean from `y` so that the intercept doesn\u2019t get regularized.\n2. **Closed-form solution** \u2013 we form the regularized normal equations matrix `A = X\u1d40X + \u03bbI`.  \n3. **Invertibility** \u2013 if `A` is singular, we fall back on the Moore\u2013Penrose pseudo-inverse.  \n4. **Bias recovery** \u2013 since we trained on mean-centered data, the original intercept is `\u0233 \u2212 x\u0304\u00b7w`.  \n5. **Rounding** \u2013 the final weights and intercept are rounded to 4 decimal places as requested."}
{"task_id": 527, "completion_id": 0, "completion": "```python\nimport os\nfrom typing import List, Union\n\ndef extract_archive(file_path: str,\n                    path: str = '.',\n                    archive_format: Union[str, List[str], None] = 'auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    # Define the known extensions for each format, all in lowercase\n    _FORMAT_EXTS = {\n        'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'],\n        'zip': ['.zip']\n    }\n\n    # Normalize archive_format into a set of allowed format names\n    allowed_formats = set()\n\n    # Handle None or empty list => nothing allowed\n    if archive_format is None:\n        return False\n    if isinstance(archive_format, list):\n        # empty list => immediate False\n        if not archive_format:\n            return False\n        # pick out only string entries\n        for fmt in archive_format:\n            if isinstance(fmt, str):\n                fmt_l = fmt.lower()\n                # 'auto' inside a list is treated as both formats\n                if fmt_l == 'auto':\n                    allowed_formats.update(['tar', 'zip'])\n                else:\n                    allowed_formats.add(fmt_l)\n    elif isinstance(archive_format, str):\n        af = archive_format.lower()\n        if af == 'auto':\n            allowed_formats.update(['tar', 'zip'])\n        else:\n            allowed_formats.add(af)\n    else:\n        # any other type is treated as disabling all formats\n        return False\n\n    # If after normalization nothing is allowed, quit early\n    if not allowed_formats:\n        return False\n\n    # Lowercase the file name for case-insensitive match\n    fname = os.path.basename(file_path).lower()\n\n    # Check each allowed format against its known extensions\n    for fmt in allowed_formats:\n        exts = _FORMAT_EXTS.get(fmt)\n        if not exts:\n            # unknown/unsupported format name => skip\n            continue\n        for ext in exts:\n            if fname.endswith(ext):\n                return True\n\n    # No matching extension found\n    return False\n```\n\nExplanation of key points:\n\u2022 We map each supported format (`'tar'`, `'zip'`) to its list of valid extensions (all lowercase).  \n\u2022 We normalize `archive_format` into a set of format names, handling:\n  - `'auto'` \u2192 both `'tar'` and `'zip'`.  \n  - Single string or list of strings.  \n  - `None` or empty list \u2192 immediate `False`.  \n  - Unknown types \u2192 `False`.  \n\u2022 We lowercase the incoming `file_path`\u2019s basename and test `.endswith(ext)` for each permitted extension.  \n\u2022 If any match is found, return `True`; otherwise `False`."}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array of shape (n, 2)\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim != 2 or X_arr.shape[1] != 2:\n        raise ValueError(\"X must be a list of [x1, x2] pairs.\")\n    \n    # Extract weight components\n    w1, w2 = W\n\n    # Determine the plotting ranges\n    x1_min, x1_max = X_arr[:, 0].min(), X_arr[:, 0].max()\n    x2_min, x2_max = X_arr[:, 1].min(), X_arr[:, 1].max()\n    \n    # Build equally spaced 1D arrays for each axis\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the meshgrid\n    X1_grid, X2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Compute the raw scores for each point: w1*x1 + w2*x2 + b\n    scores = w1 * X1_grid + w2 * X2_grid + b\n    \n    # Apply the sign rule: >= 0 -> 1, else -> -1\n    labels = np.where(scores >= 0, 1, -1).astype(int)\n    \n    # Convert to a nested Python list and return\n    return labels.tolist()\n```\n\nExplanation of the main steps:\n\n1. **Convert** the input `X` to a NumPy array and verify it has shape `(n, 2)`.\n2. **Find** the minimum and maximum of each column to determine the grid bounds.\n3. **Generate** two 1D arrays (`x1_plot`, `x2_plot`) of length `grid_n` spanning those bounds.\n4. **Form** the 2D mesh with `np.meshgrid`.\n5. **Compute** the classifier\u2019s linear score `w1\u00b7x1 + w2\u00b7x2 + b` at each grid point.\n6. **Label** each point with `1` if `score \u2265 0` and `-1` otherwise.\n7. **Return** the result as a nested Python list of shape `(grid_n \u00d7 grid_n)` containing only `1` and `-1`.\n"}
{"task_id": 529, "completion_id": 0, "completion": "```python\nimport math\n\ndef generate_progress_bar(current: int, target: int | None, width: int = 30) -> str:\n   Return an ASCII progress bar string similar to Keras' *Progbar*.\n\n    Parameters\n    ----------\n    current : int\n        The index of the most recently completed step.\n    target : int | None\n        The total number of steps, or ``None`` if it is unknown.\n    width : int, default=30\n        The length (in characters) of the bar itself (everything situated\n        between the two square brackets).\n\n    Returns\n    -------\n    str\n        A textual progress bar that fully complies with the specification\n        given in the task description (all spaces, brackets, arrows and dots\n        have to be placed exactly).\n       # Case 1: unknown target\n    if target is None:\n        # 7-character right-aligned current, then '/Unknown'\n        return fstr(current).rjust(7)}/Unknown    # Case 2: known target\n    # number of digits for right alignment\n    d = len(str(target))\n    # start with 'current/target ['\n    bar = fstr(current).rjust(d)}/{target} [    # compute filled length\n    prog_width = int(width * current / target)\n    # never exceed the total width or go below zero\n    prog_width = max(0, min(width, prog_width))\n\n    if prog_width > 0:\n        # (prog_width - 1) '=' characters\n        bar += * (prog_width - 1)\n        # arrow or final '='\n        if current < target:\n            bar +=        else:\n            bar +=\n\n    # fill the rest with dots\n    dots = width - prog_width\n    if dots > 0:\n        bar += * dots\n\n    # close the bracket\n    bar +=    return bar\n```\n\nExplanation of key steps:\n\n1. When `target` is `None`, we skip the bar entirely and return a 7-character, right-aligned `current` plus `/Unknown`.\n2. When `target` is known:\n   - We compute `d = len(str(target))` so that `current` is right-aligned against a field of width `d`.\n   - We compute `prog_width = int(width * current / target)` and clamp it between `0` and `width`.\n   - If `prog_width > 0`, we place `prog_width - 1` equal signs, followed by `>` if still in progress or `=` if finished.\n   - We pad the remainder of the bar (up to `width`) with dots and close with `]`."}
{"task_id": 530, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    # Clip predictions to avoid log(0)\n    eps = 1e-7\n    p = np.clip(y_pred, eps, 1 - eps)\n    \n    # Compute the per-sample BCE\n    loss = - (y_true * np.log(p) + (1 - y_true) * np.log(1 - p))\n    \n    # Return the mean loss, rounded to 4 decimal places\n    return round(np.mean(loss), 4)\n```\n\nExplanation of key steps:\n1. **Clipping**  \n   We force `y_pred` values into `[1e-7, 1 - 1e-7]` to ensure numerical stability when taking logarithms.\n2. **Loss computation**  \n   For each element, we compute  \n     \u2113 = \u2212[ y_true \u00b7 log(p) + (1 \u2212 y_true) \u00b7 log(1 \u2212 p) ]  \n3. **Averaging and rounding**  \n   We take the mean of all individual losses and round the final result to 4 decimal places."}
{"task_id": 531, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError(\"window_len must be a positive integer.\")\n    \n    # Special case for length 1: define w[0] = sum(a_k)\n    if window_len == 1:\n        total = sum(coefs)\n        return [round(total, 4)]\n    \n    L = window_len\n    # Build the theta_n grid\n    if symmetric:\n        # L points from -\u03c0 to +\u03c0 inclusive\n        theta = np.linspace(-np.pi, np.pi, L, endpoint=True)\n    else:\n        # Periodic: L+1 points from -\u03c0 to +\u03c0 inclusive, discard last\n        theta = np.linspace(-np.pi, np.pi, L, endpoint=False)\n    \n    # Convert coefficients to array and build k indices\n    a = np.array(coefs, dtype=float)         # shape (K+1,)\n    k = np.arange(a.size, dtype=float)       # shape (K+1,)\n    \n    # Compute w[n] = sum_{k=0}^K a_k * cos(k * theta[n])\n    # We'll vectorize: compute cos(k[:,None] * theta[None,:]) -> (K+1, L)\n    cos_terms = np.cos(np.outer(k, theta))   # shape (K+1, L)\n    w = (a[:, None] * cos_terms).sum(axis=0)  # shape (L,)\n    \n    # Round to 4 decimal places and return as a Python list\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()\n```\n\nExplanation of key steps:\n1. **Validation and edge case**: We require `window_len > 0`. For `window_len == 1`, we directly return \\[\u2211a\u2096\\], since the usual grid degenerates.\n2. **Theta grid**:\n   - Symmetric: `np.linspace(-\u03c0, \u03c0, L, endpoint=True)`.\n   - Periodic: `np.linspace(-\u03c0, \u03c0, L, endpoint=False)` (equivalent to sampling L+1 points and dropping the last).\n3. **Vectorized sum**: We form all cosines `cos(k * \u03b8\u2099)` in one go via `np.outer`, multiply by coefficients, sum over `k`, and round to four decimals.\n4. **Output**: A plain Python list of floats rounded to 4 decimal places."}
{"task_id": 532, "completion_id": 0, "completion": "```python\ndef count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    # If there are fewer than two layers, there are no connections \u2192 no parameters.\n    if len(layers) < 2:\n        return 0\n\n    total_params = 0\n    # Iterate over consecutive layer pairs\n    for n_in, n_out in zip(layers, layers[1:]):\n        weights = n_in * n_out\n        biases = n_out\n        total_params += weights + biases\n\n    return total_params\n```\n\nExample usage:\n\n```python\n>>> count_fc_parameters([5, 10, 3])\n# First layer pair (5\u219210): 5*10 weights + 10 biases = 50 + 10 = 60\n# Second pair          (10\u21923): 10*3 weights + 3  biases = 30 + 3  = 33\n# Total = 60 + 33 = 93\n93\n```\n"}
{"task_id": 533, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    # Precompute the constant factor 1 / (\u03c3 * sqrt(2\u03c0))\n    coeff = 1.0 / (sigma * np.sqrt(2.0 * np.pi))\n\n    # Check if x is a scalar (int, float, or NumPy scalar)\n    if np.isscalar(x):\n        # Compute the exponent term\n        exponent = -((x - mean) ** 2) / (2.0 * sigma ** 2)\n        pdf_val = coeff * np.exp(exponent)\n        # Round to 4 decimal places and return as a Python float\n        return round(pdf_val, 4)\n    else:\n        # Convert input to a NumPy array of floats\n        arr = np.asarray(x, dtype=float)\n        exponent = -((arr - mean) ** 2) / (2.0 * sigma ** 2)\n        pdf_vals = coeff * np.exp(exponent)\n        # Round to 4 decimal places, convert to Python list, and return\n        return np.round(pdf_vals, 4).tolist()\n```\n\nExplanation of key steps:\n1. We first compute the normalization constant `coeff = 1 / (\u03c3 * sqrt(2\u03c0))`.\n2. If `x` is a scalar (`np.isscalar(x)`), we directly compute its PDF value, round it, and return a Python float.\n3. Otherwise, we vectorize across all points by converting `x` into a NumPy array, computing the exponent term elementwise, rounding the resulting array to 4 decimal places, and returning it as a Python list with `.tolist()`."}
{"task_id": 534, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals. Returns a float for\n        scalar input; otherwise returns a Python list preserving the input shape.\n    \"\"\"\n    # Convert input to a NumPy array of floats\n    arr = np.array(Z, dtype=float)\n\n    # Apply the sigmoid function element-wise\n    sig = 1 / (1 + np.exp(-arr))\n\n    # Round to 4 decimal places\n    sig = np.round(sig, 4)\n\n    # If the result is a scalar (0-dimensional array), return it as a Python float\n    if sig.ndim == 0:\n        return float(sig)\n\n    # Otherwise return a nested Python list preserving the shape\n    return sig.tolist()\n\n# Example usages:\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid_(0))             # 0.5\n    print(sigmoid_(4.0))           # 0.9820\n\n    # 1-D list\n    print(sigmoid_([-1, 0, 1]))    # [0.2689, 0.5, 0.7311]\n\n    # 2-D list\n    mat = [[-1, 2], [0, -3]]\n    print(sigmoid_(mat))           # [[0.2689, 0.8808], [0.5, 0.0474]]\n\n    # NumPy array\n    arr = np.array([[-2.3, 0.0], [3.1, 4.5]])\n    print(sigmoid_(arr))           # [[0.0911, 0.5], [0.9570, 0.9890]]\n```"}
{"task_id": 536, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression(X_train, y_train, X_test, method=\"normal\", alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    # Number of training examples (m) and number of features (n)\n    m, n = X_train.shape\n\n    # Add bias term to X_train\n    X_b = np.hstack([np.ones((m, 1)), X_train])  # shape (m, n+1)\n\n    # Closed-form solution\n    if method == \"normal\":\n        # \u03b8 = (X\u1d40X)\u207b\u00b9 X\u1d40 y\n        XtX = X_b.T @ X_b              # shape (n+1, n+1)\n        Xty = X_b.T @ y_train          # shape (n+1,)\n        theta = np.linalg.inv(XtX) @ Xty\n    else:\n        # Batch Gradient Descent\n        theta = np.zeros(n + 1)        # initialize parameters\n        for _ in range(num_iter):\n            predictions = X_b @ theta      # shape (m,)\n            errors = predictions - y_train # shape (m,)\n            grad = (X_b.T @ errors) / m    # shape (n+1,)\n            theta = theta - alpha * grad\n\n    # Prepare X_test with bias term\n    k = X_test.shape[0]\n    X_test_b = np.hstack([np.ones((k, 1)), X_test])  # shape (k, n+1)\n\n    # Make predictions\n    preds = X_test_b @ theta  # shape (k,)\n\n    # Round to 4 decimal places and return as list\n    return np.round(preds, 4).tolist()\n```"}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n   Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n       # Small constant to avoid division by zero\n    eps = 1e-9\n\n    # Separate the training data by class\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n\n    # Number of samples per class\n    n0 = X0.shape[0]\n    n1 = X1.shape[0]\n    n_total = n0 + n1\n\n    # Compute class priors\n    prior0 = n0 / n_total\n    prior1 = n1 / n_total\n\n    # Compute per-feature mean and std for each class (MLE, ddof=0)\n    mu0 = X0.mean(axis=0)\n    mu1 = X1.mean(axis=0)\n    sigma0 = X0.std(axis=0, ddof=0) + eps\n    sigma1 = X1.std(axis=0, ddof=0) + eps\n\n    # Precompute constants for Gaussian log-likelihood\n    # log(1/(sqrt(2*pi)*sigma)) = -0.5*log(2*pi) - log(sigma)\n    const0 = -0.5 * np.log(2 * np.pi) - np.log(sigma0)\n    const1 = -0.5 * np.log(2 * np.pi) - np.log(sigma1)\n\n    # For numerical stability, work in log-space\n    log_prior0 = np.log(prior0)\n    log_prior1 = np.log(prior1)\n\n    y_pred = []\n    for x in X_test:\n        # Compute log-likelihood for class 0\n        diff0 = x - mu0\n        log_lik0 = const0 - (diff0**2) / (2 * sigma0**2)\n        log_prob0 = log_prior0 + log_lik0.sum()\n\n        # Compute log-likelihood for class 1\n        diff1 = x - mu1\n        log_lik1 = const1 - (diff1**2) / (2 * sigma1**2)\n        log_prob1 = log_prior1 + log_lik1.sum()\n\n        # Predict the class with higher posterior log-probability\n        if log_prob1 > log_prob0:\n            y_pred.append(1)\n        else:\n            y_pred.append(0)\n\n    return y_pred\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n       Compute the binary cross\u2010entropy cost.\n\n    Arguments:\n    AL -- Predicted probabilities, shape (m,) or (1, m)\n    Y  -- True labels (0 or 1), shape same as AL\n\n    Returns:\n    cost -- Python float, the cross\u2010entropy cost\n       # Clip AL to avoid log(0)\n    eps = 1e-15\n    AL_clipped = np.clip(AL, eps, 1 - eps)\n\n    # Number of examples\n    m = Y.size\n\n    # Compute cross\u2010entropy\n    loss_terms = Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    cost = - np.sum(loss_terms) / m\n\n    # Ensure it's a native Python float and round to 4 decimal places\n    return round(float(cost), 4)\n```\n\nExplanation of key steps:\n1. We clip `AL` into \\[1e-15, 1\u22121e-15\\] to avoid taking `log(0)`.\n2. We compute the sum of `y\u00b7ln(a) + (1\u2212y)\u00b7ln(1\u2212a)` across all m examples.\n3. We multiply by `-1/m` to get the average loss.\n4. We convert to a Python float and round to 4 decimal places for the final output."}
{"task_id": 540, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    # compute sigmoid\n    sigmoid = 1.0 / (1.0 + np.exp(-Z))\n    # compute derivative\n    deriv = sigmoid * (1.0 - sigmoid)\n    # round to 4 decimal places and convert to plain Python list\n    return np.round(deriv, 4).tolist()\n```"}
{"task_id": 541, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef return_input_grads(y, y_hat):\n   Compute the gradient of Binary Cross-Entropy loss with respect to the\n    network inputs (logits).\n\n    Parameters\n    ----------\n    y : array-like\n        Ground-truth binary labels (0 or 1).  Can be a scalar, 1-D list/array\n        or 2-D nested list/array.\n    y_hat : array-like\n        Predicted probabilities (after sigmoid, values in the range 0-1) with\n        the same shape as *y*.\n\n    Returns\n    -------\n    list\n        Gradient of the BCE loss w.r.t. each logit, rounded to 4 decimal\n        places, returned as a regular Python list (with the original shape).\n       # Convert inputs to NumPy arrays of floats\n    y_arr = np.array(y, dtype=float)\n    y_hat_arr = np.array(y_hat, dtype=float)\n\n    # Ensure the shapes match\n    if y_arr.shape != y_hat_arr.shape:\n        raise ValueError(fShape mismatch: y has shape {y_arr.shape},                         fy_hat has shape {y_hat_arr.shape    # Compute element-wise gradient and round to 4 decimal places\n    grad = np.round(y_hat_arr - y_arr, 4)\n\n    # Convert back to a (nested) Python list and return\n    return grad.tolist()\n```"}
{"task_id": 542, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(\n    params: list[np.ndarray],\n    grads: list[np.ndarray],\n    s: list[np.ndarray] | None = None,\n    alpha: float = 0.01,\n    beta: float = 0.9,\n    epsilon: float = 1e-8,\n) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Perform a single RMSProp optimisation step.\n    \n    Args:\n        params: List of parameter arrays.\n        grads:  List of gradient arrays corresponding to params.\n        s:      List of running-average-of-squared-gradients arrays, or None/empty.\n        alpha:  Learning rate.\n        beta:   Exponential decay rate for the running average.\n        epsilon:Small constant for numeric stability.\n    \n    Returns:\n        new_params: List of updated parameters (rounded to 6 decimals).\n        new_s:      List of updated running averages.\n    \"\"\"\n    # Initialize running averages if not provided or empty\n    if not s:\n        s = [np.zeros_like(g) for g in grads]\n    \n    new_params = []\n    new_s = []\n    \n    for \u03b8, g, s_old in zip(params, grads, s):\n        # Update running average of squared gradients\n        s_curr = beta * s_old + (1.0 - beta) * (g * g)\n        # Parameter update\n        \u03b8_curr = \u03b8 - alpha * g / (np.sqrt(s_curr) + epsilon)\n        # Round updated parameters to 6 decimal places\n        \u03b8_curr_rounded = np.round(\u03b8_curr, 6)\n        \n        new_s.append(s_curr)\n        new_params.append(\u03b8_curr_rounded)\n    \n    return new_params, new_s\n```"}
{"task_id": 543, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef cal_gini_index(data: list) -> float:\n   Calculate the Gini index of a list of class labels.\n\n    Args:\n        data: A list of hashable values representing class labels.\n\n    Returns:\n        The Gini index rounded to 4 decimal places. If the input list is empty\n        return 0.0.\n       if not data:\n        return 0.0\n\n    total = len(data)\n    counts = Counter(data)\n\n    # Sum of squared class probabilities\n    sum_p2 = sum((count / total) ** 2 for count in counts.values())\n\n    gini = 1.0 - sum_p2\n    return round(gini, 4)\n```\n\nExplanation:\n1. If the input list is empty, we immediately return `0.0`.\n2. We count occurrences of each label using `Counter`.\n3. For each class, we compute its probability `p = count / total` and accumulate `p**2`.\n4. The Gini index is `1 - sum(p_i^2)`.\n5. Finally, we round the result to 4 decimal places and return it."}
{"task_id": 544, "completion_id": 0, "completion": "```python\ndef split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        # If the sample's fea-th feature is >= value, goes into set1, else into set2\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return set1, set2\n```\n\nExplanation:\n- We initialize two empty lists, `set1` and `set2`.\n- We iterate through each `sample` in the original `data` (without modifying it).\n- If `sample[fea] >= value`, we append to `set1`; otherwise, we append to `set2`.\n- The order of samples in each subset is exactly the order they appeared in `data`.\n- If `data` is empty, the loop never runs and we return two empty lists as required."}
{"task_id": 545, "completion_id": 0, "completion": "```python\ndef tree_stats(root: \"node | None\") -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    # Base case: empty tree\n    if root is None:\n        return 0, 0\n\n    # If this node is a leaf, it contributes 1 leaf and depth = 1\n    if root.results is not None:\n        return 1, 1\n\n    # Otherwise, recurse on left and right subtrees\n    left_leaves, left_depth = tree_stats(root.left)\n    right_leaves, right_depth = tree_stats(root.right)\n\n    # Total leaves is sum of both sides\n    total_leaves = left_leaves + right_leaves\n    # Max depth is 1 (this node) + max of children depths\n    max_depth = 1 + max(left_depth, right_depth)\n\n    return total_leaves, max_depth\n```\n\nExplanation:\n\n1. If `root` is `None`, the tree is empty: return `(0, 0)`.\n2. If `root.results` is not `None`, it's a leaf. We count 1 leaf and the depth of this node alone is 1.\n3. Otherwise, we recursively compute `(leaf_count, max_depth)` for `root.left` and `root.right`.\n4. We sum the leaf counts from both subtrees.\n5. The maximum depth is `1` (for the current node) plus the greater of the two subtree depths."}
{"task_id": 546, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Any, Dict, List, Tuple\n\ndef build_tree(data: List[List[Any]]) -> Dict[str, Any]:\n   Build a CART decision tree using the Gini impurity criterion.\n\n    The *data* argument is a list where every inner list represents a training\n    sample.  All but the last elements of each sample are feature values; the\n    last element is the class label.\n\n    The function returns the root of the generated tree as a nested dictionary:\n        Leaf   ->label class_label}\n        Branch ->feature index,\n                   value   split_value,\n                   left    <subtree for samples with feature == value>,\n                   right   <subtree for samples with feature != value>}\n\n    If *data* is empty, returns the empty dictionary.\n       # Base case: empty dataset\n    if not data:\n        return {}\n\n    # Number of features (all columns except the last one, which is the label)\n    num_features = len(data[0]) - 1\n\n    # Helper: compute Gini impurity of a dataset\n    def gini(subset: List[List[Any]]) -> float:\n        n = len(subset)\n        if n == 0:\n            return 0.0\n        label_counts = Counter(sample[-1] for sample in subset)\n        return 1.0 - sum((cnt / n) ** 2 for cnt in label_counts.values())\n\n    # Compute current node's Gini impurity\n    current_gini = gini(data)\n    best_gain = 0.0\n    best_feature = None       # type: int\n    best_value = None         # type: Any\n    best_splits = None        # type: Tuple[List[List[Any]], List[List[Any]]]\n\n    n_total = len(data)\n\n    # Try all possible splits\n    for feature in range(num_features):\n        # Unique values for this feature, sorted\n        values = sorted({sample[feature] for sample in data})\n        for val in values:\n            # Partition data\n            left = [sample for sample in data if sample[feature] == val]\n            right = [sample for sample in data if sample[feature] != val]\n\n            # Skip invalid splits\n            if not left or not right:\n                continue\n\n            # Compute weighted Gini after this split\n            n_left, n_right = len(left), len(right)\n            gini_left = gini(left)\n            gini_right = gini(right)\n            weighted_gini = (n_left * gini_left + n_right * gini_right) / n_total\n\n            gain = current_gini - weighted_gini\n            # Update best split if gain is strictly greater\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_value = val\n                best_splits = (left, right)\n\n    # If no split yields positive gain, make a leaf\n    if best_gain <= 0.0:\n        # Majority vote for label, ties broken by first appearance in data\n        label_counts = Counter(sample[-1] for sample in data)\n        max_count = max(label_counts.values())\n        # Candidates with max count\n        candidates = {lab for lab, cnt in label_counts.items() if cnt == max_count}\n        # Pick the one that appears first in the data\n        for sample in data:\n            if sample[-1] in candidates:\n                majority_label = sample[-1]\n                break\n        returnlabel majority_label}\n\n    # Otherwise, build an internal node and recurse\n    left_data, right_data = best_splits\n    return {\n       feature best_feature,\n       value best_value,\n       left build_tree(left_data),\n       right build_tree(right_data)\n    }\n```\n\nExplanation of key steps:\n\n1. **Gini impurity**:  \n   For a set of samples, Gini impurity = 1 \u2212 \u03a3\u2097 (p\u2097)\u00b2, where p\u2097 is the fraction of samples of class l.\n\n2. **Splitting**:  \n   For each feature index and each of its unique values (in sorted order), split the data into:\n   - `left`: samples where feature == value  \n   - `right`: samples where feature != value  \n   We skip splits that leave either side empty.\n\n3. **Gini gain**:  \n   `gain = current_gini \u2212 (|left| * gini(left) + |right| * gini(right)) / total`\n\n4. **Selecting the split**:  \n   We keep the split with the strictly highest gain. Ties (zero gain or equal gains) preserve the first\u2010seen split because we only update on `gain > best_gain`.\n\n5. **Stopping**:  \n   If no split yields a positive gain, we create a leaf. The leaf\u2019s label is chosen by majority vote; in case of a tie, the class that appears first in the current data subset is used.\n\n6. **Recursion**:  \n   When a split is selected, recursively build subtrees for the left and right partitions.\n\nThis fulfills the CART induction using Gini impurity as specified."}
{"task_id": 547, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_step(A: list[list[float]],\n                 B: list[list[float]],\n                 S: list[float],\n                 obs: list[int],\n                 t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n    \"\"\"\n    # Convert to numpy arrays and check basic dimensions\n    try:\n        A_mat = np.array(A, dtype=float)\n        B_mat = np.array(B, dtype=float)\n        S_vec = np.array(S, dtype=float)\n    except Exception:\n        return -1\n\n    # A must be square of size (n,n)\n    if A_mat.ndim != 2 or A_mat.shape[0] != A_mat.shape[1]:\n        return -1\n    n = A_mat.shape[0]\n    if n == 0:\n        return -1\n\n    # B must have shape (n,m)\n    if B_mat.ndim != 2 or B_mat.shape[0] != n:\n        return -1\n    m = B_mat.shape[1]\n    if m == 0:\n        return -1\n\n    # S must be length n\n    if S_vec.ndim != 1 or S_vec.shape[0] != n:\n        return -1\n\n    # obs must be a non-empty list of integers in [0, m-1]\n    if not isinstance(obs, list) or len(obs) == 0:\n        return -1\n    T = len(obs)\n    if not isinstance(t, int) or t < 0 or t >= T:\n        return -1\n    for o in obs:\n        if not isinstance(o, int) or o < 0 or o >= m:\n            return -1\n\n    # Forward recursion\n    try:\n        # \u03b1_0 = S \u2299 B[:, obs[0]]\n        alpha = S_vec * B_mat[:, obs[0]]\n        # for t >= 1\n        for time in range(1, t + 1):\n            # \u03b1_t = (\u03b1_{t-1}^T A) \u2299 B[:, obs[t]]\n            alpha = alpha.dot(A_mat) * B_mat[:, obs[time]]\n    except Exception:\n        return -1\n\n    # Round to 4 decimal places and return as Python list\n    alpha_list = alpha.tolist()\n    return [round(float(val), 4) for val in alpha_list]\n```"}
{"task_id": 548, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_xi(A: list[list[float]],\n               B: list[list[float]],\n               pi: list[float],\n               obs: list[int],\n               t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function computes\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    using the forward\u2013backward algorithm.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence (length T).\n        t: Time index (0 \u2264 t < T\u22121).\n\n    Returns:\n        The N\u00d7N \u03be matrix as a list of lists rounded to 4 decimals,\n        or -1 if t is out of range.\n    \"\"\"\n    T = len(obs)\n    # invalid t or too short observation sequence\n    if t < 0 or t >= T - 1:\n        return -1\n\n    # Convert inputs to numpy arrays\n    A = np.array(A, dtype=float)       # shape (N, N)\n    B = np.array(B, dtype=float)       # shape (N, M)\n    pi = np.array(pi, dtype=float)     # shape (N,)\n\n    N = A.shape[0]\n\n    # Forward pass: compute alpha[0..T-1]\n    alpha = np.zeros((T, N), dtype=float)\n    # initialization\n    alpha[0, :] = pi * B[:, obs[0]]\n    # induction\n    for k in range(1, T):\n        alpha[k, :] = (alpha[k-1, :] @ A) * B[:, obs[k]]\n\n    # Backward pass: compute beta[0..T-1]\n    beta = np.zeros((T, N), dtype=float)\n    # initialization\n    beta[T-1, :] = 1.0\n    # induction\n    for k in range(T-2, -1, -1):\n        # sum over next-state j: A[i,j] * B[j, obs[k+1]] * beta[k+1, j]\n        beta[k, :] = (A * (B[:, obs[k+1]] * beta[k+1, :])[None, :]).sum(axis=1)\n\n    # Compute \u03be_t(i,j) numerator: \u03b1_t(i) * A[i,j] * B[j, obs[t+1]] * \u03b2_{t+1}(j)\n    # shape manipulations:\n    #   alpha[t] \u2192 (N,1)\n    #   A        \u2192 (N,N)\n    #   B[:,obs[t+1]]*beta[t+1] \u2192 (N,) \u2192 broadcast to (1,N)\n    numer = (\n        alpha[t][:, None]\n        * A\n        * (B[:, obs[t+1]] * beta[t+1])[None, :]\n    )\n\n    # normalization constant\n    denom = numer.sum()\n    xi = numer / denom\n\n    # round to 4 decimals and return as Python list\n    xi = np.round(xi, 4)\n    return xi.tolist()\n```\n\nExplanation of key steps:\n\n1. **Validity check**: If `t` is not in [0, T\u22122], return -1.\n2. **Forward recursion** (`\u03b1`):\n   - \u03b1\u2080(i) = \u03c0(i)\u00b7b_i(o\u2080)\n   - \u03b1\u2096(j) = [\u2211\u2099 \u03b1_{k\u22121}(n)\u00b7a_{n,j}] \u00b7 b_j(o\u2096)\n3. **Backward recursion** (`\u03b2`):\n   - \u03b2_{T\u22121}(i) = 1\n   - \u03b2\u2096(i) = \u2211\u2c7c a_{i,j}\u00b7b_j(o_{k+1})\u00b7\u03b2_{k+1}(j)\n4. **\u03be computation** at time `t`:\n   \u03be\u209c(i,j) \u221d \u03b1\u209c(i)\u00b7a_{i,j}\u00b7b_j(o_{t+1})\u00b7\u03b2_{t+1}(j),  \n   then normalize so \u2211_{i,j} \u03be\u209c(i,j)=1.\n5. Final matrix is rounded to 4 decimal places per requirement."}
{"task_id": 549, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    # Convert inputs to 1-D numpy arrays of floats\n    x_arr = np.array(x, dtype=float).ravel()\n    y_arr = np.array(y, dtype=float).ravel()\n\n    # Check that they have the same length\n    if x_arr.shape != y_arr.shape:\n        return -1\n\n    # Compute squared differences and sum them\n    diff = x_arr - y_arr\n    sq_dist = np.dot(diff, diff)  # equivalent to np.sum(diff**2)\n\n    # Round to 4 decimal places and return as a Python float\n    return float(round(sq_dist, 4))\n```\n\nExplanation of key steps:\n1. We use `np.array(..., dtype=float).ravel()` to ensure both inputs become one\u2010dimensional arrays of the same type.\n2. We compare their shapes; if they differ, we immediately return `-1`.\n3. We compute the squared Euclidean distance via a dot\u2010product of the difference vector with itself.\n4. Finally, we round the result to four decimal places and cast to a pure Python `float`."}
{"task_id": 551, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef best_gini_split(X: np.ndarray,\n                    y: np.ndarray,\n                    epsilon: float = 1e-3) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function returns (-1, None, parent_gini).\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    # Helper to compute Gini impurity of a label array\n    def gini_impurity(labels: np.ndarray) -> float:\n        m = labels.shape[0]\n        if m == 0:\n            return 0.0\n        cnt = Counter(labels)\n        # sum of squared class probabilities\n        sum_sq = sum((count / m) ** 2 for count in cnt.values())\n        return 1.0 - sum_sq\n\n    # Compute the impurity of the parent node\n    parent_gini = gini_impurity(y)\n\n    best_gini = float(\"inf\")\n    best_feature = -1\n    best_value = None\n\n    # Iterate over features\n    for feature_idx in range(n_features):\n        col = X[:, feature_idx]\n        # Unique values in this feature (works for strings and numbers)\n        # We convert to a Python list via set to skip any numpy overhead\n        uniq_vals = set(col.tolist())\n\n        # Try every possible categorical equality split\n        for v in uniq_vals:\n            # Boolean mask where feature == v\n            mask = (col == v)\n            n_left = mask.sum()\n            # Skip trivial splits\n            if n_left == 0 or n_left == n_samples:\n                continue\n\n            # Split labels\n            y_left = y[mask]\n            y_right = y[~mask]\n            n_right = n_samples - n_left\n\n            # Compute Gini for children\n            g_left = gini_impurity(y_left)\n            g_right = gini_impurity(y_right)\n\n            # Weighted Gini of this split\n            g_split = (n_left / n_samples) * g_left + (n_right / n_samples) * g_right\n\n            # Check if this is the best split so far\n            if g_split < best_gini:\n                best_gini = g_split\n                best_feature = feature_idx\n                best_value = v\n\n    # If no split improved impurity by at least epsilon, return no-split\n    if best_feature == -1 or (parent_gini - best_gini) < epsilon:\n        return -1, None, float(parent_gini)\n\n    # Ensure returned split value is a native Python scalar if it was a numpy scalar\n    if isinstance(best_value, np.generic):\n        best_value = best_value.item()\n\n    return best_feature, best_value, float(best_gini)\n```\n\nExplanation of key steps:\n\n1. Compute the Gini impurity of the parent node once.\n2. For each feature and for each unique value in that feature:\n   a. Build a boolean mask for `X[:, feature] == value`.  \n   b. Skip any split that puts all samples into one side.  \n   c. Compute Gini impurities of the left and right subsets.  \n   d. Compute the weighted Gini of the split.  \n   e. Track the split that yields the smallest weighted Gini.\n3. After considering all splits, compare the best split\u2019s Gini to the parent Gini. If the decrease is less than `epsilon`, or if no valid split was found, return `(-1, None, parent_gini)`.\n4. Otherwise, return `(best_feature, best_value, best_gini)`."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm and returns the\n    resulting vector rounded to four decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n                    - pi: 1D array of shape (N,) initial state distribution\n                    - A:  2D array of shape (N, N) state transition matrix\n                    - B:  2D array of shape (N, M) emission probability matrix\n        observations (list[int]): Sequence of observation indices (each in [0, M-1]).\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t,\n                     rounded to 4 decimal places. Empty list if t is out of range.\n    \"\"\"\n    # number of time steps\n    T = len(observations)\n    # check time index\n    if t < 0 or t >= T:\n        return []\n\n    # unpack HMM parameters and ensure numpy arrays of float\n    pi = np.array(hmm['pi'], dtype=float)           # shape (N,)\n    A  = np.array(hmm['A'],  dtype=float)           # shape (N, N)\n    B  = np.array(hmm['B'],  dtype=float)           # shape (N, M)\n\n    N = pi.shape[0]  # number of hidden states\n\n    # -- Forward pass --\n    # alpha[u, i] = P(O[0..u], q_u = i | lambda)\n    alpha = np.zeros((T, N), dtype=float)\n    # initialization\n    o0 = observations[0]\n    alpha[0, :] = pi * B[:, o0]\n\n    # induction\n    for u in range(1, T):\n        o_u = observations[u]\n        # vectorized: for each state j:\n        # alpha[u, j] = [sum_i alpha[u-1, i] * A[i, j]] * B[j, o_u]\n        alpha[u, :] = (alpha[u - 1, :].reshape(-1, 1) * A).sum(axis=0) * B[:, o_u]\n\n    # -- Backward pass --\n    # beta[u, i] = P(O[u+1..T-1] | q_u = i, lambda)\n    beta = np.zeros((T, N), dtype=float)\n    # initialization\n    beta[T - 1, :] = 1.0\n\n    # induction\n    for u in range(T - 2, -1, -1):\n        o_next = observations[u + 1]\n        # for each state i:\n        # beta[u, i] = sum_j A[i, j] * B[j, o_next] * beta[u+1, j]\n        beta[u, :] = (A * (B[:, o_next] * beta[u + 1, :])).sum(axis=1)\n\n    # -- Compute gamma at time t --\n    numer = alpha[t, :] * beta[t, :]\n    denom = numer.sum()\n    # normalize\n    gamma_t = numer / denom\n\n    # round to 4 decimal places and convert to list\n    gamma_rounded = np.round(gamma_t, 4).tolist()\n    return gamma_rounded\n```\n\nExplanation of the main steps:\n\n1. **Checks**  \n   If the requested time step `t` is outside `[0, T-1]`, we immediately return an empty list.\n\n2. **Forward pass** (`alpha`)  \n   - Initialize  \n     \u03b1\u2080(i) = \u03c0_i \u00b7 b_i(o\u2080)  \n   - Recursion  \n     \u03b1_u(j) = [\u2211\u1d62 \u03b1_{u\u22121}(i) \u00b7 a_{ij}] \u00b7 b_j(o_u)\n\n3. **Backward pass** (`beta`)  \n   - Initialize  \n     \u03b2_{T\u22121}(i) = 1  \n   - Recursion  \n     \u03b2_u(i) = \u2211\u2c7c a_{ij} \u00b7 b_j(o_{u+1}) \u00b7 \u03b2_{u+1}(j)\n\n4. **Posterior** (`gamma`)  \n   \u03b3\u209c(i) = \u03b1\u209c(i) \u00b7 \u03b2\u209c(i) / \u2211\u2096 [\u03b1\u209c(k) \u00b7 \u03b2\u209c(k)]  \n   Finally we round each component to four decimal places.\n\nThis satisfies all requirements: it uses the forward\u2013backward algorithm, normalizes correctly, and returns a Python list of floats rounded to four decimal places."}
{"task_id": 553, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    alpha: float = 0.01,\n    max_iter: int = 1000,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n\n    # Number of training samples and features\n    n_samples, n_features = X_train.shape\n\n    # 1. Add bias column (ones) to training and test data\n    X = np.hstack([np.ones((n_samples, 1)), X_train])       # shape: (n_samples, n_features+1)\n    m_samples = X_test.shape[0]\n    X_t = np.hstack([np.ones((m_samples, 1)), X_test])      # shape: (m_samples, n_features+1)\n\n    # 2. Initialize weight vector (including bias) to zeros\n    w = np.zeros(n_features + 1, dtype=float)\n\n    # Sigmoid function\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # 3. Batch Gradient Ascent on the log-likelihood\n    for _ in range(max_iter):\n        z = X.dot(w)                   # shape: (n_samples,)\n        h = sigmoid(z)                 # shape: (n_samples,)\n        gradient = X.T.dot(y_train - h) / n_samples\n        w += alpha * gradient\n\n    # 4. Predict on X_test\n    z_test = X_t.dot(w)                # shape: (m_samples,)\n    h_test = sigmoid(z_test)           # shape: (m_samples,)\n    preds = (h_test >= 0.5).astype(int)\n\n    # Convert to standard Python list of ints\n    return preds.tolist()\n```\n\nExplanation of the key steps:\n\n1. We prepend a column of ones to both `X_train` and `X_test` so the bias term is treated as a weight.\n2. We initialize a weight vector `w` of length `n_features + 1` to zeros.\n3. We run `max_iter` iterations of batch gradient ascent, using the update  \n   `w \u2190 w + \u03b1 \u00b7 (X\u1d40 (y \u2212 \u03c3(Xw))) / n_samples`,  \n   which maximizes the log\u2010likelihood of the logistic model.\n4. Finally, we compute probabilities for the test set via the sigmoid, threshold at 0.5, and return a plain Python list of 0/1 integers."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    # 1. Compute full pairwise distance matrix\n    #    (n_samples x n_samples)\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff**2, axis=2))\n\n    # 2. Build neighborhood list for each sample\n    neighborhoods = [\n        list(np.where(dist_matrix[i] <= eps)[0])\n        for i in range(n_samples)\n    ]\n\n    # 3. Identify core points\n    is_core = np.array([len(neigh) >= min_samples for neigh in neighborhoods])\n\n    # Prepare labels: 0 = unvisited/unlabeled, >0 = cluster IDs, -1 = noise\n    labels = np.zeros(n_samples, dtype=int)\n    cluster_id = 0\n\n    # 4. Expand clusters from each core point\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue  # already labeled or marked noise\n        if not is_core[i]:\n            continue  # not a core point, can't start a cluster\n\n        # Start a new cluster\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque([i])\n\n        while queue:\n            point = queue.popleft()\n            for neighbor in neighborhoods[point]:\n                if labels[neighbor] == 0:\n                    # Assign to this cluster\n                    labels[neighbor] = cluster_id\n                    # If neighbor is also a core, it can expand the cluster\n                    if is_core[neighbor]:\n                        queue.append(neighbor)\n\n    # 5. Label all remaining unlabeled points as noise (-1)\n    labels[labels == 0] = -1\n\n    # Return as a Python list of ints\n    return labels.tolist()\n```\n\nExplanation of key steps:\n\n1. **Distance Matrix**  \n   We use NumPy broadcasting to compute an `n\u00d7n` matrix `dist_matrix` where `dist_matrix[i, j]` is the Euclidean distance between point `i` and `j`.\n\n2. **Neighborhoods**  \n   For each point `i`, we collect all indices `j` such that `dist_matrix[i, j] \u2264 eps`. This is a Python list of lists.\n\n3. **Core Points**  \n   A point `i` is a *core* point if `len(neighborhoods[i]) \u2265 min_samples`.\n\n4. **Cluster Expansion (BFS)**  \n   We iterate over each point. If it\u2019s an unvisited core point, we start a new cluster, label it, and do a breadth\u2010first search using a queue:  \n   \u2013 Pop a point, look at its neighbors.  \n   \u2013 If a neighbor is still unlabeled (`labels[neighbor] == 0`), label it with the current cluster ID.  \n   \u2013 If that neighbor is itself a core point, enqueue it so its neighbors will be visited too.\n\n5. **Noise Assignment**  \n   After all core points and their density\u2010reachable points have been assigned to clusters, any point still labeled `0` is *noise*, so we set its label to `-1`.\n\nClusters are numbered in discovery order (1, 2, 3, \u2026), and noise points carry the label -1."}
{"task_id": 559, "completion_id": 0, "completion": "```python\nfrom typing import List, Optional\n\nclass Node:\n   Binary-tree node used by the task.\n\n    Attributes:\n        val:     The value stored in the node.  Only leaf nodes have a value.\n        right:   Reference to the right child or ``None``.\n        left:    Reference to the left  child or ``None``.\n       def __init__(self,\n                 val: Optional[int] = None,\n                 right: 'Optional[Node]' = None,\n                 left: 'Optional[Node]' = None):\n        self.val = val\n        self.right = right\n        self.left = left\n\n\ndef leaf_values(root: Optional[Node]) -> List[int]:\n   Collect all leaf values from left to right.\n\n    Args:\n        root: The root of the binary tree or ``None``.\n\n    Returns:\n        A list containing the values found in every leaf node, ordered from\n        left-most leaf to right-most leaf.  If the tree is empty the list is\n        empty as well.\n       result: List[int] = []\n\n    def dfs(node: Optional[Node]):\n        if node is None:\n            return\n        # A leaf is a node with no children:\n        if node.left is None and node.right is None:\n            # By the problem statement, every leaf has a non-None .val\n            result.append(node.val)  \n        else:\n            dfs(node.left)\n            dfs(node.right)\n\n    dfs(root)\n    return result\n\n\n# Example usage and quick sanity check:\nif __name__ ==main    #      \u25cf\n    #     / \\\n    #    1   \u25cf\n    #       / \\\n    #      2   3\n    root = Node(\n        left=Node(val=1),\n        right=Node(\n            left=Node(val=2),\n            right=Node(val=3)\n        )\n    )\n    print(leaf_values(root))  # Output: [1, 2, 3]\n```\n\nExplanation:\n1. We define an inner helper function `dfs` that traverses the tree in a pre\u2010order fashion.\n2. When `dfs` encounters a node with neither left nor right children, it appends that node\u2019s `val` to `result`.\n3. Otherwise it recursively descends into the left subtree first, then the right, preserving left\u2010to\u2010right order of leaves.\n4. If `root` is `None`, `dfs` immediately returns and `leaf_values` yields an empty list."}
{"task_id": 560, "completion_id": 0, "completion": "```python\nimport math\nimport heapq\n\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int = 3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n    # Handle trivial cases:\n    n = len(points)\n    if n == 0:\n        return []\n    if k <= 0:\n        return []\n\n    # Cap k at the number of points:\n    k = min(k, n)\n    dim = len(query)\n\n    # 1) Build a balanced k-d tree; each node is a dict:\n    def build_kd_tree(items, depth=0):\n        if not items:\n            return None\n        axis = depth % dim\n        # sort by the selected axis\n        items.sort(key=lambda it: it[0][axis])\n        mid = len(items) // 2\n        point, idx = items[mid]\n        node = {\n            'idx': idx,\n            'axis': axis,\n            'point': point,\n            'left':  build_kd_tree(items[:mid], depth + 1),\n            'right': build_kd_tree(items[mid+1:], depth + 1)\n        }\n        return node\n\n    points_with_idx = [(pt, i) for i, pt in enumerate(points)]\n    root = build_kd_tree(points_with_idx)\n\n    # 2) Search the tree for the k nearest neighbors\n    # We use a max-heap of size up to k, storing tuples:\n    #   ( -squared_dist, -index, index )\n    # so that the smallest element in the min-heap is the \"worst\" of the current best k.\n    heap = []\n\n    def sq_dist(a, b):\n        return sum((x - y) ** 2 for x, y in zip(a, b))\n\n    def search(node):\n        if node is None:\n            return\n\n        axis = node['axis']\n        pt = node['point']\n        idx = node['idx']\n\n        # Compute squared distance to query\n        d2 = sq_dist(pt, query)\n        entry = (-d2, -idx, idx)\n        if len(heap) < k:\n            heapq.heappush(heap, entry)\n        else:\n            # push then pop to maintain only k best\n            heapq.heappushpop(heap, entry)\n\n        # Decide which side to visit first\n        diff = query[axis] - pt[axis]\n        first, second = ('left', 'right') if diff <= 0 else ('right', 'left')\n\n        # Explore closer side\n        search(node[first])\n\n        # Check whether we need to explore the far side\n        # If heap is not full or hypersphere crosses the splitting plane:\n        worst_d2 = -heap[0][0]  # largest squared distance among current best\n        if len(heap) < k or diff * diff <= worst_d2:\n            search(node[second])\n\n    search(root)\n\n    # 3) Extract the indices, sort by (distance, index), and return the indices\n    results = [(-t[0], t[2]) for t in heap]  # (dist, idx)\n    results.sort(key=lambda x: (x[0], x[1]))\n    return [idx for _, idx in results]\n```\n\nExplanation of the main steps:\n\n1. **Building the k-d tree**  \n   - We recursively split the point set on axis = `depth % dim`.  \n   - We sort points by that axis, choose the median as the node, and recurse on the two halves.  \n   - Each node is a simple `dict` with keys `'idx'`, `'axis'`, `'point'`, `'left'`, and `'right'`.\n\n2. **Searching for k nearest neighbours**  \n   - We maintain a fixed\u2010size max\u2010heap (using a min\u2010heap of negative distances) of up to *k* candidates.  The heap orders by (\u2212distance, \u2212index), so the top of the heap is the \u201cworst\u201d among the current *k*.  \n   - We do the usual k-d tree search:  \n     a. Visit the nearer side first (by comparing the query\u2019s coordinate with the node\u2019s splitting coordinate).  \n     b. After that, if the heap is not yet full or if the squared distance from the query to the splitting plane is \u2264 the worst\u2010distance in the heap, we also visit the other side.  \n\n3. **Collecting results**  \n   - We pull out all heap entries `(\u2212d\u00b2, \u2212idx, idx)`, convert to `(d\u00b2, idx)`, sort by `d\u00b2` then `idx`, and return the list of indices."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray,\n           k: int,\n           max_iter: int = 200,\n           epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fit a Gaussian Mixture Model (GMM) with k components to the data using the\n    Expectation\u2013Maximization (EM) algorithm, then return hard cluster assignments.\n    \n    Parameters\n    ----------\n    data : np.ndarray, shape (N, D)\n        The input data: N samples with D features each.\n    k : int\n        The number of Gaussian components (clusters).\n    max_iter : int\n        Maximum number of EM iterations.\n    epsilon : float\n        Convergence threshold on the change in mixture weights.\n    \n    Returns\n    -------\n    labels : list[int], length N\n        Hard cluster assignments (0 through k-1) for each sample.\n        If k==1, returns all zeros.\n    \"\"\"\n    N, D = data.shape\n    \n    # Trivial case\n    if k == 1:\n        return [0] * N\n    \n    # For reproducibility across calls\n    rng = np.random.RandomState(0)\n    \n    # --- Initialization via a random soft assignment, then M-step ---\n    # Random responsibilities\n    resp = rng.rand(N, k)\n    resp = resp / resp.sum(axis=1, keepdims=True)    # normalize per sample\n    \n    # M-step to get initial pi, means, covariances\n    def m_step(resp):\n        \"\"\"Given resp (N x k), compute pi (k,), means (k x D), covs (k x D x D).\"\"\"\n        Nk = resp.sum(axis=0)                # shape (k,)\n        pi = Nk / N                          # mixture weights\n        means = (resp.T @ data) / Nk[:, None]  # shape (k, D)\n        covs = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - means[j]           # (N, D)\n            # weighted outer products\n            w = resp[:, j][:, None]          # (N, 1)\n            covs[j] = (w * diff).T @ diff / Nk[j]\n            # regularize\n            covs[j] += np.eye(D) * 1e-6\n        return pi, means, covs\n    \n    pi, means, covs = m_step(resp)\n    \n    # Pre-allocate storage for responsibilities\n    resp = np.zeros((N, k))\n    \n    # Pre-compute constant\n    const_coeff = (2 * math.pi) ** (-D / 2)\n    \n    # EM loop\n    for iteration in range(max_iter):\n        pi_old = pi.copy()\n        \n        # E-step: compute responsibilities\n        for j in range(k):\n            # compute multivariate normal pdf for component j\n            cov_j = covs[j]\n            # inverse and determinant\n            inv_cov = np.linalg.inv(cov_j)\n            det_cov = np.linalg.det(cov_j)\n            coef = const_coeff * (det_cov ** (-0.5))\n            diff = data - means[j]             # (N, D)\n            # Mahalanobis term\n            exponent = -0.5 * np.sum(diff @ inv_cov * diff, axis=1)\n            pdf = coef * np.exp(exponent)      # shape (N,)\n            resp[:, j] = pi[j] * pdf\n        \n        # normalize responsibilities over j\n        row_sums = resp.sum(axis=1, keepdims=True)\n        # Avoid division by zero (shouldn't happen with reg)\n        row_sums[row_sums == 0] = np.finfo(float).eps\n        resp /= row_sums\n        \n        # M-step: update parameters\n        pi, means, covs = m_step(resp)\n        \n        # Check convergence on mixture weights\n        if np.max(np.abs(pi - pi_old)) < epsilon:\n            break\n    \n    # Final hard assignments: pick the component with highest responsibility\n    hard_labels = np.argmax(resp, axis=1)  # shape (N,)\n    \n    # To make labeling deterministic, sort components by means[:,0]\n    order = np.argsort(means[:, 0])  # old indices in ascending order\n    # Build a mapping old_index -> new_label\n    new_label = np.empty(k, dtype=int)\n    for new_idx, old_idx in enumerate(order):\n        new_label[old_idx] = new_idx\n    \n    # Apply mapping to hard_labels\n    final_labels = [int(new_label[lab]) for lab in hard_labels]\n    \n    return final_labels\n```\n\nExplanation of key steps:\n\n1. **Initialization**  \n   We start with a random soft assignment (`resp`) of each of the N points to the K components, normalize so each row sums to 1, and perform one M-step to obtain initial mixture weights `pi`, means `means`, and full covariance matrices `covs`. A fixed random seed (`RandomState(0)`) ensures deterministic behavior across runs.\n\n2. **E-step**  \n   For each component j we compute the multivariate Gaussian density at all data points, multiply by the mixture weight \u03c0_j, and then normalize across all components to get the responsibilities `resp[i, j]`.\n\n3. **M-step**  \n   Given responsibilities `resp`, we re-estimate  \n   - Nk = \u2211\u1d62 resp[i, j]  \n   - \u03c0_j = Nk / N  \n   - \u03bc_j = (1 / Nk) \u2211\u1d62 resp[i, j] \u00b7 x\u1d62  \n   - \u03a3_j = (1 / Nk) \u2211\u1d62 resp[i, j] \u00b7 (x\u1d62 - \u03bc_j)(x\u1d62 - \u03bc_j)\u1d40 + small_identity  \n\n4. **Convergence**  \n   We repeat E and M until either we reach `max_iter` or the maximum change in any \u03c0_j is less than `epsilon`.\n\n5. **Final hard labels and sorting**  \n   We assign each point to the component with the highest posterior responsibility.  \n   To ensure a consistent labeling (0, 1, \u2026, K\u22121) that\u2019s independent of the arbitrary internal ordering, we sort the components by the first coordinate of their mean, then relabel accordingly."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N, d = data.shape\n    if n_cluster <= 0:\n        raise ValueError(\"n_cluster must be >= 1\")\n    if n_cluster == 1:\n        return [0] * N\n\n    # 1) Build the similarity matrix W using RBF/Gaussian kernel\n    #    W_ij = exp(-gamma * ||x_i - x_j||^2), set diagonal to zero\n    # Compute pairwise squared distances\n    sq_norms = np.sum(data * data, axis=1)  # shape (N,)\n    dist2 = sq_norms[:, None] + sq_norms[None, :] - 2.0 * data.dot(data.T)\n    # Numerical safety\n    dist2 = np.maximum(dist2, 0.0)\n    W = np.exp(-gamma * dist2)\n    np.fill_diagonal(W, 0.0)\n\n    # 2) Construct Laplacian\n    degrees = np.sum(W, axis=1)\n    D = np.diag(degrees)\n    L = D - W\n    if method == 'normalized':\n        # Symmetric normalized Laplacian: L_sym = D^{-1/2} L D^{-1/2}\n        # Compute D^{-1/2}\n        with np.errstate(divide='ignore'):\n            d_inv_sqrt = 1.0 / np.sqrt(degrees)\n        d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0\n        D_inv_sqrt = np.diag(d_inv_sqrt)\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    elif method != 'unnormalized':\n        raise ValueError(\"method must be 'unnormalized' or 'normalized'\")\n\n    # 3) Eigen-decomposition: get the first n_cluster eigenvectors\n    #    of the (normalized) Laplacian corresponding to the smallest eigenvalues\n    # Since L is symmetric, use eigh\n    eigvals, eigvecs = np.linalg.eigh(L)\n    # eigh returns them in ascending order\n    U = eigvecs[:, :n_cluster]  # shape (N, n_cluster)\n\n    # If normalized variant, row-normalize U\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1)\n        # avoid division by zero\n        nonzero = row_norms > 0\n        U[nonzero] = U[nonzero] / row_norms[nonzero, None]\n\n    # 4) Run k-means in the U-space with a deterministic init:\n    #    initial centroids are the first n_cluster rows of U\n    X = U.copy()\n    K = n_cluster\n    centroids = X[:K].copy()  # shape (K, n_cluster)\n    labels = np.full(N, -1, dtype=int)\n\n    for _ in range(100):  # max 100 iters\n        # Compute squared distances to centroids\n        # dist2[i,j] = ||X[i] - centroids[j]||^2\n        X_sq = np.sum(X * X, axis=1).reshape(-1, 1)    # (N,1)\n        C_sq = np.sum(centroids * centroids, axis=1).reshape(1, -1)  # (1,K)\n        d2 = X_sq + C_sq - 2.0 * X.dot(centroids.T)  # (N,K)\n        new_labels = np.argmin(d2, axis=1)\n\n        # If labels didn't change, we are done\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Recompute centroids\n        for j in range(K):\n            members = X[labels == j]\n            if len(members) > 0:\n                centroids[j] = np.mean(members, axis=0)\n            # else: leave centroid unchanged\n\n    # 5) Relabel clusters so that cluster containing smallest original index is 0, next is 1, ...\n    # Find for each cluster the min index of a data point in it\n    min_idx = []\n    for j in range(K):\n        idxs = np.where(labels == j)[0]\n        if idxs.size > 0:\n            min_idx.append((j, idxs.min()))\n        else:\n            # If a cluster is empty, give it a large sentinel\n            min_idx.append((j, N + j))\n    # Sort clusters by that min index\n    min_idx.sort(key=lambda x: x[1])\n    # Build a mapping old_label -> new_label\n    new_label_map = {old: new for new, (old, _) in enumerate(min_idx)}\n    # Apply mapping\n    final_labels = [new_label_map[int(l)] for l in labels]\n\n    return final_labels\n```\n\nExplanation of key steps:\n\n1. **Similarity graph**: We compute all pairwise squared distances efficiently via  \n   `dist2 = |x|\u00b2 + |x|\u00b2^T - 2\u00b7X\u00b7X^T`, then apply the RBF kernel  \n   `W[i,j] = exp(-gamma * dist2[i,j])`, zeroing the diagonal to avoid self\u2010loops.\n\n2. **Laplacian**:  \n   - Unnormalized: `L = D \u2212 W`.  \n   - Normalized: `L_sym = D^(\u22121/2) \u00b7 (D\u2212W) \u00b7 D^(\u22121/2)`.\n\n3. **Eigen-decomposition**: Since `L` (or `L_sym`) is symmetric, `np.linalg.eigh` gives sorted eigenvalues/eigenvectors. We take the first `k` eigenvectors.\n\n4. **Row-normalization** (only for the normalized method): each sample\u2019s eigenvector row is scaled to unit length.\n\n5. **K-means**:  \n   - Deterministic initialization using the first `k` rows of the eigenvector matrix.  \n   - Iteratively assign each point to its closest centroid (by Euclidean distance) and recompute centroids.  \n   - Stop when labels stabilize or after 100 iterations.\n\n6. **Relabeling**: We ensure the cluster with the globally smallest sample index becomes label `0`, the next becomes `1`, etc., so labels are consistently ordered.\n\nThe function finally returns a plain Python list of integer labels of length `N`."}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data:   2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data:   1-D NumPy array of length N with labels \u22121 or 1.\n        eta:      Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    # Number of samples (N) and feature-dimension (d)\n    N, d = X_data.shape\n\n    # Initialize dual coefficients and bias\n    alpha = np.zeros(N, dtype=float)\n    b = 0.0\n\n    # Precompute Gram matrix G where G[i, j] = X_i \u00b7 X_j\n    G = X_data @ X_data.T\n\n    # Dual perceptron updates\n    for _ in range(max_iter):\n        any_update = False\n        for i in range(N):\n            # Compute g = sum_j alpha_j * y_j * <x_j, x_i>\n            g = np.dot(alpha * y_data, G[:, i])\n            # Check the margin condition\n            if y_data[i] * (g + b) <= 0:\n                # Perform the update\n                alpha[i] += eta\n                b += eta * y_data[i]\n                any_update = True\n        # If no update in this pass, we've converged\n        if not any_update:\n            break\n\n    # Recover the primal weight vector: w = sum_i alpha_i * y_i * x_i\n    w = np.zeros(d, dtype=float)\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n\n    # Round w and b to 4 decimal places\n    w = np.round(w, 4)\n    b = round(b, 4)\n\n    return w.tolist(), b\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\ndef predict_sample(root:Node features: list | tuple, task_type: str):\n   Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n       # Helper to check for leaf: leaf nodes store y\n    def is_leaf(node):\n        return hasattr(node,y    if task_type == 'classification':\n        # Classification: match feature value to child.x, default to second child\n        node = root\n        while not is_leaf(node):\n            feat_val = features[node.label]\n            # try to find a matching child\n            next_node = None\n            for child in node.child:\n                if child.x == feat_val:\n                    next_node = child\n                    break\n            # if no match, default to second child\n            if next_node is None:\n                next_node = node.child[1]\n            node = next_node\n        return node.y\n\n    else:  # task_type == 'regression'\n        # Regression: compare feature value to split s\n        node = root\n        while not is_leaf(node):\n            feat_val = features[node.label]\n            # go left if <= s, otherwise right\n            if feat_val <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]\n        return node.y\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n\n    # Compute entropy H(y)\n    # Count label frequencies\n    label_counts = np.bincount(y)\n    probs = label_counts[label_counts > 0] / n_samples\n    H_y = -np.sum(probs * np.log2(probs))\n\n    best_feature = -1\n    best_ig = -1.0\n\n    # For each feature, compute information gain\n    for feature_idx in range(n_features):\n        col = X[:, feature_idx]\n        # Unique values of this feature and their counts\n        values, value_counts = np.unique(col, return_counts=True)\n\n        # Compute conditional entropy H(y | A)\n        H_y_given_A = 0.0\n        for val, count_val in zip(values, value_counts):\n            # Probability of this value\n            p_val = count_val / n_samples\n            # Subset of y where feature == val\n            subset_labels = y[col == val]\n            # Count frequencies in this subset\n            sub_counts = np.bincount(subset_labels)\n            sub_probs = sub_counts[sub_counts > 0] / count_val\n            H_sub = -np.sum(sub_probs * np.log2(sub_probs))\n            H_y_given_A += p_val * H_sub\n\n        ig = H_y - H_y_given_A\n\n        # Track the best feature (tie-breaking on smaller index)\n        if ig > best_ig or (math.isclose(ig, best_ig) and feature_idx < best_feature):\n            best_ig = ig\n            best_feature = feature_idx\n\n    # Round the information gain to 6 decimal places\n    best_ig = round(best_ig, 6)\n\n    return best_feature, best_ig\n```\n\nExplanation of key steps:\n1. Compute the overall label entropy H(y) using `-\u2211 p * log2(p)`.\n2. For each feature column:\n   - Find its unique values and their frequencies.\n   - For each value, compute the conditional entropy of y restricted to the samples with that feature value.\n   - Weight these entropies by the probability of each feature value to get H(y|A).\n3. Information gain for the feature is `IG = H(y) - H(y|A)`.\n4. Keep track of the feature with the highest IG (breaking ties by smaller index).\n5. Return the best feature index and the IG rounded to 6 decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    # reproducibility\n    np.random.seed(42)\n\n    # trivial cases\n    n_samples, n_features = data.shape\n    if epsilon <= 0.0 or n_samples <= 1:\n        return []\n\n    # effective sample size for each tree\n    sample_size_eff = min(sample_size, n_samples)\n    # height limit for trees\n    height_limit = math.ceil(math.log2(sample_size_eff)) if sample_size_eff > 0 else 0\n\n    # Euler-Mascheroni constant\n    _gamma = 0.5772156649\n\n    # expected path length of unsuccessful search in BST, used to correct leaf path\n    def c(n: int) -> float:\n        if n <= 1:\n            return 0.0\n        return 2.0 * math.log(n - 1) + _gamma - 2.0 * (n - 1) / n\n\n    # build one isolation tree on the array X (rows = samples)\n    def build_tree(X: np.ndarray, current_depth: int = 0) -> dict:\n        n = X.shape[0]\n        # stop criteria: depth limit or one-or-zero samples\n        if current_depth >= height_limit or n <= 1:\n            # leaf node\n            return {'size': n}\n        # choose a random feature\n        f = np.random.randint(0, n_features)\n        col = X[:, f]\n        min_val, max_val = col.min(), col.max()\n        # if no spread, make leaf\n        if min_val == max_val:\n            return {'size': n}\n        # random threshold in [min, max)\n        thresh = np.random.uniform(min_val, max_val)\n        # partition\n        left_mask = col < thresh\n        X_left = X[left_mask]\n        X_right = X[~left_mask]\n        # recursively build children\n        left = build_tree(X_left, current_depth + 1)\n        right = build_tree(X_right, current_depth + 1)\n        return {'feature': f, 'threshold': thresh, 'left': left, 'right': right}\n\n    # compute the path length of point x in a given tree\n    def path_length(x: np.ndarray, node: dict, current_depth: int = 0) -> float:\n        # if leaf\n        if 'size' in node:\n            return current_depth + c(node['size'])\n        # internal node\n        f = node['feature']\n        if x[f] < node['threshold']:\n            return path_length(x, node['left'], current_depth + 1)\n        else:\n            return path_length(x, node['right'], current_depth + 1)\n\n    # grow forest\n    trees = []\n    for _ in range(n_trees):\n        # sample without replacement\n        if sample_size_eff < n_samples:\n            idx = np.random.choice(n_samples, size=sample_size_eff, replace=False)\n            X_sub = data[idx]\n        else:\n            X_sub = data.copy()\n        tree = build_tree(X_sub, current_depth=0)\n        trees.append(tree)\n\n    # accumulate path lengths for every observation\n    path_sums = np.zeros(n_samples, dtype=float)\n    for t in trees:\n        for i in range(n_samples):\n            path_sums[i] += path_length(data[i], t, 0)\n\n    # average path length\n    h_bar = path_sums / n_trees\n\n    # normalization constant phi using effective sample size\n    if sample_size_eff > 1:\n        phi = 2.0 * math.log(sample_size_eff - 1) - 2.0 * (sample_size_eff - 1) / sample_size_eff\n    else:\n        # degenerate case: no variation\n        return []\n\n    # anomaly scores\n    scores = 2.0 ** ( - h_bar / phi )\n\n    # select outliers: those with scores among the largest epsilon fraction\n    # compute the (1 - epsilon) quantile\n    thresh = np.quantile(scores, 1.0 - epsilon)\n    outlier_idx = np.where(scores >= thresh)[0]\n\n    return sorted(outlier_idx.tolist())\n```"}
{"task_id": 567, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef majority_vote(predictions: List[List[Union[int, float]]]) -> List[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    # Handle empty input or no samples\n    if not predictions or not predictions[0]:\n        return []\n    \n    n_trees = len(predictions)\n    n_samples = len(predictions[0])\n    result: List[int] = []\n    \n    for j in range(n_samples):\n        # collect votes for sample j from each tree\n        votes = [predictions[i][j] for i in range(n_trees)]\n        \n        # count occurrences\n        counts = {}\n        for v in votes:\n            counts[v] = counts.get(v, 0) + 1\n        \n        # find the maximum vote count\n        max_count = max(counts.values())\n        \n        # collect all labels that have the maximum count\n        tied_labels = [label for label, cnt in counts.items() if cnt == max_count]\n        \n        # choose the smallest label in case of a tie\n        chosen_label = int(min(tied_labels))\n        \n        result.append(chosen_label)\n    \n    return result\n```\n\nExplanation:\n\n1. We first check for empty inputs (no trees or no samples) and return an empty list.\n2. For each sample (column), we gather its votes across all trees.\n3. We build a simple frequency dictionary to count how many times each label appears.\n4. We determine the highest vote count and collect all labels that achieve it.\n5. To break ties, we take the smallest label among them, cast it to `int`, and append it to the result.\n"}
{"task_id": 568, "completion_id": 0, "completion": "Here is a working GIS\u2010based MaxEnt classifier. It only uses Python\u2019s standard library plus numpy and math. The main steps are:\n\n1. Build a sparse feature set F = { (i, v, y) } only for combinations seen in the training data.  \n2. Compute empirical expectations E_emp[j] = (# times feature j occurs in (x_n,y_n)) / N.  \n3. Iteratively update weights w_j by  \n   \u03b4_j = (1/C) \u00b7 ln( E_emp[j] / E_model[j] ),  \n   where  \n     E_model[j] = (1/N) \u03a3_n \u03a3_y P(y|x_n) f_j(x_n,y),  \n     C = max number of features active for any (x,y).  \n4. Stop when max|\u03b4_j| < \u03b5 or we hit the iteration limit.  \n5. For each test x, predict the y with highest \u03a3_{j active} w_j.\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test:  np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Maximum entropy classifier with Generalized Iterative Scaling (GIS).\n    Returns a list of predicted labels for X_test.\n    \"\"\"\n    # 1) Basic shapes & uniques\n    N, d = X_train.shape\n    labels = np.unique(y_train)\n    L = len(labels)\n    \n    # 2) Build only those features (i, value, y) that occur in training\n    feat_count = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            feat_count[(i, v, y)] += 1\n    \n    # Map each observed feature to an index j\n    j2feat = list(feat_count.keys())\n    feat2j = {f: j for j, f in enumerate(j2feat)}\n    M = len(j2feat)\n    \n    # 3) Empirical expectations E_emp[j]\n    E_emp = np.zeros(M, dtype=float)\n    for j, f in enumerate(j2feat):\n        E_emp[j] = feat_count[f] / N\n    \n    # 4) Prepare for GIS updates\n    w = np.zeros(M, dtype=float)\n    # C = maximum sum_j f_j(x,y) over j for any (x,y).  Here each (x,y) can only\n    # activate at most one feature per attribute i, so C = d\n    C = d\n    \n    # Helper: label -> its index\n    label2idx = {y: idx for idx, y in enumerate(labels)}\n    \n    # 5) GIS main loop\n    for iteration in range(n_iter):\n        # Model expectations\n        E_model = np.zeros(M, dtype=float)\n        \n        # For every training sample\n        for x in X_train:\n            # compute unnormalized scores for each label\n            scores = np.zeros(L, dtype=float)\n            for idx_y, y in enumerate(labels):\n                s = 0.0\n                # sum weights of features active under (x,y)\n                # i.e. for each attribute i, see if (i, x[i], y) in feat2j\n                for i, v in enumerate(x):\n                    key = (i, v, y)\n                    j = feat2j.get(key)\n                    if j is not None:\n                        s += w[j]\n                # store exp(score)\n                scores[idx_y] = math.exp(s)\n            \n            Z = scores.sum()\n            # normalized P(y|x)\n            probs = scores / Z\n            \n            # accumulate model expectations\n            for idx_y, y in enumerate(labels):\n                p = probs[idx_y]\n                for i, v in enumerate(x):\n                    j = feat2j.get((i, v, y))\n                    if j is not None:\n                        E_model[j] += p / N\n        \n        # 6) Weight updates\n        delta = np.zeros(M, dtype=float)\n        for j in range(M):\n            # GIS update: \u03b4_j = (1/C) * ln( E_emp[j] / E_model[j] )\n            # both E_emp[j], E_model[j] > 0 by construction\n            delta[j] = (1.0 / C) * math.log(E_emp[j] / E_model[j])\n        \n        # check convergence\n        max_update = np.max(np.abs(delta))\n        w += delta\n        if max_update < epsilon:\n            # print(f\"Converged at iter {iteration}, max_delta={max_update}\")\n            break\n    \n    # 7) Predict on X_test\n    preds = []\n    for x in X_test:\n        best_score = -1e300\n        best_label = None\n        # we compare \"unnormalized\" scores since Z(x) is common across y\n        for y in labels:\n            s = 0.0\n            for i, v in enumerate(x):\n                j = feat2j.get((i, v, y))\n                if j is not None:\n                    s += w[j]\n            if s > best_score:\n                best_score = s\n                best_label = y\n        preds.append(int(best_label))\n    \n    return preds\n```\n\nExplanation of the key parts:  \n- We only build features `(i, value, y)` that actually appear in the training set (so their empirical expectation is non\u2010zero).  \n- `E_emp[j]` is simply the fraction of times feature j fired with the true label.  \n- In each GIS iteration we compute `E_model[j]` by going over each training instance, computing `P(y|x)` via the current weights, and accumulating `P(y|x)\u00b7f_j(x,y)`.  \n- We then update all weights by \u03b4 = (1/C)\u00b7ln(E_emp/E_model).  \n- Finally, for test points we pick the label y maximizing the sum of relevant w_j\u2019s."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio is rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    # If there are no documents, return empty results\n    if total_docs == 0:\n        return [], set()\n\n    # Count the number of documents each word appears in\n    doc_counter: Counter[str] = Counter()\n    for _, words in data:\n        unique_words = set(words)\n        doc_counter.update(unique_words)\n\n    # Build the list of (word, ratio) rounded to 4 decimal places\n    freq_list: List[Tuple[str, float]] = []\n    for word, doc_count in doc_counter.items():\n        ratio = round(doc_count / total_docs, 4)\n        freq_list.append((word, ratio))\n\n    # Sort primarily by ratio descending; ties in ratio can be in any order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top-k words\n    if cut_off is None:\n        top_words = set(doc_counter.keys())\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        # Take the first `cut_off` entries (or fewer if not enough words)\n        top_k = freq_list[:cut_off]\n        top_words = {word for word, _ in top_k}\n\n    return freq_list, top_words\n```\n\nExplanation of key steps:\n\n1. **Handle empty input**: If `data` is empty, there are no documents to process, so we immediately return an empty list and an empty set.\n2. **Count per\u2010document appearances**: For each document we convert its word list into a `set` to ensure each word is counted only once per document, then update a `Counter`.\n3. **Compute ratios**: Divide each word\u2019s document count by the total number of documents and round to 4 decimal places.\n4. **Sort by frequency**: We sort descending by ratio. Words with the same ratio may appear in any order relative to each other.\n5. **Select top\u2010k words**: Depending on `cut_off`, we either take all words, none, or the first `cut_off` words from the sorted list."}
{"task_id": 570, "completion_id": 0, "completion": "```python\nfrom collections import defaultdict\n\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]],\n                        keywords: set[str],\n                        test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    # 1) Count documents per class and documents-with-word per class\n    doc_count = defaultdict(int)                    # N_c for each class c\n    word_doc_count = defaultdict(lambda: defaultdict(int))\n    for label, tokens in train_data:\n        doc_count[label] += 1\n        seen = set(tokens) & keywords\n        for w in seen:\n            word_doc_count[label][w] += 1\n\n    # 2) Compute P(w | c) = (# docs in c containing w) / (total docs in c)\n    #    Store in a dict-of-dicts: cond_prob[c][w]\n    cond_prob = {}\n    for label, Nc in doc_count.items():\n        cond_prob[label] = {}\n        for w in keywords:\n            # If w never appeared in docs of this class, count is 0\n            cnt = word_doc_count[label].get(w, 0)\n            cond_prob[label][w] = cnt / Nc\n\n    # 3) For each test sample, compute unnormalised likelihood for each class\n    predictions = []\n    for tokens in test_samples:\n        T = set(tokens)\n        best_label = None\n        best_likelihood = -1.0  # likelihoods are >= 0\n        for label in doc_count:\n            likelihood = 1.0\n            probs = cond_prob[label]\n            for w in keywords:\n                p = probs[w]\n                if w in T:\n                    likelihood *= p\n                else:\n                    likelihood *= (1.0 - p)\n                # Early break if zero\n                if likelihood == 0.0:\n                    break\n            if likelihood > best_likelihood:\n                best_likelihood = likelihood\n                best_label = label\n        predictions.append(best_label)\n\n    return predictions\n\n# Example usage:\n\nif __name__ == \"__main__\":\n    train_data = [\n        ('spam', ['cheap', 'offer']),\n        ('ham',  ['hello', 'friend']),\n        ('spam', ['buy', 'cheap'])\n    ]\n    keywords     = {'cheap', 'buy', 'hello'}\n    test_samples = [['cheap'], ['hello']]\n    print(naive_bayes_predict(train_data, keywords, test_samples))\n    # Output: ['spam', 'ham']\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute elementwise product \u03b1_i * y_i\n    ay = alpha * y\n\n    # Compute weight vector w = X^T (\u03b1 \u2299 y)\n    w = X.T @ ay  # shape: (n_features,)\n\n    # Compute bias b = (1/n) * sum_i [ y_i \u2212 w^T x_i ]\n    residuals = y - (X @ w)\n    b = np.mean(residuals)\n\n    # Round to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = round(float(b), 4)\n\n    # Convert w to a Python list\n    w_list = w_rounded.tolist()\n\n    return w_list, b_rounded\n```\n\nExplanation of key steps:\n1. We form the elementwise product `ay = alpha * y`.\n2. We compute the weight vector `w = X^T @ (alpha \u2299 y)`.\n3. We compute the bias term `b` as the average of `(y_i \u2212 w^T x_i)` over all samples.\n4. Finally, we round each component of `w` and the scalar `b` to four decimal places and return them."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n       Compute the Local Outlier Factor (LOF) for each sample in `data`\n    and return the LOF scores along with the indices of samples\n    whose LOF score is strictly greater than `epsilon`.\n    \n    Parameters\n    ----------\n    data : array-like, shape (n_samples, n_features)\n        The input data.\n    k : int\n        Number of neighbors to use for LOF. Must satisfy 1 \u2264 k < n_samples.\n    epsilon : float, optional (default=1.5)\n        Threshold for declaring an outlier.\n    \n    Returns\n    -------\n    (lof_scores, outlier_indices) : tuple\n        lof_scores : list of float, length n_samples\n            The LOF score for each sample, rounded to 4 decimals.\n        outlier_indices : list of int\n            Sorted indices of samples whose LOF score > epsilon.\n       X = np.asarray(data, dtype=float)\n    n_samples = X.shape[0]\n    \n    # 1. Pairwise Euclidean distance matrix\n    #    Use the identity: ||x - y||^2 = ||x||^2 + ||y||^2 - 2\u27e8x,y\u27e9\n    sum_sq = np.sum(X**2, axis=1)\n    dist_sq = sum_sq[:, None] + sum_sq[None, :] - 2 * X.dot(X.T)\n    dist_sq = np.maximum(dist_sq, 0.0)   # numerical stability\n    distances = np.sqrt(dist_sq)\n\n    # Exclude self\u2010distance by setting diagonal to infinity\n    np.fill_diagonal(distances, np.inf)\n\n    # 2. For each point, find its k nearest neighbors\n    #    neighbor_indices[i] is an array of length k\n    neighbor_indices = np.argsort(distances, axis=1)[:, :k]\n\n    # k\u2010distance of each point = distance to its k-th nearest neighbor\n    # The k-th nearest neighbor for point i is at position k-1 in the sorted list\n    idx = np.arange(n_samples)\n    k_distances = distances[idx, neighbor_indices[:, k-1]]\n\n    # 3. Compute reachability distance matrix for each point\u2010neighbor pair\n    #    reach_dist[i, j] = max(k-distance(neighbor_j), dist(i, neighbor_j))\n    #    First, get dist(i, neighbor_j) as dist_pq\n    dist_pq = distances[idx[:, None], neighbor_indices]\n    #    Next, get k-distance(neighbor_j) via advanced indexing\n    kdist_of_neighbors = k_distances[neighbor_indices]\n    reach_dist = np.maximum(kdist_of_neighbors, dist_pq)\n\n    # 4. Local Reachability Density (LRD) of each point\n    #    LRD[i] = k / sum_j reach_dist(i, neighbor_j)\n    lrd = k / np.sum(reach_dist, axis=1)\n\n    # 5. Local Outlier Factor (LOF) of each point\n    #    LOF[i] = (sum_j LRD(neighbor_j) / k) / LRD[i]\n    lrd_neighbors_sum = np.sum(lrd[neighbor_indices], axis=1)\n    lof = (lrd_neighbors_sum / k) / lrd\n\n    # Round LOF scores to 4 decimal places\n    lof_rounded = np.round(lof, 4)\n\n    # Find indices of outliers: LOF > epsilon\n    outliers = [i for i, score in enumerate(lof_rounded) if score > epsilon]\n\n    return lof_rounded.tolist(), outliers\n```\n\nExplanation of the main steps:\n\n1. **Distance matrix**: We compute the full \\(n\\times n\\) Euclidean distance matrix efficiently via vectorized linear algebra.\n2. **k-nearest neighbours**: By setting self-distances to +\u221e, we can call `argsort` on each row to pick the closest \\(k\\) other points.\n3. **Reachability distance**: For each point \\(p\\) and its neighbour \\(q\\),  \n   reach-dist\\(_k(p,q)=\\max\\bigl(k\\)-distance\\((q),\\,dist(p,q)\\bigr)\\).\n4. **Local Reachability Density** \\( \\mathrm{LRD}_k(p)\\):  \n   \\( \\displaystyle \\frac{k}{\\sum_{q\\in N_k(p)} \\mathrm{reach\\_dist}_k(p,q)} \\).\n5. **Local Outlier Factor** \\( \\mathrm{LOF}_k(p)\\):  \n   \\( \\displaystyle \\frac{\\tfrac{1}{k}\\sum_{q\\in N_k(p)} \\mathrm{LRD}_k(q)}{\\mathrm{LRD}_k(p)} \\).\n\nFinally we round each LOF to 4 decimals and collect indices of points whose LOF exceeds `epsilon`."}
{"task_id": 573, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_train(X_train: np.ndarray,\n                     y_train: np.ndarray,\n                     eta: float = 0.1,\n                     n_iter: int = 1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    # number of features\n    _, n_features = X_train.shape\n\n    # initialize weights and bias to zero\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n\n    # to store number of misclassifications in each epoch\n    errors_per_epoch: list[int] = []\n\n    for _ in range(n_iter):\n        error_count = 0\n        # iterate over each sample\n        for xi, yi in zip(X_train, y_train):\n            activation = np.dot(w, xi) + b\n            # if misclassified or on the boundary\n            if yi * activation <= 0:\n                # update rule\n                w += eta * yi * xi\n                b += eta * yi\n                error_count += 1\n\n        errors_per_epoch.append(error_count)\n\n        # if no errors this epoch, converged\n        if error_count == 0:\n            break\n\n    # round weights and bias to nearest 4th decimal\n    w_rounded = [round(float(wi), 4) for wi in w]\n    b_rounded = round(float(b), 4)\n\n    return w_rounded, b_rounded, errors_per_epoch\n```\n\nExplanation of key steps:\n1. Initialize weight vector `w` and bias `b` to zero.\n2. For up to `n_iter` epochs, loop through all training samples:\n   - Compute the activation `w\u00b7x\u1d62 + b`.\n   - If `y\u1d62\u00b7activation \u2264 0`, perform the Perceptron update:\n     ```\n     w \u2190 w + \u03b7\u00b7y\u1d62\u00b7x\u1d62\n     b \u2190 b + \u03b7\u00b7y\u1d62\n     ```\n   - Count each such update as an error.\n3. Record the number of errors each epoch; if it drops to zero, terminate early.\n4. Finally, round each component of `w` and `b` to 4 decimal places and return them along with the error history."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        low, high = base + 1, base + 9\n\n        # generate training points for class c\n        for _ in range(n_train):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_train_list.append([x, y])\n            y_train_list.append(c)\n\n        # generate validation points for class c\n        for _ in range(n_val):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_val_list.append([x, y])\n            y_val_list.append(c)\n\n    X_train = np.array(X_train_list, dtype=float)\n    X_val   = np.array(X_val_list,   dtype=float)\n    y_train = np.array(y_train_list, dtype=int)\n    y_val   = np.array(y_val_list,   dtype=int)\n\n    return X_train, X_val, y_train, y_val\n```"}
{"task_id": 577, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None\n                 ) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n    \n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n    \n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    X_val   = []\n    y_train = []\n    y_val   = []\n    \n    for i in range(m):\n        # compute the ranges\n        x_low  = ((i // 2) + 0.1) * 10\n        x_high = ((i // 2) + 0.9) * 10\n        y_low  = (((i % 2) * 0.5) + 0.1) * 10\n        y_high = (((i % 2) * 0.5) + 0.9) * 10\n        \n        # label = (i - 0.5) * 2 == 2*i - 1\n        label = 2 * i - 1\n        \n        # training samples\n        for _ in range(n_train):\n            u = random.random()\n            v = random.random()\n            x = round(x_low  + u * (x_high - x_low), 4)\n            y = round(y_low  + v * (y_high - y_low), 4)\n            X_train.append([x, y])\n            y_train.append(label)\n        \n        # validation samples\n        for _ in range(n_val):\n            u = random.random()\n            v = random.random()\n            x = round(x_low  + u * (x_high - x_low), 4)\n            y = round(y_low  + v * (y_high - y_low), 4)\n            X_val.append([x, y])\n            y_val.append(label)\n    \n    # convert to NumPy arrays\n    X_train = np.array(X_train)\n    X_val   = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val   = np.array(y_val)\n    \n    return X_train, X_val, y_train, y_val\n```\n\nExplanation of key steps:\n\n1. If a `seed` is provided, we initialize Python\u2019s RNG with `random.seed(seed)`.\n2. For each class index `i`:\n   - We compute the \\(x\\)-range as \\([\\,(i//2+0.1)\\cdot10,\\,(i//2+0.9)\\cdot10]\\).\n   - We compute the \\(y\\)-range as \\([\\,(i\\%2\\cdot0.5+0.1)\\cdot10,\\,(i\\%2\\cdot0.5+0.9)\\cdot10]\\).\n   - We draw `n_train` samples for training and `n_val` for validation, each by calling `random.random()` twice (once per coordinate).\n   - Each coordinate is rounded to four decimal places via `round(..., 4)`.\n   - The class label is \\((i-0.5)\\times2 = 2i-1\\), which is appended to `y_train` or `y_val`.\n3. Finally, we stack the Python lists into NumPy arrays and return them in the order `(X_train, X_val, y_train, y_val)`."}
{"task_id": 578, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    # If there are fewer than 2 items, no pairs can be formed.\n    if len(corpus) < 2:\n        return []\n\n    # Build and return the list of consecutive pairs.\n    return [(corpus[i], corpus[i + 1]) for i in range(len(corpus) - 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(make_pairs([]))                    # []\n    print(make_pairs([\"a\"]))                 # []\n    print(make_pairs([\"a\", \"b\"]))            # [(\"a\", \"b\")]\n    print(make_pairs([1, 2, 3, 4]))          # [(1, 2), (2, 3), (3, 4)]\n    print(make_pairs([\"foo\", \"bar\", \"baz\"])) # [(\"foo\", \"bar\"), (\"bar\", \"baz\")]\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n    \"\"\"\n    m, d = X.shape\n    # Initialize centres as the first k points (make a float copy for means)\n    centres = X[:k].astype(float).copy()\n    prev_labels = None\n\n    for _ in range(max_iters):\n        # ASSIGNMENT STEP\n        # Compute squared Euclidean distances (m x k)\n        # using broadcasting: X[:, None, :] - centres[None, :, :]\n        diff = X[:, None, :] - centres[None, :, :]\n        dists = np.linalg.norm(diff, axis=2)  # shape (m, k)\n        labels = np.argmin(dists, axis=1)     # picks smallest index on ties\n\n        # Check for convergence\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n\n        # UPDATE STEP\n        for j in range(k):\n            assigned_pts = X[labels == j]\n            if assigned_pts.size > 0:\n                centres[j] = assigned_pts.mean(axis=0)\n            # if no points assigned, keep centre[j] unchanged\n\n    # Round centres to 4 decimal places\n    centres_rounded = np.round(centres, 4)\n\n    # Convert outputs to lists\n    return labels.tolist(), centres_rounded.tolist()\n```"}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n   Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n       m, n = X.shape\n\n    # If no training will happen, return zeros immediately\n    if learning_rate == 0 or iterations == 0:\n        return [0.0] * n, 0.0\n\n    # Initialize parameters\n    w = np.zeros(n, dtype=float)\n    b = 0.0\n\n    for _ in range(iterations):\n        # 1) Predictions\n        y_pred = X.dot(w) + b\n\n        # 2) Residuals\n        r = y - y_pred  # shape (m,)\n\n        # 3) Compute sign(w) with sign(0) = -1\n        #    np.where(w > 0, 1, -1) -> gives 1 if w>0, else -1 (so w=0 => -1)\n        sign_w = np.where(w > 0, 1.0, -1.0)\n\n        # 4) Gradients\n        #    \u2202L/\u2202w = -2 * X^T \u00b7 r + \u03bb1 * sign(w) + 2 * \u03bb2 * w\n        grad_w = (-2.0 * X.T.dot(r) + l1_penalty * sign_w + 2.0 * l2_penalty * w) / m\n\n        #    \u2202L/\u2202b = -2 * sum(r)\n        grad_b = (-2.0 * np.sum(r)) / m\n\n        # 5) Parameter updates\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Round the results to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(round(b, 4))\n\n    return w_rounded, b_rounded\n```"}
{"task_id": 582, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef nearest_neighbor_graph(X):\n   Build the undirected k-nearest-neighbour adjacency matrix.\n\n    Parameters\n    ----------\n    X : Sequence[Sequence[float]]\n        2-D array-like object of shape (n_samples, n_features).\n\n    Returns\n    -------\n    list[list[int]]\n        Adjacency matrix W where W[i][j] is 1 iff an undirected edge exists\n        between sample i and sample j, otherwise 0.\n       # Convert input to numpy array\n    X_arr = np.array(X, dtype=float)\n    n = X_arr.shape[0]\n\n    # Special case n=1\n    if n == 1:\n        return [[0]]\n\n    # Determine k\n    k = min(int(np.floor(np.sqrt(n))), 10)\n\n    # Compute squared Euclidean distance matrix (n x n)\n    # We'll use squared distances so we don't need the sqrt for sorting\n    # diff[i,j,:] = X_arr[i,:] - X_arr[j,:]\n    diff = X_arr[:, None, :] - X_arr[None, :, :]      # shape (n, n, d)\n    sq_dists = np.einsum('ijk,ijk->ij', diff, diff)   # shape (n, n)\n\n    # Exclude self from nearest neighbours by setting diagonal to +inf\n    idx = np.arange(n)\n    sq_dists[idx, idx] = np.inf\n\n    # For each point i, find the indices of its k nearest neighbours\n    # ties are broken by the order of indices in argsort\n    nearest_idx = np.argsort(sq_dists, axis=1)[:, :k]  # shape (n, k)\n\n    # Build directed adjacency (i -> j if j is among i's k nearest)\n    dir_adj = np.zeros((n, n), dtype=bool)\n    for i in range(n):\n        for j in nearest_idx[i]:\n            dir_adj[i, j] = True\n\n    # Symmetrize: undirected edge exists if i->j or j->i\n    und_adj = np.logical_or(dir_adj, dir_adj.T)\n    # Ensure no self-loops\n    und_adj[idx, idx] = False\n\n    # Convert boolean matrix to list of lists of int (0 or 1)\n    W = und_adj.astype(int).tolist()\n    return W\n```\n\nExplanation of the steps:\n\n1. Convert the input `X` to a NumPy array for easy vectorized computation.\n2. If there's only one point (`n == 1`), return `[[0]]`.\n3. Compute `k = min(\u230a\u221an\u230b, 10)`.\n4. Build the full pairwise squared\u2010distance matrix `sq_dists` (no need to take the square root).\n5. Set the diagonal of `sq_dists` to infinity so that a point is not its own neighbour.\n6. For each point `i`, use `numpy.argsort` to find the indices of the `k` smallest distances.\n7. Mark those as directed edges in `dir_adj`.\n8. Symmetrize by `und_adj = dir_adj OR dir_adj.T`.\n9. Remove any self\u2010loops and convert the boolean adjacency matrix to a Python list of lists of integers."}
{"task_id": 584, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    # Convert the input to a NumPy array; expect shape (H, W)\n    arr = np.array(state)\n    if arr.ndim != 2:\n        raise ValueError(f\"Expected a 2-D frame, got array with shape {arr.shape}\")\n    \n    # Stack the frame 4 times along a new last axis, producing shape (H, W, 4)\n    stacked = np.stack([arr, arr, arr, arr], axis=-1)\n    \n    # Convert back to nested Python lists and return\n    return stacked.tolist()\n```\n\nExplanation:\n\n1. We convert the input `state` (a list of lists) into a NumPy array `arr`.  \n2. We verify it\u2019s 2-D (height \u00d7 width).  \n3. We use `np.stack([...], axis=-1)` to replicate the same frame 4 times along the new last dimension.  \n4. Finally, we call `.tolist()` to get the required pure Python nested lists of shape `(height, width, 4)`."}
{"task_id": 585, "completion_id": 0, "completion": "Here\u2019s a direct drop\u2010in replacement for Python 2\u2019s `cmp` that works with any objects supporting `<`, `>` and `==`:\n\n```python\ndef cmp(a: object, b: object) -> int:\n   Compares two values and returns their ordering.\n\n    The function mimics Python 2's ``cmp``. It must return:\n    \u2022  1  if ``a`` is greater than ``b``\n    \u2022  0  if ``a`` equals ``b``\n    \u2022  -1 if ``a`` is less than ``b``\n\n    Args:\n        a: Any Python object supporting comparison operations.\n        b: Any Python object supporting comparison operations.\n\n    Returns:\n        int: One of -1, 0, or 1 indicating the comparison result.\n       if a > b:\n        return 1\n    elif a < b:\n        return -1\n    else:\n        return 0\n```\n\nAlternatively, in one line, you can leverage the fact that booleans are integers (`True`==1, `False`==0):\n\n```python\ndef cmp(a: object, b: object) -> int:\n    return (a > b) - (a < b)\n```\n\nEither implementation will strictly return only `-1`, `0`, or `1`."}
{"task_id": 586, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nimport numpy as np\nimport math\n\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    # Basic validation\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError(\"`x` and `y` must be 1-D arrays.\")\n    n = x.shape[0]\n    if n != y.shape[0]:\n        raise ValueError(\"`x` and `y` must have the same length.\")\n    if not (2 <= window <= n):\n        raise ValueError(\"`window` must satisfy 2 \u2264 window \u2264 len(x).\")\n\n    # 1. Normalize x and y to [0, 1]\n    x_min, x_max = x.min(), x.max()\n    x_range = x_max - x_min\n    if x_range > 0:\n        x_norm = (x - x_min) / x_range\n        xq_norm = (x_query - x_min) / x_range\n    else:\n        # all x are the same\n        x_norm = np.zeros_like(x, dtype=float)\n        xq_norm = 0.0\n\n    y_min, y_max = y.min(), y.max()\n    y_range = y_max - y_min\n    if y_range > 0:\n        y_norm = (y - y_min) / y_range\n    else:\n        # all y are the same\n        y_norm = np.zeros_like(y, dtype=float)\n\n    # 2. Select `window` nearest neighbours on normalized x\n    dists = np.abs(x_norm - xq_norm)\n    idx_sorted = np.argsort(dists)\n    idx = idx_sorted[:window]\n    x_sel = x_norm[idx]\n    y_sel = y_norm[idx]\n    d_sel = dists[idx]\n\n    # 3. Compute tricubic weights\n    d_max = d_sel.max()\n    if d_max > 0:\n        r = d_sel / d_max\n        # tricubic kernel\n        w = (1 - r**3)**3\n    else:\n        # all selected points coincide with query\n        w = np.ones_like(d_sel, dtype=float)\n\n    W = w.sum()\n    # Weighted means\n    xw_mean = np.sum(w * x_sel) / W\n    yw_mean = np.sum(w * y_sel) / W\n\n    # 4. Fit weighted linear regression y = a + b x\n    # compute denominator and numerator for slope\n    denom = np.sum(w * (x_sel - xw_mean)**2)\n    if denom == 0:\n        b = 0.0\n    else:\n        numer = np.sum(w * (x_sel - xw_mean) * (y_sel - yw_mean))\n        b = numer / denom\n    a = yw_mean - b * xw_mean\n\n    # 5. Predict at xq_norm, un-normalize, round\n    yq_norm = a + b * xq_norm\n    yq = yq_norm * y_range + y_min\n    return float(np.round(yq, 4))\n```\n\nExplanation of key steps:\n1. We normalize `x` and `y` into [0,1], handling the degenerate cases where all values are equal.\n2. We find the indices of the `window` points whose normalized `x`\u2010values are closest to the normalized query point.\n3. We compute tricubic weights based on each point\u2019s distance to the query, with all weights set to 1 if the maximum distance is 0.\n4. We perform a weighted linear fit; if the denominator for the slope is zero, we set the slope to 0 (thus predicting the weighted mean).\n5. We compute the normalized prediction, convert back to the original `y` scale, and round to four decimals."}
{"task_id": 587, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Any, List, Tuple\n\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    # Initialize the random seed once for reproducibility\n    random.seed(0)\n\n    buffer: List[Any] = []\n    outputs: List[Any] = []\n\n    for op in operations:\n        cmd = op[0]\n\n        if cmd == 'append':\n            # ('append', transition)\n            _, transition = op\n            buffer.append(transition)\n\n        elif cmd == 'pop':\n            # ('pop',)\n            if buffer:\n                outputs.append(buffer.pop())\n            else:\n                outputs.append(None)\n\n        elif cmd == 'sample':\n            # ('sample', batch_size)\n            _, batch_size = op\n            if batch_size > len(buffer):\n                outputs.append([])\n            else:\n                # random.sample without replacement\n                sampled = random.sample(buffer, batch_size)\n                outputs.append(sampled)\n\n        elif cmd == 'size':\n            # ('size',)\n            outputs.append(len(buffer))\n\n        else:\n            # Unknown command; you could raise an error if desired\n            raise ValueError(f\"Unsupported command: {cmd}\")\n\n    return outputs\n```\n\nExplanation of key points:\n- We call `random.seed(0)` exactly once at the very start for deterministic behavior.\n- The replay memory is just a Python list (`buffer`).\n- We accumulate results of `pop`, `sample`, and `size` operations into an `outputs` list, which is returned at the end.\n- If `pop` is called on an empty buffer, we append `None`.\n- If `sample` is requested with a batch size larger than the current buffer size, we append an empty list `[]`. Otherwise we use `random.sample` to pick distinct elements without removal."}
{"task_id": 588, "completion_id": 0, "completion": "Here\u2019s a straightforward recursive implementation.  An empty tree (`root is None`) returns \u22121.  Otherwise you compute the max depth of the left and right subtrees and add 1 for the root\u2019s edge:\n\n```python\nfrom typing import Optional\n\nclass Node:\n   A simple binary tree node    def __init__(self,\n                 data=None,\n                 split_variable=None,\n                 split_variable_value=None,\n                 left: Optional['Node'] = None,\n                 right: Optional['Node'] = None,\n                 depth: int = 0,\n                 criterion_value=None):\n        self.data = data\n        self.split_variable = split_variable\n        self.split_variable_value = split_variable_value\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.criterion_value = criterion_value\n\ndef tree_max_depth(root: Optional[Node]) -> int:\n   Computes the maximum depth of a binary tree.\n\n    The depth of the root node is defined to be 0.  The depth of an empty\n    tree is defined to be -1.\n\n    Args:\n        root: The root of the binary tree (Node or None).\n\n    Returns:\n        The maximum depth as an integer.\n       if root is None:\n        return -1\n\n    left_max = tree_max_depth(root.left)\n    right_max = tree_max_depth(root.right)\n    return max(left_max, right_max) + 1\n\n\n# \u2014\u2014 Example usage \u2014\u2014\nif __name__ ==main    # Example 1: single node\n    t1 = Node(7)\n    print(tree_max_depth(t1))  # 0\n\n    # Example 2: balanced\n    t2 = Node(10,\n              left=Node(5),\n              right=Node(20, left=Node(15), right=Node(25)))\n    print(tree_max_depth(t2))  # 2\n```\n\nExplanation:\n- Base case: an empty subtree has depth \u22121.\n- Otherwise, recursively compute the maximum depth of left and right children, then add 1."}
{"task_id": 590, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef minesweeper_step(ground: list[list[float | int]],\n                     flags:   list[list[bool]]\n                    ) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    Returns two sorted lists of unique (row, col) tuples:\n      1. clicks     \u2013 squares that can be safely revealed.\n      2. new_flags  \u2013 squares that must be bombs (to be flagged).\n    \"\"\"\n    nrows = len(ground)\n    ncols = len(ground[0]) if nrows > 0 else 0\n\n    clicks = set()\n    new_flags = set()\n\n    for r in range(nrows):\n        for c in range(ncols):\n            val = ground[r][c]\n            # only consider revealed & unflagged clues\n            if flags[r][c] or np.isnan(val):\n                continue\n            # count flagged neighbors and collect unexplored neighbors\n            bombs = 0\n            unexplored = []\n            for dr in (-1, 0, 1):\n                for dc in (-1, 0, 1):\n                    if dr == 0 and dc == 0:\n                        continue\n                    nr, nc = r + dr, c + dc\n                    if not (0 <= nr < nrows and 0 <= nc < ncols):\n                        continue\n                    if flags[nr][nc]:\n                        bombs += 1\n                    elif np.isnan(ground[nr][nc]):\n                        unexplored.append((nr, nc))\n\n            # apply the Minesweeper logic\n            if val == 0:\n                # all hidden neighbors are safe\n                for sq in unexplored:\n                    clicks.add(sq)\n\n            elif val == 8:\n                # all hidden neighbors must be bombs\n                for sq in unexplored:\n                    new_flags.add(sq)\n\n            else:\n                # if we've already flagged exactly val bombs around, the rest are safe\n                if bombs == val:\n                    for sq in unexplored:\n                        clicks.add(sq)\n                # if the count of hidden-but-unflagged equals val, they must all be bombs\n                elif len(unexplored) == val:\n                    for sq in unexplored:\n                        new_flags.add(sq)\n\n    # Make sure we don't click something we're about to flag, or vice versa\n    clicks.difference_update(new_flags)\n\n    # return sorted lists\n    clicks_list = sorted(clicks)\n    flags_list  = sorted(new_flags)\n    return clicks_list, flags_list\n```\n\nExplanation of key steps:\n\n1. Loop over every cell `(r,c)`.  \n2. Skip if it's hidden (`np.isnan`) or already flagged.  \n3. Gather:\n   - `bombs`: count of already flagged neighbors  \n   - `unexplored`: list of neighbors that are still hidden and unflagged  \n4. Apply the four canonical rules:\n   - If clue is 0 \u21d2 all `unexplored` are safe (`clicks`).\n   - If clue is 8 \u21d2 all `unexplored` are bombs (`new_flags`).\n   - Else if `bombs == clue` \u21d2 all `unexplored` are safe.\n   - Else if `len(unexplored) == clue` \u21d2 all `unexplored` are bombs.\n5. Deduplicate and sort results before returning."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert the input to a NumPy array for vectorized computations\n    activation = np.array(x, dtype=float)\n\n    # Forward pass through each layer\n    n_layers = len(weights)\n    for L, layer in enumerate(weights):\n        # Stack the weight lists into a 2D NumPy array of shape (n_neurons, prev_layer_size + 1)\n        W = np.array(layer, dtype=float)\n\n        # Prepend bias input = 1.0 to the current activation vector\n        with_bias = np.concatenate(([1.0], activation))\n\n        # Compute the layer output\n        z = W @ with_bias  # shape = (n_neurons,)\n\n        # Apply ReLU on all but the last layer\n        if L < n_layers - 1:\n            activation = np.maximum(z, 0.0)\n        else:\n            activation = z\n\n    # Round the final outputs to 4 decimals\n    activation_rounded = np.round(activation, 4)\n\n    # Return a float if there's exactly one output, else a list of floats\n    if activation_rounded.size == 1:\n        return float(activation_rounded[0])\n    else:\n        return activation_rounded.tolist()\n```\n\nExplanation of key steps:\n1. We keep `activation` as a NumPy array representing the current layer\u2019s outputs (starting with the input `x`).\n2. For each layer:\n   - We stack its neurons\u2019 weight lists into a 2D array `W` of shape `(n_neurons, prev_size + 1)`.\n   - We prepend the bias input `1.0` to the activation vector.\n   - We compute the pre\u2010activation `z = W @ [1.0, activation]`.\n   - We apply ReLU (`max(z, 0)`) if it\u2019s not the final layer.\n3. After the last layer, we simply take the linear output.\n4. We round every output to four decimal places and return either a single float or a list of floats, per the specification."}
{"task_id": 592, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef analyze_cell(clicked: np.ndarray,\n                 flags:   np.ndarray,\n                 row:     int,\n                 col:     int\n                ) -> tuple[list[tuple[int, int]], int]:\n   Return unopened neighbouring cells and flagged-mine count for a board position.\n\n    Args:\n        clicked: 2-D NumPy boolean array where True means the cell is already opened.\n        flags:   2-D NumPy boolean array of the same shape \u2013 True means the cell is\n                 already marked as a mine by the player.\n        row:     Row index of the cell to analyse.\n        col:     Column index of the cell to analyse.\n\n    Returns:\n        A tuple (unopened_neighbours, flagged_count):\n        * unopened_neighbours \u2013 list with coordinates (row, col) of all neighbouring\n          cells that are not opened yet.  The list is sorted ascending first by row\n          then by column.\n        * flagged_count \u2013 integer with the number of neighbouring cells that are\n          currently flagged as mines.\n       nrows, ncols = clicked.shape\n    unopened = []\n    flagged_count = 0\n\n    # iterate over all 8 possible neighbours\n    for dr in (-1, 0, 1):\n        for dc in (-1, 0, 1):\n            # skip the cell itself\n            if dr == 0 and dc == 0:\n                continue\n\n            r = row + dr\n            c = col + dc\n\n            # check bounds\n            if 0 <= r < nrows and 0 <= c < ncols:\n                # count flags regardless of opened status\n                if flags[r, c]:\n                    flagged_count += 1\n                # collect unopened neighbours\n                if not clicked[r, c]:\n                    unopened.append((r, c))\n\n    # sort lexicographically by row, then column\n    unopened.sort()\n    return unopened, flagged_count\n```\n\nExplanation of the approach:\n\n1. We loop over all relative offsets `dr, dc` in `{-1, 0, 1}`, skipping `(0, 0)`.\n2. For each neighbour, we first check that `(r, c)` is within the board bounds.\n3. We increment `flagged_count` if `flags[r, c]` is `True`.\n4. We append `(r, c)` to `unopened` if `clicked[r, c]` is `False`.\n5. Finally, we sort the list of unopened neighbours in ascending lexicographic order and return it alongside the flagged count."}
{"task_id": 593, "completion_id": 0, "completion": "```python\nfrom copy import deepcopy\n\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function applies the logical rules (solved constraints, propagation,\n    subset rule, duplicate removal) until no new information can be obtained.\n\n    Returns a tuple (safe, mines) of two alphabetically sorted lists.\n    \"\"\"\n    # Initialize constraint list: each entry is [set_of_vars, value]\n    cons = [[set(vars_), val] for vars_, val in constraints]\n\n    safe_vars = set()\n    mine_vars = set()\n\n    changed = True\n    while changed:\n        changed = False\n\n        # Rule 1: Solved constraints\n        for vars_set, val in cons:\n            # If value == 0 => all vars in this constraint are safe\n            if val == 0:\n                for v in vars_set:\n                    if v not in safe_vars:\n                        safe_vars.add(v)\n                        changed = True\n            # If value == len(vars_set) => all vars are mines\n            if val == len(vars_set) and len(vars_set) > 0:\n                for v in vars_set:\n                    if v not in mine_vars:\n                        mine_vars.add(v)\n                        changed = True\n\n        # Keep safe and mine sets disjoint\n        if safe_vars & mine_vars:\n            # In consistent Minesweeper boards this shouldn't happen\n            # but we remove any overlap just in case\n            overlap = safe_vars & mine_vars\n            for v in overlap:\n                mine_vars.remove(v)\n            changed = True\n\n        # Rule 2: Propagation of knowledge\n        new_cons = []\n        for vars_set, val in cons:\n            orig_vars = vars_set\n            orig_val = val\n\n            # Remove known-safe vars (no change to val)\n            vars_after_safe = orig_vars - safe_vars\n            # Count how many known-mines were in the original\n            num_mines_removed = len(orig_vars & mine_vars)\n            # Remove known-mines from the set and reduce the value\n            vars_after_all = vars_after_safe - mine_vars\n            val_after = orig_val - num_mines_removed\n\n            # Detect any change in this constraint\n            if vars_after_all != orig_vars or val_after != orig_val:\n                changed = True\n\n            # We drop constraints that are trivially empty (no variables, val=0)\n            if vars_after_all or val_after != 0:\n                new_cons.append([vars_after_all, val_after])\n\n        cons = new_cons\n\n        # Rule 3: Subset rule\n        # If S1 \u2282 S2, replace (S2, v2) with (S2 \\ S1, v2 - v1)\n        n = len(cons)\n        replaced = [False]*n\n        additions = []\n        for i in range(n):\n            Si, vi = cons[i]\n            for j in range(n):\n                if i == j or replaced[j]:\n                    continue\n                Sj, vj = cons[j]\n                if Si < Sj:  # strict subset\n                    new_set = Sj - Si\n                    new_val = vj - vi\n                    additions.append([new_set, new_val])\n                    replaced[j] = True\n\n        new_cons = []\n        for idx in range(n):\n            if not replaced[idx]:\n                new_cons.append(cons[idx])\n        if additions:\n            new_cons.extend(additions)\n            changed = True\n\n        cons = new_cons\n\n        # Rule 4: Duplicate removal\n        seen = set()\n        unique_cons = []\n        for vars_set, val in cons:\n            key = (tuple(sorted(vars_set)), val)\n            if key not in seen:\n                seen.add(key)\n                unique_cons.append([vars_set, val])\n            else:\n                changed = True\n        cons = unique_cons\n\n    # Return sorted lists\n    safe_list = sorted(safe_vars)\n    mine_list = sorted(mine_vars)\n    return (safe_list, mine_list)\n```\n\nExplanation of the main steps:\n\n1. **Initialization**  \n   Convert each input constraint `[variables, value]` into `[set(variables), value]` for easy set\u2010based operations.\n\n2. **Loop until no change**  \n   We keep applying the four rules in order in a loop controlled by a `changed` flag. If any rule introduces new safe/mine variables or modifies the constraint list, we mark `changed = True` and repeat.\n\n3. **Rule 1: Solved constraints**  \n   - If a constraint\u2019s value is 0, all its variables are safe.  \n   - If the value equals the number of variables, all of them must be mines.\n\n4. **Rule 2: Propagation**  \n   Remove any proven\u2010safe variables from each constraint without changing its mine\u2010count, and remove any proven\u2010mine variables while decrementing the mine\u2010count by how many were removed. Discard trivial constraints that become \u201cno variables, value 0.\u201d\n\n5. **Rule 3: Subset rule**  \n   For any two constraints `(S1, v1)` and `(S2, v2)` with `S1 \u2282 S2`, replace `(S2, v2)` by `(S2 \\ S1, v2 \u2212 v1)`.\n\n6. **Rule 4: Duplicate removal**  \n   Eliminate identical constraints.\n\n7. **Result**  \n   After convergence, output two alphabetically sorted lists: variables certainly safe, and variables certainly containing mines."}
{"task_id": 594, "completion_id": 0, "completion": "```python\ndef maze_to_graph(maze: list[list[int]]) -> dict[tuple[int, int], list[tuple[int, int]]]:\n   Convert a binary maze into an adjacency-list graph.\n\n    A 0 in the maze denotes an open cell, while 1 denotes a wall.  Two open\n    cells are adjacent if they share an edge (up, down, left, right).\n\n    Args:\n        maze: Rectangular 2-D list containing only 0s and 1s.\n\n    Returns:\n        A dictionary mapping each open cell coordinate (row, col) to a sorted\n        list of neighbouring open cell coordinates.  Walls are not included in\n        the dictionary.  If there are no open cells the function returns an\n        empty dictionary.\n       graph: dict[tuple[int,int], list[tuple[int,int]]] = {}\n    if not maze or not maze[0]:\n        return graph\n\n    rows, cols = len(maze), len(maze[0])\n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for r in range(rows):\n        for c in range(cols):\n            if maze[r][c] == 0:\n                neighbors: list[tuple[int,int]] = []\n                for dr, dc in directions:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] == 0:\n                        neighbors.append((nr, nc))\n                # sort lexicographically by (row, col)\n                neighbors.sort()\n                graph[(r, c)] = neighbors\n\n    return graph\n```\n\nExplanation:\n1. We iterate over every cell in the `maze`.  \n2. Whenever we find an open cell (`0`), we look in the four orthogonal directions to collect adjacent open cells.  \n3. After collecting potential neighbors, we sort them in lexicographic order (by row, then column) to satisfy the output constraint.  \n4. We store the sorted neighbor list in the `graph` dictionary under the key `(r, c)`.  \n5. If there are no open cells (or the maze is empty), the resulting dictionary remains empty."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X:np.ndarray k: int, max_iters: int = 100) -> list[list[float]]:\n       Perform K-Means clustering on X and return the centroids only.\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        The data to cluster.\n    k : int\n        The number of clusters.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations.\n\n    Returns\n    -------\n    centroids : list of list of float\n        The final centroids, sorted lexicographically and rounded to 4 decimals.\n       # Initialize centroids to the first k points\n    centroids = X[:k].astype(float, copy=True)  # shape (k, n_features)\n\n    for _ in range(max_iters):\n        # 1) Assign each sample to the nearest centroid (squared Euclidean)\n        # distances: shape (n_samples, k)\n        # broadcasting: X[:, None, :] - centroids[None, :, :]\n        diffs = X[:, None, :] - centroids[None, :, :]  # (n_samples, k, n_features)\n        dists = np.sum(diffs**2, axis=2)               # (n_samples, k)\n        labels = np.argmin(dists, axis=1)              # (n_samples,)\n\n        # 2) Update centroids\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            members = (labels == i)\n            if np.any(members):\n                # mean over all members\n                new_centroids[i] = X[members].mean(axis=0)\n            else:\n                # empty cluster: keep old centroid\n                new_centroids[i] = centroids[i]\n\n        # 3) Check for convergence (max centroid movement < 1e-4)\n        shifts = np.linalg.norm(new_centroids - centroids, axis=1)\n        if np.max(shifts) < 1e-4:\n            centroids = new_centroids\n            break\n\n        centroids = new_centroids\n\n    # 4) Round to 4 decimals and convert to Python lists\n    rounded = [list(np.round(c, 4)) for c in centroids]\n\n    # 5) Sort lexicographically\n    rounded.sort()\n    return rounded\n```\n\nExplanation of key steps:\n\n1. **Initialization**: Centroids are set to the first `k` rows of `X` (deterministic).\n2. **Assignment**: Compute squared Euclidean distances from each point to each centroid, then assign to the nearest.\n3. **Update**: For each cluster, compute the mean of assigned points; if no points are assigned, keep the old centroid.\n4. **Convergence check**: Stop early if the largest centroid shift is below `1e-4`.\n5. **Post-processing**: Round each centroid coordinate to 4 decimals, convert to nested Python lists, then sort lexicographically before returning."}
{"task_id": 596, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function returns a dictionary mapping each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, returns an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    # Dimensions of the maze\n    n_rows, n_cols = maze.shape\n\n    # Prepare the output adjacency list\n    graph = {}\n\n    # The four possible moves (up, down, left, right)\n    neighbours = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Scan every cell in the maze\n    for r in range(n_rows):\n        for c in range(n_cols):\n            if maze[r, c] == 1:\n                # This is a free cell; initialize its neighbour list\n                adj = []\n\n                # Check each of the four directions\n                for dr, dc in neighbours:\n                    nr, nc = r + dr, c + dc\n                    # Stay within bounds and ensure it's free\n                    if 0 <= nr < n_rows and 0 <= nc < n_cols and maze[nr, nc] == 1:\n                        adj.append((nr, nc))\n\n                # Sort lexicographically and store\n                adj.sort()\n                graph[(r, c)] = adj\n\n    return graph\n```\n\nExplanation of key steps:\n1. We iterate over every position `(r, c)` in the 2D array.\n2. Whenever we find a free cell (`maze[r, c] == 1`), we look in the four cardinal directions.\n3. If a neighbor is in\u2010bounds and also free, we add its coordinate to the adjacency list for `(r, c)`.\n4. After collecting up to four neighbours, we sort them lexicographically (the default tuple sort in Python) and store them in the dictionary.\n5. Free cells with no free neighbours will naturally get an empty list. If there are no free cells at all, `graph` remains empty and is returned as `{}`."}
{"task_id": 597, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for ease of indexing and math\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    \n    n_samples, n_features = X_arr.shape\n    \n    best_mse = np.inf\n    best_feat = None\n    best_thr = None\n    \n    # Loop over features\n    for j in range(n_features):\n        col = X_arr[:, j]\n        # Get sorted unique candidate thresholds\n        unique_vals = np.unique(col)\n        \n        # Try each threshold (skip those that give empty L or R)\n        for thr in unique_vals:\n            mask = col <= thr\n            n_left = mask.sum()\n            if n_left == 0 or n_left == n_samples:\n                # invalid split, one side empty\n                continue\n            \n            # Subset targets\n            y_left = y_arr[mask]\n            y_right = y_arr[~mask]\n            \n            # Population variances (mean squared deviations)\n            var_left = np.var(y_left, ddof=0)\n            var_right = np.var(y_right, ddof=0)\n            \n            # Weighted MSE\n            mse = (n_left / n_samples) * var_left + ((n_samples - n_left) / n_samples) * var_right\n            \n            # Update best if strictly better\n            if mse < best_mse:\n                best_mse = mse\n                best_feat = j\n                best_thr = thr\n                \n    # Round best_mse to 4 decimals\n    best_mse_rounded = round(best_mse, 4)\n    # Convert threshold to native Python type\n    if isinstance(best_thr, np.generic):\n        best_thr = best_thr.item()\n    \n    return [best_feat, best_thr, best_mse_rounded]\n```\n\nExplanation of key steps:\n1. We convert `X` and `y` to NumPy arrays for convenient slicing and variance computation.\n2. For each feature `j`, we extract its column and find the sorted unique values;\n   each unique value is a candidate threshold `thr`.\n3. We form the left and right splits via a boolean mask `col \u2264 thr`, skipping any\n   threshold that yields an empty left or right.\n4. We compute the population variances of `y` in each subset with `np.var(..., ddof=0)`\n   and then form the weighted MSE.\n5. We keep track of the best (feature, threshold) pair by strictly improving MSE\n   (this automatically enforces the requested tie-breaking since we scan features\n   in ascending order, and thresholds in ascending order).\n6. Finally, we round the best MSE to 4 decimal places and return the list\n   `[best_feature_index, best_threshold, best_mse]`."}
{"task_id": 598, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    # Handle empty input\n    if not data:\n        return []\n\n    # Convert to numpy array of floats\n    arr = np.array(data, dtype=float)\n    # Compute per-feature mean and population std (ddof=0)\n    means = arr.mean(axis=0)\n    stds = arr.std(axis=0, ddof=0)\n\n    # Avoid division by zero by temporarily replacing zeros with 1\n    stds_safe = np.where(stds == 0, 1.0, stds)\n    # Standardise\n    Z = (arr - means) / stds_safe\n\n    # Set entire columns to zero where std was zero (constant feature)\n    zero_std_cols = (stds == 0)\n    if np.any(zero_std_cols):\n        Z[:, zero_std_cols] = 0.0\n\n    # Replace any NaN or infinite values by 0\n    Z = np.nan_to_num(Z, nan=0.0, posinf=0.0, neginf=0.0)\n    # Round to 4 decimals\n    Z = np.round(Z, 4)\n\n    # Convert back to plain Python list of lists\n    return Z.tolist()\n```\n\nExplanation of the steps:\n\n1. **Conversion to numpy array**  \n   We cast the input `data` to a NumPy array of type float.\n\n2. **Compute feature\u2010wise statistics**  \n   - `means = arr.mean(axis=0)`  \n   - `stds = arr.std(axis=0, ddof=0)`\n\n3. **Handle zero standard deviation**  \n   - Temporarily replace any zero in `stds` with `1.0` to avoid a divide\u2010by\u2010zero error.  \n   - After standardisation, explicitly set all entries in those constant\u2010feature columns to `0.0`.\n\n4. **Clean up NaNs and infinities**  \n   Any residual `nan`, `+inf`, or `-inf` values (which can occur if something unexpected happens) are replaced with `0.0` using `np.nan_to_num`.\n\n5. **Rounding and output**  \n   We round to 4 decimal places and convert the NumPy array back to a nested Python list for the final output."}
