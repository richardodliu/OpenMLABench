{"task_id": 0, "completion_id": 0, "solution": ""}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = X_train @ X_train.T\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    updates = 0\n    i = 0\n    while i < n_samples and updates < n_iter:\n        activation = np.dot(alpha * y_train, K[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0\n        else:\n            i += 1\n    w = alpha * y_train @ X_train\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (\"identity\", \"log\", \"logit\") where each entry is a\n        dictionary containing callables for the link, its inverse, and its\n        derivative with respect to \u03bc. All functions work with numpy scalars\n        as well as 1-D/2-D numpy arrays via element\u2010wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv(eta):\n        return eta\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_deriv(mu):\n        return 1.0 / (mu * (1.0 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv, 'derivative': identity_deriv}, 'log': {'link': log_link, 'inv_link': log_inv, 'derivative': log_deriv}, 'logit': {'link': logit_link, 'inv_link': logit_inv, 'derivative': logit_deriv}}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    threshold = math.ceil(minsup * N)\n    if threshold <= 0:\n        return {}\n    txn_sets = [set(t) for t in transactions]\n    item_counts = Counter()\n    for tset in txn_sets:\n        item_counts.update(tset)\n    L1 = {(item,): cnt for (item, cnt) in item_counts.items() if cnt >= threshold}\n    if not L1:\n        return {}\n    frequent_itemsets: Dict[Tuple[Hashable, ...], int] = {}\n    frequent_itemsets.update(L1)\n    Lk_minus_1 = L1\n    k = 2\n    while True:\n        prev_itemsets = sorted(Lk_minus_1.keys())\n        Ck = set()\n        len_prev = len(prev_itemsets)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                p = prev_itemsets[i]\n                q = prev_itemsets[j]\n                if p[:k - 2] == q[:k - 2]:\n                    candidate = tuple(sorted(p + (q[-1],)))\n                    all_subsets_frequent = True\n                    for subset in combinations(candidate, k - 1):\n                        if subset not in Lk_minus_1:\n                            all_subsets_frequent = False\n                            break\n                    if all_subsets_frequent:\n                        Ck.add(candidate)\n        if not Ck:\n            break\n        candidate_counts = Counter()\n        for tset in txn_sets:\n            for cand in Ck:\n                if set(cand).issubset(tset):\n                    candidate_counts[cand] += 1\n        Lk = {cand: cnt for (cand, cnt) in candidate_counts.items() if cnt >= threshold}\n        if not Lk:\n            break\n        frequent_itemsets.update(Lk)\n        Lk_minus_1 = Lk\n        k += 1\n    return frequent_itemsets"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_samples:\n        raise ValueError('k must be in the range [1, number of samples]')\n    centres = data[:k].astype(float).copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        diff = data[:, np.newaxis, :] - centres[np.newaxis, :, :]\n        dists_sq = np.sum(diff * diff, axis=2)\n        new_labels = np.argmin(dists_sq, axis=1)\n        new_centres = np.zeros_like(centres)\n        for cluster_idx in range(k):\n            members = np.where(new_labels == cluster_idx)[0]\n            if members.size == 0:\n                rand_idx = np.random.randint(0, n_samples)\n                new_centres[cluster_idx] = data[rand_idx]\n            else:\n                new_centres[cluster_idx] = np.mean(data[members], axis=0)\n        shifts = np.linalg.norm(new_centres - centres, axis=1)\n        if np.max(shifts) < epsilon:\n            centres = new_centres\n            labels = new_labels\n            break\n        centres = new_centres\n        labels = new_labels\n    centres_rounded = np.round(centres, 4)\n    centres_list = centres_rounded.tolist()\n    labels_list = labels.tolist()\n    return (centres_list, labels_list)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict"}
{"task_id": 19, "completion_id": 0, "solution": ""}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n\n    def _compute(arr):\n        s = 1 / (1 + np.exp(-arr))\n        g = s * (1 - s)\n        return (s, g)\n    if isinstance(x, (int, float)):\n        (s, g) = _compute(x)\n        return (round(float(s), 4), round(float(g), 4))\n    arr = np.array(x, dtype=float)\n    if arr.ndim == 0:\n        (s, g) = _compute(arr.item())\n        return (round(float(s), 4), round(float(g), 4))\n    (s_arr, g_arr) = _compute(arr)\n    s_arr = np.round(s_arr, 4)\n    g_arr = np.round(g_arr, 4)\n    return (s_arr.tolist(), g_arr.tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x = np.array(x_train, dtype=float)\n    y = np.array(y_train, dtype=int)\n    n = len(x)\n    w = np.ones(n) / n\n    sorted_idx = np.argsort(x)\n    x_s = x[sorted_idx]\n    y_s = y[sorted_idx]\n    w_s = w[sorted_idx]\n    F_s = np.zeros(n)\n    stumps = []\n    alphas = []\n    while True:\n        best_err = float('inf')\n        best_theta = None\n        best_d = None\n        best_pred = None\n        thresholds = []\n        for i in range(n - 1):\n            thresholds.append((x_s[i] + x_s[i + 1]) / 2.0)\n        if not thresholds:\n            thresholds = [x_s[0]]\n        for theta in thresholds:\n            pred0 = np.where(x_s <= theta, 1, -1)\n            err0 = np.sum(w_s * (pred0 != y_s))\n            if err0 < best_err:\n                best_err = err0\n                best_theta = theta\n                best_d = 0\n                best_pred = pred0\n            pred1 = np.where(x_s > theta, 1, -1)\n            err1 = np.sum(w_s * (pred1 != y_s))\n            if err1 < best_err:\n                best_err = err1\n                best_theta = theta\n                best_d = 1\n                best_pred = pred1\n        if best_err >= 0.5:\n            break\n        e = max(min(best_err, 1.0 - 1e-10), 1e-10)\n        alpha = 0.5 * math.log((1.0 - e) / e)\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n        w_s = w_s * np.exp(-alpha * y_s * best_pred)\n        w_s = w_s / np.sum(w_s)\n        F_s += alpha * best_pred\n        train_pred = np.where(F_s >= 0, 1, -1)\n        train_err = np.mean(train_pred != y_s)\n        if train_err <= epsilon:\n            break\n    y_out = []\n    for xt in x_test:\n        s = 0.0\n        for ((d, theta), alpha) in zip(stumps, alphas):\n            if d == 0:\n                h = 1 if xt <= theta else -1\n            else:\n                h = 1 if xt > theta else -1\n            s += alpha * h\n        y_out.append(1 if s >= 0 else -1)\n    return y_out"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (m, _) = X_test.shape\n    (n, _) = X_train.shape\n    if m == 0 or n == 0:\n        return []\n    X_test_sq = np.sum(X_test ** 2, axis=1)\n    X_train_sq = np.sum(X_train ** 2, axis=1)\n    dist_sq = X_test_sq[:, np.newaxis] + X_train_sq[np.newaxis, :] - 2.0 * X_test.dot(X_train.T)\n    K = np.exp(-gamma * dist_sq)\n    coeff = alpha * y_train\n    g = K.dot(coeff) + b\n    preds = np.where(g >= 0, 1, -1)\n    return preds.astype(int).tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    A = np.array(X, dtype=float)\n    (m, n) = A.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(A, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    S_k = np.diag(s_k)\n    A_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((A - A_hat) ** 2)\n    A_hat_rounded = np.round(A_hat, 4)\n    mse_rounded = float(np.round(mse, 4))\n    X_hat_list = A_hat_rounded.tolist()\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x = np.asarray(x_train, dtype=float).flatten()\n    y = np.asarray(y_train, dtype=float).flatten()\n    n = x.shape[0]\n    if n == 0:\n        return 0.0\n    order = np.argsort(x)\n    x = x[order]\n    y = y[order]\n    splits = []\n    for i in range(n - 1):\n        if x[i] != x[i + 1]:\n            splits.append(0.5 * (x[i] + x[i + 1]))\n    if len(splits) == 0:\n        return round(float(np.mean(y)), 4)\n    residuals = y.copy()\n    rss = np.sum(residuals ** 2)\n    stumps = []\n    while rss > epsilon:\n        best = None\n        for s in splits:\n            left_mask = x <= s\n            right_mask = ~left_mask\n            c1 = residuals[left_mask].mean() if np.any(left_mask) else 0.0\n            c2 = residuals[right_mask].mean() if np.any(right_mask) else 0.0\n            preds = np.where(left_mask, c1, c2)\n            rss_new = np.sum((residuals - preds) ** 2)\n            if best is None or rss_new < best[0]:\n                best = (rss_new, s, c1, c2)\n        if best is None:\n            break\n        (rss_new, best_s, best_c1, best_c2) = best\n        if rss_new >= rss:\n            break\n        stumps.append((best_s, best_c1, best_c2))\n        left_mask = x <= best_s\n        preds = np.where(left_mask, best_c1, best_c2)\n        residuals -= preds\n        rss = rss_new\n    pred = 0.0\n    for (s, c1, c2) in stumps:\n        pred += c1 if x_query <= s else c2\n    return round(float(pred), 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor of the given shape, filled with 0.0s and 1.0s,\n    where each element is 1.0 with probability `sparsity` and 0.0 otherwise.\n\n    Parameters\n    ----------\n    shape : tuple of int\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        Probability of an entry being 1.0. Must lie in [0, 1]. Default is 0.5.\n    seed : int or None, optional\n        If not None, seed for NumPy's random number generator to make the\n        result reproducible. Default is None.\n\n    Returns\n    -------\n    numpy.ndarray of floats\n        An array of shape `shape` containing only 0.0 and 1.0.\n    int\n        Returns -1 if `sparsity` is outside the interval [0, 1].\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    uniform_samples = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (uniform_samples >= threshold).astype(float)\n    return binary_tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    if n == 0:\n        raise ValueError('Cannot split an empty dataset.')\n    k = n // 2\n    col = data[:, d]\n    parti = np.argpartition(col, k)\n    pivot_idx = int(parti[k])\n    pivot_val = col[pivot_idx]\n    left_mask = col < pivot_val\n    right_mask = col > pivot_val\n    left_indices = np.nonzero(left_mask)[0]\n    right_indices = np.nonzero(right_mask)[0]\n    left_list = sorted((int(i) for i in left_indices))\n    right_list = sorted((int(i) for i in right_indices))\n    return (pivot_idx, left_list, right_list)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        arr = np.array(X, dtype=float)\n    except Exception:\n        return False\n    if arr.ndim != 2:\n        return False\n    if np.any(arr < 0) or np.any(arr > 1):\n        return False\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, np.ones(arr.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 56, "completion_id": 0, "solution": ""}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function builds polynomial features up to 'degree', optimises the\n    Lasso objective with coordinate descent, and returns the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values, same length as X.\n    degree : int\n        Highest exponent of x to include (total coeffs = degree + 1).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int\n        Maximum number of coordinate-descent passes.\n    tol : float\n        Early-stopping tolerance on max coefficient change.\n\n    Returns\n    -------\n    list[float]\n        Weights [w0, w1, ..., w_degree], rounded to 4 decimals.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    m = X_arr.shape[0]\n    if y_arr.shape[0] != m:\n        raise ValueError('X and y must have the same length.')\n    if X_arr.ndim != 1:\n        raise ValueError('X must be one-dimensional.')\n    if degree < 0 or not isinstance(degree, int):\n        raise ValueError('degree must be a non-negative integer.')\n    if reg_factor < 0:\n        raise ValueError('reg_factor must be non-negative.')\n    X_mat = np.vander(X_arr, N=degree + 1, increasing=True)\n    w = np.zeros(degree + 1, dtype=float)\n    if degree >= 1:\n        denoms = np.sum(X_mat[:, 1:] ** 2, axis=0)\n    else:\n        denoms = np.array([])\n\n    def soft_threshold(rho: float, lam: float) -> float:\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n        if degree >= 1:\n            w[0] = np.mean(y_arr - X_mat[:, 1:] @ w[1:])\n        else:\n            w[0] = np.mean(y_arr)\n        for j in range(1, degree + 1):\n            x_j = X_mat[:, j]\n            r = y_arr - X_mat @ w + w[j] * x_j\n            rho = x_j.dot(r)\n            w_j_new = soft_threshold(rho, reg_factor) / denoms[j - 1]\n            w[j] = w_j_new\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a discrete Hidden Markov Model.\n    \n    Given:\n      A   \u2013 (N\u00d7N) transition-probability matrix, A[i][j] = P(x_{k+1}=j | x_k=i)\n      B   \u2013 (N\u00d7M) emission-probability matrix, B[j][m] = P(o=m | x=j)\n      obs \u2013 length-T list of observation indices (each in 0..M-1)\n      t   \u2013 time index (0 \u2264 t < T)\n    \n    Returns:\n      A list of length N containing \u03b2_t(i) for i=0..N-1,\n      each rounded to 4 decimal places.\n    \n    Backward recursion:\n      \u03b2_{T-1}(i) = 1\n      \u03b2_t(i) = sum_j A[i][j] * B[j][ obs[t+1] ] * \u03b2_{t+1}(j)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.ones(N, dtype=float)\n    for k in range(T - 2, t - 1, -1):\n        o_next = obs[k + 1]\n        beta = (A * (B[:, o_next] * beta)).sum(axis=1)\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    pi_arr = np.array(pi, dtype=float)\n    obs_arr = np.array(obs, dtype=int)\n    N = A_arr.shape[0]\n    T = obs_arr.shape[0]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        weighted_next = B_arr[:, obs_arr[t + 1]] * beta[t + 1, :]\n        beta[t, :] = A_arr.dot(weighted_next)\n    first_emit = B_arr[:, obs_arr[0]]\n    prob = np.dot(pi_arr * first_emit, beta[0, :])\n    return float(round(prob, 6))"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not isinstance(S, list) or not isinstance(A, list) or (not isinstance(B, list)):\n        return -1.0\n    n = len(S)\n    if n == 0 or len(A) != n or len(B) != n:\n        return -1.0\n    for row in A:\n        if not isinstance(row, list) or len(row) != n:\n            return -1.0\n    m = None\n    for row in B:\n        if not isinstance(row, list):\n            return -1.0\n        if m is None:\n            m = len(row)\n            if m == 0:\n                return -1.0\n        elif len(row) != m:\n            return -1.0\n    if not isinstance(observations, list) or len(observations) == 0:\n        return -1.0\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1.0\n    S_arr = np.array(S, dtype=float)\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    t0 = observations[0]\n    alpha = S_arr * B_arr[:, t0]\n    for t in observations[1:]:\n        alpha = np.dot(alpha, A_arr) * B_arr[:, t]\n    prob = alpha.sum()\n    return round(prob, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    class FPNode:\n        __slots__ = ('name', 'count', 'parent', 'children', 'link')\n\n        def __init__(self, name, parent):\n            self.name = name\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n    def update_header(item, node, header_table):\n        head = header_table[item][1]\n        if head is None:\n            header_table[item][1] = node\n        else:\n            while head.link:\n                head = head.link\n            head.link = node\n\n    def insert_tree(items, node, header_table, count=1):\n        if not items:\n            return\n        first = items[0]\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = FPNode(first, node)\n            child.count = count\n            node.children[first] = child\n            update_header(first, child, header_table)\n        insert_tree(items[1:], child, header_table, count)\n    freq = Counter()\n    for tran in transactions:\n        freq.update(tran)\n    freq = {item: cnt for (item, cnt) in freq.items() if cnt >= min_support}\n    if not freq:\n        return []\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    def sort_key(x):\n        return (-freq[x], x)\n    header_table = {item: [freq[item], None] for (item, _) in sorted_items}\n    root = FPNode(None, None)\n    for tran in transactions:\n        filtered = [i for i in tran if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=sort_key)\n        insert_tree(ordered, root, header_table)\n    frequent_itemsets = []\n\n    def mine_tree(header, prefix):\n        for item in sorted(header.keys()):\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix.copy())\n            conditional_patterns = []\n            node = header[item][1]\n            while node:\n                count = node.count\n                path = []\n                parent = node.parent\n                while parent and parent.name is not None:\n                    path.append(parent.name)\n                    parent = parent.parent\n                if path:\n                    conditional_patterns.append((path[::-1], count))\n                node = node.link\n            cpb_freq = Counter()\n            for (path, cnt) in conditional_patterns:\n                for itm in path:\n                    cpb_freq[itm] += cnt\n            cond_items = {i for (i, c) in cpb_freq.items() if c >= min_support}\n            if not cond_items:\n                continue\n            sorted_c = sorted(cond_items, key=lambda x: (-cpb_freq[x], x))\n            cond_header = {i: [cpb_freq[i], None] for i in sorted_c}\n            cond_root = FPNode(None, None)\n            for (path, cnt) in conditional_patterns:\n                filtered_path = [i for i in path if i in cond_items]\n                if not filtered_path:\n                    continue\n                ordered_path = sorted(filtered_path, key=lambda x: (-cpb_freq[x], x))\n                insert_tree(ordered_path, cond_root, cond_header, cnt)\n            mine_tree(cond_header, new_prefix)\n    mine_tree(header_table, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return -1\n    X_train_arr = np.array(X_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    predictions = []\n    for x in X_test_arr:\n        dists = np.sum((X_train_arr - x) ** 2, axis=1)\n        neigh_idx = np.argsort(dists)[:k]\n        neigh_labels = y_train_arr[neigh_idx].tolist()\n        vote_counts = Counter(neigh_labels)\n        max_votes = max(vote_counts.values())\n        tied_labels = [lbl for (lbl, cnt) in vote_counts.items() if cnt == max_votes]\n        prediction = min(tied_labels)\n        predictions.append(int(prediction))\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y, dtype=np.float64)\n    y_pred = np.array(y_pred, dtype=np.float64)\n    eps = np.finfo(np.float64).eps\n    log_preds = np.log(y_pred + eps)\n    loss = -np.sum(y * log_preds)\n    return float(np.round(loss, 4))"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[list[float]], list]\n        A tuple (AL, caches), where\n        - AL is the final activation rounded to 4 decimals and converted to a \n          plain Python list of shape (1, m).\n        - caches is a list of caches for each layer (for backprop).\n    \"\"\"\n\n    def sigmoid(Z: np.ndarray) -> np.ndarray:\n        return 1 / (1 + np.exp(-Z))\n\n    def relu(Z: np.ndarray) -> np.ndarray:\n        return np.maximum(0, Z)\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = W.dot(A_prev) + b\n        A = relu(Z)\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        caches.append((linear_cache, activation_cache))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    ZL = W.dot(A) + b\n    AL = sigmoid(ZL)\n    linear_cache = (A, W, b)\n    activation_cache = ZL\n    caches.append((linear_cache, activation_cache))\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as A2.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2_clipped = np.clip(A2, eps, 1 - eps)\n    A2_flat = A2_clipped.reshape(-1)\n    Y_flat = Y.reshape(-1)\n    m = Y_flat.shape[0]\n    cost = -(1.0 / m) * np.sum(Y_flat * np.log(A2_flat) + (1 - Y_flat) * np.log(1 - A2_flat))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list contains the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(Q, dtype=float).ravel()\n    n = arr.size\n    if n == 0:\n        return []\n    if not 0.0 <= epsilon <= 1.0:\n        raise ValueError('epsilon must be in [0, 1]')\n    base = epsilon / n\n    greedy_idx = int(np.argmax(arr))\n    probs = np.full(n, base, dtype=float)\n    probs[greedy_idx] += 1.0 - epsilon\n    rounded = np.round(probs, 4)\n    total = rounded.sum()\n    drift = 1.0 - total\n    if abs(drift) > 1e-12:\n        rounded[greedy_idx] = round(rounded[greedy_idx] + drift, 4)\n    if not np.isclose(rounded.sum(), 1.0, atol=1e-12):\n        raise RuntimeError(f'Probabilities sum to {rounded.sum()}, not 1')\n    return rounded.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not predictions[0]:\n        return []\n    columns = zip(*predictions)\n    final_predictions: List[Any] = []\n    for votes in columns:\n        cnt = Counter(votes)\n        max_votes = max(cnt.values())\n        tied_labels = [label for (label, v) in cnt.items() if v == max_votes]\n        winner = min(tied_labels)\n        final_predictions.append(winner)\n    return final_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses numpy.logaddexp to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape\n        but is converted to a pure Python list. For scalar inputs a single\n        float is returned.\n    \"\"\"\n    arr = np.asarray(z, dtype=float)\n    y = np.logaddexp(0.0, arr)\n    y_rounded = np.round(y, 4)\n    if y_rounded.ndim == 0:\n        return float(y_rounded)\n    return y_rounded.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    estimates = getattr(policy, 'ev_estimates', None)\n    if estimates is None and isinstance(policy, dict):\n        estimates = policy.get('ev_estimates', None)\n    if not isinstance(estimates, dict) or len(estimates) == 0:\n        return np.nan\n    arm_evs = getattr(bandit, 'arm_evs', None)\n    if arm_evs is None and isinstance(bandit, dict):\n        arm_evs = bandit.get('arm_evs', None)\n    se_sum = 0.0\n    count = 0\n    for arm_index in sorted(estimates.keys()):\n        est = estimates[arm_index]\n        true = arm_evs[arm_index]\n        diff = est - true\n        se_sum += diff * diff\n        count += 1\n    mse_val = se_sum / count\n    return round(mse_val, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive\u2010smoothed log\u2010probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    for sent in corpus:\n        for w in sent.split():\n            vocab.add(w)\n    vocab.add('<UNK>')\n    V = len(vocab)\n    counters = [Counter() for _ in range(N + 1)]\n    total_unigrams = 0\n    for sent in corpus:\n        tokens = sent.split()\n        total_unigrams += len(tokens)\n        for n in range(1, N + 1):\n            if len(tokens) < n:\n                continue\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i + n])\n                counters[n][ngram] += 1\n    seq_tokens = sequence.split()\n    if len(seq_tokens) < N:\n        return 0.0\n    seq_mapped = [w if w in vocab else '<UNK>' for w in seq_tokens]\n    log_prob = 0.0\n    for i in range(N - 1, len(seq_mapped)):\n        if N > 1:\n            context = tuple(seq_mapped[i - (N - 1):i])\n        else:\n            context = ()\n        word = seq_mapped[i]\n        ngram = context + (word,)\n        count_ngram = counters[N].get(ngram, 0)\n        if N > 1:\n            count_context = counters[N - 1].get(context, 0)\n        else:\n            count_context = total_unigrams\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    I_K = np.eye(K)\n    for iteration in range(max_iter):\n        A = H @ H.T + alpha * I_K\n        V = X @ H.T\n        W = np.linalg.solve(A, V.T).T\n        B = W.T @ W + alpha * I_K\n        U = W.T @ X\n        H = np.linalg.solve(B, U)\n        X_hat = W @ H\n        recon_error = np.linalg.norm(X - X_hat, ord='fro') ** 2\n        reg = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        loss = recon_error + reg\n        if loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode each character in `text` into its integer token from `vocabulary`.\n    - Unknown characters \u2192 padding token 0.\n    - If text is shorter than time_steps, pad with 0s on the right.\n    - If text is longer, truncate to time_steps.\n    Returns a list of length exactly time_steps.\n    \"\"\"\n    encoded = [0] * time_steps\n    for (i, ch) in enumerate(text[:time_steps]):\n        encoded[i] = vocabulary.get(ch, 0)\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a sequence of integer token ids into a string using inverse_vocab.\n    - Skip any padding tokens (0).\n    - If an id is not found in inverse_vocab, skip it.\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx == 0:\n            continue\n        ch = inverse_vocab.get(int(idx))\n        if ch is not None:\n            chars.append(ch)\n    return ''.join(chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    1) Encode `text` to integer sequence of length TIME_STEPS.\n    2) Run model.predict on batch of size 1.\n    3) Take argmax over last axis to get predicted ids per time step.\n    4) Decode the predicted ids back to a string.\n    Returns the decoded prediction.\n    \"\"\"\n    seq_int = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([seq_int], dtype=np.int32)\n    preds = model.predict(batch)\n    pred_ids = np.argmax(preds, axis=-1)[0]\n    return int_to_string(pred_ids, inv_output_vocabulary)"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If None, the function will use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise NameError('Global EXAMPLES is not defined, and no examples were passed in.')\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        pred_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {pred_str}')\n        predictions.append(pred_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    D = np.full(m, 1.0 / m)\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = np.inf\n        best_stump = None\n        for feature_i in range(n):\n            Xf = X_train[:, feature_i]\n            unique_vals = np.unique(Xf)\n            if unique_vals.size == 1:\n                thresholds = [unique_vals[0] - 1e-05, unique_vals[0] + 1e-05]\n            else:\n                thresholds = ((unique_vals[:-1] + unique_vals[1:]) / 2.0).tolist()\n                thresholds.insert(0, unique_vals[0] - 1e-05)\n                thresholds.append(unique_vals[-1] + 1e-05)\n            for thr in thresholds:\n                for polarity in [1, -1]:\n                    preds = np.ones(m)\n                    if polarity == 1:\n                        preds[Xf < thr] = -1\n                    else:\n                        preds[Xf < thr] = 1\n                    miss = (preds != y_train).astype(float)\n                    error = np.dot(D, miss)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_i, thr, polarity)\n        eps = 1e-10\n        best_error = max(eps, min(best_error, 1 - eps))\n        alpha = 0.5 * np.log((1.0 - best_error) / best_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        (feature_i, thr, polarity) = best_stump\n        Xf = X_train[:, feature_i]\n        preds = np.ones(m)\n        if polarity == 1:\n            preds[Xf < thr] = -1\n        else:\n            preds[Xf < thr] = 1\n        D *= np.exp(-alpha * y_train * preds)\n        D /= D.sum()\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n    for (stump, alpha) in zip(stumps, alphas):\n        (feature_i, thr, polarity) = stump\n        Xf_test = X_test[:, feature_i]\n        preds = np.ones(k)\n        if polarity == 1:\n            preds[Xf_test < thr] = -1\n        else:\n            preds[Xf_test < thr] = 1\n        agg += alpha * preds\n    final_preds = np.where(agg >= 0, 1, -1)\n    return final_preds.tolist()"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    if grid[0][0] != '.' or grid[n - 1][n - 1] != '.':\n        return -1\n    INF = math.inf\n    fire_time = [[INF] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    while q:\n        (x, y) = q.popleft()\n        t0 = fire_time[x][y]\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t0 + 1:\n                    fire_time[nx][ny] = t0 + 1\n                    q.append((nx, ny))\n    if fire_time[0][0] <= 0 or fire_time[n - 1][n - 1] <= 0:\n        return -1\n    visited = [[False] * n for _ in range(n)]\n    visited[0][0] = True\n    q = deque([(0, 0, 0)])\n    while q:\n        (x, y, t) = q.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            (nx, ny) = (x + dx, y + dy)\n            nt = t + 1\n            if 0 <= nx < n and 0 <= ny < n:\n                if not visited[nx][ny] and grid[nx][ny] == '.' and (fire_time[nx][ny] > nt):\n                    visited[nx][ny] = True\n                    q.append((nx, ny, nt))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors classifier.\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_train, n_features)\n        Training data.\n    y_train : np.ndarray, shape (n_train,)\n        Training labels.\n    X_test : np.ndarray, shape (n_test, n_features)\n        Test data to classify.\n    k : int\n        Number of neighbors to use.\n    metric : str, optional (default='euclidean')\n        Distance metric to use: 'euclidean', 'manhattan', or 'cosine'.\n        If unknown, falls back to 'euclidean'.\n    Returns\n    -------\n    np.ndarray, shape (n_test,)\n        Predicted labels for X_test.\n    \"\"\"\n    metric = metric.lower()\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        metric = 'euclidean'\n    X_train = np.asarray(X_train)\n    y_train = np.asarray(y_train)\n    X_test = np.asarray(X_test)\n    (n_train, n_feat) = X_train.shape\n    n_test = X_test.shape[0]\n    if metric == 'euclidean':\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sqrt(np.sum(diffs ** 2, axis=2))\n    elif metric == 'manhattan':\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sum(np.abs(diffs), axis=2)\n    else:\n        train_norms = np.linalg.norm(X_train, axis=1)\n        test_norms = np.linalg.norm(X_test, axis=1)\n        eps = 1e-12\n        train_norms = np.maximum(train_norms, eps)\n        test_norms = np.maximum(test_norms, eps)\n        dots = X_test.dot(X_train.T)\n        norm_matrix = np.outer(test_norms, train_norms)\n        cos_sim = dots / norm_matrix\n        cos_sim = np.clip(cos_sim, -1.0, 1.0)\n        dists = 1.0 - cos_sim\n    y_pred = np.empty(n_test, dtype=y_train.dtype)\n    for i in range(n_test):\n        nn_idx = np.argsort(dists[i])[:k]\n        neighbors = y_train[nn_idx]\n        (labels, counts) = np.unique(neighbors, return_counts=True)\n        max_count = counts.max()\n        winners = labels[counts == max_count]\n        y_pred[i] = winners.min()\n    return y_pred"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n                        'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    x = np.array(state, dtype=float)\n    z1 = x.dot(weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = a1.dot(weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = a2.dot(weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)\n    return np.round(a3, 4).tolist()"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  All returned numbers are rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    col_norms = np.sum(X * X, axis=0)\n    w = np.zeros(n + 1, dtype=float)\n    for _ in range(max_iters):\n        if fit_intercept:\n            b = np.mean(y - X.dot(w[1:]))\n            w[0] = b\n        y_pred = w[0] + X.dot(w[1:])\n        for j in range(n):\n            old_wj = w[j + 1]\n            residual = y - y_pred + X[:, j] * old_wj\n            rho = X[:, j].dot(residual)\n            tau = lambda_param * m\n            if rho < -tau:\n                new_wj = (rho + tau) / col_norms[j]\n            elif rho > tau:\n                new_wj = (rho - tau) / col_norms[j]\n            else:\n                new_wj = 0.0\n            w[j + 1] = new_wj\n            y_pred += X[:, j] * (new_wj - old_wj)\n    bias = float(np.round(w[0], 4))\n    weights = np.round(w[1:], 4).tolist()\n    return (weights, bias)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function returns -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    xa = np.asarray(x)\n    ya = np.asarray(y)\n    if xa.ndim != 1 or ya.ndim != 1 or xa.shape[0] != ya.shape[0]:\n        return -1\n    n = xa.shape[0]\n    if n == 0:\n        return 0.0\n    diff_count = np.count_nonzero(xa != ya)\n    dist = diff_count / n\n    return round(dist, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    M = N - 1\n    two_pi_over_M = 2.0 * math.pi / M\n    w = []\n    if window == 'hamming':\n        for n in range(N):\n            val = 0.54 - 0.46 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n    elif window == 'hann':\n        for n in range(N):\n            val = 0.5 - 0.5 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            x = two_pi_over_M * n\n            val = a0 - a1 * math.cos(x) + a2 * math.cos(2.0 * x) - a3 * math.cos(3.0 * x)\n            w.append(round(val, 4))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Must supply 'coefficients' for generalized_cosine window\")\n        for n in range(N):\n            acc = 0.0\n            for (k, a_k) in enumerate(coefficients):\n                acc += a_k * math.cos(two_pi_over_M * k * n)\n            w.append(round(acc, 4))\n    else:\n        raise ValueError(f\"Unknown window type '{window}'\")\n    return w"}
{"task_id": 171, "completion_id": 0, "solution": ""}
{"task_id": 176, "completion_id": 0, "solution": ""}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (isinstance(n_dims, int) and n_dims > 0 and isinstance(num_particles, int) and (num_particles > 0) and isinstance(num_iterations, int) and (num_iterations > 0)):\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    fitness = np.sum(positions ** 2, axis=1)\n    pbest_positions = positions.copy()\n    pbest_fitness = fitness.copy()\n    gbest_idx = np.argmin(pbest_fitness)\n    gbest_position = pbest_positions[gbest_idx].copy()\n    gbest_fitness = pbest_fitness[gbest_idx]\n    for _ in range(num_iterations):\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_particles, n_dims))\n        cognitive = c1 * r1 * (pbest_positions - positions)\n        social = c2 * r2 * (gbest_position - positions)\n        velocities = w * velocities + cognitive + social\n        positions = positions + velocities\n        np.clip(positions, lower_bound, upper_bound, out=positions)\n        fitness = np.sum(positions ** 2, axis=1)\n        better_mask = fitness < pbest_fitness\n        if np.any(better_mask):\n            pbest_positions[better_mask] = positions[better_mask]\n            pbest_fitness[better_mask] = fitness[better_mask]\n        min_idx = np.argmin(pbest_fitness)\n        min_val = pbest_fitness[min_idx]\n        if min_val < gbest_fitness:\n            gbest_fitness = min_val\n            gbest_position = pbest_positions[min_idx].copy()\n    return round(float(gbest_fitness), 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    y_train_list = list(y_train)\n    n_train = X_train_np.shape[0]\n    if k <= 0 or k > n_train:\n        k_eff = n_train\n    else:\n        k_eff = k\n    preds = []\n    for x in X_test_np:\n        dists = np.linalg.norm(X_train_np - x, axis=1)\n        nn_idx = np.argsort(dists)[:k_eff]\n        neighbors = [y_train_list[i] for i in nn_idx]\n        if task == 'classification':\n            cnt = Counter(neighbors)\n            max_count = max(cnt.values())\n            top_labels = [label for (label, c) in cnt.items() if c == max_count]\n            pred = min(top_labels)\n        elif task == 'regression':\n            avg_val = sum(neighbors) / k_eff\n            pred = round(avg_val, 4)\n        else:\n            raise ValueError(\"task must be 'classification' or 'regression'\")\n        preds.append(pred)\n    return preds"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    key = name.lower()\n    supported = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if key not in supported:\n\n        def _bad(a, b):\n            return -1\n        return _bad\n\n    def _distance(a, b):\n        if not isinstance(a, (list, tuple, np.ndarray)) or not isinstance(b, (list, tuple, np.ndarray)):\n            return -1\n        try:\n            xa = np.array(a, dtype=float)\n            ya = np.array(b, dtype=float)\n        except Exception:\n            return -1\n        if xa.ndim != 1 or ya.ndim != 1:\n            return -1\n        if xa.size == 0 or ya.size == 0:\n            return -1\n        if xa.shape[0] != ya.shape[0]:\n            return -1\n        if key == 'euclidean':\n            diff = xa - ya\n            val = np.linalg.norm(diff)\n        elif key == 'manhattan':\n            val = np.sum(np.abs(xa - ya))\n        elif key == 'chebyshev':\n            val = np.max(np.abs(xa - ya))\n        else:\n            norm_x = np.linalg.norm(xa)\n            norm_y = np.linalg.norm(ya)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            cos_sim = np.dot(xa, ya) / (norm_x * norm_y)\n            val = 1.0 - cos_sim\n        return round(float(val), 4)\n    return _distance"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional (i.e., env.action_space.spaces exists).\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        subspaces = env.action_space.spaces\n        action_dim = len(subspaces)\n        n_actions_per_dim: List[Union[int, float]] = []\n        saw_cont = False\n        for sp in subspaces:\n            if hasattr(sp, 'n'):\n                n_actions_per_dim.append(sp.n)\n            elif hasattr(sp, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                saw_cont = True\n            else:\n                raise ValueError('Sub-space is neither discrete nor continuous')\n        if saw_cont:\n            action_ids = None\n        else:\n            ranges = [range(int(n)) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n        return (n_actions_per_dim, action_ids, action_dim)\n    else:\n        space = env.action_space\n        if cont_action:\n            shape = getattr(space, 'shape', ())\n            if not shape:\n                action_dim = 1\n            else:\n                action_dim = int(shape[0])\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n            return (n_actions_per_dim, action_ids, action_dim)\n        else:\n            if not hasattr(space, 'n'):\n                raise ValueError(\"Expected a discrete space with attribute 'n'\")\n            n = int(space.n)\n            action_dim = 1\n            n_actions_per_dim = [n]\n            action_ids = [(i,) for i in range(n)]\n            return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        return [[] for _ in range(V)]\n    T = phi[0].shape[1]\n    counts = np.zeros((V, T), dtype=float)\n    for (doc_phi, doc_words) in zip(phi, corpus):\n        for (n, word_idx) in enumerate(doc_words):\n            counts[word_idx, :] += doc_phi[n, :]\n    col_sums = counts.sum(axis=0)\n    for t in range(T):\n        if col_sums[t] > 0:\n            counts[:, t] /= col_sums[t]\n    beta = np.round(counts, 4)\n    return beta.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n_samples = X.shape[0]\n    if k < 1 or k > n_samples:\n        raise ValueError('k must be between 1 and n_samples')\n    medoids = list(range(k))\n    medoid_set = set(medoids)\n    diff = X[:, None, :] - X[None, :, :]\n    D = np.sqrt(np.sum(diff * diff, axis=2))\n\n    def total_cost(meds):\n        dm = D[:, meds]\n        return float(np.min(dm, axis=1).sum())\n    current_cost = total_cost(medoids)\n    while True:\n        best_delta = 0.0\n        best_swap = None\n        for (i_med, m) in enumerate(medoids):\n            for o in range(n_samples):\n                if o in medoid_set:\n                    continue\n                cand = medoids.copy()\n                cand[i_med] = o\n                c_cost = total_cost(cand)\n                delta = current_cost - c_cost\n                if delta > best_delta:\n                    best_delta = delta\n                    best_swap = (i_med, o, c_cost)\n        if best_swap is not None:\n            (i_med, new_medoid, new_cost) = best_swap\n            old_medoid = medoids[i_med]\n            medoids[i_med] = new_medoid\n            medoid_set.remove(old_medoid)\n            medoid_set.add(new_medoid)\n            current_cost = new_cost\n        else:\n            break\n    distances_to_meds = D[:, medoids]\n    labels = np.argmin(distances_to_meds, axis=1)\n    return [int(l) for l in labels]"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    Xtr = np.array(x_train, dtype=float)\n    ytr = np.array(y_train, dtype=float).reshape(-1)\n    Xte = np.array(x_test, dtype=float)\n    if n_iterations < 1:\n        return -1\n    if Xtr.ndim != 2 or Xte.ndim != 2:\n        return -1\n    (n_tr, p_tr) = Xtr.shape\n    (n_te, p_te) = Xte.shape\n    if p_tr != p_te:\n        return -1\n    if ytr.shape[0] != n_tr:\n        return -1\n\n    def poly_expand(X, deg):\n        if deg == 1:\n            return X.copy()\n        Xs = [X ** d for d in range(1, deg + 1)]\n        return np.hstack(Xs)\n    Xtr_poly = poly_expand(Xtr, degree)\n    Xte_poly = poly_expand(Xte, degree)\n    means = Xtr_poly.mean(axis=0)\n    stds = Xtr_poly.std(axis=0)\n    stds_fixed = np.where(stds == 0, 1.0, stds)\n    Xtr_s = (Xtr_poly - means) / stds_fixed\n    Xte_s = (Xte_poly - means) / stds_fixed\n    Xtr_aug = np.hstack([np.ones((n_tr, 1)), Xtr_s])\n    Xte_aug = np.hstack([np.ones((n_te, 1)), Xte_s])\n    n_features = Xtr_aug.shape[1]\n    w = np.zeros(n_features, dtype=float)\n    alpha = reg_factor\n    r = l1_ratio\n    for _ in range(n_iterations):\n        preds = Xtr_aug.dot(w)\n        err = preds - ytr\n        grad = 2.0 / n_tr * Xtr_aug.T.dot(err)\n        sign_w = np.sign(w)\n        grad[1:] += alpha * ((1 - r) * w[1:] + r * sign_w[1:])\n        w -= learning_rate * grad\n    y_pred = Xte_aug.dot(w)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": ""}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(cards: list[int]) -> int:\n        total = sum(cards)\n        if 1 in cards and total + 10 <= 21:\n            return total + 10\n        return total\n\n    def is_natural(cards: list[int]) -> bool:\n        return len(cards) == 2 and 1 in cards and (10 in cards)\n    p_score = hand_value(player)\n    d_score = hand_value(dealer)\n    p_nat = is_natural(player)\n    d_nat = is_natural(dealer)\n    if p_score > 21:\n        return -1.0\n    if p_nat and (not d_nat):\n        return 1.5\n    if d_score > 21:\n        return 1.0\n    if p_score > d_score:\n        return 1.0\n    elif p_score < d_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if np.isscalar(z):\n        z_val = float(z)\n        if z_val >= 0:\n            exp_neg = math.exp(-z_val)\n            s = 1.0 / (1.0 + exp_neg)\n        else:\n            exp_pos = math.exp(z_val)\n            s = exp_pos / (1.0 + exp_pos)\n        return round(s, 4)\n    arr = np.array(z, dtype=np.float64)\n    s = np.empty_like(arr)\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n    s[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    exp_z = np.exp(arr[neg_mask])\n    s[neg_mask] = exp_z / (1.0 + exp_z)\n    s_rounded = np.round(s, 4)\n    return s_rounded.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list (or for a scalar input, a Python scalar) with the same\n        structure as *z*, where each value has been transformed by the Leaky ReLU.\n    \"\"\"\n    arr = np.asarray(z)\n    activated = np.where(arr >= 0, arr, a * arr)\n    return activated.tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element is\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        (best_feature, best_thresh, best_polarity) = (None, None, None)\n        best_error = float('inf')\n        best_pred = None\n        for feature_i in range(n_features):\n            X_col = X_train[:, feature_i]\n            thresholds = np.unique(X_col)\n            for thresh in thresholds:\n                for polarity in [1, -1]:\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        pred[X_col < thresh] = -1\n                    else:\n                        pred = -np.ones(n_samples)\n                        pred[X_col < thresh] = 1\n                    misclassified = pred != y_train\n                    error = np.dot(w, misclassified)\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature_i\n                        best_thresh = thresh\n                        best_polarity = polarity\n                        best_pred = pred.copy()\n        alpha = 0.5 * math.log((1.0 - best_error) / (best_error + 1e-10))\n        classifiers.append((best_feature, best_thresh, best_polarity, alpha))\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)\n    n_test = X_test.shape[0]\n    final_pred = np.zeros(n_test)\n    for (feature_i, thresh, polarity, alpha) in classifiers:\n        X_col = X_test[:, feature_i]\n        pred = np.ones(n_test)\n        if polarity == 1:\n            pred[X_col < thresh] = -1\n        else:\n            pred = -np.ones(n_test)\n            pred[X_col < thresh] = 1\n        final_pred += alpha * pred\n    y_pred = np.sign(final_pred)\n    y_pred[y_pred == 0] = 1\n    return [int(label) for label in y_pred]"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=float)\n    s_sum = np.sum(s)\n    z1 = max(0.0, s_sum)\n    logits = np.full((3,), 64.0 * z1)\n    state_value = 64.0 * z1\n    exp_shift = np.exp(logits - np.max(logits))\n    probs = exp_shift / np.sum(exp_shift)\n    action_probs = np.round(probs, 4).tolist()\n    state_value = float(np.round(state_value, 4))\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head (rounded to 4 d.p.)\n        value         : float          \u2013 scalar output of the critic head (rounded to 4 d.p.)\n    \"\"\"\n    x = np.array(state, dtype=float)\n    (W1, b1) = (np.array(params['W1'], dtype=float), np.array(params['b1'], dtype=float))\n    (W2, b2) = (np.array(params['W2'], dtype=float), np.array(params['b2'], dtype=float))\n    (W3, b3) = (np.array(params['W3'], dtype=float), np.array(params['b3'], dtype=float))\n    (Wa, ba) = (np.array(params['Wa'], dtype=float), np.array(params['ba'], dtype=float))\n    (Wc, bc) = (np.array(params['Wc'], dtype=float), np.array(params['bc'], dtype=float))\n\n    def relu(z):\n        return np.maximum(0, z)\n    h1 = relu(W1.dot(x) + b1)\n    h2 = relu(W2.dot(h1) + b2)\n    h3 = relu(W3.dot(h2) + b3)\n    logits = Wa.dot(h3) + ba\n    shifted = logits - np.max(logits)\n    exps = np.exp(shifted)\n    probs = exps / np.sum(exps)\n    value = float(Wc.dot(h3) + bc)\n\n    def smart_round(num: float) -> float:\n        r = round(num, 4)\n        if r == 0.0 or r == 1.0:\n            return float(f'{r:.1f}')\n        return r\n    probs_rounded = [smart_round(p) for p in probs.tolist()]\n    value_rounded = smart_round(value)\n    return (probs_rounded, value_rounded)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_arr = np.asarray(w, dtype=float).ravel()\n    if not gradient:\n        l1_term = l1_ratio * np.sum(np.abs(w_arr))\n        l2_term = (1.0 - l1_ratio) * 0.5 * np.sum(w_arr ** 2)\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)\n    else:\n        grad = alpha * (l1_ratio * np.sign(w_arr) + (1.0 - l1_ratio) * w_arr)\n        return [round(float(g), 4) for g in grad]"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_pred = None\n        min_error = np.inf\n        for feature_i in range(n):\n            X_col = X_train[:, feature_i]\n            thresholds = np.unique(X_col)\n            for thresh in thresholds:\n                for polarity in [1, -1]:\n                    pred = np.ones(m)\n                    if polarity == 1:\n                        pred[X_col >= thresh] = -1\n                    else:\n                        pred[X_col < thresh] = -1\n                    error = np.sum(w[pred != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_pred = pred.copy()\n                        best_stump = {'feature': feature_i, 'threshold': thresh, 'polarity': polarity}\n        eps = 1e-10\n        err = min_error\n        alpha = 0.5 * np.log((1 - err + eps) / (err + eps))\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n    for (alpha, stump) in zip(alphas, stumps):\n        feat = stump['feature']\n        thresh = stump['threshold']\n        polarity = stump['polarity']\n        pred = np.ones(k)\n        if polarity == 1:\n            pred[X_test[:, feat] >= thresh] = -1\n        else:\n            pred[X_test[:, feat] < thresh] = -1\n        agg += alpha * pred\n    y_pred = np.sign(agg)\n    y_pred[y_pred == 0] = 1\n    return y_pred.astype(int).tolist()"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 266, "completion_id": 0, "solution": ""}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for j in range(n_features):\n        x_j = X[:, j]\n        thresholds = np.unique(x_j)\n        for theta in thresholds:\n            for polarity in (1, -1):\n                if polarity == 1:\n                    preds = np.where(x_j < theta, 1, -1)\n                else:\n                    preds = np.where(x_j < theta, -1, 1)\n                miss = preds != y\n                error = sample_weights[miss].sum()\n                if error < best_error:\n                    best_error = error\n                    best_feature = j\n                    best_threshold = theta\n                    best_polarity = polarity\n    return {'feature_index': int(best_feature), 'threshold': float(np.round(best_threshold, 4)), 'polarity': int(best_polarity), 'weighted_error': float(np.round(best_error, 4))}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    X = list(feature)\n    y = list(target)\n    n = len(y)\n    if n == 0:\n        return (None, 0.0)\n\n    def entropy(counts, total):\n        h = 0.0\n        for cnt in counts.values():\n            p = cnt / total\n            if p > 0.0:\n                h -= p * math.log2(p)\n        return h\n    total_counts = Counter(y)\n    H_parent = entropy(total_counts, n)\n    counts_per_value = {}\n    for (xi, yi) in zip(X, y):\n        if xi not in counts_per_value:\n            counts_per_value[xi] = Counter()\n        counts_per_value[xi][yi] += 1\n    distinct_vals = sorted(counts_per_value.keys())\n    if len(distinct_vals) < 2:\n        return (None, 0.0)\n    left_counts = Counter()\n    left_n = 0\n    right_counts = total_counts.copy()\n    right_n = n\n    best_ig = 0.0\n    best_t = None\n    for i in range(len(distinct_vals) - 1):\n        v = distinct_vals[i]\n        cnts_v = counts_per_value[v]\n        block_n = sum(cnts_v.values())\n        left_n += block_n\n        right_n -= block_n\n        for (cls, cnt) in cnts_v.items():\n            left_counts[cls] += cnt\n            right_counts[cls] -= cnt\n            if right_counts[cls] == 0:\n                del right_counts[cls]\n        t = (v + distinct_vals[i + 1]) / 2.0\n        H_left = entropy(left_counts, left_n)\n        H_right = entropy(right_counts, right_n)\n        ig = H_parent - left_n / n * H_left - right_n / n * H_right\n        if ig > best_ig:\n            best_ig = ig\n            best_t = t\n        elif ig == best_ig and best_ig > 0 and (t < best_t):\n            best_t = t\n    if best_t is None:\n        return (None, 0.0)\n    return (round(best_t, 4), round(best_ig, 4))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    out = np.zeros((N, C, H_out, W_out), dtype=X.dtype)\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n    pool_size = p_h * p_w\n    for i in range(H_out):\n        for j in range(W_out):\n            sh = i * s_h\n            sw = j * s_w\n            window = X[:, :, sh:sh + p_h, sw:sw + p_w]\n            out[:, :, i, j] = window.mean(axis=(2, 3))\n            grad = accum_grad[:, :, i, j] / pool_size\n            grad_input[:, :, sh:sh + p_h, sw:sw + p_w] += grad[:, :, None, None]\n    out_rounded = np.round(out, 4).tolist()\n    grad_in_rounded = np.round(grad_input, 4).tolist()\n    return (out_rounded, grad_in_rounded)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08, rtol=0)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08, rtol=0):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape (or the cutoff is out of bounds),\n        the function returns -1.\n    \"\"\"\n    try:\n        p1 = np.array(parent1, dtype=float)\n        p2 = np.array(parent2, dtype=float)\n    except Exception:\n        return -1\n    if p1.shape != p2.shape or p1.ndim != 2:\n        return -1\n    (n_rows, n_cols) = p1.shape\n    if not isinstance(cutoff, int) or cutoff < 0 or cutoff > n_cols:\n        return -1\n    c1 = np.empty_like(p1)\n    c2 = np.empty_like(p1)\n    if cutoff > 0:\n        c1[:, :cutoff] = p1[:, :cutoff]\n        c2[:, :cutoff] = p2[:, :cutoff]\n    if cutoff < n_cols:\n        c1[:, cutoff:] = p2[:, cutoff:]\n        c2[:, cutoff:] = p1[:, cutoff:]\n    return (c1.tolist(), c2.tolist())"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in G.get('_V2I', {})}\n    if not adj:\n        return {}\n    is_directed = G.get('is_directed', False)\n    graph_lists = G.get('_G', [])\n    if is_directed:\n        for edge_list in graph_lists:\n            for (u, v, w) in edge_list:\n                adj[u].append((v, w))\n    else:\n        seen = set()\n        for edge_list in graph_lists:\n            for (u, v, w) in edge_list:\n                key = (frozenset((u, v)), w)\n                if key not in seen:\n                    seen.add(key)\n                    adj[u].append((v, w))\n                    if u != v:\n                        adj[v].append((u, w))\n    for u in adj:\n        adj[u].sort(key=lambda pair: pair[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 298, "completion_id": 0, "solution": ""}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    diffs = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    dist = np.sqrt(np.sum(diffs ** 2, axis=2))\n    W = 1.0 / (1.0 + dist)\n    np.fill_diagonal(W, 0.0)\n    degree = np.sum(W, axis=1)\n    D = np.diag(degree)\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    E = eigvecs[:, :k]\n    centroids = E[:k, :].copy()\n    labels = np.zeros(n, dtype=int)\n    for iteration in range(100):\n        diff = E[:, np.newaxis, :] - centroids[np.newaxis, :, :]\n        dists = np.sqrt(np.sum(diff ** 2, axis=2))\n        new_labels = np.argmin(dists, axis=1)\n        if iteration > 0 and np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for ci in range(k):\n            members = E[labels == ci]\n            if members.shape[0] == 0:\n                rand_idx = np.random.randint(0, n)\n                centroids[ci] = E[rand_idx]\n            else:\n                centroids[ci] = np.mean(members, axis=0)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": ""}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1), dtype=float)\n        X = np.hstack((ones, X))\n    (N, M) = X.shape\n    mu_arr = np.asarray(mu)\n    if mu_arr.ndim == 0:\n        mu_vec = np.full(M, float(mu_arr))\n    else:\n        mu_vec = mu_arr.ravel().astype(float)\n        if mu_vec.shape[0] != M:\n            raise ValueError(f'Prior mean mu length {mu_vec.shape[0]} does not match number of features {M}')\n    if V is None:\n        V_mat = np.eye(M, dtype=float)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 0:\n            V_mat = V_arr * np.eye(M, dtype=float)\n        elif V_arr.ndim == 1:\n            if V_arr.shape[0] != M:\n                raise ValueError(f'Diagonal V length {V_arr.shape[0]} does not match number of features {M}')\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f'Full V shape {V_arr.shape} does not match ({M}, {M})')\n            V_mat = V_arr.copy()\n        else:\n            raise ValueError('Prior scale V must be None, scalar, 1-D or 2-D array')\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError('Prior covariance V is singular and not invertible')\n    XtX = X.T @ X\n    precision = V_inv + XtX\n    try:\n        Sigma_b = np.linalg.inv(precision)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError('Precision matrix is singular and not invertible')\n    Xty = X.T @ y\n    term = V_inv @ mu_vec + Xty\n    mu_b = Sigma_b @ term\n    mu_b_rounded = np.round(mu_b, 4)\n    return [float(val) for val in mu_b_rounded]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595.0 * np.log10(1.0 + f / 700.0)\n\n    def mel_to_hz(m):\n        return 700.0 * (10 ** (m / 2595.0) - 1.0)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    bin_count = N // 2 + 1\n    freqs = np.linspace(0, fs / 2, bin_count)\n    filterbank = np.zeros((n_filters, bin_count), dtype=float)\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        denom_left = f_center - f_left\n        denom_right = f_right - f_center\n        left_slope = (freqs - f_left) / denom_left\n        right_slope = (f_right - freqs) / denom_right\n        filt = np.maximum(0.0, np.minimum(left_slope, right_slope))\n        if normalize:\n            area_norm = 2.0 / (f_right - f_left)\n            filt *= area_norm\n        filterbank[i, :] = filt\n    fb_rounded = []\n    for i in range(n_filters):\n        row = [round(val, 4) for val in filterbank[i, :]]\n        fb_rounded.append(row)\n    return fb_rounded"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    length = window_len + 1 if not symmetric else window_len\n    N = length - 1\n    n = np.arange(length, dtype=float)\n    w = a0 - a1 * np.cos(2.0 * np.pi * n / N) + a2 * np.cos(4.0 * np.pi * n / N) - a3 * np.cos(6.0 * np.pi * n / N)\n    if not symmetric:\n        w = w[:-1]\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        result = 0.0\n        while x < 6.0:\n            result -= 1.0 / x\n            x += 1.0\n        inv = 1.0 / x\n        inv2 = inv * inv\n        inv4 = inv2 * inv2\n        inv6 = inv4 * inv2\n        return result + math.log(x) - 0.5 * inv - 1.0 / 12.0 * inv2 + 1.0 / 120.0 * inv4 - 1.0 / 252.0 * inv6\n    gamma_arr = np.asarray(gamma, dtype=float)\n    row = gamma_arr[d]\n    a_dt = row[t]\n    sum_row = row.sum()\n    val = digamma(a_dt) - digamma(sum_row)\n    return round(val, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        k = np.arange(0, N // 2 + 1)\n        freqs = k * df\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    freqs_rounded = np.round(freqs, 4)\n    return freqs_rounded.tolist()"}
{"task_id": 331, "completion_id": 0, "solution": ""}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counter = Counter()\n    for trans in transactions:\n        unique_items = set(trans)\n        item_counter.update(unique_items)\n    frequent_items = {item for (item, sup) in item_counter.items() if sup >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items, key=lambda item: (-item_counter[item], item))\n    order_lookup = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for trans in transactions:\n        filtered = set(trans) & frequent_items\n        if not filtered:\n            continue\n        ordered_trans = sorted(filtered, key=lambda item: order_lookup[item])\n        current_node = root\n        for item in ordered_trans:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            child = current_node['children'][item]\n            child['support'] += 1\n            current_node = child\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function sets\n        Y = X.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y\n        have incompatible shapes (different number of columns).\n        If X has zero rows (N=0), returns an empty list.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim == 1 and X_arr.size == 0:\n        return []\n    if X_arr.ndim != 2:\n        return -1\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n        if Y_arr.ndim != 2:\n            return -1\n    (N, Cx) = X_arr.shape\n    (M, Cy) = Y_arr.shape\n    if Cx != Cy:\n        return -1\n    if N == 0:\n        return []\n    K = X_arr.dot(Y_arr.T) + float(c0)\n    K = np.round(K, 4)\n    return K.tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards_arr = np.asarray(rewards)\n    N = theta_samples.shape[0]\n    k = int(retain_prcnt * N)\n    topk_indices = np.argsort(rewards_arr)[::-1][:k]\n    elite_samples = theta_samples[topk_indices, :]\n    mu = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0)\n    mu_rounded = np.round(mu, 4).tolist()\n    var_rounded = np.round(var, 4).tolist()\n    return (mu_rounded, var_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels_list = list(labels)\n    n = len(labels_list)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels_list)\n    H = 0.0\n    for cnt in counts.values():\n        p = cnt / n\n        H -= p * math.log2(p)\n    return round(H, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch) representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch) containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list obtained through .tolist().\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kR, kC, k_in_ch, out_ch) = W.shape\n    assert k_in_ch == in_ch, 'Input channels of X and W must match'\n    s = stride\n    d = dilation\n    eff_kR = kR + (kR - 1) * d\n    eff_kC = kC + (kC - 1) * d\n    if isinstance(pad, str) and pad.lower() == 'same':\n        pad_rows = max((in_rows - 1) * s + eff_kR - in_rows, 0)\n        pad_cols = max((in_cols - 1) * s + eff_kC - in_cols, 0)\n        pr_top = pad_rows // 2\n        pr_bot = pad_rows - pr_top\n        pc_left = pad_cols // 2\n        pc_right = pad_cols - pc_left\n    elif isinstance(pad, int):\n        pr_top = pr_bot = pad\n        pc_left = pc_right = pad\n    elif len(pad) == 2:\n        pr_top = pr_bot = pad[0]\n        pc_left = pc_right = pad[1]\n    elif len(pad) == 4:\n        (pr_top, pr_bot, pc_left, pc_right) = pad\n    else:\n        raise ValueError('Invalid pad specification')\n    X_pad = np.pad(X, ((0, 0), (pr_top, pr_bot), (pc_left, pc_right), (0, 0)), mode='constant', constant_values=0)\n    H_pad = in_rows + pr_top + pr_bot\n    W_pad = in_cols + pc_left + pc_right\n    out_rows = (H_pad - eff_kR) // s + 1\n    out_cols = (W_pad - eff_kC) // s + 1\n    row_offsets = np.repeat(np.arange(kR) * (d + 1), kC)\n    col_offsets = np.tile(np.arange(kC) * (d + 1), kR)\n    out_row_positions = np.arange(0, H_pad - eff_kR + 1, s)\n    out_col_positions = np.arange(0, W_pad - eff_kC + 1, s)\n    rows_idx = row_offsets[:, None, None] + out_row_positions[None, :, None]\n    cols_idx = col_offsets[:, None, None] + out_col_positions[None, None, :]\n    Xp = X_pad.transpose(0, 3, 1, 2)\n    X_cols = Xp[:, :, rows_idx, cols_idx]\n    X_cols = X_cols.transpose(0, 3, 4, 1, 2)\n    NOL = n_ex * out_rows * out_cols\n    X_matrix = X_cols.reshape(NOL, in_ch * (kR * kC))\n    W_col = W.transpose(2, 0, 1, 3).reshape(in_ch * (kR * kC), out_ch)\n    out_matrix = X_matrix.dot(W_col)\n    out = out_matrix.reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    X = np.asarray(data, dtype=float)\n    (n_samples, n_features) = X.shape\n    mean = X.mean(axis=0)\n    X_centered = X - mean\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(X_centered, full_matrices=False)\n        eigvals = S ** 2 / (n_samples - 1)\n        directions = Vt.T\n    elif solver == 'eigen':\n        cov = X_centered.T @ X_centered / (n_samples - 1)\n        (eigvals_all, eigvecs_all) = np.linalg.eigh(cov)\n        idx = np.argsort(eigvals_all)[::-1]\n        eigvals = eigvals_all[idx]\n        directions = eigvecs_all[:, idx]\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n    k_available = eigvals.shape[0]\n    k = min(n_components, k_available)\n    eigvals_sel = eigvals[:k]\n    directions_sel = directions[:, :k]\n    scores = X_centered @ directions_sel\n    tol = 1e-12\n    for j in range(k):\n        col = directions_sel[:, j]\n        for i in range(n_features):\n            if abs(col[i]) > tol:\n                if col[i] < 0:\n                    directions_sel[:, j] = -directions_sel[:, j]\n                    scores[:, j] = -scores[:, j]\n                break\n    total_var = eigvals.sum()\n    explained_variance_ratio = eigvals_sel / total_var\n    scores_rounded = np.round(scores, 4).tolist()\n    evr_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, evr_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = leaf.value\n        idx = max(range(len(probs)), key=probs.__getitem__)\n        return int(idx)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].astype(float, copy=True)\n    tol = 1e-06\n    for _ in range(max_iters):\n        diffs = data[:, None, :] - centroids[None, :, :]\n        dists_sq = np.sum(diffs * diffs, axis=2)\n        assignments = np.argmin(dists_sq, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(K):\n            pts = data[assignments == j]\n            if pts.shape[0] > 0:\n                new_centroids[j] = pts.mean(axis=0)\n        shift = np.abs(new_centroids - centroids).max()\n        centroids = new_centroids\n        if shift <= tol:\n            break\n    centroids_rounded = np.round(centroids, 4).tolist()\n    centroids_rounded.sort()\n    return centroids_rounded"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    if arr.ndim != 2:\n        raise ValueError('Input must be a 2-D structure')\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized = arr / row_sums[:, np.newaxis]\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def _check(space: Space, is_composite: bool) -> bool:\n        if not is_composite:\n            return isinstance(space, Box)\n        if isinstance(space, Tuple):\n            subs = space.spaces\n        elif isinstance(space, Dict):\n            subs = space.spaces.values()\n        else:\n            return isinstance(space, Box)\n        return all((isinstance(sub, Box) for sub in subs))\n    cont_action = _check(env.action_space, tuple_action)\n    cont_obs = _check(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The 'updates' list must contain at least one array.\")\n    running_pred = np.zeros_like(updates[0], dtype=float)\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        row_max = np.max(running_pred, axis=1, keepdims=True)\n        exp_shifted = np.exp(running_pred - row_max)\n        probs = exp_shifted / np.sum(exp_shifted, axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It returns\n    the output volume as a list via ndarray.tolist().\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\"\n        dilation: non-negative integer, number of zeros inserted between\n                  neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if not isinstance(X, np.ndarray) or X.ndim != 3:\n        raise ValueError('X must be a 3D numpy array of shape (n, L, in_channels).')\n    if not isinstance(W, np.ndarray) or W.ndim != 3:\n        raise ValueError('W must be a 3D numpy array of shape (kernel_width, in_channels, out_channels).')\n    if not (isinstance(stride, int) and stride > 0):\n        raise ValueError('stride must be a positive integer.')\n    if not (isinstance(dilation, int) and dilation >= 0):\n        raise ValueError('dilation must be a non-negative integer.')\n    (n_examples, L, in_ch) = X.shape\n    (kw, in_ch_W, out_ch) = W.shape\n    if in_ch_W != in_ch:\n        raise ValueError('The in_channels dimension of W must match X.')\n    step = dilation + 1\n    effective_kernel = (kw - 1) * step + 1\n    if isinstance(pad, str):\n        if pad.lower() != 'same':\n            raise ValueError('pad string must be \"same\"')\n        out_len = math.ceil(L / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - L)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    elif isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif (isinstance(pad, tuple) or isinstance(pad, list)) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    else:\n        raise ValueError(\"pad must be int, 2-tuple, or 'same'\")\n    X_padded = np.pad(X, pad_width=((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    L_padded = X_padded.shape[1]\n    if not (isinstance(pad, str) and pad.lower() == 'same'):\n        out_len = (L_padded - effective_kernel) // stride + 1\n        if out_len < 0:\n            out_len = 0\n    Y = np.zeros((n_examples, out_len, out_ch), dtype=X.dtype)\n    for n in range(n_examples):\n        for t in range(out_len):\n            start = t * stride\n            for k in range(kw):\n                idx = start + k * step\n                x_slice = X_padded[n, idx, :]\n                Y[n, t, :] += x_slice.dot(W[k, :, :])\n    return Y.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    - X: Feature matrix of shape (m, n)\n    - y: Target vector of shape (m,)\n    - learning_rate: Step size for gradient descent\n    - n_iterations: Number of iterations to run gradient descent\n\n    Returns:\n    - (weights_list, bias) where:\n      * weights_list is a list of n floats (\u03b8 rounded to 4 decimals)\n      * bias is a float (b rounded to 4 decimals)\n    - If X and y have incompatible sample sizes, returns -1\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y).flatten()\n    if X.ndim != 2:\n        return -1\n    (m, n) = X.shape\n    if y.shape[0] != m or m == 0:\n        return -1\n    theta = np.zeros(n, dtype=float)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b\n        errors = y_hat - y\n        dw = 2.0 / m * X.T.dot(errors)\n        db = 2.0 / m * errors.sum()\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (theta_rounded, b_rounded)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose,\n    up to a tolerance for floating\u2010point comparisons.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    try:\n        arr = np.array(X, dtype=float)\n    except (ValueError, TypeError):\n        return False\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n    return bool(np.allclose(arr, arr.T, atol=1e-08, rtol=0.0))"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for the logistic (binomial deviance) loss used in\n    gradient boosting for binary classification.\n\n    Parameters\n    ----------\n    y : list of int\n        True binary labels, each element must be 0 or 1.\n    f : list of float\n        Current prediction scores for each sample (real-valued).\n\n    Returns\n    -------\n    List[float]\n        The negative gradient g_i for each sample, rounded to 4 decimal places.\n        If `y` contains values other than 0 or 1, returns -1.\n\n    Notes\n    -----\n    Internally, labels y_i are converted to y'_i = 2*y_i - 1 in {-1, +1}, and the\n    logistic loss is\n        L(y', f) = log(1 + exp(-2 * y' * f))\n    Its negative gradient w.r.t. f is\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n    \"\"\"\n    y_arr = np.array(y)\n    f_arr = np.array(f, dtype=float)\n    unique_labels = np.unique(y_arr)\n    if not set(unique_labels).issubset({0, 1}):\n        return -1\n    y_prime = 2 * y_arr - 1\n    denom = 1.0 + np.exp(y_prime * f_arr)\n    gradients = y_prime / denom\n    return np.round(gradients, 4).tolist()"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 387, "completion_id": 0, "solution": ""}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True, return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    if not derivative:\n        out = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1.0))\n    else:\n        neg_elu = alpha * (np.exp(x_arr) - 1.0)\n        out = np.where(x_arr >= 0, 1.0, neg_elu + alpha)\n    return np.round(out, 4).tolist()"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\nimport numbers"}
{"task_id": 413, "completion_id": 0, "solution": ""}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    Returns the MAP predictive mean for each row in X_new, rounded to 4 decimals.\n    \"\"\"\n    if fit_intercept:\n        ones_train = np.ones((X.shape[0], 1))\n        X = np.hstack((ones_train, X))\n        ones_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack((ones_new, X_new))\n    M = X.shape[1]\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    else:\n        V_arr = np.array(V)\n        if V_arr.ndim == 1:\n            if V_arr.shape[0] != M:\n                raise ValueError(f'Length of V ({V_arr.shape[0]}) != number of features ({M})')\n            V_inv = np.diag(1.0 / V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f'Shape of V {V_arr.shape} != ({M},{M})')\n            V_inv = np.linalg.inv(V_arr)\n        else:\n            raise ValueError('V must be scalar, 1D array or 2D square matrix')\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu, dtype=float)\n    else:\n        mu_arr = np.array(mu, dtype=float)\n        if mu_arr.ndim != 1 or mu_arr.shape[0] != M:\n            raise ValueError(f'mu must be scalar or length-{M} vector')\n        mu_vec = mu_arr\n    A = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(A)\n    b = V_inv @ mu_vec + X.T @ y\n    mu_p = Sigma_p @ b\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    for (a, p) in zip(actual, predicted):\n        if not (isinstance(a, (int, float)) and isinstance(p, (int, float))):\n            return -1\n        if a < 0 or p < 0:\n            return -1\n    act_arr = np.array(actual, dtype=float)\n    pred_arr = np.array(predicted, dtype=float)\n    log_diff = np.log1p(pred_arr) - np.log1p(act_arr)\n    msle = np.mean(log_diff ** 2)\n    rmsle = np.sqrt(msle)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len if symmetric else window_len + 1\n    denom = N - 1\n    window = []\n    for n in range(N):\n        val = 0.5 - 0.5 * math.cos(2 * math.pi * n / denom)\n        window.append(round(val, 4))\n    if not symmetric:\n        window = window[:-1]\n    return list(window)"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = float(kernel_height * kernel_width)\n        fan_in = float(in_channels) * receptive_field_size\n        fan_out = float(out_channels) * receptive_field_size\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value is rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    m = y_arr.shape[0]\n    y_mean = y_arr.mean() if m > 0 else 0.0\n    if n_estimators <= 0 or learning_rate == 0.0:\n        return [round(y_mean, 4)] * m\n    y_pred = np.full(m, y_mean, dtype=float)\n    ones = np.ones((m, 1), dtype=float)\n    X_design = np.hstack((ones, X_arr))\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        beta = np.linalg.pinv(X_design).dot(residuals)\n        h = X_design.dot(beta)\n        y_pred += learning_rate * h\n    y_pred_rounded = np.round(y_pred, 4)\n    return y_pred_rounded.tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    is_scalar = isinstance(x, (int, float))\n    arr = np.array(x, dtype=float)\n    sigma = 1.0 / (1.0 + np.exp(-arr))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1.0 - sigma)\n    else:\n        result = sigma * (1.0 - sigma) * (1.0 - 2.0 * sigma)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y_arr = np.asarray(y, dtype=int).ravel()\n    if y_arr.size == 0:\n        return []\n    if np.any(y_arr < 0):\n        raise ValueError('Class indices must be non-negative integers.')\n    max_label = int(y_arr.max())\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    one_hot = np.zeros((y_arr.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y_arr.shape[0]), y_arr] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    n_trans = len(transactions)\n    if n_trans == 0:\n        return []\n    tsets = [set(t) for t in transactions]\n    item_counts = {}\n    for t in tsets:\n        for item in t:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    L1 = []\n    for (item, cnt) in item_counts.items():\n        if cnt / n_trans >= min_sup:\n            L1.append((item,))\n    L1 = sorted(L1)\n    frequent_itemsets = L1.copy()\n    L_prev = L1\n    k = 2\n    while L_prev:\n        Ck = []\n        len_prev = len(L_prev)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                a = L_prev[i]\n                b = L_prev[j]\n                if a[:k - 2] == b[:k - 2]:\n                    cand = tuple(sorted(set(a) | set(b)))\n                    if len(cand) == k:\n                        Ck.append(cand)\n        Ck = sorted(set(Ck))\n        L_prev_set = set(L_prev)\n        pruned = []\n        for cand in Ck:\n            all_subsets_frequent = True\n            for subset in itertools.combinations(cand, k - 1):\n                if subset not in L_prev_set:\n                    all_subsets_frequent = False\n                    break\n            if all_subsets_frequent:\n                pruned.append(cand)\n        Ck = pruned\n        counts = {cand: 0 for cand in Ck}\n        for t in tsets:\n            for cand in Ck:\n                if set(cand) <= t:\n                    counts[cand] += 1\n        Lk = []\n        for (cand, cnt) in counts.items():\n            if cnt / n_trans >= min_sup:\n                Lk.append(cand)\n        if not Lk:\n            break\n        Lk = sorted(Lk)\n        frequent_itemsets.extend(Lk)\n        L_prev = Lk\n        k += 1\n    return frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef aggregate_predictions(predictions: List[List[List[float]]]) -> Tuple[List[List[float]], List[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    arr = np.array(predictions, dtype=float)\n    if arr.ndim != 3:\n        raise ValueError(f'Expected a 3D list, got array with shape {arr.shape}')\n    (n_estimators, n_samples, n_classes) = arr.shape\n    avg_probs = arr.mean(axis=0)\n    avg_probs_rounded = np.round(avg_probs, 4)\n    preds = np.argmax(avg_probs_rounded, axis=1)\n    avg_probs_list = avg_probs_rounded.tolist()\n    preds_list = preds.tolist()\n    return (avg_probs_list, preds_list)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications:\n    - X: N\u00d7C list of vectors\n    - Y: M\u00d7C list of vectors (if None, Y = X)\n    - sigma: float (isotropic), list of C floats (anisotropic), or None\n             (defaults to sqrt(C/2))\n    Returns:\n    - Nested Python list of shape N\u00d7M of kernel values rounded to 4 decimals\n    - Or -1 on invalid input\n    \"\"\"\n    if not isinstance(X, list) or len(X) == 0:\n        return -1\n    N = len(X)\n    try:\n        C = len(X[0])\n    except Exception:\n        return -1\n    if C == 0:\n        return -1\n    for row in X:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n    if Y is None:\n        Y = X\n    if not isinstance(Y, list) or len(Y) == 0:\n        return -1\n    M = len(Y)\n    for row in Y:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n    if sigma is None:\n        sigma_arr = np.full((C,), np.sqrt(C / 2.0), dtype=float)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full((C,), float(sigma), dtype=float)\n    elif isinstance(sigma, (list, tuple, np.ndarray)):\n        if len(sigma) != C:\n            return -1\n        try:\n            sigma_arr = np.array(sigma, dtype=float)\n        except Exception:\n            return -1\n        if np.any(sigma_arr <= 0):\n            return -1\n    else:\n        return -1\n    try:\n        X_np = np.array(X, dtype=float)\n        Y_np = np.array(Y, dtype=float)\n    except Exception:\n        return -1\n    Xs = X_np / sigma_arr\n    Ys = Y_np / sigma_arr\n    x_norm2 = np.sum(Xs * Xs, axis=1)\n    y_norm2 = np.sum(Ys * Ys, axis=1)\n    cross_term = Xs.dot(Ys.T)\n    d2 = x_norm2[:, None] + y_norm2[None, :] - 2.0 * cross_term\n    d2 = np.maximum(d2, 0.0)\n    K = np.exp(-0.5 * d2)\n    K_round = np.round(K, 4)\n    return K_round.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=int)\n    (n_samples, n_features) = X_arr.shape\n\n    def entropy(labels: np.ndarray) -> float:\n        if labels.size == 0:\n            return 0.0\n        (vals, counts) = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels: np.ndarray) -> int:\n        (vals, counts) = np.unique(labels, return_counts=True)\n        max_count = counts.max()\n        candidates = vals[counts == max_count]\n        return int(candidates.min())\n    H_parent = entropy(y_arr)\n    best_gain = 0.0\n    best_feature = -1\n    best_threshold = None\n    for j in range(n_features):\n        col = X_arr[:, j]\n        uniq_vals = np.unique(col)\n        if uniq_vals.size < 2:\n            continue\n        thresholds = (uniq_vals[:-1] + uniq_vals[1:]) / 2.0\n        for t in thresholds:\n            left_mask = col <= t\n            right_mask = ~left_mask\n            n_left = left_mask.sum()\n            n_right = right_mask.sum()\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y_arr[left_mask]\n            y_right = y_arr[right_mask]\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = t\n            elif np.isclose(gain, best_gain) and gain > 0:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                elif j == best_feature and t < best_threshold:\n                    best_threshold = t\n    if best_feature == -1:\n        maj = majority_label(y_arr)\n        return (-1, None, maj, maj)\n    t_rounded = round(best_threshold, 4)\n    col_best = X_arr[:, best_feature]\n    left_mask = col_best <= best_threshold\n    right_mask = ~left_mask\n    left_maj = majority_label(y_arr[left_mask])\n    right_maj = majority_label(y_arr[right_mask])\n    return (best_feature, t_rounded, left_maj, right_maj)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list of lists or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list [subset1, subset2], each a regular Python list of samples.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        samples = X.tolist()\n    else:\n        samples = X\n    is_numeric = isinstance(threshold, (int, float))\n    subset1 = []\n    subset2 = []\n    for sample in samples:\n        val = sample[feature_i]\n        if is_numeric:\n            if val >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif val == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not isinstance(gamma, (float, int)) or gamma < 0 or gamma > 1:\n        return -1\n    if not isinstance(Q, np.ndarray) or not isinstance(Q_next, np.ndarray):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    y = Q.copy().astype(float)\n    for i in range(batch_size):\n        a = actions[i]\n        if not 0 <= a < n_actions:\n            return -1\n        r = rewards[i]\n        done = dones[i]\n        if done:\n            target = r\n        else:\n            target = r + gamma * np.max(Q_next[i])\n        y[i, a] = target\n    y = np.round(y, 4)\n    return y.tolist()"}
{"task_id": 458, "completion_id": 0, "solution": ""}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n_samples = y_arr.shape[0]\n    if n_estimators <= 0:\n        init_pred = np.full(n_samples, y_arr.mean())\n        return np.round(init_pred, 4).tolist()\n    y_pred = np.full(n_samples, y_arr.mean())\n    unique_vals = np.unique(x_arr)\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        if np.all(residuals == 0):\n            break\n        best_sse = None\n        best_t = None\n        best_vL = None\n        best_vR = None\n        for t in unique_vals[:-1]:\n            left_mask = x_arr <= t\n            right_mask = ~left_mask\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            r_left = residuals[left_mask]\n            r_right = residuals[right_mask]\n            vL = r_left.mean()\n            vR = r_right.mean()\n            sse_left = ((r_left - vL) ** 2).sum()\n            sse_right = ((r_right - vR) ** 2).sum()\n            sse = sse_left + sse_right\n            if best_sse is None or sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_sse is None:\n            const_pred = residuals.mean()\n            stump_pred = np.full(n_samples, const_pred)\n        else:\n            stump_pred = np.where(x_arr <= best_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    new_q = [row.copy() for row in q_table]\n    old_value = new_q[state][action]\n    if next_state is None:\n        expected_q = 0.0\n    else:\n        row = new_q[next_state]\n        n_actions = len(row)\n        greedy_idx = int(np.argmax(row))\n        expected_q = 0.0\n        for (a_idx, qval) in enumerate(row):\n            if a_idx == greedy_idx:\n                prob = 1 - epsilon + epsilon / n_actions\n            else:\n                prob = epsilon / n_actions\n            expected_q += prob * qval\n    target = reward + gamma * expected_q\n    new_q[state][action] = old_value + lr * (target - old_value)\n    rounded_q = [[round(val, 4) for val in row] for row in new_q]\n    return rounded_q"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If any label is negative, not an integer, or\n                    not less than num_classes (when num_classes is provided).\n    \"\"\"\n    y_arr = np.array(y, copy=False)\n    if y_arr.ndim != 1:\n        raise ValueError(f'y must be a 1-D array or sequence, got array with shape {y_arr.shape}')\n    n = y_arr.shape[0]\n    if n == 0:\n        if num_classes is None:\n            num_classes = 0\n        return np.zeros((0, num_classes), dtype=int)\n    if not np.issubdtype(y_arr.dtype, np.integer):\n        if np.issubdtype(y_arr.dtype, np.floating) and np.all(np.floor(y_arr) == y_arr):\n            y_arr = y_arr.astype(int)\n        else:\n            raise ValueError('y must contain integer values only')\n    if np.any(y_arr < 0):\n        raise ValueError('All labels must be non-negative')\n    if num_classes is None:\n        num_classes = int(y_arr.max()) + 1\n    elif not isinstance(num_classes, int) or num_classes <= 0:\n        raise ValueError('num_classes must be a positive integer or None')\n    if np.any(y_arr >= num_classes):\n        raise ValueError('All labels must be less than num_classes')\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    rows = np.arange(n)\n    one_hot[rows, y_arr] = 1\n    return one_hot"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    arr = np.asarray(x)\n    if arr.ndim != 1:\n        raise ValueError('Input must be one-dimensional')\n    if arr.size == 0:\n        return []\n    diag_mat = np.diag(arr)\n    return diag_mat.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "import itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    freq = {item: cnt for (item, cnt) in freq.items() if cnt >= min_sup}\n    if not freq:\n        return []\n\n    class Node:\n        __slots__ = ('item', 'count', 'parent', 'children', 'link')\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n    header = {item: [cnt, None, None] for (item, cnt) in freq.items()}\n    root = Node(None, 0, None)\n\n    def insert_tree(items, node, count):\n        \"\"\"Insert a sorted list of items into the FP-tree rooted at node.\"\"\"\n        if not items:\n            return\n        first = items[0]\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = Node(first, count, node)\n            node.children[first] = child\n            h = header[first]\n            if h[1] is None:\n                h[1] = child\n                h[2] = child\n            else:\n                h[2].link = child\n                h[2] = child\n        insert_tree(items[1:], child, count)\n    for t in transactions:\n        filtered = [i for i in t if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=lambda x: (-freq[x], x))\n        insert_tree(ordered, root, 1)\n    patterns = set()\n\n    def mine_tree(header_table, prefix):\n        \"\"\"\n        Recursively mine the FP-tree whose header table is header_table,\n        using prefix as the suffix-root so far.\n        \"\"\"\n        items = sorted(header_table.items(), key=lambda kv: (kv[1][0], kv[0]))\n        for (item, (item_support, head, tail)) in items:\n            new_pat = tuple(sorted(prefix + (item,)))\n            patterns.add(new_pat)\n            cond_patterns = []\n            node = head\n            while node:\n                cnt = node.count\n                path = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                if path:\n                    cond_patterns.append((path, cnt))\n                node = node.link\n            cond_freq = Counter()\n            for (path, cnt) in cond_patterns:\n                cond_freq.update({itm: cnt for itm in path})\n            cond_freq = {itm: c for (itm, c) in cond_freq.items() if c >= min_sup}\n            if not cond_freq:\n                continue\n            cond_header = {itm: [c, None, None] for (itm, c) in cond_freq.items()}\n            cond_root = Node(None, 0, None)\n\n            def insert_cond(items, node, count):\n                if not items:\n                    return\n                first = items[0]\n                if first in node.children:\n                    child = node.children[first]\n                    child.count += count\n                else:\n                    child = Node(first, count, node)\n                    node.children[first] = child\n                    h = cond_header[first]\n                    if h[1] is None:\n                        h[1] = child\n                        h[2] = child\n                    else:\n                        h[2].link = child\n                        h[2] = child\n                insert_cond(items[1:], child, count)\n            for (path, cnt) in cond_patterns:\n                filtered = [i for i in path if i in cond_freq]\n                if not filtered:\n                    continue\n                ordered = sorted(filtered, key=lambda x: (-cond_freq[x], x))\n                insert_cond(ordered, cond_root, cnt)\n\n            def is_single_path(node):\n                if len(node.children) > 1:\n                    return False\n                if not node.children:\n                    return True\n                child = next(iter(node.children.values()))\n                return is_single_path(child)\n            if is_single_path(cond_root):\n                single_path = []\n                cur = cond_root\n                while len(cur.children) == 1:\n                    cur = next(iter(cur.children.values()))\n                    single_path.append(cur.item)\n                for r in range(1, len(single_path) + 1):\n                    for comb in itertools.combinations(single_path, r):\n                        newset = tuple(sorted(prefix + (item,) + comb))\n                        patterns.add(newset)\n            else:\n                mine_tree(cond_header, prefix + (item,))\n    mine_tree(header, ())\n    result = sorted(patterns, key=lambda t: (len(t), t))\n    return result"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X_arr = np.array(X, dtype=float)\n    (n_samples, n_features) = X_arr.shape\n    all_combos = []\n    for total_deg in range(degree + 1):\n        for combo in combinations_with_replacement(range(n_features), total_deg):\n            all_combos.append(combo)\n    feature_cols = [np.prod(X_arr[:, combo], axis=1) for combo in all_combos]\n    poly_matrix = np.stack(feature_cols, axis=1)\n    return poly_matrix.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values (or a scalar).\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(x, dtype=float, copy=False)\n    arr = np.atleast_1d(arr)\n    y = slope * arr + intercept\n    grad = np.full_like(arr, slope, dtype=float)\n    grad2 = np.zeros_like(arr, dtype=float)\n    y_rounded = [round(float(v), 4) for v in y]\n    grad_rounded = [round(float(v), 4) for v in grad]\n    grad2_rounded = [round(float(v), 4) for v in grad2]\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('data must be a 2-D array')\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    vars_ = np.var(data, axis=0)\n    denom = np.sqrt(vars_)\n    denom[denom == 0] = 1.0\n    X_centered = data - means\n    X_std = X_centered / denom\n    cov = X_std.T @ X_std / (n_samples - 1)\n    (eigvals, eigvecs) = np.linalg.eigh(cov)\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n    for j in range(eigvecs.shape[1]):\n        vec = eigvecs[:, j]\n        max_idx = np.argmax(np.abs(vec))\n        if vec[max_idx] < 0:\n            eigvecs[:, j] = -vec\n    top_vecs = eigvecs[:, :k]\n    projected = X_std @ top_vecs\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 505, "completion_id": 0, "solution": ""}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\ndef chebyshev(x: Union[list[float], 'np.ndarray'], y: Union[list[float], 'np.ndarray']) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors x and y must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    try:\n        len_x = len(x)\n        len_y = len(y)\n    except Exception:\n        x = np.asarray(x).ravel()\n        y = np.asarray(y).ravel()\n        len_x = x.shape[0]\n        len_y = y.shape[0]\n    if len_x != len_y:\n        return -1\n    if isinstance(x, np.ndarray):\n        x_iter = x.ravel()\n    else:\n        x_iter = x\n    if isinstance(y, np.ndarray):\n        y_iter = y.ravel()\n    else:\n        y_iter = y\n    if len_x == 0:\n        return 0.0\n    max_diff = max((abs(a - b) for (a, b) in zip(x_iter, y_iter)))\n    return float(round(max_diff, 4))"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as y.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as t_mean.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1.0 - eps)\n    recon = -(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    recon_loss = np.sum(recon)\n    kl = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    batch_size = y.shape[0]\n    total_loss = (recon_loss + kl) / batch_size\n    return round(float(total_loss), 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    w_arr = np.array(w, dtype=float)\n    V_arr = np.array(V, dtype=float)\n    linear_term = X_arr.dot(w_arr)\n    XV = X_arr.dot(V_arr)\n    sum_squared = np.sum(XV * XV, axis=1)\n    X_squared = X_arr * X_arr\n    V_squared = V_arr * V_arr\n    squared_sum = np.sum(X_squared.dot(V_squared), axis=1)\n    interaction_term = 0.5 * (sum_squared - squared_sum)\n    y = w0 + linear_term + interaction_term\n    y_rounded = np.round(y, 4).tolist()\n    return y_rounded"}
{"task_id": 517, "completion_id": 0, "solution": ""}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float, nested list, or ndarray) with each value\n        replaced by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        if len(z) == 0:\n            return []\n        return [sigmoid_grad(elem) for elem in z]\n    else:\n        grad_val = z * (1 - z)\n        return float(np.round(grad_val, 4))"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim != 2 or X_arr.shape[1] != 2:\n        raise ValueError('X must be a list of [x1, x2] pairs.')\n    (w1, w2) = W\n    (x1_min, x1_max) = (X_arr[:, 0].min(), X_arr[:, 0].max())\n    (x2_min, x2_max) = (X_arr[:, 1].min(), X_arr[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1_grid, X2_grid) = np.meshgrid(x1_plot, x2_plot)\n    scores = w1 * X1_grid + w2 * X2_grid + b\n    labels = np.where(scores >= 0, 1, -1).astype(int)\n    return labels.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": ""}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm and returns the\n    resulting vector rounded to four decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n                    - pi: 1D array of shape (N,) initial state distribution\n                    - A:  2D array of shape (N, N) state transition matrix\n                    - B:  2D array of shape (N, M) emission probability matrix\n        observations (list[int]): Sequence of observation indices (each in [0, M-1]).\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t,\n                     rounded to 4 decimal places. Empty list if t is out of range.\n    \"\"\"\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    pi = np.array(hmm['pi'], dtype=float)\n    A = np.array(hmm['A'], dtype=float)\n    B = np.array(hmm['B'], dtype=float)\n    N = pi.shape[0]\n    alpha = np.zeros((T, N), dtype=float)\n    o0 = observations[0]\n    alpha[0, :] = pi * B[:, o0]\n    for u in range(1, T):\n        o_u = observations[u]\n        alpha[u, :] = (alpha[u - 1, :].reshape(-1, 1) * A).sum(axis=0) * B[:, o_u]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for u in range(T - 2, -1, -1):\n        o_next = observations[u + 1]\n        beta[u, :] = (A * (B[:, o_next] * beta[u + 1, :])).sum(axis=1)\n    numer = alpha[t, :] * beta[t, :]\n    denom = numer.sum()\n    gamma_t = numer / denom\n    gamma_rounded = np.round(gamma_t, 4).tolist()\n    return gamma_rounded"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff ** 2, axis=2))\n    neighborhoods = [list(np.where(dist_matrix[i] <= eps)[0]) for i in range(n_samples)]\n    is_core = np.array([len(neigh) >= min_samples for neigh in neighborhoods])\n    labels = np.zeros(n_samples, dtype=int)\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue\n        if not is_core[i]:\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque([i])\n        while queue:\n            point = queue.popleft()\n            for neighbor in neighborhoods[point]:\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if is_core[neighbor]:\n                        queue.append(neighbor)\n    labels[labels == 0] = -1\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fit a Gaussian Mixture Model (GMM) with k components to the data using the\n    Expectation\u2013Maximization (EM) algorithm, then return hard cluster assignments.\n    \n    Parameters\n    ----------\n    data : np.ndarray, shape (N, D)\n        The input data: N samples with D features each.\n    k : int\n        The number of Gaussian components (clusters).\n    max_iter : int\n        Maximum number of EM iterations.\n    epsilon : float\n        Convergence threshold on the change in mixture weights.\n    \n    Returns\n    -------\n    labels : list[int], length N\n        Hard cluster assignments (0 through k-1) for each sample.\n        If k==1, returns all zeros.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    rng = np.random.RandomState(0)\n    resp = rng.rand(N, k)\n    resp = resp / resp.sum(axis=1, keepdims=True)\n\n    def m_step(resp):\n        \"\"\"Given resp (N x k), compute pi (k,), means (k x D), covs (k x D x D).\"\"\"\n        Nk = resp.sum(axis=0)\n        pi = Nk / N\n        means = resp.T @ data / Nk[:, None]\n        covs = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - means[j]\n            w = resp[:, j][:, None]\n            covs[j] = (w * diff).T @ diff / Nk[j]\n            covs[j] += np.eye(D) * 1e-06\n        return (pi, means, covs)\n    (pi, means, covs) = m_step(resp)\n    resp = np.zeros((N, k))\n    const_coeff = (2 * math.pi) ** (-D / 2)\n    for iteration in range(max_iter):\n        pi_old = pi.copy()\n        for j in range(k):\n            cov_j = covs[j]\n            inv_cov = np.linalg.inv(cov_j)\n            det_cov = np.linalg.det(cov_j)\n            coef = const_coeff * det_cov ** (-0.5)\n            diff = data - means[j]\n            exponent = -0.5 * np.sum(diff @ inv_cov * diff, axis=1)\n            pdf = coef * np.exp(exponent)\n            resp[:, j] = pi[j] * pdf\n        row_sums = resp.sum(axis=1, keepdims=True)\n        row_sums[row_sums == 0] = np.finfo(float).eps\n        resp /= row_sums\n        (pi, means, covs) = m_step(resp)\n        if np.max(np.abs(pi - pi_old)) < epsilon:\n            break\n    hard_labels = np.argmax(resp, axis=1)\n    order = np.argsort(means[:, 0])\n    new_label = np.empty(k, dtype=int)\n    for (new_idx, old_idx) in enumerate(order):\n        new_label[old_idx] = new_idx\n    final_labels = [int(new_label[lab]) for lab in hard_labels]\n    return final_labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    if n_cluster <= 0:\n        raise ValueError('n_cluster must be >= 1')\n    if n_cluster == 1:\n        return [0] * N\n    sq_norms = np.sum(data * data, axis=1)\n    dist2 = sq_norms[:, None] + sq_norms[None, :] - 2.0 * data.dot(data.T)\n    dist2 = np.maximum(dist2, 0.0)\n    W = np.exp(-gamma * dist2)\n    np.fill_diagonal(W, 0.0)\n    degrees = np.sum(W, axis=1)\n    D = np.diag(degrees)\n    L = D - W\n    if method == 'normalized':\n        with np.errstate(divide='ignore'):\n            d_inv_sqrt = 1.0 / np.sqrt(degrees)\n        d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0\n        D_inv_sqrt = np.diag(d_inv_sqrt)\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    elif method != 'unnormalized':\n        raise ValueError(\"method must be 'unnormalized' or 'normalized'\")\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    U = eigvecs[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1)\n        nonzero = row_norms > 0\n        U[nonzero] = U[nonzero] / row_norms[nonzero, None]\n    X = U.copy()\n    K = n_cluster\n    centroids = X[:K].copy()\n    labels = np.full(N, -1, dtype=int)\n    for _ in range(100):\n        X_sq = np.sum(X * X, axis=1).reshape(-1, 1)\n        C_sq = np.sum(centroids * centroids, axis=1).reshape(1, -1)\n        d2 = X_sq + C_sq - 2.0 * X.dot(centroids.T)\n        new_labels = np.argmin(d2, axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for j in range(K):\n            members = X[labels == j]\n            if len(members) > 0:\n                centroids[j] = np.mean(members, axis=0)\n    min_idx = []\n    for j in range(K):\n        idxs = np.where(labels == j)[0]\n        if idxs.size > 0:\n            min_idx.append((j, idxs.min()))\n        else:\n            min_idx.append((j, N + j))\n    min_idx.sort(key=lambda x: x[1])\n    new_label_map = {old: new for (new, (old, _)) in enumerate(min_idx)}\n    final_labels = [new_label_map[int(l)] for l in labels]\n    return final_labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data:   2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data:   1-D NumPy array of length N with labels \u22121 or 1.\n        eta:      Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N, dtype=float)\n    b = 0.0\n    G = X_data @ X_data.T\n    for _ in range(max_iter):\n        any_update = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                any_update = True\n        if not any_update:\n            break\n    w = np.zeros(d, dtype=float)\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 564, "completion_id": 0, "solution": ""}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    label_counts = np.bincount(y)\n    probs = label_counts[label_counts > 0] / n_samples\n    H_y = -np.sum(probs * np.log2(probs))\n    best_feature = -1\n    best_ig = -1.0\n    for feature_idx in range(n_features):\n        col = X[:, feature_idx]\n        (values, value_counts) = np.unique(col, return_counts=True)\n        H_y_given_A = 0.0\n        for (val, count_val) in zip(values, value_counts):\n            p_val = count_val / n_samples\n            subset_labels = y[col == val]\n            sub_counts = np.bincount(subset_labels)\n            sub_probs = sub_counts[sub_counts > 0] / count_val\n            H_sub = -np.sum(sub_probs * np.log2(sub_probs))\n            H_y_given_A += p_val * H_sub\n        ig = H_y - H_y_given_A\n        if ig > best_ig or (math.isclose(ig, best_ig) and feature_idx < best_feature):\n            best_ig = ig\n            best_feature = feature_idx\n    best_ig = round(best_ig, 6)\n    return (best_feature, best_ig)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon <= 0.0 or n_samples <= 1:\n        return []\n    sample_size_eff = min(sample_size, n_samples)\n    height_limit = math.ceil(math.log2(sample_size_eff)) if sample_size_eff > 0 else 0\n    _gamma = 0.5772156649\n\n    def c(n: int) -> float:\n        if n <= 1:\n            return 0.0\n        return 2.0 * math.log(n - 1) + _gamma - 2.0 * (n - 1) / n\n\n    def build_tree(X: np.ndarray, current_depth: int=0) -> dict:\n        n = X.shape[0]\n        if current_depth >= height_limit or n <= 1:\n            return {'size': n}\n        f = np.random.randint(0, n_features)\n        col = X[:, f]\n        (min_val, max_val) = (col.min(), col.max())\n        if min_val == max_val:\n            return {'size': n}\n        thresh = np.random.uniform(min_val, max_val)\n        left_mask = col < thresh\n        X_left = X[left_mask]\n        X_right = X[~left_mask]\n        left = build_tree(X_left, current_depth + 1)\n        right = build_tree(X_right, current_depth + 1)\n        return {'feature': f, 'threshold': thresh, 'left': left, 'right': right}\n\n    def path_length(x: np.ndarray, node: dict, current_depth: int=0) -> float:\n        if 'size' in node:\n            return current_depth + c(node['size'])\n        f = node['feature']\n        if x[f] < node['threshold']:\n            return path_length(x, node['left'], current_depth + 1)\n        else:\n            return path_length(x, node['right'], current_depth + 1)\n    trees = []\n    for _ in range(n_trees):\n        if sample_size_eff < n_samples:\n            idx = np.random.choice(n_samples, size=sample_size_eff, replace=False)\n            X_sub = data[idx]\n        else:\n            X_sub = data.copy()\n        tree = build_tree(X_sub, current_depth=0)\n        trees.append(tree)\n    path_sums = np.zeros(n_samples, dtype=float)\n    for t in trees:\n        for i in range(n_samples):\n            path_sums[i] += path_length(data[i], t, 0)\n    h_bar = path_sums / n_trees\n    if sample_size_eff > 1:\n        phi = 2.0 * math.log(sample_size_eff - 1) - 2.0 * (sample_size_eff - 1) / sample_size_eff\n    else:\n        return []\n    scores = 2.0 ** (-h_bar / phi)\n    thresh = np.quantile(scores, 1.0 - epsilon)\n    outlier_idx = np.where(scores >= thresh)[0]\n    return sorted(outlier_idx.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Maximum entropy classifier with Generalized Iterative Scaling (GIS).\n    Returns a list of predicted labels for X_test.\n    \"\"\"\n    (N, d) = X_train.shape\n    labels = np.unique(y_train)\n    L = len(labels)\n    feat_count = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for (i, v) in enumerate(x):\n            feat_count[i, v, y] += 1\n    j2feat = list(feat_count.keys())\n    feat2j = {f: j for (j, f) in enumerate(j2feat)}\n    M = len(j2feat)\n    E_emp = np.zeros(M, dtype=float)\n    for (j, f) in enumerate(j2feat):\n        E_emp[j] = feat_count[f] / N\n    w = np.zeros(M, dtype=float)\n    C = d\n    label2idx = {y: idx for (idx, y) in enumerate(labels)}\n    for iteration in range(n_iter):\n        E_model = np.zeros(M, dtype=float)\n        for x in X_train:\n            scores = np.zeros(L, dtype=float)\n            for (idx_y, y) in enumerate(labels):\n                s = 0.0\n                for (i, v) in enumerate(x):\n                    key = (i, v, y)\n                    j = feat2j.get(key)\n                    if j is not None:\n                        s += w[j]\n                scores[idx_y] = math.exp(s)\n            Z = scores.sum()\n            probs = scores / Z\n            for (idx_y, y) in enumerate(labels):\n                p = probs[idx_y]\n                for (i, v) in enumerate(x):\n                    j = feat2j.get((i, v, y))\n                    if j is not None:\n                        E_model[j] += p / N\n        delta = np.zeros(M, dtype=float)\n        for j in range(M):\n            delta[j] = 1.0 / C * math.log(E_emp[j] / E_model[j])\n        max_update = np.max(np.abs(delta))\n        w += delta\n        if max_update < epsilon:\n            break\n    preds = []\n    for x in X_test:\n        best_score = -1e+300\n        best_label = None\n        for y in labels:\n            s = 0.0\n            for (i, v) in enumerate(x):\n                j = feat2j.get((i, v, y))\n                if j is not None:\n                    s += w[j]\n            if s > best_score:\n                best_score = s\n                best_label = y\n        preds.append(int(best_label))\n    return preds"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio is rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    if total_docs == 0:\n        return ([], set())\n    doc_counter: Counter[str] = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        doc_counter.update(unique_words)\n    freq_list: List[Tuple[str, float]] = []\n    for (word, doc_count) in doc_counter.items():\n        ratio = round(doc_count / total_docs, 4)\n        freq_list.append((word, ratio))\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = set(doc_counter.keys())\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_k = freq_list[:cut_off]\n        top_words = {word for (word, _) in top_k}\n    return (freq_list, top_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    ay = alpha * y\n    w = X.T @ ay\n    residuals = y - X @ w\n    b = np.mean(residuals)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(float(b), 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": ""}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (low, high) = (base + 1, base + 9)\n        for _ in range(n_train):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_train_list.append([x, y])\n            y_train_list.append(c)\n        for _ in range(n_val):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_val_list.append([x, y])\n            y_val_list.append(c)\n    X_train = np.array(X_train_list, dtype=float)\n    X_val = np.array(X_val_list, dtype=float)\n    y_train = np.array(y_train_list, dtype=int)\n    y_val = np.array(y_val_list, dtype=int)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].astype(float).copy()\n    prev_labels = None\n    for _ in range(max_iters):\n        diff = X[:, None, :] - centres[None, :, :]\n        dists = np.linalg.norm(diff, axis=2)\n        labels = np.argmin(dists, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        for j in range(k):\n            assigned_pts = X[labels == j]\n            if assigned_pts.size > 0:\n                centres[j] = assigned_pts.mean(axis=0)\n    centres_rounded = np.round(centres, 4)\n    return (labels.tolist(), centres_rounded.tolist())"}
{"task_id": 581, "completion_id": 0, "solution": ""}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    activation = np.array(x, dtype=float)\n    n_layers = len(weights)\n    for (L, layer) in enumerate(weights):\n        W = np.array(layer, dtype=float)\n        with_bias = np.concatenate(([1.0], activation))\n        z = W @ with_bias\n        if L < n_layers - 1:\n            activation = np.maximum(z, 0.0)\n        else:\n            activation = z\n    activation_rounded = np.round(activation, 4)\n    if activation_rounded.size == 1:\n        return float(activation_rounded[0])\n    else:\n        return activation_rounded.tolist()"}
{"task_id": 595, "completion_id": 0, "solution": ""}
