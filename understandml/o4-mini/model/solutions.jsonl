{"task_id": 0, "completion_id": 0, "solution": ""}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = X_train @ X_train.T\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    updates = 0\n    i = 0\n    while i < n_samples and updates < n_iter:\n        activation = np.dot(alpha * y_train, K[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0\n        else:\n            i += 1\n    w = alpha * y_train @ X_train\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (\"identity\", \"log\", \"logit\") where each entry is a\n        dictionary containing callables for the link, its inverse, and its\n        derivative with respect to \u03bc. All functions work with numpy scalars\n        as well as 1-D/2-D numpy arrays via element\u2010wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv(eta):\n        return eta\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_deriv(mu):\n        return 1.0 / (mu * (1.0 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv, 'derivative': identity_deriv}, 'log': {'link': log_link, 'inv_link': log_inv, 'derivative': log_deriv}, 'logit': {'link': logit_link, 'inv_link': logit_inv, 'derivative': logit_deriv}}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Return the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A Python list of lists where each element [i][j] holds the squared\n        Euclidean distance between the *i*-th and *j*-th samples in *X*,\n        rounded to 4 decimal places.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    sq_norms = np.sum(X * X, axis=1)\n    G = X @ X.T\n    D = sq_norms[:, None] + sq_norms[None, :] - 2 * G\n    D = np.maximum(D, 0.0)\n    np.fill_diagonal(D, 0.0)\n    return np.round(D, 4).tolist()"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_predict(predictions: list, learning_rate: float) -> list[int]:\n    \"\"\"Aggregate XGBoost tree outputs and produce final class predictions.\n\n    Parameters\n    ----------\n    predictions : list\n        A list where each element is a 2-D array-like object of shape\n        (n_samples, n_classes) containing the raw outputs produced by one tree.\n    learning_rate : float\n        The learning rate used by the booster.  This value scales every tree\n        output before it is added to the ensemble score.\n\n    Returns\n    -------\n    list[int]\n        A list of length *n_samples* with the predicted class label for every\n        sample.\n    \"\"\"\n    first = np.asarray(predictions[0], dtype=float)\n    (n_samples, n_classes) = first.shape\n    agg_scores = np.zeros((n_samples, n_classes), dtype=float)\n    for tree_out in predictions:\n        arr = np.asarray(tree_out, dtype=float)\n        if arr.shape != (n_samples, n_classes):\n            raise ValueError(f'All trees must output the same shape; expected {(n_samples, n_classes)}, got {arr.shape}')\n        agg_scores -= learning_rate * arr\n    max_per_row = np.max(agg_scores, axis=1, keepdims=True)\n    exps = np.exp(agg_scores - max_per_row)\n    sums = np.sum(exps, axis=1, keepdims=True)\n    probs = exps / sums\n    preds = np.argmax(probs, axis=1)\n    return preds.tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    threshold = math.ceil(minsup * N)\n    if threshold <= 0:\n        return {}\n    txn_sets = [set(t) for t in transactions]\n    item_counts = Counter()\n    for tset in txn_sets:\n        item_counts.update(tset)\n    L1 = {(item,): cnt for (item, cnt) in item_counts.items() if cnt >= threshold}\n    if not L1:\n        return {}\n    frequent_itemsets: Dict[Tuple[Hashable, ...], int] = {}\n    frequent_itemsets.update(L1)\n    Lk_minus_1 = L1\n    k = 2\n    while True:\n        prev_itemsets = sorted(Lk_minus_1.keys())\n        Ck = set()\n        len_prev = len(prev_itemsets)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                p = prev_itemsets[i]\n                q = prev_itemsets[j]\n                if p[:k - 2] == q[:k - 2]:\n                    candidate = tuple(sorted(p + (q[-1],)))\n                    all_subsets_frequent = True\n                    for subset in combinations(candidate, k - 1):\n                        if subset not in Lk_minus_1:\n                            all_subsets_frequent = False\n                            break\n                    if all_subsets_frequent:\n                        Ck.add(candidate)\n        if not Ck:\n            break\n        candidate_counts = Counter()\n        for tset in txn_sets:\n            for cand in Ck:\n                if set(cand).issubset(tset):\n                    candidate_counts[cand] += 1\n        Lk = {cand: cnt for (cand, cnt) in candidate_counts.items() if cnt >= threshold}\n        if not Lk:\n            break\n        frequent_itemsets.update(Lk)\n        Lk_minus_1 = Lk\n        k += 1\n    return frequent_itemsets"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef logistic_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, n_iterations: int=4000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model via batch GD and predict labels.\n\n    Args:\n        X_train: Training feature matrix of shape (n_samples, n_features).\n        y_train: Binary training labels of shape (n_samples,).\n        X_test:  Feature matrix to classify, shape (m_samples, n_features).\n        learning_rate: Step size used by gradient descent.\n        n_iterations:  Number of gradient-descent iterations.\n\n    Returns:\n        List with the predicted class (0 or 1) for every row of X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.zeros(n_features, dtype=float)\n    bias = 0.0\n    for _ in range(n_iterations):\n        linear_model = np.dot(X_train, weights) + bias\n        y_predicted = 1 / (1 + np.exp(-linear_model))\n        error = y_predicted - y_train\n        dw = 1.0 / n_samples * np.dot(X_train.T, error)\n        db = 1.0 / n_samples * np.sum(error)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    linear_test = np.dot(X_test, weights) + bias\n    probs_test = 1 / (1 + np.exp(-linear_test))\n    preds = [int(round(p)) for p in probs_test]\n    return preds"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef smooth(prev, cur, weight):\n    \"\"\"Apply first-order exponential smoothing.\n\n    Parameters\n    ----------\n    prev : float | list | tuple | numpy.ndarray\n        Smoothed value from the previous time step (X_{t-1}).\n    cur : float | list | tuple | numpy.ndarray\n        Current raw observation (X_t).\n    weight : float | list | tuple | numpy.ndarray\n        Smoothing factor \u03b5, 0 <= \u03b5 <= 1. Scalars or 1D arrays are supported.\n\n    Returns\n    -------\n    float or list[float]\n        Smoothed value(s) rounded to four decimal places. If all inputs\n        are scalars, a single float is returned; otherwise a Python list\n        of floats is returned.\n    \"\"\"\n    prev_arr = np.asarray(prev, dtype=float)\n    cur_arr = np.asarray(cur, dtype=float)\n    weight_arr = np.asarray(weight, dtype=float)\n    result = weight_arr * prev_arr + (1.0 - weight_arr) * cur_arr\n    result = np.around(result, 4)\n    if result.ndim == 0:\n        return float(result)\n    return result.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_samples:\n        raise ValueError('k must be in the range [1, number of samples]')\n    centres = data[:k].astype(float).copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        diff = data[:, np.newaxis, :] - centres[np.newaxis, :, :]\n        dists_sq = np.sum(diff * diff, axis=2)\n        new_labels = np.argmin(dists_sq, axis=1)\n        new_centres = np.zeros_like(centres)\n        for cluster_idx in range(k):\n            members = np.where(new_labels == cluster_idx)[0]\n            if members.size == 0:\n                rand_idx = np.random.randint(0, n_samples)\n                new_centres[cluster_idx] = data[rand_idx]\n            else:\n                new_centres[cluster_idx] = np.mean(data[members], axis=0)\n        shifts = np.linalg.norm(new_centres - centres, axis=1)\n        if np.max(shifts) < epsilon:\n            centres = new_centres\n            labels = new_labels\n            break\n        centres = new_centres\n        labels = new_labels\n    centres_rounded = np.round(centres, 4)\n    centres_list = centres_rounded.tolist()\n    labels_list = labels.tolist()\n    return (centres_list, labels_list)"}
{"task_id": 12, "completion_id": 0, "solution": ""}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_metrics(y: np.ndarray, y_pred: np.ndarray) -> tuple[float, list[float], list[float]]:\n    \"\"\"Compute binary logistic loss together with its gradient and Hessian.\n\n    Args:\n        y (np.ndarray): Binary ground-truth labels (0 or 1) of shape (n,).\n        y_pred (np.ndarray): Predicted logits of shape (n,).\n\n    Returns:\n        tuple: (mean_loss, gradient, hessian) where\n            mean_loss (float): Mean cross-entropy loss across all samples\n                               rounded to 4 decimal places.\n            gradient (list[float]): First derivative for every sample,\n                                    each value rounded to 4 decimals.\n            hessian (list[float]): Second derivative (diagonal of the\n                                   Hessian) for every sample, rounded to\n                                   4 decimals.\n    \"\"\"\n    eps = 1e-15\n    p = 1 / (1 + np.exp(-y_pred))\n    p_clipped = np.clip(p, eps, 1 - eps)\n    loss_per_sample = -(y * np.log(p_clipped) + (1 - y) * np.log(1 - p_clipped))\n    grad = p - y\n    hess = p * (1 - p)\n    mean_loss = loss_per_sample.mean()\n    mean_loss_rounded = round(float(mean_loss), 4)\n    grad_rounded = np.round(grad, 4).tolist()\n    hess_rounded = np.round(hess, 4).tolist()\n    return (mean_loss_rounded, grad_rounded, hess_rounded)"}
{"task_id": 16, "completion_id": 0, "solution": "from typing import Any, Iterable, List, Tuple\ndef ngrams(sequence: Iterable[Any], N: int) -> List[Tuple[Any, ...]]:\n    \"\"\"Return all contiguous N-grams of *sequence*.\n\n    Args:\n        sequence: An ordered, sliceable container (e.g., list, tuple, string).\n        N: Length of each n-gram (must be an integer \u2265 1).\n\n    Returns:\n        A list of tuples, each containing exactly *N* consecutive elements\n        from *sequence*.  If *N* is larger than *len(sequence)* the function\n        returns an empty list.\n    \"\"\"\n    length = len(sequence)\n    if N > length:\n        return []\n    return [tuple(sequence[i:i + N]) for i in range(length - N + 1)]"}
{"task_id": 17, "completion_id": 0, "solution": ""}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef zero(shape, **kwargs):\n    \"\"\"Return an ndarray of zeros with a specified shape.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired array shape.  If an int is provided, a 1-D array of that\n        length is created.  If a tuple/list is provided, it specifies the\n        dimensions of the resulting array.\n    **kwargs : dict, optional\n        Additional keyword arguments.  Supported argument:\n        dtype : data-type, optional\n            Desired NumPy dtype of the result (default is float).\n\n    Returns\n    -------\n    numpy.ndarray\n        Array filled with zeros matching the requested shape and dtype.\n    \"\"\"\n    dtype = kwargs.pop('dtype', float)\n    if kwargs:\n        unexpected = ', '.join(kwargs.keys())\n        raise TypeError(f'zero() got unexpected keyword argument(s): {unexpected}')\n    return np.zeros(shape, dtype=dtype)"}
{"task_id": 19, "completion_id": 0, "solution": ""}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n\n    def _compute(arr):\n        s = 1 / (1 + np.exp(-arr))\n        g = s * (1 - s)\n        return (s, g)\n    if isinstance(x, (int, float)):\n        (s, g) = _compute(x)\n        return (round(float(s), 4), round(float(g), 4))\n    arr = np.array(x, dtype=float)\n    if arr.ndim == 0:\n        (s, g) = _compute(arr.item())\n        return (round(float(s), 4), round(float(g), 4))\n    (s_arr, g_arr) = _compute(arr)\n    s_arr = np.round(s_arr, 4)\n    g_arr = np.round(g_arr, 4)\n    return (s_arr.tolist(), g_arr.tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x = np.array(x_train, dtype=float)\n    y = np.array(y_train, dtype=int)\n    n = len(x)\n    w = np.ones(n) / n\n    sorted_idx = np.argsort(x)\n    x_s = x[sorted_idx]\n    y_s = y[sorted_idx]\n    w_s = w[sorted_idx]\n    F_s = np.zeros(n)\n    stumps = []\n    alphas = []\n    while True:\n        best_err = float('inf')\n        best_theta = None\n        best_d = None\n        best_pred = None\n        thresholds = []\n        for i in range(n - 1):\n            thresholds.append((x_s[i] + x_s[i + 1]) / 2.0)\n        if not thresholds:\n            thresholds = [x_s[0]]\n        for theta in thresholds:\n            pred0 = np.where(x_s <= theta, 1, -1)\n            err0 = np.sum(w_s * (pred0 != y_s))\n            if err0 < best_err:\n                best_err = err0\n                best_theta = theta\n                best_d = 0\n                best_pred = pred0\n            pred1 = np.where(x_s > theta, 1, -1)\n            err1 = np.sum(w_s * (pred1 != y_s))\n            if err1 < best_err:\n                best_err = err1\n                best_theta = theta\n                best_d = 1\n                best_pred = pred1\n        if best_err >= 0.5:\n            break\n        e = max(min(best_err, 1.0 - 1e-10), 1e-10)\n        alpha = 0.5 * math.log((1.0 - e) / e)\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n        w_s = w_s * np.exp(-alpha * y_s * best_pred)\n        w_s = w_s / np.sum(w_s)\n        F_s += alpha * best_pred\n        train_pred = np.where(F_s >= 0, 1, -1)\n        train_err = np.mean(train_pred != y_s)\n        if train_err <= epsilon:\n            break\n    y_out = []\n    for xt in x_test:\n        s = 0.0\n        for ((d, theta), alpha) in zip(stumps, alphas):\n            if d == 0:\n                h = 1 if xt <= theta else -1\n            else:\n                h = 1 if xt > theta else -1\n            s += alpha * h\n        y_out.append(1 if s >= 0 else -1)\n    return y_out"}
{"task_id": 22, "completion_id": 0, "solution": "import numpy as np\ndef random_tensor(shape: tuple[int, ...], standardize: bool=False) -> np.ndarray:\n    \"\"\"Generate a random real-valued tensor and optionally standardize it.\n\n    Each element is produced as an integer drawn uniformly from the inclusive\n    range [\u2212300, 299] plus a real number drawn uniformly from the half-open\n    interval [0, 1).\n\n    If standardize=True, we treat the last axis as 'features' and\n    standardize each feature (column) independently to mean 0 and std 1,\n    adding a tiny epsilon to the denominator to avoid divide-by-zero.\n\n    Args:\n        shape: Desired shape of the output tensor.\n        standardize: If True, each feature (last axis) is shifted to mean 0\n            and scaled to unit variance.\n\n    Returns:\n        A NumPy ndarray containing the generated data.\n    \"\"\"\n    offsets = np.random.randint(-300, 300, size=shape)\n    uniforms = np.random.random(size=shape)\n    X = offsets + uniforms\n    if standardize:\n        if X.ndim < 2:\n            raise ValueError('standardize=True requires tensor with at least 2 dimensions')\n        orig_shape = X.shape\n        n_features = orig_shape[-1]\n        X_flat = X.reshape(-1, n_features)\n        eps = np.finfo(float).eps\n        mean = X_flat.mean(axis=0)\n        std = X_flat.std(axis=0)\n        X_flat = (X_flat - mean) / (std + eps)\n        X = X_flat.reshape(orig_shape)\n    return X"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\ndef nesterov_update(w, velocity, grad_func, learning_rate=0.001, momentum=0.9):\n    \"\"\"Perform one Nesterov Accelerated Gradient (NAG) update.\n\n    Parameters\n    ----------\n    w : list | np.ndarray\n        Current parameter vector.\n    velocity : list | np.ndarray\n        Current velocity (momentum term). Supply an empty list for the initial\n        call.\n    grad_func : callable\n        Function that returns the gradient when given a parameter vector.\n    learning_rate : float, default 0.001\n        Step size (\u03b7) for the update.\n    momentum : float, default 0.9\n        Momentum coefficient (\u03bc).\n\n    Returns\n    -------\n    tuple[list, list]\n        The updated parameter vector and the updated velocity, both as Python\n        lists rounded to 4 decimal places.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    if isinstance(velocity, (list, np.ndarray)) and len(velocity) == 0:\n        v = np.zeros_like(w)\n    else:\n        v = np.array(velocity, dtype=float)\n    w_tilde = w - momentum * v\n    g_raw = grad_func(w_tilde)\n    g = np.array(g_raw, dtype=float)\n    g = np.clip(g, -1.0, 1.0)\n    v_new = momentum * v + learning_rate * g\n    w_new = w - v_new\n    w_new_rounded = np.round(w_new, 4).tolist()\n    v_new_rounded = np.round(v_new, 4).tolist()\n    return (w_new_rounded, v_new_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (m, _) = X_test.shape\n    (n, _) = X_train.shape\n    if m == 0 or n == 0:\n        return []\n    X_test_sq = np.sum(X_test ** 2, axis=1)\n    X_train_sq = np.sum(X_train ** 2, axis=1)\n    dist_sq = X_test_sq[:, np.newaxis] + X_train_sq[np.newaxis, :] - 2.0 * X_test.dot(X_train.T)\n    K = np.exp(-gamma * dist_sq)\n    coeff = alpha * y_train\n    g = K.dot(coeff) + b\n    preds = np.where(g >= 0, 1, -1)\n    return preds.astype(int).tolist()"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union, List, Tuple\ndef relu(x: Union[List[int], List[float], List[List[Union[int, float]]]]) -> Tuple[List, List]:\n    \"\"\"Compute the element-wise ReLU activation and its gradient.\n\n    Parameters\n    ----------\n    x : list or nested list\n        Input data. Can be a 1-D list of numbers or a nested list representing\n        higher-dimensional data (e.g., a matrix).\n\n    Returns\n    -------\n    tuple of lists\n        A tuple `(activation, gradient)` where both items are Python lists in\n        the same shape as `x`.\n    \"\"\"\n    arr = np.array(x)\n    activation = np.where(arr > 0, arr, 0)\n    gradient = np.where(arr >= 0, 1, 0)\n    return (activation.tolist(), gradient.tolist())"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    A = np.array(X, dtype=float)\n    (m, n) = A.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(A, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    S_k = np.diag(s_k)\n    A_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((A - A_hat) ** 2)\n    A_hat_rounded = np.round(A_hat, 4)\n    mse_rounded = float(np.round(mse, 4))\n    X_hat_list = A_hat_rounded.tolist()\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\"\"\"\n    x = np.asarray(x_train, dtype=float).flatten()\n    y = np.asarray(y_train, dtype=float).flatten()\n    n = x.shape[0]\n    if n == 0:\n        return 0.0\n    order = np.argsort(x)\n    x = x[order]\n    y = y[order]\n    splits = []\n    for i in range(n - 1):\n        if x[i] != x[i + 1]:\n            splits.append(0.5 * (x[i] + x[i + 1]))\n    if len(splits) == 0:\n        return round(float(np.mean(y)), 4)\n    residuals = y.copy()\n    rss = np.sum(residuals ** 2)\n    stumps = []\n    while rss > epsilon:\n        best = None\n        for s in splits:\n            left_mask = x <= s\n            right_mask = ~left_mask\n            c1 = residuals[left_mask].mean() if np.any(left_mask) else 0.0\n            c2 = residuals[right_mask].mean() if np.any(right_mask) else 0.0\n            preds = np.where(left_mask, c1, c2)\n            rss_new = np.sum((residuals - preds) ** 2)\n            if best is None or rss_new < best[0]:\n                best = (rss_new, s, c1, c2)\n        if best is None:\n            break\n        (rss_new, best_s, best_c1, best_c2) = best\n        if rss_new >= rss:\n            break\n        stumps.append((best_s, best_c1, best_c2))\n        left_mask = x <= best_s\n        preds = np.where(left_mask, best_c1, best_c2)\n        residuals -= preds\n        rss = rss_new\n    pred = 0.0\n    for (s, c1, c2) in stumps:\n        pred += c1 if x_query <= s else c2\n    return round(float(pred), 4)"}
{"task_id": 32, "completion_id": 0, "solution": "def check_data(a, b):\n    \"\"\"Validate and convert the two inputs so that both are numeric.\n\n    The function must accept integers, floats, or numeric strings. Any string\n    is converted with `float()`; existing numeric values stay as they are.\n    The pair (a, b) is returned.\n    \"\"\"\n\n    def _clean(x):\n        if isinstance(x, str):\n            return float(x)\n        if isinstance(x, (int, float)):\n            return x\n        return float(x)\n    return (_clean(a), _clean(b))\ndef validate_input(function):\n\n    def wrapper(a, b):\n        (a, b) = check_data(a, b)\n        return function(a, b)\n    return wrapper\n@validate_input\ndef sum_numbers(a, b):\n    \"\"\"Return the arithmetic sum of *a* and *b* after validation.\"\"\"\n    result = a + b\n    if isinstance(result, float) and result.is_integer():\n        return int(result)\n    return result"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor of the given shape, filled with 0.0s and 1.0s,\n    where each element is 1.0 with probability `sparsity` and 0.0 otherwise.\n\n    Parameters\n    ----------\n    shape : tuple of int\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        Probability of an entry being 1.0. Must lie in [0, 1]. Default is 0.5.\n    seed : int or None, optional\n        If not None, seed for NumPy's random number generator to make the\n        result reproducible. Default is None.\n\n    Returns\n    -------\n    numpy.ndarray of floats\n        An array of shape `shape` containing only 0.0 and 1.0.\n    int\n        Returns -1 if `sparsity` is outside the interval [0, 1].\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    uniform_samples = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (uniform_samples >= threshold).astype(float)\n    return binary_tensor"}
{"task_id": 35, "completion_id": 0, "solution": ""}
{"task_id": 36, "completion_id": 0, "solution": "from typing import List, Optional\nclass Node:\n    \"\"\"Binary decision-tree node (provided).\n\n    Non-leaf node:   rule = (feature_index, threshold)\n    Leaf node:       rule = (None, prediction_value)\n    \"\"\"\n\n    def __init__(self, left: Optional['Node'], right: Optional['Node'], rule: tuple):\n        self.left = left\n        self.right = right\n        self.feature = rule[0]\n        self.threshold = rule[1]\ndef predict_tree(root: Optional[Node], X: List[List[float]]) -> List[float]:\n    \"\"\"Run a binary decision tree on a batch of samples.\n\n    Args:\n        root: The root node of the decision tree (or None for empty tree).\n        X: A list of samples, where each sample is a list of feature values.\n\n    Returns:\n        A list of predictions, one per sample, in the same order as X.\n    \"\"\"\n    if root is None:\n        return []\n    predictions: List[float] = []\n    for sample in X:\n        node = root\n        while not (node.left is None and node.right is None):\n            feat_idx = node.feature\n            thresh = node.threshold\n            if sample[feat_idx] <= thresh:\n                node = node.left\n            else:\n                node = node.right\n        predictions.append(node.threshold)\n    return predictions"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import cycle\ndef build_kd_tree(data: np.ndarray) -> dict | None:\n    \"\"\"Build a kd-tree from the given NumPy array.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features + 1). The first\n        n_features columns hold the coordinates of each point, the last column\n        holds an associated label or value.\n    \n    Returns\n    -------\n    dict | None\n        Nested dictionary representing the kd-tree or None when *data* is\n        empty. Each dictionary has the keys 'point', 'label', 'left',\n        and 'right'.\n    \"\"\"\n    if data.shape[0] == 0:\n        return None\n    m = data.shape[1] - 1\n    dim_cycle = cycle(range(m))\n\n    def _build(subset: np.ndarray) -> dict | None:\n        if subset.shape[0] == 0:\n            return None\n        d = next(dim_cycle)\n        order = np.argsort(subset[:, d], kind='stable')\n        sorted_subset = subset[order]\n        mid = sorted_subset.shape[0] // 2\n        median_row = sorted_subset[mid]\n        point = median_row[:m].tolist()\n        label = median_row[m].item()\n        left_tree = _build(sorted_subset[:mid])\n        right_tree = _build(sorted_subset[mid + 1:])\n        return {'point': point, 'label': label, 'left': left_tree, 'right': right_tree}\n    return _build(data)"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    if n == 0:\n        raise ValueError('Cannot split an empty dataset.')\n    k = n // 2\n    col = data[:, d]\n    parti = np.argpartition(col, k)\n    pivot_idx = int(parti[k])\n    pivot_val = col[pivot_idx]\n    left_mask = col < pivot_val\n    right_mask = col > pivot_val\n    left_indices = np.nonzero(left_mask)[0]\n    right_indices = np.nonzero(right_mask)[0]\n    left_list = sorted((int(i) for i in left_indices))\n    right_list = sorted((int(i) for i in right_indices))\n    return (pivot_idx, left_list, right_list)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_data: list[list[float]], y_data: list, X: list[list[float]], k: int=5) -> list:\n    \"\"\"Predict labels for the query samples *X* using the k-Nearest Neighbours rule.\n\n    Parameters\n    ----------\n    X_data : list[list[float]]\n        Training data \u2013 each inner list is a feature vector.\n    y_data : list\n        Labels corresponding to *X_data*.\n    X : list[list[float]]\n        Query samples to classify.\n    k : int, optional\n        Number of neighbours to look at (default is 5).\n\n    Returns\n    -------\n    list\n        Predicted labels for each query sample in *X*.\n    \"\"\"\n    X_train = np.array(X_data, dtype=float)\n    X_query = np.array(X, dtype=float)\n    n_train = X_train.shape[0]\n    if n_train == 0:\n        raise ValueError('Training set X_data must not be empty.')\n    if X_query.ndim != 2 or X_train.ndim != 2:\n        raise ValueError('Both X_data and X must be 2D lists of feature vectors.')\n    if X_query.shape[1] != X_train.shape[1]:\n        raise ValueError('Feature\u2010space dimensionality of X_data and X must match.')\n    predictions = []\n    for x in X_query:\n        dists = np.linalg.norm(X_train - x, axis=1)\n        k_used = min(k, n_train)\n        nearest_idxs = np.argsort(dists)[:k_used]\n        neigh_labels = [y_data[i] for i in nearest_idxs]\n        cnt = Counter(neigh_labels)\n        max_votes = max(cnt.values())\n        tied = [label for (label, c) in cnt.items() if c == max_votes]\n        prediction = min(tied)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np\ndef rmsle(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Parameters\n    ----------\n    actual : list[float]\n        Non-negative ground-truth values.\n    predicted : list[float]\n        Non-negative values predicted by a model.\n\n    Returns\n    -------\n    float\n        The RMSLE rounded to 4 decimal places, or -1 if the input is invalid.\n    \"\"\"\n    if not isinstance(actual, (list, tuple)) or not isinstance(predicted, (list, tuple)):\n        return -1.0\n    if len(actual) == 0 or len(actual) != len(predicted):\n        return -1.0\n    for x in actual:\n        if not isinstance(x, (int, float)) or x < 0:\n            return -1.0\n    for x in predicted:\n        if not isinstance(x, (int, float)) or x < 0:\n            return -1.0\n    actual_arr = np.array(actual, dtype=float)\n    pred_arr = np.array(predicted, dtype=float)\n    log_actual = np.log(actual_arr + 1)\n    log_pred = np.log(pred_arr + 1)\n    squared_diff = (log_pred - log_actual) ** 2\n    mean_sq_diff = np.mean(squared_diff)\n    rmsle_val = np.sqrt(mean_sq_diff)\n    return float(round(rmsle_val, 4))"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef tanh_activation(x, derivative: bool=False) -> list[float]:\n    \"\"\"Compute tanh or its derivative element-wise.\n\n    Args:\n        x: A 1-D list or NumPy array of numbers.\n        derivative: If True, return the gradient of tanh. Otherwise return tanh.\n\n    Returns:\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    exp_term = np.exp(-2.0 * x_arr)\n    tanh_x = 2.0 / (1.0 + exp_term) - 1.0\n    if derivative:\n        result = 1.0 - tanh_x ** 2\n    else:\n        result = tanh_x\n    return np.round(result, 4).tolist()"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef autocorrelate_1d(x: list | np.ndarray) -> list:\n    \"\"\"Compute the non-negative-lag autocorrelation of a 1-D real signal.\n\n    Args:\n        x: A one-dimensional sequence of numbers. It can be a Python list or a\n           NumPy array with length N (N \u2265 0).\n\n    Returns:\n        A Python list of length N where the k-th element is the autocorrelation\n        coefficient a_k = sum_{n=0..N-k-1} x[n+k] * x[n].\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x_list = x.tolist()\n    else:\n        x_list = list(x)\n    N = len(x_list)\n    if N == 0:\n        return []\n    result = []\n    for k in range(N):\n        acc = 0\n        limit = N - k\n        for n in range(limit):\n            acc += x_list[n + k] * x_list[n]\n        result.append(acc)\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        arr = np.array(X, dtype=float)\n    except Exception:\n        return False\n    if arr.ndim != 2:\n        return False\n    if np.any(arr < 0) or np.any(arr > 1):\n        return False\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, np.ones(arr.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 49, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef k_smallest(nums: List[Number], k: int) -> List[Number]:\n    \"\"\"Return the k smallest numbers contained in *nums*.\n\n    The function should scan the input list once, maintaining a custom\n    max-heap (size at most k) implemented with a Python list.  At the end,\n    return the k smallest elements in ascending order.  If *k* is invalid\n    (\u22640 or larger than len(nums)) return -1.\n    \n    The use of the built-in ``heapq`` module is **not** allowed.\n    \"\"\"\n    n = len(nums)\n    if k <= 0 or k > n:\n        return -1\n    heap: List[Number] = []\n\n    def _move_up(idx: int) -> None:\n        \"\"\"Restore max-heap property going upward from idx.\"\"\"\n        while idx > 0:\n            parent = (idx - 1) // 2\n            if heap[idx] > heap[parent]:\n                (heap[idx], heap[parent]) = (heap[parent], heap[idx])\n                idx = parent\n            else:\n                break\n\n    def _move_down(idx: int, size: int) -> None:\n        \"\"\"Restore max-heap property going downward from idx, within heap[0:size].\"\"\"\n        while True:\n            left = 2 * idx + 1\n            right = 2 * idx + 2\n            largest = idx\n            if left < size and heap[left] > heap[largest]:\n                largest = left\n            if right < size and heap[right] > heap[largest]:\n                largest = right\n            if largest == idx:\n                break\n            (heap[idx], heap[largest]) = (heap[largest], heap[idx])\n            idx = largest\n    for num in nums:\n        if len(heap) < k:\n            heap.append(num)\n            _move_up(len(heap) - 1)\n        elif num < heap[0]:\n            heap[0] = num\n            _move_down(0, k)\n    return sorted(heap)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 54, "completion_id": 0, "solution": "import string\n_STOP_WORDS = {'a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'are', \"aren't\", 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', \"can't\", 'cannot', 'could', \"couldn't\", 'did', \"didn't\", 'do', 'does', \"doesn't\", 'doing', \"don't\", 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', \"hadn't\", 'has', \"hasn't\", 'have', \"haven't\", 'having', 'he', \"he'd\", \"he'll\", \"he's\", 'her', 'here', \"here's\", 'hers', 'herself', 'him', 'himself', 'his', 'how', \"how's\", 'i', \"i'd\", \"i'll\", \"i'm\", \"i've\", 'if', 'in', 'into', 'is', \"isn't\", 'it', \"it's\", 'its', 'itself', \"let's\", 'me', 'more', 'most', \"mustn't\", 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'same', \"shan't\", 'she', \"she'd\", \"she'll\", \"she's\", 'should', \"shouldn't\", 'so', 'some', 'such', 'than', 'that', \"that's\", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', \"there's\", 'these', 'they', \"they'd\", \"they'll\", \"they're\", \"they've\", 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', \"wasn't\", 'we', \"we'd\", \"we'll\", \"we're\", \"we've\", 'were', \"weren't\", 'what', \"what's\", 'when', \"when's\", 'where', \"where's\", 'which', 'while', 'who', \"who's\", 'whom', 'why', \"why's\", 'with', \"won't\", 'would', \"wouldn't\", 'you', \"you'd\", \"you'll\", \"you're\", \"you've\", 'your', 'yours', 'yourself', 'yourselves'}\ndef tokenize_whitespace(line: str, lowercase: bool=True, filter_stopwords: bool=True, filter_punctuation: bool=True, **kwargs) -> list[str]:\n    \"\"\"Tokenize *line* by whitespace with optional lower-casing, punctuation stripping and\n    stop-word removal.\n\n    Args:\n        line: Input text string.\n        lowercase: If True, convert text to lower-case before tokenisation.\n        filter_stopwords: If True, remove common English stop-words.\n        filter_punctuation: If True, strip punctuation from each token.\n        **kwargs: Additional keyword arguments for future compatibility.\n\n    Returns:\n        List of processed tokens in their original order.\n    \"\"\"\n    if lowercase:\n        line = line.lower()\n    raw_tokens = line.split()\n    result_tokens: list[str] = []\n    for token in raw_tokens:\n        if filter_punctuation:\n            token = token.strip(string.punctuation)\n            if not token:\n                continue\n        if filter_stopwords and token in _STOP_WORDS:\n            continue\n        result_tokens.append(token)\n    return result_tokens"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 56, "completion_id": 0, "solution": ""}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_impurity(y, criterion):\n    \"\"\"Compute a node's impurity.\n\n    Args:\n        y (numpy.ndarray): 1-D array with the target values.\n        criterion (str): One of {\"entropy\", \"gini\", \"mse\"}.\n\n    Returns:\n        float: Impurity value rounded to 4 decimal places.\n    \"\"\"\n    if y.size == 0:\n        return 0.0\n    crit = criterion.lower()\n    if crit not in ('entropy', 'gini', 'mse'):\n        raise ValueError(f'Unknown criterion: {criterion}')\n    if crit in ('entropy', 'gini'):\n        (classes, counts) = np.unique(y, return_counts=True)\n        probs = counts / counts.sum()\n        if crit == 'entropy':\n            impurity = -np.sum(probs * np.log2(probs))\n        else:\n            impurity = 1.0 - np.sum(probs ** 2)\n    else:\n        mean_y = np.mean(y)\n        impurity = np.mean((y - mean_y) ** 2)\n    return round(float(impurity), 4)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function builds polynomial features up to 'degree', optimises the\n    Lasso objective with coordinate descent, and returns the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values, same length as X.\n    degree : int\n        Highest exponent of x to include (total coeffs = degree + 1).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int\n        Maximum number of coordinate-descent passes.\n    tol : float\n        Early-stopping tolerance on max coefficient change.\n\n    Returns\n    -------\n    list[float]\n        Weights [w0, w1, ..., w_degree], rounded to 4 decimals.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    m = X_arr.shape[0]\n    if y_arr.shape[0] != m:\n        raise ValueError('X and y must have the same length.')\n    if X_arr.ndim != 1:\n        raise ValueError('X must be one-dimensional.')\n    if degree < 0 or not isinstance(degree, int):\n        raise ValueError('degree must be a non-negative integer.')\n    if reg_factor < 0:\n        raise ValueError('reg_factor must be non-negative.')\n    X_mat = np.vander(X_arr, N=degree + 1, increasing=True)\n    w = np.zeros(degree + 1, dtype=float)\n    if degree >= 1:\n        denoms = np.sum(X_mat[:, 1:] ** 2, axis=0)\n    else:\n        denoms = np.array([])\n\n    def soft_threshold(rho: float, lam: float) -> float:\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n    for iteration in range(n_iterations):\n        w_old = w.copy()\n        if degree >= 1:\n            w[0] = np.mean(y_arr - X_mat[:, 1:] @ w[1:])\n        else:\n            w[0] = np.mean(y_arr)\n        for j in range(1, degree + 1):\n            x_j = X_mat[:, j]\n            r = y_arr - X_mat @ w + w[j] * x_j\n            rho = x_j.dot(r)\n            w_j_new = soft_threshold(rho, reg_factor) / denoms[j - 1]\n            w[j] = w_j_new\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a discrete Hidden Markov Model.\n    \n    Given:\n      A   \u2013 (N\u00d7N) transition-probability matrix, A[i][j] = P(x_{k+1}=j | x_k=i)\n      B   \u2013 (N\u00d7M) emission-probability matrix, B[j][m] = P(o=m | x=j)\n      obs \u2013 length-T list of observation indices (each in 0..M-1)\n      t   \u2013 time index (0 \u2264 t < T)\n    \n    Returns:\n      A list of length N containing \u03b2_t(i) for i=0..N-1,\n      each rounded to 4 decimal places.\n    \n    Backward recursion:\n      \u03b2_{T-1}(i) = 1\n      \u03b2_t(i) = sum_j A[i][j] * B[j][ obs[t+1] ] * \u03b2_{t+1}(j)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.ones(N, dtype=float)\n    for k in range(T - 2, t - 1, -1):\n        o_next = obs[k + 1]\n        beta = (A * (B[:, o_next] * beta)).sum(axis=1)\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nimport cmath\nimport math\ndef dft(frame: np.ndarray, positive_only: bool=True) -> list:\n    \"\"\"Compute the Discrete Fourier Transform (DFT) of a 1-D signal.\n\n    Args:\n        frame: 1-D NumPy array containing the signal samples.\n        positive_only: Whether to return only the non-negative frequency\n            terms (first N//2+1 coefficients).  Defaults to True.\n\n    Returns:\n        list[complex]: DFT coefficients rounded to 4 decimals.  Length is\n        N//2+1 when positive_only is True and N otherwise.\n    \"\"\"\n    x = frame.flatten()\n    N = x.shape[0]\n    full_spectrum = []\n    for k in range(N):\n        sum_val = 0 + 0j\n        for n in range(N):\n            angle = -2j * math.pi * k * n / N\n            sum_val += complex(x[n]) * cmath.exp(angle)\n        real_part = round(sum_val.real, 4)\n        imag_part = round(sum_val.imag, 4)\n        full_spectrum.append(complex(real_part, imag_part))\n    if positive_only:\n        cutoff = N // 2 + 1\n        return full_spectrum[:cutoff]\n    else:\n        return full_spectrum"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    pi_arr = np.array(pi, dtype=float)\n    obs_arr = np.array(obs, dtype=int)\n    N = A_arr.shape[0]\n    T = obs_arr.shape[0]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        weighted_next = B_arr[:, obs_arr[t + 1]] * beta[t + 1, :]\n        beta[t, :] = A_arr.dot(weighted_next)\n    first_emit = B_arr[:, obs_arr[0]]\n    prob = np.dot(pi_arr * first_emit, beta[0, :])\n    return float(round(prob, 6))"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import accumulate\ndef gen_hmm_data(S: list[float], A: list[list[float]], B: list[list[float]], n_sample: int, seed: int | None=None) -> tuple[list[int], list[int]] | int:\n    \"\"\"Generate a sequence of hidden states and observations from a Hidden Markov Model.\n\n    The function validates the probability distributions, optionally sets a random\n    seed for reproducibility, and then performs sequential sampling: initial state\n    \u2192 observation \u2192 (transition \u2192 observation) repeated *n_sample*-1 more times.\n\n    Args:\n        S: Initial state distribution (length N).\n        A: State-transition matrix (shape N\u00d7N).\n        B: Emission probability matrix (shape N\u00d7M).\n        n_sample: Total length of the desired sequence (must be \u22651).\n        seed: Optional integer to seed NumPy\u2019s RNG so that identical inputs\n              return identical outputs.\n\n    Returns:\n        A tuple (states, observations) where both are lists of integers of\n        length *n_sample*. If any probability distribution is invalid the\n        function returns -1.\n    \"\"\"\n    if n_sample < 1:\n        return -1\n    N = len(S)\n    if N == 0:\n        return -1\n    if any((len(row) != N for row in A)):\n        return -1\n    if len(B) != N:\n        return -1\n    M = len(B[0])\n    if M == 0:\n        return -1\n    if any((len(row) != M for row in B)):\n        return -1\n    tol = 1e-08\n\n    def valid_dist(vec: list[float]) -> bool:\n        s = sum(vec)\n        return abs(s - 1.0) <= tol\n    if not valid_dist(S):\n        return -1\n    for row in A:\n        if not valid_dist(row):\n            return -1\n    for row in B:\n        if not valid_dist(row):\n            return -1\n    if seed is not None:\n        np.random.seed(seed)\n\n    def sample_discrete(probs: list[float]) -> int:\n        cdf = list(accumulate(probs))\n        r = np.random.rand()\n        for (idx, threshold) in enumerate(cdf):\n            if r < threshold:\n                return idx\n        return len(probs) - 1\n    states: list[int] = []\n    observations: list[int] = []\n    curr_state = sample_discrete(S)\n    states.append(curr_state)\n    observations.append(sample_discrete(B[curr_state]))\n    for _ in range(1, n_sample):\n        curr_state = sample_discrete(A[curr_state])\n        states.append(curr_state)\n        observations.append(sample_discrete(B[curr_state]))\n    return (states, observations)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef sgd_momentum_update(w: np.ndarray, grad: np.ndarray, learning_rate: float=0.01, momentum: float=0.0, prev_update: np.ndarray | None=None) -> tuple[list, list]:\n    \"\"\"Performs one SGD optimisation step with momentum.\n\n    Args:\n        w: Current parameters (NumPy array).\n        grad: Gradient of the loss with respect to *w*.\n        learning_rate: Learning rate controlling the update magnitude.\n        momentum: Momentum factor in the interval [0, 1].\n        prev_update: Previous momentum update / velocity. If ``None`` a zero\n            tensor of the same shape as *w* is used.\n\n    Returns:\n        A tuple ``(updated_w, new_update)`` where each element is converted to\n        a Python ``list`` and rounded to 4 decimal places.\n    \"\"\"\n    if prev_update is None:\n        prev_update = np.zeros_like(w)\n    new_update = momentum * prev_update + (1.0 - momentum) * grad\n    updated_w = w - learning_rate * new_update\n    updated_w_list = np.round(updated_w, 4).tolist()\n    new_update_list = np.round(new_update, 4).tolist()\n    return (updated_w_list, new_update_list)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not isinstance(S, list) or not isinstance(A, list) or (not isinstance(B, list)):\n        return -1.0\n    n = len(S)\n    if n == 0 or len(A) != n or len(B) != n:\n        return -1.0\n    for row in A:\n        if not isinstance(row, list) or len(row) != n:\n            return -1.0\n    m = None\n    for row in B:\n        if not isinstance(row, list):\n            return -1.0\n        if m is None:\n            m = len(row)\n            if m == 0:\n                return -1.0\n        elif len(row) != m:\n            return -1.0\n    if not isinstance(observations, list) or len(observations) == 0:\n        return -1.0\n    for obs in observations:\n        if not isinstance(obs, int) or obs < 0 or obs >= m:\n            return -1.0\n    S_arr = np.array(S, dtype=float)\n    A_arr = np.array(A, dtype=float)\n    B_arr = np.array(B, dtype=float)\n    t0 = observations[0]\n    alpha = S_arr * B_arr[:, t0]\n    for t in observations[1:]:\n        alpha = np.dot(alpha, A_arr) * B_arr[:, t]\n    prob = alpha.sum()\n    return round(prob, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    class FPNode:\n        __slots__ = ('name', 'count', 'parent', 'children', 'link')\n\n        def __init__(self, name, parent):\n            self.name = name\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n    def update_header(item, node, header_table):\n        head = header_table[item][1]\n        if head is None:\n            header_table[item][1] = node\n        else:\n            while head.link:\n                head = head.link\n            head.link = node\n\n    def insert_tree(items, node, header_table, count=1):\n        if not items:\n            return\n        first = items[0]\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = FPNode(first, node)\n            child.count = count\n            node.children[first] = child\n            update_header(first, child, header_table)\n        insert_tree(items[1:], child, header_table, count)\n    freq = Counter()\n    for tran in transactions:\n        freq.update(tran)\n    freq = {item: cnt for (item, cnt) in freq.items() if cnt >= min_support}\n    if not freq:\n        return []\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    def sort_key(x):\n        return (-freq[x], x)\n    header_table = {item: [freq[item], None] for (item, _) in sorted_items}\n    root = FPNode(None, None)\n    for tran in transactions:\n        filtered = [i for i in tran if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=sort_key)\n        insert_tree(ordered, root, header_table)\n    frequent_itemsets = []\n\n    def mine_tree(header, prefix):\n        for item in sorted(header.keys()):\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix.copy())\n            conditional_patterns = []\n            node = header[item][1]\n            while node:\n                count = node.count\n                path = []\n                parent = node.parent\n                while parent and parent.name is not None:\n                    path.append(parent.name)\n                    parent = parent.parent\n                if path:\n                    conditional_patterns.append((path[::-1], count))\n                node = node.link\n            cpb_freq = Counter()\n            for (path, cnt) in conditional_patterns:\n                for itm in path:\n                    cpb_freq[itm] += cnt\n            cond_items = {i for (i, c) in cpb_freq.items() if c >= min_support}\n            if not cond_items:\n                continue\n            sorted_c = sorted(cond_items, key=lambda x: (-cpb_freq[x], x))\n            cond_header = {i: [cpb_freq[i], None] for i in sorted_c}\n            cond_root = FPNode(None, None)\n            for (path, cnt) in conditional_patterns:\n                filtered_path = [i for i in path if i in cond_items]\n                if not filtered_path:\n                    continue\n                ordered_path = sorted(filtered_path, key=lambda x: (-cpb_freq[x], x))\n                insert_tree(ordered_path, cond_root, cond_header, cnt)\n            mine_tree(cond_header, new_prefix)\n    mine_tree(header_table, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 71, "completion_id": 0, "solution": ""}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef variance_reduction(y: np.ndarray, y_left: np.ndarray, y_right: np.ndarray) -> float:\n    \"\"\"\n    Compute the variance reduction achieved by splitting the parent node's\n    target values `y` into `y_left` and `y_right` in a regression tree.\n\n    Variance reduction VR is defined as:\n        VR = Var(y) \n             - (n_left / n) * Var(y_left) \n             - (n_right / n) * Var(y_right)\n\n    Here, Var(\u00b7) is the population variance.  If the target is multi-dimensional,\n    variances are computed column\u2010wise and summed into a single scalar.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Target values at the parent node.  Shape (n,) or (n, d).\n    y_left : np.ndarray\n        Target values that would go to the left child.  Shape (n_left,) or (n_left, d).\n    y_right : np.ndarray\n        Target values that would go to the right child. Shape (n_right,) or (n_right, d).\n\n    Returns\n    -------\n    float\n        The variance reduction, rounded to 4 decimal places.\n    \"\"\"\n    n = y.shape[0]\n    n_left = y_left.shape[0]\n    n_right = y_right.shape[0]\n    var_parent = np.var(y, axis=0)\n    var_left = np.var(y_left, axis=0)\n    var_right = np.var(y_right, axis=0)\n    total_var_parent = np.sum(var_parent)\n    total_var_left = np.sum(var_left)\n    total_var_right = np.sum(var_right)\n    vr = total_var_parent - n_left / n * total_var_left - n_right / n * total_var_right\n    return round(vr, 4)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return -1\n    X_train_arr = np.array(X_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    predictions = []\n    for x in X_test_arr:\n        dists = np.sum((X_train_arr - x) ** 2, axis=1)\n        neigh_idx = np.argsort(dists)[:k]\n        neigh_labels = y_train_arr[neigh_idx].tolist()\n        vote_counts = Counter(neigh_labels)\n        max_votes = max(vote_counts.values())\n        tied_labels = [lbl for (lbl, cnt) in vote_counts.items() if cnt == max_votes]\n        prediction = min(tied_labels)\n        predictions.append(int(prediction))\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y, dtype=np.float64)\n    y_pred = np.array(y_pred, dtype=np.float64)\n    eps = np.finfo(np.float64).eps\n    log_preds = np.log(y_pred + eps)\n    loss = -np.sum(y * log_preds)\n    return float(np.round(loss, 4))"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[list[float]], list]\n        A tuple (AL, caches), where\n        - AL is the final activation rounded to 4 decimals and converted to a \n          plain Python list of shape (1, m).\n        - caches is a list of caches for each layer (for backprop).\n    \"\"\"\n\n    def sigmoid(Z: np.ndarray) -> np.ndarray:\n        return 1 / (1 + np.exp(-Z))\n\n    def relu(Z: np.ndarray) -> np.ndarray:\n        return np.maximum(0, Z)\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = W.dot(A_prev) + b\n        A = relu(Z)\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        caches.append((linear_cache, activation_cache))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    ZL = W.dot(A) + b\n    AL = sigmoid(ZL)\n    linear_cache = (A, W, b)\n    activation_cache = ZL\n    caches.append((linear_cache, activation_cache))\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef adamax_step(params: list[float], grads: list[float], m: list[float], u: list[float], t: int, learning_rate: float=0.002, beta1: float=0.9, beta2: float=0.999, epsilon: float=1e-08) -> tuple[list[float], list[float], list[float], int]:\n    \"\"\"Perform one Adamax update step.\n\n    Args:\n        params:  Current parameter vector.\n        grads:   Current gradient vector (same length as `params`).\n        m:       First-moment estimates (same length as `params`).\n        u:       Exponentially weighted infinity-norms (same length as `params`).\n        t:       Current time-step counter (starts at 1).\n        learning_rate: Learning rate \u03b7 (default 0.002).\n        beta1:   Exponential decay rate for the first moment \u03b2\u2081.\n        beta2:   Exponential decay rate for the infinity-norm \u03b2\u2082.\n        epsilon: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple `(new_params, new_m, new_u, new_t)` where each list is rounded\n        to 6 decimal places and `new_t = t + 1`.\n    \"\"\"\n    arr_params = np.array(params, dtype=float)\n    arr_grads = np.array(grads, dtype=float)\n    arr_m = np.array(m, dtype=float)\n    arr_u = np.array(u, dtype=float)\n    m_t = beta1 * arr_m + (1 - beta1) * arr_grads\n    u_t = np.maximum(beta2 * arr_u, np.abs(arr_grads))\n    bias_correction = 1 - beta1 ** t\n    step = learning_rate / bias_correction * (m_t / (u_t + epsilon))\n    params_t = arr_params - step\n    new_t = t + 1\n    new_params = np.round(params_t, 6).tolist()\n    new_m = np.round(m_t, 6).tolist()\n    new_u = np.round(u_t, 6).tolist()\n    return (new_params, new_m, new_u, new_t)"}
{"task_id": 80, "completion_id": 0, "solution": ""}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as A2.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2_clipped = np.clip(A2, eps, 1 - eps)\n    A2_flat = A2_clipped.reshape(-1)\n    Y_flat = Y.reshape(-1)\n    m = Y_flat.shape[0]\n    cost = -(1.0 / m) * np.sum(Y_flat * np.log(A2_flat) + (1 - Y_flat) * np.log(1 - A2_flat))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list contains the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(Q, dtype=float).ravel()\n    n = arr.size\n    if n == 0:\n        return []\n    if not 0.0 <= epsilon <= 1.0:\n        raise ValueError('epsilon must be in [0, 1]')\n    base = epsilon / n\n    greedy_idx = int(np.argmax(arr))\n    probs = np.full(n, base, dtype=float)\n    probs[greedy_idx] += 1.0 - epsilon\n    rounded = np.round(probs, 4)\n    total = rounded.sum()\n    drift = 1.0 - total\n    if abs(drift) > 1e-12:\n        rounded[greedy_idx] = round(rounded[greedy_idx] + drift, 4)\n    if not np.isclose(rounded.sum(), 1.0, atol=1e-12):\n        raise RuntimeError(f'Probabilities sum to {rounded.sum()}, not 1')\n    return rounded.tolist()"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef mse_line_search(y: np.ndarray, y_pred: np.ndarray, h_pred: np.ndarray) -> float:\n    \"\"\"Calculate the optimal step size for adding a new learner when optimising\n    the mean squared error (MSE) loss.\n\n    Parameters\n    ----------\n    y : np.ndarray\n        Array of true target values.\n    y_pred : np.ndarray\n        Array of current predictions produced by the model.\n    h_pred : np.ndarray\n        Array of predictions from the new base learner.\n\n    Returns\n    -------\n    float\n        The optimal step size \u03b3 rounded to four decimal places. If `h_pred`\n        perfectly fits the residuals the function should return 1.0.\n    \"\"\"\n    residuals = y - y_pred\n    num = np.sum(residuals * h_pred)\n    den = np.sum(h_pred ** 2)\n    if np.isclose(den, 0.0):\n        return 1.0\n    gamma = num / den\n    return round(float(gamma), 4)"}
{"task_id": 85, "completion_id": 0, "solution": ""}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not predictions[0]:\n        return []\n    columns = zip(*predictions)\n    final_predictions: List[Any] = []\n    for votes in columns:\n        cnt = Counter(votes)\n        max_votes = max(cnt.values())\n        tied_labels = [label for (label, v) in cnt.items() if v == max_votes]\n        winner = min(tied_labels)\n        final_predictions.append(winner)\n    return final_predictions"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef layer_sizes(X: np.ndarray, Y: np.ndarray) -> tuple[int, int, int]:\n    \"\"\"Return the sizes of the input, hidden, and output layers.\n\n    Args:\n        X: 2-D NumPy array of shape (n_x, m) containing the training input.\n        Y: 2-D NumPy array of shape (n_y, m) containing the labels.\n\n    Returns:\n        Tuple (n_x, n_h, n_y) where n_h is fixed to 10.\n    \"\"\"\n    n_x = X.shape[0]\n    n_h = 10\n    n_y = Y.shape[0]\n    return (n_x, n_h, n_y)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses numpy.logaddexp to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape\n        but is converted to a pure Python list. For scalar inputs a single\n        float is returned.\n    \"\"\"\n    arr = np.asarray(z, dtype=float)\n    y = np.logaddexp(0.0, arr)\n    y_rounded = np.round(y, 4)\n    if y_rounded.ndim == 0:\n        return float(y_rounded)\n    return y_rounded.tolist()"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str):\n    \"\"\"Forward propagation for a single neural-network layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer, shape (n_{l-1}, m).\n    W : np.ndarray\n        Weight matrix for the current layer, shape (n_l, n_{l-1}).\n    b : np.ndarray\n        Bias vector for the current layer, shape (n_l, 1).\n    activation : str\n        The activation to be used: either \"relu\" or \"sigmoid\".\n\n    Returns\n    -------\n    tuple\n        First element is the layer output (rounded to four decimals and\n        converted to a Python list).  Second element is a cache that will\n        be needed for back-propagation.\n    \"\"\"\n    Z = W.dot(A_prev) + b\n    if activation == 'sigmoid':\n        A = 1 / (1 + np.exp(-Z))\n    elif activation == 'relu':\n        A = np.maximum(0, Z)\n    else:\n        raise ValueError(f'Unsupported activation: {activation}')\n    assert A.shape == (W.shape[0], A_prev.shape[1]), f'Shape mismatch: got {A.shape}, expected {(W.shape[0], A_prev.shape[1])}'\n    A_list = A.round(4).tolist()\n    linear_cache = (A_prev, W, b)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A_list, cache)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    estimates = getattr(policy, 'ev_estimates', None)\n    if estimates is None and isinstance(policy, dict):\n        estimates = policy.get('ev_estimates', None)\n    if not isinstance(estimates, dict) or len(estimates) == 0:\n        return np.nan\n    arm_evs = getattr(bandit, 'arm_evs', None)\n    if arm_evs is None and isinstance(bandit, dict):\n        arm_evs = bandit.get('arm_evs', None)\n    se_sum = 0.0\n    count = 0\n    for arm_index in sorted(estimates.keys()):\n        est = estimates[arm_index]\n        true = arm_evs[arm_index]\n        diff = est - true\n        se_sum += diff * diff\n        count += 1\n    mse_val = se_sum / count\n    return round(mse_val, 4)"}
{"task_id": 91, "completion_id": 0, "solution": "import numpy as np\ndef relu_backward(dA: list[list[int | float]], activation_cache: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"Backward pass of the ReLU activation function.\n\n    Parameters\n    ----------\n    dA : list[list[int | float]]\n        Upstream gradient from the next layer in the network.\n    activation_cache : list[list[int | float]]\n        Cached pre-activation values (Z) from the forward pass.\n\n    Returns\n    -------\n    list[list[int | float]]\n        Gradient with respect to Z, having the same shape as *dA*.\n        Returns -1 if *dA* and *activation_cache* do not share the same shape.\n    \"\"\"\n    dA_np = np.array(dA)\n    Z_np = np.array(activation_cache)\n    if dA_np.shape != Z_np.shape:\n        return -1\n    dZ_np = dA_np * (Z_np > 0)\n    return dZ_np.tolist()"}
{"task_id": 92, "completion_id": 0, "solution": "import numbers\ndef is_number(a) -> bool:\n    \"\"\"Check whether the input value is numeric.\n\n    A value is considered numeric if it is an instance of ``numbers.Number``\n    (int, float, complex, Fraction, Decimal, etc.) but **not** a boolean.\n\n    Args:\n        a: Any Python object.\n\n    Returns:\n        bool: True if ``a`` is numeric and not a bool, otherwise False.\n    \"\"\"\n    return isinstance(a, numbers.Number) and (not isinstance(a, bool))"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"Compute the element-wise Rectified Linear Unit (ReLU) of *Z* and return\n    both the activation and the original input.\n\n    Args:\n        Z (array-like): A NumPy array, Python scalar or (nested) list of\n            numbers representing the pre-activation values.\n\n    Returns:\n        tuple[list, list]: A tuple `(A, cache)` where `A` is the ReLU of `Z`\n            and `cache` is `Z` itself, both converted to Python lists.\n    \"\"\"\n    Z_arr = np.array(Z)\n    A_arr = np.maximum(0, Z_arr)\n    return (A_arr.tolist(), Z_arr.tolist())"}
{"task_id": 94, "completion_id": 0, "solution": "from collections import Counter\ndef knn_majority_vote(neighbors_targets: list[str | int]) -> str | int:\n    \"\"\"Return the majority class label among k-NN neighbours.\n\n    Args:\n        neighbors_targets: A list containing the class labels of the k nearest\n            neighbours.\n\n    Returns:\n        The label that appears most frequently. In case of a tie, the smallest\n        label according to Python\u2019s default ordering is returned.\n    \"\"\"\n    if not neighbors_targets:\n        raise ValueError('neighbors_targets must not be empty')\n    counts = Counter(neighbors_targets)\n    max_count = max(counts.values())\n    tied_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n    return min(tied_labels)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive\u2010smoothed log\u2010probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    for sent in corpus:\n        for w in sent.split():\n            vocab.add(w)\n    vocab.add('<UNK>')\n    V = len(vocab)\n    counters = [Counter() for _ in range(N + 1)]\n    total_unigrams = 0\n    for sent in corpus:\n        tokens = sent.split()\n        total_unigrams += len(tokens)\n        for n in range(1, N + 1):\n            if len(tokens) < n:\n                continue\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i + n])\n                counters[n][ngram] += 1\n    seq_tokens = sequence.split()\n    if len(seq_tokens) < N:\n        return 0.0\n    seq_mapped = [w if w in vocab else '<UNK>' for w in seq_tokens]\n    log_prob = 0.0\n    for i in range(N - 1, len(seq_mapped)):\n        if N > 1:\n            context = tuple(seq_mapped[i - (N - 1):i])\n        else:\n            context = ()\n        word = seq_mapped[i]\n        ngram = context + (word,)\n        count_ngram = counters[N].get(ngram, 0)\n        if N > 1:\n            count_context = counters[N - 1].get(context, 0)\n        else:\n            count_context = total_unigrams\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 97, "completion_id": 0, "solution": "import numpy as np\ndef drelu(Z):\n    \"\"\"Return the element-wise derivative of the ReLU activation.\n\n    Parameters\n    ----------\n    Z : int | float | list | numpy.ndarray\n        Input data that can be a scalar, list (any depth), or ndarray.\n\n    Returns\n    -------\n    float | list\n        Derivative of ReLU with the same shape layout as *Z* (float if *Z* is a scalar).\n    \"\"\"\n    Z_arr = np.array(Z)\n    dZ_arr = (Z_arr > 0).astype(float)\n    if isinstance(Z, (int, float)):\n        return float(dZ_arr)\n    return dZ_arr.tolist()"}
{"task_id": 99, "completion_id": 0, "solution": "import numpy as np\ndef relu_(Z):\n    \"\"\"Apply the element-wise Rectified Linear Unit (ReLU) activation.\n\n    The function keeps the container type of the input:\n    scalar \u2192 scalar, list \u2192 list, NumPy array \u2192 NumPy array.\n\n    Args:\n        Z (int | float | list | numpy.ndarray): Input data \u2013 scalar, 1-D or 2-D.\n\n    Returns:\n        Same type as *Z* with all negative values clipped to 0.\n    \"\"\"\n    if isinstance(Z, np.ndarray):\n        return np.maximum(Z, 0)\n    elif isinstance(Z, list):\n        clipped = np.maximum(np.array(Z), 0)\n        return clipped.tolist()\n    else:\n        try:\n            return Z if Z > 0 else 0\n        except Exception:\n            return np.maximum(Z, 0)"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef classification_error(actual, predicted):\n    \"\"\"Compute the proportion of incorrect predictions.\n\n    Parameters\n    ----------\n    actual : list | tuple | numpy.ndarray\n        Ground-truth labels.\n    predicted : list | tuple | numpy.ndarray\n        Predicted labels from a classifier.\n\n    Returns\n    -------\n    float | int\n        The classification error rate rounded to four decimals, or \u22121 when\n        the input lengths are not identical.\n    \"\"\"\n    actual_arr = np.asarray(actual)\n    predicted_arr = np.asarray(predicted)\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    total = actual_arr.size\n    if total == 0:\n        return 0.0\n    mismatches = np.count_nonzero(actual_arr != predicted_arr)\n    error_rate = mismatches / total\n    return float(round(error_rate, 4))"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef softmax(x: np.ndarray, axis: int=1) -> list:\n    \"\"\"Apply the softmax activation function along a specified axis.\n\n    This function reproduces the behaviour of Keras' backend version shown\n    in the prompt while working solely with NumPy.  The output is converted\n    to a nested Python list and every probability is rounded to four decimals.\n\n    Args:\n        x: NumPy ndarray with **at least two dimensions**.\n        axis: Integer axis along which to apply the softmax.  Negative indices\n               follow NumPy\u2019s convention (e.g. ``axis=-1`` refers to the last\n               axis).\n\n    Returns:\n        Nested Python lists containing the softmax probabilities (rounded to\n        4 decimals).\n\n    Raises:\n        ValueError: If ``x`` is 1-D (``x.ndim == 1``).\n    \"\"\"\n    if x.ndim == 1:\n        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n    x_max = np.max(x, axis=axis, keepdims=True)\n    shifted = x - x_max\n    exp_shifted = np.exp(shifted)\n    sum_exp = np.sum(exp_shifted, axis=axis, keepdims=True)\n    soft = exp_shifted / sum_exp\n    soft_rounded = np.round(soft, 4)\n    return soft_rounded.tolist()"}
{"task_id": 102, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_regression_predict(x: list[float], y: list[float], degree: int, x_pred: list[float]) -> list[float]:\n    \"\"\"Fit a polynomial regression model and return predictions.\n\n    Parameters\n    ----------\n    x : list[float]\n        Training input values.\n    y : list[float]\n        Training target values.\n    degree : int\n        Degree of the polynomial to be fitted (must be >= 0).\n    x_pred : list[float]\n        Values at which the fitted model should be evaluated.\n\n    Returns\n    -------\n    list[float]\n        Predicted values for *x_pred* rounded to 4 decimal places,\n        or -1 if the model cannot be fitted.\n    \"\"\"\n    if degree < 0:\n        return -1\n    if len(x) != len(y):\n        return -1\n    if len(x) == 0:\n        return -1\n    if len(x) < degree + 1:\n        return -1\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    X = np.vander(x_arr, N=degree + 1, increasing=True)\n    try:\n        (w, *_) = np.linalg.lstsq(X, y_arr, rcond=None)\n    except np.linalg.LinAlgError:\n        return -1\n    x_pred_arr = np.array(x_pred, dtype=float)\n    X_pred = np.vander(x_pred_arr, N=degree + 1, increasing=True)\n    y_pred = X_pred @ w\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_pdf(x, mean, sigma):\n    \"\"\"Compute the Gaussian probability density for each element in *x*.\n\n    The function returns a list of floats rounded to 5 decimal places. If *sigma*\n    is not strictly positive the function returns -1.\n\n    Args:\n        x (list | tuple | np.ndarray | float | int): Values at which to evaluate the PDF.\n        mean (float | int): Distribution mean (\u03bc).\n        sigma (float | int): Distribution standard deviation (\u03c3).\n\n    Returns:\n        list[float] | int: The PDF values or -1 when \u03c3 \u2264 0.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    x_arr = np.array(x, dtype=float)\n    if x_arr.size == 0:\n        return []\n    coeff = 1.0 / (sigma * np.sqrt(2 * np.pi))\n    exponent = -(x_arr - mean) ** 2 / (2 * sigma * sigma)\n    pdf_vals = coeff * np.exp(exponent)\n    pdf_rounded = np.round(pdf_vals, 5)\n    return pdf_rounded.tolist()"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef adam_step(theta: np.ndarray, grad: np.ndarray, m_prev: np.ndarray, v_prev: np.ndarray, t: int, alpha: float=0.01, beta1: float=0.9, beta2: float=0.99, epsilon: float=1e-09) -> tuple[list, list, list, int]:\n    \"\"\"Perform one iteration of the Adam optimisation algorithm.\n\n    Parameters\n    ----------\n    theta : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to *theta*.\n    m_prev : np.ndarray\n        First moment vector from the previous time step.\n    v_prev : np.ndarray\n        Second moment vector from the previous time step.\n    t : int\n        Current time-step counter (starting at 1).\n    alpha : float, optional\n        Learning rate. Default is 0.01.\n    beta1 : float, optional\n        Exponential decay rate for the first moment. Default is 0.9.\n    beta2 : float, optional\n        Exponential decay rate for the second moment. Default is 0.99.\n    epsilon : float, optional\n        Small constant for numerical stability. Default is 1e-9.\n\n    Returns\n    -------\n    tuple[list, list, list, int]\n        A tuple containing the updated parameters, the new first and\n        second moment estimates, and the incremented time step. All\n        numerical values are rounded to 6 decimal places and converted\n        to regular Python lists.\n    \"\"\"\n    m_t = beta1 * m_prev + (1.0 - beta1) * grad\n    v_t = beta2 * v_prev + (1.0 - beta2) * (grad * grad)\n    m_hat = m_t / (1.0 - beta1 ** t)\n    v_hat = v_t / (1.0 - beta2 ** t)\n    theta_new = theta - alpha * m_hat / (np.sqrt(v_hat) + epsilon)\n    theta_new = np.round(theta_new, 6)\n    m_t = np.round(m_t, 6)\n    v_t = np.round(v_t, 6)\n    theta_list = theta_new.tolist()\n    m_list = m_t.tolist()\n    v_list = v_t.tolist()\n    next_t = t + 1\n    return (theta_list, m_list, v_list, next_t)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    I_K = np.eye(K)\n    for iteration in range(max_iter):\n        A = H @ H.T + alpha * I_K\n        V = X @ H.T\n        W = np.linalg.solve(A, V.T).T\n        B = W.T @ W + alpha * I_K\n        U = W.T @ X\n        H = np.linalg.solve(B, U)\n        X_hat = W @ H\n        recon_error = np.linalg.norm(X - X_hat, ord='fro') ** 2\n        reg = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        loss = recon_error + reg\n        if loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode each character in `text` into its integer token from `vocabulary`.\n    - Unknown characters \u2192 padding token 0.\n    - If text is shorter than time_steps, pad with 0s on the right.\n    - If text is longer, truncate to time_steps.\n    Returns a list of length exactly time_steps.\n    \"\"\"\n    encoded = [0] * time_steps\n    for (i, ch) in enumerate(text[:time_steps]):\n        encoded[i] = vocabulary.get(ch, 0)\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a sequence of integer token ids into a string using inverse_vocab.\n    - Skip any padding tokens (0).\n    - If an id is not found in inverse_vocab, skip it.\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx == 0:\n            continue\n        ch = inverse_vocab.get(int(idx))\n        if ch is not None:\n            chars.append(ch)\n    return ''.join(chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    1) Encode `text` to integer sequence of length TIME_STEPS.\n    2) Run model.predict on batch of size 1.\n    3) Take argmax over last axis to get predicted ids per time step.\n    4) Decode the predicted ids back to a string.\n    Returns the decoded prediction.\n    \"\"\"\n    seq_int = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([seq_int], dtype=np.int32)\n    preds = model.predict(batch)\n    pred_ids = np.argmax(preds, axis=-1)[0]\n    return int_to_string(pred_ids, inv_output_vocabulary)"}
{"task_id": 112, "completion_id": 0, "solution": "import re\nfrom collections import Counter"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If None, the function will use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        try:\n            examples = EXAMPLES\n        except NameError:\n            raise NameError('Global EXAMPLES is not defined, and no examples were passed in.')\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        pred_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {pred_str}')\n        predictions.append(pred_str)\n    return predictions"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 116, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    D = np.full(m, 1.0 / m)\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = np.inf\n        best_stump = None\n        for feature_i in range(n):\n            Xf = X_train[:, feature_i]\n            unique_vals = np.unique(Xf)\n            if unique_vals.size == 1:\n                thresholds = [unique_vals[0] - 1e-05, unique_vals[0] + 1e-05]\n            else:\n                thresholds = ((unique_vals[:-1] + unique_vals[1:]) / 2.0).tolist()\n                thresholds.insert(0, unique_vals[0] - 1e-05)\n                thresholds.append(unique_vals[-1] + 1e-05)\n            for thr in thresholds:\n                for polarity in [1, -1]:\n                    preds = np.ones(m)\n                    if polarity == 1:\n                        preds[Xf < thr] = -1\n                    else:\n                        preds[Xf < thr] = 1\n                    miss = (preds != y_train).astype(float)\n                    error = np.dot(D, miss)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_i, thr, polarity)\n        eps = 1e-10\n        best_error = max(eps, min(best_error, 1 - eps))\n        alpha = 0.5 * np.log((1.0 - best_error) / best_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        (feature_i, thr, polarity) = best_stump\n        Xf = X_train[:, feature_i]\n        preds = np.ones(m)\n        if polarity == 1:\n            preds[Xf < thr] = -1\n        else:\n            preds[Xf < thr] = 1\n        D *= np.exp(-alpha * y_train * preds)\n        D /= D.sum()\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n    for (stump, alpha) in zip(stumps, alphas):\n        (feature_i, thr, polarity) = stump\n        Xf_test = X_test[:, feature_i]\n        preds = np.ones(k)\n        if polarity == 1:\n            preds[Xf_test < thr] = -1\n        else:\n            preds[Xf_test < thr] = 1\n        agg += alpha * preds\n    final_preds = np.where(agg >= 0, 1, -1)\n    return final_preds.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 120, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef linear_regression(X: list[list[int | float]], y: list[int | float], n_iterations: int, learning_rate: float) -> list[float]:\n    \"\"\"Learn linear regression weights with batch gradient descent.\n\n    Args:\n        X: Training samples \u2013 list of lists with numerical feature values.\n        y: Target values \u2013 list of numbers, same length as X.\n        n_iterations: Number of gradient-descent steps to perform.\n        learning_rate: Positive learning rate controlling the step size.\n\n    Returns:\n        The learned weight vector as a list (bias first) rounded to 4 decimals.\n        If the input dimensions are incompatible the function must return -1.\n    \"\"\"\n    if len(X) != len(y):\n        return -1\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    m = X_arr.shape[0]\n    if m == 0:\n        return -1\n    ones_col = np.ones((m, 1), dtype=float)\n    X_aug = np.hstack((ones_col, X_arr))\n    N = X_aug.shape[1]\n    limit = 1.0 / math.sqrt(N)\n    w = np.random.uniform(-limit, limit, size=N)\n    for _ in range(n_iterations):\n        predictions = X_aug.dot(w)\n        errors = predictions - y_arr\n        gradient = 1.0 / m * X_aug.T.dot(errors)\n        w -= learning_rate * gradient\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_weights(X: list[list[int | float]], y: list[int | float]) -> list[float]:\n    \"\"\"Return the ordinary least-squares weight vector for Linear Regression.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        2-D list where each inner list contains the feature values for one sample.\n    y : list[int | float]\n        1-D list with the target value corresponding to each sample.\n\n    Returns\n    -------\n    list[float]\n        Weight vector [w0, w1, ..., wd] rounded to 4 decimal places, where\n        w0 is the intercept term.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    n_samples = X_np.shape[0]\n    ones = np.ones((n_samples, 1), dtype=float)\n    X_aug = np.hstack((ones, X_np))\n    pinv = np.linalg.pinv(X_aug)\n    w = pinv.dot(y_np)\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encoding(y: np.ndarray) -> list[list[int]]:\n    \"\"\"Convert a 1-D array of categorical values to one-hot encoded format.\n\n    You should detect the unique categories in *y*, sort them in ascending/\n    alphabetical order, and then build a binary matrix where each row\n    corresponds to an element of *y* and each column corresponds to one of\n    the unique categories.  A cell must contain **1** if the row\u2019s element\n    belongs to the column\u2019s category and **0** otherwise.\n\n    Args:\n        y: A one-dimensional NumPy array (or array-like object) containing\n           categorical values.\n\n    Returns:\n        A Python list of lists with 0/1 integers representing the one-hot\n        encoded matrix.\n    \"\"\"\n    arr = np.asarray(y)\n    if arr.ndim != 1:\n        arr = arr.flatten()\n    values = list(arr)\n    unique_cats = sorted(set(values))\n    cat_to_index = {cat: idx for (idx, cat) in enumerate(unique_cats)}\n    one_hot: list[list[int]] = []\n    n_cols = len(unique_cats)\n    for val in values:\n        row = [0] * n_cols\n        row[cat_to_index[val]] = 1\n        one_hot.append(row)\n    return one_hot"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, d: int=3, gamma: float | None=None, c0: float=1) -> list[list[float]]:\n    \"\"\"Compute the degree-d polynomial kernel between all rows of *X* and *Y*.\n\n    Args:\n        X: First data matrix as a list-of-lists, shape (N, C).\n        Y: Optional second data matrix; if *None* defaults to *X*.\n        d: Degree of the polynomial.\n        gamma: Scaling factor.  Uses 1/C when *None*.\n        c0: Bias term.\n\n    Returns:\n        Gram matrix as a (nested) Python list rounded to 4 decimals.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n    (_, C) = X_arr.shape\n    if gamma is None:\n        gamma = 1.0 / C\n    K = gamma * (X_arr @ Y_arr.T) + c0\n    K = K ** d\n    K = np.round(K, 4)\n    return K.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": ""}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 129, "completion_id": 0, "solution": "from itertools import islice, cycle\ndef cycle_sequence(sequence: list, samples: int) -> list:\n    \"\"\"Return the first *samples* items from an infinite cycle over *sequence*.\n\n    Args:\n        sequence (list | tuple): Finite input sequence.\n        samples (int): Number of items to return from the infinite cycle.\n\n    Returns:\n        list: A list containing *samples* items collected by looping over\n              *sequence* repeatedly. If *sequence* is empty or *samples*\n              is not positive, an empty list is returned.\n    \"\"\"\n    if samples <= 0 or not sequence:\n        return []\n    return list(islice(cycle(sequence), samples))"}
{"task_id": 130, "completion_id": 0, "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Any, List, Tuple\ndef outcome_probs(transitions: List[Tuple[Any, Any, Any, Any]], state: Any, action: Any) -> List[List[float]]:\n    \"\"\"Return empirical outcome probabilities for a given (state, action).\n\n    transitions: list of (state, action, reward, next_state) tuples.\n    state:       queried state.\n    action:      queried action.\n\n    The function returns a list of [next_state, probability] pairs sorted by\n    next_state.  Probabilities must be rounded to 4 decimal places.  If the\n    pair never occurred, return an empty list.\n    \"\"\"\n    next_states = [ns for (s, a, _, ns) in transitions if s == state and a == action]\n    if not next_states:\n        return []\n    counts = Counter(next_states)\n    total = sum(counts.values())\n    result = []\n    for ns in sorted(counts):\n        prob = round(counts[ns] / total, 4)\n        result.append([ns, prob])\n    return result"}
{"task_id": 131, "completion_id": 0, "solution": ""}
{"task_id": 132, "completion_id": 0, "solution": "import numpy as np\ndef linear(z):\n    \"\"\"Linear (identity) activation function.\n\n    Args:\n        z: Scalar (int or float), list, tuple or NumPy ndarray.\n\n    Returns:\n        The same value(s) as *z*, obeying the rules:\n            \u2022 Scalars (int or float) are returned unchanged.\n            \u2022 Lists or tuples are converted to a NumPy ndarray and returned.\n            \u2022 NumPy ndarrays are returned as-is (no copy, no modification).\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return z\n    if isinstance(z, (int, float)):\n        return z\n    if isinstance(z, (list, tuple)):\n        return np.array(z)\n    raise TypeError(f'Unsupported type for linear activation: {type(z)}')"}
{"task_id": 133, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_targets(X_train: list[list[int]], vocab_length: int) -> list[list[list[int]]]:\n    \"\"\"Convert integer-encoded sequences into a 3-D one-hot representation.\n\n    Parameters\n    ----------\n    X_train : list[list[int]]\n        A batch of sequences where each element is an integer token index.\n    vocab_length : int\n        The size of the vocabulary.\n\n    Returns\n    -------\n    list[list[list[int]]]\n        A nested list with shape (m, time_steps, vocab_length) representing the\n        one-hot encoded targets, or -1 if the input contains invalid indices.\n    \"\"\"\n    if not isinstance(vocab_length, int) or vocab_length <= 0:\n        return -1\n    one_hot_batch: list[list[list[int]]] = []\n    for seq in X_train:\n        one_hot_seq: list[list[int]] = []\n        for token in seq:\n            if not isinstance(token, int) or token < 0 or token >= vocab_length:\n                return -1\n            vec = [0] * vocab_length\n            vec[token] = 1\n            one_hot_seq.append(vec)\n        one_hot_batch.append(one_hot_seq)\n    return one_hot_batch"}
{"task_id": 134, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 135, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_predict(X_train: list[list[int | float]], y_train: list[int | float], X_test: list[list[int | float]]) -> list[float]:\n    \"\"\"Fits an OLS model via the normal equation and predicts on X_test.\n       Returns -1 if X^T X is singular (non\u2010invertible).\"\"\"\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    (n_train, _) = X_train_arr.shape\n    X_train_aug = np.hstack((np.ones((n_train, 1)), X_train_arr))\n    X_test_aug = np.hstack((np.ones((X_test_arr.shape[0], 1)), X_test_arr))\n    XtX = X_train_aug.T.dot(X_train_aug)\n    try:\n        XtX_inv = np.linalg.inv(XtX)\n    except np.linalg.LinAlgError:\n        return -1\n    beta = XtX_inv.dot(X_train_aug.T).dot(y_train_arr)\n    y_pred = X_test_aug.dot(beta)\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 136, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z: np.ndarray, axis: int=-1) -> list:\n    \"\"\"Compute the numerically-stable softmax of *z* along *axis*.\n\n    The function performs the following steps:\n      1. Subtract the maximum value along *axis* from every element of *z*.\n      2. Exponentiate the shifted values.\n      3. Divide by the sum of exponentials along the same axis.\n      4. Round the result to four decimal places.\n      5. Convert the NumPy array to a Python list and return it.\n\n    Args:\n        z: Input NumPy array containing raw scores.\n        axis: Axis along which softmax is computed (default: -1).\n\n    Returns:\n        A Python list with the same shape as *z* containing the softmax\n        probabilities rounded to four decimals.\n    \"\"\"\n    z_max = np.max(z, axis=axis, keepdims=True)\n    z_shifted = z - z_max\n    exp_z = np.exp(z_shifted)\n    sum_exp = np.sum(exp_z, axis=axis, keepdims=True)\n    softmax_vals = exp_z / sum_exp\n    softmax_rounded = np.round(softmax_vals, 4)\n    return softmax_rounded.tolist()"}
{"task_id": 138, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true: list, y_pred: list) -> float:\n    \"\"\"Compare y_true to y_pred and return the classification accuracy.\n\n    The function must:\n    \u2022 Return -1 if the two input sequences are not of the same non-zero length.\n    \u2022 Otherwise compute the proportion of positions in which the corresponding\n      elements are equal and round the result to four decimal places.\n\n    Args:\n        y_true (list): Ground-truth labels.\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: Accuracy rounded to four decimals, or -1 for invalid inputs.\n    \"\"\"\n    if not isinstance(y_true, (list, tuple)) or not isinstance(y_pred, (list, tuple)) or len(y_true) == 0 or (len(y_pred) == 0) or (len(y_true) != len(y_pred)):\n        return -1\n    total = len(y_true)\n    matches = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == yp))\n    acc = matches / total\n    return round(acc, 4)"}
{"task_id": 139, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef tanh_activation(z):\n    \"\"\"Compute the hyperbolic tangent (tanh) for every element of the input.\n\n    Args:\n        z (list[int | float] | np.ndarray): A one-dimensional iterable of\n            numeric values.\n\n    Returns:\n        list[float]: Tanh applied element-wise, rounded to four decimals.\n    \"\"\"\n    if z is None:\n        return []\n    try:\n        if len(z) == 0:\n            return []\n    except TypeError:\n        z = [z]\n    result = []\n    for xi in z:\n        x = float(xi)\n        t = 2.0 / (1.0 + math.exp(-2.0 * x)) - 1.0\n        result.append(round(t, 4))\n    return result"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    if grid[0][0] != '.' or grid[n - 1][n - 1] != '.':\n        return -1\n    INF = math.inf\n    fire_time = [[INF] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    while q:\n        (x, y) = q.popleft()\n        t0 = fire_time[x][y]\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t0 + 1:\n                    fire_time[nx][ny] = t0 + 1\n                    q.append((nx, ny))\n    if fire_time[0][0] <= 0 or fire_time[n - 1][n - 1] <= 0:\n        return -1\n    visited = [[False] * n for _ in range(n)]\n    visited[0][0] = True\n    q = deque([(0, 0, 0)])\n    while q:\n        (x, y, t) = q.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        for (dx, dy) in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            (nx, ny) = (x + dx, y + dy)\n            nt = t + 1\n            if 0 <= nx < n and 0 <= ny < n:\n                if not visited[nx][ny] and grid[nx][ny] == '.' and (fire_time[nx][ny] > nt):\n                    visited[nx][ny] = True\n                    q.append((nx, ny, nt))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors classifier.\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_train, n_features)\n        Training data.\n    y_train : np.ndarray, shape (n_train,)\n        Training labels.\n    X_test : np.ndarray, shape (n_test, n_features)\n        Test data to classify.\n    k : int\n        Number of neighbors to use.\n    metric : str, optional (default='euclidean')\n        Distance metric to use: 'euclidean', 'manhattan', or 'cosine'.\n        If unknown, falls back to 'euclidean'.\n    Returns\n    -------\n    np.ndarray, shape (n_test,)\n        Predicted labels for X_test.\n    \"\"\"\n    metric = metric.lower()\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        metric = 'euclidean'\n    X_train = np.asarray(X_train)\n    y_train = np.asarray(y_train)\n    X_test = np.asarray(X_test)\n    (n_train, n_feat) = X_train.shape\n    n_test = X_test.shape[0]\n    if metric == 'euclidean':\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sqrt(np.sum(diffs ** 2, axis=2))\n    elif metric == 'manhattan':\n        diffs = X_test[:, None, :] - X_train[None, :, :]\n        dists = np.sum(np.abs(diffs), axis=2)\n    else:\n        train_norms = np.linalg.norm(X_train, axis=1)\n        test_norms = np.linalg.norm(X_test, axis=1)\n        eps = 1e-12\n        train_norms = np.maximum(train_norms, eps)\n        test_norms = np.maximum(test_norms, eps)\n        dots = X_test.dot(X_train.T)\n        norm_matrix = np.outer(test_norms, train_norms)\n        cos_sim = dots / norm_matrix\n        cos_sim = np.clip(cos_sim, -1.0, 1.0)\n        dists = 1.0 - cos_sim\n    y_pred = np.empty(n_test, dtype=y_train.dtype)\n    for i in range(n_test):\n        nn_idx = np.argsort(dists[i])[:k]\n        neighbors = y_train[nn_idx]\n        (labels, counts) = np.unique(neighbors, return_counts=True)\n        max_count = counts.max()\n        winners = labels[counts == max_count]\n        y_pred[i] = winners.min()\n    return y_pred"}
{"task_id": 143, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 144, "completion_id": 0, "solution": "import numpy as np\ndef mean_absolute_error(actual, predicted):\n    \"\"\"Calculate the Mean Absolute Error (MAE) between two sequences.\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence containing the true values.\n    predicted : list | tuple | np.ndarray\n        Sequence containing the predicted values. Must have the same length\n        (and shape for multi-dimensional inputs) as ``actual``.\n\n    Returns\n    -------\n    float\n        The MAE rounded to 4 decimal places if inputs have the same shape,\n        otherwise -1.\n    \"\"\"\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    abs_diff = np.abs(actual_arr - predicted_arr)\n    mae = np.mean(abs_diff)\n    return round(mae, 4)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 147, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, learning_rate: float=0.1, epochs: int=10000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model and predict labels for `X_test`.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary target vector of shape (n_samples,). Must contain only 0 and 1.\n    X_test : np.ndarray\n        Feature matrix to classify of shape (m_samples, n_features).\n    learning_rate : float, optional (default=0.1)\n        Step size used by batch gradient descent.\n    epochs : int, optional (default=10000)\n        Number of gradient descent iterations.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for every row in `X_test`.\n    \"\"\"\n    unique_labels = np.unique(y_train)\n    if unique_labels.size == 1:\n        const_label = int(unique_labels[0])\n        return [const_label] * X_test.shape[0]\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    y = y_train.astype(float)\n\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n    for _ in range(epochs):\n        z = X_train.dot(w) + b\n        p = sigmoid(z)\n        error = p - y\n        dw = X_train.T.dot(error) / n_samples\n        db = np.sum(error) / n_samples\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    z_test = X_test.dot(w) + b\n    p_test = sigmoid(z_test)\n    y_pred = (p_test >= 0.5).astype(int)\n    return y_pred.tolist()"}
{"task_id": 148, "completion_id": 0, "solution": "from typing import List\nfrom typing import List\ndef exp_smoothing(data: List[float], alpha: float) -> List[float] | int:\n    \"\"\"Compute the exponential moving average of a numeric sequence.\n\n    Parameters\n    ----------\n    data : List[float]\n        Sequence of numeric observations.\n    alpha : float\n        Smoothing factor (0 \u2264 alpha \u2264 1).\n\n    Returns\n    -------\n    List[float] | int\n        List of smoothed values rounded to 4 decimal places, or -1 for\n        invalid input.\n    \"\"\"\n    if not data or alpha < 0 or alpha > 1:\n        return -1\n    smoothed: List[float] = []\n    s = data[0]\n    smoothed.append(round(s, 4))\n    for x in data[1:]:\n        s = (1 - alpha) * s + alpha * x\n        smoothed.append(round(s, 4))\n    return smoothed"}
{"task_id": 150, "completion_id": 0, "solution": "from heapq import heappush, heappop\nfrom typing import List, Tuple, Union\ndef find_shortest_path(grid: List[List[int]]) -> Union[int, List[Tuple[int, int]]]:\n    \"\"\"Find a shortest path from the top-left to the bottom-right corner of a maze.\n\n    Uses A* with the Manhattan-distance heuristic.\n    Returns a list of (row, col) tuples (including start and goal) if a path exists,\n    otherwise returns -1.\n    \"\"\"\n    m = len(grid)\n    n = len(grid[0])\n    start = (0, 0)\n    goal = (m - 1, n - 1)\n    if grid[0][0] == 1 or grid[goal[0]][goal[1]] == 1:\n        return -1\n\n    def h(r: int, c: int) -> int:\n        return abs(r - goal[0]) + abs(c - goal[1])\n    g_score = [[float('inf')] * n for _ in range(m)]\n    g_score[0][0] = 0\n    open_heap: List[Tuple[int, int, int, int]] = []\n    heappush(open_heap, (h(0, 0), 0, 0, 0))\n    came_from: dict = {}\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    while open_heap:\n        (f_curr, g_curr, r, c) = heappop(open_heap)\n        if (r, c) == goal:\n            path: List[Tuple[int, int]] = []\n            cur = goal\n            while cur in came_from:\n                path.append(cur)\n                cur = came_from[cur]\n            path.append(start)\n            path.reverse()\n            return path\n        if g_curr > g_score[r][c]:\n            continue\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < m and 0 <= nc < n and (grid[nr][nc] == 0):\n                tentative_g = g_curr + 1\n                if tentative_g < g_score[nr][nc]:\n                    g_score[nr][nc] = tentative_g\n                    f_new = tentative_g + h(nr, nc)\n                    heappush(open_heap, (f_new, tentative_g, nr, nc))\n                    came_from[nr, nc] = (r, c)\n    return -1"}
{"task_id": 151, "completion_id": 0, "solution": "import numpy as np\ndef activation_forward_backward(X: np.ndarray, activation: str, upstream_grad: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Apply an activation function and compute its local gradient.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Raw pre-activation values.\n    activation : str\n        Name of the activation function. Supported values are\n        \"sigmoid\", \"tanh\", \"relu\", and \"softmax\".\n    upstream_grad : np.ndarray\n        Gradient that arrives from the layer above (must have the same shape as X).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        A two-element tuple (A, grad) where:\n          \u2022 A    \u2013 the activation applied to X (rounded to 4 decimals).\n          \u2022 grad \u2013 the element-wise product of upstream_grad and the local\n                    derivative of the activation (rounded to 4 decimals).\n    \"\"\"\n    act = activation.lower()\n    if act == 'sigmoid':\n        A_raw = 1.0 / (1.0 + np.exp(-X))\n        dA_raw = A_raw * (1.0 - A_raw)\n    elif act == 'tanh':\n        A_raw = np.tanh(X)\n        dA_raw = 1.0 - A_raw ** 2\n    elif act == 'relu':\n        A_raw = np.maximum(0.0, X)\n        dA_raw = (A_raw > 0.0).astype(X.dtype)\n    elif act == 'softmax':\n        shift = X - np.max(X, axis=-1, keepdims=True)\n        exps = np.exp(shift)\n        sums = np.sum(exps, axis=-1, keepdims=True)\n        A_raw = exps / sums\n        dA_raw = np.ones_like(A_raw)\n    else:\n        raise ValueError(f\"Unsupported activation: '{activation}'\")\n    grad_raw = upstream_grad * dA_raw\n    A = np.round(A_raw, 4)\n    grad = np.round(grad_raw, 4)\n    return (A, grad)"}
{"task_id": 152, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 154, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: np.ndarray, Y: np.ndarray, gamma: float=0.1) -> list[list[float]]:\n    \"\"\"Return the RBF kernel matrix between two sets of vectors.\n\n    Args:\n        X: First input array of shape (n_samples, n_features) or (n_features,).\n        Y: Second input array of shape (m_samples, n_features) or (n_features,).\n        gamma: Positive scalar controlling the width of the kernel (default 0.1).\n\n    Returns:\n        A nested Python list containing the RBF kernel matrix rounded to six\n        decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    sq_X = np.sum(X * X, axis=1).reshape(-1, 1)\n    sq_Y = np.sum(Y * Y, axis=1).reshape(1, -1)\n    sq_dists = sq_X + sq_Y - 2 * X.dot(Y.T)\n    sq_dists = np.maximum(sq_dists, 0.0)\n    K = np.exp(-gamma * sq_dists)\n    K = np.round(K, 6)\n    return K.tolist()"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n                        'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    x = np.array(state, dtype=float)\n    z1 = x.dot(weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = a1.dot(weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = a2.dot(weights['W3']) + weights['b3']\n    a3 = np.tanh(z3)\n    return np.round(a3, 4).tolist()"}
{"task_id": 157, "completion_id": 0, "solution": ""}
{"task_id": 158, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(X: list[list[int | float]], y: list[int | float], alpha: float=1.0, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute Ridge Regression coefficients.\n\n    Args:\n        X: Nested list representing the feature matrix (shape N\u00d7M).\n        y: List of target values (length N).\n        alpha: Non-negative regularisation strength.\n        fit_intercept: Whether to add an unregularised intercept term.\n\n    Returns:\n        List of regression coefficients rounded to four decimals.  When\n        *fit_intercept* is True the first element is the intercept.\n    \"\"\"\n    X_mat = np.array(X, dtype=float)\n    y_vec = np.array(y, dtype=float)\n    if fit_intercept:\n        n_samples = X_mat.shape[0]\n        ones_col = np.ones((n_samples, 1), dtype=float)\n        X_mat = np.hstack([ones_col, X_mat])\n    n_params = X_mat.shape[1]\n    A = alpha * np.eye(n_params, dtype=float)\n    if fit_intercept:\n        A[0, 0] = 0.0\n    XtX = X_mat.T @ X_mat\n    to_invert = XtX + A\n    inv_term = np.linalg.inv(to_invert)\n    beta = inv_term @ (X_mat.T @ y_vec)\n    beta_rounded = np.round(beta, 4).tolist()\n    return beta_rounded"}
{"task_id": 159, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  All returned numbers are rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    col_norms = np.sum(X * X, axis=0)\n    w = np.zeros(n + 1, dtype=float)\n    for _ in range(max_iters):\n        if fit_intercept:\n            b = np.mean(y - X.dot(w[1:]))\n            w[0] = b\n        y_pred = w[0] + X.dot(w[1:])\n        for j in range(n):\n            old_wj = w[j + 1]\n            residual = y - y_pred + X[:, j] * old_wj\n            rho = X[:, j].dot(residual)\n            tau = lambda_param * m\n            if rho < -tau:\n                new_wj = (rho + tau) / col_norms[j]\n            elif rho > tau:\n                new_wj = (rho - tau) / col_norms[j]\n            else:\n                new_wj = 0.0\n            w[j + 1] = new_wj\n            y_pred += X[:, j] * (new_wj - old_wj)\n    bias = float(np.round(w[0], 4))\n    weights = np.round(w[1:], 4).tolist()\n    return (weights, bias)"}
{"task_id": 161, "completion_id": 0, "solution": ""}
{"task_id": 162, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(Y_hat: np.ndarray, Y: np.ndarray, epsilon: float=1e-20) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute average cross-entropy loss of a batch and its gradient.\n\n    Parameters\n    ----------\n    Y_hat : np.ndarray\n        Soft-max probabilities with shape (batch_size, num_classes).\n    Y : np.ndarray\n        One-hot encoded ground-truth labels with the same shape as *Y_hat*.\n    epsilon : float, optional\n        Small constant added for numerical stability before taking the log.\n\n    Returns\n    -------\n    tuple[float, list[list[float]]]\n        A tuple containing the scalar loss and the gradient (as a nested\n        Python list), both rounded to 4 decimal places.\n    \"\"\"\n    assert Y_hat.shape == Y.shape, f'Shape mismatch: Y_hat has shape {Y_hat.shape}, but Y has shape {Y.shape}'\n    m = Y.shape[0]\n    log_probs = np.log(Y_hat + epsilon)\n    loss = -np.sum(Y * log_probs) / m\n    loss = float(np.round(loss, 4))\n    grad = (Y_hat - Y) / m\n    grad_rounded = np.round(grad, 4).tolist()\n    return (loss, grad_rounded)"}
{"task_id": 163, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: list[float], y: list[float], degree: int, reg_factor: float, l1_ratio: float, learning_rate: float, n_iterations: int) -> list[float]:\n    \"\"\"Fit an Elastic Net regression model and return the predictions for X.\n\n    Parameters\n    ----------\n    X : list[float]\n        One-dimensional input feature values.\n    y : list[float]\n        Target values corresponding to *X*.\n    degree : int\n        Highest polynomial degree to be used (degree \u2265 0).\n    reg_factor : float\n        Overall regularisation strength \u03bb (\u03bb \u2265 0).\n    l1_ratio : float\n        Mixing parameter \u03b1 between L1 and L2 penalty (0 \u2264 \u03b1 \u2264 1).\n    learning_rate : float\n        Step size for gradient descent (ignored when \u03b1 == 0).\n    n_iterations : int\n        Number of gradient-descent iterations (ignored when \u03b1 == 0).\n\n    Returns\n    -------\n    list[float]\n        Model predictions on the supplied *X*, rounded to 4 decimals.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n = X_arr.shape[0]\n    Phi = np.vander(X_arr, N=degree + 1, increasing=True)\n    beta = np.zeros(degree + 1, dtype=float)\n    if l1_ratio == 0.0:\n        D = np.eye(degree + 1, dtype=float)\n        D[0, 0] = 0.0\n        ridge_coeff = n * reg_factor * (1.0 - l1_ratio) / 2.0\n        A = Phi.T.dot(Phi) + ridge_coeff * D\n        b = Phi.T.dot(y_arr)\n        beta = np.linalg.solve(A, b)\n    else:\n        for _ in range(n_iterations):\n            y_pred = Phi.dot(beta)\n            error = y_pred - y_arr\n            grad = 2.0 / n * Phi.T.dot(error)\n            reg_grad = reg_factor * ((1.0 - l1_ratio) * beta + l1_ratio * np.sign(beta))\n            reg_grad[0] = 0.0\n            grad += reg_grad\n            beta -= learning_rate * grad\n    y_final = Phi.dot(beta)\n    return [round(val, 4) for val in y_final]"}
{"task_id": 164, "completion_id": 0, "solution": "import numpy as np\ndef compute_log_loss(actual, predicted):\n    \"\"\"\n    Compute the binary classification log\u2010loss (cross\u2010entropy loss).\n\n    Parameters\n    ----------\n    actual : array\u2010like of shape (N,)\n        Ground\u2010truth binary labels (each element must be 0 or 1).\n    predicted : array\u2010like of shape (N,)\n        Predicted probabilities for the positive class (floats in [0,1]).\n\n    Returns\n    -------\n    float\n        The average log\u2010loss, rounded to 6 decimal places.\n\n    Raises\n    ------\n    ValueError\n        If `actual` and `predicted` have different lengths.\n    \"\"\"\n    actual = np.asarray(actual, dtype=float)\n    predicted = np.asarray(predicted, dtype=float)\n    if actual.shape != predicted.shape:\n        raise ValueError('`actual` and `predicted` must have the same shape.')\n    eps = 1e-15\n    p = np.clip(predicted, eps, 1 - eps)\n    losses = actual * np.log(p) + (1 - actual) * np.log(1 - p)\n    log_loss = -np.mean(losses)\n    return round(log_loss, 6)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function returns -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    xa = np.asarray(x)\n    ya = np.asarray(y)\n    if xa.ndim != 1 or ya.ndim != 1 or xa.shape[0] != ya.shape[0]:\n        return -1\n    n = xa.shape[0]\n    if n == 0:\n        return 0.0\n    diff_count = np.count_nonzero(xa != ya)\n    dist = diff_count / n\n    return round(dist, 4)"}
{"task_id": 166, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a Perceptron on (X_train, y_train) and predict labels for X_test.\n\n    Your implementation must follow the original Perceptron learning rule with\n    a learning-rate of 1.  Iterate over the training data up to *max_iter*\n    times and stop early if the algorithm converges (zero misclassifications\n    during one complete pass).  After training, use the learned parameters to\n    predict the labels (+1 or -1) for every sample in *X_test* and return them\n    as a Python list.\n\n    Parameters\n    ----------\n    X_train : np.ndarray of shape (n_samples, n_features)\n        Training feature matrix.\n    y_train : np.ndarray of shape (n_samples,)\n        Training labels. Each entry is either +1 or -1.\n    X_test : np.ndarray of shape (m_samples, n_features)\n        Unseen samples to classify after training.\n    max_iter : int, default=1000\n        Maximum number of complete passes over the training data.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (+1 or -1) for all samples in *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    for _ in range(max_iter):\n        errors = 0\n        for (x_i, y_i) in zip(X_train, y_train):\n            margin = y_i * (np.dot(w, x_i) + b)\n            if margin <= 0:\n                w += y_i * x_i\n                b += y_i\n                errors += 1\n        if errors == 0:\n            break\n    raw_scores = X_test.dot(w) + b\n    preds = np.where(raw_scores >= 0, 1, -1)\n    return preds.tolist()"}
{"task_id": 167, "completion_id": 0, "solution": "import numpy as np\ndef binary_cross_entropy(y_hat, y, epsilon: float=1e-10):\n    \"\"\"Compute the Binary Cross Entropy loss and its gradient.\n\n    Args:\n        y_hat (np.ndarray): Predicted probabilities in [0, 1].\n        y (np.ndarray): Ground-truth binary labels (0 or 1).\n        epsilon (float, optional): Small constant to avoid log(0). Defaults to 1e-10.\n\n    Returns:\n        tuple[float, list[float]]: The rounded BCE loss and the rounded gradient list.\n    \"\"\"\n    y_hat_clipped = np.clip(y_hat, epsilon, 1 - epsilon)\n    m = y_hat_clipped.shape[0]\n    loss = -np.mean(y * np.log(y_hat_clipped) + (1 - y) * np.log(1 - y_hat_clipped))\n    grad = (y_hat_clipped - y) / m\n    loss_rounded = round(float(loss), 4)\n    grad_rounded = [round(float(g), 4) for g in grad]\n    return (loss_rounded, grad_rounded)"}
{"task_id": 168, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]]) -> list[int]:\n    \"\"\"Gaussian Naive Bayes classifier.\n\n    You must complete this function so that it learns the parameters of a\n    Gaussian Naive Bayes model from the training data (`X_train`, `y_train`)\n    and returns a list with the predicted class label for every sample in\n    `X_test`.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        2-D list containing the training feature vectors.\n    y_train : list[int]\n        1-D list with the class label of every training sample.\n    X_test : list[list[float]]\n        2-D list with the feature vectors that must be classified.\n\n    Returns\n    -------\n    list[int]\n        A list with the predicted class label for every vector in `X_test`.\n    \"\"\"\n    X_train_arr = np.array(X_train, dtype=float)\n    y_train_arr = np.array(y_train, dtype=int)\n    X_test_arr = np.array(X_test, dtype=float)\n    classes = np.unique(y_train_arr)\n    eps = 1e-06\n    priors = {}\n    means = {}\n    variances = {}\n    n_samples = X_train_arr.shape[0]\n    for c in classes:\n        X_c = X_train_arr[y_train_arr == c]\n        priors[c] = X_c.shape[0] / n_samples\n        means[c] = X_c.mean(axis=0)\n        variances[c] = X_c.var(axis=0) + eps\n\n    def _log_gaussian(x, mu, var):\n        return -0.5 * (np.log(2 * np.pi * var) + (x - mu) ** 2 / var).sum()\n    y_pred = []\n    for x in X_test_arr:\n        log_probs = {}\n        for c in classes:\n            log_prior = np.log(priors[c])\n            log_likelihood = _log_gaussian(x, means[c], variances[c])\n            log_probs[c] = log_prior + log_likelihood\n        best_class = max(log_probs, key=log_probs.get)\n        y_pred.append(int(best_class))\n    return y_pred"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    M = N - 1\n    two_pi_over_M = 2.0 * math.pi / M\n    w = []\n    if window == 'hamming':\n        for n in range(N):\n            val = 0.54 - 0.46 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n    elif window == 'hann':\n        for n in range(N):\n            val = 0.5 - 0.5 * math.cos(two_pi_over_M * n)\n            w.append(round(val, 4))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            x = two_pi_over_M * n\n            val = a0 - a1 * math.cos(x) + a2 * math.cos(2.0 * x) - a3 * math.cos(3.0 * x)\n            w.append(round(val, 4))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Must supply 'coefficients' for generalized_cosine window\")\n        for n in range(N):\n            acc = 0.0\n            for (k, a_k) in enumerate(coefficients):\n                acc += a_k * math.cos(two_pi_over_M * k * n)\n            w.append(round(acc, 4))\n    else:\n        raise ValueError(f\"Unknown window type '{window}'\")\n    return w"}
{"task_id": 171, "completion_id": 0, "solution": ""}
{"task_id": 172, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef tanh_grad(z):\n    \"\"\"Derivative of the hyper-bolic tangent (tanh) activation.\n\n    The derivative is computed element-wise as 1 - tanh(z)**2.\n\n    Args:\n        z: A scalar, Python list or NumPy ndarray of floats/ints.\n\n    Returns:\n        float | list[float]: If `z` is scalar a float is returned, otherwise a\n        Python list with each element rounded to 4 decimals.\n    \"\"\"\n    arr = np.array(z, dtype=float)\n    grad = 1.0 - np.tanh(arr) ** 2\n    grad_rounded = np.round(grad, 4)\n    if grad_rounded.ndim == 0:\n        return float(grad_rounded)\n    return grad_rounded.tolist()"}
{"task_id": 173, "completion_id": 0, "solution": "def alphabetical_distance(candidate: str, target: str) -> int:\n    \"\"\"Calculate the alphabetical distance between two equal-length strings.\n\n    Parameters\n    ----------\n    candidate : str\n        The string produced by the genetic algorithm.\n    target : str\n        The desired target string.\n\n    Returns\n    -------\n    int\n        The sum of absolute ASCII differences between corresponding\n        characters. If the strings differ in length, return -1.\n    \"\"\"\n    if len(candidate) != len(target):\n        return -1\n    total = 0\n    for (c_char, t_char) in zip(candidate, target):\n        total += abs(ord(c_char) - ord(t_char))\n    return total"}
{"task_id": 174, "completion_id": 0, "solution": "import numpy as np\ndef gan_discriminator_metrics(predictions: np.ndarray, labels: np.ndarray) -> tuple[float, float]:\n    \"\"\"Calculate categorical cross-entropy loss & accuracy for a GAN discriminator.\n\n    Parameters\n    ----------\n    predictions : np.ndarray\n        Soft-max probabilities with shape (n_samples, n_classes).\n    labels : np.ndarray\n        One-hot encoded true labels with the same shape as *predictions*.\n\n    Returns\n    -------\n    tuple[float, float]\n        (loss, accuracy) \u2013 both rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-15\n    preds_clipped = np.clip(predictions, eps, 1.0 - eps)\n    per_sample_ce = -np.sum(labels * np.log(preds_clipped), axis=1)\n    avg_loss = np.mean(per_sample_ce)\n    pred_classes = np.argmax(predictions, axis=1)\n    true_classes = np.argmax(labels, axis=1)\n    acc = np.mean(pred_classes == true_classes)\n    return (round(float(avg_loss), 4), round(float(acc), 4))"}
{"task_id": 175, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 176, "completion_id": 0, "solution": ""}
{"task_id": 177, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\nimport numpy as np"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (isinstance(n_dims, int) and n_dims > 0 and isinstance(num_particles, int) and (num_particles > 0) and isinstance(num_iterations, int) and (num_iterations > 0)):\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    fitness = np.sum(positions ** 2, axis=1)\n    pbest_positions = positions.copy()\n    pbest_fitness = fitness.copy()\n    gbest_idx = np.argmin(pbest_fitness)\n    gbest_position = pbest_positions[gbest_idx].copy()\n    gbest_fitness = pbest_fitness[gbest_idx]\n    for _ in range(num_iterations):\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_particles, n_dims))\n        cognitive = c1 * r1 * (pbest_positions - positions)\n        social = c2 * r2 * (gbest_position - positions)\n        velocities = w * velocities + cognitive + social\n        positions = positions + velocities\n        np.clip(positions, lower_bound, upper_bound, out=positions)\n        fitness = np.sum(positions ** 2, axis=1)\n        better_mask = fitness < pbest_fitness\n        if np.any(better_mask):\n            pbest_positions[better_mask] = positions[better_mask]\n            pbest_fitness[better_mask] = fitness[better_mask]\n        min_idx = np.argmin(pbest_fitness)\n        min_val = pbest_fitness[min_idx]\n        if min_val < gbest_fitness:\n            gbest_fitness = min_val\n            gbest_position = pbest_positions[min_idx].copy()\n    return round(float(gbest_fitness), 4)"}
{"task_id": 179, "completion_id": 0, "solution": "import re\nimport string\ndef tokenize_chars(line: str, lowercase: bool=True, filter_punctuation: bool=True) -> list[str]:\n    \"\"\"Tokenise a text string at the character level.\n\n    Args:\n        line: Input text. If *None*, an empty list is returned.\n        lowercase: When *True*, convert *line* to lower-case before tokenisation.\n        filter_punctuation: When *True*, remove every character that is present in\n            ``string.punctuation`` (i.e. the 32 standard ASCII punctuation marks).\n\n    Returns:\n        A list of single-character strings after the selected preprocessing\n        steps have been applied. Consecutive spaces are collapsed into a single\n        space, and leading/trailing spaces are removed. If no characters remain\n        after preprocessing, an empty list is returned.\n    \"\"\"\n    if line is None:\n        return []\n    if lowercase:\n        line = line.lower()\n    if filter_punctuation:\n        punct_pattern = '[' + re.escape(string.punctuation) + ']'\n        line = re.sub(punct_pattern, '', line)\n    line = re.sub(' {2,}', ' ', line)\n    line = line.strip()\n    if not line:\n        return []\n    return list(line)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train, dtype=float)\n    X_test_np = np.array(X_test, dtype=float)\n    y_train_list = list(y_train)\n    n_train = X_train_np.shape[0]\n    if k <= 0 or k > n_train:\n        k_eff = n_train\n    else:\n        k_eff = k\n    preds = []\n    for x in X_test_np:\n        dists = np.linalg.norm(X_train_np - x, axis=1)\n        nn_idx = np.argsort(dists)[:k_eff]\n        neighbors = [y_train_list[i] for i in nn_idx]\n        if task == 'classification':\n            cnt = Counter(neighbors)\n            max_count = max(cnt.values())\n            top_labels = [label for (label, c) in cnt.items() if c == max_count]\n            pred = min(top_labels)\n        elif task == 'regression':\n            avg_val = sum(neighbors) / k_eff\n            pred = round(avg_val, 4)\n        else:\n            raise ValueError(\"task must be 'classification' or 'regression'\")\n        preds.append(pred)\n    return preds"}
{"task_id": 181, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, problem: str='classify') -> list:\n    \"\"\"Predict targets of *X_test* using k-Nearest Neighbours.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples.\n    y_train : list\n        Targets corresponding to *X_train*.\n    X_test : list[list[float]]\n        Samples to predict.\n    k : int, default 5\n        Number of neighbours to consider.\n    problem : {'classify', 'regress'}, default 'classify'\n        Task type.  Use majority vote for classification and mean for regression.\n\n    Returns\n    -------\n    list\n        Predictions for each row in *X_test*.\n    \"\"\"\n    X_train_arr = np.array(X_train, dtype=float)\n    X_test_arr = np.array(X_test, dtype=float)\n    n_train = X_train_arr.shape[0]\n    if problem not in ('classify', 'regress'):\n        raise ValueError(\"`problem` must be either 'classify' or 'regress'.\")\n    k_eff = min(k, n_train)\n    preds = []\n    for x in X_test_arr:\n        diffs = X_train_arr - x\n        dists = np.sqrt(np.sum(diffs * diffs, axis=1))\n        neigh_idx = np.argsort(dists)[:k_eff]\n        neigh_labels = [y_train[i] for i in neigh_idx]\n        if problem == 'classify':\n            cnt = Counter(neigh_labels)\n            max_count = max(cnt.values())\n            tied = [label for (label, c) in cnt.items() if c == max_count]\n            prediction = sorted(tied)[0]\n        else:\n            vals = [float(v) for v in neigh_labels]\n            mean_val = sum(vals) / len(vals)\n            prediction = round(mean_val, 4)\n        preds.append(prediction)\n    return preds"}
{"task_id": 182, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 183, "completion_id": 0, "solution": "import numpy as np\ndef he_uniform(weight_shape):\n    \"\"\"Return a NumPy ndarray initialised with He uniform distribution.\n\n    Parameters\n    ----------\n    weight_shape : tuple | list\n        Shape of the weight tensor. Must be of length 2 (dense layer) or 4\n        (2-D convolutional kernel).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the given shape with values drawn from \ud835\udcb0[\u2212limit, limit] where\n        limit = sqrt(6 / fan_in).\n    \"\"\"\n    shape = tuple(weight_shape)\n    ndim = len(shape)\n    if ndim == 2:\n        fan_in = shape[0]\n    elif ndim == 4:\n        (fW, fH, in_ch, _) = shape\n        fan_in = fW * fH * in_ch\n    else:\n        raise ValueError(f'he_uniform only supports weight tensors of rank 2 or 4; got rank {ndim}')\n    limit = np.sqrt(6.0 / fan_in)\n    return np.random.uniform(-limit, limit, size=shape)"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 185, "completion_id": 0, "solution": "import numpy as np\ndef dataset_shape(X):\n    \"\"\"Inspect the input data and return *(n_samples, n_features)*.\n\n    Parameters\n    ----------\n    X : array-like\n        Feature data. If *X* is one-dimensional it is treated as a single\n        sample, otherwise the first axis counts the samples.\n\n    Returns\n    -------\n    tuple of two ints\n        *(n_samples, n_features)* extracted from *X* following the same logic\n        used by the `_setup_input` method in the supplied code snippet.\n    \"\"\"\n    X_arr = np.asarray(X)\n    if X_arr.size == 0:\n        raise ValueError('Got an empty matrix.')\n    if X_arr.ndim == 1:\n        n_samples = 1\n        n_features = X_arr.shape[0]\n    else:\n        n_samples = X_arr.shape[0]\n        n_features = int(np.prod(X_arr.shape[1:], dtype=np.int64))\n    return (int(n_samples), int(n_features))"}
{"task_id": 186, "completion_id": 0, "solution": "import numpy as np\ndef baseline_mean_predict(X_train, y_train, X_test):\n    \"\"\"Baseline mean regressor.\n\n    Your task is to complete this function so that it returns the arithmetic\n    mean of *y_train* for every sample in *X_test*.\n\n    Parameters\n    ----------\n    X_train : array-like, shape (n_samples, n_features)\n        Training data (not used in the computation).\n    y_train : array-like, shape (n_samples,)\n        Target values corresponding to *X_train*.\n    X_test : array-like, shape (m_samples, n_features)\n        Test samples for which predictions are required.\n\n    Returns\n    -------\n    list of float\n        A list with *m_samples* elements where every element equals the mean\n        of *y_train* rounded to 4 decimal places.\n    \"\"\"\n    mean_val = float(np.mean(y_train))\n    mean_rounded = round(mean_val, 4)\n    m_samples = len(X_test)\n    return [mean_rounded] * m_samples"}
{"task_id": 188, "completion_id": 0, "solution": "import math"}
{"task_id": 189, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    key = name.lower()\n    supported = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if key not in supported:\n\n        def _bad(a, b):\n            return -1\n        return _bad\n\n    def _distance(a, b):\n        if not isinstance(a, (list, tuple, np.ndarray)) or not isinstance(b, (list, tuple, np.ndarray)):\n            return -1\n        try:\n            xa = np.array(a, dtype=float)\n            ya = np.array(b, dtype=float)\n        except Exception:\n            return -1\n        if xa.ndim != 1 or ya.ndim != 1:\n            return -1\n        if xa.size == 0 or ya.size == 0:\n            return -1\n        if xa.shape[0] != ya.shape[0]:\n            return -1\n        if key == 'euclidean':\n            diff = xa - ya\n            val = np.linalg.norm(diff)\n        elif key == 'manhattan':\n            val = np.sum(np.abs(xa - ya))\n        elif key == 'chebyshev':\n            val = np.max(np.abs(xa - ya))\n        else:\n            norm_x = np.linalg.norm(xa)\n            norm_y = np.linalg.norm(ya)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            cos_sim = np.dot(xa, ya) / (norm_x * norm_y)\n            val = 1.0 - cos_sim\n        return round(float(val), 4)\n    return _distance"}
{"task_id": 193, "completion_id": 0, "solution": "import numpy as np\ndef softsign(z):\n    \"\"\"Compute the Softsign activation function.\n\n    Softsign(z) = z / (1 + |z|)\n\n    The function accepts either a scalar or a list/NumPy array. For a scalar it\n    returns a float; for an array-like input it returns a list of floats, with\n    every element rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        if len(z) == 0:\n            return []\n        result = []\n        for element in z:\n            x = float(element)\n            y = x / (1.0 + abs(x))\n            result.append(round(y, 4))\n        return result\n    x = float(z)\n    y = x / (1.0 + abs(x))\n    return round(y, 4)"}
{"task_id": 194, "completion_id": 0, "solution": "import numpy as np\ndef adagrad_update(weights: list[float], gradients: list[float], G: list[float] | None=None, learning_rate: float=0.01, eps: float=1e-08) -> tuple[list[float], list[float]]:\n    \"\"\"Performs one Adagrad optimisation step.\n\n    Args:\n        weights: Current parameter vector.\n        gradients: Current gradient vector of the loss with respect to *weights*.\n        G: Running sum of squared gradients (None on the very first step).\n        learning_rate: Global learning-rate (\u03b7).\n        eps: Small constant to avoid division by zero.\n\n    Returns:\n        A tuple  (new_weights, new_G) where\n            new_weights \u2013 list of updated parameters rounded to 6 decimals,\n            new_G       \u2013 list of updated accumulated squared gradients\n                           rounded to 6 decimals.\n    \"\"\"\n    w = np.array(weights, dtype=float)\n    g = np.array(gradients, dtype=float)\n    if G is None:\n        G_prev = np.zeros_like(w)\n    else:\n        G_prev = np.array(G, dtype=float)\n    G_new = G_prev + g ** 2\n    adjusted_lr = learning_rate / np.sqrt(G_new + eps)\n    w_new = w - adjusted_lr * g\n    w_new_rounded = np.round(w_new, 6)\n    G_new_rounded = np.round(G_new, 6)\n    return (w_new_rounded.tolist(), G_new_rounded.tolist())"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional (i.e., env.action_space.spaces exists).\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        subspaces = env.action_space.spaces\n        action_dim = len(subspaces)\n        n_actions_per_dim: List[Union[int, float]] = []\n        saw_cont = False\n        for sp in subspaces:\n            if hasattr(sp, 'n'):\n                n_actions_per_dim.append(sp.n)\n            elif hasattr(sp, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                saw_cont = True\n            else:\n                raise ValueError('Sub-space is neither discrete nor continuous')\n        if saw_cont:\n            action_ids = None\n        else:\n            ranges = [range(int(n)) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n        return (n_actions_per_dim, action_ids, action_dim)\n    else:\n        space = env.action_space\n        if cont_action:\n            shape = getattr(space, 'shape', ())\n            if not shape:\n                action_dim = 1\n            else:\n                action_dim = int(shape[0])\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n            return (n_actions_per_dim, action_ids, action_dim)\n        else:\n            if not hasattr(space, 'n'):\n                raise ValueError(\"Expected a discrete space with attribute 'n'\")\n            n = int(space.n)\n            action_dim = 1\n            n_actions_per_dim = [n]\n            action_ids = [(i,) for i in range(n)]\n            return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        return [[] for _ in range(V)]\n    T = phi[0].shape[1]\n    counts = np.zeros((V, T), dtype=float)\n    for (doc_phi, doc_words) in zip(phi, corpus):\n        for (n, word_idx) in enumerate(doc_words):\n            counts[word_idx, :] += doc_phi[n, :]\n    col_sums = counts.sum(axis=0)\n    for t in range(T):\n        if col_sums[t] > 0:\n            counts[:, t] /= col_sums[t]\n    beta = np.round(counts, 4)\n    return beta.tolist()"}
{"task_id": 199, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 200, "completion_id": 0, "solution": "import numpy as np\ndef compute_l1_penalty(weights, C):\n    \"\"\"Compute the L1 regularization penalty.\n\n    Args:\n        weights: Sequence or np.ndarray containing numeric weights (any shape).\n        C: Regularization strength (non-negative float).\n\n    Returns:\n        L1 penalty (float) rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(weights, dtype=float)\n    if arr.size == 0:\n        return 0.0\n    abs_sum = np.abs(arr).sum()\n    penalty = C * abs_sum\n    return float(round(penalty, 4))"}
{"task_id": 201, "completion_id": 0, "solution": "import numpy as np\ndef max_norm(p, m=2.0, axis=0):\n    \"\"\"Clip the L2 norm of slices of *p* along *axis* so that they do not exceed *m*.\n\n    Parameters\n    ----------\n    p : np.ndarray\n        Input tensor (weights) of arbitrary shape.\n    m : float, optional\n        Maximum allowed L2 norm for each slice. Default is 2.0.\n    axis : int | None, optional\n        Axis along which to compute the norm. If None, the whole tensor is\n        considered a single vector. Default is 0.\n\n    Returns\n    -------\n    list\n        Tensor with the same shape as the input where every slice along *axis*\n        has been norm-clipped. The returned value is a (nested) Python list and\n        every number is rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-12\n    p = np.array(p, dtype=float)\n    if axis is None:\n        norm = np.linalg.norm(p.ravel(), ord=2)\n        factor = min(1.0, m / (norm + eps))\n        clipped = p * factor\n    else:\n        norm = np.linalg.norm(p, ord=2, axis=axis, keepdims=True)\n        factor = np.minimum(1.0, m / (norm + eps))\n        clipped = p * factor\n    clipped_rounded = np.round(clipped, 4)\n    return clipped_rounded.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n_samples = X.shape[0]\n    if k < 1 or k > n_samples:\n        raise ValueError('k must be between 1 and n_samples')\n    medoids = list(range(k))\n    medoid_set = set(medoids)\n    diff = X[:, None, :] - X[None, :, :]\n    D = np.sqrt(np.sum(diff * diff, axis=2))\n\n    def total_cost(meds):\n        dm = D[:, meds]\n        return float(np.min(dm, axis=1).sum())\n    current_cost = total_cost(medoids)\n    while True:\n        best_delta = 0.0\n        best_swap = None\n        for (i_med, m) in enumerate(medoids):\n            for o in range(n_samples):\n                if o in medoid_set:\n                    continue\n                cand = medoids.copy()\n                cand[i_med] = o\n                c_cost = total_cost(cand)\n                delta = current_cost - c_cost\n                if delta > best_delta:\n                    best_delta = delta\n                    best_swap = (i_med, o, c_cost)\n        if best_swap is not None:\n            (i_med, new_medoid, new_cost) = best_swap\n            old_medoid = medoids[i_med]\n            medoids[i_med] = new_medoid\n            medoid_set.remove(old_medoid)\n            medoid_set.add(new_medoid)\n            current_cost = new_cost\n        else:\n            break\n    distances_to_meds = D[:, medoids]\n    labels = np.argmin(distances_to_meds, axis=1)\n    return [int(l) for l in labels]"}
{"task_id": 203, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef build_alias_table(probs: list[float] | np.ndarray) -> tuple[list[float], list[int]]:\n    \"\"\"Builds probability and alias tables for the alias sampling method.\n\n    Args:\n        probs: 1-D list or NumPy array of positive floats summing to 1.\n\n    Returns:\n        Tuple (prob_table, alias_table) where:\n            * prob_table \u2013 list of floats rounded to 4 decimals.\n            * alias_table \u2013 list of ints.\n        If *probs* is invalid (negative entries or not summing to 1) return -1.\n    \"\"\"\n    arr = np.array(probs, dtype=float) if not isinstance(probs, np.ndarray) else probs.astype(float)\n    if arr.ndim != 1:\n        return -1\n    N = arr.size\n    if np.any(arr < 0):\n        return -1\n    if abs(arr.sum() - 1.0) > 1e-12:\n        return -1\n    scaled = list(arr * N)\n    small = [i for (i, v) in enumerate(scaled) if v < 1.0]\n    large = [i for (i, v) in enumerate(scaled) if v >= 1.0]\n    prob_table = [0.0] * N\n    alias_table = [0] * N\n    while small and large:\n        l = small.pop()\n        g = large.pop()\n        prob_table[l] = scaled[l]\n        alias_table[l] = g\n        scaled[g] = scaled[g] + scaled[l] - 1.0\n        if scaled[g] < 1.0:\n            small.append(g)\n        else:\n            large.append(g)\n    for idx in large + small:\n        prob_table[idx] = 1.0\n    prob_table = [round(p, 4) for p in prob_table]\n    return (prob_table, alias_table)"}
{"task_id": 204, "completion_id": 0, "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef num_missing(data) -> int:\n    \"\"\"Count missing values in a 1-D iterable.\n\n    An element is missing if it is ``None`` or ``NaN``.\n\n    Args:\n        data: Any 1-D iterable (list, tuple, NumPy array, etc.).\n\n    Returns:\n        int: The number of missing elements.\n    \"\"\"\n    count = 0\n    for x in data:\n        if x is None:\n            count += 1\n        else:\n            try:\n                if math.isnan(x):\n                    count += 1\n            except (TypeError, ValueError):\n                pass\n    return count"}
{"task_id": 205, "completion_id": 0, "solution": ""}
{"task_id": 206, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 207, "completion_id": 0, "solution": "def convolution_shape(img_height: int, img_width: int, filter_shape: tuple[int, int], stride: tuple[int, int], padding: tuple[int, int]) -> tuple[int, int] | int:\n    \"\"\"Compute the spatial dimensions of the output produced by a 2-D convolution.\n\n    Args:\n        img_height (int): Height of the input image.\n        img_width (int):  Width of the input image.\n        filter_shape (tuple[int, int]): (kernel_height, kernel_width).\n        stride (tuple[int, int]):       (stride_height, stride_width).\n        padding (tuple[int, int]):      (pad_height, pad_width).\n\n    Returns:\n        tuple[int, int] | int: (output_height, output_width) if the parameters\n            yield a valid integer output size; otherwise -1.\n    \"\"\"\n    (KH, KW) = filter_shape\n    (SH, SW) = stride\n    (PH, PW) = padding\n    params = [img_height, img_width, KH, KW, SH, SW, PH, PW]\n    if not all((isinstance(x, int) for x in params)):\n        return -1\n    if img_height <= 0 or img_width <= 0:\n        return -1\n    if KH <= 0 or KW <= 0:\n        return -1\n    if SH <= 0 or SW <= 0:\n        return -1\n    if PH < 0 or PW < 0:\n        return -1\n    num_h = img_height + 2 * PH - KH\n    num_w = img_width + 2 * PW - KW\n    if num_h < 0 or num_w < 0:\n        return -1\n    if num_h % SH != 0 or num_w % SW != 0:\n        return -1\n    OH = num_h // SH + 1\n    OW = num_w // SW + 1\n    if OH <= 0 or OW <= 0:\n        return -1\n    return (OH, OW)"}
{"task_id": 208, "completion_id": 0, "solution": "import numpy as np\ndef one_hot_encode(labels: list[str], categories: list[str] | None=None) -> list[list[int]]:\n    \"\"\"Convert categorical labels to a one-hot encoded matrix.\n\n    Args:\n        labels: A list of categorical labels of length N.\n        categories: Optional complete list of unique categories of length C.\n            If None, the set of categories is inferred from labels in the\n            order of their first appearance.\n\n    Returns:\n        A list of lists that represents the one-hot encoded matrix of shape\n        (N, C) where C is the number of categories. If an unknown label is\n        found when categories is supplied, the function returns -1.\n    \"\"\"\n    if categories is None:\n        seen = set()\n        categories = []\n        for lab in labels:\n            if lab not in seen:\n                seen.add(lab)\n                categories.append(lab)\n    idx_map = {cat: i for (i, cat) in enumerate(categories)}\n    C = len(categories)\n    N = len(labels)\n    if idx_map and any((lab not in idx_map for lab in labels)):\n        return -1\n    mat = np.zeros((N, C), dtype=int)\n    for (row, lab) in enumerate(labels):\n        col = idx_map[lab]\n        mat[row, col] = 1\n    return mat.tolist()"}
{"task_id": 209, "completion_id": 0, "solution": "import numpy as np\ndef analyze_bandit(payoffs: list[list[int | float]], payoff_probs: list[list[float]]) -> tuple[list[float], int, float]:\n    \"\"\"Return expected payoff of each arm, the best arm index, and its expected value.\n\n    The function must validate the inputs.  If any arm has mismatched list\n    lengths or probabilities that do not sum to 1 (within 1e-8), **return -1**.\n\n    Args:\n        payoffs: Ragged list ``payoffs[k][i]`` is the *i*-th payoff of arm *k*.\n        payoff_probs: Ragged list ``payoff_probs[k][i]`` is the probability of\n            obtaining ``payoffs[k][i]``.\n\n    Returns:\n        (expected_values, best_arm, best_ev) where\n            expected_values \u2013 list of expected payoffs rounded to 4 decimals,\n            best_arm        \u2013 index of the arm with the largest expected payoff,\n            best_ev         \u2013 that maximum expected payoff rounded to 4 decimals.\n\n        If the input is invalid the function returns **-1**.\n    \"\"\"\n    tol = 1e-08\n    K = len(payoffs)\n    if K != len(payoff_probs):\n        return -1\n    expected_values = []\n    for k in range(K):\n        vals = payoffs[k]\n        probs = payoff_probs[k]\n        if len(vals) != len(probs):\n            return -1\n        total_prob = sum(probs)\n        if abs(total_prob - 1.0) > tol:\n            return -1\n        ev = 0.0\n        for (v, p) in zip(vals, probs):\n            ev += v * p\n        expected_values.append(ev)\n    rounded_evs = [round(ev, 4) for ev in expected_values]\n    best_ev = max(rounded_evs)\n    best_arm = rounded_evs.index(best_ev)\n    return (rounded_evs, best_arm, best_ev)"}
{"task_id": 210, "completion_id": 0, "solution": "import functools\nfrom typing import Callable, Any\ndef doublewrap(decorator_func: Callable[..., Callable[..., Any]]) -> Callable[..., Any]:\n    \"\"\"Return a decorator that can be used *with* or *without* parentheses.\n\n    Args:\n        decorator_func: A callable that expects the function to decorate as\n            its first positional argument followed only by *optional*\n            positional or keyword arguments.\n\n    Returns:\n        A new decorator that forwards the call in the correct form so that\n        ``decorator_func`` can be applied either directly or after receiving\n        its own optional parameters.\n    \"\"\"\n\n    @functools.wraps(decorator_func)\n    def _decorator(*args, **kwargs):\n        if len(args) == 1 and (not kwargs) and callable(args[0]):\n            return decorator_func(args[0])\n\n        def _real_decorator(func):\n            return decorator_func(func, *args, **kwargs)\n        return _real_decorator\n    return _decorator"}
{"task_id": 211, "completion_id": 0, "solution": "def accuracy(actual, predicted):\n    \"\"\"Return the classification accuracy between two sequences of labels.\n\n    Parameters\n    ----------\n    actual : Sequence\n        The ground-truth labels.\n    predicted : Sequence\n        The predicted labels.\n\n    Returns\n    -------\n    float\n        Accuracy rounded to four decimal places, or -1 if the inputs\n        are empty or of unequal length.\n    \"\"\"\n    if len(actual) == 0 or len(predicted) == 0 or len(actual) != len(predicted):\n        return -1\n    mismatches = 0\n    for (a, p) in zip(actual, predicted):\n        if a != p:\n            mismatches += 1\n    total = len(actual)\n    classification_error = mismatches / total\n    accuracy_value = 1.0 - classification_error\n    return round(accuracy_value, 4)"}
{"task_id": 212, "completion_id": 0, "solution": "from collections import deque\ndef extract_realtime_model(graph: dict[str, list[str]]) -> list[str]:\n    \"\"\"Find a shortest path from 'input' to 'output_realtime'.\n\n    The *model* is given as an adjacency list `graph` where every key is the\n    name of a layer and the associated list contains the names of its outgoing\n    neighbours.\n\n    The function must return the names of the layers that lie on ONE shortest\n    path starting at the layer named ``\"input\"`` and ending at the layer named\n    ``\"output_realtime\"``. If several shortest paths are possible the\n    lexicographically smallest one (as complete lists) is returned.  \n    When no path exists an empty list is returned.\n    \"\"\"\n    src = 'input'\n    dst = 'output_realtime'\n    if src not in graph:\n        return []\n    q = deque()\n    q.append((src, [src]))\n    visited = set([src])\n    while q:\n        (node, path) = q.popleft()\n        if node == dst:\n            return path\n        for nbr in sorted(graph.get(node, [])):\n            if nbr not in visited:\n                visited.add(nbr)\n                q.append((nbr, path + [nbr]))\n    return []"}
{"task_id": 213, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(shape: tuple[int, ...]) -> list:\n    \"\"\"Return weights initialised with He Normal strategy.\n\n    Args:\n        shape: A tuple that represents the desired tensor shape.\n\n    Returns:\n        Nested Python list containing the initialised weights.\n        If fan_in == 0 (i.e. any dimension is zero), returns [].\n    \"\"\"\n    if any((dim == 0 for dim in shape)):\n        return []\n    if len(shape) == 0:\n        fan_in = fan_out = 1\n    elif len(shape) == 1:\n        fan_in = fan_out = shape[0]\n    elif len(shape) == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        (out_channels, in_channels) = (shape[0], shape[1])\n        receptive_field_size = int(np.prod(shape[2:]))\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    std = np.sqrt(2.0 / fan_in)\n    rng = np.random.default_rng(42)\n    weights = rng.normal(loc=0.0, scale=std, size=shape)\n    return weights.tolist()"}
{"task_id": 214, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(actual, predicted):\n    \"\"\"Calculate the Mean Squared Error (MSE) between two numerical sequences.\n\n    The function returns -1 if the two input sequences do not share the\n    same length. Otherwise, it returns the MSE rounded to 4 decimal\n    places. Both Python lists and NumPy arrays are supported.\n\n    Args:\n        actual (list[int | float] | np.ndarray): Ground-truth values.\n        predicted (list[int | float] | np.ndarray): Predicted values.\n\n    Returns:\n        float | int: The rounded MSE, or -1 when the inputs are incompatible.\n    \"\"\"\n    arr_actual = np.array(actual)\n    arr_predicted = np.array(predicted)\n    if arr_actual.shape != arr_predicted.shape:\n        return -1\n    mse_value = np.mean((arr_actual - arr_predicted) ** 2)\n    return float(np.round(mse_value, 4))"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    Xtr = np.array(x_train, dtype=float)\n    ytr = np.array(y_train, dtype=float).reshape(-1)\n    Xte = np.array(x_test, dtype=float)\n    if n_iterations < 1:\n        return -1\n    if Xtr.ndim != 2 or Xte.ndim != 2:\n        return -1\n    (n_tr, p_tr) = Xtr.shape\n    (n_te, p_te) = Xte.shape\n    if p_tr != p_te:\n        return -1\n    if ytr.shape[0] != n_tr:\n        return -1\n\n    def poly_expand(X, deg):\n        if deg == 1:\n            return X.copy()\n        Xs = [X ** d for d in range(1, deg + 1)]\n        return np.hstack(Xs)\n    Xtr_poly = poly_expand(Xtr, degree)\n    Xte_poly = poly_expand(Xte, degree)\n    means = Xtr_poly.mean(axis=0)\n    stds = Xtr_poly.std(axis=0)\n    stds_fixed = np.where(stds == 0, 1.0, stds)\n    Xtr_s = (Xtr_poly - means) / stds_fixed\n    Xte_s = (Xte_poly - means) / stds_fixed\n    Xtr_aug = np.hstack([np.ones((n_tr, 1)), Xtr_s])\n    Xte_aug = np.hstack([np.ones((n_te, 1)), Xte_s])\n    n_features = Xtr_aug.shape[1]\n    w = np.zeros(n_features, dtype=float)\n    alpha = reg_factor\n    r = l1_ratio\n    for _ in range(n_iterations):\n        preds = Xtr_aug.dot(w)\n        err = preds - ytr\n        grad = 2.0 / n_tr * Xtr_aug.T.dot(err)\n        sign_w = np.sign(w)\n        grad[1:] += alpha * ((1 - r) * w[1:] + r * sign_w[1:])\n        w -= learning_rate * grad\n    y_pred = Xte_aug.dot(w)\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": ""}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(cards: list[int]) -> int:\n        total = sum(cards)\n        if 1 in cards and total + 10 <= 21:\n            return total + 10\n        return total\n\n    def is_natural(cards: list[int]) -> bool:\n        return len(cards) == 2 and 1 in cards and (10 in cards)\n    p_score = hand_value(player)\n    d_score = hand_value(dealer)\n    p_nat = is_natural(player)\n    d_nat = is_natural(dealer)\n    if p_score > 21:\n        return -1.0\n    if p_nat and (not d_nat):\n        return 1.5\n    if d_score > 21:\n        return 1.0\n    if p_score > d_score:\n        return 1.0\n    elif p_score < d_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 220, "completion_id": 0, "solution": "import numpy as np\ndef estimate_lda_params(C_wt, C_dt, alpha, beta):\n    \"\"\"Estimate the word-topic (phi) and document-topic (theta) distributions\n    for an LDA model using symmetric Dirichlet smoothing.\n\n    Parameters\n    ----------\n    C_wt : numpy.ndarray\n        Word\u2013topic count matrix of shape (V, T).\n    C_dt : numpy.ndarray\n        Document\u2013topic count matrix of shape (D, T).\n    alpha : float\n        Symmetric Dirichlet prior for theta (document\u2013topic).\n    beta : float\n        Symmetric Dirichlet prior for phi  (word\u2013topic).\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        Rounded (to 4 decimals) phi and theta matrices as nested Python lists.\n    \"\"\"\n    if C_wt.size == 0:\n        phi = []\n    else:\n        (V, T) = C_wt.shape\n        col_sums = C_wt.sum(axis=0)\n        denom_phi = col_sums + V * beta\n        phi_mat = (C_wt + beta) / denom_phi[np.newaxis, :]\n        phi = np.round(phi_mat, 4).tolist()\n    if C_dt.size == 0:\n        theta = []\n    else:\n        (D, T_dt) = C_dt.shape\n        row_sums = C_dt.sum(axis=1)\n        denom_theta = row_sums + T_dt * alpha\n        theta_mat = (C_dt + alpha) / denom_theta[:, np.newaxis]\n        theta = np.round(theta_mat, 4).tolist()\n    return (phi, theta)"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if np.isscalar(z):\n        z_val = float(z)\n        if z_val >= 0:\n            exp_neg = math.exp(-z_val)\n            s = 1.0 / (1.0 + exp_neg)\n        else:\n            exp_pos = math.exp(z_val)\n            s = exp_pos / (1.0 + exp_pos)\n        return round(s, 4)\n    arr = np.array(z, dtype=np.float64)\n    s = np.empty_like(arr)\n    pos_mask = arr >= 0\n    neg_mask = ~pos_mask\n    s[pos_mask] = 1.0 / (1.0 + np.exp(-arr[pos_mask]))\n    exp_z = np.exp(arr[neg_mask])\n    s[neg_mask] = exp_z / (1.0 + exp_z)\n    s_rounded = np.round(s, 4)\n    return s_rounded.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list (or for a scalar input, a Python scalar) with the same\n        structure as *z*, where each value has been transformed by the Leaky ReLU.\n    \"\"\"\n    arr = np.asarray(z)\n    activated = np.where(arr >= 0, arr, a * arr)\n    return activated.tolist()"}
{"task_id": 225, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element is\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        (best_feature, best_thresh, best_polarity) = (None, None, None)\n        best_error = float('inf')\n        best_pred = None\n        for feature_i in range(n_features):\n            X_col = X_train[:, feature_i]\n            thresholds = np.unique(X_col)\n            for thresh in thresholds:\n                for polarity in [1, -1]:\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        pred[X_col < thresh] = -1\n                    else:\n                        pred = -np.ones(n_samples)\n                        pred[X_col < thresh] = 1\n                    misclassified = pred != y_train\n                    error = np.dot(w, misclassified)\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature_i\n                        best_thresh = thresh\n                        best_polarity = polarity\n                        best_pred = pred.copy()\n        alpha = 0.5 * math.log((1.0 - best_error) / (best_error + 1e-10))\n        classifiers.append((best_feature, best_thresh, best_polarity, alpha))\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)\n    n_test = X_test.shape[0]\n    final_pred = np.zeros(n_test)\n    for (feature_i, thresh, polarity, alpha) in classifiers:\n        X_col = X_test[:, feature_i]\n        pred = np.ones(n_test)\n        if polarity == 1:\n            pred[X_col < thresh] = -1\n        else:\n            pred = -np.ones(n_test)\n            pred[X_col < thresh] = 1\n        final_pred += alpha * pred\n    y_pred = np.sign(final_pred)\n    y_pred[y_pred == 0] = 1\n    return [int(label) for label in y_pred]"}
{"task_id": 227, "completion_id": 0, "solution": "import numpy as np\ndef value_network_forward(state: list[float], W1: list[list[float]], W2: list[list[float]], W3: list[list[float]] | list[float]) -> float:\n    \"\"\"Forward pass of a 2-hidden-layer value network using tanh activations.\n\n    Parameters\n    ----------\n    state : list[float]\n        1-D state vector of length N.\n    W1    : list[list[float]]\n        Weight matrix with shape (N, H1).\n    W2    : list[list[float]]\n        Weight matrix with shape (H1, H2).\n    W3    : list[list[float]] | list[float]\n        Weight matrix with shape (H2, 1) or (H2,) for the output layer.\n\n    Returns\n    -------\n    float\n        The scalar state-value rounded to 4 decimals, or \u22121 on shape error.\n    \"\"\"\n    x = np.array(state, dtype=float)\n    M1 = np.array(W1, dtype=float)\n    M2 = np.array(W2, dtype=float)\n    M3 = np.array(W3, dtype=float)\n    if x.ndim != 1:\n        return -1.0\n    N = x.shape[0]\n    if M1.ndim != 2 or M1.shape[0] != N:\n        return -1.0\n    H1 = M1.shape[1]\n    if M2.ndim != 2 or M2.shape[0] != H1:\n        return -1.0\n    H2 = M2.shape[1]\n    if M3.ndim == 1:\n        if M3.shape[0] != H2:\n            return -1.0\n    elif M3.ndim == 2:\n        if M3.shape != (H2, 1):\n            return -1.0\n    else:\n        return -1.0\n    h1 = np.tanh(x.dot(M1))\n    h2 = np.tanh(h1.dot(M2))\n    out = h2.dot(M3)\n    val = float(np.squeeze(out))\n    return round(val, 4)"}
{"task_id": 228, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_l2_distances(X: np.ndarray, Y: np.ndarray | None=None) -> list[list[float]]:\n    \"\"\"Compute the pairwise Euclidean (L2) distances between each row of X and each row of Y.\n\n    If *Y* is None, the function computes the distances inside *X* itself (Y = X).\n    All distances are rounded to four decimal places and returned as a plain Python nested list.\n\n    Args:\n        X: NumPy array of shape (N, C).\n        Y: NumPy array of shape (M, C) or None. Default is None.\n\n    Returns:\n        A nested Python list of shape (N, M) with the pairwise L2 distances.\n    \"\"\"\n    if Y is None:\n        Y = X\n    x_sq = np.sum(X * X, axis=1)\n    y_sq = np.sum(Y * Y, axis=1)\n    gram = X @ Y.T\n    dist_sq = x_sq[:, None] + y_sq[None, :] - 2 * gram\n    dist_sq = np.maximum(dist_sq, 0.0)\n    distances = np.round(np.sqrt(dist_sq), 4).tolist()\n    return distances"}
{"task_id": 230, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train, y_train, X_test):\n    \"\"\"\n    Gaussian Naive Bayes (binary) from scratch.\n\n    Parameters\n    ----------\n    X_train : np.ndarray, shape (n_samples, n_features)\n        Training data.\n    y_train : np.ndarray, shape (n_samples,)\n        Binary class labels (0 or 1).\n    X_test : np.ndarray, shape (m_samples, n_features)\n        Test data.\n\n    Returns\n    -------\n    List[int]\n        Predicted labels (0 or 1) for each test sample.\n    \"\"\"\n    eps = 1e-09\n    (n_samples, n_features) = X_train.shape\n    count0 = np.sum(y_train == 0)\n    count1 = np.sum(y_train == 1)\n    prior0 = count0 / n_samples\n    prior1 = count1 / n_samples\n    X0 = X_train[y_train == 0]\n    mu0 = np.mean(X0, axis=0)\n    var0 = np.var(X0, axis=0) + eps\n    X1 = X_train[y_train == 1]\n    mu1 = np.mean(X1, axis=0)\n    var1 = np.var(X1, axis=0) + eps\n    const0 = -0.5 * np.sum(np.log(2 * np.pi * var0))\n    const1 = -0.5 * np.sum(np.log(2 * np.pi * var1))\n    log_prior0 = np.log(prior0 + eps)\n    log_prior1 = np.log(prior1 + eps)\n    m_samples = X_test.shape[0]\n    quad0 = np.sum((X_test - mu0) ** 2 / var0, axis=1)\n    quad1 = np.sum((X_test - mu1) ** 2 / var1, axis=1)\n    log_post0 = log_prior0 + const0 - 0.5 * quad0\n    log_post1 = log_prior1 + const1 - 0.5 * quad1\n    preds = (log_post1 > log_post0).astype(int)\n    return preds.tolist()"}
{"task_id": 231, "completion_id": 0, "solution": ""}
{"task_id": 232, "completion_id": 0, "solution": ""}
{"task_id": 234, "completion_id": 0, "solution": "import numpy as np\ndef thompson_sampling_beta_binomial(successes: list[int], failures: list[int], prior_alpha: float=1.0, prior_beta: float=1.0, seed: int | None=None) -> int:\n    \"\"\"Single-step Thompson sampling for a Bernoulli multi-armed bandit.\n\n    Parameters\n    ----------\n    successes : list[int]\n        Number of observed successes for every arm.\n    failures  : list[int]\n        Number of observed failures for every arm (same length as *successes*).\n    prior_alpha : float, optional (default=1.0)\n        Shared Alpha parameter of the Beta prior.\n    prior_beta  : float, optional (default=1.0)\n        Shared Beta  parameter of the Beta prior.\n    seed : int | None, optional (default=None)\n        If given, NumPy\u2019s random seed is set to this value to obtain\n        deterministic samples.\n\n    Returns\n    -------\n    int\n        Index of the arm with the highest sampled payoff probability, or\n        -1 if the input is malformed.\n    \"\"\"\n    if not successes or not failures or len(successes) != len(failures):\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    alphas = np.array(successes, dtype=float) + prior_alpha\n    betas = np.array(failures, dtype=float) + prior_beta\n    samples = np.random.beta(alphas, betas)\n    return int(np.argmax(samples))"}
{"task_id": 235, "completion_id": 0, "solution": "import numpy as np\ndef to_one_hot(labels: np.ndarray, n_classes: int | None=None) -> np.ndarray:\n    \"\"\"Convert integer class labels to one-hot encodings.\n\n    Parameters\n    ----------\n    labels : np.ndarray\n        A 1-D NumPy array containing integer class labels.\n    n_classes : int | None, optional (default=None)\n        Total number of classes. If None, it will be inferred from the\n        data as `labels.max() + 1`.\n\n    Returns\n    -------\n    np.ndarray\n        A two-dimensional NumPy array of shape (N, C) where N is the\n        number of labels and C is the number of classes. Each row is a\n        one-hot vector corresponding to the associated label.\n\n    Raises\n    ------\n    ValueError\n        If `labels` is not 1-D or if `n_classes` is provided but\n        is smaller than `labels.max() + 1`.\n    \"\"\"\n    if labels.ndim != 1:\n        raise ValueError(f'labels must be a 1-D array, got ndim={labels.ndim}')\n    max_label = int(labels.max())\n    if n_classes is None:\n        n_classes = max_label + 1\n    elif n_classes < max_label + 1:\n        raise ValueError(f'n_classes ({n_classes}) must be >= max(labels)+1 ({max_label + 1})')\n    n_samples = labels.shape[0]\n    one_hot = np.zeros((n_samples, n_classes), dtype=float)\n    one_hot[np.arange(n_samples), labels.astype(int)] = 1.0\n    return one_hot"}
{"task_id": 236, "completion_id": 0, "solution": "import numpy as np\ndef minibatch(X: np.ndarray, batchsize: int=256, shuffle: bool=True):\n    \"\"\"Create a generator that yields index mini-batches.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (N, *). The first axis holds the samples.\n    batchsize : int, default = 256\n        Desired mini-batch size. The last batch may be smaller.\n    shuffle : bool, default = True\n        Whether to shuffle sample indices before splitting.\n\n    Returns\n    -------\n    tuple\n        (mb_generator, n_batches)\n        mb_generator : generator yielding NumPy integer arrays \u2013 the indices\n            of each mini-batch in the order they are processed.\n        n_batches : int \u2013 total number of mini-batches.\n    \"\"\"\n    N = X.shape[0]\n    if batchsize <= 0:\n        raise ValueError(f'batchsize must be > 0, got {batchsize}')\n    indices = np.arange(N, dtype=np.int64)\n    if shuffle:\n        np.random.shuffle(indices)\n    n_batches = (N + batchsize - 1) // batchsize\n\n    def _gen():\n        for i in range(n_batches):\n            start = i * batchsize\n            end = start + batchsize\n            yield indices[start:end]\n    return (_gen(), n_batches)"}
{"task_id": 237, "completion_id": 0, "solution": ""}
{"task_id": 239, "completion_id": 0, "solution": "import math\nfrom typing import Tuple\ndef determine_padding(filter_shape: Tuple[int, int], output_shape: str='same') -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Calculate the amount of zero-padding needed on all borders for a 2-D convolution.\n\n    Parameters\n    ----------\n    filter_shape : tuple[int, int]\n        (filter_height, filter_width) of the convolution kernel.\n    output_shape : str, optional (default=\"same\")\n        \"same\"  \u2013 pad so that the output spatial dimensions equal the input\n        \"valid\" \u2013 perform the convolution without any zero-padding.\n\n    Returns\n    -------\n    tuple[tuple[int, int], tuple[int, int]]\n        ((pad_top, pad_bottom), (pad_left, pad_right)) where every value is an\n        integer \u2265 0.\n    \"\"\"\n    if output_shape == 'valid':\n        return ((0, 0), (0, 0))\n    if output_shape == 'same':\n        (filter_h, filter_w) = filter_shape\n        pad_h_total = filter_h - 1\n        pad_w_total = filter_w - 1\n        pad_top = pad_h_total // 2\n        pad_bottom = pad_h_total - pad_top\n        pad_left = pad_w_total // 2\n        pad_right = pad_w_total - pad_left\n        return ((pad_top, pad_bottom), (pad_left, pad_right))\n    raise ValueError(f\"Unsupported output_shape '{output_shape}'. Use 'same' or 'valid'.\")"}
{"task_id": 240, "completion_id": 0, "solution": "import numpy as np\ndef create_encoding_dicts(obs_ids: list, action_ids: list, obs_encoder: dict | None=None, act_encoder: dict | None=None) -> dict:\n    \"\"\"Generate forward and backward mappings for observations and actions.\n\n    Args:\n        obs_ids (list): All distinct observation identifiers.\n        action_ids (list): All distinct action identifiers.\n        obs_encoder (dict | None, optional): Existing obs\u2192number mapping.\n        act_encoder (dict | None, optional): Existing act\u2192number mapping.\n\n    Returns:\n        dict: A dictionary that contains the keys 'obs2num', 'num2obs',\n        'act2num', and 'num2act'.\n    \"\"\"\n    if obs_encoder is not None:\n        obs2num = dict(obs_encoder)\n    else:\n        obs2num = {obs: idx for (idx, obs) in enumerate(obs_ids)}\n    num2obs = {num: obs for (obs, num) in obs2num.items()}\n    if act_encoder is not None:\n        act2num = dict(act_encoder)\n    else:\n        act2num = {act: idx for (idx, act) in enumerate(action_ids)}\n    num2act = {num: act for (act, num) in act2num.items()}\n    return {'obs2num': obs2num, 'num2obs': num2obs, 'act2num': act2num, 'num2act': num2act}"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 242, "completion_id": 0, "solution": "import math\ndef ucb1_select(ev_estimates: list[float], pull_counts: list[int], current_step: int, C: float=1.0) -> int:\n    \"\"\"Return the arm index that UCB1 would pick next.\n\n    PARAMETERS\n    ----------\n    ev_estimates : list[float]\n        Current empirical mean reward for every arm.\n    pull_counts  : list[int]\n        How many times each arm has been pulled so far (same length as\n        ``ev_estimates``).\n    current_step : int\n        The time-step about to be executed.  The quantity *T* in the UCB1\n        formula equals ``current_step + 1``.\n    C : float, default 1.0\n        Exploration parameter.  ``C = 1.0`` recovers the original UCB1.\n\n    RETURNS\n    -------\n    int\n        Index (0-based) of the arm selected by UCB1.\n    \"\"\"\n    for (i, count) in enumerate(pull_counts):\n        if count == 0:\n            return i\n    total_pulls = current_step + 1\n    log_term = math.log(total_pulls)\n    best_arm = 0\n    best_score = -float('inf')\n    for (i, (ev, count)) in enumerate(zip(ev_estimates, pull_counts)):\n        bonus = C * math.sqrt(2 * log_term / count)\n        score = ev + bonus\n        if score > best_score:\n            best_score = score\n            best_arm = i\n    return best_arm"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=float)\n    s_sum = np.sum(s)\n    z1 = max(0.0, s_sum)\n    logits = np.full((3,), 64.0 * z1)\n    state_value = 64.0 * z1\n    exp_shift = np.exp(logits - np.max(logits))\n    probs = exp_shift / np.sum(exp_shift)\n    action_probs = np.round(probs, 4).tolist()\n    state_value = float(np.round(state_value, 4))\n    return (action_probs, state_value)"}
{"task_id": 244, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\nimport math\ndef random_binary_tensor(shape: tuple, sparsity: float=0.5) -> list:\n    \"\"\"Generate a random binary tensor.\n\n    The function should create a tensor of the requested ``shape`` such that\n    each entry independently takes the value ``1.0`` with probability equal\n    to ``sparsity`` and ``0.0`` otherwise.\n\n    The result **must** be returned as a regular (nested) Python list obtained\n    via NumPy\u2019s ``tolist`` method.  If either ``shape`` or ``sparsity`` is\n    illegal (see task description) the function must return **-1**.\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) == 0:\n        return -1\n    for dim in shape:\n        if not isinstance(dim, int) or dim <= 0:\n            return -1\n    if not isinstance(sparsity, (int, float)):\n        return -1\n    if not math.isfinite(sparsity) or sparsity < 0.0 or sparsity > 1.0:\n        return -1\n    rnd = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_array = (rnd >= threshold).astype(float)\n    return binary_array.tolist()"}
{"task_id": 247, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_bandit_oracle(payoff_dists: list[tuple[float, float]], payoff_probs: list[float]) -> tuple[float, int] | int:\n    \"\"\"Determine the arm with the highest expected reward in a Gaussian bandit.\n\n    The function computes the expected reward for each arm (p_k * \u03bc_k) and\n    returns a tuple (best_ev, best_arm), where best_ev is rounded to 4 decimal\n    places and best_arm is the index of the arm with that expected reward.  \n    If the input is invalid (see task description) the function returns -1.\n    \"\"\"\n    if not payoff_dists or not payoff_probs or len(payoff_dists) != len(payoff_probs):\n        return -1\n    K = len(payoff_dists)\n    for i in range(K):\n        (mu, var) = payoff_dists[i]\n        p = payoff_probs[i]\n        if var <= 0:\n            return -1\n        if p < 0 or p > 1:\n            return -1\n    mus = np.array([dist[0] for dist in payoff_dists], dtype=float)\n    ps = np.array(payoff_probs, dtype=float)\n    evs = ps * mus\n    best_arm = int(np.argmax(evs))\n    best_ev_raw = float(evs[best_arm])\n    best_ev = round(best_ev_raw, 4)\n    return (best_ev, best_arm)"}
{"task_id": 248, "completion_id": 0, "solution": ""}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head (rounded to 4 d.p.)\n        value         : float          \u2013 scalar output of the critic head (rounded to 4 d.p.)\n    \"\"\"\n    x = np.array(state, dtype=float)\n    (W1, b1) = (np.array(params['W1'], dtype=float), np.array(params['b1'], dtype=float))\n    (W2, b2) = (np.array(params['W2'], dtype=float), np.array(params['b2'], dtype=float))\n    (W3, b3) = (np.array(params['W3'], dtype=float), np.array(params['b3'], dtype=float))\n    (Wa, ba) = (np.array(params['Wa'], dtype=float), np.array(params['ba'], dtype=float))\n    (Wc, bc) = (np.array(params['Wc'], dtype=float), np.array(params['bc'], dtype=float))\n\n    def relu(z):\n        return np.maximum(0, z)\n    h1 = relu(W1.dot(x) + b1)\n    h2 = relu(W2.dot(h1) + b2)\n    h3 = relu(W3.dot(h2) + b3)\n    logits = Wa.dot(h3) + ba\n    shifted = logits - np.max(logits)\n    exps = np.exp(shifted)\n    probs = exps / np.sum(exps)\n    value = float(Wc.dot(h3) + bc)\n\n    def smart_round(num: float) -> float:\n        r = round(num, 4)\n        if r == 0.0 or r == 1.0:\n            return float(f'{r:.1f}')\n        return r\n    probs_rounded = [smart_round(p) for p in probs.tolist()]\n    value_rounded = smart_round(value)\n    return (probs_rounded, value_rounded)"}
{"task_id": 251, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 252, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef least_squares_loss(actual: np.ndarray, predicted: np.ndarray) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the gradient and Hessian of the least-squares loss.\n\n    The least-squares loss is defined as 0.5 * ||actual \u2212 predicted||\u00b2.\n\n    Args:\n        actual: 1-D NumPy array containing the true labels/targets.\n        predicted: 1-D NumPy array containing the model predictions.\n\n    Returns:\n        A tuple (grad, hess):\n            grad  \u2013 Python list representing the gradient w.r.t. each prediction.\n            hess  \u2013 Python list representing the diagonal Hessian entries (all ones).\n    \"\"\"\n    grad_array = actual - predicted\n    grad = grad_array.tolist()\n    hess = [1.0] * actual.shape[0]\n    return (grad, hess)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_arr = np.asarray(w, dtype=float).ravel()\n    if not gradient:\n        l1_term = l1_ratio * np.sum(np.abs(w_arr))\n        l2_term = (1.0 - l1_ratio) * 0.5 * np.sum(w_arr ** 2)\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)\n    else:\n        grad = alpha * (l1_ratio * np.sign(w_arr) + (1.0 - l1_ratio) * w_arr)\n        return [round(float(g), 4) for g in grad]"}
{"task_id": 255, "completion_id": 0, "solution": "def usable_ace(hand: list[int]) -> bool:\n    \"\"\"Determine whether a Blackjack hand has a usable ace.\n\n    A *usable ace* is an ace that can be counted as 11 without causing the\n    hand's total value to exceed 21.\n\n    Args:\n        hand: List of integers where each integer represents the value of a card\n              in a Blackjack hand (ace is 1, face cards are 10, etc.).\n\n    Returns:\n        True if the hand contains a usable ace, otherwise False.\n    \"\"\"\n    total = sum(hand)\n    return 1 in hand and total + 10 <= 21"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_pred = None\n        min_error = np.inf\n        for feature_i in range(n):\n            X_col = X_train[:, feature_i]\n            thresholds = np.unique(X_col)\n            for thresh in thresholds:\n                for polarity in [1, -1]:\n                    pred = np.ones(m)\n                    if polarity == 1:\n                        pred[X_col >= thresh] = -1\n                    else:\n                        pred[X_col < thresh] = -1\n                    error = np.sum(w[pred != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_pred = pred.copy()\n                        best_stump = {'feature': feature_i, 'threshold': thresh, 'polarity': polarity}\n        eps = 1e-10\n        err = min_error\n        alpha = 0.5 * np.log((1 - err + eps) / (err + eps))\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    k = X_test.shape[0]\n    agg = np.zeros(k)\n    for (alpha, stump) in zip(alphas, stumps):\n        feat = stump['feature']\n        thresh = stump['threshold']\n        polarity = stump['polarity']\n        pred = np.ones(k)\n        if polarity == 1:\n            pred[X_test[:, feat] >= thresh] = -1\n        else:\n            pred[X_test[:, feat] < thresh] = -1\n        agg += alpha * pred\n    y_pred = np.sign(agg)\n    y_pred[y_pred == 0] = 1\n    return y_pred.astype(int).tolist()"}
{"task_id": 258, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 259, "completion_id": 0, "solution": "import random\ndef sample_replay_memory(memory: list, batch_size: int) -> list:\n    \"\"\"Randomly samples *batch_size* transitions from the replay buffer.\n\n    The selection must be deterministic (use random.seed(42)).  If\n    *batch_size* exceeds the buffer length, return -1.\n    \"\"\"\n    if batch_size > len(memory):\n        return -1\n    random.seed(42)\n    return random.sample(memory, batch_size)"}
{"task_id": 260, "completion_id": 0, "solution": "from itertools import zip_longest\nfrom math import floor\ndef tileswrap(ihtORsize: int, numtilings: int, floats: list[float], wrapwidths: list[int | None], ints: list[int] | None=None, readonly: bool=False) -> list[int]:\n    \"\"\"Return tile indices for the given floats/ints using wrapping tile coding.\"\"\"\n    if ints is None:\n        ints = []\n    qs = [floor(f * numtilings) for f in floats]\n    tile_indices: list[int] = []\n    for t in range(numtilings):\n        coords: list[int] = [t]\n        b = t\n        for (q, wrap) in zip_longest(qs, wrapwidths, fillvalue=None):\n            c = (q + b % numtilings) // numtilings\n            if wrap is not None and wrap > 0:\n                c = c % wrap\n            coords.append(c)\n            b += t * 2\n        coords.extend(ints)\n        idx = 0\n        for coord in coords:\n            idx = (idx * 31 + coord) % ihtORsize\n        tile_indices.append(idx)\n    return tile_indices"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 263, "completion_id": 0, "solution": "import numpy as np\ndef feedforward_predict(x, weights, activations):\n    \"\"\"Runs a forward pass through a fully-connected neural network.\n\n    Parameters\n    ----------\n    x : list[float] | numpy.ndarray\n        Input feature vector (bias term **not** included).\n    weights : list[list[list[float]]]\n        List of weight matrices; each inner list represents one 2-D weight\n        matrix where the first column contains the bias weights.\n    activations : list[str]\n        Activation functions per layer.  Allowed values: \"sigmoid\", \"relu\",\n        \"linear\".\n\n    Returns\n    -------\n    float | list[float]\n        Network output rounded to 4 decimal places.  A scalar is returned for\n        a single-neuron output layer, otherwise a list is returned.\n    \"\"\"\n    a = np.array(x, dtype=float).flatten()\n    for (W_list, act) in zip(weights, activations):\n        W = np.array(W_list, dtype=float)\n        a_tilde = np.concatenate(([1.0], a))\n        z = W.dot(a_tilde)\n        if act == 'sigmoid':\n            a = 1.0 / (1.0 + np.exp(-z))\n        elif act == 'relu':\n            a = np.maximum(0.0, z)\n        elif act == 'linear':\n            a = z\n        else:\n            raise ValueError(f\"Unknown activation '{act}'\")\n    a_rounded = np.round(a, 4)\n    if a_rounded.size == 1:\n        return float(a_rounded.item())\n    else:\n        return a_rounded.tolist()"}
{"task_id": 265, "completion_id": 0, "solution": "def king_loss_fn(x: int | float) -> float:\n    \"\"\"Compute King\u2019s piece-wise loss for a scalar value.\n\n    The loss function L(x) is defined by four segments:\n      \u2022 x \u2264 250:      L(x) = \u20130.25 * x + 82.50372665317208\n      \u2022 250 < x \u2264 600: L(x) = 20.00372665317208\n      \u2022 600 < x \u2264 700: L(x) = \u20130.2 * x + 140.00372665317207\n      \u2022 x > 700:      L(x) = 0.003726653172066108\n\n    The result is rounded to 4 decimal places.\n\n    Args:\n        x: An integer or float input.\n\n    Returns:\n        A float rounded to four decimal places.\n    \"\"\"\n    if x <= 250:\n        value = -0.25 * x + 82.50372665317208\n    elif x <= 600:\n        value = 20.00372665317208\n    elif x <= 700:\n        value = -0.2 * x + 140.00372665317207\n    else:\n        value = 0.003726653172066108\n    return round(value, 4)"}
{"task_id": 266, "completion_id": 0, "solution": ""}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for j in range(n_features):\n        x_j = X[:, j]\n        thresholds = np.unique(x_j)\n        for theta in thresholds:\n            for polarity in (1, -1):\n                if polarity == 1:\n                    preds = np.where(x_j < theta, 1, -1)\n                else:\n                    preds = np.where(x_j < theta, -1, 1)\n                miss = preds != y\n                error = sample_weights[miss].sum()\n                if error < best_error:\n                    best_error = error\n                    best_feature = j\n                    best_threshold = theta\n                    best_polarity = polarity\n    return {'feature_index': int(best_feature), 'threshold': float(np.round(best_threshold, 4)), 'polarity': int(best_polarity), 'weighted_error': float(np.round(best_error, 4))}"}
{"task_id": 268, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations, permutations\nfrom itertools import combinations, permutations\nimport numpy as np\ndef random_unweighted_graph(n_vertices: int, edge_prob: float=0.5, directed: bool=False) -> list[list[int]]:\n    \"\"\"Generate an un-weighted Erd\u0151s\u2013R\u00e9nyi random graph.\n\n    The function must return the adjacency matrix (a nested list) of the graph.\n\n    Args:\n        n_vertices (int): Number of vertices in the graph (labelled 0..n-1).\n        edge_prob  (float): Probability *p* that an admissible edge exists.\n        directed   (bool):  Whether the graph is directed (default ``False``).\n\n    Returns:\n        list[list[int]]: The adjacency matrix *A* where *A[i][j] == 1* iff an\n        edge from vertex *i* to vertex *j* exists.  The matrix must consist of\n        integers (0/1) only and have shape *(n_vertices, n_vertices)*.\n    \"\"\"\n    if n_vertices == 1:\n        return [[0]]\n    mat = [[0 for _ in range(n_vertices)] for _ in range(n_vertices)]\n    if directed:\n        for (i, j) in permutations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                mat[i][j] = 1\n    else:\n        for (i, j) in combinations(range(n_vertices), 2):\n            if np.random.rand() <= edge_prob:\n                mat[i][j] = 1\n                mat[j][i] = 1\n    return mat"}
{"task_id": 269, "completion_id": 0, "solution": "def count_trainable_params(state_dimensions: int, action_dimensions: int) -> int:\n    \"\"\"Return the total number of trainable parameters of the DQN network.\n\n    Parameters\n    ----------\n    state_dimensions : int\n        Length of the state (observation) vector.\n    action_dimensions : int\n        Number of possible discrete actions.\n\n    Returns\n    -------\n    int\n        Total count of trainable parameters (weights + biases).\n    \"\"\"\n    params_fc1 = state_dimensions * 164\n    params_fc1 += 164\n    params_fc2 = 164 * action_dimensions\n    params_fc2 += action_dimensions\n    return params_fc1 + params_fc2"}
{"task_id": 270, "completion_id": 0, "solution": ""}
{"task_id": 271, "completion_id": 0, "solution": "import numpy as np\ndef xgboost_split_gain(left_true: list[float], left_pred: list[float], right_true: list[float], right_pred: list[float]) -> float:\n    \"\"\"Compute XGBoost split gain for squared-error loss.\n\n    Parameters\n    ----------\n    left_true : list[float]\n        True target values of the left child after the split.\n    left_pred : list[float]\n        Current model predictions for those left-child samples.\n    right_true : list[float]\n        True target values of the right child after the split.\n    right_pred : list[float]\n        Current model predictions for those right-child samples.\n\n    Returns\n    -------\n    float\n        The split gain rounded to 4 decimal places.\n    \"\"\"\n    yL = np.array(left_true, dtype=float)\n    pL = np.array(left_pred, dtype=float)\n    yR = np.array(right_true, dtype=float)\n    pR = np.array(right_pred, dtype=float)\n    HL = yL.size\n    HR = yR.size\n    if HL == 0 or HR == 0:\n        return 0.0\n    GL = (pL - yL).sum()\n    GR = (pR - yR).sum()\n    GP = GL + GR\n    HP = HL + HR\n    gain = 0.5 * (GL * GL / HL + GR * GR / HR - GP * GP / HP)\n    gain_rounded = round(gain, 4)\n    if gain_rounded == 0.0:\n        return 0.0\n    return gain_rounded"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    X = list(feature)\n    y = list(target)\n    n = len(y)\n    if n == 0:\n        return (None, 0.0)\n\n    def entropy(counts, total):\n        h = 0.0\n        for cnt in counts.values():\n            p = cnt / total\n            if p > 0.0:\n                h -= p * math.log2(p)\n        return h\n    total_counts = Counter(y)\n    H_parent = entropy(total_counts, n)\n    counts_per_value = {}\n    for (xi, yi) in zip(X, y):\n        if xi not in counts_per_value:\n            counts_per_value[xi] = Counter()\n        counts_per_value[xi][yi] += 1\n    distinct_vals = sorted(counts_per_value.keys())\n    if len(distinct_vals) < 2:\n        return (None, 0.0)\n    left_counts = Counter()\n    left_n = 0\n    right_counts = total_counts.copy()\n    right_n = n\n    best_ig = 0.0\n    best_t = None\n    for i in range(len(distinct_vals) - 1):\n        v = distinct_vals[i]\n        cnts_v = counts_per_value[v]\n        block_n = sum(cnts_v.values())\n        left_n += block_n\n        right_n -= block_n\n        for (cls, cnt) in cnts_v.items():\n            left_counts[cls] += cnt\n            right_counts[cls] -= cnt\n            if right_counts[cls] == 0:\n                del right_counts[cls]\n        t = (v + distinct_vals[i + 1]) / 2.0\n        H_left = entropy(left_counts, left_n)\n        H_right = entropy(right_counts, right_n)\n        ig = H_parent - left_n / n * H_left - right_n / n * H_right\n        if ig > best_ig:\n            best_ig = ig\n            best_t = t\n        elif ig == best_ig and best_ig > 0 and (t < best_t):\n            best_t = t\n    if best_t is None:\n        return (None, 0.0)\n    return (round(best_t, 4), round(best_ig, 4))"}
{"task_id": 274, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 276, "completion_id": 0, "solution": "import math\nimport string\nfrom collections import Counter\ndef additive_ngram_log_prob(corpus: list[str], sentence: str, N: int, k: float=1.0, unk: bool=True) -> float:\n    \"\"\"Return the base-10 log probability of *sentence* under an additive-smoothed N-gram model.\"\"\"\n\n    def tokenize(s: str) -> list[str]:\n        toks = []\n        for w in s.lower().split():\n            w2 = w.strip(string.punctuation)\n            if w2:\n                toks.append(w2)\n        return toks\n    corpus_tokens = [tokenize(sent) for sent in corpus]\n    vocab = set()\n    if unk:\n        vocab.add('<unk>')\n    vocab.add('<bol>')\n    vocab.add('<eol>')\n    for toks in corpus_tokens:\n        vocab.update(toks)\n    V = len(vocab)\n    ngram_counts = Counter()\n    hist_counts = Counter()\n    total_tokens = 0\n    for toks in corpus_tokens:\n        padded = ['<bol>'] + toks + ['<eol>']\n        if N == 1:\n            for w in padded:\n                ngram_counts[w,] += 1\n                total_tokens += 1\n        else:\n            L = len(padded)\n            for i in range(L - N + 1):\n                ng = tuple(padded[i:i + N])\n                h = ng[:-1]\n                ngram_counts[ng] += 1\n                hist_counts[h] += 1\n    test_toks = tokenize(sentence)\n    if unk:\n        for (i, w) in enumerate(test_toks):\n            if w not in vocab:\n                test_toks[i] = '<unk>'\n    padded_test = ['<bol>'] + test_toks + ['<eol>']\n    logp = 0.0\n    if N == 1:\n        denom = total_tokens + k * V\n        for w in padded_test:\n            cnt = ngram_counts.get((w,), 0)\n            p = (cnt + k) / denom\n            logp += math.log10(p)\n    else:\n        L = len(padded_test)\n        for i in range(L - N + 1):\n            ng = tuple(padded_test[i:i + N])\n            h = ng[:-1]\n            cnt_ng = ngram_counts.get(ng, 0)\n            cnt_h = hist_counts.get(h, 0)\n            p = (cnt_ng + k) / (cnt_h + k * V)\n            logp += math.log10(p)\n    return round(logp, 4)"}
{"task_id": 277, "completion_id": 0, "solution": "def is_tuple(env: dict) -> tuple:\n    \"\"\"Determine whether the *action* and *observation* spaces contained in\n    ``env`` are composite (tuple or dictionary).\n\n    A *composite* space is defined as a built-in ``tuple`` or ``dict``.\n\n    Args:\n        env (dict): A dictionary that **must** contain the keys\n            ``\"action_space\"`` and ``\"observation_space\"``.\n\n    Returns:\n        tuple: Two booleans ``(tuple_action, tuple_obs)`` indicating whether\n            each space is composite.\n    \"\"\"\n    action_space = env['action_space']\n    observation_space = env['observation_space']\n    tuple_action = isinstance(action_space, (tuple, dict))\n    tuple_obs = isinstance(observation_space, (tuple, dict))\n    return (tuple_action, tuple_obs)"}
{"task_id": 278, "completion_id": 0, "solution": "def evaluate_decision_tree(tree: dict, sample: list[float]):\n    \"\"\"Traverse a binary decision-tree represented by nested dictionaries.\n\n    Args:\n        tree (dict): Root node of the decision tree. Internal nodes contain\n            'feature_i', 'threshold', 'true_branch', 'false_branch'. Leaf\n            nodes contain only 'value'.\n        sample (list[float]): Feature vector that will be classified/regressed.\n\n    Returns:\n        The value stored in the reached leaf (int, float, or str).\n    \"\"\"\n    if 'value' in tree:\n        return tree['value']\n    feature_i = tree['feature_i']\n    threshold = tree['threshold']\n    if sample[feature_i] <= threshold:\n        return evaluate_decision_tree(tree['true_branch'], sample)\n    else:\n        return evaluate_decision_tree(tree['false_branch'], sample)"}
{"task_id": 279, "completion_id": 0, "solution": ""}
{"task_id": 280, "completion_id": 0, "solution": "import numpy as np\ndef l2_regularization(w: np.ndarray, alpha: float, return_grad: bool=False):\n    \"\"\"Compute the L2 regularization value or its gradient.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Weight vector or matrix.\n    alpha : float\n        Regularization strength (must be non-negative).\n    return_grad : bool, optional (default=False)\n        If True, return the gradient of the regularization term instead of the\n        regularization value itself.\n\n    Returns\n    -------\n    float or np.ndarray\n        \u2022 When *return_grad* is False: the scalar L2 regularization value.\n        \u2022 When *return_grad* is True:  the gradient with the same shape as *w*.\n    \"\"\"\n    if return_grad:\n        grad = alpha * w\n        return np.round(grad, 4)\n    else:\n        reg_value = 0.5 * alpha * np.sum(w * w)\n        return float(np.round(reg_value, 4))"}
{"task_id": 281, "completion_id": 0, "solution": "import numpy as np\ndef L1Regularization(alpha: float):\n    \"\"\"Create a callable object that implements L1 regularisation.\n\n    The returned object must support two operations:\n    1. call with a NumPy array to obtain the L1 penalty value\n    2. call its .grad(w) method to obtain the gradient of the penalty\n\n    Args:\n        alpha: Non-negative float controlling the strength of the regularisation.\n\n    Returns:\n        An instance that fulfils the described interface.\n    \"\"\"\n    if alpha < 0:\n        raise ValueError(f'alpha must be non-negative, got {alpha}')\n\n    class L1Reg:\n\n        def __init__(self, alpha):\n            self.alpha = alpha\n\n        def __call__(self, w):\n            arr = np.asarray(w)\n            penalty = self.alpha * np.sum(np.abs(arr))\n            return float(penalty)\n\n        def grad(self, w):\n            arr = np.asarray(w)\n            return self.alpha * np.sign(arr)\n    return L1Reg(alpha)"}
{"task_id": 282, "completion_id": 0, "solution": "import math\ndef running_stats(data: list[int | float]) -> tuple[float, float, float]:\n    \"\"\"Return the running mean, variance and standard deviation of a stream.\n\n    The computation is *online*: we iterate over the data once, keeping\n    only a constant amount of memory.  We use Welford's method to update\n    the running mean and running sum of squares of differences.\n\n    After processing all points:\n      - sample_variance = s / (n - 1)    if n > 1, else 0.0\n      - sample_std      = sqrt(sample_variance)\n    All results are rounded to 4 decimal places.\n\n    If the input list is empty, returns (0.0, 0.0, 0.0).\n    \"\"\"\n    n = 0\n    mean = 0.0\n    s = 0.0\n    for x in data:\n        n += 1\n        delta = x - mean\n        mean += delta / n\n        s += delta * (x - mean)\n    if n == 0:\n        return (0.0, 0.0, 0.0)\n    if n > 1:\n        variance = s / (n - 1)\n    else:\n        variance = 0.0\n    std_dev = math.sqrt(variance)\n    return (round(mean, 4), round(variance, 4), round(std_dev, 4))"}
{"task_id": 283, "completion_id": 0, "solution": "import numpy as np\ndef binary_log_loss_metrics(actual, predicted, regularization=1.0):\n    \"\"\"Compute the approximate Newton leaf value and split gain for binary\n    cross-entropy (logistic) loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        1-D array with true labels (0 or 1).\n    predicted : np.ndarray\n        1-D array with raw prediction scores.\n    regularization : float, default 1.0\n        L2 regularisation term \u03bb used in gradient boosting formulas.\n\n    Returns\n    -------\n    list[float]\n        A two-element list `[leaf_value, gain]`, each rounded to 4 decimals.\n    \"\"\"\n    p = 1.0 / (1.0 + np.exp(-predicted))\n    g = p - actual\n    h = p * (1.0 - p)\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    leaf_value = sum_g / (sum_h + regularization)\n    gain = 0.5 * sum_g ** 2 / (sum_h + regularization)\n    return [float(np.round(leaf_value, 4)), float(np.round(gain, 4))]"}
{"task_id": 284, "completion_id": 0, "solution": ""}
{"task_id": 285, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x: np.ndarray, y: np.ndarray) -> list | int:\n    \"\"\"Compute the linear kernel (Gram matrix) between two data sets.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        First input data. Can be 1-D (single sample) or 2-D (multiple samples).\n    y : np.ndarray\n        Second input data. Can be 1-D (single sample) or 2-D (multiple samples).\n\n    Returns\n    -------\n    list | int\n        The linear kernel matrix as a nested Python list. If *x* and *y* have\n        different feature dimensions, returns -1.\n    \"\"\"\n    if x.ndim == 1:\n        x = x.reshape(1, -1)\n    elif x.ndim != 2:\n        raise ValueError(f'Input x must be 1D or 2D, got {x.ndim}D.')\n    if y.ndim == 1:\n        y = y.reshape(1, -1)\n    elif y.ndim != 2:\n        raise ValueError(f'Input y must be 1D or 2D, got {y.ndim}D.')\n    if x.shape[1] != y.shape[1]:\n        return -1\n    gram = x @ y.T\n    return gram.tolist()"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    out = np.zeros((N, C, H_out, W_out), dtype=X.dtype)\n    grad_input = np.zeros_like(X, dtype=X.dtype)\n    pool_size = p_h * p_w\n    for i in range(H_out):\n        for j in range(W_out):\n            sh = i * s_h\n            sw = j * s_w\n            window = X[:, :, sh:sh + p_h, sw:sw + p_w]\n            out[:, :, i, j] = window.mean(axis=(2, 3))\n            grad = accum_grad[:, :, i, j] / pool_size\n            grad_input[:, :, sh:sh + p_h, sw:sw + p_w] += grad[:, :, None, None]\n    out_rounded = np.round(out, 4).tolist()\n    grad_in_rounded = np.round(grad_input, 4).tolist()\n    return (out_rounded, grad_in_rounded)"}
{"task_id": 288, "completion_id": 0, "solution": "import numpy as np\ndef squared_error(actual, predicted):\n    \"\"\"Calculate the squared error or mean squared error.\n\n    If *actual* and *predicted* are scalars (including 0-d NumPy arrays), return the squared difference.\n    If they are one-dimensional iterables (same nonzero length), return the mean squared error.\n    Return -1 for any length mismatch, empty iterable, wrong dimensions, or invalid types.\n\n    All results are rounded to 4 decimal places.\n    \"\"\"\n    dim_a = np.ndim(actual)\n    dim_p = np.ndim(predicted)\n    if dim_a == 0 and dim_p == 0:\n        try:\n            a_val = float(actual)\n            p_val = float(predicted)\n        except Exception:\n            return -1\n        return round((a_val - p_val) ** 2, 4)\n    if dim_a == 1 and dim_p == 1:\n        try:\n            arr_a = np.array(actual, dtype=float)\n            arr_p = np.array(predicted, dtype=float)\n        except Exception:\n            return -1\n        if arr_a.size == 0 or arr_p.size == 0 or arr_a.shape[0] != arr_p.shape[0]:\n            return -1\n        mse = np.mean((arr_a - arr_p) ** 2)\n        return round(mse, 4)\n    return -1"}
{"task_id": 289, "completion_id": 0, "solution": "def format_entries(entries: list[tuple[str, str]]) -> str:\n    \"\"\"Formats a list of (field, value) tuples.\n\n    Each tuple is converted into a line of the form:\n        field: \"value\"\n    and all lines are joined together by a single newline character. No extra\n    newline is added at the end.\n\n    Args:\n        entries: List of tuples where the first element is the field name and\n                 the second element is the corresponding value. Both should be\n                 strings; however, any value will be converted to its string\n                 representation.\n\n    Returns:\n        A single string containing all formatted lines separated by a newline.\n        Returns an empty string if *entries* is empty.\n    \"\"\"\n    return '\\n'.join((f'{field}: \"{value}\"' for (field, value) in entries))"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08, rtol=0)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08, rtol=0):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 291, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(X: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Project *X* onto its first *n_components* principal components.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input data of shape (m, d) where *m* is the number of samples and *d*\n        the number of features.\n    n_components : int\n        Number of principal components to retain (1 \u2264 n_components \u2264 d).\n\n    Returns\n    -------\n    list[list[float]]\n        The transformed data rounded to 4 decimals.  If *n_components* is\n        invalid the function returns -1.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        raise ValueError('X must be a NumPy array')\n    (m, d) = X.shape\n    if not 1 <= n_components <= d:\n        return -1\n    cov = np.cov(X, rowvar=False)\n    (eigvals, eigvecs) = np.linalg.eig(cov)\n    eigvals = eigvals.real\n    eigvecs = eigvecs.real\n    sorted_indices = np.argsort(eigvals)[::-1]\n    V = eigvecs[:, sorted_indices[:n_components]].copy()\n    for j in range(V.shape[1]):\n        if V[0, j] < 0:\n            V[:, j] = -V[:, j]\n    projected = X @ V\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape (or the cutoff is out of bounds),\n        the function returns -1.\n    \"\"\"\n    try:\n        p1 = np.array(parent1, dtype=float)\n        p2 = np.array(parent2, dtype=float)\n    except Exception:\n        return -1\n    if p1.shape != p2.shape or p1.ndim != 2:\n        return -1\n    (n_rows, n_cols) = p1.shape\n    if not isinstance(cutoff, int) or cutoff < 0 or cutoff > n_cols:\n        return -1\n    c1 = np.empty_like(p1)\n    c2 = np.empty_like(p1)\n    if cutoff > 0:\n        c1[:, :cutoff] = p1[:, :cutoff]\n        c2[:, :cutoff] = p2[:, :cutoff]\n    if cutoff < n_cols:\n        c1[:, cutoff:] = p2[:, cutoff:]\n        c2[:, cutoff:] = p1[:, cutoff:]\n    return (c1.tolist(), c2.tolist())"}
{"task_id": 293, "completion_id": 0, "solution": "def map_agent_environment(agent_name: str):\n    \"\"\"Return the environment name and access type that should be used for a given RL agent.\n\n    The mapping is case-insensitive and ignores leading/trailing spaces. If the\n    agent name is not recognised, the function returns -1.\n\n    Args:\n        agent_name: Name of the RL agent (e.g. \"dqn\", \"A3C\", etc.).\n\n    Returns:\n        Tuple[str, str] if the agent is known, or -1 otherwise.\n    \"\"\"\n    key = agent_name.strip().lower()\n    mapping = {'dqn': ('CartPole-v0', 'unwrapped'), 'ddpg': ('Pendulum-v0', 'env'), 'a3c': ('Pendulum-v0', 'unwrapped'), 'a2c': ('CartPole-v0', 'env'), 'a2c_multi': ('CartPole-v0', 'raw'), 'trpo': ('Pendulum-v0', 'unwrapped')}\n    return mapping.get(key, -1)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in G.get('_V2I', {})}\n    if not adj:\n        return {}\n    is_directed = G.get('is_directed', False)\n    graph_lists = G.get('_G', [])\n    if is_directed:\n        for edge_list in graph_lists:\n            for (u, v, w) in edge_list:\n                adj[u].append((v, w))\n    else:\n        seen = set()\n        for edge_list in graph_lists:\n            for (u, v, w) in edge_list:\n                key = (frozenset((u, v)), w)\n                if key not in seen:\n                    seen.add(key)\n                    adj[u].append((v, w))\n                    if u != v:\n                        adj[v].append((u, w))\n    for u in adj:\n        adj[u].sort(key=lambda pair: pair[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 297, "completion_id": 0, "solution": "import numpy as np\ndef min_max_scale(data: list[list[int | float]], feature_range: tuple=(0, 1)) -> list[list[float]]:\n    \"\"\"Scale every feature column of *data* to a given interval.\n\n    Parameters\n    ----------\n    data : list[list[int | float]]\n        Two-dimensional numerical data set where each inner list is a sample.\n    feature_range : tuple, optional\n        Desired range for the transformed data given as ``(lower, upper)``. The\n        default is ``(0, 1)``.\n\n    Returns\n    -------\n    list[list[float]]\n        Scaled data rounded to four decimal places.  Returns ``-1`` if\n        ``feature_range`` is invalid (i.e. lower >= upper).\n    \"\"\"\n    (a, b) = feature_range\n    if a >= b:\n        return -1\n    if not data:\n        return []\n    arr = np.array(data, dtype=float)\n    col_min = np.min(arr, axis=0)\n    col_max = np.max(arr, axis=0)\n    col_range = col_max - col_min\n    const_mask = col_range == 0\n    col_range[const_mask] = 1.0\n    scaled = (arr - col_min) / col_range\n    scaled = scaled * (b - a) + a\n    scaled = np.nan_to_num(scaled, nan=0.0, posinf=0.0, neginf=0.0)\n    scaled = np.round(scaled, 4)\n    return scaled.tolist()"}
{"task_id": 298, "completion_id": 0, "solution": ""}
{"task_id": 299, "completion_id": 0, "solution": "import numpy as np\nfrom __future__ import annotations\nimport numpy as np\ndef k_means(X: np.ndarray, k: int, max_iterations: int=500) -> list[int]:\n    \"\"\"K-Means clustering.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the input samples.\n        k: Number of clusters to form.\n        max_iterations: Maximum number of iterations (default: 500).\n\n    Returns:\n        A list of length *m* where the i-th element is the cluster index of the\n        i-th sample.\n    \"\"\"\n    (m, n) = X.shape\n    centroids = X[:k].astype(float, copy=True)\n    assignments = np.zeros(m, dtype=int)\n    for _ in range(max_iterations):\n        diffs = X[:, None, :] - centroids[None, :, :]\n        sq_dists = np.sum(diffs * diffs, axis=2)\n        new_assignments = np.argmin(sq_dists, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(k):\n            members = X[new_assignments == j]\n            if members.shape[0] > 0:\n                new_centroids[j] = members.mean(axis=0)\n        if np.allclose(new_centroids, centroids):\n            assignments = new_assignments\n            break\n        centroids = new_centroids\n        assignments = new_assignments\n    return assignments.tolist()"}
{"task_id": 300, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Union"}
{"task_id": 301, "completion_id": 0, "solution": "def inorder_keys(pairs):\n    \"\"\"Build a BST from (key, value) *pairs* and return keys from an in-order traversal.\n\n    Args:\n        pairs (list[tuple[Any, int | float]]): List of (key, numeric value) pairs.\n\n    Returns:\n        list: Keys in in-order (ascending by numeric value). Return an empty\n        list if *pairs* is empty.\n    \"\"\"\n    if not pairs:\n        return []\n    root = Node(pairs[0][0], pairs[0][1])\n\n    def insert(root, node):\n        curr = root\n        while True:\n            if node < curr:\n                if curr.left is None:\n                    curr.left = node\n                    return\n                curr = curr.left\n            else:\n                if curr.right is None:\n                    curr.right = node\n                    return\n                curr = curr.right\n    for (key, val) in pairs[1:]:\n        insert(root, Node(key, val))\n    result = []\n\n    def inorder(node):\n        if node is None:\n            return\n        inorder(node.left)\n        result.append(node.key)\n        inorder(node.right)\n    inorder(root)\n    return result"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    diffs = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    dist = np.sqrt(np.sum(diffs ** 2, axis=2))\n    W = 1.0 / (1.0 + dist)\n    np.fill_diagonal(W, 0.0)\n    degree = np.sum(W, axis=1)\n    D = np.diag(degree)\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    E = eigvecs[:, :k]\n    centroids = E[:k, :].copy()\n    labels = np.zeros(n, dtype=int)\n    for iteration in range(100):\n        diff = E[:, np.newaxis, :] - centroids[np.newaxis, :, :]\n        dists = np.sqrt(np.sum(diff ** 2, axis=2))\n        new_labels = np.argmin(dists, axis=1)\n        if iteration > 0 and np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for ci in range(k):\n            members = E[labels == ci]\n            if members.shape[0] == 0:\n                rand_idx = np.random.randint(0, n)\n                centroids[ci] = E[rand_idx]\n            else:\n                centroids[ci] = np.mean(members, axis=0)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": ""}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=float)\n    y = np.asarray(y, dtype=float).ravel()\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1), dtype=float)\n        X = np.hstack((ones, X))\n    (N, M) = X.shape\n    mu_arr = np.asarray(mu)\n    if mu_arr.ndim == 0:\n        mu_vec = np.full(M, float(mu_arr))\n    else:\n        mu_vec = mu_arr.ravel().astype(float)\n        if mu_vec.shape[0] != M:\n            raise ValueError(f'Prior mean mu length {mu_vec.shape[0]} does not match number of features {M}')\n    if V is None:\n        V_mat = np.eye(M, dtype=float)\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 0:\n            V_mat = V_arr * np.eye(M, dtype=float)\n        elif V_arr.ndim == 1:\n            if V_arr.shape[0] != M:\n                raise ValueError(f'Diagonal V length {V_arr.shape[0]} does not match number of features {M}')\n            V_mat = np.diag(V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f'Full V shape {V_arr.shape} does not match ({M}, {M})')\n            V_mat = V_arr.copy()\n        else:\n            raise ValueError('Prior scale V must be None, scalar, 1-D or 2-D array')\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError('Prior covariance V is singular and not invertible')\n    XtX = X.T @ X\n    precision = V_inv + XtX\n    try:\n        Sigma_b = np.linalg.inv(precision)\n    except np.linalg.LinAlgError:\n        raise np.linalg.LinAlgError('Precision matrix is singular and not invertible')\n    Xty = X.T @ y\n    term = V_inv @ mu_vec + Xty\n    mu_b = Sigma_b @ term\n    mu_b_rounded = np.round(mu_b, 4)\n    return [float(val) for val in mu_b_rounded]"}
{"task_id": 305, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the element-wise logistic sigmoid in a numerically stable way.\n\n    The function must\n        \u2022 Accept a scalar, list, tuple or NumPy array of real numbers.\n        \u2022 Return a Python list with each sigmoid value rounded to 4 decimals.\n\n    Args:\n        x (int | float | list | tuple | np.ndarray): Input value(s).\n\n    Returns:\n        list[float]: List containing the sigmoid of every input element.\n    \"\"\"\n    arr = np.array(x, dtype=float)\n    sigmoid_vals = np.where(arr >= 0, 1.0 / (1.0 + np.exp(-arr)), np.exp(arr) / (1.0 + np.exp(arr)))\n    sigmoid_vals = np.round(sigmoid_vals, 4)\n    result = sigmoid_vals.tolist()\n    if not isinstance(result, list):\n        result = [result]\n    return result"}
{"task_id": 307, "completion_id": 0, "solution": "import numpy as np\ndef bootstrap_sample(X: np.ndarray, y: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return a bootstrap sample of the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, ...).\n    y : np.ndarray\n        Target array of shape (n_samples, ...).\n\n    Returns\n    -------\n    tuple[np.ndarray, np.ndarray]\n        (X_sample, y_sample) where each has the same shape as its\n        counterpart in the input.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of rows (samples).')\n    n_samples = X.shape[0]\n    idxs = np.random.choice(n_samples, size=n_samples, replace=True)\n    X_sample = X[idxs]\n    y_sample = y[idxs]\n    return (X_sample, y_sample)"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595.0 * np.log10(1.0 + f / 700.0)\n\n    def mel_to_hz(m):\n        return 700.0 * (10 ** (m / 2595.0) - 1.0)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    bin_count = N // 2 + 1\n    freqs = np.linspace(0, fs / 2, bin_count)\n    filterbank = np.zeros((n_filters, bin_count), dtype=float)\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        denom_left = f_center - f_left\n        denom_right = f_right - f_center\n        left_slope = (freqs - f_left) / denom_left\n        right_slope = (f_right - freqs) / denom_right\n        filt = np.maximum(0.0, np.minimum(left_slope, right_slope))\n        if normalize:\n            area_norm = 2.0 / (f_right - f_left)\n            filt *= area_norm\n        filterbank[i, :] = filt\n    fb_rounded = []\n    for i in range(n_filters):\n        row = [round(val, 4) for val in filterbank[i, :]]\n        fb_rounded.append(row)\n    return fb_rounded"}
{"task_id": 309, "completion_id": 0, "solution": ""}
{"task_id": 310, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_error(actual: list[float] | np.ndarray, predicted: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Root Mean Squared Error (RMSE) between two numeric sequences.\n\n    The function returns -1 if the two inputs do not have the same\n    non-zero length.\n\n    Args:\n        actual: A list or NumPy array containing the true values.\n        predicted: A list or NumPy array containing the predicted values.\n\n    Returns:\n        A float \u2013 the RMSE rounded to 4 decimal places, or -1 on invalid\n        input.\n    \"\"\"\n    try:\n        y_true = np.array(actual, dtype=float)\n        y_pred = np.array(predicted, dtype=float)\n    except Exception:\n        return -1.0\n    if y_true.ndim != 1 or y_pred.ndim != 1:\n        return -1.0\n    n = y_true.size\n    if n == 0 or y_pred.size != n:\n        return -1.0\n    mse = np.sum((y_true - y_pred) ** 2) / n\n    rmse = np.sqrt(mse)\n    return float(round(rmse, 4))"}
{"task_id": 311, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    length = window_len + 1 if not symmetric else window_len\n    N = length - 1\n    n = np.arange(length, dtype=float)\n    w = a0 - a1 * np.cos(2.0 * np.pi * n / N) + a2 * np.cos(4.0 * np.pi * n / N) - a3 * np.cos(6.0 * np.pi * n / N)\n    if not symmetric:\n        w = w[:-1]\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        result = 0.0\n        while x < 6.0:\n            result -= 1.0 / x\n            x += 1.0\n        inv = 1.0 / x\n        inv2 = inv * inv\n        inv4 = inv2 * inv2\n        inv6 = inv4 * inv2\n        return result + math.log(x) - 0.5 * inv - 1.0 / 12.0 * inv2 + 1.0 / 120.0 * inv4 - 1.0 / 252.0 * inv6\n    gamma_arr = np.asarray(gamma, dtype=float)\n    row = gamma_arr[d]\n    a_dt = row[t]\n    sum_row = row.sum()\n    val = digamma(a_dt) - digamma(sum_row)\n    return round(val, 4)"}
{"task_id": 315, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef get_loss(name: str):\n    \"\"\"Return a loss function specified by *name*.\n\n    The function must recognise the following identifiers (case-insensitive,\n    underscores are ignored):\n        \u2022 MAE  \u2192  \"mae\" | \"mean_absolute_error\"\n        \u2022 MSE  \u2192  \"mse\" | \"mean_squared_error\"\n        \u2022 Binary Cross Entropy  \u2192  \"cross_entropy\" | \"log_loss\" | \"ce\"\n\n    The returned object has the signature `fn(y_true, y_pred) -> float` where\n    *y_true* and *y_pred* are 1-D sequences (list or NumPy array) of equal\n    length.  The resulting float must be rounded to **four** decimal places.\n\n    Args:\n        name: Name or alias of the desired loss function.\n\n    Returns:\n        A Python callable implementing the requested loss.\n\n    Raises:\n        ValueError: If *name* does not correspond to a supported loss.\n    \"\"\"\n    key = name.lower().replace('_', '')\n\n    def mae(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        val = np.mean(np.abs(yt - yp))\n        return float(round(val, 4))\n\n    def mse(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        val = np.mean((yt - yp) ** 2)\n        return float(round(val, 4))\n\n    def cross_entropy(y_true, y_pred):\n        yt = np.array(y_true, dtype=float)\n        yp = np.array(y_pred, dtype=float)\n        p = np.clip(yp, 1e-15, 1 - 1e-15)\n        val = -np.mean(yt * np.log(p) + (1 - yt) * np.log(1 - p))\n        return float(round(val, 4))\n    loss_map = {'mae': mae, 'meanabsoluteerror': mae, 'mse': mse, 'meansquarederror': mse, 'crossentropy': cross_entropy, 'logloss': cross_entropy, 'ce': cross_entropy}\n    try:\n        return loss_map[key]\n    except KeyError:\n        raise ValueError('Invalid loss function.')"}
{"task_id": 316, "completion_id": 0, "solution": "import numpy as np\ndef euclidean(x, y):\n    \"\"\"Compute the Euclidean (L2) distance between two equal-length vectors.\n\n    Args:\n        x (list|tuple|np.ndarray): First real vector.\n        y (list|tuple|np.ndarray): Second real vector.\n\n    Returns:\n        float | int: The L2 distance rounded to four decimals, or -1 if the\n        vectors have unequal lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    diff = x_arr - y_arr\n    dist = np.sqrt(np.dot(diff, diff))\n    return round(float(dist), 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np"}
{"task_id": 319, "completion_id": 0, "solution": "import numpy as np\ndef stochastic_gradient_descent(X: np.ndarray | list, y: np.ndarray | list, learning_rate: float=0.01, epochs: int=1000) -> list[float]:\n    \"\"\"Learn a linear model with Stochastic Gradient Descent.\n\n    The function must:\n      \u2022 prepend a bias column of ones to `X`;\n      \u2022 initialise the weight vector \u03b8 with zeros;\n      \u2022 perform `epochs` passes of SGD exactly as detailed in the task description;\n      \u2022 return \u03b8 rounded to 4 decimal places as a Python list.\n\n    Args:\n        X: Feature matrix (m\u00d7n) \u2013 can be a NumPy array or a Python list of lists.\n        y: Target vector (m,) or (m,1) \u2013 can be a NumPy array or a Python list.\n        learning_rate: Learning rate (\u03b1).\n        epochs: Number of epochs (full passes over the dataset).\n\n    Returns:\n        Python list containing the learned parameters [\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8_n].\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float).reshape(-1)\n    (m, n) = X_arr.shape\n    X_b = np.hstack((np.ones((m, 1)), X_arr))\n    theta = np.zeros(n + 1, dtype=float)\n    for _ in range(epochs):\n        for i in range(m):\n            xi = X_b[i]\n            yi = y_arr[i]\n            y_pred = theta.dot(xi)\n            error = y_pred - yi\n            theta -= learning_rate * error * xi\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 321, "completion_id": 0, "solution": "import numpy as np\nimport string\ndef genetic_algorithm(target: str, population_size: int, mutation_rate: float, iterations: int) -> str:\n    \"\"\"Evolve a population of random strings towards the *target* string using a\n    basic Genetic Algorithm and return the best string discovered.\n\n    Parameters\n    ----------\n    target : str\n        The string the algorithm should try to reproduce.\n    population_size : int\n        Number of individuals maintained in each generation.\n    mutation_rate : float\n        Probability with which each character is replaced by a random\n        character during the mutation step.\n    iterations : int\n        Maximum number of generations the algorithm is allowed to run.\n\n    Returns\n    -------\n    str\n        The highest-fitness string found during the evolutionary process.\n    \"\"\"\n    np.random.seed(42)\n    alphabet = ' ' + string.ascii_lowercase + string.ascii_uppercase\n    alpha_size = len(alphabet)\n    L = len(target)\n    char2idx = {c: i for (i, c) in enumerate(alphabet)}\n    target_idx = np.array([char2idx[c] for c in target], dtype=np.int32)\n    population = np.random.randint(0, alpha_size, size=(population_size, L), dtype=np.int32)\n    best_ind = None\n    best_fit = -np.inf\n    for gen in range(iterations):\n        distances = np.abs(population - target_idx).sum(axis=1)\n        fitness = 1.0 / (distances + 1e-06)\n        idx_max = np.argmax(fitness)\n        if fitness[idx_max] > best_fit:\n            best_fit = fitness[idx_max]\n            best_ind = population[idx_max].copy()\n        if distances[idx_max] == 0:\n            break\n        probs = fitness / fitness.sum()\n        parents_idx = np.random.choice(population_size, size=population_size, replace=False, p=probs)\n        np.random.shuffle(parents_idx)\n        new_population = []\n        n_pairs = population_size // 2\n        for i in range(n_pairs):\n            p1 = population[parents_idx[2 * i]]\n            p2 = population[parents_idx[2 * i + 1]]\n            if L > 1:\n                cx = np.random.randint(1, L)\n                c1 = np.concatenate([p1[:cx], p2[cx:]])\n                c2 = np.concatenate([p2[:cx], p1[cx:]])\n            else:\n                c1 = p1.copy()\n                c2 = p2.copy()\n            mask1 = np.random.rand(L) < mutation_rate\n            mask2 = np.random.rand(L) < mutation_rate\n            if mask1.any():\n                c1[mask1] = np.random.randint(0, alpha_size, size=mask1.sum())\n            if mask2.any():\n                c2[mask2] = np.random.randint(0, alpha_size, size=mask2.sum())\n            new_population.append(c1)\n            new_population.append(c2)\n        if population_size % 2 == 1:\n            new_population.append(best_ind.copy())\n        population = np.vstack(new_population)[:population_size]\n    best_str = ''.join((alphabet[i] for i in best_ind))\n    return best_str"}
{"task_id": 322, "completion_id": 0, "solution": "import numpy as np\nEPS = 1e-15\ndef binary_crossentropy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Compute the mean binary cross-entropy loss.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Ground-truth labels containing only 0s and 1s.\n    predicted : np.ndarray\n        Predicted probabilities for the positive class. Must have the same\n        shape as `actual`.\n\n    Returns\n    -------\n    float\n        Mean BCE value rounded to four decimal places.\n    \"\"\"\n    p = np.clip(predicted, EPS, 1 - EPS)\n    loss = -np.mean(actual * np.log(p) + (1 - actual) * np.log(1 - p))\n    return float(round(loss, 4))"}
{"task_id": 324, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 326, "completion_id": 0, "solution": "import numpy as np\ndef svm_predict(X: list[list[float]], support_vectors: list[list[float]], lagr_multipliers: list[float], support_vector_labels: list[int], intercept: float, kernel: str='rbf', power: int=3, gamma: float | None=None, coef: float=1.0) -> list[int]:\n    \"\"\"Predict labels for a batch of samples using a pre-trained SVM.\n\n    The decision value for a sample *x* is\n        f(x) = \u03a3 \u03b1_i y_i K(x_i, x) + b\n    where the summation runs over the support vectors.\n\n    Args:\n        X: Query samples. Shape (n_query, n_features).\n        support_vectors: Support vectors obtained during training.\n        lagr_multipliers: Lagrange multipliers \u03b1_i corresponding to the support vectors.\n        support_vector_labels: Class labels y_i (\u22121 or 1) for support vectors.\n        intercept: Bias term *b*.\n        kernel: One of {\"linear\", \"polynomial\", \"rbf\"}.\n        power: Degree of the polynomial kernel.\n        gamma: Kernel parameter. If None, defaults to 1 / n_features.\n        coef: Independent term in the polynomial kernel.\n\n    Returns:\n        A list with the predicted labels (\u22121 or 1) for every sample in *X*.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    sv = np.array(support_vectors, dtype=float)\n    alphas = np.array(lagr_multipliers, dtype=float)\n    y_sv = np.array(support_vector_labels, dtype=int)\n    if X_arr.size == 0:\n        return []\n    (n_query, n_features) = X_arr.shape\n    gamma_val = gamma if gamma is not None else 1.0 / n_features\n    if kernel == 'linear':\n        K_mat = sv.dot(X_arr.T)\n    elif kernel == 'polynomial':\n        K_mat = (gamma_val * sv.dot(X_arr.T) + coef) ** power\n    elif kernel == 'rbf':\n        sv_sq = np.sum(sv ** 2, axis=1)[:, np.newaxis]\n        X_sq = np.sum(X_arr ** 2, axis=1)[np.newaxis, :]\n        cross = sv.dot(X_arr.T)\n        dists_sq = sv_sq + X_sq - 2 * cross\n        K_mat = np.exp(-gamma_val * dists_sq)\n    else:\n        raise ValueError(f\"Unsupported kernel '{kernel}'. Choose 'linear', 'polynomial', or 'rbf'.\")\n    coeff = alphas * y_sv\n    decision_vals = coeff.dot(K_mat) + intercept\n    preds = np.where(decision_vals >= 0, 1, -1)\n    return preds.tolist()"}
{"task_id": 328, "completion_id": 0, "solution": "from typing import List\ndef first_capitalized_word(corpus: List[str]) -> List[str]:\n    \"\"\"Find the first capitalized word in *corpus* and return it in a list.\n\n    A *capitalized* word is one whose very first character is an uppercase\n    letter. If no word in the corpus meets this condition, return an empty\n    list instead.\n\n    Args:\n        corpus: List of candidate words.\n\n    Returns:\n        List containing the first capitalized word, or an empty list if none\n        exists.\n    \"\"\"\n    for word in corpus:\n        if word and word[0].isupper():\n            return [word]\n    return []"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        k = np.arange(0, N // 2 + 1)\n        freqs = k * df\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    freqs_rounded = np.round(freqs, 4)\n    return freqs_rounded.tolist()"}
{"task_id": 330, "completion_id": 0, "solution": ""}
{"task_id": 331, "completion_id": 0, "solution": ""}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counter = Counter()\n    for trans in transactions:\n        unique_items = set(trans)\n        item_counter.update(unique_items)\n    frequent_items = {item for (item, sup) in item_counter.items() if sup >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items, key=lambda item: (-item_counter[item], item))\n    order_lookup = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for trans in transactions:\n        filtered = set(trans) & frequent_items\n        if not filtered:\n            continue\n        ordered_trans = sorted(filtered, key=lambda item: order_lookup[item])\n        current_node = root\n        for item in ordered_trans:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            child = current_node['children'][item]\n            child['support'] += 1\n            current_node = child\n    return root"}
{"task_id": 333, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression(X: np.ndarray, y: np.ndarray, alpha: float=0.1, num_iter: int=10000) -> list[int]:\n    \"\"\"Train a logistic regression classifier on the provided dataset and\n    return the predicted labels for *the same* dataset.\n\n    Args:\n        X: 2-D NumPy array of shape (m, n) containing the training examples.\n        y: 1-D NumPy array of length m with binary labels (0 or 1).\n        alpha: Learning rate for gradient descent. Defaults to 0.1.\n        num_iter: Number of iterations for gradient descent. Defaults to 10000.\n\n    Returns:\n        A Python list of length *m* holding the predicted class labels (0/1)\n        produced by the trained classifier.\n    \"\"\"\n    (m, n) = X.shape\n    means = X.mean(axis=0)\n    stds = X.std(axis=0) + 1e-08\n    X_std = (X - means) / stds\n    X_aug = np.hstack([np.ones((m, 1)), X_std])\n    theta = np.zeros(n + 1)\n\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n    for _ in range(num_iter):\n        z = X_aug.dot(theta)\n        h = sigmoid(z)\n        grad = 1.0 / m * X_aug.T.dot(h - y)\n        theta -= alpha * grad\n    probs = sigmoid(X_aug.dot(theta))\n    preds = (probs >= 0.5).astype(int)\n    return preds.tolist()"}
{"task_id": 334, "completion_id": 0, "solution": ""}
{"task_id": 335, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function sets\n        Y = X.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y\n        have incompatible shapes (different number of columns).\n        If X has zero rows (N=0), returns an empty list.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim == 1 and X_arr.size == 0:\n        return []\n    if X_arr.ndim != 2:\n        return -1\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n        if Y_arr.ndim != 2:\n            return -1\n    (N, Cx) = X_arr.shape\n    (M, Cy) = Y_arr.shape\n    if Cx != Cy:\n        return -1\n    if N == 0:\n        return []\n    K = X_arr.dot(Y_arr.T) + float(c0)\n    K = np.round(K, 4)\n    return K.tolist()"}
{"task_id": 337, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_2D(X: 'np.ndarray', x: list[float | int], y: list[float | int]) -> list:\n    \"\"\"Nearest-Neighbour interpolation on a 2-D regular grid.\n\n    Args:\n        X: Image of shape (rows, cols, channels).\n        x: List of *x* (column) coordinates.\n        y: List of *y* (row) coordinates.\n\n    Returns:\n        Python list with shape (k, channels) containing the interpolated\n        pixel values.\n    \"\"\"\n    if len(x) == 0 or len(y) == 0:\n        return []\n    if len(x) != len(y):\n        raise ValueError('Coordinate lists x and y must have the same length.')\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    x_round = np.around(x_arr).astype(int)\n    y_round = np.around(y_arr).astype(int)\n    (rows, cols, _) = X.shape\n    x_clipped = np.clip(x_round, 0, cols - 1)\n    y_clipped = np.clip(y_round, 0, rows - 1)\n    sampled_pixels = X[y_clipped, x_clipped]\n    return sampled_pixels.tolist()"}
{"task_id": 338, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 339, "completion_id": 0, "solution": "from collections import Counter\ndef most_common_label(y: list) -> object:\n    \"\"\"Return the most frequent label in *y*.\n\n    If *y* is empty, the function returns ``None``.\n    In case of a tie, the label whose first appearance comes earliest\n    in *y* is returned.\n\n    Args:\n        y: A list containing hashable elements (e.g., strings, numbers).\n\n    Returns:\n        The label that occurs most frequently in *y*, or ``None`` if *y* is\n        empty.\n    \"\"\"\n    if not y:\n        return None\n    freq = Counter(y)\n    max_count = max(freq.values())\n    for element in y:\n        if freq[element] == max_count:\n            return element"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 342, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards_arr = np.asarray(rewards)\n    N = theta_samples.shape[0]\n    k = int(retain_prcnt * N)\n    topk_indices = np.argsort(rewards_arr)[::-1][:k]\n    elite_samples = theta_samples[topk_indices, :]\n    mu = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0)\n    mu_rounded = np.round(mu, 4).tolist()\n    var_rounded = np.round(var, 4).tolist()\n    return (mu_rounded, var_rounded)"}
{"task_id": 344, "completion_id": 0, "solution": "import heapq\nfrom collections import Counter\ndef huffman_encode(tokens: list[str]) -> dict[str, str]:\n    \"\"\"Generate a Huffman code for the supplied tokens.\n\n    The function must return a dictionary mapping **every** unique token in\n    *tokens* to its binary Huffman code.  All codes must be prefix-free and\n    consist only of the characters \u20180\u2019 and \u20181\u2019.\n    \"\"\"\n    if not tokens:\n        return {}\n    freq = Counter(tokens)\n    if len(freq) == 1:\n        only_token = next(iter(freq))\n        return {only_token: '0'}\n\n    class Node:\n        __slots__ = ('freq', 'sort_key', 'left', 'right', 'token')\n\n        def __init__(self, freq: int, sort_key: str, left: 'Node'=None, right: 'Node'=None, token: str=None):\n            self.freq = freq\n            self.sort_key = sort_key\n            self.left = left\n            self.right = right\n            self.token = token\n    heap = []\n    counter = 0\n    for (tok, f) in freq.items():\n        node = Node(f, tok, token=tok)\n        heapq.heappush(heap, (f, tok, counter, node))\n        counter += 1\n    while len(heap) > 1:\n        (f1, key1, _, node1) = heapq.heappop(heap)\n        (f2, key2, _, node2) = heapq.heappop(heap)\n        merged = Node(f1 + f2, '', left=node1, right=node2)\n        heapq.heappush(heap, (merged.freq, merged.sort_key, counter, merged))\n        counter += 1\n    (_, _, _, root) = heap[0]\n    codes: dict[str, str] = {}\n\n    def _assign_codes(node: Node, prefix: str) -> None:\n        if node.token is not None:\n            codes[node.token] = prefix\n            return\n        _assign_codes(node.left, prefix + '0')\n        _assign_codes(node.right, prefix + '1')\n    _assign_codes(root, '')\n    return codes"}
{"task_id": 345, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, mu0: np.ndarray, omega0: np.ndarray) -> list[float]:\n    \"\"\"Predict targets for X_test using Bayesian linear regression.\n\n    The function must add an intercept, compute the posterior mean of the\n    weight vector with a Normal prior (\u03bc\u2080, \u03a9\u2080), and return the predictions for\n    every sample in X_test rounded to four decimals.\n\n    Args:\n        X_train (np.ndarray): Training predictors without an intercept column.\n        y_train (np.ndarray): Training targets of shape (n_samples,).\n        X_test  (np.ndarray): Test predictors without an intercept column.\n        mu0     (np.ndarray): Prior mean vector (n_features + 1,).\n        omega0  (np.ndarray): Prior precision matrix\n                             (n_features + 1, n_features + 1).\n\n    Returns:\n        list[float]: Posterior-mean predictions for X_test.\n    \"\"\"\n    n_train = X_train.shape[0]\n    n_test = X_test.shape[0]\n    X_train_aug = np.hstack((np.ones((n_train, 1)), X_train))\n    X_test_aug = np.hstack((np.ones((n_test, 1)), X_test))\n    Omega_n = X_train_aug.T @ X_train_aug + omega0\n    b = X_train_aug.T @ y_train + omega0 @ mu0\n    mu_n = np.linalg.solve(Omega_n, b)\n    preds = X_test_aug @ mu_n\n    preds_rounded = np.round(preds, 4)\n    return preds_rounded.tolist()"}
{"task_id": 346, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 347, "completion_id": 0, "solution": "import numpy as np\ndef wgan_gp_loss(Y_fake: np.ndarray, module: str, Y_real: np.ndarray | None=None, gradInterp: np.ndarray | None=None, lambda_: float=10.0) -> float:\n    \"\"\"Compute the WGAN-GP loss for the critic or the generator.\n\n    Args:\n        Y_fake (np.ndarray): Critic outputs on fake samples (shape: (n_ex,)).\n        module (str): \"C\" for critic loss, \"G\" for generator loss.\n        Y_real (np.ndarray | None, optional): Critic outputs on real samples.\n            Required when *module* == \"C\". Defaults to None.\n        gradInterp (np.ndarray | None, optional): Gradients of the critic\n            outputs on the interpolated samples with respect to those samples.\n            Required when *module* == \"C\". Defaults to None.\n        lambda_ (float, optional): Gradient-penalty coefficient \u03bb. Defaults to\n            10.0.\n\n    Returns:\n        float: The requested loss rounded to four decimal places.\n    \"\"\"\n    module = module.upper()\n    if module not in {'C', 'G'}:\n        raise ValueError(f\"module must be 'C' or 'G', got {module!r}\")\n    if module == 'G':\n        loss_g = -np.mean(Y_fake)\n        return round(float(loss_g), 4)\n    if Y_real is None or gradInterp is None:\n        raise ValueError(\"Y_real and gradInterp must be provided when module == 'C'\")\n    mean_fake = np.mean(Y_fake)\n    mean_real = np.mean(Y_real)\n    flat_grads = gradInterp.reshape(gradInterp.shape[0], -1)\n    grad_norms = np.linalg.norm(flat_grads, axis=1)\n    gp = np.mean((grad_norms - 1.0) ** 2)\n    loss_c = mean_fake - mean_real + lambda_ * gp\n    return round(float(loss_c), 4)"}
{"task_id": 348, "completion_id": 0, "solution": ""}
{"task_id": 350, "completion_id": 0, "solution": ""}
{"task_id": 351, "completion_id": 0, "solution": "import numpy as np\ndef max_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: int) -> list:\n    \"\"\"Perform 2-D max pooling over a 4-D minibatch of images.\n\n    Args:\n        X: A 4-D NumPy array with shape (N, C, H, W).\n        pool_shape: Tuple (p_h, p_w) \u2013 height and width of the pooling window.\n        stride: The number of pixels the window moves vertically and horizontally.\n\n    Returns:\n        Nested Python list that represents the pooled tensor obtained via\n        the NumPy ``tolist()`` method. The returned list has shape\n        (N, C, out_h, out_w).\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    out_h = (H - p_h) // stride + 1\n    out_w = (W - p_w) // stride + 1\n    pooled = np.empty((N, C, out_h, out_w), dtype=X.dtype)\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start = i * stride\n            w_start = j * stride\n            window = X[:, :, h_start:h_start + p_h, w_start:w_start + p_w]\n            pooled[:, :, i, j] = window.max(axis=(2, 3))\n    return pooled.tolist()"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels_list = list(labels)\n    n = len(labels_list)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels_list)\n    H = 0.0\n    for cnt in counts.values():\n        p = cnt / n\n        H -= p * math.log2(p)\n    return round(H, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch) representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch) containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list obtained through .tolist().\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kR, kC, k_in_ch, out_ch) = W.shape\n    assert k_in_ch == in_ch, 'Input channels of X and W must match'\n    s = stride\n    d = dilation\n    eff_kR = kR + (kR - 1) * d\n    eff_kC = kC + (kC - 1) * d\n    if isinstance(pad, str) and pad.lower() == 'same':\n        pad_rows = max((in_rows - 1) * s + eff_kR - in_rows, 0)\n        pad_cols = max((in_cols - 1) * s + eff_kC - in_cols, 0)\n        pr_top = pad_rows // 2\n        pr_bot = pad_rows - pr_top\n        pc_left = pad_cols // 2\n        pc_right = pad_cols - pc_left\n    elif isinstance(pad, int):\n        pr_top = pr_bot = pad\n        pc_left = pc_right = pad\n    elif len(pad) == 2:\n        pr_top = pr_bot = pad[0]\n        pc_left = pc_right = pad[1]\n    elif len(pad) == 4:\n        (pr_top, pr_bot, pc_left, pc_right) = pad\n    else:\n        raise ValueError('Invalid pad specification')\n    X_pad = np.pad(X, ((0, 0), (pr_top, pr_bot), (pc_left, pc_right), (0, 0)), mode='constant', constant_values=0)\n    H_pad = in_rows + pr_top + pr_bot\n    W_pad = in_cols + pc_left + pc_right\n    out_rows = (H_pad - eff_kR) // s + 1\n    out_cols = (W_pad - eff_kC) // s + 1\n    row_offsets = np.repeat(np.arange(kR) * (d + 1), kC)\n    col_offsets = np.tile(np.arange(kC) * (d + 1), kR)\n    out_row_positions = np.arange(0, H_pad - eff_kR + 1, s)\n    out_col_positions = np.arange(0, W_pad - eff_kC + 1, s)\n    rows_idx = row_offsets[:, None, None] + out_row_positions[None, :, None]\n    cols_idx = col_offsets[:, None, None] + out_col_positions[None, None, :]\n    Xp = X_pad.transpose(0, 3, 1, 2)\n    X_cols = Xp[:, :, rows_idx, cols_idx]\n    X_cols = X_cols.transpose(0, 3, 4, 1, 2)\n    NOL = n_ex * out_rows * out_cols\n    X_matrix = X_cols.reshape(NOL, in_ch * (kR * kC))\n    W_col = W.transpose(2, 0, 1, 3).reshape(in_ch * (kR * kC), out_ch)\n    out_matrix = X_matrix.dot(W_col)\n    out = out_matrix.reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    X = np.asarray(data, dtype=float)\n    (n_samples, n_features) = X.shape\n    mean = X.mean(axis=0)\n    X_centered = X - mean\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(X_centered, full_matrices=False)\n        eigvals = S ** 2 / (n_samples - 1)\n        directions = Vt.T\n    elif solver == 'eigen':\n        cov = X_centered.T @ X_centered / (n_samples - 1)\n        (eigvals_all, eigvecs_all) = np.linalg.eigh(cov)\n        idx = np.argsort(eigvals_all)[::-1]\n        eigvals = eigvals_all[idx]\n        directions = eigvecs_all[:, idx]\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n    k_available = eigvals.shape[0]\n    k = min(n_components, k_available)\n    eigvals_sel = eigvals[:k]\n    directions_sel = directions[:, :k]\n    scores = X_centered @ directions_sel\n    tol = 1e-12\n    for j in range(k):\n        col = directions_sel[:, j]\n        for i in range(n_features):\n            if abs(col[i]) > tol:\n                if col[i] < 0:\n                    directions_sel[:, j] = -directions_sel[:, j]\n                    scores[:, j] = -scores[:, j]\n                break\n    total_var = eigvals.sum()\n    explained_variance_ratio = eigvals_sel / total_var\n    scores_rounded = np.round(scores, 4).tolist()\n    evr_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, evr_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = leaf.value\n        idx = max(range(len(probs)), key=probs.__getitem__)\n        return int(idx)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].astype(float, copy=True)\n    tol = 1e-06\n    for _ in range(max_iters):\n        diffs = data[:, None, :] - centroids[None, :, :]\n        dists_sq = np.sum(diffs * diffs, axis=2)\n        assignments = np.argmin(dists_sq, axis=1)\n        new_centroids = centroids.copy()\n        for j in range(K):\n            pts = data[assignments == j]\n            if pts.shape[0] > 0:\n                new_centroids[j] = pts.mean(axis=0)\n        shift = np.abs(new_centroids - centroids).max()\n        centroids = new_centroids\n        if shift <= tol:\n            break\n    centroids_rounded = np.round(centroids, 4).tolist()\n    centroids_rounded.sort()\n    return centroids_rounded"}
{"task_id": 358, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 359, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy(y, y_pred, derivative=False):\n    \"\"\"Cross-entropy utility.\n\n    Parameters\n    ----------\n    y : numpy.ndarray\n        One-hot encoded true labels, shape (n_samples, n_classes).\n    y_pred : numpy.ndarray\n        Predicted class probabilities, same shape as y.\n    derivative : bool, default False\n        If True, return the gradient; otherwise, return the loss.\n\n    Returns\n    -------\n    float or list of list of floats\n        Rounded loss (scalar) or gradient (nested list).\n    \"\"\"\n    eps = np.finfo(float).eps\n    if y.shape != y_pred.shape:\n        raise ValueError('Shape mismatch: y and y_pred must have the same shape')\n    if not derivative:\n        log_probs = np.log(y_pred + eps)\n        loss = -np.sum(y * log_probs)\n        return float(round(loss, 4))\n    else:\n        grad = y_pred - y\n        grad_rounded = np.round(grad, 4)\n        return grad_rounded.tolist()"}
{"task_id": 360, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    if arr.ndim != 2:\n        raise ValueError('Input must be a 2-D structure')\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized = arr / row_sums[:, np.newaxis]\n    rounded = np.round(normalized, 4)\n    return rounded.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def _check(space: Space, is_composite: bool) -> bool:\n        if not is_composite:\n            return isinstance(space, Box)\n        if isinstance(space, Tuple):\n            subs = space.spaces\n        elif isinstance(space, Dict):\n            subs = space.spaces.values()\n        else:\n            return isinstance(space, Box)\n        return all((isinstance(sub, Box) for sub in subs))\n    cont_action = _check(env.action_space, tuple_action)\n    cont_obs = _check(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 364, "completion_id": 0, "solution": ""}
{"task_id": 366, "completion_id": 0, "solution": "import numpy as np\ndef l2_distance(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute the pair-wise squared Euclidean distance matrix.\n\n    Args:\n        X (np.ndarray): A 2-D array with shape (n_samples, n_features).\n\n    Returns:\n        list[list[float]]: The n\u00d7n squared distance matrix where the element at\n            position (i, j) equals the squared \u2113\u2082 distance between samples i and\n            j. The diagonal must be zeros.\n    \"\"\"\n    if X.ndim != 2:\n        raise ValueError('Input array X must be 2-dimensional')\n    n_samples = X.shape[0]\n    if n_samples == 1:\n        return [[0.0]]\n    sum_sq = np.einsum('ij,ij->i', X, X)\n    G = X @ X.T\n    D = sum_sq[:, np.newaxis] + sum_sq[np.newaxis, :] - 2 * G\n    np.maximum(D, 0, out=D)\n    np.fill_diagonal(D, 0.0)\n    return D.tolist()"}
{"task_id": 367, "completion_id": 0, "solution": ""}
{"task_id": 368, "completion_id": 0, "solution": "import numpy as np\ndef minkowski(x: np.ndarray | list, y: np.ndarray | list, p: float) -> float:\n    \"\"\"Compute the Minkowski\u2013p distance between two vectors.\n\n    Args:\n        x (np.ndarray | list): First one-dimensional vector.\n        y (np.ndarray | list): Second one-dimensional vector of the same length.\n        p (float): Order of the norm (must be > 0).\n\n    Returns:\n        float: The Minkowski distance rounded to 4 decimal places, or -1 when\n               input validation fails.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    if x_arr.shape != y_arr.shape or p <= 0:\n        return -1\n    diff = np.abs(x_arr - y_arr) ** p\n    total = np.sum(diff)\n    dist = total ** (1.0 / p)\n    return round(float(dist), 4)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The 'updates' list must contain at least one array.\")\n    running_pred = np.zeros_like(updates[0], dtype=float)\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        row_max = np.max(running_pred, axis=1, keepdims=True)\n        exp_shifted = np.exp(running_pred - row_max)\n        probs = exp_shifted / np.sum(exp_shifted, axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 370, "completion_id": 0, "solution": ""}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It returns\n    the output volume as a list via ndarray.tolist().\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\"\n        dilation: non-negative integer, number of zeros inserted between\n                  neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if not isinstance(X, np.ndarray) or X.ndim != 3:\n        raise ValueError('X must be a 3D numpy array of shape (n, L, in_channels).')\n    if not isinstance(W, np.ndarray) or W.ndim != 3:\n        raise ValueError('W must be a 3D numpy array of shape (kernel_width, in_channels, out_channels).')\n    if not (isinstance(stride, int) and stride > 0):\n        raise ValueError('stride must be a positive integer.')\n    if not (isinstance(dilation, int) and dilation >= 0):\n        raise ValueError('dilation must be a non-negative integer.')\n    (n_examples, L, in_ch) = X.shape\n    (kw, in_ch_W, out_ch) = W.shape\n    if in_ch_W != in_ch:\n        raise ValueError('The in_channels dimension of W must match X.')\n    step = dilation + 1\n    effective_kernel = (kw - 1) * step + 1\n    if isinstance(pad, str):\n        if pad.lower() != 'same':\n            raise ValueError('pad string must be \"same\"')\n        out_len = math.ceil(L / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - L)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    elif isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif (isinstance(pad, tuple) or isinstance(pad, list)) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    else:\n        raise ValueError(\"pad must be int, 2-tuple, or 'same'\")\n    X_padded = np.pad(X, pad_width=((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    L_padded = X_padded.shape[1]\n    if not (isinstance(pad, str) and pad.lower() == 'same'):\n        out_len = (L_padded - effective_kernel) // stride + 1\n        if out_len < 0:\n            out_len = 0\n    Y = np.zeros((n_examples, out_len, out_ch), dtype=X.dtype)\n    for n in range(n_examples):\n        for t in range(out_len):\n            start = t * stride\n            for k in range(kw):\n                idx = start + k * step\n                x_slice = X_padded[n, idx, :]\n                Y[n, t, :] += x_slice.dot(W[k, :, :])\n    return Y.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    - X: Feature matrix of shape (m, n)\n    - y: Target vector of shape (m,)\n    - learning_rate: Step size for gradient descent\n    - n_iterations: Number of iterations to run gradient descent\n\n    Returns:\n    - (weights_list, bias) where:\n      * weights_list is a list of n floats (\u03b8 rounded to 4 decimals)\n      * bias is a float (b rounded to 4 decimals)\n    - If X and y have incompatible sample sizes, returns -1\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y).flatten()\n    if X.ndim != 2:\n        return -1\n    (m, n) = X.shape\n    if y.shape[0] != m or m == 0:\n        return -1\n    theta = np.zeros(n, dtype=float)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X.dot(theta) + b\n        errors = y_hat - y\n        dw = 2.0 / m * X.T.dot(errors)\n        db = 2.0 / m * errors.sum()\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = np.round(theta, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (theta_rounded, b_rounded)"}
{"task_id": 375, "completion_id": 0, "solution": ""}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose,\n    up to a tolerance for floating\u2010point comparisons.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n = len(X)\n    for row in X:\n        if len(row) != n:\n            return False\n    try:\n        arr = np.array(X, dtype=float)\n    except (ValueError, TypeError):\n        return False\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return False\n    return bool(np.allclose(arr, arr.T, atol=1e-08, rtol=0.0))"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for the logistic (binomial deviance) loss used in\n    gradient boosting for binary classification.\n\n    Parameters\n    ----------\n    y : list of int\n        True binary labels, each element must be 0 or 1.\n    f : list of float\n        Current prediction scores for each sample (real-valued).\n\n    Returns\n    -------\n    List[float]\n        The negative gradient g_i for each sample, rounded to 4 decimal places.\n        If `y` contains values other than 0 or 1, returns -1.\n\n    Notes\n    -----\n    Internally, labels y_i are converted to y'_i = 2*y_i - 1 in {-1, +1}, and the\n    logistic loss is\n        L(y', f) = log(1 + exp(-2 * y' * f))\n    Its negative gradient w.r.t. f is\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n    \"\"\"\n    y_arr = np.array(y)\n    f_arr = np.array(f, dtype=float)\n    unique_labels = np.unique(y_arr)\n    if not set(unique_labels).issubset({0, 1}):\n        return -1\n    y_prime = 2 * y_arr - 1\n    denom = 1.0 + np.exp(y_prime * f_arr)\n    gradients = y_prime / denom\n    return np.round(gradients, 4).tolist()"}
{"task_id": 378, "completion_id": 0, "solution": "def indicator(flag: int) -> int:\n    return int(flag == 1)"}
{"task_id": 379, "completion_id": 0, "solution": "def sort_priority_nodes(nodes: list[dict]) -> list[str]:\n    \"\"\"Sort the given priority-queue nodes and return their keys.\n\n    Two nodes are ordered as follows:\n      1. The one with the smaller ``priority`` value comes first.\n      2. If priorities are equal, the node with the smaller ``entry_id``\n         comes first.\n\n    Args:\n        nodes: A list of dictionaries.  Each dictionary must contain the\n               fields ``'key'``, ``'val'``, ``'priority'`` and\n               ``'entry_id'``.\n\n    Returns:\n        A list of ``key`` values ordered from highest to lowest priority\n        according to the rule above.\n    \"\"\"\n    sorted_nodes = sorted(nodes, key=lambda node: (node['priority'], node['entry_id']))\n    return [node['key'] for node in sorted_nodes]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 382, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 383, "completion_id": 0, "solution": "def find_bounds(y_i: int, y_j: int, alpha_i: float, alpha_j: float, C: float) -> list[float]:\n    \"\"\"Return the feasible interval [L, H] for alpha_j in SMO.\n\n    Parameters\n    ----------\n    y_i : int\n        Label of the i-th example (\u22121 or 1).\n    y_j : int\n        Label of the j-th example (\u22121 or 1).\n    alpha_i : float\n        Current Lagrange multiplier for the i-th example.\n    alpha_j : float\n        Current Lagrange multiplier for the j-th example.\n    C : float\n        Regularisation constant of the SVM.\n\n    Returns\n    -------\n    list[float]\n        A two-element list [L, H] with both values rounded to 4 decimals.\n    \"\"\"\n    if y_i != y_j:\n        L = max(0.0, alpha_j - alpha_i)\n        H = min(C, C - alpha_i + alpha_j)\n    else:\n        L = max(0.0, alpha_i + alpha_j - C)\n        H = min(C, alpha_i + alpha_j)\n    return [round(L, 4), round(H, 4)]"}
{"task_id": 384, "completion_id": 0, "solution": "import numpy as np\ndef get_eigvecs(L: list[list[int | float]], k: int):\n    \"\"\"Calculate the k eigenvectors that correspond to the smallest k eigenvalues.\n\n    Parameters\n    ----------\n    L : list[list[int | float]] | np.ndarray\n        Square Laplacian matrix of the graph.\n    k : int\n        Number of eigenvectors to return.\n\n    Returns\n    -------\n    list[list[float]] | int\n        Matrix whose columns are the selected eigenvectors rounded to 4 decimal\n        places. Returns -1 if *k* is invalid.\n    \"\"\"\n    A = np.array(L, dtype=float)\n    (n, m) = A.shape\n    if n != m or k > n or k <= 0:\n        return -1\n    (eigenvals, eigenvecs) = np.linalg.eig(A)\n    eigenvals = eigenvals.real\n    eigenvecs = eigenvecs.real\n    idx = np.argsort(eigenvals)\n    chosen_idx = idx[:k]\n    V = eigenvecs[:, chosen_idx].copy()\n    eps = 1e-08\n    for j in range(k):\n        vec = V[:, j]\n        norm = np.linalg.norm(vec)\n        if norm < eps:\n            continue\n        vec /= norm\n        for x in vec:\n            if abs(x) > eps:\n                if x < 0:\n                    vec[:] = -vec\n                break\n        V[:, j] = vec\n    V = np.round(V, 4)\n    V[np.isclose(V, 0.0, atol=0.0001)] = 0.0\n    return V.tolist()"}
{"task_id": 385, "completion_id": 0, "solution": "import numpy as np\ndef lda_transform(X: list[list[int | float]], y: list[int], k: int) -> list[list[float]]:\n    \"\"\"Project the dataset X with labels y onto the first k LDA components.\"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y)\n    (n_samples, n_features) = X_arr.shape\n    (classes, counts) = np.unique(y_arr, return_counts=True)\n    c = len(classes)\n    max_components = max(c - 1, 0)\n    if max_components == 0 or k < 1:\n        return [[] for _ in range(n_samples)]\n    k = min(k, max_components)\n    overall_mean = X_arr.mean(axis=0)\n    S_w = np.zeros((n_features, n_features))\n    S_b = np.zeros((n_features, n_features))\n    for cls in classes:\n        X_i = X_arr[y_arr == cls]\n        n_i = X_i.shape[0]\n        mean_i = X_i.mean(axis=0)\n        dev = X_i - mean_i\n        S_w += dev.T.dot(dev)\n        diff = (mean_i - overall_mean).reshape(n_features, 1)\n        S_b += n_i * (diff @ diff.T)\n    S_w_inv = np.linalg.pinv(S_w)\n    mat = S_w_inv.dot(S_b)\n    (eigvals, eigvecs) = np.linalg.eig(mat)\n    eigvals = eigvals.real\n    eigvecs = eigvecs.real\n    sorted_indices = np.argsort(eigvals)[::-1]\n    W = np.zeros((n_features, k))\n    for idx in range(k):\n        vec = eigvecs[:, sorted_indices[idx]]\n        vec = vec / np.linalg.norm(vec)\n        if vec[0] < 0:\n            vec = -vec\n        W[:, idx] = vec\n    Y = X_arr.dot(W)\n    Y = np.round(Y, 4)\n    return Y.tolist()"}
{"task_id": 386, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 387, "completion_id": 0, "solution": ""}
{"task_id": 389, "completion_id": 0, "solution": "import numpy as np\ndef compute_laplacian(W):\n    \"\"\"Compute the (unnormalised) Laplacian matrix of an undirected graph.\n\n    Parameters\n    ----------\n    W : list[list[int | float]] | np.ndarray\n        Square weighted adjacency matrix of the graph.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The Laplacian matrix rounded to 4 decimal places and converted to a\n        Python list of lists. Returns -1 if the input is not a square matrix.\n    \"\"\"\n    arr = np.array(W, dtype=float)\n    if arr.ndim != 2 or arr.shape[0] != arr.shape[1]:\n        return -1\n    row_sums = arr.sum(axis=1)\n    D = np.diag(row_sums)\n    L = D - arr\n    L_rounded = np.round(L, 4)\n    return L_rounded.tolist()"}
{"task_id": 391, "completion_id": 0, "solution": "import numpy as np\ndef nn_interpolate_1D(X: np.ndarray, t: list[float]) -> list[list[float]]:\n    \"\"\"Nearest-neighbour interpolation for a 1-D multi-channel signal.\n\n    Args:\n        X: A NumPy array of shape (in_length, in_channels) representing the\n           original sampled signal.\n        t: A list (or 1-D array-like) of float coordinates at which the signal\n           should be interpolated.\n\n    Returns:\n        A list of lists containing the interpolated samples.  The outer list\n        length equals ``len(t)``; each inner list has length ``in_channels``.\n    \"\"\"\n    t_arr = np.asarray(t, dtype=float)\n    idxs = np.around(t_arr).astype(int)\n    in_length = X.shape[0]\n    idxs = np.clip(idxs, 0, in_length - 1)\n    result = X[idxs]\n    return result.tolist()"}
{"task_id": 392, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 395, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef print_backward_result(beta: np.ndarray, b_prob: float) -> str:\n    \"\"\"Return a formatted string with a \u03b2-matrix and its probability.\n\n    The string must look like:\n        **************************************************\n        Beta:\n        <beta as str(beta)>\n        Probability of sequence: <b_prob>\n\n    Args:\n        beta: A 2-D NumPy array of \u03b2-values.\n        b_prob: Probability of the observation sequence.\n\n    Returns:\n        The formatted multi-line string (do not print inside this function).\n    \"\"\"\n    stars = '*' * 50\n    return stars + '\\nBeta:\\n' + str(beta) + '\\nProbability of sequence: ' + str(b_prob)"}
{"task_id": 396, "completion_id": 0, "solution": "import numpy as np\ndef tanh_with_derivatives(x):\n    \"\"\"Compute tanh and its first two derivatives element-wise.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        1-D collection of real numbers.\n\n    Returns\n    -------\n    list[list[float]]\n        A list containing three lists:\n        1. tanh(x),\n        2. First derivative of tanh,\n        3. Second derivative of tanh.\n\n    Notes\n    -----\n    \u2022 Every numeric result is rounded to 6 decimal places.\n    \u2022 The input is not modified in-place.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    t = np.tanh(x_arr)\n    dt = 1.0 - t ** 2\n    d2t = -2.0 * t * dt\n    t_rounded = np.round(t, 6)\n    dt_rounded = np.round(dt, 6)\n    d2t_rounded = np.round(d2t, 6)\n    return [t_rounded.tolist(), dt_rounded.tolist(), d2t_rounded.tolist()]"}
{"task_id": 397, "completion_id": 0, "solution": ""}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True, return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    if not derivative:\n        out = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1.0))\n    else:\n        neg_elu = alpha * (np.exp(x_arr) - 1.0)\n        out = np.where(x_arr >= 0, 1.0, neg_elu + alpha)\n    return np.round(out, 4).tolist()"}
{"task_id": 399, "completion_id": 0, "solution": "import numpy as np\ndef pairwise_distances(X, Y):\n    \"\"\"Compute the Euclidean distance between every pair of points in X and Y.\n\n    Parameters\n    ----------\n    X : numpy.ndarray\n        A 2-D array of shape (m, d) where each row is a point.\n    Y : numpy.ndarray\n        A 2-D array of shape (n, d) where each row is a point.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The m\u00d7n matrix of distances rounded to four decimals as a list of\n        lists, or \u22121 if the inputs are invalid.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not isinstance(Y, np.ndarray) or X.ndim != 2 or (Y.ndim != 2) or (X.shape[1] != Y.shape[1]):\n        return -1\n    X_norm2 = np.sum(X * X, axis=1).reshape(-1, 1)\n    Y_norm2 = np.sum(Y * Y, axis=1).reshape(1, -1)\n    sq_dists = X_norm2 + Y_norm2 - 2 * X.dot(Y.T)\n    sq_dists = np.maximum(sq_dists, 0.0)\n    dists = np.sqrt(sq_dists)\n    dists_rounded = np.round(dists, 4)\n    return dists_rounded.tolist()"}
{"task_id": 400, "completion_id": 0, "solution": "import math"}
{"task_id": 401, "completion_id": 0, "solution": ""}
{"task_id": 402, "completion_id": 0, "solution": ""}
{"task_id": 405, "completion_id": 0, "solution": "import numpy as np\nimport re\ndef apply_activation(x, param=None):\n    \"\"\"Apply a chosen activation to the input vector.\n\n    Args:\n        x (list[float] | np.ndarray): Input data. Anything that can be\n            converted to a NumPy array of floats is accepted.\n        param (str | None, optional): Description of the activation. See the\n            task specification for the accepted values. If *None* the\n            identity function is applied.\n\n    Returns:\n        list[float]: Result of applying the activation element-wise, rounded\n            to six decimals and converted to a standard Python *list*.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    float_re = '[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+)(?:[eE][-+]?\\\\d+)?'\n    leaky_re = re.compile(f'leaky\\\\s*relu(?:\\\\s*\\\\(\\\\s*alpha\\\\s*=\\\\s*(?P<alpha>{float_re})\\\\s*\\\\))?', re.IGNORECASE)\n    affine_re = re.compile(f'affine\\\\s*\\\\(\\\\s*slope\\\\s*=\\\\s*(?P<slope>{float_re})\\\\s*,\\\\s*intercept\\\\s*=\\\\s*(?P<intercept>{float_re})\\\\s*\\\\)', re.IGNORECASE)\n    if param is None or (isinstance(param, str) and param.strip().lower() == 'identity'):\n        result = x_arr\n    elif isinstance(param, str):\n        p = param.strip()\n        lower = p.lower()\n        if lower == 'relu':\n            result = np.maximum(0, x_arr)\n        elif lower == 'tanh':\n            result = np.tanh(x_arr)\n        elif lower == 'sigmoid':\n            result = 1.0 / (1.0 + np.exp(-x_arr))\n        else:\n            m_leaky = leaky_re.fullmatch(p)\n            if m_leaky:\n                alpha_str = m_leaky.group('alpha')\n                alpha = float(alpha_str) if alpha_str is not None else 0.01\n                result = np.where(x_arr > 0, x_arr, alpha * x_arr)\n            else:\n                m_aff = affine_re.fullmatch(p)\n                if m_aff:\n                    slope = float(m_aff.group('slope'))\n                    intercept = float(m_aff.group('intercept'))\n                    result = slope * x_arr + intercept\n                else:\n                    raise ValueError(f'Unknown activation: {param}')\n    else:\n        raise ValueError(f'Unknown activation: {param}')\n    result = np.round(result, 6)\n    if result.ndim == 0:\n        return [float(result.item())]\n    else:\n        return result.tolist()"}
{"task_id": 406, "completion_id": 0, "solution": ""}
{"task_id": 410, "completion_id": 0, "solution": "import re\ndef parse_activation(act_str: str):\n    \"\"\"Parse an activation-function description string.\n\n    The string can be one of the following forms:\n        \u2022 \"ReLU\"\n        \u2022 \"Sigmoid\"\n        \u2022 \"Tanh\"\n        \u2022 \"Affine(slope=<number>, intercept=<number>)\"\n        \u2022 \"Leaky ReLU(alpha=<number>)\"\n\n    Args:\n        act_str: Description of the activation function.\n\n    Returns:\n        A dictionary with key \"type\" and, when applicable, its parameters.\n        If the input format is invalid, return -1.\n    \"\"\"\n    s = act_str.strip()\n    if s == 'ReLU':\n        return {'type': 'ReLU'}\n    if s == 'Sigmoid':\n        return {'type': 'Sigmoid'}\n    if s == 'Tanh':\n        return {'type': 'Tanh'}\n    num = '[+-]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)'\n    affine_pattern = f'^Affine\\n                          \\\\s*\\\\(\\n                            \\\\s*slope\\\\s*=\\\\s*(?P<slope>{num})\\n                            \\\\s*,\\\\s*\\n                            intercept\\\\s*=\\\\s*(?P<intercept>{num})\\n                          \\\\s*\\\\)\\n                          $'\n    m = re.fullmatch(affine_pattern, s, re.VERBOSE)\n    if m:\n        try:\n            slope_val = float(m.group('slope'))\n            intercept_val = float(m.group('intercept'))\n        except ValueError:\n            return -1\n        return {'type': 'Affine', 'slope': slope_val, 'intercept': intercept_val}\n    leaky_pattern = f'^Leaky\\\\ ReLU\\n                          \\\\s*\\\\(\\n                            \\\\s*alpha\\\\s*=\\\\s*(?P<alpha>{num})\\n                          \\\\s*\\\\)\\n                          $'\n    m = re.fullmatch(leaky_pattern, s, re.VERBOSE)\n    if m:\n        try:\n            alpha_val = float(m.group('alpha'))\n        except ValueError:\n            return -1\n        return {'type': 'Leaky ReLU', 'alpha': alpha_val}\n    return -1"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\nimport numbers"}
{"task_id": 412, "completion_id": 0, "solution": "def get_metric(name: str):\n    \"\"\"Return an evaluation metric function by *name*.\n\n    Supported names:\n    - 'accuracy'\n    - 'precision'\n    - 'recall'\n    - 'f1'\n\n    If the name is invalid, the function should return -1.\n    The returned metric functions must accept two equal-length iterables\n    (y_true, y_pred) containing only 0s and 1s and return the metric value\n    rounded to 4 decimal places.\n    \"\"\"\n\n    def accuracy(y_true, y_pred):\n        total = len(y_true)\n        if total == 0:\n            return 0.0\n        correct = 0\n        for (t, p) in zip(y_true, y_pred):\n            if t == p:\n                correct += 1\n        return round(correct / total, 4)\n\n    def precision(y_true, y_pred):\n        tp = 0\n        fp = 0\n        for (t, p) in zip(y_true, y_pred):\n            if p == 1:\n                if t == 1:\n                    tp += 1\n                else:\n                    fp += 1\n        denom = tp + fp\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def recall(y_true, y_pred):\n        tp = 0\n        fn = 0\n        for (t, p) in zip(y_true, y_pred):\n            if t == 1:\n                if p == 1:\n                    tp += 1\n                else:\n                    fn += 1\n        denom = tp + fn\n        if denom == 0:\n            return 0.0\n        return round(tp / denom, 4)\n\n    def f1(y_true, y_pred):\n        tp = fp = fn = 0\n        for (t, p) in zip(y_true, y_pred):\n            if p == 1:\n                if t == 1:\n                    tp += 1\n                else:\n                    fp += 1\n            if t == 1 and p == 0:\n                fn += 1\n        p_denom = tp + fp\n        r_denom = tp + fn\n        if p_denom == 0 or r_denom == 0:\n            return 0.0\n        p_val = tp / p_denom\n        r_val = tp / r_denom\n        if p_val == 0 and r_val == 0:\n            return 0.0\n        f1_score = 2 * p_val * r_val / (p_val + r_val)\n        return round(f1_score, 4)\n    metrics = {'accuracy': accuracy, 'precision': precision, 'recall': recall, 'f1': f1}\n    return metrics.get(name, -1)"}
{"task_id": 413, "completion_id": 0, "solution": ""}
{"task_id": 414, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 415, "completion_id": 0, "solution": "import numpy as np\ndef dct2(frame: list[int | float]) -> list[float]:\n    \"\"\"Un\u2010normalised 1-D DCT-II.\n    \n    For an input signal x of length N, computes\n        X[k] = sum_{n=0..N-1} x[n] * cos(pi/N * (n + 0.5) * k)\n    for k = 0..N-1, then rounds each coefficient to 4 decimal places.\n    \n    Args:\n        frame: list of real numbers (ints or floats)\n    Returns:\n        list of DCT-II coefficients (floats), same length as frame.\n        Empty input returns an empty list.\n    \"\"\"\n    N = len(frame)\n    if N == 0:\n        return []\n    x = np.asarray(frame, dtype=float)\n    n = np.arange(N)\n    k = np.arange(N)\n    angles = np.pi / N * (n[:, None] + 0.5) * k[None, :]\n    X = np.dot(x, np.cos(angles))\n    X_rounded = np.round(X, 4)\n    return X_rounded.tolist()"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math"}
{"task_id": 417, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int=1) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Perform Principal Component Analysis and return the projected data and its reconstruction.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int, default=1\n        Number of principal components to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[list[float]]]\n        * First element  \u2013 the data expressed in the *k*-dimensional PCA space.\n        * Second element \u2013 the data reconstructed back in the original space.\n\n        Both matrices are rounded to 4 decimal places before being converted\n        to ordinary Python lists.\n    \"\"\"\n    X = np.asarray(data, dtype=float)\n    (n_samples, n_features) = X.shape\n    mean_vec = X.mean(axis=0)\n    X_centered = X - mean_vec\n    cov = X_centered.T @ X_centered / (n_samples - 1)\n    (eig_vals, eig_vecs) = np.linalg.eigh(cov)\n    order = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, order]\n    k_eff = min(k, n_features)\n    components = eig_vecs[:, :k_eff]\n    tol = 1e-08\n    for j in range(k_eff):\n        v = components[:, j]\n        nonzeros = np.where(np.abs(v) > tol)[0]\n        if nonzeros.size > 0:\n            first = nonzeros[0]\n            if v[first] < 0:\n                components[:, j] = -v\n    projected = X_centered @ components\n    reconstructed = projected @ components.T + mean_vec\n    projected_rounded = np.round(projected, 4)\n    reconstructed_rounded = np.round(reconstructed, 4)\n    return (projected_rounded.tolist(), reconstructed_rounded.tolist())"}
{"task_id": 418, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    Returns the MAP predictive mean for each row in X_new, rounded to 4 decimals.\n    \"\"\"\n    if fit_intercept:\n        ones_train = np.ones((X.shape[0], 1))\n        X = np.hstack((ones_train, X))\n        ones_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack((ones_new, X_new))\n    M = X.shape[1]\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    else:\n        V_arr = np.array(V)\n        if V_arr.ndim == 1:\n            if V_arr.shape[0] != M:\n                raise ValueError(f'Length of V ({V_arr.shape[0]}) != number of features ({M})')\n            V_inv = np.diag(1.0 / V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f'Shape of V {V_arr.shape} != ({M},{M})')\n            V_inv = np.linalg.inv(V_arr)\n        else:\n            raise ValueError('V must be scalar, 1D array or 2D square matrix')\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu, dtype=float)\n    else:\n        mu_arr = np.array(mu, dtype=float)\n        if mu_arr.ndim != 1 or mu_arr.shape[0] != M:\n            raise ValueError(f'mu must be scalar or length-{M} vector')\n        mu_vec = mu_arr\n    A = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(A)\n    b = V_inv @ mu_vec + X.T @ y\n    mu_p = Sigma_p @ b\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 420, "completion_id": 0, "solution": "import numpy as np\ndef get_split_mask(X: np.ndarray, column: int, value: float) -> tuple[list[bool], list[bool]]:\n    \"\"\"Generate Boolean masks that split rows of *X* on a given threshold.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    column : int\n        Index of the column (feature) used for the split.\n    value : float\n        Threshold value for the split.\n\n    Returns\n    -------\n    tuple[list[bool], list[bool]]\n        A pair *(left_mask, right_mask)* where `left_mask[i]` is `True` iff\n        `X[i, column] < value` and `right_mask[i]` is `True` iff\n        `X[i, column] >= value`.\n\n    If `column` is out of bounds, returns two empty lists.\n    \"\"\"\n    if column < 0 or column >= X.shape[1]:\n        return ([], [])\n    left_bool = X[:, column] < value\n    right_bool = X[:, column] >= value\n    return (left_bool.tolist(), right_bool.tolist())"}
{"task_id": 421, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Implement the DBSCAN algorithm **without** using external machine-learning\n    libraries (e.g. scikit-learn). The function assigns a cluster label to\n    every point in *data* based on the provided *eps* and *min_samples*\n    parameters.\n\n    Args:\n        data: NumPy array of shape (n_samples, n_features) containing the data\n            points to be clustered.\n        eps: Maximum distance two points can be apart to be considered\n            neighbours.\n        min_samples: Minimum number of points required to form a dense region\n            (core point).\n\n    Returns:\n        A list of integers where the *i-th* value is the cluster label of the\n        *i-th* sample in *data*. Noise points are labelled **-1**, while\n        clusters are numbered 1, 2, 3, \u2026 in the order they are first discovered.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = np.zeros(n_samples, dtype=int)\n    visited = np.zeros(n_samples, dtype=bool)\n    neighbors_list = []\n    for i in range(n_samples):\n        dists = np.linalg.norm(data - data[i], axis=1)\n        neighbors = np.where(dists <= eps)[0].tolist()\n        neighbors_list.append(neighbors)\n    cluster_id = 0\n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        visited[i] = True\n        neighs = neighbors_list[i]\n        if len(neighs) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        seed_set = neighs[:]\n        idx = 0\n        while idx < len(seed_set):\n            j = seed_set[idx]\n            if not visited[j]:\n                visited[j] = True\n                neighs_j = neighbors_list[j]\n                if len(neighs_j) >= min_samples:\n                    seed_set.extend(neighs_j)\n            if labels[j] <= 0:\n                labels[j] = cluster_id\n            idx += 1\n    return labels.tolist()"}
{"task_id": 422, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x: 'np.ndarray | list | tuple | float | int', order: int=0):\n    \"\"\"SoftPlus activation function and its derivatives.\n\n    Parameters\n    ----------\n    x : float | int | list | tuple | np.ndarray\n        Input data on which SoftPlus or its derivatives will be computed.\n    order : int, optional\n        0  -> SoftPlus(x)\n        1  -> SoftPlus'(x)\n        2  -> SoftPlus''(x)\n        Any other value should make the function return -1.\n\n    Returns\n    -------\n    float | list\n        Result rounded to 4 decimal places. The shape mirrors the input. If the\n        order is invalid, returns -1.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    if order == 0:\n        result = np.log1p(np.exp(x_arr))\n    elif order == 1:\n        result = 1 / (1 + np.exp(-x_arr))\n    elif order == 2:\n        s = 1 / (1 + np.exp(-x_arr))\n        result = s * (1 - s)\n    else:\n        return -1\n    rounded = np.round(result, 4)\n    return rounded.tolist()"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted) or len(actual) == 0:\n        return -1\n    for (a, p) in zip(actual, predicted):\n        if not (isinstance(a, (int, float)) and isinstance(p, (int, float))):\n            return -1\n        if a < 0 or p < 0:\n            return -1\n    act_arr = np.array(actual, dtype=float)\n    pred_arr = np.array(predicted, dtype=float)\n    log_diff = np.log1p(pred_arr) - np.log1p(act_arr)\n    msle = np.mean(log_diff ** 2)\n    rmsle = np.sqrt(msle)\n    return round(rmsle, 4)"}
{"task_id": 424, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 425, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef f_entropy(p: list[int] | np.ndarray) -> float:\n    \"\"\"\n    Calculate the Shannon entropy (natural logarithm) of a one-dimensional\n    collection of non-negative integers.\n\n    Parameters\n    ----------\n    p : list[int] or np.ndarray\n        Input sequence of non-negative integers (symbols).\n\n    Returns\n    -------\n    float\n        Shannon entropy H = -sum(p_i * ln(p_i)), rounded to 4 decimal places.\n        If the sequence has only one unique value (or is empty), returns 0.0.\n    \"\"\"\n    arr = np.asarray(p, dtype=int)\n    if arr.size == 0:\n        return 0.0\n    (_, counts) = np.unique(arr, return_counts=True)\n    if counts.size <= 1:\n        return 0.0\n    probs = counts / counts.sum()\n    entropy = -np.sum(probs * np.log(probs))\n    return round(float(entropy), 4)"}
{"task_id": 426, "completion_id": 0, "solution": "def classification_accuracy(y_true: list, y_pred: list) -> float:\n    \"\"\"Compute the accuracy between the true and predicted class labels.\n\n    Args:\n        y_true (list): Ground-truth class labels.\n        y_pred (list): Predicted class labels produced by a model.\n\n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n              Returns -1 when the inputs have different lengths or when\n              either of the inputs is empty.\n    \"\"\"\n    if not y_true or not y_pred or len(y_true) != len(y_pred):\n        return -1\n    correct = sum((1 for (true, pred) in zip(y_true, y_pred) if true == pred))\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 427, "completion_id": 0, "solution": "import numpy as np\ndef identity_activation(z):\n    \"\"\"Compute identity activation and its derivative.\n\n    Args:\n        z (list | tuple | numpy.ndarray): Input data of any numeric type and\n            shape.\n\n    Returns:\n        tuple[list, list]: A tuple (activation, derivative) where both elements\n            are Python lists matching the shape of the input.\n    \"\"\"\n    z_arr = np.array(z)\n    activation = z_arr\n    derivative = np.ones_like(z_arr)\n    return (activation.tolist(), derivative.tolist())"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len if symmetric else window_len + 1\n    denom = N - 1\n    window = []\n    for n in range(N):\n        val = 0.5 - 0.5 * math.cos(2 * math.pi * n / denom)\n        window.append(round(val, 4))\n    if not symmetric:\n        window = window[:-1]\n    return list(window)"}
{"task_id": 429, "completion_id": 0, "solution": "import numpy as np\ndef oracle_payoff(context_probs: np.ndarray, context: np.ndarray) -> tuple[float, int]:\n    \"\"\"Oracle that returns the optimal expected reward and the corresponding arm.\n\n    Parameters\n    ----------\n    context_probs : np.ndarray\n        A 2-D array of shape (D, K) where each row represents a context and each\n        column an arm. Entry (i, j) is the success probability of arm *j* when\n        the active context is *i*.\n    context : np.ndarray\n        A one-hot vector of length *D* identifying the current context.\n\n    Returns\n    -------\n    tuple[float, int]\n        (optimal_rwd, optimal_arm): the best achievable expected reward (rounded\n        to four decimals) and the index of the arm that achieves it. If the\n        input context is invalid the function returns (-1, -1).\n    \"\"\"\n    if not isinstance(context, np.ndarray) or context.ndim != 1:\n        return (-1, -1)\n    D = context_probs.shape[0]\n    if context.shape[0] != D:\n        return (-1, -1)\n    unique_vals = np.unique(context)\n    if not np.all(np.isin(unique_vals, [0, 1])):\n        return (-1, -1)\n    if context.sum() != 1:\n        return (-1, -1)\n    ctx_idx = int(np.argmax(context))\n    probs = context_probs[ctx_idx]\n    optimal_arm = int(np.argmax(probs))\n    optimal_rwd = float(np.round(probs[optimal_arm], 4))\n    return (optimal_rwd, optimal_arm)"}
{"task_id": 430, "completion_id": 0, "solution": "from typing import List, Dict, Set, Tuple\ndef topological_sort(vertices: list, edges: list[tuple]) -> list | None:\n    \"\"\"Determine a topological ordering of a directed graph.\n\n    The implementation **must** use depth-first search (DFS) and follow the\n    deterministic exploration rule described in the task description.\n\n    Args:\n        vertices: List of vertex identifiers (hashable).\n        edges:    List of directed edges given as 2-tuples (source, target).\n\n    Returns:\n        \u2022 List of vertices in topological order when the graph is acyclic.\n        \u2022 ``None`` when the graph contains at least one directed cycle.\n    \"\"\"\n    index = {v: i for (i, v) in enumerate(vertices)}\n    adj: Dict[object, List[object]] = {v: [] for v in vertices}\n    for (u, v) in edges:\n        if u in adj and v in adj:\n            adj[u].append(v)\n    for u in adj:\n        adj[u].sort(key=lambda w: index[w])\n    state: Dict[object, int] = {v: 0 for v in vertices}\n    result: List[object] = []\n\n    def dfs(u) -> bool:\n        \"\"\"Return False if a cycle is detected, True otherwise.\"\"\"\n        state[u] = 1\n        for w in adj[u]:\n            if state[w] == 0:\n                if not dfs(w):\n                    return False\n            elif state[w] == 1:\n                return False\n        state[u] = 2\n        result.append(u)\n        return True\n    for v in vertices:\n        if state[v] == 0:\n            if not dfs(v):\n                return None\n    return result[::-1]"}
{"task_id": 431, "completion_id": 0, "solution": "import numpy as np\ndef dist(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors.\n\n    The vectors may be supplied as Python lists, tuples, or NumPy arrays. If the\n    vectors are of unequal length, the function returns -1.\n\n    Parameters\n    ----------\n    x1 : list | tuple | numpy.ndarray\n        First 1-D vector containing numeric (int/float) values.\n    x2 : list | tuple | numpy.ndarray\n        Second 1-D vector containing numeric (int/float) values.\n\n    Returns\n    -------\n    float\n        Euclidean distance rounded to 4 decimal places, or -1 if the input\n        vectors are of different lengths.\n    \"\"\"\n    arr1 = np.asarray(x1, dtype=float)\n    arr2 = np.asarray(x2, dtype=float)\n    if arr1.ndim != 1 or arr2.ndim != 1:\n        return -1\n    if arr1.shape[0] != arr2.shape[0]:\n        return -1\n    diff = arr1 - arr2\n    distance = np.sqrt(np.dot(diff, diff))\n    return float(round(distance, 4))"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = float(kernel_height * kernel_width)\n        fan_in = float(in_channels) * receptive_field_size\n        fan_out = float(out_channels) * receptive_field_size\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 434, "completion_id": 0, "solution": "import numpy as np\ndef softmax(logits: np.ndarray) -> list[list[float]]:\n    \"\"\"Compute a row-wise numerically stable softmax of the input array.\n\n    Args:\n        logits: A NumPy array of shape (m, n) or (n,). If 1-D, it's treated\n                as a single row.\n\n    Returns:\n        A Python list of lists of shape (m, n), where each inner list contains\n        the softmax probabilities for that row, rounded to 6 decimal places.\n    \"\"\"\n    if logits.ndim == 1:\n        logits = logits.reshape(1, -1)\n    row_max = np.max(logits, axis=1, keepdims=True)\n    shifted = logits - row_max\n    exps = np.exp(shifted)\n    sum_exps = np.sum(exps, axis=1, keepdims=True)\n    softmax_vals = exps / sum_exps\n    result = [[round(float(x), 6) for x in row] for row in softmax_vals]\n    return result"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value is rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    m = y_arr.shape[0]\n    y_mean = y_arr.mean() if m > 0 else 0.0\n    if n_estimators <= 0 or learning_rate == 0.0:\n        return [round(y_mean, 4)] * m\n    y_pred = np.full(m, y_mean, dtype=float)\n    ones = np.ones((m, 1), dtype=float)\n    X_design = np.hstack((ones, X_arr))\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        beta = np.linalg.pinv(X_design).dot(residuals)\n        h = X_design.dot(beta)\n        y_pred += learning_rate * h\n    y_pred_rounded = np.round(y_pred, 4)\n    return y_pred_rounded.tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    is_scalar = isinstance(x, (int, float))\n    arr = np.array(x, dtype=float)\n    sigma = 1.0 / (1.0 + np.exp(-arr))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1.0 - sigma)\n    else:\n        result = sigma * (1.0 - sigma) * (1.0 - 2.0 * sigma)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y_arr = np.asarray(y, dtype=int).ravel()\n    if y_arr.size == 0:\n        return []\n    if np.any(y_arr < 0):\n        raise ValueError('Class indices must be non-negative integers.')\n    max_label = int(y_arr.max())\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    one_hot = np.zeros((y_arr.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y_arr.shape[0]), y_arr] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    n_trans = len(transactions)\n    if n_trans == 0:\n        return []\n    tsets = [set(t) for t in transactions]\n    item_counts = {}\n    for t in tsets:\n        for item in t:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    L1 = []\n    for (item, cnt) in item_counts.items():\n        if cnt / n_trans >= min_sup:\n            L1.append((item,))\n    L1 = sorted(L1)\n    frequent_itemsets = L1.copy()\n    L_prev = L1\n    k = 2\n    while L_prev:\n        Ck = []\n        len_prev = len(L_prev)\n        for i in range(len_prev):\n            for j in range(i + 1, len_prev):\n                a = L_prev[i]\n                b = L_prev[j]\n                if a[:k - 2] == b[:k - 2]:\n                    cand = tuple(sorted(set(a) | set(b)))\n                    if len(cand) == k:\n                        Ck.append(cand)\n        Ck = sorted(set(Ck))\n        L_prev_set = set(L_prev)\n        pruned = []\n        for cand in Ck:\n            all_subsets_frequent = True\n            for subset in itertools.combinations(cand, k - 1):\n                if subset not in L_prev_set:\n                    all_subsets_frequent = False\n                    break\n            if all_subsets_frequent:\n                pruned.append(cand)\n        Ck = pruned\n        counts = {cand: 0 for cand in Ck}\n        for t in tsets:\n            for cand in Ck:\n                if set(cand) <= t:\n                    counts[cand] += 1\n        Lk = []\n        for (cand, cnt) in counts.items():\n            if cnt / n_trans >= min_sup:\n                Lk.append(cand)\n        if not Lk:\n            break\n        Lk = sorted(Lk)\n        frequent_itemsets.extend(Lk)\n        L_prev = Lk\n        k += 1\n    return frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef aggregate_predictions(predictions: List[List[List[float]]]) -> Tuple[List[List[float]], List[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    arr = np.array(predictions, dtype=float)\n    if arr.ndim != 3:\n        raise ValueError(f'Expected a 3D list, got array with shape {arr.shape}')\n    (n_estimators, n_samples, n_classes) = arr.shape\n    avg_probs = arr.mean(axis=0)\n    avg_probs_rounded = np.round(avg_probs, 4)\n    preds = np.argmax(avg_probs_rounded, axis=1)\n    avg_probs_list = avg_probs_rounded.tolist()\n    preds_list = preds.tolist()\n    return (avg_probs_list, preds_list)"}
{"task_id": 441, "completion_id": 0, "solution": "import numpy as np\ndef hamming(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hamming window.\n\n    The function should return *window_len* samples of a Hamming window.\n    When *symmetric* is *False*, return the periodic variant (last sample of\n    the symmetric window removed).  Each value must be rounded to 4 decimals\n    and the result converted to a regular Python list.\n    \"\"\"\n    if window_len == 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len if symmetric else window_len + 1\n    n = np.arange(N, dtype=float)\n    w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    if not symmetric:\n        w = w[:-1]\n    w = np.round(w, 4).tolist()\n    return w"}
{"task_id": 442, "completion_id": 0, "solution": "import numpy as np\nimport heapq\nimport numpy as np\nimport heapq"}
{"task_id": 443, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X: np.ndarray, feature_i: int, threshold):\n    \"\"\"Split *X* into two NumPy matrices according to feature *feature_i* and *threshold*.\n\n    A row is sent to the *left* subset iff\n      \u2022 threshold is numeric  ->  X[row, feature_i] >= threshold\n      \u2022 threshold is non-numeric -> X[row, feature_i] == threshold\n\n    Args:\n        X: 2-D NumPy array. Each row is a sample, each column a feature.\n        feature_i: Index of the column that is tested.\n        threshold: Value that determines the split (numeric or categorical).\n\n    Returns:\n        (left_subset, right_subset): tuple of NumPy arrays with the same\n        number of columns as *X*. If no rows satisfy one side of the split,\n        that array will have shape (0, X.shape[1]).\n    \"\"\"\n    is_numeric = isinstance(threshold, (int, float)) and (not isinstance(threshold, bool))\n    col = X[:, feature_i]\n    if is_numeric:\n        mask_left = col >= threshold\n    else:\n        mask_left = col == threshold\n    left_subset = X[mask_left]\n    right_subset = X[~mask_left]\n    return (left_subset, right_subset)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function follows the specifications:\n    - X: N\u00d7C list of vectors\n    - Y: M\u00d7C list of vectors (if None, Y = X)\n    - sigma: float (isotropic), list of C floats (anisotropic), or None\n             (defaults to sqrt(C/2))\n    Returns:\n    - Nested Python list of shape N\u00d7M of kernel values rounded to 4 decimals\n    - Or -1 on invalid input\n    \"\"\"\n    if not isinstance(X, list) or len(X) == 0:\n        return -1\n    N = len(X)\n    try:\n        C = len(X[0])\n    except Exception:\n        return -1\n    if C == 0:\n        return -1\n    for row in X:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n    if Y is None:\n        Y = X\n    if not isinstance(Y, list) or len(Y) == 0:\n        return -1\n    M = len(Y)\n    for row in Y:\n        if not isinstance(row, (list, tuple)) or len(row) != C:\n            return -1\n    if sigma is None:\n        sigma_arr = np.full((C,), np.sqrt(C / 2.0), dtype=float)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full((C,), float(sigma), dtype=float)\n    elif isinstance(sigma, (list, tuple, np.ndarray)):\n        if len(sigma) != C:\n            return -1\n        try:\n            sigma_arr = np.array(sigma, dtype=float)\n        except Exception:\n            return -1\n        if np.any(sigma_arr <= 0):\n            return -1\n    else:\n        return -1\n    try:\n        X_np = np.array(X, dtype=float)\n        Y_np = np.array(Y, dtype=float)\n    except Exception:\n        return -1\n    Xs = X_np / sigma_arr\n    Ys = Y_np / sigma_arr\n    x_norm2 = np.sum(Xs * Xs, axis=1)\n    y_norm2 = np.sum(Ys * Ys, axis=1)\n    cross_term = Xs.dot(Ys.T)\n    d2 = x_norm2[:, None] + y_norm2[None, :] - 2.0 * cross_term\n    d2 = np.maximum(d2, 0.0)\n    K = np.exp(-0.5 * d2)\n    K_round = np.round(K, 4)\n    return K_round.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=int)\n    (n_samples, n_features) = X_arr.shape\n\n    def entropy(labels: np.ndarray) -> float:\n        if labels.size == 0:\n            return 0.0\n        (vals, counts) = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels: np.ndarray) -> int:\n        (vals, counts) = np.unique(labels, return_counts=True)\n        max_count = counts.max()\n        candidates = vals[counts == max_count]\n        return int(candidates.min())\n    H_parent = entropy(y_arr)\n    best_gain = 0.0\n    best_feature = -1\n    best_threshold = None\n    for j in range(n_features):\n        col = X_arr[:, j]\n        uniq_vals = np.unique(col)\n        if uniq_vals.size < 2:\n            continue\n        thresholds = (uniq_vals[:-1] + uniq_vals[1:]) / 2.0\n        for t in thresholds:\n            left_mask = col <= t\n            right_mask = ~left_mask\n            n_left = left_mask.sum()\n            n_right = right_mask.sum()\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y_arr[left_mask]\n            y_right = y_arr[right_mask]\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n            gain = H_parent - (p_left * H_left + p_right * H_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = t\n            elif np.isclose(gain, best_gain) and gain > 0:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = t\n                elif j == best_feature and t < best_threshold:\n                    best_threshold = t\n    if best_feature == -1:\n        maj = majority_label(y_arr)\n        return (-1, None, maj, maj)\n    t_rounded = round(best_threshold, 4)\n    col_best = X_arr[:, best_feature]\n    left_mask = col_best <= best_threshold\n    right_mask = ~left_mask\n    left_maj = majority_label(y_arr[left_mask])\n    right_maj = majority_label(y_arr[right_mask])\n    return (best_feature, t_rounded, left_maj, right_maj)"}
{"task_id": 447, "completion_id": 0, "solution": "import numpy as np\ndef one(shape, **kwargs):\n    \"\"\"Create a nested Python list filled with ones.\n\n    Parameters\n    ----------\n    shape : int | tuple[int, ...] | list[int]\n        Desired shape of the output list. Works exactly as the first argument of\n        ``numpy.ones``.\n    **kwargs : dict\n        Optional keyword arguments forwarded to ``numpy.ones`` (e.g. ``dtype``).\n\n    Returns\n    -------\n    list\n        A list (possibly nested) containing only ones that mirrors the provided\n        shape.\n    \"\"\"\n    if isinstance(shape, list):\n        shape_arg = tuple(shape)\n    else:\n        shape_arg = shape\n    arr = np.ones(shape_arg, **kwargs)\n    return arr.tolist()"}
{"task_id": 448, "completion_id": 0, "solution": "import numpy as np\ndef mean_baseline_predict(X_train, y_train, X_test):\n    \"\"\"Baseline regressor that predicts the mean of the training targets.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples_train, n_features_train).\n    y_train : np.ndarray\n        One-dimensional array of training targets of length n_samples_train.\n    X_test : np.ndarray\n        Test feature matrix of shape (n_samples_test, n_features_test).\n\n    Returns\n    -------\n    list[float]\n        A list containing the predictions for every row in ``X_test`` rounded to\n        4 decimal places.  If ``y_train`` is empty, the function returns an\n        empty list.\n    \"\"\"\n    if y_train is None or len(y_train) == 0:\n        return []\n    mean_value = np.mean(y_train)\n    n_test = 0 if X_test is None else X_test.shape[0]\n    preds = np.full(n_test, mean_value, dtype=float)\n    preds = np.round(preds, 4)\n    return preds.tolist()"}
{"task_id": 449, "completion_id": 0, "solution": "import numpy as np\ndef gda(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Train a Gaussian Discriminant Analysis model and predict labels.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training data.\n    y_train : np.ndarray\n        1-D array of length n_samples with binary class labels (0 or 1).\n    X_test : np.ndarray\n        2-D array with shape (k_samples, n_features) for which predictions are\n        required.\n\n    Returns\n    -------\n    list[int]\n        Predicted class labels for each row of `X_test` (0 or 1).\n    \"\"\"\n    X0 = X_train[y_train == 0]\n    X1 = X_train[y_train == 1]\n    Mu0 = X0.mean(axis=0)\n    Mu1 = X1.mean(axis=0)\n    X_sub_Mu = np.vstack([X0 - Mu0, X1 - Mu1])\n    m = X_train.shape[1]\n    Sigma = 1.0 / m * np.dot(X_sub_Mu.T, X_sub_Mu)\n    normal_vec = Mu1 - Mu0\n    normal_vec = normal_vec / np.sqrt(np.sum(normal_vec ** 2))\n    w = normal_vec\n    midpoint = (Mu0 + Mu1) / 2\n    b = -np.dot(w.T, midpoint)\n    sign = int(np.dot(w.T, Mu1) + b > 0)\n    scores = np.dot(X_test, w) + b\n    preds = (scores > 0).astype(int) * sign\n    return preds.tolist()"}
{"task_id": 450, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 451, "completion_id": 0, "solution": "import math\nimport heapq\nfrom collections import Counter\nfrom typing import Optional, List, Tuple\nimport numpy as np\ndef knn_kdtree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int) -> List[int]:\n    \"\"\"Classify *X_test* using the k-nearest neighbours algorithm with a KD-Tree.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray | list\n        Integer class labels corresponding to *X_train*.\n    X_test : np.ndarray\n        Samples that need to be classified, shape (m_samples, n_features).\n    k : int\n        Number of neighbours that will vote for the class.\n\n    Returns\n    -------\n    List[int]\n        A list containing one predicted label per row of *X_test*.\n    \"\"\"\n    n_train = X_train.shape[0]\n    if n_train == 0 or k <= 0:\n        return []\n    n_features = X_train.shape[1]\n\n    class KDNode:\n        __slots__ = ('idx', 'point', 'label', 'left', 'right', 'axis')\n\n        def __init__(self, idx: int, point: np.ndarray, label: int, left: Optional['KDNode'], right: Optional['KDNode'], axis: int):\n            self.idx = idx\n            self.point = point\n            self.label = label\n            self.left = left\n            self.right = right\n            self.axis = axis\n\n    def build_tree(indices: List[int], depth: int=0) -> Optional[KDNode]:\n        if not indices:\n            return None\n        axis = depth % n_features\n        indices.sort(key=lambda i: X_train[i, axis])\n        mid = len(indices) // 2\n        idx_mid = indices[mid]\n        node = KDNode(idx=idx_mid, point=X_train[idx_mid], label=int(y_train[idx_mid]), left=build_tree(indices[:mid], depth + 1), right=build_tree(indices[mid + 1:], depth + 1), axis=axis)\n        return node\n    root = build_tree(list(range(n_train)), depth=0)\n\n    def squared_distance(a: np.ndarray, b: np.ndarray) -> float:\n        \"\"\"Euclidean squared distance between two points.\"\"\"\n        diff = a - b\n        return float(np.dot(diff, diff))\n\n    def query_knn(root: KDNode, query_point: np.ndarray, k: int) -> List[int]:\n        heap: List[Tuple[float, int]] = []\n\n        def search(node: Optional[KDNode]):\n            if node is None:\n                return\n            axis = node.axis\n            pivot_val = node.point[axis]\n            diff = query_point[axis] - pivot_val\n            (first, second) = (node.left, node.right) if diff <= 0 else (node.right, node.left)\n            search(first)\n            dist2 = squared_distance(query_point, node.point)\n            neg_dist2 = -dist2\n            if len(heap) < k:\n                heapq.heappush(heap, (neg_dist2, node.label))\n            elif neg_dist2 > heap[0][0]:\n                heapq.heapreplace(heap, (neg_dist2, node.label))\n            if len(heap) < k:\n                should_visit = True\n            else:\n                farthest_sq = -heap[0][0]\n                should_visit = diff * diff < farthest_sq\n            if should_visit:\n                search(second)\n        search(root)\n        labels = [label for (_negd, label) in heap]\n        return labels\n    predictions: List[int] = []\n    for i in range(X_test.shape[0]):\n        qp = X_test[i]\n        neighbor_labels = query_knn(root, qp, k)\n        cnt = Counter(neighbor_labels)\n        top_count = max(cnt.values())\n        best_labels = [lab for (lab, count) in cnt.items() if count == top_count]\n        prediction = min(best_labels)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list of lists or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list [subset1, subset2], each a regular Python list of samples.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        samples = X.tolist()\n    else:\n        samples = X\n    is_numeric = isinstance(threshold, (int, float))\n    subset1 = []\n    subset2 = []\n    for sample in samples:\n        val = sample[feature_i]\n        if is_numeric:\n            if val >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif val == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not isinstance(gamma, (float, int)) or gamma < 0 or gamma > 1:\n        return -1\n    if not isinstance(Q, np.ndarray) or not isinstance(Q_next, np.ndarray):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    y = Q.copy().astype(float)\n    for i in range(batch_size):\n        a = actions[i]\n        if not 0 <= a < n_actions:\n            return -1\n        r = rewards[i]\n        done = dones[i]\n        if done:\n            target = r\n        else:\n            target = r + gamma * np.max(Q_next[i])\n        y[i, a] = target\n    y = np.round(y, 4)\n    return y.tolist()"}
{"task_id": 454, "completion_id": 0, "solution": "import numpy as np\ndef generate_dcgan_labels(batch_size: int) -> tuple[list[list[int]], list[list[int]], list[list[int]]]:\n    \"\"\"Generate the fixed one-hot label arrays used in DCGAN training.\n\n    The function must return (valid_half, fake_half, valid_full) as\n    described in the task description.  All three results have to be\n    converted to Python lists via ``tolist()``.\n\n    Args:\n        batch_size: A positive, even integer indicating the total number\n            of samples in one training batch.\n\n    Returns:\n        Tuple of three Python lists containing one-hot vectors.\n    \"\"\"\n    half_size = batch_size // 2\n    valid_half = np.tile([1, 0], (half_size, 1))\n    fake_half = np.tile([0, 1], (half_size, 1))\n    valid_full = np.tile([1, 0], (batch_size, 1))\n    return (valid_half.tolist(), fake_half.tolist(), valid_full.tolist())"}
{"task_id": 455, "completion_id": 0, "solution": "import math\nimport heapq\nimport numpy as np\nfrom collections import Counter"}
{"task_id": 456, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 457, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_penalty(weights, alpha):\n    \"\"\"Compute the Elastic-Net penalty for a set of weights.\n\n    The penalty is a linear combination of the L1 and L2 norms of the\n    weight vector controlled by *alpha*.\n\n    Args:\n        weights (list | tuple | numpy.ndarray): 1-D collection of weights.\n        alpha (float): Mixing parameter satisfying 0 <= alpha <= 1. If\n            alpha = 1, the penalty reduces to 0.5*L2; if alpha = 0 it\n            becomes purely L1.\n\n    Returns:\n        float | int: The Elastic-Net penalty rounded to 4 decimals, or -1\n        if *alpha* is outside the valid interval.\n    \"\"\"\n    if not 0 <= alpha <= 1:\n        return -1\n    w = np.asarray(weights, dtype=float)\n    l2_term = 0.5 * alpha * np.sum(w * w)\n    l1_term = (1 - alpha) * np.sum(np.abs(w))\n    penalty = l2_term + l1_term\n    return float(round(penalty, 4))"}
{"task_id": 458, "completion_id": 0, "solution": ""}
{"task_id": 459, "completion_id": 0, "solution": "import numpy as np\nimport heapq"}
{"task_id": 460, "completion_id": 0, "solution": ""}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n_samples = y_arr.shape[0]\n    if n_estimators <= 0:\n        init_pred = np.full(n_samples, y_arr.mean())\n        return np.round(init_pred, 4).tolist()\n    y_pred = np.full(n_samples, y_arr.mean())\n    unique_vals = np.unique(x_arr)\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        if np.all(residuals == 0):\n            break\n        best_sse = None\n        best_t = None\n        best_vL = None\n        best_vR = None\n        for t in unique_vals[:-1]:\n            left_mask = x_arr <= t\n            right_mask = ~left_mask\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            r_left = residuals[left_mask]\n            r_right = residuals[right_mask]\n            vL = r_left.mean()\n            vR = r_right.mean()\n            sse_left = ((r_left - vL) ** 2).sum()\n            sse_right = ((r_right - vR) ** 2).sum()\n            sse = sse_left + sse_right\n            if best_sse is None or sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_sse is None:\n            const_pred = residuals.mean()\n            stump_pred = np.full(n_samples, const_pred)\n        else:\n            stump_pred = np.where(x_arr <= best_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 462, "completion_id": 0, "solution": "import numpy as np\ndef cepstral_lifter(mfccs: np.ndarray, D: int) -> np.ndarray:\n    \"\"\"Apply a sinusoidal cepstral lifter to a matrix of MFCC coefficients.\n\n    Args:\n        mfccs: NumPy array of shape (G, C) containing MFCC coefficients.\n        D: Non-negative integer lifter parameter. A value of 0 (or 1) returns\n           the input unchanged.\n\n    Returns:\n        NumPy array with the same shape and dtype as *mfccs* containing the\n        liftered coefficients.\n    \"\"\"\n    if not isinstance(mfccs, np.ndarray):\n        raise TypeError('mfccs must be a NumPy array')\n    if mfccs.ndim != 2:\n        raise ValueError('mfccs must be a 2D array of shape (G, C)')\n    if not (isinstance(D, (int, np.integer)) and D >= 0):\n        raise ValueError('D must be a non-negative integer')\n    if D <= 1:\n        return mfccs\n    (G, C) = mfccs.shape\n    n = np.arange(C)\n    lifter = 1.0 + D / 2.0 * np.sin(np.pi * n / D)\n    lifter = lifter.astype(mfccs.dtype, copy=False)\n    return mfccs * lifter"}
{"task_id": 463, "completion_id": 0, "solution": "import math"}
{"task_id": 464, "completion_id": 0, "solution": ""}
{"task_id": 465, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 466, "completion_id": 0, "solution": "import string\nimport string\ndef strip_punctuation(line: str) -> str:\n    \"\"\"Remove punctuation characters from a string.\n\n    The function deletes all characters listed in ``string.punctuation`` and\n    trims surrounding whitespace.\n\n    Args:\n        line (str): Text that may contain punctuation symbols.\n\n    Returns:\n        str: Text with punctuation removed and stripped of leading/trailing\n        whitespace.\n    \"\"\"\n    cleaned = line.translate(_PUNC_TABLE)\n    return cleaned.strip()"}
{"task_id": 467, "completion_id": 0, "solution": "import numpy as np\ndef regularization(weights: list[float | int], C: float=0.01, norm: str='l2') -> tuple[float, list[float]] | int:\n    \"\"\"Return the regularisation penalty and gradient for a list of weights.\n\n    Parameters\n    ----------\n    weights : list[float | int]\n        Vector of model weights.\n    C : float, default 0.01\n        Regularisation strength.\n    norm : str, {\"l1\", \"l2\"}, default \"l2\"\n        Type of regularisation to apply.\n\n    Returns\n    -------\n    tuple[float, list[float]]\n        (penalty, gradient). Round every value to 4 decimals.\n        If *norm* is unsupported, return -1 instead.\n    \"\"\"\n    w = np.array(weights, dtype=float)\n    if norm == 'l1':\n        penalty = C * np.sum(np.abs(w))\n        grad = C * np.sign(w)\n    elif norm == 'l2':\n        penalty = 0.5 * C * np.sum(w ** 2)\n        grad = C * w\n    else:\n        return -1\n    penalty_rounded = round(penalty, 4)\n    grad_rounded = [round(g, 4) for g in grad.tolist()]\n    return (penalty_rounded, grad_rounded)"}
{"task_id": 468, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 469, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(**kwargs):\n    \"\"\"Return a callable that computes the linear kernel (dot product).\n\n    The factory keeps a flexible signature (accepting **kwargs) so that it can\n    be used interchangeably with other kernel constructors that may require\n    hyper-parameters.\n\n    Returns:\n        Callable[[array_like, array_like], float]: A function `f(x1, x2)` that\n        returns the dot product of `x1` and `x2`.  If the vectors are of\n        different lengths, the callable must return \u20111.\n    \"\"\"\n\n    def f(x1, x2):\n        arr1 = np.asarray(x1, dtype=float).ravel()\n        arr2 = np.asarray(x2, dtype=float).ravel()\n        if arr1.shape[0] != arr2.shape[0]:\n            return -1\n        return float(np.inner(arr1, arr2))\n    return f"}
{"task_id": 470, "completion_id": 0, "solution": "import os\ndef get_scriptdir(file_path: str) -> str:\n    \"\"\"Return the absolute directory that contains *file_path*.\n\n    The function normalises *file_path* by resolving any symbolic links\n    and removing ``..`` / ``.`` path segments, then returns only the\n    directory component of this canonical path.\n\n    Args:\n        file_path: Path string pointing to a file.  May be absolute or\n                   relative and may contain symlinks or redundant path\n                   elements.\n\n    Returns:\n        The absolute directory path that contains *file_path*.  The\n        returned path never ends with a path separator (unless it is the\n        root directory).\n    \"\"\"\n    canonical = os.path.realpath(file_path)\n    return os.path.dirname(canonical)"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    new_q = [row.copy() for row in q_table]\n    old_value = new_q[state][action]\n    if next_state is None:\n        expected_q = 0.0\n    else:\n        row = new_q[next_state]\n        n_actions = len(row)\n        greedy_idx = int(np.argmax(row))\n        expected_q = 0.0\n        for (a_idx, qval) in enumerate(row):\n            if a_idx == greedy_idx:\n                prob = 1 - epsilon + epsilon / n_actions\n            else:\n                prob = epsilon / n_actions\n            expected_q += prob * qval\n    target = reward + gamma * expected_q\n    new_q[state][action] = old_value + lr * (target - old_value)\n    rounded_q = [[round(val, 4) for val in row] for row in new_q]\n    return rounded_q"}
{"task_id": 472, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 477, "completion_id": 0, "solution": "import heapq\nfrom typing import List, Tuple\ndef astar(grid: List[List[int]], start: Tuple[int, int], dest: Tuple[int, int]) -> int:\n    \"\"\"A* search on a 2-D grid.\n\n    Args:\n        grid: 2-D list containing only 0 (free) and 1 (obstacle).\n        start: (row, column) pair indicating the start position.\n        dest:  (row, column) pair indicating the goal position.\n\n    Returns:\n        The minimum number of moves needed to reach *dest* from *start* using\n        4-directional movement, or \u20111 if the destination is unreachable.\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0]) if rows else 0\n    (sr, sc) = start\n    (tr, tc) = dest\n    if not (0 <= sr < rows and 0 <= sc < cols):\n        return -1\n    if not (0 <= tr < rows and 0 <= tc < cols):\n        return -1\n    if grid[sr][sc] == 1 or grid[tr][tc] == 1:\n        return -1\n    if start == dest:\n        return 0\n\n    def h(r: int, c: int) -> int:\n        return abs(r - tr) + abs(c - tc)\n    INF = float('inf')\n    g_score = [[INF] * cols for _ in range(rows)]\n    g_score[sr][sc] = 0\n    pq: List[Tuple[int, int, int, int]] = []\n    start_f = h(sr, sc)\n    heapq.heappush(pq, (start_f, 0, sr, sc))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while pq:\n        (f, g, r, c) = heapq.heappop(pq)\n        if g > g_score[r][c]:\n            continue\n        if (r, c) == (tr, tc):\n            return g\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < rows and 0 <= nc < cols and (grid[nr][nc] == 0):\n                new_g = g + 1\n                if new_g < g_score[nr][nc]:\n                    g_score[nr][nc] = new_g\n                    new_f = new_g + h(nr, nc)\n                    heapq.heappush(pq, (new_f, new_g, nr, nc))\n    return -1"}
{"task_id": 478, "completion_id": 0, "solution": "import numpy as np\ndef calculate_std_dev(X):\n    \"\"\"Return the population standard deviation for every feature in *X*.\n\n    Args:\n        X (list[list[int | float]] | np.ndarray): 2-D data set where rows are\n            samples and columns are features.\n\n    Returns:\n        list[float]: A list containing the standard deviation of each feature,\n            rounded to 4 decimal places.\n            If *X* is empty an empty list is returned.\n    \"\"\"\n    if X is None or len(X) == 0:\n        return []\n    X_arr = np.array(X, dtype=float)\n    if X_arr.size == 0 or X_arr.ndim != 2:\n        return []\n    (n_samples, n_features) = X_arr.shape\n    if n_samples == 0 or n_features == 0:\n        return []\n    means = X_arr.sum(axis=0) / n_samples\n    diffs = X_arr - means\n    sq_diffs = diffs ** 2\n    variances = sq_diffs.sum(axis=0) / n_samples\n    std_devs = np.sqrt(variances)\n    result = [round(float(v), 4) for v in std_devs]\n    return result"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional"}
{"task_id": 480, "completion_id": 0, "solution": "import numpy as np\ndef mel_spectrogram(x: 'np.ndarray', window_duration: float=0.025, stride_duration: float=0.01, mean_normalize: bool=True, window: str='hamming', n_filters: int=20, center: bool=True, alpha: float=0.95, fs: int=44000):\n    \"\"\"Return the Mel spectrogram of *x* together with the energy of every frame.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional array that contains the audio samples.\n    window_duration : float, optional\n        Frame length in seconds (default 0.025).\n    stride_duration : float, optional\n        Hop length in seconds (default 0.01).\n    mean_normalize : bool, optional\n        If *True* subtract the mean of every filter column.\n    window : str, optional\n        Window function name: \"hamming\", \"hann\" or \"blackman_harris\" (default \"hamming\").\n    n_filters : int, optional\n        Number of triangular filters in the Mel bank (default 20).\n    center : bool, optional\n        If *True* the signal is padded so that frames are centred on their time stamps.\n    alpha : float, optional\n        Pre-emphasis coefficient (default 0.95).\n    fs : int, optional\n        Sampling rate of the signal in Hertz (default 44000).\n\n    Returns\n    -------\n    filter_energies : list[list[float]]\n        2-D list containing the Mel-spectrogram (G \u00d7 n_filters).\n    energy_per_frame : list[float]\n        1-D list of length G with the sum of power per frame.\n    \"\"\"\n    if alpha != 0:\n        y = np.empty_like(x, dtype=float)\n        y[0] = x[0]\n        y[1:] = x[1:] - alpha * x[:-1]\n    else:\n        y = x.astype(float).copy()\n    frame_len = int(round(window_duration * fs))\n    hop_len = int(round(stride_duration * fs))\n    if frame_len < 1 or hop_len < 1:\n        raise ValueError('window_duration or stride_duration too small for given fs')\n    if center:\n        pad = frame_len // 2\n        y_padded = np.pad(y, (pad, pad), mode='constant', constant_values=0.0)\n    else:\n        y_padded = y\n    num_frames = 1 + int(np.floor((len(y_padded) - frame_len) / hop_len))\n    if num_frames < 1:\n        return ([], [])\n    frames = np.zeros((num_frames, frame_len), dtype=float)\n    for i in range(num_frames):\n        start = i * hop_len\n        frames[i, :] = y_padded[start:start + frame_len]\n    if window.lower() == 'hamming':\n        win = np.hamming(frame_len)\n    elif window.lower() in ('hann', 'hanning'):\n        win = np.hanning(frame_len)\n    elif window.lower() == 'blackman_harris':\n        n = np.arange(frame_len)\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        win = a0 - a1 * np.cos(2 * np.pi * n / (frame_len - 1)) + a2 * np.cos(4 * np.pi * n / (frame_len - 1)) - a3 * np.cos(6 * np.pi * n / (frame_len - 1))\n    else:\n        raise ValueError(f\"Unknown window type '{window}'\")\n    frames *= win\n    N = frame_len\n    spectrum = np.fft.rfft(frames, n=N, axis=1)\n    power_spec = np.abs(spectrum) ** 2 / N\n\n    def hz2mel(f_hz):\n        return 2595.0 * np.log10(1.0 + f_hz / 700.0)\n\n    def mel2hz(m):\n        return 700.0 * (10.0 ** (m / 2595.0) - 1.0)\n    mel_min = hz2mel(0.0)\n    mel_max = hz2mel(fs / 2.0)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel2hz(mel_points)\n    bin_indices = np.floor(hz_points * N / fs).astype(int)\n    n_bins = power_spec.shape[1]\n    fbank = np.zeros((n_filters, n_bins), dtype=float)\n    for i in range(1, n_filters + 1):\n        left = bin_indices[i - 1]\n        center_b = bin_indices[i]\n        right = bin_indices[i + 1]\n        if center_b > left:\n            up = np.arange(left, center_b)\n            fbank[i - 1, up] = (up - left) / float(center_b - left)\n        if right > center_b:\n            down = np.arange(center_b, right)\n            fbank[i - 1, down] = (right - down) / float(right - center_b)\n    filter_energies = power_spec @ fbank.T\n    if mean_normalize:\n        col_means = filter_energies.mean(axis=0, keepdims=True)\n        filter_energies = filter_energies - col_means\n    eps = np.finfo(float).eps\n    filter_energies[filter_energies == 0.0] = eps\n    energy_per_frame = power_spec.sum(axis=1)\n    filter_energies = np.round(filter_energies, 4).tolist()\n    energy_per_frame = np.round(energy_per_frame, 4).tolist()\n    return (filter_energies, energy_per_frame)"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If any label is negative, not an integer, or\n                    not less than num_classes (when num_classes is provided).\n    \"\"\"\n    y_arr = np.array(y, copy=False)\n    if y_arr.ndim != 1:\n        raise ValueError(f'y must be a 1-D array or sequence, got array with shape {y_arr.shape}')\n    n = y_arr.shape[0]\n    if n == 0:\n        if num_classes is None:\n            num_classes = 0\n        return np.zeros((0, num_classes), dtype=int)\n    if not np.issubdtype(y_arr.dtype, np.integer):\n        if np.issubdtype(y_arr.dtype, np.floating) and np.all(np.floor(y_arr) == y_arr):\n            y_arr = y_arr.astype(int)\n        else:\n            raise ValueError('y must contain integer values only')\n    if np.any(y_arr < 0):\n        raise ValueError('All labels must be non-negative')\n    if num_classes is None:\n        num_classes = int(y_arr.max()) + 1\n    elif not isinstance(num_classes, int) or num_classes <= 0:\n        raise ValueError('num_classes must be a positive integer or None')\n    if np.any(y_arr >= num_classes):\n        raise ValueError('All labels must be less than num_classes')\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    rows = np.arange(n)\n    one_hot[rows, y_arr] = 1\n    return one_hot"}
{"task_id": 483, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels, num_classes=None):\n    \"\"\"Convert integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    labels : sequence of int or 1-D np.ndarray\n        The class labels to transform.\n    num_classes : int, optional\n        Desired length of the one-hot vectors; if omitted the function should\n        use ``max(labels)+1``.\n\n    Returns\n    -------\n    list[list[int]]\n        One-hot encoded representation of ``labels``.\n    \"\"\"\n    labels_arr = np.asarray(labels, dtype=int).ravel()\n    if num_classes is None:\n        if labels_arr.size == 0:\n            num_classes = 0\n        else:\n            num_classes = int(labels_arr.max()) + 1\n    n = labels_arr.shape[0]\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    for (i, c) in enumerate(labels_arr):\n        one_hot[i, c] = 1\n    return one_hot.tolist()"}
{"task_id": 484, "completion_id": 0, "solution": ""}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 486, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 487, "completion_id": 0, "solution": ""}
{"task_id": 488, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 489, "completion_id": 0, "solution": "import numpy as np\ndef to_nominal(one_hot):\n    \"\"\"Convert a batch of one-hot encoded vectors to nominal class labels.\n\n    Parameters\n    ----------\n    one_hot : list[list[int]] | numpy.ndarray\n        A 2-D structure where each row is expected to be a one-hot encoded\n        vector (all zeros except for a single 1).\n\n    Returns\n    -------\n    list[int] | int\n        A list of integer class labels when the input is valid; otherwise the\n        integer \u20111.\n    \"\"\"\n    if isinstance(one_hot, np.ndarray):\n        arr = one_hot\n        if arr.ndim != 2:\n            return -1\n        (n_samples, n_classes) = arr.shape\n        labels = []\n        for i in range(n_samples):\n            row = arr[i]\n            is_zero_or_one = (row == 0) | (row == 1)\n            if not is_zero_or_one.all():\n                return -1\n            ones_count = int((row == 1).sum())\n            if ones_count != 1:\n                return -1\n            labels.append(int(np.argmax(row)))\n        return labels\n    if not isinstance(one_hot, list):\n        return -1\n    n_samples = len(one_hot)\n    if n_samples == 0:\n        return []\n    first_row = one_hot[0]\n    if not isinstance(first_row, list):\n        return -1\n    n_classes = len(first_row)\n    if n_classes == 0:\n        return -1\n    labels = []\n    for row in one_hot:\n        if not isinstance(row, list) or len(row) != n_classes:\n            return -1\n        ones_count = 0\n        class_index = -1\n        for (idx, val) in enumerate(row):\n            if val == 1:\n                ones_count += 1\n                class_index = idx\n            elif val != 0:\n                return -1\n            if ones_count > 1:\n                return -1\n        if ones_count != 1:\n            return -1\n        labels.append(class_index)\n    return labels"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    arr = np.asarray(x)\n    if arr.ndim != 1:\n        raise ValueError('Input must be one-dimensional')\n    if arr.size == 0:\n        return []\n    diag_mat = np.diag(arr)\n    return diag_mat.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "import itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    freq = {item: cnt for (item, cnt) in freq.items() if cnt >= min_sup}\n    if not freq:\n        return []\n\n    class Node:\n        __slots__ = ('item', 'count', 'parent', 'children', 'link')\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n    header = {item: [cnt, None, None] for (item, cnt) in freq.items()}\n    root = Node(None, 0, None)\n\n    def insert_tree(items, node, count):\n        \"\"\"Insert a sorted list of items into the FP-tree rooted at node.\"\"\"\n        if not items:\n            return\n        first = items[0]\n        if first in node.children:\n            child = node.children[first]\n            child.count += count\n        else:\n            child = Node(first, count, node)\n            node.children[first] = child\n            h = header[first]\n            if h[1] is None:\n                h[1] = child\n                h[2] = child\n            else:\n                h[2].link = child\n                h[2] = child\n        insert_tree(items[1:], child, count)\n    for t in transactions:\n        filtered = [i for i in t if i in freq]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=lambda x: (-freq[x], x))\n        insert_tree(ordered, root, 1)\n    patterns = set()\n\n    def mine_tree(header_table, prefix):\n        \"\"\"\n        Recursively mine the FP-tree whose header table is header_table,\n        using prefix as the suffix-root so far.\n        \"\"\"\n        items = sorted(header_table.items(), key=lambda kv: (kv[1][0], kv[0]))\n        for (item, (item_support, head, tail)) in items:\n            new_pat = tuple(sorted(prefix + (item,)))\n            patterns.add(new_pat)\n            cond_patterns = []\n            node = head\n            while node:\n                cnt = node.count\n                path = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                if path:\n                    cond_patterns.append((path, cnt))\n                node = node.link\n            cond_freq = Counter()\n            for (path, cnt) in cond_patterns:\n                cond_freq.update({itm: cnt for itm in path})\n            cond_freq = {itm: c for (itm, c) in cond_freq.items() if c >= min_sup}\n            if not cond_freq:\n                continue\n            cond_header = {itm: [c, None, None] for (itm, c) in cond_freq.items()}\n            cond_root = Node(None, 0, None)\n\n            def insert_cond(items, node, count):\n                if not items:\n                    return\n                first = items[0]\n                if first in node.children:\n                    child = node.children[first]\n                    child.count += count\n                else:\n                    child = Node(first, count, node)\n                    node.children[first] = child\n                    h = cond_header[first]\n                    if h[1] is None:\n                        h[1] = child\n                        h[2] = child\n                    else:\n                        h[2].link = child\n                        h[2] = child\n                insert_cond(items[1:], child, count)\n            for (path, cnt) in cond_patterns:\n                filtered = [i for i in path if i in cond_freq]\n                if not filtered:\n                    continue\n                ordered = sorted(filtered, key=lambda x: (-cond_freq[x], x))\n                insert_cond(ordered, cond_root, cnt)\n\n            def is_single_path(node):\n                if len(node.children) > 1:\n                    return False\n                if not node.children:\n                    return True\n                child = next(iter(node.children.values()))\n                return is_single_path(child)\n            if is_single_path(cond_root):\n                single_path = []\n                cur = cond_root\n                while len(cur.children) == 1:\n                    cur = next(iter(cur.children.values()))\n                    single_path.append(cur.item)\n                for r in range(1, len(single_path) + 1):\n                    for comb in itertools.combinations(single_path, r):\n                        newset = tuple(sorted(prefix + (item,) + comb))\n                        patterns.add(newset)\n            else:\n                mine_tree(cond_header, prefix + (item,))\n    mine_tree(header, ())\n    result = sorted(patterns, key=lambda t: (len(t), t))\n    return result"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X_arr = np.array(X, dtype=float)\n    (n_samples, n_features) = X_arr.shape\n    all_combos = []\n    for total_deg in range(degree + 1):\n        for combo in combinations_with_replacement(range(n_features), total_deg):\n            all_combos.append(combo)\n    feature_cols = [np.prod(X_arr[:, combo], axis=1) for combo in all_combos]\n    poly_matrix = np.stack(feature_cols, axis=1)\n    return poly_matrix.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 494, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef aggregate_predictions(preds: Union[List[List[Union[int, float]]], np.ndarray], classifier: bool=True) -> List[Union[int, float]]:\n    \"\"\"Aggregate ensemble predictions.\n\n    Parameters\n    ----------\n    preds : list[list[int | float]] | np.ndarray\n        A 2-D structure where each row holds the predictions from one model\n        and each column corresponds to a data sample.\n    classifier : bool, default True\n        If True the task is classification and majority voting is used.\n        If False the task is regression and simple averaging is used.\n\n    Returns\n    -------\n    list[int | float]\n        Final aggregated predictions for every sample. For regression values\n        are rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(preds)\n    if arr.ndim != 2:\n        raise ValueError(f'Expected 2D array-like preds, got array with ndim={arr.ndim}')\n    (n_models, n_samples) = arr.shape\n    if classifier:\n        final_preds: List[int] = []\n        for j in range(n_samples):\n            column = arr[:, j]\n            labels = column.astype(int)\n            counts = np.bincount(labels)\n            vote = int(counts.argmax())\n            final_preds.append(vote)\n        return final_preds\n    else:\n        means = np.mean(arr.astype(float), axis=0)\n        return [round(float(x), 4) for x in means]"}
{"task_id": 495, "completion_id": 0, "solution": "import numpy as np\ndef standardize(X: np.ndarray) -> list[list[float]]:\n    \"\"\"Standardize every column of a 2-D NumPy array.\n\n    Each feature (column) should have mean 0 and variance 1 after the\n    transformation.  Columns with zero variance must become all zeros.\n\n    The input array **must not** be modified in place; return a new result.\n\n    Args:\n        X: 2-D NumPy array (shape = n_samples \u00d7 n_features).\n\n    Returns:\n        Standardized dataset as a Python list rounded to 4 decimals.\n    \"\"\"\n    X_float = X.astype(float, copy=True)\n    means = X_float.mean(axis=0)\n    stds = X_float.std(axis=0)\n    Z = np.zeros_like(X_float)\n    nonzero_mask = stds != 0\n    Z[:, nonzero_mask] = (X_float[:, nonzero_mask] - means[nonzero_mask]) / stds[nonzero_mask]\n    Z_rounded = np.round(Z, 4)\n    return Z_rounded.tolist()"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values (or a scalar).\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    arr = np.array(x, dtype=float, copy=False)\n    arr = np.atleast_1d(arr)\n    y = slope * arr + intercept\n    grad = np.full_like(arr, slope, dtype=float)\n    grad2 = np.zeros_like(arr, dtype=float)\n    y_rounded = [round(float(v), 4) for v in y]\n    grad_rounded = [round(float(v), 4) for v in grad]\n    grad2_rounded = [round(float(v), 4) for v in grad2]\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 497, "completion_id": 0, "solution": "import numpy as np\ndef exponential_activation(x, order: int=0):\n    \"\"\"Compute the exponential activation or one of its first two derivatives.\n\n    Parameters\n    ----------\n    x : list | numpy.ndarray\n        A (possibly nested) list or NumPy array containing real numbers.\n    order : int, optional\n        Indicates what to compute:\n        * 0 \u2013 activation itself (default)\n        * 1 \u2013 first derivative\n        * 2 \u2013 second derivative\n\n    Returns\n    -------\n    list | int\n        Python list mirroring the shape of *x* with every entry replaced by\n        the corresponding result rounded to 6 decimals, or -1 for invalid\n        *order*.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    arr = np.array(x, dtype=float)\n    result = np.exp(arr)\n    result = np.round(result, 6)\n    return result.tolist()"}
{"task_id": 498, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(x: np.ndarray | list | int | float, alpha: float=0.3, order: int=0) -> list:\n    \"\"\"Compute Leaky ReLU, its first derivative, or its second derivative.\n\n    Args:\n        x: Values to be transformed. Accepts NumPy array, list, or scalar.\n        alpha: Slope used when an element is non-positive (default 0.3).\n        order: 0 \u2013 return the function value; 1 \u2013 return the first derivative; 2 \u2013 return the second derivative.\n\n    Returns:\n        Python list with the same shape as *x* that contains the requested quantity.\n        Scalars become one\u2010element lists. If order is not in {0,1,2}, returns [].\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    if order == 0:\n        y = np.where(x_arr > 0, x_arr, alpha * x_arr)\n    elif order == 1:\n        y = np.where(x_arr > 0, 1.0, alpha)\n    elif order == 2:\n        y = np.zeros_like(x_arr, dtype=float)\n    else:\n        return []\n    out = y.tolist()\n    if not isinstance(out, list):\n        out = [out]\n    return out"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if data.ndim != 2:\n        raise ValueError('data must be a 2-D array')\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    vars_ = np.var(data, axis=0)\n    denom = np.sqrt(vars_)\n    denom[denom == 0] = 1.0\n    X_centered = data - means\n    X_std = X_centered / denom\n    cov = X_std.T @ X_std / (n_samples - 1)\n    (eigvals, eigvecs) = np.linalg.eigh(cov)\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n    for j in range(eigvecs.shape[1]):\n        vec = eigvecs[:, j]\n        max_idx = np.argmax(np.abs(vec))\n        if vec[max_idx] < 0:\n            eigvecs[:, j] = -vec\n    top_vecs = eigvecs[:, :k]\n    projected = X_std @ top_vecs\n    projected_rounded = np.round(projected, 4)\n    return projected_rounded.tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 501, "completion_id": 0, "solution": "def constant_scheduler(initial_lr: float, step: int) -> float:\n    \"\"\"Constant learning-rate scheduler.\n\n    Parameters\n    ----------\n    initial_lr : float\n        The fixed learning rate that should be returned on every call.\n    step : int\n        Current training step (ignored).\n\n    Returns\n    -------\n    float\n        The same value as `initial_lr`.\n    \"\"\"\n    return initial_lr"}
{"task_id": 502, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 503, "completion_id": 0, "solution": "from copy import deepcopy\ndef selective_update(hparams: dict | None, updates: dict | None) -> dict | int:\n    \"\"\"Update only existing keys in *hparams* with values from *updates*.\n\n    Parameters\n    ----------\n    hparams : dict | None\n        Original hyper-parameter dictionary.  If None, return -1.\n    updates : dict | None\n        Dictionary containing proposed updates.  Keys **not** present in\n        *hparams* are ignored.  If None, no updates are applied.\n\n    Returns\n    -------\n    dict | int\n        A deep-copied dictionary with valid updates applied, or -1 when\n        *hparams* is None.\n    \"\"\"\n    if hparams is None:\n        return -1\n    hparams_copy = deepcopy(hparams)\n    if updates is not None:\n        for (key, val) in updates.items():\n            if key in hparams_copy:\n                hparams_copy[key] = val\n    return hparams_copy"}
{"task_id": 505, "completion_id": 0, "solution": ""}
{"task_id": 508, "completion_id": 0, "solution": "from typing import Any, Dict, List"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union\ndef chebyshev(x: Union[list[float], 'np.ndarray'], y: Union[list[float], 'np.ndarray']) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors x and y must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    try:\n        len_x = len(x)\n        len_y = len(y)\n    except Exception:\n        x = np.asarray(x).ravel()\n        y = np.asarray(y).ravel()\n        len_x = x.shape[0]\n        len_y = y.shape[0]\n    if len_x != len_y:\n        return -1\n    if isinstance(x, np.ndarray):\n        x_iter = x.ravel()\n    else:\n        x_iter = x\n    if isinstance(y, np.ndarray):\n        y_iter = y.ravel()\n    else:\n        y_iter = y\n    if len_x == 0:\n        return 0.0\n    max_diff = max((abs(a - b) for (a, b) in zip(x_iter, y_iter)))\n    return float(round(max_diff, 4))"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as y.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as t_mean.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1.0 - eps)\n    recon = -(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    recon_loss = np.sum(recon)\n    kl = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    batch_size = y.shape[0]\n    total_loss = (recon_loss + kl) / batch_size\n    return round(float(total_loss), 6)"}
{"task_id": 511, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 512, "completion_id": 0, "solution": ""}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    w_arr = np.array(w, dtype=float)\n    V_arr = np.array(V, dtype=float)\n    linear_term = X_arr.dot(w_arr)\n    XV = X_arr.dot(V_arr)\n    sum_squared = np.sum(XV * XV, axis=1)\n    X_squared = X_arr * X_arr\n    V_squared = V_arr * V_arr\n    squared_sum = np.sum(X_squared.dot(V_squared), axis=1)\n    interaction_term = 0.5 * (sum_squared - squared_sum)\n    y = w0 + linear_term + interaction_term\n    y_rounded = np.round(y, 4).tolist()\n    return y_rounded"}
{"task_id": 514, "completion_id": 0, "solution": "def switch_phase(current_phase: str, set_train: bool | None=None, set_test: bool | None=None) -> str:\n    \"\"\"Update the training/testing phase.\n\n    Parameters\n    ----------\n    current_phase : str\n        The current phase, must be either \"training\" or \"testing\".\n    set_train : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"training\".\n        ``False`` \u2192 \"testing\".\n    set_test : bool | None, optional\n        If given, forces the phase according to its boolean value.\n        ``True``  \u2192 \"testing\".\n        ``False`` \u2192 \"training\".\n\n    Returns\n    -------\n    str\n        The updated phase (\"training\" or \"testing\").  Returns -1 for\n        invalid inputs.\n    \"\"\"\n    if current_phase not in ('training', 'testing'):\n        return -1\n    if set_train is not None and set_test is not None:\n        return -1\n    if set_train is not None:\n        if not isinstance(set_train, bool):\n            return -1\n        return 'training' if set_train else 'testing'\n    if set_test is not None:\n        if not isinstance(set_test, bool):\n            return -1\n        return 'testing' if set_test else 'training'\n    return 'testing' if current_phase == 'training' else 'training'"}
{"task_id": 515, "completion_id": 0, "solution": "from typing import Any, Dict\ndef flatten_parameters(params: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Flatten a nested parameter dictionary.\n\n    A dot (`.`) is used to join nested keys.  The input dictionary must not be\n    mutated.\n\n    Args:\n        params: A potentially nested dictionary where some values can be other\n                dictionaries.\n\n    Returns:\n        A new dictionary without nested structures.\n    \"\"\"\n    flat_dict: Dict[str, Any] = {}\n\n    def _flatten(current: Dict[str, Any], prefix: str='') -> None:\n        for (key, value) in current.items():\n            new_key = f'{prefix}.{key}' if prefix else key\n            if isinstance(value, dict):\n                _flatten(value, new_key)\n            else:\n                flat_dict[new_key] = value\n    _flatten(params)\n    return flat_dict"}
{"task_id": 516, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Compute the Euclidean distance between two numeric vectors.\n\n    The vectors may be provided as Python lists or NumPy arrays and may contain\n    integers or floats. If the vectors have different numbers of total\n    elements, the function returns -1.\n\n    Args:\n        a (list[int | float] | np.ndarray): First vector.\n        b (list[int | float] | np.ndarray): Second vector.\n\n    Returns:\n        float: Euclidean distance rounded to 4 decimal places, or -1 if the\n               vectors are of unequal length.\n    \"\"\"\n    a_arr = np.array(a).ravel()\n    b_arr = np.array(b).ravel()\n    if a_arr.size != b_arr.size:\n        return -1\n    diff = a_arr - b_arr\n    sum_sq = np.sum(diff * diff)\n    dist = math.sqrt(sum_sq)\n    return round(dist, 4)"}
{"task_id": 517, "completion_id": 0, "solution": ""}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float, nested list, or ndarray) with each value\n        replaced by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        if len(z) == 0:\n            return []\n        return [sigmoid_grad(elem) for elem in z]\n    else:\n        grad_val = z * (1 - z)\n        return float(np.round(grad_val, 4))"}
{"task_id": 521, "completion_id": 0, "solution": "import numpy as np\ndef relu_grad(z):\n    \"\"\"Compute the element-wise derivative of the ReLU activation.\n\n    The function returns 0 for every entry that is less than or equal to zero\n    and 1 for every entry that is strictly greater than zero. Scalars\n    yield a single integer; arrays/lists yield a Python list of identical\n    shape.\n    \"\"\"\n    arr = np.array(z)\n    grad = (arr > 0).astype(int)\n    if arr.ndim == 0:\n        return int(grad)\n    else:\n        return grad.tolist()"}
{"task_id": 522, "completion_id": 0, "solution": "import numpy as np\ndef standard_normal(weight_shape):\n    \"\"\"Return a tensor of the given shape filled with samples from N(0,1).\n\n    The function *must* reset the NumPy random seed to 42 every time it is\n    called so that the output is reproducible.  It should then draw numbers\n    from the standard normal distribution, round every value to four decimal\n    places and finally convert the NumPy array to a Python list before\n    returning it.\n\n    Args:\n        weight_shape (int | tuple[int, ...] | list[int]): Shape of the tensor\n            to be returned.\n\n    Returns:\n        list: A Python list containing the generated (rounded) values.\n    \"\"\"\n    np.random.seed(42)\n    if isinstance(weight_shape, int):\n        shape = (weight_shape,)\n    elif isinstance(weight_shape, (list, tuple)):\n        shape = tuple(weight_shape)\n    else:\n        raise TypeError('weight_shape must be int, list of ints, or tuple of ints')\n    arr = np.random.standard_normal(size=shape)\n    arr = np.round(arr, 4)\n    return arr.tolist()"}
{"task_id": 523, "completion_id": 0, "solution": "import numpy as np\ndef he_normal(weight_shape: tuple[int, ...]) -> list:\n    \"\"\"Initialise a weight tensor using the He normal distribution.\n\n    Args:\n        weight_shape: Shape of the desired weight tensor. For dense layers this\n            is usually (fan_in, fan_out). For 2-D convolutions it is\n            (kernel_h, kernel_w, in_channels, out_channels).\n\n    Returns:\n        Nested Python lists containing the initialised weights, rounded to four\n        decimal places.\n    \"\"\"\n    if len(weight_shape) == 2:\n        fan_in = weight_shape[0]\n    elif len(weight_shape) == 4:\n        fan_in = weight_shape[0] * weight_shape[1] * weight_shape[2]\n    else:\n        fan_in = weight_shape[0]\n    sigma = np.sqrt(2.0 / fan_in)\n    weights = np.random.normal(loc=0.0, scale=sigma, size=weight_shape)\n    weights = np.round(weights, 4)\n    return weights.tolist()"}
{"task_id": 525, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np"}
{"task_id": 527, "completion_id": 0, "solution": "import os\nfrom typing import List, Union\ndef extract_archive(file_path: str, path: str='.', archive_format: Union[str, List[str], None]='auto') -> bool:\n    \"\"\"Checks whether *file_path* belongs to an allowed archive format.\n\n    The function MUST NOT raise any exception and MUST NOT perform real file\n    extraction.  Read the task description for the full specification.\n\n    Args:\n        file_path: Full path (or name) of the archive file.\n        path: Destination folder \u2013 ignored in this simplified version.\n        archive_format: See task description.\n\n    Returns:\n        True if the file name matches one of the allowed formats, False otherwise.\n    \"\"\"\n    _FORMAT_EXTS = {'tar': ['.tar', '.tar.gz', '.tgz', '.tar.bz', '.tar.bz2', '.tbz'], 'zip': ['.zip']}\n    allowed_formats = set()\n    if archive_format is None:\n        return False\n    if isinstance(archive_format, list):\n        if not archive_format:\n            return False\n        for fmt in archive_format:\n            if isinstance(fmt, str):\n                fmt_l = fmt.lower()\n                if fmt_l == 'auto':\n                    allowed_formats.update(['tar', 'zip'])\n                else:\n                    allowed_formats.add(fmt_l)\n    elif isinstance(archive_format, str):\n        af = archive_format.lower()\n        if af == 'auto':\n            allowed_formats.update(['tar', 'zip'])\n        else:\n            allowed_formats.add(af)\n    else:\n        return False\n    if not allowed_formats:\n        return False\n    fname = os.path.basename(file_path).lower()\n    for fmt in allowed_formats:\n        exts = _FORMAT_EXTS.get(fmt)\n        if not exts:\n            continue\n        for ext in exts:\n            if fname.endswith(ext):\n                return True\n    return False"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim != 2 or X_arr.shape[1] != 2:\n        raise ValueError('X must be a list of [x1, x2] pairs.')\n    (w1, w2) = W\n    (x1_min, x1_max) = (X_arr[:, 0].min(), X_arr[:, 0].max())\n    (x2_min, x2_max) = (X_arr[:, 1].min(), X_arr[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1_grid, X2_grid) = np.meshgrid(x1_plot, x2_plot)\n    scores = w1 * X1_grid + w2 * X2_grid + b\n    labels = np.where(scores >= 0, 1, -1).astype(int)\n    return labels.tolist()"}
{"task_id": 529, "completion_id": 0, "solution": "import math"}
{"task_id": 530, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef binary_cross_entropy(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculates the mean Binary Cross-Entropy loss.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Ground-truth binary labels (0 or 1).\n    y_pred : np.ndarray\n        Predicted probabilities for the positive class. Must have the same shape\n        as *y_true*.\n\n    Returns\n    -------\n    float\n        Mean BCE loss rounded to 4 decimal places.\n    \"\"\"\n    eps = 1e-07\n    p = np.clip(y_pred, eps, 1 - eps)\n    loss = -(y_true * np.log(p) + (1 - y_true) * np.log(1 - p))\n    return round(np.mean(loss), 4)"}
{"task_id": 531, "completion_id": 0, "solution": "import numpy as np\ndef generalized_cosine(window_len: int, coefs: list[float], symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a generalized cosine window.\n\n    The function should create either a periodic or a symmetric generalized\n    cosine window according to the *symmetric* flag and return it rounded to\n    four decimal places.\n\n    Args:\n        window_len (int): Desired length *L* of the final window (must be\n            strictly positive).\n        coefs (list[float]): List of coefficients ``a_k``.\n        symmetric (bool, optional): If *True* produce a symmetric window of\n            length *L*; otherwise produce a periodic window suitable for the\n            FFT.  Defaults to *False*.\n\n    Returns:\n        list[float]: Window values rounded to four decimals.\n    \"\"\"\n    if window_len <= 0:\n        raise ValueError('window_len must be a positive integer.')\n    if window_len == 1:\n        total = sum(coefs)\n        return [round(total, 4)]\n    L = window_len\n    if symmetric:\n        theta = np.linspace(-np.pi, np.pi, L, endpoint=True)\n    else:\n        theta = np.linspace(-np.pi, np.pi, L, endpoint=False)\n    a = np.array(coefs, dtype=float)\n    k = np.arange(a.size, dtype=float)\n    cos_terms = np.cos(np.outer(k, theta))\n    w = (a[:, None] * cos_terms).sum(axis=0)\n    w_rounded = np.round(w, 4)\n    return w_rounded.tolist()"}
{"task_id": 532, "completion_id": 0, "solution": "def count_fc_parameters(layers: list[int]) -> int:\n    \"\"\"Calculate total trainable parameters (weights + biases) in a fully-connected network.\n\n    Args:\n        layers: List of integers where each element represents the number of\n            neurons in the respective layer (input layer first).\n\n    Returns:\n        An integer \u2013 total count of trainable parameters. Returns 0 when fewer\n        than two layers are supplied.\n    \"\"\"\n    if len(layers) < 2:\n        return 0\n    total_params = 0\n    for (n_in, n_out) in zip(layers, layers[1:]):\n        weights = n_in * n_out\n        biases = n_out\n        total_params += weights + biases\n    return total_params"}
{"task_id": 533, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_likelihood(x, mean, sigma):\n    \"\"\"Compute the probability density of a normal distribution.\n\n    Parameters\n    ----------\n    x : float | list[float] | np.ndarray\n        Point(s) where the density will be evaluated.\n    mean : float\n        The mean (\u00b5) of the distribution.\n    sigma : float\n        The standard deviation (\u03c3) of the distribution.\n\n    Returns\n    -------\n    float | list[float]\n        Density value(s) rounded to 4 decimal places. A single float is\n        returned for a scalar x, otherwise a list is returned.\n    \"\"\"\n    coeff = 1.0 / (sigma * np.sqrt(2.0 * np.pi))\n    if np.isscalar(x):\n        exponent = -(x - mean) ** 2 / (2.0 * sigma ** 2)\n        pdf_val = coeff * np.exp(exponent)\n        return round(pdf_val, 4)\n    else:\n        arr = np.asarray(x, dtype=float)\n        exponent = -(arr - mean) ** 2 / (2.0 * sigma ** 2)\n        pdf_vals = coeff * np.exp(exponent)\n        return np.round(pdf_vals, 4).tolist()"}
{"task_id": 534, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_(Z):\n    \"\"\"Compute the logistic sigmoid activation element-wise.\n\n    Args:\n        Z: A scalar, 1-D list/array, or 2-D list/array of real numbers.\n\n    Returns:\n        Sigmoid-transformed value(s) rounded to 4 decimals. Returns a float for\n        scalar input; otherwise returns a Python list preserving the input shape.\n    \"\"\"\n    arr = np.array(Z, dtype=float)\n    sig = 1 / (1 + np.exp(-arr))\n    sig = np.round(sig, 4)\n    if sig.ndim == 0:\n        return float(sig)\n    return sig.tolist()"}
{"task_id": 536, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression(X_train, y_train, X_test, method='normal', alpha=0.01, num_iter=1000):\n    \"\"\"Linear regression with two training modes (Normal Equation or BGD).\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Feature matrix for training data of shape (m, n).\n    y_train : np.ndarray\n        Target vector for training data of length m.\n    X_test : np.ndarray\n        Feature matrix for which predictions are required, shape (k, n).\n    method : str, optional\n        \"normal\" (default) for the closed-form solution; any other string\n        triggers batch gradient descent.\n    alpha : float, optional\n        Learning rate for gradient descent (ignored for the normal equation).\n    num_iter : int, optional\n        Number of gradient descent iterations (ignored for the normal equation).\n\n    Returns\n    -------\n    list[float]\n        Predictions for each row in X_test, rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X_train.shape\n    X_b = np.hstack([np.ones((m, 1)), X_train])\n    if method == 'normal':\n        XtX = X_b.T @ X_b\n        Xty = X_b.T @ y_train\n        theta = np.linalg.inv(XtX) @ Xty\n    else:\n        theta = np.zeros(n + 1)\n        for _ in range(num_iter):\n            predictions = X_b @ theta\n            errors = predictions - y_train\n            grad = X_b.T @ errors / m\n            theta = theta - alpha * grad\n    k = X_test.shape[0]\n    X_test_b = np.hstack([np.ones((k, 1)), X_test])\n    preds = X_test_b @ theta\n    return np.round(preds, 4).tolist()"}
{"task_id": 537, "completion_id": 0, "solution": ""}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 540, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef derivative_sigmoid(Z: np.ndarray) -> list:\n    \"\"\"Return the element-wise derivative of the sigmoid function.\n\n    Args:\n        Z: NumPy array (any shape) containing numeric values.\n\n    Returns:\n        A Python list with the same shape as *Z*, containing the\n        derivative of the sigmoid evaluated at each element, rounded to\n        4 decimal places.\n    \"\"\"\n    sigmoid = 1.0 / (1.0 + np.exp(-Z))\n    deriv = sigmoid * (1.0 - sigmoid)\n    return np.round(deriv, 4).tolist()"}
{"task_id": 541, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 542, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(params: list[np.ndarray], grads: list[np.ndarray], s: list[np.ndarray] | None=None, alpha: float=0.01, beta: float=0.9, epsilon: float=1e-08) -> tuple[list[np.ndarray], list[np.ndarray]]:\n    \"\"\"Perform a single RMSProp optimisation step.\n    \n    Args:\n        params: List of parameter arrays.\n        grads:  List of gradient arrays corresponding to params.\n        s:      List of running-average-of-squared-gradients arrays, or None/empty.\n        alpha:  Learning rate.\n        beta:   Exponential decay rate for the running average.\n        epsilon:Small constant for numeric stability.\n    \n    Returns:\n        new_params: List of updated parameters (rounded to 6 decimals).\n        new_s:      List of updated running averages.\n    \"\"\"\n    if not s:\n        s = [np.zeros_like(g) for g in grads]\n    new_params = []\n    new_s = []\n    for (\u03b8, g, s_old) in zip(params, grads, s):\n        s_curr = beta * s_old + (1.0 - beta) * (g * g)\n        \u03b8_curr = \u03b8 - alpha * g / (np.sqrt(s_curr) + epsilon)\n        \u03b8_curr_rounded = np.round(\u03b8_curr, 6)\n        new_s.append(s_curr)\n        new_params.append(\u03b8_curr_rounded)\n    return (new_params, new_s)"}
{"task_id": 543, "completion_id": 0, "solution": "from collections import Counter"}
{"task_id": 544, "completion_id": 0, "solution": "def split_tree(data: list, fea: int, value: float):\n    \"\"\"Split a data set into two ordered subsets according to a threshold.\n\n    Args:\n        data (list): List of samples. Each sample is a list or tuple of feature values.\n        fea (int): Index of the feature used for the split.\n        value (float): Threshold for the split.\n\n    Returns:\n        tuple[list, list]: Two lists (set1, set2) where set1 contains the samples\n        with feature value >= threshold and set2 contains the rest.\n    \"\"\"\n    set1 = []\n    set2 = []\n    for sample in data:\n        if sample[fea] >= value:\n            set1.append(sample)\n        else:\n            set2.append(sample)\n    return (set1, set2)"}
{"task_id": 545, "completion_id": 0, "solution": "def tree_stats(root: 'node | None') -> tuple[int, int]:\n    \"\"\"Return the number of leaf nodes and the maximum depth of the tree.\n\n    A **leaf** is defined as a node whose ``results`` attribute is not ``None``.\n\n    Parameters\n    ----------\n    root : node | None\n        Root of the decision tree.  If *None*, the tree is considered empty.\n\n    Returns\n    -------\n    tuple[int, int]\n        ``(leaf_count, max_depth)`` where\n        * *leaf_count* is the total number of leaves in the tree, and\n        * *max_depth* is the length of the longest path from *root* to a leaf.\n    \"\"\"\n    if root is None:\n        return (0, 0)\n    if root.results is not None:\n        return (1, 1)\n    (left_leaves, left_depth) = tree_stats(root.left)\n    (right_leaves, right_depth) = tree_stats(root.right)\n    total_leaves = left_leaves + right_leaves\n    max_depth = 1 + max(left_depth, right_depth)\n    return (total_leaves, max_depth)"}
{"task_id": 546, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Any, Dict, List, Tuple"}
{"task_id": 547, "completion_id": 0, "solution": "import numpy as np\ndef forward_step(A: list[list[float]], B: list[list[float]], S: list[float], obs: list[int], t: int) -> list[float]:\n    \"\"\"Compute the forward probability vector \u03b1_t for a Hidden Markov Model.\n\n    Implement the forward recursion and return \u03b1_t rounded to 4 decimals.\n    If the inputs are invalid (shape mismatch, illegal t, etc.) return -1.\n    \"\"\"\n    try:\n        A_mat = np.array(A, dtype=float)\n        B_mat = np.array(B, dtype=float)\n        S_vec = np.array(S, dtype=float)\n    except Exception:\n        return -1\n    if A_mat.ndim != 2 or A_mat.shape[0] != A_mat.shape[1]:\n        return -1\n    n = A_mat.shape[0]\n    if n == 0:\n        return -1\n    if B_mat.ndim != 2 or B_mat.shape[0] != n:\n        return -1\n    m = B_mat.shape[1]\n    if m == 0:\n        return -1\n    if S_vec.ndim != 1 or S_vec.shape[0] != n:\n        return -1\n    if not isinstance(obs, list) or len(obs) == 0:\n        return -1\n    T = len(obs)\n    if not isinstance(t, int) or t < 0 or t >= T:\n        return -1\n    for o in obs:\n        if not isinstance(o, int) or o < 0 or o >= m:\n            return -1\n    try:\n        alpha = S_vec * B_mat[:, obs[0]]\n        for time in range(1, t + 1):\n            alpha = alpha.dot(A_mat) * B_mat[:, obs[time]]\n    except Exception:\n        return -1\n    alpha_list = alpha.tolist()\n    return [round(float(val), 4) for val in alpha_list]"}
{"task_id": 548, "completion_id": 0, "solution": "import numpy as np\ndef compute_xi(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int], t: int) -> list[list[float]]:\n    \"\"\"Return the \u03be (xi) matrix for a single time step in a discrete HMM.\n\n    The function computes\n        \u03be_t(i,j) = P(q_t=i, q_{t+1}=j | obs, \u03bb)\n    using the forward\u2013backward algorithm.\n\n    Args:\n        A: Transition matrix (N\u00d7N).\n        B: Emission matrix (N\u00d7M).\n        pi: Initial distribution (length N).\n        obs: Observation sequence (length T).\n        t: Time index (0 \u2264 t < T\u22121).\n\n    Returns:\n        The N\u00d7N \u03be matrix as a list of lists rounded to 4 decimals,\n        or -1 if t is out of range.\n    \"\"\"\n    T = len(obs)\n    if t < 0 or t >= T - 1:\n        return -1\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    pi = np.array(pi, dtype=float)\n    N = A.shape[0]\n    alpha = np.zeros((T, N), dtype=float)\n    alpha[0, :] = pi * B[:, obs[0]]\n    for k in range(1, T):\n        alpha[k, :] = alpha[k - 1, :] @ A * B[:, obs[k]]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for k in range(T - 2, -1, -1):\n        beta[k, :] = (A * (B[:, obs[k + 1]] * beta[k + 1, :])[None, :]).sum(axis=1)\n    numer = alpha[t][:, None] * A * (B[:, obs[t + 1]] * beta[t + 1])[None, :]\n    denom = numer.sum()\n    xi = numer / denom\n    xi = np.round(xi, 4)\n    return xi.tolist()"}
{"task_id": 549, "completion_id": 0, "solution": "import numpy as np\ndef cal_dis(x, y):\n    \"\"\"Compute the squared Euclidean distance between two vectors.\n\n    Parameters\n    ----------\n    x : list, tuple, or np.ndarray\n        First vector of numbers.\n    y : list, tuple, or np.ndarray\n        Second vector of numbers.\n\n    Returns\n    -------\n    float\n        Squared Euclidean distance rounded to 4 decimal places, or -1 if the\n        vectors are of different lengths.\n    \"\"\"\n    x_arr = np.array(x, dtype=float).ravel()\n    y_arr = np.array(y, dtype=float).ravel()\n    if x_arr.shape != y_arr.shape:\n        return -1\n    diff = x_arr - y_arr\n    sq_dist = np.dot(diff, diff)\n    return float(round(sq_dist, 4))"}
{"task_id": 551, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef best_gini_split(X: np.ndarray, y: np.ndarray, epsilon: float=0.001) -> tuple[int, object, float]:\n    \"\"\"Find the best (feature, value) equality split based on Gini impurity.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the feature\n        values.  The dtype may be numeric or object (strings, etc.).\n    y : np.ndarray\n        1-D array of length n_samples that contains the class labels.\n    epsilon : float, optional (default=1e-3)\n        Minimum required decrease in Gini impurity for a split to be\n        considered valid.\n\n    Returns\n    -------\n    tuple\n        (best_feature_index, best_split_value, best_gini_value). If no valid\n        split is found the function returns (-1, None, parent_gini).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        m = labels.shape[0]\n        if m == 0:\n            return 0.0\n        cnt = Counter(labels)\n        sum_sq = sum(((count / m) ** 2 for count in cnt.values()))\n        return 1.0 - sum_sq\n    parent_gini = gini_impurity(y)\n    best_gini = float('inf')\n    best_feature = -1\n    best_value = None\n    for feature_idx in range(n_features):\n        col = X[:, feature_idx]\n        uniq_vals = set(col.tolist())\n        for v in uniq_vals:\n            mask = col == v\n            n_left = mask.sum()\n            if n_left == 0 or n_left == n_samples:\n                continue\n            y_left = y[mask]\n            y_right = y[~mask]\n            n_right = n_samples - n_left\n            g_left = gini_impurity(y_left)\n            g_right = gini_impurity(y_right)\n            g_split = n_left / n_samples * g_left + n_right / n_samples * g_right\n            if g_split < best_gini:\n                best_gini = g_split\n                best_feature = feature_idx\n                best_value = v\n    if best_feature == -1 or parent_gini - best_gini < epsilon:\n        return (-1, None, float(parent_gini))\n    if isinstance(best_value, np.generic):\n        best_value = best_value.item()\n    return (best_feature, best_value, float(best_gini))"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm and returns the\n    resulting vector rounded to four decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n                    - pi: 1D array of shape (N,) initial state distribution\n                    - A:  2D array of shape (N, N) state transition matrix\n                    - B:  2D array of shape (N, M) emission probability matrix\n        observations (list[int]): Sequence of observation indices (each in [0, M-1]).\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t,\n                     rounded to 4 decimal places. Empty list if t is out of range.\n    \"\"\"\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    pi = np.array(hmm['pi'], dtype=float)\n    A = np.array(hmm['A'], dtype=float)\n    B = np.array(hmm['B'], dtype=float)\n    N = pi.shape[0]\n    alpha = np.zeros((T, N), dtype=float)\n    o0 = observations[0]\n    alpha[0, :] = pi * B[:, o0]\n    for u in range(1, T):\n        o_u = observations[u]\n        alpha[u, :] = (alpha[u - 1, :].reshape(-1, 1) * A).sum(axis=0) * B[:, o_u]\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1, :] = 1.0\n    for u in range(T - 2, -1, -1):\n        o_next = observations[u + 1]\n        beta[u, :] = (A * (B[:, o_next] * beta[u + 1, :])).sum(axis=1)\n    numer = alpha[t, :] * beta[t, :]\n    denom = numer.sum()\n    gamma_t = numer / denom\n    gamma_rounded = np.round(gamma_t, 4).tolist()\n    return gamma_rounded"}
{"task_id": 553, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, alpha: float=0.01, max_iter: int=1000) -> list[int]:\n    \"\"\"Train a binary Logistic Regression model with batch gradient descent and\n    predict class labels for a test set.\n\n    Args:\n        X_train: Training patterns of shape (n_samples, n_features).\n        y_train: Binary labels (0/1) of length n_samples.\n        X_test:  Patterns to be classified, shape (m_samples, n_features).\n        alpha:   Learning rate used in gradient ascent on the log-likelihood.\n        max_iter:Maximum number of gradient updates.\n\n    Returns:\n        A Python list containing the predicted class label (0 or 1) for every\n        row of X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    X = np.hstack([np.ones((n_samples, 1)), X_train])\n    m_samples = X_test.shape[0]\n    X_t = np.hstack([np.ones((m_samples, 1)), X_test])\n    w = np.zeros(n_features + 1, dtype=float)\n\n    def sigmoid(z: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-z))\n    for _ in range(max_iter):\n        z = X.dot(w)\n        h = sigmoid(z)\n        gradient = X.T.dot(y_train - h) / n_samples\n        w += alpha * gradient\n    z_test = X_t.dot(w)\n    h_test = sigmoid(z_test)\n    preds = (h_test >= 0.5).astype(int)\n    return preds.tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff ** 2, axis=2))\n    neighborhoods = [list(np.where(dist_matrix[i] <= eps)[0]) for i in range(n_samples)]\n    is_core = np.array([len(neigh) >= min_samples for neigh in neighborhoods])\n    labels = np.zeros(n_samples, dtype=int)\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue\n        if not is_core[i]:\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque([i])\n        while queue:\n            point = queue.popleft()\n            for neighbor in neighborhoods[point]:\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if is_core[neighbor]:\n                        queue.append(neighbor)\n    labels[labels == 0] = -1\n    return labels.tolist()"}
{"task_id": 559, "completion_id": 0, "solution": ""}
{"task_id": 560, "completion_id": 0, "solution": "import math\nimport heapq\ndef k_nearest_neighbors(points: list[list[float]], query: list[float], k: int=3) -> list[int]:\n    \"\"\"Find the *k* nearest neighbours of *query* among *points* using a k-d tree.\n\n    Parameters\n    ----------\n    points : list[list[float]]\n        A list containing *n* points.  Each point itself is a list of floats\n        and all points have the same dimensionality.\n    query : list[float]\n        The query point whose neighbours are to be found.\n    k : int, default 3\n        The number of nearest neighbours that should be returned.  If *k* is\n        greater than the number of points, all points must be returned.\n\n    Returns\n    -------\n    list[int]\n        A list with the indices (0-based) of the *k* closest points, sorted by\n        increasing distance to *query* (ties are broken by the smaller index).\n    \"\"\"\n    n = len(points)\n    if n == 0:\n        return []\n    if k <= 0:\n        return []\n    k = min(k, n)\n    dim = len(query)\n\n    def build_kd_tree(items, depth=0):\n        if not items:\n            return None\n        axis = depth % dim\n        items.sort(key=lambda it: it[0][axis])\n        mid = len(items) // 2\n        (point, idx) = items[mid]\n        node = {'idx': idx, 'axis': axis, 'point': point, 'left': build_kd_tree(items[:mid], depth + 1), 'right': build_kd_tree(items[mid + 1:], depth + 1)}\n        return node\n    points_with_idx = [(pt, i) for (i, pt) in enumerate(points)]\n    root = build_kd_tree(points_with_idx)\n    heap = []\n\n    def sq_dist(a, b):\n        return sum(((x - y) ** 2 for (x, y) in zip(a, b)))\n\n    def search(node):\n        if node is None:\n            return\n        axis = node['axis']\n        pt = node['point']\n        idx = node['idx']\n        d2 = sq_dist(pt, query)\n        entry = (-d2, -idx, idx)\n        if len(heap) < k:\n            heapq.heappush(heap, entry)\n        else:\n            heapq.heappushpop(heap, entry)\n        diff = query[axis] - pt[axis]\n        (first, second) = ('left', 'right') if diff <= 0 else ('right', 'left')\n        search(node[first])\n        worst_d2 = -heap[0][0]\n        if len(heap) < k or diff * diff <= worst_d2:\n            search(node[second])\n    search(root)\n    results = [(-t[0], t[2]) for t in heap]\n    results.sort(key=lambda x: (x[0], x[1]))\n    return [idx for (_, idx) in results]"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fit a Gaussian Mixture Model (GMM) with k components to the data using the\n    Expectation\u2013Maximization (EM) algorithm, then return hard cluster assignments.\n    \n    Parameters\n    ----------\n    data : np.ndarray, shape (N, D)\n        The input data: N samples with D features each.\n    k : int\n        The number of Gaussian components (clusters).\n    max_iter : int\n        Maximum number of EM iterations.\n    epsilon : float\n        Convergence threshold on the change in mixture weights.\n    \n    Returns\n    -------\n    labels : list[int], length N\n        Hard cluster assignments (0 through k-1) for each sample.\n        If k==1, returns all zeros.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    rng = np.random.RandomState(0)\n    resp = rng.rand(N, k)\n    resp = resp / resp.sum(axis=1, keepdims=True)\n\n    def m_step(resp):\n        \"\"\"Given resp (N x k), compute pi (k,), means (k x D), covs (k x D x D).\"\"\"\n        Nk = resp.sum(axis=0)\n        pi = Nk / N\n        means = resp.T @ data / Nk[:, None]\n        covs = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - means[j]\n            w = resp[:, j][:, None]\n            covs[j] = (w * diff).T @ diff / Nk[j]\n            covs[j] += np.eye(D) * 1e-06\n        return (pi, means, covs)\n    (pi, means, covs) = m_step(resp)\n    resp = np.zeros((N, k))\n    const_coeff = (2 * math.pi) ** (-D / 2)\n    for iteration in range(max_iter):\n        pi_old = pi.copy()\n        for j in range(k):\n            cov_j = covs[j]\n            inv_cov = np.linalg.inv(cov_j)\n            det_cov = np.linalg.det(cov_j)\n            coef = const_coeff * det_cov ** (-0.5)\n            diff = data - means[j]\n            exponent = -0.5 * np.sum(diff @ inv_cov * diff, axis=1)\n            pdf = coef * np.exp(exponent)\n            resp[:, j] = pi[j] * pdf\n        row_sums = resp.sum(axis=1, keepdims=True)\n        row_sums[row_sums == 0] = np.finfo(float).eps\n        resp /= row_sums\n        (pi, means, covs) = m_step(resp)\n        if np.max(np.abs(pi - pi_old)) < epsilon:\n            break\n    hard_labels = np.argmax(resp, axis=1)\n    order = np.argsort(means[:, 0])\n    new_label = np.empty(k, dtype=int)\n    for (new_idx, old_idx) in enumerate(order):\n        new_label[old_idx] = new_idx\n    final_labels = [int(new_label[lab]) for lab in hard_labels]\n    return final_labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    if n_cluster <= 0:\n        raise ValueError('n_cluster must be >= 1')\n    if n_cluster == 1:\n        return [0] * N\n    sq_norms = np.sum(data * data, axis=1)\n    dist2 = sq_norms[:, None] + sq_norms[None, :] - 2.0 * data.dot(data.T)\n    dist2 = np.maximum(dist2, 0.0)\n    W = np.exp(-gamma * dist2)\n    np.fill_diagonal(W, 0.0)\n    degrees = np.sum(W, axis=1)\n    D = np.diag(degrees)\n    L = D - W\n    if method == 'normalized':\n        with np.errstate(divide='ignore'):\n            d_inv_sqrt = 1.0 / np.sqrt(degrees)\n        d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.0\n        D_inv_sqrt = np.diag(d_inv_sqrt)\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    elif method != 'unnormalized':\n        raise ValueError(\"method must be 'unnormalized' or 'normalized'\")\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    U = eigvecs[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1)\n        nonzero = row_norms > 0\n        U[nonzero] = U[nonzero] / row_norms[nonzero, None]\n    X = U.copy()\n    K = n_cluster\n    centroids = X[:K].copy()\n    labels = np.full(N, -1, dtype=int)\n    for _ in range(100):\n        X_sq = np.sum(X * X, axis=1).reshape(-1, 1)\n        C_sq = np.sum(centroids * centroids, axis=1).reshape(1, -1)\n        d2 = X_sq + C_sq - 2.0 * X.dot(centroids.T)\n        new_labels = np.argmin(d2, axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for j in range(K):\n            members = X[labels == j]\n            if len(members) > 0:\n                centroids[j] = np.mean(members, axis=0)\n    min_idx = []\n    for j in range(K):\n        idxs = np.where(labels == j)[0]\n        if idxs.size > 0:\n            min_idx.append((j, idxs.min()))\n        else:\n            min_idx.append((j, N + j))\n    min_idx.sort(key=lambda x: x[1])\n    new_label_map = {old: new for (new, (old, _)) in enumerate(min_idx)}\n    final_labels = [new_label_map[int(l)] for l in labels]\n    return final_labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data:   2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data:   1-D NumPy array of length N with labels \u22121 or 1.\n        eta:      Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N, dtype=float)\n    b = 0.0\n    G = X_data @ X_data.T\n    for _ in range(max_iter):\n        any_update = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                any_update = True\n        if not any_update:\n            break\n    w = np.zeros(d, dtype=float)\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 564, "completion_id": 0, "solution": ""}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    label_counts = np.bincount(y)\n    probs = label_counts[label_counts > 0] / n_samples\n    H_y = -np.sum(probs * np.log2(probs))\n    best_feature = -1\n    best_ig = -1.0\n    for feature_idx in range(n_features):\n        col = X[:, feature_idx]\n        (values, value_counts) = np.unique(col, return_counts=True)\n        H_y_given_A = 0.0\n        for (val, count_val) in zip(values, value_counts):\n            p_val = count_val / n_samples\n            subset_labels = y[col == val]\n            sub_counts = np.bincount(subset_labels)\n            sub_probs = sub_counts[sub_counts > 0] / count_val\n            H_sub = -np.sum(sub_probs * np.log2(sub_probs))\n            H_y_given_A += p_val * H_sub\n        ig = H_y - H_y_given_A\n        if ig > best_ig or (math.isclose(ig, best_ig) and feature_idx < best_feature):\n            best_ig = ig\n            best_feature = feature_idx\n    best_ig = round(best_ig, 6)\n    return (best_feature, best_ig)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon <= 0.0 or n_samples <= 1:\n        return []\n    sample_size_eff = min(sample_size, n_samples)\n    height_limit = math.ceil(math.log2(sample_size_eff)) if sample_size_eff > 0 else 0\n    _gamma = 0.5772156649\n\n    def c(n: int) -> float:\n        if n <= 1:\n            return 0.0\n        return 2.0 * math.log(n - 1) + _gamma - 2.0 * (n - 1) / n\n\n    def build_tree(X: np.ndarray, current_depth: int=0) -> dict:\n        n = X.shape[0]\n        if current_depth >= height_limit or n <= 1:\n            return {'size': n}\n        f = np.random.randint(0, n_features)\n        col = X[:, f]\n        (min_val, max_val) = (col.min(), col.max())\n        if min_val == max_val:\n            return {'size': n}\n        thresh = np.random.uniform(min_val, max_val)\n        left_mask = col < thresh\n        X_left = X[left_mask]\n        X_right = X[~left_mask]\n        left = build_tree(X_left, current_depth + 1)\n        right = build_tree(X_right, current_depth + 1)\n        return {'feature': f, 'threshold': thresh, 'left': left, 'right': right}\n\n    def path_length(x: np.ndarray, node: dict, current_depth: int=0) -> float:\n        if 'size' in node:\n            return current_depth + c(node['size'])\n        f = node['feature']\n        if x[f] < node['threshold']:\n            return path_length(x, node['left'], current_depth + 1)\n        else:\n            return path_length(x, node['right'], current_depth + 1)\n    trees = []\n    for _ in range(n_trees):\n        if sample_size_eff < n_samples:\n            idx = np.random.choice(n_samples, size=sample_size_eff, replace=False)\n            X_sub = data[idx]\n        else:\n            X_sub = data.copy()\n        tree = build_tree(X_sub, current_depth=0)\n        trees.append(tree)\n    path_sums = np.zeros(n_samples, dtype=float)\n    for t in trees:\n        for i in range(n_samples):\n            path_sums[i] += path_length(data[i], t, 0)\n    h_bar = path_sums / n_trees\n    if sample_size_eff > 1:\n        phi = 2.0 * math.log(sample_size_eff - 1) - 2.0 * (sample_size_eff - 1) / sample_size_eff\n    else:\n        return []\n    scores = 2.0 ** (-h_bar / phi)\n    thresh = np.quantile(scores, 1.0 - epsilon)\n    outlier_idx = np.where(scores >= thresh)[0]\n    return sorted(outlier_idx.tolist())"}
{"task_id": 567, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef majority_vote(predictions: List[List[Union[int, float]]]) -> List[int]:\n    \"\"\"Ensemble majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float]]\n        A 2-D list where each row contains the predictions made by one tree\n        and each column groups the votes for a single sample.\n\n    Returns\n    -------\n    list[int]\n        The final class label for every sample after majority voting.  In a\n        tie, the smallest label must be chosen.\n    \"\"\"\n    if not predictions or not predictions[0]:\n        return []\n    n_trees = len(predictions)\n    n_samples = len(predictions[0])\n    result: List[int] = []\n    for j in range(n_samples):\n        votes = [predictions[i][j] for i in range(n_trees)]\n        counts = {}\n        for v in votes:\n            counts[v] = counts.get(v, 0) + 1\n        max_count = max(counts.values())\n        tied_labels = [label for (label, cnt) in counts.items() if cnt == max_count]\n        chosen_label = int(min(tied_labels))\n        result.append(chosen_label)\n    return result"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Maximum entropy classifier with Generalized Iterative Scaling (GIS).\n    Returns a list of predicted labels for X_test.\n    \"\"\"\n    (N, d) = X_train.shape\n    labels = np.unique(y_train)\n    L = len(labels)\n    feat_count = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for (i, v) in enumerate(x):\n            feat_count[i, v, y] += 1\n    j2feat = list(feat_count.keys())\n    feat2j = {f: j for (j, f) in enumerate(j2feat)}\n    M = len(j2feat)\n    E_emp = np.zeros(M, dtype=float)\n    for (j, f) in enumerate(j2feat):\n        E_emp[j] = feat_count[f] / N\n    w = np.zeros(M, dtype=float)\n    C = d\n    label2idx = {y: idx for (idx, y) in enumerate(labels)}\n    for iteration in range(n_iter):\n        E_model = np.zeros(M, dtype=float)\n        for x in X_train:\n            scores = np.zeros(L, dtype=float)\n            for (idx_y, y) in enumerate(labels):\n                s = 0.0\n                for (i, v) in enumerate(x):\n                    key = (i, v, y)\n                    j = feat2j.get(key)\n                    if j is not None:\n                        s += w[j]\n                scores[idx_y] = math.exp(s)\n            Z = scores.sum()\n            probs = scores / Z\n            for (idx_y, y) in enumerate(labels):\n                p = probs[idx_y]\n                for (i, v) in enumerate(x):\n                    j = feat2j.get((i, v, y))\n                    if j is not None:\n                        E_model[j] += p / N\n        delta = np.zeros(M, dtype=float)\n        for j in range(M):\n            delta[j] = 1.0 / C * math.log(E_emp[j] / E_model[j])\n        max_update = np.max(np.abs(delta))\n        w += delta\n        if max_update < epsilon:\n            break\n    preds = []\n    for x in X_test:\n        best_score = -1e+300\n        best_label = None\n        for y in labels:\n            s = 0.0\n            for (i, v) in enumerate(x):\n                j = feat2j.get((i, v, y))\n                if j is not None:\n                    s += w[j]\n            if s > best_score:\n                best_score = s\n                best_label = y\n        preds.append(int(best_label))\n    return preds"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio is rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    if total_docs == 0:\n        return ([], set())\n    doc_counter: Counter[str] = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        doc_counter.update(unique_words)\n    freq_list: List[Tuple[str, float]] = []\n    for (word, doc_count) in doc_counter.items():\n        ratio = round(doc_count / total_docs, 4)\n        freq_list.append((word, ratio))\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = set(doc_counter.keys())\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_k = freq_list[:cut_off]\n        top_words = {word for (word, _) in top_k}\n    return (freq_list, top_words)"}
{"task_id": 570, "completion_id": 0, "solution": "from collections import defaultdict\ndef naive_bayes_predict(train_data: list[tuple[str, list[str]]], keywords: set[str], test_samples: list[list[str]]) -> list[str]:\n    \"\"\"Build an unsmoothed Bernoulli Naive Bayes text classifier and predict labels.\n\n    The classifier treats every word in *keywords* as a binary feature that is\n    either present or absent in a document.  Words outside *keywords* are\n    ignored.  Training follows the standard Bernoulli model *without* any form\n    of smoothing, and *no* class prior is used when computing the likelihoods.\n\n    Args:\n        train_data: List of ``(label, tokens)`` pairs forming the training set.\n        keywords:   Set of words that act as binary features.\n        test_samples: List of token lists (one per unseen document).\n\n    Returns:\n        List of predicted labels for the documents in *test_samples* (same\n        order as input).\n    \"\"\"\n    doc_count = defaultdict(int)\n    word_doc_count = defaultdict(lambda : defaultdict(int))\n    for (label, tokens) in train_data:\n        doc_count[label] += 1\n        seen = set(tokens) & keywords\n        for w in seen:\n            word_doc_count[label][w] += 1\n    cond_prob = {}\n    for (label, Nc) in doc_count.items():\n        cond_prob[label] = {}\n        for w in keywords:\n            cnt = word_doc_count[label].get(w, 0)\n            cond_prob[label][w] = cnt / Nc\n    predictions = []\n    for tokens in test_samples:\n        T = set(tokens)\n        best_label = None\n        best_likelihood = -1.0\n        for label in doc_count:\n            likelihood = 1.0\n            probs = cond_prob[label]\n            for w in keywords:\n                p = probs[w]\n                if w in T:\n                    likelihood *= p\n                else:\n                    likelihood *= 1.0 - p\n                if likelihood == 0.0:\n                    break\n            if likelihood > best_likelihood:\n                best_likelihood = likelihood\n                best_label = label\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    ay = alpha * y\n    w = X.T @ ay\n    residuals = y - X @ w\n    b = np.mean(residuals)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(float(b), 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": ""}
{"task_id": 573, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_train(X_train: np.ndarray, y_train: np.ndarray, eta: float=0.1, n_iter: int=1000) -> tuple[list[float], float, list[int]]:\n    \"\"\"Implement the Perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training patterns of shape (m, n).\n    y_train : np.ndarray\n        Target labels (+1 or -1) of length m.\n    eta : float, optional\n        Learning rate, by default 0.1.\n    n_iter : int, optional\n        Maximum number of passes over the data, by default 1000.\n\n    Returns\n    -------\n    tuple[list[float], float, list[int]]\n        A tuple containing the learned weight vector (as list), the bias term,\n        and a list with the number of errors in each epoch.\n    \"\"\"\n    (_, n_features) = X_train.shape\n    w = np.zeros(n_features, dtype=float)\n    b = 0.0\n    errors_per_epoch: list[int] = []\n    for _ in range(n_iter):\n        error_count = 0\n        for (xi, yi) in zip(X_train, y_train):\n            activation = np.dot(w, xi) + b\n            if yi * activation <= 0:\n                w += eta * yi * xi\n                b += eta * yi\n                error_count += 1\n        errors_per_epoch.append(error_count)\n        if error_count == 0:\n            break\n    w_rounded = [round(float(wi), 4) for wi in w]\n    b_rounded = round(float(b), 4)\n    return (w_rounded, b_rounded, errors_per_epoch)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (low, high) = (base + 1, base + 9)\n        for _ in range(n_train):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_train_list.append([x, y])\n            y_train_list.append(c)\n        for _ in range(n_val):\n            x = round(random.uniform(low, high), 4)\n            y = round(random.uniform(low, high), 4)\n            X_val_list.append([x, y])\n            y_val_list.append(c)\n    X_train = np.array(X_train_list, dtype=float)\n    X_val = np.array(X_val_list, dtype=float)\n    y_train = np.array(y_train_list, dtype=int)\n    y_val = np.array(y_val_list, dtype=int)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 577, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a tiny 2-D synthetic data set for classification.\n    \n    Args:\n        m:        Number of different classes.\n        n_train:  Number of training samples per class.\n        n_val:    Number of validation samples per class.\n        seed:     Optional seed so that results are reproducible.\n    \n    Returns:\n        A tuple ``(X_train, X_val, y_train, y_val)`` consisting of four\n        NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for i in range(m):\n        x_low = (i // 2 + 0.1) * 10\n        x_high = (i // 2 + 0.9) * 10\n        y_low = (i % 2 * 0.5 + 0.1) * 10\n        y_high = (i % 2 * 0.5 + 0.9) * 10\n        label = 2 * i - 1\n        for _ in range(n_train):\n            u = random.random()\n            v = random.random()\n            x = round(x_low + u * (x_high - x_low), 4)\n            y = round(y_low + v * (y_high - y_low), 4)\n            X_train.append([x, y])\n            y_train.append(label)\n        for _ in range(n_val):\n            u = random.random()\n            v = random.random()\n            x = round(x_low + u * (x_high - x_low), 4)\n            y = round(y_low + v * (y_high - y_low), 4)\n            X_val.append([x, y])\n            y_val.append(label)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 578, "completion_id": 0, "solution": "from typing import List, Tuple\ndef make_pairs(corpus: list) -> list[tuple]:\n    \"\"\"Return every consecutive pair (bigram) found in *corpus*.\n\n    Args:\n        corpus: A list containing any kind of elements.\n\n    Returns:\n        A list of tuples where each tuple is a pair of consecutive\n        elements from *corpus*.\n    \"\"\"\n    if len(corpus) < 2:\n        return []\n    return [(corpus[i], corpus[i + 1]) for i in range(len(corpus) - 1)]"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].astype(float).copy()\n    prev_labels = None\n    for _ in range(max_iters):\n        diff = X[:, None, :] - centres[None, :, :]\n        dists = np.linalg.norm(diff, axis=2)\n        labels = np.argmin(dists, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        for j in range(k):\n            assigned_pts = X[labels == j]\n            if assigned_pts.size > 0:\n                centres[j] = assigned_pts.mean(axis=0)\n    centres_rounded = np.round(centres, 4)\n    return (labels.tolist(), centres_rounded.tolist())"}
{"task_id": 581, "completion_id": 0, "solution": ""}
{"task_id": 582, "completion_id": 0, "solution": ""}
{"task_id": 584, "completion_id": 0, "solution": "import numpy as np\ndef make_initial_state(state: list[list[int | float]]) -> list[list[list[int | float]]]:\n    \"\"\"Stack a single 2-D Atari frame four times to form the initial state.\n\n    Args:\n        state: 2-D list representing the grayscale frame (height \u00d7 width).\n\n    Returns:\n        3-D list with shape (height \u00d7 width \u00d7 4) where the frame is repeated\n        along the last axis.\n    \"\"\"\n    arr = np.array(state)\n    if arr.ndim != 2:\n        raise ValueError(f'Expected a 2-D frame, got array with shape {arr.shape}')\n    stacked = np.stack([arr, arr, arr, arr], axis=-1)\n    return stacked.tolist()"}
{"task_id": 585, "completion_id": 0, "solution": "def cmp(a: object, b: object) -> int:\n    return (a > b) - (a < b)"}
{"task_id": 586, "completion_id": 0, "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef lowess_predict(x: np.ndarray, y: np.ndarray, x_query: float, window: int) -> float:\n    \"\"\"Predict a single y value using LOWESS with linear (degree-1) local fitting.\n\n    The function should perform the following steps:\n    1. Normalise x and y separately to [0, 1].\n    2. Choose *window* nearest neighbours of x_query (on the normalised x axis).\n    3. Compute tricubic weights for those neighbours.\n    4. Fit a weighted straight line through the selected points.\n    5. Predict the normalised y\u0302 at the normalised x_query, convert it back to the\n       original scale and round to 4 decimal places.\n\n    Args:\n        x (np.ndarray): 1-D array of training inputs.\n        y (np.ndarray): 1-D array of training targets (same length as x).\n        x_query (float): The x value at which to make the prediction.\n        window (int): Number of neighbours to use (2 \u2264 window \u2264 len(x)).\n\n    Returns:\n        float: The LOWESS prediction for x_query rounded to four decimals.\n    \"\"\"\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('`x` and `y` must be 1-D arrays.')\n    n = x.shape[0]\n    if n != y.shape[0]:\n        raise ValueError('`x` and `y` must have the same length.')\n    if not 2 <= window <= n:\n        raise ValueError('`window` must satisfy 2 \u2264 window \u2264 len(x).')\n    (x_min, x_max) = (x.min(), x.max())\n    x_range = x_max - x_min\n    if x_range > 0:\n        x_norm = (x - x_min) / x_range\n        xq_norm = (x_query - x_min) / x_range\n    else:\n        x_norm = np.zeros_like(x, dtype=float)\n        xq_norm = 0.0\n    (y_min, y_max) = (y.min(), y.max())\n    y_range = y_max - y_min\n    if y_range > 0:\n        y_norm = (y - y_min) / y_range\n    else:\n        y_norm = np.zeros_like(y, dtype=float)\n    dists = np.abs(x_norm - xq_norm)\n    idx_sorted = np.argsort(dists)\n    idx = idx_sorted[:window]\n    x_sel = x_norm[idx]\n    y_sel = y_norm[idx]\n    d_sel = dists[idx]\n    d_max = d_sel.max()\n    if d_max > 0:\n        r = d_sel / d_max\n        w = (1 - r ** 3) ** 3\n    else:\n        w = np.ones_like(d_sel, dtype=float)\n    W = w.sum()\n    xw_mean = np.sum(w * x_sel) / W\n    yw_mean = np.sum(w * y_sel) / W\n    denom = np.sum(w * (x_sel - xw_mean) ** 2)\n    if denom == 0:\n        b = 0.0\n    else:\n        numer = np.sum(w * (x_sel - xw_mean) * (y_sel - yw_mean))\n        b = numer / denom\n    a = yw_mean - b * xw_mean\n    yq_norm = a + b * xq_norm\n    yq = yq_norm * y_range + y_min\n    return float(np.round(yq, 4))"}
{"task_id": 587, "completion_id": 0, "solution": "import random\nfrom typing import Any, List, Tuple\ndef manage_replay_memory(operations: List[Tuple]) -> List[Any]:\n    \"\"\"Perform operations on an in-memory replay buffer.\n\n    The buffer starts out empty and is manipulated according to *operations*.\n\n    Args:\n        operations: A list of tuples describing the commands to execute. The\n            first element of each tuple is a string (\"append\", \"pop\", \"sample\",\n            or \"size\").  Additional elements contain the arguments of that\n            command.\n\n    Returns:\n        A list containing the outputs of all commands that return a value, in\n        the same order in which those commands appear in *operations*.\n    \"\"\"\n    random.seed(0)\n    buffer: List[Any] = []\n    outputs: List[Any] = []\n    for op in operations:\n        cmd = op[0]\n        if cmd == 'append':\n            (_, transition) = op\n            buffer.append(transition)\n        elif cmd == 'pop':\n            if buffer:\n                outputs.append(buffer.pop())\n            else:\n                outputs.append(None)\n        elif cmd == 'sample':\n            (_, batch_size) = op\n            if batch_size > len(buffer):\n                outputs.append([])\n            else:\n                sampled = random.sample(buffer, batch_size)\n                outputs.append(sampled)\n        elif cmd == 'size':\n            outputs.append(len(buffer))\n        else:\n            raise ValueError(f'Unsupported command: {cmd}')\n    return outputs"}
{"task_id": 588, "completion_id": 0, "solution": "from typing import Optional"}
{"task_id": 590, "completion_id": 0, "solution": "import numpy as np\ndef minesweeper_step(ground: list[list[float | int]], flags: list[list[bool]]) -> tuple[list[tuple[int, int]], list[tuple[int, int]]]:\n    \"\"\"Perform one logical deduction step on a Minesweeper board.\n\n    Returns two sorted lists of unique (row, col) tuples:\n      1. clicks     \u2013 squares that can be safely revealed.\n      2. new_flags  \u2013 squares that must be bombs (to be flagged).\n    \"\"\"\n    nrows = len(ground)\n    ncols = len(ground[0]) if nrows > 0 else 0\n    clicks = set()\n    new_flags = set()\n    for r in range(nrows):\n        for c in range(ncols):\n            val = ground[r][c]\n            if flags[r][c] or np.isnan(val):\n                continue\n            bombs = 0\n            unexplored = []\n            for dr in (-1, 0, 1):\n                for dc in (-1, 0, 1):\n                    if dr == 0 and dc == 0:\n                        continue\n                    (nr, nc) = (r + dr, c + dc)\n                    if not (0 <= nr < nrows and 0 <= nc < ncols):\n                        continue\n                    if flags[nr][nc]:\n                        bombs += 1\n                    elif np.isnan(ground[nr][nc]):\n                        unexplored.append((nr, nc))\n            if val == 0:\n                for sq in unexplored:\n                    clicks.add(sq)\n            elif val == 8:\n                for sq in unexplored:\n                    new_flags.add(sq)\n            elif bombs == val:\n                for sq in unexplored:\n                    clicks.add(sq)\n            elif len(unexplored) == val:\n                for sq in unexplored:\n                    new_flags.add(sq)\n    clicks.difference_update(new_flags)\n    clicks_list = sorted(clicks)\n    flags_list = sorted(new_flags)\n    return (clicks_list, flags_list)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    activation = np.array(x, dtype=float)\n    n_layers = len(weights)\n    for (L, layer) in enumerate(weights):\n        W = np.array(layer, dtype=float)\n        with_bias = np.concatenate(([1.0], activation))\n        z = W @ with_bias\n        if L < n_layers - 1:\n            activation = np.maximum(z, 0.0)\n        else:\n            activation = z\n    activation_rounded = np.round(activation, 4)\n    if activation_rounded.size == 1:\n        return float(activation_rounded[0])\n    else:\n        return activation_rounded.tolist()"}
{"task_id": 592, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 593, "completion_id": 0, "solution": "from copy import deepcopy\ndef deduce_mines(constraints: list[list]) -> tuple[list[str], list[str]]:\n    \"\"\"Simplify Minesweeper constraints.\n\n    You receive *constraints* as a list of 2-element lists *[variables, value]*\n    where *variables* is a list of identifiers and *value* is an int telling how\n    many of those variables hide a mine.\n\n    The function applies the logical rules (solved constraints, propagation,\n    subset rule, duplicate removal) until no new information can be obtained.\n\n    Returns a tuple (safe, mines) of two alphabetically sorted lists.\n    \"\"\"\n    cons = [[set(vars_), val] for (vars_, val) in constraints]\n    safe_vars = set()\n    mine_vars = set()\n    changed = True\n    while changed:\n        changed = False\n        for (vars_set, val) in cons:\n            if val == 0:\n                for v in vars_set:\n                    if v not in safe_vars:\n                        safe_vars.add(v)\n                        changed = True\n            if val == len(vars_set) and len(vars_set) > 0:\n                for v in vars_set:\n                    if v not in mine_vars:\n                        mine_vars.add(v)\n                        changed = True\n        if safe_vars & mine_vars:\n            overlap = safe_vars & mine_vars\n            for v in overlap:\n                mine_vars.remove(v)\n            changed = True\n        new_cons = []\n        for (vars_set, val) in cons:\n            orig_vars = vars_set\n            orig_val = val\n            vars_after_safe = orig_vars - safe_vars\n            num_mines_removed = len(orig_vars & mine_vars)\n            vars_after_all = vars_after_safe - mine_vars\n            val_after = orig_val - num_mines_removed\n            if vars_after_all != orig_vars or val_after != orig_val:\n                changed = True\n            if vars_after_all or val_after != 0:\n                new_cons.append([vars_after_all, val_after])\n        cons = new_cons\n        n = len(cons)\n        replaced = [False] * n\n        additions = []\n        for i in range(n):\n            (Si, vi) = cons[i]\n            for j in range(n):\n                if i == j or replaced[j]:\n                    continue\n                (Sj, vj) = cons[j]\n                if Si < Sj:\n                    new_set = Sj - Si\n                    new_val = vj - vi\n                    additions.append([new_set, new_val])\n                    replaced[j] = True\n        new_cons = []\n        for idx in range(n):\n            if not replaced[idx]:\n                new_cons.append(cons[idx])\n        if additions:\n            new_cons.extend(additions)\n            changed = True\n        cons = new_cons\n        seen = set()\n        unique_cons = []\n        for (vars_set, val) in cons:\n            key = (tuple(sorted(vars_set)), val)\n            if key not in seen:\n                seen.add(key)\n                unique_cons.append([vars_set, val])\n            else:\n                changed = True\n        cons = unique_cons\n    safe_list = sorted(safe_vars)\n    mine_list = sorted(mine_vars)\n    return (safe_list, mine_list)"}
{"task_id": 594, "completion_id": 0, "solution": ""}
{"task_id": 595, "completion_id": 0, "solution": ""}
{"task_id": 596, "completion_id": 0, "solution": "import numpy as np\ndef convert_maze_to_graph(maze: np.ndarray) -> dict:\n    \"\"\"Convert a binary maze to an adjacency-list representation.\n\n    You are given a 2-D NumPy array in which 1 represents a free cell and 0\n    represents a wall.  Treat every free cell as a graph vertex.  Connect two\n    vertices with an (undirected) edge if and only if the corresponding cells\n    are adjacent in the maze via the four-neighbourhood (up, down, left, right).\n\n    The function returns a dictionary mapping each free cell\u2019s coordinate\n    `(row, col)` to a **sorted** list of its adjacent free neighbours.  If the\n    maze contains no free cells, returns an empty dictionary.\n\n    Args:\n        maze: A 2-D NumPy array of 0s and 1s.\n\n    Returns:\n        A dictionary representing the adjacency list of the maze-graph.\n    \"\"\"\n    (n_rows, n_cols) = maze.shape\n    graph = {}\n    neighbours = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    for r in range(n_rows):\n        for c in range(n_cols):\n            if maze[r, c] == 1:\n                adj = []\n                for (dr, dc) in neighbours:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < n_rows and 0 <= nc < n_cols and (maze[nr, nc] == 1):\n                        adj.append((nr, nc))\n                adj.sort()\n                graph[r, c] = adj\n    return graph"}
{"task_id": 597, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef best_split_mse(X: list | np.ndarray, y: list | np.ndarray) -> list:\n    \"\"\"Return the best (feature, threshold) split for a regression tree.\n\n    A split is evaluated with the weighted mean-squared error (population\n    variance) of the two resulting groups.  Only thresholds that coincide\n    with an existing feature value are examined.\n\n    The function has to return a list `[best_feature_index, best_threshold,\n    best_mse]` where `best_mse` is rounded to 4 decimal places.\n    \"\"\"\n    X_arr = np.asarray(X, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n    (n_samples, n_features) = X_arr.shape\n    best_mse = np.inf\n    best_feat = None\n    best_thr = None\n    for j in range(n_features):\n        col = X_arr[:, j]\n        unique_vals = np.unique(col)\n        for thr in unique_vals:\n            mask = col <= thr\n            n_left = mask.sum()\n            if n_left == 0 or n_left == n_samples:\n                continue\n            y_left = y_arr[mask]\n            y_right = y_arr[~mask]\n            var_left = np.var(y_left, ddof=0)\n            var_right = np.var(y_right, ddof=0)\n            mse = n_left / n_samples * var_left + (n_samples - n_left) / n_samples * var_right\n            if mse < best_mse:\n                best_mse = mse\n                best_feat = j\n                best_thr = thr\n    best_mse_rounded = round(best_mse, 4)\n    if isinstance(best_thr, np.generic):\n        best_thr = best_thr.item()\n    return [best_feat, best_thr, best_mse_rounded]"}
{"task_id": 598, "completion_id": 0, "solution": "import numpy as np\ndef standardize(data: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"Standardise a numeric data matrix feature-wise.\n\n    The function must transform every column so that it has zero mean and unit\n    variance (z-score).  Constant columns (standard deviation 0) must be filled\n    with zeros.  Any NaN or infinite values occurring during the computation\n    have to be replaced by 0.  The result has to be rounded to 4 decimals and\n    returned as a plain Python list.\n\n    Args:\n        data: Two-dimensional list of numbers (size n_samples \u00d7 n_features).\n\n    Returns:\n        list[list[float]]: Standardised data with the same shape as *data*.\n    \"\"\"\n    if not data:\n        return []\n    arr = np.array(data, dtype=float)\n    means = arr.mean(axis=0)\n    stds = arr.std(axis=0, ddof=0)\n    stds_safe = np.where(stds == 0, 1.0, stds)\n    Z = (arr - means) / stds_safe\n    zero_std_cols = stds == 0\n    if np.any(zero_std_cols):\n        Z[:, zero_std_cols] = 0.0\n    Z = np.nan_to_num(Z, nan=0.0, posinf=0.0, neginf=0.0)\n    Z = np.round(Z, 4)\n    return Z.tolist()"}
