{"task_id": 1, "completion_id": 0, "completion": "```python\ndef matrix_dot_vector(a: list[list[int|float]], b: list[int|float]) -> list[int|float]:\n    \"\"\"\n    Compute the dot product of a matrix 'a' and a vector 'b'.\n    Returns:\n      - a list of dot products (one per row of 'a') if dimensions match\n      - -1 if the number of columns in 'a' != len(b)\n    \"\"\"\n    # If the matrix is empty, return an empty list\n    if not a:\n        return []\n    # Number of columns in the first row\n    num_cols = len(a[0])\n    # Quick dimension check: every row must have the same length,\n    # and that length must equal len(b)\n    if num_cols != len(b) or any(len(row) != num_cols for row in a):\n        return -1\n\n    # Compute the dot product for each row\n    result: list[int|float] = []\n    for row in a:\n        dot = 0\n        for x, y in zip(row, b):\n            dot += x * y\n        result.append(dot)\n\n    return result\n\n\n# Example usage and simple tests\nif __name__ == \"__main__\":\n    M1 = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    v1 = [1, 0, -1]\n    # Expected: [1*1+2*0+3*(-1), 4*1+5*0+6*(-1), 7*1+8*0+9*(-1)] = [ -2, -2, -2 ]\n    print(matrix_dot_vector(M1, v1))  # [-2, -2, -2]\n\n    # Mismatched dimensions\n    v2 = [1, 2]\n    print(matrix_dot_vector(M1, v2))  # -1\n\n    # Empty matrix\n    print(matrix_dot_vector([], [1, 2, 3]))  # []\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\n#!/usr/bin/env python3\n\"\"\"\nScript to compute the transpose of a matrix.\n\"\"\"\n\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef transpose_matrix(a: List[List[Number]]) -> List[List[Number]]:\n    \"\"\"\n    Compute and return the transpose of the given matrix `a`.\n    \n    Parameters:\n        a (List[List[Number]]): A 2D matrix with numeric entries.\n        \n    Returns:\n        List[List[Number]]: The transpose of matrix `a`.\n        \n    Raises:\n        ValueError: If the input is not a well-formed matrix\n                    (i.e., rows have differing lengths).\n    \"\"\"\n    if not a:\n        # Empty matrix -> empty transpose\n        return []\n    \n    # Ensure all rows are the same length\n    row_len = len(a[0])\n    for row in a:\n        if len(row) != row_len:\n            raise ValueError(\"All rows must have the same number of elements\")\n    \n    # Transpose via unpacking rows into zip\n    return [list(col) for col in zip(*a)]\n\n\ndef main():\n    # Example usage:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    print(\"Original matrix:\")\n    for row in matrix:\n        print(row)\n    \n    transposed = transpose_matrix(matrix)\n    \n    print(\"\\nTransposed matrix:\")\n    for row in transposed:\n        print(row)\n\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef reshape_matrix(a: list[list[int|float]], new_shape: tuple[int, int]) -> list[list[int|float]]:\n    \"\"\"\n    Reshapes the input matrix `a` to the shape `new_shape`.\n    If the total number of elements doesn't match, returns an empty list.\n    \"\"\"\n    try:\n        arr = np.array(a)\n        # Total elements must match\n        if arr.size != new_shape[0] * new_shape[1]:\n            return []\n        # Perform reshape and convert back to Python list\n        reshaped = arr.reshape(new_shape)\n        return reshaped.tolist()\n    except Exception:\n        # In case of malformed input (e.g. ragged nested lists), return []\n        return []\n\nif __name__ == \"__main__\":\n    # Example usages / test cases\n    matrix1 = [\n        [1, 2, 3],\n        [4, 5, 6]\n    ]\n    # valid reshape to 3x2\n    print(\"Original:\", matrix1)\n    print(\"Reshaped to (3,2):\", reshape_matrix(matrix1, (3, 2)))\n    # invalid reshape (size mismatch)\n    print(\"Reshaped to (4,2):\", reshape_matrix(matrix1, (4, 2)))\n    # empty matrix case\n    print(\"Empty -> (0,0):\", reshape_matrix([], (0, 0)))\n    # float values\n    matrix2 = [[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]]\n    print(\"Float matrix:\", matrix2)\n    print(\"Reshaped to (2,3):\", reshape_matrix(matrix2, (2, 3)))\n```"}
{"task_id": 4, "completion_id": 0, "completion": "```python\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n\n    Parameters:\n        matrix (list of list of float): The input matrix.\n        mode (str): 'row' to compute mean across rows,\n                    'column' to compute mean across columns.\n\n    Returns:\n        list of float: A list of means for each row or each column.\n\n    Raises:\n        ValueError: If mode is not 'row' or 'column'.\n    \"\"\"\n    if mode not in ('row', 'column'):\n        raise ValueError(\"mode must be 'row' or 'column'\")\n\n    # If matrix is empty, return empty list\n    if not matrix:\n        return []\n\n    if mode == 'row':\n        # Mean of each row\n        means = []\n        for row in matrix:\n            if row:\n                means.append(sum(row) / len(row))\n            else:\n                means.append(float('nan'))\n        return means\n\n    else:  # mode == 'column'\n        # Determine the maximum number of columns in any row\n        max_cols = max((len(row) for row in matrix), default=0)\n        means = []\n        for col_idx in range(max_cols):\n            # Collect all values that exist in this column index\n            col_vals = [row[col_idx] for row in matrix if col_idx < len(row)]\n            if col_vals:\n                means.append(sum(col_vals) / len(col_vals))\n            else:\n                means.append(float('nan'))\n        return means\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n\n    # 1) Rectangular matrix\n    matrix1 = [\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.0]\n    ]\n    print(\"Row means of matrix1:\", calculate_matrix_mean(matrix1, \"row\"))\n    print(\"Column means of matrix1:\", calculate_matrix_mean(matrix1, \"column\"))\n\n    # 2) Ragged (non-rectangular) matrix\n    matrix2 = [\n        [10.0, 20.0, 30.0],\n        [40.0, 50.0],\n        [60.0]\n    ]\n    print(\"Row means of matrix2:\", calculate_matrix_mean(matrix2, \"row\"))\n    print(\"Column means of matrix2:\", calculate_matrix_mean(matrix2, \"column\"))\n```"}
{"task_id": 5, "completion_id": 0, "completion": "```python\nfrom typing import Union\n\ndef scalar_multiply(\n    matrix: list[list[int | float]], \n    scalar: int | float\n) -> list[list[int | float]]:\n    \"\"\"\n    Multiply each element of the matrix by the given scalar.\n    \"\"\"\n    return [\n        [element * scalar for element in row]\n        for row in matrix\n    ]\n\ndef main():\n    # Example usage\n    matrix = [\n        [1, 2, 3],\n        [4.5, 5.5, 6.5],\n        [7, 8, 9]\n    ]\n    scalar = 2.5\n\n    result = scalar_multiply(matrix, scalar)\n\n    print(\"Original matrix:\")\n    for row in matrix:\n        print(row)\n\n    print(f\"\\nScalar: {scalar}\\n\")\n\n    print(\"Resultant matrix:\")\n    for row in result:\n        print(row)\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": 6, "completion_id": 0, "completion": "```python\nimport math\n\ndef calculate_eigenvalues(matrix: list[list[float|int]]) -> list[float]:\n    \"\"\"\n    Calculate and return the eigenvalues of a 2x2 matrix, sorted from highest to lowest.\n    Raises:\n        ValueError: if the input is not a 2x2 matrix or if the eigenvalues are complex.\n    \"\"\"\n    # Validate shape\n    if (\n        not isinstance(matrix, list)\n        or len(matrix) != 2\n        or any(not isinstance(row, list) or len(row) != 2 for row in matrix)\n    ):\n        raise ValueError(\"Input must be a 2x2 matrix (list of two lists of length 2).\")\n\n    a, b = matrix[0]\n    c, d = matrix[1]\n\n    # Calculate trace and determinant\n    trace = a + d\n    det   = a * d - b * c\n\n    # Discriminant of the characteristic polynomial\n    disc = trace * trace - 4 * det\n    if disc < 0:\n        raise ValueError(\"This matrix has complex eigenvalues; only real eigenvalues are supported.\")\n\n    sqrt_disc = math.sqrt(disc)\n\n    # Eigenvalues formula for 2x2\n    \u03bb1 = (trace + sqrt_disc) / 2\n    \u03bb2 = (trace - sqrt_disc) / 2\n\n    # Sort from highest to lowest\n    return sorted([\u03bb1, \u03bb2], reverse=True)\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    matrices = [\n        [[4, 1], [2, 3]],\n        [[1, 2], [3, 4]],\n        [[5, 5], [5, 5]]\n    ]\n\n    for m in matrices:\n        try:\n            vals = calculate_eigenvalues(m)\n            print(f\"Matrix: {m} -> Eigenvalues: {vals}\")\n        except ValueError as e:\n            print(f\"Matrix: {m} -> Error: {e}\")\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef transform_matrix(A: list[list[int|float]],\n                     T: list[list[int|float]],\n                     S: list[list[int|float]]) -> list[list[int|float]]:\n    \"\"\"\n    Compute T^{-1} * A * S if T and S are invertible and dimensions match.\n    Return the resulting matrix rounded to 4 decimal places as a Python list of lists.\n    If T or S is non-invertible or dimensions are incompatible, return -1.\n    \"\"\"\n    try:\n        A_mat = np.array(A, dtype=float)\n        T_mat = np.array(T, dtype=float)\n        S_mat = np.array(S, dtype=float)\n    except Exception:\n        # failed to build numpy arrays\n        return -1\n\n    # Check T and S are square\n    if T_mat.ndim != 2 or S_mat.ndim != 2:\n        return -1\n    if T_mat.shape[0] != T_mat.shape[1] or S_mat.shape[0] != S_mat.shape[1]:\n        return -1\n\n    # Check A dimensions: T is p\u00d7p, A must be p\u00d7q, S must be q\u00d7q\n    p = T_mat.shape[0]\n    a_dim0, a_dim1 = A_mat.shape\n    q = S_mat.shape[0]\n    if a_dim0 != p or a_dim1 != q:\n        return -1\n\n    # Check invertibility by determinant (or catch in inv)\n    if np.isclose(np.linalg.det(T_mat), 0) or np.isclose(np.linalg.det(S_mat), 0):\n        return -1\n\n    try:\n        T_inv = np.linalg.inv(T_mat)\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Perform the transformation\n    result = T_inv @ A_mat @ S_mat\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(result, 4)\n    return result.tolist()\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    A = [[1, 2, 3],\n         [4, 5, 6]]\n    T = [[2, 0],\n         [0, 3]]\n    S = [[1, 0, 0],\n         [0, 1, 1],\n         [0, 1, 2]]\n\n    transformed = transform_matrix(A, T, S)\n    print(transformed)\n```"}
{"task_id": 8, "completion_id": 0, "completion": "```python\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]] | None:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n    The matrix is given as [[a, b], [c, d]].\n    Returns the inverse [[d, -b], [-c, a]] / (a*d - b*c) if invertible,\n    otherwise returns None.\n    \"\"\"\n    if (\n        not isinstance(matrix, list)\n        or len(matrix) != 2\n        or any(not isinstance(row, list) or len(row) != 2 for row in matrix)\n    ):\n        raise ValueError(\"Input must be a 2x2 matrix represented as a list of two lists of length 2.\")\n\n    a, b = matrix[0]\n    c, d = matrix[1]\n\n    det = a * d - b * c\n    if det == 0:\n        return None\n\n    inv_det = 1.0 / det\n    return [\n        [ d * inv_det, -b * inv_det],\n        [-c * inv_det,  a * inv_det],\n    ]\n\n\nif __name__ == \"__main__\":\n    # Example 1: invertible matrix\n    m1 = [[4.0, 7.0],\n          [2.0, 6.0]]\n    inv1 = inverse_2x2(m1)\n    print(f\"Matrix: {m1}\")\n    print(f\"Inverse: {inv1}\\n\")\n\n    # Example 2: singular (non-invertible) matrix\n    m2 = [[1.0, 2.0],\n          [2.0, 4.0]]\n    inv2 = inverse_2x2(m2)\n    print(f\"Matrix: {m2}\")\n    print(f\"Inverse: {inv2}  # Expect None\")\n```\n"}
{"task_id": 9, "completion_id": 0, "completion": "```python\n#!/usr/bin/env python3\nfrom typing import List, Union\n\nNumber = Union[int, float]\n\ndef matrixmul(a: List[List[Number]], b: List[List[Number]]) -> List[List[Number]] | int:\n    \"\"\"\n    Multiply two matrices a and b.\n    If they cannot be multiplied (incompatible dimensions or malformed),\n    return -1.\n\n    Args:\n        a: Left matrix as a list of rows.\n        b: Right matrix as a list of rows.\n\n    Returns:\n        The product matrix as a list of lists, or -1 if multiplication is not possible.\n    \"\"\"\n    # Validate that both a and b are non-empty\n    if not a or not b:\n        return -1\n\n    # Number of rows and columns\n    n, m = len(a), len(a[0])\n    p, q = len(b), len(b[0])\n\n    # All rows in a must have the same length m\n    if any(len(row) != m for row in a):\n        return -1\n    # All rows in b must have the same length q\n    if any(len(row) != q for row in b):\n        return -1\n\n    # Check matrix multiplication compatibility: (n x m) * (p x q) => m must equal p\n    if m != p:\n        return -1\n\n    # Initialize the result matrix with zeros (n rows, q columns)\n    result: List[List[Number]] = [[0 for _ in range(q)] for _ in range(n)]\n\n    # Perform the multiplication\n    for i in range(n):\n        for j in range(q):\n            cell_sum: Number = 0\n            for k in range(m):\n                cell_sum += a[i][k] * b[k][j]\n            result[i][j] = cell_sum\n\n    return result\n\nif __name__ == \"__main__\":\n    # Example usage and tests\n    A = [\n        [1, 2, 3],\n        [4, 5, 6]\n    ]\n    B = [\n        [7,  8],\n        [9, 10],\n        [11, 12]\n    ]\n    C = [\n        [1, 2],\n        [3, 4],\n        [5, 6]\n    ]\n\n    print(\"A x B =\")\n    print(matrixmul(A, B))  # Expected [[58, 64], [139, 154]]\n\n    print(\"B x A =\")\n    print(matrixmul(B, A))  # Expected [[ 39,  54,  69], [ 49,  68,  87], [ 59,  82, 105]]\n\n    print(\"A x C =\")\n    print(matrixmul(A, C))  # Incompatible dimensions: returns -1\n```"}
{"task_id": 10, "completion_id": 0, "completion": "```python\nfrom typing import List\n\n\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculate the sample covariance matrix for a set of feature vectors.\n\n    Args:\n        vectors: A list of N feature vectors, each of length M (observations).\n                 Example: [[x1, x2, ..., xM],\n                           [y1, y2, ..., yM],\n                           ...]\n    Returns:\n        An N x N covariance matrix as a list of lists, where\n        cov_mat[i][j] = covariance(vectors[i], vectors[j]) using the\n        sample covariance formula (dividing by M-1).\n    Raises:\n        ValueError: if input is empty, vectors have differing lengths,\n                    or fewer than 2 observations.\n    \"\"\"\n    if not vectors:\n        raise ValueError(\"Input list 'vectors' must not be empty.\")\n\n    num_features = len(vectors)\n    num_obs = len(vectors[0])\n\n    if num_obs < 2:\n        raise ValueError(\"Each feature vector must contain at least two observations.\")\n\n    for vec in vectors:\n        if len(vec) != num_obs:\n            raise ValueError(\"All feature vectors must have the same number of observations.\")\n\n    # Compute means\n    means = [sum(vec) / num_obs for vec in vectors]\n\n    # Prepare covariance matrix container\n    cov_matrix: List[List[float]] = [\n        [0.0] * num_features for _ in range(num_features)\n    ]\n\n    # Compute covariances\n    for i in range(num_features):\n        for j in range(i, num_features):\n            cov = 0.0\n            for k in range(num_obs):\n                cov += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            # Use sample covariance (divide by num_obs - 1)\n            cov /= (num_obs - 1)\n            cov_matrix[i][j] = cov\n            cov_matrix[j][i] = cov  # symmetry\n\n    return cov_matrix\n\n\n# -------------------------------\n# Test cases to verify correctness\n# -------------------------------\n\ndef _almost_equal(a: float, b: float, eps: float = 1e-8) -> bool:\n    return abs(a - b) < eps\n\ndef run_tests():\n    # Test 1: Simple 2-vector example\n    # X = [1, 2, 3], Y = [4, 5, 6]\n    # mean(X)=2, mean(Y)=5\n    # var(X)=((1-2)^2+(2-2)^2+(3-2)^2)/(3-1)=2/2=1\n    # var(Y)=1, cov(X,Y)=((1-2)*(4-5)+(2-2)*(5-5)+(3-2)*(6-5))/(3-1)=2/2=1\n    vecs1 = [\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0]\n    ]\n    cov1 = calculate_covariance_matrix(vecs1)\n    expected1 = [[1.0, 1.0],\n                 [1.0, 1.0]]\n    assert all(_almost_equal(cov1[i][j], expected1[i][j])\n               for i in range(2) for j in range(2)), f\"Test1 failed: {cov1}\"\n\n    # Test 2: Three features, zero covariance for independent features\n    # A = [1, 2, 3, 4], B = [2, 2, 2, 2] (constant), C = [4, 3, 2, 1]\n    # B is constant => variance=0, covariance with others=0\n    # A and C are perfectly negatively correlated => cov < 0\n    vecs2 = [\n        [1.0, 2.0, 3.0, 4.0],\n        [2.0, 2.0, 2.0, 2.0],\n        [4.0, 3.0, 2.0, 1.0]\n    ]\n    cov2 = calculate_covariance_matrix(vecs2)\n    # Manually compute var(A) = var(C) = ((1.5^2 + 0.5^2 + 0.5^2 + 1.5^2)/3) = (2.25+0.25+0.25+2.25)/3 = 5/3\n    # cov(A,C) = ((1-2.5)*(4-2.5) + (2-2.5)*(3-2.5) + (3-2.5)*(2-2.5) + (4-2.5)*(1-2.5)) / 3\n    #           = ((-1.5*1.5) + (-0.5*0.5) + (0.5*-0.5) + (1.5*-1.5)) / 3 = (-2.25 -0.25 -0.25 -2.25)/3 = -5/3\n    expected2 = [\n        [5/3,    0.0, -5/3],\n        [0.0,    0.0,  0.0],\n        [-5/3,   0.0,  5/3]\n    ]\n    for i in range(3):\n        for j in range(3):\n            assert _almost_equal(cov2[i][j], expected2[i][j]), f\"Test2 failed at ({i},{j}): got {cov2[i][j]}, expected {expected2[i][j]}\"\n\n    # Test 3: Single feature (variance only)\n    vecs3 = [[10.0, 12.0, 23.0, 23.0, 16.0]]\n    cov3 = calculate_covariance_matrix(vecs3)\n    # variance = sum((xi - mean)^2)/(n-1)\n    mean3 = sum(vecs3[0]) / len(vecs3[0])\n    var3 = sum((x - mean3) ** 2 for x in vecs3[0]) / (len(vecs3[0]) - 1)\n    assert _almost_equal(cov3[0][0], var3), f\"Test3 failed: got {cov3[0][0]}, expected {var3}\"\n\n    print(\"All tests passed!\")\n\n\nif __name__ == \"__main__\":\n    run_tests()\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solve the linear system Ax = b using the Jacobi iterative method.\n    Iterate n times, rounding each intermediate solution to 4 decimal places.\n    Return the final approximation as a Python list.\n    \"\"\"\n    # Ensure b is a 1-D array\n    b = b.flatten()\n    \n    # Extract diagonal and remainder of A\n    D = np.diag(A)\n    R = A - np.diagflat(D)\n    \n    # Initial guess (zeros)\n    x = np.zeros_like(b, dtype=float)\n    \n    for _ in range(n):\n        # Jacobi update: x_new = (b - R x) / D\n        x_new = (b - R.dot(x)) / D\n        # Round to 4 decimal places\n        x_new = np.round(x_new, 4)\n        x = x_new\n    \n    return x.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage:\n    # Solve\n    #   4x1 +  x2 + 2x3 = 4\n    #   3x1 + 5x2 +  x3 = 7\n    #    x1 +  x2 + 3x3 = 3\n    A = np.array([[4.0, 1.0, 2.0],\n                  [3.0, 5.0, 1.0],\n                  [1.0, 1.0, 3.0]])\n    b = np.array([4.0, 7.0, 3.0])\n    iterations = 10\n\n    solution = solve_jacobi(A, b, iterations)\n    print(f\"Approximate solution after {iterations} iterations:\", solution)\n```"}
{"task_id": 12, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the SVD of a real 2x2 matrix A using the Jacobi method.\n    Returns (U, \u03a3, Vt), where A \u2248 U @ \u03a3 @ Vt, and all entries are rounded\n    to 4 decimal places.\n    \"\"\"\n    assert A.shape == (2, 2), \"Input must be a 2x2 matrix.\"\n    # Form the symmetric matrix A^T A\n    M = A.T @ A\n    V = np.eye(2)\n    tol = 1e-10\n    max_iter = 100\n\n    # Jacobi rotations to diagonalize M\n    for _ in range(max_iter):\n        if abs(M[0, 1]) < tol:\n            break\n        # Compute the rotation angle\n        phi = 0.5 * np.arctan2(2 * M[0, 1], M[0, 0] - M[1, 1])\n        c = np.cos(phi)\n        s = np.sin(phi)\n        R = np.array([[c, -s],\n                      [s,  c]])\n        # Apply rotation: M \u2190 R^T M R, accumulate V \u2190 V R\n        M = R.T @ M @ R\n        V = V @ R\n\n    # The diagonal of M now holds the squared singular values\n    sigma1 = np.sqrt(max(M[0, 0], 0.0))\n    sigma2 = np.sqrt(max(M[1, 1], 0.0))\n\n    # Sort singular values in descending order\n    if sigma1 < sigma2:\n        sigma1, sigma2 = sigma2, sigma1\n        V = V[:, [1, 0]]\n\n    # Build \u03a3\n    Sigma = np.diag([sigma1, sigma2])\n\n    # Compute U = A V \u03a3^{-1}\n    U = A @ V\n    if sigma1 > tol:\n        U[:, 0] /= sigma1\n    if sigma2 > tol:\n        U[:, 1] /= sigma2\n\n    # Round all outputs to 4 decimal places\n    U = np.round(U, 4)\n    Sigma = np.round(Sigma, 4)\n    Vt = np.round(V.T, 4)\n\n    return U, Sigma, Vt\n\n# Example usage\nif __name__ == \"__main__\":\n    A = np.array([[3.0, 1.0],\n                  [0.0, 2.0]])\n    U, S, Vt = svd_2x2_singular_values(A)\n    print(\"A:\")\n    print(A)\n    print(\"U:\")\n    print(U)\n    print(\"\u03a3:\")\n    print(S)\n    print(\"V\u1d40:\")\n    print(Vt)\n    # Verify reconstruction\n    print(\"Reconstructed A = U @ \u03a3 @ V\u1d40:\")\n    print(np.round(U @ S @ Vt, 4))\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\ndef determinant_4x4(matrix: list[list[int|float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's expansion (recursive).\n    :param matrix: 4x4 matrix represented as a list of 4 lists, each of length 4.\n    :return: Determinant of the matrix as a float.\n    \"\"\"\n    # Validate input dimensions\n    if len(matrix) != 4 or any(len(row) != 4 for row in matrix):\n        raise ValueError(\"Input must be a 4x4 matrix.\")\n\n    def det(mat: list[list[int|float]]) -> float:\n        \"\"\"\n        Recursive helper to compute the determinant of an n x n matrix.\n        \"\"\"\n        n = len(mat)\n        # Base cases\n        if n == 1:\n            return mat[0][0]\n        if n == 2:\n            return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]\n\n        total = 0.0\n        # Expand along the first row\n        for col in range(n):\n            # Sign factor for cofactor\n            sign = -1 if col % 2 else 1\n            # Build the minor by excluding row 0 and column col\n            minor = [row[:col] + row[col + 1:] for row in mat[1:]]\n            cofactor = sign * mat[0][col]\n            total += cofactor * det(minor)\n        return total\n\n    # Compute and return the 4x4 determinant\n    return det(matrix)\n\n\n# Example usage and simple test\nif __name__ == \"__main__\":\n    mat = [\n        [3, 2, -1, 4],\n        [2, 1,  5, 7],\n        [0, 5,  2, -6],\n        [1, 2, -1, 1]\n    ]\n    print(f\"Determinant of the 4x4 matrix is: {determinant_4x4(mat)}\")\n```\n\nExplanation:\n1. We define `determinant_4x4` which checks the matrix is 4x4.\n2. A nested helper `det` handles the general \\(n\\times n\\) determinant recursively:\n   - Base cases for \\(1\\times1\\) and \\(2\\times2\\).\n   - Otherwise, performs Laplace expansion along the first row.\n3. Cofactors are built by removing the first row and the current column.\n4. Finally, `determinant_4x4` calls `det` on the original matrix and returns the result."}
{"task_id": 14, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n    Args:\n        X: A list of n samples, each sample is a list of m features.\n        y: A list of n target values.\n    Returns:\n        A list of m+1 coefficients (theta_0 is the intercept), rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n\n    # Number of samples\n    n_samples = X_arr.shape[0]\n\n    # Add intercept term (column of ones) to X\n    intercept = np.ones((n_samples, 1), dtype=float)\n    X_design = np.hstack((intercept, X_arr))\n\n    # Compute theta = (X^T X)^{-1} X^T y\n    XtX = X_design.T.dot(X_design)\n    XtX_inv = np.linalg.inv(XtX)\n    XtY = X_design.T.dot(y_arr)\n    theta = XtX_inv.dot(XtY)\n\n    # Round to 4 decimal places and return as a Python list\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    # Here y = 2*x + 1, so we expect [intercept=1.0, slope=2.0]\n    X_example = [[1], [2], [3], [4], [5]]\n    y_example = [3, 5, 7, 9, 11]\n\n    coeffs = linear_regression_normal_equation(X_example, y_example)\n    print(\"Learned coefficients:\", coeffs)\n```"}
{"task_id": 15, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gradient_descent(X: np.ndarray, \n                                       y: np.ndarray, \n                                       alpha: float, \n                                       iterations: int) -> np.ndarray:\n    \"\"\"\n    Performs linear regression using gradient descent.\n    \n    Parameters:\n    X           -- Feature matrix including a column of ones, shape (m, n)\n    y           -- Target vector, shape (m,) or (m,1)\n    alpha       -- Learning rate\n    iterations  -- Number of iterations for gradient descent\n    \n    Returns:\n    List of coefficients (\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8\u2099\u208b\u2081) rounded to 4 decimal places\n    \"\"\"\n    m = y.shape[0]                       # number of training examples\n    # ensure y is a column vector\n    y = y.reshape(m, 1)\n    # initialize theta to zeros (n parameters)\n    theta = np.zeros((X.shape[1], 1))\n\n    for _ in range(iterations):\n        predictions = X.dot(theta)             # shape (m,1)\n        errors = predictions - y               # shape (m,1)\n        gradient = (X.T.dot(errors)) / m       # shape (n,1)\n        theta = theta - alpha * gradient       # update parameters\n\n    theta = np.round(theta, 4)                # round to 4 decimal places\n    return theta.reshape(-1).tolist()         # convert to flat list\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data: housing prices vs. size\n    X = np.array([\n        [1, 2104],\n        [1, 1600],\n        [1, 2400],\n        [1, 1416],\n        [1, 3000]\n    ], dtype=float)\n    y = np.array([399900, 329900, 369000, 232000, 539900], dtype=float)\n    \n    alpha = 0.00000001\n    iterations = 1000\n    \n    coeffs = linear_regression_gradient_descent(X, y, alpha, iterations)\n    print(\"Learned coefficients:\", coeffs)\n```"}
{"task_id": 16, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Perform feature scaling on the input data.\n    Returns:\n      - standardized_data: each feature has zero mean and unit variance\n      - normalized_data: each feature scaled to [0, 1]\n    Both outputs are Python lists, rounded to 4 decimal places.\n    \"\"\"\n    # Compute column-wise mean and standard deviation\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0)\n    # Avoid division by zero for constant columns\n    stds_corrected = np.where(stds == 0, 1, stds)\n\n    # Standardization: (x - mean) / std\n    standardized = (data - means) / stds_corrected\n    standardized = np.round(standardized, 4)\n\n    # Compute column-wise min and max\n    mins = np.min(data, axis=0)\n    maxs = np.max(data, axis=0)\n    # Avoid division by zero for constant columns\n    ranges = np.where(maxs - mins == 0, 1, maxs - mins)\n\n    # Min-max normalization: (x - min) / (max - min)\n    normalized = (data - mins) / ranges\n    normalized = np.round(normalized, 4)\n\n    # Convert to Python lists\n    return standardized.tolist(), normalized.tolist()\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    sample_data = np.array([\n        [ 1.0, 200.0,   3.5],\n        [ 2.0, 150.0,   4.5],\n        [ 3.0, 300.0,   6.0],\n        [ 4.0, 250.0,   5.0]\n    ])\n\n    std_data, norm_data = feature_scaling(sample_data)\n    print(\"Standardized Data:\")\n    for row in std_data:\n        print(row)\n    print(\"\\nMin-Max Normalized Data:\")\n    for row in norm_data:\n        print(row)\n```"}
{"task_id": 17, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_means_clustering(\n    points: list[tuple[float, float]],\n    k: int,\n    initial_centroids: list[tuple[float, float]],\n    max_iterations: int\n) -> list[tuple[float, float]]:\n    \"\"\"\n    Perform k-Means clustering.\n\n    Args:\n        points: List of (x, y) points.\n        k: Number of clusters.\n        initial_centroids: List of k initial centroids as (x, y).\n        max_iterations: Maximum number of iterations.\n\n    Returns:\n        List of k final centroids as (x, y), rounded to 4 decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays\n    X = np.array(points, dtype=float)            # shape: (n_points, 2)\n    centroids = np.array(initial_centroids, dtype=float)  # shape: (k, 2)\n\n    n_points = X.shape[0]\n\n    for iteration in range(max_iterations):\n        # 1) Assign each point to the nearest centroid\n        #    Compute squared distances from points to centroids\n        #    distances shape: (n_points, k)\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        labels = np.argmin(distances, axis=1)  # shape: (n_points,)\n\n        # 2) Compute new centroids\n        new_centroids = np.zeros_like(centroids)\n        for cluster_idx in range(k):\n            members = X[labels == cluster_idx]\n            if len(members) > 0:\n                new_centroids[cluster_idx] = members.mean(axis=0)\n            else:\n                # If a cluster has no members, leave its centroid unchanged\n                new_centroids[cluster_idx] = centroids[cluster_idx]\n\n        # 3) Check for convergence (if centroids do not change within tolerance)\n        if np.allclose(new_centroids, centroids, atol=1e-4):\n            centroids = new_centroids\n            break\n\n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places and convert to list of tuples\n    centroids = np.round(centroids, 4)\n    return [tuple(c) for c in centroids]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample 2D points\n    pts = [\n        (1.0, 2.0), (1.5, 1.8), (5.0, 8.0),\n        (8.0, 8.0), (1.0, 0.6), (9.0, 11.0),\n        (8.0, 2.0), (10.0, 2.0), (9.0, 3.0)\n    ]\n    k = 3\n    initial_centers = [(1.0, 1.0), (5.0, 5.0), (9.0, 9.0)]\n    max_iters = 100\n\n    final_centroids = k_means_clustering(pts, k, initial_centers, max_iters)\n    print(\"Final centroids:\", final_centroids)\n```"}
{"task_id": 18, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef k_fold_cross_validation(X: np.ndarray,\n                            y: np.ndarray,\n                            k: int = 5,\n                            shuffle: bool = True,\n                            random_seed: int = None):\n    \"\"\"\n    Generate train/test indices for K-Fold Cross-Validation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Target vector of shape (n_samples,).\n    k : int, default=5\n        Number of folds.\n    shuffle : bool, default=True\n        Whether to shuffle the data before splitting into batches.\n    random_seed : int, optional\n        If shuffle is True, the seed for the random number generator.\n\n    Returns\n    -------\n    folds : list of tuples\n        A list of length k, where each element is a tuple\n        (train_indices, test_indices). Each is a 1D numpy array.\n    \"\"\"\n    n_samples = X.shape[0]\n    if n_samples != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples.\")\n\n    if k < 2 or k > n_samples:\n        raise ValueError(\"k must be >= 2 and <= number of samples.\")\n\n    # Generate array of indices\n    indices = np.arange(n_samples)\n\n    # Optionally shuffle\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(indices)\n\n    # Split indices into k approximately equal folds\n    folds = np.array_split(indices, k)\n\n    # Build train/test index pairs\n    cv_indices = []\n    for i in range(k):\n        test_idx = folds[i]\n        train_idx = np.hstack([folds[j] for j in range(k) if j != i])\n        cv_indices.append((train_idx, test_idx))\n\n    return cv_indices\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    # Create dummy data\n    X = np.arange(20).reshape(20, 1)\n    y = np.arange(20)\n\n    # Get 5-fold splits\n    splits = k_fold_cross_validation(X, y, k=5, shuffle=True, random_seed=42)\n\n    # Display the splits\n    for fold_num, (train_idx, test_idx) in enumerate(splits, start=1):\n        print(f\"Fold {fold_num}\")\n        print(\"  Train indices:\", train_idx)\n        print(\"  Test indices: \", test_idx)\n        print()\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform PCA on the given data and return the top k principal components.\n    \n    Parameters:\n    - data: 2D NumPy array (n_samples x n_features)\n    - k: number of principal components to return\n    \n    Returns:\n    - A list of k principal components, each of length n_features,\n      rounded to 4 decimal places.\n    \"\"\"\n    # 1. Standardize the data (zero mean, unit variance)\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)\n    data_std = (data - mean) / std\n\n    # 2. Compute the covariance matrix\n    cov_matrix = np.cov(data_std, rowvar=False)\n\n    # 3. Compute eigenvalues and eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # 4. Sort eigenvalues (and corresponding eigenvectors) in descending order\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    eigenvectors_sorted = eigenvectors[:, sorted_idx]\n\n    # 5. Select the top k eigenvectors (principal components)\n    pcs = eigenvectors_sorted[:, :k]\n\n    # 6. Round results to 4 decimal places and convert to nested lists\n    pcs_rounded = np.round(pcs, 4).tolist()\n\n    return pcs_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data: 5 samples, 3 features\n    X = np.array([\n        [2.5, 2.4, 1.2],\n        [0.5, 0.7, 0.3],\n        [2.2, 2.9, 1.4],\n        [1.9, 2.2, 1.1],\n        [3.1, 3.0, 1.5]\n    ])\n\n    top_k = 2\n    principal_components = pca(X, top_k)\n    print(f\"Top {top_k} principal components:\")\n    for idx, comp in enumerate(principal_components, start=1):\n        print(f\"PC{idx}: {comp}\")\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learn a decision tree using recursive binary splitting based\n    on entropy and information gain.\n    \n    Returns a nested dictionary representing the tree:\n    - If node is leaf: {'label': class_label}\n    - If internal node: {'attr': attribute_name, 'nodes': {value1: subtree1, ...}}\n    \"\"\"\n\n    def plurality_value(exs):\n        \"\"\"Return the most common target value among examples.\"\"\"\n        counts = Counter(e[target_attr] for e in exs)\n        return counts.most_common(1)[0][0] if counts else None\n\n    def entropy(exs):\n        \"\"\"Compute the entropy of the target attribute in examples.\"\"\"\n        total = len(exs)\n        if total == 0:\n            return 0\n        counts = Counter(e[target_attr] for e in exs)\n        ent = 0.0\n        for count in counts.values():\n            p = count / total\n            ent -= p * math.log2(p)\n        return ent\n\n    def information_gain(exs, attr):\n        \"\"\"Compute information gain of splitting exs on attribute attr.\"\"\"\n        base_ent = entropy(exs)\n        total = len(exs)\n        # partition by each possible value of attr\n        subsets = {}\n        for e in exs:\n            subsets.setdefault(e[attr], []).append(e)\n        # weighted sum of subset entropies\n        subset_ent = sum((len(sub) / total) * entropy(sub) for sub in subsets.values())\n        return base_ent - subset_ent\n\n    def dt(exs, attrs, parent_exs):\n        \"\"\"\n        The recursive decision tree learner.\n        exs: current examples\n        attrs: remaining attributes\n        parent_exs: examples at parent node (for plurality in case exs is empty)\n        \"\"\"\n        # If no examples, return plurality value of parent examples\n        if not exs:\n            return {'label': plurality_value(parent_exs)}\n\n        # If all examples have same classification, return that label\n        target_vals = [e[target_attr] for e in exs]\n        if target_vals.count(target_vals[0]) == len(target_vals):\n            return {'label': target_vals[0]}\n\n        # If no more attributes to split, return plurality value of current examples\n        if not attrs:\n            return {'label': plurality_value(exs)}\n\n        # Otherwise, choose the attribute with highest information gain\n        gains = [(information_gain(exs, a), a) for a in attrs]\n        _, best_attr = max(gains, key=lambda x: x[0])\n\n        # Create a decision node\n        tree = {'attr': best_attr, 'nodes': {}}\n\n        # For each possible value of the best attribute, build a subtree\n        values = set(e[best_attr] for e in exs)\n        for v in values:\n            subset = [e for e in exs if e[best_attr] == v]\n            # Recurse without the chosen attribute\n            subtree = dt(subset, [a for a in attrs if a != best_attr], exs)\n            tree['nodes'][v] = subtree\n\n        return tree\n\n    # Start recursion; parent_examples initially = the full set\n    return dt(examples, attributes, examples)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple dataset: PlayTennis\n    data = [\n        {'Outlook': 'Sunny', 'Temperature': 'Hot',  'Humidity': 'High',    'Wind': 'Weak',   'Play': 'No'},\n        {'Outlook': 'Sunny', 'Temperature': 'Hot',  'Humidity': 'High',    'Wind': 'Strong', 'Play': 'No'},\n        {'Outlook': 'Overcast', 'Temperature': 'Hot','Humidity': 'High',    'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Rain',  'Temperature': 'Mild','Humidity': 'High',    'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Rain',  'Temperature': 'Cool','Humidity': 'Normal',  'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Rain',  'Temperature': 'Cool','Humidity': 'Normal',  'Wind': 'Strong', 'Play': 'No'},\n        {'Outlook': 'Overcast','Temperature': 'Cool','Humidity': 'Normal', 'Wind': 'Strong','Play': 'Yes'},\n        {'Outlook': 'Sunny', 'Temperature': 'Mild','Humidity': 'High',    'Wind': 'Weak',   'Play': 'No'},\n        {'Outlook': 'Sunny', 'Temperature': 'Cool','Humidity': 'Normal',  'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Rain',  'Temperature': 'Mild','Humidity': 'Normal',  'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Sunny', 'Temperature': 'Mild','Humidity': 'Normal',  'Wind': 'Strong','Play': 'Yes'},\n        {'Outlook': 'Overcast','Temperature': 'Mild','Humidity': 'High',   'Wind': 'Strong','Play': 'Yes'},\n        {'Outlook': 'Overcast','Temperature': 'Hot','Humidity': 'Normal',  'Wind': 'Weak',   'Play': 'Yes'},\n        {'Outlook': 'Rain',  'Temperature': 'Mild','Humidity': 'High',    'Wind': 'Strong','Play': 'No'},\n    ]\n    attrs = ['Outlook', 'Temperature', 'Humidity', 'Wind']\n    tree = learn_decision_tree(data, attrs, 'Play')\n    import pprint\n    pprint.pprint(tree, width=40)\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pegasos_kernel_svm(data: np.ndarray,\n                       labels: np.ndarray,\n                       kernel='linear',\n                       lambda_val=0.01,\n                       iterations=100,\n                       sigma=1.0):\n    \"\"\"\n    Deterministic Pegasos algorithm for kernel SVM (batch version).\n    Returns alpha coefficients and bias (rounded to 4 decimals) as Python lists.\n    \n    data:     n x d array of training samples\n    labels:   length-n array of +1/-1 labels\n    kernel:   'linear' or 'rbf'\n    lambda_val: regularization parameter\n    iterations: number of passes over the data\n    sigma:    bandwidth for RBF kernel\n    \"\"\"\n    X = data\n    y = labels.astype(float)\n    n_samples = X.shape[0]\n    \n    # Precompute the kernel matrix\n    if kernel == 'linear':\n        K = X.dot(X.T)\n    elif kernel == 'rbf':\n        # pairwise squared Euclidean distance\n        sq_norms = np.sum(X**2, axis=1, keepdims=True)\n        D2 = sq_norms + sq_norms.T - 2 * X.dot(X.T)\n        K = np.exp(-D2 / (2 * sigma**2))\n    else:\n        raise ValueError(\"Unsupported kernel. Use 'linear' or 'rbf'.\")\n    \n    # Initialize dual coefficients and bias\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    \n    # Main loop\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        \n        # Compute decision values f = sum_j alpha_j y_j K_{j,i} + b\n        f = (alpha * y).dot(K) + b\n        \n        # Find indices where margin is violated: y_i * f_i < 1\n        viol = np.where(y * f < 1)[0]\n        \n        # Shrink alpha (regularization step)\n        alpha = (1.0 - eta * lambda_val) * alpha\n        \n        # Update alpha on violations\n        if viol.size > 0:\n            alpha[viol] += eta\n        \n        # Update bias (unregularized)\n        if viol.size > 0:\n            b += eta * np.sum(y[viol])\n    \n    # Round to 4 decimals\n    alpha = np.round(alpha, 4)\n    b = round(b, 4)\n    \n    # Return lists\n    return [alpha.tolist(), [b]]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Simple toy dataset\n    X = np.array([[2, 3],\n                  [3, 3],\n                  [2, 1],\n                  [3, 1]], dtype=float)\n    y = np.array([1, 1, -1, -1], dtype=float)\n    \n    alphas, bias = pegasos_kernel_svm(X, y,\n                                      kernel='rbf',\n                                      lambda_val=0.1,\n                                      iterations=50,\n                                      sigma=0.5)\n    print(\"Alphas:\", alphas)\n    print(\"Bias:\", bias)\n```"}
{"task_id": 22, "completion_id": 0, "completion": "```python\nimport math\n\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation of the input value z and\n    return the result rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)\n\nif __name__ == \"__main__\":\n    # Example usage and test cases\n    test_inputs = [-5, -1, 0, 1, 5]\n    for x in test_inputs:\n        print(f\"sigmoid({x}) = {sigmoid(x)}\")\n```"}
{"task_id": 23, "completion_id": 0, "completion": "```python\nimport math\n\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax of a list of scores.\n\n    Args:\n        scores (list[float]): List of input scores.\n\n    Returns:\n        list[float]: Softmax probabilities, each rounded to 4 decimal places.\n    \"\"\"\n    # Numerical stability: subtract the max score before exponentiating\n    max_score = max(scores)\n    exps = [math.exp(s - max_score) for s in scores]\n    sum_exps = sum(exps)\n    softmax_vals = [e / sum_exps for e in exps]\n    # Round each value to 4 decimal places\n    return [round(val, 4) for val in softmax_vals]\n\nif __name__ == '__main__':\n    # Example usage\n    sample_scores = [2.0, 1.0, 0.1]\n    result = softmax(sample_scores)\n    print(f\"Input scores: {sample_scores}\")\n    print(f\"Softmax output: {result}\")\n```"}
{"task_id": 24, "completion_id": 0, "completion": "```python\nimport math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulate a single neuron with sigmoid activation for binary classification.\n    \n    :param features: List of feature vectors (each vector is a list of floats).\n    :param labels:   List of true binary labels (0 or 1).\n    :param weights:  List of weights for each feature.\n    :param bias:     Bias term (float).\n    :return:         Tuple (predicted_probabilities, mse), where\n                     predicted_probabilities is a Python list of\n                     sigmoid outputs rounded to 4 decimals, and mse is\n                     the mean squared error (rounded to 4 decimals).\n    \"\"\"\n    # lazy\u2010import numpy inside the function so top lines match requirement\n    import numpy as np\n\n    # convert inputs to numpy arrays\n    X = np.array(features, dtype=float)   # shape: (n_samples, n_features)\n    w = np.array(weights, dtype=float)    # shape: (n_features,)\n    y = np.array(labels, dtype=float)     # shape: (n_samples,)\n\n    # linear combination z = X\u00b7w + b\n    z = X.dot(w) + bias                   # shape: (n_samples,)\n\n    # sigmoid activation\n    sigmoid = 1.0 / (1.0 + np.exp(-z))\n\n    # round predicted probabilities to 4 decimals\n    preds = np.round(sigmoid, 4)\n\n    # compute mean squared error\n    mse_value = np.mean((preds - y) ** 2)\n    mse_value = round(float(mse_value), 4)\n\n    # return predictions as a plain Python list and the MSE\n    return preds.tolist(), mse_value\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define a small dataset\n    features = [\n        [0.5,  1.0, -0.5],\n        [1.2, -0.7,  0.3],\n        [0.0,  0.0,  0.0]\n    ]\n    labels = [1, 0, 0]\n    weights = [0.8, -1.0, 0.5]\n    bias = 0.1\n\n    preds, mse = single_neuron_model(features, labels, weights, bias)\n    print(\"Predicted probabilities:\", preds)\n    print(\"Mean Squared Error:    \", mse)\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_neuron(\n    features: np.ndarray,\n    labels: np.ndarray,\n    initial_weights: np.ndarray,\n    initial_bias: float,\n    learning_rate: float,\n    epochs: int\n) -> (np.ndarray, float, list[float]):\n    \"\"\"\n    Trains a single neuron with sigmoid activation using MSE loss and gradient descent.\n\n    Returns:\n        weights (np.ndarray): Trained weights, rounded to 4 decimals.\n        bias (float): Trained bias, rounded to 4 decimals.\n        mse_history (list of float): MSE at each epoch, rounded to 4 decimals.\n    \"\"\"\n    def sigmoid(x: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-x))\n\n    # Initialize parameters\n    weights = initial_weights.astype(float).copy()\n    bias = float(initial_bias)\n    n_samples = features.shape[0]\n    mse_history: list[float] = []\n\n    for epoch in range(epochs):\n        # Forward pass\n        z = features.dot(weights) + bias\n        predictions = sigmoid(z)\n\n        # Compute MSE\n        errors = predictions - labels\n        mse = np.mean(errors**2)\n        mse_history.append(round(mse, 4))\n\n        # Backpropagation\n        # dL/dpred = 2*(pred - label)/n\n        dL_dpred = 2.0 * errors / n_samples\n        # dpred/dz = pred*(1 - pred)\n        dpred_dz = predictions * (1.0 - predictions)\n        # Chain rule\n        delta = dL_dpred * dpred_dz\n\n        # Gradients\n        grad_w = features.T.dot(delta)        # shape: (n_features,)\n        grad_b = np.sum(delta)                # scalar\n\n        # Update parameters\n        weights -= learning_rate * grad_w\n        bias    -= learning_rate * grad_b\n\n    # Round final parameters\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n\n    return weights, bias, mse_history\n\n# Example usage\nif __name__ == \"__main__\":\n    # Simple AND gate dataset\n    X = np.array([[0, 0],\n                  [0, 1],\n                  [1, 0],\n                  [1, 1]], dtype=float)\n    y = np.array([0, 0, 0, 1], dtype=float)\n\n    init_w = np.zeros(2)\n    init_b = 0.0\n    lr = 0.1\n    epochs = 10000\n\n    trained_w, trained_b, mse_per_epoch = train_neuron(\n        features=X,\n        labels=y,\n        initial_weights=init_w,\n        initial_bias=init_b,\n        learning_rate=lr,\n        epochs=epochs\n    )\n\n    print(\"Trained weights:\", trained_w.tolist())\n    print(\"Trained bias:\", trained_b)\n    print(\"MSE history (first 10 epochs):\", mse_per_epoch[:10])\n    print(\"Final MSE:\", mse_per_epoch[-1])\n```"}
{"task_id": 26, "completion_id": 0, "completion": "```python\nclass Value:\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data                  # the scalar value\n        self.grad = 0.0                   # the gradient of this value\n        self._backward = lambda: None     # function to propagate gradients to children\n        self._prev = set(_children)       # parent nodes in the computation graph\n        self._op = _op                    # the operation that produced this node (for graph viz)\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            # d(out)/d(self) = 1\n            self.grad += out.grad * 1.0\n            # d(out)/d(other) = 1\n            other.grad += out.grad * 1.0\n        out._backward = _backward\n\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            # d(self * other)/d(self) = other\n            self.grad += other.data * out.grad\n            # d(self * other)/d(other) = self\n            other.grad += self.data * out.grad\n        out._backward = _backward\n\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0.0, (self,), 'ReLU')\n\n        def _backward():\n            # gradient flows only for positive inputs\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n\n        return out\n\n    def backward(self):\n        # Topological order all of the children in the graph\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n\n        build_topo(self)\n\n        # Set the gradient of the output node to 1\n        self.grad = 1.0\n        # Go one variable at a time and call its backward function\n        for node in reversed(topo):\n            node._backward()\n\n    # Helper methods for convenience\n    def __radd__(self, other):       # other + self\n        return self + other\n\n    def __rmul__(self, other):       # other * self\n        return self * other\n\n    def __neg__(self):               # -self\n        return self * -1\n\n    def __sub__(self, other):        # self - other\n        return self + (-other)\n\n    def __truediv__(self, other):    # self / other\n        return self * other**-1\n\n    def __pow__(self, exponent):     # self ** exponent\n        assert isinstance(exponent, (int, float)), \"Only supporting int/float powers for now\"\n        out = Value(self.data**exponent, (self,), f'**{exponent}')\n\n        def _backward():\n            self.grad += exponent * (self.data**(exponent-1)) * out.grad\n        out._backward = _backward\n\n        return out\n\n    def __repr__(self):\n        return f\"Value(data={self.data}, grad={self.grad})\"\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create some values\n    a = Value(2.0)\n    b = Value(-3.0)\n    c = Value(10.0)\n\n    # Build a small computation graph\n    x = a * b\n    y = x + c\n    z = y.relu()\n    z.backward()\n\n    # Print out the results\n    print(f\"a: data={a.data}, grad={a.grad}\")\n    print(f\"b: data={b.data}, grad={b.grad}\")\n    print(f\"c: data={c.data}, grad={c.grad}\")\n    print(f\"x: data={x.data}, grad={x.grad}\")\n    print(f\"y: data={y.data}, grad={y.grad}\")\n    print(f\"z: data={z.data}, grad={z.grad}\")\n```"}
{"task_id": 27, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix P that maps coordinate vectors in basis B\n    to coordinate vectors in basis C in R^3.\n    B and C are lists of three 3-dimensional vectors (each vector is a list of 3 ints),\n    given in standard coordinates.\n    Returns P as a 3x3 list of floats, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input lists to 3x3 numpy arrays, with basis vectors as columns\n    B_mat = np.array(B, dtype=float).T  # shape (3,3)\n    C_mat = np.array(C, dtype=float).T  # shape (3,3)\n\n    # Compute the matrix that changes B-coordinates to standard coords: B_mat\n    # then from standard coords to C-coordinates: C_mat^{-1}\n    P = np.linalg.inv(C_mat) @ B_mat\n\n    # Round to nearest 4th decimal and return as a Python list\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage:\n    # Basis B = { [1,0,0], [0,1,0], [0,0,1] } (standard basis)\n    # Basis C = { [1,1,0], [0,1,1], [1,0,1] }\n    B = [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]\n    ]\n    C = [\n        [1, 1, 0],\n        [0, 1, 1],\n        [1, 0, 1]\n    ]\n\n    P = transform_basis(B, C)\n    print(\"Transformation matrix P from basis B to basis C:\")\n    for row in P:\n        print(row)\n```\n\nExplanation:\n1. We form 3\u00d73 matrices `B_mat` and `C_mat` whose columns are the basis vectors of B and C.\n2. A vector\u2019s B-coordinates are sent to standard coordinates by multiplying by `B_mat`.\n3. To get to C-coordinates, we apply `C_mat\u207b\u00b9`.\n4. Hence the overall change\u2010of\u2010basis matrix is `P = C_mat\u207b\u00b9 @ B_mat`.\n5. We round the entries to 4 decimal places and return the result via `.tolist()`."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the SVD of a 2x2 matrix A using the eigendecomposition of A^T A.\n    Returns U, S, V (as Python lists) rounded to 4 decimal places, such that\n    A = U @ S @ V^T.\n    \"\"\"\n    # Check input\n    if A.shape != (2, 2):\n        raise ValueError(\"Input matrix must be 2x2.\")\n    # 1) Form A^T A\n    AtA = A.T @ A\n    # 2) Eigendecomposition of A^T A\n    eigvals, V = np.linalg.eigh(AtA)\n    # Sort eigenvalues & eigenvectors in descending order\n    idx = eigvals.argsort()[::-1]\n    eigvals = eigvals[idx]\n    V = V[:, idx]\n    # 3) Singular values are sqrt of eigenvalues\n    sigmas = np.sqrt(np.clip(eigvals, 0, None))\n    # 4) Build the S matrix\n    S = np.zeros((2, 2), dtype=float)\n    S[0, 0] = sigmas[0]\n    S[1, 1] = sigmas[1]\n    # 5) Compute U by normalizing A @ v_i\n    U = np.zeros((2, 2), dtype=float)\n    for i in range(2):\n        if sigmas[i] > 1e-12:\n            U[:, i] = (A @ V[:, i]) / sigmas[i]\n        else:\n            # if sigma is zero, pick an orthonormal vector manually\n            # here we choose a vector orthogonal to the first column\n            if i == 1:\n                U[:, i] = np.array([-U[1, 0], U[0, 0]])\n            else:\n                U[:, i] = np.array([-U[1, 1], U[0, 1]])\n    # 6) Round to 4 decimal places\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    # 7) Return as Python lists\n    return U.tolist(), S.tolist(), V.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    A = np.array([[3.0, 1.0],\n                  [1.0, 3.0]])\n    U, S, V = svd_2x2(A)\n    print(\"U =\", U)\n    print(\"S =\", S)\n    print(\"V =\", V)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffle two arrays X and y in unison, maintaining their correspondence.\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        Feature array of shape (n_samples, ...).\n    y : np.ndarray\n        Label array of shape (n_samples, ...).\n    seed : int or None\n        Random seed for reproducibility. If None, uses non-deterministic randomness.\n    \n    Returns:\n    --------\n    X_list : list\n        Shuffled features as a Python list.\n    y_list : list\n        Shuffled labels as a Python list.\n    \"\"\"\n    # Check that the first dimension matches\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples.\")\n    \n    # Initialize RNG\n    rng = np.random.default_rng(seed)\n    \n    # Generate a permutation of indices and apply to both arrays\n    permuted_indices = rng.permutation(X.shape[0])\n    X_shuffled = X[permuted_indices]\n    y_shuffled = y[permuted_indices]\n    \n    # Convert to Python lists and return\n    return X_shuffled.tolist(), y_shuffled.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create dummy data\n    X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    y = np.array([10, 20, 30, 40])\n    \n    # Shuffle with a fixed seed\n    X_list, y_list = shuffle_data(X, y, seed=42)\n    \n    print(\"Shuffled X:\", X_list)\n    print(\"Shuffled y:\", y_list)\n```"}
{"task_id": 30, "completion_id": 0, "completion": "```python\n#!/usr/bin/env python3\nimport numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yield batches of X (and y if provided) as Python lists.\n\n    Parameters:\n    -----------\n    X : array-like, shape (n_samples, ...)\n        Input data.\n    y : array-like, shape (n_samples,), optional\n        Labels corresponding to X.\n    batch_size : int, default=64\n        Number of samples per batch.\n\n    Yields:\n    -------\n    If y is None:\n        X_batch_list : list\n            A batch of X converted to a Python list.\n    Else:\n        (X_batch_list, y_batch_list) : tuple of lists\n            A batch of X and corresponding y, both converted to Python lists.\n    \"\"\"\n    X = np.asarray(X)\n    n_samples = X.shape[0]\n\n    if y is not None:\n        y = np.asarray(y)\n        if y.shape[0] != n_samples:\n            raise ValueError(\"X and y must have the same number of samples.\")\n\n    for start in range(0, n_samples, batch_size):\n        end = start + batch_size\n        X_batch = X[start:end].tolist()\n        if y is None:\n            yield X_batch\n        else:\n            y_batch = y[start:end].tolist()\n            yield X_batch, y_batch\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create dummy data\n    X = np.arange(100).reshape(50, 2)  # 50 samples, 2 features each\n    y = np.arange(50)                 # 50 labels\n\n    print(\"Batches with (X, y):\")\n    for xb, yb in batch_iterator(X, y, batch_size=16):\n        print(\"X batch:\", xb)\n        print(\"y batch:\", yb)\n        print(\"-\" * 40)\n\n    print(\"\\nBatches with X only:\")\n    for xb in batch_iterator(X, batch_size=20):\n        print(\"X batch:\", xb)\n        print(\"-\" * 40)\n```"}
{"task_id": 31, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide a dataset based on whether the value of the specified feature\n    is greater than or equal to a threshold.\n\n    Parameters:\n    - X : array-like, shape (n_samples, n_features)\n        The dataset to split.\n    - feature_i : int\n        Index of the feature to test.\n    - threshold : float\n        The threshold value to compare against.\n\n    Returns:\n    - left_subset, right_subset : list of lists\n        left_subset contains all rows where X[row, feature_i] >= threshold.\n        right_subset contains all rows where X[row, feature_i] < threshold.\n        Both are converted to Python lists via numpy's tolist() method.\n    \"\"\"\n    # Ensure input is a numpy array\n    X = np.asarray(X)\n    \n    # Boolean masks for the condition\n    mask_left = X[:, feature_i] >= threshold\n    mask_right = ~mask_left  # equivalent to X[:, feature_i] < threshold\n\n    # Split and convert to Python lists\n    left_subset = X[mask_left].tolist()\n    right_subset = X[mask_right].tolist()\n\n    return left_subset, right_subset\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample dataset: 5 samples, 3 features\n    data = [\n        [5.1, 3.5, 1.4],\n        [4.9, 3.0, 1.4],\n        [6.2, 3.4, 5.4],\n        [5.9, 3.0, 5.1],\n        [5.5, 2.3, 4.0]\n    ]\n\n    # Split based on feature index 0 (first column) with threshold = 5.5\n    left, right = divide_on_feature(data, feature_i=0, threshold=5.5)\n\n    print(\"Samples with feature_0 >= 5.5:\")\n    for row in left:\n        print(row)\n\n    print(\"\\nSamples with feature_0 < 5.5:\")\n    for row in right:\n        print(row)\n```"}
{"task_id": 32, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for input data X up to a given degree.\n    \n    Parameters:\n    -----------\n    X : array-like, shape (n_samples, n_features)\n        The input data.\n    degree : int\n        The maximum degree of the polynomial features.\n        \n    Returns:\n    --------\n    poly_list : list of lists, shape (n_samples, n_output_features)\n        The polynomial features, returned as a pure Python list.\n    \"\"\"\n    X = np.asarray(X)\n    n_samples, n_features = X.shape\n    \n    # List to collect each new feature column\n    feature_columns = []\n    \n    # For each degree from 0 to `degree`, get all combinations of feature indices\n    for deg in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), deg):\n            if len(comb) == 0:\n                # Degree 0 term is the bias (all ones)\n                col = np.ones((n_samples, 1), dtype=X.dtype)\n            else:\n                # Multiply the appropriate columns together\n                col = np.prod(X[:, comb], axis=1).reshape(n_samples, 1)\n            feature_columns.append(col)\n    \n    # Stack all the columns horizontally and convert to Python list\n    poly = np.hstack(feature_columns)\n    return poly.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data: 2 samples, 2 features\n    X = np.array([[2, 3],\n                  [4, 5]])\n    degree = 2\n\n    poly_feats = polynomial_features(X, degree)\n    print(\"Polynomial features up to degree\", degree, \":\")\n    for row in poly_feats:\n        print(row)\n```"}
{"task_id": 33, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of the dataset (X, y).\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        Feature matrix.\n    y : np.ndarray, shape (n_samples,)\n        Target vector.\n    n_subsets : int\n        Number of random subsets to generate.\n    replacements : bool, default=True\n        If True, sampling is done with replacement (bootstrap).\n        If False, sampling is done without replacement.\n    seed : int, default=42\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    list_of_subsets : list of tuples\n        A list of length `n_subsets`, where each element is a tuple\n        (X_subset_list, y_subset_list). Both X_subset_list and\n        y_subset_list are plain Python lists (converted via tolist()).\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n\n    for _ in range(n_subsets):\n        # draw indices\n        idx = np.random.choice(n_samples, size=n_samples, replace=replacements)\n        # slice out the subset\n        X_sub = X[idx]\n        y_sub = y[idx]\n        # convert to nested Python lists and store\n        subsets.append((X_sub.tolist(), y_sub.tolist()))\n\n    return subsets\n\nif __name__ == \"__main__\":\n    # Example usage\n    # Create a toy dataset\n    X = np.array([[i, i+1] for i in range(10)])  # shape (10, 2)\n    y = np.arange(10)                            # shape (10,)\n\n    # Generate 3 random subsets without replacement\n    subs_no_rep = get_random_subsets(X, y, n_subsets=3, replacements=False, seed=123)\n    print(\"Without replacement:\")\n    for i, (Xs, ys) in enumerate(subs_no_rep, 1):\n        print(f\"Subset {i}:\")\n        print(\"  X =\", Xs)\n        print(\"  y =\", ys)\n\n    # Generate 2 random subsets with replacement\n    subs_with_rep = get_random_subsets(X, y, n_subsets=2, replacements=True, seed=456)\n    print(\"\\nWith replacement:\")\n    for i, (Xs, ys) in enumerate(subs_with_rep, 1):\n        print(f\"Subset {i}:\")\n        print(\"  X =\", Xs)\n        print(\"  y =\", ys)\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D array of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    x : array-like of shape (n_samples,)\n        Integer class labels.\n    n_col : int, optional\n        Number of output columns (i.e., number of classes).\n        If None, will be set to x.max() + 1.\n\n    Returns\n    -------\n    list of lists\n        One-hot encoded representation of x, as a Python list.\n    \"\"\"\n    # Convert to numpy array of integers\n    x = np.asarray(x, dtype=int)\n    if x.ndim != 1:\n        raise ValueError(\"Input array x must be 1D.\")\n    \n    # Determine number of columns\n    if n_col is None:\n        n_col = x.max() + 1\n    else:\n        n_col = int(n_col)\n    \n    # Check that labels are in valid range\n    if np.any(x < 0) or np.any(x >= n_col):\n        raise ValueError(f\"Class labels must be in [0, {n_col-1}].\")\n    \n    # Create one-hot matrix\n    one_hot = np.zeros((x.shape[0], n_col), dtype=int)\n    one_hot[np.arange(x.shape[0]), x] = 1\n    \n    # Return as nested Python list\n    return one_hot.tolist()\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample input\n    labels = np.array([2, 0, 1, 2, 2])\n    # Auto-determine n_col = 3\n    print(to_categorical(labels))\n    # Specify n_col explicitly\n    print(to_categorical(labels, n_col=5))\n```"}
{"task_id": 35, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix and return it as a nested Python list.\n    \n    Parameters:\n    x (numpy.ndarray): 1D array of length n.\n    \n    Returns:\n    list of list: n x n diagonal matrix represented as a nested Python list.\n    \"\"\"\n    x = np.asarray(x)             # ensure input is an ndarray\n    diag_mat = np.diag(x)         # build the diagonal matrix\n    return diag_mat.tolist()      # convert to nested Python list\n\n# Example usage\nif __name__ == \"__main__\":\n    vec = np.array([4, 5, 6])\n    diag_list = make_diagonal(vec)\n    print(\"Input vector:\", vec)\n    print(\"Output diagonal matrix:\")\n    for row in diag_list:\n        print(row)\n```"}
{"task_id": 36, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n\n    Parameters:\n    y_true (array\u2010like): 1D array of true labels.\n    y_pred (array\u2010like): 1D array of predicted labels.\n\n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n\n    # Check that the shapes match\n    if y_true.shape != y_pred.shape:\n        raise ValueError(f\"Shape mismatch: y_true has shape {y_true.shape} \"\n                         f\"but y_pred has shape {y_pred.shape}.\")\n\n    # Compute accuracy\n    accuracy = np.mean(y_true == y_pred)\n\n    # Round to 4 decimal places and return\n    return round(float(accuracy), 4)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # True labels\n    y_true = np.array([1, 0, 1, 1, 0, 1, 0])\n    # Predicted labels\n    y_pred = np.array([1, 0, 0, 1, 0, 1, 1])\n\n    acc = accuracy_score(y_true, y_pred)\n    print(f\"Accuracy: {acc}\")\n```"}
{"task_id": 37, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the Pearson correlation matrix between columns of X and columns of Y.\n    If Y is None, returns the correlation matrix of X with itself.\n    Rounds all results to 4 decimal places and returns a nested Python list.\n\n    Parameters:\n    X : 2D array-like, shape (n_samples, n_features_x)\n    Y : 2D array-like, shape (n_samples, n_features_y), optional\n\n    Returns:\n    corr_matrix : list of lists, shape (n_features_x, n_features_y)\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n\n    # Check that the number of samples match\n    if X.shape[0] != Y.shape[0]:\n        raise ValueError(\"X and Y must have the same number of rows (samples).\")\n\n    n_samples = X.shape[0]\n\n    # Center the data (subtract the mean)\n    X_centered = X - X.mean(axis=0)\n    Y_centered = Y - Y.mean(axis=0)\n\n    # Compute covariance matrix: shape (n_features_x, n_features_y)\n    # Using unbiased estimator (dividing by n_samples - 1)\n    cov_matrix = (X_centered.T @ Y_centered) / (n_samples - 1)\n\n    # Compute standard deviations (ddof=1 for sample std)\n    std_x = X_centered.std(axis=0, ddof=1)\n    std_y = Y_centered.std(axis=0, ddof=1)\n\n    # Outer product of standard deviations to normalize covariance to correlation\n    denom = np.outer(std_x, std_y)\n    corr_matrix = cov_matrix / denom\n\n    # Round to 4 decimal places and convert to Python list\n    corr_matrix = np.round(corr_matrix, 4).tolist()\n    return corr_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    X = np.array([\n        [1.0, 2.0, 3.0],\n        [2.0, 5.0, 8.0],\n        [3.0, 8.0, 3.0],\n        [4.0, 6.0, 7.0]\n    ])\n\n    # Correlation of X with itself\n    print(\"Corr(X, X):\")\n    print(calculate_correlation_matrix(X))\n\n    # Correlation between X and another dataset Y\n    Y = np.array([\n        [2.0, 0.5],\n        [3.0, 2.0],\n        [4.0, 1.5],\n        [5.0, 2.5]\n    ])\n    print(\"\\nCorr(X, Y):\")\n    print(calculate_correlation_matrix(X, Y))\n```"}
{"task_id": 38, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Fit an AdaBoost classifier.\n\n    Parameters:\n        X : numpy.ndarray of shape (n_samples, n_features)\n            Training data.\n        y : numpy.ndarray of shape (n_samples,)\n            Labels, expected to be either {1, -1} or {1, 0}.\n        n_clf : int\n            Number of weak classifiers to use.\n\n    Returns:\n        classifiers : list of dict\n            Each dict contains the parameters of one weak classifier:\n            {\n                'feature': feature_index,\n                'threshold': threshold_value (rounded to 4 decimals),\n                'polarity': 1 or -1,\n                'alpha': classifier weight (rounded to 4 decimals)\n            }\n    \"\"\"\n    # Ensure y is in {-1, +1}\n    y = y.astype(int)\n    if set(np.unique(y)) <= {0, 1}:\n        y = np.where(y == 0, -1, 1)\n\n    n_samples, n_features = X.shape\n    # Initialize weights uniformly\n    w = np.ones(n_samples) / n_samples\n    classifiers = []\n\n    for _ in range(n_clf):\n        best_clf = {}\n        min_error = float('inf')\n\n        # Search for the best weak classifier\n        for feature_i in range(n_features):\n            X_col = X[:, feature_i]\n            thresholds = np.unique(X_col)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions: +1 by default\n                    preds = np.ones(n_samples)\n                    if polarity == 1:\n                        preds[X_col < threshold] = -1\n                    else:\n                        preds[X_col >= threshold] = -1\n\n                    # Weighted error\n                    err = np.sum(w[y != preds])\n\n                    if err < min_error:\n                        min_error = err\n                        best_clf = {\n                            'feature': feature_i,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'error': err\n                        }\n\n        # Compute alpha (classifier weight)\n        eps = 1e-10  # to avoid division by zero\n        err = best_clf['error']\n        alpha = 0.5 * math.log((1.0 - err + eps) / (err + eps))\n\n        # Store the best classifier parameters\n        feature_i = best_clf['feature']\n        threshold = best_clf['threshold']\n        polarity = best_clf['polarity']\n        classifiers.append({\n            'feature': feature_i,\n            'threshold': round(threshold, 4),\n            'polarity': polarity,\n            'alpha': round(alpha, 4)\n        })\n\n        # Update sample weights\n        X_col = X[:, feature_i]\n        preds = np.ones(n_samples)\n        if polarity == 1:\n            preds[X_col < threshold] = -1\n        else:\n            preds[X_col >= threshold] = -1\n\n        # Exponential update rule\n        w *= np.exp(-alpha * y * preds)\n        w /= np.sum(w)  # normalize\n\n    return classifiers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple toy dataset\n    X_train = np.array([[1], [2], [3], [4], [5]])\n    y_train = np.array([0, 0, 1, 1, 1])\n    clf_list = adaboost_fit(X_train, y_train, n_clf=3)\n    print(clf_list)\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef log_softmax(scores: list):\n    \"\"\"\n    Compute the log-softmax of a list of scores.\n\n    Args:\n        scores (list): A 1D list of numerical scores.\n\n    Returns:\n        list: The log-softmax of the input scores, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input list to numpy array\n    x = np.array(scores, dtype=np.float64)\n    \n    # Numerical stability: subtract the max before exponentiation\n    x_shifted = x - np.max(x)\n    \n    # Compute log-sum-exp\n    log_sum_exp = np.log(np.sum(np.exp(x_shifted)))\n    \n    # Compute log-softmax\n    log_sm = x_shifted - log_sum_exp\n    \n    # Round to the nearest 4th decimal and convert to Python list\n    return np.round(log_sm, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    scores = [2.0, 1.0, 0.1]\n    result = log_softmax(scores)\n    print(\"Log-Softmax:\", result)\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\n\nclass SGD:\n    \"\"\"\n    Simple SGD optimizer.\n    \"\"\"\n    def __init__(self, lr=0.01):\n        self.lr = lr\n\n    def update(self, param, grad):\n        return param - self.lr * grad\n\nclass Dense(Layer):\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape  # tuple, e.g. (n_features,)\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None       # Weight matrix\n        self.w0 = None      # Bias vector\n        # placeholders for optimizers\n        self.opt_W = None\n        self.opt_b = None\n\n    def initialize(self):\n        \"\"\"\n        Initialize weights W and bias w0, and set up optimizers.\n        \"\"\"\n        # input dimension\n        input_dim = self.input_shape[0]\n        # limit for uniform distribution\n        lim = 1.0 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-lim, lim, (input_dim, self.n_units))\n        self.w0 = np.zeros((self.n_units,))\n        # initialize optimizers for parameters\n        self.opt_W = SGD(lr=0.01)\n        self.opt_b = SGD(lr=0.01)\n\n    def parameters(self):\n        \"\"\"\n        Return total number of trainable parameters.\n        \"\"\"\n        if self.W is None or self.w0 is None:\n            return 0\n        return int(self.W.size + self.w0.size)\n\n    def forward_pass(self, X, training=True):\n        \"\"\"\n        Compute output = X @ W + b\n        Round to 4 decimal places and return as Python list.\n        \"\"\"\n        X = np.array(X)\n        # On first call, initialize weights if needed\n        if self.W is None:\n            # set input shape if not provided\n            if self.input_shape is None:\n                # assume X is shape (batch_size, n_features)\n                self.input_shape = (X.shape[1],)\n            self.initialize()\n\n        # store input for backward pass\n        self.layer_input = X\n        # linear transformation\n        Z = X.dot(self.W) + self.w0  # shape (batch_size, n_units)\n\n        # round and convert to list\n        Z = np.round(Z, 4)\n        return Z.tolist()\n\n    def backward_pass(self, accum_grad):\n        \"\"\"\n        accum_grad: gradient w.r.t. this layer's outputs,\n                    shape (batch_size, n_units)\n        Returns gradient w.r.t. inputs, shape (batch_size, input_dim).\n        Also updates self.W and self.w0 if trainable.\n        \"\"\"\n        G = np.array(accum_grad)  # shape (batch_size, n_units)\n        X = self.layer_input       # shape (batch_size, input_dim)\n\n        # gradients w.r.t. weights and biases\n        grad_W = X.T.dot(G)                    # (input_dim, n_units)\n        grad_b = np.sum(G, axis=0)             # (n_units,)\n\n        # gradient w.r.t. inputs\n        grad_input = G.dot(self.W.T)           # (batch_size, input_dim)\n\n        # update parameters if trainable\n        if self.trainable:\n            self.W = self.opt_W.update(self.W, grad_W)\n            self.w0 = self.opt_b.update(self.w0, grad_b)\n\n        # round gradient input and return as list\n        grad_input = np.round(grad_input, 4)\n        return grad_input.tolist()\n\n    def output_shape(self):\n        \"\"\"\n        The output shape of this layer (excluding batch dimension).\n        \"\"\"\n        return (self.n_units,)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a Dense layer with 3 output units, input dimension 4\n    dense = Dense(n_units=3, input_shape=(4,))\n    # Forward pass with a batch of 2 samples\n    X = [[1.0, 2.0, 3.0, 4.0],\n         [4.0, 3.0, 2.0, 1.0]]\n    out = dense.forward_pass(X, training=True)\n    print(\"Forward output:\", out)            # list of 2\u00d73\n\n    # Suppose gradient from next layer is ones\n    grad_in = dense.backward_pass([[1, 1, 1], [1, 1, 1]])\n    print(\"Gradient w.r.t input:\", grad_in)  # list of 2\u00d74\n\n    # Check parameter count\n    print(\"Number of parameters:\", dense.parameters())\n\n    # Check output shape\n    print(\"Output shape:\", dense.output_shape())\n```"}
{"task_id": 41, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef simple_conv2d(input_matrix: np.ndarray,\n                  kernel: np.ndarray,\n                  padding: int,\n                  stride: int):\n    \"\"\"\n    Performs a 2D convolution (without bias) on input_matrix using the given kernel,\n    padding, and stride. Pads the input with zeros, applies the convolution,\n    rounds results to 4 decimal places, and returns a Python list.\n\n    Args:\n        input_matrix (np.ndarray): 2D array of shape (H, W)\n        kernel (np.ndarray): 2D array of shape (kH, kW)\n        padding (int): Amount of zero-padding around the input\n        stride (int): Stride length for the convolution\n\n    Returns:\n        List[List[float]]: The convolved output as a nested Python list\n    \"\"\"\n    # Input dimensions\n    H, W = input_matrix.shape\n    kH, kW = kernel.shape\n\n    # Pad the input\n    padded = np.pad(input_matrix,\n                    pad_width=((padding, padding),\n                               (padding, padding)),\n                    mode='constant', constant_values=0)\n\n    # Calculate output dimensions\n    out_h = ((H + 2*padding - kH) // stride) + 1\n    out_w = ((W + 2*padding - kW) // stride) + 1\n\n    # Prepare output array\n    output = np.zeros((out_h, out_w), dtype=float)\n\n    # Perform convolution\n    for i in range(out_h):\n        for j in range(out_w):\n            start_i = i * stride\n            start_j = j * stride\n            patch = padded[start_i:start_i + kH,\n                           start_j:start_j + kW]\n            output[i, j] = np.sum(patch * kernel)\n\n    # Round to 4 decimal places\n    output = np.round(output, 4)\n\n    # Return as Python list\n    return output.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    inp = np.array([[1, 2, 3, 0],\n                    [0, 1, 2, 3],\n                    [3, 0, 1, 2],\n                    [2, 3, 0, 1]], dtype=float)\n\n    kern = np.array([[1, 0, -1],\n                     [1, 0, -1],\n                     [1, 0, -1]], dtype=float)\n\n    result = simple_conv2d(inp, kern, padding=1, stride=1)\n    print(\"Convolved result:\")\n    for row in result:\n        print(row)\n```"}
{"task_id": 42, "completion_id": 0, "completion": "```python\ndef relu(z: float) -> float:\n    \"\"\"\n    Compute the Rectified Linear Unit (ReLU) activation.\n    Returns z if z > 0, otherwise returns 0.0.\n    \"\"\"\n    return z if z > 0 else 0.0\n\n\ndef main():\n    # Test the relu function with various inputs\n    test_values = [-3.5, -0.0, 0.0, 2.7, 5.0]\n    for val in test_values:\n        print(f\"relu({val}) = {relu(val)}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"}
{"task_id": 43, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_loss(X: np.ndarray, \n               w: np.ndarray, \n               y_true: np.ndarray, \n               alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n\n    Parameters:\n    ----------\n    X : np.ndarray of shape (n_samples, n_features)\n        Feature matrix.\n    w : np.ndarray of shape (n_features,)\n        Coefficient vector.\n    y_true : np.ndarray of shape (n_samples,)\n        True target values.\n    alpha : float\n        Regularization strength.\n\n    Returns:\n    -------\n    float\n        Ridge loss = MSE + alpha * ||w||^2, rounded to 4 decimal places.\n    \"\"\"\n    # Number of samples\n    n_samples = X.shape[0]\n\n    # Predictions\n    y_pred = X.dot(w)\n\n    # Mean Squared Error\n    mse = np.mean((y_pred - y_true) ** 2)\n\n    # L2 regularization term\n    reg = alpha * np.sum(w ** 2)\n\n    # Total ridge loss\n    loss = mse + reg\n\n    # Round to 4 decimal places and return as float\n    return float(np.round(loss, 4))\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # toy data\n    X = np.array([[1.0, 2.0],\n                  [3.0, 4.0],\n                  [5.0, 6.0]])\n    w = np.array([0.5, -0.2])\n    y_true = np.array([1.0, 2.0, 3.0])\n    alpha = 0.1\n\n    print(\"Ridge Loss:\", ridge_loss(X, w, y_true, alpha))\n```"}
{"task_id": 44, "completion_id": 0, "completion": "```python\ndef leaky_relu(z: float, alpha: float = 0.01) -> float|int:\n    \"\"\"\n    Apply the Leaky ReLU activation function.\n\n    Parameters:\n    - z (float): The input value.\n    - alpha (float, optional): Slope for z < 0. Default is 0.01.\n\n    Returns:\n    - float|int: z if z >= 0, otherwise alpha * z.\n    \"\"\"\n    return z if z >= 0 else alpha * z\n\n\nif __name__ == \"__main__\":\n    # Simple tests / demonstrations\n    test_values = [-5.0, -0.5, 0.0, 0.5, 5.0]\n    for v in test_values:\n        print(f\"leaky_relu({v}) = {leaky_relu(v)}\")\n    \n    # Custom alpha\n    print(f\"leaky_relu(-3.0, alpha=0.1) = {leaky_relu(-3.0, alpha=0.1)}\")\n    print(f\"leaky_relu( 3.0, alpha=0.1) = {leaky_relu( 3.0, alpha=0.1)}\")\n```"}
{"task_id": 45, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel (dot product) between two vectors.\n\n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n\n    Returns:\n    float: Dot product of x1 and x2.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x1 = np.array(x1, dtype=float)\n    x2 = np.array(x2, dtype=float)\n    \n    # Check that dimensions match\n    if x1.shape != x2.shape:\n        raise ValueError(f\"Dimension mismatch: x1.shape={x1.shape}, x2.shape={x2.shape}\")\n    \n    # Compute and return the dot product\n    return np.dot(x1, x2)\n\nif __name__ == \"__main__\":\n    # Example usage\n    v1 = [1, 2, 3]\n    v2 = [4, 5, 6]\n    result = kernel_function(v1, v2)\n    print(f\"Linear kernel (dot product) of {v1} and {v2} is {result}\")\n```"}
{"task_id": 46, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef precision(y_true, y_pred):\n    \"\"\"\n    Compute the precision metric for binary classification.\n\n    Precision = TP / (TP + FP)\n    where:\n      TP = number of true positives\n      FP = number of false positives\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Array of true binary labels (0 or 1).\n    y_pred : np.ndarray\n        Array of predicted binary labels (0 or 1).\n\n    Returns\n    -------\n    float\n        Precision score. Returns 0.0 if there are no positive predictions.\n    \"\"\"\n    # Ensure inputs are numpy arrays\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n\n    # True positives: predicted 1 and actual 1\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    # False positives: predicted 1 but actual 0\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n\n    # Avoid division by zero\n    if tp + fp == 0:\n        return 0.0\n\n    return tp / (tp + fp)\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    y_true = np.array([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])\n    y_pred = np.array([1, 0, 0, 1, 0, 1, 1, 0, 1, 0])\n\n    print(\"True labels:      \", y_true)\n    print(\"Predicted labels: \", y_pred)\n    print(\"Precision:        \", precision(y_true, y_pred))\n```"}
{"task_id": 47, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent to minimize MSE loss.\n    \n    Parameters:\n    - X: np.ndarray, shape (n_samples, n_features)\n    - y: np.ndarray, shape (n_samples,) or (n_samples, 1)\n    - weights: np.ndarray, shape (n_features,) or (n_features, 1)\n    - learning_rate: float\n    - n_iterations: int, number of iterations (epochs for SGD/mini-batch)\n    - batch_size: int, size of the mini-batches (used if method='mini-batch')\n    - method: str, one of {'batch', 'sgd', 'mini-batch'}\n    \n    Returns:\n    - weights_list: list of final weights rounded to 4 decimals\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    # Ensure weights is a column vector\n    weights = weights.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n\n    # Determine actual batch size based on method\n    m = n_samples\n    method = method.lower()\n    if method == 'batch':\n        bs = m\n    elif method == 'sgd':\n        bs = 1\n    elif method == 'mini-batch':\n        bs = batch_size\n        if bs < 1 or bs > m:\n            raise ValueError(\"batch_size must be between 1 and n_samples for mini-batch.\")\n    else:\n        raise ValueError(\"method must be one of 'batch', 'sgd', 'mini-batch'.\")\n\n    for epoch in range(n_iterations):\n        if method in ['sgd', 'mini-batch']:\n            # Shuffle indices at each epoch\n            indices = np.random.permutation(m)\n        else:\n            # For batch, just use all indices\n            indices = np.arange(m)\n\n        # Process in chunks of size bs\n        for start in range(0, m, bs):\n            end = start + bs\n            batch_idx = indices[start:end]\n            X_batch = X[batch_idx]\n            y_batch = y[batch_idx]\n\n            # Compute prediction and gradient\n            preds = X_batch.dot(weights)             # shape (bs, 1)\n            errors = preds - y_batch                 # shape (bs, 1)\n            grad = (2 / bs) * X_batch.T.dot(errors)  # shape (n_features, 1)\n\n            # Update weights\n            weights = weights - learning_rate * grad\n\n        # (end of epoch)\n\n    # Round weights to 4 decimal places and return as Python list\n    weights = np.round(weights, 4)\n    return weights.reshape(-1).tolist()\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate some synthetic data\n    np.random.seed(0)\n    X = 2 * np.random.rand(100, 1)\n    y = 4 + 3 * X[:, 0] + np.random.randn(100)\n\n    # Add bias term to X\n    X_b = np.c_[np.ones((100, 1)), X]\n\n    # Initial weights\n    init_weights = np.zeros((2, 1))\n\n    # Run gradient descent\n    final_w_batch = gradient_descent(X_b, y, init_weights, learning_rate=0.1, n_iterations=100, method='batch')\n    final_w_sgd = gradient_descent(X_b, y, init_weights, learning_rate=0.01, n_iterations=50, method='sgd')\n    final_w_mini = gradient_descent(X_b, y, init_weights, learning_rate=0.05, n_iterations=100, batch_size=20, method='mini-batch')\n\n    print(\"Final weights (Batch GD):     \", final_w_batch)\n    print(\"Final weights (Stochastic GD):\", final_w_sgd)\n    print(\"Final weights (Mini-batch GD):\", final_w_mini)\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rref(matrix):\n    \"\"\"\n    Compute the Reduced Row Echelon Form (RREF) of a matrix.\n\n    Parameters:\n    matrix : array-like\n        The input matrix (list of lists or numpy array).\n\n    Returns:\n    list of lists\n        The RREF of the input matrix as a Python list of lists.\n    \"\"\"\n    # Convert input to float numpy array\n    A = np.array(matrix, dtype=float)\n    rows, cols = A.shape\n    pivot_row = 0\n    eps = 1e-12\n\n    for col in range(cols):\n        if pivot_row >= rows:\n            break\n\n        # Find the row with maximum absolute value in this column (for better numerical stability)\n        max_row = np.argmax(np.abs(A[pivot_row:rows, col])) + pivot_row\n        if abs(A[max_row, col]) < eps:\n            # No pivot in this column, move to next column\n            continue\n\n        # Swap current row with the row having the pivot\n        if max_row != pivot_row:\n            A[[pivot_row, max_row], :] = A[[max_row, pivot_row], :]\n\n        # Normalize pivot row so that the pivot becomes 1\n        A[pivot_row, :] = A[pivot_row, :] / A[pivot_row, col]\n\n        # Eliminate all other entries in this column\n        for r in range(rows):\n            if r != pivot_row:\n                A[r, :] = A[r, :] - A[r, col] * A[pivot_row, :]\n\n        pivot_row += 1\n\n    return A.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    M = [\n        [1, 2, -1, -4],\n        [2, 3, -1, -11],\n        [-2, 0, -3, 22]\n    ]\n    rref_M = rref(M)\n    print(\"RREF:\")\n    for row in rref_M:\n        print(row)\n```"}
{"task_id": 49, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n    \n    Parameters:\n    - f: objective function (unused internally, provided for API consistency)\n    - grad: function that computes gradient of f at x\n    - x0: initial parameters (array-like)\n    - learning_rate: step size\n    - beta1: decay rate for first moment\n    - beta2: decay rate for second moment\n    - epsilon: small constant for numerical stability\n    - num_iterations: number of update steps\n    \n    Returns:\n    - optimized parameters as a Python list, rounded to 4 decimal places\n    \"\"\"\n    x = np.array(x0, dtype=float)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    shape = x.shape\n\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * (g * g)\n        m_hat = m / (1 - beta1**t)\n        v_hat = v / (1 - beta2**t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n\n    # Round results to 4 decimal places and return as Python list\n    x_rounded = np.round(x, 4).reshape(shape)\n    return x_rounded.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define a sample quadratic function and its gradient\n    def f(x):\n        # f: R^2 -> R, simple convex function\n        return x[0]**2 + 2 * x[1]**2\n\n    def grad(x):\n        # gradient of f\n        return np.array([2 * x[0], 4 * x[1]])\n\n    # Initial guess\n    x0 = [5.0, 5.0]\n\n    # Run Adam optimizer\n    optimized_params = adam_optimizer(\n        f, grad, x0,\n        learning_rate=0.1,\n        beta1=0.9,\n        beta2=0.999,\n        epsilon=1e-8,\n        num_iterations=1000\n    )\n\n    print(\"Optimized parameters:\", optimized_params)\n```"}
{"task_id": 50, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef l1_regularization_gradient_descent(\n    X: np.array,\n    y: np.array,\n    alpha: float = 0.1,\n    learning_rate: float = 0.01,\n    max_iter: int = 1000,\n    tol: float = 1e-4\n) -> tuple:\n    \"\"\"\n    Fit Lasso Regression using (sub\u2010)gradient descent.\n\n    Parameters:\n    - X: np.array of shape (n_samples, n_features)\n    - y: np.array of shape (n_samples,)\n    - alpha: regularization strength (L1 penalty coefficient)\n    - learning_rate: step size for gradient descent\n    - max_iter: maximum number of iterations\n    - tol: tolerance for early stopping\n\n    Returns:\n    - w_list: list of learned weights (length n_features)\n    - b_val: learned bias (scalar)\n    \"\"\"\n    n_samples, n_features = X.shape\n    # initialize weights and bias\n    w = np.zeros(n_features)\n    b = 0.0\n\n    for _ in range(max_iter):\n        # predictions\n        y_pred = X.dot(w) + b\n        # error vector\n        error = y_pred - y  # shape (n_samples,)\n\n        # gradient of MSE part w.r.t. w\n        grad_w_mse = (1.0 / n_samples) * X.T.dot(error)  # shape (n_features,)\n        # subgradient of L1 penalty\n        grad_w_l1 = alpha * np.sign(w)\n        # total gradient w.r.t. w\n        grad_w = grad_w_mse + grad_w_l1\n\n        # gradient w.r.t. bias (no regularization on b)\n        grad_b = (1.0 / n_samples) * np.sum(error)\n\n        # store old parameters for convergence check\n        w_old = w.copy()\n        b_old = b\n\n        # gradient descent update\n        w = w - learning_rate * grad_w\n        b = b - learning_rate * grad_b\n\n        # check convergence\n        if np.max(np.abs(w - w_old)) < tol and abs(b - b_old) < tol:\n            break\n\n    # round results to 4 decimal places\n    w = np.round(w, 4)\n    b = float(np.round(b, 4))\n\n    return w.tolist(), b\n\n# Example usage:\nif __name__ == \"__main__\":\n    # toy data\n    X = np.array([[1.0, 2.0],\n                  [2.0, 0.5],\n                  [3.0, 2.5],\n                  [5.0, 4.0]])\n    y = np.array([1.0, 2.0, 2.5, 4.5])\n\n    weights, bias = l1_regularization_gradient_descent(\n        X, y,\n        alpha=0.2,\n        learning_rate=0.01,\n        max_iter=10000,\n        tol=1e-6\n    )\n    print(\"Learned weights:\", weights)\n    print(\"Learned bias:\", bias)\n```"}
{"task_id": 51, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Compute the Optimal String Alignment (restricted Damerau-Levenshtein) distance\n    between source and target. Allowed operations (all cost 1):\n      - insertion\n      - deletion\n      - substitution\n      - transposition of two adjacent characters\n    \"\"\"\n    len_s, len_t = len(source), len(target)\n    # Create distance matrix of size (len_s+1) x (len_t+1)\n    D = np.zeros((len_s + 1, len_t + 1), dtype=int)\n\n    # Initialize base cases: converting empty prefix to prefixes\n    for i in range(1, len_s + 1):\n        D[i, 0] = i\n    for j in range(1, len_t + 1):\n        D[0, j] = j\n\n    for i in range(1, len_s + 1):\n        for j in range(1, len_t + 1):\n            cost_sub = 0 if source[i - 1] == target[j - 1] else 1\n\n            # Compute costs for deletion, insertion, substitution\n            del_cost = D[i - 1, j] + 1\n            ins_cost = D[i, j - 1] + 1\n            sub_cost = D[i - 1, j - 1] + cost_sub\n\n            D[i, j] = min(del_cost, ins_cost, sub_cost)\n\n            # Check for transposition\n            if (i > 1 and j > 1 and\n                source[i - 1] == target[j - 2] and\n                source[i - 2] == target[j - 1]):\n                trans_cost = D[i - 2, j - 2] + 1\n                if trans_cost < D[i, j]:\n                    D[i, j] = trans_cost\n\n    return int(D[len_s, len_t])\n\n# Example usage:\nif __name__ == \"__main__\":\n    s1 = \"caper\"\n    s2 = \"acer\"\n    print(f\"OSA distance between '{s1}' and '{s2}':\", OSA(s1, s2))\n```"}
{"task_id": 52, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall (sensitivity) for binary classification.\n\n    Parameters:\n    - y_true: list or array of true binary labels (0 or 1)\n    - y_pred: list or array of predicted binary labels (0 or 1)\n\n    Returns:\n    - recall_value: float, recall rounded to three decimal places\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n\n    # True Positives (TP): y_true = 1 and y_pred = 1\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    # False Negatives (FN): y_true = 1 but y_pred = 0\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n\n    # Avoid division by zero: if there are no actual positives, recall is 0.0\n    denom = tp + fn\n    if denom == 0:\n        return 0.0\n\n    rec = tp / denom\n    # Round to three decimal places\n    return round(rec, 3)\n\n\nif __name__ == \"__main__\":\n    # Example usage and quick tests\n    y_true_examples = [\n        [1, 0, 1, 1, 0, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1]\n    ]\n    y_pred_examples = [\n        [1, 0, 0, 1, 0, 1],  # TP=3, FN=1 -> recall=3/(3+1)=0.75\n        [0, 0, 0, 0],        # TP=0, FN=0 -> recall=0.0\n        [0, 1, 0, 1]         # TP=2, FN=2 -> recall=2/4=0.5\n    ]\n\n    for y_true, y_pred in zip(y_true_examples, y_pred_examples):\n        print(f\"y_true: {y_true}\")\n        print(f\"y_pred: {y_pred}\")\n        print(f\"Recall: {recall(y_true, y_pred)}\\n\")\n```"}
{"task_id": 53, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention of input sequence X.\n\n    Args:\n        X   : numpy array of shape (seq_len, d_model)\n        W_q : numpy array of shape (d_model, d_k)\n        W_k : numpy array of shape (d_model, d_k)\n        W_v : numpy array of shape (d_model, d_v)\n\n    Returns:\n        A Python list (seq_len x d_v) containing the self-attention outputs,\n        rounded to 4 decimal places.\n    \"\"\"\n    # Linear projections\n    Q = X.dot(W_q)   # (seq_len, d_k)\n    K = X.dot(W_k)   # (seq_len, d_k)\n    V = X.dot(W_v)   # (seq_len, d_v)\n\n    # scaled dot-product attention\n    d_k = K.shape[1]\n    scores = Q.dot(K.T) / np.sqrt(d_k)  # (seq_len, seq_len)\n\n    # softmax (stable)\n    scores_exp = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attn_weights = scores_exp / np.sum(scores_exp, axis=1, keepdims=True)  # (seq_len, seq_len)\n\n    # attention output\n    out = attn_weights.dot(V)  # (seq_len, d_v)\n\n    # round to 4 decimals and convert to Python list\n    out_rounded = np.round(out, 4)\n    return out_rounded.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage\n    np.random.seed(0)\n    seq_len, d_model, d_k, d_v = 5, 8, 4, 6\n    X   = np.random.rand(seq_len, d_model)\n    W_q = np.random.rand(d_model, d_k)\n    W_k = np.random.rand(d_model, d_k)\n    W_v = np.random.rand(d_model, d_v)\n\n    attention_output = self_attention(X, W_q, W_k, W_v)\n    print(\"Self-Attention Output (rounded to 4 decimals):\")\n    for row in attention_output:\n        print(row)\n```"}
{"task_id": 54, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rnn_forward(input_sequence: list[list[float]],\n                initial_hidden_state: list[float],\n                Wx: list[list[float]],\n                Wh: list[list[float]],\n                b: list[float]) -> list[float]:\n    \"\"\"\n    A simple RNN forward pass. Processes a sequence of input vectors and returns\n    the final hidden state, using tanh activation and rounding to 4 decimals.\n    \n    Parameters:\n    - input_sequence: list of T input vectors, each of length D (list of lists)\n    - initial_hidden_state: initial hidden state, length H\n    - Wx: input-to-hidden weights, shape (H, D)\n    - Wh: hidden-to-hidden weights, shape (H, H)\n    - b: bias vector, length H\n    \n    Returns:\n    - final hidden state as a Python list of length H, rounded to 4 decimals\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_seq = [np.array(x, dtype=float) for x in input_sequence]\n    h = np.array(initial_hidden_state, dtype=float)\n    Wx = np.array(Wx, dtype=float)\n    Wh = np.array(Wh, dtype=float)\n    b  = np.array(b, dtype=float)\n    \n    # Forward pass through time\n    for x in x_seq:\n        h = np.tanh(Wx.dot(x) + Wh.dot(h) + b)\n    \n    # Round to 4 decimal places and return as Python list\n    h_rounded = np.round(h, 4)\n    return h_rounded.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Toy example dimensions: input dim D=3, hidden dim H=2, sequence length T=4\n    xs = [\n        [0.1, 0.0, -0.1],\n        [0.2, 0.1,  0.0],\n        [0.0, 0.3,  0.1],\n        [-0.1, 0.0, 0.2]\n    ]\n    h0 = [0.0, 0.0]\n    Wx = [[0.5, -0.3, 0.8],\n          [0.7,  0.1, -0.5]]\n    Wh = [[0.2, -0.4],\n          [0.3,  0.6]]\n    b  = [0.01, -0.02]\n    \n    h_final = rnn_forward(xs, h0, Wx, Wh, b)\n    print(\"Final hidden state:\", h_final)\n```\n"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Translates a set of 2D points by (tx, ty) using a 3x3 translation matrix.\n\n    Parameters:\n        points (list of [x, y]): List of 2D points to translate.\n        tx (float): Translation distance along the x-axis.\n        ty (float): Translation distance along the y-axis.\n\n    Returns:\n        list of [x', y']: New list of translated 2D points.\n    \"\"\"\n    # Convert input list to a NumPy array of shape (N, 2)\n    pts = np.array(points, dtype=float)\n\n    # Construct the 3x3 homogeneous translation matrix\n    T = np.array([\n        [1, 0, tx],\n        [0, 1, ty],\n        [0, 0,  1]\n    ], dtype=float)\n\n    # Convert points to homogeneous coordinates: shape (N, 3)\n    ones = np.ones((pts.shape[0], 1), dtype=float)\n    pts_hom = np.hstack([pts, ones])\n\n    # Apply the translation: result has shape (N, 3)\n    translated_hom = pts_hom.dot(T.T)\n\n    # Discard the homogeneous coordinate and convert back to a Python list\n    translated_pts = translated_hom[:, :2].tolist()\n    return translated_pts\n\n# Example usage\nif __name__ == \"__main__\":\n    original_points = [[0, 0], [1, 2], [-3, 4]]\n    tx, ty = 5, -2\n    moved_points = translate_object(original_points, tx, ty)\n    print(\"Original points:\", original_points)\n    print(f\"Translated by (tx={tx}, ty={ty}):\", moved_points)\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence D_KL(P || Q) between two univariate normal distributions:\n      P ~ N(mu_p, sigma_p^2)\n      Q ~ N(mu_q, sigma_q^2)\n\n    Formula:\n      D_KL(P || Q) = log(sigma_q / sigma_p)\n                     + (sigma_p^2 + (mu_p - mu_q)^2) / (2 * sigma_q^2)\n                     - 1/2\n\n    Args:\n      mu_p     (float): mean of distribution P\n      sigma_p  (float): standard deviation of distribution P (sigma_p > 0)\n      mu_q     (float): mean of distribution Q\n      sigma_q  (float): standard deviation of distribution Q (sigma_q > 0)\n\n    Returns:\n      float: the KL divergence D_KL(P || Q)\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError(\"Standard deviations must be positive.\")\n\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p**2 + (mu_p - mu_q)**2) / (2 * sigma_q**2)\n    return term1 + term2 - 0.5\n\nif __name__ == \"__main__\":\n    # Example usage\n    mu_p, sigma_p = 0.0, 1.0\n    mu_q, sigma_q = 1.0, 2.0\n\n    kl = kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q)\n    print(f\"KL(P||Q) with P~N({mu_p},{sigma_p}^2) and Q~N({mu_q},{sigma_q}^2): {kl:.6f}\")\n```"}
{"task_id": 57, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve the linear system Ax = b using the Gauss\u2013Seidel iterative method.\n    \n    Parameters:\n    A     : square coefficient matrix (list of lists or ndarray)\n    b     : right-hand side vector (list or ndarray)\n    n     : number of iterations\n    x_ini : optional initial guess for x (list or ndarray). If None, starts from zeros.\n    \n    Returns:\n    x_list : solution vector after n iterations, rounded to 4 decimals, as a Python list.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    N = A.shape[0]\n    \n    # Initialize x\n    if x_ini is None:\n        x = np.zeros(N, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    \n    # Perform n Gauss\u2013Seidel iterations\n    for _ in range(n):\n        for i in range(N):\n            # sum over known/newer x's\n            sum1 = np.dot(A[i, :i], x[:i])      # using x^{(k+1)} for j < i\n            sum2 = np.dot(A[i, i+1:], x[i+1:])  # using x^{(k)} for j > i\n            x[i] = (b[i] - sum1 - sum2) / A[i, i]\n    \n    # Round to 4 decimal places and convert to Python list\n    x = np.round(x, 4)\n    return x.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example system:\n    #  4x1 +  1x2 + 2x3 = 4\n    #  3x1 +  5x2 + 1x3 = 7\n    #  1x1 +  1x2 + 3x3 = 3\n    A = [[4, 1, 2],\n         [3, 5, 1],\n         [1, 1, 3]]\n    b = [4, 7, 3]\n    iterations = 25\n    initial_guess = None  # or e.g. [0,0,0]\n    \n    solution = gauss_seidel(A, b, iterations, initial_guess)\n    print(\"Approximate solution after {} iterations:\".format(iterations))\n    print(solution)\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solve the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    All intermediate results and the final solution are rounded to 4 decimal places.\n    Returns the solution as a Python list.\n    \"\"\"\n    # Make copies and ensure float type\n    A = A.astype(float).copy()\n    b = b.astype(float).copy()\n    n = A.shape[0]\n\n    # Forward elimination\n    for k in range(n):\n        # Partial pivoting\n        max_row = np.argmax(np.abs(A[k:, k])) + k\n        if A[max_row, k] == 0:\n            raise ValueError(\"Matrix is singular or nearly singular.\")\n        # Swap rows in A\n        if max_row != k:\n            A[[k, max_row], :] = A[[max_row, k], :]\n            b[k], b[max_row] = b[max_row], b[k]\n\n        # Eliminate entries below pivot\n        for i in range(k + 1, n):\n            factor = np.round(A[i, k] / A[k, k], 4)\n            A[i, k:] = A[i, k:] - factor * A[k, k:]\n            b[i] = b[i] - factor * b[k]\n            # Round intermediate results\n            A[i, k:] = np.round(A[i, k:], 4)\n            b[i] = np.round(b[i], 4)\n\n    # Back substitution\n    x = np.zeros(n, dtype=float)\n    for i in range(n - 1, -1, -1):\n        if A[i, i] == 0:\n            raise ValueError(\"Matrix is singular or nearly singular.\")\n        rhs = b[i] - np.dot(A[i, i+1:], x[i+1:])\n        x[i] = np.round(rhs / A[i, i], 4)\n\n    return x.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define a sample system\n    A = np.array([[3, 2, -4],\n                  [2, 3,  3],\n                  [5, -3, 1]], dtype=float)\n    b = np.array([3, 15, 14], dtype=float)\n\n    solution = gaussian_elimination(A, b)\n    print(\"Solution:\", solution)\n```"}
{"task_id": 59, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\n\nclass LSTM:\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n\n        # Initialize weights and biases\n        # Weight matrices: (hidden_size, input_size + hidden_size)\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n\n        # Bias vectors: (hidden_size, 1)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs x and returns:\n          - hidden_states_list: list of hidden states at each time step\n          - final_hidden: final hidden state\n          - final_cell: final cell state\n\n        All outputs are rounded to 4 decimal places and converted to Python lists.\n        Args:\n          x: numpy array of shape (seq_len, input_size)\n          initial_hidden_state: numpy array of shape (hidden_size, 1)\n          initial_cell_state:   numpy array of shape (hidden_size, 1)\n        \"\"\"\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        hidden_states = []\n\n        seq_len = x.shape[0]\n        for t in range(seq_len):\n            # Current input (column vector)\n            x_t = x[t].reshape(-1, 1)  # shape: (input_size, 1)\n\n            # Concatenate hidden and input: shape (hidden_size + input_size, 1)\n            concat = np.vstack((h_prev, x_t))\n\n            # Forget gate\n            f_t = sigmoid(self.Wf @ concat + self.bf)\n            # Input gate\n            i_t = sigmoid(self.Wi @ concat + self.bi)\n            # Candidate cell state\n            c_hat_t = np.tanh(self.Wc @ concat + self.bc)\n            # New cell state\n            c_t = f_t * c_prev + i_t * c_hat_t\n            # Output gate\n            o_t = sigmoid(self.Wo @ concat + self.bo)\n            # New hidden state\n            h_t = o_t * np.tanh(c_t)\n\n            # Round to 4 decimals\n            h_t = np.round(h_t, 4)\n            c_t = np.round(c_t, 4)\n\n            # Store\n            hidden_states.append(h_t.copy())\n\n            # Update previous states\n            h_prev = h_t\n            c_prev = c_t\n\n        # Convert to Python lists\n        hidden_states_list = [h.reshape(self.hidden_size, 1).tolist() for h in hidden_states]\n        final_hidden = h_prev.reshape(self.hidden_size, 1)\n        final_cell   = c_prev.reshape(self.hidden_size, 1)\n\n        return hidden_states_list, final_hidden.tolist(), final_cell.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(42)\n\n    # Example dimensions\n    seq_len = 5\n    input_size = 3\n    hidden_size = 4\n\n    # Random input sequence\n    x = np.random.randn(seq_len, input_size)\n\n    # Initial states (zeros)\n    h0 = np.zeros((hidden_size, 1))\n    c0 = np.zeros((hidden_size, 1))\n\n    # Instantiate and run LSTM\n    lstm = LSTM(input_size, hidden_size)\n    h_states, h_final, c_final = lstm.forward(x, h0, c0)\n\n    # Print results\n    print(\"Hidden states at each time step:\")\n    for t, h in enumerate(h_states):\n        print(f\"t={t}: {h}\")\n    print(\"\\nFinal hidden state:\", h_final)\n    print(\"Final cell state:  \", c_final)\n```"}
{"task_id": 60, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute the TF-IDF scores for each document in `corpus` w.r.t. the terms in `query`.\n    \n    Parameters:\n    - corpus: List of documents, each document is a list of words.\n    - query: List of words for which to compute TF-IDF scores.\n    \n    Returns:\n    - A list of lists of TF-IDF scores with shape (len(corpus), len(query)),\n      rounded to 4 decimal places.\n    \"\"\"\n    # Handle empty corpus\n    if not corpus:\n        return []\n    \n    num_docs = len(corpus)\n    \n    # Compute document frequencies (df) for each query term\n    dfs = []\n    for term in query:\n        df = sum(1 for doc in corpus if term in doc)\n        dfs.append(df)\n    dfs = np.array(dfs, dtype=float)\n    \n    # Compute smoothed IDF: log((N + 1) / (df + 1))\n    idf = np.log((num_docs + 1) / (dfs + 1))\n    \n    # Build TF-IDF matrix\n    tf_idf_matrix = []\n    for doc in corpus:\n        doc_len = len(doc)\n        # Precompute term counts for efficiency\n        term_counts = {}\n        for w in doc:\n            term_counts[w] = term_counts.get(w, 0) + 1\n        \n        row = []\n        for i, term in enumerate(query):\n            # Term frequency with normalization\n            tf = term_counts.get(term, 0) / doc_len if doc_len > 0 else 0.0\n            row.append(tf * idf[i])\n        tf_idf_matrix.append(row)\n    \n    # Convert to numpy array, round to 4 decimal places, then to list\n    tf_idf_np = np.array(tf_idf_matrix)\n    tf_idf_rounded = np.round(tf_idf_np, 4)\n    \n    return tf_idf_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    corpus = [\n        [\"this\", \"is\", \"a\", \"sample\"],\n        [\"this\", \"is\", \"another\", \"example\", \"example\"],\n        [\"one\", \"more\", \"sample\", \"example\"]\n    ]\n    query = [\"this\", \"sample\", \"example\", \"missing\"]\n    \n    scores = compute_tf_idf(corpus, query)\n    print(scores)\n    # Output format: [\n    #   [tf-idf(this, doc0), tf-idf(sample, doc0), ...],\n    #   [tf-idf(this, doc1), tf-idf(sample, doc1), ...],\n    #   ...\n    # ]\n```"}
{"task_id": 61, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels (0 or 1)\n    :param y_pred: Numpy array of predicted labels (0 or 1)\n    :param beta: The weight of precision in the harmonic mean (beta > 0)\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    # Convert inputs to boolean masks\n    y_true = np.asarray(y_true).astype(bool)\n    y_pred = np.asarray(y_pred).astype(bool)\n\n    # True Positives (TP)\n    tp = np.logical_and(y_pred, y_true).sum()\n    # Predicted Positives (PP)\n    pp = y_pred.sum()\n    # Actual Positives (AP)\n    ap = y_true.sum()\n\n    # Precision and Recall (handle zero division)\n    precision = tp / pp if pp > 0 else 0.0\n    recall    = tp / ap if ap > 0 else 0.0\n\n    # Compute F-score\n    b2 = beta ** 2\n    denom = b2 * precision + recall\n    if denom == 0:\n        f = 0.0\n    else:\n        f = (1 + b2) * (precision * recall) / denom\n\n    return round(f, 3)\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    y_true = np.array([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])\n    y_pred = np.array([1, 0, 1, 0, 0, 1, 0, 1, 0, 0])\n\n    for beta in [0.5, 1, 2]:\n        score = f_score(y_true, y_pred, beta)\n        print(f\"F{beta}-score: {score}\")\n```\n"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass SimpleRNN:\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n\n        # Weight matrices\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01  # input to hidden\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01  # hidden to hidden\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01  # hidden to output\n\n        # Biases\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, inputs):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        inputs: numpy array of shape (T, input_size)\n        Returns:\n          - outputs: list of length T, each is (output_size, 1)\n          - x_s: list of inputs at each time step, each is (input_size, 1)\n          - h_s: list of hidden states at each time step, each is (hidden_size, 1)\n        \"\"\"\n        T = inputs.shape[0]\n        x_s, h_s, y_s = [], [], []\n        h_prev = np.zeros((self.hidden_size, 1))\n\n        for t in range(T):\n            x_t = inputs[t].reshape(-1, 1)     # (input_size, 1)\n            x_s.append(x_t)\n\n            # Hidden state update: h_t = tanh(W_xh x_t + W_hh h_prev + b_h)\n            h_linear = self.W_xh @ x_t + self.W_hh @ h_prev + self.b_h\n            h_t = np.tanh(h_linear)\n            h_s.append(h_t)\n\n            # Output (no activation): y_t = W_hy h_t + b_y\n            y_t = self.W_hy @ h_t + self.b_y\n            y_s.append(y_t)\n\n            h_prev = h_t\n\n        return y_s, x_s, h_s\n\n    def backward(self, x_s, h_s, y_s, targets, learning_rate):\n        \"\"\"\n        Backpropagation Through Time (BPTT) to update the RNN weights.\n        x_s: list of inputs at each time step (input_size,1)\n        h_s: list of hidden states at each time step (hidden_size,1)\n        y_s: list of outputs at each time step (output_size,1)\n        targets: numpy array of shape (T, output_size)\n        learning_rate: float\n        Returns:\n          - total loss for this sequence\n        \"\"\"\n        T = len(x_s)\n\n        # Initialize gradients\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n\n        dh_next = np.zeros((self.hidden_size, 1))\n        loss = 0.0\n\n        # BPTT: step backwards through time\n        for t in reversed(range(T)):\n            y_t = y_s[t]                      # (output_size, 1)\n            target_t = targets[t].reshape(-1, 1)\n            x_t = x_s[t]                      # (input_size, 1)\n            h_t = h_s[t]                      # (hidden_size, 1)\n            h_prev = h_s[t-1] if t > 0 else np.zeros_like(h_t)\n\n            # Compute loss and output error\n            e_t = y_t - target_t              # (output_size, 1)\n            loss += 0.5 * np.sum(e_t ** 2)    # 1/2 MSE at this step\n\n            # Gradients w.r.t. output layer\n            dy = e_t                          # derivative of 1/2*(y - target)^2\n            dW_hy += dy @ h_t.T               # (output_size, hidden_size)\n            db_y += dy                        # (output_size, 1)\n\n            # Backprop into hidden state\n            dh = (self.W_hy.T @ dy) + dh_next  # (hidden_size, 1)\n            # Backprop through tanh nonlinearity\n            dh_raw = dh * (1 - h_t * h_t)      # (hidden_size, 1)\n\n            # Gradients for recurrent weights\n            dW_xh += dh_raw @ x_t.T            # (hidden_size, input_size)\n            dW_hh += dh_raw @ h_prev.T         # (hidden_size, hidden_size)\n            db_h += dh_raw                     # (hidden_size, 1)\n\n            # Save dh for next step (going backwards)\n            dh_next = self.W_hh.T @ dh_raw     # (hidden_size, 1)\n\n        # Clip gradients to prevent exploding gradients (optional)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n\n        # Update parameters\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h  -= learning_rate * db_h\n        self.b_y  -= learning_rate * db_y\n\n        return loss\n\nif __name__ == \"__main__\":\n    # Toy example: predict next value of a sine wave sequence\n    seq_length = 50\n    input_size = 1\n    hidden_size = 16\n    output_size = 1\n    learning_rate = 1e-2\n    epochs = 500\n\n    # Generate a sine wave: we will predict sin(t+1) given sin(t)\n    t = np.linspace(0, 2 * np.pi, seq_length + 1)\n    data = np.sin(t)\n    inputs = data[:-1].reshape(seq_length, 1)   # shape (T,1)\n    targets = data[1:].reshape(seq_length, 1)   # shape (T,1)\n\n    # Initialize RNN\n    rnn = SimpleRNN(input_size, hidden_size, output_size)\n\n    # Training loop\n    for epoch in range(1, epochs + 1):\n        # Forward pass\n        outputs, x_s, h_s = rnn.forward(inputs)\n\n        # Backward pass and weight update\n        loss = rnn.backward(x_s, h_s, outputs, targets, learning_rate)\n\n        if epoch % 50 == 0 or epoch == 1:\n            print(f\"Epoch {epoch}/{epochs}, Loss: {loss:.6f}\")\n\n    # After training, print a few predictions\n    pred, _, _ = rnn.forward(inputs)\n    pred = np.array([p.flatten()[0] for p in pred])  # flatten to 1D\n    print(\"\\nTrue   : \", np.round(data[1:], 3))\n    print(\"Pred   : \", np.round(pred, 3))\n    print(\"Example: input sin(0.00) -> predicted sin(0.13) =\",\n          np.round(pred[0], 3), \"true =\", np.round(data[1], 3))\n```\n\nExplanation of key parts:\n\n1. **Initialization**  \n   We initialize weight matrices (`W_xh`, `W_hh`, `W_hy`) with small random values (\u00d70.01) and biases (`b_h`, `b_y`) with zeros.\n\n2. **Forward Pass**  \n   - We iterate through the input sequence of length `T`.  \n   - Update the hidden state via `tanh(W_xh x_t + W_hh h_{t-1} + b_h)`.  \n   - Compute the output `y_t = W_hy h_t + b_y`.\n\n3. **Backward Pass (BPTT)**  \n   - We loop backwards from `t = T-1` to `0`.  \n   - Compute the derivative of the loss w.r.t. the output `dy = y_t - target_t` (derivative of \u00bd MSE).  \n   - Backpropagate through the output layer, then through the tanh nonlinearity to accumulate gradients for all weights and biases.  \n   - Optionally clip gradients to avoid exploding gradients.  \n   - Update all parameters with gradient descent.\n\n4. **Training**  \n   - We train on a simple sine-wave sequence, aiming to predict the next sine value.  \n   - Print the loss every 50 epochs.  \n   - After training, we display the true vs. predicted values for inspection.\n\nThis script is a minimal example demonstrating how to implement a vanilla RNN with BPTT in NumPy."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-8):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimal places, as list)\n    \"\"\"\n    # Ensure input is float64\n    A = A.astype(float)\n    b = b.astype(float)\n\n    # Initialize x\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.astype(float)\n\n    # Initial residual and direction\n    r = b - A.dot(x)\n    p = r.copy()\n    rsold = r.dot(r)\n\n    for i in range(n):\n        Ap = A.dot(p)\n        alpha = rsold / p.dot(Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n\n        rsnew = r.dot(r)\n        # Check convergence (use norm of residual)\n        if np.sqrt(rsnew) < tol:\n            break\n\n        p = r + (rsnew / rsold) * p\n        rsold = rsnew\n\n    # Round solution and convert to list\n    x = np.round(x, 8)\n    return x.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Construct a symmetric positive-definite matrix A and vector b\n    np.random.seed(0)\n    M = np.random.rand(5, 5)\n    A = M.T.dot(M) + np.eye(5) * 1e-3  # SPD matrix\n    b = np.random.rand(5)\n\n    x_sol = conjugate_gradient(A, b, n=1000, tol=1e-10)\n    print(\"Solution x:\", x_sol)\n    # Verify accuracy\n    print(\"Residual norm:\", np.linalg.norm(A.dot(np.array(x_sol)) - b))\n```"}
{"task_id": 64, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    # Convert to numpy array for convenience\n    arr = np.array(y)\n    # Get unique classes and their counts\n    _, counts = np.unique(arr, return_counts=True)\n    # Compute class probabilities\n    probs = counts / counts.sum()\n    # Compute Gini impurity: 1 - sum(p_i^2)\n    gini = 1.0 - np.sum(probs ** 2)\n    # Round to three decimals\n    return float(np.round(gini, 3))\n\n\nif __name__ == \"__main__\":\n    # Example usages and tests\n    examples = [\n        ([0, 0, 0, 0], \"All same class \u2192 impurity = 0.0\"),\n        ([0, 1, 0, 1], \"Two classes equally frequent \u2192 impurity = 0.5\"),\n        ([0, 1, 2, 3], \"Four classes equally frequent \u2192 impurity = 0.75\"),\n        ([1, 1, 2, 2, 2], \"Class 2 majority \u2192 impurity < 0.5\"),\n    ]\n\n    for labels, description in examples:\n        imp = gini_impurity(labels)\n        print(f\"Labels: {labels} | Gini Impurity: {imp:.3f} | {description}\")\n```\n"}
{"task_id": 65, "completion_id": 0, "completion": "```python\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_ptr = [0]\n\n    for row in dense_matrix:\n        count_in_row = 0\n        for col_index, element in enumerate(row):\n            if element != 0:\n                values.append(element)\n                col_indices.append(col_index)\n                count_in_row += 1\n        # The next entry in row_ptr is the cumulative total so far\n        row_ptr.append(row_ptr[-1] + count_in_row)\n\n    return values, col_indices, row_ptr\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    dense = [\n        [0, 5, 0, 0],\n        [3, 0, 0, 4],\n        [0, 0, 0, 0],\n        [7, 0, 1, 0]\n    ]\n\n    values, cols, ptr = compressed_row_sparse_matrix(dense)\n    print(\"Values array:       \", values)\n    print(\"Column indices:     \", cols)\n    print(\"Row pointer array:  \", ptr)\n\n    # Expected output:\n    # Values array:        [5, 3, 4, 7, 1]\n    # Column indices:      [1, 0, 3, 0, 2]\n    # Row pointer array:   [0, 1, 3, 3, 5]\n```"}
{"task_id": 66, "completion_id": 0, "completion": "```python\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected (list of numbers)\n    :param L: The line vector defining the direction of projection (list of numbers)\n    :return: List representing the projection of v onto L, rounded to 3 decimal places\n    \"\"\"\n    # Validate inputs\n    if not isinstance(v, (list, tuple)) or not isinstance(L, (list, tuple)):\n        raise TypeError(\"Both v and L must be lists or tuples of numbers.\")\n    if len(v) != len(L):\n        raise ValueError(\"Vectors v and L must have the same dimension.\")\n    \n    # Compute dot products\n    dot_vL = sum(vi * Li for vi, Li in zip(v, L))\n    dot_LL = sum(Li * Li for Li in L)\n    \n    if dot_LL == 0:\n        raise ValueError(\"Cannot project onto the zero vector L.\")\n    \n    # Compute the scalar projection coefficient\n    scalar = dot_vL / dot_LL\n    \n    # Build the projection vector\n    proj = [round(scalar * Li, 3) for Li in L]\n    return proj\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example 1\n    v1 = [3, 4]\n    L1 = [1, 0]\n    print(f\"Projection of {v1} onto {L1} is {orthogonal_projection(v1, L1)}\")\n    # Should print: Projection of [3, 4] onto [1, 0] is [3.0, 0.0]\n\n    # Example 2\n    v2 = [2, -1, 3]\n    L2 = [1, 2, 2]\n    print(f\"Projection of {v2} onto {L2} is {orthogonal_projection(v2, L2)}\")\n    # For verification: scalar = (2*1 + -1*2 + 3*2) / (1^2+2^2+2^2) = (2 -2 +6)/9 = 6/9 = 0.667\n    # Projection = [0.667*1, 0.667*2, 0.667*2] \u2248 [0.667, 1.333, 1.333]\n```"}
{"task_id": 67, "completion_id": 0, "completion": "```python\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row_indices, column_pointer)\n             - values: non-zero elements in column-major order\n             - row_indices: corresponding row indices for each value\n             - column_pointer: array of length (n_cols + 1), where\n               column_pointer[j] is the index in `values` where column j starts,\n               and column_pointer[n_cols] == len(values)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        # Empty matrix or zero columns\n        return [], [], [0]\n\n    n_rows = len(dense_matrix)\n    n_cols = len(dense_matrix[0])\n\n    values = []\n    row_indices = []\n    column_pointer = [0]\n\n    # Iterate over columns first (column-major order)\n    for j in range(n_cols):\n        col_nnz = 0\n        for i in range(n_rows):\n            val = dense_matrix[i][j]\n            if val != 0:\n                values.append(val)\n                row_indices.append(i)\n                col_nnz += 1\n        # Next pointer is previous pointer + number of non-zeros in this column\n        column_pointer.append(column_pointer[-1] + col_nnz)\n\n    return values, row_indices, column_pointer\n\n\n# Example usage and simple test\nif __name__ == \"__main__\":\n    # Example dense matrix\n    A = [\n        [0, 5, 0, 0],\n        [1, 0, 0, 2],\n        [0, 0, 3, 0],\n        [4, 0, 0, 6]\n    ]\n\n    values, row_idxs, col_ptr = compressed_col_sparse_matrix(A)\n    print(\"Values:         \", values)\n    print(\"Row indices:    \", row_idxs)\n    print(\"Column pointer: \", col_ptr)\n\n    # Expected output:\n    # Values:          [1, 4, 5, 3, 2, 6]\n    # Row indices:     [1, 3, 0, 2, 1, 3]\n    # Column pointer:  [0, 2, 3, 4, 6]\n```"}
{"task_id": 68, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef matrix_image(A):\n    \"\"\"\n    Compute a basis for the column space (image) of matrix A using row echelon form.\n    \n    Parameters:\n    A : array-like, shape (m, n)\n        Input matrix.\n    \n    Returns:\n    basis_list : list of lists\n        The basis vectors for the column space of A (as columns), rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    m, n = A.shape\n    # Copy for elimination\n    M = A.copy()\n    pivot_cols = []\n    row = 0\n    tol = 1e-12\n    \n    for col in range(n):\n        # Find pivot in column col at or below 'row'\n        pivot_row = None\n        for r in range(row, m):\n            if abs(M[r, col]) > tol:\n                pivot_row = r\n                break\n        if pivot_row is None:\n            continue  # No pivot in this column\n        \n        # Swap current row with pivot_row\n        if pivot_row != row:\n            M[[row, pivot_row], :] = M[[pivot_row, row], :]\n        \n        # Record this column as a pivot column\n        pivot_cols.append(col)\n        \n        # Eliminate entries below the pivot\n        pivot_val = M[row, col]\n        for r in range(row + 1, m):\n            factor = M[r, col] / pivot_val\n            M[r, :] -= factor * M[row, :]\n        \n        row += 1\n        if row == m:\n            break\n    \n    # Extract the original columns of A corresponding to pivot columns\n    if not pivot_cols:\n        # No pivots => zero matrix => empty column space\n        basis = np.zeros((m, 0))\n    else:\n        basis = A[:, pivot_cols]\n    \n    # Round and convert to list\n    basis = np.round(basis, 8)\n    return basis.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    A = [\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 0, 1]\n    ]\n    basis = matrix_image(A)\n    print(\"Basis for the column space of A:\")\n    for col_vec in zip(*basis):\n        print(col_vec)\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the coefficient of determination (R-squared) for a set of true and predicted values.\n\n    Parameters:\n    y_true (array-like): True target values.\n    y_pred (array-like): Predicted target values.\n\n    Returns:\n    float: R-squared value rounded to three decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check that shapes match\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"Shapes of y_true and y_pred must match.\")\n    \n    # Sum of squares of residuals\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    # Total sum of squares\n    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)\n    \n    # Handle the case where variance is zero\n    if ss_tot == 0:\n        # If all y_true are equal, R\u00b2 is not well-defined; return 0.0\n        return 0.0\n    \n    # Compute R-squared\n    r2 = 1 - (ss_res / ss_tot)\n    return round(r2, 3)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    y_true = [3.0, -0.5, 2.0, 7.0]\n    y_pred = [2.5, 0.0, 2.0, 8.0]\n    \n    print(\"R-squared:\", r_squared(y_true, y_pred))\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\ndef calculate_brightness(img):\n    \"\"\"\n    Calculate the average brightness of a grayscale image represented as a 2D matrix.\n\n    Args:\n        img (list of list of int/float): 2D matrix of pixel values (0\u2013255).\n\n    Returns:\n        float: Average brightness rounded to two decimal places,\n               or -1 if the input is invalid.\n    \"\"\"\n    # Check for empty image\n    if not img or not isinstance(img, list):\n        return -1\n\n    # Check that no row is empty and all rows have the same length\n    row_length = None\n    for row in img:\n        if not isinstance(row, list) or len(row) == 0:\n            return -1\n        if row_length is None:\n            row_length = len(row)\n        elif len(row) != row_length:\n            return -1\n\n    total_pixels = len(img) * row_length\n    if total_pixels == 0:\n        return -1\n\n    # Sum up pixel values and validate range\n    total_value = 0.0\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, (int, float)) or pixel < 0 or pixel > 255:\n                return -1\n            total_value += pixel\n\n    # Compute average and round\n    average = total_value / total_pixels\n    return round(average, 2)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Valid image\n    image1 = [\n        [0, 128, 255],\n        [64, 192, 32]\n    ]\n    print(calculate_brightness(image1))  # Expected: 111.83\n\n    # Empty image\n    image2 = []\n    print(calculate_brightness(image2))  # Expected: -1\n\n    # Inconsistent row lengths\n    image3 = [\n        [10, 20, 30],\n        [40, 50]\n    ]\n    print(calculate_brightness(image3))  # Expected: -1\n\n    # Pixel out of range\n    image4 = [\n        [0, 100, 256],\n        [50, 75, 125]\n    ]\n    print(calculate_brightness(image4))  # Expected: -1\n```"}
{"task_id": 71, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n\n    Parameters:\n    - y_true: array-like of shape (n,), true target values\n    - y_pred: array-like of shape (n,), predicted values\n\n    Returns:\n    - rmse_val: float, the RMSE rounded to three decimal places\n\n    Raises:\n    - TypeError: if inputs cannot be converted to numeric arrays\n    - ValueError: if arrays are empty, not 1-D, or have mismatched shapes\n    \"\"\"\n    # Convert inputs to numpy arrays of floats\n    try:\n        y_true_arr = np.array(y_true, dtype=float)\n        y_pred_arr = np.array(y_pred, dtype=float)\n    except Exception:\n        raise TypeError(\"y_true and y_pred must be array-like of numeric values\")\n\n    # Check dimensionality\n    if y_true_arr.ndim != 1 or y_pred_arr.ndim != 1:\n        raise ValueError(\"y_true and y_pred must be 1-D arrays\")\n\n    # Check for empty arrays\n    if y_true_arr.size == 0:\n        raise ValueError(\"Input arrays must not be empty\")\n\n    # Check for matching shapes\n    if y_true_arr.shape != y_pred_arr.shape:\n        raise ValueError(\"y_true and y_pred must have the same shape\")\n\n    # Compute RMSE\n    mse = np.mean((y_true_arr - y_pred_arr) ** 2)\n    rmse_val = np.sqrt(mse)\n\n    # Round to three decimal places\n    return round(rmse_val, 3)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Valid example\n    y_true = [3.0, -0.5, 2.0, 7.0]\n    y_pred = [2.5, 0.0, 2.1, 7.8]\n    print(\"RMSE:\", rmse(y_true, y_pred))  # RMSE: 0.543\n\n    # Edge cases\n    try:\n        rmse([], [])\n    except ValueError as e:\n        print(\"Error:\", e)\n\n    try:\n        rmse([1, 2, 3], [1, 2])\n    except ValueError as e:\n        print(\"Error:\", e)\n\n    try:\n        rmse(\"abc\", \"xyz\")\n    except TypeError as e:\n        print(\"Error:\", e)\n```"}
{"task_id": 72, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index (Intersection over Union) for binary labels.\n    \n    Parameters:\n    - y_true: array-like of shape (n_samples,), ground truth binary labels (0 or 1)\n    - y_pred: array-like of shape (n_samples,), predicted binary labels (0 or 1)\n    \n    Returns:\n    - jaccard: float, Jaccard Index rounded to three decimal places\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.asarray(y_true).ravel()\n    y_pred = np.asarray(y_pred).ravel()\n    \n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"y_true and y_pred must have the same shape.\")\n    \n    # Compute intersection and union\n    intersection = np.logical_and(y_true == 1, y_pred == 1).sum()\n    union        = np.logical_or(y_true == 1, y_pred == 1).sum()\n    \n    # Handle edge case: both arrays are all zeros -> define Jaccard as 1.0\n    if union == 0:\n        jaccard = 1.0\n    else:\n        jaccard = intersection / union\n    \n    # Round to three decimal places\n    return round(jaccard, 3)\n\n\n# Example usage and simple tests\nif __name__ == \"__main__\":\n    # Perfect overlap\n    y_true1 = [1, 0, 1, 1, 0]\n    y_pred1 = [1, 0, 1, 1, 0]\n    print(\"Jaccard (perfect):\", jaccard_index(y_true1, y_pred1))  # 1.0\n\n    # Partial overlap\n    y_true2 = [1, 0, 1, 0, 1, 0]\n    y_pred2 = [1, 1, 0, 0, 1, 0]\n    # intersection = 2, union = 4 -> 0.5\n    print(\"Jaccard (partial):\", jaccard_index(y_true2, y_pred2))  # 0.5\n\n    # No overlap\n    y_true3 = [1, 1, 1]\n    y_pred3 = [0, 0, 0]\n    print(\"Jaccard (none):\", jaccard_index(y_true3, y_pred3))     # 0.0\n\n    # Both all zeros\n    y_true4 = [0, 0, 0]\n    y_pred4 = [0, 0, 0]\n    print(\"Jaccard (zeros):\", jaccard_index(y_true4, y_pred4))    # 1.0\n```"}
{"task_id": 73, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen\u2013Dice coefficient) for binary classification.\n\n    Parameters:\n    - y_true: array-like of shape (n_samples,), ground truth binary labels (0 or 1).\n    - y_pred: array-like of shape (n_samples,), predicted binary labels (0 or 1).\n\n    Returns:\n    - dice: float, Dice Score rounded to 3 decimal places.\n    \"\"\"\n    # Convert inputs to boolean numpy arrays\n    y_true = np.asarray(y_true).astype(bool).ravel()\n    y_pred = np.asarray(y_pred).astype(bool).ravel()\n\n    # Compute intersection and sums\n    intersection = np.logical_and(y_true, y_pred).sum()\n    total = y_true.sum() + y_pred.sum()\n\n    # Handle edge cases\n    if total == 0:\n        # No positives in both y_true and y_pred \u2192 perfect match\n        return 1.000\n\n    dice = 2 * intersection / total\n    return round(dice, 3)\n\n\nif __name__ == \"__main__\":\n    # Example usages and edge\u2010case tests\n\n    # 1) Typical case\n    y_true = [0, 1, 1, 0, 1]\n    y_pred = [1, 1, 0, 0, 1]\n    # intersection = 2 (positions 1 and 4), sum = 3 + 2 = 5 \u2192 dice = 4/5 = 0.8\n    print(\"Dice score (typical):\", dice_score(y_true, y_pred))  # Expected: 0.8\n\n    # 2) Perfect match\n    y_true = [0, 0, 1, 1]\n    y_pred = [0, 0, 1, 1]\n    print(\"Dice score (perfect):\", dice_score(y_true, y_pred))  # Expected: 1.0\n\n    # 3) No positives in either \u2192 define as perfect\n    y_true = [0, 0, 0]\n    y_pred = [0, 0, 0]\n    print(\"Dice score (no positives):\", dice_score(y_true, y_pred))  # Expected: 1.0\n\n    # 4) One side has positives, the other none \u2192 zero overlap\n    y_true = [1, 1, 0, 0]\n    y_pred = [0, 0, 0, 0]\n    print(\"Dice score (one empty):\", dice_score(y_true, y_pred))  # Expected: 0.0\n```"}
{"task_id": 74, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport hashlib\n\ndef _int_from_str(s):\n    \"\"\"\n    Deterministically convert a string to a 32-bit integer\n    using MD5 hashing.\n    \"\"\"\n    h = hashlib.md5(s.encode('utf-8')).digest()\n    # take first 4 bytes and convert to int\n    return int.from_bytes(h[:4], byteorder='little', signed=False)\n\ndef _random_bipolar_hv(dim, seed):\n    \"\"\"\n    Generate a bipolar hypervector of dimension `dim`\n    with entries in {+1, -1}, using the given integer seed.\n    \"\"\"\n    rng = np.random.RandomState(seed)\n    # Randomly choose +1 or -1\n    return rng.choice([1, -1], size=dim)\n\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Create a composite hypervector for `row` (dict of feature:value),\n    with hypervector dimension `dim` and reproducible seeds\n    provided in `random_seeds` (feature -> seed).\n    \"\"\"\n    # Accumulate bound feature-value hypervectors\n    bundled = np.zeros(dim, dtype=int)\n    \n    for feature, value in row.items():\n        if feature not in random_seeds:\n            raise KeyError(f\"Missing random seed for feature '{feature}'\")\n        base_seed = int(random_seeds[feature])\n        \n        # 1) Generate a hypervector for the feature name\n        name_seed = base_seed\n        hv_name = _random_bipolar_hv(dim, name_seed)\n        \n        # 2) Generate a hypervector for the feature value\n        #    Combine the base seed with a deterministic hash of the value\n        value_str = str(value)\n        value_hash = _int_from_str(f\"{feature}:{value_str}\")\n        value_seed = base_seed ^ value_hash\n        hv_value = _random_bipolar_hv(dim, value_seed)\n        \n        # 3) Bind feature-name and feature-value hypervectors\n        #    (elementwise multiplication for bipolar vectors)\n        hv_bound = hv_name * hv_value\n        \n        # 4) Bundle (sum) into the composite vector\n        bundled += hv_bound\n    \n    # 5) Optionally binarize the bundled vector back to bipolar\n    #    by taking the sign. Zeros are mapped to +1.\n    composite = np.sign(bundled).astype(int)\n    composite[composite == 0] = 1\n    \n    # Return as a plain Python list\n    return composite.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Suppose we have a 4-dimensional space for illustration\n    dim = 4\n    # Define reproducible seeds per feature\n    seeds = {\n        'age':  42,\n        'sex':  99,\n        'bp':   1234\n    }\n    # A sample dataset row\n    row = {\n        'age': 29,\n        'sex': 'M',\n        'bp':  'high'\n    }\n    hv = create_row_hv(row, dim, seeds)\n    print(\"Composite hypervector:\", hv)\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a 2x2 confusion matrix for binary classification.\n    Input:\n        data: list of [y_true, y_pred] pairs\n    Output:\n        matrix: [[TN, FP],\n                 [FN, TP]]\n    \"\"\"\n    # Identify the two unique classes\n    labels = sorted({true for true, _ in data} | {pred for _, pred in data})\n    if len(labels) != 2:\n        raise ValueError(f\"Expected exactly 2 unique labels, got {len(labels)}: {labels}\")\n\n    # Count occurrences of each (true, pred) pair\n    cnt = Counter((true, pred) for true, pred in data)\n\n    # Build matrix in the order [ [TN, FP], [FN, TP] ]\n    tn = cnt[(labels[0], labels[0])]\n    fp = cnt[(labels[0], labels[1])]\n    fn = cnt[(labels[1], labels[0])]\n    tp = cnt[(labels[1], labels[1])]\n\n    return [[tn, fp],\n            [fn, tp]]\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    sample_data = [\n        [0, 0],  # true negative\n        [0, 1],  # false positive\n        [1, 0],  # false negative\n        [1, 1],  # true positive\n        [1, 1],  # true positive\n        [0, 0],  # true negative\n    ]\n    matrix = confusion_matrix(sample_data)\n    print(\"Confusion Matrix:\")\n    print(\"           Pred=0  Pred=1\")\n    print(f\"True=0   {matrix[0][0]:>6}  {matrix[0][1]:>6}\")\n    print(f\"True=1   {matrix[1][0]:>6}  {matrix[1][1]:>6}\")\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n\n    Args:\n        v1 (np.ndarray): First input vector.\n        v2 (np.ndarray): Second input vector.\n\n    Returns:\n        float: Cosine similarity rounded to three decimal places.\n\n    Raises:\n        ValueError: If the vectors have different shapes, are empty,\n                    or have zero magnitude.\n    \"\"\"\n    # Ensure input vectors have the same shape\n    if v1.shape != v2.shape:\n        raise ValueError(f\"Shape mismatch: v1{v1.shape} vs v2{v2.shape}\")\n\n    # Compute magnitudes\n    mag_v1 = np.linalg.norm(v1)\n    mag_v2 = np.linalg.norm(v2)\n\n    # Check for zero magnitude\n    if mag_v1 == 0 or mag_v2 == 0:\n        raise ValueError(\"Input vectors must have non-zero magnitude\")\n\n    # Compute dot product\n    dot_product = np.dot(v1, v2)\n\n    # Compute cosine similarity\n    cos_sim = dot_product / (mag_v1 * mag_v2)\n\n    # Round to three decimal places\n    return round(cos_sim, 3)\n\nif __name__ == \"__main__\":\n    # Example usage\n    a = np.array([1, 2, 3])\n    b = np.array([4, 5, 6])\n    print(f\"Cosine similarity between {a} and {b}: {cosine_similarity(a, b)}\")\n    \n    # More tests\n    x = np.array([0, 1, 0])\n    y = np.array([1, 0, 0])\n    print(f\"Cosine similarity between {x} and {y}: {cosine_similarity(x, y)}\")\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Compute confusion matrix, accuracy, F1 score, specificity, and\n    negative predictive value for binary classification.\n\n    Returns:\n        confusion_matrix: [[TN, FP], [FN, TP]]\n        accuracy: float\n        f1_score: float\n        specificity: float\n        negative_predictive_value: float\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    \n    # Validate inputs\n    for i, (a, p) in enumerate(zip(actual, predicted)):\n        if a not in (0, 1) or p not in (0, 1):\n            raise ValueError(f\"Invalid label at index {i}: actual={a}, predicted={p}. Labels must be 0 or 1.\")\n    \n    # Count TP, TN, FP, FN\n    cnt = Counter(zip(actual, predicted))\n    TP = cnt[(1, 1)]\n    TN = cnt[(0, 0)]\n    FP = cnt[(0, 1)]\n    FN = cnt[(1, 0)]\n    \n    # Confusion matrix\n    confusion_matrix = [[TN, FP],\n                        [FN, TP]]\n    \n    # Basic totals\n    total = TP + TN + FP + FN\n    \n    # Metrics computations (with zero-division guards)\n    accuracy = (TP + TN) / total if total else 0.0\n    \n    precision_den = TP + FP\n    precision = TP / precision_den if precision_den else 0.0\n    \n    recall_den = TP + FN\n    recall = TP / recall_den if recall_den else 0.0\n    \n    f1_score_den = precision + recall\n    f1_score = (2 * precision * recall / f1_score_den) if f1_score_den else 0.0\n    \n    specificity_den = TN + FP\n    specificity = TN / specificity_den if specificity_den else 0.0\n    \n    npv_den = TN + FN\n    negative_predictive_value = TN / npv_den if npv_den else 0.0\n    \n    # Round to three decimal places\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    \n    return confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value\n\n\n# Example usage\nif __name__ == \"__main__\":\n    actual_labels    = [1, 0, 1, 1, 0, 1, 0, 0, 1, 0]\n    predicted_labels = [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]\n    \n    cm, acc, f1, spec, npv = performance_metrics(actual_labels, predicted_labels)\n    print(\"Confusion Matrix:\", cm)\n    print(\"Accuracy:\", acc)\n    print(\"F1 Score:\", f1)\n    print(\"Specificity:\", spec)\n    print(\"Negative Predictive Value:\", npv)\n```"}
{"task_id": 78, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics for a 1D list or NumPy array of numbers.\n    \n    Returns a dictionary with the following keys:\n      - 'mean'\n      - 'median'\n      - 'mode'\n      - 'variance'\n      - 'standard_deviation'\n      - '25th_percentile'\n      - '50th_percentile'\n      - '75th_percentile'\n      - 'interquartile_range'\n      \n    All returned values (except the mode, which is a data\u2010derived value) \n    are rounded to four decimal places.\n    \"\"\"\n    # Convert input to NumPy array\n    arr = np.array(data, dtype=float).flatten()\n    if arr.size == 0:\n        raise ValueError(\"Input data must contain at least one numeric value.\")\n    \n    # Basic moments\n    mean_val = np.mean(arr)\n    median_val = np.median(arr)\n    var_val = np.var(arr, ddof=0)          # population variance\n    std_val = np.std(arr, ddof=0)          # population standard deviation\n    \n    # Percentiles\n    p25 = np.percentile(arr, 25)\n    p50 = np.percentile(arr, 50)\n    p75 = np.percentile(arr, 75)\n    iqr = p75 - p25\n    \n    # Mode (most frequent value; if tie, pick the smallest)\n    # Convert to Python list for Counter\n    arr_list = arr.tolist()\n    freq = Counter(arr_list)\n    max_count = max(freq.values())\n    modes = [val for val, cnt in freq.items() if cnt == max_count]\n    mode_val = min(modes)\n    \n    # Assemble results, rounding as required\n    stats = {\n        'mean': round(float(mean_val), 4),\n        'median': round(float(median_val), 4),\n        'mode': mode_val,\n        'variance': round(float(var_val), 4),\n        'standard_deviation': round(float(std_val), 4),\n        '25th_percentile': round(float(p25), 4),\n        '50th_percentile': round(float(p50), 4),\n        '75th_percentile': round(float(p75), 4),\n        'interquartile_range': round(float(iqr), 4)\n    }\n    \n    return stats\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample = [1, 2, 2, 3, 4, 5, 5, 5, 6]\n    result = descriptive_statistics(sample)\n    print(result)\n```"}
{"task_id": 79, "completion_id": 0, "completion": "```python\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials (rounded to 5 decimal places)\n    \"\"\"\n    if not (0 <= k <= n):\n        raise ValueError(\"k must be between 0 and n inclusive.\")\n    if not (0.0 <= p <= 1.0):\n        raise ValueError(\"p must be between 0 and 1 inclusive.\")\n    \n    # Compute the binomial coefficient \"n choose k\"\n    coeff = math.comb(n, k)\n    # Compute the probability mass function\n    prob = coeff * (p ** k) * ((1 - p) ** (n - k))\n    # Round to five decimal places and return\n    return round(prob, 5)\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 10      # total trials\n    k = 3       # number of successes\n    p = 0.25    # success probability per trial\n\n    result = binomial_probability(n, k, p)\n    print(f\"P(X = {k}) for Binomial(n={n}, p={p}) is {result}\")\n```"}
{"task_id": 80, "completion_id": 0, "completion": "```python\nimport math\n\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    # Constant factor 1/(\u03c3 * sqrt(2\u03c0))\n    coeff = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    # Exponent term exp(- (x - \u03bc)^2 / (2\u03c3^2))\n    exponent = math.exp(-((x - mean) ** 2) / (2 * std_dev ** 2))\n    pdf_value = coeff * exponent\n    return round(pdf_value, 5)\n\nif __name__ == \"__main__\":\n    # Example usage:\n    # Calculate the PDF of a normal distribution with mean=0, std_dev=1 at x=1\n    x = 1.0\n    mean = 0.0\n    std_dev = 1.0\n    result = normal_pdf(x, mean, std_dev)\n    print(f\"normal_pdf(x={x}, mean={mean}, std_dev={std_dev}) = {result}\")\n```\n"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport math\n\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError(\"k must be a non-negative integer.\")\n    if lam < 0:\n        raise ValueError(\"lam (lambda) must be non-negative.\")\n    \n    # Poisson formula: P(k; \u03bb) = (e^(-\u03bb) * \u03bb^k) / k!\n    probability = math.exp(-lam) * (lam ** k) / math.factorial(k)\n    return round(probability, 5)\n\nif __name__ == \"__main__\":\n    try:\n        k = int(input(\"Enter the number of events (k): \").strip())\n        lam = float(input(\"Enter the average rate (\u03bb): \").strip())\n        prob = poisson_probability(k, lam)\n        print(f\"Probability of observing exactly {k} events: {prob}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport sys\nimport argparse\nimport numpy as np\nfrom PIL import Image\n\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: Contrast value (max pixel - min pixel).\n    \"\"\"\n    if not isinstance(img, np.ndarray):\n        raise TypeError(\"img must be a numpy.ndarray\")\n    if img.ndim != 2:\n        raise ValueError(\"img must be a 2D grayscale image\")\n    if img.size == 0:\n        raise ValueError(\"img must not be empty\")\n\n    # Ensure the array is of numeric type\n    img = img.astype(np.float32)\n\n    # Compute min and max\n    min_val = img.min()\n    max_val = img.max()\n    contrast = max_val - min_val\n\n    return contrast\n\ndef load_image_as_gray(path):\n    \"\"\"\n    Load an image from disk and convert it to a grayscale numpy array.\n    Args:\n        path (str): Path to the image file.\n    Returns:\n        numpy.ndarray: 2D array (H x W) with values in [0, 255].\n    \"\"\"\n    try:\n        with Image.open(path) as im:\n            gray = im.convert(\"L\")\n            arr = np.array(gray, dtype=np.uint8)\n            return arr\n    except Exception as e:\n        raise IOError(f\"Could not load image '{path}': {e}\")\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Compute the contrast of a grayscale image \"\n                    \"(difference between its max and min pixel values).\"\n    )\n    parser.add_argument(\n        \"image_path\",\n        help=\"Path to the input image file (will be converted to grayscale).\"\n    )\n    args = parser.parse_args()\n\n    # Load image\n    img_array = load_image_as_gray(args.image_path)\n\n    # Calculate contrast\n    contrast_value = calculate_contrast(img_array)\n\n    print(f\"Image: {args.image_path}\")\n    print(f\"Contrast (max - min): {contrast_value:.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nExplanation of key parts:\n1. `calculate_contrast(img)`:  \n   - Validates the input is a non\u2010empty 2D NumPy array.  \n   - Converts the array to float32, then computes `max(img) - min(img)`.  \n2. `load_image_as_gray(path)`:  \n   - Uses PIL to open any image format, convert it to grayscale (\"L\" mode), and returns a NumPy array of uint8 values 0\u2013255.  \n3. `main()`:  \n   - Parses command\u2010line arguments (image path), loads the image, computes contrast, and prints the result.  \n\nUsage example:\n```bash\npython contrast_calculator.py path/to/your/image.jpg\n```"}
{"task_id": 83, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float or int: The dot product of vec1 and vec2.\n    Raises:\n        ValueError: If inputs are not 1D arrays of the same length.\n    \"\"\"\n    # Ensure both inputs are numpy arrays\n    vec1 = np.asarray(vec1)\n    vec2 = np.asarray(vec2)\n\n    # Check dimensions\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError(\"Both inputs must be 1D arrays.\")\n    if vec1.shape != vec2.shape:\n        raise ValueError(\"Vectors must have the same length.\")\n\n    # Compute and return dot product\n    return np.dot(vec1, vec2)\n\nif __name__ == \"__main__\":\n    # Example usage\n    v1 = np.array([1, 2, 3])\n    v2 = np.array([4, 5, 6])\n    result = calculate_dot_product(v1, v2)\n    print(f\"Dot product of {v1} and {v2} is {result}\")\n```"}
{"task_id": 84, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features\n                           [x^0, x^1, ..., x^degree] of the corresponding data point,\n                           rounded to 8 decimal places. Returns an empty list if degree < 0.\n    \"\"\"\n    if degree < 0:\n        return []\n\n    # Convert input data to a NumPy array of shape (n_samples,)\n    arr = np.array(data, dtype=float)\n\n    # Create exponents from 0 to degree, shape (degree+1,)\n    exponents = np.arange(degree + 1)\n\n    # Compute arr[:, None] ** exponents to get shape (n_samples, degree+1)\n    transformed = arr[:, np.newaxis] ** exponents\n\n    # Round to 8 decimal places and convert to Python nested lists\n    transformed = np.round(transformed, 8)\n    return transformed.tolist()\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    sample_data = [2.0, -1.5, 0.0]\n    degree = 3\n    result = phi_transform(sample_data, degree)\n    print(\"Input data: \", sample_data)\n    print(f\"Phi-transformed (degree={degree}):\")\n    for row in result:\n        print(row)\n```"}
{"task_id": 85, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Compute the positional encoding matrix for Transformer models.\n    Args:\n      position (int): the maximum sequence length (number of positions).\n      d_model (int): the dimensionality of the model.\n    Returns:\n      A Python list of shape (position, d_model) containing the positional encodings\n      (dtype np.float16), or -1 if inputs are invalid.\n    \"\"\"\n    # Return -1 for invalid inputs\n    if position == 0 or d_model <= 0:\n        return -1\n\n    # Initialize the positional encoding matrix\n    pe = np.zeros((position, d_model), dtype=np.float32)\n\n    # Compute the position indices (shape: [position, 1])\n    pos = np.arange(position)[:, np.newaxis]\n\n    # Compute the div_term for even dimensions (shape: [d_model/2])\n    # Using the formula: 1 / (10000^(2i/d_model))\n    i = np.arange(0, d_model, 2)\n    div_term = np.exp(-np.log(10000.0) * i / d_model)\n\n    # Apply sine to even indices; cosine to odd indices\n    pe[:, 0::2] = np.sin(pos * div_term)\n    pe[:, 1::2] = np.cos(pos * div_term)\n\n    # Cast to float16 and convert to nested Python list\n    return pe.astype(np.float16).tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Compute positional encodings for sequence length=5, model dim=6\n    encodings = pos_encoding(5, 6)\n    print(encodings)\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    \n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of 1 (Overfitting), -1 (Underfitting), or 0 (Good fit).\n    \"\"\"\n    # Check for overfitting: training accuracy significantly higher than test accuracy\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    \n    # Check for underfitting: both training and test accuracy are low\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    \n    # Otherwise, it's a good fit\n    return 0\n\n\n# Example usage\nif __name__ == \"__main__\":\n    examples = [\n        (0.95, 0.70),  # likely overfitting\n        (0.65, 0.60),  # likely underfitting\n        (0.85, 0.80),  # good fit\n        (0.80, 0.55),  # overfitting (diff = 0.25)\n        (0.68, 0.72),  # good fit (training < 0.7 but test >= 0.7)\n    ]\n    \n    for train_acc, test_acc in examples:\n        result = model_fit_quality(train_acc, test_acc)\n        status = {1: \"Overfitting\", -1: \"Underfitting\", 0: \"Good fit\"}[result]\n        print(f\"Train: {train_acc:.2f}, Test: {test_acc:.2f} -> {status}\")\n```"}
{"task_id": 87, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_optimizer(parameter, grad, m, v, t,\n                   learning_rate=0.001, beta1=0.9,\n                   beta2=0.999, epsilon=1e-8):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep (integer, starting from 1)\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter_list, updated_m_list, updated_v_list)\n    \"\"\"\n    # Ensure inputs are numpy arrays (and at least 1D so that .tolist() always produces a list)\n    param_np = np.atleast_1d(np.array(parameter, dtype=float))\n    grad_np  = np.atleast_1d(np.array(grad,      dtype=float))\n    m_np     = np.atleast_1d(np.array(m,         dtype=float))\n    v_np     = np.atleast_1d(np.array(v,         dtype=float))\n\n    # Update biased first moment estimate\n    m_t = beta1 * m_np + (1.0 - beta1) * grad_np\n    # Update biased second raw moment estimate\n    v_t = beta2 * v_np + (1.0 - beta2) * (grad_np ** 2)\n    # Compute bias-corrected first moment\n    m_hat = m_t / (1.0 - beta1 ** t)\n    # Compute bias-corrected second moment\n    v_hat = v_t / (1.0 - beta2 ** t)\n    # Update parameters\n    param_t = param_np - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n\n    # Round to 5 decimal places and convert to lists\n    updated_param = np.round(param_t, 5).tolist()\n    updated_m     = np.round(m_t,    5).tolist()\n    updated_v     = np.round(v_t,    5).tolist()\n\n    return updated_param, updated_m, updated_v\n\n# Example usage\nif __name__ == \"__main__\":\n    # Scalar example\n    param, m, v = 0.5, 0.0, 0.0\n    grad = 0.1\n    t = 1\n    new_param, new_m, new_v = adam_optimizer(param, grad, m, v, t)\n    print(\"Scalar update:\")\n    print(\"param:\", new_param)\n    print(\"m:\", new_m)\n    print(\"v:\", new_v)\n\n    # Array example\n    param_arr = [0.5, -0.2, 1.0]\n    grad_arr  = [0.1, -0.05, 0.2]\n    m_arr, v_arr = [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]\n    t = 1\n    up, um, uv = adam_optimizer(param_arr, grad_arr, m_arr, v_arr, t)\n    print(\"\\nArray update:\")\n    print(\"param:\", up)\n    print(\"m:\", um)\n    print(\"v:\", uv)\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    \"\"\"\n    Dummy loader that returns:\n     - a simple BPE encoder with a tiny vocab,\n     - minimal hyperparameters,\n     - randomly initialized model parameters (token + position embeddings,\n       an empty list of transformer blocks, and a final layer norm).\n    \"\"\"\n    class DummyBPE:\n        def __init__(self):\n            # vocabulary: <UNK>=0, \"hello\"=1, \"world\"=2\n            self.encoder_dict = {\"<UNK>\": 0, \"hello\": 1, \"world\": 2}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(t, self.encoder_dict[\"<UNK>\"]) for t in tokens]\n\n        def decode(self, token_ids: list):\n            rev = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join(rev.get(tid, \"<UNK>\") for tid in token_ids)\n\n    # minimal GPT-2 hyperparameters\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12,\n    }\n\n    # dummy parameters\n    params = {\n        # token embedding table: vocab_size=3, d_model=10\n        \"wte\": np.random.randn(3, 10) * 0.1,\n        # positional embeddings: max_ctx=1024, d_model=10\n        \"wpe\": np.random.randn(hparams[\"n_ctx\"], 10) * 0.1,\n        # no real transformer blocks (we will simulate a single block in gen_text)\n        \"blocks\": [],\n        # final layer norm\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\n\ndef gelu(x):\n    \"\"\"Gaussian Error Linear Unit activation.\"\"\"\n    return 0.5 * x * (1.0 + np.tanh(np.sqrt(2.0 / np.pi) * (x + 0.044715 * x**3)))\n\ndef softmax(x, axis=-1):\n    \"\"\"Numerically stable softmax.\"\"\"\n    x_max = np.max(x, axis=axis, keepdims=True)\n    e_x = np.exp(x - x_max)\n    return e_x / np.sum(e_x, axis=axis, keepdims=True)\n\ndef layer_norm(x, g, b, eps=1e-5):\n    \"\"\"\n    Apply LayerNorm over the last dimension of x.\n    g, b are of shape (d_model,)\n    \"\"\"\n    if x.ndim == 1:\n        mu = x.mean()\n        var = x.var()\n        return g * (x - mu) / np.sqrt(var + eps) + b\n    elif x.ndim == 2:\n        mu = x.mean(axis=1, keepdims=True)\n        var = x.var(axis=1, keepdims=True)\n        return g * (x - mu) / np.sqrt(var + eps) + b\n    else:\n        raise ValueError(\"Unsupported tensor rank for layer_norm\")\n\ndef gen_text(prompt: str, n_tokens_to_generate: int = 40):\n    \"\"\"\n    Simplified GPT-2\u2013style autoregressive generation:\n      - token + positional embeddings\n      - one block of self-attention + feed-forward + residual + layer norms\n      - final layer norm + linear projection to token logits\n      - sample next token via softmax\n    \"\"\"\n    encoder, hparams, params = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n\n    # extract embeddings and final layer norm\n    wte = params[\"wte\"]       # (vocab_size, d_model)\n    wpe = params[\"wpe\"]       # (n_ctx, d_model)\n    ln_f = params[\"ln_f\"]     # dict with 'g', 'b'\n    vocab_size, d_model = wte.shape\n\n    # we'll create one set of feed-forward weights (dummy)\n    # hidden size for FFN = 4 * d_model\n    d_ff = 4 * d_model\n    W1 = np.random.randn(d_model, d_ff) * 0.1\n    b1 = np.zeros(d_ff)\n    W2 = np.random.randn(d_ff, d_model) * 0.1\n    b2 = np.zeros(d_model)\n\n    for _ in range(n_tokens_to_generate):\n        # crop context if too long\n        if len(token_ids) > hparams[\"n_ctx\"]:\n            token_ids = token_ids[-hparams[\"n_ctx\"] :]\n\n        seq_len = len(token_ids)\n        # token embeddings + positional embeddings\n        x = wte[token_ids] + wpe[:seq_len]\n\n        # ========== single self-attention block ==========\n        # 1) Self-attention (scaled dot-product), no learned projections for simplicity\n        #    scores: (seq_len, seq_len)\n        scale = np.sqrt(d_model).astype(np.float32)\n        scores = (x @ x.T) / scale\n        attn_probs = softmax(scores, axis=-1)        # (seq_len, seq_len)\n        attn_output = attn_probs @ x                # (seq_len, d_model)\n\n        # 2) residual + layer norm\n        x = x + attn_output\n        x = layer_norm(x, np.ones(d_model), np.zeros(d_model))\n\n        # 3) Feed-forward network\n        ff_hidden = gelu(x @ W1 + b1)               # (seq_len, d_ff)\n        ff_output = ff_hidden @ W2 + b2             # (seq_len, d_model)\n\n        # 4) residual + layer norm\n        x = x + ff_output\n        x = layer_norm(x, np.ones(d_model), np.zeros(d_model))\n\n        # ========== end transformer block ==========\n\n        # final layer norm on last token\n        x_last = layer_norm(x[-1], ln_f[\"g\"], ln_f[\"b\"])  # (d_model,)\n\n        # project to vocabulary to get logits\n        logits = x_last @ wte.T                            # (vocab_size,)\n\n        # sample next token\n        probs = softmax(logits)\n        next_token = np.random.choice(vocab_size, p=probs)\n        token_ids.append(int(next_token))\n\n    # decode the full sequence\n    return encoder.decode(token_ids)\n\nif __name__ == \"__main__\":\n    prompt = \"hello world\"\n    generated = gen_text(prompt, n_tokens_to_generate=10)\n    print(\"Prompt:   \", prompt)\n    print(\"Generated:\", generated)\n```"}
{"task_id": 89, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pattern_weaver(n, crystal_values, dimension):\n    def softmax(x):\n        # numerically stable softmax\n        exps = np.exp(x - np.max(x))\n        return exps / np.sum(exps)\n\n    # Convert input list to numpy array\n    values = np.array(crystal_values, dtype=float)  # shape (n,)\n\n    # Build Q, K, V by repeating each scalar value across `dimension` components\n    # Q, K, V will each have shape (n, dimension)\n    Q = np.tile(values.reshape(n, 1), (1, dimension))\n    K = Q.copy()\n    V = Q.copy()\n\n    # Compute raw attention scores: (Q @ K^T) / sqrt(dimension)\n    scores = (Q @ K.T) / np.sqrt(dimension)  # shape (n, n)\n\n    # Apply softmax row-wise to get attention weights\n    attention = np.zeros_like(scores)\n    for i in range(n):\n        attention[i, :] = softmax(scores[i, :])\n\n    # Compute the weighted sum of V for each query position\n    # weighted_vectors has shape (n, dimension)\n    weighted_vectors = attention @ V\n\n    # Since each weighted vector's components are identical (we replicated V),\n    # we can collapse to a single scalar by averaging. Then round to 4 decimals.\n    output = [round(vec.mean(), 4) for vec in weighted_vectors]\n\n    return output\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    crystal_values = [1.0, 2.0, 3.0, 2.0, 1.0]\n    dimension = 3\n    patterns = pattern_weaver(n, crystal_values, dimension)\n    print(patterns)\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for a corpus of documents given a query.\n    \n    Parameters:\n    - corpus: list of strings, each string is a document.\n    - query: string, the search query.\n    - k1: float, term frequency saturation parameter.\n    - b: float, document length normalization parameter.\n    \n    Returns:\n    - List of BM25 scores (floats rounded to three decimals), one per document.\n    \"\"\"\n    # Tokenize documents and compute lengths\n    tokenized_docs = [doc.lower().split() for doc in corpus]\n    doc_lengths = np.array([len(doc) for doc in tokenized_docs], dtype=float)\n    avgdl = np.mean(doc_lengths)\n    N = len(corpus)\n\n    # Document frequency for each term\n    df = Counter()\n    for doc in tokenized_docs:\n        for term in set(doc):\n            df[term] += 1\n\n    # Tokenize query\n    query_terms = query.lower().split()\n\n    scores = []\n    for idx, doc in enumerate(tokenized_docs):\n        doc_len = doc_lengths[idx]\n        freqs = Counter(doc)\n        score = 0.0\n        for term in query_terms:\n            if term in freqs:\n                # Inverse document frequency component\n                n_q = df.get(term, 0)\n                idf = np.log((N - n_q + 0.5) / (n_q + 0.5) + 1)\n                \n                # Term frequency component with normalization\n                f = freqs[term]\n                numerator = f * (k1 + 1)\n                denominator = f + k1 * (1 - b + b * (doc_len / avgdl))\n                \n                score += idf * (numerator / denominator)\n        scores.append(round(score, 3))\n\n    return scores\n\n# Example usage:\nif __name__ == \"__main__\":\n    corpus = [\n        \"The quick brown fox jumps over the lazy dog\",\n        \"Never jump over the lazy dog quickly\",\n        \"A fast brown fox leaps over sleeping dogs\"\n    ]\n    query = \"brown fox\"\n    print(calculate_bm25_scores(corpus, query))\n```"}
{"task_id": 91, "completion_id": 0, "completion": "```python\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError(\"The length of y_true and y_pred must be the same.\")\n\n    # Count true positives, false positives, and false negatives\n    tp = fp = fn = 0\n    for true, pred in zip(y_true, y_pred):\n        if pred == 1 and true == 1:\n            tp += 1\n        elif pred == 1 and true != 1:\n            fp += 1\n        elif pred != 1 and true == 1:\n            fn += 1\n\n    # Precision and recall calculations\n    precision = tp / (tp + fp) if (tp + fp) > 0 else 0.0\n    recall = tp / (tp + fn) if (tp + fn) > 0 else 0.0\n\n    # F1 score calculation\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n\n    return round(f1, 3)\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    y_true = [0, 1, 1, 1, 0, 1, 0, 0, 1, 0]\n    y_pred = [0, 1, 0, 1, 0, 1, 1, 0, 0, 0]\n\n    score = calculate_f1_score(y_true, y_pred)\n    print(f\"F1 Score: {score}\")\n```"}
{"task_id": 92, "completion_id": 0, "completion": "```python\nimport math\nPI = 3.14159\n\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Given a list of 10 daily power consumption measurements (list of floats or ints),\n    this function:\n      1) Removes the known daily fluctuation f(i) = 10 * sin(2\u03c0 i / 10)\n      2) Fits a linear regression y = m*x + b to the detrended data (x = day number)\n      3) Predicts the base (trend) consumption on day 15\n      4) Adds back the fluctuation for day 15\n      5) Rounds the result to nearest integer, then adds a 5% safety margin (rounded up)\n      6) Returns the final integer forecast\n    \"\"\"\n    n = len(consumption_data)\n    if n != 10:\n        raise ValueError(\"Exactly 10 data points are required.\")\n    # 1) Detrend by subtracting known sine fluctuation\n    detrended = []\n    for i, obs in enumerate(consumption_data, start=1):\n        fluct = 10 * math.sin(2 * PI * i / 10)\n        detrended.append(obs - fluct)\n    # 2) Perform linear regression on (x = 1..10, y = detrended)\n    x_vals = list(range(1, n+1))\n    sum_x = sum(x_vals)\n    sum_y = sum(detrended)\n    sum_xy = sum(x * y for x, y in zip(x_vals, detrended))\n    sum_x2 = sum(x * x for x in x_vals)\n    # slope (m) and intercept (b)\n    denom = (n * sum_x2 - sum_x * sum_x)\n    if denom == 0:\n        raise ValueError(\"Denominator in regression computation is zero.\")\n    m = (n * sum_xy - sum_x * sum_y) / denom\n    b = (sum_y - m * sum_x) / n\n    # 3) Predict day 15 base consumption\n    base_15 = m * 15 + b\n    # 4) Add back fluctuation for day 15\n    fluct_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_15 = base_15 + fluct_15\n    # 5) Round, then add 5% safety margin (rounded up)\n    rounded_pred = round(predicted_15)\n    final_with_margin = math.ceil(rounded_pred * 1.05)\n    return final_with_margin\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Replace the following list with the actual 10 days of consumption data\n    sample_data = [123.4, 130.1, 128.7, 135.2, 140.0, 142.5, 150.3, 155.1, 160.0, 165.2]\n    forecast = power_grid_forecast(sample_data)\n    print(\"Forecasted consumption for day 15 (with 5% margin):\", forecast)\n```"}
{"task_id": 93, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    # Ensure inputs are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Check that the shapes match\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\n            f\"Shape mismatch: y_true has shape {y_true.shape}, \"\n            f\"but y_pred has shape {y_pred.shape}\"\n        )\n    \n    # Compute the absolute errors\n    abs_errors = np.abs(y_true - y_pred)\n    \n    # Compute the mean of those errors\n    error_mean = np.mean(abs_errors)\n    \n    # Round to 3 decimal places and return as Python float\n    return float(np.round(error_mean, 3))\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    true_values = np.array([3.0, -0.5, 2.0, 7.0])\n    pred_values = np.array([2.5, 0.0, 2.0, 8.0])\n    \n    result = mae(true_values, pred_values)\n    print(f\"Mean Absolute Error: {result}\")\n```"}
{"task_id": 94, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray,\n                W_q: np.ndarray,\n                W_k: np.ndarray,\n                W_v: np.ndarray):\n    \"\"\"\n    Compute query, key, and value matrices.\n    X: (seq_len, d_model)\n    W_q, W_k, W_v: (d_model, d_model)\n    Returns Q, K, V each of shape (seq_len, d_model)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return Q, K, V\n\ndef self_attention(Q: np.ndarray,\n                   K: np.ndarray,\n                   V: np.ndarray):\n    \"\"\"\n    Compute self-attention for a single head.\n    Q, K, V: (seq_len, d_k)\n    Returns: (seq_len, d_k)\n    \"\"\"\n    d_k = Q.shape[-1]\n    # scaled dot-product\n    scores = (Q @ K.T) / np.sqrt(d_k)\n    # row-wise softmax with numerical stability\n    scores = scores - np.max(scores, axis=1, keepdims=True)\n    exp_scores = np.exp(scores)\n    attn = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    # weighted sum of values\n    out = attn @ V\n    return out\n\ndef multi_head_attention(X: np.ndarray,\n                         W_q: np.ndarray,\n                         W_k: np.ndarray,\n                         W_v: np.ndarray,\n                         n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention.\n    X: (seq_len, d_model)\n    W_q, W_k, W_v: (d_model, d_model)\n    n_heads: number of heads\n    Returns a Python list of shape (seq_len, d_model), rounded to 4 decimals.\n    \"\"\"\n    seq_len, d_model = X.shape\n    assert d_model % n_heads == 0, \"d_model must be divisible by n_heads\"\n    d_k = d_model // n_heads\n\n    # 1) Compute Q, K, V\n    Q, K, V = compute_qkv(X, W_q, W_k, W_v)\n\n    # 2) Split into heads: reshape to (seq_len, n_heads, d_k)\n    Qh = Q.reshape(seq_len, n_heads, d_k)\n    Kh = K.reshape(seq_len, n_heads, d_k)\n    Vh = V.reshape(seq_len, n_heads, d_k)\n\n    # 3) Compute self-attention per head\n    heads = []\n    for h in range(n_heads):\n        qh = Qh[:, h, :]  # (seq_len, d_k)\n        kh = Kh[:, h, :]\n        vh = Vh[:, h, :]\n        head_out = self_attention(qh, kh, vh)  # (seq_len, d_k)\n        heads.append(head_out)\n\n    # 4) Concatenate heads: along feature dimension\n    # heads is list of (seq_len, d_k) -> stack to (seq_len, d_model)\n    multi_head = np.concatenate(heads, axis=1)  # (seq_len, d_model)\n\n    # 5) Round and convert to Python list\n    multi_head = np.round(multi_head, 4)\n    return multi_head.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # random example\n    np.random.seed(0)\n    seq_len = 5\n    d_model = 8\n    n_heads = 2\n\n    X = np.random.rand(seq_len, d_model)\n    W_q = np.random.rand(d_model, d_model)\n    W_k = np.random.rand(d_model, d_model)\n    W_v = np.random.rand(d_model, d_model)\n\n    output = multi_head_attention(X, W_q, W_k, W_v, n_heads)\n    print(output)\n```"}
{"task_id": 95, "completion_id": 0, "completion": "```python\nimport math\nfrom typing import List\n\ndef phi_corr(x: List[int], y: List[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n        x (list[int]): A list of binary values (0 or 1).\n        y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n        float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    # Initialize contingency counts\n    n11 = n10 = n01 = n00 = 0\n\n    for xi, yi in zip(x, y):\n        if xi not in (0, 1) or yi not in (0, 1):\n            raise ValueError(\"All elements in input lists must be 0 or 1.\")\n        if xi == 1 and yi == 1:\n            n11 += 1\n        elif xi == 1 and yi == 0:\n            n10 += 1\n        elif xi == 0 and yi == 1:\n            n01 += 1\n        else:  # xi == 0 and yi == 0\n            n00 += 1\n\n    # Marginal sums\n    n1_ = n11 + n10  # x = 1\n    n0_ = n01 + n00  # x = 0\n    n_1 = n11 + n01  # y = 1\n    n_0 = n10 + n00  # y = 0\n\n    # Compute denominator\n    denom = math.sqrt(n1_ * n0_ * n_1 * n_0)\n    if denom == 0:\n        # Phi is undefined if any marginal sum is zero\n        raise ValueError(\"Division by zero: one of the marginals is zero, Phi undefined.\")\n\n    # Compute Phi coefficient\n    phi = (n11 * n00 - n10 * n01) / denom\n    return round(phi, 4)\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    x1 = [1, 0, 1, 0, 1, 0, 1, 0]\n    y1 = [1, 1, 0, 0, 1, 1, 0, 0]\n    print(\"Example 1 Phi coefficient:\", phi_corr(x1, y1))  # Should output 0.0\n\n    # Another test\n    x2 = [1, 1, 1, 0, 0, 0, 1, 0, 1, 0]\n    y2 = [1, 0, 1, 1, 0, 0, 1, 0, 1, 0]\n    print(\"Example 2 Phi coefficient:\", phi_corr(x2, y2))\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    # Hard sigmoid approximation: clip(0.2 * x + 0.5, 0, 1)\n    y = 0.2 * x + 0.5\n    if y < 0.0:\n        return 0.0\n    elif y > 1.0:\n        return 1.0\n    else:\n        return y\n\n\nif __name__ == \"__main__\":\n    # Example usage and simple tests\n    test_values = [-10.0, -3.0, -2.5, -1.0, 0.0, 1.0, 2.5, 3.0, 10.0]\n    for val in test_values:\n        print(f\"hard_sigmoid({val}) = {hard_sigmoid(val)}\")\n```\n"}
{"task_id": 97, "completion_id": 0, "completion": "```python\nimport math\n\ndef elu(x: float, alpha: float = 1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to the 4th decimal place\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)\n\nif __name__ == \"__main__\":\n    # Example usages and test cases\n    test_values = [-3.0, -1.0, 0.0, 1.0, 2.5]\n    alpha = 1.0\n\n    for x in test_values:\n        y = elu(x, alpha)\n        print(f\"elu({x}, alpha={alpha}) = {y}\")\n```\n"}
{"task_id": 98, "completion_id": 0, "completion": "```python\ndef prelu(x: float, alpha: float = 0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x\n\n\nif __name__ == \"__main__\":\n    # Example usage and simple tests\n    test_values = [-3.0, -1.0, 0.0, 1.0, 4.0]\n    default_alpha = 0.25\n    custom_alpha = 0.1\n\n    print(f\"Testing PReLU with default alpha = {default_alpha}\")\n    for v in test_values:\n        y = prelu(v, default_alpha)\n        print(f\"prelu({v}, alpha={default_alpha}) = {y}\")\n\n    print(\"\\nTesting PReLU with custom alpha = {custom_alpha}\")\n    for v in test_values:\n        y = prelu(v, custom_alpha)\n        print(f\"prelu({v}, alpha={custom_alpha}) = {y}\")\n```\n"}
{"task_id": 99, "completion_id": 0, "completion": "```python\nimport math\n\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places\n    \"\"\"\n    # Use a numerically stable formulation:\n    # softplus(x) = log(1 + exp(x))\n    # If x > 0: log(1 + exp(x)) = x + log(1 + exp(-x))\n    # If x <= 0: use log1p(exp(x))\n    if x > 0:\n        result = x + math.log1p(math.exp(-x))\n    else:\n        result = math.log1p(math.exp(x))\n    return round(result, 4)\n\nif __name__ == \"__main__\":\n    # Example usage\n    inputs = [ -1000, -1, 0, 1, 10, 1000 ]\n    for val in inputs:\n        print(f\"softplus({val}) = {softplus(val)}\")\n```"}
{"task_id": 100, "completion_id": 0, "completion": "```python\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)\n\n\nif __name__ == \"__main__\":\n    # Example usage and simple tests\n    test_values = [-10.0, -1.0, -0.5, 0.0, 0.5, 1.0, 10.0]\n    for val in test_values:\n        print(f\"softsign({val}) = {softsign(val)}\")\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value (rounded to 6 decimal places).\n    \"\"\"\n    # Convert all inputs to numpy arrays\n    rhos = np.array(rhos, dtype=np.float64)\n    A = np.array(A, dtype=np.float64)\n    p_old = np.array(pi_theta_old, dtype=np.float64)\n    p_ref = np.array(pi_theta_ref, dtype=np.float64)\n\n    # Sanity checks\n    if not (rhos.shape == A.shape == p_old.shape == p_ref.shape):\n        raise ValueError(\"All input arrays must have the same shape.\")\n\n    # 1) Surrogate objective with clipping (like PPO)\n    #    L_i = min(rho_i * A_i, clip(rho_i, 1 - eps, 1 + eps) * A_i)\n    clipped_rhos = np.clip(rhos, 1.0 - epsilon, 1.0 + epsilon)\n    term1 = rhos * A\n    term2 = clipped_rhos * A\n    surrogate_terms = np.minimum(term1, term2)\n    surrogate_obj = np.mean(surrogate_terms)\n\n    # 2) KL divergence penalty between new policy and reference policy\n    #    We approximate the new policy probs by p_new_i = rho_i * p_old_i\n    #    Then D_KL(p_new || p_ref) = sum_i p_new_i * (log p_new_i - log p_ref_i)\n    #    We add a small eps inside the log for numerical stability.\n    eps_log = 1e-12\n    p_new = rhos * p_old\n    kl_terms = p_new * (np.log(p_new + eps_log) - np.log(p_ref + eps_log))\n    kl_div = np.sum(kl_terms)\n\n    # 3) GRPO objective: surrogate minus beta * KL penalty\n    obj = surrogate_obj - beta * kl_div\n\n    # Round to 6 decimal places\n    return float(np.round(obj, 6))\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # dummy data\n    rhos = [1.1, 0.9, 1.05, 0.95]\n    A = [0.5, -0.2, 1.0, 0.3]\n    p_old = [0.25, 0.25, 0.25, 0.25]\n    p_ref = [0.2, 0.3, 0.3, 0.2]\n\n    obj_value = grpo_objective(rhos, A, p_old, p_ref, epsilon=0.2, beta=0.01)\n    print(\"GRPO objective:\", obj_value)\n```"}
{"task_id": 102, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to 4 decimal places\n    \"\"\"\n    # Sigmoid part: 1 / (1 + exp(-x))\n    sigmoid = 1.0 / (1.0 + math.exp(-x))\n    # Swish: x * sigmoid(x)\n    val = x * sigmoid\n    # Round to nearest 4th decimal place\n    return round(val, 4)\n\nif __name__ == \"__main__\":\n    # Example usage: read a number from the user and print its Swish activation\n    try:\n        inp = input(\"Enter a numeric value for x: \").strip()\n        x_value = float(inp)\n        result = swish(x_value)\n        print(f\"Swish({x_value}) = {result}\")\n    except ValueError:\n        print(\"Please enter a valid numeric value.\")\n```\n\nExplanation:\n1. We import `math` (for `exp`) and `numpy` (available if array-based extensions are needed in future).\n2. The `swish` function computes the sigmoid component and multiplies by `x`.\n3. The result is rounded to 4 decimal places as required.\n4. In the `__main__` block, we prompt the user for an input, convert it to float, call `swish`, and print the rounded result."}
{"task_id": 103, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to 4 decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554804\n\n    if x > 0:\n        result = scale * x\n    else:\n        # use math.exp for scalar stability\n        result = scale * (alpha * (math.exp(x) - 1))\n\n    # round to the nearest 4th decimal\n    return round(result, 4)\n\nif __name__ == \"__main__\":\n    # example usage and simple tests\n    test_values = np.array([-3.0, -1.0, 0.0, 0.5, 1.0, 3.0])\n    print(\"x\\tSELU(x)\")\n    for v in test_values:\n        print(f\"{v}\\t{selu(float(v))}\")\n```"}
{"task_id": 104, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1) as a Python list\n    \"\"\"\n    # Linear combination\n    z = np.dot(X, weights) + bias\n    \n    # Sigmoid function to get probabilities\n    probs = 1 / (1 + np.exp(-z))\n    \n    # Convert probabilities to binary predictions using 0.5 threshold\n    preds = (probs >= 0.5).astype(int)\n    \n    # Return as Python list\n    return preds.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage\n    # Create a toy dataset with 5 samples and 3 features\n    X_test = np.array([\n        [0.2, 1.1, -0.3],\n        [1.2, -0.7, 0.8],\n        [0.5, 0.2, 0.1],\n        [-1.5, 2.3, 0.7],\n        [0.0, 0.0, 0.0]\n    ])\n    \n    # Example weights and bias\n    weights = np.array([0.4, -0.6, 0.1])\n    bias = 0.2\n    \n    # Get binary predictions\n    predictions = predict_logistic(X_test, weights, bias)\n    print(\"Predictions:\", predictions)\n```"}
{"task_id": 105, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list, list]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: np.ndarray of shape (N, M), input data (N samples, M features)\n        y: np.ndarray of shape (N,), integer class labels in [0..C-1]\n        learning_rate: float, step size for gradient descent\n        iterations: int, number of GD steps\n\n    Returns:\n        B : list of lists, shape (C, M), updated parameter matrix rounded to 4 decimals\n        losses : list of floats, Cross Entropy loss per iteration rounded to 4 decimals\n    \"\"\"\n    N, M = X.shape\n    C = int(y.max()) + 1\n\n    # Initialize weights (C x M)\n    W = np.zeros((C, M))\n\n    losses = []\n    for it in range(iterations):\n        # Compute class scores\n        scores = X.dot(W.T)                           # shape (N, C)\n        scores -= np.max(scores, axis=1, keepdims=True)  # for numerical stability\n\n        # Softmax probabilities\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)  # (N, C)\n\n        # Compute cross-entropy loss\n        correct_logprobs = -np.log(probs[np.arange(N), y])\n        loss = np.sum(correct_logprobs) / N\n        losses.append(round(loss, 4))\n\n        # Compute gradient on scores\n        dscores = probs\n        dscores[np.arange(N), y] -= 1\n        dscores /= N                                 # (N, C)\n\n        # Backpropagate the gradient to the weights W\n        dW = dscores.T.dot(X)                        # shape (C, M)\n\n        # Parameter update\n        W -= learning_rate * dW\n\n    # Round parameters to 4 decimals and convert to Python list\n    B = np.round(W, 4).tolist()\n\n    return B, losses\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Toy dataset\n    np.random.seed(0)\n    X_dummy = np.random.randn(100, 5)\n    y_dummy = np.random.randint(0, 3, 100)\n    lr = 0.1\n    iters = 200\n\n    B_opt, loss_history = train_softmaxreg(X_dummy, y_dummy, lr, iters)\n    print(\"Optimized parameters (B):\", B_opt)\n    print(\"Loss history:\", loss_history)\n```"}
{"task_id": 106, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters\n    with Binary Cross Entropy loss.\n    \n    Returns:\n        coeffs: list of optimized coefficients (first element is intercept) rounded to 4 decimals\n        losses: list of BCE loss values at each iteration rounded to 4 decimals\n    \"\"\"\n    # Number of samples (m) and features (n)\n    m, n = X.shape\n\n    # Add intercept term by augmenting X with a column of ones\n    X_aug = np.hstack((np.ones((m, 1)), X))  # shape (m, n+1)\n\n    # Initialize weights (including intercept) to zeros\n    w = np.zeros(n + 1, dtype=float)\n\n    losses = []\n\n    for i in range(iterations):\n        # Linear combination\n        z = X_aug.dot(w)  # shape (m,)\n\n        # Sigmoid activation\n        p = 1.0 / (1.0 + np.exp(-z))\n\n        # Binary Cross Entropy loss (with epsilon for numerical stability)\n        eps = 1e-15\n        loss = -np.mean(y * np.log(p + eps) + (1 - y) * np.log(1 - p + eps))\n\n        # Gradient computation\n        grad = (1.0 / m) * X_aug.T.dot(p - y)  # shape (n+1,)\n\n        # Parameter update\n        w -= learning_rate * grad\n\n        # Store rounded loss\n        losses.append(round(loss, 4))\n\n    # Round final coefficients to 4 decimals and convert to a Python list\n    coeffs = np.round(w, 4).tolist()\n\n    return coeffs, losses\n```\n\nExplanation of key steps:\n\n1. We augment `X` with a column of ones to learn an intercept term jointly with feature weights.\n2. We initialize the weight vector `w` (length `n_features + 1`) to zeros.\n3. In each iteration:\n   - Compute predictions using the sigmoid function.\n   - Compute the binary cross entropy loss.\n   - Compute gradients with respect to all weights.\n   - Update weights by stepping in the negative gradient direction.\n4. We collect and round the loss at each iteration and round the final coefficients before returning."}
{"task_id": 107, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\n\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> list:\n    \"\"\"\n    Compute masked self-attention.\n    Q, K, V: shape (seq_len, d_k)\n    mask: shape (seq_len, seq_len), with 0 for allowed, -inf (or a large negative) for masked positions\n    Returns:\n      attended output of shape (seq_len, d_k) as a Python list.\n    \"\"\"\n    # 1. Scaled dot-product scores: (seq_len, seq_len)\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n\n    # 2. Apply the mask (add -inf to masked positions)\n    masked_scores = scores + mask\n\n    # 3. Softmax over last axis (each query attends over all keys)\n    #    Numerically stable softmax\n    max_per_row = np.max(masked_scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(masked_scores - max_per_row)\n    attn_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n\n    # 4. Weighted sum of values\n    output = np.dot(attn_weights, V)\n\n    # 5. Return as Python list\n    return output.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage\n    np.random.seed(0)\n    seq_len = 5    # sequence length\n    d_model = 4    # embedding dimension\n\n    # Random input sequence embeddings\n    X = np.random.randn(seq_len, d_model)\n\n    # Random projection matrices\n    W_q = np.random.randn(d_model, d_model)\n    W_k = np.random.randn(d_model, d_model)\n    W_v = np.random.randn(d_model, d_model)\n\n    # Create a causal mask: allow positions i <= j, mask out future positions\n    # We'll use a large negative value for masked positions\n    large_neg = -1e9\n    mask = np.triu(np.ones((seq_len, seq_len)) * large_neg, k=1)\n\n    # Compute Q, K, V\n    Q, K, V = compute_qkv(X, W_q, W_k, W_v)\n\n    # Compute masked self-attention\n    attn_output = masked_attention(Q, K, V, mask)\n\n    # attn_output is a Python list of shape (seq_len, d_model)\n    print(attn_output)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    Uses Shannon entropy (base-2) of the color distribution, which is 0 when\n    all apples are the same color and increases as the variety (and evenness)\n    of colors increases.\n    Results are rounded to the nearest 4th decimal.\n    \"\"\"\n    n = len(apples)\n    if n <= 1:\n        return 0.0\n    freqs = Counter(apples)\n    H = 0.0\n    for count in freqs.values():\n        p = count / n\n        H -= p * math.log2(p)\n    return round(H, 4)\n\nif __name__ == \"__main__\":\n    tests = [\n        [0, 0, 0, 0],\n        [1, 1, 0, 0],\n        [0, 1, 2, 3],\n        [0, 0, 1, 1, 2, 2, 3, 3],\n        [0, 0, 0, 0, 0, 1, 2, 3],\n        [],                    # edge case: empty basket\n        [5],                   # edge case: single apple\n    ]\n\n    for apples in tests:\n        print(f\"{apples} \u2192 disorder = {disorder(apples)}\")\n```\n\nExplanation of properties:\n- `[0, 0, 0, 0]` \u2192 entropy = 0.0  \n- `[1, 1, 0, 0]` \u2192 two colors equally likely \u2192 entropy = 1.0  \n- `[0, 1, 2, 3]` \u2192 four colors equally likely \u2192 entropy = 2.0  \n- `[0, 0, 1, 1, 2, 2, 3, 3]` \u2192 each of 4 colors has equal share \u2192 entropy = 2.0  \n- `[0, 0, 0, 0, 0, 1, 2, 3]` \u2192 one dominant color, three rare \u2192 entropy \u2248 1.5488  \n\nThis fulfills all the requirements: zero disorder for a uniform basket, and strictly increasing disorder as color variety and balance increase."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef layer_normalization(X: np.ndarray,\n                        gamma: np.ndarray,\n                        beta: np.ndarray,\n                        epsilon: float = 1e-5):\n    \"\"\"\n    Perform Layer Normalization on 3D input tensor X.\n\n    Parameters:\n    - X: np.ndarray of shape (batch_size, seq_len, feature_dim)\n    - gamma: np.ndarray of shape (feature_dim,)\n    - beta: np.ndarray of shape (feature_dim,)\n    - epsilon: small float added to variance for numerical stability\n\n    Returns:\n    - A Python list corresponding to the layer-normalized output,\n      rounded to 5 decimal places.\n    \"\"\"\n    # Compute mean and variance across the feature dimension\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n\n    # Normalize\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n\n    # Scale and shift: broadcast gamma and beta over batch and sequence dims\n    out = X_norm * gamma.reshape(1, 1, -1) + beta.reshape(1, 1, -1)\n\n    # Round to 5 decimal places and convert to list\n    out_rounded = np.round(out, 5)\n    return out_rounded.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random tensor: batch_size=2, seq_len=3, feature_dim=4\n    np.random.seed(0)\n    X = np.random.randn(2, 3, 4)\n    gamma = np.ones(4)       # scale\n    beta = np.zeros(4)       # shift\n\n    normalized = layer_normalization(X, gamma, beta)\n    print(normalized)\n```"}
{"task_id": 110, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score between a reference and a candidate sentence.\n    \n    Args:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation.\n        alpha (float): Parameter for F\u2010mean (default=0.9).\n        beta (int): Parameter for fragmentation penalty exponent (default=3).\n        gamma (float): Parameter for fragmentation penalty scale (default=0.5).\n    \n    Returns:\n        float: METEOR score rounded to 3 decimal places.\n    \"\"\"\n    # 1) Tokenization (simple whitespace, lowercased)\n    ref_tokens = reference.lower().split()\n    can_tokens = candidate.lower().split()\n    \n    # 2) Count unigram matches\n    ref_counts = Counter(ref_tokens)\n    can_counts = Counter(can_tokens)\n    matches = sum(min(ref_counts[w], can_counts[w]) for w in can_counts)\n    if matches == 0:\n        return 0.0\n    \n    # 3) Precision and Recall\n    precision = matches / len(can_tokens)\n    recall = matches / len(ref_tokens)\n    \n    # 4) F\u2010mean\n    denom = (1 - alpha) * precision + alpha * recall\n    fmean = (precision * recall / denom) if denom > 0 else 0.0\n    \n    # 5) Fragmentation penalty:\n    #    align each matched candidate token to the earliest unused ref position\n    pos_map = {}\n    for idx, tok in enumerate(ref_tokens):\n        pos_map.setdefault(tok, []).append(idx)\n    used_idx = {tok: 0 for tok in pos_map}\n    \n    matched_positions = []\n    for tok in can_tokens:\n        if tok in pos_map and used_idx[tok] < len(pos_map[tok]):\n            matched_positions.append(pos_map[tok][used_idx[tok]])\n            used_idx[tok] += 1\n    \n    # count chunks: contiguous runs in matched_positions\n    chunks = 0\n    prev = -2\n    for p in matched_positions:\n        if p != prev + 1:\n            chunks += 1\n        prev = p\n    \n    penalty = gamma * (chunks / matches) ** beta\n    \n    # 6) Final METEOR score\n    score = fmean * (1 - penalty)\n    return round(score, 3)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    ref = \"the cat sat on the mat\"\n    cand = \"the cat is on mat\"\n    print(\"METEOR score:\", meteor_score(ref, cand))\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI):\n        PMI(x, y) = log2( P(x, y) / (P(x) * P(y)) )\n    where\n        P(x, y) = joint_counts / total_samples\n        P(x)    = total_counts_x / total_samples\n        P(y)    = total_counts_y / total_samples\n\n    Parameters:\n    - joint_counts    : int or array-like of joint occurrence counts for (x, y)\n    - total_counts_x  : int or array-like of marginal counts for x\n    - total_counts_y  : int or array-like of marginal counts for y\n    - total_samples   : int  total number of samples\n\n    Returns:\n    - PMI value (float) or numpy array of PMI values, rounded to 3 decimals.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for vectorized computation\n    joint = np.array(joint_counts, dtype=float)\n    count_x = np.array(total_counts_x, dtype=float)\n    count_y = np.array(total_counts_y, dtype=float)\n\n    # Estimate probabilities\n    p_xy = joint / total_samples\n    p_x  = count_x / total_samples\n    p_y  = count_y / total_samples\n\n    # To avoid division by zero or log of zero, mask invalid entries\n    # PMI is defined only when joint > 0, p_x > 0, p_y > 0\n    valid = (p_xy > 0) & (p_x > 0) & (p_y > 0)\n\n    # Initialize PMI array filled with -inf for invalid cases\n    pmi = np.full_like(p_xy, fill_value=-np.inf, dtype=float)\n\n    # Compute PMI only on valid entries\n    pmi[valid] = np.log2(p_xy[valid] / (p_x[valid] * p_y[valid]))\n\n    # Round to 3 decimal places\n    pmi = np.round(pmi, 3)\n\n    # If inputs were scalars, return a scalar\n    if np.isscalar(joint_counts) and np.isscalar(total_counts_x) and np.isscalar(total_counts_y):\n        return float(pmi)\n    return pmi\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Suppose we observed:\n    #   joint count of event X and Y = 30\n    #   count of event X             = 100\n    #   count of event Y             = 80\n    #   total samples                = 1000\n    pmi_value = compute_pmi(30, 100, 80, 1000)\n    print(\"PMI:\", pmi_value)  # e.g., PMI: 0.321\n```"}
{"task_id": 112, "completion_id": 0, "completion": "```python\ndef min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers,\n    scaling them to the range [0, 1]. If all values are identical,\n    returns a list of 0.0s of the same length.\n    The results are rounded to 4 decimal places.\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    range_val = max_val - min_val\n    if range_val == 0:\n        # Avoid division by zero when all elements are the same\n        return [0.0 for _ in x]\n    return [round((v - min_val) / range_val, 4) for v in x]\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n    data_samples = [10, 20, 30, 40, 50]\n    normalized_samples = min_max(data_samples)\n    print(f\"Original:   {data_samples}\")\n    print(f\"Normalized: {normalized_samples}\")\n```\n\nExplanation:\n1. We first check if the input list is empty and return an empty list if so.\n2. Compute `min_val` and `max_val`.\n3. If all values are identical (`range_val == 0`), we return a list of zeros.\n4. Otherwise, for each value `v`, compute `(v - min_val) / (max_val - min_val)` and round to 4 decimal places."}
{"task_id": 113, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x: np.ndarray) -> np.ndarray:\n    \"\"\"Applies the ReLU activation elementwise.\"\"\"\n    return np.maximum(0, x)\n\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    A simple 1D residual block with a shortcut connection.\n    \n    Args:\n        x   (np.ndarray): 1D input array of shape (d,).\n        w1  (np.ndarray): Weight matrix for the first layer, shape (d, d).\n        w2  (np.ndarray): Weight matrix for the second layer, shape (d, d).\n    \n    Returns:\n        list: The output of the block after final ReLU, rounded to 4 decimals.\n    \"\"\"\n    # First layer + ReLU\n    h1 = relu(x.dot(w1))\n    # Second layer + ReLU\n    h2 = relu(h1.dot(w2))\n    # Add shortcut (original input) and apply final ReLU\n    out = relu(h2 + x)\n    # Round and convert to Python list\n    return np.round(out, 4).tolist()\n\nif __name__ == \"__main__\":\n    # Example usage\n    np.random.seed(42)\n    d = 5  # dimensionality\n    x  = np.random.randn(d)          # random 1D input\n    w1 = np.random.randn(d, d)       # random weights for layer 1\n    w2 = np.random.randn(d, d)       # random weights for layer 2\n\n    output = residual_block(x, w1, w2)\n    print(\"Residual block output:\", output)\n```"}
{"task_id": 114, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Performs Global Average Pooling on a 3D input array.\n    \n    Parameters\n    ----------\n    x : np.ndarray\n        Input feature map of shape (height, width, channels).\n    \n    Returns\n    -------\n    np.ndarray\n        1D array of shape (channels,), where each element is the average\n        of all values in the corresponding feature map.\n    \n    Raises\n    ------\n    ValueError\n        If input is not a 3D NumPy array.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise ValueError(f\"Expected input to be a NumPy array, got {type(x)}\")\n    if x.ndim != 3:\n        raise ValueError(f\"Expected 3D input (H, W, C), but got array with shape {x.shape}\")\n    \n    # Compute mean over height and width for each channel\n    return x.mean(axis=(0, 1))\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    # Create a dummy feature map of shape (height=4, width=3, channels=2)\n    feature_map = np.array([\n        [[1, 10], [2, 20], [3, 30]],\n        [[4, 40], [5, 50], [6, 60]],\n        [[7, 70], [8, 80], [9, 90]],\n        [[10, 100], [11, 110], [12, 120]]\n    ], dtype=float)\n    \n    print(\"Input feature map shape:\", feature_map.shape)\n    print(\"Feature map:\\n\", feature_map)\n    \n    pooled = global_avg_pool(feature_map)\n    print(\"Global average pooled output shape:\", pooled.shape)\n    print(\"Pooled output:\", pooled)\n```\n"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef batch_normalization(X: np.ndarray,\n                        gamma: np.ndarray,\n                        beta: np.ndarray,\n                        epsilon: float = 1e-5):\n    \"\"\"\n    Performs batch normalization on a 4D input (B, C, H, W).\n    \n    Parameters:\n    - X:     Input array of shape (batch_size, channels, height, width)\n    - gamma: Scale parameters, shape (channels,)\n    - beta:  Shift parameters, shape (channels,)\n    - epsilon: Small constant for numerical stability\n    \n    Returns:\n    - A Python list representation of the batch-normalized output,\n      rounded to 4 decimal places.\n    \"\"\"\n    # Compute per-channel mean over batch, height, width: shape (C,)\n    mean = X.mean(axis=(0, 2, 3), keepdims=True)\n    # Compute per-channel variance over batch, height, width: shape (C,)\n    var  = X.var(axis=(0, 2, 3), keepdims=True)\n    \n    # Normalize\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    \n    # Reshape gamma and beta to broadcast over B, H, W\n    gamma_broadcast = gamma.reshape((1, -1, 1, 1))\n    beta_broadcast  = beta.reshape((1, -1, 1, 1))\n    \n    # Scale and shift\n    Y = gamma_broadcast * X_norm + beta_broadcast\n    \n    # Round to 4 decimal places and convert to list\n    Y_rounded = np.round(Y, 4)\n    return Y_rounded.tolist()\n```"}
{"task_id": 116, "completion_id": 0, "completion": "```python\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of the polynomial term c * x^n at point x,\n    using the power rule: d/dx [c * x^n] = c * n * x^(n-1).\n    Return the result rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = c * n * x**(n - 1)\n    return round(derivative_value, 4)\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n    # Compute the derivative of 5 * x^3 at x = 2\n    c_example = 5.0\n    n_example = 3.0\n    x_example = 2.0\n    result = poly_term_derivative(c_example, x_example, n_example)\n    print(f\"The derivative of {c_example} * x^{n_example} at x = {x_example} is {result}\")\n    \n    # You can also prompt the user for custom inputs:\n    try:\n        c_input = float(input(\"Enter coefficient c: \"))\n        x_input = float(input(\"Enter point x: \"))\n        n_input = float(input(\"Enter exponent n: \"))\n        print(\"Result:\", poly_term_derivative(c_input, x_input, n_input))\n    except ValueError:\n        print(\"Invalid input. Please enter numeric values.\")\n```"}
{"task_id": 117, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthonormal_basis(vectors: list[list[float]], tol: float = 1e-10) -> list[list[float]]:\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by the given 2D vectors\n    using the Gram-Schmidt process.\n\n    Parameters:\n    - vectors: list of 2D vectors (each a list of two floats).\n    - tol: tolerance threshold for determining if a vector is linearly independent.\n\n    Returns:\n    - A list of orthonormal 2D vectors (each a list of two floats), rounded to 4 decimals.\n    \"\"\"\n    basis = []\n    for v in vectors:\n        w = np.array(v, dtype=float)\n        # Subtract projections onto existing basis vectors\n        for u in basis:\n            proj = np.dot(u, w) * u\n            w = w - proj\n        norm = np.linalg.norm(w)\n        if norm > tol:\n            u = w / norm\n            basis.append(u)\n\n    # Round to 4 decimal places and convert to Python lists\n    return [np.round(u, 4).tolist() for u in basis]\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    vecs = [\n        [1.0, 1.0],\n        [1.0, -1.0],\n        [2.0, 0.0]\n    ]\n    ortho = orthonormal_basis(vecs)\n    print(\"Orthonormal basis:\")\n    for u in ortho:\n        print(u)\n```\n\nExplanation:\n1. We iterate over each vector `v` and convert it to a NumPy array `w`.\n2. For each existing basis vector `u`, we subtract the projection of `w` onto `u`.\n3. If the norm of the resulting `w` remains above the tolerance `tol`, we normalize it and add it to our basis.\n4. Finally, we round each basis vector to 4 decimal places and convert it to a standard Python list."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors a and b,\n    round the result to 4 decimal places, and return as a list.\n    \"\"\"\n    # Convert inputs to numpy arrays of floats\n    arr_a = np.array(a, dtype=float)\n    arr_b = np.array(b, dtype=float)\n\n    # Compute cross product\n    cross = np.cross(arr_a, arr_b)\n\n    # Round to 4 decimal places\n    cross_rounded = np.round(cross, 4)\n\n    # Convert to Python list and return\n    return cross_rounded.tolist()\n\nif __name__ == \"__main__\":\n    # Example usage\n    v1 = [1, 2, 3]\n    v2 = [4, 5, 6]\n    result = cross_product(v1, v2)\n    print(\"Cross product:\", result)\n```"}
{"task_id": 119, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve the system Ax = b using Cramer's Rule.\n    A: square coefficient matrix (list of lists or numpy array)\n    b: constant vector (list or numpy array)\n    Returns:\n      - list of solutions rounded to 4 decimals, or\n      - -1 if the system has no unique solution (det(A) == 0)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float).flatten()\n\n    # Check dimensions\n    n, m = A.shape\n    if n != m:\n        raise ValueError(\"Coefficient matrix A must be square.\")\n    if b.size != n:\n        raise ValueError(\"Dimension mismatch between A and b.\")\n\n    detA = np.linalg.det(A)\n    if abs(detA) < 1e-12:\n        return -1\n\n    # Compute each variable using Cramer's Rule\n    x = np.zeros(n, dtype=float)\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        detAi = np.linalg.det(Ai)\n        x[i] = detAi / detA\n\n    # Round to 4 decimal places and return as a Python list\n    return np.round(x, 4).tolist()\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    A = [[2, -1, 5],\n         [1,  1, -3],\n         [2,  4,  1]]\n    b = [12, -1, 5]\n\n    solution = cramers_rule(A, b)\n    if solution == -1:\n        print(\"The system has no unique solution.\")\n    else:\n        print(\"Solution vector x:\", solution)\n```"}
{"task_id": 120, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two discrete probability distributions.\n    Returns 0.0 if inputs are empty or of unequal length.\n    \"\"\"\n    # Validate inputs\n    if not p or not q or len(p) != len(q):\n        return 0.0\n\n    # Convert to numpy arrays\n    p_arr = np.array(p, dtype=float)\n    q_arr = np.array(q, dtype=float)\n\n    # Compute the Bhattacharyya coefficient\n    bc = np.sum(np.sqrt(p_arr * q_arr))\n\n    # If coefficient is zero or negative, distance is infinite\n    if bc <= 0:\n        return float('inf')\n\n    # Compute distance and round to 4 decimal places\n    distance = -np.log(bc)\n    return round(distance, 4)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Two simple distributions\n    p = [0.1, 0.4, 0.5]\n    q = [0.2, 0.3, 0.5]\n    print(\"Bhattacharyya distance:\", bhattacharyya_distance(p, q))\n```"}
{"task_id": 121, "completion_id": 0, "completion": "```python\ndef vector_sum(a: list[int|float], b: list[int|float]) -> list[int|float]:\n    \"\"\"\n    Compute the element-wise sum of two vectors.\n    Returns a new list containing the sums if the vectors have the same length,\n    otherwise returns -1.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    return [x + y for x, y in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    # Example usages and simple tests\n    v1 = [1, 2, 3]\n    v2 = [4, 5, 6]\n    print(f\"vector_sum({v1}, {v2}) = {vector_sum(v1, v2)}\")\n    # Expected output: [5, 7, 9]\n\n    v3 = [1.5, 2.0, -3.2]\n    v4 = [0.5, -1.0, 3.2]\n    print(f\"vector_sum({v3}, {v4}) = {vector_sum(v3, v4)}\")\n    # Expected output: [2.0, 1.0, 0.0]\n\n    # Incompatible lengths\n    v5 = [1, 2]\n    v6 = [3, 4, 5]\n    print(f\"vector_sum({v5}, {v6}) = {vector_sum(v5, v6)}\")\n    # Expected output: -1\n```"}
{"task_id": 122, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Compute the average policy gradient using REINFORCE.\n    \n    Args:\n        theta: numpy array of shape (num_states, num_actions)\n        episodes: list of episodes, each an ordered list of (state, action, reward) tuples\n    \n    Returns:\n        A Python list containing the averaged gradient of shape (num_states, num_actions),\n        rounded to 4 decimal places.\n    \"\"\"\n    num_states, num_actions = theta.shape\n    # accumulator for gradients\n    grad_acc = np.zeros_like(theta, dtype=float)\n    num_episodes = len(episodes)\n    \n    for ep in episodes:\n        # extract rewards and compute returns G_t for each time step\n        rewards = [r for (_, _, r) in ep]\n        T = len(rewards)\n        returns = np.zeros(T, dtype=float)\n        G = 0.0\n        for t in reversed(range(T)):\n            G += rewards[t]\n            returns[t] = G\n        \n        # for each time step, compute grad log pi * G_t\n        for t, (s, a, _) in enumerate(ep):\n            # compute softmax policy at state s\n            z = theta[s] - np.max(theta[s])      # for numeric stability\n            exp_z = np.exp(z)\n            pi_s = exp_z / np.sum(exp_z)\n            \n            # grad log pi(s, a): one-hot minus policy\n            grad_log = -pi_s\n            grad_log[a] += 1.0\n            \n            # accumulate\n            grad_acc[s] += returns[t] * grad_log\n    \n    # average over episodes\n    grad_avg = grad_acc / num_episodes\n    # round to 4 decimal places\n    grad_avg = np.round(grad_avg, 4)\n    return grad_avg.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # define a small theta for 3 states, 2 actions\n    theta = np.array([[0.2, 0.8],\n                      [1.0, 0.0],\n                      [0.5, 0.5]])\n    # one episode: state 0->action1 reward1, state1->action0 reward2\n    episodes = [\n        [(0, 1, 1.0), (1, 0, 2.0)],\n        [(2, 0, 0.5), (0, 0, 1.5)]\n    ]\n    grad = compute_policy_gradient(theta, episodes)\n    print(\"Average policy gradient:\", grad)\n```"}
{"task_id": 123, "completion_id": 0, "completion": "```python\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Compute and return the FLOPs of a dense layer vs. a sparse Mixture\u2010of\u2010Experts (MoE) layer\n    and the percentage savings in compute when using the MoE layer (active experts = k_active)\n    compared to a single dense layer.\n\n    Arguments:\n      n_experts  -- total number of experts in the MoE (not used for compute, only for capacity)\n      k_active   -- number of experts activated per example\n      d_in       -- input dimension\n      d_out      -- output dimension\n\n    Returns:\n      (flops_dense, flops_moe, savings_pct)\n\n      flops_dense -- FLOPs for a dense layer: 2 * d_in * d_out\n      flops_moe   -- FLOPs for sparse MoE: k_active * 2 * d_in * d_out\n      savings_pct -- percentage compute savings of MoE vs. dense layer\n    \"\"\"\n    # FLOPs for a single dense feed\u2010forward layer (multiply + add = 2 ops per weight)\n    flops_dense = 2 * d_in * d_out\n\n    # FLOPs for sparse MoE: only k_active experts are used\n    flops_moe = k_active * 2 * d_in * d_out\n\n    # Compute savings: (dense - moe) / dense * 100\n    savings_pct = (flops_dense - flops_moe) / flops_dense * 100\n\n    # Round to nearest 0.1\n    return (\n        round(flops_dense, 1),\n        round(flops_moe, 1),\n        round(savings_pct, 1)\n    )\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    n_experts = 16    # total experts\n    k_active = 4      # number of experts used per input\n    d_in = 1024       # input dimension\n    d_out = 2048      # output dimension\n\n    flops_dense, flops_moe, savings = compute_efficiency(\n        n_experts, k_active, d_in, d_out\n    )\n\n    print(f\"FLOPs (Dense Layer): {flops_dense}\")\n    print(f\"FLOPs (Sparse MoE Layer): {flops_moe}\")\n    print(f\"Compute Savings: {savings}%\")\n```"}
{"task_id": 124, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef noisy_topk_gating(\n    X: np.ndarray,\n    W_g: np.ndarray,\n    W_noise: np.ndarray,\n    N: np.ndarray,\n    k: int\n):\n    \"\"\"\n    Compute Noisy Top-K gating probabilities.\n\n    Args:\n        X       : np.ndarray of shape (batch_size, input_dim)\n        W_g     : np.ndarray of shape (input_dim, num_experts)\n        W_noise : np.ndarray of shape (input_dim, num_experts)\n        N       : np.ndarray of shape (batch_size, num_experts)  # pre-sampled noise\n        k       : int, number of experts to keep for each example\n\n    Returns:\n        gating_probs: Python list of shape (batch_size, num_experts)\n                      each row sums to 1 and has at most k non-zero entries,\n                      rounded to 4 decimal places.\n    \"\"\"\n    # 1) compute clean logits\n    gate_logits = X.dot(W_g)  # shape (batch_size, num_experts)\n\n    # 2) compute noise standard deviation via a small MLP (here a linear layer + softplus)\n    raw_noise_std = X.dot(W_noise)  # shape (batch_size, num_experts)\n    # softplus activation\n    sigma = np.log1p(np.exp(raw_noise_std))\n\n    # 3) add noise\n    noisy_logits = gate_logits + sigma * N  # shape (batch_size, num_experts)\n\n    batch_size, num_experts = noisy_logits.shape\n    # initialize gating probabilities\n    gates = np.zeros_like(noisy_logits)\n\n    # 4) for each example, pick top-k and compute softmax over them\n    for i in range(batch_size):\n        row = noisy_logits[i]\n        # find indices of top-k logits\n        # argpartition for speed, then sort them (optional)\n        topk_idx = np.argpartition(-row, k - 1)[:k]\n        # for numerical stability, you may sort them (not strictly necessary)\n        topk_idx = topk_idx[np.argsort(-row[topk_idx])]\n\n        # compute softmax over the selected logits\n        selected_logits = row[topk_idx]\n        exp_logits = np.exp(selected_logits - np.max(selected_logits))\n        probs = exp_logits / np.sum(exp_logits)\n\n        # assign to gates\n        gates[i, topk_idx] = probs\n\n    # 5) round to 4 decimal places and return as Python list\n    gates = np.round(gates, 4)\n    return gates.tolist()\n\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)\n    batch_size = 3\n    input_dim = 4\n    num_experts = 5\n    k = 2\n\n    X = np.random.randn(batch_size, input_dim)\n    W_g = np.random.randn(input_dim, num_experts)\n    W_noise = np.random.randn(input_dim, num_experts)\n    N = np.random.randn(batch_size, num_experts)  # pre-sampled noise\n\n    gating = noisy_topk_gating(X, W_g, W_noise, N, k)\n    print(\"Gating probabilities (rounded to 4 decimals):\")\n    print(gating)\n```"}
{"task_id": 125, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Sparse Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Args:\n      x        : np.ndarray of shape (..., d_model), the input tokens.\n      We       : np.ndarray of shape (n_experts, d_model, output_dim), expert weight matrices.\n      Wg       : np.ndarray of shape (d_model, n_experts), gating weight matrix.\n      n_experts: int, total number of experts.\n      top_k    : int, how many experts to route each token through.\n\n    Returns:\n      A Python list of shape (..., output_dim) containing the MoE outputs,\n      with all values rounded to 4 decimal places.\n    \"\"\"\n    # remember original shape and model dims\n    orig_shape = x.shape                    # e.g. (batch, seq_len, d_model) or (batch, d_model)\n    d_model = orig_shape[-1]\n    # flatten tokens into first dimension: (N, d_model)\n    x_flat = x.reshape(-1, d_model)\n    N = x_flat.shape[0]\n    # 1) compute gating logits and softmax\n    logits = x_flat @ Wg                        # shape (N, n_experts)\n    # numeric\u2010stable softmax\n    m = np.max(logits, axis=1, keepdims=True)\n    exps = np.exp(logits - m)\n    probs = exps / exps.sum(axis=1, keepdims=True)  # shape (N, n_experts)\n    # 2) select top_k experts per token\n    # argpartition for speed (unordered)\n    topk_idx = np.argpartition(-probs, top_k-1, axis=1)[:, :top_k]   # (N, top_k)\n    topk_probs = np.take_along_axis(probs, topk_idx, axis=1)       # (N, top_k)\n    # renormalize the top-k probabilities\n    norm = topk_probs.sum(axis=1, keepdims=True)                   # (N, 1)\n    topk_probs = topk_probs / norm                                 # (N, top_k)\n    # 3) apply experts and aggregate\n    output_dim = We.shape[2]\n    output_flat = np.zeros((N, output_dim), dtype=x.dtype)\n    for i in range(top_k):\n        e_idx = topk_idx[:, i]          # which expert for each token\n        p     = topk_probs[:, i]        # corresponding normalized prob\n        # gather expert weights: shape (N, d_model, output_dim)\n        W_sel = We[e_idx]\n        # expert output per token: einsum over batch\n        out_i = np.einsum('nd,ndo->no', x_flat, W_sel)\n        # weight and accumulate\n        output_flat += out_i * p[:, None]\n    # reshape back to original batch/seq dimensions + output_dim\n    if x.ndim > 2:\n        new_shape = orig_shape[:-1] + (output_dim,)\n        output = output_flat.reshape(new_shape)\n    else:\n        output = output_flat\n    # round to 4 decimal places and convert to Python list\n    output = np.round(output, 4)\n    return output.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # toy data\n    batch, seq_len, d_model = 2, 3, 4\n    n_experts, output_dim, top_k = 5, 6, 2\n\n    np.random.seed(0)\n    x  = np.random.randn(batch, seq_len, d_model)\n    We = np.random.randn(n_experts, d_model, output_dim)\n    Wg = np.random.randn(d_model, n_experts)\n\n    y = moe(x, We, Wg, n_experts, top_k)\n    print(y)\n```"}
{"task_id": 126, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef group_normalization(X: np.ndarray,\n                        gamma: np.ndarray,\n                        beta: np.ndarray,\n                        num_groups: int,\n                        epsilon: float = 1e-5):\n    \"\"\"\n    Performs Group Normalization on a 4D input tensor.\n    \n    Parameters:\n    ----------\n    X : np.ndarray\n        Input tensor of shape (B, C, H, W).\n    gamma : np.ndarray\n        Scale tensor of shape (C,) or (1, C, 1, 1).\n    beta : np.ndarray\n        Shift tensor of shape (C,) or (1, C, 1, 1).\n    num_groups : int\n        Number of groups to divide the channels into. Must divide C evenly.\n    epsilon : float\n        Small constant for numerical stability.\n    \n    Returns:\n    -------\n    list\n        The normalized, scaled, and shifted tensor as a nested Python list,\n        with values rounded to the nearest 4th decimal.\n    \"\"\"\n    B, C, H, W = X.shape\n    if C % num_groups != 0:\n        raise ValueError(f\"num_groups ({num_groups}) must divide the number of channels ({C}) evenly.\")\n    \n    # 1) reshape into groups\n    G = num_groups\n    group_size = C // G\n    X_grouped = X.reshape(B, G, group_size, H, W)\n    \n    # 2) compute mean and variance per (B, G) over (group_size, H, W)\n    mean = X_grouped.mean(axis=(2, 3, 4), keepdims=True)\n    var = X_grouped.var(axis=(2, 3, 4), keepdims=True)\n    \n    # 3) normalize\n    X_norm = (X_grouped - mean) / np.sqrt(var + epsilon)\n    \n    # 4) reshape back to (B, C, H, W)\n    X_norm = X_norm.reshape(B, C, H, W)\n    \n    # 5) prepare gamma and beta for broadcasting\n    if gamma.ndim == 1:\n        gamma = gamma.reshape(1, C, 1, 1)\n    if beta.ndim == 1:\n        beta = beta.reshape(1, C, 1, 1)\n    \n    # 6) scale and shift\n    out = X_norm * gamma + beta\n    \n    # 7) round to 4th decimal and return as python list\n    out = np.round(out, 4)\n    return out.tolist()\n```"}
{"task_id": 127, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef find_treasure(start_x: float,\n                  learning_rate: float = 0.1,\n                  tolerance: float = 1e-6,\n                  max_iters: int = 10000) -> float:\n    \"\"\"\n    Uses gradient descent to find the x-coordinate of the minimum of\n    f(x) = x^4 - 3x^3 + 2, starting from start_x.\n    Returns the x value rounded to 4 decimal places.\n    \"\"\"\n    def f(x):\n        return x**4 - 3*x**3 + 2\n\n    def grad_f(x):\n        # derivative of x^4 - 3x^3 + 2 is 4x^3 - 9x^2\n        return 4*x**3 - 9*x**2\n\n    x = start_x\n    for i in range(max_iters):\n        g = grad_f(x)\n        x_new = x - learning_rate * g\n        if abs(x_new - x) < tolerance:\n            x = x_new\n            break\n        x = x_new\n\n    # Round to 4 decimal places\n    return float(np.round(x, 4))\n\n\nif __name__ == \"__main__\":\n    # Try a few random starts to see where we end up\n    for start in [-5.0, 0.1, 1.0, 4.0]:\n        minimum_x = find_treasure(start_x=start)\n        print(f\"Starting at {start:5.2f} -> minimum at x = {minimum_x:0.4f}\")\n```\n\nExplanation of key parts:\n1. We define `f(x)` and its derivative `grad_f(x)`.\n2. We perform standard gradient descent:\n   - `x_new = x - learning_rate * grad_f(x)`\n   - Stop if the update is smaller than `tolerance` or when `max_iters` is reached.\n3. We round the final `x` to 4 decimal places before returning.\n4. In the `__main__` block, we demonstrate the function from multiple starting points."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Apply the Dynamic Tanh (DyT) transformation:\n        y = beta + gamma * tanh(alpha * x)\n    Rounds the result to 4 decimal places and returns a Python list.\n\n    Args:\n        x (np.ndarray): Input array of any shape.\n        alpha (float): Scale factor inside the tanh.\n        gamma (float): Scale factor applied after the tanh.\n        beta (float): Bias term added after scaling.\n\n    Returns:\n        list[float]: The transformed values, rounded to the 4th decimal, \n                     in the same shape as x but as nested Python lists.\n    \"\"\"\n    # Ensure input is a NumPy array\n    x_arr = np.asarray(x, dtype=float)\n    \n    # Dynamic tanh transformation\n    y = beta + gamma * np.tanh(alpha * x_arr)\n    \n    # Round to 4 decimal places\n    y_rounded = np.round(y, 4)\n    \n    # Convert to nested Python lists and return\n    return y_rounded.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample input array\n    x_input = np.array([[ -2.5, 0.0, 2.5 ],\n                        [  1.0, -1.0, 0.5 ]])\n    # Hyperparameters\n    alpha = 0.8\n    gamma = 1.2\n    beta  = 0.1\n\n    # Compute DyT\n    output = dynamic_tanh(x_input, alpha, gamma, beta)\n    print(\"Input:\")\n    print(x_input)\n    print(\"\\nDynamic Tanh Output (rounded to 4 decimals):\")\n    print(output)\n```"}
