{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the dot product of a matrix 'a' and a vector 'b'.\n    Returns:\n      - a list of dot products (one per row of 'a') if dimensions match\n      - -1 if the number of columns in 'a' != len(b)\n    \"\"\"\n    if not a:\n        return []\n    num_cols = len(a[0])\n    if num_cols != len(b) or any((len(row) != num_cols for row in a)):\n        return -1\n    result: list[int | float] = []\n    for row in a:\n        dot = 0\n        for (x, y) in zip(row, b):\n            dot += x * y\n        result.append(dot)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef transpose_matrix(a: List[List[Number]]) -> List[List[Number]]:\n    \"\"\"\n    Compute and return the transpose of the given matrix `a`.\n    \n    Parameters:\n        a (List[List[Number]]): A 2D matrix with numeric entries.\n        \n    Returns:\n        List[List[Number]]: The transpose of matrix `a`.\n        \n    Raises:\n        ValueError: If the input is not a well-formed matrix\n                    (i.e., rows have differing lengths).\n    \"\"\"\n    if not a:\n        return []\n    row_len = len(a[0])\n    for row in a:\n        if len(row) != row_len:\n            raise ValueError('All rows must have the same number of elements')\n    return [list(col) for col in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes the input matrix `a` to the shape `new_shape`.\n    If the total number of elements doesn't match, returns an empty list.\n    \"\"\"\n    try:\n        arr = np.array(a)\n        if arr.size != new_shape[0] * new_shape[1]:\n            return []\n        reshaped = arr.reshape(new_shape)\n        return reshaped.tolist()\n    except Exception:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n\n    Parameters:\n        matrix (list of list of float): The input matrix.\n        mode (str): 'row' to compute mean across rows,\n                    'column' to compute mean across columns.\n\n    Returns:\n        list of float: A list of means for each row or each column.\n\n    Raises:\n        ValueError: If mode is not 'row' or 'column'.\n    \"\"\"\n    if mode not in ('row', 'column'):\n        raise ValueError(\"mode must be 'row' or 'column'\")\n    if not matrix:\n        return []\n    if mode == 'row':\n        means = []\n        for row in matrix:\n            if row:\n                means.append(sum(row) / len(row))\n            else:\n                means.append(float('nan'))\n        return means\n    else:\n        max_cols = max((len(row) for row in matrix), default=0)\n        means = []\n        for col_idx in range(max_cols):\n            col_vals = [row[col_idx] for row in matrix if col_idx < len(row)]\n            if col_vals:\n                means.append(sum(col_vals) / len(col_vals))\n            else:\n                means.append(float('nan'))\n        return means"}
{"task_id": 5, "completion_id": 0, "solution": "from typing import Union\ndef scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiply each element of the matrix by the given scalar.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate and return the eigenvalues of a 2x2 matrix, sorted from highest to lowest.\n    Raises:\n        ValueError: if the input is not a 2x2 matrix or if the eigenvalues are complex.\n    \"\"\"\n    if not isinstance(matrix, list) or len(matrix) != 2 or any((not isinstance(row, list) or len(row) != 2 for row in matrix)):\n        raise ValueError('Input must be a 2x2 matrix (list of two lists of length 2).')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    det = a * d - b * c\n    disc = trace * trace - 4 * det\n    if disc < 0:\n        raise ValueError('This matrix has complex eigenvalues; only real eigenvalues are supported.')\n    sqrt_disc = math.sqrt(disc)\n    \u03bb1 = (trace + sqrt_disc) / 2\n    \u03bb2 = (trace - sqrt_disc) / 2\n    return sorted([\u03bb1, \u03bb2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Compute T^{-1} * A * S if T and S are invertible and dimensions match.\n    Return the resulting matrix rounded to 4 decimal places as a Python list of lists.\n    If T or S is non-invertible or dimensions are incompatible, return -1.\n    \"\"\"\n    try:\n        A_mat = np.array(A, dtype=float)\n        T_mat = np.array(T, dtype=float)\n        S_mat = np.array(S, dtype=float)\n    except Exception:\n        return -1\n    if T_mat.ndim != 2 or S_mat.ndim != 2:\n        return -1\n    if T_mat.shape[0] != T_mat.shape[1] or S_mat.shape[0] != S_mat.shape[1]:\n        return -1\n    p = T_mat.shape[0]\n    (a_dim0, a_dim1) = A_mat.shape\n    q = S_mat.shape[0]\n    if a_dim0 != p or a_dim1 != q:\n        return -1\n    if np.isclose(np.linalg.det(T_mat), 0) or np.isclose(np.linalg.det(S_mat), 0):\n        return -1\n    try:\n        T_inv = np.linalg.inv(T_mat)\n    except np.linalg.LinAlgError:\n        return -1\n    result = T_inv @ A_mat @ S_mat\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]] | None:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n    The matrix is given as [[a, b], [c, d]].\n    Returns the inverse [[d, -b], [-c, a]] / (a*d - b*c) if invertible,\n    otherwise returns None.\n    \"\"\"\n    if not isinstance(matrix, list) or len(matrix) != 2 or any((not isinstance(row, list) or len(row) != 2 for row in matrix)):\n        raise ValueError('Input must be a 2x2 matrix represented as a list of two lists of length 2.')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_det = 1.0 / det\n    return [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]"}
{"task_id": 9, "completion_id": 0, "solution": "from typing import List, Union\nNumber = Union[int, float]\ndef matrixmul(a: List[List[Number]], b: List[List[Number]]) -> List[List[Number]] | int:\n    \"\"\"\n    Multiply two matrices a and b.\n    If they cannot be multiplied (incompatible dimensions or malformed),\n    return -1.\n\n    Args:\n        a: Left matrix as a list of rows.\n        b: Right matrix as a list of rows.\n\n    Returns:\n        The product matrix as a list of lists, or -1 if multiplication is not possible.\n    \"\"\"\n    if not a or not b:\n        return -1\n    (n, m) = (len(a), len(a[0]))\n    (p, q) = (len(b), len(b[0]))\n    if any((len(row) != m for row in a)):\n        return -1\n    if any((len(row) != q for row in b)):\n        return -1\n    if m != p:\n        return -1\n    result: List[List[Number]] = [[0 for _ in range(q)] for _ in range(n)]\n    for i in range(n):\n        for j in range(q):\n            cell_sum: Number = 0\n            for k in range(m):\n                cell_sum += a[i][k] * b[k][j]\n            result[i][j] = cell_sum\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "from typing import List\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculate the sample covariance matrix for a set of feature vectors.\n\n    Args:\n        vectors: A list of N feature vectors, each of length M (observations).\n                 Example: [[x1, x2, ..., xM],\n                           [y1, y2, ..., yM],\n                           ...]\n    Returns:\n        An N x N covariance matrix as a list of lists, where\n        cov_mat[i][j] = covariance(vectors[i], vectors[j]) using the\n        sample covariance formula (dividing by M-1).\n    Raises:\n        ValueError: if input is empty, vectors have differing lengths,\n                    or fewer than 2 observations.\n    \"\"\"\n    if not vectors:\n        raise ValueError(\"Input list 'vectors' must not be empty.\")\n    num_features = len(vectors)\n    num_obs = len(vectors[0])\n    if num_obs < 2:\n        raise ValueError('Each feature vector must contain at least two observations.')\n    for vec in vectors:\n        if len(vec) != num_obs:\n            raise ValueError('All feature vectors must have the same number of observations.')\n    means = [sum(vec) / num_obs for vec in vectors]\n    cov_matrix: List[List[float]] = [[0.0] * num_features for _ in range(num_features)]\n    for i in range(num_features):\n        for j in range(i, num_features):\n            cov = 0.0\n            for k in range(num_obs):\n                cov += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            cov /= num_obs - 1\n            cov_matrix[i][j] = cov\n            cov_matrix[j][i] = cov\n    return cov_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solve the linear system Ax = b using the Jacobi iterative method.\n    Iterate n times, rounding each intermediate solution to 4 decimal places.\n    Return the final approximation as a Python list.\n    \"\"\"\n    b = b.flatten()\n    D = np.diag(A)\n    R = A - np.diagflat(D)\n    x = np.zeros_like(b, dtype=float)\n    for _ in range(n):\n        x_new = (b - R.dot(x)) / D\n        x_new = np.round(x_new, 4)\n        x = x_new\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the SVD of a real 2x2 matrix A using the Jacobi method.\n    Returns (U, \u03a3, Vt), where A \u2248 U @ \u03a3 @ Vt, and all entries are rounded\n    to 4 decimal places.\n    \"\"\"\n    assert A.shape == (2, 2), 'Input must be a 2x2 matrix.'\n    M = A.T @ A\n    V = np.eye(2)\n    tol = 1e-10\n    max_iter = 100\n    for _ in range(max_iter):\n        if abs(M[0, 1]) < tol:\n            break\n        phi = 0.5 * np.arctan2(2 * M[0, 1], M[0, 0] - M[1, 1])\n        c = np.cos(phi)\n        s = np.sin(phi)\n        R = np.array([[c, -s], [s, c]])\n        M = R.T @ M @ R\n        V = V @ R\n    sigma1 = np.sqrt(max(M[0, 0], 0.0))\n    sigma2 = np.sqrt(max(M[1, 1], 0.0))\n    if sigma1 < sigma2:\n        (sigma1, sigma2) = (sigma2, sigma1)\n        V = V[:, [1, 0]]\n    Sigma = np.diag([sigma1, sigma2])\n    U = A @ V\n    if sigma1 > tol:\n        U[:, 0] /= sigma1\n    if sigma2 > tol:\n        U[:, 1] /= sigma2\n    U = np.round(U, 4)\n    Sigma = np.round(Sigma, 4)\n    Vt = np.round(V.T, 4)\n    return (U, Sigma, Vt)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's expansion (recursive).\n    :param matrix: 4x4 matrix represented as a list of 4 lists, each of length 4.\n    :return: Determinant of the matrix as a float.\n    \"\"\"\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Input must be a 4x4 matrix.')\n\n    def det(mat: list[list[int | float]]) -> float:\n        \"\"\"\n        Recursive helper to compute the determinant of an n x n matrix.\n        \"\"\"\n        n = len(mat)\n        if n == 1:\n            return mat[0][0]\n        if n == 2:\n            return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]\n        total = 0.0\n        for col in range(n):\n            sign = -1 if col % 2 else 1\n            minor = [row[:col] + row[col + 1:] for row in mat[1:]]\n            cofactor = sign * mat[0][col]\n            total += cofactor * det(minor)\n        return total\n    return det(matrix)"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n    Args:\n        X: A list of n samples, each sample is a list of m features.\n        y: A list of n target values.\n    Returns:\n        A list of m+1 coefficients (theta_0 is the intercept), rounded to 4 decimal places.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    n_samples = X_arr.shape[0]\n    intercept = np.ones((n_samples, 1), dtype=float)\n    X_design = np.hstack((intercept, X_arr))\n    XtX = X_design.T.dot(X_design)\n    XtX_inv = np.linalg.inv(XtX)\n    XtY = X_design.T.dot(y_arr)\n    theta = XtX_inv.dot(XtY)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Performs linear regression using gradient descent.\n    \n    Parameters:\n    X           -- Feature matrix including a column of ones, shape (m, n)\n    y           -- Target vector, shape (m,) or (m,1)\n    alpha       -- Learning rate\n    iterations  -- Number of iterations for gradient descent\n    \n    Returns:\n    List of coefficients (\u03b8\u2080, \u03b8\u2081, \u2026, \u03b8\u2099\u208b\u2081) rounded to 4 decimal places\n    \"\"\"\n    m = y.shape[0]\n    y = y.reshape(m, 1)\n    theta = np.zeros((X.shape[1], 1))\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        errors = predictions - y\n        gradient = X.T.dot(errors) / m\n        theta = theta - alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.reshape(-1).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Perform feature scaling on the input data.\n    Returns:\n      - standardized_data: each feature has zero mean and unit variance\n      - normalized_data: each feature scaled to [0, 1]\n    Both outputs are Python lists, rounded to 4 decimal places.\n    \"\"\"\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0)\n    stds_corrected = np.where(stds == 0, 1, stds)\n    standardized = (data - means) / stds_corrected\n    standardized = np.round(standardized, 4)\n    mins = np.min(data, axis=0)\n    maxs = np.max(data, axis=0)\n    ranges = np.where(maxs - mins == 0, 1, maxs - mins)\n    normalized = (data - mins) / ranges\n    normalized = np.round(normalized, 4)\n    return (standardized.tolist(), normalized.tolist())"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Perform k-Means clustering.\n\n    Args:\n        points: List of (x, y) points.\n        k: Number of clusters.\n        initial_centroids: List of k initial centroids as (x, y).\n        max_iterations: Maximum number of iterations.\n\n    Returns:\n        List of k final centroids as (x, y), rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(points, dtype=float)\n    centroids = np.array(initial_centroids, dtype=float)\n    n_points = X.shape[0]\n    for iteration in range(max_iterations):\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for cluster_idx in range(k):\n            members = X[labels == cluster_idx]\n            if len(members) > 0:\n                new_centroids[cluster_idx] = members.mean(axis=0)\n            else:\n                new_centroids[cluster_idx] = centroids[cluster_idx]\n        if np.allclose(new_centroids, centroids, atol=0.0001):\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    return [tuple(c) for c in centroids]"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k: int=5, shuffle: bool=True, random_seed: int=None):\n    \"\"\"\n    Generate train/test indices for K-Fold Cross-Validation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Target vector of shape (n_samples,).\n    k : int, default=5\n        Number of folds.\n    shuffle : bool, default=True\n        Whether to shuffle the data before splitting into batches.\n    random_seed : int, optional\n        If shuffle is True, the seed for the random number generator.\n\n    Returns\n    -------\n    folds : list of tuples\n        A list of length k, where each element is a tuple\n        (train_indices, test_indices). Each is a 1D numpy array.\n    \"\"\"\n    n_samples = X.shape[0]\n    if n_samples != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if k < 2 or k > n_samples:\n        raise ValueError('k must be >= 2 and <= number of samples.')\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(indices)\n    folds = np.array_split(indices, k)\n    cv_indices = []\n    for i in range(k):\n        test_idx = folds[i]\n        train_idx = np.hstack([folds[j] for j in range(k) if j != i])\n        cv_indices.append((train_idx, test_idx))\n    return cv_indices"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform PCA on the given data and return the top k principal components.\n    \n    Parameters:\n    - data: 2D NumPy array (n_samples x n_features)\n    - k: number of principal components to return\n    \n    Returns:\n    - A list of k principal components, each of length n_features,\n      rounded to 4 decimal places.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)\n    data_std = (data - mean) / std\n    cov_matrix = np.cov(data_std, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    eigenvectors_sorted = eigenvectors[:, sorted_idx]\n    pcs = eigenvectors_sorted[:, :k]\n    pcs_rounded = np.round(pcs, 4).tolist()\n    return pcs_rounded"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learn a decision tree using recursive binary splitting based\n    on entropy and information gain.\n    \n    Returns a nested dictionary representing the tree:\n    - If node is leaf: {'label': class_label}\n    - If internal node: {'attr': attribute_name, 'nodes': {value1: subtree1, ...}}\n    \"\"\"\n\n    def plurality_value(exs):\n        \"\"\"Return the most common target value among examples.\"\"\"\n        counts = Counter((e[target_attr] for e in exs))\n        return counts.most_common(1)[0][0] if counts else None\n\n    def entropy(exs):\n        \"\"\"Compute the entropy of the target attribute in examples.\"\"\"\n        total = len(exs)\n        if total == 0:\n            return 0\n        counts = Counter((e[target_attr] for e in exs))\n        ent = 0.0\n        for count in counts.values():\n            p = count / total\n            ent -= p * math.log2(p)\n        return ent\n\n    def information_gain(exs, attr):\n        \"\"\"Compute information gain of splitting exs on attribute attr.\"\"\"\n        base_ent = entropy(exs)\n        total = len(exs)\n        subsets = {}\n        for e in exs:\n            subsets.setdefault(e[attr], []).append(e)\n        subset_ent = sum((len(sub) / total * entropy(sub) for sub in subsets.values()))\n        return base_ent - subset_ent\n\n    def dt(exs, attrs, parent_exs):\n        \"\"\"\n        The recursive decision tree learner.\n        exs: current examples\n        attrs: remaining attributes\n        parent_exs: examples at parent node (for plurality in case exs is empty)\n        \"\"\"\n        if not exs:\n            return {'label': plurality_value(parent_exs)}\n        target_vals = [e[target_attr] for e in exs]\n        if target_vals.count(target_vals[0]) == len(target_vals):\n            return {'label': target_vals[0]}\n        if not attrs:\n            return {'label': plurality_value(exs)}\n        gains = [(information_gain(exs, a), a) for a in attrs]\n        (_, best_attr) = max(gains, key=lambda x: x[0])\n        tree = {'attr': best_attr, 'nodes': {}}\n        values = set((e[best_attr] for e in exs))\n        for v in values:\n            subset = [e for e in exs if e[best_attr] == v]\n            subtree = dt(subset, [a for a in attrs if a != best_attr], exs)\n            tree['nodes'][v] = subtree\n        return tree\n    return dt(examples, attributes, examples)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Deterministic Pegasos algorithm for kernel SVM (batch version).\n    Returns alpha coefficients and bias (rounded to 4 decimals) as Python lists.\n    \n    data:     n x d array of training samples\n    labels:   length-n array of +1/-1 labels\n    kernel:   'linear' or 'rbf'\n    lambda_val: regularization parameter\n    iterations: number of passes over the data\n    sigma:    bandwidth for RBF kernel\n    \"\"\"\n    X = data\n    y = labels.astype(float)\n    n_samples = X.shape[0]\n    if kernel == 'linear':\n        K = X.dot(X.T)\n    elif kernel == 'rbf':\n        sq_norms = np.sum(X ** 2, axis=1, keepdims=True)\n        D2 = sq_norms + sq_norms.T - 2 * X.dot(X.T)\n        K = np.exp(-D2 / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Unsupported kernel. Use 'linear' or 'rbf'.\")\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        f = (alpha * y).dot(K) + b\n        viol = np.where(y * f < 1)[0]\n        alpha = (1.0 - eta * lambda_val) * alpha\n        if viol.size > 0:\n            alpha[viol] += eta\n        if viol.size > 0:\n            b += eta * np.sum(y[viol])\n    alpha = np.round(alpha, 4)\n    b = round(b, 4)\n    return [alpha.tolist(), [b]]"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation of the input value z and\n    return the result rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax of a list of scores.\n\n    Args:\n        scores (list[float]): List of input scores.\n\n    Returns:\n        list[float]: Softmax probabilities, each rounded to 4 decimal places.\n    \"\"\"\n    max_score = max(scores)\n    exps = [math.exp(s - max_score) for s in scores]\n    sum_exps = sum(exps)\n    softmax_vals = [e / sum_exps for e in exps]\n    return [round(val, 4) for val in softmax_vals]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulate a single neuron with sigmoid activation for binary classification.\n    \n    :param features: List of feature vectors (each vector is a list of floats).\n    :param labels:   List of true binary labels (0 or 1).\n    :param weights:  List of weights for each feature.\n    :param bias:     Bias term (float).\n    :return:         Tuple (predicted_probabilities, mse), where\n                     predicted_probabilities is a Python list of\n                     sigmoid outputs rounded to 4 decimals, and mse is\n                     the mean squared error (rounded to 4 decimals).\n    \"\"\"\n    import numpy as np\n    X = np.array(features, dtype=float)\n    w = np.array(weights, dtype=float)\n    y = np.array(labels, dtype=float)\n    z = X.dot(w) + bias\n    sigmoid = 1.0 / (1.0 + np.exp(-z))\n    preds = np.round(sigmoid, 4)\n    mse_value = np.mean((preds - y) ** 2)\n    mse_value = round(float(mse_value), 4)\n    return (preds.tolist(), mse_value)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    \"\"\"\n    Trains a single neuron with sigmoid activation using MSE loss and gradient descent.\n\n    Returns:\n        weights (np.ndarray): Trained weights, rounded to 4 decimals.\n        bias (float): Trained bias, rounded to 4 decimals.\n        mse_history (list of float): MSE at each epoch, rounded to 4 decimals.\n    \"\"\"\n\n    def sigmoid(x: np.ndarray) -> np.ndarray:\n        return 1.0 / (1.0 + np.exp(-x))\n    weights = initial_weights.astype(float).copy()\n    bias = float(initial_bias)\n    n_samples = features.shape[0]\n    mse_history: list[float] = []\n    for epoch in range(epochs):\n        z = features.dot(weights) + bias\n        predictions = sigmoid(z)\n        errors = predictions - labels\n        mse = np.mean(errors ** 2)\n        mse_history.append(round(mse, 4))\n        dL_dpred = 2.0 * errors / n_samples\n        dpred_dz = predictions * (1.0 - predictions)\n        delta = dL_dpred * dpred_dz\n        grad_w = features.T.dot(delta)\n        grad_b = np.sum(delta)\n        weights -= learning_rate * grad_w\n        bias -= learning_rate * grad_b\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    return (weights, bias, mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0.0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad * 1.0\n            other.grad += out.grad * 1.0\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0.0, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()\n\n    def __radd__(self, other):\n        return self + other\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __neg__(self):\n        return self * -1\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __pow__(self, exponent):\n        assert isinstance(exponent, (int, float)), 'Only supporting int/float powers for now'\n        out = Value(self.data ** exponent, (self,), f'**{exponent}')\n\n        def _backward():\n            self.grad += exponent * self.data ** (exponent - 1) * out.grad\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix P that maps coordinate vectors in basis B\n    to coordinate vectors in basis C in R^3.\n    B and C are lists of three 3-dimensional vectors (each vector is a list of 3 ints),\n    given in standard coordinates.\n    Returns P as a 3x3 list of floats, rounded to 4 decimal places.\n    \"\"\"\n    B_mat = np.array(B, dtype=float).T\n    C_mat = np.array(C, dtype=float).T\n    P = np.linalg.inv(C_mat) @ B_mat\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the SVD of a 2x2 matrix A using the eigendecomposition of A^T A.\n    Returns U, S, V (as Python lists) rounded to 4 decimal places, such that\n    A = U @ S @ V^T.\n    \"\"\"\n    if A.shape != (2, 2):\n        raise ValueError('Input matrix must be 2x2.')\n    AtA = A.T @ A\n    (eigvals, V) = np.linalg.eigh(AtA)\n    idx = eigvals.argsort()[::-1]\n    eigvals = eigvals[idx]\n    V = V[:, idx]\n    sigmas = np.sqrt(np.clip(eigvals, 0, None))\n    S = np.zeros((2, 2), dtype=float)\n    S[0, 0] = sigmas[0]\n    S[1, 1] = sigmas[1]\n    U = np.zeros((2, 2), dtype=float)\n    for i in range(2):\n        if sigmas[i] > 1e-12:\n            U[:, i] = A @ V[:, i] / sigmas[i]\n        elif i == 1:\n            U[:, i] = np.array([-U[1, 0], U[0, 0]])\n        else:\n            U[:, i] = np.array([-U[1, 1], U[0, 1]])\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffle two arrays X and y in unison, maintaining their correspondence.\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        Feature array of shape (n_samples, ...).\n    y : np.ndarray\n        Label array of shape (n_samples, ...).\n    seed : int or None\n        Random seed for reproducibility. If None, uses non-deterministic randomness.\n    \n    Returns:\n    --------\n    X_list : list\n        Shuffled features as a Python list.\n    y_list : list\n        Shuffled labels as a Python list.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    rng = np.random.default_rng(seed)\n    permuted_indices = rng.permutation(X.shape[0])\n    X_shuffled = X[permuted_indices]\n    y_shuffled = y[permuted_indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yield batches of X (and y if provided) as Python lists.\n\n    Parameters:\n    -----------\n    X : array-like, shape (n_samples, ...)\n        Input data.\n    y : array-like, shape (n_samples,), optional\n        Labels corresponding to X.\n    batch_size : int, default=64\n        Number of samples per batch.\n\n    Yields:\n    -------\n    If y is None:\n        X_batch_list : list\n            A batch of X converted to a Python list.\n    Else:\n        (X_batch_list, y_batch_list) : tuple of lists\n            A batch of X and corresponding y, both converted to Python lists.\n    \"\"\"\n    X = np.asarray(X)\n    n_samples = X.shape[0]\n    if y is not None:\n        y = np.asarray(y)\n        if y.shape[0] != n_samples:\n            raise ValueError('X and y must have the same number of samples.')\n    for start in range(0, n_samples, batch_size):\n        end = start + batch_size\n        X_batch = X[start:end].tolist()\n        if y is None:\n            yield X_batch\n        else:\n            y_batch = y[start:end].tolist()\n            yield (X_batch, y_batch)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide a dataset based on whether the value of the specified feature\n    is greater than or equal to a threshold.\n\n    Parameters:\n    - X : array-like, shape (n_samples, n_features)\n        The dataset to split.\n    - feature_i : int\n        Index of the feature to test.\n    - threshold : float\n        The threshold value to compare against.\n\n    Returns:\n    - left_subset, right_subset : list of lists\n        left_subset contains all rows where X[row, feature_i] >= threshold.\n        right_subset contains all rows where X[row, feature_i] < threshold.\n        Both are converted to Python lists via numpy's tolist() method.\n    \"\"\"\n    X = np.asarray(X)\n    mask_left = X[:, feature_i] >= threshold\n    mask_right = ~mask_left\n    left_subset = X[mask_left].tolist()\n    right_subset = X[mask_right].tolist()\n    return (left_subset, right_subset)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for input data X up to a given degree.\n    \n    Parameters:\n    -----------\n    X : array-like, shape (n_samples, n_features)\n        The input data.\n    degree : int\n        The maximum degree of the polynomial features.\n        \n    Returns:\n    --------\n    poly_list : list of lists, shape (n_samples, n_output_features)\n        The polynomial features, returned as a pure Python list.\n    \"\"\"\n    X = np.asarray(X)\n    (n_samples, n_features) = X.shape\n    feature_columns = []\n    for deg in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), deg):\n            if len(comb) == 0:\n                col = np.ones((n_samples, 1), dtype=X.dtype)\n            else:\n                col = np.prod(X[:, comb], axis=1).reshape(n_samples, 1)\n            feature_columns.append(col)\n    poly = np.hstack(feature_columns)\n    return poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of the dataset (X, y).\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        Feature matrix.\n    y : np.ndarray, shape (n_samples,)\n        Target vector.\n    n_subsets : int\n        Number of random subsets to generate.\n    replacements : bool, default=True\n        If True, sampling is done with replacement (bootstrap).\n        If False, sampling is done without replacement.\n    seed : int, default=42\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    list_of_subsets : list of tuples\n        A list of length `n_subsets`, where each element is a tuple\n        (X_subset_list, y_subset_list). Both X_subset_list and\n        y_subset_list are plain Python lists (converted via tolist()).\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        idx = np.random.choice(n_samples, size=n_samples, replace=replacements)\n        X_sub = X[idx]\n        y_sub = y[idx]\n        subsets.append((X_sub.tolist(), y_sub.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D array of integer class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    x : array-like of shape (n_samples,)\n        Integer class labels.\n    n_col : int, optional\n        Number of output columns (i.e., number of classes).\n        If None, will be set to x.max() + 1.\n\n    Returns\n    -------\n    list of lists\n        One-hot encoded representation of x, as a Python list.\n    \"\"\"\n    x = np.asarray(x, dtype=int)\n    if x.ndim != 1:\n        raise ValueError('Input array x must be 1D.')\n    if n_col is None:\n        n_col = x.max() + 1\n    else:\n        n_col = int(n_col)\n    if np.any(x < 0) or np.any(x >= n_col):\n        raise ValueError(f'Class labels must be in [0, {n_col - 1}].')\n    one_hot = np.zeros((x.shape[0], n_col), dtype=int)\n    one_hot[np.arange(x.shape[0]), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix and return it as a nested Python list.\n    \n    Parameters:\n    x (numpy.ndarray): 1D array of length n.\n    \n    Returns:\n    list of list: n x n diagonal matrix represented as a nested Python list.\n    \"\"\"\n    x = np.asarray(x)\n    diag_mat = np.diag(x)\n    return diag_mat.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n\n    Parameters:\n    y_true (array\u2010like): 1D array of true labels.\n    y_pred (array\u2010like): 1D array of predicted labels.\n\n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError(f'Shape mismatch: y_true has shape {y_true.shape} but y_pred has shape {y_pred.shape}.')\n    accuracy = np.mean(y_true == y_pred)\n    return round(float(accuracy), 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the Pearson correlation matrix between columns of X and columns of Y.\n    If Y is None, returns the correlation matrix of X with itself.\n    Rounds all results to 4 decimal places and returns a nested Python list.\n\n    Parameters:\n    X : 2D array-like, shape (n_samples, n_features_x)\n    Y : 2D array-like, shape (n_samples, n_features_y), optional\n\n    Returns:\n    corr_matrix : list of lists, shape (n_features_x, n_features_y)\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[0] != Y.shape[0]:\n        raise ValueError('X and Y must have the same number of rows (samples).')\n    n_samples = X.shape[0]\n    X_centered = X - X.mean(axis=0)\n    Y_centered = Y - Y.mean(axis=0)\n    cov_matrix = X_centered.T @ Y_centered / (n_samples - 1)\n    std_x = X_centered.std(axis=0, ddof=1)\n    std_y = Y_centered.std(axis=0, ddof=1)\n    denom = np.outer(std_x, std_y)\n    corr_matrix = cov_matrix / denom\n    corr_matrix = np.round(corr_matrix, 4).tolist()\n    return corr_matrix"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Fit an AdaBoost classifier.\n\n    Parameters:\n        X : numpy.ndarray of shape (n_samples, n_features)\n            Training data.\n        y : numpy.ndarray of shape (n_samples,)\n            Labels, expected to be either {1, -1} or {1, 0}.\n        n_clf : int\n            Number of weak classifiers to use.\n\n    Returns:\n        classifiers : list of dict\n            Each dict contains the parameters of one weak classifier:\n            {\n                'feature': feature_index,\n                'threshold': threshold_value (rounded to 4 decimals),\n                'polarity': 1 or -1,\n                'alpha': classifier weight (rounded to 4 decimals)\n            }\n    \"\"\"\n    y = y.astype(int)\n    if set(np.unique(y)) <= {0, 1}:\n        y = np.where(y == 0, -1, 1)\n    (n_samples, n_features) = X.shape\n    w = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_clf = {}\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            X_col = X[:, feature_i]\n            thresholds = np.unique(X_col)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    preds = np.ones(n_samples)\n                    if polarity == 1:\n                        preds[X_col < threshold] = -1\n                    else:\n                        preds[X_col >= threshold] = -1\n                    err = np.sum(w[y != preds])\n                    if err < min_error:\n                        min_error = err\n                        best_clf = {'feature': feature_i, 'threshold': threshold, 'polarity': polarity, 'error': err}\n        eps = 1e-10\n        err = best_clf['error']\n        alpha = 0.5 * math.log((1.0 - err + eps) / (err + eps))\n        feature_i = best_clf['feature']\n        threshold = best_clf['threshold']\n        polarity = best_clf['polarity']\n        classifiers.append({'feature': feature_i, 'threshold': round(threshold, 4), 'polarity': polarity, 'alpha': round(alpha, 4)})\n        X_col = X[:, feature_i]\n        preds = np.ones(n_samples)\n        if polarity == 1:\n            preds[X_col < threshold] = -1\n        else:\n            preds[X_col >= threshold] = -1\n        w *= np.exp(-alpha * y * preds)\n        w /= np.sum(w)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Compute the log-softmax of a list of scores.\n\n    Args:\n        scores (list): A 1D list of numerical scores.\n\n    Returns:\n        list: The log-softmax of the input scores, rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(scores, dtype=np.float64)\n    x_shifted = x - np.max(x)\n    log_sum_exp = np.log(np.sum(np.exp(x_shifted)))\n    log_sm = x_shifted - log_sum_exp\n    return np.round(log_sm, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass SGD:\n    \"\"\"\n    Simple SGD optimizer.\n    \"\"\"\n\n    def __init__(self, lr=0.01):\n        self.lr = lr\n\n    def update(self, param, grad):\n        return param - self.lr * grad\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.opt_W = None\n        self.opt_b = None\n\n    def initialize(self):\n        \"\"\"\n        Initialize weights W and bias w0, and set up optimizers.\n        \"\"\"\n        input_dim = self.input_shape[0]\n        lim = 1.0 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-lim, lim, (input_dim, self.n_units))\n        self.w0 = np.zeros((self.n_units,))\n        self.opt_W = SGD(lr=0.01)\n        self.opt_b = SGD(lr=0.01)\n\n    def parameters(self):\n        \"\"\"\n        Return total number of trainable parameters.\n        \"\"\"\n        if self.W is None or self.w0 is None:\n            return 0\n        return int(self.W.size + self.w0.size)\n\n    def forward_pass(self, X, training=True):\n        \"\"\"\n        Compute output = X @ W + b\n        Round to 4 decimal places and return as Python list.\n        \"\"\"\n        X = np.array(X)\n        if self.W is None:\n            if self.input_shape is None:\n                self.input_shape = (X.shape[1],)\n            self.initialize()\n        self.layer_input = X\n        Z = X.dot(self.W) + self.w0\n        Z = np.round(Z, 4)\n        return Z.tolist()\n\n    def backward_pass(self, accum_grad):\n        \"\"\"\n        accum_grad: gradient w.r.t. this layer's outputs,\n                    shape (batch_size, n_units)\n        Returns gradient w.r.t. inputs, shape (batch_size, input_dim).\n        Also updates self.W and self.w0 if trainable.\n        \"\"\"\n        G = np.array(accum_grad)\n        X = self.layer_input\n        grad_W = X.T.dot(G)\n        grad_b = np.sum(G, axis=0)\n        grad_input = G.dot(self.W.T)\n        if self.trainable:\n            self.W = self.opt_W.update(self.W, grad_W)\n            self.w0 = self.opt_b.update(self.w0, grad_b)\n        grad_input = np.round(grad_input, 4)\n        return grad_input.tolist()\n\n    def output_shape(self):\n        \"\"\"\n        The output shape of this layer (excluding batch dimension).\n        \"\"\"\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Performs a 2D convolution (without bias) on input_matrix using the given kernel,\n    padding, and stride. Pads the input with zeros, applies the convolution,\n    rounds results to 4 decimal places, and returns a Python list.\n\n    Args:\n        input_matrix (np.ndarray): 2D array of shape (H, W)\n        kernel (np.ndarray): 2D array of shape (kH, kW)\n        padding (int): Amount of zero-padding around the input\n        stride (int): Stride length for the convolution\n\n    Returns:\n        List[List[float]]: The convolved output as a nested Python list\n    \"\"\"\n    (H, W) = input_matrix.shape\n    (kH, kW) = kernel.shape\n    padded = np.pad(input_matrix, pad_width=((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    out_h = (H + 2 * padding - kH) // stride + 1\n    out_w = (W + 2 * padding - kW) // stride + 1\n    output = np.zeros((out_h, out_w), dtype=float)\n    for i in range(out_h):\n        for j in range(out_w):\n            start_i = i * stride\n            start_j = j * stride\n            patch = padded[start_i:start_i + kH, start_j:start_j + kW]\n            output[i, j] = np.sum(patch * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Compute the Rectified Linear Unit (ReLU) activation.\n    Returns z if z > 0, otherwise returns 0.0.\n    \"\"\"\n    return z if z > 0 else 0.0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n\n    Parameters:\n    ----------\n    X : np.ndarray of shape (n_samples, n_features)\n        Feature matrix.\n    w : np.ndarray of shape (n_features,)\n        Coefficient vector.\n    y_true : np.ndarray of shape (n_samples,)\n        True target values.\n    alpha : float\n        Regularization strength.\n\n    Returns:\n    -------\n    float\n        Ridge loss = MSE + alpha * ||w||^2, rounded to 4 decimal places.\n    \"\"\"\n    n_samples = X.shape[0]\n    y_pred = X.dot(w)\n    mse = np.mean((y_pred - y_true) ** 2)\n    reg = alpha * np.sum(w ** 2)\n    loss = mse + reg\n    return float(np.round(loss, 4))"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Apply the Leaky ReLU activation function.\n\n    Parameters:\n    - z (float): The input value.\n    - alpha (float, optional): Slope for z < 0. Default is 0.01.\n\n    Returns:\n    - float|int: z if z >= 0, otherwise alpha * z.\n    \"\"\"\n    return z if z >= 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel (dot product) between two vectors.\n\n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n\n    Returns:\n    float: Dot product of x1 and x2.\n    \"\"\"\n    x1 = np.array(x1, dtype=float)\n    x2 = np.array(x2, dtype=float)\n    if x1.shape != x2.shape:\n        raise ValueError(f'Dimension mismatch: x1.shape={x1.shape}, x2.shape={x2.shape}')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Compute the precision metric for binary classification.\n\n    Precision = TP / (TP + FP)\n    where:\n      TP = number of true positives\n      FP = number of false positives\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        Array of true binary labels (0 or 1).\n    y_pred : np.ndarray\n        Array of predicted binary labels (0 or 1).\n\n    Returns\n    -------\n    float\n        Precision score. Returns 0.0 if there are no positive predictions.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    if tp + fp == 0:\n        return 0.0\n    return tp / (tp + fp)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent to minimize MSE loss.\n    \n    Parameters:\n    - X: np.ndarray, shape (n_samples, n_features)\n    - y: np.ndarray, shape (n_samples,) or (n_samples, 1)\n    - weights: np.ndarray, shape (n_features,) or (n_features, 1)\n    - learning_rate: float\n    - n_iterations: int, number of iterations (epochs for SGD/mini-batch)\n    - batch_size: int, size of the mini-batches (used if method='mini-batch')\n    - method: str, one of {'batch', 'sgd', 'mini-batch'}\n    \n    Returns:\n    - weights_list: list of final weights rounded to 4 decimals\n    \"\"\"\n    y = y.reshape(-1, 1)\n    weights = weights.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    m = n_samples\n    method = method.lower()\n    if method == 'batch':\n        bs = m\n    elif method == 'sgd':\n        bs = 1\n    elif method == 'mini-batch':\n        bs = batch_size\n        if bs < 1 or bs > m:\n            raise ValueError('batch_size must be between 1 and n_samples for mini-batch.')\n    else:\n        raise ValueError(\"method must be one of 'batch', 'sgd', 'mini-batch'.\")\n    for epoch in range(n_iterations):\n        if method in ['sgd', 'mini-batch']:\n            indices = np.random.permutation(m)\n        else:\n            indices = np.arange(m)\n        for start in range(0, m, bs):\n            end = start + bs\n            batch_idx = indices[start:end]\n            X_batch = X[batch_idx]\n            y_batch = y[batch_idx]\n            preds = X_batch.dot(weights)\n            errors = preds - y_batch\n            grad = 2 / bs * X_batch.T.dot(errors)\n            weights = weights - learning_rate * grad\n    weights = np.round(weights, 4)\n    return weights.reshape(-1).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Compute the Reduced Row Echelon Form (RREF) of a matrix.\n\n    Parameters:\n    matrix : array-like\n        The input matrix (list of lists or numpy array).\n\n    Returns:\n    list of lists\n        The RREF of the input matrix as a Python list of lists.\n    \"\"\"\n    A = np.array(matrix, dtype=float)\n    (rows, cols) = A.shape\n    pivot_row = 0\n    eps = 1e-12\n    for col in range(cols):\n        if pivot_row >= rows:\n            break\n        max_row = np.argmax(np.abs(A[pivot_row:rows, col])) + pivot_row\n        if abs(A[max_row, col]) < eps:\n            continue\n        if max_row != pivot_row:\n            A[[pivot_row, max_row], :] = A[[max_row, pivot_row], :]\n        A[pivot_row, :] = A[pivot_row, :] / A[pivot_row, col]\n        for r in range(rows):\n            if r != pivot_row:\n                A[r, :] = A[r, :] - A[r, col] * A[pivot_row, :]\n        pivot_row += 1\n    return A.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n    \n    Parameters:\n    - f: objective function (unused internally, provided for API consistency)\n    - grad: function that computes gradient of f at x\n    - x0: initial parameters (array-like)\n    - learning_rate: step size\n    - beta1: decay rate for first moment\n    - beta2: decay rate for second moment\n    - epsilon: small constant for numerical stability\n    - num_iterations: number of update steps\n    \n    Returns:\n    - optimized parameters as a Python list, rounded to 4 decimal places\n    \"\"\"\n    x = np.array(x0, dtype=float)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    shape = x.shape\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * (g * g)\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    x_rounded = np.round(x, 4).reshape(shape)\n    return x_rounded.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Fit Lasso Regression using (sub\u2010)gradient descent.\n\n    Parameters:\n    - X: np.array of shape (n_samples, n_features)\n    - y: np.array of shape (n_samples,)\n    - alpha: regularization strength (L1 penalty coefficient)\n    - learning_rate: step size for gradient descent\n    - max_iter: maximum number of iterations\n    - tol: tolerance for early stopping\n\n    Returns:\n    - w_list: list of learned weights (length n_features)\n    - b_val: learned bias (scalar)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X.dot(w) + b\n        error = y_pred - y\n        grad_w_mse = 1.0 / n_samples * X.T.dot(error)\n        grad_w_l1 = alpha * np.sign(w)\n        grad_w = grad_w_mse + grad_w_l1\n        grad_b = 1.0 / n_samples * np.sum(error)\n        w_old = w.copy()\n        b_old = b\n        w = w - learning_rate * grad_w\n        b = b - learning_rate * grad_b\n        if np.max(np.abs(w - w_old)) < tol and abs(b - b_old) < tol:\n            break\n    w = np.round(w, 4)\n    b = float(np.round(b, 4))\n    return (w.tolist(), b)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Compute the Optimal String Alignment (restricted Damerau-Levenshtein) distance\n    between source and target. Allowed operations (all cost 1):\n      - insertion\n      - deletion\n      - substitution\n      - transposition of two adjacent characters\n    \"\"\"\n    (len_s, len_t) = (len(source), len(target))\n    D = np.zeros((len_s + 1, len_t + 1), dtype=int)\n    for i in range(1, len_s + 1):\n        D[i, 0] = i\n    for j in range(1, len_t + 1):\n        D[0, j] = j\n    for i in range(1, len_s + 1):\n        for j in range(1, len_t + 1):\n            cost_sub = 0 if source[i - 1] == target[j - 1] else 1\n            del_cost = D[i - 1, j] + 1\n            ins_cost = D[i, j - 1] + 1\n            sub_cost = D[i - 1, j - 1] + cost_sub\n            D[i, j] = min(del_cost, ins_cost, sub_cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                trans_cost = D[i - 2, j - 2] + 1\n                if trans_cost < D[i, j]:\n                    D[i, j] = trans_cost\n    return int(D[len_s, len_t])"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall (sensitivity) for binary classification.\n\n    Parameters:\n    - y_true: list or array of true binary labels (0 or 1)\n    - y_pred: list or array of predicted binary labels (0 or 1)\n\n    Returns:\n    - recall_value: float, recall rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    denom = tp + fn\n    if denom == 0:\n        return 0.0\n    rec = tp / denom\n    return round(rec, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention of input sequence X.\n\n    Args:\n        X   : numpy array of shape (seq_len, d_model)\n        W_q : numpy array of shape (d_model, d_k)\n        W_k : numpy array of shape (d_model, d_k)\n        W_v : numpy array of shape (d_model, d_v)\n\n    Returns:\n        A Python list (seq_len x d_v) containing the self-attention outputs,\n        rounded to 4 decimal places.\n    \"\"\"\n    Q = X.dot(W_q)\n    K = X.dot(W_k)\n    V = X.dot(W_v)\n    d_k = K.shape[1]\n    scores = Q.dot(K.T) / np.sqrt(d_k)\n    scores_exp = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attn_weights = scores_exp / np.sum(scores_exp, axis=1, keepdims=True)\n    out = attn_weights.dot(V)\n    out_rounded = np.round(out, 4)\n    return out_rounded.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    A simple RNN forward pass. Processes a sequence of input vectors and returns\n    the final hidden state, using tanh activation and rounding to 4 decimals.\n    \n    Parameters:\n    - input_sequence: list of T input vectors, each of length D (list of lists)\n    - initial_hidden_state: initial hidden state, length H\n    - Wx: input-to-hidden weights, shape (H, D)\n    - Wh: hidden-to-hidden weights, shape (H, H)\n    - b: bias vector, length H\n    \n    Returns:\n    - final hidden state as a Python list of length H, rounded to 4 decimals\n    \"\"\"\n    x_seq = [np.array(x, dtype=float) for x in input_sequence]\n    h = np.array(initial_hidden_state, dtype=float)\n    Wx = np.array(Wx, dtype=float)\n    Wh = np.array(Wh, dtype=float)\n    b = np.array(b, dtype=float)\n    for x in x_seq:\n        h = np.tanh(Wx.dot(x) + Wh.dot(h) + b)\n    h_rounded = np.round(h, 4)\n    return h_rounded.tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Translates a set of 2D points by (tx, ty) using a 3x3 translation matrix.\n\n    Parameters:\n        points (list of [x, y]): List of 2D points to translate.\n        tx (float): Translation distance along the x-axis.\n        ty (float): Translation distance along the y-axis.\n\n    Returns:\n        list of [x', y']: New list of translated 2D points.\n    \"\"\"\n    pts = np.array(points, dtype=float)\n    T = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]], dtype=float)\n    ones = np.ones((pts.shape[0], 1), dtype=float)\n    pts_hom = np.hstack([pts, ones])\n    translated_hom = pts_hom.dot(T.T)\n    translated_pts = translated_hom[:, :2].tolist()\n    return translated_pts"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence D_KL(P || Q) between two univariate normal distributions:\n      P ~ N(mu_p, sigma_p^2)\n      Q ~ N(mu_q, sigma_q^2)\n\n    Formula:\n      D_KL(P || Q) = log(sigma_q / sigma_p)\n                     + (sigma_p^2 + (mu_p - mu_q)^2) / (2 * sigma_q^2)\n                     - 1/2\n\n    Args:\n      mu_p     (float): mean of distribution P\n      sigma_p  (float): standard deviation of distribution P (sigma_p > 0)\n      mu_q     (float): mean of distribution Q\n      sigma_q  (float): standard deviation of distribution Q (sigma_q > 0)\n\n    Returns:\n      float: the KL divergence D_KL(P || Q)\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    return term1 + term2 - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve the linear system Ax = b using the Gauss\u2013Seidel iterative method.\n    \n    Parameters:\n    A     : square coefficient matrix (list of lists or ndarray)\n    b     : right-hand side vector (list or ndarray)\n    n     : number of iterations\n    x_ini : optional initial guess for x (list or ndarray). If None, starts from zeros.\n    \n    Returns:\n    x_list : solution vector after n iterations, rounded to 4 decimals, as a Python list.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    N = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(N, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(N):\n            sum1 = np.dot(A[i, :i], x[:i])\n            sum2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - sum1 - sum2) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solve the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    All intermediate results and the final solution are rounded to 4 decimal places.\n    Returns the solution as a Python list.\n    \"\"\"\n    A = A.astype(float).copy()\n    b = b.astype(float).copy()\n    n = A.shape[0]\n    for k in range(n):\n        max_row = np.argmax(np.abs(A[k:, k])) + k\n        if A[max_row, k] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        if max_row != k:\n            A[[k, max_row], :] = A[[max_row, k], :]\n            (b[k], b[max_row]) = (b[max_row], b[k])\n        for i in range(k + 1, n):\n            factor = np.round(A[i, k] / A[k, k], 4)\n            A[i, k:] = A[i, k:] - factor * A[k, k:]\n            b[i] = b[i] - factor * b[k]\n            A[i, k:] = np.round(A[i, k:], 4)\n            b[i] = np.round(b[i], 4)\n    x = np.zeros(n, dtype=float)\n    for i in range(n - 1, -1, -1):\n        if A[i, i] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        rhs = b[i] - np.dot(A[i, i + 1:], x[i + 1:])\n        x[i] = np.round(rhs / A[i, i], 4)\n    return x.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs x and returns:\n          - hidden_states_list: list of hidden states at each time step\n          - final_hidden: final hidden state\n          - final_cell: final cell state\n\n        All outputs are rounded to 4 decimal places and converted to Python lists.\n        Args:\n          x: numpy array of shape (seq_len, input_size)\n          initial_hidden_state: numpy array of shape (hidden_size, 1)\n          initial_cell_state:   numpy array of shape (hidden_size, 1)\n        \"\"\"\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        hidden_states = []\n        seq_len = x.shape[0]\n        for t in range(seq_len):\n            x_t = x[t].reshape(-1, 1)\n            concat = np.vstack((h_prev, x_t))\n            f_t = sigmoid(self.Wf @ concat + self.bf)\n            i_t = sigmoid(self.Wi @ concat + self.bi)\n            c_hat_t = np.tanh(self.Wc @ concat + self.bc)\n            c_t = f_t * c_prev + i_t * c_hat_t\n            o_t = sigmoid(self.Wo @ concat + self.bo)\n            h_t = o_t * np.tanh(c_t)\n            h_t = np.round(h_t, 4)\n            c_t = np.round(c_t, 4)\n            hidden_states.append(h_t.copy())\n            h_prev = h_t\n            c_prev = c_t\n        hidden_states_list = [h.reshape(self.hidden_size, 1).tolist() for h in hidden_states]\n        final_hidden = h_prev.reshape(self.hidden_size, 1)\n        final_cell = c_prev.reshape(self.hidden_size, 1)\n        return (hidden_states_list, final_hidden.tolist(), final_cell.tolist())"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute the TF-IDF scores for each document in `corpus` w.r.t. the terms in `query`.\n    \n    Parameters:\n    - corpus: List of documents, each document is a list of words.\n    - query: List of words for which to compute TF-IDF scores.\n    \n    Returns:\n    - A list of lists of TF-IDF scores with shape (len(corpus), len(query)),\n      rounded to 4 decimal places.\n    \"\"\"\n    if not corpus:\n        return []\n    num_docs = len(corpus)\n    dfs = []\n    for term in query:\n        df = sum((1 for doc in corpus if term in doc))\n        dfs.append(df)\n    dfs = np.array(dfs, dtype=float)\n    idf = np.log((num_docs + 1) / (dfs + 1))\n    tf_idf_matrix = []\n    for doc in corpus:\n        doc_len = len(doc)\n        term_counts = {}\n        for w in doc:\n            term_counts[w] = term_counts.get(w, 0) + 1\n        row = []\n        for (i, term) in enumerate(query):\n            tf = term_counts.get(term, 0) / doc_len if doc_len > 0 else 0.0\n            row.append(tf * idf[i])\n        tf_idf_matrix.append(row)\n    tf_idf_np = np.array(tf_idf_matrix)\n    tf_idf_rounded = np.round(tf_idf_np, 4)\n    return tf_idf_rounded.tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels (0 or 1)\n    :param y_pred: Numpy array of predicted labels (0 or 1)\n    :param beta: The weight of precision in the harmonic mean (beta > 0)\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.asarray(y_true).astype(bool)\n    y_pred = np.asarray(y_pred).astype(bool)\n    tp = np.logical_and(y_pred, y_true).sum()\n    pp = y_pred.sum()\n    ap = y_true.sum()\n    precision = tp / pp if pp > 0 else 0.0\n    recall = tp / ap if ap > 0 else 0.0\n    b2 = beta ** 2\n    denom = b2 * precision + recall\n    if denom == 0:\n        f = 0.0\n    else:\n        f = (1 + b2) * (precision * recall) / denom\n    return round(f, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, inputs):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        inputs: numpy array of shape (T, input_size)\n        Returns:\n          - outputs: list of length T, each is (output_size, 1)\n          - x_s: list of inputs at each time step, each is (input_size, 1)\n          - h_s: list of hidden states at each time step, each is (hidden_size, 1)\n        \"\"\"\n        T = inputs.shape[0]\n        (x_s, h_s, y_s) = ([], [], [])\n        h_prev = np.zeros((self.hidden_size, 1))\n        for t in range(T):\n            x_t = inputs[t].reshape(-1, 1)\n            x_s.append(x_t)\n            h_linear = self.W_xh @ x_t + self.W_hh @ h_prev + self.b_h\n            h_t = np.tanh(h_linear)\n            h_s.append(h_t)\n            y_t = self.W_hy @ h_t + self.b_y\n            y_s.append(y_t)\n            h_prev = h_t\n        return (y_s, x_s, h_s)\n\n    def backward(self, x_s, h_s, y_s, targets, learning_rate):\n        \"\"\"\n        Backpropagation Through Time (BPTT) to update the RNN weights.\n        x_s: list of inputs at each time step (input_size,1)\n        h_s: list of hidden states at each time step (hidden_size,1)\n        y_s: list of outputs at each time step (output_size,1)\n        targets: numpy array of shape (T, output_size)\n        learning_rate: float\n        Returns:\n          - total loss for this sequence\n        \"\"\"\n        T = len(x_s)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros((self.hidden_size, 1))\n        loss = 0.0\n        for t in reversed(range(T)):\n            y_t = y_s[t]\n            target_t = targets[t].reshape(-1, 1)\n            x_t = x_s[t]\n            h_t = h_s[t]\n            h_prev = h_s[t - 1] if t > 0 else np.zeros_like(h_t)\n            e_t = y_t - target_t\n            loss += 0.5 * np.sum(e_t ** 2)\n            dy = e_t\n            dW_hy += dy @ h_t.T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            dh_raw = dh * (1 - h_t * h_t)\n            dW_xh += dh_raw @ x_t.T\n            dW_hh += dh_raw @ h_prev.T\n            db_h += dh_raw\n            dh_next = self.W_hh.T @ dh_raw\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimal places, as list)\n    \"\"\"\n    A = A.astype(float)\n    b = b.astype(float)\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.astype(float)\n    r = b - A.dot(x)\n    p = r.copy()\n    rsold = r.dot(r)\n    for i in range(n):\n        Ap = A.dot(p)\n        alpha = rsold / p.dot(Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r.dot(r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    x = np.round(x, 8)\n    return x.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    arr = np.array(y)\n    (_, counts) = np.unique(arr, return_counts=True)\n    probs = counts / counts.sum()\n    gini = 1.0 - np.sum(probs ** 2)\n    return float(np.round(gini, 3))"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_ptr = [0]\n    for row in dense_matrix:\n        count_in_row = 0\n        for (col_index, element) in enumerate(row):\n            if element != 0:\n                values.append(element)\n                col_indices.append(col_index)\n                count_in_row += 1\n        row_ptr.append(row_ptr[-1] + count_in_row)\n    return (values, col_indices, row_ptr)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected (list of numbers)\n    :param L: The line vector defining the direction of projection (list of numbers)\n    :return: List representing the projection of v onto L, rounded to 3 decimal places\n    \"\"\"\n    if not isinstance(v, (list, tuple)) or not isinstance(L, (list, tuple)):\n        raise TypeError('Both v and L must be lists or tuples of numbers.')\n    if len(v) != len(L):\n        raise ValueError('Vectors v and L must have the same dimension.')\n    dot_vL = sum((vi * Li for (vi, Li) in zip(v, L)))\n    dot_LL = sum((Li * Li for Li in L))\n    if dot_LL == 0:\n        raise ValueError('Cannot project onto the zero vector L.')\n    scalar = dot_vL / dot_LL\n    proj = [round(scalar * Li, 3) for Li in L]\n    return proj"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row_indices, column_pointer)\n             - values: non-zero elements in column-major order\n             - row_indices: corresponding row indices for each value\n             - column_pointer: array of length (n_cols + 1), where\n               column_pointer[j] is the index in `values` where column j starts,\n               and column_pointer[n_cols] == len(values)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    n_rows = len(dense_matrix)\n    n_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for j in range(n_cols):\n        col_nnz = 0\n        for i in range(n_rows):\n            val = dense_matrix[i][j]\n            if val != 0:\n                values.append(val)\n                row_indices.append(i)\n                col_nnz += 1\n        column_pointer.append(column_pointer[-1] + col_nnz)\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute a basis for the column space (image) of matrix A using row echelon form.\n    \n    Parameters:\n    A : array-like, shape (m, n)\n        Input matrix.\n    \n    Returns:\n    basis_list : list of lists\n        The basis vectors for the column space of A (as columns), rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    M = A.copy()\n    pivot_cols = []\n    row = 0\n    tol = 1e-12\n    for col in range(n):\n        pivot_row = None\n        for r in range(row, m):\n            if abs(M[r, col]) > tol:\n                pivot_row = r\n                break\n        if pivot_row is None:\n            continue\n        if pivot_row != row:\n            M[[row, pivot_row], :] = M[[pivot_row, row], :]\n        pivot_cols.append(col)\n        pivot_val = M[row, col]\n        for r in range(row + 1, m):\n            factor = M[r, col] / pivot_val\n            M[r, :] -= factor * M[row, :]\n        row += 1\n        if row == m:\n            break\n    if not pivot_cols:\n        basis = np.zeros((m, 0))\n    else:\n        basis = A[:, pivot_cols]\n    basis = np.round(basis, 8)\n    return basis.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the coefficient of determination (R-squared) for a set of true and predicted values.\n\n    Parameters:\n    y_true (array-like): True target values.\n    y_pred (array-like): Predicted target values.\n\n    Returns:\n    float: R-squared value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Shapes of y_true and y_pred must match.')\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)\n    if ss_tot == 0:\n        return 0.0\n    r2 = 1 - ss_res / ss_tot\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculate the average brightness of a grayscale image represented as a 2D matrix.\n\n    Args:\n        img (list of list of int/float): 2D matrix of pixel values (0\u2013255).\n\n    Returns:\n        float: Average brightness rounded to two decimal places,\n               or -1 if the input is invalid.\n    \"\"\"\n    if not img or not isinstance(img, list):\n        return -1\n    row_length = None\n    for row in img:\n        if not isinstance(row, list) or len(row) == 0:\n            return -1\n        if row_length is None:\n            row_length = len(row)\n        elif len(row) != row_length:\n            return -1\n    total_pixels = len(img) * row_length\n    if total_pixels == 0:\n        return -1\n    total_value = 0.0\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, (int, float)) or pixel < 0 or pixel > 255:\n                return -1\n            total_value += pixel\n    average = total_value / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n\n    Parameters:\n    - y_true: array-like of shape (n,), true target values\n    - y_pred: array-like of shape (n,), predicted values\n\n    Returns:\n    - rmse_val: float, the RMSE rounded to three decimal places\n\n    Raises:\n    - TypeError: if inputs cannot be converted to numeric arrays\n    - ValueError: if arrays are empty, not 1-D, or have mismatched shapes\n    \"\"\"\n    try:\n        y_true_arr = np.array(y_true, dtype=float)\n        y_pred_arr = np.array(y_pred, dtype=float)\n    except Exception:\n        raise TypeError('y_true and y_pred must be array-like of numeric values')\n    if y_true_arr.ndim != 1 or y_pred_arr.ndim != 1:\n        raise ValueError('y_true and y_pred must be 1-D arrays')\n    if y_true_arr.size == 0:\n        raise ValueError('Input arrays must not be empty')\n    if y_true_arr.shape != y_pred_arr.shape:\n        raise ValueError('y_true and y_pred must have the same shape')\n    mse = np.mean((y_true_arr - y_pred_arr) ** 2)\n    rmse_val = np.sqrt(mse)\n    return round(rmse_val, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index (Intersection over Union) for binary labels.\n    \n    Parameters:\n    - y_true: array-like of shape (n_samples,), ground truth binary labels (0 or 1)\n    - y_pred: array-like of shape (n_samples,), predicted binary labels (0 or 1)\n    \n    Returns:\n    - jaccard: float, Jaccard Index rounded to three decimal places\n    \"\"\"\n    y_true = np.asarray(y_true).ravel()\n    y_pred = np.asarray(y_pred).ravel()\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    intersection = np.logical_and(y_true == 1, y_pred == 1).sum()\n    union = np.logical_or(y_true == 1, y_pred == 1).sum()\n    if union == 0:\n        jaccard = 1.0\n    else:\n        jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen\u2013Dice coefficient) for binary classification.\n\n    Parameters:\n    - y_true: array-like of shape (n_samples,), ground truth binary labels (0 or 1).\n    - y_pred: array-like of shape (n_samples,), predicted binary labels (0 or 1).\n\n    Returns:\n    - dice: float, Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true).astype(bool).ravel()\n    y_pred = np.asarray(y_pred).astype(bool).ravel()\n    intersection = np.logical_and(y_true, y_pred).sum()\n    total = y_true.sum() + y_pred.sum()\n    if total == 0:\n        return 1.0\n    dice = 2 * intersection / total\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\nimport hashlib\ndef _int_from_str(s):\n    \"\"\"\n    Deterministically convert a string to a 32-bit integer\n    using MD5 hashing.\n    \"\"\"\n    h = hashlib.md5(s.encode('utf-8')).digest()\n    return int.from_bytes(h[:4], byteorder='little', signed=False)\ndef _random_bipolar_hv(dim, seed):\n    \"\"\"\n    Generate a bipolar hypervector of dimension `dim`\n    with entries in {+1, -1}, using the given integer seed.\n    \"\"\"\n    rng = np.random.RandomState(seed)\n    return rng.choice([1, -1], size=dim)\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Create a composite hypervector for `row` (dict of feature:value),\n    with hypervector dimension `dim` and reproducible seeds\n    provided in `random_seeds` (feature -> seed).\n    \"\"\"\n    bundled = np.zeros(dim, dtype=int)\n    for (feature, value) in row.items():\n        if feature not in random_seeds:\n            raise KeyError(f\"Missing random seed for feature '{feature}'\")\n        base_seed = int(random_seeds[feature])\n        name_seed = base_seed\n        hv_name = _random_bipolar_hv(dim, name_seed)\n        value_str = str(value)\n        value_hash = _int_from_str(f'{feature}:{value_str}')\n        value_seed = base_seed ^ value_hash\n        hv_value = _random_bipolar_hv(dim, value_seed)\n        hv_bound = hv_name * hv_value\n        bundled += hv_bound\n    composite = np.sign(bundled).astype(int)\n    composite[composite == 0] = 1\n    return composite.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a 2x2 confusion matrix for binary classification.\n    Input:\n        data: list of [y_true, y_pred] pairs\n    Output:\n        matrix: [[TN, FP],\n                 [FN, TP]]\n    \"\"\"\n    labels = sorted({true for (true, _) in data} | {pred for (_, pred) in data})\n    if len(labels) != 2:\n        raise ValueError(f'Expected exactly 2 unique labels, got {len(labels)}: {labels}')\n    cnt = Counter(((true, pred) for (true, pred) in data))\n    tn = cnt[labels[0], labels[0]]\n    fp = cnt[labels[0], labels[1]]\n    fn = cnt[labels[1], labels[0]]\n    tp = cnt[labels[1], labels[1]]\n    return [[tn, fp], [fn, tp]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n\n    Args:\n        v1 (np.ndarray): First input vector.\n        v2 (np.ndarray): Second input vector.\n\n    Returns:\n        float: Cosine similarity rounded to three decimal places.\n\n    Raises:\n        ValueError: If the vectors have different shapes, are empty,\n                    or have zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError(f'Shape mismatch: v1{v1.shape} vs v2{v2.shape}')\n    mag_v1 = np.linalg.norm(v1)\n    mag_v2 = np.linalg.norm(v2)\n    if mag_v1 == 0 or mag_v2 == 0:\n        raise ValueError('Input vectors must have non-zero magnitude')\n    dot_product = np.dot(v1, v2)\n    cos_sim = dot_product / (mag_v1 * mag_v2)\n    return round(cos_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Compute confusion matrix, accuracy, F1 score, specificity, and\n    negative predictive value for binary classification.\n\n    Returns:\n        confusion_matrix: [[TN, FP], [FN, TP]]\n        accuracy: float\n        f1_score: float\n        specificity: float\n        negative_predictive_value: float\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    for (i, (a, p)) in enumerate(zip(actual, predicted)):\n        if a not in (0, 1) or p not in (0, 1):\n            raise ValueError(f'Invalid label at index {i}: actual={a}, predicted={p}. Labels must be 0 or 1.')\n    cnt = Counter(zip(actual, predicted))\n    TP = cnt[1, 1]\n    TN = cnt[0, 0]\n    FP = cnt[0, 1]\n    FN = cnt[1, 0]\n    confusion_matrix = [[TN, FP], [FN, TP]]\n    total = TP + TN + FP + FN\n    accuracy = (TP + TN) / total if total else 0.0\n    precision_den = TP + FP\n    precision = TP / precision_den if precision_den else 0.0\n    recall_den = TP + FN\n    recall = TP / recall_den if recall_den else 0.0\n    f1_score_den = precision + recall\n    f1_score = 2 * precision * recall / f1_score_den if f1_score_den else 0.0\n    specificity_den = TN + FP\n    specificity = TN / specificity_den if specificity_den else 0.0\n    npv_den = TN + FN\n    negative_predictive_value = TN / npv_den if npv_den else 0.0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics for a 1D list or NumPy array of numbers.\n    \n    Returns a dictionary with the following keys:\n      - 'mean'\n      - 'median'\n      - 'mode'\n      - 'variance'\n      - 'standard_deviation'\n      - '25th_percentile'\n      - '50th_percentile'\n      - '75th_percentile'\n      - 'interquartile_range'\n      \n    All returned values (except the mode, which is a data\u2010derived value) \n    are rounded to four decimal places.\n    \"\"\"\n    arr = np.array(data, dtype=float).flatten()\n    if arr.size == 0:\n        raise ValueError('Input data must contain at least one numeric value.')\n    mean_val = np.mean(arr)\n    median_val = np.median(arr)\n    var_val = np.var(arr, ddof=0)\n    std_val = np.std(arr, ddof=0)\n    p25 = np.percentile(arr, 25)\n    p50 = np.percentile(arr, 50)\n    p75 = np.percentile(arr, 75)\n    iqr = p75 - p25\n    arr_list = arr.tolist()\n    freq = Counter(arr_list)\n    max_count = max(freq.values())\n    modes = [val for (val, cnt) in freq.items() if cnt == max_count]\n    mode_val = min(modes)\n    stats = {'mean': round(float(mean_val), 4), 'median': round(float(median_val), 4), 'mode': mode_val, 'variance': round(float(var_val), 4), 'standard_deviation': round(float(std_val), 4), '25th_percentile': round(float(p25), 4), '50th_percentile': round(float(p50), 4), '75th_percentile': round(float(p75), 4), 'interquartile_range': round(float(iqr), 4)}\n    return stats"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials (rounded to 5 decimal places)\n    \"\"\"\n    if not 0 <= k <= n:\n        raise ValueError('k must be between 0 and n inclusive.')\n    if not 0.0 <= p <= 1.0:\n        raise ValueError('p must be between 0 and 1 inclusive.')\n    coeff = math.comb(n, k)\n    prob = coeff * p ** k * (1 - p) ** (n - k)\n    return round(prob, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    coeff = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n    pdf_value = coeff * exponent\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError('k must be a non-negative integer.')\n    if lam < 0:\n        raise ValueError('lam (lambda) must be non-negative.')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import sys\nimport argparse\nimport numpy as np\nfrom PIL import Image\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: Contrast value (max pixel - min pixel).\n    \"\"\"\n    if not isinstance(img, np.ndarray):\n        raise TypeError('img must be a numpy.ndarray')\n    if img.ndim != 2:\n        raise ValueError('img must be a 2D grayscale image')\n    if img.size == 0:\n        raise ValueError('img must not be empty')\n    img = img.astype(np.float32)\n    min_val = img.min()\n    max_val = img.max()\n    contrast = max_val - min_val\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float or int: The dot product of vec1 and vec2.\n    Raises:\n        ValueError: If inputs are not 1D arrays of the same length.\n    \"\"\"\n    vec1 = np.asarray(vec1)\n    vec2 = np.asarray(vec2)\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if vec1.shape != vec2.shape:\n        raise ValueError('Vectors must have the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features\n                           [x^0, x^1, ..., x^degree] of the corresponding data point,\n                           rounded to 8 decimal places. Returns an empty list if degree < 0.\n    \"\"\"\n    if degree < 0:\n        return []\n    arr = np.array(data, dtype=float)\n    exponents = np.arange(degree + 1)\n    transformed = arr[:, np.newaxis] ** exponents\n    transformed = np.round(transformed, 8)\n    return transformed.tolist()"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Compute the positional encoding matrix for Transformer models.\n    Args:\n      position (int): the maximum sequence length (number of positions).\n      d_model (int): the dimensionality of the model.\n    Returns:\n      A Python list of shape (position, d_model) containing the positional encodings\n      (dtype np.float16), or -1 if inputs are invalid.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float32)\n    pos = np.arange(position)[:, np.newaxis]\n    i = np.arange(0, d_model, 2)\n    div_term = np.exp(-np.log(10000.0) * i / d_model)\n    pe[:, 0::2] = np.sin(pos * div_term)\n    pe[:, 1::2] = np.cos(pos * div_term)\n    return pe.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    \n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of 1 (Overfitting), -1 (Underfitting), or 0 (Good fit).\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep (integer, starting from 1)\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter_list, updated_m_list, updated_v_list)\n    \"\"\"\n    param_np = np.atleast_1d(np.array(parameter, dtype=float))\n    grad_np = np.atleast_1d(np.array(grad, dtype=float))\n    m_np = np.atleast_1d(np.array(m, dtype=float))\n    v_np = np.atleast_1d(np.array(v, dtype=float))\n    m_t = beta1 * m_np + (1.0 - beta1) * grad_np\n    v_t = beta2 * v_np + (1.0 - beta2) * grad_np ** 2\n    m_hat = m_t / (1.0 - beta1 ** t)\n    v_hat = v_t / (1.0 - beta2 ** t)\n    param_t = param_np - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_param = np.round(param_t, 5).tolist()\n    updated_m = np.round(m_t, 5).tolist()\n    updated_v = np.round(v_t, 5).tolist()\n    return (updated_param, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n    \"\"\"\n    Dummy loader that returns:\n     - a simple BPE encoder with a tiny vocab,\n     - minimal hyperparameters,\n     - randomly initialized model parameters (token + position embeddings,\n       an empty list of transformer blocks, and a final layer norm).\n    \"\"\"\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'<UNK>': 0, 'hello': 1, 'world': 2}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(t, self.encoder_dict['<UNK>']) for t in tokens]\n\n        def decode(self, token_ids: list):\n            rev = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join((rev.get(tid, '<UNK>') for tid in token_ids))\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.randn(3, 10) * 0.1, 'wpe': np.random.randn(hparams['n_ctx'], 10) * 0.1, 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gelu(x):\n    \"\"\"Gaussian Error Linear Unit activation.\"\"\"\n    return 0.5 * x * (1.0 + np.tanh(np.sqrt(2.0 / np.pi) * (x + 0.044715 * x ** 3)))\ndef softmax(x, axis=-1):\n    \"\"\"Numerically stable softmax.\"\"\"\n    x_max = np.max(x, axis=axis, keepdims=True)\n    e_x = np.exp(x - x_max)\n    return e_x / np.sum(e_x, axis=axis, keepdims=True)\ndef layer_norm(x, g, b, eps=1e-05):\n    \"\"\"\n    Apply LayerNorm over the last dimension of x.\n    g, b are of shape (d_model,)\n    \"\"\"\n    if x.ndim == 1:\n        mu = x.mean()\n        var = x.var()\n        return g * (x - mu) / np.sqrt(var + eps) + b\n    elif x.ndim == 2:\n        mu = x.mean(axis=1, keepdims=True)\n        var = x.var(axis=1, keepdims=True)\n        return g * (x - mu) / np.sqrt(var + eps) + b\n    else:\n        raise ValueError('Unsupported tensor rank for layer_norm')\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    \"\"\"\n    Simplified GPT-2\u2013style autoregressive generation:\n      - token + positional embeddings\n      - one block of self-attention + feed-forward + residual + layer norms\n      - final layer norm + linear projection to token logits\n      - sample next token via softmax\n    \"\"\"\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    wte = params['wte']\n    wpe = params['wpe']\n    ln_f = params['ln_f']\n    (vocab_size, d_model) = wte.shape\n    d_ff = 4 * d_model\n    W1 = np.random.randn(d_model, d_ff) * 0.1\n    b1 = np.zeros(d_ff)\n    W2 = np.random.randn(d_ff, d_model) * 0.1\n    b2 = np.zeros(d_model)\n    for _ in range(n_tokens_to_generate):\n        if len(token_ids) > hparams['n_ctx']:\n            token_ids = token_ids[-hparams['n_ctx']:]\n        seq_len = len(token_ids)\n        x = wte[token_ids] + wpe[:seq_len]\n        scale = np.sqrt(d_model).astype(np.float32)\n        scores = x @ x.T / scale\n        attn_probs = softmax(scores, axis=-1)\n        attn_output = attn_probs @ x\n        x = x + attn_output\n        x = layer_norm(x, np.ones(d_model), np.zeros(d_model))\n        ff_hidden = gelu(x @ W1 + b1)\n        ff_output = ff_hidden @ W2 + b2\n        x = x + ff_output\n        x = layer_norm(x, np.ones(d_model), np.zeros(d_model))\n        x_last = layer_norm(x[-1], ln_f['g'], ln_f['b'])\n        logits = x_last @ wte.T\n        probs = softmax(logits)\n        next_token = np.random.choice(vocab_size, p=probs)\n        token_ids.append(int(next_token))\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(x):\n        exps = np.exp(x - np.max(x))\n        return exps / np.sum(exps)\n    values = np.array(crystal_values, dtype=float)\n    Q = np.tile(values.reshape(n, 1), (1, dimension))\n    K = Q.copy()\n    V = Q.copy()\n    scores = Q @ K.T / np.sqrt(dimension)\n    attention = np.zeros_like(scores)\n    for i in range(n):\n        attention[i, :] = softmax(scores[i, :])\n    weighted_vectors = attention @ V\n    output = [round(vec.mean(), 4) for vec in weighted_vectors]\n    return output"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for a corpus of documents given a query.\n    \n    Parameters:\n    - corpus: list of strings, each string is a document.\n    - query: string, the search query.\n    - k1: float, term frequency saturation parameter.\n    - b: float, document length normalization parameter.\n    \n    Returns:\n    - List of BM25 scores (floats rounded to three decimals), one per document.\n    \"\"\"\n    tokenized_docs = [doc.lower().split() for doc in corpus]\n    doc_lengths = np.array([len(doc) for doc in tokenized_docs], dtype=float)\n    avgdl = np.mean(doc_lengths)\n    N = len(corpus)\n    df = Counter()\n    for doc in tokenized_docs:\n        for term in set(doc):\n            df[term] += 1\n    query_terms = query.lower().split()\n    scores = []\n    for (idx, doc) in enumerate(tokenized_docs):\n        doc_len = doc_lengths[idx]\n        freqs = Counter(doc)\n        score = 0.0\n        for term in query_terms:\n            if term in freqs:\n                n_q = df.get(term, 0)\n                idf = np.log((N - n_q + 0.5) / (n_q + 0.5) + 1)\n                f = freqs[term]\n                numerator = f * (k1 + 1)\n                denominator = f + k1 * (1 - b + b * (doc_len / avgdl))\n                score += idf * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    tp = fp = fn = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if pred == 1 and true == 1:\n            tp += 1\n        elif pred == 1 and true != 1:\n            fp += 1\n        elif pred != 1 and true == 1:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Given a list of 10 daily power consumption measurements (list of floats or ints),\n    this function:\n      1) Removes the known daily fluctuation f(i) = 10 * sin(2\u03c0 i / 10)\n      2) Fits a linear regression y = m*x + b to the detrended data (x = day number)\n      3) Predicts the base (trend) consumption on day 15\n      4) Adds back the fluctuation for day 15\n      5) Rounds the result to nearest integer, then adds a 5% safety margin (rounded up)\n      6) Returns the final integer forecast\n    \"\"\"\n    n = len(consumption_data)\n    if n != 10:\n        raise ValueError('Exactly 10 data points are required.')\n    detrended = []\n    for (i, obs) in enumerate(consumption_data, start=1):\n        fluct = 10 * math.sin(2 * PI * i / 10)\n        detrended.append(obs - fluct)\n    x_vals = list(range(1, n + 1))\n    sum_x = sum(x_vals)\n    sum_y = sum(detrended)\n    sum_xy = sum((x * y for (x, y) in zip(x_vals, detrended)))\n    sum_x2 = sum((x * x for x in x_vals))\n    denom = n * sum_x2 - sum_x * sum_x\n    if denom == 0:\n        raise ValueError('Denominator in regression computation is zero.')\n    m = (n * sum_xy - sum_x * sum_y) / denom\n    b = (sum_y - m * sum_x) / n\n    base_15 = m * 15 + b\n    fluct_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_15 = base_15 + fluct_15\n    rounded_pred = round(predicted_15)\n    final_with_margin = math.ceil(rounded_pred * 1.05)\n    return final_with_margin"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError(f'Shape mismatch: y_true has shape {y_true.shape}, but y_pred has shape {y_pred.shape}')\n    abs_errors = np.abs(y_true - y_pred)\n    error_mean = np.mean(abs_errors)\n    return float(np.round(error_mean, 3))"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute query, key, and value matrices.\n    X: (seq_len, d_model)\n    W_q, W_k, W_v: (d_model, d_model)\n    Returns Q, K, V each of shape (seq_len, d_model)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray):\n    \"\"\"\n    Compute self-attention for a single head.\n    Q, K, V: (seq_len, d_k)\n    Returns: (seq_len, d_k)\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    scores = scores - np.max(scores, axis=1, keepdims=True)\n    exp_scores = np.exp(scores)\n    attn = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    out = attn @ V\n    return out\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention.\n    X: (seq_len, d_model)\n    W_q, W_k, W_v: (d_model, d_model)\n    n_heads: number of heads\n    Returns a Python list of shape (seq_len, d_model), rounded to 4 decimals.\n    \"\"\"\n    (seq_len, d_model) = X.shape\n    assert d_model % n_heads == 0, 'd_model must be divisible by n_heads'\n    d_k = d_model // n_heads\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Qh = Q.reshape(seq_len, n_heads, d_k)\n    Kh = K.reshape(seq_len, n_heads, d_k)\n    Vh = V.reshape(seq_len, n_heads, d_k)\n    heads = []\n    for h in range(n_heads):\n        qh = Qh[:, h, :]\n        kh = Kh[:, h, :]\n        vh = Vh[:, h, :]\n        head_out = self_attention(qh, kh, vh)\n        heads.append(head_out)\n    multi_head = np.concatenate(heads, axis=1)\n    multi_head = np.round(multi_head, 4)\n    return multi_head.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "import math\nfrom typing import List\ndef phi_corr(x: List[int], y: List[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n        x (list[int]): A list of binary values (0 or 1).\n        y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n        float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must have the same length.')\n    n11 = n10 = n01 = n00 = 0\n    for (xi, yi) in zip(x, y):\n        if xi not in (0, 1) or yi not in (0, 1):\n            raise ValueError('All elements in input lists must be 0 or 1.')\n        if xi == 1 and yi == 1:\n            n11 += 1\n        elif xi == 1 and yi == 0:\n            n10 += 1\n        elif xi == 0 and yi == 1:\n            n01 += 1\n        else:\n            n00 += 1\n    n1_ = n11 + n10\n    n0_ = n01 + n00\n    n_1 = n11 + n01\n    n_0 = n10 + n00\n    denom = math.sqrt(n1_ * n0_ * n_1 * n_0)\n    if denom == 0:\n        raise ValueError('Division by zero: one of the marginals is zero, Phi undefined.')\n    phi = (n11 * n00 - n10 * n01) / denom\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    y = 0.2 * x + 0.5\n    if y < 0.0:\n        return 0.0\n    elif y > 1.0:\n        return 1.0\n    else:\n        return y"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to the 4th decimal place\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places\n    \"\"\"\n    if x > 0:\n        result = x + math.log1p(math.exp(-x))\n    else:\n        result = math.log1p(math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value (rounded to 6 decimal places).\n    \"\"\"\n    rhos = np.array(rhos, dtype=np.float64)\n    A = np.array(A, dtype=np.float64)\n    p_old = np.array(pi_theta_old, dtype=np.float64)\n    p_ref = np.array(pi_theta_ref, dtype=np.float64)\n    if not rhos.shape == A.shape == p_old.shape == p_ref.shape:\n        raise ValueError('All input arrays must have the same shape.')\n    clipped_rhos = np.clip(rhos, 1.0 - epsilon, 1.0 + epsilon)\n    term1 = rhos * A\n    term2 = clipped_rhos * A\n    surrogate_terms = np.minimum(term1, term2)\n    surrogate_obj = np.mean(surrogate_terms)\n    eps_log = 1e-12\n    p_new = rhos * p_old\n    kl_terms = p_new * (np.log(p_new + eps_log) - np.log(p_ref + eps_log))\n    kl_div = np.sum(kl_terms)\n    obj = surrogate_obj - beta * kl_div\n    return float(np.round(obj, 6))"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to 4 decimal places\n    \"\"\"\n    sigmoid = 1.0 / (1.0 + math.exp(-x))\n    val = x * sigmoid\n    return round(val, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to 4 decimal places.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * (alpha * (math.exp(x) - 1))\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1) as a Python list\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probs = 1 / (1 + np.exp(-z))\n    preds = (probs >= 0.5).astype(int)\n    return preds.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list, list]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: np.ndarray of shape (N, M), input data (N samples, M features)\n        y: np.ndarray of shape (N,), integer class labels in [0..C-1]\n        learning_rate: float, step size for gradient descent\n        iterations: int, number of GD steps\n\n    Returns:\n        B : list of lists, shape (C, M), updated parameter matrix rounded to 4 decimals\n        losses : list of floats, Cross Entropy loss per iteration rounded to 4 decimals\n    \"\"\"\n    (N, M) = X.shape\n    C = int(y.max()) + 1\n    W = np.zeros((C, M))\n    losses = []\n    for it in range(iterations):\n        scores = X.dot(W.T)\n        scores -= np.max(scores, axis=1, keepdims=True)\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        correct_logprobs = -np.log(probs[np.arange(N), y])\n        loss = np.sum(correct_logprobs) / N\n        losses.append(round(loss, 4))\n        dscores = probs\n        dscores[np.arange(N), y] -= 1\n        dscores /= N\n        dW = dscores.T.dot(X)\n        W -= learning_rate * dW\n    B = np.round(W, 4).tolist()\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters\n    with Binary Cross Entropy loss.\n    \n    Returns:\n        coeffs: list of optimized coefficients (first element is intercept) rounded to 4 decimals\n        losses: list of BCE loss values at each iteration rounded to 4 decimals\n    \"\"\"\n    (m, n) = X.shape\n    X_aug = np.hstack((np.ones((m, 1)), X))\n    w = np.zeros(n + 1, dtype=float)\n    losses = []\n    for i in range(iterations):\n        z = X_aug.dot(w)\n        p = 1.0 / (1.0 + np.exp(-z))\n        eps = 1e-15\n        loss = -np.mean(y * np.log(p + eps) + (1 - y) * np.log(1 - p + eps))\n        grad = 1.0 / m * X_aug.T.dot(p - y)\n        w -= learning_rate * grad\n        losses.append(round(loss, 4))\n    coeffs = np.round(w, 4).tolist()\n    return (coeffs, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> list:\n    \"\"\"\n    Compute masked self-attention.\n    Q, K, V: shape (seq_len, d_k)\n    mask: shape (seq_len, seq_len), with 0 for allowed, -inf (or a large negative) for masked positions\n    Returns:\n      attended output of shape (seq_len, d_k) as a Python list.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    masked_scores = scores + mask\n    max_per_row = np.max(masked_scores, axis=-1, keepdims=True)\n    exp_scores = np.exp(masked_scores - max_per_row)\n    attn_weights = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    output = np.dot(attn_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    Uses Shannon entropy (base-2) of the color distribution, which is 0 when\n    all apples are the same color and increases as the variety (and evenness)\n    of colors increases.\n    Results are rounded to the nearest 4th decimal.\n    \"\"\"\n    n = len(apples)\n    if n <= 1:\n        return 0.0\n    freqs = Counter(apples)\n    H = 0.0\n    for count in freqs.values():\n        p = count / n\n        H -= p * math.log2(p)\n    return round(H, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on 3D input tensor X.\n\n    Parameters:\n    - X: np.ndarray of shape (batch_size, seq_len, feature_dim)\n    - gamma: np.ndarray of shape (feature_dim,)\n    - beta: np.ndarray of shape (feature_dim,)\n    - epsilon: small float added to variance for numerical stability\n\n    Returns:\n    - A Python list corresponding to the layer-normalized output,\n      rounded to 5 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    out = X_norm * gamma.reshape(1, 1, -1) + beta.reshape(1, 1, -1)\n    out_rounded = np.round(out, 5)\n    return out_rounded.tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Compute the METEOR score between a reference and a candidate sentence.\n    \n    Args:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation.\n        alpha (float): Parameter for F\u2010mean (default=0.9).\n        beta (int): Parameter for fragmentation penalty exponent (default=3).\n        gamma (float): Parameter for fragmentation penalty scale (default=0.5).\n    \n    Returns:\n        float: METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_tokens = reference.lower().split()\n    can_tokens = candidate.lower().split()\n    ref_counts = Counter(ref_tokens)\n    can_counts = Counter(can_tokens)\n    matches = sum((min(ref_counts[w], can_counts[w]) for w in can_counts))\n    if matches == 0:\n        return 0.0\n    precision = matches / len(can_tokens)\n    recall = matches / len(ref_tokens)\n    denom = (1 - alpha) * precision + alpha * recall\n    fmean = precision * recall / denom if denom > 0 else 0.0\n    pos_map = {}\n    for (idx, tok) in enumerate(ref_tokens):\n        pos_map.setdefault(tok, []).append(idx)\n    used_idx = {tok: 0 for tok in pos_map}\n    matched_positions = []\n    for tok in can_tokens:\n        if tok in pos_map and used_idx[tok] < len(pos_map[tok]):\n            matched_positions.append(pos_map[tok][used_idx[tok]])\n            used_idx[tok] += 1\n    chunks = 0\n    prev = -2\n    for p in matched_positions:\n        if p != prev + 1:\n            chunks += 1\n        prev = p\n    penalty = gamma * (chunks / matches) ** beta\n    score = fmean * (1 - penalty)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI):\n        PMI(x, y) = log2( P(x, y) / (P(x) * P(y)) )\n    where\n        P(x, y) = joint_counts / total_samples\n        P(x)    = total_counts_x / total_samples\n        P(y)    = total_counts_y / total_samples\n\n    Parameters:\n    - joint_counts    : int or array-like of joint occurrence counts for (x, y)\n    - total_counts_x  : int or array-like of marginal counts for x\n    - total_counts_y  : int or array-like of marginal counts for y\n    - total_samples   : int  total number of samples\n\n    Returns:\n    - PMI value (float) or numpy array of PMI values, rounded to 3 decimals.\n    \"\"\"\n    joint = np.array(joint_counts, dtype=float)\n    count_x = np.array(total_counts_x, dtype=float)\n    count_y = np.array(total_counts_y, dtype=float)\n    p_xy = joint / total_samples\n    p_x = count_x / total_samples\n    p_y = count_y / total_samples\n    valid = (p_xy > 0) & (p_x > 0) & (p_y > 0)\n    pmi = np.full_like(p_xy, fill_value=-np.inf, dtype=float)\n    pmi[valid] = np.log2(p_xy[valid] / (p_x[valid] * p_y[valid]))\n    pmi = np.round(pmi, 3)\n    if np.isscalar(joint_counts) and np.isscalar(total_counts_x) and np.isscalar(total_counts_y):\n        return float(pmi)\n    return pmi"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers,\n    scaling them to the range [0, 1]. If all values are identical,\n    returns a list of 0.0s of the same length.\n    The results are rounded to 4 decimal places.\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0 for _ in x]\n    return [round((v - min_val) / range_val, 4) for v in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef relu(x: np.ndarray) -> np.ndarray:\n    \"\"\"Applies the ReLU activation elementwise.\"\"\"\n    return np.maximum(0, x)\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    A simple 1D residual block with a shortcut connection.\n    \n    Args:\n        x   (np.ndarray): 1D input array of shape (d,).\n        w1  (np.ndarray): Weight matrix for the first layer, shape (d, d).\n        w2  (np.ndarray): Weight matrix for the second layer, shape (d, d).\n    \n    Returns:\n        list: The output of the block after final ReLU, rounded to 4 decimals.\n    \"\"\"\n    h1 = relu(x.dot(w1))\n    h2 = relu(h1.dot(w2))\n    out = relu(h2 + x)\n    return np.round(out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Performs Global Average Pooling on a 3D input array.\n    \n    Parameters\n    ----------\n    x : np.ndarray\n        Input feature map of shape (height, width, channels).\n    \n    Returns\n    -------\n    np.ndarray\n        1D array of shape (channels,), where each element is the average\n        of all values in the corresponding feature map.\n    \n    Raises\n    ------\n    ValueError\n        If input is not a 3D NumPy array.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        raise ValueError(f'Expected input to be a NumPy array, got {type(x)}')\n    if x.ndim != 3:\n        raise ValueError(f'Expected 3D input (H, W, C), but got array with shape {x.shape}')\n    return x.mean(axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Performs batch normalization on a 4D input (B, C, H, W).\n    \n    Parameters:\n    - X:     Input array of shape (batch_size, channels, height, width)\n    - gamma: Scale parameters, shape (channels,)\n    - beta:  Shift parameters, shape (channels,)\n    - epsilon: Small constant for numerical stability\n    \n    Returns:\n    - A Python list representation of the batch-normalized output,\n      rounded to 4 decimal places.\n    \"\"\"\n    mean = X.mean(axis=(0, 2, 3), keepdims=True)\n    var = X.var(axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    gamma_broadcast = gamma.reshape((1, -1, 1, 1))\n    beta_broadcast = beta.reshape((1, -1, 1, 1))\n    Y = gamma_broadcast * X_norm + beta_broadcast\n    Y_rounded = np.round(Y, 4)\n    return Y_rounded.tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of the polynomial term c * x^n at point x,\n    using the power rule: d/dx [c * x^n] = c * n * x^(n-1).\n    Return the result rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = c * n * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Compute an orthonormal basis for the subspace spanned by the given 2D vectors\n    using the Gram-Schmidt process.\n\n    Parameters:\n    - vectors: list of 2D vectors (each a list of two floats).\n    - tol: tolerance threshold for determining if a vector is linearly independent.\n\n    Returns:\n    - A list of orthonormal 2D vectors (each a list of two floats), rounded to 4 decimals.\n    \"\"\"\n    basis = []\n    for v in vectors:\n        w = np.array(v, dtype=float)\n        for u in basis:\n            proj = np.dot(u, w) * u\n            w = w - proj\n        norm = np.linalg.norm(w)\n        if norm > tol:\n            u = w / norm\n            basis.append(u)\n    return [np.round(u, 4).tolist() for u in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors a and b,\n    round the result to 4 decimal places, and return as a list.\n    \"\"\"\n    arr_a = np.array(a, dtype=float)\n    arr_b = np.array(b, dtype=float)\n    cross = np.cross(arr_a, arr_b)\n    cross_rounded = np.round(cross, 4)\n    return cross_rounded.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve the system Ax = b using Cramer's Rule.\n    A: square coefficient matrix (list of lists or numpy array)\n    b: constant vector (list or numpy array)\n    Returns:\n      - list of solutions rounded to 4 decimals, or\n      - -1 if the system has no unique solution (det(A) == 0)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float).flatten()\n    (n, m) = A.shape\n    if n != m:\n        raise ValueError('Coefficient matrix A must be square.')\n    if b.size != n:\n        raise ValueError('Dimension mismatch between A and b.')\n    detA = np.linalg.det(A)\n    if abs(detA) < 1e-12:\n        return -1\n    x = np.zeros(n, dtype=float)\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        detAi = np.linalg.det(Ai)\n        x[i] = detAi / detA\n    return np.round(x, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two discrete probability distributions.\n    Returns 0.0 if inputs are empty or of unequal length.\n    \"\"\"\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p_arr = np.array(p, dtype=float)\n    q_arr = np.array(q, dtype=float)\n    bc = np.sum(np.sqrt(p_arr * q_arr))\n    if bc <= 0:\n        return float('inf')\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Compute the element-wise sum of two vectors.\n    Returns a new list containing the sums if the vectors have the same length,\n    otherwise returns -1.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Compute the average policy gradient using REINFORCE.\n    \n    Args:\n        theta: numpy array of shape (num_states, num_actions)\n        episodes: list of episodes, each an ordered list of (state, action, reward) tuples\n    \n    Returns:\n        A Python list containing the averaged gradient of shape (num_states, num_actions),\n        rounded to 4 decimal places.\n    \"\"\"\n    (num_states, num_actions) = theta.shape\n    grad_acc = np.zeros_like(theta, dtype=float)\n    num_episodes = len(episodes)\n    for ep in episodes:\n        rewards = [r for (_, _, r) in ep]\n        T = len(rewards)\n        returns = np.zeros(T, dtype=float)\n        G = 0.0\n        for t in reversed(range(T)):\n            G += rewards[t]\n            returns[t] = G\n        for (t, (s, a, _)) in enumerate(ep):\n            z = theta[s] - np.max(theta[s])\n            exp_z = np.exp(z)\n            pi_s = exp_z / np.sum(exp_z)\n            grad_log = -pi_s\n            grad_log[a] += 1.0\n            grad_acc[s] += returns[t] * grad_log\n    grad_avg = grad_acc / num_episodes\n    grad_avg = np.round(grad_avg, 4)\n    return grad_avg.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Compute and return the FLOPs of a dense layer vs. a sparse Mixture\u2010of\u2010Experts (MoE) layer\n    and the percentage savings in compute when using the MoE layer (active experts = k_active)\n    compared to a single dense layer.\n\n    Arguments:\n      n_experts  -- total number of experts in the MoE (not used for compute, only for capacity)\n      k_active   -- number of experts activated per example\n      d_in       -- input dimension\n      d_out      -- output dimension\n\n    Returns:\n      (flops_dense, flops_moe, savings_pct)\n\n      flops_dense -- FLOPs for a dense layer: 2 * d_in * d_out\n      flops_moe   -- FLOPs for sparse MoE: k_active * 2 * d_in * d_out\n      savings_pct -- percentage compute savings of MoE vs. dense layer\n    \"\"\"\n    flops_dense = 2 * d_in * d_out\n    flops_moe = k_active * 2 * d_in * d_out\n    savings_pct = (flops_dense - flops_moe) / flops_dense * 100\n    return (round(flops_dense, 1), round(flops_moe, 1), round(savings_pct, 1))"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Compute Noisy Top-K gating probabilities.\n\n    Args:\n        X       : np.ndarray of shape (batch_size, input_dim)\n        W_g     : np.ndarray of shape (input_dim, num_experts)\n        W_noise : np.ndarray of shape (input_dim, num_experts)\n        N       : np.ndarray of shape (batch_size, num_experts)  # pre-sampled noise\n        k       : int, number of experts to keep for each example\n\n    Returns:\n        gating_probs: Python list of shape (batch_size, num_experts)\n                      each row sums to 1 and has at most k non-zero entries,\n                      rounded to 4 decimal places.\n    \"\"\"\n    gate_logits = X.dot(W_g)\n    raw_noise_std = X.dot(W_noise)\n    sigma = np.log1p(np.exp(raw_noise_std))\n    noisy_logits = gate_logits + sigma * N\n    (batch_size, num_experts) = noisy_logits.shape\n    gates = np.zeros_like(noisy_logits)\n    for i in range(batch_size):\n        row = noisy_logits[i]\n        topk_idx = np.argpartition(-row, k - 1)[:k]\n        topk_idx = topk_idx[np.argsort(-row[topk_idx])]\n        selected_logits = row[topk_idx]\n        exp_logits = np.exp(selected_logits - np.max(selected_logits))\n        probs = exp_logits / np.sum(exp_logits)\n        gates[i, topk_idx] = probs\n    gates = np.round(gates, 4)\n    return gates.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Sparse Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Args:\n      x        : np.ndarray of shape (..., d_model), the input tokens.\n      We       : np.ndarray of shape (n_experts, d_model, output_dim), expert weight matrices.\n      Wg       : np.ndarray of shape (d_model, n_experts), gating weight matrix.\n      n_experts: int, total number of experts.\n      top_k    : int, how many experts to route each token through.\n\n    Returns:\n      A Python list of shape (..., output_dim) containing the MoE outputs,\n      with all values rounded to 4 decimal places.\n    \"\"\"\n    orig_shape = x.shape\n    d_model = orig_shape[-1]\n    x_flat = x.reshape(-1, d_model)\n    N = x_flat.shape[0]\n    logits = x_flat @ Wg\n    m = np.max(logits, axis=1, keepdims=True)\n    exps = np.exp(logits - m)\n    probs = exps / exps.sum(axis=1, keepdims=True)\n    topk_idx = np.argpartition(-probs, top_k - 1, axis=1)[:, :top_k]\n    topk_probs = np.take_along_axis(probs, topk_idx, axis=1)\n    norm = topk_probs.sum(axis=1, keepdims=True)\n    topk_probs = topk_probs / norm\n    output_dim = We.shape[2]\n    output_flat = np.zeros((N, output_dim), dtype=x.dtype)\n    for i in range(top_k):\n        e_idx = topk_idx[:, i]\n        p = topk_probs[:, i]\n        W_sel = We[e_idx]\n        out_i = np.einsum('nd,ndo->no', x_flat, W_sel)\n        output_flat += out_i * p[:, None]\n    if x.ndim > 2:\n        new_shape = orig_shape[:-1] + (output_dim,)\n        output = output_flat.reshape(new_shape)\n    else:\n        output = output_flat\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Performs Group Normalization on a 4D input tensor.\n    \n    Parameters:\n    ----------\n    X : np.ndarray\n        Input tensor of shape (B, C, H, W).\n    gamma : np.ndarray\n        Scale tensor of shape (C,) or (1, C, 1, 1).\n    beta : np.ndarray\n        Shift tensor of shape (C,) or (1, C, 1, 1).\n    num_groups : int\n        Number of groups to divide the channels into. Must divide C evenly.\n    epsilon : float\n        Small constant for numerical stability.\n    \n    Returns:\n    -------\n    list\n        The normalized, scaled, and shifted tensor as a nested Python list,\n        with values rounded to the nearest 4th decimal.\n    \"\"\"\n    (B, C, H, W) = X.shape\n    if C % num_groups != 0:\n        raise ValueError(f'num_groups ({num_groups}) must divide the number of channels ({C}) evenly.')\n    G = num_groups\n    group_size = C // G\n    X_grouped = X.reshape(B, G, group_size, H, W)\n    mean = X_grouped.mean(axis=(2, 3, 4), keepdims=True)\n    var = X_grouped.var(axis=(2, 3, 4), keepdims=True)\n    X_norm = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    if gamma.ndim == 1:\n        gamma = gamma.reshape(1, C, 1, 1)\n    if beta.ndim == 1:\n        beta = beta.reshape(1, C, 1, 1)\n    out = X_norm * gamma + beta\n    out = np.round(out, 4)\n    return out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Uses gradient descent to find the x-coordinate of the minimum of\n    f(x) = x^4 - 3x^3 + 2, starting from start_x.\n    Returns the x value rounded to 4 decimal places.\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def grad_f(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for i in range(max_iters):\n        g = grad_f(x)\n        x_new = x - learning_rate * g\n        if abs(x_new - x) < tolerance:\n            x = x_new\n            break\n        x = x_new\n    return float(np.round(x, 4))"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Apply the Dynamic Tanh (DyT) transformation:\n        y = beta + gamma * tanh(alpha * x)\n    Rounds the result to 4 decimal places and returns a Python list.\n\n    Args:\n        x (np.ndarray): Input array of any shape.\n        alpha (float): Scale factor inside the tanh.\n        gamma (float): Scale factor applied after the tanh.\n        beta (float): Bias term added after scaling.\n\n    Returns:\n        list[float]: The transformed values, rounded to the 4th decimal, \n                     in the same shape as x but as nested Python lists.\n    \"\"\"\n    x_arr = np.asarray(x, dtype=float)\n    y = beta + gamma * np.tanh(alpha * x_arr)\n    y_rounded = np.round(y, 4)\n    return y_rounded.tolist()"}
