{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Solve Ridge Regression using the closed-form solution.\n\n    Args:\n        data: A 2D numpy array where the last column is the target y,\n              and all preceding columns are the features X.\n        alpha: Regularization strength (default is 0.0).\n\n    Returns:\n        A list of weight coefficients (including the bias term) rounded to 4 decimal places.\n        Returns -1 if the matrix (X^T X + alpha * I) is not invertible.\n    \"\"\"\n    original_X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(original_X.shape[0]), original_X]\n    X_T_X = X.T @ X\n    X_T_y = X.T @ y\n    I = np.eye(X.shape[1])\n    A = X_T_X + alpha * I\n    try:\n        inv_A = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        return -1\n    w = inv_A @ X_T_y\n    rounded_w = np.round(w, 4).tolist()\n    return rounded_w"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron learning algorithm.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    w = np.zeros(n_features)\n    update_count = 0\n    while update_count < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(w, X_train[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                w += eta * y_train[i] * X_train[i]\n                b += eta * y_train[i]\n                update_count += 1\n                updated = True\n                break\n        if not updated:\n            break\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    identity = {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}\n    log = {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1.0 / mu}\n    logit = {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}\n    links['identity'] = identity\n    links['log'] = log\n    links['logit'] = logit\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'type': 'leaf', 'indices': indices}\n        f = np.random.randint(0, n_features)\n        values = data[indices, f]\n        down = np.min(values)\n        up = np.max(values)\n        v = np.random.uniform(down, up)\n        left_indices = []\n        right_indices = []\n        for idx in indices:\n            if data[idx, f] <= v:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        return {'type': 'internal', 'feature': f, 'value': v, 'left': left_child, 'right': right_child}\n    root = build_tree(list(range(n_samples)))\n\n    def get_depth(sample_index):\n        current_node = root\n        depth = 0\n        while True:\n            if current_node['type'] == 'leaf':\n                return depth\n            f = current_node['feature']\n            v = current_node['value']\n            if data[sample_index, f] <= v:\n                current_node = current_node['left']\n            else:\n                current_node = current_node['right']\n            depth += 1\n    return [get_depth(i) for i in range(n_samples)]"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    threshold = math.ceil(minsup * N)\n    transactions_sets = [set(t) for t in transactions]\n    all_items = sorted({item for t in transactions for item in t})\n    result = {}\n    for k in range(1, len(all_items) + 1):\n        for candidate in combinations(all_items, k):\n            candidate_set = set(candidate)\n            count = 0\n            for tx in transactions_sets:\n                if candidate_set.issubset(tx):\n                    count += 1\n            if count >= threshold:\n                result[candidate] = count\n    return result"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        old_centers = centers.copy()\n        distances = np.sum((data[:, np.newaxis, :] - centers) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centers = np.zeros_like(centers)\n        for i in range(k):\n            cluster_points = data[labels == i]\n            if cluster_points.shape[0] == 0:\n                random_idx = np.random.randint(0, n_samples)\n                new_centers[i] = data[random_idx]\n            else:\n                new_centers[i] = np.mean(cluster_points, axis=0)\n        centers = new_centers\n        max_change = np.max(np.sqrt(np.sum((centers - old_centers) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n    distances = np.sum((data[:, np.newaxis, :] - centers) ** 2, axis=2)\n    labels = np.argmin(distances, axis=1)\n    rounded_centers = np.round(centers, 4).tolist()\n    labels_list = labels.tolist()\n    return (rounded_centers, labels_list)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and predicts the attractiveness\n    of every yet unrated item for the specified user. It returns the indices of the\n    top k most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            mask = (data[:, i] > 0) & (data[:, j] > 0)\n            common = mask.sum()\n            if common == 0:\n                continue\n            v1 = data[mask, i]\n            v2 = data[mask, j]\n            if criterion == 'cosine':\n                v1_std = np.std(v1, ddof=1)\n                if np.isnan(v1_std):\n                    v1_std = 0.0\n                if v1_std > 0.001:\n                    v1 = v1 - np.mean(v1)\n                v2_std = np.std(v2, ddof=1)\n                if np.isnan(v2_std):\n                    v2_std = 0.0\n                if v2_std > 0.001:\n                    v2 = v2 - np.mean(v2)\n                dot_product = np.dot(v1, v2)\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                if norm_v1 == 0 or norm_v2 == 0:\n                    sim = 0.0\n                else:\n                    sim = dot_product / (norm_v1 * norm_v2)\n            else:\n                corr_matrix = np.corrcoef(v1, v2)\n                sim = corr_matrix[0, 1]\n                if np.isnan(sim):\n                    sim = 0.0\n            S[i, j] = sim\n            S[j, i] = sim\n    user_ratings = data[user_ind, :]\n    rated_items = np.where(user_ratings > 0)[0]\n    unrated_items = np.where(user_ratings == 0)[0]\n    if len(unrated_items) == 0:\n        return []\n    scores = []\n    for t in unrated_items:\n        numerator = 0.0\n        denominator = 0.0\n        for i in rated_items:\n            sim = S[t, i]\n            numerator += user_ratings[i] * sim\n            denominator += abs(sim)\n        if denominator == 0:\n            score = 0.0\n        else:\n            score = numerator / denominator\n        scores.append((t, score))\n    scores.sort(key=lambda x: (-x[1], x[0]))\n    return [t for (t, _) in scores[:k]]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain,\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = 0.0\n    sum_g_parent = np.sum(g)\n    sum_h_parent = np.sum(h)\n    loss_parent = -0.5 * sum_g_parent ** 2 / (sum_h_parent + lam) + gamma\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        sorted_indices = np.argsort(feature)\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        prefix_g = np.zeros(n_samples + 1)\n        prefix_h = np.zeros(n_samples + 1)\n        prefix_g[1:] = np.cumsum(sorted_g)\n        prefix_h[1:] = np.cumsum(sorted_h)\n        for i in range(1, n_samples):\n            if i >= 2 and n_samples - i >= 2:\n                threshold = feature[sorted_indices[i - 1]]\n                sum_g_left = prefix_g[i]\n                sum_h_left = prefix_h[i]\n                sum_g_right = prefix_g[n_samples] - sum_g_left\n                sum_h_right = prefix_h[n_samples] - sum_h_left\n                loss_left = -0.5 * sum_g_left ** 2 / (sum_h_left + lam) + gamma\n                loss_right = -0.5 * sum_g_right ** 2 / (sum_h_right + lam) + gamma\n                gain = loss_parent - loss_left - loss_right\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        sigmoid = 1 / (1 + np.exp(-x))\n        gradient = sigmoid * (1 - sigmoid)\n        return (round(sigmoid, 4), round(gradient, 4))\n    else:\n        x_arr = np.array(x)\n        sigmoid_arr = 1 / (1 + np.exp(-x_arr))\n        gradient_arr = sigmoid_arr * (1 - sigmoid_arr)\n        sigmoid_rounded = np.round(sigmoid_arr, 4)\n        gradient_rounded = np.round(gradient_arr, 4)\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import math\nfrom typing import List\ndef adaboost_1d_predict(x_train: List[float], y_train: List[int], x_test: List[float], epsilon: float=0.0) -> List[int]:\n    \"\"\"\n    Trains a 1-D AdaBoost ensemble and returns predictions for a test set.\n\n    Parameters\n    ----------\n    x_train : List[float]\n        Training sample values (one-dimensional).\n    y_train : List[int]\n        Labels corresponding to x_train (each value must be 1 or -1).\n    x_test : List[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 epsilon.\n\n    Returns\n    -------\n    List[int]\n        Predicted labels (1 or -1) for every value in x_test.\n    \"\"\"\n    n = len(x_train)\n    if n == 0:\n        return [1] * len(x_test)\n    weights = [1.0 / n] * n\n    ensemble = []\n    while True:\n        data = [(x_train[i], y_train[i], weights[i], i) for i in range(n)]\n        sorted_data = sorted(data, key=lambda t: t[0])\n        cumulative_neg = [0.0] * (n + 1)\n        cumulative_pos = [0.0] * (n + 1)\n        for i in range(1, n + 1):\n            (x_i, y_i, w_i, _) = sorted_data[i - 1]\n            cumulative_neg[i] = cumulative_neg[i - 1] + (w_i if y_i == -1 else 0.0)\n            cumulative_pos[i] = cumulative_pos[i - 1] + (w_i if y_i == 1 else 0.0)\n        total_neg = cumulative_neg[n]\n        total_pos = cumulative_pos[n]\n        best_error = 1.0\n        best_k = -1\n        best_d = 0\n        for k in range(1, n):\n            error_0 = cumulative_neg[k] + (total_pos - cumulative_pos[k])\n            current_error = min(error_0, 1.0 - error_0)\n            if current_error < best_error:\n                best_error = current_error\n                best_d = 0 if error_0 < 0.5 else 1\n                best_k = k\n        alpha = 0.5 * math.log((1.0 - best_error) / best_error)\n        (x1, x2) = (sorted_data[best_k - 1][0], sorted_data[best_k][0])\n        theta = (x1 + x2) / 2.0\n        ensemble.append((alpha, best_d, theta))\n        for (x_i, y_i, w_i, original_i) in sorted_data:\n            if best_d == 0:\n                pred = 1 if x_i <= theta else -1\n            else:\n                pred = 1 if x_i > theta else -1\n            if pred == y_i:\n                new_w = w_i * math.exp(-alpha)\n            else:\n                new_w = w_i * math.exp(alpha)\n            weights[original_i] = new_w\n        sum_weights = sum(weights)\n        weights = [w / sum_weights for w in weights]\n        error_count = 0\n        for i in range(n):\n            x_i = x_train[i]\n            y_i = y_train[i]\n            total = 0.0\n            for (alpha_j, d_j, theta_j) in ensemble:\n                if d_j == 0:\n                    h = 1 if x_i <= theta_j else -1\n                else:\n                    h = 1 if x_i > theta_j else -1\n                total += alpha_j * h\n            pred = 1 if total >= 0 else -1\n            if pred != y_i:\n                error_count += 1\n        training_error = error_count / n\n        if training_error <= epsilon:\n            break\n    predictions = []\n    for x in x_test:\n        total = 0.0\n        for (alpha_j, d_j, theta_j) in ensemble:\n            if d_j == 0:\n                h = 1 if x <= theta_j else -1\n            else:\n                h = 1 if x > theta_j else -1\n            total += alpha_j * h\n        predictions.append(1 if total >= 0 else -1)\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly 1 or -1.\n    \"\"\"\n    train_sq = np.sum(X_train ** 2, axis=1)\n    test_sq = np.sum(X_test ** 2, axis=1)\n    dist_sq = train_sq[:, np.newaxis] + test_sq[np.newaxis, :] - 2 * X_train @ X_test.T\n    K = np.exp(-gamma * dist_sq)\n    alpha_y = alpha * y_train\n    decision_values = alpha_y @ K + b\n    labels = np.where(decision_values >= 0, 1, -1).astype(int).tolist()\n    return labels"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"\n    Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both are rounded to\n        four decimals. If `k` is invalid, the function returns -1.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, VT) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    VT_k = VT[:k, :]\n    X_hat = U_k * s_k.reshape(1, -1) @ VT_k\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"\n    Fit a simple 1-D gradient boosting model using decision stumps and predict a value.\n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as x_train).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for x_query, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    splits = []\n    for i in range(len(x_sorted) - 1):\n        s = (x_sorted[i] + x_sorted[i + 1]) / 2\n        splits.append(s)\n    residuals = y_sorted.copy()\n    ensemble = []\n    while True:\n        current_rss = np.sum(residuals ** 2)\n        if current_rss <= epsilon:\n            break\n        if not splits:\n            break\n        best_rss = np.inf\n        best_stump = None\n        best_i = -1\n        for (i, s) in enumerate(splits):\n            left = residuals[:i + 1]\n            right = residuals[i + 1:]\n            c1 = np.mean(left)\n            c2 = np.mean(right)\n            rss_left = np.sum((left - c1) ** 2)\n            rss_right = np.sum((right - c2) ** 2)\n            total_rss = rss_left + rss_right\n            if total_rss < best_rss:\n                best_rss = total_rss\n                best_stump = (s, c1, c2)\n                best_i = i\n        ensemble.append(best_stump)\n        (s_best, c1_best, c2_best) = best_stump\n        i_best = best_i\n        residuals[:i_best + 1] -= c1_best\n        residuals[i_best + 1:] -= c2_best\n    prediction = 0.0\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a random binary tensor with 0.0 and 1.0 values.\n\n    The function creates a NumPy array of the specified shape, where each element is 1.0\n    with a probability equal to the `sparsity` parameter, and 0.0 otherwise. The result is\n    deterministic if a `seed` is provided.\n\n    Args:\n        shape (tuple[int, ...]): The desired shape of the output tensor.\n        sparsity (float): Probability of generating 1.0 (must be in [0, 1]; default 0.5).\n        seed (int | None): Optional seed for random number generation. If provided, ensures\n                           deterministic output.\n\n    Returns:\n        numpy.ndarray: A tensor of shape `shape` with 0.0 and 1.0 values. If `sparsity` is\n                       outside the range [0, 1], returns -1.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_array = (random_array >= 1 - sparsity).astype(float)\n    return binary_array"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"\n    Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        - pivot is the row index whose value in column *d* is the median;\n        - left is a list of row indices with smaller values;\n        - right is a list of row indices with larger values.\n    \"\"\"\n    n_samples = data.shape[0]\n    k = n_samples // 2\n    column = data[:, d]\n    partitioned_indices = np.argpartition(column, kth=k)\n    median_index = partitioned_indices[k]\n    median_value = data[median_index, d]\n    left_mask = column < median_value\n    right_mask = column > median_value\n    left = np.where(left_mask)[0].tolist()\n    right = np.where(right_mask)[0].tolist()\n    left.sort()\n    right.sort()\n    return (median_index, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames using NumPy's as_strided.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False*, the returned view is read-only; if *True*, it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n\n    Raises\n    ------\n    AssertionError\n        If any of the preconditions are violated.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'Input signal is too short for the given frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    itemsize = x.strides[0]\n    frame_strides = (stride * itemsize, itemsize)\n    arr = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    if writeable:\n        arr.flags.writeable = x.flags.writeable\n    else:\n        arr.flags.writeable = False\n    return arr"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X_arr = np.array(X)\n    if X_arr.ndim != 2:\n        return False\n    if not np.issubdtype(X_arr.dtype, np.number):\n        return False\n    if (X_arr < 0).any() or (X_arr > 1).any():\n        return False\n    row_sums = X_arr.sum(axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-08, rtol=0):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    full_error = X @ w - y\n    g_full = 1 / n * X.T @ full_error\n    if np.linalg.norm(g_full) < epsilon:\n        return list(np.round(w, 4))\n    start_idx = 0\n    for _ in range(max_iter):\n        indices = (start_idx + np.arange(batch_size)) % n\n        X_batch = X[indices]\n        y_batch = y[indices]\n        error = X_batch @ w - y_batch\n        g = 1 / n * X_batch.T @ error\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        full_error = X @ w - y\n        g_full = 1 / n * X.T @ full_error\n        if np.linalg.norm(g_full) < epsilon:\n            break\n        start_idx += batch_size\n    return list(np.round(w, 4))"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Compute the SoftPlus activation function or its derivative (sigmoid).\n\n    Parameters:\n    - x: scalar, list, or numpy array of real numbers.\n    - deriv: bool, if True, returns the derivative (sigmoid) of SoftPlus.\n\n    Returns:\n    - A float or list of floats, rounded to 4 decimal places.\n    \"\"\"\n    is_scalar_input = isinstance(x, (int, float))\n    x_arr = np.asarray(x, dtype=np.float64)\n    if deriv:\n        result = 1.0 / (1.0 + np.exp(-x_arr))\n    else:\n        result = np.maximum(x_arr, 0) + np.log1p(np.exp(-np.abs(x_arr)))\n    result = np.round(result, 4)\n    if is_scalar_input and x_arr.size == 1:\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Parameters:\n    - corpus (list[str]): A list of word tokens used to train the model.\n    - sequence (list[str]): A list of word tokens for which to compute the log-probability.\n    - N (int): The order of the N-gram model (N \u2265 1).\n\n    Returns:\n    - float: The total log-probability of the sequence under the N-gram model, rounded to 4 decimal places.\n             Returns float('-inf') if any required count is zero.\n    \"\"\"\n    if N == 1:\n        ngram_counts = Counter(((w,) for w in corpus))\n        total_words = len(corpus)\n    else:\n        all_ngrams = []\n        all_context_ngrams = []\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i + N])\n            all_ngrams.append(ngram)\n            context = tuple(corpus[i:i + N - 1])\n            all_context_ngrams.append(context)\n        ngram_counts = Counter(all_ngrams)\n        context_counts = Counter(all_context_ngrams)\n    total_log_prob = 0.0\n    seq_len = len(sequence)\n    num_ngrams = seq_len - N + 1\n    if num_ngrams <= 0:\n        return round(0.0, 4)\n    for i in range(num_ngrams):\n        current_ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts.get(current_ngram, 0)\n            denominator = total_words\n        else:\n            count_ngram = ngram_counts.get(current_ngram, 0)\n            current_context = current_ngram[:-1]\n            count_context = context_counts.get(current_context, 0)\n            denominator = count_context\n        if count_ngram == 0 or denominator == 0:\n            return float('-inf')\n        total_log_prob += np.log(count_ngram / denominator)\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"\n    Train a univariate Lasso regression model with polynomial features.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as X.\n    degree : int\n        Highest exponent of x to include (gives degree+1 coefficients in total).\n    reg_factor : float\n        L1 regularization strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X, dtype=float).ravel()\n    y = np.array(y, dtype=float).ravel()\n    m = len(X)\n    if m != len(y):\n        raise ValueError('X and y must have the same length.')\n    Phi = np.ones((m, 1))\n    for d in range(1, degree + 1):\n        Phi = np.hstack([Phi, X[:, np.newaxis] ** d])\n    n_features = Phi.shape[1]\n    w = np.zeros(n_features)\n    norms_sq = np.sum(Phi ** 2, axis=0)\n    for _ in range(n_iterations):\n        current_prediction = Phi @ w\n        residual = y - current_prediction\n        new_w0 = w[0] + np.mean(residual)\n        delta = abs(new_w0 - w[0])\n        max_change = delta\n        w[0] = new_w0\n        for j in range(1, n_features):\n            x_j = Phi[:, j]\n            dot_j = np.dot(x_j, residual)\n            norm_sq_j = norms_sq[j]\n            current_wj = w[j]\n            if norm_sq_j == 0:\n                new_wj = 0.0\n            else:\n                rho_j = dot_j + current_wj * norm_sq_j\n                if rho_j > reg_factor:\n                    new_wj = (rho_j - reg_factor) / norm_sq_j\n                elif rho_j < -reg_factor:\n                    new_wj = (rho_j + reg_factor) / norm_sq_j\n                else:\n                    new_wj = 0.0\n            delta = abs(new_wj - current_wj)\n            if delta > max_change:\n                max_change = delta\n            w[j] = new_wj\n        if max_change < tol:\n            break\n    return [round(coeff, 4) for coeff in w.tolist()]"}
{"task_id": 63, "completion_id": 0, "solution": "def backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time t in an HMM.\n\n    Args:\n        A: Transition probability matrix (N x N), where A[i][j] is the probability of transitioning from state i to j.\n        B: Emission probability matrix (N x M), where B[j][k] is the probability of emitting observation k from state j.\n        obs: List of observation indices (length T) representing the observation sequence.\n        t: Time index (0 <= t < T) for which to compute the backward probabilities.\n\n    Returns:\n        A list of N backward probabilities beta_t(i) rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    current_beta = [1.0 for _ in range(N)]\n    for time in reversed(range(t, T - 1)):\n        new_beta = []\n        o_next = obs[time + 1]\n        for i in range(N):\n            total = 0.0\n            for j in range(N):\n                total += A[i][j] * B[j][o_next] * current_beta[j]\n            new_beta.append(total)\n        current_beta = new_beta\n    return [round(x, 4) for x in current_beta]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"\n    Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = [1.0 for _ in range(N)]\n    for t in range(T - 2, -1, -1):\n        current_obs = obs[t + 1]\n        new_beta = [0.0 for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                new_beta[i] += A[i][j] * B[j][current_obs] * beta[j]\n        beta = new_beta\n    first_obs = obs[0]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][first_obs] * beta[i]\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "def forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"\n    Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not observations:\n        return -1\n    if not S or not A or (not B):\n        return -1\n    n_S = len(S)\n    n_A = len(A)\n    if n_S != n_A:\n        return -1\n    n_A_cols = len(A[0]) if A else 0\n    for row in A:\n        if len(row) != n_A_cols or len(row) != n_A:\n            return -1\n    n_B_rows = len(B)\n    if n_B_rows != n_S:\n        return -1\n    if not B or not B[0]:\n        return -1\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    n = n_S\n    T = len(observations)\n    prev_alpha = [0.0] * n\n    first_obs = observations[0]\n    for i in range(n):\n        prev_alpha[i] = S[i] * B[i][first_obs]\n    for t in range(1, T):\n        current_obs = observations[t]\n        new_alpha = [0.0] * n\n        for i in range(n):\n            total = 0.0\n            for j in range(n):\n                total += prev_alpha[j] * A[j][i]\n            new_alpha[i] = total * B[i][current_obs]\n        prev_alpha = new_alpha\n    total_prob = sum(prev_alpha)\n    return round(total_prob, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nclass FPNODE:\n\n    def __init__(self, name: str, count: int, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.node_link = None\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNODE('Null', 1, None)\n        self.header_table = {}\n\n    def add_transaction(self, transaction: list[str], item_counts: dict[str, int]):\n        \"\"\"Add a transaction to the FP-Tree.\"\"\"\n        current_node = self.root\n        sorted_items = sorted([item for item in transaction if item in item_counts and item_counts[item] >= min_support], key=lambda x: (item_counts[x], x), reverse=True)\n        for item in sorted_items:\n            if item in current_node.children:\n                current_node.children[item].count += 1\n                current_node = current_node.children[item]\n            else:\n                new_node = FPNODE(item, 1, current_node)\n                current_node.children[item] = new_node\n                current_node = new_node\n                if item not in self.header_table:\n                    self.header_table[item] = [new_node]\n                else:\n                    self.header_table[item].append(new_node)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        if filtered_transaction:\n            tree.add_transaction(filtered_transaction, item_counts)\n    frequent_itemsets = []\n\n    def get_conditional_pattern_base(item: str) -> list[tuple[list[str], int]]:\n        \"\"\"Get conditional pattern base for an item.\"\"\"\n        pattern_base = []\n        for node in tree.header_table[item]:\n            prefix_path = []\n            current_node = node.parent\n            while current_node.name != 'Null':\n                prefix_path.append((current_node.name, current_node.count))\n                current_node = current_node.parent\n            unique_prefix_path = []\n            seen_items = set()\n            for (item_name, count) in reversed(prefix_path):\n                if item_name not in seen_items:\n                    seen_items.add(item_name)\n                    unique_prefix_path.append((item_name, count))\n            unique_prefix_path.reverse()\n            pattern_base.append((unique_prefix_path, node.count))\n        return pattern_base\n\n    def mine_tree(header_table: dict, min_support: int, current_prefix: list[str], frequent_itemsets: list[list[str]]):\n        \"\"\"Recursively mine the FP-Tree.\"\"\"\n        sorted_items = sorted(header_table.keys(), key=lambda x: (len(x), x))\n        for item in sorted_items:\n            new_prefix = sorted(current_prefix + [item])\n            frequent_itemsets.append(new_prefix)\n            conditional_pattern_base = get_conditional_pattern_base(item)\n            conditional_counts = Counter()\n            for (path, count) in conditional_pattern_base:\n                for (item_name, _) in path:\n                    conditional_counts[item_name] += count\n            conditional_frequent_items = {item_name for (item_name, count) in conditional_counts.items() if count >= min_support}\n            if conditional_frequent_items:\n                conditional_tree = FPTree()\n                for (path, count) in conditional_pattern_base:\n                    filtered_path = [(name, count) for (name, _) in path if name in conditional_frequent_items]\n                    if filtered_path:\n                        transaction = [name for (name, _) in filtered_path]\n                        current_node = conditional_tree.root\n                        for (name, _) in filtered_path:\n                            if name in current_node.children:\n                                current_node.children[name].count += count\n                                current_node = current_node.children[name]\n                            else:\n                                new_node = FPNODE(name, count, current_node)\n                                current_node.children[name] = new_node\n                                current_node = new_node\n                                if name not in conditional_tree.header_table:\n                                    conditional_tree.header_table[name] = [new_node]\n                                else:\n                                    conditional_tree.header_table[name].append(new_node)\n                mine_tree(conditional_tree.header_table, min_support, new_prefix, frequent_itemsets)\n    mine_tree(tree.header_table, min_support, [], frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if k < 1 or k > n_train:\n        return -1\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    predictions = []\n    for x in X_test:\n        distances = np.sum((X_train_np - x) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train_np[nearest_indices]\n        (unique_classes, counts) = np.unique(nearest_labels, return_counts=True)\n        max_votes = np.max(counts)\n        candidates = unique_classes[counts == max_votes]\n        predicted_class = np.min(candidates)\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y, dtype=float)\n    y_pred = np.array(y_pred, dtype=float)\n    epsilon = np.finfo(y_pred.dtype).eps\n    log_pred = np.log(y_pred + epsilon)\n    loss = -np.sum(y * log_pred)\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    A_prev = X\n    caches = []\n    layers = [int(k[1:]) for k in parameters.keys() if k.startswith('W')]\n    L = max(layers) if layers else 0\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        if l == L:\n            A = 1 / (1 + np.exp(-Z))\n        else:\n            A = np.maximum(0, Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n        A_prev = A\n    AL_rounded = np.round(A_prev, 4)\n    return AL_rounded.tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    m = Y.size\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(float(cost), 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"\n    Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    q_array = np.array(Q)\n    a_star = q_array.argmax()\n    n = len(q_array)\n    base = epsilon / n\n    probabilities = [base] * n\n    probabilities[a_star] += 1 - epsilon\n    probabilities = [round(p, 4) for p in probabilities]\n    total = sum(probabilities)\n    if abs(total - 1.0) > 1e-12:\n        probabilities[-1] += 1.0 - total\n    return probabilities"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"\n    Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for all samples. All inner lists have the same length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties, the smallest label is chosen.\n    \"\"\"\n    result = []\n    num_samples = len(predictions[0]) if predictions else 0\n    for j in range(num_samples):\n        column_votes = [tree[j] for tree in predictions]\n        counts = Counter(column_votes)\n        max_count = max(counts.values())\n        candidates = [label for (label, count) in counts.items() if count == max_count]\n        winner = min(candidates)\n        result.append(winner)\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_arr = np.asarray(z)\n    result = np.logaddexp(0.0, z_arr)\n    result_rounded = np.round(result, 4)\n    if result_rounded.ndim == 0:\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    estimates = None\n    try:\n        estimates = policy.ev_estimates\n    except AttributeError:\n        try:\n            estimates = policy['ev_estimates']\n        except (KeyError, TypeError):\n            return np.nan\n    if not estimates:\n        return np.nan\n    arm_evs = None\n    try:\n        arm_evs = bandit.arm_evs\n    except AttributeError:\n        try:\n            arm_evs = bandit['arm_evs']\n        except (KeyError, TypeError):\n            return np.nan\n    n_true = len(arm_evs)\n    n_estimates = len(estimates)\n    if n_estimates != n_true:\n        return np.nan\n    for i in range(n_true):\n        if i not in estimates:\n            return np.nan\n    total_error = 0.0\n    for i in sorted(estimates.keys()):\n        true_val = arm_evs[i]\n        est_val = estimates[i]\n        total_error += (est_val - true_val) ** 2\n    mse_value = total_error / n_true\n    return round(mse_value, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"\n    Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    for sentence in corpus:\n        for word in sentence.split():\n            vocab.add(word)\n    V = len(vocab) + 1\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    processed_words = []\n    for word in words:\n        if word in vocab:\n            processed_words.append(word)\n        else:\n            processed_words.append('<UNK>')\n    context_counts = defaultdict(Counter)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words_list = sentence.split()\n        for m in range(1, N + 1):\n            L = len(words_list)\n            for i in range(L - m + 1):\n                ngram = tuple(words_list[i:i + m])\n                context = ngram[:-1]\n                ngram_counts[m][ngram] += 1\n                context_counts[m][context] += 1\n    total_log_prob = 0.0\n    L_seq = len(processed_words)\n    for i in range(L_seq - N + 1):\n        context = tuple(processed_words[i:i + N - 1])\n        target_word = processed_words[i + N - 1]\n        ngram = context + (target_word,)\n        count_ngram = ngram_counts[N].get(ngram, 0)\n        count_context = context_counts[N].get(context, 0)\n        numerator = count_ngram + K\n        denominator = count_context + K * V\n        log_p = math.log(numerator / denominator)\n        total_log_prob += log_p\n    return round(total_log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    for _ in range(max_iter):\n        A = H @ H.T + alpha * np.eye(K)\n        B = X @ H.T\n        W = np.linalg.solve(A, B.T).T\n        C = W.T @ W + alpha * np.eye(K)\n        D = W.T @ X\n        H = np.linalg.solve(C, D)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering with K-Means++ initialization.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where m is the number of samples and n is the number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result reproducible.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal places and sorted by the first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = []\n    first_idx = np.random.choice(m, 1, replace=False)[0]\n    centroids.append(X[first_idx])\n    for _ in range(K - 1):\n        current_centroids = np.array(centroids)\n        dists = np.min(np.linalg.norm(X[:, np.newaxis, :] - current_centroids[np.newaxis, :, :], axis=2), axis=1)\n        dists_sq = dists ** 2\n        sum_dists_sq = np.sum(dists_sq)\n        if sum_dists_sq == 0:\n            next_idx = np.random.choice(m, 1, replace=False)[0]\n        else:\n            probs = dists_sq / sum_dists_sq\n            next_idx = np.random.choice(m, 1, p=probs)[0]\n        centroids.append(X[next_idx])\n    centroids = np.array(centroids)\n    prev_clusters = None\n    for _ in range(max_iter):\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        clusters = np.argmin(distances, axis=1)\n        if prev_clusters is not None and np.array_equal(clusters, prev_clusters):\n            break\n        prev_clusters = clusters.copy()\n        new_centroids = np.copy(centroids)\n        for c in range(K):\n            cluster_points = X[clusters == c]\n            if cluster_points.shape[0] > 0:\n                new_centroids[c] = np.mean(cluster_points, axis=0)\n        centroids = new_centroids\n    rounded_centroids = [list(np.round(centroids[i], 4)) for i in range(K)]\n    rounded_centroids.sort()\n    return rounded_centroids"}
{"task_id": 111, "completion_id": 0, "solution": "def run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([encoded])\n    prediction = model.predict(batch)\n    prediction = prediction[0]\n    predicted_ids = np.argmax(prediction, axis=-1).tolist()\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"\n    Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    y = y.reshape(-1, 1)\n    p = p.reshape(-1, 1)\n    loss = -(1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = X.T @ (p - y) / m\n    loss_rounded = round(float(loss), 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in X_test.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    D = np.full(m, 1.0 / m)\n    stumps = []\n    for _ in range(n_clf):\n        best_error = 1.0\n        best_stump = None\n        for feature in range(n):\n            X_feature = X_train[:, feature]\n            sorted_X = np.sort(X_feature)\n            if len(sorted_X) < 2:\n                possible_thresholds = [sorted_X[0] - 1]\n            else:\n                possible_thresholds = (sorted_X[1:] + sorted_X[:-1]) / 2\n            for threshold in possible_thresholds:\n                left_mask = X_train[:, feature] <= threshold\n                right_mask = ~left_mask\n                left_sum = np.sum(D[left_mask] * y_train[left_mask])\n                right_sum = np.sum(D[right_mask] * y_train[right_mask])\n                left_pred = 1 if left_sum >= 0 else -1\n                right_pred = 1 if right_sum >= 0 else -1\n                error_left = np.sum(D[left_mask] * (y_train[left_mask] != left_pred)) if left_mask.any() else 0.0\n                error_right = np.sum(D[right_mask] * (y_train[right_mask] != right_pred)) if right_mask.any() else 0.0\n                total_error = error_left + error_right\n                if total_error > 0.5:\n                    total_error = 1 - total_error\n                    left_pred *= -1\n                    right_pred *= -1\n                if total_error < best_error:\n                    best_error = total_error\n                    best_stump = (feature, threshold, left_pred, right_pred)\n        (feature, threshold, left_pred, right_pred) = best_stump\n        epsilon_t = best_error\n        if epsilon_t == 0:\n            alpha_t = 1000.0\n        else:\n            alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        stumps.append((feature, threshold, left_pred, right_pred, alpha_t))\n        h = np.where(X_train[:, feature] <= threshold, left_pred, right_pred)\n        D *= np.exp(-alpha_t * y_train * h)\n        D /= np.sum(D)\n    predictions = []\n    for x in X_test:\n        total = 0.0\n        for (f, t, lp, rp, a) in stumps:\n            if x[f] <= t:\n                total += a * lp\n            else:\n                total += a * rp\n        predictions.append(1 if total >= 0 else -1)\n    return predictions"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"\n    Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first n_components LDA directions. Each inner list corresponds to one sample.\n        All values are rounded to four decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (n_samples, n_features) = X.shape\n    mu = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        n_c = X_c.shape[0]\n        mu_c = np.mean(X_c, axis=0)\n        S_W += (X_c - mu_c).T @ (X_c - mu_c)\n        mu_diff = mu_c - mu\n        S_B += n_c * np.outer(mu_diff, mu_diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    W = sorted_eigenvectors[:, :n_components]\n    for i in range(W.shape[1]):\n        vec = W[:, i]\n        for element in vec:\n            if np.isclose(element, 0):\n                continue\n            if element < 0:\n                W[:, i] = -vec\n            break\n    X_projected = X @ W\n    X_projected = np.round(X_projected, 4)\n    return X_projected.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    if fire_time[0][0] == 0 or fire_time[n - 1][n - 1] == 0:\n        return -1\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_queue = deque()\n    agent_queue.append((0, 0))\n    agent_time[0][0] = 0\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        current_time = agent_time[x][y]\n        if x == n - 1 and y == n - 1:\n            return current_time\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#'):\n                arrival_time = current_time + 1\n                if arrival_time < fire_time[nx][ny] and agent_time[nx][ny] > arrival_time:\n                    agent_time[nx][ny] = arrival_time\n                    agent_queue.append((nx, ny))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predicts the class labels for test samples using the k-Nearest Neighbors algorithm.\n\n    Parameters:\n    - X_train: np.ndarray of shape (n_samples, n_features)\n    - y_train: np.ndarray of shape (n_samples,)\n    - X_test: np.ndarray of shape (m_samples, n_features)\n    - k: int, number of neighbors to consider\n    - metric: str, distance metric to use ('euclidean', 'manhattan', 'cosine')\n\n    Returns:\n    - np.ndarray of shape (m_samples,), predicted labels for test samples\n    \"\"\"\n    predictions = np.zeros(X_test.shape[0], dtype=int)\n    for i in range(X_test.shape[0]):\n        x = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - x) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - x), axis=1)\n        elif metric == 'cosine':\n            dot_products = np.dot(X_train, x)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_x = np.linalg.norm(x)\n            similarities = dot_products / (norm_train * norm_x)\n            distances = 1 - similarities\n        else:\n            distances = np.sqrt(np.sum((X_train - x) ** 2, axis=1))\n        nearest_indices = np.argsort(distances)[:k]\n        labels = y_train[nearest_indices]\n        counts = np.bincount(labels)\n        predicted_label = np.argmax(counts)\n        predictions[i] = predicted_label\n    return predictions"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"\n    Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    predictions = []\n    n_samples = X.shape[0]\n    k_eff = min(k, n_samples)\n    for x_test in X_test:\n        distances = []\n        for i in range(n_samples):\n            x_train = X[i]\n            y_train = y[i]\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((x_test - x_train) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(x_test - x_train))\n            elif metric == 'cosine':\n                dot = np.dot(x_test, x_train)\n                norm1 = np.linalg.norm(x_test)\n                norm2 = np.linalg.norm(x_train)\n                denominator = norm1 * norm2\n                denominator = max(denominator, 1e-12)\n                dist = 1.0 - dot / denominator\n            else:\n                raise ValueError(f'Unknown distance metric: {metric}')\n            distances.append((dist, y_train))\n        distances.sort(key=lambda t: t[0])\n        k_nearest = distances[:k_eff]\n        labels = [t[1] for t in k_nearest]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        max_count = counts.max()\n        candidates = unique_labels[counts == max_count]\n        predicted_label = np.min(candidates).item()\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    x = np.array(state, dtype=np.float64)\n    x = weights['W1'] @ x + weights['b1']\n    x = np.maximum(0, x)\n    x = weights['W2'] @ x + weights['b2']\n    x = np.maximum(0, x)\n    x = weights['W3'] @ x + weights['b3']\n    x = np.tanh(x)\n    return np.round(x, 4).tolist()"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"\n    Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights_list, bias) where weights_list is a list of length n and\n        bias is a float. All returned numbers are rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X_ = np.hstack([np.ones((m, 1)), X])\n    else:\n        X_ = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(X_.shape[1])\n    for _ in range(max_iters):\n        if fit_intercept:\n            pred_without_intercept = X_[:, 1:].dot(w[1:])\n            w[0] = np.mean(y - pred_without_intercept)\n        for j in range(1, X_.shape[1]):\n            current_residual = y - X_.dot(w)\n            x_j = X_[:, j]\n            r_j = current_residual + w[j] * x_j\n            a = np.dot(x_j, r_j)\n            tau = lambda_param * m\n            if a < -tau:\n                soft = a + tau\n            elif a > tau:\n                soft = a - tau\n            else:\n                soft = 0.0\n            x_j_sq = np.dot(x_j, x_j)\n            if x_j_sq == 0:\n                new_wj = 0.0\n            else:\n                new_wj = soft / x_j_sq\n            w[j] = new_wj\n    weights_list = [round(float(val), 4) for val in w[1:]]\n    bias = round(float(w[0]), 4)\n    return (weights_list, bias)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    n = len(x)\n    if n == 0:\n        return 0.0\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    distance = np.mean(x_arr != y_arr)\n    return round(float(distance), 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"\n    Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\", and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine-series coefficients used only when\n        window == \"generalized_cosine\". The default is None.\n\n    Returns\n    -------\n    list[float]\n        List with N floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    valid_windows = {'hamming', 'hann', 'blackman_harris', 'generalized_cosine'}\n    if window not in valid_windows:\n        raise ValueError(f'Unknown window type: {window}')\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError('Coefficients must be provided for generalized_cosine window')\n    result = []\n    for n in range(N):\n        if window == 'hamming':\n            coeff = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'hann':\n            coeff = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            term = 2 * np.pi * n / (N - 1)\n            coeff = a0 - a1 * np.cos(term) + a2 * np.cos(2 * term) - a3 * np.cos(3 * term)\n        elif window == 'generalized_cosine':\n            total = 0.0\n            for (k, a) in enumerate(coefficients):\n                total += a * np.cos(2 * np.pi * k * n / (N - 1))\n            coeff = total\n        rounded = round(coeff, 4)\n        result.append(rounded)\n    return result"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"\n    Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    unique_labels = np.unique(y_train_np)\n    if len(unique_labels) == 1:\n        return [int(unique_labels[0])] * len(X_test)\n    (original_0, original_1) = unique_labels\n    y_internal = np.where(y_train_np == original_0, 0, 1)\n    X_train_with_intercept = np.hstack([X_train_np, np.ones((X_train_np.shape[0], 1))])\n    X_test_with_intercept = np.hstack([np.array(X_test), np.ones((len(X_test), 1))])\n    n_features = X_train_with_intercept.shape[1]\n    theta = np.zeros(n_features)\n    n_samples = X_train_with_intercept.shape[0]\n    for _ in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X_train_with_intercept[permutation]\n        y_shuffled = y_internal[permutation]\n        for i in range(0, n_samples, batch_size):\n            batch_end = i + batch_size\n            X_batch = X_shuffled[i:batch_end]\n            y_batch = y_shuffled[i:batch_end]\n            z = X_batch @ theta\n            h = 1 / (1 + np.exp(-z))\n            gradient = X_batch.T @ (h - y_batch) / batch_size\n            theta -= learning_rate * gradient\n    z_test = X_test_with_intercept @ theta\n    probabilities = 1 / (1 + np.exp(-z_test))\n    predictions_internal = (probabilities >= 0.5).astype(int)\n    predictions_original = np.where(predictions_internal, original_1, original_0).astype(int)\n    return predictions_original.tolist()"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Trains an AdaBoost model using decision stumps as weak learners and returns predictions for the test set.\n\n    Parameters:\n    - X_train: List of training feature vectors.\n    - y_train: List of training labels (0 or 1).\n    - X_test: List of test feature vectors.\n    - n_estimators: Maximum number of weak learners to train.\n\n    Returns:\n    - List of predicted class labels (0 or 1) for the test set.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    y_train_bin = np.array([1 if label == 1 else -1 for label in y_train])\n    n_samples = len(y_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n\n    def find_best_stump(X, y, weights):\n        \"\"\"\n        Finds the best decision stump (with lowest weighted error) for the current weight distribution.\n        \"\"\"\n        (n_samples, n_features) = X.shape\n        best_candidate = None\n        min_candidate_key = None\n        for feature_idx in range(n_features):\n            feature = X[:, feature_idx]\n            sorted_unique = np.unique(feature)\n            if len(sorted_unique) == 1:\n                thresholds = [sorted_unique[0]]\n            else:\n                thresholds = [(sorted_unique[i] + sorted_unique[i + 1]) / 2 for i in range(len(sorted_unique) - 1)]\n            for threshold in thresholds:\n                predictions = np.where(feature < threshold, 1, -1)\n                error = np.sum(weights * (predictions != y))\n                candidate_key = (error, feature_idx, threshold, 0)\n                if min_candidate_key is None or candidate_key < min_candidate_key:\n                    min_candidate_key = candidate_key\n                    best_candidate = {'error': error, 'feature_idx': feature_idx, 'threshold': threshold, 'polarity': 1}\n                predictions = np.where(feature >= threshold, 1, -1)\n                error = np.sum(weights * (predictions != y))\n                candidate_key = (error, feature_idx, threshold, 1)\n                if min_candidate_key is None or candidate_key < min_candidate_key:\n                    min_candidate_key = candidate_key\n                    best_candidate = {'error': error, 'feature_idx': feature_idx, 'threshold': threshold, 'polarity': -1}\n\n        def predict(x):\n            feature_val = x[best_candidate['feature_idx']]\n            if best_candidate['polarity'] == 1:\n                return 1 if feature_val < best_candidate['threshold'] else -1\n            else:\n                return 1 if feature_val >= best_candidate['threshold'] else -1\n        return {'error': best_candidate['error'], 'predict': predict}\n    for _ in range(n_estimators):\n        best_stump = find_best_stump(X_train_np, y_train_bin, sample_weights)\n        error = best_stump['error']\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predictions = np.array([best_stump['predict'](x) for x in X_train_np])\n        sample_weights *= np.exp(-alpha * y_train_bin * predictions)\n        sample_weights /= np.sum(sample_weights)\n        best_stump['alpha'] = alpha\n        stumps.append(best_stump)\n    test_predictions = []\n    for x in X_test:\n        x_np = np.array(x)\n        weighted_sum = 0.0\n        for stump in stumps:\n            weighted_sum += stump['alpha'] * stump['predict'](x_np)\n        predicted_label = 1 if weighted_sum > 0 else 0\n        test_predictions.append(predicted_label)\n    return test_predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"\n    Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    current_sphere_values = np.sum(positions ** 2, axis=1)\n    personal_best_values = current_sphere_values.copy()\n    personal_best_positions = positions.copy()\n    global_best_index = np.argmin(current_sphere_values)\n    global_best_value = current_sphere_values[global_best_index]\n    global_best_position = positions[global_best_index].copy()\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        r2 = rng.uniform(0.0, 1.0, size=(num_particles, n_dims))\n        velocities = 0.5 * velocities + 1.5 * r1 * (personal_best_positions - positions) + 1.5 * r2 * (global_best_position - positions)\n        positions += velocities\n        positions = np.clip(positions, -1.0, 1.0)\n        current_sphere_values = np.sum(positions ** 2, axis=1)\n        for i in range(num_particles):\n            if current_sphere_values[i] < personal_best_values[i]:\n                personal_best_values[i] = current_sphere_values[i]\n                personal_best_positions[i] = positions[i].copy()\n        current_min_val = np.min(current_sphere_values)\n        if current_min_val < global_best_value:\n            min_index = np.argmin(current_sphere_values)\n            global_best_value = current_min_val\n            global_best_position = positions[min_index].copy()\n    return round(float(global_best_value), 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k_used = n_train\n    else:\n        k_used = k\n    for x_test in X_test:\n        distances = []\n        for i in range(n_train):\n            x_train = X_train[i]\n            sum_sq = 0.0\n            for (a, b) in zip(x_test, x_train):\n                sum_sq += (a - b) ** 2\n            distance = sum_sq ** 0.5\n            distances.append((distance, y_train[i]))\n        sorted_distances = sorted(distances, key=lambda t: t[0])\n        neighbors = sorted_distances[:k_used]\n        neighbor_labels = [label for (dist, label) in neighbors]\n        if task == 'classification':\n            counts = Counter(neighbor_labels)\n            max_count = max(counts.values())\n            candidates = [label for (label, cnt) in counts.items() if cnt == max_count]\n            prediction = min(candidates)\n        else:\n            avg = sum(neighbor_labels) / len(neighbor_labels)\n            prediction = round(avg, 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n\n    def compute_gini(y):\n        if len(y) == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / len(y)\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def build_tree(sample_indices, current_depth):\n        y = y_train[sample_indices]\n        if len(y) == 0:\n            return {'is_leaf': True, 'label': 0}\n        if np.all(y == y[0]):\n            return {'is_leaf': True, 'label': y[0]}\n        if max_depth is not None and current_depth >= max_depth:\n            majority = np.argmax(np.bincount(y))\n            return {'is_leaf': True, 'label': majority}\n        parent_gini = compute_gini(y)\n        best_gain = -1\n        best_split = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[sample_indices, feature_idx]\n            sorted_indices = sample_indices[np.argsort(feature_values)]\n            sorted_values = X_train[sorted_indices, feature_idx]\n            split_points = []\n            for i in range(1, len(sorted_values)):\n                if sorted_values[i - 1] != sorted_values[i]:\n                    split_points.append(i)\n            for split_i in split_points:\n                threshold = (sorted_values[split_i - 1] + sorted_values[split_i]) / 2\n                left_indices = sorted_indices[:split_i]\n                right_indices = sorted_indices[split_i:]\n                left_y = y_train[left_indices]\n                right_y = y_train[right_indices]"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple (best_feature_index, best_threshold_value, best_gini) where\n        best_gini is rounded to 4 decimal places. If no valid split exists,\n        returns (-1, None, round(G_whole_dataset, 4)).\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    (classes, counts) = np.unique(y, return_counts=True)\n    gini_whole = 1.0 - np.sum((counts / n_samples) ** 2)\n    best_split_gini = float('inf')\n    best_split_feature = -1\n    best_split_threshold = None\n    any_valid_split = False\n    for j in range(n_features):\n        unique_vals = np.unique(X[:, j])\n        if len(unique_vals) < 2:\n            continue\n        sorted_vals = np.sort(unique_vals)\n        current_best_gini = float('inf')\n        current_best_threshold = None\n        for v in sorted_vals:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            (classes_left, counts_left) = np.unique(y_left, return_counts=True)\n            prob_left = counts_left / n_left\n            gini_left = 1.0 - np.sum(prob_left ** 2)\n            (classes_right, counts_right) = np.unique(y_right, return_counts=True)\n            prob_right = counts_right / n_right\n            gini_right = 1.0 - np.sum(prob_right ** 2)\n            g_split = n_left / n_samples * gini_left + n_right / n_samples * gini_right\n            if g_split < current_best_gini - 1e-12:\n                current_best_gini = g_split\n                current_best_threshold = v\n            elif abs(g_split - current_best_gini) < 1e-12:\n                if current_best_threshold is None or v < current_best_threshold:\n                    current_best_threshold = v\n        if current_best_threshold is not None:\n            any_valid_split = True\n            if current_best_gini < best_split_gini - 1e-12:\n                best_split_gini = current_best_gini\n                best_split_feature = j\n                best_split_threshold = current_best_threshold\n            elif abs(current_best_gini - best_split_gini) < 1e-12:\n                if j < best_split_feature:\n                    best_split_feature = j\n                    best_split_threshold = current_best_threshold\n                elif j == best_split_feature and current_best_threshold < best_split_threshold:\n                    best_split_threshold = current_best_threshold\n    if any_valid_split:\n        best_gini_rounded = round(best_split_gini, 4)\n        return (best_split_feature, best_split_threshold, best_gini_rounded)\n    else:\n        gini_whole_rounded = round(gini_whole, 4)\n        return (-1, None, gini_whole_rounded)"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"\n    Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n\n    def invalid_func(x, y):\n        return -1.0\n    if name not in supported:\n        return invalid_func\n\n    def distance_function(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1.0\n        try:\n            x_arr = np.array(x, dtype=float)\n            y_arr = np.array(y, dtype=float)\n        except (TypeError, ValueError):\n            return -1.0\n        if x_arr.ndim != 1 or y_arr.ndim != 1:\n            return -1.0\n        if x_arr.size == 0 or y_arr.size == 0:\n            return -1.0\n        if x_arr.shape[0] != y_arr.shape[0]:\n            return -1.0\n        if name == 'cosine':\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            if x_norm == 0 or y_norm == 0:\n                return -1.0\n        if name == 'euclidean':\n            dist = np.sqrt(np.sum((x_arr - y_arr) ** 2))\n        elif name == 'manhattan':\n            dist = np.sum(np.abs(x_arr - y_arr))\n        elif name == 'chebyshev':\n            dist = np.max(np.abs(x_arr - y_arr))\n        elif name == 'cosine':\n            dot_product = x_arr.dot(y_arr)\n            x_norm = np.linalg.norm(x_arr)\n            y_norm = np.linalg.norm(y_arr)\n            dist = 1 - dot_product / (x_norm * y_norm)\n        else:\n            return -1.0\n        return round(dist, 4)\n    return distance_function"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"\n    Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        n_actions_per_dim = []\n        for subspace in env.action_space.spaces:\n            if hasattr(subspace, 'n'):\n                n_actions_per_dim.append(subspace.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        has_continuous = any((x == np.inf for x in n_actions_per_dim))\n        if has_continuous:\n            action_ids = None\n        else:\n            ranges = [list(range(int(n))) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n        action_dim = len(n_actions_per_dim)\n    elif cont_action:\n        shape = env.action_space.shape\n        action_dim = shape[0]\n        n_actions_per_dim = [np.inf] * action_dim\n        action_ids = None\n    else:\n        n = env.action_space.n\n        n_actions_per_dim = [n]\n        action_dim = 1\n        action_ids = [(i,) for i in range(n)]\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"\n    Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta_counts = np.zeros((V, T))\n    for d in range(len(corpus)):\n        words_d = np.array(corpus[d], dtype=int)\n        beta_counts[words_d, :] += phi[d]\n    column_sums = beta_counts.sum(axis=0)\n    beta = beta_counts / column_sums[np.newaxis, :]\n    beta_rounded = [[round(x, 4) for x in row] for row in beta]\n    return beta_rounded"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoid_indices = list(range(k))\n    while True:\n        current_cost = 0.0\n        for sample_idx in range(n_samples):\n            x = X[sample_idx]\n            min_dist = float('inf')\n            for m in medoid_indices:\n                dist = np.linalg.norm(x - X[m])\n                if dist < min_dist:\n                    min_dist = dist\n            current_cost += min_dist\n        best_swap = None\n        best_new_cost = float('inf')\n        medoid_set = set(medoid_indices)\n        for m in medoid_indices:\n            for o in range(n_samples):\n                if o in medoid_set:\n                    continue\n                new_medoids = [idx for idx in medoid_indices if idx != m] + [o]\n                new_cost = 0.0\n                for sample_idx in range(n_samples):\n                    x = X[sample_idx]\n                    min_dist = float('inf')\n                    for new_m in new_medoids:\n                        dist = np.linalg.norm(x - X[new_m])\n                        if dist < min_dist:\n                            min_dist = dist\n                    new_cost += min_dist\n                if new_cost < best_new_cost:\n                    best_new_cost = new_cost\n                    best_swap = (m, o)\n        if best_swap is not None and best_new_cost < current_cost:\n            (m, o) = best_swap\n            medoid_indices = [idx for idx in medoid_indices if idx != m] + [o]\n        else:\n            break\n    labels = []\n    for sample_idx in range(n_samples):\n        x = X[sample_idx]\n        min_dist = float('inf')\n        closest_medoid_label = 0\n        for (label, m) in enumerate(medoid_indices):\n            dist = np.linalg.norm(x - X[m])\n            if dist < min_dist:\n                min_dist = dist\n                closest_medoid_label = label\n        labels.append(closest_medoid_label)\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def generate_polynomial(X, degree):\n        if degree == 1:\n            return X.copy()\n        (m, n) = X.shape\n        poly_X = X.copy()\n        for d in range(2, degree + 1):\n            for j in range(n):\n                new_col = X[:, j].reshape(-1, 1) ** d\n                poly_X = np.hstack((poly_X, new_col))\n        return poly_X\n    X_poly_train = generate_polynomial(x_train, degree)\n    X_poly_test = generate_polynomial(x_test, degree)\n    means = X_poly_train.mean(axis=0)\n    stds = X_poly_train.std(axis=0, ddof=0)\n    X_train_std = (X_poly_train - means) / stds\n    X_test_std = (X_poly_test - means) / stds\n    m_train = x_train.shape[0]\n    m_test = x_test.shape[0]\n    X_train_features = np.hstack([np.ones((m_train, 1)), X_train_std])\n    X_test_features = np.hstack([np.ones((m_test, 1)), X_test_std])\n    n_features = X_train_features.shape[1]\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        y_pred = X_train_features @ w\n        error = y_pred - y_train\n        gradient_mse = 2 / m_train * X_train_features.T @ error\n        reg_gradient = np.zeros_like(w)\n        reg_gradient[1:] = reg_factor * (l1_ratio * np.sign(w[1:]) + (1 - l1_ratio) * w[1:])\n        gradient = gradient_mse + reg_gradient\n        w -= learning_rate * gradient\n    predictions = X_test_features @ w\n    return np.round(predictions, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"\n    Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs are rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    temp = actual_np * predicted_np\n    grad_np = actual_np / (1 + np.exp(temp))\n    prob_np = 1 / (1 + np.exp(-predicted_np))\n    hess_np = prob_np * (1 - prob_np)\n    grad_rounded = np.round(grad_np, 6)\n    hess_rounded = np.round(hess_np, 6)\n    prob_rounded = np.round(prob_np, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": ""}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Compute the element-wise squared logarithmic error.\n    \n    Parameters:\n    -----------\n    actual : np.ndarray\n        Array of true values.\n    predicted : np.ndarray\n        Array of predicted values.\n    \n    Returns:\n    --------\n    np.ndarray\n        Array of squared log errors.\n    \"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate the Mean Squared Logarithmic Error (MSLE).\n    \n    Parameters:\n    -----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be the same length as `actual` and contain only non-negative numbers.\n    \n    Returns:\n    --------\n    float\n        The MSLE rounded to 4 decimal places. Returns -1 if input validation fails.\n    \"\"\"\n    try:\n        actual_arr = np.array(actual)\n        predicted_arr = np.array(predicted)\n    except:\n        return -1\n    if actual_arr.shape != predicted_arr.shape:\n        return -1\n    if not (np.issubdtype(actual_arr.dtype, np.number) and np.issubdtype(predicted_arr.dtype, np.number)):\n        return -1\n    if (actual_arr < 0).any() or (predicted_arr < 0).any():\n        return -1\n    errors = squared_log_error(actual_arr, predicted_arr)\n    msle = np.mean(errors)\n    return round(float(msle), 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    arr = np.array(z)\n    processed = np.where(arr >= 0, 1 / (1 + np.exp(-arr)), np.exp(arr) / (1 + np.exp(arr)))\n    rounded = np.round(processed, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded.item())\n    else:\n        return rounded.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        return np.where(z >= 0, z, a * z).tolist()\n    elif isinstance(z, list):\n        return [leaky_relu(element, a) for element in z]\n    else:\n        return z if z >= 0 else a * z"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        best_prediction = None\n        n_features = X_train.shape[1]\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            sorted_values = np.sort(np.unique(feature_values))\n            if len(sorted_values) == 1:\n                thresholds = [sorted_values[0] - 1.0, sorted_values[0] + 1.0]\n            else:\n                thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, -polarity, polarity)\n                    error = np.sum((predictions != y_train) * sample_weights)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_prediction = predictions.copy()\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        exponents = -alpha * y_train * best_prediction\n        sample_weights *= np.exp(exponents)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    n_test_samples = X_test.shape[0]\n    predictions = []\n    for i in range(n_test_samples):\n        sample = X_test[i]\n        total = 0.0\n        for (alpha, stump) in zip(alphas, stumps):\n            (feature_idx, threshold, polarity) = stump\n            feature_value = sample[feature_idx]\n            if feature_value < threshold:\n                stump_pred = -polarity\n            else:\n                stump_pred = polarity\n            total += alpha * stump_pred\n        pred = np.sign(total)\n        if pred == 0:\n            pred = -1\n        predictions.append(int(pred))\n    return predictions"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"\n    Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal matrix. Defaults to 0.5.\n\n    Returns:\n        A Python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions, the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    rest_dims = shape[1:]\n    m = 1\n    for dim in rest_dims:\n        m *= dim\n    A = np.random.randn(d0, m)\n    (U, s, Vh) = np.linalg.svd(A, full_matrices=False)\n    if d0 >= m:\n        Q = U\n    else:\n        Q = Vh\n    result = scale * Q.reshape(shape)\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=np.float32)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    W_actor = np.ones((4, 3))\n    b_actor = np.zeros(3)\n    W_critic = np.ones((4, 1))\n    b_critic = np.zeros(1)\n    z1 = np.maximum(0, s @ W1 + b1)\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    logits = z3 @ W_actor + b_actor\n    exp_logits = np.exp(logits)\n    sum_exp = np.sum(exp_logits)\n    action_probs = exp_logits / sum_exp\n    state_value = z3 @ W_critic + b_critic\n    action_probs_list = action_probs.flatten().tolist()\n    state_value_scalar = float(state_value.flatten()[0])\n    rounded_probs = [round(p, 4) for p in action_probs_list]\n    rounded_value = round(state_value_scalar, 4)\n    return (rounded_probs, rounded_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"\n    Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is:\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    x = np.array(state, dtype=np.float64)\n    for layer in range(1, 4):\n        W_key = f'W{layer}'\n        b_key = f'b{layer}'\n        W = np.array(params[W_key])\n        b = np.array(params[b_key])\n        x = W @ x + b\n        x = np.maximum(x, 0)\n    Wa = np.array(params['Wa'])\n    ba = np.array(params['ba'])\n    actor_output = Wa @ x + ba\n    exps = np.exp(actor_output)\n    sum_exps = np.sum(exps)\n    probabilities = exps / sum_exps\n    Wc = np.array(params['Wc'])\n    bc = np.array(params['bc'])\n    value = Wc @ x + bc\n    value = float(value.item())\n    rounded_probs = [round(p, 4) for p in probabilities]\n    final_probs = []\n    for p in rounded_probs:\n        if p == 0.0:\n            final_probs.append(0.0)\n        elif p == 1.0:\n            final_probs.append(1.0)\n        else:\n            final_probs.append(p)\n    rounded_value = round(value, 4)\n    if rounded_value == 0.0:\n        final_value = 0.0\n    elif rounded_value == 1.0:\n        final_value = 1.0\n    else:\n        final_value = rounded_value\n    return (final_probs, final_value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"\n    Compute Elastic-Net penalty or its gradient.\n\n    The Elastic-Net penalty is a convex combination of L1 and L2 regularization:\n        R(w) = \u03b1 * [ \u03bb * ||w||\u2082 + (1 - \u03bb) * 0.5 * w\u1d40w ]\n\n    The gradient of the penalty is:\n        \u2207R(w) = \u03b1 * [ \u03bb * sign(w) + (1 - \u03bb) * w ]\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularization strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient; else, return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if not gradient:\n        l2_norm = np.linalg.norm(w)\n        l2_squared_term = 0.5 * (1 - l1_ratio) * np.dot(w, w)\n        l1_term = l1_ratio * l2_norm\n        penalty = alpha * (l1_term + l2_squared_term)\n        return float(np.round(penalty, 4))\n    else:\n        sign_w = np.sign(w)\n        grad_term = l1_ratio * sign_w + (1 - l1_ratio) * w\n        grad = alpha * grad_term\n        return np.round(grad, 4).tolist()"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"\n    Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward`` method (single time-step),\n                      and a ``flush_gradients`` method.\n        loss_func:    Callable that maps the list of predictions to a scalar loss value.\n        param_name:   Name of the parameter to be checked. \"Ba\" and \"Bx\" must be redirected to the\n                      lower-case keys. If the name is \"X\" or \"y\", the function should immediately\n                      return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the chosen parameter or\n        None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    theta = model.parameters[param_name]\n    original_theta = np.copy(theta).astype(np.float64)\n    grads = np.zeros_like(original_theta, dtype=np.float64)\n    for idx in np.ndindex(original_theta.shape):\n        original_value = original_theta[idx]\n        model.parameters[param_name][idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            pred = model.forward(x_t)\n            predictions_plus.append(pred)\n        loss_plus = loss_func(predictions_plus)\n        model.parameters[param_name][idx] = original_value\n        model.parameters[param_name][idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            pred = model.forward(x_t)\n            predictions_minus.append(pred)\n        loss_minus = loss_func(predictions_minus)\n        model.parameters[param_name][idx] = original_value\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in X_test.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    D = np.full(m, 1 / m)\n    stumps = []\n    for _ in range(n_clf):\n        best_error = 1.0\n        best_feature = None\n        best_threshold = None\n        best_left_pred = 0\n        best_right_pred = 0\n        for feature in range(n):\n            unique_vals = np.unique(X_train[:, feature])\n            if len(unique_vals) == 1:\n                thresholds = [unique_vals[0] - 1e-05]\n            else:\n                sorted_vals = np.sort(unique_vals)\n                thresholds = [(sorted_vals[i] + sorted_vals[i + 1]) / 2 for i in range(len(sorted_vals) - 1)]\n            for threshold in thresholds:\n                left_mask = X_train[:, feature] <= threshold\n                left_y = y_train[left_mask]\n                left_weights = D[left_mask]\n                sum_pos_left = np.sum(left_weights[left_y == 1])\n                sum_neg_left = np.sum(left_weights[left_y == -1])\n                left_pred = 1 if sum_pos_left >= sum_neg_left else -1\n                right_mask = ~left_mask\n                right_y = y_train[right_mask]\n                right_weights = D[right_mask]\n                sum_pos_right = np.sum(right_weights[right_y == 1])\n                sum_neg_right = np.sum(right_weights[right_y == -1])\n                right_pred = 1 if sum_pos_right >= sum_neg_right else -1\n                error_left = sum_neg_left if left_pred == 1 else sum_pos_left\n                error_right = sum_neg_right if right_pred == 1 else sum_pos_right\n                total_error = error_left + error_right\n                if total_error < best_error:\n                    best_error = total_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_pred = left_pred\n                    best_right_pred = right_pred\n        if best_error == 0:\n            alpha = 10000000000.0\n        else:\n            alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stumps.append((best_feature, best_threshold, best_left_pred, best_right_pred, alpha))\n        (feature, threshold, left_pred, right_pred, _) = stumps[-1]\n        predictions = np.where(X_train[:, feature] <= threshold, left_pred, right_pred)\n        y_h = y_train * predictions\n        D = D * np.exp(-alpha * y_h)\n        D = D / D.sum()\n    predictions_test = []\n    for x in X_test:\n        total = 0.0\n        for (f, t, l, r, a) in stumps:\n            if x[f] <= t:\n                total += a * l\n            else:\n                total += a * r\n        predictions_test.append(1 if total >= 0 else -1)\n    return predictions_test"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"\n    Generate a NumPy array with Glorot/Xavier normal initialization.\n\n    Args:\n        shape (tuple[int, ...]): The desired shape of the output array. Must have at least\n                                 two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        np.ndarray: A NumPy array of floats with shape `shape`, initialized using the\n                    Glorot/Xavier normal distribution.\n    \"\"\"\n    receptive_field = 1\n    for dim in shape[2:]:\n        receptive_field *= dim\n    fan_in = shape[1] * receptive_field\n    fan_out = shape[0] * receptive_field\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    n = len(V)\n    adj_sets = [set() for _ in range(n)]\n    for (u, v) in E:\n        adj_sets[vertex_to_index[u]].add(v)\n        adj_sets[vertex_to_index[v]].add(u)\n    G = []\n    for i in range(n):\n        neighbors = list(adj_sets[i])\n        neighbors_sorted = sorted(neighbors, key=lambda x: vertex_to_index[x])\n        G.append(neighbors_sorted)\n    return G"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump for binary classification.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump with keys:\n        - \"feature_index\": int\n        - \"threshold\": float (rounded to 4 decimals)\n        - \"polarity\": int (1 or -1)\n        - \"weighted_error\": float (rounded to 4 decimals)\n    \"\"\"\n    (n, d) = X.shape\n    best_error = float('inf')\n    best_feature = -1\n    best_threshold = 0.0\n    best_polarity = 1\n    for feature_idx in range(d):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        sorted_X = X[sorted_indices, feature_idx]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        prefix_neg = np.zeros(n + 1)\n        prefix_pos = np.zeros(n + 1)\n        for i in range(n):\n            if sorted_y[i] == -1:\n                prefix_neg[i + 1] = prefix_neg[i] + sorted_weights[i]\n            else:\n                prefix_pos[i + 1] = prefix_pos[i] + sorted_weights[i]\n        total_neg = prefix_neg[-1]\n        total_pos = prefix_pos[-1]\n        unique_thresholds = np.unique(sorted_X)\n        feature_best_error = float('inf')\n        feature_best_threshold = None\n        feature_best_polarity = 1\n        for theta in unique_thresholds:\n            cutoff = np.searchsorted(sorted_X, theta, side='left')\n            error_p1 = prefix_neg[cutoff] + (total_pos - prefix_pos[cutoff])\n            error_p_1 = prefix_pos[cutoff] + (total_neg - prefix_neg[cutoff])\n            if error_p1 < error_p_1:\n                current_error = error_p1\n                current_polarity = 1\n            else:\n                current_error = error_p_1\n                current_polarity = -1\n            if current_error < feature_best_error:\n                feature_best_error = current_error\n                feature_best_threshold = theta\n                feature_best_polarity = current_polarity\n        if feature_best_error < best_error:\n            best_error = feature_best_error\n            best_feature = feature_idx\n            best_threshold = feature_best_threshold\n            best_polarity = feature_best_polarity\n    best_threshold = round(best_threshold, 4)\n    best_error = round(best_error, 4)\n    return {'feature_index': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': best_error}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"\n    Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    feature = list(feature)\n    target = list(target)\n    n = len(target)\n    unique_f = sorted(set(feature))\n    if len(unique_f) < 2:\n        return (None, 0.0)\n    parent_counter = Counter(target)\n    parent_entropy = 0.0\n    for count in parent_counter.values():\n        p = count / n\n        parent_entropy -= p * math.log2(p)\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n    candidates = []\n    for i in range(len(unique_f) - 1):\n        t = (unique_f[i] + unique_f[i + 1]) / 2\n        candidates.append(t)\n    max_ig = -1.0\n    best_threshold = None\n    for t in candidates:\n        left_counts = Counter()\n        right_counts = Counter()\n        left_size = 0\n        right_size = 0\n        for (f_val, label) in zip(feature, target):\n            if f_val < t:\n                left_counts[label] += 1\n                left_size += 1\n            else:\n                right_counts[label] += 1\n                right_size += 1\n        ent_left = 0.0\n        if left_size > 0:\n            for count in left_counts.values():\n                p = count / left_size\n                ent_left -= p * math.log2(p)\n        ent_right = 0.0\n        if right_size > 0:\n            for count in right_counts.values():\n                p = count / right_size\n                ent_right -= p * math.log2(p)\n        ig = parent_entropy - left_size / n * ent_left - right_size / n * ent_right\n        if ig > max_ig:\n            max_ig = ig\n            best_threshold = t\n        elif ig == max_ig:\n            if t < best_threshold:\n                best_threshold = t\n    if max_ig <= 0:\n        return (None, 0.0)\n    else:\n        return (round(best_threshold, 4), round(max_ig, 4))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n\n    Returns:\n        A callable initializer.\n\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name not in globals():\n        raise ValueError('Invalid initialization function.')\n    candidate = globals()[name]\n    if not callable(candidate):\n        raise ValueError('Invalid initialization function.')\n    return candidate"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Parameters:\n    - X: Input tensor of shape (N, C, H, W)\n    - pool_shape: Tuple (p_h, p_w) representing the height and width of the pooling window\n    - stride: Tuple (s_h, s_w) representing the vertical and horizontal stride\n    - accum_grad: Gradient tensor of the same shape as the output of the forward pass\n\n    Returns:\n    - A tuple (pooled_output, grad_input), both as Python lists after rounding to 4 decimal places\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (pool_h, pool_w) = pool_shape\n    (s_h, s_w) = stride\n    o_h = (H - pool_h) // s_h + 1\n    o_w = (W - pool_w) // s_w + 1\n    pooled_output = np.zeros((N, C, o_h, o_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(o_h):\n                for j in range(o_w):\n                    h_start = i * s_h\n                    h_end = h_start + pool_h\n                    w_start = j * s_w\n                    w_end = w_start + pool_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = window.mean()\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(o_h):\n                for j in range(o_w):\n                    h_start = i * s_h\n                    h_end = h_start + pool_h\n                    w_start = j * s_w\n                    w_end = w_start + pool_w\n                    grad_val = accum_grad[n, c, i, j] / (pool_h * pool_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += np.full((pool_h, pool_w), grad_val)\n    pooled_output_rounded = np.round(pooled_output, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n    return (pooled_output_rounded.tolist(), grad_input_rounded.tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        a_val = np.array(tree_a.value)\n        b_val = np.array(tree_b.value)\n        return np.allclose(a_val, b_val, atol=1e-08, rtol=0.0)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08, rtol=0.0):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"\n    Perform a single-point column crossover on two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as parent1.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function returns -1.\n    \"\"\"\n    if len(parent1) != len(parent2):\n        return -1\n    if len(parent1) == 0:\n        pass\n    elif len(parent1[0]) != len(parent2[0]):\n        return -1\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.ndim == 1 and p1.size == 0:\n        p1 = p1.reshape(0, 0)\n    if p2.ndim == 1 and p2.size == 0:\n        p2 = p2.reshape(0, 0)\n    if p1.shape != p2.shape:\n        return -1\n    child1 = np.concatenate((p1[:, :cutoff], p2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((p2[:, :cutoff], p1[:, cutoff:]), axis=1)\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples. For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    V2I = G['_V2I']\n    is_directed = G['is_directed']\n    _G = G['_G']\n    n = len(V2I)\n    I = [None] * n\n    for (label, idx) in V2I.items():\n        I[idx] = label\n    adj = {label: [] for label in I}\n    processed = set()\n    for i in range(n):\n        for edge in _G[i]:\n            (u, v, w) = edge\n            if is_directed:\n                adj[u].append((v, w))\n            else:\n                (a, b) = (u, v)\n                if a > b:\n                    (a, b) = (b, a)\n                canonical = (a, b, w)\n                if canonical not in processed:\n                    processed.add(canonical)\n                    adj[u].append((v, w))\n                    adj[v].append((u, w))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        True if all elements are 0 or 1, otherwise False.\n    \"\"\"\n    x = np.asarray(x)\n    if x.dtype == np.bool_:\n        return True\n    else:\n        return np.all((x == 0) | (x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    ngram_counts = defaultdict(int)\n    context_counts = defaultdict(int)\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N == 1:\n            padded = tokens\n        else:\n            padded = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(padded) - N + 1):\n            ngram = tuple(padded[i:i + N])\n            ngram_counts[ngram] += 1\n            context = tuple(padded[i:i + N - 1])\n            context_counts[context] += 1\n    query_tokens = query.split()\n    if N == 1 and (not query_tokens):\n        return float('-inf')\n    if N == 1:\n        padded_query = query_tokens\n    else:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    query_ngrams = [tuple(padded_query[i:i + N]) for i in range(len(padded_query) - N + 1)]\n    total_log_prob = 0.0\n    for ngram in query_ngrams:\n        context = ngram[:-1]\n        cnt_context = context_counts[context]\n        cnt_ngram = ngram_counts[ngram]\n        if cnt_context == 0 or cnt_ngram == 0:\n            return float('-inf')\n        total_log_prob += math.log(cnt_ngram / cnt_context)\n    return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    diff = X[:, np.newaxis, :] - X[np.newaxis, :, :]\n    distances = np.linalg.norm(diff, axis=2)\n    W = 1.0 / (1.0 + distances)\n    np.fill_diagonal(W, 0)\n    degrees = np.sum(W, axis=1)\n    D = np.diag(degrees)\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    prev_assignments = None\n    for _ in range(100):\n        distances_to_centroids = np.linalg.norm(E[:, np.newaxis, :] - centroids[np.newaxis, :, :], axis=2)\n        assignments = np.argmin(distances_to_centroids, axis=1)\n        if prev_assignments is not None and np.array_equal(assignments, prev_assignments):\n            break\n        prev_assignments = assignments.copy()\n        new_centroids = []\n        for cluster_id in range(k):\n            cluster_points = E[assignments == cluster_id]\n            if cluster_points.shape[0] == 0:\n                random_index = np.random.randint(n_samples)\n                new_centroid = E[random_index]\n            else:\n                new_centroid = np.mean(cluster_points, axis=0)\n            new_centroids.append(new_centroid)\n        centroids = np.array(new_centroids)\n    return assignments.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples (mine, label).\n        golds: Dictionary mapping label to expected output.\n        ix: Current index in params.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    header = '------------------------- DEBUG -------------------------\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    mine_prev = f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n'\n    theirs_prev = f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n'\n    mine_curr = f'Mine [{curr_label}]:\\n{curr_mine}\\n'\n    theirs_curr = f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n'\n    result = header + mine_prev + theirs_prev + mine_curr + theirs_curr + footer\n    return result"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I),\n            a 1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    P = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu_vec = np.full(P, mu)\n    else:\n        mu_vec = np.array(mu).flatten()\n        if mu_vec.shape[0] != P:\n            raise ValueError('Length of mu must match the number of features (P).')\n    if V is None:\n        V_inv = np.eye(P)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(P) / V\n    else:\n        V_array = np.array(V)\n        if V_array.ndim == 1:\n            if len(V_array) != P:\n                raise ValueError('Length of V must match the number of features (P).')\n            V_inv = np.diag(1.0 / V_array)\n        elif V_array.ndim == 2:\n            if V_array.shape != (P, P):\n                raise ValueError('V must be a P x P matrix.')\n            V_inv = np.linalg.inv(V_array)\n        else:\n            raise ValueError('V must be scalar, 1D, or 2D.')\n    XTX = X.T @ X\n    XTy = X.T @ y\n    A = V_inv + XTX\n    term = V_inv @ mu_vec + XTy\n    mu_b = np.linalg.solve(A, term)\n    return [round(x, 4) for x in mu_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2.0\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    num_bins = N // 2 + 1\n    filterbank = []\n    for i in range(n_filters):\n        left = freqs[i]\n        center = freqs[i + 1]\n        right = freqs[i + 2]\n        if normalize:\n            scale = 2.0 / (right - left)\n        else:\n            scale = 1.0\n        row = []\n        for k in range(num_bins):\n            f_k = k * fs / N\n            if f_k < left or f_k > right:\n                weight = 0.0\n            else:\n                left_slope = (f_k - left) / (center - left)\n                right_slope = (right - f_k) / (right - center)\n                weight = min(left_slope, right_slope)\n                weight *= scale\n            row.append(weight)\n        row_rounded = [round(w, 4) for w in row]\n        filterbank.append(row_rounded)\n    return filterbank"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len, dtype=np.float64)\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        \"\"\"Approximate the digamma function using recursive shifting and asymptotic expansion.\"\"\"\n        threshold = 6.0\n        sum_reciprocal = 0.0\n        current_x = x\n        while current_x < threshold:\n            sum_reciprocal -= 1.0 / current_x\n            current_x += 1.0\n        ln_x = math.log(current_x)\n        term2 = 1 / (2 * current_x)\n        term3 = 1 / (12 * current_x ** 2)\n        term4 = 1 / (120 * current_x ** 4)\n        term5 = 1 / (252 * current_x ** 6)\n        approx = ln_x - term2 - term3 + term4 - term5\n        return approx + sum_reciprocal\n    row = gamma[d]\n    gamma_dt = row[t]\n    sum_row = sum(row)\n    result = digamma(gamma_dt) - digamma(sum_row)\n    return round(result, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    (curr_pred, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    curr_block = f'Mine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    result = header + prev_block + curr_block + footer\n    return result"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"\n    Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz. Default is 44000 Hz.\n    positive_only : bool, optional\n        When True, return only the non-negative frequency bins (0 to floor(N/2)).\n        When False, return all N bins arranged as NumPy's `fftfreq` does.\n        Default is True.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimal places.\n        An empty list is returned when N or fs is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    full_freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        freqs = full_freqs[:N // 2 + 1]\n    else:\n        freqs = full_freqs\n    return np.round(freqs, 4).tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"\n    Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    row_sums = oob_mask.sum(axis=1)\n    valid_samples = row_sums > 0\n    if not valid_samples.any():\n        return -1\n    sum_oob_preds = (predictions * oob_mask).sum(axis=1)\n    sum_oob_valid = sum_oob_preds[valid_samples]\n    counts = row_sums[valid_samples]\n    y_true_valid = y_true[valid_samples]\n    average_preds = sum_oob_valid / counts\n    squared_errors = (y_true_valid - average_preds) ** 2\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        items = set(transaction)\n        for item in items:\n            item_counts[item] += 1\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        items = set(transaction)\n        filtered = [item for item in items if item in frequent_items]\n        ordered = sorted(filtered, key=lambda x: (-item_counts[x], x))\n        current = root\n        for item in ordered:\n            if item in current['children']:\n                current['children'][item]['support'] += 1\n            else:\n                current['children'][item] = {'support': 1, 'children': {}}\n            current = current['children'][item]\n    return root"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors. If None, the function must set Y = X.\n        Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel. Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals X[i]\u00b7Y[j] + c0,\n        rounded to 4 decimals. Return -1 when X and Y have incompatible shapes\n        (different number of columns).\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if X_arr.ndim == 1:\n        X_arr = X_arr.reshape(-1, 1)\n    if X_arr.ndim != 2:\n        return -1\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n        if Y_arr.ndim == 1:\n            Y_arr = Y_arr.reshape(-1, 1)\n        if Y_arr.ndim != 2:\n            return -1\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    if X_arr.shape[0] == 0:\n        return []\n    K = X_arr @ Y_arr.T + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"\n    Perform one Adam optimization step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    beta1_pow = beta1 ** t\n    beta2_pow = beta2 ** t\n    correct1 = 1.0 / (1.0 - beta1_pow)\n    correct2 = 1.0 / (1.0 - beta2_pow)\n    m_hat = m_t * correct1\n    v_hat = v_t * correct2\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_rounded = np.round(updated_param, 8)\n    m_t_rounded = np.round(m_t, 8)\n    v_t_rounded = np.round(v_t, 8)\n    return (updated_param_rounded.tolist(), m_t_rounded.tolist(), v_t_rounded.tolist())"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Compute the updated mean and variance for the Cross-Entropy Method (CEM).\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    K = int(retain_prcnt * N)\n    rewards = np.array(rewards)\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:K]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean_rounded = np.round(mean, 4).tolist()\n    variance_rounded = np.round(variance, 4).tolist()\n    return (mean_rounded, variance_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"\n    Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    counts = Counter(labels)\n    total = sum(counts.values())\n    if total == 0:\n        return 0.0\n    h = 0.0\n    for count in counts.values():\n        p = count / total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        \"svd\" to use singular value decomposition or \"eigen\" to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        - The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        - The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - np.mean(data, axis=0)\n    (n_samples, n_features) = data_centered.shape\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt[:n_components]\n        total_S_sq = np.sum(S ** 2)\n        explained_variance_ratio = (S ** 2 / total_S_sq)[:n_components]\n        initial_scores = data_centered @ components.T\n    elif solver == 'eigen':\n        cov = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n        components = eigenvectors[:, :n_components]\n        total_ev = np.sum(eigenvalues)\n        explained_variance_ratio = (eigenvalues / total_ev)[:n_components]\n        initial_scores = data_centered @ components\n    else:\n        raise ValueError(\"Invalid solver. Use 'svd' or 'eigen'.\")\n    for i in range(n_components):\n        if solver == 'svd':\n            comp = components[i, :]\n        else:\n            comp = components[:, i]\n        first_non_zero_idx = None\n        for j in range(len(comp)):\n            if abs(comp[j]) > 1e-08:\n                first_non_zero_idx = j\n                break\n        if first_non_zero_idx is not None and comp[first_non_zero_idx] < 0:\n            if solver == 'svd':\n                components[i, :] *= -1\n            else:\n                components[:, i] *= -1\n            initial_scores[:, i] *= -1\n    scores_rounded = np.round(initial_scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probs = leaf.value\n        max_val = max(probs)\n        for (i, p) in enumerate(probs):\n            if p == max_val:\n                return i\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances_sq = np.sum((data[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        cluster_assignments = np.argmin(distances_sq, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            points_in_cluster = data[cluster_assignments == k]\n            if points_in_cluster.shape[0] == 0:\n                new_centroids[k] = centroids[k]\n            else:\n                new_centroids[k] = np.mean(points_in_cluster, axis=0)\n        prev_centroids = centroids.copy()\n        centroids = new_centroids\n        diff_sq = np.sum((centroids - prev_centroids) ** 2, axis=1)\n        max_diff = np.sqrt(np.max(diff_sq))\n        if max_diff < 1e-06:\n            break\n    centroids_rounded = np.round(centroids, 4)\n    centroids_list = centroids_rounded.tolist()\n    centroids_list.sort()\n    return centroids_list"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"\n    Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row is normalized such that it sums to 1. If any row sums to 0,\n    the function returns -1 to indicate that normalization is not possible.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data, either as a list of lists or a NumPy array.\n\n    Returns\n    -------\n    list[list[float]]\n        A row-normalized matrix where each row sums to 1, with all values\n        rounded to 4 decimal places. Returns -1 if any row sums to 0.\n    \"\"\"\n    data_np = np.asarray(data, dtype=float)\n    row_sums = data_np.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data_np /= row_sums[:, np.newaxis]\n    rounded = np.round(data_np, 4)\n    return rounded.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = False\n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            cont_action = all((isinstance(space, Box) for space in env.action_space.spaces))\n        elif isinstance(env.action_space, Dict):\n            cont_action = all((isinstance(space, Box) for space in env.action_space.spaces.values()))\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    cont_obs = False\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            cont_obs = all((isinstance(space, Box) for space in env.observation_space.spaces))\n        elif isinstance(env.observation_space, Dict):\n            cont_obs = all((isinstance(space, Box) for space in env.observation_space.spaces.values()))\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"\n    Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    sum_updates = np.sum(updates, axis=0)\n    running_pred = -learning_rate * sum_updates\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        max_logits = np.max(running_pred, axis=1, keepdims=True)\n        exp_logits = np.exp(running_pred - max_logits)\n        sum_exp = np.sum(exp_logits, axis=1, keepdims=True)\n        probabilities = exp_logits / sum_exp\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between *X* and *W*.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples = X.shape[0]\n    input_length = X.shape[1]\n    in_channels = X.shape[2]\n    kernel_width = W.shape[0]\n    out_channels = W.shape[2]\n    assert in_channels == W.shape[1], 'Input and kernel channels must match'\n    effective_kernel = kernel_width + (kernel_width - 1) * dilation\n    if pad == 'same':\n        out_len = (input_length + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - input_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError('Invalid padding value')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    L_padded = X_padded.shape[1]\n    O = (L_padded - effective_kernel) // stride + 1\n    if O <= 0:\n        return np.zeros((n_examples, 0, out_channels)).tolist()\n    kernel_pos = np.arange(kernel_width) * (dilation + 1)\n    indices = np.arange(O)[:, None] * stride + kernel_pos[None, :]\n    selected = X_padded[:, indices, :]\n    output = np.einsum('bokc,kco->boc', selected, W)\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty,\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    p = counts / N\n    sum_p_sq = np.sum(p ** 2)\n    gini_imp = 1 - sum_p_sq\n    return round(gini_imp, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    - X (np.ndarray): Feature matrix of shape (m, n)\n    - y (np.ndarray): Target vector of shape (m,)\n    - learning_rate (float): Step size for gradient descent\n    - n_iterations (int): Number of iterations to perform\n\n    Returns:\n    - tuple[list[float], float]: A tuple containing the learned weights (as a list) and the bias (as a float)\n    - Returns -1 if the input data are inconsistent\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        error = y_pred - y\n        dw = 2 / m * X.T @ error\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = np.round(theta, 4)\n    b_rounded = round(b, 4)\n    return (theta_rounded.tolist(), b_rounded)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    n_rows = len(X)\n    for row in X:\n        if len(row) != n_rows:\n            return False\n    matrix = np.array(X)\n    return np.allclose(matrix, matrix.T, atol=1e-08, rtol=0.0)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss in gradient boosting.\n\n    Args:\n        y: List of binary class labels (0 or 1).\n        f: List of current prediction scores (floats).\n\n    Returns:\n        List of negative gradients rounded to four decimal places.\n        Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    for label in y:\n        if label not in {0, 1}:\n            return -1\n    result = []\n    for (yi, fi) in zip(y, f):\n        y_prime = 2 * yi - 1\n        exponent = y_prime * fi\n        denominator = 1 + np.exp(exponent)\n        gi = y_prime / denominator\n        result.append(round(gi, 4))\n    return result"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"\n    Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x)\n    if order == 0:\n        result = scale * np.where(x_arr > 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    elif order == 1:\n        result = scale * np.where(x_arr > 0, 1, alpha * np.exp(x_arr))\n    elif order == 2:\n        result = scale * np.where(x_arr > 0, 0, alpha * np.exp(x_arr))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    return np.round(result, 4).tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"\n    Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    y = np.array(y, dtype=np.float64)\n    N = len(x)\n    y_pred = np.full(N, np.mean(y), dtype=np.float64)\n    for _ in range(n_estimators):\n        r = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_r = r[sorted_indices]\n        if sorted_x[0] == sorted_x[-1]:\n            global_mean_r = np.mean(sorted_r)\n            delta = np.full_like(y_pred, global_mean_r)\n        else:\n            prefix_sum_r = np.cumsum(sorted_r)\n            prefix_sum_sq = np.cumsum(sorted_r ** 2)\n            best_sse = float('inf')\n            best_left_mean = 0.0\n            best_right_mean = 0.0\n            best_i = -1\n            for i in range(N - 1):\n                if sorted_x[i] < sorted_x[i + 1]:\n                    t = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n                    left_n = i + 1\n                    left_sum = prefix_sum_r[i]\n                    left_sum_sq = prefix_sum_sq[i]\n                    left_mean = left_sum / left_n\n                    left_sse = left_sum_sq - left_sum ** 2 / left_n\n                    right_n = N - left_n\n                    right_sum = prefix_sum_r[-1] - left_sum\n                    right_sum_sq = prefix_sum_sq[-1] - left_sum_sq\n                    right_mean = right_sum / right_n\n                    right_sse = right_sum_sq - right_sum ** 2 / right_n\n                    total_sse = left_sse + right_sse\n                    if total_sse < best_sse:\n                        best_sse = total_sse\n                        best_left_mean = left_mean\n                        best_right_mean = right_mean\n                        best_i = i\n            t = (sorted_x[best_i] + sorted_x[best_i + 1]) / 2.0\n            mask = x <= t\n            delta = np.where(mask, best_left_mean, best_right_mean)\n        y_pred += learning_rate * delta\n    return list(np.round(y_pred, 4))"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"\n    Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to `w`.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If None, a zero array of the\n        same shape as `grad` is used.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple `(w_next, Eg_next)` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    new_Eg = rho * Eg + (1 - rho) * grad ** 2\n    adj = learning_rate * grad / np.sqrt(new_Eg + epsilon)\n    new_w = w - adj\n    w_rounded = np.round(new_w, 4).tolist()\n    Eg_rounded = np.round(new_Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"\n    Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True, return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.array(x)\n    if not derivative:\n        result = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    else:\n        result = np.where(x_arr >= 0, 1.0, alpha * np.exp(x_arr))\n    return np.round(result, 4).tolist()"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_data(data):\n        is_tuple = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        if is_tuple:\n            first_element = data[0]\n            if isinstance(first_element, np.ndarray):\n                dim = first_element.shape[0]\n            else:\n                dim = len(first_element)\n            per_dim_values = []\n            for i in range(dim):\n                col = []\n                for x in data:\n                    if isinstance(x, np.ndarray):\n                        col.append(x[i].item())\n                    else:\n                        col.append(x[i])\n                per_dim_values.append(col)\n            all_values = []\n            for x in data:\n                if isinstance(x, (list, tuple)):\n                    for y in x:\n                        if isinstance(y, np.generic):\n                            all_values.append(y.item())\n                        else:\n                            all_values.append(y)\n                elif isinstance(x, np.ndarray):\n                    for y in x.tolist():\n                        if isinstance(y, np.generic):\n                            all_values.append(y.item())\n                        else:\n                            all_values.append(y)\n        else:\n            dim = 1\n            per_dim_values = [data]\n            all_values = []\n            for x in data:\n                if isinstance(x, np.generic):\n                    all_values.append(x.item())\n                else:\n                    all_values.append(x)\n        return (is_tuple, dim, per_dim_values, all_values)\n    (tuple_actions, action_dim, per_dim_actions, all_actions_values) = process_data(actions)\n    (tuple_observations, obs_dim, per_dim_observations, all_observations_values) = process_data(observations)\n    continuous_actions = any((isinstance(x, float) and (not x.is_integer()) for x in all_actions_values))\n    continuous_observations = any((isinstance(x, float) and (not x.is_integer()) for x in all_observations_values))\n    n_actions_per_dim = []\n    action_ids = []\n    for dim_values in per_dim_actions:\n        unique_vals = sorted(list(set(dim_values)))\n        n_actions_per_dim.append(len(unique_vals))\n        action_ids.append(unique_vals)\n    n_obs_per_dim = []\n    obs_ids = []\n    for dim_values in per_dim_observations:\n        unique_vals = sorted(list(set(dim_values)))\n        n_obs_per_dim.append(len(unique_vals))\n        obs_ids.append(unique_vals)\n    result = {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': action_dim > 1, 'multidim_observations': obs_dim > 1, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\n    return result"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    initial_prediction = np.mean(y_train)\n    F = np.full_like(y_train, initial_prediction)\n    trees = []\n\n    def find_best_split(X, y):\n        best_feature = None\n        best_threshold = None\n        best_reduction = 0\n        current_mean = np.mean(y)\n        current_se = np.sum((y - current_mean) ** 2)\n        for feature in range(X.shape[1]):\n            x = X[:, feature]\n            unique_vals = np.unique(x)\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for threshold in thresholds:\n                left_mask = x <= threshold\n                right_mask = ~left_mask\n                (y_left, y_right) = (y[left_mask], y[right_mask])\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                left_mean = np.mean(y_left)\n                right_mean = np.mean(y_right)\n                left_se = np.sum((y_left - left_mean) ** 2)\n                right_se = np.sum((y_right - right_mean) ** 2)\n                total_se = left_se + right_se\n                reduction = current_se - total_se\n                if reduction > best_reduction:\n                    best_reduction = reduction\n                    best_feature = feature\n                    best_threshold = threshold\n        if best_reduction <= 0:\n            return (None, None, None)\n        return (best_feature, best_threshold, best_reduction)\n\n    def build_tree(X, y, current_depth):\n        if current_depth >= max_depth:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        if len(np.unique(y)) == 1:\n            return {'type': 'leaf', 'value': y[0]}\n        (best_feature, best_threshold, best_reduction) = find_best_split(X, y)\n        if best_feature is None:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        left_mask = X[:, best_feature] <= best_threshold\n        right_mask = ~left_mask\n        (X_left, y_left) = (X[left_mask], y[left_mask])\n        (X_right, y_right) = (X[right_mask], y[right_mask])\n        left_child = build_tree(X_left, y_left, current_depth + 1)\n        right_child = build_tree(X_right, y_right, current_depth + 1)\n        return {'type': 'internal', 'feature': best_feature, 'threshold': best_threshold, 'left': left_child, 'right': right_child}\n\n    def predict_sample(tree, sample):\n        if tree['type'] == 'leaf':\n            return tree['value']\n        if sample[tree['feature']] <= tree['threshold']:\n            return predict_sample(tree['left'], sample)\n        else:\n            return predict_sample(tree['right'], sample)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals, 0)\n        trees.append(tree)\n        tree_preds = np.array([predict_sample(tree, x) for x in X_train])\n        F += learning_rate * tree_preds\n    predictions = []\n    for x in X_test:\n        pred = initial_prediction\n        for tree in trees:\n            pred += learning_rate * predict_sample(tree, x)\n        predictions.append(pred)\n    return [round(p, 4) for p in predictions]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the PDF of a multivariate Gaussian distribution for each sample in X.\n\n    Parameters:\n    -----------\n    X : np.ndarray\n        Array of shape (n_samples, n_features) or (n_samples,) if 1D.\n    mean : np.ndarray\n        Mean vector of shape (n_features,).\n    cov : np.ndarray\n        Covariance matrix of shape (n_features, n_features), must be positive-definite.\n\n    Returns:\n    --------\n    List[float]\n        A list of PDF values, one for each sample in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    d = len(mean)\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    normalization = (2 * math.pi) ** d * det_cov\n    coeff = 1.0 / math.sqrt(normalization)\n    pdf_values = []\n    for x in X:\n        delta = x - mean\n        quad = delta @ inv_cov @ delta\n        exponent = math.exp(-0.5 * quad)\n        pdf = coeff * exponent\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    P = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu_vec = np.full(P, mu, dtype=np.float64)\n    else:\n        mu_vec = np.array(mu, dtype=np.float64).flatten()\n        if mu_vec.shape[0] != P:\n            raise ValueError('Length of mu must match the number of features (including intercept).')\n    if V is None:\n        V = np.eye(P)\n    elif isinstance(V, (int, float)):\n        V = np.eye(P) * V\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            if len(V) != P:\n                raise ValueError('Length of V must match the number of features (including intercept).')\n            V = np.diag(V)\n        elif V.shape != (P, P):\n            raise ValueError(f'V must be a {P}x{P} matrix.')\n    else:\n        raise ValueError('V must be a scalar, 1D array, or 2D matrix.')\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Xty = X.T @ y\n    term = V_inv + XtX\n    Sigma_p = np.linalg.inv(term)\n    mu_p = Sigma_p @ (V_inv @ mu_vec + Xty)\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Calculate the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative numbers.\n\n    Parameters:\n    - actual (list[float]): Ground truth values.\n    - predicted (list[float]): Predicted values.\n\n    Returns:\n    - float: RMSLE rounded to four decimal places, or -1 if validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    n = len(actual)\n    if n == 0:\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    total = 0.0\n    for (a, p) in zip(actual, predicted):\n        total += (math.log(1 + p) - math.log(1 + a)) ** 2\n    rmsle = math.sqrt(total / n)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        denominator = window_len - 1\n    else:\n        denominator = window_len\n    window = []\n    for n in range(window_len):\n        angle = 2 * math.pi * n / denominator\n        value = 0.5 - 0.5 * math.cos(angle)\n        rounded_value = round(value, 4)\n        window.append(rounded_value)\n    return window"}
{"task_id": 433, "completion_id": 0, "solution": "def glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"\n    Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field\n        fan_out = out_channels * receptive_field\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description. Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4) for _ in range(len(y))]\n    current_pred = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - current_pred\n        ones = np.ones((X.shape[0], 1))\n        X_with_intercept = np.hstack([ones, X])\n        XTX = X_with_intercept.T @ X_with_intercept\n        XTy = X_with_intercept.T @ residuals\n        beta = np.linalg.inv(XTX) @ XTy\n        h = X_with_intercept @ beta\n        current_pred += learning_rate * h\n    return [round(val, 4) for val in current_pred]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"\n    Compute the logistic sigmoid function or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    is_scalar = not (isinstance(x, list) or isinstance(x, np.ndarray))\n    x_arr = np.array(x)\n    sigma_0 = 1 / (1 + np.exp(-x_arr))\n    if order == 0:\n        result = sigma_0\n    elif order == 1:\n        result = sigma_0 * (1 - sigma_0)\n    else:\n        result = sigma_0 * (1 - sigma_0) * (1 - 2 * sigma_0)\n    result_rounded = np.round(result, 4)\n    if is_scalar:\n        return float(result_rounded.item())\n    else:\n        return result_rounded.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If None, the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        `y`, or -1 when `num_classes` is smaller than required.\n    \"\"\"\n    y_arr = np.array(y)\n    if y_arr.size == 0:\n        if num_classes is None:\n            num_classes = 0\n        result = np.zeros((0, num_classes), dtype=int)\n        return result.tolist()\n    else:\n        max_y = np.max(y_arr)\n        required_num_classes = max_y + 1\n        if num_classes is None:\n            num_classes = required_num_classes\n        elif num_classes < required_num_classes:\n            return -1\n        result = np.zeros((len(y_arr), num_classes), dtype=int)\n        result[np.arange(len(y_arr)), y_arr] = 1\n        return result.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    transaction_sets = [set(trans) for trans in transactions]\n    total = len(transaction_sets)\n    if total == 0:\n        return []\n    all_items = set()\n    for trans in transactions:\n        for item in trans:\n            all_items.add(item)\n    sorted_items = sorted(all_items)\n    C1 = [(item,) for item in sorted_items]\n    L1 = []\n    for candidate in C1:\n        count = sum((1 for trans in transaction_sets if set(candidate).issubset(trans)))\n        if count / total >= min_sup:\n            L1.append(candidate)\n    frequent_itemsets = L1[:]\n    current_L = L1[:]\n    k = 2\n    while current_L:\n        candidates = set()\n        n = len(current_L)\n        k_prev = len(current_L[0])\n        for i in range(n):\n            for j in range(i + 1, n):\n                l1 = current_L[i]\n                l2 = current_L[j]\n                if l1[:k_prev - 1] == l2[:k_prev - 1]:\n                    candidate = l1 + (l2[-1],)\n                    candidates.add(candidate)\n        pruned_candidates = []\n        prev_set = set(current_L)\n        for candidate in candidates:\n            is_valid = True\n            for subset in itertools.combinations(candidate, k_prev):\n                subset_tuple = tuple(sorted(subset))\n                if subset_tuple not in prev_set:\n                    is_valid = False\n                    break\n            if is_valid:\n                pruned_candidates.append(candidate)\n        Lk = []\n        for candidate in pruned_candidates:\n            count = sum((1 for trans in transaction_sets if set(candidate).issubset(trans)))\n            if count / total >= min_sup:\n                Lk.append(candidate)\n        Lk_sorted = sorted(Lk)\n        frequent_itemsets.extend(Lk_sorted)\n        if not Lk_sorted:\n            break\n        current_L = Lk_sorted\n        k += 1\n    return frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    arr = np.array(predictions, dtype=float)\n    averaged = np.mean(arr, axis=0)\n    rounded = np.round(averaged, 4)\n    prob_matrix = rounded.tolist()\n    labels = np.argmax(rounded, axis=1).tolist()\n    return (prob_matrix, labels)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the Radial Basis Function (RBF) kernel matrix.\n\n    Parameters:\n    - X: List of N feature vectors (each of length C).\n    - Y: (Optional) List of M feature vectors (each of length C). If None, defaults to X.\n    - sigma: (Optional) Scale parameter(s). If None, uses default value sqrt(C / 2).\n\n    Returns:\n    - A nested list of shape (N, M) representing the RBF kernel matrix.\n    - Returns -1 if any input is invalid.\n    \"\"\"\n    if not X:\n        return -1\n    if Y is not None and (not Y):\n        return -1\n    if Y is None:\n        Y = X\n    cx = len(X[0])\n    for vec in X:\n        if len(vec) != cx:\n            return -1\n    cy = len(Y[0])\n    for vec in Y:\n        if len(vec) != cy:\n            return -1\n    if cx != cy:\n        return -1\n    C = cx\n    if sigma is not None:\n        if isinstance(sigma, (int, float)):\n            if sigma <= 0:\n                return -1\n            sigma_sq = np.full(C, sigma ** 2)\n        elif isinstance(sigma, (list, np.ndarray)):\n            if len(sigma) != C:\n                return -1\n            for s in sigma:\n                if not (isinstance(s, (int, float)) or isinstance(s, np.number)):\n                    return -1\n                if s <= 0:\n                    return -1\n            sigma_arr = np.array(sigma)\n            sigma_sq = sigma_arr ** 2\n        else:\n            return -1\n    else:\n        sigma_val = np.sqrt(C / 2)\n        sigma_sq = np.full(C, sigma_val ** 2)\n    X_np = np.array(X, dtype=float)\n    Y_np = np.array(Y, dtype=float)\n    squared_diff = (X_np[:, np.newaxis, :] - Y_np[np.newaxis, :, :]) ** 2\n    sum_divided = np.sum(squared_diff / sigma_sq, axis=2)\n    kernel_matrix = np.exp(-0.5 * sum_divided)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix_rounded"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef entropy(labels):\n    \"\"\"Compute the Shannon entropy of a list of class labels.\"\"\"\n    if not labels:\n        return 0.0\n    counts = np.bincount(labels)\n    probabilities = counts / len(labels)\n    return -np.sum((p * np.log2(p) for p in probabilities if p > 0))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find a decision stump that maximizes information gain.\n\n    Args:\n        X: 2-D list of shape (n_samples, n_features) with numerical values.\n        y: 1-D list of class labels.\n\n    Returns:\n        A 4-tuple (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n        or (-1, None, majority_label, majority_label) if no useful split exists.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(y)\n    overall_counts = np.bincount(y)\n    majority_label = np.argmax(overall_counts)\n    if n_samples == 0 or entropy(y) == 0:\n        return (-1, None, majority_label, majority_label)\n    parent_entropy = entropy(y)\n    best_gain = -float('inf')\n    best_feature = -1\n    best_threshold = None\n    best_left_label = majority_label\n    best_right_label = majority_label\n    n_features = X.shape[1]\n    for j in range(n_features):\n        column = X[:, j]\n        sorted_unique = np.sort(np.unique(column))\n        if len(sorted_unique) < 2:\n            continue\n        for i in range(len(sorted_unique) - 1):\n            low = sorted_unique[i]\n            high = sorted_unique[i + 1]\n            threshold = (low + high) / 2\n            left_mask = column <= threshold\n            left_y = y[left_mask]\n            right_y = y[~left_mask]\n            n_left = len(left_y)\n            n_right = len(right_y)\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n            h_left = entropy(left_y)\n            h_right = entropy(right_y)\n            gain = parent_entropy - (p_left * h_left + p_right * h_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = j\n                best_threshold = threshold\n                best_left_label = np.argmax(np.bincount(left_y))\n                best_right_label = np.argmax(np.bincount(right_y))\n            elif gain == best_gain:\n                if j < best_feature:\n                    best_feature = j\n                    best_threshold = threshold\n                    best_left_label = np.argmax(np.bincount(left_y))\n                    best_right_label = np.argmax(np.bincount(right_y))\n                elif j == best_feature and threshold < best_threshold:\n                    best_threshold = threshold\n                    best_left_label = np.argmax(np.bincount(left_y))\n                    best_right_label = np.argmax(np.bincount(right_y))\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    else:\n        best_threshold = round(best_threshold, 4)\n        return (best_feature, best_threshold, best_left_label, best_right_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"\n    Split the dataset *X* into two subsets based on a feature and a threshold.\n\n    The split is done such that:\n    - The first subset contains samples where the value at *feature_i* is:\n        - >= threshold (if threshold is int or float)\n        - == threshold (otherwise)\n    - The second subset contains the remaining samples.\n\n    Both subsets are returned in the original order and as regular Python lists.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two. *result[0]* is the first subset, *result[1]* is the second subset.\n        Each subset is a regular Python list.\n    \"\"\"\n    if isinstance(X, list):\n        X_array = np.array(X)\n    else:\n        X_array = X\n    if isinstance(threshold, (int, float)):\n        mask = X_array[:, feature_i] >= threshold\n    else:\n        mask = X_array[:, feature_i] == threshold\n    left = X_array[mask].tolist()\n    right = X_array[~mask].tolist()\n    return [left, right]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: np.ndarray, Q_next: np.ndarray, actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Compute the DQN target Q-values for a batch of experiences.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as Q.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid, return -1.\n    \"\"\"\n    if not 0.0 <= gamma <= 1.0:\n        return -1\n    if Q.ndim != 2 or Q_next.ndim != 2 or Q.shape != Q_next.shape:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size:\n        return -1\n    for a in actions:\n        if isinstance(a, bool):\n            return -1\n        if not isinstance(a, int) or a < 0 or a >= n_actions:\n            return -1\n    targets = []\n    for i in range(batch_size):\n        done = dones[i]\n        reward = rewards[i]\n        if done:\n            target = reward\n        else:\n            max_q_next = np.max(Q_next[i])\n            target = reward + gamma * max_q_next\n        y = Q[i].copy()\n        y[actions[i]] = target\n        targets.append(y.round(4).tolist())\n    return targets"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"\n    Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If None, infer as max(labels) + 1.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too small).\n    \"\"\"\n    labels_array = np.array(labels, dtype=int)\n    if (labels_array < 0).any():\n        return -1\n    if len(labels_array) == 0:\n        if num_classes is None:\n            return -1\n        if num_classes <= 0:\n            return -1\n        return []\n    max_label = np.max(labels_array)\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes <= 0 or num_classes < max_label + 1:\n        return -1\n    result = []\n    for label in labels_array:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    y_pred = np.full_like(y_np, np.mean(y_np))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        if np.sum(residuals ** 2) == 0:\n            break\n        unique_x = np.unique(x_np)\n        split_candidates = unique_x[:-1] if len(unique_x) >= 2 else []\n        if not split_candidates:\n            mean_residual = np.mean(residuals)\n            update = np.full_like(residuals, mean_residual)\n        else:\n            best_sse = None\n            best_split = None\n            best_vL = 0.0\n            best_vR = 0.0\n            for t in split_candidates:\n                left_mask = x_np <= t\n                right_mask = x_np > t\n                vL = np.mean(residuals[left_mask])\n                vR = np.mean(residuals[right_mask])\n                sse_left = np.sum((residuals[left_mask] - vL) ** 2)\n                sse_right = np.sum((residuals[right_mask] - vR) ** 2)\n                total_sse = sse_left + sse_right\n                if best_sse is None or total_sse < best_sse:\n                    best_sse = total_sse\n                    best_split = t\n                    best_vL = vL\n                    best_vR = vR\n            update = np.zeros_like(residuals)\n            left_mask = x_np <= best_split\n            right_mask = x_np > best_split\n            update[left_mask] = best_vL\n            update[right_mask] = best_vR\n        y_pred += learning_rate * update\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "def expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"\n    One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    q_copy = [row.copy() for row in q_table]\n    if next_state is not None:\n        num_actions = len(q_copy[next_state])\n        max_q = max(q_copy[next_state])\n        greedy_action = 0\n        for a in range(num_actions):\n            if q_copy[next_state][a] == max_q:\n                greedy_action = a\n                break\n        expected_value = 0.0\n        for a_prime in range(num_actions):\n            if a_prime == greedy_action:\n                prob = 1 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expected_value += prob * q_copy[next_state][a_prime]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_copy[state][action] += lr * (target - q_copy[state][action])\n    rounded_q = [[round(q, 4) for q in row] for row in q_copy]\n    return rounded_q"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"\n    Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates are rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n    for i in range(m):\n        floor_i_over_2 = i // 2\n        x_low = (floor_i_over_2 + 0.1) * 10\n        x_high = (floor_i_over_2 + 0.9) * 10\n        mod_i_2 = i % 2\n        y_low = (mod_i_2 * interval + 0.1) * 10\n        y_high = (mod_i_2 * interval + 0.9) * 10\n        train_x = [random.uniform(x_low, x_high) for _ in range(n_train)]\n        train_y = [random.uniform(y_low, y_high) for _ in range(n_train)]\n        X_train_list.extend([[x, y] for (x, y) in zip(train_x, train_y)])\n        Y_train_list.extend([(i - 0.5) * 2] * n_train)\n        val_x = [random.uniform(x_low, x_high) for _ in range(n_val)]\n        val_y = [random.uniform(y_low, y_high) for _ in range(n_val)]\n        X_val_list.extend([[x, y] for (x, y) in zip(val_x, val_y)])\n        Y_val_list.extend([(i - 0.5) * 2] * n_val)\n    X_train = np.array(X_train_list)\n    X_val = np.array(X_val_list)\n    Y_train = np.array(Y_train_list)\n    Y_val = np.array(Y_val_list)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"\n    Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to `w`.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentered variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size `\u03b1`.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        (w_new, m_t, v_t) where:\n        * w_new \u2013 updated parameters (same shape as `w`)\n        * m_t \u2013 updated first moment\n        * v_t \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"\n    Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where `rewards[t][i]` is the reward for arm *i* at time-step *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0]) if rewards else 0\n    estimates = [ev_prior] * N\n    counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(0, N)\n        else:\n            max_est = max(estimates)\n            arm = estimates.index(max_est)\n        counts[arm] += 1\n        reward = rewards[t][arm]\n        estimates[arm] += (reward - estimates[arm]) / counts[arm]\n    return [round(v, 4) for v in estimates]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    n = len(data)\n    labels = [-1] * n\n    visited = [False] * n\n    cluster_id = -1\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            (x1, y1) = data[i]\n            neighbors = []\n            for j in range(n):\n                dx = x1 - data[j, 0]\n                dy = y1 - data[j, 1]\n                dist = np.sqrt(dx ** 2 + dy ** 2)\n                if dist <= eps:\n                    neighbors.append(j)\n            if len(neighbors) < min_samples:\n                labels[i] = -1\n            else:\n                cluster_id += 1\n                labels[i] = cluster_id\n                queue = deque(neighbors)\n                for neighbor in neighbors:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                while queue:\n                    current = queue.popleft()\n                    if labels[current] == -1:\n                        labels[current] = cluster_id\n                    (x_current, y_current) = data[current]\n                    current_neighbors = []\n                    for j in range(n):\n                        dx = x_current - data[j, 0]\n                        dy = y_current - data[j, 1]\n                        dist = np.sqrt(dx ** 2 + dy ** 2)\n                        if dist <= eps:\n                            current_neighbors.append(j)\n                    if len(current_neighbors) >= min_samples:\n                        for neighbor in current_neighbors:\n                            if labels[neighbor] == -1:\n                                labels[neighbor] = cluster_id\n                                if not visited[neighbor]:\n                                    visited[neighbor] = True\n                                    queue.append(neighbor)\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If `num_classes` is not provided and `y` is empty.\n        ValueError: If any label is negative or not smaller than `num_classes`.\n    \"\"\"\n    y = np.array(y, dtype=int).ravel()\n    if not y.size:\n        if num_classes is None:\n            raise ValueError('Cannot infer num_classes from empty y and num_classes is not provided.')\n        else:\n            return np.zeros((0, num_classes), dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < 1:\n        raise ValueError('num_classes must be a positive integer')\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(f'Label values must be in [0, {num_classes - 1}], but found invalid labels.')\n    m = len(y)\n    result = np.zeros((m, num_classes), dtype=int)\n    result[np.arange(m), y] = 1\n    return result"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    def build_tree(X, y, current_depth):\n        \"\"\"Recursively build a regression tree.\"\"\"\n        n_samples = len(X)\n        if n_samples < 2 or current_depth >= max_depth:\n            return {'type': 'leaf', 'mean': np.mean(y)}\n        sorted_pairs = sorted(zip(X, y))\n        sorted_X = [x for (x, y) in sorted_pairs]\n        sorted_y = [y for (x, y) in sorted_pairs]\n        best_SSE = float('inf')\n        best_split_val = None\n        best_left_X = None\n        best_left_y = None\n        best_right_X = None\n        best_right_y = None\n        for i in range(len(sorted_X) - 1):\n            split_val = (sorted_X[i] + sorted_X[i + 1]) / 2\n            left_X = sorted_X[:i + 1]\n            left_y = sorted_y[:i + 1]\n            right_X = sorted_X[i + 1:]\n            right_y = sorted_y[i + 1:]\n            left_mean = np.mean(left_y)\n            left_SSE = sum(((y_val - left_mean) ** 2 for y_val in left_y))\n            right_mean = np.mean(right_y)\n            right_SSE = sum(((y_val - right_mean) ** 2 for y_val in right_y))\n            total_SSE = left_SSE + right_SSE\n            if total_SSE < best_SSE:\n                best_SSE = total_SSE\n                best_split_val = split_val\n                best_left_X = left_X\n                best_left_y = left_y\n                best_right_X = right_X\n                best_right_y = right_y\n        current_mean = np.mean(y)\n        current_SSE = sum(((y_val - current_mean) ** 2 for y_val in y))\n        if best_SSE < current_SSE:\n            left_child = build_tree(best_left_X, best_left_y, current_depth + 1)\n            right_child = build_tree(best_right_X, best_right_y, current_depth + 1)\n            return {'type': 'internal', 'split_val': best_split_val, 'left': left_child, 'right': right_child}\n        else:\n            return {'type': 'leaf', 'mean': current_mean}\n    tree = build_tree(X_train, y_train, 0)\n\n    def predict(x):\n        node = tree\n        while True:\n            if node['type'] == 'leaf':\n                return node['mean']\n            elif x <= node['split_val']:\n                node = node['left']\n            else:\n                node = node['right']\n    return [predict(x) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    arr = np.asarray(x).ravel()\n    if arr.size == 0:\n        return []\n    diag_matrix = np.diag(arr)\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": ""}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"\n    Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    if n_samples == 0:\n        return []\n    n_features = len(X[0])\n    exponents = []\n    for t in range(degree + 1):\n        for c in combinations_with_replacement(range(n_features), t):\n            counts = [0] * n_features\n            for index in c:\n                counts[index] += 1\n            exponents.append(counts)\n    result = []\n    for sample in X:\n        new_row = []\n        for exp in exponents:\n            val = 1.0\n            for i in range(n_features):\n                val *= sample[i] ** exp[i]\n            new_row.append(val)\n        result.append(new_row)\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1.0\n    y_arr = np.asarray(y)\n    return round(y_arr.var(ddof=0), 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"\n    Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.array(x, dtype=float).ravel()\n    y_arr = slope * x_arr + intercept\n    grad_arr = np.full_like(x_arr, slope)\n    grad2_arr = np.full_like(x_arr, 0.0)\n    y = np.round(y_arr, 4).tolist()\n    grad = np.round(grad_arr, 4).tolist()\n    grad2 = np.round(grad2_arr, 4).tolist()\n    return (y, grad, grad2)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    centered = data - means\n    stds = np.std(centered, axis=0, ddof=0)\n    stds[stds == 0] = 1\n    standardized = centered / stds\n    cov_matrix = standardized.T @ standardized / (n_samples - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        vec = sorted_eigenvectors[:, i]\n        max_idx = np.argmax(np.abs(vec))\n        if vec[max_idx] < 0:\n            sorted_eigenvectors[:, i] = -vec\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    c = sum(y_train) / len(y_train)\n    F = [c] * len(X_train)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = [y_train[i] - F[i] for i in range(len(y_train))]\n        best_se = float('inf')\n        best_feature = -1\n        best_threshold = 0.0\n        best_left = 0.0\n        best_right = 0.0\n        n_samples = len(X_train)\n        n_features = len(X_train[0]) if X_train else 0\n        for feature in range(n_features):\n            feature_values = [x[feature] for x in X_train]\n            data = sorted(zip(feature_values, residuals), key=lambda x: x[0])\n            sorted_x = [x for (x, r) in data]\n            sorted_r = [r for (x, r) in data]\n            prefix_sum = []\n            s = 0.0\n            for r in sorted_r:\n                s += r\n                prefix_sum.append(s)\n            prefix_squares = []\n            s_sq = 0.0\n            for r in sorted_r:\n                s_sq += r * r\n                prefix_squares.append(s_sq)\n            total_sum = prefix_sum[-1]\n            total_squares = prefix_squares[-1]\n            current_best_se = float('inf')\n            current_threshold = 0.0\n            current_left = 0.0\n            current_right = 0.0\n            for i in range(n_samples - 1):\n                left_count = i + 1\n                left_sum = prefix_sum[i]\n                left_squares = prefix_squares[i]\n                right_sum = total_sum - left_sum\n                right_squares = total_squares - left_squares\n                right_count = n_samples - left_count\n                left_avg = left_sum / left_count\n                right_avg = right_sum / right_count\n                left_se = left_squares - left_sum ** 2 / left_count\n                right_se = right_squares - right_sum ** 2 / right_count\n                total_se = left_se + right_se\n                threshold = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n                if total_se < current_best_se:\n                    current_best_se = total_se\n                    current_threshold = threshold\n                    current_left = left_avg\n                    current_right = right_avg\n            if current_best_se < best_se:\n                best_se = current_best_se\n                best_feature = feature\n                best_threshold = current_threshold\n                best_left = current_left\n                best_right = current_right\n        stumps.append((best_feature, best_threshold, best_left, best_right))\n        for i in range(n_samples):\n            x = X_train[i]\n            if x[best_feature] <= best_threshold:\n                pred = best_left\n            else:\n                pred = best_right\n            F[i] += learning_rate * pred\n    predictions = []\n    for x in X_test:\n        score = c\n        for (feature, threshold, left, right) in stumps:\n            if x[feature] <= threshold:\n                score += learning_rate * left\n            else:\n                score += learning_rate * right\n        predictions.append(1 if score >= 0.5 else 0)\n    return predictions"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    m = X.shape[0]\n    n_v = W.shape[0]\n    n_h = W.shape[1]\n    h0_activation = np.dot(X, W) + hbias\n    h0_prob = 1.0 / (1.0 + np.exp(-h0_activation))\n    current_h_prob = h0_prob\n    for _ in range(k):\n        v_activation = np.dot(current_h_prob, W.T) + vbias\n        current_v_prob = 1.0 / (1.0 + np.exp(-v_activation))\n        h_activation = np.dot(current_v_prob, W) + hbias\n        current_h_prob = 1.0 / (1.0 + np.exp(-h_activation))\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(current_v_prob.T, current_h_prob)\n    delta_W = learning_rate * (pos_grad - neg_grad) / m\n    W_new = W + delta_W\n    W_rounded = np.round(W_new, 4)\n    return W_rounded.tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    abs_diff = np.abs(x_arr - y_arr)\n    max_diff = abs_diff.max()\n    return round(float(max_diff), 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function returns the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, a_min=epsilon, a_max=1 - epsilon)\n    bce = -y * np.log(y_pred_clipped) - (1 - y) * np.log(1 - y_pred_clipped)\n    reconstruction_loss = np.mean(bce)\n    batch_size = y.shape[0]\n    kl_sum = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    average_kl = kl_sum / batch_size\n    total_loss = reconstruction_loss + average_kl\n    return float(np.round(total_loss, 6))"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_arr = np.array(X)\n    w_arr = np.array(w)\n    V_arr = np.array(V)\n    linear_part = X_arr @ w_arr\n    sum_vx = X_arr @ V_arr\n    X_squared = X_arr ** 2\n    V_squared = V_arr ** 2\n    interaction_term = 0.5 * np.sum(sum_vx ** 2 - X_squared @ V_squared, axis=1)\n    preds = w0 + linear_part + interaction_term\n    return np.round(preds, 4).tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the numerically stable, element-wise sigmoid activation.\n\n    The function works for a scalar, list, tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if z is a scalar, otherwise a Python list obtained with\n        numpy.ndarray.tolist(), where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        val = 1.0 / (1.0 + np.exp(-z))\n        return float(np.round(val, 4))\n    else:\n        arr = np.array(z)\n        result = 1.0 / (1.0 + np.exp(-arr))\n        rounded = np.round(result, 4)\n        return rounded.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"\n    Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  \n    The derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        grad = z * (1 - z)\n        grad = np.round(grad, 4)\n        return grad.tolist()\n    elif isinstance(z, list):\n        if not z:\n            return []\n        first_element = z[0]\n        if isinstance(first_element, list):\n            return [sigmoid_grad(sublist) for sublist in z]\n        else:\n            return [sigmoid_grad(element) for element in z]\n    else:\n        grad = z * (1 - z)\n        return float(np.round(grad, 4))"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * X1 + W[1] * X2 + b\n    preds = np.where(Z >= 0, 1, -1)\n    return preds.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    X_class_0 = X_train[y_train == 0]\n    X_class_1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_class_0, axis=0)\n    mean_1 = np.mean(X_class_1, axis=0)\n    std_0 = np.std(X_class_0, axis=0) + 1e-09\n    std_1 = np.std(X_class_1, axis=0) + 1e-09\n    prior_0 = X_class_0.shape[0] / X_train.shape[0]\n    prior_1 = X_class_1.shape[0] / X_train.shape[0]\n    log_prior_0 = np.log(prior_0)\n    log_prior_1 = np.log(prior_1)\n    n_features = X_test.shape[1]\n    term1_0 = -0.5 * (X_test - mean_0) ** 2 / std_0 ** 2\n    term1_sum_0 = term1_0.sum(axis=1)\n    term2_sum_0 = -np.log(std_0).sum()\n    term3_0 = -0.5 * n_features * np.log(2 * np.pi)\n    score_0 = log_prior_0 + term1_sum_0 + term2_sum_0 + term3_0\n    term1_1 = -0.5 * (X_test - mean_1) ** 2 / std_1 ** 2\n    term1_sum_1 = term1_1.sum(axis=1)\n    term2_sum_1 = -np.log(std_1).sum()\n    term3_1 = -0.5 * n_features * np.log(2 * np.pi)\n    score_1 = log_prior_1 + term1_sum_1 + term2_sum_1 + term3_1\n    predictions = (score_0 > score_1).astype(int)\n    return predictions.tolist()"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost for binary classification.\n\n    Args:\n        AL (np.ndarray): Output of the last layer (probabilities), shape (m,) or (1, m).\n        Y (np.ndarray): Ground truth labels, shape (m,) or (1, m).\n\n    Returns:\n        float: The computed cost, rounded to 4 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    m = AL.size\n    log_loss = Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped)\n    cost = -(1 / m) * np.sum(log_loss)\n    return float(np.round(cost, 4))"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm to compute the\n    posterior distribution \u03b3\u209c(i) = P(q\u209c = s\u1d62 | O, \u03bb) for each state i at time t.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A', and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t, rounded to four decimal places.\n    \"\"\"\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    n_states = len(pi)\n    alpha = [[0.0 for _ in range(n_states)] for _ in range(T)]\n    beta = [[0.0 for _ in range(n_states)] for _ in range(T)]\n    for i in range(n_states):\n        alpha[0][i] = pi[i] * B[i][observations[0]]\n    for current_t in range(1, t + 1):\n        for i in range(n_states):\n            alpha[current_t][i] = sum((alpha[current_t - 1][j] * A[j][i] for j in range(n_states))) * B[i][observations[current_t]]\n    for i in range(n_states):\n        beta[T - 1][i] = 1.0\n    for current_t in range(T - 2, t - 1, -1):\n        for i in range(n_states):\n            beta[current_t][i] = sum((A[i][j] * B[j][observations[current_t + 1]] * beta[current_t + 1][j] for j in range(n_states)))\n    numerator = [alpha[t][i] * beta[t][i] for i in range(n_states)]\n    denominator = sum(numerator)\n    gamma = [n / denominator for n in numerator]\n    gamma_rounded = [round(prob, 4) for prob in gamma]\n    return gamma_rounded"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering of Applications with Noise (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighborhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131.\n        Clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    eps_sq = eps ** 2\n    neighbors = []\n    for i in range(n_samples):\n        current_neighbors = []\n        for j in range(n_samples):\n            dist_sq = np.sum((data[i] - data[j]) ** 2)\n            if dist_sq <= eps_sq:\n                current_neighbors.append(j)\n        neighbors.append(current_neighbors)\n    core_samples = [len(neighbor_list) >= min_samples for neighbor_list in neighbors]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] == -1 and core_samples[i]:\n            cluster_id += 1\n            queue = deque()\n            queue.append(i)\n            labels[i] = cluster_id\n            while queue:\n                current = queue.popleft()\n                for neighbor in neighbors[current]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if core_samples[neighbor]:\n                            queue.append(neighbor)\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Gaussian Mixture Model clustering using the Expectation-Maximization (EM) algorithm.\n\n    Parameters:\n    - data: A 2D NumPy array of shape (N, D), where N is the number of samples and D is the number of features.\n    - k: Number of Gaussian components.\n    - max_iter: Maximum number of EM iterations.\n    - epsilon: Convergence tolerance for the change in mixture weights.\n\n    Returns:\n    - A list of integers of length N, where each element is the cluster label (0 to K-1) for the corresponding sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    mu = data[:k]\n    pi = np.full(k, 1.0 / k)\n    overall_cov = np.cov(data, rowvar=False, bias=True)\n    overall_cov += 1e-06 * np.eye(n_features)\n    sigma = np.array([overall_cov.copy() for _ in range(k)])\n    for _ in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            det_sigma = np.linalg.det(sigma[i])\n            inv_sigma = np.linalg.inv(sigma[i])\n            coeff = 1.0 / ((2 * np.pi) ** (n_features / 2) * np.sqrt(det_sigma))\n            diff = data - mu[i]\n            quad_form = np.sum(diff @ inv_sigma * diff, axis=1)\n            exponent = -0.5 * quad_form\n            prob = coeff * np.exp(exponent)\n            responsibilities[:, i] = pi[i] * prob\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        N_k = responsibilities.sum(axis=0)\n        new_pi = N_k / n_samples\n        mu = responsibilities.T @ data / N_k.reshape(-1, 1)\n        new_sigma = np.zeros_like(sigma)\n        for i in range(k):\n            gamma_i = responsibilities[:, i]\n            diff = data - mu[i]\n            weighted_diff = gamma_i[:, np.newaxis] * diff\n            sigma_i = weighted_diff.T @ diff / N_k[i]\n            sigma_i += 1e-06 * np.eye(n_features)\n            new_sigma[i] = sigma_i\n        sigma = new_sigma\n        if np.max(np.abs(new_pi - pi)) < epsilon:\n            break\n        pi = new_pi\n    cluster_assignments = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(mu[:, 0])\n    new_label_for_original = np.zeros(k, dtype=int)\n    for (new_label, original_index) in enumerate(sorted_indices):\n        new_label_for_original[original_index] = new_label\n    final_labels = new_label_for_original[cluster_assignments].tolist()\n    return final_labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"\n    Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    if n_cluster == 1:\n        return [0] * N\n    data_sq = np.sum(data ** 2, axis=1)\n    squared_distances = data_sq.reshape(-1, 1) + data_sq.reshape(1, -1) - 2 * data @ data.T\n    W = np.exp(-gamma * squared_distances)\n    degree = np.sum(W, axis=1)\n    if method == 'unnormalized':\n        D = np.diag(degree)\n        L = D - W\n    else:\n        sqrt_degree = 1.0 / np.sqrt(degree)\n        W_normalized = W * sqrt_degree.reshape(-1, 1) * sqrt_degree.reshape(1, -1)\n        L = np.eye(N) - W_normalized\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.sqrt(np.sum(U ** 2, axis=1))\n        U = U / norms.reshape(-1, 1)\n    K = n_cluster\n    centroids = U[:K].copy()\n    prev_labels = None\n    while True:\n        data_sq = np.sum(U ** 2, axis=1).reshape(-1, 1)\n        centroids_sq = np.sum(centroids ** 2, axis=1).reshape(1, -1)\n        dot = U @ centroids.T\n        dist_sq = data_sq + centroids_sq - 2 * dot\n        labels = np.argmin(dist_sq, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        for k in range(K):\n            cluster_points = U[labels == k]\n            if cluster_points.shape[0] > 0:\n                centroids[k] = np.mean(cluster_points, axis=0)\n    clusters = {}\n    for idx in range(N):\n        cl = labels[idx]\n        if cl not in clusters:\n            clusters[cl] = []\n        clusters[cl].append(idx)\n    cluster_min = []\n    for cl in clusters:\n        min_idx = min(clusters[cl])\n        cluster_min.append((cl, min_idx))\n    cluster_min.sort(key=lambda x: x[1])\n    new_label = {original_cl: new_cl for (new_cl, (original_cl, _)) in enumerate(cluster_min)}\n    final_labels = [new_label[cl] for cl in labels]\n    return final_labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = X_data @ X_data.T\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g_i = np.dot(alpha, y_data * G[:, i])\n            if y_data[i] * (g_i + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot((alpha * y_data)[:, np.newaxis].T, X_data).flatten()\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        current_feature = features[root.label]\n        selected_child = None\n        for child in root.child:\n            if child.x == current_feature:\n                selected_child = child\n                break\n        if selected_child is None:\n            selected_child = root.child[1]\n        return predict_sample(selected_child, features, task_type)\n    else:\n        current_feature = features[root.label]\n        if current_feature <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"\n    Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_samples = y.shape[0]\n    class_counts = np.unique(y, return_counts=True)[1]\n    class_probs = class_counts / n_samples\n    entropy_y = -np.sum(class_probs * np.log2(class_probs))\n    max_gain = -1.0\n    best_feature = 0\n    for feature_idx in range(X.shape[1]):\n        feature = X[:, feature_idx]\n        unique_vals = np.unique(feature)\n        cond_entropy = 0.0\n        for val in unique_vals:\n            mask = feature == val\n            y_sub = y[mask]\n            n_sub = y_sub.shape[0]\n            if n_sub == 0:\n                continue\n            sub_counts = np.unique(y_sub, return_counts=True)[1]\n            sub_probs = sub_counts / n_sub\n            entropy_sub = -np.sum(sub_probs * np.log2(sub_probs))\n            cond_entropy += n_sub / n_samples * entropy_sub\n        info_gain = entropy_y - cond_entropy\n        if info_gain > max_gain or (np.isclose(info_gain, max_gain) and feature_idx < best_feature):\n            max_gain = info_gain\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation for outlier detection.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    if epsilon == 0.0:\n        return []\n    if n_samples == 1:\n        return [0] if epsilon > 0 else []\n    else:\n        phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a MaxEnt classifier using Generalized Iterative Scaling (GIS).\"\"\"\n    features = set()\n    for (x, y) in zip(X_train, y_train):\n        for c in range(X_train.shape[1]):\n            v = x[c]\n            features.add((c, v, y))\n    features = list(features)\n    if not features:\n        counts = np.bincount(y_train)\n        majority = np.argmax(counts)\n        return [majority] * len(X_test)\n    feature_dict = {feat: idx for (idx, feat) in enumerate(features)}\n    N = len(X_train)\n    empirical_counts = np.zeros(len(features))\n    for (i, (x, y)) in enumerate(zip(X_train, y_train)):\n        for c in range(X_train.shape[1]):\n            v = x[c]\n            feat = (c, v, y)\n            if feat in feature_dict:\n                idx = feature_dict[feat]\n                empirical_counts[idx] += 1\n    mu_empirical = empirical_counts / N"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"\n    Calculate the document-frequency ratio for each word across a collection of text documents.\n\n    Args:\n        data: A list of documents. Each document is a tuple (label, words), where label is ignored\n              and words is an iterable of strings.\n        cut_off: Number of top words to include in the returned set. If None, include all words.\n                 If 0, return an empty set.\n\n    Returns:\n        A tuple containing:\n        1. A list of (word, ratio) pairs, sorted by ratio descending and word ascending.\n        2. A set of the top `cut_off` most frequent words.\n    \"\"\"\n    word_doc_counts = Counter()\n    total_docs = len(data)\n    for (_, words) in data:\n        unique_words = set(words)\n        word_doc_counts.update(unique_words)\n    word_ratios = []\n    for (word, count) in word_doc_counts.items():\n        ratio = count / total_docs\n        rounded_ratio = round(ratio, 4)\n        word_ratios.append((word, rounded_ratio))\n    sorted_word_ratios = sorted(word_ratios, key=lambda x: (-x[1], x[0]))\n    the_set = set()\n    if cut_off is None:\n        the_set = {word for (word, _) in sorted_word_ratios}\n    elif cut_off == 0:\n        the_set = set()\n    else:\n        num_distinct = len(sorted_word_ratios)\n        take = min(cut_off, num_distinct)\n        the_set = {word for (word, _) in sorted_word_ratios[:take]}\n    return (sorted_word_ratios, the_set)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"\n    Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    term = alpha * y\n    w = X.T @ term\n    predictions = X @ w\n    b = np.mean(y - predictions)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute LOF scores and identify outliers using the Local Outlier Factor algorithm.\n\n    Parameters:\n    - data: numpy.ndarray of shape (n, m), where n is the number of samples and m is the number of features.\n    - k: int, number of nearest neighbors to consider.\n    - epsilon: float, threshold for identifying outliers (LOF > epsilon).\n\n    Returns:\n    - Tuple of:\n        - list_of_scores: list of LOF scores rounded to 4 decimal places.\n        - list_of_outlier_indices: sorted list of indices of samples with LOF > epsilon.\n    \"\"\"\n    (n, m) = data.shape\n    data_expanded = data[:, np.newaxis, :]\n    diff = data_expanded - data_expanded.swapaxes(0, 1)\n    squared_distances = np.sum(diff ** 2, axis=-1)\n    distances = np.sqrt(squared_distances)\n    k_distance = [0.0] * n\n    Nk_list = [[] for _ in range(n)]\n    for i in range(n):\n        pairs = []\n        for j in range(n):\n            if j != i:\n                pairs.append((distances[i, j], j))\n        pairs.sort(key=lambda x: (x[0], x[1]))\n        k_nearest = pairs[:k]\n        k_distance[i] = k_nearest[-1][0]\n        Nk_list[i] = [j for (d, j) in k_nearest]\n    lrd = [0.0] * n\n    for i in range(n):\n        neighbors = Nk_list[i]\n        sum_reach = 0.0\n        for q in neighbors:\n            sum_reach += max(k_distance[q], distances[i, q])\n        lrd[i] = k / sum_reach\n    lof = [0.0] * n\n    for i in range(n):\n        neighbors = Nk_list[i]\n        sum_lrd = 0.0\n        for q in neighbors:\n            sum_lrd += lrd[q]\n        lof[i] = sum_lrd / (k * lrd[i])\n    lof_rounded = np.round(lof, 4).tolist()\n    outliers = [i for i in range(n) if lof[i] > epsilon]\n    return (lof_rounded, sorted(outliers))"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"\n    Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility. If *None*, the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        lower = base + 1\n        upper = base + 9\n        for _ in range(n_train):\n            x = random.uniform(lower, upper)\n            y = random.uniform(lower, upper)\n            X_train_list.append([x, y])\n            y_train_list.append(c)\n        for _ in range(n_val):\n            x = random.uniform(lower, upper)\n            y = random.uniform(lower, upper)\n            X_val_list.append([x, y])\n            y_val_list.append(c)\n    X_train = np.array(X_train_list)\n    X_val = np.array(X_val_list)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    y_train = np.array(y_train_list)\n    y_val = np.array(y_val_list)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centers = X[:k].copy()\n    prev_labels = None\n    for _ in range(max_iters):\n        differences = X[:, np.newaxis, :] - centers[np.newaxis, :, :]\n        squared_distances = np.sum(differences ** 2, axis=2)\n        labels = np.argmin(squared_distances, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        new_centers = np.zeros_like(centers)\n        for i in range(k):\n            points_in_cluster = X[labels == i]\n            if points_in_cluster.shape[0] == 0:\n                new_centers[i] = centers[i]\n            else:\n                new_centers[i] = np.mean(points_in_cluster, axis=0)\n        centers = new_centers\n    rounded_centers = np.round(centers, 4).tolist()\n    return (labels.tolist(), rounded_centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"\n    Fits a linear model with Elastic-Net regularisation using batch gradient descent.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a float.\n        Every number is rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(0.0, 4) for _ in range(n)], round(0.0, 4))\n    for _ in range(iterations):\n        y_pred = X @ w + b\n        r = y - y_pred\n        dw_without_reg = -2 * X.T @ r\n        sign_w = np.sign(w).copy()\n        sign_w[sign_w == 0] = -1\n        dw_reg = l1_penalty * sign_w + 2 * l2_penalty * w\n        dw = (dw_without_reg + dw_reg) / m\n        db = -2 * np.sum(r) / m\n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n    weights_rounded = [round(val, 4) for val in w]\n    bias_rounded = round(b, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"\n    Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    for (layer_idx, layer) in enumerate(weights):\n        biased_input = np.insert(current_input, 0, 1)\n        weight_matrix = np.array(layer)\n        outputs = weight_matrix @ biased_input\n        if layer_idx != len(weights) - 1:\n            outputs = np.maximum(outputs, 0)\n        current_input = outputs\n    result = current_input.tolist()\n    if len(result) == 1:\n        return round(result[0], 4)\n    else:\n        return [round(x, 4) for x in result]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering and return the final centroids.\n\n    Parameters:\n    - X: 2D NumPy array of shape (n_samples, n_features)\n    - k: Number of clusters\n    - max_iters: Maximum number of iterations (default: 100)\n\n    Returns:\n    - List of lists, where each inner list is a centroid rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k, :].copy()\n    for _ in range(max_iters):\n        differences = X[:, np.newaxis, :] - centroids[np.newaxis, :, :]\n        squared_distances = np.sum(differences ** 2, axis=2)\n        labels = np.argmin(squared_distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for j in range(k):\n            cluster_points = X[labels == j]\n            if cluster_points.shape[0] == 0:\n                new_centroids[j] = centroids[j]\n            else:\n                new_centroids[j] = np.mean(cluster_points, axis=0)\n        diff = new_centroids - centroids\n        distances = np.sqrt(np.sum(diff ** 2, axis=1))\n        if np.all(distances < 0.0001):\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n    sorted_indices = np.lexsort(tuple((centroids[:, i] for i in reversed(range(n_features)))))\n    sorted_centroids = centroids[sorted_indices]\n    rounded_centroids = np.round(sorted_centroids, 4)\n    return [list(row) for row in rounded_centroids]"}
